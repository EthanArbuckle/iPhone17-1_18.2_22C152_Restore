void sub_1000041A0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_10003B858();
  if (v0 <= 0x3F)
  {
    sub_1000043EC(319, &qword_100159478, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F)
    {
      sub_1000043EC(319, &qword_100159480, (uint64_t (*)(uint64_t))type metadata accessor for CalculatorLayout, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LazyState);
      if (v2 <= 0x3F)
      {
        sub_1000043A4(319, &qword_100159488);
        if (v3 <= 0x3F)
        {
          sub_1000043A4(319, (unint64_t *)&unk_100159490);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_1000043A4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for LazyState();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_1000043EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_100004450@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = 0x1000000000000;
  if (!v2[22]) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 0x10000000000;
  if (!v2[21]) {
    uint64_t v4 = 0;
  }
  v5 = &_mh_execute_header;
  if (!v2[20]) {
    v5 = 0;
  }
  uint64_t v6 = 0x1000000;
  if (!v2[19]) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 0x10000;
  if (!v2[18]) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 256;
  if (!v2[17]) {
    uint64_t v8 = 0;
  }
  return sub_1000044E4(a1, v8 | v2[16] | v7 | v6 | (unint64_t)v5 | v4 | v3, a2);
}

uint64_t sub_1000044E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = result;
  if ((a2 & 0x10000) != 0)
  {
    if (qword_100154520 != -1) {
      swift_once();
    }
    result = sub_100034AF8(v3, static CalculatorButtonRepresentable.alternateRPNButtons);
    if (result)
    {
      if (v3 <= 0x37u && ((1 << v3) & 0x80001040000100) != 0) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
  }
  if ((v3 & 0x100) != 0)
  {
    if (qword_100154518 != -1) {
      swift_once();
    }
    result = sub_100034AF8(v3, static CalculatorButtonRepresentable.shiftableButtons);
    if (result)
    {
      result = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v3 & 0x10000);
      LOBYTE(v3) = result;
      goto LABEL_15;
    }
  }
  uint64_t v6 = 0;
  if ((v3 & 0x10000FF) != 0x1000001 && (v3 & 0x1000000FFLL) != 0x100000002)
  {
LABEL_15:
    if (v3 == 10)
    {
      result = swift_retain();
      uint64_t v6 = v4;
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v6 = 0;
  }
LABEL_18:
  *a3 = v6;
  return result;
}

uint64_t sub_100004654(uint64_t a1)
{
  return a1;
}

uint64_t sub_100004684(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(double *)(v6 + 32) = a1;
  *(double *)(v6 + 40) = a2;
  *(void *)(v6 + 24) = a6;
  type metadata accessor for MainActor();
  *(void *)(v6 + 48) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000088D4, v8, v7);
}

uint64_t sub_100004720()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000047BC(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(double *)(v8 + 48) = a3;
  *(double *)(v8 + 56) = a4;
  *(double *)(v8 + 32) = a1;
  *(double *)(v8 + 40) = a2;
  *(void *)(v8 + 24) = a8;
  type metadata accessor for MainActor();
  *(void *)(v8 + 64) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100009D08, v10, v9);
}

uint64_t sub_10000485C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000048D0()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100004984@<X0>(uint64_t a1@<X8>)
{
  sub_100032FA0(&qword_1001555B0);
  Binding.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

unint64_t sub_100004A98()
{
  unint64_t result = qword_1001550B8;
  if (!qword_1001550B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001550B8);
  }
  return result;
}

uint64_t sub_100004AD8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CalculatorToolbarViewModel();
  uint64_t v2 = swift_allocObject();
  *(_WORD *)(v2 + 16) = 256;
  uint64_t result = ObservationRegistrar.init()();
  *a1 = v2;
  return result;
}

uint64_t sub_100004B2C(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(double *)(v8 + 48) = a3;
  *(double *)(v8 + 56) = a4;
  *(double *)(v8 + 32) = a1;
  *(double *)(v8 + 40) = a2;
  *(void *)(v8 + 24) = a8;
  type metadata accessor for MainActor();
  *(void *)(v8 + 64) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000113B4, v10, v9);
}

uint64_t sub_100004BCC()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_100004C94()
{
  id result = [objc_allocWithZone((Class)_UIKeyboardFeedbackGenerator) init];
  qword_100161338 = (uint64_t)result;
  return result;
}

uint64_t sub_100004CC8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100004D28()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100004DD8(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(double *)(v6 + 32) = a1;
  *(double *)(v6 + 40) = a2;
  *(void *)(v6 + 24) = a6;
  type metadata accessor for MainActor();
  *(void *)(v6 + 48) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10001103C, v8, v7);
}

uint64_t sub_100004E74()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_100004F70@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10001EFCC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 48);
  return result;
}

unint64_t sub_100005018()
{
  unint64_t result = qword_1001595F0;
  if (!qword_1001595F0)
  {
    type metadata accessor for _TaskModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001595F0);
  }
  return result;
}

uint64_t sub_100005070@<X0>(uint64_t a1@<X8>)
{
  sub_100032FA0(&qword_1001555B0);
  Binding.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

void sub_100005144()
{
  if (!qword_100158168)
  {
    type metadata accessor for EditMode();
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100158168);
    }
  }
}

unint64_t sub_10000519C()
{
  unint64_t result = qword_100159510;
  if (!qword_100159510)
  {
    sub_1000317D8(&qword_1001594E0);
    type metadata accessor for CalculatorLayout();
    sub_10003D5F4();
    sub_100033224((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100158208, &qword_100158210);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159510);
  }
  return result;
}

unint64_t sub_1000052B8()
{
  unint64_t result = qword_100156AA8;
  if (!qword_100156AA8)
  {
    type metadata accessor for CalculateExpressionView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156AA8);
  }
  return result;
}

void sub_100005310(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CalculatorViewModel();
  swift_allocObject();
  id v4 = a1;
  uint64_t v5 = sub_100015AA0(v4);

  *a2 = v5;
}

uint64_t sub_10000536C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  switch((char)a1)
  {
    case 1:
      swift_getKeyPath();
      v17[0] = a2;
      sub_100082AE8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if ((*(unsigned char *)(a2
                     + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed) & 1) != 0)
        goto LABEL_9;
      goto LABEL_16;
    case 2:
      v17[3] = (uint64_t)&type metadata for NotesFeatureFlags;
      v17[4] = sub_10003BF2C();
      char v4 = isFeatureEnabled(_:)();
      sub_10000DB7C((uint64_t)v17);
      if ((v4 & 1) == 0) {
        goto LABEL_16;
      }
      swift_getKeyPath();
      v17[0] = a2;
      sub_100082AE8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(a2
                    + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed) != 1
        || (sub_1000A113C() & 1) == 0)
      {
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 3:
      swift_getKeyPath();
      v17[0] = a2;
      sub_100082AE8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if ((*(unsigned char *)(a2
                     + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed) & 1) != 0)
        goto LABEL_9;
LABEL_16:
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
        if (qword_100154750 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_100021598(v8, (uint64_t)qword_100161340);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = swift_slowAlloc();
          v17[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 136446466;
          uint64_t v12 = String.init<A>(describing:)();
          sub_10000DAA8(v12, v13, v17);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v11 + 12) = 2082;
          uint64_t v14 = String.init<A>(describing:)();
          sub_10000DAA8(v14, v15, v17);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "forced mode: %{public}s from current mode: %{public}s", (uint8_t *)v11, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        return 0;
      }
      return v3;
    default:
LABEL_9:
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v5)
      {
LABEL_10:
        if (qword_100154790 != -1) {
          swift_once();
        }
        LOBYTE(v17[0]) = 0;
        int v6 = SBSGetScreenLockStatus();
        if (LOBYTE(v17[0]) && v6)
        {
          switch((char)v3)
          {
            case 1:
            case 2:
            case 3:
              goto LABEL_16;
            default:
              swift_bridgeObjectRelease();
              return 0;
          }
        }
      }
      return v3;
  }
}

uint64_t sub_1000058D8()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100005998(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001493A0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000059E4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100005AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  double v5 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_100005BB8()
{
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_10004BC10;
  return sub_100007BF4(v0 + 16);
}

uint64_t sub_100005C4C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100005CDC@<X0>(void *a1@<X8>)
{
  uint64_t result = GeometryProxy.safeAreaInsets.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t sub_100005D0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D20A4(&qword_1001590B0, (uint64_t (*)(void))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_100005D4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000215D0(v3, a2);
  sub_100021598(v3, (uint64_t)a2);
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100005DD4(uint64_t a1)
{
  v1[13] = a1;
  type metadata accessor for MainActor();
  v1[14] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[15] = v3;
  v1[16] = v2;
  return _swift_task_switch(sub_100007C8C, v3, v2);
}

uint64_t type metadata accessor for SceneDelegate()
{
  return self;
}

id sub_100005E90()
{
  id result = [self standardUserDefaults];
  qword_100161370 = (uint64_t)result;
  return result;
}

uint64_t sub_100005ECC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100005F04()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100005FA0()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10000605C()
{
  if (qword_1001546B8 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_100032FA0(&qword_100155AD0);
  sub_100021598(v1, (uint64_t)qword_1001612C0);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v2;
  void *v2 = v0;
  v2[1] = sub_10003819C;
  return Tips.Event.donate<>()();
}

uint64_t sub_100006138()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000061D4()
{
  unint64_t result = qword_100159978;
  if (!qword_100159978)
  {
    sub_1000317D8(&qword_100159960);
    sub_100040BE4(&qword_100159980, &qword_100159970);
    sub_100040BE4(&qword_100159988, &qword_100159968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159978);
  }
  return result;
}

unint64_t sub_100006298()
{
  unint64_t result = qword_1001559E0;
  if (!qword_1001559E0)
  {
    sub_1000317D8(&qword_1001559E8);
    sub_100040BE4(&qword_1001559F0, &qword_1001559F8);
    sub_100040BE4(&qword_100155A00, &qword_100155A08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001559E0);
  }
  return result;
}

uint64_t sub_10000635C@<X0>(uint64_t a1@<X8>)
{
  return sub_100024F08(a1);
}

uint64_t sub_1000063A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001B388(a1, a2);
}

uint64_t assignWithCopy for AccessibilityMathEquationViewModifier(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t sub_10000643C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *char v4 = v2;
  v4[1] = sub_1000070F0;
  return v6(a1);
}

uint64_t sub_100006518(uint64_t a1)
{
  sub_100039C00(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(unsigned char *)(a1 + 184),
    *(unsigned char *)(a1 + 185));
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AppDelegate()
{
  return self;
}

void sub_1000065D8()
{
  sub_100004A98();
  uint64_t v0 = (void *)static OS_dispatch_queue.main.getter();
  id v1 = [objc_allocWithZone((Class)PDCPreflightManager) initWithTargetQueue:v0];

  qword_100155018 = (uint64_t)v1;
}

uint64_t sub_100006634(long long *a1, _OWORD *a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = *a1;
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 3);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  type metadata accessor for MainActor();
  sub_10002013C((uint64_t)a2);
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = &protocol witness table for MainActor;
  long long v12 = a2[3];
  *(_OWORD *)(v11 + 64) = a2[2];
  *(_OWORD *)(v11 + 80) = v12;
  long long v13 = a2[1];
  *(_OWORD *)(v11 + 32) = *a2;
  *(_OWORD *)(v11 + 48) = v13;
  long long v14 = v16;
  *(_OWORD *)(v11 + 96) = a2[4];
  *(_OWORD *)(v11 + 112) = v14;
  *(void *)(v11 + 128) = v7;
  *(void *)(v11 + 136) = v8;
  sub_100013710((uint64_t)v6, (uint64_t)&unk_100155A30, v11);
  return swift_release();
}

uint64_t sub_100006784(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    __CocoaSet.endIndex.getter();
    char v6 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100038DF8(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_100007304(v3, v5, v2 != 0, a1);
    uint64_t v7 = v11;
    sub_100038DF8(v3, v5, v2 != 0);
    return v7;
  }
  uint64_t result = sub_100041F2C(a1);
  if ((v10 & 1) == 0)
  {
    uint64_t v5 = v9;
    if (*(_DWORD *)(a1 + 36) == v9)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100006894(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  type metadata accessor for MainActor();
  sub_10002013C((uint64_t)a2);
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = &protocol witness table for MainActor;
  long long v12 = a2[3];
  *(_OWORD *)(v11 + 64) = a2[2];
  *(_OWORD *)(v11 + 80) = v12;
  *(_OWORD *)(v11 + 96) = a2[4];
  long long v13 = a2[1];
  *(_OWORD *)(v11 + 32) = *a2;
  *(_OWORD *)(v11 + 48) = v13;
  *(void *)(v11 + 112) = v7;
  *(void *)(v11 + 120) = v8;
  sub_100013710((uint64_t)v6, (uint64_t)&unk_100155A40, v11);
  return swift_release();
}

uint64_t sub_1000069D4(uint64_t a1)
{
  sub_100039AE4(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(unsigned char *)(a1 + 184),
    *(unsigned char *)(a1 + 185));
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100006A70(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a1 + *a3;
  swift_beginAccess();
  uint64_t v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v6, a2, v7);
  return swift_endAccess();
}

void sub_100006B10()
{
  if (!sub_10002C594())
  {
    id v0 = [self currentDevice];
    id v1 = [v0 userInterfaceIdiom];

    if (v1)
    {
      id v2 = [self mainScreen];
      [v2 bounds];
      double v4 = v3;

      if (v4 != sub_1000412D8() && (sub_1000298D0() & 1) == 0)
      {
        swift_getKeyPath();
        sub_10002B4E8();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
      }
    }
  }
}

uint64_t sub_100006C54()
{
  return swift_release();
}

void sub_100006D38(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

id sub_100006D80(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_100006E5C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  NSString v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10003819C;
  id v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100154F80 + dword_100154F80);
  return v6(a1, v4);
}

uint64_t sub_100006F14(uint64_t a1, char a2)
{
  if (a1) {
    char v3 = sub_1000298D0();
  }
  else {
    char v3 = 0;
  }
  uint64_t v4 = 0x100000000000ALL;
  switch(a2)
  {
    case 1:
      swift_bridgeObjectRelease();
      if (v3)
      {
LABEL_9:
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v6 & 1) == 0) {
          uint64_t v4 = 10;
        }
      }
      break;
    default:
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v3 & 1 | ((v5 & 1) == 0))
      {
        switch(a2)
        {
          case 0:
          case 1:
          case 2:
            goto LABEL_9;
          case 3:
            swift_bridgeObjectRelease();
            return v4;
          default:
            JUMPOUT(0);
        }
      }
      return result;
  }
  return v4;
}

uint64_t sub_1000070F0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000071E8()
{
  uint64_t result = type metadata accessor for LayoutDirection();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UserInterfaceSizeClass();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ObservationRegistrar();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

void sub_100007304(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10001CE8C(0, &qword_100154A50);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10001CE8C(0, &qword_100154A50);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  long long v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_10000757C()
{
  uint64_t v0 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalculatorTipManager();
  uint64_t inited = swift_initStaticObject();
  static Tips.configure(_:)();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  sub_100013710((uint64_t)v2, (uint64_t)&unk_100157930, v5);
  uint64_t result = swift_release();
  qword_1001612D8 = inited;
  return result;
}

uint64_t sub_1000076A4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000772C()
{
  unint64_t result = qword_100155A88;
  if (!qword_100155A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155A88);
  }
  return result;
}

unint64_t sub_100007780()
{
  unint64_t result = qword_100157688;
  if (!qword_100157688)
  {
    sub_1000317D8(&qword_1001575F0);
    sub_1000317D8(&qword_1001575E0);
    sub_1000317D8(&qword_1001575D8);
    sub_10001DD30();
    swift_getOpaqueTypeConformance2();
    sub_10001DED0();
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100157690, &qword_100157698);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157688);
  }
  return result;
}

unint64_t sub_1000078AC()
{
  unint64_t result = qword_100157588;
  if (!qword_100157588)
  {
    sub_1000317D8(&qword_100157590);
    sub_1000317D8(&qword_1001574D8);
    sub_1000317D8(&qword_1001574A8);
    sub_100031A64();
    sub_100040BE4(&qword_100157560, &qword_1001574A8);
    swift_getOpaqueTypeConformance2();
    sub_100031B30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157588);
  }
  return result;
}

unint64_t sub_1000079AC()
{
  unint64_t result = qword_100159AF8;
  if (!qword_100159AF8)
  {
    sub_1000317D8(&qword_100159AD0);
    sub_1000317D8(&qword_100159B00);
    sub_10003B180();
    swift_getOpaqueTypeConformance2();
    sub_1000332B4(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159AF8);
  }
  return result;
}

uint64_t sub_100007A8C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, double (**a3)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v14 = *a2;
    char v15 = *((unsigned char *)a2 + 8);
    uint64_t v12 = a2[2];
    char v13 = *((unsigned char *)a2 + 24);
    uint64_t v10 = a2[4];
    char v11 = *((unsigned char *)a2 + 40);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
    *(_OWORD *)(v6 + 40) = v7;
    *(_OWORD *)(v6 + 49) = *(_OWORD *)((char *)a2 + 25);
    sub_100025ED0((uint64_t)&v14);
    sub_100025ED0((uint64_t)&v12);
    sub_100004654((uint64_t)&v10);
    uint64_t v8 = sub_10003DDE8;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v6 = 0;
  }
  *a3 = v8;
  a3[1] = (double (*)@<D0>(uint64_t@<X8>))v6;
  return swift_retain();
}

uint64_t sub_100007B68(uint64_t a1)
{
  return a1;
}

uint64_t sub_100007BF4(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 48) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000155E4, v3, v2);
}

uint64_t sub_100007C8C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  char v2 = *(unsigned char *)(v1 + 32);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 16);
  *(unsigned char *)(v0 + 32) = v2;
  char v3 = *(unsigned char *)(v1 + 32);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v1 + 16);
  *(unsigned char *)(v0 + 80) = v3;
  sub_100032FA0(&qword_1001555B8);
  uint64_t v4 = Binding.wrappedValue.getter();
  if (*(unsigned char *)(v0 + 34) == 1)
  {
    double v5 = *(double *)(*(void *)(v0 + 104) + 40) * 1000000000.0;
    if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -1.0)
      {
        if (v5 < 1.84467441e19)
        {
          unint64_t v6 = (unint64_t)v5;
          long long v7 = (void *)swift_task_alloc();
          *(void *)(v0 + 136) = v7;
          *long long v7 = v0;
          v7[1] = sub_1000E060C;
          uint64_t v4 = v6;
          return static Task<>.sleep(nanoseconds:)(v4);
        }
LABEL_13:
        __break(1u);
        return static Task<>.sleep(nanoseconds:)(v4);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = *(_OWORD **)(v0 + 104);
  swift_release();
  *(_OWORD *)(v0 + 88) = *v8;
  *(unsigned char *)(v0 + 33) = 1;
  sub_100032FA0(&qword_100154898);
  State.wrappedValue.setter();
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v0 + 56) = *(unsigned char *)(v0 + 32);
  *(unsigned char *)(v0 + 35) = 1;
  Binding.wrappedValue.setter();
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100007E70(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_100033AA8(v2, v1);
  swift_release();
  swift_getKeyPath();
  sub_1000330BC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v4 = *(unsigned __int8 *)(v3 + 53);
  uint64_t result = swift_release();
  if (v4 == 5)
  {
    uint64_t v6 = swift_retain();
    sub_100033AA8(v6, v1);
    swift_release();
    sub_10000A794();
    swift_release();
    uint64_t v7 = swift_retain();
    sub_100033AA8(v7, v1);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    sub_100032FA0(&qword_100156B68);
    return FocusState.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_100008068()
{
  uint64_t v0 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_100032FA0(&qword_1001570C0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.automatic.getter();
  sub_100032FA0(&qword_100157130);
  uint64_t v5 = sub_1000317D8(&qword_100157138);
  unint64_t v6 = sub_10003A524();
  v8[0] = v5;
  v8[1] = v6;
  swift_getOpaqueTypeConformance2();
  ToolbarItem<>.init(placement:content:)();
  sub_100040BE4(&qword_1001570C8, &qword_1001570C0);
  static ToolbarContentBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100008238()
{
  *(_WORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 18) = 0;
  id v1 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v1 setNumberStyle:6];
  *(void *)(v0 + 24) = v1;
  ObservationRegistrar.init()();
  swift_getKeyPath();
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return v0;
}

uint64_t sub_100008350(uint64_t a1, uint64_t *a2)
{
  static Color.gray.getter();
  uint64_t v3 = Color.opacity(_:)();
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t sub_1000083A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  char v23 = a6 & 1;
  swift_retain();
  swift_retain();
  sub_100032F38(a5, v23);
  if ((a22 & 1) == 0)
  {
    swift_retain();
    swift_retain();
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000084A8()
{
  uint64_t v0 = sub_100032FA0(&qword_1001569C8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100032FA0(&qword_100157150);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_100157138);
  __chkstk_darwin(v7);
  id v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Button.init(action:label:)();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v6, v3, v0);
  *(void *)&v6[*(int *)(v4 + 36)] = 0;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_10003ACC8();
  View.accessibilityHidden(_:)();
  sub_100032F44((uint64_t)v6, &qword_100157150);
  sub_10003A524();
  View.focusable(_:)();
  return sub_100032F44((uint64_t)v9, &qword_100157138);
}

void sub_1000086E8(char a1)
{
  int v2 = a1 & 1;
  swift_getKeyPath();
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  int v3 = CalculateExpression.assumeDegrees.getter() & 1;
  swift_release();
  if (v3 != v2)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    CalculateExpression.assumeDegrees.setter();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    CalculateExpression.assumeDegrees.setter();
    swift_release();
    if (qword_100154760 != -1) {
      swift_once();
    }
    uint64_t v4 = (void *)qword_100161370;
    NSString v5 = String._bridgeToObjectiveC()();
    [v4 setBool:a1 & 1 forKey:v5];
  }
}

uint64_t sub_1000088D4()
{
  double v2 = *(double *)(v0 + 32);
  double v1 = *(double *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_release();
  char v4 = *(unsigned char *)(v3 + 24);
  uint64_t v5 = swift_retain();
  uint64_t v6 = sub_10002BD88(v5, v4);
  swift_release();
  swift_getKeyPath();
  *(void *)(v0 + 16) = v6;
  sub_10000DA60((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v7 = *(double *)(v6 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
  double v8 = *(double *)(v6 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize + 8);
  swift_release();
  if (v7 != v2 || v8 != v1)
  {
    uint64_t v11 = *(void *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v12 = swift_retain();
    uint64_t v13 = sub_10002BD88(v12, v4);
    swift_release();
    swift_getKeyPath();
    uint64_t v14 = (void *)swift_task_alloc();
    v14[2] = v13;
    v14[3] = v11;
    v14[4] = v10;
    *(void *)(v0 + 16) = v13;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_task_dealloc();
  }
  char v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100008AC8()
{
  uint64_t v0 = sub_100032FA0(&qword_100155250);
  __chkstk_darwin(v0 - 8);
  double v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CalculateExpression.Base();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v15 - v8;
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_100161370;
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 integerForKey:v11];

  CalculateExpression.Base.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
    int v13 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
    if (v13 == enum case for CalculateExpression.Base.base8(_:))
    {
      uint64_t v12 = 0;
LABEL_12:
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      return v12;
    }
    if (v13 != enum case for CalculateExpression.Base.base10(_:))
    {
      if (v13 == enum case for CalculateExpression.Base.base16(_:))
      {
        uint64_t v12 = 2;
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    uint64_t v12 = 1;
    goto LABEL_12;
  }
  sub_100032F44((uint64_t)v2, &qword_100155250);
  return 2;
}

unint64_t sub_100008D84()
{
  unint64_t result = qword_100159550;
  if (!qword_100159550)
  {
    sub_1000317D8(&qword_1001594F8);
    sub_1000317D8(&qword_1001594E8);
    sub_1000317D8(&qword_100154A48);
    sub_1000317D8(&qword_1001594E0);
    sub_10000519C();
    sub_10003969C();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159550);
  }
  return result;
}

unint64_t sub_100008E90()
{
  unint64_t result = qword_10015A310;
  if (!qword_10015A310)
  {
    sub_1000317D8(&qword_10015A308);
    sub_1000317D8(&qword_10015A318);
    sub_100040BE4(&qword_10015A320, &qword_10015A318);
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100157520, &qword_100157528);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015A310);
  }
  return result;
}

unint64_t sub_100008F90()
{
  unint64_t result = qword_100155B98;
  if (!qword_100155B98)
  {
    sub_1000317D8(&qword_100155B30);
    sub_1000317D8(&qword_100155B20);
    sub_100040BE4(&qword_100155B80, &qword_100155B20);
    sub_100031A10();
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100155BA0, &qword_100155BA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155B98);
  }
  return result;
}

uint64_t sub_1000090A4(long long *a1, uint64_t *a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = *a1;
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 3);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  type metadata accessor for MainActor();
  uint64_t v19 = *a2;
  char v20 = *((unsigned char *)a2 + 8);
  uint64_t v17 = a2[2];
  char v18 = *((unsigned char *)a2 + 24);
  uint64_t v15 = a2[4];
  char v16 = *((unsigned char *)a2 + 40);
  sub_100025ED0((uint64_t)&v19);
  sub_100025ED0((uint64_t)&v17);
  sub_100004654((uint64_t)&v15);
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = &protocol witness table for MainActor;
  long long v12 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 48) = v12;
  *(_OWORD *)(v11 + 57) = *(_OWORD *)((char *)a2 + 25);
  *(_OWORD *)(v11 + 80) = v14;
  *(void *)(v11 + 96) = v7;
  *(void *)(v11 + 104) = v8;
  sub_100013710((uint64_t)v6, (uint64_t)&unk_100157118, v11);
  return swift_release();
}

uint64_t sub_100009230(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  type metadata accessor for MainActor();
  uint64_t v18 = *a2;
  char v19 = *((unsigned char *)a2 + 8);
  uint64_t v16 = a2[2];
  char v17 = *((unsigned char *)a2 + 24);
  uint64_t v14 = a2[4];
  char v15 = *((unsigned char *)a2 + 40);
  sub_100025ED0((uint64_t)&v18);
  sub_100025ED0((uint64_t)&v16);
  sub_100004654((uint64_t)&v14);
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = &protocol witness table for MainActor;
  long long v12 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 48) = v12;
  *(_OWORD *)(v11 + 57) = *(_OWORD *)((char *)a2 + 25);
  *(void *)(v11 + 80) = v7;
  *(void *)(v11 + 88) = v8;
  sub_100013710((uint64_t)v6, (uint64_t)&unk_100157128, v11);
  return swift_release();
}

uint64_t sub_1000093AC@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000094FC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CalculateExpression.Base();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v16 = a1;
  switch((char)a1)
  {
    case 3:
      swift_bridgeObjectRelease();
      uint64_t v11 = 1;
      break;
    default:
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = v10 & 1;
      break;
  }
  swift_getKeyPath();
  uint64_t v17 = v1;
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v1 + 72) != v11)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v15 = v3;
    __chkstk_darwin(KeyPath);
    *(&v15 - 2) = v1;
    *(&v15 - 1) = v11;
    uint64_t v17 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v3 = v15;
  }
  switch((char)v16)
  {
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_10;
    default:
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13)
      {
LABEL_10:
        swift_getKeyPath();
        uint64_t v17 = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *(unsigned int *)*(&off_10014A890 + *(char *)(v1 + 64)), v3);
        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v4 + 104))(v9, enum case for CalculateExpression.Base.base10(_:), v3);
      }
      sub_10000AD74((uint64_t)v9);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
}

uint64_t sub_100009930(uint64_t a1)
{
  sub_100039C00(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(unsigned char *)(a1 + 184),
    *(unsigned char *)(a1 + 185));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void *assignWithCopy for KeypadButtonAction(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = (void *)a1[2];
  uint64_t v6 = (void *)a2[2];
  a1[2] = v6;
  id v7 = v6;

  return a1;
}

double sub_100009A7C()
{
  uint64_t v0 = self;
  id v1 = [v0 currentDevice];
  id v2 = [v1 userInterfaceIdiom];

  if (v2 == (id)1
    || (id v3 = [v0 currentDevice],
        id v4 = [v3 userInterfaceIdiom],
        v3,
        double v5 = 2.0,
        v4 == (id)6))
  {
    uint64_t v6 = self;
    id v7 = [v6 mainScreen];
    [v7 bounds];
    double v9 = v8;

    double v5 = 5.0;
    if (v9 == sub_1000412D8())
    {
      id v10 = [v6 mainScreen];
      [v10 bounds];
      double v12 = v11;

      if (v12 == sub_10002B248()) {
        return 2.0;
      }
    }
  }
  return v5;
}

uint64_t sub_100009BB4@<X0>(uint64_t a1@<X8>)
{
  if (qword_100154668 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_100156440;
  char v3 = byte_100156448;
  *(void *)a1 = qword_100156438;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  swift_retain();

  return swift_retain();
}

uint64_t destroy for CalculatorAppAlertView()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100009D08()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  char v2 = *(unsigned char *)(v1 + 24);
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_10002BD88(v3, v2);
  swift_release();
  swift_getKeyPath();
  *(void *)(v0 + 16) = v4;
  sub_10000DA60((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  if ((static EdgeInsets.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 56);
    long long v12 = *(_OWORD *)(v0 + 32);
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_10002BD88(v7, v2);
    swift_release();
    swift_getKeyPath();
    uint64_t v9 = swift_task_alloc();
    *(void *)(v9 + 16) = v8;
    *(_OWORD *)(v9 + 24) = v12;
    *(void *)(v9 + 40) = v6;
    *(void *)(v9 + 48) = v5;
    *(void *)(v0 + 16) = v8;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_task_dealloc();
  }
  id v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100009F40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = 0x1000000000000;
  if (!v1[6]) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 0x10000000000;
  if (!v1[5]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = &_mh_execute_header;
  if (!v1[4]) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0x1000000;
  if (!v1[3]) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 0x10000;
  if (!v1[2]) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 256;
  if (!v1[1]) {
    uint64_t v8 = 0;
  }
  uint64_t result = sub_100009FEC(v8 | *v1 | v7 | v6 | (unint64_t)v5 | v4 | v3);
  *(void *)a1 = 0x4000000000000000;
  *(void *)(a1 + 8) = result;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_100009FEC(uint64_t result)
{
  uint64_t v1 = result;
  if ((result & 0x10000) != 0)
  {
    if (qword_100154520 != -1) {
      swift_once();
    }
    uint64_t result = sub_100034AF8(v1, static CalculatorButtonRepresentable.alternateRPNButtons);
    if (result)
    {
      if (v1 > 0x37u || ((1 << v1) & 0x80001040000100) == 0) {
        goto LABEL_15;
      }
LABEL_7:
      __break(1u);
    }
  }
  if ((v1 & 0x100) != 0)
  {
    if (qword_100154518 != -1) {
      swift_once();
    }
    uint64_t result = sub_100034AF8(v1, static CalculatorButtonRepresentable.shiftableButtons);
    if (result)
    {
      uint64_t v1 = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
LABEL_15:
      uint64_t result = 1937075312;
      switch((char)v1)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 10:
        case 52:
          goto LABEL_16;
        default:
          goto LABEL_7;
      }
    }
  }
  if ((v1 & 0x10000FF) == 0x1000001)
  {
LABEL_16:
    return Image.init(_internalSystemName:)();
  }
  else
  {
    if ((v1 & 0x1000000FFLL) != 0x100000002) {
      goto LABEL_15;
    }
    __break(1u);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CalculatorModeSwitchPPTTests(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_retain();
  return a1;
}

void *sub_10000A278(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10000A2D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *(unsigned char *)(v1 + *(int *)(v6 + 56) + 8);
  uint64_t v8 = swift_retain();
  sub_10002BD88(v8, v7);
  swift_release();
  id v9 = [self currentDevice];
  id v10 = [v9 userInterfaceIdiom];
  swift_release();

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  if (v10)
  {
    char v11 = v5[*(int *)(a1 + 56) + 8];
    uint64_t v12 = swift_retain();
    sub_10002BD88(v12, v11);
    swift_release();
    char v13 = sub_1000412FC();
    swift_release();
  }
  else
  {
    char v13 = 1;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v13 & 1;
}

uint64_t sub_10000A474()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  sub_100032EAC(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));

  return swift_deallocObject();
}

unint64_t sub_10000A4D4()
{
  unint64_t result = qword_100155898;
  if (!qword_100155898)
  {
    sub_1000317D8(&qword_100155848);
    sub_1000317D8(&qword_100155838);
    sub_1000317D8(&qword_100155830);
    type metadata accessor for BorderlessButtonStyle();
    sub_10003AD68();
    sub_10000A640(&qword_100155880, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_10000A640(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155898);
  }
  return result;
}

uint64_t sub_10000A640(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A688(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100156CE8, &qword_100156CF0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A748(void (**a1)(char *), char a2, void (*a3)(char *, uint64_t, uint64_t), char a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  return sub_10002DA78(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10000A794()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_getKeyPath();
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  uint64_t v2 = CalculateExpression.format.getter();
  swift_release();
  if (v2 == 2) {
    return 4;
  }
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v0 + 49) != 1) {
    return 0;
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v1 + 40)) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_10000A930@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CalculatorViewModel();
  sub_100033194((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v11 = Environment.init<A>(_:)();
  char v3 = v2;
  type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  sub_100033194(&qword_100156660, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModelWrapper);
  uint64_t v4 = Environment.init<A>(_:)();
  char v6 = v5;
  type metadata accessor for CalculatorLayout();
  sub_100033194((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v7 = Environment.init<A>(_:)();
  char v9 = v8;
  type metadata accessor for CGSize(0);
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  type metadata accessor for CalculatorKeypadViewModel();
  swift_allocObject();
  sub_100008238();
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a1 = v11;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v6 & 1;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v9 & 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v13;
  *(void *)(a1 + 112) = v14;
  return result;
}

uint64_t sub_10000AB58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v11 = static HorizontalAlignment.center.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v2 = static VerticalAlignment.bottom.getter();
  if (qword_100154338 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100160E20;
  type metadata accessor for CalculatorViewModel();
  sub_100033104((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v4 = Environment.init<A>(_:)();
  char v6 = v5;
  type metadata accessor for CalculatorLayout();
  sub_100033104((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v7 = Environment.init<A>(_:)();
  char v9 = v8;
  sub_10003C4C4();
  uint64_t result = FocusState.init<A>()();
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v15;
  *(unsigned char *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v17;
  *(unsigned char *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v2;
  *(void *)(a1 + 80) = v3;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v4;
  *(unsigned char *)(a1 + 104) = v6 & 1;
  *(void *)(a1 + 112) = v7;
  *(unsigned char *)(a1 + 120) = v9 & 1;
  *(unsigned char *)(a1 + 128) = v12;
  *(void *)(a1 + 136) = v13;
  *(unsigned char *)(a1 + 144) = v14;
  return result;
}

uint64_t sub_10000AD74(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CalculateExpression.Base();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 16);
  swift_getKeyPath();
  uint64_t v12 = v7;
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  CalculateExpression.base.getter();
  swift_release();
  sub_100032FE4(&qword_100155248, (void (*)(uint64_t))&type metadata accessor for CalculateExpression.Base);
  char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) == 0)
  {
    swift_getKeyPath();
    uint64_t v12 = v7;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    id v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v10(v6, a1, v3);
    swift_retain();
    CalculateExpression.base.setter();
    swift_release();
    swift_getKeyPath();
    uint64_t v12 = v7;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v10(v6, a1, v3);
    swift_retain();
    CalculateExpression.base.setter();
    return swift_release();
  }
  return result;
}

uint64_t sub_10000B004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v2 = type metadata accessor for CalculatorHistoryView();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100032FA0(&qword_100154FE0);
  __chkstk_darwin(v39);
  char v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_100154FE8);
  __chkstk_darwin(v7);
  char v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = &v9[*(int *)(v10 + 56)];
  type metadata accessor for CalculatorLayout();
  v38[1] = sub_1000142FC((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  *(void *)uint64_t v11 = Environment.init<A>(_:)();
  v11[8] = v12 & 1;
  uint64_t v13 = &v9[*(int *)(v7 + 60)];
  type metadata accessor for CalculatorToolbarViewModel();
  sub_1000142FC(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  *(void *)uint64_t v13 = Environment.init<A>(_:)();
  v13[8] = v14 & 1;
  sub_100011D4C((uint64_t)v4);
  uint64_t v15 = static Alignment.center.getter();
  v38[0] = v16;
  uint64_t v17 = *(void *)(v1 + 32);
  char v18 = *(unsigned char *)(v1 + 40);
  sub_100032F38(v17, v18);
  char v19 = sub_100034598(v17, v18);
  sub_100032EAC(v17, v18);
  if (v19)
  {
    uint64_t KeyPath = swift_getKeyPath();
    type metadata accessor for CalculatorViewModel();
    sub_1000142FC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    uint64_t v21 = Environment.init<A>(_:)();
    uint64_t v22 = 0;
    char v24 = v23 & 1;
  }
  else
  {
    uint64_t KeyPath = 0;
    uint64_t v21 = 0;
    char v24 = 0;
    uint64_t v22 = 65280;
  }
  sub_10003D9E4((uint64_t)v4, (uint64_t)v6);
  v25 = &v6[*(int *)(v39 + 36)];
  *(void *)v25 = KeyPath;
  *((void *)v25 + 1) = 0;
  *((void *)v25 + 2) = v22;
  *((void *)v25 + 3) = v21;
  v25[32] = v24;
  uint64_t v26 = v38[0];
  *((void *)v25 + 5) = v15;
  *((void *)v25 + 6) = v26;
  sub_10003D988((uint64_t)v4);
  sub_10003B4B8((uint64_t)v6, (uint64_t)v9);
  v27 = &v9[*(int *)(v7 + 52)];
  type metadata accessor for CalculatorViewModel();
  sub_1000142FC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v28 = Environment.init<A>(_:)();
  char v30 = v29;
  uint64_t v31 = Environment.init<A>(_:)();
  char v33 = v32;
  uint64_t v34 = swift_getKeyPath();
  *(void *)v27 = v28;
  v27[8] = v30 & 1;
  *((void *)v27 + 2) = v31;
  v27[24] = v33 & 1;
  *((void *)v27 + 4) = v34;
  v27[40] = 0;
  uint64_t v35 = static Alignment.center.getter();
  sub_1000394C4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v40, 0.0, 1, INFINITY, 0, v35, v36);
  return sub_10003D324((uint64_t)v9);
}

uint64_t sub_10000B404()
{
  uint64_t v0 = sub_100032FA0(&qword_10015A4C8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = swift_projectBox();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v5(v3, v4, v0);
  Bindable.wrappedValue.getter();
  char v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  uint64_t v7 = v13;
  swift_getKeyPath();
  uint64_t v13 = v7;
  v12[1] = sub_100012230(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v8 = *(unsigned __int8 *)(v7 + 17);
  uint64_t result = swift_release();
  if (v8 == 1)
  {
    v5(v3, v4, v0);
    Bindable.wrappedValue.getter();
    v6(v3, v0);
    uint64_t v10 = v13;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v12[-2] = v10;
    LOBYTE(v12[-1]) = 0;
    uint64_t v13 = v10;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t assignWithCopy for DelayEffectModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

id sub_10000B738()
{
  ObjectType = (objc_class *)swift_getObjectType();
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager_appDomainID];
  void *v2 = 0xD000000000000014;
  v2[1] = 0x8000000100108B70;
  ObservationRegistrar.init()();
  v6.receiver = v0;
  v6.super_class = ObjectType;
  [super init];
  sub_10001391C();
  id result = [self sharedConnection];
  if (result)
  {
    uint64_t v5 = result;
    [result registerObserver:v3];

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t assignWithTake for KeypadButtonAction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

void sub_10000B89C()
{
  uint64_t v1 = v0;
  if (qword_100154790 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001613A0;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v2 + 64))
  {
    uint64_t v3 = *(void *)(v0 + 16);
    sub_100034264();
    swift_retain();
    CalculateExpression.clear()();
    swift_release();
    sub_1000DD494();
    swift_retain();
    CalculateExpression.clear()();
    swift_release();
    swift_getKeyPath();
    sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v3 + 41) == 1)
    {
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
  }
  else
  {
    if (qword_100154760 != -1) {
      swift_once();
    }
    uint64_t v5 = (void *)qword_100161370;
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 stringForKey:v6];

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      char v9 = (void *)qword_100161370;
      NSString v10 = String._bridgeToObjectiveC()();
      id v11 = [v9 stringForKey:v10];

      if (v11)
      {
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v14 = 0;
      }
      swift_getKeyPath();
      sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if ((*(unsigned char *)(v1 + 49) & 1) == 0 && v14)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v8 = v12;
      }
      sub_10001D214((uint64_t)_swiftEmptyArrayStorage);
      sub_100081468(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = CalculateExpression.expression.getter();
      unint64_t v23 = v22;
      swift_release();
      if (v14)
      {
        swift_bridgeObjectRetain();
        sub_10001D214((uint64_t)_swiftEmptyArrayStorage);
        sub_100081468(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = CalculateExpression.expression.getter();
        unint64_t v25 = v24;
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        unint64_t v25 = 0;
      }
      sub_100056690(v21, v23, v12, v25, 0, v14 != 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = (void *)qword_100161370;
      NSString v16 = String._bridgeToObjectiveC()();
      id v17 = [v15 stringForKey:v16];

      if (!v17) {
        return;
      }
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      sub_100056690(v18, v20, 0, 0, 0, 1);
    }
    swift_bridgeObjectRelease();
  }
}

void *sub_10000BDC0(uint64_t *a1, void (*a2)(void *__return_ptr, uint64_t))
{
  id result = ((void *(*)(uint64_t *__return_ptr))a2)(&v9);
  uint64_t v5 = v9;
  if (!v9) {
    return result;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  a2(&v9, v7);
  if (v6)
  {
    if (v9)
    {
      type metadata accessor for CGRect(0);
      sub_1000D921C();
      swift_retain();
      char v8 = static Anchor<A>.== infix(_:_:)();
      swift_release_n();
      swift_release();
      if ((v8 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_7;
    }
    swift_release();
LABEL_11:
    id result = (void *)swift_release();
    *a1 = v5;
    return result;
  }
  if (v9) {
    goto LABEL_11;
  }
LABEL_7:

  return (void *)swift_release();
}

id sub_10000BED0(void *a1)
{
  id v2 = [a1 role];
  id v3 = [objc_allocWithZone((Class)UISceneConfiguration) initWithName:0 sessionRole:v2];

  id v4 = [a1 role];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return v3;
    }
  }
  type metadata accessor for SceneDelegate();
  [v3 setDelegateClass:swift_getObjCClassFromMetadata()];
  return v3;
}

uint64_t initializeWithCopy for CalculatorAppAlertView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CalculatorKeypadLayout(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

unint64_t sub_10000C0CC()
{
  unint64_t result = qword_100155AC0;
  if (!qword_100155AC0)
  {
    sub_1000317D8(&qword_100155A20);
    sub_1000317D8(&qword_1001559A8);
    sub_1000317D8(&qword_1001559A0);
    sub_1000317D8(&qword_100155998);
    sub_1000317D8(&qword_100155990);
    sub_1000317D8(&qword_1001559C0);
    sub_10003A0BC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_10003D1A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155AC0);
  }
  return result;
}

uint64_t sub_10000C230(uint64_t a1)
{
  sub_100032FA0(&qword_100157600);
  State.wrappedValue.getter();
  swift_getKeyPath();
  sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v2 = *(unsigned __int8 *)(v10 + 18);
  swift_release();
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = swift_retain();
  uint64_t v5 = sub_100033AA8(v4, v3);
  swift_release();
  swift_getKeyPath();
  sub_100033194((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v6 = *(unsigned __int8 *)(v5 + 51);
  uint64_t result = swift_release();
  if (v2 != v6)
  {
    State.wrappedValue.getter();
    uint64_t v8 = swift_retain();
    sub_100033AA8(v8, v3);
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

BOOL sub_10000C4D8()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  switch(*(unsigned char *)(v0 + 48))
  {
    case 3:
      swift_bridgeObjectRelease();
      BOOL result = 0;
      break;
    default:
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v1 & 1) == 0)
      {
        swift_getKeyPath();
        sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_retain();
        uint64_t v3 = CalculateExpression.format.getter();
        swift_release();
        BOOL result = v3 != 2;
      }
      break;
  }
  return result;
}

uint64_t sub_10000C6C0()
{
  return swift_release_n();
}

uint64_t sub_10000C780()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  switch(*(unsigned char *)(v0 + 48))
  {
    case 3:
      swift_bridgeObjectRelease();
      uint64_t v2 = 0;
      break;
    default:
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v2 = 0;
      if ((v1 & 1) == 0)
      {
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v3 = *(void **)(v0 + 40);
        swift_getKeyPath();
        sub_100032FE4((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
        uint64_t v4 = v3;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v2 = v4[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed];
      }
      break;
  }
  return v2;
}

uint64_t sub_10000C99C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    sub_100040BE4(&qword_100156CF8, &qword_100156D00);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000CA40(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000CAC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v36 = a1;
  uint64_t v3 = type metadata accessor for CalculatorAppScene(0);
  v28[0] = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v28[0] + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = sub_100032FA0(&qword_10015A290);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100032FA0(&qword_10015A298);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  __chkstk_darwin(v8);
  id v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100032FA0(&qword_10015A2A0);
  uint64_t v32 = *(void *)(v12 - 8);
  uint64_t v33 = v12;
  __chkstk_darwin(v12);
  char v29 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v30 = (char *)v28 - v15;
  LocalizedStringKey.init(stringLiteral:)();
  sub_10001F078(v2, (uint64_t)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CalculatorAppScene);
  unint64_t v16 = (*(unsigned __int8 *)(v28[0] + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28[0] + 80);
  uint64_t v17 = swift_allocObject();
  sub_10001F014((uint64_t)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  Text.init(_:tableName:bundle:comment:)();
  sub_100032FA0(&qword_10015A2A8);
  sub_100040BE4(&qword_10015A2B0, &qword_10015A2A8);
  WindowGroup.init(id:title:lazyContent:)();
  uint64_t v18 = sub_100040BE4(&qword_10015A2B8, &qword_10015A290);
  Scene.allowsSecureDrawing(_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  uint64_t v37 = v28[1];
  uint64_t v19 = sub_100032FA0(&qword_10015A2C0);
  uint64_t v38 = v5;
  uint64_t v39 = v18;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v21 = sub_100040BE4(&qword_10015A2C8, &qword_10015A2C0);
  unint64_t v22 = v29;
  uint64_t v23 = v34;
  Scene.commands<A>(content:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v23);
  uint64_t v25 = v32;
  uint64_t v24 = v33;
  uint64_t v26 = v30;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v22, v33);
  uint64_t v38 = v23;
  uint64_t v39 = v19;
  uint64_t v40 = OpaqueTypeConformance2;
  uint64_t v41 = v21;
  swift_getOpaqueTypeConformance2();
  static SceneBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v24);
}

uint64_t sub_10000CFF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100032FA0(&qword_100154890);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalculatorViewModel();
  sub_10003314C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v6 = Environment.init<A>(_:)();
  HIDWORD(v32) = v7;
  type metadata accessor for CalculatorLayout();
  sub_10003314C((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v8 = Environment.init<A>(_:)();
  char v10 = v9;
  uint64_t v11 = swift_projectBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
  Bindable.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v12 = v57;
  swift_getKeyPath();
  uint64_t v57 = v12;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  sub_10000A930((uint64_t)&v33);
  uint64_t v13 = v33;
  char v14 = v34;
  uint64_t v15 = v35;
  char v16 = v36;
  uint64_t v17 = v37;
  char v18 = v38;
  long long v19 = v39;
  long long v20 = v40;
  long long v21 = v41;
  long long v22 = v42;
  uint64_t v23 = v43;
  char v46 = v34;
  char v45 = v36;
  char v44 = v38;
  *(void *)&long long v47 = v33;
  BYTE8(v47) = v34;
  *(void *)&long long v48 = v35;
  BYTE8(v48) = v36;
  *(void *)&long long v49 = v37;
  BYTE8(v49) = v38;
  long long v50 = v39;
  long long v51 = v40;
  long long v52 = v41;
  long long v53 = v42;
  *(void *)&long long v54 = v43;
  *((void *)&v54 + 1) = 0x4000000000000000;
  char v56 = BYTE4(v32) & 1;
  char v55 = v10 & 1;
  long long v24 = v47;
  long long v25 = v48;
  long long v26 = v49;
  *(_OWORD *)(a1 + 88) = v39;
  *(_OWORD *)(a1 + 72) = v26;
  *(_OWORD *)(a1 + 56) = v25;
  *(_OWORD *)(a1 + 40) = v24;
  long long v27 = v51;
  long long v28 = v52;
  long long v29 = v53;
  *(_OWORD *)(a1 + 152) = v54;
  *(_OWORD *)(a1 + 136) = v29;
  *(_OWORD *)(a1 + 120) = v28;
  *(_OWORD *)(a1 + 104) = v27;
  char v30 = v56;
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v30;
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v10 & 1;
  *(void *)(a1 + 32) = 0;
  uint64_t v57 = v13;
  char v58 = v14;
  uint64_t v59 = v15;
  char v60 = v16;
  uint64_t v61 = v17;
  char v62 = v18;
  long long v63 = v19;
  long long v64 = v20;
  long long v65 = v21;
  long long v66 = v22;
  uint64_t v67 = v23;
  uint64_t v68 = 0x4000000000000000;
  swift_retain();
  swift_retain();
  sub_100033AC4((uint64_t)&v47);
  sub_100007B68((uint64_t)&v57);
  swift_release();
  return swift_release();
}

void sub_10000D35C(uint64_t a1, char a2)
{
  if (*(void *)a1)
  {
    if (a2)
    {
      if (qword_100154728 != -1) {
        swift_once();
      }
      uint64_t v3 = qword_100161338;
      id v4 = (id)qword_100161338;
    }
    else
    {
      uint64_t v3 = 0;
    }

    *(void *)(a1 + 16) = v3;
  }
}

uint64_t sub_10000D3D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v32 = a1;
  uint64_t v35 = a2;
  uint64_t v10 = type metadata accessor for HighlightHoverEffect();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ContentShapeKinds();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100032FA0(&qword_100159960);
  __chkstk_darwin(v18);
  long long v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032FA0(&qword_1001586D0);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100110A50;
  static ContentShapeKinds.interaction.getter();
  static ContentShapeKinds.accessibility.getter();
  static ContentShapeKinds.hoverEffect.getter();
  uint64_t v36 = v21;
  sub_10000D7C4(&qword_1001586D8, (void (*)(uint64_t))&type metadata accessor for ContentShapeKinds);
  sub_100032FA0(&qword_1001586E0);
  sub_100040BE4(&qword_1001586E8, &qword_1001586E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  static UnitPoint.center.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  long long v26 = &v20[*(int *)(v18 + 36)];
  uint64_t v27 = sub_100032FA0(&qword_100159968);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(&v26[*(int *)(v27 + 40)], v17, v14);
  *(double *)long long v26 = a6;
  *((double *)v26 + 1) = a3;
  *((double *)v26 + 2) = a4;
  *((double *)v26 + 3) = a5;
  *((double *)v26 + 4) = a5;
  *((void *)v26 + 5) = v23;
  *((void *)v26 + 6) = v25;
  v26[56] = 0;
  uint64_t v28 = sub_100032FA0(&qword_100159970);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v20, v32, v28);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  static CustomHoverEffect<>.highlight.getter();
  sub_1000061D4();
  sub_10000D7C4(&qword_100159990, (void (*)(uint64_t))&type metadata accessor for HighlightHoverEffect);
  uint64_t v29 = v33;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v29);
  return sub_10003B048((uint64_t)v20);
}

uint64_t sub_10000D7C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000D80C@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CalculatorViewModel();
  sub_10000DA60((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v11 = Environment.init<A>(_:)();
  char v10 = v2;
  type metadata accessor for CalculatorLayout();
  sub_10000DA60((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v3 = Environment.init<A>(_:)();
  char v9 = v4;
  uint64_t KeyPath = swift_getKeyPath();
  sub_100032FA0(&qword_100154898);
  State.projectedValue.getter();
  uint64_t v6 = static AnyTransition.opacity.getter();
  uint64_t v7 = static Animation.easeIn(duration:)();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  State.init(wrappedValue:)();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v11;
  *(unsigned char *)(a1 + 8) = v10 & 1;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v9 & 1;
  *(void *)(a1 + 32) = KeyPath;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = 0x3FD3333333333333;
  *(void *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = v7;
  *(unsigned char *)(a1 + 112) = 1;
  return result;
}

uint64_t sub_10000DA18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DA60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DAA8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000DC28(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000DBCC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000DBCC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000DB7C((uint64_t)v12);
  return v7;
}

uint64_t sub_10000DB7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000DBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000DC28(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10000DDE4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10000DDE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10000DE7C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000D23E0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000D23E0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10000DE7C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10000DFF4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10000DFF4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100032FA0(&qword_100158AC8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t assignWithCopy for InputTextView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

void sub_10000E104(char a1)
{
  uint64_t v2 = v1;
  int v4 = a1 & 1;
  swift_getKeyPath();
  char v55 = v1;
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*((unsigned __int8 *)v1 + 49) != v4)
  {
    swift_getKeyPath();
    char v55 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v5 = *((unsigned __int8 *)v1 + 49);
    swift_getKeyPath();
    char v55 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    char v6 = (void *)v1[5];
    swift_getKeyPath();
    char v55 = v6;
    sub_100032FE4((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
    uint64_t v7 = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v8 = v7[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed];

    if (v8 == 1)
    {
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      char v55 = v2;
    }
    else
    {
      if (qword_100154750 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100021598(v17, (uint64_t)qword_100161340);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        long long v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "unit conversion not allowed", v20, 2u);
        swift_slowDealloc();
      }

      uint64_t v21 = swift_getKeyPath();
      __chkstk_darwin(v21);
      char v55 = v2;
    }
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_getKeyPath();
    char v55 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v22 = (void *)v2[2];
    if (*((unsigned char *)v2 + 49) == 1)
    {
      swift_getKeyPath();
      char v55 = v22;
      sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_retain();
      uint64_t v23 = CalculateExpression.format.getter();
      swift_release();
      if (v23 == 2)
      {
        *((unsigned char *)v2 + 32) = 0;
        sub_1000115EC(0);
      }
      sub_1000563E4(93);
      sub_100034264();
      swift_retain();
      if (!CalculateExpression.activeError.getter())
      {
        swift_release();
        goto LABEL_27;
      }
      swift_errorRelease();
      swift_release();
      sub_1000DD494();
    }
    else
    {
      sub_100034264();
    }
    swift_retain();
    uint64_t v24 = CalculateExpression.expression.getter();
    unint64_t v26 = v25;
    swift_release();
    sub_100056690(v24, v26, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
LABEL_27:
    swift_getKeyPath();
    char v55 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (v5 != *((unsigned __int8 *)v2 + 49))
    {
      if (qword_100154760 != -1) {
        swift_once();
      }
      uint64_t v27 = (void *)qword_100161370;
      swift_getKeyPath();
      char v55 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v29 = String._bridgeToObjectiveC()();
      [v27 setValue:isa forKey:v29];

      if (*((unsigned char *)v2 + 33) == 1)
      {
        swift_getKeyPath();
        char v55 = v2;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if (*((unsigned char *)v2 + 49))
        {
          uint64_t v30 = v2[3];
          swift_retain();
          sub_10005ECF0(0, (uint64_t)v2, v30);
          swift_release();
        }
        else
        {
          char v55 = &_swiftEmptyDictionarySingleton;
          sub_10005FF28();
          uint64_t v32 = v31;
          CalculateUnitCategory.id.getter();

          id v33 = objc_allocWithZone((Class)NSString);
          NSString v34 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v35 = [v33 initWithString:v34];

          if (v35)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            sub_100075A90((uint64_t)v35, 0xD000000000000016, 0x80000001001083C0, isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease();
          }
          else
          {
          }
          sub_100060310();
          if (v37)
          {
            id v38 = objc_allocWithZone((Class)NSString);
            NSString v39 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v40 = [v38 initWithString:v39];

            if (v40)
            {
              char v41 = swift_isUniquelyReferenced_nonNull_native();
              sub_100075A90((uint64_t)v40, 0xD000000000000013, 0x8000000100108400, v41);
              swift_bridgeObjectRelease();
            }
            else
            {
            }
          }
          sub_100060310();
          if (v42)
          {
            id v43 = objc_allocWithZone((Class)NSString);
            NSString v44 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v45 = [v43 initWithString:v44];

            if (v45)
            {
              char v46 = swift_isUniquelyReferenced_nonNull_native();
              sub_100075A90((uint64_t)v45, 0xD000000000000014, 0x80000001001083E0, v46);
              swift_bridgeObjectRelease();
            }
            else
            {
            }
          }
          sub_100056E34((uint64_t)v55);
          unint64_t v48 = v47;
          swift_bridgeObjectRelease();
          sub_10005F68C(v48, v2[3]);
          swift_bridgeObjectRelease();
        }
        *((unsigned char *)v2 + 32) = 1;
      }
    }
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_100021598(v49, (uint64_t)qword_100161340);
    swift_retain_n();
    long long v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      long long v52 = (uint8_t *)swift_slowAlloc();
      char v55 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v52 = 136446210;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*((unsigned char *)v2 + 49)) {
        uint64_t v53 = 1702195828;
      }
      else {
        uint64_t v53 = 0x65736C6166;
      }
      if (*((unsigned char *)v2 + 49)) {
        unint64_t v54 = 0xE400000000000000;
      }
      else {
        unint64_t v54 = 0xE500000000000000;
      }
      sub_10000DAA8(v53, v54, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "unitConversionMode is on: %{public}s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100021598(v10, (uint64_t)qword_100161340);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    char v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    char v55 = v14;
    if (a1) {
      uint64_t v15 = 1702195828;
    }
    else {
      uint64_t v15 = 0x65736C6166;
    }
    if (a1) {
      unint64_t v16 = 0xE400000000000000;
    }
    else {
      unint64_t v16 = 0xE500000000000000;
    }
    sub_10000DAA8(v15, v16, (uint64_t *)&v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "No change to unit conversion mode: %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

int8x8_t sub_10000ECF4@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  int v34 = a4;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v11 = sub_100032FA0(&qword_100155AD0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalculatorViewModel();
  sub_10003302C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v33 = Environment.init<A>(_:)();
  LOBYTE(v45[0]) = v15 & 1;
  type metadata accessor for CalculatorLayout();
  sub_10003302C((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v31 = Environment.init<A>(_:)();
  LOBYTE(v44[0]) = v16 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v42[0]) = 0;
  uint64_t v18 = swift_getKeyPath();
  v40[0] = 0;
  uint64_t v32 = swift_getKeyPath();
  LOBYTE(v38[0]) = 0;
  sub_100032FA0(&qword_100155AD8);
  type metadata accessor for Tips.Rule();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_10010DCB0;
  if (qword_1001546B8 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_100021598(v11, (uint64_t)qword_1001612C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v20, v11);
  type metadata accessor for Tips.EmptyDonation();
  sub_10003302C(&qword_100155AE0, (void (*)(uint64_t))&type metadata accessor for Tips.EmptyDonation);
  sub_10003302C(&qword_100155AE8, (void (*)(uint64_t))&type metadata accessor for Tips.EmptyDonation);
  Tips.Rule.init<A>(_:_:)();
  char v21 = v45[0];
  char v22 = v44[0];
  char v43 = v42[0];
  char v41 = v40[0];
  uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(a1);
  char v39 = v38[0];
  char v24 = v34 & 1;
  *(void *)a5 = v33;
  *(unsigned char *)(a5 + 8) = v21;
  *(_DWORD *)(a5 + 9) = v45[0];
  *(_DWORD *)(a5 + 12) = *(_DWORD *)((char *)v45 + 3);
  *(void *)(a5 + 16) = v31;
  *(unsigned char *)(a5 + 24) = v22;
  *(_DWORD *)(a5 + 25) = v44[0];
  *(_DWORD *)(a5 + 28) = *(_DWORD *)((char *)v44 + 3);
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 32) = KeyPath;
  *(unsigned char *)(a5 + 56) = v43;
  int v25 = v42[0];
  *(_DWORD *)(a5 + 60) = *(_DWORD *)((char *)v42 + 3);
  *(_DWORD *)(a5 + 57) = v25;
  *(void *)(a5 + 64) = v18;
  *(void *)(a5 + 72) = 0;
  *(unsigned char *)(a5 + 80) = 0;
  *(unsigned char *)(a5 + 81) = v41;
  *(unsigned char *)(a5 + 82) = a1;
  int16x8_t v26 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v23, (uint64x2_t)xmmword_10010F450), (int32x4_t)vshlq_u64(v23, (uint64x2_t)xmmword_10010F440));
  *(int8x8_t *)v26.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v26), (int8x8_t)0x1000100010001);
  int8x8_t result = vmovn_s16(v26);
  *(_DWORD *)(a5 + 83) = result.i32[0];
  *(unsigned char *)(a5 + 87) = BYTE5(a1) & 1;
  *(unsigned char *)(a5 + 88) = BYTE6(a1) & 1;
  int v28 = *(_DWORD *)v40;
  *(_DWORD *)(a5 + 92) = *(_DWORD *)&v40[3];
  *(_DWORD *)(a5 + 89) = v28;
  *(double *)(a5 + 96) = a6;
  *(double *)(a5 + 104) = a7;
  *(void *)(a5 + 112) = v32;
  *(unsigned char *)(a5 + 120) = v39;
  int v29 = v38[0];
  *(_DWORD *)(a5 + 124) = *(_DWORD *)((char *)v38 + 3);
  *(_DWORD *)(a5 + 121) = v29;
  uint64_t v30 = v36;
  *(void *)(a5 + 128) = v35;
  *(void *)(a5 + 136) = v30;
  *(unsigned char *)(a5 + 144) = v24;
  LODWORD(v30) = *(_DWORD *)v37;
  *(_DWORD *)(a5 + 148) = *(_DWORD *)&v37[3];
  *(_DWORD *)(a5 + 145) = v30;
  *(void *)(a5 + 152) = 0;
  *(void *)(a5 + 160) = v19;
  return result;
}

uint64_t assignWithCopy for CalculatorMainView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  char v5 = *(unsigned char *)(v2 + 24);
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(unsigned char *)(v2 + 40);
  sub_100032F38(v6, v2);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v2;
  sub_100032EAC(v7, v8);
  return a1;
}

uint64_t sub_10000F218@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  unint64_t v47 = a2;
  uint64_t v3 = sub_100032FA0(&qword_1001555E0);
  __chkstk_darwin(v3 - 8);
  uint64_t v48 = (uint64_t)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v49 = (char *)v43 - v6;
  uint64_t v7 = sub_100032FA0(&qword_1001555E8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100032FA0(&qword_1001555F0);
  uint64_t v10 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  char v46 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v14 = (char *)v43 - v13;
  static ButtonRole.cancel.getter();
  uint64_t v15 = type metadata accessor for ButtonRole();
  uint64_t v16 = 1;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 0, 1, v15);
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v19 = a1[4];
  char v21 = *((unsigned char *)a1 + 40);
  uint64_t v55 = a1[3];
  uint64_t v20 = v55;
  uint64_t v56 = v17;
  char v22 = (_OWORD *)swift_allocObject();
  long long v23 = *((_OWORD *)a1 + 1);
  v22[1] = *(_OWORD *)a1;
  v22[2] = v23;
  *(_OWORD *)((char *)v22 + 41) = *(_OWORD *)((char *)a1 + 25);
  long long v50 = a1;
  v43[1] = v18;
  swift_retain();
  swift_retain();
  sub_100025ED0((uint64_t)&v56);
  sub_100025ED0((uint64_t)&v55);
  id v45 = v14;
  Button.init(role:action:label:)();
  uint64_t v51 = v20;
  uint64_t v52 = v19;
  char v53 = v21;
  sub_100032FA0(&qword_1001555B0);
  Binding.wrappedValue.getter();
  if (v54 == 2 || v54 == 1)
  {
    uint64_t v24 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v26 = v25;
    char v28 = v27;
    uint64_t v30 = v29;
    uint64_t v31 = (_OWORD *)swift_allocObject();
    long long v32 = *((_OWORD *)a1 + 1);
    v31[1] = *(_OWORD *)a1;
    v31[2] = v32;
    *(_OWORD *)((char *)v31 + 41) = *(_OWORD *)((char *)a1 + 25);
    __chkstk_darwin(v31);
    v43[-4] = v24;
    v43[-3] = v26;
    LOBYTE(v43[-2]) = v28 & 1;
    v43[-1] = v30;
    swift_retain();
    swift_retain();
    sub_100025ED0((uint64_t)&v56);
    sub_100025ED0((uint64_t)&v55);
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
  }
  uint64_t v33 = (uint64_t)v49;
  uint64_t v34 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v49, v16, 1, v44);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v36 = v45;
  uint64_t v37 = v46;
  v35(v46, v45, v34);
  uint64_t v38 = v48;
  sub_100033344(v33, v48, &qword_1001555E0);
  char v39 = v47;
  v35(v47, v37, v34);
  uint64_t v40 = sub_100032FA0(&qword_1001555F8);
  sub_100033344(v38, (uint64_t)&v39[*(int *)(v40 + 48)], &qword_1001555E0);
  sub_100032F44(v33, &qword_1001555E0);
  char v41 = *(void (**)(char *, uint64_t))(v10 + 8);
  v41(v36, v34);
  sub_100032F44(v38, &qword_1001555E0);
  return ((uint64_t (*)(char *, uint64_t))v41)(v37, v34);
}

uint64_t sub_10000F6F8@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  char v2 = a1 & 1;
  uint64_t v44 = sub_100032FA0(&qword_100155888);
  __chkstk_darwin(v44);
  char v41 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v38 - v5;
  uint64_t v7 = type metadata accessor for DynamicTypeSize();
  uint64_t v8 = *(void **)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v42 = sub_100032FA0(&qword_100155858);
  __chkstk_darwin(v42);
  char v39 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v40 = (uint64_t)&v38 - v16;
  uint64_t v17 = swift_retain();
  sub_10002BD88(v17, v2);
  swift_release();
  id v18 = [self currentDevice];
  id v19 = [v18 userInterfaceIdiom];
  swift_release();

  if (v19)
  {
    uint64_t v20 = swift_retain();
    sub_10002BD88(v20, v2);
    swift_release();
    char v21 = sub_1000412FC();
    swift_release();
    if ((v21 & 1) == 0)
    {
      if (qword_100154470 != -1) {
        swift_once();
      }
      char v22 = &qword_100160F88;
      goto LABEL_8;
    }
  }
  if (qword_100154478 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    char v22 = &qword_100160F90;
LABEL_8:
    uint64_t v23 = *v22;
    swift_retain();
    uint64_t v45 = v23;
    uint64_t v24 = (void (*)(char *, void, uint64_t))v8[13];
    v24(v13, enum case for DynamicTypeSize.xxxLarge(_:), v7);
    v24(v10, enum case for DynamicTypeSize.accessibility5(_:), v7);
    sub_10000A640(&qword_100155890, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    if (dispatch thunk of static Comparable.<= infix(_:_:)()) {
      break;
    }
    __break(1u);
LABEL_11:
    swift_once();
  }
  uint64_t v25 = v7;
  uint64_t v26 = v44;
  char v27 = &v6[*(int *)(v44 + 48)];
  uint64_t v38 = v23;
  char v28 = (void (*)(char *, char *, uint64_t))v8[4];
  v28(v6, v13, v25);
  v28(v27, v10, v25);
  uint64_t v29 = *(int *)(v26 + 48);
  uint64_t v30 = v41;
  uint64_t v31 = &v41[v29];
  long long v32 = (void (*)(char *, char *, uint64_t))v8[2];
  v32(v41, v6, v25);
  v32(v31, v27, v25);
  uint64_t v33 = (uint64_t)v39;
  v28(v39, v30, v25);
  uint64_t v34 = (void (*)(char *, uint64_t))v8[1];
  v34(v31, v25);
  uint64_t v35 = &v30[*(int *)(v44 + 48)];
  v28(v30, v6, v25);
  v28(v35, v27, v25);
  v28((char *)(v33 + *(int *)(v42 + 36)), v35, v25);
  v34(v30, v25);
  uint64_t v36 = v40;
  sub_10002D9D0(v33, v40, &qword_100155858);
  sub_100040BE4(&qword_100155860, &qword_100155858);
  View.dynamicTypeSize<A>(_:)();
  sub_100032F44(v36, &qword_100155858);
  return swift_release();
}

uint64_t sub_10000FC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  char v23 = a6 & 1;
  swift_release();
  swift_release();
  sub_100032EAC(a5, v23);
  if ((a22 & 1) == 0)
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

__n128 sub_10000FD3C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  *((void *)&v65 + 1) = &type metadata for NotesFeatureFlags;
  *(void *)&long long v66 = sub_10003BF2C();
  char v4 = isFeatureEnabled(_:)();
  sub_10000DB7C((uint64_t)&v64);
  if (v4)
  {
    char v5 = *(unsigned char *)(v2 + 8);
    uint64_t v6 = swift_retain();
    uint64_t v7 = sub_100033AA8(v6, v5);
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v64 = v7;
    sub_10000DA60((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v8 = *(unsigned __int8 *)(v7 + 48);
    swift_release();
    switch(v8)
    {
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_6;
      default:
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9)
        {
LABEL_6:
          sub_100040058(&v53);
          unsigned __int8 v10 = v53.n128_u8[8];
          uint64_t v31 = v54;
          unint64_t v32 = v53.n128_u64[0];
          char v11 = v55;
          uint64_t v30 = v56;
          char v12 = v57;
          long long v29 = v58;
          uint64_t v13 = v59;
          uint64_t v14 = v60;
          uint64_t v28 = v61;
          char v27 = v62;
          uint64_t v26 = v63;
          long long v44 = *(_OWORD *)(v2 + 64);
          sub_100032FA0(&qword_100154898);
          State.projectedValue.getter();
          long long v15 = v64;
          char v25 = v65;
          uint64_t v16 = static AnyTransition.opacity.getter();
          uint64_t v17 = static Animation.easeIn(duration:)();
          LOBYTE(v44) = 0;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          State.init(wrappedValue:)();
          char v18 = v64;
          uint64_t v19 = *((void *)&v64 + 1);
          sub_100040710((uint64_t)&v53);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          sub_10006E7D0((uint64_t)&v53);
          v43[0] = v10;
          *(void *)&long long v64 = v32;
          BYTE8(v64) = v10;
          *(void *)&long long v65 = v31;
          BYTE8(v65) = v11;
          *(void *)&long long v66 = v30;
          BYTE8(v66) = v12;
          *(_OWORD *)uint64_t v67 = v29;
          *(void *)&v67[16] = v13;
          *(void *)&v67[24] = v14;
          *(void *)&long long v68 = v28;
          BYTE8(v68) = v27;
          *(void *)&long long v69 = v26;
          BYTE8(v69) = v18;
          *(void *)v70 = v19;
          *(_OWORD *)&v70[8] = v15;
          v70[24] = v25;
          *(void *)v71 = 0x3FD3333333333333;
          *(void *)&v71[8] = v16;
          *(void *)&v71[16] = v17;
          sub_10006E844((uint64_t)&v64);
        }
        else
        {
          sub_10000D80C((uint64_t)&v64);
          sub_100039D10((uint64_t)&v64);
        }
        sub_10002D9D0((uint64_t)&v64, (uint64_t)&v44, &qword_100155AB8);
        sub_100032FA0(&qword_100155A78);
        sub_100032FA0(&qword_100155A60);
        sub_1000076A4(&qword_100155A70, &qword_100155A78, (void (*)(void))sub_10003BD88, (void (*)(void))sub_10000772C);
        sub_1000076A4(&qword_100155A90, &qword_100155A60, (void (*)(void))sub_10006E78C, (void (*)(void))sub_100039520);
        _ConditionalContent<>.init(storage:)();
        long long v51 = v41;
        v52[0] = *(_OWORD *)v42;
        *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)&v42[9];
        *(_OWORD *)&v47[16] = v37;
        long long v48 = v38;
        long long v49 = v39;
        long long v50 = v40;
        long long v44 = v33;
        long long v45 = v34;
        long long v46 = v35;
        *(_OWORD *)unint64_t v47 = v36;
        sub_100039BF8((uint64_t)&v44);
        break;
    }
  }
  else
  {
    sub_10000D80C((uint64_t)&v64);
    *(void *)&long long v44 = v64;
    BYTE8(v44) = BYTE8(v64);
    *(void *)&long long v45 = v65;
    BYTE8(v45) = BYTE8(v65);
    *(void *)&long long v46 = v66;
    BYTE8(v46) = BYTE8(v66);
    v47[0] = v67[0];
    *(_OWORD *)&v47[8] = *(_OWORD *)&v67[8];
    *(void *)&v47[24] = *(void *)&v67[24];
    LOBYTE(v48) = v68;
    *((void *)&v48 + 1) = *((void *)&v68 + 1);
    long long v49 = v69;
    LOBYTE(v50) = v70[0];
    sub_10006E780((uint64_t)&v44);
  }
  sub_10002D9D0((uint64_t)&v44, (uint64_t)v43, &qword_100155A50);
  sub_100032FA0(&qword_100155A58);
  sub_100032FA0(&qword_100155A60);
  sub_10003997C();
  sub_1000076A4(&qword_100155A90, &qword_100155A60, (void (*)(void))sub_10006E78C, (void (*)(void))sub_100039520);
  _ConditionalContent<>.init(storage:)();
  long long v20 = *(_OWORD *)v71;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)&v70[16];
  *(_OWORD *)(a1 + 144) = v20;
  *(_OWORD *)(a1 + 154) = *(_OWORD *)&v71[10];
  long long v21 = v68;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v67[16];
  *(_OWORD *)(a1 + 80) = v21;
  long long v22 = *(_OWORD *)v70;
  *(_OWORD *)(a1 + 96) = v69;
  *(_OWORD *)(a1 + 112) = v22;
  long long v23 = v65;
  *(_OWORD *)a1 = v64;
  *(_OWORD *)(a1 + 16) = v23;
  __n128 result = *(__n128 *)v67;
  *(_OWORD *)(a1 + 32) = v66;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_100010378()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000103F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v35 = a2;
  uint64_t v3 = sub_100032FA0(&qword_1001555A0);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  unint64_t v32 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100032FA0(&qword_1001555A8);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  __chkstk_darwin(v5);
  long long v29 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v36 = *(long long *)((char *)v2 + 24);
  LOBYTE(v37) = *((unsigned char *)v2 + 40);
  sub_100032FA0(&qword_1001555B0);
  Binding.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v23 = v8;
  uint64_t v27 = v9;
  char v11 = v10 & 1;
  long long v41 = *v2;
  char v42 = *((unsigned char *)v2 + 16);
  sub_100032FA0(&qword_1001555B8);
  uint64_t v12 = Binding.projectedValue.getter();
  uint64_t v26 = &v21;
  uint64_t v24 = v36;
  int v25 = v37;
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  *(void *)&long long v22 = sub_100032FA0(&qword_1001555C0);
  *((void *)&v22 + 1) = sub_100032FA0(&qword_1001555C8);
  uint64_t v14 = sub_100040BE4(&qword_1001555D0, &qword_1001555C0);
  uint64_t v20 = sub_100040BE4(&qword_1001555D8, &qword_1001555C8);
  long long v15 = v32;
  uint64_t v16 = v23;
  View.alert<A, B>(_:isPresented:actions:message:)();
  swift_release();
  swift_release();
  sub_1000356E0(v7, v16, v11);
  swift_bridgeObjectRelease();
  long long v36 = v22;
  long long v37 = &type metadata for Text;
  uint64_t v38 = v14;
  uint64_t v39 = v20;
  long long v40 = &protocol witness table for Text;
  swift_getOpaqueTypeConformance2();
  uint64_t v17 = v29;
  uint64_t v18 = v34;
  View.allowsSecureDrawing()();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v35, v17, v31);
}

uint64_t sub_1000108B8()
{
  uint64_t v0 = sub_100032FA0(&qword_100157450);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Tips.MaxDisplayCount();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100032FA0(&qword_100157458);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Tips.MaxDisplayCount.init(_:)();
  static Tips.OptionsBuilder.buildExpression<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v15 = v4;
  uint64_t v16 = &protocol witness table for Tips.MaxDisplayCount;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)();
  uint64_t v15 = v8;
  uint64_t v16 = (void *)OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v13 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

uint64_t sub_100010B54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v1 = type metadata accessor for PredicateExpressions.ComparisonOperator();
  uint64_t v31 = *(void *)(v1 - 8);
  uint64_t v32 = v1;
  __chkstk_darwin(v1);
  uint64_t v30 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100032FA0(&qword_1001573D8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  uint64_t v35 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_1001573E0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100032FA0(&qword_1001573E8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100032FA0(&qword_1001573F0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v28 = v15;
  uint64_t v29 = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100040BE4(&qword_1001573F8, &qword_1001573E0);
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_getKeyPath();
  sub_100040BE4(&qword_100157400, &qword_1001573E8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v36 = 10;
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v20 = v30;
  uint64_t v19 = v31;
  uint64_t v21 = v32;
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v30, enum case for PredicateExpressions.ComparisonOperator.greaterThanOrEqual(_:), v32);
  uint64_t v22 = sub_100032FA0(&qword_100157408);
  uint64_t v23 = v33;
  v33[3] = v22;
  v23[4] = sub_10003BA30();
  sub_100038BE8(v23);
  sub_100040BE4(&qword_100157438, &qword_1001573F0);
  sub_100040BE4(&qword_100157440, &qword_1001573D8);
  uint64_t v24 = v28;
  uint64_t v25 = v34;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v21);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v18, v24);
}

uint64_t sub_10001103C()
{
  double v2 = *(double *)(v0 + 32);
  double v1 = *(double *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_release();
  char v4 = *(unsigned char *)(v3 + 24);
  uint64_t v5 = swift_retain();
  uint64_t v6 = sub_10002BD88(v5, v4);
  swift_release();
  swift_getKeyPath();
  *(void *)(v0 + 16) = v6;
  sub_10003314C((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v7 = *(double *)(v6 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize);
  double v8 = *(double *)(v6 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize + 8);
  swift_release();
  if (v7 != v2 || v8 != v1)
  {
    uint64_t v11 = *(void *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v12 = swift_retain();
    uint64_t v13 = sub_10002BD88(v12, v4);
    swift_release();
    swift_getKeyPath();
    uint64_t v14 = (void *)swift_task_alloc();
    v14[2] = v13;
    v14[3] = v11;
    v14[4] = v10;
    *(void *)(v0 + 16) = v13;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_task_dealloc();
  }
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

void sub_100011230(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
}

void sub_10001127C(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6 = v5;
  type metadata accessor for LayoutSubviews();
  sub_100036EC8((unint64_t *)&qword_100156558);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v13 != v12)
  {
    sub_10002F528(a5, a1, a2 & 1, a3, a4 & 1);
    if (__OFSUB__(*(void *)(v6 + 16), 1))
    {
      __break(1u);
    }
    else if (!__OFSUB__(*(void *)(v6 + 8), 1))
    {
      return;
    }
    __break(1u);
  }
}

uint64_t sub_1000113B4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  char v2 = *(unsigned char *)(v1 + 24);
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_10002BD88(v3, v2);
  swift_release();
  swift_getKeyPath();
  *(void *)(v0 + 16) = v4;
  sub_10003314C((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  if ((static EdgeInsets.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 56);
    long long v12 = *(_OWORD *)(v0 + 32);
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_10002BD88(v7, v2);
    swift_release();
    swift_getKeyPath();
    uint64_t v9 = swift_task_alloc();
    *(void *)(v9 + 16) = v8;
    *(_OWORD *)(v9 + 24) = v12;
    *(void *)(v9 + 40) = v6;
    *(void *)(v9 + 48) = v5;
    *(void *)(v0 + 16) = v8;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_task_dealloc();
  }
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

void sub_1000115EC(char a1)
{
  uint64_t v2 = v1;
  int v4 = a1 & 1;
  uint64_t v5 = *(void *)(v1 + 16);
  swift_getKeyPath();
  uint64_t v32 = v5;
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  uint64_t v6 = CalculateExpression.format.getter();
  swift_release();
  if ((v6 == 2) == v4)
  {
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100021598(v10, (uint64_t)qword_100161340);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t v32 = v14;
      if (a1) {
        uint64_t v15 = 1702195828;
      }
      else {
        uint64_t v15 = 0x65736C6166;
      }
      if (a1) {
        unint64_t v16 = 0xE400000000000000;
      }
      else {
        unint64_t v16 = 0xE500000000000000;
      }
      sub_10000DAA8(v15, v16, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No change to rpn mode mode: %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      goto LABEL_37;
    }
  }
  else
  {
    swift_getKeyPath();
    uint64_t v32 = v1;
    sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v7 = *(void **)(v1 + 40);
    swift_getKeyPath();
    uint64_t v32 = (uint64_t)v7;
    sub_100032FE4((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
    uint64_t v8 = v7;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v9 = v8[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed];

    if (v9 == 1)
    {
      swift_getKeyPath();
      uint64_t v32 = v5;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_retain();
    }
    else
    {
      if (qword_100154750 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100021598(v17, (uint64_t)qword_100161340);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "rpn not allowed", v20, 2u);
        swift_slowDealloc();
      }

      swift_getKeyPath();
      uint64_t v32 = v5;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_retain();
    }
    CalculateExpression.format.setter();
    swift_release();
    swift_getKeyPath();
    uint64_t v32 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    uint64_t v21 = CalculateExpression.format.getter();
    swift_release();
    if (v21 == 2)
    {
      swift_getKeyPath();
      uint64_t v32 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v2 + 49) == 1)
      {
        *(unsigned char *)(v2 + 33) = 0;
        sub_10000E104(0);
      }
    }
    if ((v6 == 2) != (v21 == 2))
    {
      if (qword_100154760 != -1) {
        swift_once();
      }
      uint64_t v22 = (void *)qword_100161370;
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v24 = String._bridgeToObjectiveC()();
      [v22 setValue:isa forKey:v24];

      if (*(unsigned char *)(v2 + 32) == 1)
      {
        uint64_t v25 = *(void *)(v2 + 24);
        swift_retain();
        sub_10005ECF0(0, v2, v25);
        swift_release();
        *(unsigned char *)(v2 + 33) = 1;
      }
    }
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100021598(v26, (uint64_t)qword_100161340);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v32 = v29;
      if (v21 == 2) {
        uint64_t v30 = 1702195828;
      }
      else {
        uint64_t v30 = 0x65736C6166;
      }
      if (v21 == 2) {
        unint64_t v31 = 0xE400000000000000;
      }
      else {
        unint64_t v31 = 0xE500000000000000;
      }
      sub_10000DAA8(v30, v31, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v27, "RPN is on: %{public}s", v28, 0xCu);
      swift_arrayDestroy();
LABEL_37:
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100011D4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EditMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - v7;
  type metadata accessor for CalculatorToolbarViewModel();
  sub_1000121E8(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  *(void *)a1 = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 8) = v9 & 1;
  type metadata accessor for CalculatorViewModel();
  sub_1000121E8((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  *(void *)(a1 + 16) = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 24) = v10 & 1;
  type metadata accessor for CalculatorHistoryViewModelWrapper(0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  ObservationRegistrar.init()();
  uint64_t v22 = v11;
  State.init(wrappedValue:)();
  uint64_t v12 = v24;
  *(void *)(a1 + 32) = v23;
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = (int *)type metadata accessor for CalculatorHistoryView();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v8, enum case for EditMode.inactive(_:), v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  State.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  uint64_t v14 = a1 + v13[8];
  LOBYTE(v22) = 0;
  State.init(wrappedValue:)();
  uint64_t v15 = v24;
  *(unsigned char *)uint64_t v14 = v23;
  *(void *)(v14 + 8) = v15;
  uint64_t v16 = a1 + v13[9];
  LOBYTE(v22) = 0;
  State.init(wrappedValue:)();
  uint64_t v17 = v24;
  *(unsigned char *)uint64_t v16 = v23;
  *(void *)(v16 + 8) = v17;
  uint64_t v18 = a1 + v13[10];
  LOBYTE(v22) = 1;
  State.init(wrappedValue:)();
  uint64_t v19 = v24;
  *(unsigned char *)uint64_t v18 = v23;
  *(void *)(v18 + 8) = v19;
  if (qword_100154340 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100160E28;
  sub_10003B8D0();
  ScaledMetric.init(wrappedValue:)();
  if (qword_100154350 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100160E38;
  return ScaledMetric.init(wrappedValue:)();
}

uint64_t sub_1000120F8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100012230(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_1000121A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000121E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100012230(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100012278()
{
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_100161370;
  NSString v2 = String._bridgeToObjectiveC()();
  LOBYTE(v1) = [v1 BOOLForKey:v2];

  *(unsigned char *)(v0 + 16) = (_BYTE)v1;
  *(void *)(v0 + 24) = 8;
  uint64_t v3 = (void *)qword_100161370;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
  }
  sub_1000125D0((uint64_t)&v17, (uint64_t)v19);
  if (v20)
  {
    int v6 = swift_dynamicCast();
    uint64_t v7 = v16;
    if (!v6) {
      uint64_t v7 = 0;
    }
    char v8 = v6 ^ 1;
  }
  else
  {
    sub_100012570((uint64_t)v19);
    uint64_t v7 = 0;
    char v8 = 1;
  }
  *(void *)(v0 + 32) = v7;
  *(unsigned char *)(v0 + 40) = v8;
  char v9 = (void *)qword_100161370;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 objectForKey:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
  }
  sub_1000125D0((uint64_t)&v17, (uint64_t)v19);
  if (!v20)
  {
    sub_100012570((uint64_t)v19);
    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    char v12 = 0;
    goto LABEL_19;
  }
  char v12 = v16;
LABEL_19:
  *(unsigned char *)(v0 + 41) = v12;
  id v13 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v13 setNumberStyle:1];
  [v13 setMaximumIntegerDigits:20];
  [v13 setUsesGroupingSeparator:1];
  [v13 setUsesSignificantDigits:1];
  [v13 setMaximumFractionDigits:15];
  *(void *)(v0 + 48) = v13;
  id v14 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v14 setNumberStyle:5];
  *(void *)(v0 + 56) = v14;
  *(unsigned char *)(v0 + 64) = 0;
  ObservationRegistrar.init()();
  sub_100006C54();
  return v0;
}

uint64_t sub_100012570(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100155208);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000125D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100155208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100012638@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v46 = a2;
  uint64_t v59 = a5;
  uint64_t v8 = type metadata accessor for KeyEquivalent();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  __chkstk_darwin(v8);
  long long v49 = &v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v47 = type metadata accessor for BorderlessButtonStyle();
  uint64_t v50 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  long long v48 = &v45[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100032FA0(&qword_100155828);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_100032FA0(&qword_100155830);
  __chkstk_darwin(v15);
  long long v17 = &v45[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_100032FA0(&qword_100155838);
  uint64_t v53 = *(void *)(v18 - 8);
  uint64_t v54 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = &v45[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = sub_100032FA0(&qword_100155840);
  uint64_t v55 = *(void *)(v21 - 8);
  uint64_t v56 = v21;
  __chkstk_darwin(v21);
  uint64_t v52 = &v45[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = sub_100032FA0(&qword_100155848);
  __chkstk_darwin(v23 - 8);
  long long v51 = &v45[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a1;
  char v26 = v46 & 1;
  *(unsigned char *)(v25 + 24) = v46 & 1;
  *(void *)(v25 + 32) = a3;
  *(unsigned char *)(v25 + 40) = a4 & 1;
  uint64_t v60 = a1;
  char v61 = v26;
  uint64_t v62 = a3;
  char v63 = a4 & 1;
  swift_retain();
  swift_retain();
  sub_100032FA0(&qword_100155850);
  uint64_t v27 = sub_1000317D8(&qword_100155858);
  uint64_t v28 = sub_100040BE4(&qword_100155860, &qword_100155858);
  long long v64 = &type metadata for Image;
  uint64_t v65 = v27;
  long long v66 = &protocol witness table for Image;
  uint64_t v67 = v28;
  swift_getOpaqueTypeConformance2();
  uint64_t v29 = v47;
  Button.init(action:label:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 16))(v17, v14, v11);
  uint64_t v30 = &v17[*(int *)(v15 + 36)];
  *uint64_t v30 = xmmword_10010F1F0;
  v30[1] = xmmword_10010F200;
  uint64_t v31 = v11;
  uint64_t v32 = v49;
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v31);
  uint64_t v33 = (void *)v15;
  uint64_t v34 = v48;
  BorderlessButtonStyle.init()();
  unint64_t v35 = sub_10003AD68();
  uint64_t v36 = sub_10000A640(&qword_100155880, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
  View.buttonStyle<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v34, v29);
  sub_100032F44((uint64_t)v17, &qword_100155830);
  KeyEquivalent.init(extendedGraphemeClusterLiteral:)();
  uint64_t v37 = static EventModifiers.command.getter();
  uint64_t v38 = static EventModifiers.control.getter();
  EventModifiers.init(rawValue:)();
  EventModifiers.init(rawValue:)();
  if (EventModifiers.init(rawValue:)() != v37) {
    EventModifiers.init(rawValue:)();
  }
  EventModifiers.init(rawValue:)();
  if (EventModifiers.init(rawValue:)() != v38) {
    EventModifiers.init(rawValue:)();
  }
  long long v64 = v33;
  uint64_t v65 = v29;
  long long v66 = (void *)v35;
  uint64_t v67 = v36;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  long long v40 = v52;
  long long v41 = (void *)v54;
  View.keyboardShortcut(_:modifiers:)();
  (*(void (**)(unsigned char *, uint64_t))(v57 + 8))(v32, v58);
  (*(void (**)(unsigned char *, void *))(v53 + 8))(v20, v41);
  long long v64 = v41;
  uint64_t v65 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v42 = (uint64_t)v51;
  uint64_t v43 = v56;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v40, v43);
  return sub_10002D9D0(v42, v59, &qword_100155848);
}

__n128 sub_100012D3C@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100032FA0(&qword_100154890);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - v9;
  type metadata accessor for CGRect(0);
  GeometryProxy.subscript.getter();
  CGPoint v11 = v50;
  CGSize v12 = v51;
  char v13 = *(unsigned char *)(a1 + 8);
  uint64_t v14 = swift_retain();
  sub_100033AA8(v14, v13);
  swift_release();
  type metadata accessor for CalculatorViewModel();
  sub_10003314C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  Bindable<A>.init(wrappedValue:)();
  LOBYTE(a1) = *(unsigned char *)(a1 + 24);
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10002BD88(v15, a1);
  swift_release();
  Bindable.wrappedValue.getter();
  CGFloat x = v50.x;
  swift_getKeyPath();
  v50.CGFloat x = x;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v18 = *(unsigned char *)(*(void *)&x + 48);
  swift_release();
  uint64_t v19 = sub_100006F14(v16, v18);
  swift_release();
  v61.origin = v11;
  v61.size = v12;
  double Width = CGRectGetWidth(v61);
  v62.origin = v11;
  v62.size = v12;
  double Height = CGRectGetHeight(v62);
  Bindable.projectedValue.getter();
  swift_getKeyPath();
  Bindable<A>.subscript.getter();
  swift_release();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v39 = v5 + 8;
  v22(v7, v4);
  sub_10000ECF4(v19 & 0x10101010101FFLL, v40, v41, v42, (uint64_t)&v50, Width, Height);
  v63.origin = v11;
  v63.size = v12;
  CGRectGetWidth(v63);
  v64.origin = v11;
  v64.size = v12;
  CGRectGetHeight(v64);
  static Alignment.bottomLeading.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v38 = v40;
  uint64_t v37 = v42;
  uint64_t v23 = v44;
  uint64_t v24 = v45;
  char v49 = v41;
  char v47 = v43;
  v65.origin = v11;
  v65.size = v12;
  CGFloat MinX = CGRectGetMinX(v65);
  v66.origin = v11;
  v66.size = v12;
  CGFloat MinY = CGRectGetMinY(v66);
  LOBYTE(v19) = v49;
  *(_DWORD *)(a2 + 177) = *(_DWORD *)v48;
  *(_DWORD *)(a2 + 180) = *(_DWORD *)&v48[3];
  char v27 = v47;
  *(_DWORD *)(a2 + 193) = *(_DWORD *)v46;
  *(_DWORD *)(a2 + 196) = *(_DWORD *)&v46[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 1;
  v22(v10, v4);
  long long v30 = v59;
  *(_OWORD *)(a2 + 128) = v58;
  *(_OWORD *)(a2 + 144) = v30;
  uint64_t v31 = v60;
  long long v32 = v55;
  *(_OWORD *)(a2 + 64) = v54;
  *(_OWORD *)(a2 + 80) = v32;
  long long v33 = v57;
  *(_OWORD *)(a2 + 96) = v56;
  *(_OWORD *)(a2 + 112) = v33;
  CGSize v34 = v51;
  *(CGPoint *)a2 = v50;
  *(CGSize *)(a2 + 16) = v34;
  __n128 result = v53;
  *(_OWORD *)(a2 + 32) = v52;
  *(__n128 *)(a2 + 48) = result;
  uint64_t v36 = v38;
  *(void *)(a2 + 160) = v31;
  *(void *)(a2 + 168) = v36;
  *(unsigned char *)(a2 + 176) = v19;
  *(void *)(a2 + 184) = v37;
  *(unsigned char *)(a2 + 192) = v27;
  *(void *)(a2 + 200) = v23;
  *(void *)(a2 + 208) = v24;
  *(CGFloat *)(a2 + 216) = MinX;
  *(CGFloat *)(a2 + 224) = MinY;
  *(void *)(a2 + 232) = KeyPath;
  *(void *)(a2 + 240) = sub_100038080;
  *(void *)(a2 + 248) = v29;
  return result;
}

double sub_10001323C@<D0>(uint64_t a1@<X8>)
{
  static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  static Alignment.center.getter();
  sub_1000133B4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, INFINITY, 0);
  long long v2 = v9[11];
  *(_OWORD *)(a1 + 160) = v9[10];
  *(_OWORD *)(a1 + 176) = v2;
  *(_OWORD *)(a1 + 192) = v9[12];
  *(void *)(a1 + 208) = v10;
  long long v3 = v9[7];
  *(_OWORD *)(a1 + 96) = v9[6];
  *(_OWORD *)(a1 + 112) = v3;
  long long v4 = v9[9];
  *(_OWORD *)(a1 + 128) = v9[8];
  *(_OWORD *)(a1 + 144) = v4;
  long long v5 = v9[3];
  *(_OWORD *)(a1 + 32) = v9[2];
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = v9[5];
  *(_OWORD *)(a1 + 64) = v9[4];
  *(_OWORD *)(a1 + 80) = v6;
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  return result;
}

__n128 sub_1000133B4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(unsigned char *)(a9 + 96) = *(unsigned char *)(v13 + 96);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  __n128 result = v32;
  *(_OWORD *)(a9 + 200) = v34;
  *(_OWORD *)(a9 + 184) = v33;
  *(__n128 *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 152) = v31;
  return result;
}

uint64_t destroy for SidebarButton()
{
  swift_release();

  return swift_release();
}

uint64_t sub_1000135B0()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000135E0()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_100013650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  char v6 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t sub_100013710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100032F44(a1, &qword_100154B68);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000138BC(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100154B68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10001391C()
{
  uint64_t v0 = self;
  id result = [v0 sharedConnection];
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = result;
  [result isCalculatorModeScientificAllowed];

  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  sub_10003CD70();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  uint64_t v4 = swift_getKeyPath();
  __chkstk_darwin(v4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  id result = [v0 sharedConnection];
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  char v5 = result;
  [result isCalculatorModeMathPaperAllowed];

  uint64_t v6 = swift_getKeyPath();
  __chkstk_darwin(v6);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  id result = [v0 sharedConnection];
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = result;
  [result isCalculatorInputModeUnitConversionAllowed];

  uint64_t v8 = swift_getKeyPath();
  __chkstk_darwin(v8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  uint64_t v9 = swift_getKeyPath();
  __chkstk_darwin(v9);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  id result = [v0 sharedConnection];
  if (result)
  {
    uint64_t v10 = result;
    [result isSquareRootOnBasicCalculatorForced];

    uint64_t v11 = swift_getKeyPath();
    __chkstk_darwin(v11);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    return (id)swift_release();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100013D28@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = sub_100032FA0(&qword_100154880);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  char v5 = (void *)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = type metadata accessor for LayoutDirection();
  uint64_t v29 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[0] = static VerticalAlignment.center.getter();
  type metadata accessor for CalculatorLayout();
  sub_10001438C((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v8 = Environment.init<A>(_:)();
  void v28[2] = v8;
  char v10 = v9;
  type metadata accessor for CalculatorToolbarViewModel();
  sub_10001438C(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  uint64_t v11 = Environment.init<A>(_:)();
  v28[1] = v11;
  char v13 = v12;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  long long v37 = v28[0];
  LOBYTE(v38) = 1;
  *((void *)&v38 + 1) = v8;
  LOBYTE(v39) = v10 & 1;
  *((void *)&v39 + 1) = v11;
  LOBYTE(v40) = v13 & 1;
  *((void *)&v40 + 1) = 0;
  LOBYTE(v41) = 1;
  *((void *)&v41 + 1) = v32;
  LOBYTE(v42) = v33;
  *((void *)&v42 + 1) = v34;
  v43[0] = v35;
  *(_OWORD *)&v43[8] = v36;
  *(void *)&v43[24] = 0x3FF0000000000000;
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v11) = *(unsigned char *)(v28[3] + 8);
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10002BD88(v15, v11);
  swift_release();
  swift_getKeyPath();
  uint64_t v31 = v16;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v17 = v16 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  swift_beginAccess();
  uint64_t v18 = v29;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v20 = v17;
  uint64_t v21 = v30;
  v19(v7, v20, v30);
  swift_release();
  v19((char *)v5 + *(int *)(v3 + 36), (uint64_t)v7, v21);
  uint64_t *v5 = KeyPath;
  uint64_t v22 = sub_100032FA0(&qword_1001599C0);
  sub_1000395D4((uint64_t)v5, (uint64_t)a1 + *(int *)(v22 + 36));
  long long v23 = v42;
  a1[4] = v41;
  a1[5] = v23;
  long long v24 = *(_OWORD *)&v43[16];
  a1[6] = *(_OWORD *)v43;
  a1[7] = v24;
  long long v25 = v38;
  *a1 = v37;
  a1[1] = v25;
  long long v26 = v40;
  a1[2] = v39;
  a1[3] = v26;
  sub_100005ECC((uint64_t)&v37);
  sub_100039574((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v21);
  swift_release();
  return swift_release();
}

double sub_100014120(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char v4 = a2 & 1;
  char v5 = a4 & 1;
  uint64_t v6 = swift_retain();
  sub_100033AA8(v6, v4);
  swift_release();
  swift_getKeyPath();
  sub_10003314C(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  uint64_t v7 = CalculateExpression.format.getter();
  swift_release();
  swift_release();
  uint64_t v8 = swift_retain();
  uint64_t v9 = sub_10002BD88(v8, v5);
  swift_release();
  if (v7 == 2)
  {
    sub_10002C358(v9, 0);
  }
  else
  {
    uint64_t v11 = swift_retain();
    sub_100033AA8(v11, v4);
    swift_release();
    swift_getKeyPath();
    sub_10003314C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    double v10 = sub_100009A7C();
  }
  double v12 = v10;
  swift_release();
  return v12;
}

uint64_t sub_1000142FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100014344(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001438C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000143D4(double *a1)
{
  double v1 = *a1;
  double v2 = a1[1];
  sub_100032FA0(&qword_100157790);
  uint64_t result = State.wrappedValue.getter();
  if (v5 != v1 || v6 != v2) {
    return State.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_100014474@<X0>(uint64_t a1@<X8>)
{
  return sub_1000302E0(a1);
}

uint64_t sub_1000144B8@<X0>(void *a1@<X8>)
{
  uint64_t result = GeometryProxy.size.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t _s10Calculator37AccessibilityMathEquationViewModifierVwCP_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  swift_retain();
  return a1;
}

uint64_t destroy for DismissModeMenuAction()
{
  swift_release();

  return swift_release();
}

uint64_t sub_100014560()
{
  swift_release();

  return swift_release();
}

uint64_t sub_10001459C(uint64_t a1)
{
  uint64_t v107 = type metadata accessor for LayoutDirection();
  uint64_t v2 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  v104 = &v81[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  double v6 = &v81[-v5];
  uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v95 = &v81[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v96 = &v81[-v11];
  __chkstk_darwin(v12);
  v92 = &v81[-v13];
  uint64_t v108 = sub_100032FA0(&qword_100159530);
  __chkstk_darwin(v108);
  v99 = &v81[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  uint64_t v17 = &v81[-v16];
  uint64_t v18 = sub_100032FA0(&qword_100154A48);
  __chkstk_darwin(v18 - 8);
  v94 = &v81[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v91 = &v81[-v21];
  __chkstk_darwin(v22);
  v105 = &v81[-v23];
  __chkstk_darwin(v24);
  v98 = &v81[-v25];
  __chkstk_darwin(v26);
  v93 = &v81[-v27];
  __chkstk_darwin(v28);
  v90 = &v81[-v29];
  __chkstk_darwin(v30);
  uint64_t v32 = &v81[-v31];
  __chkstk_darwin(v33);
  char v35 = &v81[-v34];
  uint64_t v36 = type metadata accessor for CalculatorAppContentView();
  long long v37 = (char *)(a1 + *(int *)(v36 + 32));
  char v38 = *v37;
  v101 = v37;
  uint64_t v39 = *((void *)v37 + 1);
  LOBYTE(v116) = v38;
  uint64_t v117 = v39;
  uint64_t v102 = sub_100032FA0(&qword_100154898);
  uint64_t result = State.wrappedValue.getter();
  if (v115) {
    return result;
  }
  v89 = v6;
  uint64_t v88 = v2;
  uint64_t v41 = a1 + *(int *)(v36 + 28);
  uint64_t v109 = sub_100032FA0(&qword_1001593D0);
  uint64_t v106 = v41;
  LazyState.wrappedValue.getter();
  uint64_t v42 = v116;
  swift_getKeyPath();
  uint64_t v116 = v42;
  uint64_t v100 = sub_100033224((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v43 = v42 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
  swift_beginAccess();
  uint64_t v44 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v86 = v8 + 16;
  v85 = v44;
  v44(v35, v43, v7);
  swift_release();
  uint64_t v45 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
  uint64_t v84 = v8 + 56;
  v83 = v45;
  v45((uint64_t)v35, 0, 1, v7);
  uint64_t v87 = v36;
  uint64_t v103 = a1;
  sub_1000D2040((uint64_t)v32);
  uint64_t v46 = (uint64_t)&v17[*(int *)(v108 + 48)];
  sub_100033344((uint64_t)v35, (uint64_t)v17, &qword_100154A48);
  sub_100033344((uint64_t)v32, v46, &qword_100154A48);
  v110 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v47 = v110(v17, 1, v7);
  uint64_t v97 = v8 + 48;
  if (v47 == 1)
  {
    sub_100032F44((uint64_t)v32, &qword_100154A48);
    sub_100032F44((uint64_t)v35, &qword_100154A48);
    if (v110((unsigned char *)v46, 1, v7) == 1)
    {
      sub_100032F44((uint64_t)v17, &qword_100154A48);
      v96 = 0;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  long long v48 = v90;
  sub_100033344((uint64_t)v17, (uint64_t)v90, &qword_100154A48);
  if (v110((unsigned char *)v46, 1, v7) == 1)
  {
    sub_100032F44((uint64_t)v32, &qword_100154A48);
    sub_100032F44((uint64_t)v35, &qword_100154A48);
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v48, v7);
LABEL_7:
    sub_100032F44((uint64_t)v17, &qword_100159530);
    goto LABEL_10;
  }
  char v49 = v92;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 32))(v92, v46, v7);
  sub_100033224(&qword_100159520, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  int v82 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v50 = v8;
  CGSize v51 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v51(v49, v7);
  sub_100032F44((uint64_t)v32, &qword_100154A48);
  sub_100032F44((uint64_t)v35, &qword_100154A48);
  v51(v48, v7);
  uint64_t v8 = v50;
  sub_100032F44((uint64_t)v17, &qword_100154A48);
  if (v82)
  {
    v96 = 0;
    goto LABEL_14;
  }
LABEL_10:
  LazyState.wrappedValue.getter();
  uint64_t v52 = v115;
  __n128 v53 = v93;
  sub_1000D2040((uint64_t)v93);
  if (v110(v53, 1, v7) == 1)
  {
    long long v54 = v96;
    (*(void (**)(unsigned char *, void, uint64_t))(v8 + 104))(v96, enum case for UserInterfaceSizeClass.regular(_:), v7);
    sub_100032F44((uint64_t)v53, &qword_100154A48);
  }
  else
  {
    long long v54 = v96;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v96, v53, v7);
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(void *)&v81[-16] = v52;
  *(void *)&v81[-8] = v54;
  uint64_t v115 = v52;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  v96 = 0;
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v54, v7);
  swift_release();
LABEL_14:
  uint64_t v56 = (uint64_t)v99;
  LazyState.wrappedValue.getter();
  uint64_t v57 = v115;
  swift_getKeyPath();
  uint64_t v115 = v57;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v58 = v57 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess();
  uint64_t v59 = (uint64_t)v98;
  v85(v98, v58, v7);
  swift_release();
  v83(v59, 0, 1, v7);
  uint64_t v60 = v105;
  sub_1000D2040((uint64_t)v105);
  uint64_t v61 = v56 + *(int *)(v108 + 48);
  sub_100033344(v59, v56, &qword_100154A48);
  sub_100033344((uint64_t)v60, v61, &qword_100154A48);
  if (v110((unsigned char *)v56, 1, v7) == 1)
  {
    sub_100032F44((uint64_t)v60, &qword_100154A48);
    sub_100032F44(v59, &qword_100154A48);
    if (v110((unsigned char *)v61, 1, v7) == 1)
    {
      sub_100032F44(v56, &qword_100154A48);
      uint64_t v62 = v88;
LABEL_26:
      uint64_t v66 = (uint64_t)v89;
      goto LABEL_27;
    }
    goto LABEL_19;
  }
  CGRect v63 = v91;
  sub_100033344(v56, (uint64_t)v91, &qword_100154A48);
  if (v110((unsigned char *)v61, 1, v7) == 1)
  {
    sub_100032F44((uint64_t)v60, &qword_100154A48);
    sub_100032F44(v59, &qword_100154A48);
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v63, v7);
LABEL_19:
    sub_100032F44(v56, &qword_100159530);
LABEL_22:
    LazyState.wrappedValue.getter();
    uint64_t v67 = v114;
    long long v68 = v94;
    sub_1000D2040((uint64_t)v94);
    if (v110(v68, 1, v7) == 1)
    {
      long long v69 = v95;
      (*(void (**)(unsigned char *, void, uint64_t))(v8 + 104))(v95, enum case for UserInterfaceSizeClass.regular(_:), v7);
      sub_100032F44((uint64_t)v68, &qword_100154A48);
    }
    else
    {
      long long v69 = v95;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v95, v68, v7);
    }
    uint64_t v62 = v88;
    uint64_t v70 = swift_getKeyPath();
    __chkstk_darwin(v70);
    *(void *)&v81[-16] = v67;
    *(void *)&v81[-8] = v69;
    uint64_t v114 = v67;
    v71 = v96;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    v96 = v71;
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v69, v7);
    swift_release();
    goto LABEL_26;
  }
  CGRect v64 = v92;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 32))(v92, v61, v7);
  sub_100033224(&qword_100159520, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  LODWORD(v108) = dispatch thunk of static Equatable.== infix(_:_:)();
  CGRect v65 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v65(v64, v7);
  sub_100032F44((uint64_t)v105, &qword_100154A48);
  sub_100032F44(v59, &qword_100154A48);
  v65(v63, v7);
  sub_100032F44(v56, &qword_100154A48);
  uint64_t v66 = (uint64_t)v89;
  if ((v108 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v62 = v88;
LABEL_27:
  LazyState.wrappedValue.getter();
  uint64_t v72 = v114;
  swift_getKeyPath();
  uint64_t v114 = v72;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v73 = v72 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  swift_beginAccess();
  uint64_t v74 = v107;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v66, v73, v107);
  swift_release();
  v75 = v104;
  sub_100005D0C((uint64_t)v104);
  sub_100033224(&qword_100159538, (void (*)(uint64_t))&type metadata accessor for LayoutDirection);
  char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
  v77 = *(void (**)(unsigned char *, uint64_t))(v62 + 8);
  v77(v75, v74);
  v77((unsigned char *)v66, v74);
  if ((v76 & 1) == 0)
  {
    LazyState.wrappedValue.getter();
    uint64_t v78 = v112;
    sub_100005D0C(v66);
    uint64_t v79 = swift_getKeyPath();
    __chkstk_darwin(v79);
    *(void *)&v81[-16] = v78;
    *(void *)&v81[-8] = v66;
    uint64_t v112 = v78;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    v77((unsigned char *)v66, v107);
    swift_release();
  }
  uint64_t v80 = *((void *)v101 + 1);
  LOBYTE(v112) = *v101;
  uint64_t v113 = v80;
  char v111 = 1;
  return State.wrappedValue.setter();
}

uint64_t sub_1000155E4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_100033AA8(v3, v2);
  swift_release();
  swift_getKeyPath();
  *(void *)(v0 + 16) = v4;
  uint64_t v5 = (_OWORD *)(v0 + 16);
  double v6 = (unsigned __int8 *)(v0 + 33);
  sub_1000330BC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v1) = *(unsigned __int8 *)(v4 + 53);
  swift_release();
  uint64_t v7 = *(void *)(v0 + 40);
  if (v1 != 6)
  {
    long long v16 = *(_OWORD *)(v7 + 32);
    *(unsigned char *)(v0 + 32) = *(unsigned char *)(v7 + 48);
    _OWORD *v5 = v16;
    sub_100032FA0(&qword_100156B68);
    FocusState.wrappedValue.getter();
    if (*v6 == 6) {
      goto LABEL_8;
    }
    uint64_t v15 = (long long *)(v7 + 32);
    uint64_t v17 = swift_retain();
    uint64_t v18 = sub_100033AA8(v17, v2);
    swift_release();
    swift_getKeyPath();
    *(void *)uint64_t v5 = v18;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    unsigned __int8 v9 = *(unsigned char *)(v18 + 53);
    swift_release();
    goto LABEL_7;
  }
  uint64_t v8 = swift_retain();
  sub_100033AA8(v8, v2);
  swift_release();
  unsigned __int8 v9 = sub_10000A794();
  swift_release();
  long long v10 = *(_OWORD *)(v7 + 32);
  *(unsigned char *)(v0 + 32) = *(unsigned char *)(v7 + 48);
  _OWORD *v5 = v10;
  sub_100032FA0(&qword_100156B68);
  FocusState.wrappedValue.getter();
  int v11 = *v6;
  if (v11 == 6 || v11 != v9)
  {
    uint64_t v12 = swift_retain();
    uint64_t v13 = sub_100033AA8(v12, v2);
    swift_release();
    swift_getKeyPath();
    uint64_t v14 = swift_task_alloc();
    *(void *)(v14 + 16) = v13;
    *(unsigned char *)(v14 + 24) = v9;
    *(void *)uint64_t v5 = v13;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    uint64_t v15 = (long long *)(v7 + 32);
    swift_task_dealloc();
LABEL_7:
    long long v19 = *v15;
    *(unsigned char *)(v0 + 32) = *((unsigned char *)v15 + 16);
    _OWORD *v5 = v19;
    *double v6 = v9;
    FocusState.wrappedValue.setter();
  }
LABEL_8:
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_1000158F4(uint64_t a1, int *a2)
{
  sub_100032FA0(&qword_1001590A8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for OpenWindowAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = sub_100032FA0(&qword_10015A1A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_100032FA0(&qword_10015A1B0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = sub_100032FA0(&qword_10015A1B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  sub_100032FA0(&qword_10015A1C0);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100015AA0(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for CalculatorExpressionManager();
  swift_allocObject();
  *(void *)(v1 + 16) = sub_10001C998();
  type metadata accessor for AnalyticsManager();
  uint64_t v4 = swift_allocObject();
  type metadata accessor for AnalyticsTimeStampInfo();
  uint64_t v5 = swift_allocObject();
  Date.init()();
  Date.init()();
  *(void *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 24) = 512;
  *(void *)(v2 + 24) = v4;
  *(_WORD *)(v2 + 32) = 257;
  *(_DWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 52) = 1536;
  sub_100038C4C();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10010E6E0;
  *(void *)(v6 + 32) = type metadata accessor for CalculateExpression.LiteralOperation();
  *(void *)(v6 + 40) = type metadata accessor for CalculateExpression.ConstantOperation();
  *(void *)(v6 + 48) = type metadata accessor for CalculateExpression.RandOperation();
  *(void *)(v6 + 56) = type metadata accessor for CalculateExpression.DeleteOperation();
  *(void *)(v2 + 56) = v6;
  *(unsigned char *)(v2 + 64) = sub_100008AC8();
  *(unsigned char *)(v2 + 65) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = _swiftEmptyArrayStorage;
  ObservationRegistrar.init()();
  *(void *)(v2 + 40) = a1;
  uint64_t v7 = qword_100154760;
  id v8 = a1;
  if (v7 != -1) {
    swift_once();
  }
  unsigned __int8 v9 = (void *)qword_100161370;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 stringForKey:v10];

  if (v11)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    v48._countAndFlagsBits = v12;
    v48._object = v14;
    LODWORD(v15) = sub_100005998(v48);
    if (v15 == 4) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v15;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_100017E2C(v15, 1);
  id v16 = [self defaultCenter];
  if (qword_1001544E8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1001610F0;
  id v18 = [self mainQueue];
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v8;
  uint64_t v46 = sub_1000604B0;
  uint64_t v47 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100055AA0;
  uint64_t v45 = &unk_10014A758;
  uint64_t v21 = _Block_copy(aBlock);
  id v22 = v8;
  swift_release();
  id v23 = [v16 addObserverForName:v17 object:0 queue:v18 usingBlock:v21];
  _Block_release(v21);
  swift_unknownObjectRelease();

  uint64_t v24 = (void *)qword_100161370;
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v24 objectForKey:v25];

  if (v26)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v43, 0, sizeof(v43));
  }
  sub_1000125D0((uint64_t)v43, (uint64_t)aBlock);
  if (!v45)
  {
    sub_100032F44((uint64_t)aBlock, &qword_100155208);
    goto LABEL_17;
  }
  if (!swift_dynamicCast())
  {
LABEL_17:
    char v27 = 1;
    goto LABEL_18;
  }
  char v27 = v42;
LABEL_18:
  sub_1000086E8(v27);
  uint64_t v28 = (void *)qword_100161370;
  NSString v29 = String._bridgeToObjectiveC()();
  LOBYTE(v28) = [v28 BOOLForKey:v29];

  sub_10000E104((char)v28);
  sub_10000B89C();
  uint64_t v30 = (void *)qword_100161370;
  NSString v31 = String._bridgeToObjectiveC()();
  LOBYTE(v30) = [v30 BOOLForKey:v31];

  sub_1000115EC((char)v30);
  uint64_t v32 = (void *)qword_100161370;
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = [v32 stringForKey:v33];

  if (v34)
  {
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v37 = v36;

    v38._countAndFlagsBits = v35;
    v38._object = v37;
    unint64_t v39 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100149420, v38);
    swift_bridgeObjectRelease();
    if (v39 <= 2)
    {
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      aBlock[0] = v2;
      sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
  }
  *(unsigned char *)(*(void *)(v2 + 24) + 27) = 1;
  return v2;
}

uint64_t sub_100016120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001615C(a1, a2);
}

uint64_t sub_10001615C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100032FA0(&qword_100159570);
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100032FA0(&qword_100159578);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001641C(a1, (uint64_t)v11);
  uint64_t v16 = *(void *)(v2 + 48);
  sub_100033344((uint64_t)v11, (uint64_t)v15, &qword_100159570);
  *(void *)&v15[*(int *)(v13 + 44)] = v16;
  swift_retain();
  sub_100032F44((uint64_t)v11, &qword_100159570);
  uint64_t v17 = (_OWORD *)swift_allocObject();
  long long v18 = *(_OWORD *)(v2 + 16);
  v17[1] = *(_OWORD *)v2;
  v17[2] = v18;
  long long v19 = *(_OWORD *)(v2 + 48);
  v17[3] = *(_OWORD *)(v2 + 32);
  v17[4] = v19;
  sub_1000163B8(v2);
  static TaskPriority.userInitiated.getter();
  uint64_t v20 = (char *)(a2 + *(int *)(sub_100032FA0(&qword_100159590) + 36));
  uint64_t v21 = type metadata accessor for _TaskModifier();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(&v20[*(int *)(v21 + 20)], v8, v5);
  *(void *)uint64_t v20 = &unk_100159588;
  *((void *)v20 + 1) = v17;
  sub_100033344((uint64_t)v15, a2, &qword_100159578);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_100032F44((uint64_t)v15, &qword_100159578);
}

uint64_t sub_1000163B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001641C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v16[1] = a2;
  uint64_t v4 = sub_100032FA0(&qword_100159598);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_1001595A0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_1001595A8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v17 = *v2;
  sub_100032FA0(&qword_100154898);
  State.wrappedValue.getter();
  if ((v19 & 1) != 0
    || (long long v17 = v2[1],
        char v18 = *((unsigned char *)v2 + 32),
        sub_100032FA0(&qword_1001555B8),
        Binding.wrappedValue.getter(),
        (v19 & 1) == 0))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v15(v13, a1, v10);
    v15(v9, (uint64_t)v13, v10);
    swift_storeEnumTagMultiPayload();
    sub_100040BE4(&qword_1001595B0, &qword_1001595A8);
    sub_1000167C8();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
    sub_100033344((uint64_t)v6, (uint64_t)v9, &qword_100159598);
    swift_storeEnumTagMultiPayload();
    sub_100040BE4(&qword_1001595B0, &qword_1001595A8);
    sub_1000167C8();
    _ConditionalContent<>.init(storage:)();
    return sub_100032F44((uint64_t)v6, &qword_100159598);
  }
}

uint64_t sub_100016728(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    sub_100040BE4(&qword_1001595B0, &qword_1001595A8);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000167C8()
{
  return sub_100016728(&qword_1001595B8, &qword_100159598, (void (*)(void))sub_100039D1C);
}

uint64_t sub_100016804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v159 = a2;
  uint64_t v148 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  v147 = *(void (***)(char *, uint64_t))(v148 - 8);
  __chkstk_darwin(v148);
  v146 = (char *)&v128 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100032FA0(&qword_10015A4B0);
  __chkstk_darwin(v4 - 8);
  v145 = (void (**)(char *, uint64_t))((char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(a1 + 24);
  type metadata accessor for ModifiedContent();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = sub_10003BF90();
  uint64_t v199 = v10;
  unint64_t v200 = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = *(void *)(a1 + 40);
  unint64_t v14 = sub_10003C064();
  uint64_t v197 = v13;
  unint64_t v198 = v14;
  uint64_t v195 = swift_getWitnessTable();
  v196 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v15 = swift_getWitnessTable();
  v143 = (char *)v7;
  uint64_t v189 = v7;
  v190 = &type metadata for EmptyView;
  uint64_t v140 = v9;
  uint64_t v191 = v9;
  uint64_t v192 = WitnessTable;
  uint64_t v139 = WitnessTable;
  v193 = &protocol witness table for EmptyView;
  uint64_t v194 = v15;
  uint64_t v136 = v15;
  uint64_t v16 = type metadata accessor for NavigationSplitView();
  uint64_t v138 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  v137 = (char *)&v128 - v17;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v158 = v16;
  uint64_t v189 = v16;
  v190 = (void *)v18;
  v166 = (void *)v18;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v144 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v142 = (char *)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v141 = (char *)&v128 - v22;
  uint64_t v152 = *(void *)(a1 - 8);
  __chkstk_darwin(v23);
  uint64_t v150 = v24;
  v151 = (char *)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_100032FA0(&qword_10015A4C8);
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  v129 = (char *)&v128 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v131 = (char *)&v128 - v27;
  sub_1000317D8(&qword_100155378);
  uint64_t v163 = v8;
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v135 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  v149 = (char *)&v128 - v29;
  uint64_t v164 = v6;
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t v162 = v10;
  uint64_t v187 = v10;
  v188 = &protocol witness table for _PaddingLayout;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v189 = v30;
  v190 = (void *)v31;
  uint64_t v32 = swift_getOpaqueTypeMetadata2();
  uint64_t v33 = sub_100040BE4(&qword_100155370, &qword_100155378);
  uint64_t v161 = v13;
  uint64_t v185 = v13;
  uint64_t v186 = v33;
  uint64_t v34 = v160;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v189 = v30;
  v190 = (void *)v31;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v165 = v28;
  uint64_t v189 = v28;
  v190 = (void *)v32;
  v170 = (void *)v32;
  uint64_t v169 = v35;
  uint64_t v191 = v35;
  uint64_t v192 = OpaqueTypeConformance2;
  uint64_t v168 = OpaqueTypeConformance2;
  uint64_t v37 = swift_getOpaqueTypeMetadata2();
  uint64_t v132 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  unint64_t v39 = (char *)&v128 - v38;
  uint64_t v40 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void (***)(char *, uint64_t))(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v128 - v42;
  uint64_t v156 = v44;
  uint64_t v45 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  Swift::String v48 = (void (**)(char *, uint64_t))((char *)&v128 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v49);
  v130 = (char *)&v128 - v50;
  uint64_t v153 = v51;
  uint64_t v157 = OpaqueTypeMetadata2;
  uint64_t v155 = type metadata accessor for _ConditionalContent();
  uint64_t v154 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  v167 = (char *)&v128 - v52;
  if (sub_10000A2D8(a1))
  {
    v146 = (char *)v37;
    uint64_t v53 = v134;
    uint64_t v148 = swift_allocBox();
    v147 = v48;
    uint64_t v55 = v54;
    char v56 = *(unsigned char *)(v34 + *(int *)(a1 + 60) + 8);
    uint64_t v57 = swift_retain();
    sub_10003B8B4(v57, v56);
    swift_release();
    type metadata accessor for CalculatorToolbarViewModel();
    sub_100012230(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
    Bindable<A>.init(wrappedValue:)();
    uint64_t v189 = static Color.black.getter();
    static Edge.Set.all.getter();
    v145 = v41;
    uint64_t v58 = v163;
    v143 = v43;
    uint64_t v59 = v161;
    View.background<A>(_:ignoresSafeAreaEdges:)();
    swift_release();
    uint64_t v60 = v133;
    uint64_t v61 = v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v129, v55, v53);
    v142 = v39;
    uint64_t v62 = v131;
    Bindable.projectedValue.getter();
    CGRect v63 = *(void (**)(char *, uint64_t))(v60 + 8);
    v63(v61, v53);
    swift_getKeyPath();
    uint64_t v144 = v46;
    Bindable<A>.subscript.getter();
    swift_release();
    v63(v62, v53);
    LODWORD(v141) = v191;
    uint64_t v64 = v152;
    CGRect v65 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v34, a1);
    unint64_t v66 = (*(unsigned __int8 *)(v64 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    uint64_t v67 = (char *)swift_allocObject();
    *((void *)v67 + 2) = v164;
    *((void *)v67 + 3) = v58;
    *((void *)v67 + 4) = v162;
    *((void *)v67 + 5) = v59;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v67[v66], v65, a1);
    uint64_t v68 = swift_checkMetadataState();
    uint64_t v69 = v168;
    uint64_t v127 = v168;
    uint64_t v70 = v169;
    uint64_t v125 = v68;
    uint64_t v126 = v169;
    v71 = v142;
    uint64_t v72 = v165;
    uint64_t v73 = v149;
    View.sheet<A>(isPresented:onDismiss:content:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v73, v72);
    static SafeAreaRegions.keyboard.getter();
    static Edge.Set.all.getter();
    uint64_t v189 = v72;
    v190 = (void *)v68;
    uint64_t v191 = v70;
    uint64_t v192 = v69;
    uint64_t v74 = swift_getOpaqueTypeConformance2();
    v75 = v143;
    char v76 = v146;
    View.ignoresSafeArea(_:edges:)();
    (*(void (**)(char *, char *))(v132 + 8))(v71, v76);
    uint64_t v173 = v74;
    v174 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
    swift_retain();
    uint64_t v77 = v156;
    uint64_t v78 = swift_getWitnessTable();
    uint64_t v79 = (uint64_t)v147;
    View.onAppear(perform:)();
    swift_release();
    v145[1](v75, v77);
    uint64_t v171 = v78;
    v172 = &protocol witness table for _AppearanceActionModifier;
    uint64_t v80 = v153;
    swift_getWitnessTable();
    uint64_t v81 = v144;
    int v82 = *(void (**)(char *, uint64_t, uint64_t))(v144 + 16);
    v83 = v130;
    v82(v130, v79, v80);
    uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v84(v79, v80);
    v82((char *)v79, (uint64_t)v83, v80);
    uint64_t v85 = v80;
    uint64_t v86 = v158;
    uint64_t v87 = v166;
    uint64_t v189 = v158;
    v190 = v166;
    swift_getOpaqueTypeConformance2();
    sub_100005AC0(v79, v85);
    v84(v79, v85);
    v84((uint64_t)v83, v85);
    uint64_t v88 = v165;
    swift_release();
  }
  else
  {
    uint64_t v89 = v152;
    v149 = *(char **)(v152 + 16);
    v90 = v151;
    ((void (*)(char *, uint64_t, uint64_t))v149)(v151, v34, a1);
    type metadata accessor for MainActor();
    uint64_t v91 = static MainActor.shared.getter();
    uint64_t v92 = *(unsigned __int8 *)(v89 + 80);
    uint64_t v93 = (v92 + 64) & ~v92;
    v150 += v93;
    uint64_t v135 = v92 | 7;
    v94 = (char *)swift_allocObject();
    *((void *)v94 + 2) = v91;
    *((void *)v94 + 3) = &protocol witness table for MainActor;
    uint64_t v95 = v163;
    *((void *)v94 + 4) = v164;
    *((void *)v94 + 5) = v95;
    uint64_t v96 = v161;
    *((void *)v94 + 6) = v162;
    *((void *)v94 + 7) = v96;
    uint64_t v97 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
    v97(&v94[v93], v90, a1);
    ((void (*)(char *, uint64_t, uint64_t))v149)(v90, v34, a1);
    uint64_t v98 = static MainActor.shared.getter();
    v99 = (void *)swift_allocObject();
    v99[2] = v98;
    uint64_t v100 = v164;
    v99[3] = &protocol witness table for MainActor;
    v99[4] = v100;
    uint64_t v101 = v163;
    v99[5] = v163;
    uint64_t v102 = (char *)v99 + v93;
    uint64_t v103 = v162;
    uint64_t v104 = v161;
    v99[6] = v162;
    v99[7] = v104;
    v97(v102, v90, a1);
    type metadata accessor for NavigationSplitViewVisibility();
    uint64_t v105 = Binding.init(get:set:)();
    __chkstk_darwin(v105);
    *(&v128 - 6) = v100;
    *(&v128 - 5) = v101;
    __chkstk_darwin(v106);
    *(&v128 - 6) = v100;
    *(&v128 - 5) = v101;
    uint64_t v125 = v103;
    uint64_t v126 = v104;
    uint64_t v127 = v136;
    uint64_t v107 = v137;
    NavigationSplitView.init<>(columnVisibility:sidebar:detail:)();
    uint64_t v108 = v147;
    uint64_t v109 = v146;
    uint64_t v110 = v148;
    ((void (*)(char *, void, uint64_t))v147[13])(v146, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v148);
    uint64_t v111 = (uint64_t)v142;
    uint64_t v86 = v158;
    uint64_t v112 = v166;
    View.navigationBarTitleDisplayMode(_:)();
    v108[1](v109, v110);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v107, v86);
    uint64_t v189 = v86;
    v190 = v112;
    uint64_t v164 = swift_getOpaqueTypeConformance2();
    uint64_t v113 = v144;
    uint64_t v114 = *(void (**)(char *, uint64_t, uint64_t))(v144 + 16);
    uint64_t v115 = v141;
    uint64_t v116 = v157;
    v114(v141, v111, v157);
    uint64_t v117 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
    v117(v111, v116);
    v114((char *)v111, (uint64_t)v115, v116);
    uint64_t v88 = v165;
    uint64_t v189 = v165;
    v190 = v170;
    uint64_t v191 = v169;
    uint64_t v192 = v168;
    uint64_t v183 = swift_getOpaqueTypeConformance2();
    v184 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
    uint64_t v181 = swift_getWitnessTable();
    v182 = &protocol witness table for _AppearanceActionModifier;
    uint64_t v118 = v153;
    swift_getWitnessTable();
    sub_1000FEC48(v111, v118, v116);
    v117(v111, v116);
    v117((uint64_t)v115, v116);
    uint64_t v87 = v166;
  }
  uint64_t v189 = v88;
  v190 = v170;
  uint64_t v191 = v169;
  uint64_t v192 = v168;
  uint64_t v179 = swift_getOpaqueTypeConformance2();
  v180 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v177 = swift_getWitnessTable();
  v178 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v119 = swift_getWitnessTable();
  uint64_t v189 = v86;
  v190 = v87;
  uint64_t v120 = swift_getOpaqueTypeConformance2();
  uint64_t v175 = v119;
  uint64_t v176 = v120;
  uint64_t v121 = v155;
  swift_getWitnessTable();
  uint64_t v122 = v154;
  v123 = v167;
  (*(void (**)(uint64_t, char *, uint64_t))(v154 + 16))(v159, v167, v121);
  return (*(uint64_t (**)(char *, uint64_t))(v122 + 8))(v123, v121);
}

uint64_t destroy for DelayEffectModifier()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CalculatorToolbar(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for SidebarButton(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for CalculatorDisplayView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void sub_100017E00()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_100017E2C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  swift_getKeyPath();
  uint64_t v43 = v2;
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v42 = *(unsigned __int8 *)(v2 + 48);
  swift_getKeyPath();
  uint64_t v43 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v6 = *(id *)(v2 + 40);
  sub_10000536C(a1, (uint64_t)v6);

  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  if ((a2 & 1) != 0
    && (swift_getKeyPath(),
        uint64_t v43 = v3,
        ObservationRegistrar.access<A, B>(_:keyPath:)(),
        swift_release(),
        (sub_100018D24(*(unsigned char *)(v3 + 48), a1) & 1) != 0))
  {
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100021598(v7, (uint64_t)qword_100161340);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v11 = String.init<A>(describing:)();
      sub_10000DAA8(v11, v12, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Mode set to: %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v13 = v42;
  }
  else
  {
    swift_getKeyPath();
    uint64_t v43 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v13 = v42;
    if (sub_100018D24(v42, *(unsigned char *)(v3 + 48)))
    {
      if (qword_100154750 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100021598(v14, (uint64_t)qword_100161340);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136446210;
        uint64_t v18 = String.init<A>(describing:)();
        sub_10000DAA8(v18, v19, &v43);
        uint64_t v13 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "No change in current mode: %{public}s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      if (qword_100154750 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100021598(v20, (uint64_t)qword_100161340);
      swift_retain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446466;
        uint64_t v24 = String.init<A>(describing:)();
        sub_10000DAA8(v24, v25, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2082;
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v26 = String.init<A>(describing:)();
        sub_10000DAA8(v26, v27, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Changed mode from: %{public}s to: %{public}s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        uint64_t v13 = v42;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
    }
  }
  swift_getKeyPath();
  uint64_t v43 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ((sub_100018D24(v13, *(unsigned char *)(v3 + 48)) & 1) == 0)
  {
    if (qword_100154760 != -1) {
      swift_once();
    }
    uint64_t v28 = (void *)qword_100161370;
    swift_getKeyPath();
    uint64_t v43 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v30 = String._bridgeToObjectiveC()();
    [v28 setValue:v29 forKey:v30];

    uint64_t v31 = *(void *)(v3 + 24);
    swift_retain();
    sub_10005ECF0(0, v3, v31);
    swift_release();
  }
  switch(v13)
  {
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_28;
    default:
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v32)
      {
LABEL_28:
        swift_getKeyPath();
        uint64_t v43 = v3;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        switch(*(unsigned char *)(v3 + 48))
        {
          case 2:
            swift_bridgeObjectRelease();
            goto LABEL_32;
          default:
            char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v33) {
              goto LABEL_32;
            }
LABEL_39:
            uint64_t v36 = *(void *)(v3 + 16);
            sub_1000DD494();
            swift_retain();
            CalculateExpression.clear()();
            swift_release();
            swift_getKeyPath();
            uint64_t v43 = v36;
            sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            if (*(unsigned char *)(v36 + 41) == 1)
            {
              uint64_t KeyPath = swift_getKeyPath();
              __chkstk_darwin(KeyPath);
              uint64_t v43 = v36;
              ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
              swift_release();
            }
            break;
        }
      }
      else
      {
LABEL_32:
        switch(v13)
        {
          case 2:
            swift_bridgeObjectRelease();
            break;
          default:
            char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v34 & 1) == 0)
            {
              swift_getKeyPath();
              uint64_t v43 = v3;
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              switch(*(unsigned char *)(v3 + 48))
              {
                case 3:
                  swift_bridgeObjectRelease();
                  goto LABEL_39;
                default:
                  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v35) {
                    goto LABEL_39;
                  }
                  break;
              }
            }
            break;
        }
      }
      swift_getKeyPath();
      uint64_t v43 = v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      switch(*(unsigned char *)(v3 + 48))
      {
        case 3:
          swift_bridgeObjectRelease();
          uint64_t v39 = 1;
          break;
        default:
          char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v39 = v38 & 1;
          break;
      }
      swift_getKeyPath();
      uint64_t v43 = v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(void *)(v3 + 72) != v39)
      {
        uint64_t v40 = swift_getKeyPath();
        __chkstk_darwin(v40);
        uint64_t v43 = v3;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
      }
      swift_getKeyPath();
      uint64_t v43 = v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v3 + 49) == 1 && (sub_10000C780() & 1) == 0) {
        sub_10000E104(0);
      }
      swift_getKeyPath();
      uint64_t v43 = v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      return sub_1000094FC(*(unsigned __int8 *)(v3 + 48));
  }
}

uint64_t sub_100018D24(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6369736162;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6369736162;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6669746E65696373;
      unint64_t v3 = 0xEA00000000006369;
      break;
    case 2:
      uint64_t v5 = 0x657061506874616DLL;
      unint64_t v3 = 0xE900000000000072;
      break;
    case 3:
      uint64_t v5 = 0x6D6D6172676F7270;
      unint64_t v3 = 0xEA00000000007265;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA00000000006369;
      if (v5 == 0x6669746E65696373) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x657061506874616DLL;
      unint64_t v6 = 0xE900000000000072;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEA00000000007265;
      if (v5 == 0x6D6D6172676F7270) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t destroy for CalculatorDisplayView()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100018EF0@<X0>(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v46 = a3;
  uint64_t v4 = type metadata accessor for AccessibilityTraits();
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100032FA0(&qword_100156DC0);
  __chkstk_darwin(v43);
  uint64_t v45 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100032FA0(&qword_100156DC8);
  __chkstk_darwin(v44);
  char v38 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v39 = (char *)&v35 - v10;
  __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v35 - v12;
  __chkstk_darwin(v13);
  uint64_t v40 = (char *)&v35 - v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v35 - v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v35 - v19;
  uint64_t v21 = swift_retain();
  uint64_t v22 = sub_100033AA8(v21, a2 & 1);
  swift_release();
  uint64_t v23 = *(void *)(v22 + 16);
  swift_getKeyPath();
  uint64_t v47 = v23;
  sub_1000330BC(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  swift_release();
  uint64_t v24 = CalculateExpression.activeError.getter();
  swift_release();
  if (v24)
  {
    swift_getErrorValue();
    uint64_t v47 = Error.localizedDescription.getter();
    uint64_t v48 = v25;
    sub_100032FA0(&qword_100156DD0);
    sub_100040BE4(&qword_100156DD8, &qword_100156DD0);
    sub_100023B24();
    View.accessibilityLabel<A>(_:)();
    swift_bridgeObjectRelease();
    sub_100033344((uint64_t)v20, v45, &qword_100156DC8);
    swift_storeEnumTagMultiPayload();
    sub_10001962C();
    _ConditionalContent<>.init(storage:)();
    swift_errorRelease();
    uint64_t v17 = v20;
  }
  else
  {
    static AccessibilityTraits.isMathEquation.getter();
    sub_100032FA0(&qword_100156DD0);
    sub_100040BE4(&qword_100156DD8, &qword_100156DD0);
    uint64_t v26 = (uint64_t)v38;
    View.accessibilityAddTraits(_:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v37);
    uint64_t v27 = swift_retain();
    uint64_t v28 = sub_100033AA8(v27, a2 & 1);
    swift_release();
    uint64_t v29 = *(void *)(v28 + 16);
    swift_getKeyPath();
    uint64_t v47 = v29;
    sub_1000330BC(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    swift_release();
    CalculateExpression.accessibilityMathEquation.getter();
    swift_release();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t)v39;
    ModifiedContent<>.accessibilityCustomAttribute(_:value:)();

    sub_100032F44(v26, &qword_100156DC8);
    uint64_t v32 = (uint64_t)v41;
    ModifiedContent<>.accessibilityCustomAttribute(_:value:)();
    sub_100032F44(v31, &qword_100156DC8);
    uint64_t v33 = (uint64_t)v40;
    ModifiedContent<>.accessibilityCustomAttribute(_:value:)();
    sub_100032F44(v32, &qword_100156DC8);
    sub_10002D9D0(v33, (uint64_t)v17, &qword_100156DC8);
    sub_100033344((uint64_t)v17, v45, &qword_100156DC8);
    swift_storeEnumTagMultiPayload();
    sub_10001962C();
    _ConditionalContent<>.init(storage:)();
  }
  return sub_100032F44((uint64_t)v17, &qword_100156DC8);
}

unint64_t sub_10001962C()
{
  unint64_t result = qword_100156DE0;
  if (!qword_100156DE0)
  {
    sub_1000317D8(&qword_100156DC8);
    sub_100040BE4(&qword_100156DD8, &qword_100156DD0);
    sub_1000330BC(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156DE0);
  }
  return result;
}

uint64_t sub_1000196FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v149 = a1;
  uint64_t v150 = type metadata accessor for LayoutDirection();
  uint64_t v148 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  v147 = &v125[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v145 = *(void *)(v4 - 8);
  uint64_t v146 = v4;
  __chkstk_darwin(v4);
  uint64_t v144 = &v125[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_100032FA0(&qword_100156FE8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v125[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100032FA0(&qword_100156FF0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v125[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_100032FA0(&qword_100156FF8);
  __chkstk_darwin(v12);
  uint64_t v14 = &v125[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v135 = sub_100032FA0(&qword_100157000);
  __chkstk_darwin(v135);
  uint64_t v16 = &v125[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v129 = sub_100032FA0(&qword_100157008);
  __chkstk_darwin(v129);
  uint64_t v18 = &v125[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v132 = sub_100032FA0(&qword_100157010);
  uint64_t v131 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  v151 = &v125[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v130 = sub_100032FA0(&qword_100157018);
  __chkstk_darwin(v130);
  uint64_t v152 = &v125[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v133 = sub_100032FA0(&qword_100157020);
  __chkstk_darwin(v133);
  uint64_t v134 = &v125[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v139 = sub_100032FA0(&qword_100157028);
  __chkstk_darwin(v139);
  uint64_t v136 = &v125[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = sub_100032FA0(&qword_100157030);
  uint64_t v141 = *(void *)(v23 - 8);
  uint64_t v142 = v23;
  __chkstk_darwin(v23);
  uint64_t v138 = &v125[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v140 = sub_100032FA0(&qword_100157038);
  __chkstk_darwin(v140);
  v137 = &v125[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  v143 = &v125[-v27];
  sub_1000971A0((uint64_t)v8);
  char v28 = static Edge.Set.top.getter();
  if (qword_100154288 != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_100033344((uint64_t)v8, (uint64_t)v11, &qword_100156FE8);
  uint64_t v37 = &v11[*(int *)(v9 + 36)];
  *uint64_t v37 = v28;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  sub_100032F44((uint64_t)v8, &qword_100156FE8);
  char v38 = static Edge.Set.bottom.getter();
  uint64_t v39 = *(void *)(v2 + 16);
  char v40 = *(unsigned char *)(v2 + 24);
  uint64_t v41 = swift_retain();
  sub_10002BD88(v41, v40);
  swift_release();
  sub_10001A4E8();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  sub_100033344((uint64_t)v11, (uint64_t)v14, &qword_100156FF0);
  uint64_t v50 = &v14[*(int *)(v12 + 36)];
  *uint64_t v50 = v38;
  *((void *)v50 + 1) = v43;
  *((void *)v50 + 2) = v45;
  *((void *)v50 + 3) = v47;
  *((void *)v50 + 4) = v49;
  v50[40] = 0;
  sub_100032F44((uint64_t)v11, &qword_100156FF0);
  char v51 = static Edge.Set.horizontal.getter();
  uint64_t v52 = swift_retain();
  sub_10002BD88(v52, v40);
  swift_release();
  sub_10001A4E8();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  sub_100033344((uint64_t)v14, (uint64_t)v16, &qword_100156FF8);
  uint64_t v61 = &v16[*(int *)(v135 + 36)];
  *uint64_t v61 = v51;
  *((void *)v61 + 1) = v54;
  *((void *)v61 + 2) = v56;
  *((void *)v61 + 3) = v58;
  *((void *)v61 + 4) = v60;
  v61[40] = 0;
  sub_100032F44((uint64_t)v14, &qword_100156FF8);
  char v62 = static Edge.Set.horizontal.getter();
  uint64_t v63 = swift_retain();
  sub_10002BD88(v63, v40);
  swift_release();
  sub_100006B10();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  sub_100033344((uint64_t)v16, (uint64_t)v18, &qword_100157000);
  uint64_t v72 = &v18[*(int *)(v129 + 36)];
  *uint64_t v72 = v62;
  *((void *)v72 + 1) = v65;
  *((void *)v72 + 2) = v67;
  *((void *)v72 + 3) = v69;
  *((void *)v72 + 4) = v71;
  v72[40] = 0;
  sub_100032F44((uint64_t)v16, &qword_100157000);
  sub_100032FA0(&qword_100157040);
  sub_10009750C(&qword_100157048, &qword_100157008, (void (*)(void))sub_100097494);
  uint64_t v73 = sub_1000317D8(&qword_1001570C0);
  uint64_t v74 = sub_100040BE4(&qword_1001570C8, &qword_1001570C0);
  uint64_t v153 = v73;
  unint64_t v154 = v74;
  swift_getOpaqueTypeConformance2();
  View.toolbar<A>(content:)();
  sub_100032F44((uint64_t)v18, &qword_100157008);
  uint64_t v128 = static Color.clear.getter();
  uint64_t v127 = static SafeAreaRegions.keyboard.getter();
  int v126 = static Edge.Set.all.getter();
  uint64_t v155 = *(void *)v2;
  char v156 = *(unsigned char *)(v2 + 8);
  uint64_t v75 = *(void *)(v2 + 32);
  char v76 = *(unsigned char *)(v2 + 40);
  uint64_t v77 = (_OWORD *)swift_allocObject();
  long long v78 = *(_OWORD *)(v2 + 16);
  v77[1] = *(_OWORD *)v2;
  v77[2] = v78;
  *(_OWORD *)((char *)v77 + 41) = *(_OWORD *)(v2 + 25);
  uint64_t v79 = (_OWORD *)swift_allocObject();
  long long v80 = *(_OWORD *)(v2 + 16);
  v79[1] = *(_OWORD *)v2;
  v79[2] = v80;
  uint64_t v135 = v2;
  *(_OWORD *)((char *)v79 + 41) = *(_OWORD *)(v2 + 25);
  swift_retain();
  sub_100025ED0((uint64_t)&v155);
  sub_100032F38(v75, v76);
  uint64_t v129 = v39;
  swift_retain();
  sub_100025ED0((uint64_t)&v155);
  sub_100032F38(v75, v76);
  uint64_t v81 = static Alignment.center.getter();
  uint64_t v83 = v82;
  uint64_t v84 = v131;
  uint64_t v86 = v151;
  uint64_t v85 = v152;
  uint64_t v87 = v132;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v131 + 16))(v152, v151, v132);
  uint64_t v88 = &v85[*(int *)(v130 + 36)];
  uint64_t v89 = v127;
  *(void *)uint64_t v88 = v128;
  *((void *)v88 + 1) = v89;
  v88[16] = v126;
  *((void *)v88 + 3) = sub_1000144B8;
  *((void *)v88 + 4) = 0;
  *((void *)v88 + 5) = sub_10003DC80;
  *((void *)v88 + 6) = v77;
  *((void *)v88 + 7) = sub_100005CDC;
  *((void *)v88 + 8) = 0;
  *((void *)v88 + 9) = sub_10003DD6C;
  *((void *)v88 + 10) = v79;
  *((void *)v88 + 11) = v81;
  *((void *)v88 + 12) = v83;
  (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v86, v87);
  uint64_t v90 = static Alignment.center.getter();
  v151 = v91;
  sub_100032F38(v75, v76);
  LOBYTE(v87) = sub_100034598(v75, v76);
  sub_100032EAC(v75, v76);
  if (v87)
  {
    uint64_t KeyPath = swift_getKeyPath();
    type metadata accessor for CalculatorViewModel();
    sub_10003314C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    uint64_t v93 = Environment.init<A>(_:)();
    uint64_t v94 = 0;
    char v96 = v95 & 1;
  }
  else
  {
    uint64_t KeyPath = 0;
    uint64_t v93 = 0;
    char v96 = 0;
    uint64_t v94 = 65280;
  }
  uint64_t v97 = v152;
  uint64_t v98 = v134;
  sub_100033344((uint64_t)v152, (uint64_t)v134, &qword_100157018);
  v99 = &v98[*(int *)(v133 + 36)];
  *(void *)v99 = KeyPath;
  *((void *)v99 + 1) = 0;
  *((void *)v99 + 2) = v94;
  *((void *)v99 + 3) = v93;
  v99[32] = v96;
  uint64_t v100 = v151;
  *((void *)v99 + 5) = v90;
  *((void *)v99 + 6) = v100;
  sub_100032F44((uint64_t)v97, &qword_100157018);
  uint64_t v101 = (_OWORD *)swift_allocObject();
  uint64_t v102 = v135;
  long long v103 = *(_OWORD *)(v135 + 16);
  v101[1] = *(_OWORD *)v135;
  v101[2] = v103;
  *(_OWORD *)((char *)v101 + 41) = *(_OWORD *)(v102 + 25);
  swift_retain();
  sub_100025ED0((uint64_t)&v155);
  sub_100032F38(v75, v76);
  uint64_t v104 = static Alignment.center.getter();
  uint64_t v106 = v105;
  uint64_t v107 = v136;
  sub_100033344((uint64_t)v98, (uint64_t)v136, &qword_100157020);
  uint64_t v108 = v139;
  uint64_t v109 = (uint64_t (**)@<X0>(uint64_t *@<X0>, double (**)@<D0>(uint64_t@<X8>)@<X8>))&v107[*(int *)(v139 + 36)];
  *uint64_t v109 = sub_10003DDE0;
  v109[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, double (**)@<D0>(uint64_t@<X8>)@<X8>))v101;
  v109[2] = (uint64_t (*)@<X0>(uint64_t *@<X0>, double (**)@<D0>(uint64_t@<X8>)@<X8>))v104;
  v109[3] = v106;
  sub_100032F44((uint64_t)v98, &qword_100157020);
  uint64_t v110 = v144;
  static AccessibilityChildBehavior.contain.getter();
  unint64_t v111 = sub_1000976D8();
  uint64_t v112 = v138;
  View.accessibilityElement(children:)();
  (*(void (**)(unsigned char *, uint64_t))(v145 + 8))(v110, v146);
  sub_100032F44((uint64_t)v107, &qword_100157028);
  uint64_t v153 = v108;
  unint64_t v154 = v111;
  swift_getOpaqueTypeConformance2();
  uint64_t v113 = (uint64_t)v137;
  uint64_t v114 = v142;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v141 + 8))(v112, v114);
  uint64_t v115 = (uint64_t)v143;
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)();
  sub_100032F44(v113, &qword_100157038);
  uint64_t v116 = swift_getKeyPath();
  uint64_t v118 = v147;
  uint64_t v117 = v148;
  uint64_t v119 = v150;
  (*(void (**)(unsigned char *, void, uint64_t))(v148 + 104))(v147, enum case for LayoutDirection.leftToRight(_:), v150);
  uint64_t v120 = sub_100032FA0(&qword_100157108);
  uint64_t v121 = v149;
  uint64_t v122 = (uint64_t *)(v149 + *(int *)(v120 + 36));
  uint64_t v123 = sub_100032FA0(&qword_100154880);
  (*(void (**)(char *, unsigned char *, uint64_t))(v117 + 16))((char *)v122 + *(int *)(v123 + 28), v118, v119);
  *uint64_t v122 = v116;
  sub_100033344(v115, v121, &qword_100157038);
  (*(void (**)(unsigned char *, uint64_t))(v117 + 8))(v118, v119);
  return sub_100032F44(v115, &qword_100157038);
}

void sub_10001A4E8()
{
  if (!sub_10002C594())
  {
    id v0 = [self currentDevice];
    id v1 = [v0 userInterfaceIdiom];

    if (v1)
    {
      id v2 = [self mainScreen];
      [v2 bounds];

      sub_1000412D8();
    }
    else
    {
      sub_10002AC18();
    }
  }
}

uint64_t destroy for InputTextView()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for DelayEffectModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10001A6A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s10Calculator21PresentModeMenuActionVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for CalculatorKeypadLayout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t sub_10001A774()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  sub_10001A83C(*(id *)(v0 + 64), *(unsigned char *)(v0 + 72));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for CalculatorContainerView(uint64_t a1)
{
  swift_release();
  swift_release();
  sub_10001A83C(*(id *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();

  return swift_release();
}

void sub_10001A83C(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_release();
  }
}

uint64_t destroy for CalculatorKeypadView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t assignWithTake for CalculatorButtonStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  sub_100032EAC(v6, v7);
  char v8 = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v8;
  swift_release();
  return a1;
}

uint64_t initializeWithCopy for InputTextView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for CalculatorKeypadView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  char v5 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

Swift::Int sub_10001AA98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100032FA0(&qword_100155578);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_10001ABDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((*(void *)(v4 + 56)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
  swift_release();

  return swift_release();
}

uint64_t destroy for CalculatorMainView(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);

  return sub_100032EAC(v2, v3);
}

uint64_t sub_10001ACF4(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for EditMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_100032FA0(&qword_1001580F8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + a2[11];
  uint64_t v7 = sub_100032FA0(&qword_100156688);
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v10)((void *)(v7 - 8), v6, v7);
  uint64_t v8 = a1 + a2[12];

  return v10(v8, v7);
}

void sub_10001AE48(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100032FA0(&qword_100157700);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(void *)(a3 + 16))
  {
    v17[1] = *(void *)(a3 + 8 * v12 + 32);
    uint64_t v13 = swift_allocObject();
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v13 + 80) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v13 + 96) = v14;
    *(_OWORD *)(v13 + 112) = *(_OWORD *)(a2 + 96);
    *(void *)(v13 + 128) = *(void *)(a2 + 112);
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v13 + 32) = v15;
    long long v16 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v13 + 64) = v16;
    swift_bridgeObjectRetain();
    sub_100033AC4(a2);
    sub_100032FA0(&qword_100157778);
    sub_100032FA0(&qword_100157710);
    sub_100040BE4(&qword_100157780, &qword_100157778);
    sub_10001B07C();
    sub_10001B11C();
    ForEach<>.init(_:content:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a4, v11, v8);
    *(void *)(a4 + *(int *)(sub_100032FA0(&qword_1001576E0) + 36)) = 0x4000000000000000;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return;
  }
  __break(1u);
}

unint64_t sub_10001B07C()
{
  unint64_t result = qword_100157708;
  if (!qword_100157708)
  {
    sub_1000317D8(&qword_100157710);
    sub_10003AA48();
    sub_100040BE4(&qword_100157760, &qword_100157768);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157708);
  }
  return result;
}

unint64_t sub_10001B11C()
{
  unint64_t result = qword_100157788;
  if (!qword_100157788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157788);
  }
  return result;
}

uint64_t sub_10001B170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v25 = a8;
  uint64_t v26 = a4;
  uint64_t v23 = a7;
  uint64_t v24 = a3;
  uint64_t v27 = a9;
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for GridRow();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  long long v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v22 - v18;
  static VerticalAlignment.firstTextBaseline.getter();
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = v23;
  uint64_t v31 = v25;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = v24;
  uint64_t v35 = v26;
  GridRow.init(alignment:content:)();
  swift_getWitnessTable();
  sub_10001BAFC((uint64_t)v16, v13, (uint64_t)v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v16, v13);
  sub_10001BAFC((uint64_t)v19, v13, v27);
  return ((uint64_t (*)(char *, uint64_t))v20)(v19, v13);
}

uint64_t sub_10001B388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v30 = *(void *)(a1 + 16);
  type metadata accessor for Optional();
  type metadata accessor for ModifiedContent();
  sub_1000317D8(&qword_1001557C0);
  type metadata accessor for ModifiedContent();
  sub_1000317D8(&qword_100159A80);
  swift_getTupleTypeMetadata2();
  uint64_t v4 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = v4;
  uint64_t v5 = type metadata accessor for HStack();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v5);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v27 - v10;
  char v12 = *(unsigned char *)(v3 + 40);
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10002BD88(v13, v12);
  swift_release();
  char v15 = *(unsigned char *)(v3 + 24);
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_100033AA8(v16, v15);
  swift_release();
  swift_getKeyPath();
  uint64_t v33 = v17;
  sub_1000332B4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = *(unsigned __int8 *)(v17 + 48);
  swift_release();
  char v19 = 1;
  switch(v18)
  {
    case 1:
    case 2:
    case 3:
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  sub_10002AB40();
  sub_10002B158(v14, v19 & 1);
  long long v27 = v20;
  swift_release();
  uint64_t v21 = static VerticalAlignment.bottom.getter();
  if (qword_1001541B8 != -1) {
    uint64_t v21 = swift_once();
  }
  *(double *)&long long v22 = __chkstk_darwin(v21);
  uint64_t v23 = *(void *)(v31 + 24);
  *((void *)&v27 - 6) = v30;
  *((void *)&v27 - 5) = v23;
  *((void *)&v27 - 4) = v3;
  *(long long *)((char *)&v27 - 24) = v22;
  *((void *)&v27 - 1) = v24;
  HStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_10001BAFC((uint64_t)v9, v5, (uint64_t)v11);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v9, v5);
  sub_10001BAFC((uint64_t)v11, v5, v32);
  return ((uint64_t (*)(char *, uint64_t))v25)(v11, v5);
}

uint64_t sub_10001B7BC@<X0>(void (*a1)(double)@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v32 = a5;
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v31 = (char *)&v31 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = __chkstk_darwin(v19);
  long long v22 = (char *)&v31 - v21;
  uint64_t v39 = (char *)&v31 - v21;
  a1(v20);
  uint64_t v23 = a4;
  sub_10001BAFC((uint64_t)v18, a4, (uint64_t)v22);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  uint64_t v24 = v33(v18, a4);
  v35(v24);
  _OWORD v43[2] = v37;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_10001BAFC((uint64_t)v11, v9, (uint64_t)v14);
  uint64_t v26 = v36;
  long long v27 = *(void (**)(char *, uint64_t))(v36 + 8);
  v27(v11, v9);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v39, v23);
  v43[0] = v18;
  uint64_t v28 = v31;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v11, v31, v9);
  v43[1] = v11;
  v42[0] = v23;
  v42[1] = v9;
  uint64_t v40 = v32;
  uint64_t v41 = WitnessTable;
  sub_100025EFC((uint64_t)v43, 2uLL, (uint64_t)v42);
  v27(v28, v9);
  uint64_t v29 = v33;
  v33(v39, v23);
  v27(v11, v9);
  return v29(v18, v23);
}

void sub_10001BABC(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10001BAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_10001BB00()
{
  return sub_10001BB10(v0 + 32);
}

uint64_t sub_10001BB10(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 24);
  uint64_t v2 = swift_retain();
  sub_100033AA8(v2, v1);
  swift_release();
  swift_getKeyPath();
  sub_1000332B4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  swift_release();
  if (qword_100154540 != -1) {
    swift_once();
  }
  type metadata accessor for CalculatorViewModel();
  sub_1000332B4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  swift_retain();
  Environment.init<A>(_:)();
  sub_10001BE18();
  sub_100032FA0(&qword_100156B88);
  sub_10001BD50();
  sub_10001BDA4();
  View.focused<A>(_:equals:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

unint64_t sub_10001BD50()
{
  unint64_t result = qword_100159B70;
  if (!qword_100159B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159B70);
  }
  return result;
}

unint64_t sub_10001BDA4()
{
  unint64_t result = qword_100157880;
  if (!qword_100157880)
  {
    sub_1000317D8(&qword_100156B88);
    sub_10003C4C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157880);
  }
  return result;
}

uint64_t sub_10001BE18()
{
  sub_100032FA0(&qword_100157850);
  FocusState.Binding.projectedValue.getter();
  return v1;
}

uint64_t sub_10001BE6C(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  char v7 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v12 = type metadata accessor for EditMode();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v29(v10, v11, v12);
  uint64_t v13 = sub_100032FA0(&qword_1001580F8);
  *(void *)(v10 + *(int *)(v13 + 28)) = *(void *)(v11 + *(int *)(v13 + 28));
  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  uint64_t v20 = a3[10];
  uint64_t v21 = a3[11];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v26 = sub_100032FA0(&qword_100156688);
  long long v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
  v27(v24, v25, v26);
  v27(a1 + a3[12], a2 + a3[12], v26);
  return a1;
}

void sub_10001C044()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100032FA0(&qword_100154A48);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v84 = (void (*)(char *, uint64_t))((char *)&v74 - v6);
  uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v77 = (char *)&v74 - v12;
  uint64_t v13 = &v0[OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection];
  uint64_t v14 = enum case for LayoutDirection.leftToRight(_:);
  uint64_t v15 = type metadata accessor for LayoutDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  uint64_t v16 = enum case for UserInterfaceSizeClass.regular(_:);
  uint64_t v17 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v17(&v1[OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass], enum case for UserInterfaceSizeClass.regular(_:), v7);
  unsigned int v79 = v16;
  uint64_t v80 = v8 + 104;
  long long v78 = v17;
  v17(&v1[OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass], v16, v7);
  uint64_t v18 = &v1[OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  uint64_t v19 = &v1[OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets];
  *(_OWORD *)uint64_t v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  uint64_t v20 = &v1[OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  uint64_t v21 = &v1[OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets];
  *(_OWORD *)uint64_t v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  ObservationRegistrar.init()();
  id v22 = [self sharedApplication];
  id v23 = [v22 connectedScenes];

  sub_10001CE8C(0, &qword_100154A50);
  sub_100038CAC();
  uint64_t v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = (void *)sub_100006784(v24);
  swift_bridgeObjectRelease();
  double v26 = 0.0;
  uint64_t v81 = v10;
  uint64_t v82 = v7;
  uint64_t v85 = v4;
  uint64_t v83 = v8;
  if (!v25) {
    goto LABEL_10;
  }
  self;
  long long v27 = (void *)swift_dynamicCastObjCClass();
  if (!v27)
  {

LABEL_10:
    id v74 = 0;
    char v76 = 0;
LABEL_11:
    double v39 = 0.0;
    double v37 = 0.0;
    double v35 = 0.0;
    goto LABEL_12;
  }
  uint64_t v28 = v27;
  id v29 = [v27 windows];
  sub_10001CE8C(0, &qword_100154A60);
  unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    char v76 = v28;
    if (v73) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
  uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  char v76 = v28;
  if (!v31)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    id v74 = 0;
    goto LABEL_11;
  }
LABEL_5:
  if ((v30 & 0xC000000000000001) != 0)
  {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v32 = *(id *)(v30 + 32);
  }
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  id v74 = v33;
  [v33 safeAreaInsets];
  double v35 = v34;
  double v37 = v36;
  double v39 = v38;
  double v26 = v40;
LABEL_12:
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(&v74 - 6) = v1;
  *((double *)&v74 - 5) = v35;
  *((double *)&v74 - 4) = v37;
  *((double *)&v74 - 3) = v39;
  *((double *)&v74 - 2) = v26;
  uint64_t v87 = v1;
  unint64_t v42 = sub_10002B4E8();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  uint64_t v43 = self;
  id v44 = [v43 mainScreen];
  [v44 bounds];
  double v46 = v45;

  double v47 = v46 - v37 - v26;
  id v48 = [v43 mainScreen];
  [v48 bounds];
  double v50 = v49;

  uint64_t v51 = swift_getKeyPath();
  __chkstk_darwin(v51);
  *(&v74 - 4) = v1;
  *((double *)&v74 - 3) = v47;
  *((double *)&v74 - 2) = v50 - v35 - v39;
  uint64_t v87 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  id v52 = [v43 mainScreen];
  [v52 bounds];
  uint64_t v54 = v53;
  uint64_t v56 = v55;

  uint64_t v57 = swift_getKeyPath();
  __chkstk_darwin(v57);
  *(&v74 - 4) = v1;
  *(&v74 - 3) = v54;
  *(&v74 - 2) = v56;
  uint64_t v87 = v1;
  unint64_t v86 = v42;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  id v58 = [v43 mainScreen];
  id v59 = [v58 traitCollection];

  [v59 verticalSizeClass];
  uint64_t v60 = (uint64_t)v84;
  UserInterfaceSizeClass.init(_:)();
  uint64_t v62 = v82;
  uint64_t v61 = v83;
  uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  unsigned int v64 = v63(v60, 1, v82);
  uint64_t v75 = v63;
  uint64_t v65 = v77;
  if (v64 == 1)
  {
    v78(v77, v79, v62);
    sub_100041ECC(v60);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v77, v60, v62);
  }
  uint64_t v66 = swift_getKeyPath();
  __chkstk_darwin(v66);
  *(&v74 - 2) = v1;
  *(&v74 - 1) = v65;
  uint64_t v87 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  uint64_t v84 = *(void (**)(char *, uint64_t))(v61 + 8);
  v84(v65, v62);
  id v67 = [v43 mainScreen];
  id v68 = [v67 traitCollection];

  [v68 horizontalSizeClass];
  uint64_t v69 = (uint64_t)v85;
  UserInterfaceSizeClass.init(_:)();
  if (v75(v69, 1, v62) == 1)
  {
    uint64_t v70 = v81;
    v78(v81, v79, v62);
    sub_100041ECC(v69);
  }
  else
  {
    uint64_t v70 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v81, v69, v62);
  }
  uint64_t v71 = v76;
  uint64_t v72 = swift_getKeyPath();
  __chkstk_darwin(v72);
  *(&v74 - 2) = v1;
  *(&v74 - 1) = v70;
  uint64_t v87 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v84(v70, v62);
}

uint64_t sub_10001C998()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for CalculateExpression.Base();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  double v50 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100154790 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1001613A0;
  *(void *)(v0 + 16) = qword_1001613A0;
  uint64_t v52 = type metadata accessor for CalculateExpression();
  uint64_t v49 = sub_100032FA0(&qword_1001564E8);
  uint64_t inited = swift_initStackObject();
  long long v48 = xmmword_10010E6E0;
  *(_OWORD *)(inited + 16) = xmmword_10010E6E0;
  uint64_t v8 = (void *)CalculateKeyNumberFormatter;
  *(void *)(inited + 32) = CalculateKeyNumberFormatter;
  swift_getKeyPath();
  uint64_t v54 = v6;
  uint64_t v47 = sub_1000343C0((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings);
  swift_retain();
  id v45 = v8;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = sub_10001CE8C(0, &qword_1001593B0);
  uint64_t v46 = v10;
  *(void *)(inited + 40) = v9;
  uint64_t v11 = (void *)CalculateKeyAssumeDegrees;
  *(void *)(inited + 64) = v10;
  *(void *)(inited + 72) = v11;
  id v12 = objc_allocWithZone((Class)NSNumber);
  id v13 = v9;
  id v44 = v11;
  id v14 = [v12 initWithBool:1];
  uint64_t v15 = sub_10001CE8C(0, (unint64_t *)&qword_100156500);
  *(void *)(inited + 80) = v14;
  uint64_t v16 = (void *)CalculateKeyAllowPartialExpressions;
  *(void *)(inited + 104) = v15;
  *(void *)(inited + 112) = v16;
  id v17 = objc_allocWithZone((Class)NSNumber);
  id v42 = v16;
  *(void *)(inited + 120) = [v17 initWithBool:1];
  uint64_t v18 = (void *)CalculateKeyScientificNotationFormat;
  *(void *)(inited + 144) = v15;
  *(void *)(inited + 152) = v18;
  id v19 = objc_allocWithZone((Class)NSNumber);
  id v41 = v18;
  id v20 = [v19 initWithUnsignedInteger:0];
  *(void *)(inited + 184) = v15;
  *(void *)(inited + 160) = v20;
  sub_10001D214(inited);
  unsigned int v43 = enum case for CalculateExpression.Base.base10(_:);
  uint64_t v21 = v50;
  uint64_t v51 = *(void *)(v51 + 104);
  ((void (*)(char *))v51)(v50);
  UUID.init()();
  *(void *)(v1 + 24) = CalculateExpression.__allocating_init(options:base:id:)();
  uint64_t v22 = swift_initStackObject();
  uint64_t v49 = (uint64_t)v4;
  id v23 = (void *)v22;
  *(_OWORD *)(v22 + 16) = v48;
  uint64_t v24 = v45;
  *(void *)(v22 + 32) = v45;
  uint64_t v25 = qword_1001613A0;
  swift_getKeyPath();
  uint64_t v54 = v25;
  id v26 = v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  long long v27 = *(void **)(v25 + 48);
  v23[5] = v27;
  uint64_t v28 = v44;
  v23[8] = v46;
  v23[9] = v28;
  id v29 = objc_allocWithZone((Class)NSNumber);
  id v30 = v27;
  id v31 = v28;
  v23[10] = [v29 initWithBool:1];
  id v32 = v42;
  v23[13] = v15;
  v23[14] = v32;
  id v33 = objc_allocWithZone((Class)NSNumber);
  id v34 = v32;
  v23[15] = [v33 initWithBool:1];
  double v35 = v41;
  v23[18] = v15;
  v23[19] = v35;
  id v36 = objc_allocWithZone((Class)NSNumber);
  id v37 = v35;
  id v38 = [v36 initWithUnsignedInteger:0];
  v23[23] = v15;
  v23[20] = v38;
  sub_10001D214((uint64_t)v23);
  ((void (*)(char *, void, uint64_t))v51)(v21, v43, v53);
  UUID.init()();
  *(void *)(v1 + 32) = CalculateExpression.__allocating_init(options:base:id:)();
  *(_DWORD *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = 0;
  ObservationRegistrar.init()();
  return v1;
}

uint64_t sub_10001CE8C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10001CEC8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100032FA0(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100033344(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_10001CFF8(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    void v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_10001CFF8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10001D008(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_10001D09C(a1, v2);
}

unint64_t sub_10001D09C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10001D214(uint64_t a1)
{
  return sub_10001CEC8(a1, &qword_100156090, &qword_100156098, (uint64_t (*)(uint64_t))sub_10001D008);
}

uint64_t sub_10001D23C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D258(*(void *)(v1 + 16), a1);
}

uint64_t sub_10001D258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v3 = sub_100032FA0(&qword_1001575C0);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100032FA0(&qword_1001575C8);
  __chkstk_darwin(v68);
  uint64_t v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100032FA0(&qword_1001575D0);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  id v67 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100032FA0(&qword_1001575D8);
  __chkstk_darwin(v69);
  uint64_t v83 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_1001575E0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v76 = v10;
  uint64_t v77 = v11;
  __chkstk_darwin(v10);
  uint64_t v72 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100032FA0(&qword_1001575E8);
  uint64_t v78 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v73 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100032FA0(&qword_1001575F0) - 8;
  __chkstk_darwin(v75);
  id v74 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_100032FA0(&qword_1001575F8);
  __chkstk_darwin(v81);
  uint64_t v79 = (uint64_t)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029088((uint64_t)v5);
  uint64_t v16 = static Animation.spring(response:dampingFraction:blendDuration:)();
  long long v87 = *(_OWORD *)(a1 + 56);
  long long v84 = *(_OWORD *)(a1 + 56);
  sub_100032FA0(&qword_100157600);
  State.wrappedValue.getter();
  uint64_t v17 = v88;
  swift_getKeyPath();
  *(void *)&long long v84 = v17;
  sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v18 = *(unsigned char *)(v17 + 16);
  swift_release();
  sub_100033344((uint64_t)v5, (uint64_t)v7, &qword_1001575C0);
  long long v19 = &v7[*(int *)(v68 + 36)];
  *(void *)long long v19 = v16;
  v19[8] = v18;
  sub_100032F44((uint64_t)v5, &qword_1001575C0);
  long long v84 = v87;
  State.wrappedValue.getter();
  type metadata accessor for CalculatorKeypadViewModel();
  sub_10001DE30();
  id v20 = v67;
  View.environment<A>(_:)();
  swift_release();
  sub_100032F44((uint64_t)v7, &qword_1001575C8);
  uint64_t v21 = swift_allocObject();
  long long v22 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v21 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v21 + 96) = v22;
  *(_OWORD *)(v21 + 112) = *(_OWORD *)(a1 + 96);
  *(void *)(v21 + 128) = *(void *)(a1 + 112);
  long long v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v21 + 32) = v23;
  long long v24 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v21 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v21 + 64) = v24;
  uint64_t v25 = v70;
  id v26 = v83;
  long long v27 = v20;
  uint64_t v28 = v20;
  uint64_t v29 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v83, v27, v71);
  uint64_t v30 = v69;
  id v31 = (uint64_t (**)())&v26[*(int *)(v69 + 36)];
  *id v31 = sub_10003DF10;
  v31[1] = (uint64_t (*)())v21;
  v31[2] = 0;
  v31[3] = 0;
  sub_100033AC4(a1);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v29);
  LOBYTE(v25) = *(unsigned char *)(a1 + 8);
  uint64_t v32 = swift_retain();
  uint64_t v33 = sub_100033AA8(v32, v25);
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v84 = v33;
  sub_100033194((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v26) = *(unsigned char *)(v33 + 51);
  swift_release();
  LOBYTE(v84) = (_BYTE)v26;
  uint64_t v34 = swift_allocObject();
  long long v35 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v34 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v34 + 96) = v35;
  *(_OWORD *)(v34 + 112) = *(_OWORD *)(a1 + 96);
  *(void *)(v34 + 128) = *(void *)(a1 + 112);
  long long v36 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v34 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v34 + 32) = v36;
  long long v37 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v34 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v34 + 64) = v37;
  sub_100033AC4(a1);
  unint64_t v38 = sub_10001DD30();
  double v39 = v72;
  uint64_t v40 = (uint64_t)v83;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100032F44(v40, &qword_1001575D8);
  uint64_t v41 = swift_retain();
  uint64_t v42 = sub_100033AA8(v41, v25);
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v84 = v42;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v21) = *(unsigned char *)(v42 + 48);
  swift_release();
  LOBYTE(v88) = v21;
  uint64_t v43 = swift_allocObject();
  long long v44 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v43 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v43 + 96) = v44;
  *(_OWORD *)(v43 + 112) = *(_OWORD *)(a1 + 96);
  *(void *)(v43 + 128) = *(void *)(a1 + 112);
  long long v45 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v43 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v43 + 32) = v45;
  long long v46 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v43 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v43 + 64) = v46;
  sub_100033AC4(a1);
  *(void *)&long long v84 = v30;
  *((void *)&v84 + 1) = &type metadata for Bool;
  unint64_t v85 = v38;
  unint64_t v86 = &protocol witness table for Bool;
  swift_getOpaqueTypeConformance2();
  sub_10001DED0();
  uint64_t v47 = v73;
  uint64_t v48 = v76;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v39, v48);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v50 = swift_allocObject();
  *(unsigned char *)(v50 + 16) = 1;
  uint64_t v51 = v78;
  uint64_t v52 = (uint64_t)v74;
  uint64_t v53 = v80;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v74, v47, v80);
  uint64_t v54 = (uint64_t *)(v52 + *(int *)(v75 + 44));
  *uint64_t v54 = KeyPath;
  v54[1] = (uint64_t)sub_100038080;
  v54[2] = v50;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v53);
  uint64_t v55 = swift_allocObject();
  long long v56 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v55 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v55 + 96) = v56;
  *(_OWORD *)(v55 + 112) = *(_OWORD *)(a1 + 96);
  *(void *)(v55 + 128) = *(void *)(a1 + 112);
  long long v57 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v55 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v55 + 32) = v57;
  long long v58 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v55 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v55 + 64) = v58;
  uint64_t v59 = swift_getKeyPath();
  uint64_t v60 = v79;
  sub_100033344(v52, v79, &qword_1001575F0);
  uint64_t v61 = (uint64_t *)(v60 + *(int *)(v81 + 36));
  *uint64_t v61 = v59;
  v61[1] = (uint64_t)sub_10009F000;
  v61[2] = v55;
  v61[3] = 0;
  sub_100033AC4(a1);
  sub_100032F44(v52, &qword_1001575F0);
  static EventModifiers.shift.getter();
  uint64_t v62 = swift_allocObject();
  long long v63 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v62 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v62 + 96) = v63;
  *(_OWORD *)(v62 + 112) = *(_OWORD *)(a1 + 96);
  *(void *)(v62 + 128) = *(void *)(a1 + 112);
  long long v64 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v62 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v62 + 32) = v64;
  long long v65 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v62 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v62 + 64) = v65;
  sub_100033AC4(a1);
  sub_10001DC90();
  View._onModifierKeysChanged(mask:initial:_:)();
  swift_release();
  return sub_100032F44(v60, &qword_1001575F8);
}

unint64_t sub_10001DC90()
{
  unint64_t result = qword_100157680;
  if (!qword_100157680)
  {
    sub_1000317D8(&qword_1001575F8);
    sub_100007780();
    sub_100040BE4(&qword_1001576A0, &qword_1001576A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157680);
  }
  return result;
}

unint64_t sub_10001DD30()
{
  unint64_t result = qword_100157678;
  if (!qword_100157678)
  {
    sub_1000317D8(&qword_1001575D8);
    sub_1000317D8(&qword_1001575C8);
    type metadata accessor for CalculatorKeypadViewModel();
    sub_10001DE30();
    sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157678);
  }
  return result;
}

unint64_t sub_10001DE30()
{
  unint64_t result = qword_100157608;
  if (!qword_100157608)
  {
    sub_1000317D8(&qword_1001575C8);
    sub_1000397BC();
    sub_100040BE4(&qword_100157668, &qword_100157670);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157608);
  }
  return result;
}

unint64_t sub_10001DED0()
{
  unint64_t result = qword_100156118;
  if (!qword_100156118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156118);
  }
  return result;
}

uint64_t sub_10001DF24()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10001DF78@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_100032FA0(&qword_1001590A8);
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = (int *)type metadata accessor for CalculatorAppScene(0);
  uint64_t v3 = (uint64_t *)((char *)a1 + v2[6]);
  type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  *(void *)(swift_allocObject() + 16) = 0;
  ObservationRegistrar.init()();
  State.init(wrappedValue:)();
  *uint64_t v3 = v11;
  v3[1] = v12;
  uint64_t v4 = v2[7];
  if (qword_100154790 != -1) {
    swift_once();
  }
  unint64_t v5 = (uint64_t *)((char *)a1 + v4);
  type metadata accessor for AppSettings();
  swift_retain();
  State.init(wrappedValue:)();
  void *v5 = v11;
  v5[1] = v12;
  type metadata accessor for CalculatorToolbarViewModel();
  LazyState.init(wrappedValue:)();
  uint64_t v6 = (char *)a1 + v2[9];
  State.init(wrappedValue:)();
  *uint64_t v6 = v11;
  *((void *)v6 + 1) = v12;
  id v7 = [objc_allocWithZone((Class)type metadata accessor for CalculatorMDMRestrictionsManager()) init];
  uint64_t v8 = (uint64_t *)((char *)a1 + v2[10]);
  id v9 = v7;
  State.init(wrappedValue:)();
  *uint64_t v8 = v11;
  v8[1] = v12;
  *(void *)(swift_allocObject() + 16) = v9;
  type metadata accessor for CalculatorViewModel();
  return LazyState.init(wrappedValue:)();
}

uint64_t sub_10001E1A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v103 = a1;
  uint64_t v2 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v101 = *(void *)(v2 - 8);
  uint64_t v102 = v2;
  __chkstk_darwin(v2);
  uint64_t v100 = (char *)v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CalculatorAppScene(0);
  uint64_t v5 = v4 - 8;
  uint64_t v99 = *(void *)(v4 - 8);
  uint64_t v98 = *(void *)(v99 + 64);
  __chkstk_darwin(v4);
  uint64_t v104 = (uint64_t)v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_1001596F8);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CalculatorAppContentView();
  uint64_t v11 = (int *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (void *)((char *)v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100032FA0(&qword_10015A3E0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100032FA0(&qword_10015A3E8);
  uint64_t v85 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  char v18 = (char *)v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_100032FA0(&qword_10015A3F0);
  uint64_t v89 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v83 = (char *)v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = (void *)sub_100032FA0(&qword_10015A3F8);
  char v95 = (uint64_t (*)(uint64_t))*(v93 - 1);
  __chkstk_darwin(v93);
  unint64_t v86 = (char *)v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_100032FA0(&qword_10015A400);
  uint64_t v92 = *(void (***)(void, void, void))(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v88 = (char *)v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_100032FA0(&qword_10015A408) - 8;
  __chkstk_darwin(v91);
  uint64_t v90 = (char *)v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100032FA0(&qword_10015A410) - 8;
  __chkstk_darwin(v97);
  uint64_t v96 = (uint64_t)v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v13 = swift_getKeyPath();
  sub_100032FA0(&qword_1001590B8);
  swift_storeEnumTagMultiPayload();
  long long v24 = (uint64_t *)((char *)v13 + v11[7]);
  *long long v24 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = (uint64_t *)((char *)v13 + v11[8]);
  uint64_t *v25 = swift_getKeyPath();
  sub_100032FA0(&qword_1001590B0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for CalculatorLayout();
  LazyState.init(wrappedValue:)();
  id v26 = (char *)v13 + v11[10];
  LOBYTE(v109) = 0;
  State.init(wrappedValue:)();
  uint64_t v27 = v106;
  *id v26 = v105;
  *((void *)v26 + 1) = v27;
  LazyState.init(wrappedValue:)();
  LazyState.init(wrappedValue:)();
  uint64_t v28 = enum case for ColorScheme.dark(_:);
  uint64_t v29 = type metadata accessor for ColorScheme();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v9, v28, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v9, 0, 1, v29);
  sub_100033344((uint64_t)v9, (uint64_t)&v16[*(int *)(v14 + 36)], &qword_1001596F8);
  sub_10001F078((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CalculatorAppContentView);
  sub_100032F44((uint64_t)v9, &qword_1001596F8);
  sub_100004CC8((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CalculatorAppContentView);
  sub_100032FA0(&qword_10015A1B0);
  LazyState.wrappedValue.getter();
  uint64_t v31 = type metadata accessor for CalculatorViewModel();
  unint64_t v32 = sub_10003B2CC();
  uint64_t v33 = sub_10001EFCC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  View.environment<A>(_:)();
  swift_release();
  sub_100032F44((uint64_t)v16, &qword_10015A3E0);
  uint64_t v34 = *(int *)(v5 + 32);
  v81[2] = v5;
  long long v35 = (uint64_t *)(v1 + v34);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  uint64_t v105 = v37;
  uint64_t v106 = v36;
  sub_100032FA0(qword_10015A428);
  State.wrappedValue.getter();
  uint64_t v38 = type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  uint64_t v105 = v14;
  uint64_t v106 = v31;
  unint64_t v107 = v32;
  uint64_t v108 = v33;
  v81[1] = &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v40 = sub_10001EFCC(&qword_100156660, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModelWrapper);
  uint64_t v41 = v83;
  uint64_t v42 = v84;
  View.environment<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v18, v42);
  uint64_t v43 = (uint64_t *)(v1 + *(int *)(v5 + 48));
  uint64_t v44 = v1;
  uint64_t v46 = *v43;
  uint64_t v45 = v43[1];
  uint64_t v105 = v46;
  uint64_t v106 = v45;
  sub_100032FA0(&qword_10015A3B8);
  State.wrappedValue.getter();
  uint64_t v47 = v109;
  uint64_t v48 = type metadata accessor for CalculatorMDMRestrictionsManager();
  uint64_t v105 = v42;
  uint64_t v106 = v38;
  unint64_t v107 = OpaqueTypeConformance2;
  uint64_t v108 = v40;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  uint64_t v50 = sub_10001EFCC((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  uint64_t v51 = v86;
  uint64_t v52 = v87;
  View.environment<A>(_:)();

  (*(void (**)(char *, uint64_t))(v89 + 8))(v41, v52);
  uint64_t v82 = v1;
  sub_100032FA0(&qword_10015A1C0);
  LazyState.wrappedValue.getter();
  type metadata accessor for CalculatorToolbarViewModel();
  uint64_t v105 = v52;
  uint64_t v106 = v48;
  unint64_t v107 = v49;
  uint64_t v108 = v50;
  swift_getOpaqueTypeConformance2();
  sub_10001EFCC(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  uint64_t v53 = v88;
  uint64_t v54 = v93;
  View.environment<A>(_:)();
  swift_release();
  (*((void (**)(char *, void *))v95 + 1))(v51, v54);
  uint64_t v55 = v92;
  uint64_t v56 = (uint64_t)v90;
  uint64_t v57 = v94;
  ((void (**)(char *, char *, uint64_t))v92)[2](v90, v53, v94);
  long long v58 = (uint64_t (**)())(v56 + *(int *)(v91 + 44));
  *long long v58 = sub_10003C5FC;
  v58[1] = 0;
  v58[2] = 0;
  v58[3] = 0;
  ((void (*)(char *, uint64_t))v55[1])(v53, v57);
  char v95 = type metadata accessor for CalculatorAppScene;
  uint64_t v59 = v104;
  sub_10001F078(v44, v104, type metadata accessor for CalculatorAppScene);
  uint64_t v60 = *(unsigned __int8 *)(v99 + 80);
  v98 += (v60 + 16) & ~v60;
  uint64_t v99 = (v60 + 16) & ~v60;
  uint64_t v61 = v99;
  uint64_t v94 = v60 | 7;
  uint64_t v62 = swift_allocObject();
  sub_10001F014(v59, v62 + v61);
  uint64_t v92 = (void (**)(void, void, void))self;
  id v63 = [v92 defaultCenter];
  long long v64 = v100;
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = sub_1000FE0C4;
  *(void *)(v65 + 24) = v62;
  uint64_t v66 = v96;
  sub_100033344(v56, v96, &qword_10015A408);
  uint64_t v67 = v97;
  uint64_t v68 = v66 + *(int *)(v97 + 60);
  uint64_t v69 = v101;
  uint64_t v70 = v102;
  uint64_t v93 = *(void **)(v101 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v93)(v68, v64, v102);
  uint64_t v71 = (uint64_t (**)())(v66 + *(int *)(v67 + 64));
  void *v71 = sub_1000EAB1C;
  v71[1] = (uint64_t (*)())v65;
  uint64_t v72 = *(void (**)(char *, uint64_t))(v69 + 8);
  v72(v64, v70);
  sub_100032F44(v56, &qword_10015A408);
  uint64_t v73 = v104;
  sub_10001F078(v82, v104, v95);
  uint64_t v74 = swift_allocObject();
  sub_10001F014(v73, v74 + v99);
  id v75 = [v92 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = sub_1000FE118;
  *(void *)(v76 + 24) = v74;
  uint64_t v77 = v103;
  sub_100033344(v66, v103, &qword_10015A410);
  uint64_t v78 = sub_100032FA0(&qword_10015A2A8);
  ((void (*)(uint64_t, char *, uint64_t))v93)(v77 + *(int *)(v78 + 52), v64, v70);
  uint64_t v79 = (uint64_t (**)())(v77 + *(int *)(v78 + 56));
  *uint64_t v79 = sub_1000FE258;
  v79[1] = (uint64_t (*)())v76;
  v72(v64, v70);
  return sub_100032F44(v66, &qword_10015A410);
}

uint64_t sub_10001EF24@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10001EFCC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 49);
  return result;
}

uint64_t sub_10001EFCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001F014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculatorAppScene(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001F078(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001F0E0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for CalculatorAppScene(uint64_t a1)
{
  return sub_10001F0E0(a1, (uint64_t *)&unk_10015A228);
}

void *sub_10001F138(void *a1, void *a2, int *a3)
{
  sub_100032FA0(&qword_1001590A8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for OpenWindowAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  id v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100032FA0(&qword_10015A1A8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = sub_100032FA0(&qword_10015A1B0);
  *(void *)&v8[*(int *)(v11 + 28)] = *(void *)&v9[*(int *)(v11 + 28)];
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  char v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v23 = sub_100032FA0(&qword_10015A1B8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = sub_100032FA0(&qword_10015A1C0);
  *(void *)&v21[*(int *)(v24 + 28)] = *(void *)&v22[*(int *)(v24 + 28)];
  uint64_t v25 = a3[9];
  uint64_t v26 = a3[10];
  uint64_t v27 = (char *)a1 + v25;
  uint64_t v28 = (char *)a2 + v25;
  char *v27 = *v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  uint64_t v29 = (void *)((char *)a1 + v26);
  uint64_t v30 = (char *)a2 + v26;
  unint64_t v32 = *(void **)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *uint64_t v29 = *(void *)v30;
  v29[1] = v31;
  swift_retain();
  swift_retain();
  id v33 = v32;
  swift_retain();
  return a1;
}

uint64_t sub_10001F364(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  char v5 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10001F3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v18;
  unint64_t v20 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  LOBYTE(v21) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = v22;
  *(unsigned char *)(v20 + 8) = v21;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for CalculatorMainView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_retain();
  sub_100032F38(v5, v6);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  return a1;
}

uint64_t sub_10001F570@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v93 = a1;
  uint64_t v81 = type metadata accessor for PPTTestCase.Name();
  uint64_t v98 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v78 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100032FA0(&qword_100155990);
  uint64_t v79 = *(void *)(v4 - 8);
  uint64_t v80 = v4;
  __chkstk_darwin(v4);
  char v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_100155998);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  __chkstk_darwin(v7);
  uint64_t v94 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100032FA0(&qword_1001559A0);
  uint64_t v85 = *(void *)(v9 - 8);
  uint64_t v86 = v9;
  __chkstk_darwin(v9);
  uint64_t v84 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100032FA0(&qword_1001559A8);
  uint64_t v88 = *(void *)(v11 - 8);
  uint64_t v89 = v11;
  __chkstk_darwin(v11);
  uint64_t v87 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100032FA0(&qword_1001559B0);
  uint64_t v91 = *(void *)(v13 - 8);
  uint64_t v92 = v13;
  __chkstk_darwin(v13);
  uint64_t v90 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = static Alignment.center.getter();
  uint64_t v17 = v16;
  sub_10000FD3C((uint64_t)&v101);
  uint64_t KeyPath = swift_getKeyPath();
  v99[0] = v1[3];
  sub_100032FA0(&qword_1001559B8);
  State.projectedValue.getter();
  *(void *)&v111[0] = v15;
  *((void *)&v111[0] + 1) = v17;
  v111[8] = v108;
  v111[9] = v109;
  v112[0] = v110[0];
  *(_OWORD *)((char *)v112 + 10) = *(_OWORD *)((char *)v110 + 10);
  v111[5] = v105;
  v111[6] = v106;
  v111[7] = v107;
  v111[1] = v101;
  v111[2] = v102;
  v111[3] = v103;
  v111[4] = v104;
  *(void *)&v113[0] = KeyPath;
  *((void *)&v113[0] + 1) = v115[0];
  *(void *)&v113[1] = v115[1];
  BYTE8(v113[1]) = v115[2];
  v99[38] = v112[0];
  v99[39] = v112[1];
  v99[34] = v106;
  v99[35] = v107;
  v99[36] = v108;
  v99[37] = v109;
  v99[30] = v102;
  v99[31] = v103;
  v99[32] = v104;
  v99[33] = v105;
  v99[28] = v111[0];
  v99[29] = v101;
  v100[0] = v113[0];
  *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)((char *)v113 + 9);
  static Alignment.center.getter();
  sub_1000392DC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v114, 0.0, 1, INFINITY, 0);
  sub_100006518((uint64_t)v111);
  uint64_t v19 = static Color.clear.getter();
  uint64_t v20 = static SafeAreaRegions.keyboard.getter();
  LOBYTE(KeyPath) = static Edge.Set.all.getter();
  unint64_t v21 = (_OWORD *)swift_allocObject();
  long long v22 = v2[3];
  v21[3] = v2[2];
  v21[4] = v22;
  v21[5] = v2[4];
  long long v23 = v2[1];
  v21[1] = *v2;
  v21[2] = v23;
  uint64_t v24 = (_OWORD *)swift_allocObject();
  long long v25 = v2[3];
  v24[3] = v2[2];
  v24[4] = v25;
  v24[5] = v2[4];
  long long v26 = v2[1];
  v24[1] = *v2;
  v24[2] = v26;
  sub_10002013C((uint64_t)v2);
  sub_10002013C((uint64_t)v2);
  uint64_t v27 = static Alignment.center.getter();
  uint64_t v29 = v28;
  memcpy(v99, v114, 0x150uLL);
  *(void *)&v99[21] = v19;
  *((void *)&v99[21] + 1) = v20;
  LOBYTE(v99[22]) = KeyPath;
  *((void *)&v99[22] + 1) = sub_1000144B8;
  *(void *)&v99[23] = 0;
  *((void *)&v99[23] + 1) = sub_10003D778;
  *(void *)&v99[24] = v21;
  *((void *)&v99[24] + 1) = sub_100005CDC;
  *(void *)&v99[25] = 0;
  *((void *)&v99[25] + 1) = sub_10003D864;
  *(void *)&v99[26] = v24;
  *((void *)&v99[26] + 1) = v27;
  *(void *)&v99[27] = v29;
  uint64_t v30 = (_OWORD *)swift_allocObject();
  long long v31 = v2[3];
  v30[3] = v2[2];
  v30[4] = v31;
  v30[5] = v2[4];
  long long v32 = v2[1];
  v30[1] = *v2;
  v30[2] = v32;
  sub_10002013C((uint64_t)v2);
  uint64_t v33 = sub_100032FA0(&qword_1001559C0);
  unint64_t v34 = sub_10003A0BC();
  View.onOpenURL(perform:)();
  swift_release();
  memcpy(v115, v99, 0x1B8uLL);
  sub_100009930((uint64_t)v115);
  if (qword_100154480 != -1) {
    swift_once();
  }
  uint64_t v35 = v81;
  uint64_t v36 = sub_100021598(v81, (uint64_t)qword_100160F98);
  uint64_t v37 = v98;
  uint64_t v38 = v78;
  uint64_t v96 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
  uint64_t v97 = v98 + 16;
  v96(v78, v36, v35);
  double v39 = (_OWORD *)swift_allocObject();
  long long v40 = v2[3];
  v39[3] = v2[2];
  v39[4] = v40;
  v39[5] = v2[4];
  long long v41 = v2[1];
  v39[1] = *v2;
  v39[2] = v41;
  sub_10002013C((uint64_t)v2);
  *(void *)&v99[0] = v33;
  *((void *)&v99[0] + 1) = v34;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v43 = v80;
  View.onTest(_:handler:)();
  swift_release();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v98 = v37 + 8;
  char v95 = v44;
  v44(v38, v35);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v6, v43);
  if (qword_100154488 != -1) {
    swift_once();
  }
  uint64_t v45 = sub_100021598(v35, (uint64_t)qword_100160FB0);
  v96(v38, v45, v35);
  uint64_t v46 = (_OWORD *)swift_allocObject();
  long long v47 = v2[3];
  v46[3] = v2[2];
  v46[4] = v47;
  v46[5] = v2[4];
  long long v48 = v2[1];
  v46[1] = *v2;
  v46[2] = v48;
  sub_10002013C((uint64_t)v2);
  *(void *)&v99[0] = v43;
  *((void *)&v99[0] + 1) = OpaqueTypeConformance2;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  uint64_t v51 = v83;
  uint64_t v50 = v84;
  uint64_t v52 = v94;
  View.onTest(_:handler:)();
  swift_release();
  v95(v38, v35);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v52, v51);
  uint64_t v53 = v35;
  if (qword_100154490 != -1) {
    swift_once();
  }
  uint64_t v54 = sub_100021598(v35, (uint64_t)qword_100160FC8);
  v96(v38, v54, v35);
  uint64_t v55 = (_OWORD *)swift_allocObject();
  long long v56 = v2[3];
  v55[3] = v2[2];
  v55[4] = v56;
  v55[5] = v2[4];
  long long v57 = v2[1];
  v55[1] = *v2;
  v55[2] = v57;
  sub_10002013C((uint64_t)v2);
  *(void *)&v99[0] = v51;
  *((void *)&v99[0] + 1) = v49;
  uint64_t v58 = swift_getOpaqueTypeConformance2();
  uint64_t v59 = v87;
  uint64_t v60 = v38;
  uint64_t v61 = v86;
  View.onTest(_:handler:)();
  uint64_t v62 = v61;
  id v63 = v60;
  swift_release();
  v95(v60, v53);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v50, v62);
  if (qword_100154498 != -1) {
    swift_once();
  }
  uint64_t v64 = sub_100021598(v53, (uint64_t)qword_100160FE0);
  v96(v60, v64, v53);
  uint64_t v65 = (_OWORD *)swift_allocObject();
  long long v66 = v2[3];
  v65[3] = v2[2];
  v65[4] = v66;
  v65[5] = v2[4];
  long long v67 = v2[1];
  v65[1] = *v2;
  v65[2] = v67;
  sub_10002013C((uint64_t)v2);
  *(void *)&v99[0] = v62;
  *((void *)&v99[0] + 1) = v58;
  swift_getOpaqueTypeConformance2();
  uint64_t v68 = v89;
  uint64_t v69 = v90;
  View.onTest(_:handler:)();
  swift_release();
  v95(v63, v53);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v59, v68);
  type metadata accessor for CalculatorViewModel();
  sub_10000DA60((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v70 = Environment.init<A>(_:)();
  LOBYTE(v68) = v71;
  uint64_t v73 = v91;
  uint64_t v72 = v92;
  uint64_t v74 = v93;
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 16))(v93, v69, v92);
  uint64_t v75 = v74 + *(int *)(sub_100032FA0(&qword_100155A20) + 36);
  *(void *)uint64_t v75 = v70;
  *(unsigned char *)(v75 + 8) = v68 & 1;
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v69, v72);
}

uint64_t sub_10002013C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  swift_retain();
  swift_retain();
  sub_10002025C(v2, v3);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for CalculatorContainerView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  char v6 = *(void **)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_retain();
  sub_10002025C(v6, v7);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  return a1;
}

id sub_10002025C(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t sub_100020268@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v126 = a3;
  uint64_t v5 = sub_100032FA0(&qword_100155428);
  uint64_t v127 = *(void *)(v5 - 8);
  uint64_t v128 = v5;
  __chkstk_darwin(v5);
  uint64_t v125 = &v100[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100032FA0(&qword_100155430);
  uint64_t v123 = *(void *)(v7 - 8);
  uint64_t v124 = v7;
  __chkstk_darwin(v7);
  uint64_t v122 = &v100[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v119 = sub_100032FA0(&qword_100155438);
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v117 = &v100[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v114 = sub_100032FA0(&qword_100155440);
  uint64_t v111 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v110 = &v100[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v109 = sub_100032FA0(&qword_100155448);
  uint64_t v106 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  long long v105 = &v100[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v102 = sub_100032FA0(&qword_100155450);
  uint64_t v139 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v13 = &v100[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for PPTTestCase.Name();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v140 = &v100[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  uint64_t v19 = &v100[-v18];
  uint64_t v104 = sub_100032FA0(&qword_100155458);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v132 = &v100[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v108 = sub_100032FA0(&qword_100155460);
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v133 = &v100[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v113 = sub_100032FA0(&qword_100155468);
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v129 = &v100[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v116 = sub_100032FA0(&qword_100155470);
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v130 = &v100[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v120 = sub_100032FA0(&qword_100155478);
  uint64_t v121 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v134 = &v100[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1001544A0 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_100021598(v14, (uint64_t)qword_100160FF8);
  v137 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v138 = v15 + 16;
  v137(v19, v25, v14);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a1;
  int v131 = a2;
  int v101 = a2 & 1;
  *(unsigned char *)(v26 + 24) = a2 & 1;
  swift_retain();
  uint64_t v27 = sub_100032FA0(&qword_100155480);
  uint64_t v28 = sub_100040BE4(&qword_100155488, &qword_100155480);
  uint64_t v136 = a1;
  uint64_t v29 = v28;
  View.onTest(_:handler:)();
  uint64_t v141 = PPTTestCase.Name.rawValue.getter();
  uint64_t v142 = v30;
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = 0x70616373646E614CLL;
  v31._object = (void *)0xE900000000000065;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  long long v32 = v140;
  PPTTestCase.Name.init(_:)();
  uint64_t v141 = v27;
  uint64_t v142 = v29;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v34 = v102;
  View.onTest(_:handler:)();
  uint64_t v35 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
  uint64_t v135 = v35;
  v35(v32, v14);
  (*(void (**)(unsigned char *, uint64_t))(v139 + 8))(v13, v34);
  swift_release();
  uint64_t v139 = v15 + 8;
  v35(v19, v14);
  if (qword_1001544A8 != -1) {
    swift_once();
  }
  uint64_t v36 = sub_100021598(v14, (uint64_t)qword_100161010);
  v137(v19, v36, v14);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v136;
  *(unsigned char *)(v37 + 24) = v101;
  swift_retain();
  uint64_t v141 = v34;
  uint64_t v142 = OpaqueTypeConformance2;
  uint64_t v38 = swift_getOpaqueTypeConformance2();
  double v39 = v105;
  uint64_t v40 = v104;
  View.onTest(_:handler:)();
  uint64_t v141 = PPTTestCase.Name.rawValue.getter();
  uint64_t v142 = v41;
  swift_bridgeObjectRetain();
  v42._countAndFlagsBits = 0x70616373646E614CLL;
  v42._object = (void *)0xE900000000000065;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  uint64_t v43 = v140;
  PPTTestCase.Name.init(_:)();
  uint64_t v141 = v40;
  uint64_t v142 = v38;
  uint64_t v44 = swift_getOpaqueTypeConformance2();
  uint64_t v45 = v109;
  View.onTest(_:handler:)();
  uint64_t v46 = v135;
  v135(v43, v14);
  (*(void (**)(unsigned char *, uint64_t))(v106 + 8))(v39, v45);
  swift_release();
  v46(v19, v14);
  (*(void (**)(unsigned char *, uint64_t))(v103 + 8))(v132, v40);
  if (qword_1001544B0 != -1) {
    swift_once();
  }
  uint64_t v47 = sub_100021598(v14, (uint64_t)qword_100161028);
  v137(v19, v47, v14);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v136;
  LODWORD(v132) = v131 & 1;
  *(unsigned char *)(v48 + 24) = v131 & 1;
  swift_retain();
  uint64_t v141 = v45;
  uint64_t v142 = v44;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  uint64_t v50 = v110;
  uint64_t v51 = v108;
  View.onTest(_:handler:)();
  uint64_t v141 = PPTTestCase.Name.rawValue.getter();
  uint64_t v142 = v52;
  swift_bridgeObjectRetain();
  v53._countAndFlagsBits = 0x70616373646E614CLL;
  v53._object = (void *)0xE900000000000065;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  uint64_t v54 = v140;
  PPTTestCase.Name.init(_:)();
  uint64_t v141 = v51;
  uint64_t v142 = v49;
  uint64_t v55 = swift_getOpaqueTypeConformance2();
  uint64_t v56 = v114;
  View.onTest(_:handler:)();
  long long v57 = v135;
  v135(v54, v14);
  (*(void (**)(unsigned char *, uint64_t))(v111 + 8))(v50, v56);
  swift_release();
  v57(v19, v14);
  (*(void (**)(unsigned char *, uint64_t))(v107 + 8))(v133, v51);
  if (qword_1001544B8 != -1) {
    swift_once();
  }
  uint64_t v58 = sub_100021598(v14, (uint64_t)qword_100161040);
  v137(v19, v58, v14);
  uint64_t v59 = swift_allocObject();
  uint64_t v133 = (unsigned char *)v14;
  *(void *)(v59 + 16) = v136;
  *(unsigned char *)(v59 + 24) = (_BYTE)v132;
  swift_retain();
  uint64_t v141 = v56;
  uint64_t v142 = v55;
  uint64_t v60 = swift_getOpaqueTypeConformance2();
  uint64_t v61 = v117;
  uint64_t v62 = v113;
  id v63 = v129;
  View.onTest(_:handler:)();
  uint64_t v141 = PPTTestCase.Name.rawValue.getter();
  uint64_t v142 = v64;
  swift_bridgeObjectRetain();
  v65._countAndFlagsBits = 0x70616373646E614CLL;
  v65._object = (void *)0xE900000000000065;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  long long v66 = v140;
  PPTTestCase.Name.init(_:)();
  uint64_t v141 = v62;
  uint64_t v142 = v60;
  uint64_t v67 = swift_getOpaqueTypeConformance2();
  uint64_t v68 = v119;
  View.onTest(_:handler:)();
  uint64_t v69 = v66;
  uint64_t v70 = (uint64_t)v133;
  char v71 = v135;
  v135(v69, (uint64_t)v133);
  (*(void (**)(unsigned char *, uint64_t))(v118 + 8))(v61, v68);
  swift_release();
  v71(v19, v70);
  (*(void (**)(unsigned char *, uint64_t))(v112 + 8))(v63, v62);
  uint64_t v72 = v136;
  if (qword_1001544C0 != -1) {
    swift_once();
  }
  uint64_t v73 = sub_100021598(v70, (uint64_t)qword_100161058);
  v137(v19, v73, v70);
  uint64_t v74 = swift_allocObject();
  uint64_t v75 = v19;
  *(void *)(v74 + 16) = v72;
  LODWORD(v132) = v131 & 1;
  *(unsigned char *)(v74 + 24) = v131 & 1;
  swift_retain();
  uint64_t v141 = v68;
  uint64_t v142 = v67;
  uint64_t v76 = swift_getOpaqueTypeConformance2();
  uint64_t v77 = v122;
  uint64_t v78 = v116;
  uint64_t v79 = v130;
  View.onTest(_:handler:)();
  uint64_t v141 = PPTTestCase.Name.rawValue.getter();
  uint64_t v142 = v80;
  swift_bridgeObjectRetain();
  v81._countAndFlagsBits = 0x70616373646E614CLL;
  v81._object = (void *)0xE900000000000065;
  String.append(_:)(v81);
  swift_bridgeObjectRelease();
  uint64_t v82 = v140;
  PPTTestCase.Name.init(_:)();
  uint64_t v141 = v78;
  uint64_t v142 = v76;
  uint64_t v83 = swift_getOpaqueTypeConformance2();
  uint64_t v84 = v124;
  View.onTest(_:handler:)();
  uint64_t v85 = v82;
  uint64_t v86 = (uint64_t)v133;
  uint64_t v87 = v135;
  v135(v85, (uint64_t)v133);
  (*(void (**)(unsigned char *, uint64_t))(v123 + 8))(v77, v84);
  swift_release();
  v87(v75, v86);
  (*(void (**)(unsigned char *, uint64_t))(v115 + 8))(v79, v78);
  uint64_t v88 = v86;
  if (qword_1001544C8 != -1) {
    swift_once();
  }
  uint64_t v89 = sub_100021598(v86, (uint64_t)qword_100161070);
  v137(v75, v89, v86);
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = v136;
  *(unsigned char *)(v90 + 24) = (_BYTE)v132;
  swift_retain();
  uint64_t v141 = v84;
  uint64_t v142 = v83;
  uint64_t v91 = swift_getOpaqueTypeConformance2();
  uint64_t v92 = v125;
  uint64_t v93 = v120;
  View.onTest(_:handler:)();
  uint64_t v141 = PPTTestCase.Name.rawValue.getter();
  uint64_t v142 = v94;
  swift_bridgeObjectRetain();
  v95._countAndFlagsBits = 0x70616373646E614CLL;
  v95._object = (void *)0xE900000000000065;
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  uint64_t v96 = v140;
  PPTTestCase.Name.init(_:)();
  uint64_t v141 = v93;
  uint64_t v142 = v91;
  swift_getOpaqueTypeConformance2();
  uint64_t v97 = v128;
  View.onTest(_:handler:)();
  uint64_t v98 = v135;
  v135(v96, v88);
  (*(void (**)(unsigned char *, uint64_t))(v127 + 8))(v92, v97);
  swift_release();
  v98(v75, v88);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v121 + 8))(v134, v93);
}

uint64_t sub_100021538(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for PPTTestCase.Name();
  sub_1000215D0(v3, a2);
  sub_100021598(v3, (uint64_t)a2);
  return PPTTestCase.Name.init(_:)();
}

uint64_t sub_100021598(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_1000215D0(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void destroy for CalculatorButtonView(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(void **)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);

  sub_10002F4DC(v2, v3, v4, v5);
}

double sub_100021678()
{
  uint64_t v0 = type metadata accessor for LayoutSubview();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LayoutSubviews();
  sub_100030104();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  double v4 = 0.0;
  if (v10 != v9)
  {
    LayoutSubviews.subscript.getter();
    static ProposedViewSize.unspecified.getter();
    LOBYTE(v10) = v5 & 1;
    LOBYTE(v9) = v6 & 1;
    LayoutSubview.sizeThatFits(_:)();
    double v4 = v7;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v4;
}

__n128 sub_1000217F8@<Q0>(uint64_t a1@<X8>)
{
  sub_100021AA4((uint64_t)&v12);
  long long v11 = v12;
  uint64_t v2 = v13;
  __int16 v3 = v14;
  __int16 v4 = v15;
  uint64_t v5 = static Alignment.center.getter();
  sub_1000218D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, INFINITY, 0, v5, v6, v11, *((uint64_t *)&v11 + 1), v2, v3 | (v4 << 8));
  long long v7 = v16[7];
  *(_OWORD *)(a1 + 96) = v16[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v16[8];
  long long v8 = v16[3];
  *(_OWORD *)(a1 + 32) = v16[2];
  *(_OWORD *)(a1 + 48) = v8;
  long long v9 = v16[5];
  *(_OWORD *)(a1 + 64) = v16[4];
  *(_OWORD *)(a1 + 80) = v9;
  __n128 result = (__n128)v16[1];
  *(_OWORD *)a1 = v16[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 sub_1000218D8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 a19)
{
  __int16 v20 = a19;
  uint64_t v21 = a17;
  uint64_t v22 = a16;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  int v25 = a8 & 1;
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (v25) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v32 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v22 = a16;
    uint64_t v21 = a17;
    __int16 v20 = a19;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = v22;
  *(void *)(a9 + 8) = v21;
  *(void *)(a9 + 16) = a18;
  *(unsigned char *)(a9 + 24) = v20;
  *(unsigned char *)(a9 + 25) = HIBYTE(v20) & 1;
  *(_OWORD *)(a9 + 96) = v38;
  *(_OWORD *)(a9 + 112) = v39;
  *(_OWORD *)(a9 + 128) = v40;
  *(_OWORD *)(a9 + 32) = v34;
  *(_OWORD *)(a9 + 48) = v35;
  __n128 result = v37;
  *(_OWORD *)(a9 + 64) = v36;
  *(__n128 *)(a9 + 80) = v37;
  return result;
}

double sub_100021AA4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = 0x1000000000000;
  if (!v1[47]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x10000000000;
  if (!v1[46]) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = &_mh_execute_header;
  if (!v1[45]) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 0x1000000;
  if (!v1[44]) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0x10000;
  if (!v1[43]) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = 256;
  if (!v1[42]) {
    uint64_t v9 = 0;
  }
  sub_100021D48(v9 | v1[41] | v8 | v7 | (unint64_t)v6 | v5 | v4);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (v11)
  {
    sub_100021FA0();
    sub_100021FF4();
  }
  else
  {
    char v12 = v2[8];
    uint64_t v13 = swift_retain();
    uint64_t v14 = sub_1000318B4(v13, v12);
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v17 = v14;
    sub_100031820(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v15 = *(unsigned __int8 *)(v14 + 16);
    swift_release();
    switch(v15)
    {
      case 3:
        break;
      default:
        _stringCompareWithSmolCheck(_:_:expecting:)();
        break;
    }
    swift_bridgeObjectRelease();
    sub_100021FA0();
    sub_100021FF4();
  }
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)&v17;
  *(_OWORD *)a1 = v17;
  *(void *)(a1 + 16) = v18;
  *(unsigned char *)(a1 + 24) = v19;
  *(unsigned char *)(a1 + 25) = v20;
  return result;
}

unint64_t sub_100021D48(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0x10000) == 0) {
    goto LABEL_11;
  }
  if (qword_100154520 != -1) {
    swift_once();
  }
  if (!sub_100034AF8(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
  {
LABEL_11:
    if ((v1 & 0x100) != 0)
    {
      if (qword_100154518 != -1) {
        swift_once();
      }
      if (sub_100034AF8(v1, static CalculatorButtonRepresentable.shiftableButtons))
      {
        LOBYTE(v1) = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
        goto LABEL_18;
      }
    }
    if ((v1 & 0x10000FF) == 0x1000001) {
      return 0x622E6574656C6564;
    }
    if ((v1 & 0x1000000FFLL) != 0x100000002) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v1 <= 0x37u && ((1 << v1) & 0x80001040000100) != 0) {
    return 0;
  }
LABEL_18:
  unint64_t result = 0;
  switch((char)v1)
  {
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x746E6563726570;
      break;
    case 4:
      unint64_t result = 0x656469766964;
      break;
    case 5:
      unint64_t result = 0x796C7069746C756DLL;
      break;
    case 6:
      unint64_t result = 0x73756E696DLL;
      break;
    case 7:
      unint64_t result = 1937075312;
      break;
    case 8:
      unint64_t result = 0x6C61757165;
      break;
    case 10:
      unint64_t result = 0x74616C75636C6163;
      break;
    case 52:
      return 0x622E6574656C6564;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100021FA0()
{
  unint64_t result = qword_100155B78;
  if (!qword_100155B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155B78);
  }
  return result;
}

unint64_t sub_100021FF4()
{
  unint64_t result = qword_100157508;
  if (!qword_100157508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157508);
  }
  return result;
}

uint64_t sub_100022048@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 144);
  v11[8] = *(_OWORD *)(v1 + 128);
  v11[9] = v3;
  uint64_t v12 = *(void *)(v1 + 160);
  long long v4 = *(_OWORD *)(v1 + 80);
  v11[4] = *(_OWORD *)(v1 + 64);
  v11[5] = v4;
  long long v5 = *(_OWORD *)(v1 + 112);
  v11[6] = *(_OWORD *)(v1 + 96);
  v11[7] = v5;
  long long v6 = *(_OWORD *)(v1 + 16);
  v11[0] = *(_OWORD *)v1;
  v11[1] = v6;
  long long v7 = *(_OWORD *)(v1 + 48);
  v11[2] = *(_OWORD *)(v1 + 32);
  v11[3] = v7;
  *a1 = static Alignment.center.getter();
  a1[1] = v8;
  uint64_t v9 = sub_100032FA0(&qword_100155AF0);
  return sub_1000220C4((uint64_t)v11, (uint64_t)a1 + *(int *)(v9 + 44));
}

uint64_t sub_1000220C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v130 = a2;
  uint64_t v124 = type metadata accessor for LayoutDirection();
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v122 = &v103[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v113 = type metadata accessor for ModeMenuView();
  __chkstk_darwin(v113);
  long long v5 = &v103[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_100032FA0(&qword_100155AF8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v103[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v112 = sub_100032FA0(&qword_100155B00);
  __chkstk_darwin(v112);
  uint64_t v119 = &v103[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v115 = sub_100032FA0(&qword_100155B08);
  __chkstk_darwin(v115);
  uint64_t v118 = &v103[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v129 = sub_100032FA0(&qword_100155B10);
  __chkstk_darwin(v129);
  uint64_t v116 = &v103[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v121 = &v103[-v13];
  uint64_t v127 = sub_100032FA0(&qword_100155B18);
  __chkstk_darwin(v127);
  uint64_t v128 = &v103[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v106 = sub_100032FA0(&qword_100155B20);
  uint64_t v108 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v16 = &v103[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v111 = sub_100032FA0(&qword_100155B28);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v18 = &v103[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v107 = sub_100032FA0(&qword_100155B30);
  __chkstk_darwin(v107);
  char v20 = &v103[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v125 = sub_100032FA0(&qword_100155B38);
  __chkstk_darwin(v125);
  uint64_t v109 = &v103[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v126 = sub_100032FA0(&qword_100155B40);
  uint64_t v120 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v114 = &v103[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  uint64_t v117 = &v103[-v24];
  uint64_t v25 = *(void *)(a1 + 112);
  char v26 = *(unsigned char *)(a1 + 120);
  sub_100032F38(v25, v26);
  char v27 = sub_100034598(v25, v26);
  sub_100032EAC(v25, v26);
  if (v27)
  {
    long long v131 = *(_OWORD *)(a1 + 128);
    char v132 = *(unsigned char *)(a1 + 144);
    sub_100032FA0(&qword_1001555B8);
    Binding.projectedValue.getter();
    long long v28 = v133;
    char v29 = v134;
    type metadata accessor for CalculatorMDMRestrictionsManager();
    sub_10003302C((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
    *(void *)long long v5 = Environment.init<A>(_:)();
    v5[8] = v30 & 1;
    type metadata accessor for CalculatorLayout();
    sub_10003302C((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
    *((void *)v5 + 2) = Environment.init<A>(_:)();
    v5[24] = v31 & 1;
    *((void *)v5 + 4) = swift_getKeyPath();
    *((void *)v5 + 5) = 0;
    *((_WORD *)v5 + 24) = 0;
    type metadata accessor for CalculatorViewModel();
    sub_10003302C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    *((void *)v5 + 7) = Environment.init<A>(_:)();
    v5[64] = v32 & 1;
    *(_OWORD *)(v5 + 72) = v28;
    v5[88] = v29;
    LOBYTE(v131) = 0;
    State.init(wrappedValue:)();
    uint64_t v33 = *((void *)&v133 + 1);
    v5[96] = v133;
    *((void *)v5 + 13) = v33;
    AccessibilityFocusState.init<>()();
    sub_10006F8B4((uint64_t)v5, (uint64_t)v8);
    sub_10006F918((uint64_t)v5);
    uint64_t v34 = Namespace.wrappedValue.getter();
    int v35 = static MatchedGeometryProperties.size.getter();
    static UnitPoint.center.getter();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    long long v40 = v119;
    sub_100033344((uint64_t)v8, (uint64_t)v119, &qword_100155AF8);
    uint64_t v41 = &v40[*(int *)(v112 + 36)];
    *uint64_t v41 = 1;
    *((void *)v41 + 1) = v34;
    *((_DWORD *)v41 + 4) = v35;
    *((void *)v41 + 3) = v37;
    *((void *)v41 + 4) = v39;
    v41[40] = 1;
    sub_100032F44((uint64_t)v8, &qword_100155AF8);
    uint64_t KeyPath = swift_getKeyPath();
    LOBYTE(v35) = *(unsigned char *)(a1 + 24);
    uint64_t v43 = swift_retain();
    uint64_t v44 = sub_10002BD88(v43, v35);
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v133 = v44;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v45 = v44 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
    swift_beginAccess();
    uint64_t v46 = v123;
    uint64_t v47 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v123 + 16);
    uint64_t v48 = v122;
    uint64_t v49 = v124;
    v47(v122, v45, v124);
    swift_release();
    uint64_t v50 = (uint64_t)v118;
    uint64_t v51 = (uint64_t *)&v118[*(int *)(v115 + 36)];
    uint64_t v52 = sub_100032FA0(&qword_100154880);
    v47((unsigned char *)v51 + *(int *)(v52 + 28), (uint64_t)v48, v49);
    *uint64_t v51 = KeyPath;
    sub_100033344((uint64_t)v40, v50, &qword_100155B00);
    (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v48, v49);
    sub_100032F44((uint64_t)v40, &qword_100155B00);
    Swift::String v53 = v116;
    sub_100033344(v50, (uint64_t)v116, &qword_100155B08);
    *(_OWORD *)&v53[*(int *)(v129 + 36)] = xmmword_10010F430;
    sub_100032F44(v50, &qword_100155B08);
    uint64_t v54 = v121;
    sub_10002D9D0((uint64_t)v53, (uint64_t)v121, &qword_100155B10);
    sub_100033344((uint64_t)v54, (uint64_t)v128, &qword_100155B10);
    swift_storeEnumTagMultiPayload();
    unint64_t v55 = sub_100023220();
    unint64_t v56 = sub_1000232C8();
    *(void *)&long long v133 = v125;
    *((void *)&v133 + 1) = &type metadata for ModeMenuTip;
    unint64_t v134 = v55;
    unint64_t v135 = v56;
    swift_getOpaqueTypeConformance2();
    sub_100023158(&qword_100155BC0, &qword_100155B10, (void (*)(void))sub_10003A368);
    _ConditionalContent<>.init(storage:)();
    return sub_100032F44((uint64_t)v54, &qword_100155B10);
  }
  else
  {
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 176) = *(void *)(a1 + 160);
    long long v59 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(v58 + 144) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v58 + 160) = v59;
    long long v60 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v58 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v58 + 96) = v60;
    long long v61 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v58 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v58 + 128) = v61;
    long long v62 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v58 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v58 + 32) = v62;
    long long v63 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v58 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v58 + 64) = v63;
    __chkstk_darwin(v58);
    *(void *)&v103[-16] = a1;
    sub_10002331C(a1);
    sub_100032FA0(&qword_100155B48);
    sub_100023158(&qword_100155B50, &qword_100155B48, (void (*)(void))sub_10003AA18);
    Button.init(action:label:)();
    uint64_t v115 = (uint64_t)v20;
    LODWORD(v123) = *(unsigned __int8 *)(a1 + 82);
    unsigned __int8 v64 = *(unsigned char *)(a1 + 83);
    LODWORD(v121) = v64;
    long long v105 = v18;
    unsigned __int8 v65 = *(unsigned char *)(a1 + 84);
    LODWORD(v119) = v65;
    uint64_t v112 = (uint64_t)v16;
    unsigned __int8 v66 = *(unsigned char *)(a1 + 85);
    LODWORD(v118) = v66;
    unsigned __int8 v67 = *(unsigned char *)(a1 + 86);
    LODWORD(v116) = v67;
    int v104 = *(unsigned __int8 *)(a1 + 87);
    LODWORD(v124) = *(unsigned __int8 *)(a1 + 88);
    uint64_t v68 = *(void *)(a1 + 96);
    unint64_t v69 = *(void *)(a1 + 104);
    unsigned __int8 v70 = *(unsigned char *)(a1 + 8);
    LODWORD(v122) = v70;
    uint64_t v71 = swift_retain();
    uint64_t v72 = sub_100033AA8(v71, v70);
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v133 = v72;
    uint64_t v113 = sub_10003302C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    char v73 = *(unsigned char *)(v72 + 48);
    swift_release();
    uint64_t v74 = swift_getKeyPath();
    type metadata accessor for CalculatorViewModel();
    uint64_t v75 = Environment.init<A>(_:)();
    LOBYTE(v133) = v123;
    BYTE1(v133) = v64;
    BYTE2(v133) = v65;
    BYTE3(v133) = v66;
    BYTE4(v133) = v67;
    char v76 = v104;
    BYTE5(v133) = v104;
    BYTE6(v133) = v124;
    *((void *)&v133 + 1) = v68;
    unint64_t v134 = v69;
    LOBYTE(v135) = v73;
    uint64_t v136 = v74;
    char v137 = 0;
    uint64_t v138 = v75;
    char v139 = v77 & 1;
    sub_100040BE4(&qword_100155B80, &qword_100155B20);
    sub_100031A10();
    uint64_t v78 = v105;
    uint64_t v79 = v106;
    uint64_t v80 = v112;
    View.buttonStyle<A>(_:)();
    sub_100032EAC(v74, 0);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v80, v79);
    uint64_t v81 = Namespace.wrappedValue.getter();
    LODWORD(v74) = static MatchedGeometryProperties.frame.getter();
    static UnitPoint.center.getter();
    uint64_t v83 = v82;
    uint64_t v85 = v84;
    uint64_t v86 = v110;
    uint64_t v87 = v115;
    uint64_t v88 = v78;
    uint64_t v89 = v78;
    uint64_t v90 = v111;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v110 + 16))(v115, v89, v111);
    uint64_t v91 = v87 + *(int *)(v107 + 36);
    *(unsigned char *)uint64_t v91 = 1;
    *(void *)(v91 + 8) = v81;
    *(_DWORD *)(v91 + 16) = v74;
    *(void *)(v91 + 24) = v83;
    *(void *)(v91 + 32) = v85;
    *(unsigned char *)(v91 + 40) = 1;
    (*(void (**)(unsigned char *, uint64_t))(v86 + 8))(v88, v90);
    uint64_t v92 = swift_retain();
    uint64_t v93 = sub_100033AA8(v92, (char)v122);
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v133 = v93;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v90) = *(unsigned char *)(v93 + 48);
    swift_release();
    long long v133 = *(_OWORD *)(a1 + 128);
    LOBYTE(v134) = *(unsigned char *)(a1 + 144);
    sub_100032FA0(&qword_1001555B8);
    Binding.wrappedValue.getter();
    LOBYTE(v81) = v131;
    uint64_t v94 = v109;
    sub_100033344(v87, (uint64_t)v109, &qword_100155B30);
    uint64_t v95 = v125;
    uint64_t v96 = &v94[*(int *)(v125 + 36)];
    unsigned char *v96 = v123;
    v96[1] = (_BYTE)v121;
    v96[2] = (_BYTE)v119;
    v96[3] = (_BYTE)v118;
    v96[4] = (_BYTE)v116;
    v96[5] = v76;
    v96[6] = v124;
    v96[7] = v90;
    v96[8] = v81;
    sub_100032F44(v87, &qword_100155B30);
    *(void *)&long long v131 = *(void *)(a1 + 160);
    *(void *)&long long v133 = v131;
    unint64_t v97 = sub_100023220();
    unint64_t v98 = sub_1000232C8();
    swift_bridgeObjectRetain();
    uint64_t v99 = v114;
    View.popoverTip<A>(_:arrowEdge:action:)();
    sub_10002329C((uint64_t)&v131);
    sub_100032F44((uint64_t)v94, &qword_100155B38);
    uint64_t v100 = v120;
    int v101 = v117;
    uint64_t v102 = v126;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v120 + 32))(v117, v99, v126);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v100 + 16))(v128, v101, v102);
    swift_storeEnumTagMultiPayload();
    *(void *)&long long v133 = v95;
    *((void *)&v133 + 1) = &type metadata for ModeMenuTip;
    unint64_t v134 = v97;
    unint64_t v135 = v98;
    swift_getOpaqueTypeConformance2();
    sub_100023158(&qword_100155BC0, &qword_100155B10, (void (*)(void))sub_10003A368);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v100 + 8))(v101, v102);
  }
}

uint64_t sub_100023158(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ModeMenuView()
{
  uint64_t result = qword_100157C68;
  if (!qword_100157C68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100023220()
{
  unint64_t result = qword_100155B90;
  if (!qword_100155B90)
  {
    sub_1000317D8(&qword_100155B38);
    sub_100008F90();
    sub_10003BC20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155B90);
  }
  return result;
}

uint64_t sub_10002329C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000232C8()
{
  unint64_t result = qword_100155BB8;
  if (!qword_100155BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155BB8);
  }
  return result;
}

uint64_t sub_10002331C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = *(unsigned char *)(a1 + 81);
  char v11 = *(unsigned char *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 112);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 80);
  swift_retain();
  swift_retain();
  sub_1000319C4(v2, v3, v4, v5);
  sub_100023524(v6, v7, v9, v8);
  sub_100032F38(v12, v11);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for CalculatorModeButtonView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  char v8 = *(void **)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  swift_retain();
  swift_retain();
  sub_1000319C4(v6, v7, v8, v9);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  LOBYTE(v7) = *(unsigned char *)(a2 + 81);
  LOBYTE(v8) = *(unsigned char *)(a2 + 80);
  sub_100023524(v10, v11, v8, v7);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(unsigned char *)(a1 + 80) = (_BYTE)v8;
  *(unsigned char *)(a1 + 81) = v7;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(a2 + 82);
  *(_DWORD *)(a1 + 85) = *(_DWORD *)(a2 + 85);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 112);
  LOBYTE(v11) = *(unsigned char *)(a2 + 120);
  sub_100032F38(v12, v11);
  *(void *)(a1 + 112) = v12;
  *(unsigned char *)(a1 + 120) = v11;
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v14 = *(void *)(a2 + 152);
  uint64_t v15 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = v14;
  *(void *)(a1 + 160) = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100023524(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_retain();
  }

  return swift_retain();
}

double sub_100023568@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = 256;
  if (!*((unsigned char *)v1 + 1)) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 | *(unsigned __int8 *)v1;
  uint64_t v5 = 0x10000;
  if (!*((unsigned char *)v1 + 2)) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0x1000000;
  if (!*((unsigned char *)v1 + 3)) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v4 | v5 | v6;
  char v8 = &_mh_execute_header;
  if (!*((unsigned char *)v1 + 4)) {
    char v8 = 0;
  }
  uint64_t v9 = 0x10000000000;
  if (!*((unsigned char *)v1 + 5)) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = 0x1000000000000;
  if (!*((unsigned char *)v1 + 6)) {
    uint64_t v10 = 0;
  }
  sub_100023634(v7 | (unint64_t)v8 | v9 | v10, *((unsigned char *)v1 + 24), v15, v1[1], v1[2]);
  char v11 = v16;
  char v12 = v17;
  double result = *(double *)v15;
  long long v14 = v15[1];
  *(_OWORD *)a1 = v15[0];
  *(_OWORD *)(a1 + 16) = v14;
  *(unsigned char *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 33) = v12;
  return result;
}

uint64_t sub_100023634@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  long long v62 = a3;
  uint64_t v9 = type metadata accessor for AttributedString();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for Font._StylisticAlternative();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1 & 0x10101010101FFLL;
  int v15 = sub_100031670(v14);
  if ((v15 - 33) < 5 || v15 == 2)
  {
    *(void *)&long long v66 = sub_1000243A0(v14);
    *((void *)&v66 + 1) = v17;
    sub_100023B24();
    uint64_t v18 = Text.init<A>(_:)();
    uint64_t v20 = v19;
    uint64_t v21 = v10;
    char v23 = v22 & 1;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for Font._StylisticAlternative.nine(_:), v21);
    id v61 = (id)Text._stylisticAlternative(_:)();
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v29 = v28 & 1;
    sub_1000356E0(v18, v20, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
    uint64_t v30 = (uint64_t)v61;
    *(void *)&long long v63 = v61;
    *((void *)&v63 + 1) = v25;
    char v31 = v29;
    *(void *)&long long v64 = v29;
    *((void *)&v64 + 1) = v27;
    LOBYTE(v65) = 0;
    uint64_t v32 = v25;
    uint64_t v33 = v25;
    LOBYTE(v25) = v31;
    sub_1000637B4((uint64_t)v61, v32, v31);
    swift_bridgeObjectRetain();
    _ConditionalContent<>.init(storage:)();
    long long v63 = v66;
    long long v64 = v67;
    __int16 v65 = v68;
    sub_100032FA0(&qword_1001563F8);
    sub_100023B78();
    _ConditionalContent<>.init(storage:)();
    sub_1000356E0(v30, v33, v25);
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  unsigned __int8 v40 = sub_100031670(v14);
  unsigned __int8 v41 = v40;
  if (qword_100154530 != -1) {
    swift_once();
  }
  if (sub_100034AF8(v41, static CalculatorButtonRepresentable.attributedTitledButtons))
  {
    unsigned __int8 v42 = sub_100031670(v14);
    unsigned __int8 v43 = sub_100031670(v14);
    double v44 = sub_100034960(v43, a4, a5);
    uint64_t v45 = (void *)sub_10007DF40(v42, v44);
    if (v45)
    {
      id v61 = v45;
      AttributedString.init(_:)();
      uint64_t v46 = Text.init(_:)();
      uint64_t v48 = v47;
      char v50 = v49 & 1;
      *(void *)&long long v63 = v46;
      *((void *)&v63 + 1) = v47;
      *(void *)&long long v64 = v49 & 1;
      *((void *)&v64 + 1) = v51;
      LOBYTE(v65) = 1;
      sub_1000637B4(v46, v47, v49 & 1);
      swift_bridgeObjectRetain();
      _ConditionalContent<>.init(storage:)();
      long long v52 = v66;
      char v53 = v67;
      long long v63 = v66;
      long long v64 = v67;
      __int16 v65 = v68;
      sub_10009D4C0(v66, *((uint64_t *)&v66 + 1), v67);
      sub_100032FA0(&qword_1001563F8);
      sub_100023B78();
      _ConditionalContent<>.init(storage:)();

      sub_10007E9AC(v52, *((uint64_t *)&v52 + 1), v53);
      sub_1000356E0(v46, v48, v50);
      goto LABEL_7;
    }
  }
  if (a2)
  {
    sub_100031670(v14);
    Swift::String v56 = CalculatorButtonRepresentable.stringValue()();
    object = v56._object;
    uint64_t countAndFlagsBits = v56._countAndFlagsBits;
  }
  else
  {
    uint64_t countAndFlagsBits = sub_1000243A0(v14);
  }
  *(void *)&long long v66 = countAndFlagsBits;
  *((void *)&v66 + 1) = object;
  sub_100023B24();
  *(void *)&long long v63 = Text.init<A>(_:)();
  *((void *)&v63 + 1) = v58;
  *(void *)&long long v64 = v57 & 1;
  *((void *)&v64 + 1) = v59;
  __int16 v65 = 256;
  sub_100032FA0(&qword_1001563F8);
  sub_100023B78();
  uint64_t result = _ConditionalContent<>.init(storage:)();
LABEL_8:
  uint64_t v35 = *((void *)&v66 + 1);
  long long v36 = v67;
  unsigned __int8 v37 = v68;
  char v38 = v69;
  uint64_t v39 = v62;
  *long long v62 = v66;
  v39[1] = v35;
  *((_OWORD *)v39 + 1) = v36;
  *((unsigned char *)v39 + 32) = v37;
  *((unsigned char *)v39 + 33) = v38;
  return result;
}

unint64_t sub_100023B24()
{
  unint64_t result = qword_100155290;
  if (!qword_100155290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155290);
  }
  return result;
}

unint64_t sub_100023B78()
{
  unint64_t result = qword_1001563F0;
  if (!qword_1001563F0)
  {
    sub_1000317D8(&qword_1001563F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001563F0);
  }
  return result;
}

uint64_t sub_100023BE4(char a1, char a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = 1701080941;
  switch(a2)
  {
    case 1:
      return 17217;
    case 2:
      return 2961195;
    case 3:
      if (qword_100154790 != -1) {
        swift_once();
      }
      uint64_t v9 = qword_1001613A0;
      swift_getKeyPath();
      sub_10003C394();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t result = (uint64_t)[*(id *)(v9 + 48) percentSymbol:v9];
      if (result) {
        goto LABEL_65;
      }
      __break(1u);
      return 47043;
    case 4:
      return 47043;
    case 5:
      return 38851;
    case 6:
      return 9603298;
    case 7:
      return 43;
    case 8:
      return 61;
    case 9:
      if (qword_100154790 != -1) {
        swift_once();
      }
      uint64_t v12 = qword_1001613A0;
      swift_getKeyPath();
      sub_10003C394();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t result = (uint64_t)[*(id *)(v12 + 48) decimalSeparator];
      if (result)
      {
LABEL_65:
        uint64_t v13 = (void *)result;
        uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return v6;
      }
      else
      {
        __break(1u);
      }
      return result;
    case 10:
      return v6;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 72:
      uint64_t countAndFlagsBits = CalculatorButtonRepresentable.stringValue()()._countAndFlagsBits;
      uint64_t v6 = sub_100024520(countAndFlagsBits);
      swift_bridgeObjectRelease();
      return v6;
    case 21:
      return 680427746;
    case 22:
      return 697204962;
    case 23:
      return 25453;
    case 24:
      return 11117;
    case 25:
      return 11629;
    case 26:
      return 29293;
    case 27:
      return 6581810;
    case 28:
      return 11715192;
    case 29:
      return 11780728;
    case 30:
      return 12110456;
    case 31:
      return 10734437;
    case 32:
      return 2748002353;
    case 33:
      return 7876401;
    case 34:
      if (a1) {
        return 10127586;
      }
      else {
        return 2023393506;
      }
    case 35:
      return 2023459042;
    case 36:
      return 0x789A88E279;
    case 37:
      return 0x799A88E278;
    case 38:
      return 28268;
    case 39:
      return 0x82E28182E2676F6CLL;
    case 40:
      return 8568;
    case 41:
      return 7235955;
    case 42:
      return 7565155;
    case 43:
      return 7233908;
    case 44:
      return 2459016688;
    case 45:
      return 17733;
    case 46:
      return 6578514;
    case 47:
      return 1752066419;
    case 48:
      return 1752395619;
    case 49:
      return 1752064372;
    case 50:
      return 32975;
    case 51:
      return 1684955474;
    case 52:
      return 0x6574656C6564;
    case 53:
      return 44;
    case 54:
      return 6776132;
    case 55:
      return 10734457;
    case 56:
      return 10734386;
    case 57:
      return 0xA7B5E1676F6CLL;
    case 58:
      return 0x8282E2676F6CLL;
    case 59:
      return 0xB9C2BB81E26E6973;
    case 60:
      unsigned int v10 = -495751325;
      return v10 | 0xB9C2BB8100000000;
    case 61:
      unsigned int v10 = -496082572;
      return v10 | 0xB9C2BB8100000000;
    case 62:
      return 0xC2BB81E2686E6973;
    case 63:
      unsigned int v11 = 1752395619;
      return v11 | 0xC2BB81E200000000;
    case 64:
      unsigned int v11 = 1752064372;
      return v11 | 0xC2BB81E200000000;
    case 65:
      return 65;
    case 66:
      return 66;
    case 67:
      return 67;
    case 68:
      return 68;
    case 69:
      return 69;
    case 70:
      return 70;
    case 71:
      return 17990;
    case 73:
      return 4476481;
    case 74:
      return 21071;
    case 75:
      return 5394254;
    case 76:
      return 5394264;
    case 77:
      return 15934;
    case 78:
      return 15420;
    case 79:
      return 1497251416;
    case 80:
      return 1497119832;
    case 81:
      return 5402450;
    case 82:
      return 5009234;
    case 83:
      return 0x8882E270696C66;
    case 84:
      return 0xE28182E270696C66;
    case 85:
      return 4670798;
    case 86:
      return 5525326;
    case 87:
      return 6582125;
    case 88:
    case 92:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
    case 89:
      return 0x799486E278;
    case 90:
      return 2441536082;
    case 91:
      return 2475090514;
    default:
      return 1701736302;
  }
}

uint64_t sub_1000243A0(uint64_t a1)
{
  Calculator::CalculatorButtonRepresentable v2 = (char)a1;
  if ((a1 & 0x10000) == 0) {
    goto LABEL_12;
  }
  if (qword_100154520 != -1) {
    swift_once();
  }
  if (sub_100034AF8(v2, static CalculatorButtonRepresentable.alternateRPNButtons))
  {
    if (v2 > Calculator_CalculatorButtonRepresentable_cubeRoot)
    {
      if (v2 == Calculator_CalculatorButtonRepresentable_root)
      {
        Calculator::CalculatorButtonRepresentable v2 = Calculator_CalculatorButtonRepresentable_xRoot;
      }
      else if (v2 == Calculator_CalculatorButtonRepresentable_exponentialBaseY)
      {
        Calculator::CalculatorButtonRepresentable v2 = Calculator_CalculatorButtonRepresentable_power;
      }
    }
    else if (v2 == Calculator_CalculatorButtonRepresentable_equals)
    {
      Calculator::CalculatorButtonRepresentable v2 = Calculator_CalculatorButtonRepresentable_enter;
    }
    else if (v2 == Calculator_CalculatorButtonRepresentable_power)
    {
      Calculator::CalculatorButtonRepresentable v2 = Calculator_CalculatorButtonRepresentable_exponentialBaseY;
    }
  }
  else
  {
    if ((a1 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    if (qword_100154518 != -1) {
      swift_once();
    }
    if (sub_100034AF8(v2, static CalculatorButtonRepresentable.shiftableButtons))
    {
      Calculator::CalculatorButtonRepresentable v2 = CalculatorButtonRepresentable.shiftedButton(isRPN:)(a1 & 0x10000);
    }
    else
    {
LABEL_14:
      if ((a1 & 0x1000000FFLL) == 0x100000002) {
        char v3 = 34;
      }
      else {
        char v3 = v2;
      }
      if ((a1 & 0x10000FF) == 0x1000001) {
        Calculator::CalculatorButtonRepresentable v2 = Calculator_CalculatorButtonRepresentable_delete;
      }
      else {
        Calculator::CalculatorButtonRepresentable v2 = v3;
      }
    }
  }

  return sub_100023BE4((a1 & 0x1000000FFLL) == 0x100000002, v2);
}

uint64_t sub_100024520(uint64_t a1)
{
  if (qword_100154790 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001613A0;
  swift_getKeyPath();
  sub_10003C394();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v3 = *(id *)(v2 + 48);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 numberFromString:v4];

  if (!v5)
  {
    id v5 = v3;
LABEL_8:

    swift_bridgeObjectRetain();
    return a1;
  }
  id v6 = [v3 stringFromNumber:v5];
  if (!v6)
  {

    goto LABEL_8;
  }
  uint64_t v7 = v6;
  a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return a1;
}

Swift::String __swiftcall CalculatorButtonRepresentable.stringValue()()
{
  char v1 = v0;
  uint64_t v2 = (void *)0xE100000000000000;
  uint64_t v3 = 48;
  switch(v1)
  {
    case 1:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 17217;
      break;
    case 2:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 2961195;
      break;
    case 3:
      uint64_t v2 = (void *)0xE700000000000000;
      uint64_t v3 = 0x746E6563726570;
      break;
    case 4:
      uint64_t v2 = (void *)0xA200000000000000;
      uint64_t v3 = 47043;
      break;
    case 5:
      uint64_t v2 = (void *)0xA200000000000000;
      uint64_t v3 = 38851;
      break;
    case 6:
      uint64_t v2 = (void *)0xA300000000000000;
      uint64_t v3 = 9603298;
      break;
    case 7:
      uint64_t v3 = 43;
      break;
    case 8:
      uint64_t v3 = 61;
      break;
    case 9:
      uint64_t v2 = (void *)0xE700000000000000;
      uint64_t v3 = 0x6C616D69636564;
      break;
    case 10:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1701080941;
      break;
    case 11:
      break;
    case 12:
      uint64_t v3 = 49;
      break;
    case 13:
      uint64_t v3 = 50;
      break;
    case 14:
      uint64_t v3 = 51;
      break;
    case 15:
      uint64_t v3 = 52;
      break;
    case 16:
      uint64_t v3 = 53;
      break;
    case 17:
      uint64_t v3 = 54;
      break;
    case 18:
      uint64_t v3 = 55;
      break;
    case 19:
      uint64_t v3 = 56;
      break;
    case 20:
      uint64_t v3 = 57;
      break;
    case 21:
      uint64_t v2 = (void *)0xA400000000000000;
      uint64_t v3 = 680427746;
      break;
    case 22:
      uint64_t v2 = (void *)0xA400000000000000;
      uint64_t v3 = 697204962;
      break;
    case 23:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 25453;
      break;
    case 24:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 11117;
      break;
    case 25:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 11629;
      break;
    case 26:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 29293;
      break;
    case 27:
      uint64_t v3 = 6581810;
      uint64_t v2 = (void *)0xE300000000000000;
      break;
    case 28:
      uint64_t v2 = (void *)0xA300000000000000;
      uint64_t v3 = 11715192;
      break;
    case 29:
      uint64_t v3 = 11780728;
      uint64_t v2 = (void *)0xA300000000000000;
      break;
    case 30:
      uint64_t v2 = (void *)0xA300000000000000;
      uint64_t v3 = 12110456;
      break;
    case 31:
      uint64_t v3 = 10734437;
      uint64_t v2 = (void *)0xA300000000000000;
      break;
    case 32:
      uint64_t v2 = (void *)0xA400000000000000;
      uint64_t v3 = 2748002353;
      break;
    case 33:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 7876401;
      break;
    case 34:
      uint64_t v3 = 1953657203;
      uint64_t v2 = (void *)0xE400000000000000;
      break;
    case 35:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1953653347;
      break;
    case 36:
      uint64_t v2 = (void *)0xA500000000000000;
      uint64_t v3 = 0x789A88E279;
      break;
    case 37:
      uint64_t v2 = (void *)0xA500000000000000;
      uint64_t v3 = 0x799A88E278;
      break;
    case 38:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 28268;
      break;
    case 39:
      uint64_t v3 = 6778732;
      uint64_t v2 = (void *)0xE300000000000000;
      break;
    case 40:
      uint64_t v2 = (void *)0xE90000000000006CLL;
      uint64_t v3 = 0x6169726F74636166;
      break;
    case 41:
      uint64_t v3 = 7235955;
      uint64_t v2 = (void *)0xE300000000000000;
      break;
    case 42:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 7565155;
      break;
    case 43:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 7233908;
      break;
    case 44:
      uint64_t v3 = 101;
      break;
    case 45:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 17733;
      break;
    case 46:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 6578546;
      break;
    case 47:
      uint64_t v3 = 1752066419;
      uint64_t v2 = (void *)0xE400000000000000;
      break;
    case 48:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1752395619;
      break;
    case 49:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1752064372;
      break;
    case 50:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 26992;
      break;
    case 51:
      uint64_t v2 = (void *)0xE600000000000000;
      uint64_t v3 = 0x6D6F646E6152;
      break;
    case 52:
      uint64_t v2 = (void *)0xE600000000000000;
      uint64_t v3 = 0x6574656C6564;
      break;
    case 53:
      uint64_t v2 = (void *)0xE500000000000000;
      uint64_t v3 = 0x616D6D6F63;
      break;
    case 54:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 6776164;
      break;
    case 55:
      uint64_t v3 = 10734457;
      uint64_t v2 = (void *)0xA300000000000000;
      break;
    case 56:
      uint64_t v2 = (void *)0xA300000000000000;
      uint64_t v3 = 10734386;
      break;
    case 57:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 2036821868;
      break;
    case 58:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 845639532;
      break;
    case 59:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1852404577;
      break;
    case 60:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1936679777;
      break;
    case 61:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1851880545;
      break;
    case 62:
      uint64_t v2 = (void *)0xE500000000000000;
      uint64_t v3 = 0x686E697361;
      break;
    case 63:
      uint64_t v2 = (void *)0xE500000000000000;
      uint64_t v3 = 0x68736F6361;
      break;
    case 64:
      uint64_t v2 = (void *)0xE500000000000000;
      uint64_t v3 = 0x686E617461;
      break;
    case 65:
      uint64_t v3 = 65;
      break;
    case 66:
      uint64_t v3 = 66;
      break;
    case 67:
      uint64_t v3 = 67;
      break;
    case 68:
      uint64_t v3 = 68;
      break;
    case 69:
      uint64_t v3 = 69;
      break;
    case 70:
      uint64_t v3 = 70;
      break;
    case 71:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 17990;
      break;
    case 72:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 12336;
      break;
    case 73:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 4476481;
      break;
    case 74:
      uint64_t v2 = (void *)0xE200000000000000;
      uint64_t v3 = 21071;
      break;
    case 75:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 5394254;
      break;
    case 76:
      uint64_t v3 = 5394264;
      uint64_t v2 = (void *)0xE300000000000000;
      break;
    case 77:
      uint64_t v2 = (void *)0xA500000000000000;
      uint64_t v3 = 0x3E3E8E80E2;
      break;
    case 78:
      uint64_t v2 = (void *)0xA500000000000000;
      uint64_t v3 = 0x3C3C8E80E2;
      break;
    case 79:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1497251416;
      break;
    case 80:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1497119832;
      break;
    case 81:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 5402450;
      break;
    case 82:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 5009234;
      break;
    case 83:
      uint64_t v2 = (void *)0xA700000000000000;
      uint64_t v3 = 0x8882E270696C66;
      break;
    case 84:
      uint64_t v2 = (void *)0xAA00000000008682;
      uint64_t v3 = 0xE28182E270696C66;
      break;
    case 85:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 4670798;
      break;
    case 86:
      uint64_t v2 = (void *)0xE300000000000000;
      uint64_t v3 = 5525326;
      break;
    case 87:
      uint64_t v3 = 6582125;
      uint64_t v2 = (void *)0xE300000000000000;
      break;
    case 88:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1886351972;
      break;
    case 89:
      uint64_t v2 = (void *)0xA500000000000000;
      uint64_t v3 = 0x799486E278;
      break;
    case 90:
      uint64_t v2 = (void *)0xA400000000000000;
      uint64_t v3 = 2441536082;
      break;
    case 91:
      uint64_t v2 = (void *)0xA400000000000000;
      uint64_t v3 = 2475090514;
      break;
    case 92:
      uint64_t v2 = (void *)0xE500000000000000;
      uint64_t v3 = 0x7265746E65;
      break;
    default:
      uint64_t v2 = (void *)0xE400000000000000;
      uint64_t v3 = 1701736302;
      break;
  }
  result._object = v2;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t assignWithCopy for CalculatorButtonStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  sub_100032F38(v4, v5);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  sub_100032EAC(v6, v7);
  char v8 = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100024CF4()
{
  uint64_t v1 = sub_100032FA0(&qword_100156A98);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v4 = v0[2];
  uint64_t v13 = *((void *)v0 + 6);
  long long v5 = *v0;
  long long v11 = v0[1];
  long long v12 = v4;
  long long v10 = v5;
  uint64_t v6 = type metadata accessor for Text.TruncationMode();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
  uint64_t v14 = v10;
  char v15 = BYTE8(v10);
  sub_100024EA0((uint64_t)&v11 + 8, (uint64_t)v16);
  uint64_t v7 = swift_allocObject();
  long long v8 = v11;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v12;
  *(void *)(v7 + 64) = v13;
  swift_retain_n();
  swift_retain_n();
  sub_100025ED0((uint64_t)&v14);
  sub_100025ED0((uint64_t)v16);
  return CalculateExpressionView.init(expression:isEditable:height:minFontSizeRatio:textAlignment:textColor:truncationMode:operationCallback:)();
}

uint64_t sub_100024EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_1001590E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100024F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v48 = a1;
  uint64_t v49 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v46 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for TaskPriority();
  uint64_t v4 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_100156B48);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_100032FA0(&qword_100156B50);
  uint64_t v42 = v10;
  __chkstk_darwin(v10);
  long long v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100032FA0(&qword_100156B58);
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  __chkstk_darwin(v13);
  unsigned __int8 v41 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v9 = static Alignment.bottomLeading.getter();
  v9[1] = v15;
  uint64_t v16 = sub_100032FA0(&qword_100156B60);
  sub_100027624(v1, (uint64_t)v9 + *(int *)(v16 + 44));
  long long v53 = *(_OWORD *)(v1 + 32);
  char v54 = *(unsigned char *)(v1 + 48);
  long long v51 = *(_OWORD *)(v1 + 32);
  char v52 = *(unsigned char *)(v1 + 48);
  sub_100032FA0(&qword_100156B68);
  FocusState.wrappedValue.getter();
  int v17 = *(unsigned __int8 *)(v1 + 8);
  int v39 = v50;
  int v40 = v17;
  *(void *)&long long v51 = *(void *)(v1 + 16);
  BYTE8(v51) = *(unsigned char *)(v1 + 24);
  uint64_t v18 = swift_allocObject();
  long long v19 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(v18 + 64) = *(unsigned char *)(v1 + 48);
  swift_retain();
  sub_100025ED0((uint64_t)&v51);
  sub_100025574((uint64_t)&v53);
  static TaskPriority.userInitiated.getter();
  uint64_t v20 = &v12[*(int *)(v10 + 36)];
  uint64_t v21 = sub_100032FA0(&qword_100156B80);
  uint64_t v22 = v43;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v20[*(int *)(v21 + 36)], v6, v43);
  v20[*(int *)(v21 + 40)] = v39;
  *(void *)uint64_t v20 = &unk_100156B78;
  *((void *)v20 + 1) = v18;
  char v23 = v41;
  sub_100033344((uint64_t)v9, (uint64_t)v12, &qword_100156B48);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
  sub_100032F44((uint64_t)v9, &qword_100156B48);
  uint64_t v24 = swift_retain();
  uint64_t v25 = sub_100033AA8(v24, v40);
  swift_release();
  swift_getKeyPath();
  uint64_t v50 = v25;
  sub_1000330BC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v22) = *(unsigned char *)(v25 + 53);
  swift_release();
  LOBYTE(v50) = v22;
  uint64_t v26 = swift_allocObject();
  long long v27 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(v2 + 32);
  *(unsigned char *)(v26 + 64) = *(unsigned char *)(v2 + 48);
  swift_retain();
  sub_100025ED0((uint64_t)&v51);
  sub_100025574((uint64_t)&v53);
  sub_100032FA0(&qword_100156B88);
  sub_1000255A0();
  sub_100028FAC(&qword_100156BA8, &qword_100156B88, (void (*)(void))sub_10003C470);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100032F44((uint64_t)v12, &qword_100156B50);
  id v28 = [self defaultCenter];
  if (qword_100154500 != -1) {
    swift_once();
  }
  uint64_t v29 = v46;
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v31 = v44;
  uint64_t v30 = v45;
  uint64_t v32 = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v48, v23, v45);
  uint64_t v33 = sub_100032FA0(&qword_100156BB0);
  uint64_t v34 = v47;
  uint64_t v35 = v49;
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v32 + *(int *)(v33 + 52), v29, v49);
  long long v36 = (void *)(v32 + *(int *)(v33 + 56));
  *long long v36 = CalculatorButtonRepresentable.id.getter;
  v36[1] = 0;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v23, v30);
}

uint64_t sub_100025574(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000255A0()
{
  unint64_t result = qword_100156B90;
  if (!qword_100156B90)
  {
    sub_1000317D8(&qword_100156B50);
    sub_100040BE4(&qword_100156B98, &qword_100156B48);
    sub_100040BE4(&qword_100156BA0, &qword_100156B80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156B90);
  }
  return result;
}

uint64_t sub_100025664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v68 = a3;
  uint64_t v73 = a2;
  uint64_t v80 = a4;
  uint64_t v10 = sub_100032FA0(&qword_1001590D0);
  __chkstk_darwin(v10 - 8);
  uint64_t v74 = (uint64_t *)((char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100032FA0(&qword_1001590D8);
  __chkstk_darwin(v12 - 8);
  uint64_t v76 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100032FA0(&qword_100159A80);
  uint64_t v14 = __chkstk_darwin(v78);
  uint64_t v77 = (uint64_t)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v79 = (uint64_t)&v67 - v16;
  uint64_t v17 = sub_100032FA0(&qword_1001568C0);
  __chkstk_darwin(v17 - 8);
  long long v67 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v67 - v21;
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v71 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v67 - v24;
  sub_1000317D8(&qword_1001557C0);
  uint64_t v69 = type metadata accessor for ModifiedContent();
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v26 = __chkstk_darwin(v69);
  uint64_t v75 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v67 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v81 = (uint64_t)&v67 - v32;
  uint64_t v33 = *(void (**)(uint64_t))a1;
  uint64_t v72 = *(void *)(a1 + 8);
  v33(v31);
  static Edge.Set.bottom.getter();
  v85[6] = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  uint64_t v35 = type metadata accessor for Font.Design();
  uint64_t v36 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v67, 1, 1, v35);
  static Font.system(size:weight:design:)();
  sub_100032F44(v36, &qword_1001568C0);
  v85[4] = WitnessTable;
  v85[5] = &protocol witness table for _PaddingLayout;
  uint64_t v37 = swift_getWitnessTable();
  View.font(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v25, v23);
  uint64_t v38 = sub_100040BE4((unint64_t *)&qword_1001557B8, &qword_1001557C0);
  v85[2] = v37;
  v85[3] = v38;
  uint64_t v39 = v69;
  uint64_t v71 = swift_getWitnessTable();
  sub_10001BAFC((uint64_t)v30, v39, v81);
  uint64_t v40 = v70;
  unsigned __int8 v41 = *(void (**)(char *, uint64_t))(v70 + 8);
  v41(v30, v39);
  uint64_t v42 = static HorizontalAlignment.trailing.getter();
  sub_10002AB40();
  uint64_t v43 = v74;
  *uint64_t v74 = v42;
  v43[1] = v44;
  *((unsigned char *)v43 + 16) = 0;
  uint64_t v45 = (uint64_t)v43;
  uint64_t v46 = sub_100032FA0(&qword_100159A88);
  uint64_t v47 = v73;
  uint64_t v48 = v68;
  sub_100026368(a1, v73, v68, v45 + *(int *)(v46 + 44), a5, a6);
  sub_1000273A0();
  double v50 = v49;
  uint64_t v51 = static Alignment.bottom.getter();
  uint64_t v52 = v76;
  sub_1000260C0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v76, 0.0, 1, v50, 0, v51, v53);
  sub_100032F44(v45, &qword_1001590D0);
  uint64_t v89 = *(void *)(a1 + 16);
  char v90 = *(unsigned char *)(a1 + 24);
  uint64_t v54 = *(void *)(a1 + 32);
  char v88 = *(unsigned char *)(a1 + 40);
  uint64_t v86 = *(void *)(a1 + 48);
  uint64_t v87 = v54;
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = v47;
  *(void *)(v55 + 24) = v48;
  long long v56 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v55 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v55 + 80) = v56;
  *(unsigned char *)(v55 + 96) = *(unsigned char *)(a1 + 64);
  long long v57 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v55 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v55 + 48) = v57;
  uint64_t v58 = v52;
  uint64_t v59 = v52;
  uint64_t v60 = v77;
  sub_100033344(v58, v77, &qword_1001590D8);
  uint64_t v61 = v78;
  long long v62 = (void *)(v60 + *(int *)(v78 + 36));
  *long long v62 = 0;
  v62[1] = 0;
  v62[2] = sub_1000EAA8C;
  v62[3] = v55;
  swift_retain();
  sub_100025ED0((uint64_t)&v89);
  sub_100025ED0((uint64_t)&v87);
  sub_100025ED0((uint64_t)&v86);
  swift_retain();
  sub_100032F44(v59, &qword_1001590D8);
  uint64_t v63 = v79;
  sub_10002D9D0(v60, v79, &qword_100159A80);
  long long v64 = v75;
  uint64_t v65 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v75, v81, v39);
  v85[0] = v64;
  sub_100033344(v63, v60, &qword_100159A80);
  v85[1] = v60;
  v84[0] = v39;
  v84[1] = v61;
  uint64_t v82 = v71;
  unint64_t v83 = sub_1000262EC();
  sub_100025EFC((uint64_t)v85, 2uLL, (uint64_t)v84);
  sub_100032F44(v63, &qword_100159A80);
  v41((char *)v65, v39);
  sub_100032F44(v60, &qword_100159A80);
  return ((uint64_t (*)(char *, uint64_t))v41)(v64, v39);
}

uint64_t sub_100025ED0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100025EFC(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata);
    uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        uint64_t v16 = &v8[8 * v9];
        uint64_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

double sub_1000260C0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10002611C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001590D0, &qword_1001590D8).n128_u64[0];
  return result;
}

__n128 sub_10002611C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_100033344(v17, a9, a16);
  uint64_t v29 = (_OWORD *)(a9 + *(int *)(sub_100032FA0(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *uint64_t v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

unint64_t sub_1000262EC()
{
  unint64_t result = qword_100159A90;
  if (!qword_100159A90)
  {
    sub_1000317D8(&qword_100159A80);
    sub_10003AB88();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159A90);
  }
  return result;
}

uint64_t sub_100026368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v119 = a3;
  uint64_t v117 = a2;
  uint64_t v115 = a4;
  uint64_t v112 = sub_100032FA0(&qword_100159AA8);
  uint64_t v110 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v109 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_100032FA0(&qword_100159AB0);
  uint64_t v10 = __chkstk_darwin(v111);
  uint64_t v113 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int v104 = (char *)&v93 - v12;
  uint64_t v103 = sub_100032FA0(&qword_100159AB8);
  uint64_t v13 = __chkstk_darwin(v103);
  uint64_t v106 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v114 = (uint64_t)&v93 - v16;
  __chkstk_darwin(v15);
  long long v105 = (char *)&v93 - v17;
  uint64_t v18 = sub_100032FA0(&qword_100159AC0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v116 = *(void *)(v118 - 8);
  uint64_t v21 = __chkstk_darwin(v118);
  uint64_t v107 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v93 - v23;
  uint64_t v98 = sub_100032FA0(&qword_100159AC8);
  uint64_t v96 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v95 = (char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100032FA0(&qword_100159AD0);
  uint64_t v26 = __chkstk_darwin(v97);
  uint64_t v99 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  int v101 = (char *)&v93 - v28;
  uint64_t v29 = sub_100032FA0(&qword_100159AD8);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v100 = (uint64_t)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v102 = (uint64_t)&v93 - v32;
  uint64_t v33 = sub_100032FA0(&qword_100159AE0);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v108 = (uint64_t)&v93 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  long long v37 = (char *)&v93 - v36;
  char v38 = *(unsigned char *)(a1 + 24);
  uint64_t v39 = swift_retain();
  uint64_t v40 = sub_100033AA8(v39, v38);
  swift_release();
  unsigned __int8 v41 = *(unsigned __int8 **)(v40 + 16);
  swift_retain();
  swift_release();
  swift_getKeyPath();
  uint64_t v120 = (uint64_t)v41;
  sub_1000332B4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v42 = v41[41];
  swift_release();
  if (v42 == 1)
  {
    uint64_t v94 = v37;
    uint64_t v43 = *(void *)(a1 + 32);
    char v144 = *(unsigned char *)(a1 + 40);
    uint64_t v142 = *(void *)(a1 + 48);
    uint64_t v143 = v43;
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v119;
    *(void *)(v44 + 16) = v117;
    *(void *)(v44 + 24) = v45;
    long long v46 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v44 + 64) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v44 + 80) = v46;
    *(unsigned char *)(v44 + 96) = *(unsigned char *)(a1 + 64);
    long long v47 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v44 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v44 + 48) = v47;
    *(double *)(v44 + 104) = a5;
    swift_retain();
    swift_retain();
    sub_100025ED0((uint64_t)&v143);
    sub_100025ED0((uint64_t)&v142);
    swift_retain();
    static Alignment.bottomTrailing.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v120 = (uint64_t)sub_1000EAAB8;
    unint64_t v121 = v44;
    uint64_t v122 = sub_10001BABC;
    uint64_t v123 = 0;
    uint64_t v124 = v129;
    char v125 = v130;
    uint64_t v126 = v131;
    char v127 = v132;
    long long v128 = v133;
    int v48 = _AXSAutomationEnabled();
    uint64_t v93 = v18;
    if (v48) {
      static AccessibilityChildBehavior.contain.getter();
    }
    else {
      static AccessibilityChildBehavior.ignore.getter();
    }
    uint64_t v54 = sub_100032FA0(&qword_100159B00);
    unint64_t v55 = sub_10003B180();
    long long v56 = v95;
    View.accessibilityElement(children:)();
    (*(void (**)(char *, uint64_t))(v116 + 8))(v24, v118);
    swift_release();
    swift_release();
    uint64_t v120 = v54;
    unint64_t v121 = v55;
    swift_getOpaqueTypeConformance2();
    uint64_t v57 = (uint64_t)v99;
    uint64_t v58 = v98;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v56, v58);
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v59 = (uint64_t)v101;
    ModifiedContent<>.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100032F44(v57, &qword_100159AD0);
    type metadata accessor for CalculatorViewModel();
    sub_1000332B4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    uint64_t v60 = Environment.init<A>(_:)();
    char v62 = v61;
    uint64_t v63 = v100;
    sub_100033344(v59, v100, &qword_100159AD0);
    uint64_t v64 = v63 + *(int *)(v29 + 36);
    *(void *)uint64_t v64 = v60;
    *(unsigned char *)(v64 + 8) = v62 & 1;
    *(unsigned char *)(v64 + 9) = 0;
    sub_100032F44(v59, &qword_100159AD0);
    uint64_t v65 = v63;
    uint64_t v66 = v102;
    sub_10002D9D0(v65, v102, &qword_100159AD8);
    sub_100033344(v66, (uint64_t)v20, &qword_100159AD8);
    swift_storeEnumTagMultiPayload();
    sub_100032FA0(&qword_100159AE8);
    sub_1000271E4();
    sub_100027260();
    long long v37 = v94;
    _ConditionalContent<>.init(storage:)();
    sub_100032F44(v66, &qword_100159AD8);
  }
  else
  {
    uint64_t v49 = static HorizontalAlignment.center.getter();
    static Alignment.bottomTrailing.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v50 = v129;
    char v51 = v130;
    uint64_t v52 = v131;
    char v53 = v132;
    *(void *)uint64_t v20 = v49;
    *((void *)v20 + 1) = 0;
    v20[16] = 1;
    *((void *)v20 + 3) = v50;
    v20[32] = v51;
    *((void *)v20 + 5) = v52;
    v20[48] = v53;
    *(_OWORD *)(v20 + 56) = v133;
    swift_storeEnumTagMultiPayload();
    sub_100032FA0(&qword_100159AE8);
    sub_1000271E4();
    sub_100027260();
    _ConditionalContent<>.init(storage:)();
  }
  uint64_t v67 = v119;
  uint64_t v68 = v117;
  uint64_t v69 = *(void *)(a1 + 32);
  char v141 = *(unsigned char *)(a1 + 40);
  uint64_t v139 = *(void *)(a1 + 48);
  uint64_t v140 = v69;
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = v68;
  *(void *)(v70 + 24) = v67;
  long long v71 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v70 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v70 + 80) = v71;
  *(unsigned char *)(v70 + 96) = *(unsigned char *)(a1 + 64);
  long long v72 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v70 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v70 + 48) = v72;
  *(double *)(v70 + 104) = a6;
  swift_retain();
  swift_retain();
  sub_100025ED0((uint64_t)&v140);
  sub_100025ED0((uint64_t)&v139);
  swift_retain();
  static Alignment.bottom.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v120 = (uint64_t)sub_10001BB00;
  unint64_t v121 = v70;
  uint64_t v122 = sub_10001BABC;
  uint64_t v123 = 0;
  uint64_t v124 = v134;
  char v125 = v135;
  uint64_t v126 = v136;
  char v127 = v137;
  long long v128 = v138;
  int v73 = _AXSAutomationEnabled();
  uint64_t v74 = v107;
  uint64_t v75 = (uint64_t)v37;
  if (v73) {
    static AccessibilityChildBehavior.contain.getter();
  }
  else {
    static AccessibilityChildBehavior.ignore.getter();
  }
  uint64_t v76 = (uint64_t)v106;
  uint64_t v77 = (uint64_t)v105;
  uint64_t v78 = (uint64_t)v104;
  uint64_t v79 = v103;
  uint64_t v80 = sub_100032FA0(&qword_100159B30);
  unint64_t v81 = sub_100027300();
  uint64_t v82 = v109;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v74, v118);
  swift_release();
  swift_release();
  uint64_t v120 = v80;
  unint64_t v121 = v81;
  swift_getOpaqueTypeConformance2();
  uint64_t v83 = (uint64_t)v113;
  uint64_t v84 = v112;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v82, v84);
  LocalizedStringKey.init(stringLiteral:)();
  ModifiedContent<>.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100032F44(v83, &qword_100159AB0);
  type metadata accessor for CalculatorViewModel();
  sub_1000332B4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v85 = Environment.init<A>(_:)();
  LOBYTE(v81) = v86;
  uint64_t v87 = v114;
  sub_100033344(v78, v114, &qword_100159AB0);
  uint64_t v88 = v87 + *(int *)(v79 + 36);
  *(void *)uint64_t v88 = v85;
  *(unsigned char *)(v88 + 8) = v81 & 1;
  *(unsigned char *)(v88 + 9) = 1;
  sub_100032F44(v78, &qword_100159AB0);
  sub_10002D9D0(v87, v77, &qword_100159AB8);
  uint64_t v89 = v108;
  sub_100033344(v75, v108, &qword_100159AE0);
  sub_100033344(v77, v76, &qword_100159AB8);
  uint64_t v90 = v115;
  sub_100033344(v89, v115, &qword_100159AE0);
  uint64_t v91 = sub_100032FA0(&qword_100159B50);
  sub_100033344(v76, v90 + *(int *)(v91 + 48), &qword_100159AB8);
  sub_100032F44(v77, &qword_100159AB8);
  sub_100032F44(v75, &qword_100159AE0);
  sub_100032F44(v76, &qword_100159AB8);
  return sub_100032F44(v89, &qword_100159AE0);
}

unint64_t sub_1000271E4()
{
  unint64_t result = qword_100159AF0;
  if (!qword_100159AF0)
  {
    sub_1000317D8(&qword_100159AD8);
    sub_1000079AC();
    sub_10003BBB0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159AF0);
  }
  return result;
}

unint64_t sub_100027260()
{
  unint64_t result = qword_100159B28;
  if (!qword_100159B28)
  {
    sub_1000317D8(&qword_100159AE8);
    sub_100040BE4(&qword_100157578, &qword_100157580);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159B28);
  }
  return result;
}

unint64_t sub_100027300()
{
  unint64_t result = qword_100159B38;
  if (!qword_100159B38)
  {
    sub_1000317D8(&qword_100159B30);
    sub_100040BE4(&qword_100159B40, &qword_100159B48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159B38);
  }
  return result;
}

uint64_t sub_1000273A0()
{
  char v1 = *(unsigned char *)(v0 + 40);
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_10002BD88(v2, v1);
  swift_release();
  char v4 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = swift_retain();
  uint64_t v6 = sub_100033AA8(v5, v4);
  swift_release();
  swift_getKeyPath();
  sub_1000332B4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = *(unsigned __int8 *)(v6 + 48);
  swift_release();
  char v8 = 1;
  switch(v7)
  {
    case 1:
    case 2:
    case 3:
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  sub_10002B26C(v3, v8 & 1);
  sub_1000298D0();
  return swift_release();
}

uint64_t sub_100027590@<X0>(uint64_t a1@<X8>)
{
  return sub_1000275AC(a1);
}

uint64_t sub_1000275AC@<X0>(uint64_t a1@<X8>)
{
  sub_100028130(a1);
  uint64_t v2 = sub_100032FA0(&qword_100156C30);
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

uint64_t sub_100027624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v61 = sub_100032FA0(&qword_100156BB8);
  __chkstk_darwin(v61);
  uint64_t v60 = (void *)((char *)v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = sub_100032FA0(&qword_100156BC0);
  __chkstk_darwin(v59);
  uint64_t v5 = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100032FA0(&qword_100156BC8);
  __chkstk_darwin(v62);
  uint64_t v58 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_100156BD0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_100156BD8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v57 = (uint64_t)v56 - v14;
  char v15 = *(unsigned char *)(a1 + 8);
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_100033AA8(v16, v15);
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v69 = v17;
  v56[2] = sub_1000330BC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v18 = *(unsigned __int8 *)(v17 + 49);
  swift_release();
  if (v18 == 1)
  {
    long long v69 = *(_OWORD *)(a1 + 32);
    char v70 = *(unsigned char *)(a1 + 48);
    long long v64 = *(_OWORD *)(a1 + 32);
    char v65 = *(unsigned char *)(a1 + 48);
    sub_100032FA0(&qword_100156B68);
    FocusState.projectedValue.getter();
    uint64_t v19 = v66;
    uint64_t v20 = v67;
    char v21 = v68;
    uint64_t v66 = *(void *)(a1 + 16);
    LOBYTE(v67) = *(unsigned char *)(a1 + 24);
    uint64_t v22 = swift_allocObject();
    long long v23 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v22 + 32) = v23;
    *(_OWORD *)(v22 + 48) = *(_OWORD *)(a1 + 32);
    *(unsigned char *)(v22 + 64) = *(unsigned char *)(a1 + 48);
    swift_retain();
    sub_100025ED0((uint64_t)&v66);
    sub_100025574((uint64_t)&v69);
    sub_100091FA8(v19, v20, v21, (uint64_t)sub_10002758C, v22, (uint64_t)v9);
    sub_100033344((uint64_t)v9, (uint64_t)v13, &qword_100156BD0);
    v13[*(int *)(v10 + 36)] = 1;
    sub_100032F44((uint64_t)v9, &qword_100156BD0);
    uint64_t v24 = (uint64_t)v13;
    uint64_t v25 = v57;
    sub_10002D9D0(v24, v57, &qword_100156BD8);
    sub_100033344(v25, (uint64_t)v5, &qword_100156BD8);
    swift_storeEnumTagMultiPayload();
    sub_100032FA0(&qword_100156C10);
    sub_10003B39C();
    sub_100040BE4(&qword_100156C08, &qword_100156C10);
    uint64_t v26 = (uint64_t)v58;
    _ConditionalContent<>.init(storage:)();
    sub_100033344(v26, (uint64_t)v60, &qword_100156BC8);
    swift_storeEnumTagMultiPayload();
    sub_100032FA0(&qword_100156BE0);
    sub_100027FF0();
    sub_100028090();
    _ConditionalContent<>.init(storage:)();
    sub_100032F44(v26, &qword_100156BC8);
    return sub_100032F44(v25, &qword_100156BD8);
  }
  else
  {
    uint64_t v57 = v10;
    uint64_t v28 = v5;
    uint64_t v29 = swift_retain();
    uint64_t v30 = sub_100033AA8(v29, v15);
    swift_release();
    uint64_t v31 = *(void *)(v30 + 16);
    swift_getKeyPath();
    *(void *)&long long v69 = v31;
    sub_1000330BC(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    uint64_t v32 = CalculateExpression.format.getter();
    swift_release();
    swift_release();
    uint64_t v33 = (uint64_t *)(a1 + 16);
    long long v69 = *(_OWORD *)(a1 + 32);
    char v70 = *(unsigned char *)(a1 + 48);
    long long v64 = *(_OWORD *)(a1 + 32);
    char v65 = *(unsigned char *)(a1 + 48);
    sub_100032FA0(&qword_100156B68);
    FocusState.projectedValue.getter();
    if (v32 == 2)
    {
      uint64_t v35 = v66;
      uint64_t v34 = v67;
      char v36 = v68;
      uint64_t v66 = *v33;
      LOBYTE(v67) = *(unsigned char *)(a1 + 24);
      uint64_t v37 = swift_allocObject();
      long long v38 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v37 + 16) = *(_OWORD *)a1;
      *(_OWORD *)(v37 + 32) = v38;
      *(_OWORD *)(v37 + 48) = *(_OWORD *)(a1 + 32);
      *(unsigned char *)(v37 + 64) = *(unsigned char *)(a1 + 48);
      type metadata accessor for CalculatorViewModel();
      swift_retain();
      sub_100025ED0((uint64_t)&v66);
      sub_100025574((uint64_t)&v69);
      uint64_t v39 = Environment.init<A>(_:)();
      char v41 = v40;
      type metadata accessor for CalculatorLayout();
      sub_1000330BC((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
      uint64_t v42 = Environment.init<A>(_:)();
      *(void *)uint64_t v28 = sub_100027590;
      *((void *)v28 + 1) = v37;
      *((void *)v28 + 2) = v39;
      v28[24] = v41 & 1;
      *((void *)v28 + 4) = v42;
      v28[40] = v43 & 1;
      v56[1] = v35;
      *((void *)v28 + 6) = v35;
      *((void *)v28 + 7) = v34;
      v28[64] = v36;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100032FA0(&qword_100156C10);
      sub_10003B39C();
      sub_100040BE4(&qword_100156C08, &qword_100156C10);
      uint64_t v44 = (uint64_t)v58;
      _ConditionalContent<>.init(storage:)();
      sub_100033344(v44, (uint64_t)v60, &qword_100156BC8);
      swift_storeEnumTagMultiPayload();
      sub_100032FA0(&qword_100156BE0);
      sub_100027FF0();
      sub_100028090();
      _ConditionalContent<>.init(storage:)();
      sub_100032F44(v44, &qword_100156BC8);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    else
    {
      uint64_t v45 = v66;
      uint64_t v46 = v67;
      char v47 = v68;
      uint64_t v66 = *v33;
      LOBYTE(v67) = *(unsigned char *)(a1 + 24);
      uint64_t v48 = swift_allocObject();
      long long v49 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v48 + 16) = *(_OWORD *)a1;
      *(_OWORD *)(v48 + 32) = v49;
      *(_OWORD *)(v48 + 48) = *(_OWORD *)(a1 + 32);
      *(unsigned char *)(v48 + 64) = *(unsigned char *)(a1 + 48);
      type metadata accessor for CalculatorViewModel();
      swift_retain();
      sub_100025ED0((uint64_t)&v66);
      sub_100025574((uint64_t)&v69);
      uint64_t v50 = Environment.init<A>(_:)();
      char v52 = v51;
      type metadata accessor for CalculatorLayout();
      sub_1000330BC((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
      uint64_t v53 = Environment.init<A>(_:)();
      uint64_t v54 = v60;
      *uint64_t v60 = sub_10002758C;
      v54[1] = v48;
      v54[2] = v50;
      *((unsigned char *)v54 + 24) = v52 & 1;
      v54[4] = v53;
      *((unsigned char *)v54 + 40) = v55 & 1;
      v54[6] = v45;
      v54[7] = v46;
      *((unsigned char *)v54 + 64) = v47;
      *((unsigned char *)v54 + 65) = 0;
      swift_storeEnumTagMultiPayload();
      sub_100032FA0(&qword_100156BE0);
      sub_100027FF0();
      sub_100028090();
      return _ConditionalContent<>.init(storage:)();
    }
  }
}

uint64_t type metadata accessor for CalculatorLayout()
{
  uint64_t result = qword_100154988;
  if (!qword_100154988) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100027FF0()
{
  unint64_t result = qword_100156BE8;
  if (!qword_100156BE8)
  {
    sub_1000317D8(&qword_100156BC8);
    sub_10003B39C();
    sub_100040BE4(&qword_100156C08, &qword_100156C10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156BE8);
  }
  return result;
}

unint64_t sub_100028090()
{
  unint64_t result = qword_100156C18;
  if (!qword_100156C18)
  {
    sub_1000317D8(&qword_100156BE0);
    sub_100040BE4(&qword_100156C20, &qword_100156C28);
    sub_10003BFE4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156C18);
  }
  return result;
}

uint64_t sub_100028130@<X0>(uint64_t a1@<X8>)
{
  uint64_t v77 = a1;
  uint64_t v76 = sub_100032FA0(&qword_100156C38);
  __chkstk_darwin(v76);
  uint64_t v3 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100032FA0(&qword_100156C40);
  __chkstk_darwin(v74);
  uint64_t v75 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100032FA0(&qword_100156C48);
  __chkstk_darwin(v68);
  uint64_t v70 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100032FA0(&qword_100156C50);
  uint64_t v6 = __chkstk_darwin(v69);
  uint64_t v66 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v65 - v8;
  uint64_t v73 = sub_100032FA0(&qword_100156C58);
  uint64_t v10 = __chkstk_darwin(v73);
  long long v71 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v72 = (char *)&v65 - v12;
  uint64_t v67 = v1;
  char v13 = *(unsigned char *)(v1 + 8);
  uint64_t v14 = swift_retain();
  uint64_t v15 = sub_100033AA8(v14, v13);
  swift_release();
  swift_getKeyPath();
  uint64_t v78 = v15;
  sub_1000330BC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v16 = *(unsigned __int8 *)(v15 + 48);
  swift_release();
  switch(v16)
  {
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    default:
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_6:
        uint64_t v21 = swift_retain();
        uint64_t v22 = sub_100033AA8(v21, v13);
        swift_release();
        swift_getKeyPath();
        uint64_t v78 = v22;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        int v23 = *(unsigned __int8 *)(v22 + 65);
        swift_release();
        if (v23 == 1)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
          {
            uint64_t v33 = swift_retain();
            uint64_t v34 = sub_100033AA8(v33, v13);
            swift_release();
            swift_getKeyPath();
            uint64_t v78 = v34;
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            unsigned int v35 = *(unsigned __int8 *)(v34 + 65);
            swift_release();
            if (v35 > 1)
            {
              swift_bridgeObjectRelease();
              uint64_t v38 = (uint64_t)v72;
              uint64_t v49 = (uint64_t)v66;
            }
            else
            {
              uint64_t v38 = (uint64_t)v72;
              uint64_t v49 = (uint64_t)v66;
              char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v50 & 1) == 0)
              {
                uint64_t v51 = sub_100032FA0(&qword_100156C78);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v38, 1, 1, v51);
                uint64_t v37 = v75;
LABEL_32:
                char v47 = &qword_100156C58;
                sub_100033344(v38, v37, &qword_100156C58);
                swift_storeEnumTagMultiPayload();
                sub_100028FAC(&qword_100156C68, &qword_100156C58, (void (*)(void))sub_10003985C);
                sub_100028FAC(&qword_100156D08, &qword_100156C38, (void (*)(void))sub_100039E10);
                _ConditionalContent<>.init(storage:)();
                uint64_t v48 = v38;
                return sub_100032F44(v48, v47);
              }
            }
            uint64_t v52 = swift_retain();
            uint64_t v53 = sub_100033AA8(v52, v13);
            swift_release();
            uint64_t v54 = *(void *)(v53 + 16);
            swift_retain();
            swift_release();
            swift_getKeyPath();
            uint64_t v78 = v54;
            sub_1000330BC(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            swift_retain();
            swift_release();
            uint64_t v55 = CalculateExpression.unicode.getter();
            unint64_t v57 = v56;
            swift_release();
            uint64_t v58 = HIBYTE(v57) & 0xF;
            if ((v57 & 0x2000000000000000) == 0) {
              uint64_t v58 = v55 & 0xFFFFFFFFFFFFLL;
            }
            if (v58)
            {
              swift_bridgeObjectRetain();
              sub_1000921B0(1, v55, v57, 0x2065646F63696E55, v49);
              swift_bridgeObjectRelease();
              uint64_t v59 = sub_100032FA0(&qword_100156C90);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v49, 0, 1, v59);
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v61 = sub_100032FA0(&qword_100156C90);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v49, 1, 1, v61);
            }
            uint64_t v37 = v75;
            sub_100033344(v49, v70, &qword_100156C50);
            swift_storeEnumTagMultiPayload();
            sub_100028FAC(&qword_100156C80, &qword_100156C50, (void (*)(void))sub_100039D70);
            uint64_t v62 = v71;
            _ConditionalContent<>.init(storage:)();
            sub_100032F44(v49, &qword_100156C50);
            uint64_t v63 = sub_100032FA0(&qword_100156C78);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
            uint64_t v41 = (uint64_t)v62;
LABEL_31:
            sub_10002D9D0(v41, v38, &qword_100156C58);
            goto LABEL_32;
          }
        }
        uint64_t v25 = swift_retain();
        uint64_t v26 = sub_100033AA8(v25, v13);
        swift_release();
        uint64_t v27 = *(void *)(v26 + 16);
        swift_retain();
        swift_release();
        swift_getKeyPath();
        uint64_t v78 = v27;
        sub_1000330BC(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_retain();
        swift_release();
        uint64_t v28 = CalculateExpression.ascii.getter();
        unint64_t v30 = v29;
        swift_release();
        uint64_t v31 = HIBYTE(v30) & 0xF;
        if ((v30 & 0x2000000000000000) == 0) {
          uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
        }
        if (v31)
        {
          swift_bridgeObjectRetain();
          sub_1000921B0(1, v28, v30, 0x6176204949435341, (uint64_t)v9);
          swift_bridgeObjectRelease();
          uint64_t v32 = sub_100032FA0(&qword_100156C90);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v9, 0, 1, v32);
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v36 = sub_100032FA0(&qword_100156C90);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v9, 1, 1, v36);
        }
        uint64_t v37 = v75;
        uint64_t v38 = (uint64_t)v72;
        sub_100033344((uint64_t)v9, v70, &qword_100156C50);
        swift_storeEnumTagMultiPayload();
        sub_100028FAC(&qword_100156C80, &qword_100156C50, (void (*)(void))sub_100039D70);
        uint64_t v39 = v71;
        _ConditionalContent<>.init(storage:)();
        sub_100032F44((uint64_t)v9, &qword_100156C50);
        uint64_t v40 = sub_100032FA0(&qword_100156C78);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
        uint64_t v41 = (uint64_t)v39;
        goto LABEL_31;
      }
      uint64_t v18 = swift_retain();
      uint64_t v19 = sub_100033AA8(v18, v13);
      swift_release();
      swift_getKeyPath();
      uint64_t v78 = v19;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v20 = *(unsigned __int8 *)(v19 + 48);
      swift_release();
      switch(v20)
      {
        case 1:
        case 2:
        case 3:
          char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v42) {
            goto LABEL_19;
          }
          uint64_t v43 = swift_retain();
          uint64_t v44 = sub_100033AA8(v43, v13);
          swift_release();
          uint64_t v45 = *(void *)(v44 + 16);
          swift_retain();
          swift_release();
          swift_getKeyPath();
          uint64_t v78 = v45;
          sub_1000330BC(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          swift_retain();
          swift_release();
          LOBYTE(v45) = CalculateExpression.assumeDegrees.getter();
          swift_release();
          if (v45) {
            goto LABEL_19;
          }
          sub_100092988(0, (uint64_t)v3);
          uint64_t v60 = sub_100032FA0(&qword_100156C60);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v3, 0, 1, v60);
          break;
        default:
          swift_bridgeObjectRelease();
LABEL_19:
          uint64_t v46 = sub_100032FA0(&qword_100156C60);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v3, 1, 1, v46);
          break;
      }
      char v47 = &qword_100156C38;
      sub_100033344((uint64_t)v3, v75, &qword_100156C38);
      swift_storeEnumTagMultiPayload();
      sub_100028FAC(&qword_100156C68, &qword_100156C58, (void (*)(void))sub_10003985C);
      sub_100028FAC(&qword_100156D08, &qword_100156C38, (void (*)(void))sub_100039E10);
      _ConditionalContent<>.init(storage:)();
      uint64_t v48 = (uint64_t)v3;
      return sub_100032F44(v48, v47);
  }
}

uint64_t sub_100028FAC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100029018(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(&qword_100156B88);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100029088@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v56 = a1;
  uint64_t v55 = sub_100032FA0(&qword_100157660);
  __chkstk_darwin(v55);
  uint64_t v44 = (uint64_t *)((char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v52 = sub_100032FA0(&qword_1001576B0);
  __chkstk_darwin(v52);
  uint64_t v54 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100032FA0(&qword_100157620);
  __chkstk_darwin(v53);
  uint64_t v43 = (uint64_t *)((char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (long long *)(v1 + 56);
  long long v58 = *(_OWORD *)(v1 + 56);
  uint64_t v7 = sub_100032FA0(&qword_100157600);
  State.wrappedValue.getter();
  uint64_t v8 = v59;
  swift_getKeyPath();
  *(void *)&long long v58 = v8;
  uint64_t v57 = sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v9 = *(unsigned __int8 *)(v8 + 16);
  swift_release();
  int v10 = 1;
  switch(v9)
  {
    case 1:
      break;
    default:
      int v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  int v49 = v10;
  swift_bridgeObjectRelease();
  long long v58 = *v6;
  State.wrappedValue.getter();
  uint64_t v11 = v59;
  uint64_t v12 = *(void *)(v2 + 32);
  int v13 = *(unsigned __int8 *)(v2 + 40);
  uint64_t v14 = swift_retain();
  int v50 = v13;
  uint64_t v48 = sub_10002BD88(v14, v13);
  swift_release();
  uint64_t v45 = v7;
  uint64_t v15 = v6;
  uint64_t v16 = *(void *)v2;
  char v17 = *(unsigned char *)(v2 + 8);
  uint64_t v18 = swift_retain();
  uint64_t v47 = sub_100033AA8(v18, v17);
  uint64_t v19 = sub_100033AA8(v16, v17);
  swift_release();
  uint64_t v20 = *(void *)(v19 + 16);
  swift_getKeyPath();
  *(void *)&long long v58 = v20;
  sub_100033194(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  uint64_t v21 = CalculateExpression.format.getter();
  swift_release();
  swift_release();
  long long v58 = *v15;
  State.wrappedValue.getter();
  uint64_t v22 = v59;
  swift_getKeyPath();
  *(void *)&long long v58 = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v23 = *(unsigned __int8 *)(v22 + 16);
  swift_release();
  uint64_t v51 = v2;
  uint64_t v46 = v12;
  switch(v23)
  {
    case 1:
    case 2:
    case 3:
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v25 = 0;
      if (v24) {
        goto LABEL_6;
      }
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v26 = swift_retain();
      uint64_t v27 = sub_100033AA8(v26, v17);
      swift_release();
      swift_getKeyPath();
      *(void *)&long long v58 = v27;
      sub_100033194((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v28 = *(id *)(v27 + 40);
      swift_release();
      swift_getKeyPath();
      *(void *)&long long v58 = v28;
      sub_100033194((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      char v25 = v28[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced];

      break;
  }
  char v29 = v21 == 2;
  swift_getKeyPath();
  *(void *)&long long v58 = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v30 = *(unsigned char *)(v11 + 17);
  uint64_t v31 = v47;
  sub_100034264();
  swift_retain();
  char v32 = CalculateExpression.assumeDegrees.getter();
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v58 = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v33 = *(unsigned char *)(v11 + 18);
  uint64_t v34 = sub_10002A854(v31);
  char v35 = v49 & 1;
  uint64_t v36 = sub_100029A80(v48, v30, v32 & 1, v29, v33, v25, (uint64_t)v34, v49 & 1);
  uint64_t v38 = v37;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v39 = swift_retain();
  sub_10002BD88(v39, v50);
  swift_release();
  LOBYTE(v31) = sub_1000298D0();
  swift_release();
  if (v31)
  {
    uint64_t v40 = v44;
    sub_10002C140((uint64_t)v36, v38, v35, (uint64_t)v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v41 = &qword_100157660;
    sub_100033344((uint64_t)v40, v54, &qword_100157660);
  }
  else
  {
    uint64_t v40 = v43;
    sub_10009DBCC((uint64_t)v36, v38, v35, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v41 = &qword_100157620;
    sub_100033344((uint64_t)v40, v54, &qword_100157620);
  }
  swift_storeEnumTagMultiPayload();
  sub_1000299E0();
  sub_100040BE4(&qword_100157658, &qword_100157660);
  _ConditionalContent<>.init(storage:)();
  return sub_100032F44((uint64_t)v40, v41);
}

uint64_t sub_1000298D0()
{
  uint64_t v0 = self;
  id v1 = [v0 currentDevice];
  id v2 = [v1 userInterfaceIdiom];

  if (v2)
  {
    double v3 = sub_10002B2E8((uint64_t)&unk_10010DC10, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, (uint64_t)&unk_10010DC60, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
    return v3 / sub_10002B3E4() < 0.9;
  }
  else
  {
    id v5 = [v0 currentDevice];
    id v6 = [v5 userInterfaceIdiom];

    if (v6)
    {
      return 0;
    }
    else
    {
      return sub_10002ACD8();
    }
  }
}

unint64_t sub_1000299E0()
{
  unint64_t result = qword_100157618;
  if (!qword_100157618)
  {
    sub_1000317D8(&qword_100157620);
    sub_100040BE4(&qword_100157628, &qword_100157630);
    sub_100038E04();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157618);
  }
  return result;
}

void *sub_100029A80(uint64_t a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7, char a8)
{
  if (!a1)
  {
    if (a8) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
  char v13 = sub_1000298D0();
  if ((a8 & 1) == 0)
  {
    swift_retain();
    double v18 = sub_10002B248();
    if (v18 / sub_10002B3E4() > 0.9)
    {
      if (qword_100154680 != -1) {
        swift_once();
      }
      uint64_t v14 = (void *)qword_100156E28;
      swift_bridgeObjectRetain();
      swift_release();
      goto LABEL_25;
    }
    swift_release();
LABEL_22:
    if (qword_100154678 != -1) {
      swift_once();
    }
    uint64_t v14 = off_100156E20;
    swift_bridgeObjectRetain();
LABEL_25:
    char v94 = 0;
    uint64_t v73 = &_swiftEmptyArrayStorage;
    int64_t v16 = v14[2];
    if (!v16)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      uint64_t v85 = &_swiftEmptyArrayStorage;
      goto LABEL_99;
    }
    goto LABEL_26;
  }
  if (v13)
  {
    if (qword_100154678 != -1) {
      swift_once();
    }
    uint64_t v14 = off_100156E20;
    uint64_t v15 = qword_100154690;
    swift_bridgeObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v73 = (void *)qword_100156E38;
    swift_bridgeObjectRetain();
    char v94 = 0;
    int64_t v16 = v14[2];
    if (!v16) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
LABEL_11:
  if (qword_100154670 != -1) {
    swift_once();
  }
  uint64_t v14 = off_100156E18;
  uint64_t v17 = qword_100154688;
  swift_bridgeObjectRetain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v73 = (void *)qword_100156E30;
  swift_bridgeObjectRetain();
  char v94 = 1;
  int64_t v16 = v14[2];
  if (!v16) {
    goto LABEL_16;
  }
LABEL_26:
  sub_10002A694(0, v16, 0);
  uint64_t v19 = 0;
  uint64_t v82 = (char *)(v14 + 4);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  char v71 = a4;
  char v90 = a4 & 1;
  if (a4) {
    int v21 = 55;
  }
  else {
    int v21 = 31;
  }
  unsigned int v78 = v21;
  if (a4) {
    int v22 = 55;
  }
  else {
    int v22 = 30;
  }
  if (a4) {
    int v23 = 30;
  }
  else {
    int v23 = 55;
  }
  unsigned int v74 = v23;
  unsigned int v76 = v22;
  uint64_t v24 = a7 + 56;
  char v88 = a5 & 1;
  char v87 = a6 & 1;
  int64_t v80 = v16;
  do
  {
    uint64_t v25 = *(void *)&v82[8 * v19];
    int64_t v26 = *(void *)(v25 + 16);
    if (!v26) {
      goto LABEL_95;
    }
    uint64_t v83 = v19;
    char v86 = v20;
    swift_bridgeObjectRetain();
    sub_10002A4F4(0, v26, 0);
    uint64_t v27 = 0;
    uint64_t v92 = v25 + 32;
    do
    {
      unsigned __int8 v28 = *(unsigned char *)(v92 + v27);
      unsigned int v29 = v28;
      if (a2)
      {
        unsigned int v29 = 56;
        switch(*(unsigned char *)(v92 + v27))
        {
          case 0x1E:
            unsigned int v29 = v76;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x1F:
            unsigned int v29 = v74;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x20:
            break;
          case 0x26:
            unsigned int v29 = 57;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x27:
            unsigned int v29 = 58;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x29:
            unsigned int v29 = 59;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x2A:
            unsigned int v29 = 60;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x2B:
            unsigned int v29 = 61;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x2F:
            unsigned int v29 = 62;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x30:
            unsigned int v29 = 63;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x31:
            unsigned int v29 = 64;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x37:
            unsigned int v29 = v78;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x38:
            unsigned int v29 = 32;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x39:
            unsigned int v29 = 38;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x3A:
            unsigned int v29 = 39;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x3B:
            unsigned int v29 = 41;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x3C:
            unsigned int v29 = 42;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x3D:
            unsigned int v29 = 43;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x3E:
            unsigned int v29 = 47;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          case 0x3F:
            unsigned int v29 = 48;
            break;
          case 0x40:
            unsigned int v29 = 49;
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
          default:
            unsigned int v29 = *(unsigned __int8 *)(v92 + v27);
            if (!*(void *)(a7 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_80;
        }
      }
      if (!*(void *)(a7 + 16))
      {
LABEL_90:
        BOOL v36 = 0;
        goto LABEL_91;
      }
LABEL_80:
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      Swift::Int v30 = Hasher._finalize()();
      uint64_t v31 = -1 << *(unsigned char *)(a7 + 32);
      unint64_t v32 = v30 & ~v31;
      if (((*(void *)(v24 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
        goto LABEL_90;
      }
      uint64_t v33 = *(void *)(a7 + 48);
      if (*(unsigned __int8 *)(v33 + v32) == v29) {
        goto LABEL_84;
      }
      uint64_t v34 = ~v31;
      unint64_t v35 = (v32 + 1) & v34;
      if (((*(void *)(v24 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
        goto LABEL_90;
      }
      if (*(unsigned __int8 *)(v33 + v35) == v29)
      {
LABEL_84:
        BOOL v36 = 1;
        goto LABEL_91;
      }
      unint64_t v37 = (v35 + 1) & v34;
      if (((*(void *)(v24 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0) {
        goto LABEL_90;
      }
      do
      {
        int v38 = *(unsigned __int8 *)(v33 + v37);
        BOOL v36 = v38 == v29;
        if (v38 == v29) {
          break;
        }
        unint64_t v37 = (v37 + 1) & v34;
      }
      while (((*(void *)(v24 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) != 0);
LABEL_91:
      unint64_t v40 = *((void *)&_swiftEmptyArrayStorage + 2);
      unint64_t v39 = *((void *)&_swiftEmptyArrayStorage + 3);
      if (v40 >= v39 >> 1) {
        sub_10002A4F4(v39 > 1, v40 + 1, 1);
      }
      *((void *)&_swiftEmptyArrayStorage + 2) = v40 + 1;
      uint64_t v41 = (char *)&_swiftEmptyArrayStorage + 8 * v40 - v40;
      v41[32] = v28;
      ++v27;
      v41[33] = a2 & 1;
      v41[34] = v90;
      v41[35] = v88;
      v41[36] = v87;
      v41[37] = v36;
      v41[38] = v94;
    }
    while (v27 != v26);
    swift_bridgeObjectRelease();
    uint64_t v19 = v83;
    uint64_t v20 = v86;
    int64_t v16 = v80;
LABEL_95:
    uint64_t v96 = v20;
    unint64_t v43 = v20[2];
    unint64_t v42 = v20[3];
    if (v43 >= v42 >> 1)
    {
      sub_10002A694(v42 > 1, v43 + 1, 1);
      uint64_t v20 = v96;
    }
    ++v19;
    v20[2] = v43 + 1;
    v20[v43 + 4] = &_swiftEmptyArrayStorage;
  }
  while (v19 != v16);
  uint64_t v85 = v20;
  swift_bridgeObjectRelease();
  a4 = v71;
LABEL_99:
  int64_t v44 = v73[2];
  if (!v44) {
    goto LABEL_159;
  }
  sub_10002A694(0, v44, 0);
  uint64_t v45 = 0;
  if (a3) {
    char v46 = 46;
  }
  else {
    char v46 = 54;
  }
  char v89 = a4 & 1;
  char v91 = v46;
  if (a4) {
    int v47 = 55;
  }
  else {
    int v47 = 31;
  }
  if (a4) {
    int v48 = 55;
  }
  else {
    int v48 = 30;
  }
  unsigned int v77 = v48;
  unsigned int v79 = v47;
  if (a4) {
    int v49 = 30;
  }
  else {
    int v49 = 55;
  }
  unsigned int v75 = v49;
  uint64_t v50 = a7 + 56;
  int64_t v81 = v44;
  while (2)
  {
    uint64_t v51 = v73[v45 + 4];
    int64_t v52 = *(void *)(v51 + 16);
    if (!v52) {
      goto LABEL_156;
    }
    uint64_t v84 = v45;
    swift_bridgeObjectRetain();
    sub_10002A4F4(0, v52, 0);
    uint64_t v53 = 0;
    uint64_t v93 = v51 + 32;
    while (2)
    {
      if (*(unsigned char *)(v93 + v53) == 46) {
        char v54 = v91;
      }
      else {
        char v54 = *(unsigned char *)(v93 + v53);
      }
      if (a2)
      {
        unsigned int v55 = 56;
        switch(*(unsigned char *)(v93 + v53))
        {
          case 0x1E:
            unsigned int v55 = v77;
            break;
          case 0x1F:
            unsigned int v55 = v75;
            break;
          case 0x20:
            goto LABEL_122;
          case 0x26:
            unsigned int v55 = 57;
            break;
          case 0x27:
            unsigned int v55 = 58;
            break;
          case 0x29:
            unsigned int v55 = 59;
            break;
          case 0x2A:
            unsigned int v55 = 60;
            break;
          case 0x2B:
            unsigned int v55 = 61;
            break;
          case 0x2F:
            unsigned int v55 = 62;
            break;
          case 0x30:
            unsigned int v55 = 63;
            break;
          case 0x31:
            unsigned int v55 = 64;
            break;
          case 0x37:
            unsigned int v55 = v79;
            break;
          case 0x38:
            unsigned int v55 = 32;
            break;
          case 0x39:
            unsigned int v55 = 38;
            break;
          case 0x3A:
            unsigned int v55 = 39;
            break;
          case 0x3B:
            unsigned int v55 = 41;
            break;
          case 0x3C:
            unsigned int v55 = 42;
            break;
          case 0x3D:
            unsigned int v55 = 43;
            break;
          case 0x3E:
            unsigned int v55 = 47;
            break;
          case 0x3F:
            unsigned int v55 = 48;
            break;
          case 0x40:
            unsigned int v55 = 49;
            break;
          default:
            goto LABEL_121;
        }
      }
      else
      {
LABEL_121:
        unsigned int v55 = *(unsigned __int8 *)(v93 + v53);
      }
      if (!*(void *)(a7 + 16)) {
        goto LABEL_132;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v55);
      Swift::Int v56 = Hasher._finalize()();
      uint64_t v57 = -1 << *(unsigned char *)(a7 + 32);
      unint64_t v58 = v56 & ~v57;
      if (((*(void *)(v50 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v58) & 1) == 0) {
        goto LABEL_132;
      }
      uint64_t v59 = *(void *)(a7 + 48);
      if (*(unsigned __int8 *)(v59 + v58) == v55) {
        goto LABEL_127;
      }
      uint64_t v60 = ~v57;
      unint64_t v61 = (v58 + 1) & v60;
      if (((*(void *)(v50 + ((v61 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v61) & 1) == 0) {
        goto LABEL_132;
      }
LABEL_122:
      if (*(unsigned __int8 *)(v59 + v61) == v55)
      {
LABEL_127:
        BOOL v62 = 1;
        goto LABEL_133;
      }
      unint64_t v63 = (v61 + 1) & v60;
      if ((*(void *)(v50 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63))
      {
        do
        {
          int v64 = *(unsigned __int8 *)(v59 + v63);
          BOOL v62 = v64 == v55;
          if (v64 == v55) {
            break;
          }
          unint64_t v63 = (v63 + 1) & v60;
        }
        while (((*(void *)(v50 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63) & 1) != 0);
      }
      else
      {
LABEL_132:
        BOOL v62 = 0;
      }
LABEL_133:
      unint64_t v66 = *((void *)&_swiftEmptyArrayStorage + 2);
      unint64_t v65 = *((void *)&_swiftEmptyArrayStorage + 3);
      if (v66 >= v65 >> 1) {
        sub_10002A4F4(v65 > 1, v66 + 1, 1);
      }
      *((void *)&_swiftEmptyArrayStorage + 2) = v66 + 1;
      uint64_t v67 = (char *)&_swiftEmptyArrayStorage + 8 * v66 - v66;
      unsigned char v67[32] = v54;
      ++v53;
      v67[33] = a2 & 1;
      v67[34] = v89;
      *(_WORD *)(v67 + 35) = 0;
      v67[37] = v62;
      v67[38] = v94;
      if (v53 != v52) {
        continue;
      }
      break;
    }
    swift_bridgeObjectRelease();
    int64_t v44 = v81;
    uint64_t v45 = v84;
LABEL_156:
    unint64_t v69 = *((void *)&_swiftEmptyArrayStorage + 2);
    unint64_t v68 = *((void *)&_swiftEmptyArrayStorage + 3);
    if (v69 >= v68 >> 1) {
      sub_10002A694(v68 > 1, v69 + 1, 1);
    }
    ++v45;
    *((void *)&_swiftEmptyArrayStorage + 2) = v69 + 1;
    *((void *)&_swiftEmptyArrayStorage + v69 + 4) = &_swiftEmptyArrayStorage;
    if (v45 != v44) {
      continue;
    }
    break;
  }
LABEL_159:
  swift_bridgeObjectRelease();
  return v85;
}

uint64_t sub_10002A4F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10002A514(a1, a2, a3, *v3);
  *double v3 = (char *)result;
  return result;
}

uint64_t sub_10002A514(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100032FA0(&qword_100157BE0);
    int v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 7);
  }
  else
  {
    int v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[8 * v8 - v8]) {
      memmove(v12, v13, 7 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[7 * v8] || v12 >= &v13[7 * v8])
  {
    memcpy(v12, v13, 7 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002A694(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10002A6C4(a1, a2, a3, (void *)*v3, &qword_100157BE8, &qword_100157778);
  *double v3 = result;
  return result;
}

uint64_t sub_10002A6C4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100032FA0(a5);
    char v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    char v13 = &_swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_100032FA0(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10002A854(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v8 = &_swiftEmptySetSingleton;
  uint64_t v3 = *(void *)(a1 + 16);
  sub_100034264();
  swift_retain();
  uint64_t v4 = CalculateExpression.activeOperation.getter();
  swift_release();
  if (v4)
  {
    Swift::Int v5 = sub_100053460();
    swift_release();
    if (v5 != 93) {
      sub_1000B1E38(&v7, v5);
    }
  }
  swift_getKeyPath();
  uint64_t v7 = v3;
  sub_100034378(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v3 + 48)) {
    sub_1000B1E38(&v7, 26);
  }
  swift_getKeyPath();
  uint64_t v7 = v2;
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v2 + 17) == 1) {
    sub_1000B1E38(&v7, 27);
  }
  return v8;
}

void sub_10002AA00(uint64_t a1, char a2)
{
  if ((sub_10002AC18() & 1) == 0)
  {
    id v3 = [self currentDevice];
    id v4 = [v3 userInterfaceIdiom];

    if (v4 || (sub_10002ACD8() & 1) == 0)
    {
      if (a2)
      {
        sub_10002B248();
        sub_10002B3E4();
      }
      else
      {
        sub_1000298D0();
      }
      sub_10002B3E4();
      sub_100041FE8();
    }
  }
}

void sub_10002AB40()
{
  char v1 = *(unsigned char *)(v0 + 40);
  uint64_t v2 = swift_retain();
  sub_10002BD88(v2, v1);
  swift_release();
  if (sub_10002AC18())
  {
    swift_release();
  }
  else
  {
    sub_10002AFEC();
    sub_10002B3E4();
    id v3 = [self mainScreen];
    [v3 bounds];
    swift_release();
  }
}

uint64_t sub_10002AC18()
{
  uint64_t v0 = self;
  id v1 = [v0 currentDevice];
  id v2 = [v1 userInterfaceIdiom];

  if (v2)
  {
    char v3 = 0;
  }
  else
  {
    id v4 = [v0 currentDevice];
    id v5 = [v4 orientation];

    if (sub_10002AFDC((uint64_t)v5)) {
      char v3 = 1;
    }
    else {
      char v3 = sub_10002ACD8() ^ 1;
    }
  }
  return v3 & 1;
}

uint64_t sub_10002ACD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UserInterfaceSizeClass();
  char v3 = *(void **)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  id v9 = [self currentDevice];
  id v10 = [v9 orientation];

  if (sub_10002AFCC((uint64_t)v10))
  {
    char v11 = 1;
  }
  else
  {
    swift_getKeyPath();
    uint64_t v22 = v1;
    sub_10002B4E8();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v20 = v1;
    uint64_t v12 = v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
    swift_beginAccess();
    uint64_t v19 = (void (*)(char *, uint64_t, uint64_t))v3[2];
    v19(v8, v12, v2);
    double v18 = (void (*)(char *, void, uint64_t))v3[13];
    v18(v6, enum case for UserInterfaceSizeClass.compact(_:), v2);
    LOBYTE(v12) = static UserInterfaceSizeClass.== infix(_:_:)();
    char v13 = (void (*)(char *, uint64_t))v3[1];
    v13(v6, v2);
    v13(v8, v2);
    if (v12)
    {
      swift_getKeyPath();
      uint64_t v14 = v20;
      uint64_t v21 = v20;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v15 = v14 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
      swift_beginAccess();
      v19(v8, v15, v2);
      v18(v6, enum case for UserInterfaceSizeClass.regular(_:), v2);
      char v11 = static UserInterfaceSizeClass.== infix(_:_:)();
      v13(v6, v2);
      v13(v8, v2);
    }
    else
    {
      char v11 = 0;
    }
  }
  return v11 & 1;
}

BOOL sub_10002AFCC(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

BOOL sub_10002AFDC(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

BOOL sub_10002AFEC()
{
  uint64_t v0 = self;
  id v1 = [v0 currentDevice];
  id v2 = [v1 userInterfaceIdiom];

  if (v2 != (id)1)
  {
    id v3 = [v0 currentDevice];
    id v4 = [v3 userInterfaceIdiom];

    if (v4 != (id)6) {
      return 1;
    }
  }
  uint64_t v5 = self;
  id v6 = [v5 mainScreen];
  [v6 bounds];
  double v8 = v7;

  if (v8 != sub_10002B2E8((uint64_t)&unk_10010DBE8, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize, (uint64_t)&unk_10010DBC0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets))return 1; {
  id v9 = [v5 mainScreen];
  }
  [v9 bounds];
  double v11 = v10;

  return v11 != sub_10002B2E8((uint64_t)&unk_10010DC10, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, (uint64_t)&unk_10010DC60, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
}

void sub_10002B158(uint64_t a1, char a2)
{
  if (a2)
  {
    sub_10002B248();
    sub_10002B3E4();
  }
  else
  {
    sub_1000298D0();
  }
  sub_10002B248();
}

double sub_10002B248()
{
  return sub_10002B2E8((uint64_t)&unk_10010DC10, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, (uint64_t)&unk_10010DC60, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
}

double sub_10002B26C(uint64_t a1, char a2)
{
  if (a2)
  {
    double v2 = sub_10002B248();
    double v3 = dbl_100113850[v2 / sub_10002B3E4() > 0.9];
  }
  else if (sub_1000298D0())
  {
    double v3 = 0.153846154;
  }
  else
  {
    double v3 = 0.25;
  }
  return v3 * sub_10002B3E4();
}

double sub_10002B2E8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  swift_getKeyPath();
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v7 = *(double *)(v4 + *a2);
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = v4 + *a4;
  double v9 = v7 + *(double *)(v8 + 8);
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return v9 + *(double *)(v8 + 24);
}

double sub_10002B3E4()
{
  swift_getKeyPath();
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v1 = *(double *)(v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize + 8);
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets;
  double v3 = v1 + *(double *)(v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return v3 + *(double *)(v2 + 16);
}

unint64_t sub_10002B4E8()
{
  unint64_t result = qword_100154820;
  if (!qword_100154820)
  {
    type metadata accessor for CalculatorLayout();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100154820);
  }
  return result;
}

uint64_t sub_10002B540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v84 = a4;
  uint64_t v85 = a2;
  uint64_t v86 = a3;
  uint64_t v83 = sub_100032FA0(&qword_1001576C0);
  __chkstk_darwin(v83);
  double v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v13 = (char *)&v75 - v12;
  uint64_t v81 = sub_100032FA0(&qword_1001576C8);
  uint64_t v14 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v76 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100032FA0(&qword_1001576D0);
  __chkstk_darwin(v16 - 8);
  uint64_t v77 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v75 - v19;
  long long v87 = *(_OWORD *)(a1 + 56);
  sub_100032FA0(&qword_100157600);
  State.wrappedValue.getter();
  uint64_t v21 = v88;
  swift_getKeyPath();
  *(void *)&long long v87 = v21;
  sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = *(unsigned __int8 *)(v21 + 16);
  swift_release();
  unsigned int v78 = v10;
  uint64_t v79 = a5;
  uint64_t v80 = v14;
  uint64_t v82 = v20;
  switch(v22)
  {
    case 1:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v23)
      {
LABEL_4:
        char v24 = *(unsigned char *)(a1 + 40);
        uint64_t v25 = swift_retain();
        uint64_t v26 = sub_10002BD88(v25, v24);
        uint64_t result = swift_release();
        int64_t v28 = *(void *)(v86 + 16);
        if (!v28) {
          goto LABEL_10;
        }
        uint64_t v29 = *(void *)(*(void *)(v86 + 32) + 16);
        uint64_t v30 = swift_retain();
        uint64_t v31 = sub_10002BD88(v30, v24);
        swift_release();
        char v32 = v84;
        sub_10002AA00(v31, (v84 & 1) == 0);
        uint64_t v34 = v33;
        swift_release();
        uint64_t v35 = swift_retain();
        uint64_t v36 = sub_10002BD88(v35, v24);
        swift_release();
        double v37 = sub_10002C098(v36, (v32 & 1) == 0);
        swift_release();
        *(void *)char v13 = v26;
        *((void *)v13 + 1) = v28;
        *((void *)v13 + 2) = v29;
        uint64_t v38 = v86;
        *((double *)v13 + 3) = a6;
        *((void *)v13 + 4) = v34;
        *((double *)v13 + 5) = v37;
        unsigned int v75 = &v13[*(int *)(v83 + 44)];
        *(void *)&long long v87 = sub_10002BDF0(0, v28);
        swift_getKeyPath();
        uint64_t v39 = swift_allocObject();
        long long v40 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(v39 + 80) = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(v39 + 96) = v40;
        *(_OWORD *)(v39 + 112) = *(_OWORD *)(a1 + 96);
        uint64_t v41 = *(void *)(a1 + 112);
        long long v42 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(v39 + 16) = *(_OWORD *)a1;
        *(_OWORD *)(v39 + 32) = v42;
        long long v43 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(v39 + 48) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v39 + 64) = v43;
        uint64_t v44 = v85;
        *(void *)(v39 + 128) = v41;
        *(void *)(v39 + 136) = v44;
        *(void *)(v39 + 144) = v38;
        *(unsigned char *)(v39 + 152) = v32 & 1;
        sub_100033AC4(a1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100032FA0(&qword_1001576D8);
        sub_100032FA0(&qword_1001576E0);
        sub_100040BE4(&qword_1001576E8, &qword_1001576D8);
        sub_10002BFF8();
        ForEach<>.init(_:id:content:)();
        static AnyTransition.opacity.getter();
        static AnyTransition.identity.getter();
        uint64_t v45 = static AnyTransition.asymmetric(insertion:removal:)();
        swift_release();
        swift_release();
        uint64_t v46 = v76;
        sub_100033344((uint64_t)v13, v76, &qword_1001576C0);
        uint64_t v47 = v81;
        *(void *)(v46 + *(int *)(v81 + 36)) = v45;
        sub_100032F44((uint64_t)v13, &qword_1001576C0);
        uint64_t v20 = v82;
        sub_10002D9D0(v46, (uint64_t)v82, &qword_1001576C8);
        uint64_t v48 = 0;
      }
      else
      {
        uint64_t v48 = 1;
        uint64_t v44 = v85;
        uint64_t v47 = v81;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v20, v48, 1, v47);
      char v49 = *(unsigned char *)(a1 + 40);
      uint64_t v50 = swift_retain();
      uint64_t v51 = sub_10002BD88(v50, v49);
      uint64_t result = swift_release();
      int64_t v52 = *(void *)(v44 + 16);
      if (v52)
      {
        uint64_t v53 = *(void *)(*(void *)(v44 + 32) + 16);
        uint64_t v54 = swift_retain();
        uint64_t v55 = sub_10002BD88(v54, v49);
        swift_release();
        char v56 = v84;
        char v57 = (v84 & 1) == 0;
        sub_10002AA00(v55, v57);
        uint64_t v59 = v58;
        swift_release();
        uint64_t v60 = swift_retain();
        uint64_t v61 = sub_10002BD88(v60, v49);
        swift_release();
        double v62 = sub_10002C098(v61, v57);
        swift_release();
        *(void *)char v13 = v51;
        *((void *)v13 + 1) = v52;
        *((void *)v13 + 2) = v53;
        *((double *)v13 + 3) = a6;
        *((void *)v13 + 4) = v59;
        *((double *)v13 + 5) = v62;
        *(void *)&long long v87 = sub_10002BDF0(0, v52);
        swift_getKeyPath();
        uint64_t v63 = swift_allocObject();
        long long v64 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(v63 + 80) = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(v63 + 96) = v64;
        *(_OWORD *)(v63 + 112) = *(_OWORD *)(a1 + 96);
        uint64_t v65 = *(void *)(a1 + 112);
        long long v66 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(v63 + 16) = *(_OWORD *)a1;
        *(_OWORD *)(v63 + 32) = v66;
        long long v67 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(v63 + 48) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v63 + 64) = v67;
        uint64_t v68 = v85;
        uint64_t v69 = v86;
        *(void *)(v63 + 128) = v65;
        *(void *)(v63 + 136) = v68;
        *(void *)(v63 + 144) = v69;
        *(unsigned char *)(v63 + 152) = v56 & 1;
        sub_100033AC4(a1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100032FA0(&qword_1001576D8);
        sub_100032FA0(&qword_1001576E0);
        sub_100040BE4(&qword_1001576E8, &qword_1001576D8);
        sub_10002BFF8();
        ForEach<>.init(_:id:content:)();
        uint64_t v70 = (uint64_t)v82;
        uint64_t v71 = v77;
        sub_100033344((uint64_t)v82, v77, &qword_1001576D0);
        uint64_t v72 = (uint64_t)v78;
        sub_100033344((uint64_t)v13, (uint64_t)v78, &qword_1001576C0);
        uint64_t v73 = v79;
        sub_100033344(v71, v79, &qword_1001576D0);
        uint64_t v74 = sub_100032FA0(&qword_100157770);
        sub_100033344(v72, v73 + *(int *)(v74 + 48), &qword_1001576C0);
        sub_100032F44((uint64_t)v13, &qword_1001576C0);
        sub_100032F44(v70, &qword_1001576D0);
        sub_100032F44(v72, &qword_1001576C0);
        return sub_100032F44(v71, &qword_1001576D0);
      }
      __break(1u);
LABEL_10:
      __break(1u);
      return result;
  }
}

uint64_t sub_10002BD88(uint64_t a1, char a2)
{
  return sub_1000333A8(a1, a2, 0xD000000000000010, 0x800000010010ADB0);
}

uint64_t storeEnumTagSinglePayload for CalculatorKeypadLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

int64_t *sub_10002BDF0(int64_t *result, int64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100032FA0(&qword_100157BD8);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = j__malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = sub_10002BEB8(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

int64_t *sub_10002BEB8(int64_t *result, int64_t *a2, uint64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    int64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  int64_t v6 = a5 - a4;
  if (a5 > a4)
  {
    int64_t v5 = a4 + 1;
    *a2 = a4;
    if (a3 == 1) {
      goto LABEL_7;
    }
    if (v5 == a5)
    {
      a3 = 1;
      int64_t v5 = a5;
      goto LABEL_7;
    }
    unint64_t v7 = v6 - 2;
    if (v6 - 2 >= (unint64_t)(a3 - 2)) {
      unint64_t v7 = a3 - 2;
    }
    if (v7 >= ~a4 + a5) {
      unint64_t v7 = ~a4 + a5;
    }
    unint64_t v8 = v7 + 1;
    if (v8 >= 5)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      int64_t v13 = v5 + v8 - v11;
      double v10 = &a2[v8 - v11];
      uint64_t v9 = v12 + 2;
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_100112880);
      uint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *uint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      int64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 2;
      double v10 = a2;
    }
    uint64_t v17 = v10 + 1;
    while (v5 < a5)
    {
      int64_t v18 = v5 + 1;
      *uint64_t v17 = v5;
      if (a3 == v9)
      {
        ++v5;
        goto LABEL_7;
      }
      ++v9;
      ++v17;
      ++v5;
      if (a5 == v18)
      {
        int64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10002BFF8()
{
  unint64_t result = qword_1001576F0;
  if (!qword_1001576F0)
  {
    sub_1000317D8(&qword_1001576E0);
    sub_100038E9C();
    sub_100040BE4(&qword_100156AE0, &qword_100156AE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001576F0);
  }
  return result;
}

double sub_10002C098(uint64_t a1, char a2)
{
  char v3 = sub_1000298D0();
  id v4 = [self currentDevice];
  id v5 = [v4 userInterfaceIdiom];

  double result = 61.0;
  double v7 = 45.0;
  if (v3)
  {
    double result = 45.0;
    double v7 = 22.0;
  }
  if ((a2 & 1) == 0) {
    double result = v7;
  }
  if (!v5) {
    return 28.0;
  }
  return result;
}

uint64_t sub_10002C140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v9 = *(unsigned char *)(v4 + 40);
  uint64_t v10 = swift_retain();
  uint64_t v11 = sub_10002BD88(v10, v9);
  swift_release();
  sub_100032FA0(&qword_100157600);
  State.wrappedValue.getter();
  swift_getKeyPath();
  sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = *(unsigned __int8 *)(v18 + 16);
  swift_release();
  char v13 = 1;
  switch(v12)
  {
    case 1:
      break;
    default:
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  swift_bridgeObjectRelease();
  sub_10002C358(v11, v13 & 1);
  double v15 = v14;
  swift_release();
  *(void *)a4 = static HorizontalAlignment.center.getter();
  *(double *)(a4 + 8) = v15;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v16 = sub_100032FA0(&qword_1001576B8);
  return sub_10002B540(v4, a1, a2, a3 & 1, a4 + *(int *)(v16 + 44), v15);
}

void sub_10002C358(uint64_t a1, char a2)
{
  id v3 = [self currentDevice];
  id v4 = [v3 userInterfaceIdiom];

  if (v4)
  {
    id v5 = self;
    id v6 = [v5 mainScreen];
    [v6 bounds];
    double v8 = v7;

    if (v8 == sub_1000412D8())
    {
      id v9 = [v5 mainScreen];
      [v9 bounds];
      double v11 = v10;

      if (v11 == sub_10002B248())
      {
        if (qword_100154208 != -1) {
          swift_once();
        }
        if ((a2 & 1) == 0) {
          return;
        }
LABEL_18:
        if (qword_100154210 != -1) {
          swift_once();
        }
        return;
      }
    }
    if (qword_100154208 != -1) {
      swift_once();
    }
    sub_100041944();
    if (a2) {
      goto LABEL_18;
    }
  }
  else
  {
    if (sub_10002C594() && qword_1001543B0 != -1) {
      swift_once();
    }
    if (qword_100154218 != -1) {
      swift_once();
    }
    if (a2) {
      goto LABEL_18;
    }
  }
}

BOOL sub_10002C594()
{
  uint64_t v1 = v0;
  id v2 = [self currentDevice];
  id v3 = [v2 userInterfaceIdiom];

  if (!v3)
  {
    swift_getKeyPath();
    sub_10002B4E8();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    id v5 = (double *)(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
    if (*(double *)(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize + 8) <= 667.0)
    {
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*v5 <= 375.0) {
        return 1;
      }
    }
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (v5[1] <= 375.0)
    {
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      return *v5 <= 667.0;
    }
  }
  return 0;
}

uint64_t sub_10002C748@<X0>(uint64_t a1@<X8>)
{
  uint64_t v77 = a1;
  uint64_t v84 = type metadata accessor for CalculatorAppContentView();
  uint64_t v80 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v79 = v1;
  uint64_t v76 = &v59[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v74 = sub_100032FA0(&qword_100154A48);
  __chkstk_darwin(v74);
  uint64_t v73 = &v59[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v78 = sub_100032FA0(&qword_1001594D8);
  uint64_t v63 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  double v62 = &v59[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v81 = sub_100032FA0(&qword_1001594E0);
  __chkstk_darwin(v81);
  long long v64 = &v59[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v67 = sub_100032FA0(&qword_1001594E8);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v82 = &v59[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v72 = sub_100032FA0(&qword_1001594F0);
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v69 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v65 = sub_100032FA0(&qword_1001594F8);
  __chkstk_darwin(v65);
  uint64_t v71 = &v59[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v68 = sub_100032FA0(&qword_100159500);
  __chkstk_darwin(v68);
  unsigned int v75 = &v59[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CalculatorViewModel();
  sub_100033224((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v9 = Environment.init<A>(_:)();
  int v60 = v10;
  type metadata accessor for CalculatorLayout();
  uint64_t v61 = sub_100033224((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v11 = Environment.init<A>(_:)();
  char v13 = v12;
  type metadata accessor for CalculatorMDMRestrictionsManager();
  sub_100033224((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  double v14 = (void *)Environment.init<A>(_:)();
  char v16 = v15 & 1;
  LOBYTE(v85) = 0;
  State.init(wrappedValue:)();
  char v17 = v86;
  uint64_t v18 = v87;
  LOBYTE(v85) = 0;
  State.init(wrappedValue:)();
  char v19 = v86;
  uint64_t v20 = v87;
  uint64_t v86 = v9;
  LOBYTE(v87) = v60 & 1;
  unint64_t v88 = v11;
  LOBYTE(v89) = v13 & 1;
  char v90 = v14;
  char v91 = v16;
  char v92 = v17;
  uint64_t v93 = v18;
  char v94 = v19;
  uint64_t v95 = v20;
  sub_100032FA0(&qword_1001593D0);
  LazyState.wrappedValue.getter();
  sub_10003D5F4();
  uint64_t v21 = v62;
  View.environment<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10001A83C(v14, v16);
  swift_release();
  swift_release();
  if (qword_100154538 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_100161140;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v86 = v22;
  swift_retain_n();
  uint64_t v24 = AnyShapeStyle.init<A>(_:)();
  uint64_t v25 = v63;
  uint64_t v26 = (uint64_t)v64;
  uint64_t v27 = v78;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v63 + 16))(v64, v21, v78);
  swift_release();
  int64_t v28 = (uint64_t *)(v26 + *(int *)(v81 + 36));
  *int64_t v28 = KeyPath;
  v28[1] = v24;
  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v21, v27);
  uint64_t v29 = v73;
  uint64_t v30 = v83;
  sub_1000D2040((uint64_t)v73);
  uint64_t v31 = v76;
  sub_10002D1A4(v30, (uint64_t)v76);
  uint64_t v32 = *(unsigned __int8 *)(v80 + 80);
  v79 += (v32 + 16) & ~v32;
  uint64_t v80 = (v32 + 16) & ~v32;
  uint64_t v33 = v80;
  uint64_t v78 = v32 | 7;
  uint64_t v34 = swift_allocObject();
  sub_10002D698((uint64_t)v31, v34 + v33);
  unint64_t v35 = sub_10000519C();
  unint64_t v36 = sub_10003969C();
  uint64_t v37 = v81;
  uint64_t v38 = v74;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100032F44((uint64_t)v29, &qword_100154A48);
  sub_100032F44(v26, &qword_1001594E0);
  sub_1000D2040((uint64_t)v29);
  sub_10002D1A4(v30, (uint64_t)v31);
  uint64_t v39 = swift_allocObject();
  sub_10002D698((uint64_t)v31, v39 + v80);
  uint64_t v86 = v37;
  uint64_t v87 = v38;
  unint64_t v88 = v35;
  unint64_t v89 = v36;
  swift_getOpaqueTypeConformance2();
  long long v40 = v69;
  uint64_t v41 = v67;
  long long v42 = v82;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100032F44((uint64_t)v29, &qword_100154A48);
  (*(void (**)(unsigned char *, uint64_t))(v66 + 8))(v42, v41);
  sub_10002D1A4(v30, (uint64_t)v31);
  uint64_t v43 = swift_allocObject();
  uint64_t v44 = v80;
  sub_10002D698((uint64_t)v31, v43 + v80);
  uint64_t v45 = v70;
  uint64_t v46 = (uint64_t)v71;
  uint64_t v47 = v72;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v70 + 16))(v71, v40, v72);
  uint64_t v48 = (uint64_t (**)())(v46 + *(int *)(v65 + 36));
  *uint64_t v48 = sub_10003D594;
  v48[1] = (uint64_t (*)())v43;
  v48[2] = 0;
  v48[3] = 0;
  (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v40, v47);
  sub_10002D1A4(v30, (uint64_t)v31);
  uint64_t v49 = swift_allocObject();
  sub_10002D698((uint64_t)v31, v49 + v44);
  uint64_t v50 = v75;
  sub_100033344(v46, (uint64_t)v75, &qword_1001594F8);
  uint64_t v51 = &v50[*(int *)(v68 + 36)];
  *uint64_t v51 = sub_1000E03F0;
  v51[1] = v49;
  sub_100032F44(v46, &qword_1001594F8);
  sub_100032FA0(&qword_1001593F0);
  LazyState.projectedValue.getter();
  uint64_t v52 = v86;
  uint64_t v53 = v87;
  LOBYTE(v44) = v88;
  sub_100032FA0(&qword_1001593E0);
  LazyState.projectedValue.getter();
  uint64_t v54 = v86;
  uint64_t v55 = v87;
  LOBYTE(v37) = v88;
  uint64_t v56 = v77;
  sub_100033344((uint64_t)v50, v77, &qword_100159500);
  uint64_t v57 = v56 + *(int *)(sub_100032FA0(&qword_100159528) + 36);
  *(void *)uint64_t v57 = v52;
  *(void *)(v57 + 8) = v53;
  *(unsigned char *)(v57 + 16) = v44;
  *(void *)(v57 + 24) = v54;
  *(void *)(v57 + 32) = v55;
  *(unsigned char *)(v57 + 40) = v37;
  return sub_100032F44((uint64_t)v50, &qword_100159500);
}

uint64_t sub_10002D1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculatorAppContentView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_10002D208(void *a1, void *a2, int *a3)
{
  sub_100032FA0(&qword_1001590B8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = sub_100032FA0(&qword_100154A48);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = a3[5];
  int v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100032FA0(&qword_100154A48);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  else
  {
    *int v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[6];
  char v16 = (void *)((char *)a1 + v15);
  char v17 = (void *)((char *)a2 + v15);
  sub_100032FA0(&qword_1001590B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for LayoutDirection();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    *char v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_100032FA0(&qword_1001593C8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = sub_100032FA0(&qword_1001593D0);
  *(void *)&v20[*(int *)(v23 + 28)] = *(void *)&v21[*(int *)(v23 + 28)];
  uint64_t v24 = a3[8];
  uint64_t v25 = a3[9];
  uint64_t v26 = (char *)a1 + v24;
  uint64_t v27 = (char *)a2 + v24;
  *uint64_t v26 = *v27;
  *((void *)v26 + 1) = *((void *)v27 + 1);
  int64_t v28 = (char *)a1 + v25;
  uint64_t v29 = (char *)a2 + v25;
  swift_retain();
  swift_retain();
  uint64_t v30 = sub_100032FA0(&qword_1001593D8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
  uint64_t v31 = sub_100032FA0(&qword_1001593E0);
  *(void *)&v28[*(int *)(v31 + 28)] = *(void *)&v29[*(int *)(v31 + 28)];
  uint64_t v32 = a3[10];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  swift_retain();
  uint64_t v35 = sub_100032FA0(&qword_1001593E8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
  uint64_t v36 = sub_100032FA0(&qword_1001593F0);
  *(void *)&v33[*(int *)(v36 + 28)] = *(void *)&v34[*(int *)(v36 + 28)];
  swift_retain();
  return a1;
}

uint64_t sub_10002D698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculatorAppContentView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CalculatorAppContentView()
{
  uint64_t result = qword_100159460;
  if (!qword_100159460) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002D748@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100032FA0(a1);
  __chkstk_darwin(v15);
  char v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033344(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_10002D9D0((uint64_t)v17, a5, a2);
  }
  os_log_type_t v19 = static os_log_type_t.fault.getter();
  uint64_t v20 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v20, v19))
  {
    unint64_t v24 = a4;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v25 = a5;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v27 = sub_10000DAA8(v26, v24, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10002D9D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100032FA0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

Swift::Int sub_10002DA34()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10002DA78(void (**a1)(char *), int a2, void (*a3)(char *, uint64_t, uint64_t), int a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  int v60 = a3;
  uint64_t v61 = a6;
  LODWORD(v56) = a4;
  LODWORD(v55) = a2;
  uint64_t v58 = a1;
  uint64_t v15 = type metadata accessor for LayoutSubview();
  unint64_t v50 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for LayoutSubviews();
  uint64_t v57 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100032FA0(&qword_100156548);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100032FA0(&qword_100156550);
  __chkstk_darwin(v54);
  uint64_t v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v50 - v27;
  sub_100036EC8((unint64_t *)&qword_100156558);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v64[0] != v65)
  {
    double v62 = v20;
    uint64_t v59 = v17;
    v66.origin.CGFloat x = a7;
    v66.origin.y = a8;
    v66.size.width = a9;
    v66.size.height = a10;
    double MinX = CGRectGetMinX(v66);
    v67.origin.CGFloat x = a7;
    v67.origin.y = a8;
    v67.size.width = a9;
    v67.size.height = a10;
    double MinY = CGRectGetMinY(v67);
    LOBYTE(v64[0]) = v55 & 1;
    LOBYTE(v65) = v56 & 1;
    sub_10002F528(a5, (uint64_t)v58, v55 & 1, (uint64_t)v60, v56 & 1);
    double v33 = v32;
    double v35 = v34;
    uint64_t v36 = v57;
    int v60 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
    uint64_t v61 = v57 + 16;
    v60(v25, a5, v18);
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v37 = v54;
    *(void *)&v25[*(int *)(v54 + 36)] = v64[0];
    sub_100037608((uint64_t)v25, (uint64_t)v28);
    uint64_t v38 = &v28[*(int *)(v37 + 36)];
    uint64_t v39 = *(void *)v38;
    dispatch thunk of Collection.endIndex.getter();
    if (v39 == v64[0])
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v23, 1, 1, v15);
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v57 = v36 + 8;
      uint64_t v58 = (void (**)(char *))(v50 + 16);
      uint64_t v55 = (unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      uint64_t v54 = v50 + 32;
      double v53 = v33;
      double v52 = v35;
      uint64_t v51 = (void (**)(char *, uint64_t))(v50 + 8);
      unint64_t v56 = v50 + 56;
      unint64_t v50 = (v50 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      while (1)
      {
        long long v42 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        (*v58)(v23);
        v42(v64, 0);
        uint64_t v43 = v62;
        v60(v62, (uint64_t)v28, v18);
        dispatch thunk of Collection.formIndex(after:)();
        (*(void (**)(char *, uint64_t))v57)(v43, v18);
        uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v56;
        (*(void (**)(char *, void, uint64_t, uint64_t))v56)(v23, 0, 1, v15);
        if ((*v55)(v23, 1, v15) == 1) {
          break;
        }
        uint64_t v45 = v59;
        (*(void (**)(char *, char *, uint64_t))v54)(v59, v23, v15);
        static UnitPoint.topLeading.getter();
        LOBYTE(v64[0]) = 0;
        LOBYTE(v65) = 0;
        uint64_t result = LayoutSubview.place(at:anchor:proposal:)();
        uint64_t v46 = v63;
        uint64_t v47 = *(void *)(v63 + 16);
        BOOL v48 = __OFSUB__(v47, 1);
        uint64_t v49 = v47 - 1;
        if (v48)
        {
          __break(1u);
          return result;
        }
        if (v40 >= v49)
        {
          v68.origin.CGFloat x = a7;
          v68.origin.y = a8;
          v68.size.width = a9;
          v68.size.height = a10;
          double MinX = CGRectGetMinX(v68);
          (*v51)(v45, v15);
          uint64_t v40 = 0;
          double MinY = v35 + MinY + *(double *)(v46 + 24);
        }
        else
        {
          (*v51)(v45, v15);
          ++v40;
          double MinX = v33 + MinX + *(double *)(v46 + 24);
        }
        uint64_t v41 = *(void *)v38;
        dispatch thunk of Collection.endIndex.getter();
        if (v41 == v64[0])
        {
          v44(v23, 1, 1, v15);
          return sub_100037248((uint64_t)v28);
        }
      }
    }
    return sub_100037248((uint64_t)v28);
  }
  return result;
}

uint64_t destroy for CalculatorModeButtonView(uint64_t a1)
{
  swift_release();
  swift_release();
  sub_10002F4DC(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void **)(a1 + 48), *(unsigned char *)(a1 + 56));
  sub_10002F4E8(*(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(unsigned char *)(a1 + 81));
  sub_100032EAC(*(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002E138()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E178()
{
  Swift::UInt v1 = (int *)(type metadata accessor for GenericRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v3 = v0 + v2 + v1[15];
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocObject();
}

uint64_t sub_10002E2A4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10002E32C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E37C()
{
  swift_release();
  swift_release();
  sub_10001A83C(*(id *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E3D8()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E420()
{
  Swift::UInt v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[10], v9);
  v10(v3 + v1[11], v9);

  return swift_deallocObject();
}

uint64_t sub_10002E644()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E68C()
{
  swift_release();
  swift_release();
  sub_100032EAC(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return swift_deallocObject();
}

uint64_t sub_10002E6D8()
{
  swift_release();
  sub_10002F4DC(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(unsigned char *)(v0 + 56));

  return swift_deallocObject();
}

uint64_t sub_10002E720()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E788()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E7E0()
{
  Swift::UInt v1 = (int *)(type metadata accessor for ModeMenuView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  sub_10001A83C(*(id *)v2, *(unsigned char *)(v2 + 8));
  swift_release();
  sub_10002F4E8(*(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(unsigned char *)(v2 + 49));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[12];
  uint64_t v4 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  sub_100032FA0(&qword_100157C08);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E96C()
{
  Swift::UInt v1 = (int *)(type metadata accessor for CalculatorHistoryView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[9];
  uint64_t v4 = type metadata accessor for EditMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_100032FA0(&qword_1001580F8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = v2 + v1[13];
  uint64_t v6 = sub_100032FA0(&qword_100156688);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v2 + v1[14], v6);

  return swift_deallocObject();
}

uint64_t sub_10002EB30()
{
  Swift::UInt v1 = (int *)(type metadata accessor for UnitConversionPopoverView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = v2 + v1[16];
  uint64_t v4 = sub_100032FA0(&qword_100156688);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v2 + v1[17], v4);
  v5(v2 + v1[18], v4);
  v5(v2 + v1[19], v4);
  v5(v2 + v1[20], v4);
  v5(v2 + v1[21], v4);

  return swift_deallocObject();
}

uint64_t sub_10002ED14()
{
  Swift::UInt v1 = (int *)type metadata accessor for CalculatorAppContentView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v0 + v3;
  sub_100032FA0(&qword_1001590B8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v4 + v1[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v4 + v1[6];
  sub_100032FA0(&qword_1001590B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for LayoutDirection();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = v4 + v1[7];
  uint64_t v13 = sub_100032FA0(&qword_1001593C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_100032FA0(&qword_1001593D0);
  swift_release();
  swift_release();
  uint64_t v14 = v4 + v1[9];
  uint64_t v15 = sub_100032FA0(&qword_1001593D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  sub_100032FA0(&qword_1001593E0);
  swift_release();
  uint64_t v16 = v4 + v1[10];
  uint64_t v17 = sub_100032FA0(&qword_1001593E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  sub_100032FA0(&qword_1001593F0);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002F0CC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002F130()
{
  Swift::UInt v1 = (int *)(type metadata accessor for CalculatorUnitConversionDisplayView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[19];
  uint64_t v4 = sub_100032FA0(&qword_100156688);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocObject();
}

uint64_t sub_10002F264()
{
  uint64_t v1 = *(void *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = (int *)(type metadata accessor for CalculatorPresentationView() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  swift_unknownObjectRelease();
  uint64_t v4 = v0 + v3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4, v1);
  (*(void (**)(uint64_t))(*(void *)(v6 - 8) + 8))(v4 + v2[15]);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_10002F3B4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    swift_release();
  }
}

uint64_t assignWithCopy for CalculatorButtonView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_1000319C4(v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void **)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  sub_10002F4DC(v9, v10, v11, v12);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 47);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

void sub_10002F4DC(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if (a4) {
    sub_10002F3B4(a1, a2, a3);
  }
  else {
    swift_release();
  }
}

uint64_t sub_10002F4E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_release();
  }

  return swift_release();
}

void sub_10002F528(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  LODWORD(v70) = a5;
  double v68 = *(double *)&a4;
  uint64_t v8 = type metadata accessor for LayoutSubview();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  CGRect v66 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100032FA0(&qword_100156548);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LayoutSubviews();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v69 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100032FA0(&qword_100156550);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0 || (a2 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
  {
    uint64_t v20 = a1;
    double v21 = INFINITY;
    uint64_t v22 = v58;
  }
  else
  {
    uint64_t v22 = v58;
    uint64_t v23 = *(void *)(v58 + 16);
    if (__OFSUB__(v23, 1))
    {
LABEL_36:
      __break(1u);
      return;
    }
    uint64_t v20 = a1;
    double v24 = *(double *)&a2 - *(double *)(v58 + 24) * (double)(v23 - 1);
    if (v24 < 0.0) {
      double v24 = 0.0;
    }
    double v21 = v24 / (double)v23;
  }
  uint64_t v25 = *(void *)(v22 + 8);
  if (__OFSUB__(v25, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  double v26 = v68;
  if (v70) {
    double v26 = 10.0;
  }
  double v27 = v26 - *(double *)(v22 + 24) * (double)(v25 - 1);
  if (v27 < 0.0) {
    double v28 = 0.0;
  }
  else {
    double v28 = v27;
  }
  CGRect v67 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  *(void *)&double v68 = v15 + 16;
  v67(v69, v20, v14);
  sub_100036EC8((unint64_t *)&unk_100156560);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v29 = &v19[*(int *)(v17 + 36)];
  sub_100036EC8((unint64_t *)&qword_100156558);
  uint64_t v30 = (uint64_t)v19;
  uint64_t v31 = *(void *)v29;
  uint64_t v70 = v30;
  dispatch thunk of Collection.endIndex.getter();
  if (v31 == v72[0])
  {
    double v32 = (char *)&_swiftEmptyArrayStorage;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v13, 1, 1, v8);
  }
  else
  {
    double v61 = v28 / (double)v25;
    double v62 = v21;
    long long v64 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v65 = (void (**)(char *))(v9 + 16);
    double v33 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v59 = (void (**)(char *, uint64_t))(v9 + 8);
    int v60 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    double v32 = (char *)&_swiftEmptyArrayStorage;
    unint64_t v57 = (v9 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v34 = v70;
    while (1)
    {
      double v35 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      (*v65)(v13);
      v35(v72, 0);
      uint64_t v36 = v69;
      v67(v69, v34, v14);
      dispatch thunk of Collection.formIndex(after:)();
      (*v64)(v36, v14);
      uint64_t v37 = *v33;
      (*v33)(v13, 0, 1, v8);
      if ((*v63)(v13, 1, v8) == 1) {
        break;
      }
      uint64_t v38 = v66;
      (*v60)(v66, v13, v8);
      LOBYTE(v72[0]) = 0;
      char v71 = 0;
      LayoutSubview.sizeThatFits(_:)();
      uint64_t v40 = v39;
      (*v59)(v38, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v32 = sub_10002FC7C(0, *((void *)v32 + 2) + 1, 1, v32);
      }
      unint64_t v42 = *((void *)v32 + 2);
      unint64_t v41 = *((void *)v32 + 3);
      if (v42 >= v41 >> 1) {
        double v32 = sub_10002FC7C((char *)(v41 > 1), v42 + 1, 1, v32);
      }
      *((void *)v32 + 2) = v42 + 1;
      *(void *)&v32[8 * v42 + 32] = v40;
      uint64_t v43 = *(void *)v29;
      uint64_t v34 = v70;
      dispatch thunk of Collection.endIndex.getter();
      if (v43 == v72[0])
      {
        v37(v13, 1, 1, v8);
        break;
      }
    }
  }
  sub_100037248(v70);
  uint64_t v44 = *((void *)v32 + 2);
  if (v44)
  {
    double v45 = *((double *)v32 + 4);
    uint64_t v46 = v44 - 1;
    if (v46)
    {
      uint64_t v47 = (double *)(v32 + 40);
      do
      {
        double v48 = *v47++;
        double v49 = v48;
        if (v45 < v48) {
          double v45 = v49;
        }
        --v46;
      }
      while (v46);
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v50 = self;
  id v51 = [v50 currentDevice];
  id v52 = [v51 userInterfaceIdiom];

  if (v52)
  {
    id v53 = [self mainScreen];
    [v53 bounds];

    sub_1000412D8();
  }
  id v54 = [v50 currentDevice];
  id v55 = [v54 userInterfaceIdiom];

  if (v55 == (id)1)
  {
    sub_10002B248();
    id v56 = [self mainScreen];
    [v56 bounds];
  }
}

char *sub_10002FC7C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100032FA0(&qword_100157BF8);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 32]) {
          memmove(v13, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10003751C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002FD8C(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v32 = type metadata accessor for LayoutSubview();
  uint64_t v10 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for LayoutSubviews();
  sub_100030104();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t result = dispatch thunk of Collection.endIndex.getter();
  if (v34 != v35)
  {
    uint64_t result = dispatch thunk of Collection.count.getter();
    uint64_t v15 = _swiftEmptyArrayStorage;
    if (result)
    {
      uint64_t v16 = result;
      double v35 = _swiftEmptyArrayStorage;
      sub_10003015C(0, result & ~(result >> 63), 0);
      uint64_t result = dispatch thunk of Collection.startIndex.getter();
      if (v16 < 0) {
        goto LABEL_15;
      }
      uint64_t v17 = (void (**)(char *))(v10 + 16);
      v31[0] = v10;
      v31[1] = v13;
      uint64_t v18 = (void (**)(char *, uint64_t))(v10 + 8);
      do
      {
        uint64_t v19 = a1;
        uint64_t v20 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
        uint64_t v21 = v32;
        (*v17)(v12);
        v20(&v34, 0);
        static ProposedViewSize.unspecified.getter();
        LOBYTE(v34) = v22 & 1;
        char v33 = v23 & 1;
        LayoutSubview.sizeThatFits(_:)();
        uint64_t v25 = v24;
        uint64_t v27 = v26;
        (*v18)(v12, v21);
        uint64_t v15 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003015C(0, v15[2] + 1, 1);
          uint64_t v15 = v35;
        }
        unint64_t v29 = v15[2];
        unint64_t v28 = v15[3];
        if (v29 >= v28 >> 1)
        {
          sub_10003015C(v28 > 1, v29 + 1, 1);
          uint64_t v15 = v35;
        }
        _OWORD v15[2] = v29 + 1;
        uint64_t v30 = &v15[2 * v29];
        v30[4] = v25;
        v30[5] = v27;
        a1 = v19;
        uint64_t result = dispatch thunk of Collection.formIndex(after:)();
        --v16;
      }
      while (v16);
      uint64_t v10 = v31[0];
    }
    if (v15[2])
    {
      swift_bridgeObjectRelease();
      v36.origin.CGFloat x = a2;
      v36.origin.y = a3;
      v36.size.width = a4;
      v36.size.height = a5;
      CGRectGetMidX(v36);
      v37.origin.CGFloat x = a2;
      v37.origin.y = a3;
      v37.size.width = a4;
      v37.size.height = a5;
      CGRectGetMidY(v37);
      LayoutSubviews.subscript.getter();
      static UnitPoint.topLeading.getter();
      LOBYTE(v34) = 0;
      LOBYTE(v35) = 0;
      LayoutSubview.place(at:anchor:proposal:)();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v32);
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

unint64_t sub_100030104()
{
  unint64_t result = qword_100156558;
  if (!qword_100156558)
  {
    type metadata accessor for LayoutSubviews();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156558);
  }
  return result;
}

uint64_t sub_10003015C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003017C(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10003017C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100032FA0(&qword_100157BF0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000302E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v173 = a1;
  uint64_t v3 = sub_100032FA0(&qword_1001574A0);
  __chkstk_darwin(v3);
  char v5 = &v126[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v171 = type metadata accessor for LongPressGesture();
  uint64_t v170 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  uint64_t v169 = &v126[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100032FA0(&qword_1001574A8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v172 = &v126[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v168 = type metadata accessor for ContentTransition();
  uint64_t v167 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  v166 = &v126[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v161 = type metadata accessor for AccessibilityTraits();
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v162 = &v126[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v163 = &v126[-v13];
  __chkstk_darwin(v14);
  uint64_t v157 = &v126[-v15];
  uint64_t v147 = sub_100032FA0(&qword_1001574B0);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v17 = &v126[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v149 = sub_100032FA0(&qword_1001574B8);
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v19 = &v126[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v150 = sub_100032FA0(&qword_1001574C0);
  __chkstk_darwin(v150);
  v151 = &v126[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v156 = sub_100032FA0(&qword_1001574C8);
  __chkstk_darwin(v156);
  uint64_t v152 = &v126[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  unint64_t v154 = &v126[-v23];
  __chkstk_darwin(v24);
  uint64_t v155 = &v126[-v25];
  __chkstk_darwin(v26);
  uint64_t v153 = &v126[-v27];
  __chkstk_darwin(v28);
  uint64_t v158 = &v126[-v29];
  __chkstk_darwin(v30);
  uint64_t v159 = &v126[-v31];
  uint64_t v32 = sub_100032FA0(&qword_1001574D0);
  __chkstk_darwin(v32 - 8);
  uint64_t v164 = &v126[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v34 = sub_100032FA0(&qword_1001574D8);
  __chkstk_darwin(v34);
  uint64_t v165 = &v126[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v36 = sub_100032FA0(&qword_1001574E0);
  __chkstk_darwin(v36);
  __chkstk_darwin(v37);
  uint64_t v41 = *(unsigned __int8 *)(v2 + 41);
  if (v41 == 10)
  {
    uint64_t v42 = static HorizontalAlignment.center.getter();
    uint64_t v43 = static Alignment.center.getter();
    sub_100037670(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v178, 0.0, 1, INFINITY, 0, v43, v44, v42, 0, 1);
    long long v45 = v185;
    *((_OWORD *)v5 + 6) = v184;
    *((_OWORD *)v5 + 7) = v45;
    *((void *)v5 + 16) = v186;
    long long v46 = v181;
    *((_OWORD *)v5 + 2) = v180;
    *((_OWORD *)v5 + 3) = v46;
    long long v47 = v183;
    *((_OWORD *)v5 + 4) = v182;
    *((_OWORD *)v5 + 5) = v47;
    long long v48 = v179;
    *(_OWORD *)char v5 = v178;
    *((_OWORD *)v5 + 1) = v48;
    swift_storeEnumTagMultiPayload();
    sub_100032FA0(&qword_100157568);
    unint64_t v49 = sub_100031A64();
    uint64_t v50 = sub_100040BE4(&qword_100157560, &qword_1001574A8);
    uint64_t v174 = v34;
    uint64_t v175 = v7;
    unint64_t v176 = v49;
    uint64_t v177 = v50;
    swift_getOpaqueTypeConformance2();
    sub_100031B30();
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    uint64_t v135 = v40;
    uint64_t v136 = &v126[-v38];
    uint64_t v137 = v39;
    uint64_t v134 = v34;
    uint64_t v138 = v36;
    uint64_t v139 = v8;
    uint64_t v140 = v7;
    uint64_t v141 = v3;
    uint64_t v142 = v5;
    int v130 = *(unsigned __int8 *)(v2 + 47);
    int v129 = *(unsigned __int8 *)(v2 + 46);
    int v143 = *(unsigned __int8 *)(v2 + 45);
    int v144 = *(unsigned __int8 *)(v2 + 44);
    unsigned __int8 v52 = *(unsigned char *)(v2 + 43);
    int v127 = v52;
    int v145 = *(unsigned __int8 *)(v2 + 42);
    uint64_t v53 = swift_allocObject();
    long long v54 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v53 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v53 + 64) = v54;
    *(unsigned char *)(v53 + 80) = *(unsigned char *)(v2 + 64);
    long long v55 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v53 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v53 + 32) = v55;
    __chkstk_darwin(v53);
    sub_1000318D0(v2);
    sub_100032FA0(&qword_1001574E8);
    sub_1000356F0(&qword_1001574F0, &qword_1001574E8, (void (*)(void))sub_100039A68);
    Button.init(action:label:)();
    uint64_t v56 = *(void *)(v2 + 48);
    uint64_t v57 = *(void *)(v2 + 56);
    uint64_t v58 = *(void *)v2;
    int v59 = *(unsigned __int8 *)(v2 + 8);
    uint64_t v60 = swift_retain();
    int v132 = v59;
    uint64_t v61 = sub_1000318B4(v60, v59);
    uint64_t v133 = v58;
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v178 = v61;
    uint64_t v131 = sub_100031820(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v58) = *(unsigned char *)(v61 + 16);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    type metadata accessor for CalculatorViewModel();
    sub_100031820((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    uint64_t v63 = Environment.init<A>(_:)();
    LOBYTE(v178) = v41;
    BYTE1(v178) = v145;
    BYTE2(v178) = v52;
    uint64_t v128 = v41;
    BYTE3(v178) = v144;
    BYTE4(v178) = v143;
    int v64 = v129;
    BYTE5(v178) = v129;
    int v65 = v130;
    BYTE6(v178) = v130;
    *((void *)&v178 + 1) = v56;
    *(void *)&long long v179 = v57;
    BYTE8(v179) = v58;
    *(void *)&long long v180 = KeyPath;
    BYTE8(v180) = 0;
    *(void *)&long long v181 = v63;
    BYTE8(v181) = v66 & 1;
    sub_100040BE4(&qword_100157510, &qword_1001574B0);
    sub_100031A10();
    uint64_t v67 = v147;
    View.buttonStyle<A>(_:)();
    sub_100032EAC(KeyPath, 0);
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v17, v67);
    LOBYTE(v67) = *(unsigned char *)(v2 + 64);
    uint64_t v68 = swift_getKeyPath();
    uint64_t v69 = swift_allocObject();
    *(unsigned char *)(v69 + 16) = v67;
    uint64_t v70 = v148;
    uint64_t v71 = (uint64_t)v151;
    uint64_t v72 = v149;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v148 + 16))(v151, v19, v149);
    uint64_t v73 = (uint64_t *)(v71 + *(int *)(v150 + 36));
    *uint64_t v73 = v68;
    v73[1] = (uint64_t)sub_100037BB4;
    v73[2] = v69;
    (*(void (**)(unsigned char *, uint64_t))(v70 + 8))(v19, v72);
    uint64_t v74 = 0x1000000000000;
    if (!v65) {
      uint64_t v74 = 0;
    }
    uint64_t v75 = 0x10000000000;
    if (!v64) {
      uint64_t v75 = 0;
    }
    uint64_t v76 = &_mh_execute_header;
    if (!v143) {
      uint64_t v76 = 0;
    }
    uint64_t v77 = 0x1000000;
    if (!v144) {
      uint64_t v77 = 0;
    }
    uint64_t v78 = 0x10000;
    if (!v127) {
      uint64_t v78 = 0;
    }
    uint64_t v79 = 256;
    if (!v145) {
      uint64_t v79 = 0;
    }
    uint64_t v80 = v74 | v128 | v75 | (unint64_t)v76 | v77 | v78 | v79;
    sub_100031670(v80);
    sub_100036080();
    uint64_t v81 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v83 = v82;
    char v85 = v84 & 1;
    sub_10003576C();
    uint64_t v86 = (uint64_t)v152;
    View.accessibilityLabel(_:)();
    sub_1000356E0(v81, v83, v85);
    swift_bridgeObjectRelease();
    sub_100032F44(v71, &qword_1001574C0);
    char v87 = sub_100031670(v80);
    sub_100035880(v87);
    uint64_t v88 = (uint64_t)v154;
    ModifiedContent<>.accessibilityIdentifier(_:)();
    swift_bridgeObjectRelease();
    sub_100032F44(v86, &qword_1001574C8);
    sub_100031670(v80);
    sub_100036928();
    uint64_t v89 = (uint64_t)v155;
    ModifiedContent<>.accessibilityHint(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100032F44(v88, &qword_1001574C8);
    char v90 = v157;
    static AccessibilityTraits.isButton.getter();
    uint64_t v91 = (uint64_t)v153;
    ModifiedContent<>.accessibilityRemoveTraits(_:)();
    uint64_t v92 = v160;
    uint64_t v93 = *(void (**)(unsigned char *, uint64_t))(v160 + 8);
    char v94 = v90;
    uint64_t v95 = v161;
    v93(v94, v161);
    sub_100032F44(v89, &qword_1001574C8);
    if (sub_100031670(v80) == 27)
    {
      uint64_t v96 = v162;
      static AccessibilityTraits.isToggle.getter();
    }
    else
    {
      uint64_t v96 = v162;
      static AccessibilityTraits.isKeyboardKey.getter();
    }
    uint64_t v97 = v163;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v92 + 32))(v163, v96, v95);
    uint64_t v98 = (uint64_t)v158;
    ModifiedContent<>.accessibilityAddTraits(_:)();
    v93(v97, v95);
    sub_100032F44(v91, &qword_1001574C8);
    uint64_t v99 = swift_retain();
    uint64_t v100 = sub_1000318B4(v99, v132);
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v178 = v100;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    LocalizedStringKey.init(stringLiteral:)();
    sub_100031670(v80);
    uint64_t v101 = (uint64_t)v159;
    ModifiedContent<>.accessibilityValue(_:isEnabled:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100032F44(v98, &qword_1001574C8);
    uint64_t v102 = v164;
    sub_100033344(v101, (uint64_t)v164, &qword_1001574C8);
    sub_100032F44(v101, &qword_1001574C8);
    uint64_t v103 = v166;
    static ContentTransition.identity.getter();
    uint64_t v104 = swift_getKeyPath();
    uint64_t v105 = v134;
    uint64_t v106 = (uint64_t)v165;
    uint64_t v107 = (uint64_t *)&v165[*(int *)(v134 + 36)];
    uint64_t v108 = sub_100032FA0(&qword_100157530);
    uint64_t v109 = v167;
    uint64_t v110 = v168;
    (*(void (**)(char *, unsigned char *, uint64_t))(v167 + 16))((char *)v107 + *(int *)(v108 + 28), v103, v168);
    *uint64_t v107 = v104;
    sub_100033344((uint64_t)v102, v106, &qword_1001574D0);
    (*(void (**)(unsigned char *, uint64_t))(v109 + 8))(v103, v110);
    sub_100032F44((uint64_t)v102, &qword_1001574D0);
    uint64_t v111 = v169;
    LongPressGesture.init(minimumDuration:maximumDistance:)();
    uint64_t v112 = swift_allocObject();
    long long v113 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v112 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v112 + 64) = v113;
    *(unsigned char *)(v112 + 80) = *(unsigned char *)(v2 + 64);
    long long v114 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v112 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v112 + 32) = v114;
    sub_1000318D0(v2);
    sub_100031820(&qword_100157538, (void (*)(uint64_t))&type metadata accessor for LongPressGesture);
    uint64_t v115 = v172;
    uint64_t v116 = v171;
    Gesture.onEnded(_:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v170 + 8))(v111, v116);
    uint64_t v117 = v105;
    if (sub_100031670(v80) == 52) {
      static GestureMask.all.getter();
    }
    else {
      static GestureMask.subviews.getter();
    }
    uint64_t v118 = v142;
    uint64_t v119 = v140;
    uint64_t v120 = v138;
    unint64_t v121 = sub_100031A64();
    uint64_t v122 = sub_100040BE4(&qword_100157560, &qword_1001574A8);
    uint64_t v123 = v135;
    View.simultaneousGesture<A>(_:including:)();
    (*(void (**)(unsigned char *, uint64_t))(v139 + 8))(v115, v119);
    sub_100032F44(v106, &qword_1001574D8);
    uint64_t v124 = v137;
    char v125 = v136;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v137 + 32))(v136, v123, v120);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v124 + 16))(v118, v125, v120);
    swift_storeEnumTagMultiPayload();
    sub_100032FA0(&qword_100157568);
    *(void *)&long long v178 = v117;
    *((void *)&v178 + 1) = v119;
    *(void *)&long long v179 = v121;
    *((void *)&v179 + 1) = v122;
    swift_getOpaqueTypeConformance2();
    sub_100031B30();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v124 + 8))(v125, v120);
  }
}

uint64_t sub_100031670(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0x10000) != 0)
  {
    if (qword_100154520 != -1) {
      swift_once();
    }
    if (sub_100034AF8(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
    {
      if (v1 > 0x23u)
      {
        if (v1 == 36)
        {
          return 37;
        }
        else if (v1 == 55)
        {
          return 30;
        }
      }
      else if (v1 == 8)
      {
        return 92;
      }
      else if (v1 == 30)
      {
        return 55;
      }
      return v1;
    }
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_16;
  }
  if (qword_100154518 != -1) {
    swift_once();
  }
  if (!sub_100034AF8(v1, static CalculatorButtonRepresentable.shiftableButtons))
  {
LABEL_16:
    if ((v1 & 0x1000000FFLL) == 0x100000002) {
      unsigned int v3 = 34;
    }
    else {
      unsigned int v3 = v1;
    }
    if ((v1 & 0x10000FF) == 0x1000001) {
      return 52;
    }
    else {
      return v3;
    }
  }

  return CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
}

uint64_t sub_1000317D8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100031820(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CalculatorViewModel()
{
  uint64_t result = qword_100155100;
  if (!qword_100155100) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000318B4(uint64_t a1, char a2)
{
  return sub_1000333A8(a1, a2, 0xD000000000000019, 0x800000010010B070);
}

uint64_t sub_1000318D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  swift_retain();
  sub_1000319C4(v2, v3, v4, v5);
  return a1;
}

uint64_t initializeWithCopy for CalculatorButtonView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  swift_retain();
  sub_1000319C4(v5, v6, v7, v8);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t sub_1000319C4(uint64_t result, uint64_t a2, void *a3, char a4)
{
  if (a4) {
    return sub_1000319D0(result, a2, a3);
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_1000319D0(uint64_t result, uint64_t a2, void *a3)
{
  if (result)
  {
    id v3 = a3;
    return swift_retain();
  }
  return result;
}

unint64_t sub_100031A10()
{
  unint64_t result = qword_100155B88;
  if (!qword_100155B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155B88);
  }
  return result;
}

unint64_t sub_100031A64()
{
  unint64_t result = qword_100157540;
  if (!qword_100157540)
  {
    sub_1000317D8(&qword_1001574D8);
    sub_1000356F0(&qword_100157548, &qword_1001574D0, (void (*)(void))sub_10003A7B0);
    sub_100040BE4(&qword_100157558, &qword_100157530);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157540);
  }
  return result;
}

unint64_t sub_100031B30()
{
  unint64_t result = qword_100157570;
  if (!qword_100157570)
  {
    sub_1000317D8(&qword_100157568);
    sub_100040BE4(&qword_100157578, &qword_100157580);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157570);
  }
  return result;
}

uint64_t sub_100031BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  uint64_t v154 = a2;
  uint64_t v5 = type metadata accessor for AutomaticHoverEffect();
  uint64_t v150 = *(void *)(v5 - 8);
  uint64_t v151 = v5;
  __chkstk_darwin(v5);
  uint64_t v149 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for ContentShapeKinds();
  uint64_t v158 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v152 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Capsule();
  __chkstk_darwin(v8 - 8);
  uint64_t v148 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v10 - 8);
  uint64_t v136 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for BlendMode();
  uint64_t v135 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v134 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_100032FA0(&qword_100158668);
  __chkstk_darwin(v133);
  uint64_t v138 = (void (*)(uint64_t, char *, uint64_t))((char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100032FA0(&qword_1001568C0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v17 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v19 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100032FA0(&qword_100158670);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v123 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100032FA0(&qword_100158678);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_100032FA0(&qword_100158680) - 8;
  __chkstk_darwin(v124);
  uint64_t v123 = (char *)&v123 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_100032FA0(&qword_100158688);
  __chkstk_darwin(v127);
  uint64_t v131 = (uint64_t)&v123 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_100032FA0(&qword_100158690);
  __chkstk_darwin(v129);
  int v132 = (char *)&v123 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_100032FA0(&qword_100158698);
  __chkstk_darwin(v130);
  uint64_t v156 = (uint64_t)&v123 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_100032FA0(&qword_1001586A0);
  __chkstk_darwin(v157);
  uint64_t v139 = (char *)&v123 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_100032FA0(&qword_1001586A8);
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v140 = (char *)&v123 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_100032FA0(&qword_1001586B0);
  __chkstk_darwin(v144);
  uint64_t v146 = (char *)&v123 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_100032FA0(&qword_1001586B8);
  uint64_t v145 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v141 = (char *)&v123 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = a1;
  ButtonStyleConfiguration.label.getter();
  uint64_t v36 = *v3;
  int v37 = v3[1];
  int v38 = v3[2];
  int v39 = v3[3];
  int v40 = v3[4];
  int v41 = v3[5];
  uint64_t v42 = 0x1000000000000;
  if (!v3[6]) {
    uint64_t v42 = 0;
  }
  int v126 = v3[5];
  BOOL v43 = v41 == 0;
  uint64_t v44 = 0x10000000000;
  if (v43) {
    uint64_t v44 = 0;
  }
  BOOL v43 = v40 == 0;
  long long v45 = &_mh_execute_header;
  if (v43) {
    long long v45 = 0;
  }
  BOOL v43 = v39 == 0;
  uint64_t v46 = 0x1000000;
  if (v43) {
    uint64_t v46 = 0;
  }
  BOOL v43 = v38 == 0;
  uint64_t v47 = 0x10000;
  if (v43) {
    uint64_t v47 = 0;
  }
  BOOL v43 = v37 == 0;
  uint64_t v48 = 256;
  if (v43) {
    uint64_t v48 = 0;
  }
  unint64_t v155 = v48 | v36 | v47 | v46 | (unint64_t)v45 | v44 | v42;
  unsigned __int8 v49 = sub_100031670(v155);
  sub_100034960(v49, *((double *)v3 + 1), *((double *)v3 + 2));
  static Font.Weight.regular.getter();
  uint64_t v50 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v16, 1, 1, v50);
  uint64_t v51 = static Font.system(size:weight:design:)();
  sub_100032F44((uint64_t)v16, &qword_1001568C0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v53 = v19;
  long long v54 = v19;
  uint64_t v55 = v125;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v54, v125);
  uint64_t v56 = (uint64_t *)&v23[*(int *)(v21 + 44)];
  *uint64_t v56 = KeyPath;
  v56[1] = v51;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v53, v55);
  uint64_t v57 = swift_getKeyPath();
  sub_100033344((uint64_t)v23, (uint64_t)v27, &qword_100158670);
  uint64_t v58 = (uint64_t *)&v27[*(int *)(v25 + 44)];
  *uint64_t v58 = v57;
  v58[1] = 0x3FE6666666666666;
  uint64_t v59 = (uint64_t)v23;
  uint64_t v60 = (uint64_t)v123;
  sub_100032F44(v59, &qword_100158670);
  uint64_t v61 = swift_getKeyPath();
  sub_100033344((uint64_t)v27, v60, &qword_100158678);
  uint64_t v62 = v60 + *(int *)(v124 + 44);
  *(void *)uint64_t v62 = v61;
  *(void *)(v62 + 8) = 1;
  *(unsigned char *)(v62 + 16) = 0;
  sub_100032F44((uint64_t)v27, &qword_100158678);
  uint64_t v63 = *((void *)v3 + 4);
  LOBYTE(v61) = v3[40];
  sub_100032F38(v63, v61);
  char v64 = sub_100034598(v63, v61);
  sub_100032EAC(v63, v61);
  if (v64)
  {
    char v65 = ButtonStyleConfiguration.isPressed.getter();
    double v66 = 0.75;
    uint64_t v67 = v155;
    if ((v65 & 1) == 0)
    {
      char v68 = v3[56];
      uint64_t v69 = swift_retain();
      uint64_t v70 = sub_100033AA8(v69, v68);
      swift_release();
      swift_getKeyPath();
      uint64_t v160 = v70;
      sub_1000331DC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_beginAccess();
      uint64_t v71 = *(void *)(v70 + 80);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v72 = sub_100031670(v67);
      BOOL v73 = sub_100033680(v72, v71);
      swift_bridgeObjectRelease();
      if (v73) {
        double v66 = 0.75;
      }
      else {
        double v66 = 1.0;
      }
    }
  }
  else
  {
    double v66 = 0.4;
    uint64_t v67 = v155;
  }
  uint64_t v74 = v131;
  sub_100033344(v60, v131, &qword_100158680);
  *(double *)(v74 + *(int *)(v127 + 36)) = v66;
  sub_100032F44(v60, &qword_100158680);
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    if ((v126 & 1) == 0) {
      goto LABEL_32;
    }
  }
  else
  {
    char v75 = v3[56];
    uint64_t v76 = swift_retain();
    uint64_t v77 = sub_100033AA8(v76, v75);
    swift_release();
    swift_getKeyPath();
    uint64_t v160 = v77;
    sub_1000331DC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    uint64_t v78 = *(void *)(v77 + 80);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v79 = sub_100031670(v67);
    BOOL v80 = sub_100033680(v79, v78);
    swift_bridgeObjectRelease();
    if (!v126)
    {
      if (!v80)
      {
        uint64_t v82 = sub_100035300(v67);
        goto LABEL_34;
      }
LABEL_32:
      uint64_t v82 = sub_1000BF7A0(v67);
LABEL_34:
      uint64_t v81 = v82;
      goto LABEL_35;
    }
  }
  if (qword_100154628 != -1) {
    swift_once();
  }
  uint64_t v81 = qword_100161230;
LABEL_35:
  swift_retain();
  uint64_t v83 = static Color.black.getter();
  char v84 = static Edge.Set.all.getter();
  sub_100031670(v67);
  uint64_t v85 = v135;
  uint64_t v86 = v134;
  uint64_t v87 = v137;
  (*(void (**)(char *, void, uint64_t))(v135 + 104))(v134, enum case for BlendMode.normal(_:), v137);
  uint64_t v88 = (uint64_t)v136;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v136, v86, v87);
  uint64_t v89 = (uint64_t)v138;
  sub_100033618(v88, (uint64_t)v138 + *(int *)(v133 + 36), (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  *(void *)uint64_t v89 = v81;
  *(void *)(v89 + 8) = v83;
  *(unsigned char *)(v89 + 16) = v84;
  swift_retain();
  swift_retain();
  sub_1000335B8(v88, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v87);
  swift_release();
  swift_release();
  uint64_t v90 = static Alignment.center.getter();
  uint64_t v92 = v91;
  uint64_t v93 = (uint64_t)v132;
  uint64_t v94 = (uint64_t)&v132[*(int *)(v129 + 36)];
  sub_100033344(v89, v94, &qword_100158668);
  uint64_t v95 = (uint64_t *)(v94 + *(int *)(sub_100032FA0(&qword_1001586C0) + 36));
  uint64_t *v95 = v90;
  v95[1] = v92;
  sub_100033344(v74, v93, &qword_100158688);
  sub_100032F44(v89, &qword_100158668);
  sub_100032F44(v74, &qword_100158688);
  uint64_t v96 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v138) = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v97 = type metadata accessor for RoundedCornerStyle();
  uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v97 - 8) + 104);
  uint64_t v99 = (uint64_t)v148;
  v98(v148, v96, v97);
  uint64_t v100 = v156;
  uint64_t v101 = v156 + *(int *)(v130 + 36);
  sub_100033618(v99, v101, (uint64_t (*)(void))&type metadata accessor for Capsule);
  *(_WORD *)(v101 + *(int *)(sub_100032FA0(&qword_1001586C8) + 36)) = 256;
  sub_100033344(v93, v100, &qword_100158690);
  sub_1000335B8(v99, (uint64_t (*)(void))&type metadata accessor for Capsule);
  sub_100032F44(v93, &qword_100158690);
  sub_100032FA0(&qword_1001586D0);
  uint64_t v102 = v158;
  uint64_t v103 = swift_allocObject();
  *(_OWORD *)(v103 + 16) = xmmword_100110A40;
  static ContentShapeKinds.hoverEffect.getter();
  static ContentShapeKinds.accessibility.getter();
  uint64_t v159 = v103;
  sub_1000331DC(&qword_1001586D8, (void (*)(uint64_t))&type metadata accessor for ContentShapeKinds);
  sub_100032FA0(&qword_1001586E0);
  sub_100040BE4(&qword_1001586E8, &qword_1001586E0);
  uint64_t v104 = v152;
  uint64_t v105 = v153;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v98((char *)v99, v138, v97);
  uint64_t v106 = (uint64_t)v139;
  uint64_t v107 = (uint64_t)&v139[*(int *)(v157 + 36)];
  sub_100033618(v99, v107, (uint64_t (*)(void))&type metadata accessor for Capsule);
  uint64_t v108 = sub_100032FA0(&qword_1001586F0);
  uint64_t v109 = v107 + *(int *)(v108 + 40);
  uint64_t v110 = v102;
  uint64_t v138 = *(void (**)(uint64_t, char *, uint64_t))(v102 + 16);
  v138(v109, v104, v105);
  *(unsigned char *)(v107 + *(int *)(v108 + 36)) = 0;
  uint64_t v111 = v156;
  sub_100033344(v156, v106, &qword_100158698);
  sub_1000335B8(v99, (uint64_t (*)(void))&type metadata accessor for Capsule);
  uint64_t v112 = *(void (**)(char *, uint64_t))(v110 + 8);
  uint64_t v158 = v110 + 8;
  v112(v104, v105);
  sub_100032F44(v111, &qword_100158698);
  long long v113 = v149;
  static CustomHoverEffect<>.automatic.getter();
  sub_10003479C();
  sub_1000331DC(&qword_100158750, (void (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect);
  long long v114 = v140;
  uint64_t v115 = v151;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v150 + 8))(v113, v115);
  sub_100032F44(v106, &qword_1001586A0);
  static ContentShapeKinds.interaction.getter();
  uint64_t v116 = (uint64_t)v146;
  uint64_t v117 = &v146[*(int *)(v144 + 36)];
  uint64_t v118 = sub_100032FA0(&qword_100158758);
  v138((uint64_t)&v117[*(int *)(v118 + 40)], v104, v105);
  *uint64_t v117 = 0;
  uint64_t v119 = v142;
  uint64_t v120 = v143;
  (*(void (**)(uint64_t, char *, uint64_t))(v142 + 16))(v116, v114, v143);
  v112(v104, v105);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v114, v120);
  sub_100031670(v155);
  sub_100034BE8();
  sub_10003483C();
  unint64_t v121 = v141;
  View.help(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100032F44(v116, &qword_1001586B0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v145 + 32))(v154, v121, v147);
}

void *_s10Calculator18KeypadButtonActionVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  char v4 = (void *)a2[2];
  a1[2] = v4;
  swift_retain();
  id v5 = v4;
  return a1;
}

uint64_t destroy for CalculatorButtonStyle(uint64_t a1)
{
  sub_100032EAC(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));

  return swift_release();
}

uint64_t sub_100032EAC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CalculatorButtonStyle(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  sub_100032F38(v4, v5);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  char v6 = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v6;
  swift_retain();
  return a1;
}

uint64_t sub_100032F38(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100032F44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100032FA0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100032FA0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100032FE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003302C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033074(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000330BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033104(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003314C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033194(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000331DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033224(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003326C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000332B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000332FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033344(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100032FA0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000333A8(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for EnvironmentValues();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    uint64_t v13 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      unint64_t v18 = a4;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v19 = sub_10000DAA8(a3, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return v20;
  }
  return a1;
}

uint64_t destroy for CalculatorModeSwitchPPTTests()
{
  return swift_release();
}

uint64_t sub_1000335B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100033618(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL sub_100033680(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000336E0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *a1;
  int v5 = a1[1];
  int v6 = a1[2];
  int v7 = a1[3];
  int v8 = a1[4];
  int v9 = a1[5];
  int v10 = a1[6];
  long long v47 = *(_OWORD *)(a2 + 72);
  sub_100032FA0(&qword_100157790);
  State.wrappedValue.getter();
  char v11 = *(unsigned char *)(a2 + 8);
  uint64_t v12 = swift_retain();
  sub_100033AA8(v12, v11);
  swift_release();
  char v41 = v10;
  char v42 = v8;
  uint64_t v13 = 0x1000000000000;
  if (!v10) {
    uint64_t v13 = 0;
  }
  char v44 = v6;
  uint64_t v14 = 0x10000000000;
  if (!v9) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = &_mh_execute_header;
  if (!v8) {
    uint64_t v15 = 0;
  }
  char v43 = v7;
  uint64_t v16 = 0x1000000;
  if (!v7) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = 0x10000;
  if (!v6) {
    uint64_t v17 = 0;
  }
  uint64_t v18 = 256;
  if (!v5) {
    uint64_t v18 = 0;
  }
  char v19 = sub_100031670(v18 | v36 | v17 | v16 | (unint64_t)v15 | v14 | v13);
  uint64_t v20 = sub_100033B98(v19);
  if (v20)
  {
    uint64_t v21 = v20;
    sub_100034264();
    swift_retain();
    uint64_t v22 = CalculateExpression.allowedOperations.getter();
    swift_release();
    char v23 = sub_100034408(v21, v22);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    char v39 = v23 ^ 1;
  }
  else
  {
    swift_release();
    char v39 = 0;
  }
  type metadata accessor for CalculatorKeypadViewModel();
  sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  uint64_t v38 = Environment.init<A>(_:)();
  char v25 = v24;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = static Anchor.Source<A>.bounds.getter();
  uint64_t v26 = (unsigned char *)swift_allocObject();
  v26[16] = v36;
  v26[17] = v5;
  v26[18] = v44;
  v26[19] = v43;
  v26[20] = v42;
  v26[21] = v9;
  v26[22] = v10;
  uint64_t v27 = swift_allocObject();
  long long v28 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v27 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v27 + 96) = v28;
  *(_OWORD *)(v27 + 112) = *(_OWORD *)(a2 + 96);
  *(void *)(v27 + 128) = *(void *)(a2 + 112);
  long long v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v27 + 32) = v29;
  long long v30 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v27 + 64) = v30;
  char v46 = v25 & 1;
  sub_100033AC4(a2);
  uint64_t v31 = Namespace.wrappedValue.getter();
  int v32 = static MatchedGeometryProperties.frame.getter();
  uint64_t result = static UnitPoint.center.getter();
  *(_DWORD *)(a3 + 9) = v48;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)&v48 + 3);
  *(_DWORD *)(a3 + 65) = *(_DWORD *)v45;
  *(_DWORD *)(a3 + 68) = *(_DWORD *)&v45[3];
  *(void *)a3 = v38;
  *(unsigned char *)(a3 + 8) = v46;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = KeyPath;
  *(unsigned char *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 41) = v36;
  *(unsigned char *)(a3 + 42) = v5;
  *(unsigned char *)(a3 + 43) = v44;
  *(unsigned char *)(a3 + 44) = v43;
  *(unsigned char *)(a3 + 45) = v42;
  *(unsigned char *)(a3 + 46) = v9;
  *(unsigned char *)(a3 + 47) = v41;
  *(void *)(a3 + 48) = v48;
  *(void *)(a3 + 56) = v49;
  *(unsigned char *)(a3 + 64) = v39 & 1;
  *(void *)(a3 + 72) = v40;
  *(void *)(a3 + 80) = sub_100037D2C;
  *(void *)(a3 + 88) = v26;
  *(void *)(a3 + 96) = sub_1000144B8;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = sub_100037F28;
  *(void *)(a3 + 120) = v27;
  *(unsigned char *)(a3 + 128) = v36;
  *(_DWORD *)(a3 + 132) = *(_DWORD *)((char *)&v47 + 3);
  *(_DWORD *)(a3 + 129) = v47;
  *(void *)(a3 + 136) = v31;
  *(_DWORD *)(a3 + 144) = v32;
  *(void *)(a3 + 152) = v34;
  *(void *)(a3 + 160) = v35;
  *(unsigned char *)(a3 + 168) = 1;
  return result;
}

__n128 initializeWithTake for TimestampSelectionType(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100033AA8(uint64_t a1, char a2)
{
  return sub_1000333A8(a1, a2, 0xD000000000000013, 0x800000010010AB80);
}

uint64_t sub_100033AC4(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for CalculatorKeypadViewModel()
{
  uint64_t result = qword_100157F30;
  if (!qword_100157F30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100033B98(char a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.clear.getter();
      break;
    case 2:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.negate.getter();
      break;
    case 3:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.percent.getter();
      break;
    case 4:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.divide.getter();
      break;
    case 5:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.multiply.getter();
      break;
    case 6:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.subtract.getter();
      break;
    case 7:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.add.getter();
      break;
    case 8:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.equals.getter();
      break;
    case 9:
    case 53:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.decimal.getter();
      break;
    case 11:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit0.getter();
      break;
    case 12:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit1.getter();
      break;
    case 13:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit2.getter();
      break;
    case 14:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit3.getter();
      break;
    case 15:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit4.getter();
      break;
    case 16:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit5.getter();
      break;
    case 17:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit6.getter();
      break;
    case 18:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit7.getter();
      break;
    case 19:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit8.getter();
      break;
    case 20:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit9.getter();
      break;
    case 21:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.openParenthesis.getter();
      break;
    case 22:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.closeParenthesis.getter();
      break;
    case 28:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.square.getter();
      break;
    case 29:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.cube.getter();
      break;
    case 30:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.power.getter();
      break;
    case 31:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.exponentialBaseEuler.getter();
      break;
    case 32:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.exponentialBase10.getter();
      break;
    case 33:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.reciprocal.getter();
      break;
    case 34:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.squareRoot.getter();
      break;
    case 35:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.cubeRoot.getter();
      break;
    case 36:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.root.getter();
      break;
    case 37:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.reverseRoot.getter();
      break;
    case 38:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.logarithmNatural.getter();
      break;
    case 39:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.logarithmBase10.getter();
      break;
    case 40:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.factorial.getter();
      break;
    case 41:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.sine.getter();
      break;
    case 42:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.cosine.getter();
      break;
    case 43:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.tangent.getter();
      break;
    case 44:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.eulerNumber.getter();
      break;
    case 45:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.ee.getter();
      break;
    case 47:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.hyperbolicSine.getter();
      break;
    case 48:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.hyperbolicCosine.getter();
      break;
    case 49:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.hyperbolicTangent.getter();
      break;
    case 50:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.pi.getter();
      break;
    case 51:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.random.getter();
      break;
    case 52:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.delete.getter();
      break;
    case 55:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.exponentialBaseCustom.getter();
      break;
    case 56:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.exponentialBase2.getter();
      break;
    case 57:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.logarithmBaseCustom.getter();
      break;
    case 58:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.logarithmBase2.getter();
      break;
    case 59:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.inverseSine.getter();
      break;
    case 60:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.inverseCosine.getter();
      break;
    case 61:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.inverseTangent.getter();
      break;
    case 62:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.inverseHyperbolicSine.getter();
      break;
    case 63:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.inverseHyperbolicCosine.getter();
      break;
    case 64:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.inverseHyperbolicTangent.getter();
      break;
    case 65:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digitA.getter();
      break;
    case 66:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digitB.getter();
      break;
    case 67:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digitC.getter();
      break;
    case 68:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digitD.getter();
      break;
    case 69:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digitE.getter();
      break;
    case 70:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digitF.getter();
      break;
    case 71:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digitFF.getter();
      break;
    case 72:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.digit00.getter();
      break;
    case 73:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.and.getter();
      break;
    case 74:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.or.getter();
      break;
    case 75:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.nor.getter();
      break;
    case 76:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.xor.getter();
      break;
    case 77:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.rightShift.getter();
      break;
    case 78:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.leftShift.getter();
      break;
    case 79:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.rightShiftCustom.getter();
      break;
    case 80:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.leftShiftCustom.getter();
      break;
    case 81:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.rightRotate.getter();
      break;
    case 82:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.leftRotate.getter();
      break;
    case 83:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.byteFlip.getter();
      break;
    case 84:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.wordFlip.getter();
      break;
    case 85:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.neg.getter();
      break;
    case 86:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.not.getter();
      break;
    case 87:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.mod.getter();
      break;
    case 88:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.drop.getter();
      break;
    case 89:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.swap.getter();
      break;
    case 90:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.rollOut.getter();
      break;
    case 91:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.rollIn.getter();
      break;
    case 92:
      type metadata accessor for CalculateExpression.Operation();
      uint64_t result = static CalculateExpression.Operation.enter.getter();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100034264()
{
  swift_getKeyPath();
  sub_1000343C0(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v1 = v0 + 24;
  }
  else
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v1 = v0 + 32;
  }
  return *(void *)v1;
}

uint64_t sub_100034378(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000343C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100034408(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_retain();
    char v3 = __CocoaSet.contains(_:)();
    swift_release();
    return v3 & 1;
  }
  else
  {
    if (*(void *)(a2 + 16)
      && (type metadata accessor for CalculateExpression.Operation(),
          sub_10003302C(&qword_100155C18, (void (*)(uint64_t))&type metadata accessor for CalculateExpression.Operation), v5 = dispatch thunk of Hashable._rawHashValue(seed:)(), v6 = -1 << *(unsigned char *)(a2 + 32), unint64_t v7 = v5 & ~v6, ((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0))
    {
      uint64_t v8 = ~v6;
      sub_10003302C((unint64_t *)&qword_100155010, (void (*)(uint64_t))&type metadata accessor for CalculateExpression.Operation);
      do
      {
        char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
        if (v9) {
          break;
        }
        unint64_t v7 = (v7 + 1) & v8;
      }
      while (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    else
    {
      char v9 = 0;
    }
    return v9 & 1;
  }
}

uint64_t sub_100034598(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  char v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    char v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)char v11 = 136315138;
    uint64_t v13 = sub_10000DAA8(1819242306, 0xE400000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_100032EAC(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

unint64_t sub_10003479C()
{
  unint64_t result = qword_1001586F8;
  if (!qword_1001586F8)
  {
    sub_1000317D8(&qword_1001586A0);
    sub_100039EB0();
    sub_100040BE4(&qword_100158748, &qword_1001586F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001586F8);
  }
  return result;
}

unint64_t sub_10003483C()
{
  unint64_t result = qword_100158760;
  if (!qword_100158760)
  {
    sub_1000317D8(&qword_1001586B0);
    sub_1000317D8(&qword_1001586A0);
    type metadata accessor for AutomaticHoverEffect();
    sub_10003479C();
    sub_1000331DC(&qword_100158750, (void (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect);
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100158768, &qword_100158758);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158760);
  }
  return result;
}

double sub_100034960(unsigned __int8 a1, double a2, double a3)
{
  if (qword_100154730 != -1) {
    swift_once();
  }
  double v6 = 0.43;
  if (!sub_100034AF8(a1, qword_1001590E8))
  {
    if (qword_100154738 != -1) {
      swift_once();
    }
    if (!sub_100034AF8(a1, qword_1001590F0))
    {
      if (qword_100154748 != -1) {
        swift_once();
      }
      if (sub_100034AF8(a1, qword_100159100))
      {
        double v6 = 0.44;
      }
      else
      {
        if (qword_100154740 != -1) {
          swift_once();
        }
        BOOL v7 = sub_100034AF8(a1, qword_1001590F8);
        double v8 = 0.3;
        if (a3 < a2) {
          double v8 = 0.34;
        }
        if (v7) {
          double v6 = 0.36;
        }
        else {
          double v6 = v8;
        }
      }
    }
  }
  return round(v6 * a3 + v6 * a3) * 0.5;
}

BOOL sub_100034AF8(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Swift::UInt v3 = a1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100034BE8()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_100035300(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0x1000000000000) == 0) {
    goto LABEL_5;
  }
  if (qword_100154528 != -1) {
    swift_once();
  }
  if (!sub_100034AF8(v1, static CalculatorButtonRepresentable.swappableButtons))
  {
LABEL_5:
    if ((v1 & 0x1000000FFLL) != 0x100000002)
    {
      if ((v1 & 0x10000) != 0)
      {
        if (qword_100154520 != -1) {
          swift_once();
        }
        if (sub_100034AF8(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
        {
          if (v1 <= 0x23u)
          {
            if (v1 != 8)
            {
              if (v1 != 30) {
                goto LABEL_34;
              }
              goto LABEL_52;
            }
LABEL_44:
            if (qword_1001545F8 != -1) {
              swift_once();
            }
            uint64_t v2 = &qword_100161200;
            return *v2;
          }
          if (v1 != 36 && v1 != 55) {
            goto LABEL_34;
          }
LABEL_52:
          if (qword_100154618 != -1) {
            swift_once();
          }
          uint64_t v2 = &qword_100161220;
          return *v2;
        }
      }
      if ((v1 & 0x100) != 0)
      {
        if (qword_100154518 != -1) {
          swift_once();
        }
        if (sub_100034AF8(v1, static CalculatorButtonRepresentable.shiftableButtons))
        {
          LOBYTE(v1) = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
          goto LABEL_34;
        }
      }
      if ((v1 & 0x10000FF) != 0x1000001)
      {
        if ((v1 & 0x1000000FFLL) == 0x100000002) {
          goto LABEL_52;
        }
LABEL_34:
        switch((char)v1)
        {
          case 1:
          case 2:
          case 3:
          case 52:
            break;
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 92:
            goto LABEL_44;
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 53:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
            goto LABEL_38;
          default:
            goto LABEL_52;
        }
      }
LABEL_41:
      if (qword_1001545E8 != -1) {
        swift_once();
      }
      uint64_t v2 = &qword_1001611F0;
      return *v2;
    }
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_30;
  }
  if (qword_100154520 != -1) {
    swift_once();
  }
  if (sub_100034AF8(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
  {
    if (v1 > 0x23u)
    {
      if (v1 == 36 || v1 == 55) {
        goto LABEL_52;
      }
    }
    else
    {
      if (v1 == 8) {
        goto LABEL_44;
      }
      if (v1 == 30) {
        goto LABEL_52;
      }
    }
  }
  else
  {
    if ((v1 & 0x100) == 0) {
      goto LABEL_36;
    }
LABEL_30:
    if (qword_100154518 != -1) {
      swift_once();
    }
    if (sub_100034AF8(v1, static CalculatorButtonRepresentable.shiftableButtons))
    {
      LOBYTE(v1) = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
    }
    else
    {
LABEL_36:
      if ((v1 & 0x10000FF) == 0x1000001 || (v1 & 0x1000000FFLL) == 0x100000002) {
        goto LABEL_41;
      }
    }
  }
  switch((char)v1)
  {
    case 1:
    case 2:
    case 3:
    case 34:
    case 52:
      goto LABEL_41;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 92:
      goto LABEL_44;
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 51:
    case 53:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
LABEL_38:
      if (qword_100154608 != -1) {
        swift_once();
      }
      uint64_t v2 = &qword_100161210;
      break;
    default:
      goto LABEL_52;
  }
  return *v2;
}

uint64_t sub_1000356E0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000356F0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003576C()
{
  unint64_t result = qword_100157518;
  if (!qword_100157518)
  {
    sub_1000317D8(&qword_1001574C0);
    sub_1000317D8(&qword_1001574B0);
    sub_100040BE4(&qword_100157510, &qword_1001574B0);
    sub_100031A10();
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100157520, &qword_100157528);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157518);
  }
  return result;
}

uint64_t sub_100035880(char a1)
{
  uint64_t result = 1701736270;
  switch(a1)
  {
    case 1:
      return 0x7261656C436C6C41;
    case 2:
      return 0x65746167654ELL;
    case 3:
      unsigned int v3 = 1668441424;
      return v3 | 0x746E6500000000;
    case 4:
      return 0x656469766944;
    case 5:
      return 0x796C7069746C754DLL;
    case 6:
      return 0x7463617274627553;
    case 7:
      return 6579265;
    case 8:
      return 0x736C61757145;
    case 9:
      return 0x6C616D69636544;
    case 10:
      return 1701080909;
    case 11:
      return 1869768026;
    case 12:
      return 6647375;
    case 13:
      return 7305044;
    case 14:
      return 0x6565726854;
    case 15:
      return 1920298822;
    case 16:
      return 1702259014;
    case 17:
      return 7891283;
    case 18:
      return 0x6E65766553;
    case 19:
      return 0x7468676945;
    case 20:
      return 1701734734;
    case 21:
      return 0x657261506E65704FLL;
    case 22:
    case 38:
    case 48:
    case 55:
    case 56:
    case 77:
    case 80:
      return 0xD000000000000010;
    case 23:
      return 0x6C4379726F6D654DLL;
    case 24:
      return 0x644179726F6D654DLL;
    case 25:
      return 0x755379726F6D654DLL;
    case 26:
      return 0x655279726F6D654DLL;
    case 27:
      return 0x7466696853;
    case 28:
      return 0x657261757153;
    case 29:
      return 1700951363;
    case 30:
      return 0x7265776F50;
    case 31:
      return 0x6E65746E6F707845;
    case 32:
      return 0xD000000000000011;
    case 33:
      return 0x636F727069636552;
    case 34:
      return 0x6F52657261757153;
    case 35:
      return 0x746F6F5265627543;
    case 36:
      return 1953460050;
    case 37:
      return 0x746F6F5258;
    case 39:
    case 58:
      return 0x6874697261676F4CLL;
    case 40:
      return 0x6169726F74636146;
    case 41:
      return 1701734739;
    case 42:
      return 0x656E69736F43;
    case 43:
      unsigned int v3 = 1735287124;
      return v3 | 0x746E6500000000;
    case 44:
      return 0x6D754E72656C7545;
    case 45:
      return 0x776F5073656D6954;
    case 46:
      return 0x736E6169646152;
    case 47:
      return 0x6C6F627265707948;
    case 49:
      return 0xD000000000000011;
    case 50:
      return 26960;
    case 51:
      return 0x6D6F646E6152;
    case 52:
      return 0x6574656C6544;
    case 53:
      return 0x616D6D6F43;
    case 54:
      return 0x73656572676544;
    case 57:
      return 0x6874697261676F4CLL;
    case 59:
      return 0x5365737265766E49;
    case 60:
      return 0x4365737265766E49;
    case 61:
      return 0x5465737265766E49;
    case 62:
      return 0xD000000000000015;
    case 63:
      return 0xD000000000000017;
    case 64:
      return 0xD000000000000018;
    case 65:
      return 65;
    case 66:
      return 66;
    case 67:
      return 67;
    case 68:
      return 68;
    case 69:
      return 69;
    case 70:
      return 70;
    case 71:
      return 17990;
    case 72:
      return 12336;
    case 73:
      return 0x4165736977746942;
    case 74:
      return 0x4F65736977746942;
    case 75:
      return 0x4E65736977746942;
    case 76:
      return 0x5865736977746942;
    case 78:
      return 0x666968537466654CLL;
    case 79:
      return 0xD000000000000011;
    case 81:
      return 0x6952657461746F52;
    case 82:
      return 0x654C657461746F52;
    case 83:
      unsigned int v4 = 1702132034;
      goto LABEL_82;
    case 84:
      unsigned int v4 = 1685221207;
LABEL_82:
      uint64_t result = v4 | 0x70696C4600000000;
      break;
    case 85:
      uint64_t result = 6776174;
      break;
    case 86:
      uint64_t result = 7630702;
      break;
    case 87:
      uint64_t result = 0x73756C75646F4DLL;
      break;
    case 88:
      uint64_t result = 1886351940;
      break;
    case 89:
      uint64_t result = 1885435731;
      break;
    case 90:
      uint64_t result = 0x70556C6C6F52;
      break;
    case 91:
      uint64_t result = 0x6E776F446C6C6F52;
      break;
    case 92:
      uint64_t result = 0x7265746E45;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100036080()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_100036928()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_100036EC8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LayoutSubviews();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100036F0C(uint64_t a1, int *a2)
{
  sub_100032FA0(&qword_1001590B8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v5 = *(void *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = a1 + a2[6];
  sub_100032FA0(&qword_1001590B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for LayoutDirection();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = a1 + a2[7];
  uint64_t v12 = sub_100032FA0(&qword_1001593C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_100032FA0(&qword_1001593D0);
  swift_release();
  swift_release();
  uint64_t v13 = a1 + a2[9];
  uint64_t v14 = sub_100032FA0(&qword_1001593D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  sub_100032FA0(&qword_1001593E0);
  swift_release();
  uint64_t v15 = a1 + a2[10];
  uint64_t v16 = sub_100032FA0(&qword_1001593E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  sub_100032FA0(&qword_1001593F0);

  return swift_release();
}

uint64_t sub_100037248(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100156550);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000372A8@<X0>(unsigned char *a1@<X8>)
{
  sub_100037384();
  EnvironmentValues.subscript.getter();
  sub_100032FA0(&qword_100154830);
  Binding.wrappedValue.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void *sub_100037338(unsigned char *a1, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t result = a2(&v4);
  *a1 = v4;
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for CalculatorAppMode(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

unint64_t sub_100037384()
{
  unint64_t result = qword_100154828;
  if (!qword_100154828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100154828);
  }
  return result;
}

uint64_t sub_1000373D8(uint64_t a1)
{
  return EnvironmentValues.subscript.setter();
}

void destroy for KeypadButtonAction(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void **)(a1 + 16);
}

double sub_100037470@<D0>(uint64_t a1@<X8>)
{
  sub_1000374C8();
  EnvironmentValues.subscript.getter();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  return result;
}

unint64_t sub_1000374C8()
{
  unint64_t result = qword_1001548A0;
  if (!qword_1001548A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001548A0);
  }
  return result;
}

char *sub_10003751C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100037608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100156550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_100037670@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19 = a16;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 72) = v33;
  *(_OWORD *)(a9 + 88) = v34;
  *(_OWORD *)(a9 + 104) = v35;
  *(_OWORD *)(a9 + 120) = v36;
  double result = *(double *)&v30;
  *(_OWORD *)(a9 + 24) = v30;
  *(_OWORD *)(a9 + 40) = v31;
  *(void *)a9 = v19;
  *(void *)(a9 + 8) = a17;
  *(unsigned char *)(a9 + 16) = a18 & 1;
  *(_OWORD *)(a9 + 56) = v32;
  return result;
}

uint64_t getEnumTagSinglePayload for KeypadButtonAction(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeypadButtonAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for CalculatorKeypadButton(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *double result = v2;
  return result;
}

BOOL sub_1000378D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t storeEnumTagSinglePayload for EdgeOutset(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)double result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for EdgeOutset(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100037934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000379A4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_10003796C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000379A4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000379A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

__n128 initializeWithTake for CalculatorButtonStyle(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for CalculatorButtonRepresentable(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 92 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 92) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xA4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xA3)
  {
    unsigned int v6 = ((a2 - 164) >> 8) + 1;
    *__n128 result = a2 + 92;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 92;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CalculatorButtonRepresentable(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xA4) {
    goto LABEL_17;
  }
  if (a2 + 92 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 92) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 92;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 92;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 92;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x5D;
  int v8 = v6 - 93;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for CalculatorKeypadLayout(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for CalculatorButtonRepresentable()
{
  return &type metadata for CalculatorButtonRepresentable;
}

unsigned char *sub_100037BB4(unsigned char *a1)
{
  return sub_100037BD4(a1, *(unsigned char *)(v1 + 16));
}

unsigned char *sub_100037BBC(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

unsigned char *sub_100037BD4(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for CalculatorAppMode()
{
  return &type metadata for CalculatorAppMode;
}

void sub_100037C0C(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

__n128 initializeWithTake for SidebarButton(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100037C2C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000336E0(a1, v2 + 16, a2);
}

ValueMetadata *type metadata accessor for CalculatorKeypadButton()
{
  return &type metadata for CalculatorKeypadButton;
}

__n128 initializeWithTake for BounceEffect(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for ModeButtonAnchorKey()
{
  return &type metadata for ModeButtonAnchorKey;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t sub_100037C74(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10002FD8C(a9, a1, a2, a3, a4);
}

uint64_t getEnumTagSinglePayload for FocusField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

void sub_100037D10(void *a1@<X8>)
{
  *a1 = 0;
}

ValueMetadata *type metadata accessor for CalculatorButtonView()
{
  return &type metadata for CalculatorButtonView;
}

ValueMetadata *type metadata accessor for DelayEffectModifier()
{
  return &type metadata for DelayEffectModifier;
}

uint64_t getEnumTagSinglePayload for BackgroundDimView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

double sub_100037D94()
{
  return sub_100021678();
}

ValueMetadata *type metadata accessor for CalculatorKeypadLayout()
{
  return &type metadata for CalculatorKeypadLayout;
}

double sub_100037DC0@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1000217F8(a1).n128_u64[0];
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ModeButtonAccessibilityModifiers(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)double result = v2;
  return result;
}

__n128 initializeWithTake for PresentModeMenuAction(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for FocusField()
{
  return &type metadata for FocusField;
}

ValueMetadata *type metadata accessor for CalculatorMainView()
{
  return &type metadata for CalculatorMainView;
}

uint64_t getEnumTagSinglePayload for HistoryViewFirstLaunch(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for AccessibilityMathEquationViewModifier()
{
  return &type metadata for AccessibilityMathEquationViewModifier;
}

uint64_t type metadata accessor for InputContainerView()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for InputTextView()
{
  return &type metadata for InputTextView;
}

uint64_t type metadata accessor for CalculatorMDMRestrictionsManager()
{
  uint64_t result = qword_100155E08;
  if (!qword_100155E08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorButtonImage()
{
  return &type metadata for CalculatorButtonImage;
}

ValueMetadata *type metadata accessor for CalculatorKeypadView()
{
  return &type metadata for CalculatorKeypadView;
}

ValueMetadata *type metadata accessor for KeypadButtonAction()
{
  return &type metadata for KeypadButtonAction;
}

ValueMetadata *type metadata accessor for DisplayViewFrame()
{
  return &type metadata for DisplayViewFrame;
}

uint64_t sub_100037F28(double *a1)
{
  return sub_1000143D4(a1);
}

void sub_100037F30(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001AE48(a1, v2 + 16, *(void *)(v2 + 136), a2);
}

ValueMetadata *type metadata accessor for ModeMenuPresentationState()
{
  return &type metadata for ModeMenuPresentationState;
}

uint64_t type metadata accessor for CalculatorToolbarViewModel()
{
  uint64_t result = qword_100156E78;
  if (!qword_100156E78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for CalculatorUnitConversionViewModelWrapper(uint64_t a1)
{
  return sub_10001F0E0(a1, qword_100155F10);
}

ValueMetadata *type metadata accessor for CalculatorButtonStyle()
{
  return &type metadata for CalculatorButtonStyle;
}

ValueMetadata *type metadata accessor for Constants.NameSpaceID()
{
  return &type metadata for Constants.NameSpaceID;
}

ValueMetadata *type metadata accessor for MathPaperContainerView()
{
  return &type metadata for MathPaperContainerView;
}

void sub_100037FF0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

ValueMetadata *type metadata accessor for CalculatorToolbar()
{
  return &type metadata for CalculatorToolbar;
}

ValueMetadata *type metadata accessor for CalculatorModeSwitchPPTTests()
{
  return &type metadata for CalculatorModeSwitchPPTTests;
}

ValueMetadata *type metadata accessor for CalculatorDetailsTopView()
{
  return &type metadata for CalculatorDetailsTopView;
}

uint64_t storeEnumTagSinglePayload for HistoryViewFirstLaunch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorButtonText()
{
  return &type metadata for CalculatorButtonText;
}

void sub_100038080(uint64_t a1)
{
  sub_10000D35C(a1, *(unsigned char *)(v1 + 16));
}

ValueMetadata *type metadata accessor for BackgroundDimView()
{
  return &type metadata for BackgroundDimView;
}

uint64_t type metadata accessor for CalculatorUnitConversionDisplayView()
{
  return sub_1000135B0();
}

uint64_t type metadata accessor for CalculatorRPNDisplayView()
{
  return sub_1000135B0();
}

unsigned char *storeEnumTagSinglePayload for FocusField(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModeButtonAccessibilityModifiers()
{
  return &type metadata for ModeButtonAccessibilityModifiers;
}

ValueMetadata *type metadata accessor for TappableOutsets()
{
  return &type metadata for TappableOutsets;
}

uint64_t type metadata accessor for CalculatorStandardDisplayView()
{
  return sub_1000135B0();
}

uint64_t type metadata accessor for CalculatorExpressionManager()
{
  uint64_t result = qword_1001592B8;
  if (!qword_1001592B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorContainerView()
{
  return &type metadata for CalculatorContainerView;
}

unsigned char *storeEnumTagSinglePayload for ModeMenuPresentationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ModeMenuPresentationState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for ModeMenuTip()
{
  return &type metadata for ModeMenuTip;
}

unsigned char *storeEnumTagSinglePayload for CalculatorAlertMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CalculatorAlertMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for CalculatorAlertMode()
{
  return &type metadata for CalculatorAlertMode;
}

unsigned char *storeEnumTagSinglePayload for CalculatorAppMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorModeButtonView()
{
  return &type metadata for CalculatorModeButtonView;
}

ValueMetadata *type metadata accessor for CalculatorAppAlertView()
{
  return &type metadata for CalculatorAppAlertView;
}

__n128 initializeWithTake for FilteredHistoryRecord(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for SidebarButton()
{
  return &type metadata for SidebarButton;
}

uint64_t type metadata accessor for AppSettings()
{
  uint64_t result = qword_10015A038;
  if (!qword_10015A038) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorAlertModePreferenceKey()
{
  return &type metadata for CalculatorAlertModePreferenceKey;
}

ValueMetadata *type metadata accessor for CalculatorButtonLabelLayout()
{
  return &type metadata for CalculatorButtonLabelLayout;
}

double sub_1000386AC@<D0>(uint64_t a1@<X8>)
{
  return sub_10001323C(a1);
}

uint64_t type metadata accessor for CalculatorHistoryView()
{
  uint64_t result = qword_100158158;
  if (!qword_100158158) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorDisplayView()
{
  return &type metadata for CalculatorDisplayView;
}

__n128 initializeWithTake for HistoryDeletionConfirmationView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for CalculateKey(uint64_t a1)
{
}

uint64_t sub_100038740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100018EF0(a1, *(unsigned char *)(v2 + 8), a2);
}

ValueMetadata *type metadata accessor for InsettableRoundendRectangle()
{
  return &type metadata for InsettableRoundendRectangle;
}

ValueMetadata *type metadata accessor for AXMathEquationExpression()
{
  return &type metadata for AXMathEquationExpression;
}

ValueMetadata *type metadata accessor for PresentModeMenuAction()
{
  return &type metadata for PresentModeMenuAction;
}

uint64_t sub_10003879C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001B170(*v2, v2[1], v2[2], v2[3], a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t sub_1000387B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_1000387BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001B7BC(*(void (**)(double))(v1 + 48), *(void (**)(uint64_t))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

const char *sub_1000387D0()
{
  return "GreyParrot";
}

const char *sub_1000387E4()
{
  return "Notes";
}

void sub_1000387F8()
{
  sub_1000389A4(319, &qword_10015A238, (uint64_t (*)(uint64_t))&type metadata accessor for OpenWindowAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_1000389A4(319, &qword_10015A240, (uint64_t (*)(uint64_t))type metadata accessor for CalculatorViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LazyState);
    if (v1 <= 0x3F)
    {
      sub_1000389A4(319, (unint64_t *)&unk_10015A248, (uint64_t (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LazyState);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1000389A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_100038A08(unsigned __int8 *a1, char *a2)
{
  return sub_100018D24(*a1, *a2);
}

__n128 sub_100038A14()
{
  __n128 result = *(__n128 *)(v0 + 24);
  *(__n128 *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize) = result;
  return result;
}

uint64_t sub_100038A2C()
{
  return sub_10003C920(*(void *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t type metadata accessor for CalculatorUnitConversionViewModel(uint64_t a1)
{
  return sub_10001F0E0(a1, qword_100155FD0);
}

uint64_t sub_100038A6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100025664(*(void *)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(double *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t type metadata accessor for CalculatorPresentationView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100038A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t getEnumTagSinglePayload for CalculatorModeButtonView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 136);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for CalculatorDetailsView()
{
  return &type metadata for CalculatorDetailsView;
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

uint64_t sub_100038B38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100038B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100038B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100038B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100038B78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100038B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100038B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100038BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

__n128 initializeWithTake for CalculatorContainerView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

__n128 initializeWithTake for CalculatorMainView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *sub_100038BE8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100038C4C()
{
  uint64_t v0 = sub_100032FA0(&qword_100155258);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = &qword_100154BB0;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_100155260;
  }

  return sub_100032FA0(v2);
}

unint64_t sub_100038CAC()
{
  unint64_t result = qword_100154A58;
  if (!qword_100154A58)
  {
    sub_10001CE8C(255, &qword_100154A50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100154A58);
  }
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for TappableOutsets(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for TappableOutsets(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

NSString sub_100038D74()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001610F0 = (uint64_t)result;
  return result;
}

NSString sub_100038DAC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100161108 = (uint64_t)result;
  return result;
}

void type metadata accessor for CalculateEngine(uint64_t a1)
{
}

uint64_t sub_100038DF8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100038E04()
{
  unint64_t result = qword_100157638;
  if (!qword_100157638)
  {
    sub_1000317D8(&qword_100157640);
    sub_100040BE4(&qword_100157648, &qword_100157650);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157638);
  }
  return result;
}

unint64_t sub_100038E9C()
{
  unint64_t result = qword_1001576F8;
  if (!qword_1001576F8)
  {
    sub_1000317D8(&qword_100157700);
    sub_10001B07C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001576F8);
  }
  return result;
}

unint64_t sub_100038F10()
{
  unint64_t result = qword_100156E08;
  if (!qword_100156E08)
  {
    sub_1000317D8(&qword_100156E10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156E08);
  }
  return result;
}

uint64_t sub_100038F6C()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F70 = result;
  return result;
}

uint64_t sub_100038F9C()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F90 = result;
  return result;
}

unint64_t sub_100038FD8()
{
  unint64_t result = qword_100157598;
  if (!qword_100157598)
  {
    sub_1000317D8(&qword_1001575A0);
    sub_100039740();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157598);
  }
  return result;
}

uint64_t sub_10003904C()
{
  uint64_t result = static Color.orange.getter();
  qword_100161140 = result;
  return result;
}

uint64_t sub_10003906C(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154538, &qword_100161140, &qword_100161200);
}

uint64_t sub_100039098(uint64_t a1)
{
  return sub_100008350(a1, &qword_1001611F0);
}

uint64_t sub_1000390AC(uint64_t a1)
{
  return sub_100008350(a1, &qword_100161210);
}

uint64_t sub_1000390C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  *a4 = *a3;

  return swift_retain();
}

uint64_t sub_10003911C()
{
  uint64_t result = static Color.primary.getter();
  qword_100161148 = result;
  return result;
}

__n128 sub_10003913C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v27 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v18 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = v18;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  __n128 result = v32;
  *(_OWORD *)(a9 + 48) = v31;
  *(__n128 *)(a9 + 64) = v32;
  return result;
}

uint64_t sub_1000392DC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    char v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[11];
  a9[10] = v13[10];
  a9[11] = v24;
  a9[12] = v13[12];
  *(_OWORD *)((char *)a9 + 201) = *(_OWORD *)((char *)v13 + 201);
  long long v25 = v13[7];
  a9[6] = v13[6];
  a9[7] = v25;
  long long v26 = v13[9];
  a9[8] = v13[8];
  a9[9] = v26;
  long long v27 = v13[3];
  a9[2] = v13[2];
  a9[3] = v27;
  long long v28 = v13[5];
  a9[4] = v13[4];
  a9[5] = v28;
  long long v29 = v13[1];
  *a9 = *v13;
  a9[1] = v29;
  a9[18] = v35;
  a9[19] = v36;
  a9[20] = v37;
  a9[14] = v31;
  a9[15] = v32;
  a9[16] = v33;
  a9[17] = v34;

  return sub_1000069D4((uint64_t)v13);
}

double sub_1000394C4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10002611C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100154FE8, &qword_100155000).n128_u64[0];
  return result;
}

unint64_t sub_100039520()
{
  unint64_t result = qword_100155AB0;
  if (!qword_100155AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155AB0);
  }
  return result;
}

uint64_t sub_100039574(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100154880);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000395D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10003963C()
{
  if (!qword_100157C78)
  {
    unint64_t v0 = type metadata accessor for AccessibilityFocusState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100157C78);
    }
  }
}

unint64_t sub_10003969C()
{
  unint64_t result = qword_100159518;
  if (!qword_100159518)
  {
    sub_1000317D8(&qword_100154A48);
    sub_100033224(&qword_100159520, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159518);
  }
  return result;
}

unint64_t sub_100039740()
{
  unint64_t result = qword_1001575A8;
  if (!qword_1001575A8)
  {
    sub_1000317D8(&qword_1001575B0);
    sub_100023B78();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001575A8);
  }
  return result;
}

unint64_t sub_1000397BC()
{
  unint64_t result = qword_100157610;
  if (!qword_100157610)
  {
    sub_1000317D8(&qword_1001575C0);
    sub_1000299E0();
    sub_100040BE4(&qword_100157658, &qword_100157660);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157610);
  }
  return result;
}

unint64_t sub_10003985C()
{
  unint64_t result = qword_100156C70;
  if (!qword_100156C70)
  {
    sub_1000317D8(&qword_100156C78);
    sub_100028FAC(&qword_100156C80, &qword_100156C50, (void (*)(void))sub_100039D70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156C70);
  }
  return result;
}

unint64_t sub_100039908()
{
  unint64_t result = qword_100156DE8;
  if (!qword_100156DE8)
  {
    sub_1000317D8(&qword_100156DF0);
    sub_10001962C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156DE8);
  }
  return result;
}

unint64_t sub_10003997C()
{
  unint64_t result = qword_100155A68;
  if (!qword_100155A68)
  {
    sub_1000317D8(&qword_100155A58);
    sub_1000076A4(&qword_100155A70, &qword_100155A78, (void (*)(void))sub_10003BD88, (void (*)(void))sub_10000772C);
    sub_1000076A4(&qword_100155A90, &qword_100155A60, (void (*)(void))sub_10006E78C, (void (*)(void))sub_100039520);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155A68);
  }
  return result;
}

unint64_t sub_100039A68()
{
  unint64_t result = qword_1001574F8;
  if (!qword_1001574F8)
  {
    sub_1000317D8(&qword_100157500);
    sub_100021FA0();
    sub_100021FF4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001574F8);
  }
  return result;
}

uint64_t sub_100039AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,char a23)
{
  if (a23)
  {
    char v24 = a6 & 1;
    swift_retain();
    swift_retain();
    sub_100032F38(a5, v24);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    char v27 = a22 & 1;
    return sub_1000083A4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             v27);
  }
}

uint64_t sub_100039BF8(uint64_t result)
{
  *(unsigned char *)(result + 169) = 0;
  return result;
}

uint64_t sub_100039C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,char a23)
{
  if (a23)
  {
    char v24 = a6 & 1;
    swift_release();
    swift_release();
    sub_100032EAC(a5, v24);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    char v27 = a22 & 1;
    return sub_10000FC3C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             v27);
  }
}

uint64_t sub_100039D10(uint64_t result)
{
  *(unsigned char *)(result + 168) = 1;
  return result;
}

unint64_t sub_100039D1C()
{
  unint64_t result = qword_1001595C0;
  if (!qword_1001595C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001595C0);
  }
  return result;
}

unint64_t sub_100039D70()
{
  unint64_t result = qword_100156C88;
  if (!qword_100156C88)
  {
    sub_1000317D8(&qword_100156C90);
    sub_10000C99C(&qword_100156C98, &qword_100156CA0, (void (*)(void))sub_100039FF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156C88);
  }
  return result;
}

unint64_t sub_100039E10()
{
  unint64_t result = qword_100156D10;
  if (!qword_100156D10)
  {
    sub_1000317D8(&qword_100156C60);
    sub_10000C99C(&qword_100156D18, &qword_100156D20, (void (*)(void))sub_10003A018);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156D10);
  }
  return result;
}

unint64_t sub_100039EB0()
{
  unint64_t result = qword_100158700;
  if (!qword_100158700)
  {
    sub_1000317D8(&qword_100158698);
    sub_100039F50();
    sub_100040BE4(&qword_100158740, &qword_1001586C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158700);
  }
  return result;
}

unint64_t sub_100039F50()
{
  unint64_t result = qword_100158708;
  if (!qword_100158708)
  {
    sub_1000317D8(&qword_100158690);
    sub_10003A040();
    sub_100040BE4(&qword_100158738, &qword_1001586C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158708);
  }
  return result;
}

uint64_t sub_100039FF0()
{
  return sub_10000CA40(&qword_100156CA8, &qword_100156CB0, (void (*)(void))sub_10003A278);
}

uint64_t sub_10003A018()
{
  return sub_10000CA40(&qword_100156D28, &qword_100156D30, (void (*)(void))sub_10003A2A0);
}

unint64_t sub_10003A040()
{
  unint64_t result = qword_100158710;
  if (!qword_100158710)
  {
    sub_1000317D8(&qword_100158688);
    sub_10003A2C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158710);
  }
  return result;
}

unint64_t sub_10003A0BC()
{
  unint64_t result = qword_1001559C8;
  if (!qword_1001559C8)
  {
    sub_1000317D8(&qword_1001559C0);
    sub_10003A408();
    sub_100040BE4(&qword_100155A10, &qword_100155A18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001559C8);
  }
  return result;
}

unint64_t sub_10003A15C()
{
  unint64_t result = qword_1001599C8;
  if (!qword_1001599C8)
  {
    sub_1000317D8(&qword_1001599C0);
    sub_10003A484();
    sub_100040BE4(&qword_100155BE8, &qword_100154880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001599C8);
  }
  return result;
}

unint64_t sub_10003A1FC()
{
  unint64_t result = qword_100159540;
  if (!qword_100159540)
  {
    sub_1000317D8(&qword_100159528);
    sub_10003A5D0();
    sub_10003D8C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159540);
  }
  return result;
}

uint64_t sub_10003A278()
{
  return sub_10000CA40(&qword_100156CB8, &qword_100156CC0, (void (*)(void))sub_10003A670);
}

uint64_t sub_10003A2A0()
{
  return sub_10000CA40(&qword_100156D38, &qword_100156D40, (void (*)(void))sub_10003A710);
}

unint64_t sub_10003A2C8()
{
  unint64_t result = qword_100158718;
  if (!qword_100158718)
  {
    sub_1000317D8(&qword_100158680);
    sub_10003A85C();
    sub_100040BE4(&qword_100156AF0, &qword_100156AF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158718);
  }
  return result;
}

unint64_t sub_10003A368()
{
  unint64_t result = qword_100155BC8;
  if (!qword_100155BC8)
  {
    sub_1000317D8(&qword_100155B08);
    sub_10003A978();
    sub_100040BE4(&qword_100155BE8, &qword_100154880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155BC8);
  }
  return result;
}

unint64_t sub_10003A408()
{
  unint64_t result = qword_1001559D0;
  if (!qword_1001559D0)
  {
    sub_1000317D8(&qword_1001559D8);
    sub_100006298();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001559D0);
  }
  return result;
}

unint64_t sub_10003A484()
{
  unint64_t result = qword_1001599D0;
  if (!qword_1001599D0)
  {
    sub_1000317D8(&qword_1001599D8);
    sub_10003AC28();
    sub_100040BE4(&qword_100156AE0, &qword_100156AE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001599D0);
  }
  return result;
}

unint64_t sub_10003A524()
{
  unint64_t result = qword_100157140;
  if (!qword_100157140)
  {
    sub_1000317D8(&qword_100157138);
    sub_10003ACC8();
    sub_10003314C(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157140);
  }
  return result;
}

unint64_t sub_10003A5D0()
{
  unint64_t result = qword_100159548;
  if (!qword_100159548)
  {
    sub_1000317D8(&qword_100159500);
    sub_100008D84();
    sub_100040BE4(&qword_100159558, &qword_100159560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159548);
  }
  return result;
}

unint64_t sub_10003A670()
{
  unint64_t result = qword_100156CC8;
  if (!qword_100156CC8)
  {
    sub_1000317D8(&qword_100156CD0);
    sub_10000A688(&qword_100156CD8, &qword_100156CE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156CC8);
  }
  return result;
}

unint64_t sub_10003A710()
{
  unint64_t result = qword_100156D48;
  if (!qword_100156D48)
  {
    sub_1000317D8(&qword_100156D50);
    sub_10000A688(&qword_100156D58, &qword_100156D60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156D48);
  }
  return result;
}

unint64_t sub_10003A7B0()
{
  unint64_t result = qword_100157550;
  if (!qword_100157550)
  {
    sub_1000317D8(&qword_1001574C8);
    sub_10003576C();
    sub_100031820(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157550);
  }
  return result;
}

unint64_t sub_10003A85C()
{
  unint64_t result = qword_100158720;
  if (!qword_100158720)
  {
    sub_1000317D8(&qword_100158678);
    sub_10003AE08();
    sub_100040BE4(&qword_100155730, &qword_100155738);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158720);
  }
  return result;
}

unint64_t sub_10003A8FC()
{
  unint64_t result = qword_1001595C8;
  if (!qword_1001595C8)
  {
    sub_1000317D8(&qword_100159590);
    sub_10003B0A8();
    sub_100005018();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001595C8);
  }
  return result;
}

unint64_t sub_10003A978()
{
  unint64_t result = qword_100155BD0;
  if (!qword_100155BD0)
  {
    sub_1000317D8(&qword_100155B00);
    sub_10003B220();
    sub_100040BE4(&qword_100155BA0, &qword_100155BA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155BD0);
  }
  return result;
}

uint64_t sub_10003AA18()
{
  return sub_100023158(&qword_100155B58, &qword_100155B60, (void (*)(void))sub_10003B520);
}

unint64_t sub_10003AA48()
{
  unint64_t result = qword_100157718;
  if (!qword_100157718)
  {
    sub_1000317D8(&qword_100157720);
    sub_10003B550();
    sub_100040BE4(&qword_100157750, &qword_100157758);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157718);
  }
  return result;
}

unint64_t sub_10003AAE8()
{
  unint64_t result = qword_100157080;
  if (!qword_100157080)
  {
    sub_1000317D8(&qword_100157088);
    sub_100040BE4(&qword_100157090, &qword_100157098);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157080);
  }
  return result;
}

unint64_t sub_10003AB88()
{
  unint64_t result = qword_100159A98;
  if (!qword_100159A98)
  {
    sub_1000317D8(&qword_1001590D8);
    sub_100040BE4(&qword_100159AA0, &qword_1001590D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159A98);
  }
  return result;
}

unint64_t sub_10003AC28()
{
  unint64_t result = qword_1001599E0;
  if (!qword_1001599E0)
  {
    sub_1000317D8(&qword_1001599E8);
    sub_100040BE4(&qword_1001599F0, qword_1001599F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001599E0);
  }
  return result;
}

unint64_t sub_10003ACC8()
{
  unint64_t result = qword_100157148;
  if (!qword_100157148)
  {
    sub_1000317D8(&qword_100157150);
    sub_100040BE4(&qword_1001569C0, &qword_1001569C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157148);
  }
  return result;
}

unint64_t sub_10003AD68()
{
  unint64_t result = qword_100155868;
  if (!qword_100155868)
  {
    sub_1000317D8(&qword_100155830);
    sub_100040BE4(&qword_100155870, &qword_100155828);
    sub_10003C0DC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155868);
  }
  return result;
}

unint64_t sub_10003AE08()
{
  unint64_t result = qword_100158728;
  if (!qword_100158728)
  {
    sub_1000317D8(&qword_100158670);
    sub_1000331DC(&qword_100158730, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_100040BE4((unint64_t *)&qword_1001557B8, &qword_1001557C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100158728);
  }
  return result;
}

unint64_t sub_10003AED8()
{
  unint64_t result = qword_100157460;
  if (!qword_100157460)
  {
    sub_1000317D8(&qword_100157468);
    sub_10003B5F0();
    sub_100040BE4(&qword_100157490, &qword_100157498);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157460);
  }
  return result;
}

unint64_t sub_10003AF78()
{
  unint64_t result = qword_100155C20;
  if (!qword_100155C20)
  {
    sub_1000317D8(&qword_100155C00);
    sub_100040BE4(&qword_100155C10, &qword_100155C08);
    sub_10003302C(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155C20);
  }
  return result;
}

uint64_t sub_10003B048(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100159960);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10003B0A8()
{
  unint64_t result = qword_1001595D0;
  if (!qword_1001595D0)
  {
    sub_1000317D8(&qword_100159578);
    sub_100016728(&qword_1001595D8, &qword_100159570, (void (*)(void))sub_1000167C8);
    sub_100040BE4(&qword_1001595E0, &qword_1001595E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001595D0);
  }
  return result;
}

unint64_t sub_10003B180()
{
  unint64_t result = qword_100159B08;
  if (!qword_100159B08)
  {
    sub_1000317D8(&qword_100159B00);
    sub_100040BE4(&qword_100159B10, &qword_100159B18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159B08);
  }
  return result;
}

unint64_t sub_10003B220()
{
  unint64_t result = qword_100155BD8;
  if (!qword_100155BD8)
  {
    sub_1000317D8(&qword_100155AF8);
    sub_10003302C(&qword_100155BE0, (void (*)(uint64_t))type metadata accessor for ModeMenuView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155BD8);
  }
  return result;
}

unint64_t sub_10003B2CC()
{
  unint64_t result = qword_10015A418;
  if (!qword_10015A418)
  {
    sub_1000317D8(&qword_10015A3E0);
    sub_10001EFCC(&qword_10015A420, (void (*)(uint64_t))type metadata accessor for CalculatorAppContentView);
    sub_100040BE4((unint64_t *)&qword_100159870, &qword_100159878);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015A418);
  }
  return result;
}

unint64_t sub_10003B39C()
{
  unint64_t result = qword_100156BF0;
  if (!qword_100156BF0)
  {
    sub_1000317D8(&qword_100156BD8);
    sub_100040BE4(&qword_100156BF8, &qword_100156BD0);
    sub_10003BFE4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156BF0);
  }
  return result;
}

unint64_t sub_10003B43C()
{
  unint64_t result = qword_100154FF8;
  if (!qword_100154FF8)
  {
    sub_1000317D8(&qword_100155000);
    sub_10003D384();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100154FF8);
  }
  return result;
}

uint64_t sub_10003B4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154FE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003B520()
{
  return sub_100023158(&qword_100155B68, &qword_100155B70, (void (*)(void))sub_100021FA0);
}

unint64_t sub_10003B550()
{
  unint64_t result = qword_100157728;
  if (!qword_100157728)
  {
    sub_1000317D8(&qword_100157730);
    sub_10003DF18();
    sub_100040BE4(&qword_100157740, &qword_100157748);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157728);
  }
  return result;
}

unint64_t sub_10003B5F0()
{
  unint64_t result = qword_100157470;
  if (!qword_100157470)
  {
    sub_1000317D8(&qword_100157478);
    sub_100040BE4(&qword_100157480, &qword_100157488);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157470);
  }
  return result;
}

void sub_10003B690()
{
  if (!qword_100156708)
  {
    sub_10003B8D0();
    unint64_t v0 = type metadata accessor for ScaledMetric();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100156708);
    }
  }
}

uint64_t sub_10003B6EC(uint64_t a1)
{
  return sub_100021538(a1, qword_100160FE0);
}

uint64_t sub_10003B708(uint64_t a1)
{
  return sub_100021538(a1, qword_100161058);
}

uint64_t sub_10003B72C(uint64_t a1)
{
  return sub_100021538(a1, qword_100161070);
}

uint64_t sub_10003B750(uint64_t a1)
{
  return sub_100021538(a1, qword_100161010);
}

uint64_t sub_10003B774(uint64_t a1)
{
  return sub_100021538(a1, qword_100160FF8);
}

uint64_t sub_10003B798(uint64_t a1)
{
  return sub_100021538(a1, qword_100161040);
}

uint64_t sub_10003B7BC(uint64_t a1)
{
  return sub_100021538(a1, qword_100161028);
}

uint64_t sub_10003B7E0(uint64_t a1)
{
  return sub_100021538(a1, qword_100160FB0);
}

uint64_t sub_10003B804(uint64_t a1)
{
  return sub_100021538(a1, qword_100160FC8);
}

uint64_t sub_10003B830(uint64_t a1)
{
  return sub_100021538(a1, qword_100160F98);
}

void sub_10003B858()
{
  if (!qword_100159470)
  {
    sub_1000317D8(&qword_100154A48);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100159470);
    }
  }
}

uint64_t sub_10003B8B4(uint64_t a1, char a2)
{
  return sub_1000333A8(a1, a2, 0xD00000000000001ALL, 0x800000010010AFC0);
}

unint64_t sub_10003B8D0()
{
  unint64_t result = qword_100156670;
  if (!qword_100156670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156670);
  }
  return result;
}

unint64_t sub_10003B924()
{
  unint64_t result = qword_100157418;
  if (!qword_100157418)
  {
    sub_1000317D8(&qword_1001573F0);
    sub_10003B998();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157418);
  }
  return result;
}

unint64_t sub_10003B998()
{
  unint64_t result = qword_100157420;
  if (!qword_100157420)
  {
    sub_1000317D8(&qword_1001573E8);
    sub_100040BE4(&qword_100157428, &qword_1001573E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157420);
  }
  return result;
}

unint64_t sub_10003BA30()
{
  unint64_t result = qword_100157410;
  if (!qword_100157410)
  {
    sub_1000317D8(&qword_100157408);
    sub_10003B924();
    sub_100040BE4(&qword_100157430, &qword_1001573D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157410);
  }
  return result;
}

void sub_10003BAD0()
{
  qword_100160CA0 = 0x4024000000000000;
}

void sub_10003BAE0()
{
  qword_100160D00 = 0x4020000000000000;
}

void sub_10003BAF0()
{
  qword_100160E20 = 0x4028000000000000;
}

void sub_10003BB00()
{
  qword_100160E28 = 0x4034000000000000;
}

void sub_10003BB10()
{
  qword_100160D70 = 0x4010000000000000;
}

void sub_10003BB20()
{
  qword_100160E38 = 0x403E000000000000;
}

uint64_t sub_10003BB30(unsigned __int8 *a1)
{
  return *a1;
}

unint64_t sub_10003BB3C()
{
  unint64_t result = qword_1001550C8;
  if (!qword_1001550C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001550C8);
  }
  return result;
}

uint64_t sub_10003BB90(uint64_t a1)
{
  return sub_100005D4C(a1, qword_100161340);
}

unint64_t sub_10003BBB0()
{
  unint64_t result = qword_100159B20;
  if (!qword_100159B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159B20);
  }
  return result;
}

uint64_t sub_10003BC04()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10003BC20()
{
  unint64_t result = qword_100155BB0;
  if (!qword_100155BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155BB0);
  }
  return result;
}

uint64_t sub_10003BC74()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10003BC90()
{
  unint64_t result = qword_1001599B0;
  if (!qword_1001599B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001599B0);
  }
  return result;
}

unint64_t sub_10003BCE4()
{
  unint64_t result = qword_1001599A8;
  if (!qword_1001599A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001599A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryPresentationStyle()
{
  return &type metadata for HistoryPresentationStyle;
}

uint64_t sub_10003BD50()
{
  return static Binding.constant(_:)();
}

unint64_t sub_10003BD88()
{
  unint64_t result = qword_100155A80;
  if (!qword_100155A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155A80);
  }
  return result;
}

uint64_t type metadata accessor for AnalyticsTimeStampInfo()
{
  uint64_t result = qword_100155C50;
  if (!qword_100155C50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for DismissModeMenuAction()
{
  return &type metadata for DismissModeMenuAction;
}

uint64_t sub_10003BE38()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003BE54()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_10004BC10;
  return sub_100005DD4(v0 + 16);
}

uint64_t sub_10003BEE8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10003BF2C()
{
  unint64_t result = qword_100155A48;
  if (!qword_100155A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155A48);
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarViewStyle()
{
  return &type metadata for SidebarViewStyle;
}

unint64_t sub_10003BF90()
{
  unint64_t result = qword_10015A4B8;
  if (!qword_10015A4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015A4B8);
  }
  return result;
}

unint64_t sub_10003BFE4()
{
  unint64_t result = qword_100156C00;
  if (!qword_100156C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156C00);
  }
  return result;
}

uint64_t sub_10003C038()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DetailsViewStyle()
{
  return &type metadata for DetailsViewStyle;
}

unint64_t sub_10003C064()
{
  unint64_t result = qword_10015A4C0;
  if (!qword_10015A4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015A4C0);
  }
  return result;
}

uint64_t type metadata accessor for AnalyticsManager()
{
  return self;
}

unint64_t sub_10003C0DC()
{
  unint64_t result = qword_100155878;
  if (!qword_100155878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155878);
  }
  return result;
}

uint64_t sub_10003C130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000D3D8(a1, a2, *v2, v2[1], v2[2], v2[3]);
}

uint64_t sub_10003C13C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003C158@<X0>(uint64_t a1@<X8>)
{
  return sub_100012638(*(void *)v1, *(unsigned __int8 *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_10003C178()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003C194@<X0>(uint64_t a1@<X8>)
{
  return sub_10000F6F8(*(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_10003C1F8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10003C214()
{
  sub_10003963C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_10003C2CC()
{
  unint64_t result = qword_100157448;
  if (!qword_100157448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157448);
  }
  return result;
}

uint64_t sub_10003C320()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10003C32C()
{
  uint64_t v0 = sub_100032FA0(&qword_100155AD0);
  sub_1000215D0(v0, qword_1001612C0);
  sub_100021598(v0, (uint64_t)qword_1001612C0);
  return Tips.Event.init<>(id:)();
}

unint64_t sub_10003C394()
{
  unint64_t result = qword_100155228;
  if (!qword_100155228)
  {
    type metadata accessor for AppSettings();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155228);
  }
  return result;
}

uint64_t sub_10003C3EC()
{
  type metadata accessor for AppSettings();
  swift_allocObject();
  uint64_t result = sub_100012278();
  qword_1001613A0 = result;
  return result;
}

unint64_t sub_10003C470()
{
  unint64_t result = qword_100156B40;
  if (!qword_100156B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156B40);
  }
  return result;
}

unint64_t sub_10003C4C4()
{
  unint64_t result = qword_100156E00;
  if (!qword_100156E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156E00);
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgeOutset()
{
  return &type metadata for EdgeOutset;
}

void sub_10003C528()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 48) = *(unsigned char *)(v0 + 24);
}

void sub_10003C538()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 64) = *(unsigned char *)(v0 + 24);
}

void sub_10003C548()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 53) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10003C558()
{
  return sub_10003C578(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10003C578(uint64_t result, char a2)
{
  *(unsigned char *)(result + 53) = a2;
  return result;
}

unint64_t sub_10003C580()
{
  unint64_t result = qword_100155AA8;
  if (!qword_100155AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155AA8);
  }
  return result;
}

uint64_t sub_10003C5D8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10003C5F4(uint64_t *a1@<X8>)
{
  sub_100005310(*(void **)(v1 + 16), a1);
}

uint64_t sub_10003C5FC()
{
  if (qword_1001546C0 != -1) {
    return swift_once();
  }
  return result;
}

uint64_t sub_10003C634()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003C650@<X0>(uint64_t a1@<X8>)
{
  return sub_10001E1A8(a1);
}

uint64_t sub_10003C6B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for CalculatorAppMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unint64_t sub_10003C768()
{
  unint64_t result = qword_10015A370;
  if (!qword_10015A370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10015A370);
  }
  return result;
}

void sub_10003C7BC(void *a1@<X8>)
{
  type metadata accessor for CalculatorLayout();
  swift_allocObject();
  sub_10001C044();
  *a1 = v2;
}

double sub_10003C7FC()
{
  *(void *)&double result = sub_10003C948(&OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets).n128_u64[0];
  return result;
}

uint64_t sub_10003C81C()
{
  return sub_10003C840(*(void *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_10003C840(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return sub_10003C934(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets, a2, a3, a4, a5);
}

uint64_t sub_10003C860()
{
  return sub_100006A70(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, (uint64_t (*)(void))&type metadata accessor for UserInterfaceSizeClass);
}

uint64_t sub_10003C898()
{
  return sub_1000410D4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10003C8B4()
{
  return sub_10003C8CC();
}

uint64_t sub_10003C8CC()
{
  return sub_100006A70(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, (uint64_t (*)(void))&type metadata accessor for UserInterfaceSizeClass);
}

uint64_t sub_10003C904()
{
  return sub_1000410A0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10003C920(uint64_t result, double a2, double a3)
{
  int v3 = (double *)(result + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize);
  *int v3 = a2;
  v3[1] = a3;
  return result;
}

uint64_t sub_10003C934(uint64_t result, void *a2, double a3, double a4, double a5, double a6)
{
  unsigned int v6 = (double *)(result + *a2);
  *unsigned int v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  v6[3] = a6;
  return result;
}

__n128 sub_10003C948(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 16) + *a1;
  __n128 result = *(__n128 *)(v1 + 24);
  long long v4 = *(_OWORD *)(v1 + 40);
  *(__n128 *)uint64_t v2 = result;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

double sub_10003C964()
{
  *(void *)&double result = sub_10003C948(&OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets).n128_u64[0];
  return result;
}

uint64_t sub_10003C984()
{
  return sub_1000412B8(*(void *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

__n128 sub_10003C9A8()
{
  __n128 result = *(__n128 *)(v0 + 24);
  *(__n128 *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize) = result;
  return result;
}

uint64_t sub_10003C9C0()
{
  return sub_1000411C4(*(void *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

void sub_10003C9E0()
{
  sub_1000389A4(319, (unint64_t *)&unk_10015A170, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for UIApplicationDelegateAdaptor);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for CalculatorApp(uint64_t a1)
{
  return sub_10001F0E0(a1, (uint64_t *)&unk_10015A160);
}

unint64_t sub_10003CABC()
{
  unint64_t result = qword_100156168;
  if (!qword_100156168)
  {
    type metadata accessor for CalculatorApp(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156168);
  }
  return result;
}

uint64_t sub_10003CB14()
{
  uint64_t v0 = type metadata accessor for AppDelegate();

  return UIApplicationDelegateAdaptor.init(_:)(v0, v0);
}

uint64_t sub_10003CB54()
{
  uint64_t v0 = type metadata accessor for CalculatorAppScene(0);
  __chkstk_darwin(v0);
  uint64_t v2 = (uint64_t *)((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001DF78(v2);
  sub_10001EFCC(&qword_10015A1A0, (void (*)(uint64_t))type metadata accessor for CalculatorAppScene);
  static SceneBuilder.buildBlock<A>(_:)();
  return sub_100004CC8((uint64_t)v2, type metadata accessor for CalculatorAppScene);
}

uint64_t sub_10003CC38()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10003CC54()
{
  sub_10003B690();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10003CD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t type metadata accessor for CalculatorHistoryViewModelWrapper(uint64_t a1)
{
  return sub_10001F0E0(a1, qword_100154CB0);
}

unint64_t sub_10003CD70()
{
  unint64_t result = qword_100155218;
  if (!qword_100155218)
  {
    type metadata accessor for CalculatorMDMRestrictionsManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155218);
  }
  return result;
}

void sub_10003CDC8()
{
}

uint64_t sub_10003CDE0()
{
  return sub_1000701BC(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_10003CE00()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed) = *(unsigned char *)(v0 + 24);
}

void sub_10003CE18()
{
}

void sub_10003CE30()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10003CE48()
{
  return sub_1000701AC(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_10003CE68()
{
}

void sub_10003CE80()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10003CE98()
{
  return sub_100070204(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_10003CEB8()
{
}

void sub_10003CED0()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10003CEE8()
{
  return sub_1000701E0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10003CF08()
{
  return sub_100070214(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_10003CF28()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed) = *(unsigned char *)(v0 + 24);
}

void sub_10003CF40()
{
}

void sub_10003CF58()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced) = *(unsigned char *)(v0 + 24);
}

double sub_10003CF70()
{
  sub_100032FA0(&qword_100156E40);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 5;
  *(_OWORD *)(v0 + 16) = xmmword_100111590;
  *(void *)(v0 + 32) = &off_1001496E0;
  *(void *)(v0 + 40) = &off_100149708;
  *(void *)(v0 + 48) = &off_100149730;
  *(void *)(v0 + 56) = &off_100149758;
  *(void *)(v0 + 64) = &off_100149780;
  off_100156E20 = (_UNKNOWN *)v0;
  return result;
}

uint64_t sub_10003CFE4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10003D030()
{
  unint64_t result = qword_1001563A0;
  if (!qword_1001563A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001563A0);
  }
  return result;
}

unint64_t sub_10003D084()
{
  unint64_t result = qword_1001563A8;
  if (!qword_1001563A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001563A8);
  }
  return result;
}

Swift::Int sub_10003D0DC()
{
  Swift::Int result = sub_10001AA98((uint64_t)&off_1001495E8);
  static CalculatorButtonRepresentable.attributedTitledButtons = result;
  return result;
}

Swift::Int sub_10003D104()
{
  Swift::Int result = sub_10001AA98((uint64_t)&off_100149B48);
  qword_1001590F8 = result;
  return result;
}

Swift::Int sub_10003D12C()
{
  Swift::Int result = sub_10001AA98((uint64_t)&off_100149B20);
  qword_100159100 = result;
  return result;
}

Swift::Int sub_10003D154()
{
  Swift::Int result = sub_10001AA98((uint64_t)&off_100149AF0);
  qword_1001590F0 = result;
  return result;
}

Swift::Int sub_10003D17C()
{
  Swift::Int result = sub_10001AA98((uint64_t)&off_100149AC0);
  qword_1001590E8 = result;
  return result;
}

unint64_t sub_10003D1A4()
{
  unint64_t result = qword_100155AC8;
  if (!qword_100155AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155AC8);
  }
  return result;
}

uint64_t sub_10003D1F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100020268(*(void *)v1, *(unsigned __int8 *)(v1 + 8), a1);
}

uint64_t sub_10003D204()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10003D220()
{
  unint64_t result = qword_1001595F8;
  if (!qword_1001595F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001595F8);
  }
  return result;
}

void sub_10003D278()
{
}

void sub_10003D290()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 16) = *(unsigned char *)(v0 + 24);
}

void sub_10003D2A0()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 17) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10003D2B0()
{
  return sub_10003D2D0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10003D2D0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 17) = a2 & 1;
  return result;
}

uint64_t sub_10003D2E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003D324(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100154FE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10003D384()
{
  unint64_t result = qword_100155008;
  if (!qword_100155008)
  {
    sub_1000317D8(&qword_100154FE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155008);
  }
  return result;
}

uint64_t sub_10003D3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10003D3E8()
{
  return sub_10000B404();
}

uint64_t storeEnumTagSinglePayload for CalculatorModeButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 136) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10003D458()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_10003D474@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static HorizontalAlignment.center.getter();
  sub_10000AB58((uint64_t)v8);
  *(_OWORD *)&v10[119] = v8[7];
  *(_OWORD *)&v10[103] = v8[6];
  *(_OWORD *)&v10[55] = v8[3];
  *(_OWORD *)&v10[39] = v8[2];
  *(_OWORD *)&v10[135] = v8[8];
  v10[151] = v9;
  *(_OWORD *)&v10[71] = v8[4];
  *(_OWORD *)&v10[87] = v8[5];
  *(_OWORD *)&v10[7] = v8[0];
  *(_OWORD *)&v10[23] = v8[1];
  long long v3 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v3;
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v10[128];
  long long v4 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v4;
  long long v5 = *(_OWORD *)&v10[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = v5;
  double result = *(double *)v10;
  long long v7 = *(_OWORD *)&v10[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v10;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 161) = *(void *)&v10[144];
  *(_OWORD *)(a1 + 33) = v7;
  return result;
}

uint64_t sub_10003D558()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003D578()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003D594()
{
  uint64_t v1 = *(void *)(type metadata accessor for CalculatorAppContentView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10001459C(v2);
}

unint64_t sub_10003D5F4()
{
  unint64_t result = qword_100159508;
  if (!qword_100159508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159508);
  }
  return result;
}

uint64_t sub_10003D648@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F570(a1);
}

uint64_t sub_10003D68C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003D6A8(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[14];
  double v7 = v1[15];
  int v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int v8 = v2;
  v8[1] = sub_10003819C;
  return sub_100004684(v6, v7, a1, v4, v5, (uint64_t)(v1 + 4));
}

uint64_t sub_10003D778(uint64_t *a1)
{
  return sub_100006894(a1, (_OWORD *)(v1 + 16));
}

uint64_t sub_10003D780(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[14];
  double v7 = v1[15];
  double v8 = v1[16];
  double v9 = v1[17];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10004BC10;
  return sub_1000047BC(v6, v7, v8, v9, a1, v4, v5, (uint64_t)(v1 + 4));
}

uint64_t sub_10003D864(long long *a1)
{
  return sub_100006634(a1, (_OWORD *)(v1 + 16));
}

unint64_t sub_10003D86C()
{
  unint64_t result = qword_100156540;
  if (!qword_100156540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156540);
  }
  return result;
}

unint64_t sub_10003D8C4()
{
  unint64_t result = qword_100159568;
  if (!qword_100159568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100159568);
  }
  return result;
}

uint64_t sub_10003D918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000103F0(a1, a2);
}

uint64_t sub_10003D954()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003D970@<X0>(uint64_t a1@<X8>)
{
  return sub_100004984(a1);
}

uint64_t sub_10003D978@<X0>(char *a1@<X8>)
{
  return sub_10000F218(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_10003D980@<X0>(uint64_t a1@<X8>)
{
  return sub_100005070(a1);
}

uint64_t sub_10003D988(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CalculatorHistoryView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003D9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculatorHistoryView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10003DA48()
{
  sub_100005144();
  if (v0 <= 0x3F)
  {
    sub_10003B690();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10003DB34()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DB50()
{
  return sub_100007E70(v0 + 16);
}

uint64_t sub_10003DB58@<X0>(uint64_t a1@<X8>)
{
  return sub_1000196FC(a1);
}

uint64_t sub_10003DB94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DBB0(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[10];
  double v7 = v1[11];
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = sub_10003819C;
  return sub_100004DD8(v6, v7, a1, v4, v5, (uint64_t)(v1 + 4));
}

uint64_t sub_10003DC80(uint64_t *a1)
{
  return sub_100009230(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_10003DC88(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[10];
  double v7 = v1[11];
  double v8 = v1[12];
  double v9 = v1[13];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10004BC10;
  return sub_100004B2C(v6, v7, v8, v9, a1, v4, v5, (uint64_t)(v1 + 4));
}

uint64_t sub_10003DD6C(long long *a1)
{
  return sub_1000090A4(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_10003DD74@<X0>(void *a1@<X8>)
{
  if (qword_100154458 != -1) {
    swift_once();
  }
  *a1 = qword_100160F70;

  return swift_retain();
}

uint64_t sub_10003DDE0@<X0>(uint64_t *a1@<X0>, double (**a2)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  return sub_100007A8C(a1, (uint64_t *)(v2 + 16), a2);
}

double sub_10003DDE8@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_100012D3C(v1 + 24, a1).n128_u64[0];
  return result;
}

uint64_t sub_10003DDF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DE10()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for CalculatorTipManager()
{
  return self;
}

uint64_t sub_10003DE50()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004BC10;
  return _swift_task_switch(sub_10000605C, 0, 0);
}

uint64_t sub_10003DEF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DF10()
{
  return sub_10000C230(v0 + 16);
}

unint64_t sub_10003DF18()
{
  unint64_t result = qword_100157738;
  if (!qword_100157738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157738);
  }
  return result;
}

uint64_t sub_10003DF6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DF88()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DFA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100032FA0(&qword_100154858);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_100032FA0(&qword_100154860);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  double v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t *v5 = static Alignment.center.getter();
  v5[1] = v10;
  uint64_t v11 = sub_100032FA0(&qword_100154868);
  sub_10003E1B0(v1, (uint64_t *)((char *)v5 + *(int *)(v11 + 44)));
  uint64_t v12 = swift_allocObject();
  long long v13 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v12 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v12 + 96) = v13;
  *(void *)(v12 + 112) = *(void *)(v1 + 96);
  long long v14 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v12 + 32) = v14;
  long long v15 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v12 + 64) = v15;
  sub_100040710(v1);
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v18 = v17;
  sub_100033344((uint64_t)v5, (uint64_t)v9, &qword_100154858);
  uint64_t v19 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))&v9[*(int *)(v7 + 44)];
  *uint64_t v19 = sub_100040708;
  v19[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v12;
  v19[2] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v16;
  v19[3] = v18;
  sub_100032F44((uint64_t)v5, &qword_100154858);
  long long v20 = *(_OWORD *)(v1 + 64);
  long long v25 = *(_OWORD *)(v1 + 48);
  long long v26 = v20;
  uint64_t v27 = *(void *)(v1 + 80);
  sub_100032FA0(&qword_100154870);
  State.wrappedValue.getter();
  long long v24 = v28;
  uint64_t v21 = v29;
  uint64_t v22 = v30;
  static Edge.Set.all.getter();
  long long v25 = v24;
  *(void *)&long long v26 = v21;
  *((void *)&v26 + 1) = v22;
  LOBYTE(v27) = 0;
  sub_100032FA0(&qword_100154878);
  SafeAreaPaddingModifier.init(edges:insets:)();
  return sub_10002D9D0((uint64_t)v9, a1, &qword_100154860);
}

void *sub_10003E1B0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v88 = a2;
  uint64_t v73 = sub_100032FA0(&qword_100154880);
  __chkstk_darwin(v73);
  uint64_t v4 = (uint64_t *)&v66[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for LayoutDirection();
  uint64_t v75 = *(void *)(v5 - 8);
  uint64_t v76 = v5;
  __chkstk_darwin(v5);
  uint64_t v74 = &v66[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v72 = sub_100032FA0(&qword_1001548A8);
  __chkstk_darwin(v72);
  uint64_t v87 = &v66[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v86 = &v66[-v9];
  long long v10 = *(_OWORD *)(a1 + 64);
  v111[0] = *(_OWORD *)(a1 + 48);
  v111[1] = v10;
  *(void *)&v111[2] = *(void *)(a1 + 80);
  sub_100032FA0(&qword_100154870);
  State.projectedValue.getter();
  uint64_t v80 = v134[1];
  uint64_t v81 = v134[0];
  uint64_t v84 = v134[3];
  uint64_t v85 = v134[2];
  uint64_t v82 = v134[5];
  uint64_t v83 = v134[4];
  v111[0] = *(_OWORD *)(a1 + 88);
  sub_100032FA0(&qword_100154898);
  State.projectedValue.getter();
  uint64_t v77 = v134[0];
  uint64_t v94 = v134[1];
  int v93 = LOBYTE(v134[2]);
  uint64_t v11 = static Alignment.center.getter();
  uint64_t v78 = v12;
  uint64_t v79 = v11;
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  sub_100032F38(v13, v14);
  char v15 = sub_100034598(v13, v14);
  sub_100032EAC(v13, v14);
  if (v15)
  {
    uint64_t KeyPath = swift_getKeyPath();
    type metadata accessor for CalculatorViewModel();
    sub_10003F7F4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    uint64_t v91 = Environment.init<A>(_:)();
    uint64_t v89 = 0;
    int v90 = v16 & 1;
  }
  else
  {
    uint64_t v91 = 0;
    uint64_t KeyPath = 0;
    int v90 = 0;
    uint64_t v89 = 65280;
  }
  uint64_t v71 = static HorizontalAlignment.center.getter();
  uint64_t v17 = static VerticalAlignment.center.getter();
  sub_10003EA2C(a1, (uint64_t)v134);
  char v101 = 1;
  char v100 = v134[2];
  char v99 = v134[4];
  char v98 = v134[6];
  char v97 = v134[13];
  v102[0] = v17;
  v102[1] = 0;
  LOBYTE(v103) = 1;
  *((void *)&v103 + 1) = v134[0];
  *(void *)&long long v104 = v134[1];
  BYTE8(v104) = v134[2];
  *(void *)&long long v105 = v134[3];
  BYTE8(v105) = v134[4];
  *(void *)&long long v106 = v134[5];
  BYTE8(v106) = v134[6];
  long long v107 = *(_OWORD *)&v134[7];
  long long v108 = *(_OWORD *)&v134[9];
  long long v109 = *(_OWORD *)&v134[11];
  char v110 = v134[13];
  char v112 = 1;
  *(_OWORD *)((char *)v111 + 7) = (unint64_t)v17;
  *(_OWORD *)((char *)&v111[4] + 7) = v106;
  *(_OWORD *)((char *)&v111[3] + 7) = v105;
  *(_OWORD *)((char *)&v111[2] + 7) = v104;
  *(_OWORD *)((char *)&v111[1] + 7) = v103;
  BYTE7(v111[8]) = v134[13];
  *(_OWORD *)((char *)&v111[7] + 7) = *(_OWORD *)&v134[11];
  *(_OWORD *)((char *)&v111[6] + 7) = *(_OWORD *)&v134[9];
  *(_OWORD *)((char *)&v111[5] + 7) = *(_OWORD *)&v134[7];
  int v70 = 1;
  v113[0] = v17;
  v113[1] = 0;
  char v114 = 1;
  uint64_t v115 = v134[0];
  uint64_t v116 = v134[1];
  char v117 = v134[2];
  uint64_t v118 = v134[3];
  char v119 = v134[4];
  uint64_t v120 = v134[5];
  char v121 = v134[6];
  long long v122 = *(_OWORD *)&v134[7];
  long long v123 = *(_OWORD *)&v134[9];
  long long v124 = *(_OWORD *)&v134[11];
  char v125 = v134[13];
  sub_100040814((uint64_t)v102);
  sub_10004084C((uint64_t)v113);
  char v126 = 1;
  int v69 = static Edge.Set.vertical.getter();
  char v18 = *(unsigned char *)(a1 + 24);
  uint64_t v19 = swift_retain();
  sub_10002BD88(v19, v18);
  swift_release();
  sub_10001A4E8();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v68 = v20;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  char v127 = 0;
  int v67 = static Edge.Set.horizontal.getter();
  uint64_t v27 = swift_retain();
  sub_10002BD88(v27, v18);
  swift_release();
  sub_10001A4E8();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  char v36 = v127;
  char v129 = 0;
  LOBYTE(v17) = static Edge.Set.horizontal.getter();
  uint64_t v37 = swift_retain();
  sub_10002BD88(v37, v18);
  swift_release();
  sub_100006B10();
  swift_release();
  EdgeInsets.init(_all:)();
  v134[0] = v71;
  v134[1] = 0;
  LOBYTE(v134[2]) = 1;
  *(_DWORD *)((char *)&v134[2] + 1) = *(_DWORD *)v128;
  HIDWORD(v134[2]) = *(_DWORD *)&v128[3];
  v134[3] = 0;
  LOBYTE(v134[4]) = v70;
  *(_OWORD *)((char *)&v134[14] + 1) = v111[5];
  *(_OWORD *)((char *)&v134[16] + 1) = v111[6];
  *(_OWORD *)((char *)&v134[18] + 1) = v111[7];
  *(void *)((char *)&v134[20] + 1) = *(void *)&v111[8];
  *(_OWORD *)((char *)&v134[6] + 1) = v111[1];
  *(_OWORD *)((char *)&v134[8] + 1) = v111[2];
  *(_OWORD *)((char *)&v134[10] + 1) = v111[3];
  *(_OWORD *)((char *)&v134[12] + 1) = v111[4];
  *(_OWORD *)((char *)&v134[4] + 1) = v111[0];
  *(_DWORD *)((char *)&v134[21] + 1) = *(_DWORD *)v133;
  HIDWORD(v134[21]) = *(_DWORD *)&v133[3];
  LOBYTE(v134[22]) = v69;
  *(_DWORD *)((char *)&v134[22] + 1) = *(_DWORD *)v132;
  HIDWORD(v134[22]) = *(_DWORD *)&v132[3];
  v134[23] = v68;
  v134[24] = v22;
  v134[25] = v24;
  v134[26] = v26;
  LOBYTE(v134[27]) = v36;
  *(_DWORD *)((char *)&v134[27] + 1) = *(_DWORD *)v131;
  HIDWORD(v134[27]) = *(_DWORD *)&v131[3];
  LOBYTE(v134[28]) = v67;
  HIDWORD(v134[28]) = *(_DWORD *)&v130[3];
  *(_DWORD *)((char *)&v134[28] + 1) = *(_DWORD *)v130;
  v134[29] = v29;
  v134[30] = v31;
  v134[31] = v33;
  v134[32] = v35;
  LOBYTE(v134[33]) = v129;
  LOBYTE(v134[34]) = v17;
  v134[35] = v38;
  v134[36] = v39;
  v134[37] = v40;
  v134[38] = v41;
  LOBYTE(v134[39]) = 0;
  uint64_t v42 = swift_getKeyPath();
  char v44 = v74;
  uint64_t v43 = v75;
  uint64_t v45 = v76;
  (*(void (**)(unsigned char *, void, uint64_t))(v75 + 104))(v74, enum case for LayoutDirection.leftToRight(_:), v76);
  (*(void (**)(char *, unsigned char *, uint64_t))(v43 + 16))((char *)v4 + *(int *)(v73 + 28), v44, v45);
  *uint64_t v4 = v42;
  char v46 = v87;
  sub_100033344((uint64_t)v4, (uint64_t)&v87[*(int *)(v72 + 36)], &qword_100154880);
  memcpy(v46, v134, 0x139uLL);
  sub_100040884((uint64_t)v134);
  sub_100032F44((uint64_t)v4, &qword_100154880);
  (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v44, v45);
  sub_10004084C((uint64_t)v102);
  long long v47 = v86;
  sub_10002D9D0((uint64_t)v46, (uint64_t)v86, &qword_1001548A8);
  sub_100033344((uint64_t)v47, (uint64_t)v46, &qword_1001548A8);
  uint64_t v49 = v80;
  uint64_t v48 = v81;
  *(void *)&long long v135 = v81;
  *((void *)&v135 + 1) = v80;
  uint64_t v51 = v84;
  uint64_t v50 = v85;
  *(void *)&long long v136 = v85;
  *((void *)&v136 + 1) = v84;
  uint64_t v53 = v82;
  uint64_t v52 = v83;
  *(void *)&long long v137 = v83;
  *((void *)&v137 + 1) = v82;
  uint64_t v54 = v77;
  *(void *)&long long v138 = v77;
  *((void *)&v138 + 1) = v94;
  LOBYTE(v139) = v93;
  *(_DWORD *)((char *)&v139 + 1) = *(_DWORD *)v96;
  DWORD1(v139) = *(_DWORD *)&v96[3];
  *((void *)&v139 + 1) = KeyPath;
  *(void *)&long long v140 = 0;
  uint64_t v55 = v88;
  *((void *)&v140 + 1) = v89;
  *(void *)&long long v141 = v91;
  BYTE8(v141) = v90;
  HIDWORD(v141) = *(_DWORD *)&v95[3];
  *(_DWORD *)((char *)&v141 + 9) = *(_DWORD *)v95;
  uint64_t v57 = v78;
  uint64_t v56 = v79;
  *(void *)&long long v142 = v79;
  *((void *)&v142 + 1) = v78;
  long long v58 = v135;
  long long v59 = v136;
  long long v60 = v138;
  v88[2] = v137;
  v55[3] = v60;
  *uint64_t v55 = v58;
  v55[1] = v59;
  long long v61 = v139;
  long long v62 = v140;
  long long v63 = v142;
  v55[6] = v141;
  v55[7] = v63;
  v55[4] = v61;
  v55[5] = v62;
  uint64_t v64 = sub_100032FA0(&qword_1001548B0);
  sub_100033344((uint64_t)v46, (uint64_t)v55 + *(int *)(v64 + 48), &qword_1001548A8);
  sub_1000408BC(&v135);
  sub_100032F44((uint64_t)v47, &qword_1001548A8);
  sub_100032F44((uint64_t)v46, &qword_1001548A8);
  v143[0] = v48;
  v143[1] = v49;
  v143[2] = v50;
  v143[3] = v51;
  v143[4] = v52;
  v143[5] = v53;
  v143[6] = v54;
  v143[7] = v94;
  char v144 = v93;
  *(_DWORD *)uint64_t v145 = *(_DWORD *)v96;
  *(_DWORD *)&v145[3] = *(_DWORD *)&v96[3];
  uint64_t v146 = KeyPath;
  uint64_t v147 = 0;
  uint64_t v148 = v89;
  uint64_t v149 = v91;
  char v150 = v90;
  *(_DWORD *)&v151[3] = *(_DWORD *)&v95[3];
  *(_DWORD *)uint64_t v151 = *(_DWORD *)v95;
  uint64_t v152 = v56;
  uint64_t v153 = v57;
  return sub_100040998(v143);
}

uint64_t sub_10003EA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = swift_retain();
  sub_10002BD88(v4, v3);
  swift_release();
  uint64_t v5 = self;
  id v6 = [v5 currentDevice];
  id v7 = [v6 userInterfaceIdiom];

  if (v7 == (id)1)
  {
    swift_release();
    goto LABEL_4;
  }
  id v8 = [v5 currentDevice];
  id v9 = [v8 userInterfaceIdiom];
  swift_release();

  if (v9 == (id)6)
  {
LABEL_4:
    if (qword_1001541C0 == -1) {
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  if (qword_100154200 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_7:
  uint64_t v10 = static HorizontalAlignment.center.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t result = static Anchor.Source<A>.bounds.getter();
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = v12;
  *(unsigned char *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v14;
  *(unsigned char *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v16;
  *(void *)(a2 + 64) = v17;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 72) = result;
  *(void *)(a2 + 80) = sub_10003EC10;
  *(unsigned char *)(a2 + 104) = 1;
  return result;
}

uint64_t sub_10003EC10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_10003EC18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = sub_100032FA0(&qword_100154880);
  __chkstk_darwin(v30);
  id v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for LayoutDirection();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100032FA0(&qword_100154888);
  v14.n128_f64[0] = __chkstk_darwin(v12);
  uint64_t v16 = (double (**)@<D0>(uint64_t@<X8>))((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *a1;
  if (*a1)
  {
    uint64_t v29 = v13;
    uint64_t v18 = swift_allocObject();
    long long v19 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v18 + 72) = *(_OWORD *)(a2 + 48);
    long long v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v18 + 88) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v18 + 104) = v20;
    long long v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)a2;
    *(_OWORD *)(v18 + 40) = v21;
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 120) = *(void *)(a2 + 96);
    *(_OWORD *)(v18 + 56) = v19;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v28 = a3;
    uint64_t v23 = KeyPath;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for LayoutDirection.leftToRight(_:), v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v7 + *(int *)(v30 + 28), v11, v8);
    *id v7 = v23;
    sub_100033344((uint64_t)v7, (uint64_t)v16 + *(int *)(v12 + 36), &qword_100154880);
    *uint64_t v16 = sub_1000407E8;
    v16[1] = (double (*)@<D0>(uint64_t@<X8>))v18;
    swift_retain();
    sub_100040710(a2);
    swift_retain();
    sub_100032F44((uint64_t)v7, &qword_100154880);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release();
    uint64_t v24 = v28;
    sub_10002D9D0((uint64_t)v16, v28, &qword_100154888);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v24, 0, 1, v12);
  }
  else
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56);
    return v26(a3, 1, 1, v12, v14);
  }
}

__n128 sub_10003EF64@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100032FA0(&qword_100154890);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - v9;
  type metadata accessor for CGRect(0);
  GeometryProxy.subscript.getter();
  CGPoint v11 = v38;
  CGSize v12 = v39;
  char v13 = *(unsigned char *)(a1 + 8);
  uint64_t v14 = swift_retain();
  sub_100033AA8(v14, v13);
  swift_release();
  type metadata accessor for CalculatorViewModel();
  sub_10003F7F4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  Bindable<A>.init(wrappedValue:)();
  char v15 = *(unsigned char *)(a1 + 24);
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10002BD88(v16, v15);
  swift_release();
  uint64_t v18 = sub_100006F14(v17, 2);
  swift_release();
  v57.origin = v11;
  v57.size = v12;
  double Width = CGRectGetWidth(v57);
  v58.origin = v11;
  v58.size = v12;
  double Height = CGRectGetHeight(v58);
  Bindable.projectedValue.getter();
  swift_getKeyPath();
  Bindable<A>.subscript.getter();
  swift_release();
  long long v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v37 = v5 + 8;
  v21(v7, v4);
  sub_10000ECF4(v18 & 0x10101010101FFLL, v51, v52, v53, (uint64_t)&v38, Width, Height);
  v59.origin = v11;
  v59.size = v12;
  CGRectGetWidth(v59);
  v60.origin = v11;
  v60.size = v12;
  CGRectGetHeight(v60);
  static Alignment.bottomLeading.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v36 = v51;
  LOBYTE(v18) = v52;
  uint64_t v22 = v53;
  LOBYTE(v7) = v54;
  uint64_t v23 = v55;
  uint64_t v35 = v56;
  v61.origin = v11;
  v61.size = v12;
  CGFloat MinX = CGRectGetMinX(v61);
  v62.origin = v11;
  v62.size = v12;
  CGFloat MinY = CGRectGetMinY(v62);
  long long v49 = *(_OWORD *)(a1 + 88);
  sub_100032FA0(&qword_100154898);
  State.wrappedValue.getter();
  LOBYTE(v49) = v18;
  char v50 = (char)v7;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 1;
  v21(v10, v4);
  long long v28 = v47;
  *(_OWORD *)(a2 + 128) = v46;
  *(_OWORD *)(a2 + 144) = v28;
  uint64_t v29 = v48;
  long long v30 = v43;
  *(_OWORD *)(a2 + 64) = v42;
  *(_OWORD *)(a2 + 80) = v30;
  long long v31 = v45;
  *(_OWORD *)(a2 + 96) = v44;
  *(_OWORD *)(a2 + 112) = v31;
  CGSize v32 = v39;
  *(CGPoint *)a2 = v38;
  *(CGSize *)(a2 + 16) = v32;
  __n128 result = v41;
  *(_OWORD *)(a2 + 32) = v40;
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 160) = v29;
  *(void *)(a2 + 168) = v36;
  *(unsigned char *)(a2 + 176) = v18;
  *(void *)(a2 + 184) = v22;
  *(unsigned char *)(a2 + 192) = (_BYTE)v7;
  uint64_t v34 = v35;
  *(void *)(a2 + 200) = v23;
  *(void *)(a2 + 208) = v34;
  *(CGFloat *)(a2 + 216) = MinX;
  *(CGFloat *)(a2 + 224) = MinY;
  *(CGFloat *)(a2 + 232) = v11.y;
  *(void *)(a2 + 240) = KeyPath;
  *(void *)(a2 + 248) = sub_100038080;
  *(void *)(a2 + 256) = v27;
  return result;
}

uint64_t sub_10003F3E8()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10003F404@<X0>(uint64_t a1@<X8>)
{
  return sub_10003DFA4(a1);
}

void *variable initialization expression of CalculatorHistoryRecordManager.recordsPendingAdd()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of CalculatorHistoryRecordManager.hasFilteredRecordsLoaded()
{
  return 0;
}

id variable initialization expression of CalculatorHistoryRecordManager.inputCache()
{
  id v0 = objc_allocWithZone((Class)NSCache);

  return [v0 init];
}

uint64_t variable initialization expression of CalculatorHistoryRecordManager._recordsDidSaveObserver()
{
  return 0;
}

uint64_t sub_10003F4A8@<X0>(uint64_t *a1@<X8>)
{
  *a1 = static Anchor.Source<A>.bounds.getter();
  uint64_t v2 = enum case for PopoverAttachmentAnchor.rect(_:);
  uint64_t v3 = type metadata accessor for PopoverAttachmentAnchor();
  uint64_t v4 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10003F524()
{
  return swift_getOpaqueTypeMetadata2();
}

uint64_t sub_10003F5B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003F648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != 4) {
    Edge.Set.init(_:)();
  }
  sub_100032FA0(&qword_1001547B0);
  type metadata accessor for UnitConversionPopoverView();
  sub_1000317D8(&qword_1001547B8);
  type metadata accessor for PlainButtonStyle();
  sub_100040BE4(&qword_1001547C0, &qword_1001547B8);
  sub_10003F7F4(&qword_1001547C8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  swift_getOpaqueTypeConformance2();
  sub_10003F7F4(&qword_1001547D0, (void (*)(uint64_t))type metadata accessor for UnitConversionPopoverView);
  return View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
}

uint64_t sub_10003F7F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003F83C@<X0>(uint64_t a1@<X8>)
{
  sub_100037384();
  uint64_t result = EnvironmentValues.subscript.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t variable initialization expression of CalculatorNetworkManager.networkMonitor()
{
  return NWPathMonitor.init()();
}

uint64_t sub_10003F8CC(uint64_t a1, uint64_t a2)
{
  return sub_10003FA60(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10003F8F0(uint64_t a1, uint64_t a2)
{
  return sub_10003FA60(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

BOOL sub_10003F910(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10003F924(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10003F99C(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10003FA1C@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10003FA60(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10003FAA4()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10003FAF8()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10003FB6C()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10003FBB8()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10003FC10()
{
  return Hasher._finalize()();
}

void *sub_10003FC7C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_10003FC8C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10003FC98()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10003FD24()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_10003FD94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10003FDC0(uint64_t a1)
{
  uint64_t v2 = sub_10003F7F4(&qword_100154808, type metadata accessor for CalculateKey);
  uint64_t v3 = sub_10003F7F4(&qword_100154810, type metadata accessor for CalculateKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10003FE7C()
{
  return sub_10003F7F4(&qword_1001547F0, type metadata accessor for CalculateKey);
}

uint64_t sub_10003FEC4()
{
  return sub_10003F7F4(&qword_1001547F8, type metadata accessor for CalculateKey);
}

uint64_t sub_10003FF0C()
{
  return sub_10003F7F4(&qword_100154800, type metadata accessor for CalculateKey);
}

uint64_t sub_10003FF54@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10003FF9C(uint64_t a1)
{
  uint64_t v2 = sub_10003F7F4(&qword_1001548B8, type metadata accessor for OpenExternalURLOptionsKey);
  uint64_t v3 = sub_10003F7F4(&qword_1001548C0, type metadata accessor for OpenExternalURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

__n128 sub_100040058@<Q0>(__n128 *a1@<X8>)
{
  type metadata accessor for CalculatorViewModel();
  sub_10003F7F4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  uint64_t v2 = Environment.init<A>(_:)();
  char v4 = v3;
  type metadata accessor for CalculatorLayout();
  sub_10003F7F4((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v5 = Environment.init<A>(_:)();
  char v7 = v6;
  uint64_t KeyPath = swift_getKeyPath();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  a1->n128_u64[0] = v2;
  a1->n128_u8[8] = v4 & 1;
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u8[8] = v7 & 1;
  a1[2].n128_u64[0] = KeyPath;
  a1[2].n128_u8[8] = 0;
  __n128 result = v10;
  a1[3] = v10;
  a1[4].n128_u64[0] = v11;
  a1[4].n128_u64[1] = v12;
  a1[5].n128_u64[0] = v13;
  a1[5].n128_u8[8] = v10.n128_u8[0];
  a1[6].n128_u64[0] = v10.n128_u64[1];
  return result;
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for MathPaperContainerView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for MathPaperContainerView(uint64_t a1)
{
  swift_release();
  swift_release();
  sub_100032EAC(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for MathPaperContainerView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_retain();
  sub_100032F38(v6, v7);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v7;
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MathPaperContainerView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  sub_100032F38(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v7;
  sub_100032EAC(v8, v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for MathPaperContainerView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for MathPaperContainerView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_release();
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v6;
  sub_100032EAC(v7, v8);
  long long v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MathPaperContainerView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MathPaperContainerView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 8sub_100102B8C(2, 18, 1, 0) = a2;
    }
  }
  return result;
}

uint64_t sub_1000405B8()
{
  return sub_10003F7F4(&qword_100154840, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_100040600()
{
  return sub_10003F7F4(&qword_100154848, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_100040648()
{
  return sub_10003F7F4(&qword_100154850, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_100040690()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000406AC()
{
  swift_release();
  swift_release();
  sub_100032EAC(*(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100040708@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003EC18(a1, v2 + 16, a2);
}

uint64_t sub_100040710(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  swift_retain();
  swift_retain();
  sub_100032F38(v2, v3);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100040784()
{
  swift_release();
  swift_release();
  swift_release();
  sub_100032EAC(*(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

double sub_1000407E8@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_10003EF64(v1 + 24, a1).n128_u64[0];
  return result;
}

uint64_t sub_100040804()
{
  return swift_deallocObject();
}

uint64_t sub_100040814(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004084C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100040884(uint64_t a1)
{
  return a1;
}

void *sub_1000408BC(void *a1)
{
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10004094C(v2, v3, v4);
  return a1;
}

uint64_t sub_10004094C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((~(_WORD)a3 & 0xFF00) != 0)
  {
    sub_100023524(result, a2, a3, BYTE1(a3) & 1);
    return swift_retain();
  }
  return result;
}

void *sub_100040998(void *a1)
{
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100040A24(v2, v3, v4);
  return a1;
}

uint64_t sub_100040A24(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((~(_WORD)a3 & 0xFF00) != 0)
  {
    sub_10002F4E8(result, a2, a3, BYTE1(a3) & 1);
    return swift_release();
  }
  return result;
}

unint64_t sub_100040A74()
{
  unint64_t result = qword_1001548D0;
  if (!qword_1001548D0)
  {
    sub_1000317D8(&qword_100154878);
    sub_100040B20();
    sub_10003F7F4(&qword_1001548F8, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001548D0);
  }
  return result;
}

unint64_t sub_100040B20()
{
  unint64_t result = qword_1001548D8;
  if (!qword_1001548D8)
  {
    sub_1000317D8(&qword_100154860);
    sub_100040BE4(&qword_1001548E0, &qword_100154858);
    sub_100040BE4(&qword_1001548E8, &qword_1001548F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001548D8);
  }
  return result;
}

uint64_t sub_100040BE4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_100040C3C()
{
  return sub_10003F7F4((unint64_t *)&qword_100154910, type metadata accessor for CFString);
}

uint64_t sub_100040C84()
{
  return sub_10003F7F4(&qword_100154918, type metadata accessor for CFString);
}

uint64_t sub_100040CE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100040D80(&OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, (uint64_t (*)(void))&type metadata accessor for LayoutDirection, a1);
}

uint64_t sub_100040D10(uint64_t a1, uint64_t a2)
{
  return sub_100006A70(a1, a2, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, (uint64_t (*)(void))&type metadata accessor for LayoutDirection);
}

double sub_100040D44()
{
  return sub_1000415B0((uint64_t)&unk_10010DBE8, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
}

uint64_t sub_100040D58@<X0>(uint64_t a1@<X8>)
{
  return sub_100040D80(&OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, (uint64_t (*)(void))&type metadata accessor for UserInterfaceSizeClass, a1);
}

uint64_t sub_100040D80@<X0>(void *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  swift_getKeyPath();
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = v3 + *a1;
  swift_beginAccess();
  uint64_t v8 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a3, v7, v8);
}

uint64_t sub_100040E54@<X0>(uint64_t a1@<X8>)
{
  return sub_100040D80(&OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, (uint64_t (*)(void))&type metadata accessor for UserInterfaceSizeClass, a1);
}

uint64_t sub_100040E7C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_100040F48(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = *a2;
  swift_getKeyPath();
  uint64_t v12 = v9;
  unint64_t v13 = v8;
  uint64_t v14 = v9;
  sub_10002B4E8();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1000410A0(uint64_t a1, uint64_t a2)
{
  return sub_100006A70(a1, a2, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, (uint64_t (*)(void))&type metadata accessor for UserInterfaceSizeClass);
}

uint64_t sub_1000410D4(uint64_t a1, uint64_t a2)
{
  return sub_100006A70(a1, a2, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, (uint64_t (*)(void))&type metadata accessor for UserInterfaceSizeClass);
}

double sub_100041108@<D0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_100041638(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize, a2).n128_u64[0];
  return result;
}

uint64_t sub_10004111C()
{
  return swift_release();
}

uint64_t sub_1000411C4(uint64_t result, double a2, double a3)
{
  uint64_t v3 = (double *)(result + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
  *uint64_t v3 = a2;
  v3[1] = a3;
  return result;
}

double sub_1000411D8()
{
  return sub_100041778((uint64_t)&unk_10010DBC0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
}

double sub_1000411EC@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&double result = sub_100041804(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets, a2).n128_u64[0];
  return result;
}

uint64_t sub_100041200()
{
  return swift_release();
}

uint64_t sub_1000412B8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return sub_10003C934(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets, a2, a3, a4, a5);
}

double sub_1000412D8()
{
  return sub_10002B2E8((uint64_t)&unk_10010DBE8, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize, (uint64_t)&unk_10010DBC0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
}

uint64_t sub_1000412FC()
{
  uint64_t v1 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v2 = *(void **)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v13 - v6;
  swift_getKeyPath();
  uint64_t v18 = v0;
  unint64_t v16 = sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess();
  char v15 = (void (*)(char *, uint64_t, uint64_t))v2[2];
  v15(v7, v8, v1);
  uint64_t v14 = (void (*)(char *, void, uint64_t))v2[13];
  v14(v4, enum case for UserInterfaceSizeClass.compact(_:), v1);
  LOBYTE(v8) = static UserInterfaceSizeClass.== infix(_:_:)();
  uint64_t v9 = (void (*)(char *, uint64_t))v2[1];
  v9(v4, v1);
  v9(v7, v1);
  if (v8)
  {
    swift_getKeyPath();
    uint64_t v17 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v10 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
    swift_beginAccess();
    v15(v7, v10, v1);
    v14(v4, enum case for UserInterfaceSizeClass.regular(_:), v1);
    char v11 = static UserInterfaceSizeClass.== infix(_:_:)();
    v9(v4, v1);
    v9(v7, v1);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

double sub_10004159C()
{
  return sub_1000415B0((uint64_t)&unk_10010DC10, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize);
}

double sub_1000415B0(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v2 + *a2);
}

double sub_100041624@<D0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_100041638(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, a2).n128_u64[0];
  return result;
}

__n128 sub_100041638@<Q0>(uint64_t *a1@<X0>, void *a2@<X4>, __n128 *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  __n128 result = *(__n128 *)(v5 + *a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000416BC()
{
  return swift_release();
}

double sub_100041764()
{
  return sub_100041778((uint64_t)&unk_10010DC60, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
}

double sub_100041778(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v2 + *a2);
}

double sub_1000417F0@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&double result = sub_100041804(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets, a2).n128_u64[0];
  return result;
}

__n128 sub_100041804@<Q0>(uint64_t *a1@<X0>, void *a2@<X4>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = v5 + *a2;
  __n128 result = *(__n128 *)v6;
  long long v8 = *(_OWORD *)(v6 + 16);
  *a3 = *(_OWORD *)v6;
  a3[1] = v8;
  return result;
}

uint64_t sub_10004188C()
{
  return swift_release();
}

void sub_100041944()
{
  sub_10002B3E4();
  uint64_t v0 = self;
  id v1 = [v0 mainScreen];
  [v1 bounds];

  sub_10002B2E8((uint64_t)&unk_10010DC10, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, (uint64_t)&unk_10010DC60, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
  id v2 = [v0 mainScreen];
  [v2 bounds];
}

uint64_t sub_100041A38()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  uint64_t v2 = type metadata accessor for LayoutDirection();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
  uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v4);
  uint64_t v6 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout___observationRegistrar;
  uint64_t v7 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return swift_deallocClassInstance();
}

uint64_t sub_100041B90()
{
  return type metadata accessor for CalculatorLayout();
}

uint64_t sub_100041B98()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  uint64_t v16 = v14;
  unint64_t v17 = v15;
  v6._object = (void *)0x8000000100107B20;
  v6._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v6);
  swift_getKeyPath();
  v13[1] = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout___observationRegistrar;
  uint64_t v14 = v0;
  sub_10002B4E8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
  swift_beginAccess();
  long long v8 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v8(v5, v7, v2);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, v2);
  v10._uint64_t countAndFlagsBits = 0xD000000000000016;
  v10._object = (void *)0x8000000100107B40;
  String.append(_:)(v10);
  swift_getKeyPath();
  v13[2] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess();
  v8(v5, v11, v2);
  _print_unlocked<A, B>(_:_:)();
  v9(v5, v2);
  return v16;
}

uint64_t sub_100041E14()
{
  return sub_100041B98();
}

double sub_100041E48@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&double result = sub_100041804(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets, a2).n128_u64[0];
  return result;
}

double sub_100041E74@<D0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_100041638(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize, a2).n128_u64[0];
  return result;
}

double sub_100041EA0@<D0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_100041638(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, a2).n128_u64[0];
  return result;
}

uint64_t sub_100041ECC(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100154A48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100041F2C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

double sub_100041FBC@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&double result = sub_100041804(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets, a2).n128_u64[0];
  return result;
}

void sub_100041FE8()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  if (v1)
  {
    uint64_t v2 = self;
    id v3 = [v2 mainScreen];
    [v3 bounds];
    CGFloat v5 = v4;
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    CGFloat v11 = v10;

    v22.origin.CGFloat x = v5;
    v22.origin.y = v7;
    v22.size.width = v9;
    v22.size.height = v11;
    CGRectGetWidth(v22);
    id v12 = [v2 mainScreen];
    [v12 bounds];
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;

    v23.origin.CGFloat x = v14;
    v23.origin.y = v16;
    v23.size.width = v18;
    v23.size.height = v20;
    CGRectGetHeight(v23);
    id v21 = [v2 mainScreen];
    [v21 bounds];
  }
}

double sub_100042160()
{
  *(void *)&double result = sub_100038A14().n128_u64[0];
  return result;
}

double sub_100042178()
{
  *(void *)&double result = sub_10003C9A8().n128_u64[0];
  return result;
}

uint64_t sub_100042190()
{
  type metadata accessor for CalculatorHistoryRecordManager();
  swift_allocObject();
  uint64_t result = sub_100043088();
  qword_100160C88 = result;
  return result;
}

uint64_t sub_1000421D0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100042288@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100042348()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100042428(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100042490()
{
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_100042530@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 40);
  return result;
}

uint64_t sub_1000425D8()
{
  return swift_release();
}

uint64_t sub_1000426A8()
{
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t sub_100042748()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100042800@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000428C0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000429A0(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(a1 + 48) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if ((*(unsigned char *)(a1 + 56) & 1) == 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100042B18@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 56);
  return result;
}

uint64_t sub_100042BC0()
{
  return swift_release();
}

id sub_100042C90()
{
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v1 = *(void **)(v0 + 64);

  return v1;
}

void sub_100042D40(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = a2;
  id v3 = a2;
}

id sub_100042D74()
{
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v1 = *(void **)(v0 + 72);

  return v1;
}

void sub_100042E24(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = a2;
  id v3 = a2;
}

uint64_t sub_100042E58()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_100042EFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 80);
  return swift_unknownObjectRetain();
}

uint64_t sub_100042FA8()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_100043088()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v2 - 8);
  double v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  *(void *)(v0 + 48) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = [objc_allocWithZone((Class)NSCache) init];
  *(void *)(v0 + 72) = [objc_allocWithZone((Class)NSCache) init];
  *(void *)(v0 + 8sub_100102B8C(2, 18, 1, 0) = 0;
  ObservationRegistrar.init()();
  uint64_t v5 = sub_1000435B4(0);
  *(void *)(v0 + 16) = v5;
  type metadata accessor for StoreContext();
  double v6 = (void *)swift_allocObject();
  type metadata accessor for ModelContext();
  swift_allocObject();
  swift_retain_n();
  ModelContext.init(_:)();
  type metadata accessor for DefaultSerialModelExecutor();
  swift_allocObject();
  uint64_t v7 = DefaultSerialModelExecutor.init(modelContext:)();
  uint64_t v8 = sub_10004CBA0(&qword_100154BE8, (void (*)(uint64_t))&type metadata accessor for DefaultSerialModelExecutor);
  v6[2] = v7;
  v6[3] = v8;
  v6[4] = v5;
  *(void *)(v1 + 24) = v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  CGFloat v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v10;
  sub_10004F600((uint64_t)v4, (uint64_t)&unk_100154BF0, (uint64_t)v11);
  swift_release();
  sub_1000138BC((uint64_t)v4);
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100021598(v12, (uint64_t)qword_100161340);
  double v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    double v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfully initialized record manager.", v15, 2u);
    swift_slowDealloc();
  }

  return v1;
}

uint64_t sub_1000435B4(int a1)
{
  int v74 = a1;
  uint64_t v1 = type metadata accessor for ModelConfiguration.GroupContainer();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for ModelConfiguration.CloudKitDatabase();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for ModelConfiguration();
  uint64_t v79 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v70 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v73 = (char *)&v69 - v6;
  __chkstk_darwin(v7);
  uint64_t v78 = (char *)&v69 - v8;
  uint64_t v9 = type metadata accessor for Schema.Version();
  __chkstk_darwin(v9 - 8);
  sub_100032FA0(&qword_100154BF8);
  uint64_t v10 = swift_allocObject();
  long long v75 = xmmword_10010DCB0;
  *(_OWORD *)(v10 + 16) = xmmword_10010DCB0;
  uint64_t v11 = type metadata accessor for SchemaV1.HistoryRecord();
  uint64_t v12 = sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 4sub_100102B8C(2, 18, 1, 0) = v12;
  Schema.Version.init(_:_:_:)();
  type metadata accessor for Schema();
  swift_allocObject();
  uint64_t v13 = Schema.init(_:version:)();
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100021598(v14, (uint64_t)qword_100161340);
  swift_retain_n();
  uint64_t v80 = v15;
  CGFloat v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v77 = v3;
  uint64_t v81 = v13;
  if (v18)
  {
    double v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    *(_DWORD *)double v19 = 136315138;
    uint64_t v82 = v81;
    swift_retain();
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v82 = sub_10000DAA8(v20, v21, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "setup - schema: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  CGRect v22 = self;
  id v23 = [v22 processInfo];
  id v24 = [v23 environment];

  uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v25 + 16))
  {
    sub_100074534(0xD00000000000001BLL, 0x8000000100107DA0);
    char v27 = v26;
    swift_bridgeObjectRelease();
    uint64_t v28 = v77;
    uint64_t v29 = v79;
    if (v27) {
      goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = v77;
    uint64_t v29 = v79;
  }
  id v30 = [v22 processInfo];
  id v31 = [v30 environment];

  uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v32 + 16))
  {
    unint64_t v33 = sub_100074534(0xD00000000000001ALL, 0x8000000100107DC0);
    if (v34)
    {
      uint64_t v35 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v33);
      uint64_t v37 = *v35;
      uint64_t v36 = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v37 != 49 || v36 != 0xE100000000000000) {
        _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_15:
  static ModelConfiguration.CloudKitDatabase.none.getter();
  static ModelConfiguration.GroupContainer.automatic.getter();
  CGPoint v38 = v78;
  ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)();
  CGSize v39 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  long long v40 = v73;
  v39(v73, v38, v28);
  __n128 v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v71 = (void (*)(unint64_t, char *, uint64_t))v39;
  uint64_t v72 = v29 + 16;
  if (v43)
  {
    long long v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    *(_DWORD *)long long v44 = 136315138;
    int v69 = v44 + 4;
    v39(v70, v40, v28);
    uint64_t v45 = String.init<A>(describing:)();
    uint64_t v82 = sub_10000DAA8(v45, v46, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v28 = v77;
    swift_bridgeObjectRelease();
    long long v47 = *(void (**)(char *, uint64_t))(v79 + 8);
    v47(v40, v28);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "setup - configuration: %s", v44, 0xCu);
    swift_arrayDestroy();
    uint64_t v29 = v79;
    swift_slowDealloc();
    CGPoint v38 = v78;
    swift_slowDealloc();
  }
  else
  {
    long long v47 = *(void (**)(char *, uint64_t))(v29 + 8);
    v47(v40, v28);
  }

  if (v74)
  {
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = v71;
    if (v50)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "setup - performing migration", v52, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for ModelContainer();
    sub_100032FA0(&qword_100154C00);
    unint64_t v53 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = v75;
    v51(v54 + v53, v38, v28);
  }
  else
  {
    type metadata accessor for ModelContainer();
    sub_100032FA0(&qword_100154C00);
    unint64_t v55 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = v75;
    v71(v56 + v55, v38, v28);
  }
  swift_retain();
  CGRect v57 = v76;
  uint64_t v58 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)();
  if (v57)
  {
    v47(v38, v28);
    swift_release();
    sub_10004C078();
    swift_allocError();
    *CGRect v59 = v57;
    swift_willThrow();
  }
  else
  {
    swift_retain_n();
    CGRect v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      CGRect v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      *(_DWORD *)CGRect v62 = 136315138;
      uint64_t v76 = v62 + 4;
      uint64_t v82 = v58;
      type metadata accessor for ModelContainer();
      swift_retain();
      uint64_t v63 = String.init<A>(describing:)();
      uint64_t v82 = sub_10000DAA8(v63, v64, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "setup - container: %s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v28 = v77;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    char v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      int v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Successfully initialized data store", v67, 2u);
      swift_slowDealloc();
    }
    swift_release();

    v47(v78, v28);
  }
  return v58;
}

void sub_1000440E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  uint64_t v53 = a1;
  swift_getKeyPath();
  uint64_t v45 = sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  uint64_t v47 = v8;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v9 = sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  sub_10004CBA0(&qword_100154B98, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v46 = v9;
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  uint64_t v10 = sub_10006722C();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_getKeyPath();
  uint64_t v53 = v2;
  unint64_t v13 = sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v48 = v2 + 48;
  swift_beginAccess();
  uint64_t v14 = sub_10004C180(*(void *)(v2 + 48), v10, v12);
  uint64_t v44 = 0;
  uint64_t v49 = v10;
  if ((v15 & 1) == 0)
  {
    unint64_t v16 = v14;
    swift_getKeyPath();
    uint64_t v51 = v2;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v51 = v2;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    os_log_type_t v17 = (void *)v48;
    swift_beginAccess();
    BOOL v18 = *(void **)(v2 + 48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = v2;
    *(void *)(v2 + 48) = v18;
    uint64_t v21 = a1;
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v16 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      BOOL v18 = sub_1000A592C(v18);
      *os_log_type_t v17 = v18;
      if ((v16 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v16 >= v18[2])
        {
          __break(1u);
        }
        else if (!(v18[3 * v16 + 6] >> 62))
        {
          goto LABEL_6;
        }
        swift_bridgeObjectRetain();
        uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v41 < 0)
        {
          __break(1u);
          goto LABEL_35;
        }
LABEL_6:
        sub_1000A5344(0, 0, a1);
        swift_endAccess();
        swift_getKeyPath();
        uint64_t v51 = v20;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        unint64_t v13 = v12;
        if ((*(unsigned char *)(v20 + 56) & 1) == 0)
        {
          uint64_t KeyPath = swift_getKeyPath();
          __chkstk_darwin(KeyPath);
          *(&v42 - 2) = v20;
          *((unsigned char *)&v42 - 8) = 1;
          uint64_t v51 = v20;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
          swift_release();
        }
        uint64_t v51 = v20;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v12 = v49;
        if (qword_100154750 == -1)
        {
LABEL_9:
          uint64_t v23 = type metadata accessor for Logger();
          sub_100021598(v23, (uint64_t)qword_100161340);
          swift_retain_n();
          sub_10004C02C(v12, v13);
          id v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v26 = swift_slowAlloc();
            uint64_t v48 = swift_slowAlloc();
            uint64_t v50 = v48;
            uint64_t v51 = v21;
            *(_DWORD *)uint64_t v26 = 136315394;
            swift_getKeyPath();
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            swift_getKeyPath();
            PersistentModel.getValue<A>(forKey:)();
            swift_release();
            uint64_t v51 = sub_10000DAA8(v51, v52, &v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v26 + 12) = 2080;
            uint64_t v27 = 0x7961646F54;
            unint64_t v28 = 0xE500000000000000;
            switch(v13)
            {
              case 0uLL:
                break;
              case 1uLL:
                uint64_t v27 = 0x6164726574736559;
                unint64_t v28 = 0xE900000000000079;
                break;
              case 2uLL:
                uint64_t v27 = 0x73756F6976657250;
                unint64_t v28 = 0xEF73796144203720;
                break;
              case 3uLL:
                unint64_t v28 = 0x8000000100107D30;
                uint64_t v27 = 0xD000000000000010;
                break;
              default:
                unint64_t v28 = v13;
                break;
            }
            uint64_t v40 = v49;
            sub_10004C02C(v49, v13);
            uint64_t v51 = sub_10000DAA8(v27, v28, &v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10004BFD4(v40, v13);
            sub_10004BFD4(v40, v13);
            os_log_type_t v38 = v25;
            CGSize v39 = "Added record: %s to history in existing section: %s";
LABEL_27:
            _os_log_impl((void *)&_mh_execute_header, v24, v38, v39, (uint8_t *)v26, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            goto LABEL_28;
          }
          goto LABEL_18;
        }
LABEL_35:
        swift_once();
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
  sub_100032FA0(&qword_100154BB0);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_10010DCC0;
  *(void *)(v29 + 32) = a1;
  uint64_t v51 = v29;
  specialized Array._endMutation()();
  uint64_t v30 = v51;
  swift_getKeyPath();
  uint64_t v51 = v2;
  uint64_t v42 = a1;
  swift_retain();
  sub_10004C02C(v10, v12);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v51 = v2;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  unint64_t v43 = v12;
  sub_1000A51A0(0, 0, v10, v12, v30);
  swift_endAccess();
  swift_getKeyPath();
  uint64_t v51 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ((*(unsigned char *)(v2 + 56) & 1) == 0)
  {
    uint64_t v31 = swift_getKeyPath();
    __chkstk_darwin(v31);
    *(&v42 - 2) = v2;
    *((unsigned char *)&v42 - 8) = 1;
    uint64_t v51 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
  uint64_t v51 = v2;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  if (qword_100154750 != -1) {
LABEL_31:
  }
    swift_once();
  uint64_t v32 = type metadata accessor for Logger();
  sub_100021598(v32, (uint64_t)qword_100161340);
  uint64_t v33 = v42;
  swift_retain_n();
  uint64_t v12 = v49;
  unint64_t v13 = v43;
  sub_10004C02C(v49, v43);
  id v24 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v34))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    uint64_t v50 = v48;
    uint64_t v51 = v33;
    *(_DWORD *)uint64_t v26 = 136315394;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v51 = sub_10000DAA8(v51, v52, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v35 = 0x7961646F54;
    unint64_t v36 = 0xE500000000000000;
    switch(v13)
    {
      case 0uLL:
        break;
      case 1uLL:
        uint64_t v35 = 0x6164726574736559;
        unint64_t v36 = 0xE900000000000079;
        break;
      case 2uLL:
        uint64_t v35 = 0x73756F6976657250;
        unint64_t v36 = 0xEF73796144203720;
        break;
      case 3uLL:
        unint64_t v36 = 0x8000000100107D30;
        uint64_t v35 = 0xD000000000000010;
        break;
      default:
        unint64_t v36 = v13;
        break;
    }
    uint64_t v37 = v49;
    sub_10004C02C(v49, v13);
    uint64_t v51 = sub_10000DAA8(v35, v36, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004BFD4(v37, v13);
    sub_10004BFD4(v37, v13);
    os_log_type_t v38 = v34;
    CGSize v39 = "Added record: %s to history in new section for: %s";
    goto LABEL_27;
  }
LABEL_18:
  swift_release_n();
  sub_10004BFD4(v12, v13);
  sub_10004BFD4(v12, v13);
LABEL_28:
}

uint64_t sub_100044CF4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenericRecord();
  uint64_t v17 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v17 + 64);
  __chkstk_darwin(v7 - 8);
  sub_10004BA5C(a1, (uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SchemaV1.HistoryRecord();
  swift_allocObject();
  uint64_t v9 = sub_10007A678((uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getKeyPath();
  uint64_t v18 = v1;
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v1 + 40))
  {
    sub_1000440E0((uint64_t)v9);
    id v10 = [self defaultCenter];
    if (qword_1001544F8 != -1) {
      swift_once();
    }
    [v10 postNotificationName:qword_100161100 object:0];
  }
  else
  {
    uint64_t v16 = a1;
    swift_getKeyPath();
    uint64_t v18 = v1;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v18 = v1;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v1 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t v18 = v1;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    a1 = v16;
  }
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  sub_10004BA5C(a1, (uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v2;
  sub_10004BAC4((uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v13 + v12);
  swift_retain();
  sub_10004F600((uint64_t)v6, (uint64_t)&unk_100154C78, (uint64_t)v13);
  swift_release();
  swift_release();
  return sub_1000138BC((uint64_t)v6);
}

uint64_t sub_1000450F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100045110, 0, 0);
}

uint64_t sub_100045110()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004CF40;
  uint64_t v2 = *(void *)(v0 + 24);
  return sub_1000998CC(v2);
}

void sub_1000451AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v11 = v1 + OBJC_IVAR____TtC10Calculator30CalculatorHistoryRecordManager___observationRegistrar;
  v80[2] = v2;
  uint64_t v12 = sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 48) + 16))
  {
    uint64_t v73 = v8;
    uint64_t v74 = v7;
    uint64_t v76 = v11;
    if (qword_100154750 != -1) {
      swift_once();
    }
    unint64_t v75 = v12;
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = sub_100021598(v13, (uint64_t)qword_100161340);
    swift_retain_n();
    uint64_t v71 = v14;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    p_superclass = _TtC10Calculator33CalculatorUnitConversionViewModel.superclass;
    uint64_t v72 = v6;
    int v69 = (void *)(v2 + 48);
    if (v17)
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v70 = v2;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v77 = v21;
      uint64_t v78 = a1;
      *(_DWORD *)uint64_t v20 = 136315138;
      v80[0] = v21;
      uint64_t v68 = v20 + 4;
      swift_getKeyPath();
      sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      PersistentModel.getValue<A>(forKey:)();
      p_superclass = (__objc2_class **)(_TtC10Calculator33CalculatorUnitConversionViewModel + 8);
      swift_release();
      uint64_t v78 = sub_10000DAA8(v78, v79, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Deleting record: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v70;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v27 = (char *)p_superclass[47] + a1;
    uint64_t v78 = a1;
    swift_getKeyPath();
    uint64_t v77 = sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    uint64_t v28 = sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    sub_10004CBA0(&qword_100154B98, (void (*)(uint64_t))&type metadata accessor for Date);
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v29 = sub_10006722C();
    unint64_t v31 = v30;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v10, v74);
    swift_getKeyPath();
    uint64_t v78 = v2;
    unint64_t v32 = v75;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    uint64_t v33 = v29;
    swift_release();
    uint64_t v34 = sub_10004C180(*(void *)(v2 + 48), v29, v31);
    if (v35)
    {
      swift_retain_n();
      sub_10004C02C(v29, v31);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v74 = (uint64_t)v27;
        uint64_t v70 = v2;
        uint64_t v51 = swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        v80[0] = v76;
        *(_DWORD *)uint64_t v51 = 136315394;
        uint64_t v68 = (uint8_t *)v28;
        uint64_t v52 = v33;
        uint64_t v53 = 0x7961646F54;
        unint64_t v54 = 0xE500000000000000;
        switch(v31)
        {
          case 0uLL:
            break;
          case 1uLL:
            uint64_t v53 = 0x6164726574736559;
            unint64_t v54 = 0xE900000000000079;
            break;
          case 2uLL:
            uint64_t v53 = 0x73756F6976657250;
            unint64_t v54 = 0xEF73796144203720;
            break;
          case 3uLL:
            unint64_t v54 = 0x8000000100107D30;
            uint64_t v53 = 0xD000000000000010;
            break;
          default:
            uint64_t v52 = 0xE500000000000000;
            uint64_t v53 = 0xE500000000000000;
            unint64_t v54 = v31;
            break;
        }
        sub_10004C02C(v52, v31);
        uint64_t v78 = sub_10000DAA8(v53, v54, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10004BFD4(v52, v31);
        sub_10004BFD4(v52, v31);
        *(_WORD *)(v51 + 12) = 2080;
        uint64_t v78 = a1;
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        PersistentModel.getValue<A>(forKey:)();
        swift_release();
        uint64_t v78 = sub_10000DAA8(v78, v79, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed to find section: %s and delete record: %s", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v2 = v70;
      }
      else
      {
        sub_10004BFD4(v33, v31);
        sub_10004BFD4(v33, v31);

        swift_release_n();
      }
      goto LABEL_42;
    }
    unint64_t v36 = v34;
    uint64_t v73 = v29;
    uint64_t KeyPath = (void *)swift_getKeyPath();
    uint64_t v78 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if ((v36 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v32 = v36;
      if (v36 < *(void *)(*(void *)(v2 + 48) + 16))
      {
        uint64_t v74 = (uint64_t)v27;
        swift_retain();
        unint64_t v38 = swift_bridgeObjectRetain();
        unint64_t v36 = sub_10004C288(v38, a1);
        char v40 = v39;
        swift_bridgeObjectRelease();
        swift_release();
        if (v40)
        {
          swift_retain_n();
          uint64_t v55 = v73;
          sub_10004C02C(v73, v31);
          uint64_t v56 = Logger.logObject.getter();
          os_log_type_t v57 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v56, v57))
          {
            uint64_t v70 = v2;
            uint64_t v58 = swift_slowAlloc();
            uint64_t v76 = swift_slowAlloc();
            v80[0] = v76;
            *(_DWORD *)uint64_t v58 = 136315394;
            uint64_t v78 = a1;
            swift_getKeyPath();
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            swift_getKeyPath();
            uint64_t v68 = (uint8_t *)v28;
            PersistentModel.getValue<A>(forKey:)();
            swift_release();
            uint64_t v78 = sub_10000DAA8(v78, v79, v80);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v58 + 12) = 2080;
            uint64_t v59 = 0x7961646F54;
            unint64_t v60 = 0xE500000000000000;
            uint64_t v2 = v70;
            switch(v31)
            {
              case 0uLL:
                break;
              case 1uLL:
                uint64_t v59 = 0x6164726574736559;
                unint64_t v60 = 0xE900000000000079;
                break;
              case 2uLL:
                uint64_t v59 = 0x73756F6976657250;
                unint64_t v60 = 0xEF73796144203720;
                break;
              case 3uLL:
                unint64_t v60 = 0x8000000100107D30;
                uint64_t v59 = 0xD000000000000010;
                break;
              default:
                uint64_t v59 = v73;
                unint64_t v60 = v31;
                uint64_t v2 = v70;
                break;
            }
            uint64_t v61 = v73;
            sub_10004C02C(v73, v31);
            uint64_t v78 = sub_10000DAA8(v59, v60, v80);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10004BFD4(v61, v31);
            sub_10004BFD4(v61, v31);
            _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to find and delete record: %s from section: %s list.", (uint8_t *)v58, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
            sub_10004BFD4(v55, v31);
            sub_10004BFD4(v55, v31);
          }
          goto LABEL_42;
        }
        uint64_t v68 = (uint8_t *)v28;
        sub_10004BFD4(v73, v31);
        swift_getKeyPath();
        uint64_t v78 = v2;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v78 = v2;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        swift_beginAccess();
        uint64_t KeyPath = *(void **)(v2 + 48);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v2 + 48) = KeyPath;
        if (isUniquelyReferenced_nonNull_native)
        {
LABEL_16:
          if (v32 >= KeyPath[2])
          {
            __break(1u);
          }
          else
          {
            sub_1000A1B94(v36);
            swift_endAccess();
            swift_release();
            swift_getKeyPath();
            uint64_t v78 = v2;
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            if ((*(unsigned char *)(v2 + 56) & 1) == 0)
            {
              uint64_t v42 = swift_getKeyPath();
              __chkstk_darwin(v42);
              *(&v68 - 2) = (uint8_t *)v2;
              *((unsigned char *)&v68 - 8) = 1;
              uint64_t v78 = v2;
              ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
              swift_release();
            }
            uint64_t v78 = v2;
            swift_getKeyPath();
            ObservationRegistrar.didSet<A, B>(_:keyPath:)();
            swift_release();
            swift_getKeyPath();
            uint64_t v78 = v2;
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            uint64_t v43 = *(void *)(v2 + 48);
            if (v32 < *(void *)(v43 + 16))
            {
              unint64_t v44 = *(void *)(v43 + 24 * v32 + 48);
              if (!(v44 >> 62))
              {
                if (!*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
LABEL_22:
                  swift_getKeyPath();
                  uint64_t v78 = v2;
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  uint64_t v78 = v2;
                  swift_getKeyPath();
                  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
                  swift_release();
                  swift_beginAccess();
                  uint64_t v45 = sub_1000A1B98(v32);
                  unint64_t v47 = v46;
                  swift_endAccess();
                  sub_10004BFD4(v45, v47);
                  swift_bridgeObjectRelease();
                  swift_getKeyPath();
                  uint64_t v78 = v2;
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  if ((*(unsigned char *)(v2 + 56) & 1) == 0)
                  {
                    uint64_t v48 = swift_getKeyPath();
                    __chkstk_darwin(v48);
                    *(&v68 - 2) = (uint8_t *)v2;
                    *((unsigned char *)&v68 - 8) = 1;
                    uint64_t v78 = v2;
                    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
                    swift_release();
                  }
                  uint64_t v78 = v2;
                  swift_getKeyPath();
                  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
                  swift_release();
                }
LABEL_42:
                uint64_t v78 = a1;
                swift_getKeyPath();
                ObservationRegistrar.access<A, B>(_:keyPath:)();
                swift_release();
                swift_getKeyPath();
                PersistentModel.getValue<A>(forKey:)();
                swift_release();
                uint64_t v62 = v78;
                unint64_t v63 = v79;
                uint64_t v64 = type metadata accessor for TaskPriority();
                uint64_t v65 = (uint64_t)v72;
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v72, 1, 1, v64);
                os_log_type_t v66 = (void *)swift_allocObject();
                v66[2] = 0;
                v66[3] = 0;
                v66[4] = v2;
                v66[5] = v62;
                v66[6] = v63;
                swift_retain();
                sub_100046654(v65, (uint64_t)&unk_100154C68, (uint64_t)v66);
                swift_release();
                sub_1000138BC(v65);
                return;
              }
LABEL_48:
              swift_bridgeObjectRetain();
              uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v67) {
                goto LABEL_22;
              }
              goto LABEL_42;
            }
          }
          __break(1u);
          goto LABEL_48;
        }
LABEL_45:
        uint64_t KeyPath = sub_1000A592C(KeyPath);
        *int v69 = KeyPath;
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_45;
  }
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100021598(v22, (uint64_t)qword_100161340);
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v25 = 136315138;
    v80[0] = v26;
    uint64_t v77 = (uint64_t)(v25 + 4);
    uint64_t v78 = a1;
    swift_getKeyPath();
    sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v78 = sub_10000DAA8(v78, v79, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to delete record: %s from empty list.", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_10004649C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return _swift_task_switch(sub_1000464C0, 0, 0);
}

uint64_t sub_1000464C0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100046560;
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  return sub_10009A040(v3, v2, 0);
}

uint64_t sub_100046560()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100046654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004CA2C(a1, (uint64_t)v7);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000138BC((uint64_t)v7);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sub_100046814(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 16);
    if (!result) {
      return result;
    }
  }
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100021598(v8, (uint64_t)qword_100161340);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Deleting multiple records.", v11, 2u);
    swift_slowDealloc();
  }

  swift_getKeyPath();
  swift_retain();
  uint64_t v12 = sub_10004C54C(a1, (uint64_t (*)(uint64_t))sub_10004C178);
  swift_release_n();
  uint64_t v13 = type metadata accessor for TaskPriority();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v6, 1, 1, v13);
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = 0;
  v15[3] = 0;
  v15[4] = v2;
  v15[5] = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10004F600((uint64_t)v6, (uint64_t)&unk_100154C28, (uint64_t)v15);
  swift_release();
  sub_1000138BC((uint64_t)v6);
  v14(v6, 1, 1, v13);
  os_log_type_t v16 = (void *)swift_allocObject();
  void v16[2] = 0;
  v16[3] = 0;
  v16[4] = v2;
  v16[5] = v12;
  swift_retain();
  sub_100046654((uint64_t)v6, (uint64_t)&unk_100154C38, (uint64_t)v16);
  swift_release();
  return sub_1000138BC((uint64_t)v6);
}

uint64_t sub_100046AD4()
{
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

uint64_t sub_100046B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  sub_100032FA0(&qword_100154B68);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100046BB8, 0, 0);
}

uint64_t sub_100046BB8()
{
  char v99 = v0;
  uint64_t v1 = v0[12];
  swift_getKeyPath();
  v0[9] = v1;
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 48);
  char v97 = v2;
  uint64_t v80 = v2[2];
  if (!v80)
  {
    swift_bridgeObjectRetain();
    goto LABEL_174;
  }
  uint64_t v3 = (void *)v0[13];
  swift_bridgeObjectRetain();
  unint64_t v4 = 0;
  uint64_t v87 = v3;
  unint64_t v79 = v3 + 9;
  uint64_t v88 = v0;
  do
  {
    if (v4 >= v2[2]) {
      goto LABEL_185;
    }
    uint64_t v5 = &v2[3 * v4];
    unint64_t v6 = v5[6];
    uint64_t v81 = v5 + 6;
    unint64_t v82 = v4;
    unint64_t v98 = v6;
    unint64_t v83 = v6 >> 62;
    uint64_t v84 = v2;
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_31;
      }
LABEL_8:
      uint64_t v8 = 0;
      uint64_t v95 = v87[2];
      uint64_t v86 = v7;
      while (1)
      {
        if ((v6 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v9 = *(void *)(v6 + 32 + 8 * v8);
          swift_retain();
        }
        v0[10] = v9;
        swift_getKeyPath();
        sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
        PersistentModel.getValue<A>(forKey:)();
        swift_release();
        uint64_t v10 = v0[6];
        if (v95)
        {
          uint64_t v11 = v0[5];
          uint64_t v12 = v87[4];
          if (v12 == v11 && v87[5] == v10)
          {
            uint64_t v93 = v0[6];
            goto LABEL_44;
          }
          uint64_t v93 = v87[5];
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_42;
          }
          if (v95 != 1)
          {
            if (v87[6] == v11 && v87[7] == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_42:
              uint64_t v11 = v12;
              goto LABEL_44;
            }
            if (v95 != 2) {
              break;
            }
          }
        }
LABEL_29:
        swift_bridgeObjectRelease();
        swift_release();
        BOOL v17 = __OFADD__(v8++, 1);
        if (v17) {
          goto LABEL_181;
        }
        if (v8 == v86) {
          goto LABEL_31;
        }
      }
      uint64_t v13 = v79;
      uint64_t v14 = 2;
      while (1)
      {
        uint64_t v15 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_180;
        }
        BOOL v16 = *(v13 - 1) == v11 && *v13 == v10;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        ++v14;
        v13 += 2;
        uint64_t v0 = v88;
        if (v15 == v95) {
          goto LABEL_29;
        }
      }
      uint64_t v11 = v12;
      uint64_t v0 = v88;
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v21 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_196;
      }
      if (!v83)
      {
        uint64_t v22 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_47;
      }
LABEL_96:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      while (1)
      {
LABEL_47:
        if (v21 == v22) {
          goto LABEL_33;
        }
        if ((v6 & 0xC000000000000001) != 0)
        {
          uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v21 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
            goto LABEL_184;
          }
          if (v21 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_178;
          }
          uint64_t v23 = *(void *)(v6 + 8 * v21 + 32);
          swift_retain();
        }
        v0[11] = v23;
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        PersistentModel.getValue<A>(forKey:)();
        swift_release();
        uint64_t v25 = v0[7];
        uint64_t v24 = v0[8];
        if (v11 == v25 && v93 == v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_81;
        }
        if (v95 != 1)
        {
          if (v87[6] == v25 && v87[7] == v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_80:
            uint64_t v0 = v88;
LABEL_81:
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_82;
          }
          if (v95 != 2)
          {
            unint64_t v30 = v79;
            uint64_t v31 = 2;
            do
            {
              uint64_t v32 = v31 + 1;
              if (__OFADD__(v31, 1)) {
                goto LABEL_182;
              }
              BOOL v33 = *(v30 - 1) == v25 && *v30 == v24;
              if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_80;
              }
              ++v31;
              v30 += 2;
            }
            while (v32 != v95);
          }
        }
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v0 = v88;
        if (v8 != v21)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v28 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v8 < 0) {
              goto LABEL_188;
            }
            unint64_t v26 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v8 >= v26)
            {
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
              goto LABEL_200;
            }
            uint64_t v27 = *(void *)(v6 + 32 + 8 * v8);
            swift_retain();
            if ((v21 & 0x8000000000000000) != 0) {
              goto LABEL_190;
            }
            if (v21 >= v26) {
              goto LABEL_191;
            }
            uint64_t v28 = *(void *)(v6 + 32 + 8 * v21);
            swift_retain();
          }
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
            || (v6 & 0x8000000000000000) != 0
            || (v6 & 0x4000000000000000) != 0)
          {
            unint64_t v6 = sub_1000A5940(v6);
            unint64_t v98 = v6;
          }
          *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x2sub_100102B8C(2, 18, 1, 0) = v28;
          swift_release();
          specialized Array._endMutation()();
          uint64_t v29 = v98;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
            || (v98 & 0x8000000000000000) != 0
            || (v98 & 0x4000000000000000) != 0)
          {
            uint64_t v29 = sub_1000A5940(v98);
            unint64_t v98 = v29;
          }
          if ((v21 & 0x8000000000000000) != 0) {
            goto LABEL_192;
          }
          if (v21 >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_193;
          }
          *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 8 * v21 + 0x2sub_100102B8C(2, 18, 1, 0) = v27;
          swift_release();
          specialized Array._endMutation()();
        }
        BOOL v17 = __OFADD__(v8++, 1);
        if (v17) {
          goto LABEL_183;
        }
LABEL_82:
        BOOL v17 = __OFADD__(v21++, 1);
        if (v17) {
          goto LABEL_179;
        }
        unint64_t v6 = v98;
        if (v98 >> 62) {
          goto LABEL_96;
        }
        uint64_t v22 = *(void *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v7) {
      goto LABEL_8;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    if (v83)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
LABEL_33:
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v18 < v8) {
        goto LABEL_187;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v18 < v8) {
        goto LABEL_187;
      }
    }
    sub_1000A7B34(v8, v18);
    uint64_t v2 = v84;
    if (v82 >= v84[2]) {
      goto LABEL_186;
    }
    unint64_t v19 = *v81;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v20 = sub_10004B778(v19, v98);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v20)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = sub_1000A592C(v84);
      }
      if (v82 >= v2[2]) {
        goto LABEL_197;
      }
      v2[3 * v82 + 6] = v98;
      swift_bridgeObjectRelease();
      char v97 = v2;
    }
    unint64_t v4 = v82 + 1;
  }
  while (v82 + 1 != v80);
  uint64_t v34 = v2[2];
  if (!v34) {
    goto LABEL_174;
  }
  char v35 = v2 + 4;
  swift_bridgeObjectRetain();
  unint64_t v36 = 0;
  uint64_t v89 = v2 + 4;
  uint64_t v90 = v34;
LABEL_110:
  if (v36 >= v2[2]) {
    goto LABEL_195;
  }
  char v40 = &v35[3 * v36];
  uint64_t v39 = *v40;
  unint64_t v41 = v40[1];
  unint64_t v42 = v40[2];
  if (v42 >> 62)
  {
    swift_bridgeObjectRetain_n();
    sub_10004C02C(v39, v41);
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v71) {
      goto LABEL_109;
    }
  }
  else
  {
    uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    sub_10004C02C(v39, v41);
    if (v43) {
      goto LABEL_109;
    }
  }
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_100021598(v44, (uint64_t)qword_100161340);
  swift_bridgeObjectRetain();
  sub_10004C02C(v39, v41);
  swift_bridgeObjectRetain();
  sub_10004C02C(v39, v41);
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  uint64_t v96 = v39;
  unint64_t v91 = v36;
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    unint64_t v98 = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315138;
    unint64_t v48 = 0xE500000000000000;
    uint64_t v49 = 0x7961646F54;
    switch(v41)
    {
      case 0uLL:
        break;
      case 1uLL:
        unint64_t v48 = 0xE900000000000079;
        uint64_t v49 = 0x6164726574736559;
        break;
      case 2uLL:
        unint64_t v48 = 0xEF73796144203720;
        uint64_t v49 = 0x73756F6976657250;
        break;
      case 3uLL:
        unint64_t v48 = 0x8000000100107D30;
        uint64_t v49 = 0xD000000000000010;
        break;
      default:
        uint64_t v49 = v39;
        unint64_t v48 = v41;
        break;
    }
    sub_10004C02C(v39, v41);
    *(void *)(v47 + 4) = sub_10000DAA8(v49, v48, (uint64_t *)&v98);
    swift_bridgeObjectRelease();
    sub_10004BFD4(v39, v41);
    swift_bridgeObjectRelease();
    sub_10004BFD4(v39, v41);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Empty section found for %s deleting multiple records, removing section from list", (uint8_t *)v47, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10004BFD4(v39, v41);
    swift_bridgeObjectRelease();
    sub_10004BFD4(v39, v41);
    swift_bridgeObjectRelease();
  }
  os_log_type_t v50 = v97;
  uint64_t v51 = v97[2];
  if (!v51)
  {
    int64_t v37 = 0;
    uint64_t v38 = 0;
    goto LABEL_108;
  }
  uint64_t v52 = 0;
  uint64_t v38 = 0;
  uint64_t v53 = v97 + 5;
  while (2)
  {
    switch(*v53)
    {
      case 0:
        if (!v41) {
          goto LABEL_140;
        }
        goto LABEL_126;
      case 1:
        if (v41 == 1) {
          goto LABEL_140;
        }
        goto LABEL_126;
      case 2:
        if (v41 == 2) {
          goto LABEL_140;
        }
        goto LABEL_126;
      case 3:
        if (v41 != 3) {
          goto LABEL_126;
        }
        goto LABEL_140;
      default:
        if (v41 < 4
          || (*(v53 - 1) == v39 ? (BOOL v54 = *v53 == v41) : (BOOL v54 = 0),
              !v54 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
        {
LABEL_126:
          v53 += 3;
          ++v38;
          v52 += 3;
          if (v51 == v38)
          {
            uint64_t v38 = v51;
            goto LABEL_169;
          }
          continue;
        }
LABEL_140:
        unint64_t v55 = v38 + 1;
        if (__OFADD__(v38, 1))
        {
LABEL_201:
          __break(1u);
          JUMPOUT(0x100047B7CLL);
        }
        if (v55 != v51)
        {
          unint64_t v56 = v97[2];
          uint64_t v85 = v2;
          while (2)
          {
            if (v55 < v56)
            {
              unint64_t v60 = &v50[v52];
              uint64_t v61 = v50[v52 + 8];
              switch(v61)
              {
                case 0:
                  if (!v41) {
                    goto LABEL_145;
                  }
                  goto LABEL_162;
                case 1:
                  if (v41 != 1) {
                    goto LABEL_162;
                  }
                  goto LABEL_145;
                case 2:
                  if (v41 != 2) {
                    goto LABEL_162;
                  }
                  goto LABEL_145;
                case 3:
                  if (v41 != 3) {
                    goto LABEL_162;
                  }
                  goto LABEL_145;
                default:
                  if (v41 >= 4)
                  {
                    BOOL v62 = v60[7] == v96 && v61 == v41;
                    if (v62 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                      goto LABEL_145;
                    }
                  }
LABEL_162:
                  if (v55 == v38) {
                    goto LABEL_144;
                  }
                  if (v38 >= v56) {
                    goto LABEL_198;
                  }
                  unint64_t v63 = &v50[3 * v38 + 4];
                  uint64_t v64 = v63[2];
                  uint64_t v65 = v60[7];
                  unint64_t v66 = v60[8];
                  uint64_t v67 = v50[v52 + 9];
                  unint64_t v92 = v63[1];
                  uint64_t v94 = *v63;
                  sub_10004C02C(*v63, v92);
                  swift_bridgeObjectRetain();
                  sub_10004C02C(v65, v66);
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    os_log_type_t v50 = sub_1000A592C(v50);
                  }
                  uint64_t v68 = &v50[3 * v38];
                  uint64_t v69 = v68[4];
                  unint64_t v70 = v68[5];
                  v68[4] = v65;
                  v68[5] = v66;
                  v68[6] = v67;
                  sub_10004BFD4(v69, v70);
                  swift_bridgeObjectRelease();
                  if (v55 >= v50[2]) {
                    goto LABEL_199;
                  }
                  os_log_type_t v57 = &v50[v52];
                  uint64_t v58 = v50[v52 + 7];
                  unint64_t v59 = v50[v52 + 8];
                  v57[7] = v94;
                  v57[8] = v92;
                  v57[9] = v64;
                  sub_10004BFD4(v58, v59);
                  swift_bridgeObjectRelease();
                  char v97 = v50;
                  uint64_t v2 = v85;
LABEL_144:
                  BOOL v17 = __OFADD__(v38++, 1);
                  if (v17) {
                    goto LABEL_194;
                  }
LABEL_145:
                  ++v55;
                  unint64_t v56 = v50[2];
                  v52 += 3;
                  if (v55 != v56) {
                    continue;
                  }
                  goto LABEL_169;
              }
            }
            break;
          }
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
          goto LABEL_189;
        }
LABEL_169:
        int64_t v37 = v50[2];
        if (v37 < v38)
        {
LABEL_200:
          __break(1u);
          goto LABEL_201;
        }
LABEL_108:
        sub_1000A7E14(v38, v37);
        char v35 = v89;
        uint64_t v34 = v90;
        unint64_t v36 = v91;
        uint64_t v39 = v96;
LABEL_109:
        ++v36;
        sub_10004BFD4(v39, v41);
        swift_bridgeObjectRelease();
        uint64_t v0 = v88;
        if (v36 != v34) {
          goto LABEL_110;
        }
        swift_bridgeObjectRelease();
        uint64_t v2 = v97;
LABEL_174:
        uint64_t v72 = v0[14];
        uint64_t v73 = v0[12];
        uint64_t v74 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v72, 1, 1, v74);
        type metadata accessor for MainActor();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v75 = static MainActor.shared.getter();
        uint64_t v76 = (void *)swift_allocObject();
        v76[2] = v75;
        v76[3] = &protocol witness table for MainActor;
        v76[4] = v73;
        v76[5] = v2;
        sub_100013710(v72, (uint64_t)&unk_100154C48, (uint64_t)v76);
        swift_bridgeObjectRelease();
        swift_release();
        swift_task_dealloc();
        uint64_t v77 = (uint64_t (*)(void))v0[1];
        return v77();
    }
  }
}

uint64_t sub_100047BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100047C44, v7, v6);
}

uint64_t sub_100047C44()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[2] = v2;
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100047D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100047DA4, 0, 0);
}

uint64_t sub_100047DA4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100047E40;
  uint64_t v2 = *(void *)(v0 + 24);
  return sub_10009AC44(v2);
}

uint64_t sub_100047E40()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100047F34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  uint64_t v15 = v0;
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v0 + 48) + 16))
  {
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100021598(v6, (uint64_t)qword_100161340);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deleting all records from memory.", v9, 2u);
      swift_slowDealloc();
    }

    swift_getKeyPath();
    uint64_t v14 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v14 = v1;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(void *)(v1 + 48) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    uint64_t v14 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if ((*(unsigned char *)(v1 + 56) & 1) == 0)
    {
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      *(void *)&v13[-16] = v1;
      v13[-8] = 1;
      uint64_t v14 = v1;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
    uint64_t v14 = v1;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v11 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = 0;
    uint64_t v12[3] = 0;
    v12[4] = v1;
    swift_retain();
    sub_10004F600((uint64_t)v4, (uint64_t)&unk_100154C18, (uint64_t)v12);
    swift_release();
    return sub_1000138BC((uint64_t)v4);
  }
  return result;
}

uint64_t sub_1000482F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100048314, 0, 0);
}

uint64_t sub_100048314()
{
  uint64_t v1 = type metadata accessor for SchemaV1.HistoryRecord();
  uint64_t v2 = sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000483FC;
  return sub_10009BC84(v1, v2);
}

uint64_t sub_1000483FC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000484F0()
{
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  unint64_t v2 = *(void *)(v1 + 48);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v3)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      return v3;
    }
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_retain();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t CalculatorHistoryRecordManager.deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator30CalculatorHistoryRecordManager___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t CalculatorHistoryRecordManager.__deallocating_deinit()
{
  CalculatorHistoryRecordManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_100048734()
{
  return type metadata accessor for CalculatorHistoryRecordManager();
}

uint64_t type metadata accessor for CalculatorHistoryRecordManager()
{
  uint64_t result = qword_100154A98;
  if (!qword_100154A98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100048788()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100048860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for Date();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  sub_100032FA0(&qword_100154B68);
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_100048950, 0, 0);
}

uint64_t sub_100048950()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[11] = Strong;
  if (Strong)
  {
    v0[12] = *(void *)(Strong + 24);
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[13] = v2;
    void *v2 = v0;
    v2[1] = sub_100048A5C;
    return sub_100098AAC();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100048A5C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100048B7C, 0, 0);
}

uint64_t sub_100048B7C()
{
  uint64_t v1 = v0[14];
  uint64_t v28 = *(void *)(v1 + 16);
  if (v28)
  {
    unint64_t v2 = 0;
    uint64_t v27 = (void (**)(uint64_t, uint64_t))(v0[8] + 8);
    uint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v26 = v0[14];
    do
    {
      if (v2 >= *(void *)(v1 + 16))
      {
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v5 = v0[9];
      uint64_t v6 = v0[7];
      type metadata accessor for SchemaV1.HistoryRecord();
      swift_allocObject();
      uint64_t v7 = swift_bridgeObjectRetain();
      unint64_t v8 = sub_100079A64(v7);
      v0[5] = v8;
      swift_getKeyPath();
      sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      sub_10004CBA0(&qword_100154B98, (void (*)(uint64_t))&type metadata accessor for Date);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      uint64_t v9 = sub_10006722C();
      unint64_t v11 = v10;
      (*v27)(v5, v6);
      uint64_t v12 = v3[2];
      if (v12)
      {
        uint64_t v13 = 24 * v12 + 24;
        while (1)
        {
          uint64_t v14 = *(void *)((char *)v3 + v13 - 8);
          switch(v14)
          {
            case 0:
              if (!v11) {
                goto LABEL_29;
              }
              goto LABEL_9;
            case 1:
              if (v11 == 1) {
                goto LABEL_29;
              }
              goto LABEL_9;
            case 2:
              if (v11 == 2) {
                goto LABEL_29;
              }
              goto LABEL_9;
            case 3:
              if (v11 != 3) {
                goto LABEL_9;
              }
              goto LABEL_29;
            default:
              if (v11 >= 4)
              {
                BOOL v15 = *(void *)((char *)v3 + v13 - 16) == v9 && v14 == v11;
                if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  sub_10004BFD4(v9, v11);
LABEL_29:
                  swift_retain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v3 = sub_1000A592C(v3);
                  }
                  if (v12 <= v3[2])
                  {
                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                    if (*(void *)((*(void *)((char *)v3 + v13) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)((char *)v3 + v13) & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    }
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    goto LABEL_4;
                  }
LABEL_41:
                  __break(1u);
                  JUMPOUT(0x100049088);
                }
              }
LABEL_9:
              v13 -= 24;
              if (!--v12) {
                goto LABEL_24;
              }
              break;
          }
        }
      }
LABEL_24:
      sub_100032FA0(&qword_100154BB0);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_10010DCC0;
      *(void *)(v16 + 32) = v8;
      uint64_t v29 = v16;
      specialized Array._endMutation()();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_1000A49E4(0, v3[2] + 1, 1, v3);
      }
      unint64_t v18 = v3[2];
      unint64_t v17 = v3[3];
      if (v18 >= v17 >> 1) {
        uint64_t v3 = sub_1000A49E4((void *)(v17 > 1), v18 + 1, 1, v3);
      }
      v3[2] = v18 + 1;
      uint64_t v4 = &v3[3 * v18];
      v4[4] = v9;
      v4[5] = v11;
      v4[6] = v29;
LABEL_4:
      ++v2;
      swift_release();
      uint64_t v1 = v26;
    }
    while (v2 != v28);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  uint64_t v20 = v0[10];
  uint64_t v19 = v0[11];
  uint64_t v21 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v22 = static MainActor.shared.getter();
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v22;
  v23[3] = &protocol witness table for MainActor;
  v23[4] = v19;
  v23[5] = v3;
  sub_100013710(v20, (uint64_t)&unk_100154BD0, (uint64_t)v23);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_100049098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100049130, v7, v6);
}

uint64_t sub_100049130()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[6];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[2] = v2;
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_getKeyPath();
  v0[2] = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  unint64_t v4 = *(void *)(v2 + 32);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_6;
    }
  }
  else if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  sub_1000493F8();
  id v5 = [self defaultCenter];
  if (qword_1001544F8 != -1) {
    swift_once();
  }
  [v5 postNotificationName:qword_100161100 object:0];

LABEL_6:
  uint64_t v6 = v0[6];
  swift_getKeyPath();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = v6;
  *(unsigned char *)(v7 + 24) = 1;
  v0[5] = v6;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000493F8()
{
  uint64_t v1 = v0;
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100021598(v2, (uint64_t)qword_100161340);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  LOBYTE(v4) = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v3, (os_log_type_t)v4))
  {

    swift_release_n();
    goto LABEL_20;
  }
  unint64_t v5 = swift_slowAlloc();
  uint64_t v26 = swift_slowAlloc();
  *(_DWORD *)unint64_t v5 = 136315138;
  swift_getKeyPath();
  uint64_t v27 = v0;
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  unint64_t v6 = *(void *)(v0 + 32);
  if (v6 >> 62) {
    goto LABEL_31;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (result = swift_bridgeObjectRetain_n(); ; uint64_t v7 = result)
  {
    uint64_t v23 = (uint8_t *)v5;
    log = v3;
    if (v7) {
      break;
    }
LABEL_19:
    swift_bridgeObjectRelease_n();
    uint64_t v18 = Array.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_10000DAA8(v18, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v4, "Adding pending records performed before record manager initialization: %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_20:
    swift_getKeyPath();
    unint64_t v6 = v1 + OBJC_IVAR____TtC10Calculator30CalculatorHistoryRecordManager___observationRegistrar;
    uint64_t v27 = v1;
    uint64_t v3 = sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    unint64_t v5 = *(void *)(v1 + 32);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v4) {
        goto LABEL_29;
      }
    }
    if (v4 >= 1)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if ((v5 & 0xC000000000000001) != 0)
        {
          uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v22 = *(void *)(v5 + 8 * i + 32);
          swift_retain();
        }
        sub_1000440E0(v22);
        swift_release();
      }
LABEL_29:
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      uint64_t v26 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v26 = v1;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      *(void *)(v1 + 32) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      uint64_t v26 = v1;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      return swift_release();
    }
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  }
  if (v7 >= 1)
  {
    uint64_t v9 = 0;
    unint64_t v25 = v6 & 0xC000000000000001;
    uint64_t v10 = _swiftEmptyArrayStorage;
    unint64_t v11 = v6;
    do
    {
      if (v25)
      {
        uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v12 = *(void *)(v6 + 8 * v9 + 32);
        swift_retain();
      }
      uint64_t v27 = v12;
      swift_getKeyPath();
      sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      swift_retain();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      PersistentModel.getValue<A>(forKey:)();
      swift_release_n();
      swift_release();
      uint64_t v13 = v27;
      uint64_t v14 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = sub_1000A4B0C(0, v10[2] + 1, 1, v10);
      }
      unint64_t v16 = v10[2];
      unint64_t v15 = v10[3];
      if (v16 >= v15 >> 1) {
        uint64_t v10 = sub_1000A4B0C((void *)(v15 > 1), v16 + 1, 1, v10);
      }
      ++v9;
      v10[2] = v16 + 1;
      unint64_t v17 = &v10[2 * v16];
      v17[4] = v13;
      uint64_t v17[5] = v14;
      unint64_t v6 = v11;
    }
    while (v7 != v9);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

id sub_100049A60(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v1 + 64);
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  id v5 = v4;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 objectForKey:v6];

  if (!v7)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    sub_10001D214((uint64_t)_swiftEmptyArrayStorage);
    id v7 = (id)sub_100081468(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    unint64_t v8 = *(void **)(v2 + 64);
    swift_getKeyPath();
    id v9 = v8;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setObject:v7 forKey:v10];
  }
  return v7;
}

id sub_100049DB4(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v1 + 72);
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  id v5 = v4;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 objectForKey:v6];

  if (!v7)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    sub_10001D214((uint64_t)_swiftEmptyArrayStorage);
    id v7 = (id)sub_100081468(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    unint64_t v8 = *(void **)(v2 + 72);
    swift_getKeyPath();
    id v9 = v8;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setObject:v7 forKey:v10];
  }
  return v7;
}

uint64_t sub_10004A108(uint64_t a1, int a2)
{
  int v98 = a2;
  uint64_t v3 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v3 - 8);
  long long v109 = &v97[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v108 = type metadata accessor for GenericRecord();
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  long long v105 = &v97[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v106 = v5;
  __chkstk_darwin(v6);
  long long v104 = &v97[-v7];
  uint64_t v8 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62) {
    goto LABEL_162;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v102 = v9;
  if (v9 < 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_142;
      }
      BOOL v13 = __OFADD__(v11, 1000);
      v11 += 1000;
      if (v13) {
        uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      ++v10;
    }
    while (v11 < v102);
  }
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1000A59D4(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
  {
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v14 = aBlock;
    long long v123 = (void **)v8;
    if (v12)
    {
      uint64_t v15 = 0;
      Swift::Int v16 = 0;
      unint64_t v125 = a1 & 0xC000000000000001;
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0) {
        uint64_t v18 = a1;
      }
      else {
        uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v122 = v18;
      uint64_t v119 = v17 + 32;
      uint64_t v19 = v102;
      uint64_t v124 = a1 & 0xFFFFFFFFFFFFFF8;
      uint64_t v120 = v12;
      while (1)
      {
        if (v15 == v12) {
          goto LABEL_143;
        }
        if (v16 >= v19)
        {
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          swift_bridgeObjectRetain();
          uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        if (__OFADD__(v16, 1000)) {
          uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v20 = v16 + 1000;
        }
        if (__OFADD__(v16, 1000)) {
          goto LABEL_145;
        }
        if (v19 >= v16 + 1000) {
          uint64_t v21 = v16 + 1000;
        }
        else {
          uint64_t v21 = v19;
        }
        if (v21 < v16) {
          goto LABEL_146;
        }
        long long v103 = v14;
        uint64_t v126 = v16 + 1000;
        if (v8)
        {
          swift_bridgeObjectRetain();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v22 = *(void *)(v17 + 16);
        }
        if (v22 < v16) {
          goto LABEL_147;
        }
        if (v16 < 0) {
          goto LABEL_148;
        }
        if (v8)
        {
          swift_bridgeObjectRetain();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v23 = *(void *)(v17 + 16);
        }
        if (v23 < v21) {
          goto LABEL_149;
        }
        if (v125 && v16 != v21)
        {
          if (v16 >= (unint64_t)v21) {
            goto LABEL_157;
          }
          type metadata accessor for SchemaV1.HistoryRecord();
          Swift::Int v24 = v16;
          do
          {
            Swift::Int v25 = v24 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v24);
            Swift::Int v24 = v25;
          }
          while (v21 != v25);
        }
        if (v8)
        {
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.subscript.getter();
          uint64_t v27 = v33;
          Swift::Int v16 = v34;
          unint64_t v26 = v35;
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0)
          {
            unint64_t v30 = v26 >> 1;
            uint64_t v31 = (v26 >> 1) - v16;
            if (__OFSUB__(v26 >> 1, v16)) {
              goto LABEL_156;
            }
            if (v31)
            {
LABEL_52:
              uint64_t v121 = v27;
              uint64_t v36 = v31;
              if (v31 < 1)
              {
                uint64_t v32 = _swiftEmptyArrayStorage;
                if (v16 == v30) {
                  goto LABEL_164;
                }
              }
              else
              {
                sub_100032FA0(&qword_100154BB0);
                uint64_t v32 = (void *)swift_allocObject();
                int64_t v37 = j__malloc_size(v32);
                uint64_t v38 = v37 - 32;
                if (v37 < 32) {
                  uint64_t v38 = v37 - 25;
                }
                v32[2] = v31;
                v32[3] = (2 * (v38 >> 3)) | 1;
                if (v16 == v30) {
                  goto LABEL_164;
                }
              }
              uint64_t v17 = v124;
              if (v31 < 0) {
                goto LABEL_166;
              }
              unint64_t v39 = v121 + 8 * v16;
              if (v39 < (unint64_t)&v32[v36 + 4] && (unint64_t)(v32 + 4) < v39 + v36 * 8) {
                goto LABEL_166;
              }
              type metadata accessor for SchemaV1.HistoryRecord();
              swift_arrayInitWithCopy();
              uint64_t v8 = (uint64_t)v123;
              goto LABEL_64;
            }
            goto LABEL_63;
          }
        }
        else
        {
          unint64_t v26 = (2 * v21) | 1;
          swift_bridgeObjectRetain();
          uint64_t v27 = v119;
        }
        uint64_t v121 = v27;
        uint64_t v8 = type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        uint64_t v28 = (void *)swift_dynamicCastClass();
        if (!v28)
        {
          swift_unknownObjectRelease();
          uint64_t v28 = _swiftEmptyArrayStorage;
        }
        uint64_t v29 = v28[2];
        swift_release();
        unint64_t v30 = v26 >> 1;
        uint64_t v31 = (v26 >> 1) - v16;
        if (__OFSUB__(v26 >> 1, v16)) {
          goto LABEL_158;
        }
        if (v29 == v31)
        {
          uint64_t v32 = (void *)swift_dynamicCastClass();
          uint64_t v8 = (uint64_t)v123;
          uint64_t v17 = v124;
          if (!v32)
          {
            swift_unknownObjectRelease();
            uint64_t v32 = _swiftEmptyArrayStorage;
          }
          goto LABEL_64;
        }
        swift_unknownObjectRelease();
        uint64_t v8 = (uint64_t)v123;
        uint64_t v27 = v121;
        if (v31) {
          goto LABEL_52;
        }
LABEL_63:
        uint64_t v32 = _swiftEmptyArrayStorage;
        uint64_t v17 = v124;
LABEL_64:
        swift_unknownObjectRelease();
        uint64_t v14 = v103;
        aBlock = v103;
        unint64_t v41 = (unint64_t)v103[2];
        unint64_t v40 = (unint64_t)v103[3];
        unint64_t v42 = (void *)(v41 + 1);
        if (v41 >= v40 >> 1)
        {
          sub_1000A59D4(v40 > 1, v41 + 1, 1);
          uint64_t v14 = aBlock;
        }
        ++v15;
        v14[2] = v42;
        v14[v41 + 4] = v32;
        Swift::Int v16 = v20;
        uint64_t v12 = v120;
        uint64_t v19 = v102;
        if (v15 == v120)
        {
          if (v20 < v102)
          {
            Swift::Int v43 = v126;
            goto LABEL_71;
          }
LABEL_125:
          unint64_t v69 = 0;
          uint64_t v100 = v14 + 4;
          long long v103 = v14;
          char v99 = v42;
          while (2)
          {
            if (v69 >= (unint64_t)v14[2])
            {
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
              goto LABEL_144;
            }
            unint64_t v101 = v69;
            unint64_t v70 = (unint64_t)v100[v69];
            if (v70 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
              if (v71)
              {
LABEL_130:
                if (v71 < 1) {
                  goto LABEL_150;
                }
                a1 = 0;
                unint64_t v111 = v70 & 0xC000000000000001;
                unint64_t v113 = v70;
                uint64_t v112 = v71;
                do
                {
                  if (v111)
                  {
                    uint64_t v72 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else
                  {
                    uint64_t v72 = *(void *)(v70 + 8 * a1 + 32);
                    swift_retain();
                  }
                  uint64_t v126 = a1 + 1;
                  uint64_t v8 = v72 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  uint64_t v124 = v128;
                  unint64_t v125 = (unint64_t)aBlock;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  uint64_t v122 = v128;
                  long long v123 = aBlock;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  LODWORD(v121) = aBlock;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  LODWORD(v12sub_100102B8C(2, 18, 1, 0) = aBlock;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  LODWORD(v119) = aBlock;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  uint64_t v117 = v128;
                  uint64_t v118 = aBlock;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  uint64_t v115 = v128;
                  uint64_t v116 = aBlock;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  sub_10004B9E8();
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  uint64_t v73 = v128;
                  char v114 = aBlock;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  uint64_t v75 = aBlock;
                  uint64_t v74 = v128;
                  aBlock = (void **)v72;
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  uint64_t v76 = (uint64_t)v104;
                  sub_10004CBA0(&qword_100154B98, (void (*)(uint64_t))&type metadata accessor for Date);
                  PersistentModel.getValue<A>(forKey:)();
                  swift_release();
                  uint64_t v77 = v124;
                  *(void *)uint64_t v76 = v125;
                  *(void *)(v76 + 8) = v77;
                  uint64_t v78 = v122;
                  *(void *)(v76 + 16) = v123;
                  *(void *)(v76 + 24) = v78;
                  *(unsigned char *)(v76 + 32) = v121;
                  *(unsigned char *)(v76 + 33) = v120;
                  *(unsigned char *)(v76 + 34) = v119;
                  uint64_t v79 = v117;
                  *(void *)(v76 + 4sub_100102B8C(2, 18, 1, 0) = v118;
                  *(void *)(v76 + 48) = v79;
                  uint64_t v80 = v115;
                  *(void *)(v76 + 56) = v116;
                  *(void *)(v76 + 64) = v80;
                  *(void *)(v76 + 72) = v114;
                  *(void *)(v76 + 8sub_100102B8C(2, 18, 1, 0) = v73;
                  *(void *)(v76 + 88) = v75;
                  *(void *)(v76 + 96) = v74;
                  uint64_t v81 = type metadata accessor for TaskPriority();
                  uint64_t v82 = (uint64_t)v109;
                  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v109, 1, 1, v81);
                  unint64_t v83 = v105;
                  sub_10004BA5C(v76, (uint64_t)v105);
                  unint64_t v84 = (*(unsigned __int8 *)(v107 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
                  uint64_t v85 = (void *)swift_allocObject();
                  v85[2] = 0;
                  v85[3] = 0;
                  v85[4] = v110;
                  uint64_t v86 = (uint64_t)v85 + v84;
                  a1 = v126;
                  sub_10004BAC4((uint64_t)v83, v86);
                  swift_retain();
                  sub_10004F600(v82, (uint64_t)&unk_100154BA0, (uint64_t)v85);
                  swift_release();
                  swift_release();
                  sub_1000138BC(v82);
                  sub_10004BD04(v76);
                  unint64_t v70 = v113;
                }
                while (v112 != a1);
              }
            }
            else
            {
              uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v71) {
                goto LABEL_130;
              }
            }
            unint64_t v69 = v101 + 1;
            swift_bridgeObjectRelease();
            uint64_t v14 = v103;
            if ((void *)v69 == v99) {
              goto LABEL_138;
            }
            continue;
          }
        }
      }
    }
    uint64_t v19 = v102;
    if (v102 >= 1)
    {
      Swift::Int v43 = 0;
      unint64_t v125 = a1 & 0xC000000000000001;
      uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8;
LABEL_71:
      if (a1 < 0) {
        uint64_t v44 = a1;
      }
      else {
        uint64_t v44 = v17;
      }
      uint64_t v121 = v17 + 32;
      uint64_t v122 = v44;
      uint64_t v45 = v43 + 1000;
      Swift::Int v46 = v43;
      uint64_t v124 = v17;
      uint64_t v126 = v43;
      while (1)
      {
        if (v19 >= v45) {
          uint64_t v47 = v45;
        }
        else {
          uint64_t v47 = v19;
        }
        uint64_t v48 = v46 + 1000;
        if (__OFADD__(v46, 1000)) {
          goto LABEL_151;
        }
        if (v19 >= v48) {
          uint64_t v49 = v46 + 1000;
        }
        else {
          uint64_t v49 = v19;
        }
        if (v49 < v46) {
          goto LABEL_152;
        }
        long long v103 = v14;
        if (v8)
        {
          swift_bridgeObjectRetain();
          uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          Swift::Int v43 = v126;
        }
        else
        {
          uint64_t v50 = *(void *)(v17 + 16);
        }
        if (v50 < v46) {
          goto LABEL_153;
        }
        if (v43 < 0) {
          goto LABEL_154;
        }
        if (v8)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v17 + 16);
        }
        if (v51 < v49) {
          goto LABEL_155;
        }
        if (v125 && v46 != v49)
        {
          if (v46 >= (unint64_t)v49) {
            goto LABEL_160;
          }
          type metadata accessor for SchemaV1.HistoryRecord();
          Swift::Int v52 = v46;
          do
          {
            Swift::Int v53 = v52 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v52);
            Swift::Int v52 = v53;
          }
          while (v47 != v53);
        }
        if (v8)
        {
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.subscript.getter();
          uint64_t v54 = v59;
          Swift::Int v46 = v60;
          unint64_t v62 = v61;
          swift_bridgeObjectRelease();
          uint64_t v8 = v62 >> 1;
          if ((v62 & 1) == 0)
          {
            uint64_t v57 = v8 - v46;
            if (__OFSUB__(v8, v46)) {
              goto LABEL_159;
            }
            if (!v57) {
              goto LABEL_119;
            }
            goto LABEL_108;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v54 = v121;
          uint64_t v8 = ((2 * v49) | 1uLL) >> 1;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        unint64_t v55 = (void *)swift_dynamicCastClass();
        if (!v55)
        {
          swift_unknownObjectRelease();
          unint64_t v55 = _swiftEmptyArrayStorage;
        }
        uint64_t v56 = v55[2];
        swift_release();
        uint64_t v57 = v8 - v46;
        if (__OFSUB__(v8, v46)) {
          goto LABEL_161;
        }
        if (v56 != v57)
        {
          swift_unknownObjectRelease();
          uint64_t v17 = v124;
          if (!v57) {
            goto LABEL_119;
          }
LABEL_108:
          uint64_t v63 = v57;
          if (v57 < 1)
          {
            uint64_t v58 = _swiftEmptyArrayStorage;
            if (v46 == v8) {
              goto LABEL_165;
            }
          }
          else
          {
            sub_100032FA0(&qword_100154BB0);
            uint64_t v58 = (void *)swift_allocObject();
            int64_t v64 = j__malloc_size(v58);
            uint64_t v65 = v64 - 32;
            if (v64 < 32) {
              uint64_t v65 = v64 - 25;
            }
            v58[2] = v57;
            v58[3] = (2 * (v65 >> 3)) | 1;
            if (v46 == v8) {
              goto LABEL_165;
            }
          }
          if (v57 < 0) {
            goto LABEL_166;
          }
          unint64_t v66 = v54 + 8 * v46;
          if (v66 < (unint64_t)&v58[v63 + 4] && (unint64_t)(v58 + 4) < v66 + v63 * 8) {
            goto LABEL_166;
          }
          type metadata accessor for SchemaV1.HistoryRecord();
          swift_arrayInitWithCopy();
          uint64_t v17 = v124;
          goto LABEL_120;
        }
        uint64_t v58 = (void *)swift_dynamicCastClass();
        uint64_t v17 = v124;
        if (!v58)
        {
          swift_unknownObjectRelease();
LABEL_119:
          uint64_t v58 = _swiftEmptyArrayStorage;
        }
LABEL_120:
        swift_unknownObjectRelease();
        uint64_t v14 = v103;
        aBlock = v103;
        unint64_t v68 = (unint64_t)v103[2];
        unint64_t v67 = (unint64_t)v103[3];
        unint64_t v42 = (void *)(v68 + 1);
        uint64_t v8 = (uint64_t)v123;
        if (v68 >= v67 >> 1)
        {
          sub_1000A59D4(v67 > 1, v68 + 1, 1);
          uint64_t v14 = aBlock;
        }
        v14[2] = v42;
        v14[v68 + 4] = v58;
        v45 += 1000;
        Swift::Int v46 = v48;
        uint64_t v19 = v102;
        Swift::Int v43 = v126;
        if (v48 >= v102) {
          goto LABEL_125;
        }
      }
    }
    unint64_t v42 = aBlock[2];
    if (v42) {
      goto LABEL_125;
    }
LABEL_138:
    uint64_t result = swift_release();
    if (v98)
    {
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = 0;
      id v89 = [self defaultCenter];
      type metadata accessor for ModelContext();
      uint64_t v90 = (void *)static ModelContext.didSave.getter();
      id v91 = [self mainQueue];
      uint64_t v92 = swift_allocObject();
      uint64_t v93 = v110;
      swift_weakInit();
      uint64_t v94 = (void *)swift_allocObject();
      v94[2] = v92;
      v94[3] = v88;
      v94[4] = v102;
      uint64_t v131 = sub_10004BDE8;
      int v132 = v94;
      aBlock = _NSConcreteStackBlock;
      uint64_t v128 = 1107296256;
      char v129 = sub_100055AA0;
      uint64_t v130 = &unk_100149FA8;
      uint64_t v95 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v89 addObserverForName:v90 object:0 queue:v91 usingBlock:v95];
      _Block_release(v95);

      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      aBlock = v93;
      sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_release();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10004B420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10004B440, 0, 0);
}

uint64_t sub_10004B440()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100047E40;
  uint64_t v2 = *(void *)(v0 + 24);
  return sub_1000998CC(v2);
}

uint64_t sub_10004B4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = (uint64_t *)(a3 + 16);
    uint64_t result = swift_beginAccess();
    uint64_t v12 = *v11 + 1;
    if (__OFADD__(*v11, 1))
    {
      __break(1u);
    }
    else
    {
      *uint64_t v11 = v12;
      if (v12 == a4)
      {
        swift_beginAccess();
        *uint64_t v11 = 0;
        uint64_t v13 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
        uint64_t v14 = swift_allocObject();
        swift_weakInit();
        uint64_t v15 = (void *)swift_allocObject();
        _OWORD v15[2] = 0;
        v15[3] = 0;
        v15[4] = v14;
        sub_10004F600((uint64_t)v8, (uint64_t)&unk_100154BC0, (uint64_t)v15);
        swift_release();
        sub_1000138BC((uint64_t)v8);
        swift_getKeyPath();
        uint64_t v20 = v10;
        sub_10004CBA0(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v16 = *(void *)(v10 + 80);
        if (v16)
        {
          uint64_t v17 = self;
          swift_unknownObjectRetain();
          id v18 = [v17 defaultCenter];
          type metadata accessor for ModelContext();
          swift_unknownObjectRetain();
          uint64_t v19 = (void *)static ModelContext.didSave.getter();
          [v18 removeObserver:v16 name:v19 object:0];

          swift_unknownObjectRelease_n();
        }
      }
      return swift_release();
    }
  }
  return result;
}

unint64_t sub_10004B778(unint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result >> 62;
  if (result >> 62) {
    goto LABEL_31;
  }
  uint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 == v12) {
      goto LABEL_5;
    }
LABEL_33:
    char v10 = 0;
    return v10 & 1;
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_33;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_28;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  uint64_t v13 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0) {
    uint64_t v7 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v7;
  }
  if (v6 == v8)
  {
LABEL_28:
    char v10 = 1;
    return v10 & 1;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    type metadata accessor for SchemaV1.HistoryRecord();
    unint64_t v9 = 0;
    a2 &= 0xC000000000000001;
    unint64_t v4 = v5 - 1;
    while (1)
    {
      if (v5 == v9)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      if ((v3 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        if (a2) {
          goto LABEL_20;
        }
      }
      else
      {
        swift_retain();
        if (a2)
        {
LABEL_20:
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_24;
        }
      }
      if (v9 >= *(void *)(v13 + 16)) {
        goto LABEL_30;
      }
      swift_retain();
LABEL_24:
      sub_10004CBA0(&qword_100154C50, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v10 & 1) != 0 && v4 != v9++) {
        continue;
      }
      return v10 & 1;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_10004B9E8()
{
  unint64_t result = qword_100154B88;
  if (!qword_100154B88)
  {
    sub_1000317D8(&qword_100154B90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100154B88);
  }
  return result;
}

uint64_t sub_10004BA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004BAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenericRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004BB28()
{
  uint64_t v2 = *(void *)(type metadata accessor for GenericRecord() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_10004BC10;
  return _swift_task_switch(sub_10004B440, 0, 0);
}

uint64_t sub_10004BC10()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10004BD04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GenericRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004BD60()
{
  return swift_deallocObject();
}

uint64_t sub_10004BD70()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10004BDA8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10004BDE8(uint64_t a1)
{
  return sub_10004B4DC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10004BDF4()
{
  return swift_release();
}

uint64_t sub_10004BE04()
{
  return sub_10004BE1C();
}

uint64_t sub_10004BE1C()
{
  *(void *)(*(void *)(v0 + 16) + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(v0 + 24);
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_10004BE5C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003819C;
  return sub_100048860(a1, v4, v5, v6);
}

uint64_t sub_10004BF14(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003819C;
  return sub_100049098(a1, v4, v5, v7, v6);
}

uint64_t sub_10004BFD4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10004BFF0()
{
  return sub_1000429A0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10004C01C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 4sub_100102B8C(2, 18, 1, 0) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10004C02C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_10004C048()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 56) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10004C058()
{
  return sub_100042428(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_10004C078()
{
  unint64_t result = qword_100154C08;
  if (!qword_100154C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100154C08);
  }
  return result;
}

uint64_t sub_10004C0D0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10003819C;
  v3[2] = v2;
  return _swift_task_switch(sub_100048314, 0, 0);
}

uint64_t sub_10004C178()
{
  return sub_100046AD4();
}

uint64_t sub_10004C180(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = (void *)(a1 + 40);
  while (2)
  {
    switch(*v7)
    {
      case 0:
        if (a3) {
          goto LABEL_4;
        }
        break;
      case 1:
        if (a3 != 1) {
          goto LABEL_4;
        }
        break;
      case 2:
        if (a3 != 2) {
          goto LABEL_4;
        }
        break;
      case 3:
        if (a3 != 3) {
          goto LABEL_4;
        }
        break;
      default:
        if (a3 < 4
          || (*(v7 - 1) == a2 ? (BOOL v8 = *v7 == a3) : (BOOL v8 = 0),
              !v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
        {
LABEL_4:
          v7 += 3;
          if (v3 == ++v6) {
            return 0;
          }
          continue;
        }
        break;
    }
    return v6;
  }
}

uint64_t sub_10004C288(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    uint64_t v8 = v3;
    uint64_t v4 = 0;
    unint64_t v10 = v2 & 0xC000000000000001;
    uint64_t v9 = v2;
    while (1)
    {
      uint64_t v12 = v4;
      if (v10)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v5 = *(void *)(v2 + 8 * v4 + 32);
        swift_retain();
      }
      swift_getKeyPath();
      sub_10004CBA0(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      uint64_t v2 = sub_10004CBA0(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      if (v5 == a2)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        return v12;
      }
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v6) {
        return v12;
      }
      if (__OFADD__(v12, 1)) {
        break;
      }
      uint64_t v4 = v12 + 1;
      uint64_t v2 = v9;
      if (v12 + 1 == v8) {
        return 0;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_10004C54C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for SchemaV1.HistoryRecord();
    sub_10004CBA0(&qword_100154C58, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v27;
    uint64_t v26 = v28;
    uint64_t v5 = v29;
    uint64_t v6 = v30;
    unint64_t v7 = v31;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v25 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v14 = v6;
      goto LABEL_29;
    }
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v16 >= v25) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v26 + 8 * v16);
    uint64_t v14 = v6 + 1;
    if (!v17)
    {
      uint64_t v14 = v6 + 2;
      if (v6 + 2 >= v25) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v26 + 8 * v14);
      if (!v17)
      {
        uint64_t v14 = v6 + 3;
        if (v6 + 3 >= v25) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v26 + 8 * v14);
        if (!v17)
        {
          uint64_t v14 = v6 + 4;
          if (v6 + 4 >= v25) {
            goto LABEL_36;
          }
          unint64_t v17 = *(void *)(v26 + 8 * v14);
          if (!v17)
          {
            uint64_t v14 = v6 + 5;
            if (v6 + 5 >= v25) {
              goto LABEL_36;
            }
            unint64_t v17 = *(void *)(v26 + 8 * v14);
            if (!v17)
            {
              uint64_t v18 = v6 + 6;
              while (v25 != v18)
              {
                unint64_t v17 = *(void *)(v26 + 8 * v18++);
                if (v17)
                {
                  uint64_t v14 = v18 - 1;
                  goto LABEL_28;
                }
              }
LABEL_36:
              sub_10004CBE8();
              return (uint64_t)v11;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v14 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
    swift_retain();
    if (!v15) {
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v19 = a2(v15);
      uint64_t v21 = v20;
      swift_release();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000A4B0C(0, v11[2] + 1, 1, v11);
        uint64_t v11 = (void *)result;
      }
      unint64_t v23 = v11[2];
      unint64_t v22 = v11[3];
      if (v23 >= v22 >> 1)
      {
        uint64_t result = (uint64_t)sub_1000A4B0C((void *)(v22 > 1), v23 + 1, 1, v11);
        uint64_t v11 = (void *)result;
      }
      v11[2] = v23 + 1;
      Swift::Int v24 = &v11[2 * v23];
      v24[4] = v19;
      v24[5] = v21;
      uint64_t v6 = v14;
      unint64_t v7 = v12;
      if ((v3 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for SchemaV1.HistoryRecord();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v15 = v32;
        swift_unknownObjectRelease();
        uint64_t v14 = v6;
        uint64_t v12 = v7;
        if (v32) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10004C8BC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003819C;
  return sub_100046B24(a1, v4, v5, v7, v6);
}

uint64_t sub_10004C980()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10004BC10;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100047DA4, 0, 0);
}

uint64_t sub_10004CA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154B68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004CA98()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10004CAE0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003819C;
  return sub_100047BAC(a1, v4, v5, v7, v6);
}

uint64_t sub_10004CBA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004CBE8()
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for ModelError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_errorRetain();
  *a1 = v3;
  return a1;
}

uint64_t destroy for ModelError()
{
  return swift_errorRelease();
}

void *assignWithCopy for ModelError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_errorRetain();
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

void *initializeWithTake for ModelError(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for ModelError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelError(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelError()
{
  return &type metadata for ModelError;
}

uint64_t sub_10004CD50()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10004CD98()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10003819C;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return _swift_task_switch(sub_1000464C0, 0, 0);
}

uint64_t sub_10004CE58()
{
  uint64_t v2 = *(void *)(type metadata accessor for GenericRecord() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_10003819C;
  return _swift_task_switch(sub_100045110, 0, 0);
}

void sub_10004CF44()
{
}

void sub_10004CF5C()
{
}

uint64_t sub_10004CF78()
{
  return sub_10004BFF0();
}

uint64_t sub_10004CF90()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for CalculatorHistoryViewModel(0);
    uint64_t v1 = swift_allocObject();
    sub_10004DD58();
    *(void *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10004D004()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator33CalculatorHistoryViewModelWrapper___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10004D0AC()
{
  return type metadata accessor for CalculatorHistoryViewModelWrapper(0);
}

uint64_t sub_10004D0B4()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  uint64_t v2 = sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v0 + 24) + 16))
  {
    uint64_t v3 = *(void *)(v0 + 16);
    swift_getKeyPath();
    sub_10004F0B4(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    uint64_t v4 = *(void *)(*(void *)(v3 + 48) + 16);
    if (v4)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v5 = 48;
      do
      {
        unint64_t v6 = swift_bridgeObjectRetain();
        sub_10004EEE0(v6);
        v5 += 24;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease_n();
    }
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
LABEL_22:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (v7) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_8:
        uint64_t v17 = v1;
        uint64_t v8 = 4;
        uint64_t v16 = v2;
        while (1)
        {
          uint64_t v9 = v8 - 4;
          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
          {
            uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v11 = v8 - 3;
            if (__OFADD__(v9, 1)) {
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v10 = _swiftEmptyArrayStorage[v8];
            swift_retain();
            uint64_t v11 = v8 - 3;
            if (__OFADD__(v9, 1))
            {
LABEL_21:
              __break(1u);
              goto LABEL_22;
            }
          }
          swift_getKeyPath();
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          uint64_t v1 = *(void *)(v17 + 24);
          swift_getKeyPath();
          sub_10004F0B4(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
          swift_bridgeObjectRetain();
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          swift_getKeyPath();
          sub_10004F0B4(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
          PersistentModel.getValue<A>(forKey:)();
          swift_release();
          char v12 = sub_10006E86C(v10, v18, v1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v12)
          {
            uint64_t v1 = v17;
            swift_release();
            swift_bridgeObjectRelease_n();
            uint64_t KeyPath = swift_getKeyPath();
            __chkstk_darwin(KeyPath);
            swift_retain();
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
            swift_release();
            swift_release_n();
            goto LABEL_20;
          }
          swift_release();
          ++v8;
          uint64_t v2 = v16;
          if (v11 == v7)
          {
            uint64_t v1 = v17;
            break;
          }
        }
      }
    }
    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v13 = swift_getKeyPath();
    __chkstk_darwin(v13);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
LABEL_20:
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  *(unsigned char *)(v1 + 32) = (*(unsigned char *)(v1 + 32) & 1) == 0;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return swift_release();
}

uint64_t sub_10004D648()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10004D700@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10004D7C0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004D8A0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return sub_10004D0B4();
}

uint64_t sub_10004D910()
{
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_10004D9B0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 32);
  return result;
}

uint64_t sub_10004DA58()
{
  return swift_release();
}

uint64_t sub_10004DB28()
{
  return swift_retain();
}

uint64_t sub_10004DBCC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_10004DC78()
{
  return swift_release();
}

uint64_t sub_10004DD58()
{
  if (qword_1001541A0 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = qword_100160C88;
  *(void *)(v0 + 24) = &_swiftEmptySetSingleton;
  *(unsigned char *)(v0 + 32) = 0;
  *(void *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator26CalculatorHistoryViewModel_historyViewOpenedAt;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  swift_retain();
  ObservationRegistrar.init()();
  uint64_t v3 = self;
  id v4 = [v3 defaultCenter];
  if (qword_1001544F8 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100161100;
  unint64_t v6 = self;
  id v7 = [v6 mainQueue];
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  unint64_t v22 = sub_10004EEC0;
  uint64_t v23 = v8;
  uint64_t v18 = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  uint64_t v20 = sub_100055AA0;
  uint64_t v21 = &unk_10014A1F0;
  uint64_t v9 = _Block_copy(&v18);
  swift_release();
  id v10 = [v4 addObserverForName:v5 object:0 queue:v7 usingBlock:v9];
  _Block_release(v9);
  swift_unknownObjectRelease();

  id v11 = [v3 defaultCenter];
  if (qword_1001544F0 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1001610F8;
  id v13 = [v6 mainQueue];
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  unint64_t v22 = sub_10004EED0;
  uint64_t v23 = v14;
  uint64_t v18 = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  uint64_t v20 = sub_100055AA0;
  uint64_t v21 = &unk_10014A218;
  uint64_t v15 = _Block_copy(&v18);
  swift_release();
  id v16 = [v11 addObserverForName:v12 object:0 queue:v13 usingBlock:v15];
  _Block_release(v15);
  swift_unknownObjectRelease();

  return v0;
}

uint64_t sub_10004E0E8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 48);
  if (!*(void *)(v3 + 16))
  {
LABEL_11:
    swift_getKeyPath();
    sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(void *)(v1 + 24) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    sub_10004D0B4();
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    return swift_release();
  }
  unint64_t v4 = *(void *)(v3 + 48);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_5:
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = *(void *)(v4 + 32);
    swift_retain();
LABEL_8:
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    sub_10004F0B4(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    sub_10004F0B4(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    swift_release();
    sub_100032FA0(&qword_100154E38);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10010DCB0;
    *(void *)(inited + 32) = v6;
    *(void *)(inited + 4sub_100102B8C(2, 18, 1, 0) = v9;
    sub_100067CB8(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10004E564()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_getKeyPath();
    sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 24) + 16))
    {
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      *(void *)(v1 + 24) = &_swiftEmptySetSingleton;
      swift_bridgeObjectRelease();
      sub_10004D0B4();
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10004E708()
{
  id v1 = [self defaultCenter];
  [v1 removeObserver:v0];

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10004E980(v0 + OBJC_IVAR____TtC10Calculator26CalculatorHistoryViewModel_historyViewOpenedAt);
  uint64_t v2 = v0 + OBJC_IVAR____TtC10Calculator26CalculatorHistoryViewModel___observationRegistrar;
  uint64_t v3 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_deallocClassInstance();
}

uint64_t sub_10004E808()
{
  return type metadata accessor for CalculatorHistoryViewModel(0);
}

uint64_t type metadata accessor for CalculatorHistoryViewModel(uint64_t a1)
{
  return sub_10001F0E0(a1, (uint64_t *)&unk_100154D70);
}

void sub_10004E830()
{
  sub_10004E928();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10004E928()
{
  if (!qword_100154D80)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100154D80);
    }
  }
}

uint64_t sub_10004E980(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100154E28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_10004E9E0()
{
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(void *)(*(void *)(v0 + 24) + 16) == 1) {
    return 0;
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(*(void *)(v0 + 24) + 16);
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    uint64_t v6 = 0;
    return v3 == v6;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  id v7 = (void *)(v4 + 48);
  while (!(*v7 >> 62))
  {
    uint64_t v8 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v9 = __OFADD__(v6, v8);
    v6 += v8;
    if (v9) {
      goto LABEL_11;
    }
LABEL_7:
    v7 += 3;
    if (!--v5) {
      goto LABEL_12;
    }
  }
  uint64_t v11 = *(v7 - 2);
  unint64_t v10 = *(v7 - 1);
  sub_10004C02C(v11, v10);
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  sub_10004BFD4(v11, v10);
  swift_bridgeObjectRelease();
  BOOL v9 = __OFADD__(v6, v12);
  v6 += v12;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  swift_bridgeObjectRelease();
  return v3 == v6;
}

uint64_t sub_10004EC28()
{
  uint64_t v1 = v0[2];
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v2 = *(void *)(*(void *)(v1 + 48) + 16);
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v3 = 48;
    do
    {
      unint64_t v4 = swift_bridgeObjectRetain();
      sub_10004EEE0(v4);
      v3 += 24;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
  }
  swift_retain();
  uint64_t v5 = sub_10004F190((unint64_t)_swiftEmptyArrayStorage, v0);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = sub_10004F470((unint64_t)v5);
  swift_bridgeObjectRelease();
  sub_100046814(v6);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v0[3] = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  sub_10004D0B4();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return swift_release();
}

uint64_t sub_10004EE88()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10004EEC0()
{
  return sub_10004E0E8();
}

uint64_t sub_10004EEC8()
{
  return swift_release();
}

uint64_t sub_10004EED0()
{
  return sub_10004E564();
}

uint64_t sub_10004EEE0(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_1000A6DCC(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x1sub_100102B8C(2, 18, 1, 0) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_10004F0B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004F110()
{
  return sub_10004F128();
}

uint64_t sub_10004F128()
{
  *(void *)(*(void *)(v0 + 16) + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

void sub_10004F164()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 32) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10004F174()
{
  return sub_10004D8A0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *sub_10004F190(unint64_t a1, void *a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
LABEL_18:
  }
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  else {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_beginAccess();
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v12 = a2;
    uint64_t v13 = v3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v14 = v3 & 0xC000000000000001;
    a2 = &unk_10010E230;
    while (1)
    {
      if (v14)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_14:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
      }
      else
      {
        if (v5 >= *(void *)(v13 + 16))
        {
          __break(1u);
          goto LABEL_18;
        }
        uint64_t v6 = *(void *)(v3 + 8 * v5 + 32);
        swift_retain();
        unint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_14;
        }
      }
      unint64_t v8 = v3;
      swift_getKeyPath();
      sub_10004F0B4(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v9 = v12[3];
      swift_getKeyPath();
      sub_10004F0B4(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      swift_bridgeObjectRetain();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_10004F0B4(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      char v10 = sub_10006E86C(v6, v15, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
      unint64_t v3 = v8;
      ++v5;
      if (v7 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10004F470(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for SchemaV1.HistoryRecord();
  sub_10004F0B4(&qword_100154C58, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_1000B1978(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004F5E8()
{
  return sub_10004F174();
}

uint64_t sub_10004F600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033344(a1, (uint64_t)v8, &qword_100154B68);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100032F44((uint64_t)v8, &qword_100154B68);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_10004F7F4()
{
  type metadata accessor for CalculatorCurrencyCacheProvider();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100050C24();
  qword_100160C98 = v0;
  return result;
}

uint64_t sub_10004F834@<X0>(uint64_t a1@<X8>)
{
  return sub_100050660(&OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___provider, &qword_100154F60, a1);
}

uint64_t sub_10004F850(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154F60);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100033344(a1, (uint64_t)v6, &qword_100154F60);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100032F44((uint64_t)v6, &qword_100154F60);
}

uint64_t sub_10004F990()
{
  return sub_1000509EC((uint64_t)&unk_10010E350, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__loadingProvider);
}

uint64_t sub_10004F9A4()
{
  return swift_release();
}

uint64_t sub_10004FA74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_100032FA0(&qword_100154F60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for StocksKitCurrencyCache();
  if (static StocksKitCurrencyCache.isEnabled.getter())
  {
    swift_getKeyPath();
    uint64_t v21 = v1;
    sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v9 = v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___provider;
    swift_beginAccess();
    sub_100033344(v9, (uint64_t)v8, &qword_100154F60);
    uint64_t v10 = type metadata accessor for StocksKitCurrencyCache.Provider();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
    {
      sub_100032F44((uint64_t)v8, &qword_100154F60);
      swift_getKeyPath();
      uint64_t v20 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__loadingProvider) & 1) == 0)
      {
        uint64_t KeyPath = swift_getKeyPath();
        __chkstk_darwin(KeyPath);
        *(void *)&v19[-16] = v1;
        v19[-8] = 1;
        uint64_t v20 = v1;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        uint64_t v13 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
        uint64_t v14 = swift_allocObject();
        swift_weakInit();
        uint64_t v15 = (void *)swift_allocObject();
        _OWORD v15[2] = 0;
        v15[3] = 0;
        v15[4] = v14;
        sub_10004F600((uint64_t)v5, (uint64_t)&unk_100154F78, (uint64_t)v15);
        swift_release();
        sub_100032F44((uint64_t)v5, &qword_100154B68);
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
    }
    else
    {
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
  }
  else
  {
    uint64_t v17 = type metadata accessor for StocksKitCurrencyCache.Provider();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    return v18(a1, 1, 1, v17);
  }
}

uint64_t sub_10004FEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  sub_100032FA0(&qword_100154B68);
  v4[6] = swift_task_alloc();
  uint64_t v5 = *(void *)(sub_100032FA0(&qword_100154F60) - 8);
  v4[7] = v5;
  v4[8] = *(void *)(v5 + 64);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_10004FFB0, 0, 0);
}

uint64_t sub_10004FFB0()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[11] = Strong;
  if (Strong)
  {
    unint64_t v2 = (void *)swift_task_alloc();
    v0[12] = v2;
    void *v2 = v0;
    v2[1] = sub_1000500C4;
    uint64_t v3 = v0[10];
    return StocksKitCurrencyCache.provider.getter(v3);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1000500C4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000501C0, 0, 0);
}

uint64_t sub_1000501C0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  sub_100033344(v1, v2, &qword_100154F60);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v7;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = v6;
  sub_10002D9D0(v2, (uint64_t)v9 + v8, &qword_100154F60);
  swift_release();
  sub_100013710(v3, (uint64_t)&unk_100154F98, (uint64_t)v9);
  swift_release();
  swift_release();
  sub_100032F44(v1, &qword_100154F60);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10005037C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  sub_100032FA0(&qword_100154F60);
  v5[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[10] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100050444, v7, v6);
}

uint64_t sub_100050444()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = v0[9];
    sub_100033344(v0[8], v3, &qword_100154F60);
    swift_getKeyPath();
    uint64_t v4 = swift_task_alloc();
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v3;
    v0[5] = v2;
    sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    sub_100032F44(v3, &qword_100154F60);
    swift_getKeyPath();
    uint64_t v5 = swift_task_alloc();
    *(void *)(v5 + 16) = v2;
    *(unsigned char *)(v5 + 24) = 0;
    v0[6] = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_task_dealloc();
  }
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100050644@<X0>(uint64_t a1@<X8>)
{
  return sub_100050660(&OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100154E28, a1);
}

uint64_t sub_100050660@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  swift_getKeyPath();
  sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = v3 + *a1;
  swift_beginAccess();
  return sub_100033344(v7, a3, a2);
}

uint64_t sub_100050734@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100050750(a1, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100154E28, a2);
}

uint64_t sub_100050750@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, uint64_t *a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  swift_getKeyPath();
  sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = v7 + *a2;
  swift_beginAccess();
  return sub_100033344(v8, a4, a3);
}

uint64_t sub_100050828(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100154E28);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100033344(a1, (uint64_t)v6, &qword_100154E28);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100032F44((uint64_t)v6, &qword_100154E28);
}

uint64_t sub_100050968(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = a1 + *a3;
  swift_beginAccess();
  sub_1000531B4(a2, v6, a4);
  return swift_endAccess();
}

uint64_t sub_1000509D8()
{
  return sub_1000509EC((uint64_t)&unk_10010E3C8, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded);
}

uint64_t sub_1000509EC(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_100050A8C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100050AA0(a1, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded, a2);
}

uint64_t sub_100050AA0@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a3 = *(unsigned char *)(v5 + *a2);
  return result;
}

uint64_t sub_100050B54()
{
  return swift_release();
}

uint64_t sub_100050C24()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 16) = [self shared];
  type metadata accessor for StocksKitCurrencyCache();
  *(void *)(v0 + 24) = static StocksKitCurrencyCache.shared.getter();
  uint64_t v2 = v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___provider;
  uint64_t v3 = type metadata accessor for StocksKitCurrencyCache.Provider();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__loadingProvider) = 0;
  uint64_t v4 = v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate;
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate) = 0;
  ObservationRegistrar.init()();
  sub_100050D58();
  sub_100050F5C();
  return v1;
}

uint64_t sub_100050D58()
{
  swift_getKeyPath();
  sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded) & 1) == 0)
  {
    type metadata accessor for StocksKitCurrencyCache();
    if ((static StocksKitCurrencyCache.isEnabled.getter() & 1) == 0)
    {
      if (qword_100154718 != -1) {
        swift_once();
      }
      swift_getKeyPath();
      sub_10005324C((unint64_t *)&qword_100154FD8, (void (*)(uint64_t))type metadata accessor for CalculatorNetworkManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
    }
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100050F5C()
{
  uint64_t v1 = (char *)v0;
  uint64_t v66 = sub_100032FA0(&qword_100154FA8);
  __chkstk_darwin(v66);
  uint64_t v67 = (uint64_t)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100032FA0(&qword_100154E28);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v53 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v53 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v68 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v53 - v19;
  uint64_t v21 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StocksKitCurrencyCache();
  if ((static StocksKitCurrencyCache.isEnabled.getter() & 1) == 0)
  {
    int64_t v64 = v20;
    uint64_t v65 = v17;
    unint64_t v62 = v8;
    uint64_t v63 = v11;
    id v29 = [v0[2] lastRefreshDate];
    if (v29)
    {
      uint64_t v30 = v29;
      Swift::Int v60 = v5;
      unint64_t v61 = v1;
      unint64_t v31 = v65;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = (void *)v68;
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
      uint64_t v34 = v15;
      v33(v14, v31, v15);
      unint64_t v35 = (void (*)(char *, void, uint64_t, uint64_t))v32[7];
      v35(v14, 0, 1, v15);
      uint64_t v36 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v32[6];
      if (v36((uint64_t)v14, 1, v15) != 1)
      {
        int64_t v37 = (void (*)(char *, uint64_t, uint64_t))v33;
        uint64_t v38 = v64;
        Swift::Int v53 = v37;
        v37(v64, (uint64_t)v14, v15);
        uint64_t v39 = (uint64_t)v63;
        uint64_t v54 = (void (*)(char *, char *, uint64_t))v32[2];
        unint64_t v55 = v32 + 2;
        v54(v63, v38, v34);
        uint64_t v58 = (void (*)(uint64_t, void, uint64_t, uint64_t))v35;
        uint64_t v59 = v32 + 7;
        v35((char *)v39, 0, 1, v34);
        swift_getKeyPath();
        unint64_t v40 = v61;
        unint64_t v41 = &v61[OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___observationRegistrar];
        unint64_t v70 = (id *)v61;
        uint64_t v56 = sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
        uint64_t v57 = v41;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v42 = (uint64_t)&v40[OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate];
        swift_beginAccess();
        uint64_t v43 = v67;
        uint64_t v44 = v67 + *(int *)(v66 + 48);
        sub_100033344(v39, v67, &qword_100154E28);
        sub_100033344(v42, v44, &qword_100154E28);
        if (v36(v43, 1, v34) == 1)
        {
          sub_100032F44(v39, &qword_100154E28);
          if (v36(v44, 1, v34) == 1)
          {
            sub_100032F44(v43, &qword_100154E28);
            return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v64, v34);
          }
        }
        else
        {
          uint64_t v45 = (uint64_t)v62;
          sub_100033344(v43, (uint64_t)v62, &qword_100154E28);
          if (v36(v44, 1, v34) != 1)
          {
            Swift::Int v46 = v65;
            v53(v65, v44, v34);
            sub_10005324C(&qword_100154FB0, (void (*)(uint64_t))&type metadata accessor for Date);
            char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v48 = *(void (**)(char *, uint64_t))(v68 + 8);
            v48(v46, v34);
            sub_100032F44(v39, &qword_100154E28);
            v48((char *)v45, v34);
            sub_100032F44(v43, &qword_100154E28);
            if (v47) {
              return ((uint64_t (*)(char *, uint64_t))v48)(v64, v34);
            }
LABEL_17:
            uint64_t v49 = (uint64_t)v60;
            uint64_t v50 = v64;
            v54(v60, v64, v34);
            v58(v49, 0, 1, v34);
            uint64_t KeyPath = swift_getKeyPath();
            __chkstk_darwin(KeyPath);
            Swift::Int v52 = v61;
            *(&v53 - 2) = (void (*)(char *, uint64_t, uint64_t))v61;
            *(&v53 - 1) = (void (*)(char *, uint64_t, uint64_t))v49;
            unint64_t v69 = v52;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
            swift_release();
            sub_100032F44(v49, &qword_100154E28);
            return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v50, v34);
          }
          sub_100032F44(v39, &qword_100154E28);
          (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v45, v34);
        }
        sub_100032F44(v43, &qword_100154FA8);
        goto LABEL_17;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v14, 1, 1, v15);
    }
    return sub_100032F44((uint64_t)v14, &qword_100154E28);
  }
  swift_getKeyPath();
  unint64_t v70 = v0;
  sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if ((*((unsigned char *)v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate) & 1) == 0)
  {
    uint64_t v25 = swift_getKeyPath();
    __chkstk_darwin(v25);
    *(&v53 - 2) = (void (*)(char *, uint64_t, uint64_t))v0;
    *((unsigned char *)&v53 - 8) = 1;
    unint64_t v70 = v0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    static TaskPriority.userInitiated.getter();
    uint64_t v26 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v23, 0, 1, v26);
    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    uint64_t v28 = (void *)swift_allocObject();
    void v28[2] = 0;
    v28[3] = 0;
    void v28[4] = v27;
    sub_10004F600((uint64_t)v23, (uint64_t)&unk_100154FC0, (uint64_t)v28);
    swift_release();
    return sub_100032F44((uint64_t)v23, &qword_100154B68);
  }
  return result;
}

uint64_t sub_100051820()
{
  return sub_1000509EC((uint64_t)&unk_10010E3A0, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate);
}

uint64_t sub_100051834()
{
  return swift_release();
}

uint64_t sub_100051904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  sub_100032FA0(&qword_100154B68);
  v4[6] = swift_task_alloc();
  uint64_t v5 = *(void *)(sub_100032FA0(&qword_100154E28) - 8);
  v4[7] = v5;
  v4[8] = *(void *)(v5 + 64);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_100051A0C, 0, 0);
}

uint64_t sub_100051A0C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[11] = Strong;
  if (Strong)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of StocksKitCurrencyCache.lastRefreshDate.getter
                                         + async function pointer to dispatch thunk of StocksKitCurrencyCache.lastRefreshDate.getter);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[12] = v2;
    void *v2 = v0;
    v2[1] = sub_100051B38;
    uint64_t v3 = v0[10];
    return v6(v3);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100051B38()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100051C34, 0, 0);
}

uint64_t sub_100051C34()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  sub_100033344(v1, v2, &qword_100154E28);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v7;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = v6;
  sub_10002D9D0(v2, (uint64_t)v9 + v8, &qword_100154E28);
  swift_release();
  sub_100013710(v3, (uint64_t)&unk_100154FD0, (uint64_t)v9);
  swift_release();
  swift_release();
  sub_100032F44(v1, &qword_100154E28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100051DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[13] = sub_100032FA0(&qword_100154FA8);
  v5[14] = swift_task_alloc();
  sub_100032FA0(&qword_100154E28);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[24] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100051F8C, v8, v7);
}

uint64_t sub_100051F8C()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = v0 + 8;
    uint64_t v4 = v0[20];
    uint64_t v5 = v0[21];
    uint64_t v6 = v0[19];
    sub_100033344(v0[12], v6, &qword_100154E28);
    uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v7(v6, 1, v4) == 1)
    {
      sub_100032F44(v0[19], &qword_100154E28);
LABEL_13:
      swift_getKeyPath();
      uint64_t v35 = swift_task_alloc();
      *(void *)(v35 + 16) = v2;
      *(unsigned char *)(v35 + 24) = 0;
      *uint64_t v3 = v2;
      sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_release();
      swift_task_dealloc();
      goto LABEL_14;
    }
    uint64_t v8 = v0[23];
    uint64_t v10 = v0[20];
    uint64_t v9 = (void *)v0[21];
    uint64_t v11 = v0[18];
    uint64_t v41 = v0[17];
    uint64_t v12 = v0[14];
    uint64_t v42 = v0[13];
    uint64_t v38 = (void (*)(uint64_t, uint64_t, uint64_t))v9[4];
    v38(v8, v0[19], v10);
    uint64_t v39 = (void (*)(uint64_t, uint64_t, uint64_t))v9[2];
    v39(v11, v8, v10);
    unint64_t v40 = (void (*)(uint64_t, void, uint64_t, uint64_t))v9[7];
    v40(v11, 0, 1, v10);
    swift_getKeyPath();
    v0[9] = v2;
    sub_10005324C(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v13 = v2 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate;
    swift_beginAccess();
    sub_100033344(v13, v41, &qword_100154E28);
    uint64_t v14 = v12 + *(int *)(v42 + 48);
    sub_100033344(v11, v12, &qword_100154E28);
    sub_100033344(v41, v14, &qword_100154E28);
    unsigned int v15 = v7(v12, 1, v10);
    uint64_t v16 = v0[20];
    if (v15 == 1)
    {
      uint64_t v17 = v0[18];
      sub_100032F44(v0[17], &qword_100154E28);
      sub_100032F44(v17, &qword_100154E28);
      if (v7(v14, 1, v16) == 1)
      {
        uint64_t v18 = v0[21];
        sub_100032F44(v0[14], &qword_100154E28);
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
LABEL_11:
        uint64_t v3 = v0 + 8;
        v19(v0[23], v0[20]);
        goto LABEL_13;
      }
    }
    else
    {
      sub_100033344(v0[14], v0[16], &qword_100154E28);
      if (v7(v14, 1, v16) != 1)
      {
        uint64_t v25 = v0[21];
        uint64_t v24 = v0[22];
        uint64_t v26 = v0[20];
        uint64_t v28 = v0[17];
        uint64_t v27 = v0[18];
        uint64_t v29 = v0[16];
        uint64_t v43 = v0[14];
        v38(v24, v14, v26);
        sub_10005324C(&qword_100154FB0, (void (*)(uint64_t))&type metadata accessor for Date);
        char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v19(v24, v26);
        sub_100032F44(v28, &qword_100154E28);
        sub_100032F44(v27, &qword_100154E28);
        v19(v29, v26);
        sub_100032F44(v43, &qword_100154E28);
        if (v30) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v44 = v0[23];
        uint64_t v32 = v0[20];
        uint64_t v31 = v0[21];
        uint64_t v33 = v0[15];
        ((void (*)(uint64_t))v39)(v33);
        v40(v33, 0, 1, v32);
        swift_getKeyPath();
        uint64_t v34 = swift_task_alloc();
        *(void *)(v34 + 16) = v2;
        *(void *)(v34 + 24) = v33;
        v0[10] = v2;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        swift_task_dealloc();
        sub_100032F44(v33, &qword_100154E28);
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v44, v32);
        uint64_t v3 = v0 + 8;
        goto LABEL_13;
      }
      uint64_t v20 = v0[20];
      uint64_t v21 = v0[21];
      uint64_t v22 = v0[18];
      uint64_t v23 = v0[16];
      sub_100032F44(v0[17], &qword_100154E28);
      sub_100032F44(v22, &qword_100154E28);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
    }
    sub_100032F44(v0[14], &qword_100154FA8);
    goto LABEL_12;
  }
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_10005260C()
{
  sub_100032F44(v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___provider, &qword_100154F60);
  sub_100032F44(v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100154E28);
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000526EC()
{
  return type metadata accessor for CalculatorCurrencyCacheProvider();
}

uint64_t type metadata accessor for CalculatorCurrencyCacheProvider()
{
  uint64_t result = qword_100154E98;
  if (!qword_100154E98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100052740()
{
  sub_100052898(319, (unint64_t *)&unk_100154EA8, (void (*)(uint64_t))&type metadata accessor for StocksKitCurrencyCache.Provider);
  if (v0 <= 0x3F)
  {
    sub_100052898(319, (unint64_t *)&qword_100154D80, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ObservationRegistrar();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_100052898(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000528EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100050750(a1, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___provider, &qword_100154F60, a2);
}

uint64_t sub_100052920@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100050AA0(a1, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__loadingProvider, a2);
}

void sub_10005294C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__loadingProvider) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100052964()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000529A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003819C;
  return sub_10004FEA8(a1, v4, v5, v6);
}

uint64_t sub_100052A54@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005324C((unint64_t *)&qword_100154FD8, (void (*)(uint64_t))type metadata accessor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_100052AFC()
{
  return swift_release();
}

uint64_t sub_100052BCC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100052C04()
{
  return sub_100052F84(&qword_100154F60, (uint64_t (*)(void))&type metadata accessor for StocksKitCurrencyCache.Provider);
}

uint64_t sub_100052C24(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100032FA0(&qword_100154F60) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10003819C;
  return sub_10005037C(a1, v5, v6, v7, v8);
}

uint64_t sub_100052D24(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10004BC10;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100154F80 + dword_100154F80);
  return v6(a1, v4);
}

uint64_t sub_100052DDC()
{
  return sub_100050968(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___provider, &qword_100154F60);
}

uint64_t sub_100052E08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100050750(a1, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100154E28, a2);
}

uint64_t sub_100052E3C()
{
  return sub_100050968(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100154E28);
}

uint64_t sub_100052E68@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100050AA0(a1, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate, a2);
}

void sub_100052E94()
{
  *(unsigned char *)(*(void *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100052EB0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004BC10;
  return sub_100051904(a1, v4, v5, v6);
}

uint64_t sub_100052F64()
{
  return sub_100052F84(&qword_100154E28, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_100052F84(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(void *)(sub_100032FA0(a1) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v6 = a2(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v2 + v5, 1, v6)) {
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v2 + v5, v6);
  }

  return swift_deallocObject();
}

uint64_t sub_1000530B4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100032FA0(&qword_100154E28) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10003819C;
  return sub_100051DF0(a1, v5, v6, v7, v8);
}

uint64_t sub_1000531B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100032FA0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_100053218@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100050AA0(a1, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded, a2);
}

uint64_t sub_10005324C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100053294()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_1000532AC()
{
  return sub_1000C02CC(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1000532D0()
{
  return sub_100052DDC();
}

uint64_t sub_1000532E8()
{
  return sub_100052E3C();
}

void sub_100053300()
{
}

void sub_100053318()
{
}

void sub_100053330()
{
}

uint64_t assignWithTake for CalculatorMainView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_release();
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v6;
  sub_100032EAC(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorMainView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorMainView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100053460()
{
  type metadata accessor for CalculateExpression.Operation();
  static CalculateExpression.Operation.digit00.getter();
  sub_1000546D4();
  char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v0) {
    return 72;
  }
  static CalculateExpression.Operation.digit0.getter();
  char v2 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v2) {
    return 11;
  }
  static CalculateExpression.Operation.digit1.getter();
  char v3 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v3) {
    return 12;
  }
  static CalculateExpression.Operation.digit2.getter();
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v4) {
    return 13;
  }
  static CalculateExpression.Operation.digit3.getter();
  char v5 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v5) {
    return 14;
  }
  static CalculateExpression.Operation.digit4.getter();
  char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v6) {
    return 15;
  }
  static CalculateExpression.Operation.digit5.getter();
  char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v7) {
    return 16;
  }
  static CalculateExpression.Operation.digit6.getter();
  char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v8) {
    return 17;
  }
  static CalculateExpression.Operation.digit7.getter();
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v9) {
    return 18;
  }
  static CalculateExpression.Operation.digit8.getter();
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v10) {
    return 19;
  }
  static CalculateExpression.Operation.digit9.getter();
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v11) {
    return 20;
  }
  static CalculateExpression.Operation.digitA.getter();
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v12) {
    return 65;
  }
  static CalculateExpression.Operation.digitB.getter();
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v13) {
    return 66;
  }
  static CalculateExpression.Operation.digitC.getter();
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v14) {
    return 67;
  }
  static CalculateExpression.Operation.digitD.getter();
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v15) {
    return 68;
  }
  static CalculateExpression.Operation.digitE.getter();
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v16) {
    return 69;
  }
  static CalculateExpression.Operation.digitF.getter();
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v17) {
    return 70;
  }
  static CalculateExpression.Operation.digitFF.getter();
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v18) {
    return 71;
  }
  static CalculateExpression.Operation.pi.getter();
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v19) {
    return 50;
  }
  static CalculateExpression.Operation.eulerNumber.getter();
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v20) {
    return 44;
  }
  static CalculateExpression.Operation.ee.getter();
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v21) {
    return 45;
  }
  static CalculateExpression.Operation.random.getter();
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v22) {
    return 51;
  }
  static CalculateExpression.Operation.equals.getter();
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v23) {
    return 8;
  }
  static CalculateExpression.Operation.delete.getter();
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v24) {
    return 52;
  }
  static CalculateExpression.Operation.clear.getter();
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v25) {
    return 1;
  }
  static CalculateExpression.Operation.negate.getter();
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v26) {
    return 2;
  }
  static CalculateExpression.Operation.add.getter();
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v27) {
    return 7;
  }
  static CalculateExpression.Operation.subtract.getter();
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v28) {
    return 6;
  }
  static CalculateExpression.Operation.multiply.getter();
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v29) {
    return 5;
  }
  static CalculateExpression.Operation.divide.getter();
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v30) {
    return 4;
  }
  static CalculateExpression.Operation.decimal.getter();
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v31) {
    return 9;
  }
  static CalculateExpression.Operation.openParenthesis.getter();
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v32) {
    return 21;
  }
  static CalculateExpression.Operation.closeParenthesis.getter();
  char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v33) {
    return 22;
  }
  static CalculateExpression.Operation.factorial.getter();
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v34) {
    return 40;
  }
  static CalculateExpression.Operation.percent.getter();
  char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v35) {
    return 3;
  }
  static CalculateExpression.Operation.reciprocal.getter();
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v36) {
    return 33;
  }
  static CalculateExpression.Operation.square.getter();
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v37) {
    return 28;
  }
  static CalculateExpression.Operation.cube.getter();
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v38) {
    return 29;
  }
  static CalculateExpression.Operation.power.getter();
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v39) {
    return 30;
  }
  static CalculateExpression.Operation.root.getter();
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v40) {
    return 36;
  }
  static CalculateExpression.Operation.reverseRoot.getter();
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v41) {
    return 37;
  }
  static CalculateExpression.Operation.squareRoot.getter();
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v42) {
    return 34;
  }
  static CalculateExpression.Operation.cubeRoot.getter();
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v43) {
    return 35;
  }
  static CalculateExpression.Operation.logarithmBase10.getter();
  char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v44) {
    return 39;
  }
  static CalculateExpression.Operation.logarithmBase2.getter();
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v45) {
    return 58;
  }
  static CalculateExpression.Operation.logarithmBaseCustom.getter();
  char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v46) {
    return 57;
  }
  static CalculateExpression.Operation.logarithmNatural.getter();
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v47) {
    return 38;
  }
  static CalculateExpression.Operation.exponentialBase10.getter();
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v48) {
    return 32;
  }
  static CalculateExpression.Operation.exponentialBase2.getter();
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v49) {
    return 56;
  }
  static CalculateExpression.Operation.exponentialBaseEuler.getter();
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v50) {
    return 31;
  }
  static CalculateExpression.Operation.exponentialBaseCustom.getter();
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v51) {
    return 55;
  }
  static CalculateExpression.Operation.sine.getter();
  char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v52) {
    return 41;
  }
  static CalculateExpression.Operation.cosine.getter();
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v53) {
    return 42;
  }
  static CalculateExpression.Operation.tangent.getter();
  char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v54) {
    return 43;
  }
  static CalculateExpression.Operation.hyperbolicSine.getter();
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v55) {
    return 47;
  }
  static CalculateExpression.Operation.hyperbolicCosine.getter();
  char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v56) {
    return 48;
  }
  static CalculateExpression.Operation.hyperbolicTangent.getter();
  char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v57) {
    return 49;
  }
  static CalculateExpression.Operation.inverseSine.getter();
  char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v58) {
    return 59;
  }
  static CalculateExpression.Operation.inverseCosine.getter();
  char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v59) {
    return 60;
  }
  static CalculateExpression.Operation.inverseTangent.getter();
  char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v60) {
    return 61;
  }
  static CalculateExpression.Operation.inverseHyperbolicSine.getter();
  char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v61) {
    return 62;
  }
  static CalculateExpression.Operation.inverseHyperbolicCosine.getter();
  char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v62) {
    return 63;
  }
  static CalculateExpression.Operation.inverseHyperbolicTangent.getter();
  char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v63) {
    return 64;
  }
  static CalculateExpression.Operation.and.getter();
  char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v64) {
    return 73;
  }
  static CalculateExpression.Operation.or.getter();
  char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v65) {
    return 74;
  }
  static CalculateExpression.Operation.nor.getter();
  char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v66) {
    return 75;
  }
  static CalculateExpression.Operation.xor.getter();
  char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v67) {
    return 76;
  }
  static CalculateExpression.Operation.leftShift.getter();
  char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v68) {
    return 78;
  }
  static CalculateExpression.Operation.rightShift.getter();
  char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v69) {
    return 77;
  }
  static CalculateExpression.Operation.leftShiftCustom.getter();
  char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v70) {
    return 80;
  }
  static CalculateExpression.Operation.rightShiftCustom.getter();
  char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v71) {
    return 79;
  }
  static CalculateExpression.Operation.leftRotate.getter();
  char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v72) {
    return 82;
  }
  static CalculateExpression.Operation.rightRotate.getter();
  char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v73) {
    return 81;
  }
  static CalculateExpression.Operation.byteFlip.getter();
  char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v74) {
    return 83;
  }
  static CalculateExpression.Operation.wordFlip.getter();
  char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v75) {
    return 84;
  }
  static CalculateExpression.Operation.not.getter();
  char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v76) {
    return 86;
  }
  static CalculateExpression.Operation.neg.getter();
  char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v77) {
    return 85;
  }
  static CalculateExpression.Operation.mod.getter();
  char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v78) {
    return 87;
  }
  static CalculateExpression.Operation.drop.getter();
  char v79 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v79) {
    return 88;
  }
  static CalculateExpression.Operation.swap.getter();
  char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v80) {
    return 89;
  }
  static CalculateExpression.Operation.rollOut.getter();
  char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v81) {
    return 90;
  }
  static CalculateExpression.Operation.rollIn.getter();
  char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v82) {
    return 91;
  }
  static CalculateExpression.Operation.enter.getter();
  char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if (v83) {
    return 92;
  }
  else {
    return 93;
  }
}

unint64_t sub_1000546D4()
{
  unint64_t result = qword_100155010;
  if (!qword_100155010)
  {
    type metadata accessor for CalculateExpression.Operation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155010);
  }
  return result;
}

uint64_t sub_10005472C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CalculatorPrivacyDisclosureManager()
{
  return self;
}

void sub_100054760()
{
  qword_100160CA8 = 0x4056000000000000;
}

void sub_100054770()
{
  qword_100160CB0 = 0x406CC00000000000;
}

void sub_100054784()
{
  qword_100160CB8 = 0x4047000000000000;
}

void sub_100054794()
{
  qword_100160CC0 = 0x4028000000000000;
}

void sub_1000547A4()
{
  qword_100160CC8 = 0x4035000000000000;
}

void sub_1000547B4()
{
  qword_100160CD0 = 0x4045000000000000;
}

void sub_1000547C4()
{
  qword_100160CD8 = 0x403D000000000000;
}

void sub_1000547D4()
{
  qword_100160CE0 = 0x403D000000000000;
}

void sub_1000547E4()
{
  qword_100160CE8 = 0x4053000000000000;
}

void sub_1000547F4()
{
  qword_100160CF0 = 0x4030000000000000;
}

void sub_100054804()
{
  qword_100160CF8 = 0x4014000000000000;
}

void sub_100054814()
{
  qword_100160D08 = 0x4032000000000000;
}

void sub_100054824()
{
  qword_100160D10 = 0x4037000000000000;
}

void sub_100054834()
{
  qword_100160D18 = 0x4031000000000000;
}

void sub_100054844()
{
  qword_100160D20 = 0x4010000000000000;
}

void sub_100054854()
{
  qword_100160D28 = 0x4014000000000000;
}

void sub_100054864()
{
  qword_100160D30 = 0x4024000000000000;
}

void sub_100054874()
{
  qword_100160D38 = 0x4036000000000000;
}

void sub_100054884()
{
  qword_100160D40 = 0x4034000000000000;
}

double sub_100054894(uint64_t a1)
{
  return sub_100054A98(a1, &qword_100154258, (double *)&qword_100160D40, &qword_100160D48);
}

void sub_1000548C0()
{
  qword_100160D50 = 0x4028000000000000;
}

void sub_1000548D0()
{
  qword_100160D58 = 0x4034000000000000;
}

void sub_1000548E0()
{
  qword_100160D60 = 0x4034000000000000;
}

void sub_1000548F0()
{
  qword_100160D68 = 0x4034000000000000;
}

void sub_100054900()
{
  qword_100160D78 = 0x4010000000000000;
}

void sub_100054910()
{
  qword_100160D80 = 0x4074A00000000000;
}

void sub_100054924()
{
  qword_100160D88 = 0x406F400000000000;
}

void sub_100054938()
{
  qword_100160D90 = 0xC044000000000000;
}

void sub_100054948()
{
  qword_100160D98 = 0x4032000000000000;
}

void sub_100054958()
{
  qword_100160DA0 = 0x4043000000000000;
}

double sub_100054968(uint64_t a1)
{
  return sub_100054A98(a1, &qword_1001542B0, (double *)&qword_100160D98, &qword_100160DA8);
}

double sub_100054994(uint64_t a1)
{
  return sub_100054A98(a1, &qword_1001542B8, (double *)&qword_100160DA0, &qword_100160DB0);
}

void sub_1000549C0()
{
  qword_100160DB8 = 0;
}

void sub_1000549CC()
{
  qword_100160DC0 = 0xC000000000000000;
}

void sub_1000549DC()
{
  qword_100160DC8 = 0x4020000000000000;
}

void sub_1000549EC()
{
  qword_100160DD0 = 0x4020000000000000;
}

void sub_1000549FC()
{
  qword_100160DD8 = 0x4000000000000000;
}

void sub_100054A0C()
{
  qword_100160DE0 = 0x4030000000000000;
}

void sub_100054A1C()
{
  qword_100160DE8 = 0x4030000000000000;
}

void sub_100054A2C()
{
  qword_100160DF0 = 0x4022000000000000;
}

void sub_100054A3C()
{
  qword_100160DF8 = 0x4030000000000000;
}

void sub_100054A4C()
{
  qword_100160E00 = 0x4008000000000000;
}

void sub_100054A5C()
{
  qword_100160E08 = 0x401C000000000000;
}

double sub_100054A6C(uint64_t a1)
{
  return sub_100054A98(a1, &qword_1001542B0, (double *)&qword_100160D98, &qword_100160E10);
}

double sub_100054A98(uint64_t a1, void *a2, double *a3, void *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  double result = *a3;
  *a4 = *(void *)a3;
  return result;
}

void sub_100054AE0()
{
  qword_100160E18 = 0x4030000000000000;
}

void sub_100054AF0()
{
  qword_100160E30 = 0x4028000000000000;
}

void sub_100054B00()
{
  qword_100160E40 = 0x4014000000000000;
}

void sub_100054B10()
{
  qword_100160E48 = 0x4014000000000000;
}

void sub_100054B20()
{
  qword_100160E50 = 0x4024000000000000;
}

void sub_100054B30()
{
  qword_100160E58 = 0x4031000000000000;
}

void sub_100054B40()
{
  qword_100160E60 = 0x4040000000000000;
}

void sub_100054B50()
{
  qword_100160E68 = 0x4046000000000000;
}

void sub_100054B60()
{
  qword_100160E70 = 0x402C000000000000;
}

void sub_100054B70()
{
  qword_100160E78 = 0x4030000000000000;
}

void sub_100054B80()
{
  qword_100160E80 = 0x4010000000000000;
}

void sub_100054B90()
{
  qword_100160E88 = 0x4061400000000000;
}

uint64_t sub_100054BA4()
{
  uint64_t v0 = type metadata accessor for Text.TruncationMode();
  sub_1000215D0(v0, qword_100160E90);
  uint64_t v1 = sub_100021598(v0, (uint64_t)qword_100160E90);
  uint64_t v2 = enum case for Text.TruncationMode.middle(_:);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v3(v1, v2, v0);
}

uint64_t sub_100054C2C(char *a1, char *a2)
{
  return sub_1000557FC(*a1, *a2);
}

Swift::Int sub_100054C38()
{
  return Hasher._finalize()();
}

Swift::Int sub_100054CC0()
{
  return Hasher._finalize()();
}

uint64_t sub_100054D44@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100149350, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100054DA4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6E6F634965646F6DLL;
  if (*v1) {
    uint64_t v2 = 0x7474754265646F6DLL;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006E6FLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100054DE8()
{
  qword_100160EA8 = 0x4010000000000000;
}

void sub_100054DF8()
{
  qword_100160EB0 = 0x4042000000000000;
}

void sub_100054E08()
{
  qword_100160EB8 = 0x4062C00000000000;
}

void sub_100054E1C()
{
  qword_100160EC0 = 0x4020000000000000;
}

void sub_100054E2C()
{
  qword_100160EC8 = 0x402E000000000000;
}

void sub_100054E3C()
{
  qword_100160ED0 = 0x4034000000000000;
}

void sub_100054E4C()
{
  qword_100160ED8 = 0x4034000000000000;
}

uint64_t sub_100054E5C(uint64_t a1)
{
  return sub_100054EAC(a1, qword_100160EE0);
}

uint64_t sub_100054E80(uint64_t a1)
{
  return sub_100054EAC(a1, qword_100160EF8);
}

uint64_t sub_100054EAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100032FA0(&qword_1001550C0);
  sub_1000215D0(v3, a2);
  sub_100021598(v3, (uint64_t)a2);
  return URL.init(string:)();
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

uint64_t getEnumTagSinglePayload for Constants.NameSpaceID(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Constants.NameSpaceID(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005507CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000550A4(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

unint64_t sub_1000550B0(char a1)
{
  if (!a1) {
    return 0xD000000000000020;
  }
  if (a1 == 1) {
    return 0xD00000000000001DLL;
  }
  return 0xD00000000000001CLL;
}

unint64_t sub_100055108(uint64_t a1, int a2, unint64_t a3)
{
  char v4 = a2;
  int v6 = a2 & 0xFFFFFF;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v13 = (char *)&v34 - v12;
  if (a3) {
    unint64_t v14 = a3;
  }
  else {
    unint64_t v14 = sub_100070B48((uint64_t)_swiftEmptyArrayStorage);
  }
  swift_bridgeObjectRetain();
  Date.init()();
  uint64_t v15 = a1 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15, v7);
  Date.timeIntervalSince(_:)();
  double v17 = v16;
  char v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, v7);
  v18(v13, v7);
  id v19 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v34 = v14;
  sub_100075A84((uint64_t)v19, 0x6E6F697461727564, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  unint64_t v21 = v34;
  swift_bridgeObjectRelease();
  int v22 = v6 & 0xFF00;
  uint64_t v23 = 2;
  uint64_t v24 = 3;
  if ((v6 & 0x100) == 0) {
    uint64_t v24 = 1;
  }
  if ((v6 & 0x10000) == 0) {
    uint64_t v23 = v24;
  }
  if (v22 == 512) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = v23;
  }
  id v26 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v25];
  char v27 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v34 = v21;
  sub_100075A84((uint64_t)v26, 0x7475706E69, 0xE500000000000000, v27);
  unint64_t v28 = v34;
  swift_bridgeObjectRelease();
  if (v22 == 512) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = qword_10010E6A0[v4];
  }
  id v30 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v29];
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v34 = v28;
  sub_100075A84((uint64_t)v30, 1701080941, 0xE400000000000000, v31);
  unint64_t v32 = v34;
  swift_bridgeObjectRelease();
  return v32;
}

ValueMetadata *type metadata accessor for SessionAnalyticsEvent()
{
  return &type metadata for SessionAnalyticsEvent;
}

unint64_t sub_100055404(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = sub_100070B48((uint64_t)_swiftEmptyArrayStorage);
  }
  swift_bridgeObjectRetain();
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v9 = v8;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v10 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v9];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v18 = v7;
  sub_100075A84((uint64_t)v10, 0x6E6F697461727564, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  unint64_t v12 = v18;
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)NSNumber) initWithBool:1];
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v18 = v12;
  sub_100075A84((uint64_t)v13, 0xD000000000000011, 0x80000001001080F0, v14);
  unint64_t v15 = v18;
  swift_bridgeObjectRelease();
  return v15;
}

ValueMetadata *type metadata accessor for AppUsageAnalyticsEvent()
{
  return &type metadata for AppUsageAnalyticsEvent;
}

void *initializeBufferWithCopyOfBuffer for HistoryAnalyticsEvent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for HistoryAnalyticsEvent()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for HistoryAnalyticsEvent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for HistoryAnalyticsEvent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10Calculator21SessionAnalyticsEventVwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s10Calculator21SessionAnalyticsEventVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryAnalyticsEvent()
{
  return &type metadata for HistoryAnalyticsEvent;
}

uint64_t sub_10005575C()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_1000557FC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7474754265646F6DLL;
  }
  else {
    uint64_t v3 = 0x6E6F634965646F6DLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEA00000000006E6FLL;
  }
  if (a2) {
    uint64_t v5 = 0x7474754265646F6DLL;
  }
  else {
    uint64_t v5 = 0x6E6F634965646F6DLL;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000006E6FLL;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000558A8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x4949435341;
    }
    else {
      uint64_t v3 = 0x65646F63696E55;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xE700000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x4949435341;
      }
      else {
        uint64_t v6 = 0x65646F63696E55;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xE700000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701736302;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701736302)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1000559AC(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 12337;
    }
    else {
      uint64_t v2 = 13873;
    }
    unint64_t v3 = 0xE200000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 12337;
      }
      else {
        uint64_t v5 = 13873;
      }
      unint64_t v6 = 0xE200000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE100000000000000;
    uint64_t v2 = 56;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE100000000000000;
  if (v2 != 56)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100055AA0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id sub_100055B94()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 40);

  return v1;
}

id sub_100055C44@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 40);
  *a2 = v4;

  return v4;
}

void sub_100055CFC(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_100055DD8()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_100055E78@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 48);
  return result;
}

uint64_t sub_100055F20()
{
  return swift_release();
}

void sub_100055FF0(uint64_t a1)
{
  swift_getKeyPath();
  uint64_t v9 = v1;
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (sub_100018D24(*(unsigned char *)(v1 + 48), a1))
  {
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100021598(v3, (uint64_t)qword_100161340);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)unint64_t v6 = 136446210;
      uint64_t v7 = String.init<A>(describing:)();
      sub_10000DAA8(v7, v8, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No change to current calculator mode: %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    sub_100017E2C(a1, 0);
  }
}

uint64_t sub_10005626C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 49);
  return result;
}

uint64_t sub_100056314()
{
  return swift_release();
}

uint64_t sub_1000563E4(char a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_100034264();
  swift_retain();
  CalculateExpression.rich.getter();
  char v4 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
  swift_release();
  if (v4)
  {
    swift_release();
    char v5 = 0;
  }
  else
  {
    CalculateExpression.rich.getter();
    char v6 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
    swift_release();
    swift_release();
    if (v6)
    {
      char v5 = 0;
    }
    else
    {
      swift_getKeyPath();
      sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      char v5 = *(unsigned char *)(v3 + 41) ^ 1;
    }
  }
  if (a1 == 92 || a1 == 8)
  {
    swift_getKeyPath();
    sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v5 &= *(unsigned char *)(v1 + 51) ^ 1;
  }
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if ((v5 & 1) != *(unsigned char *)(v1 + 51))
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100056690(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5, char a6)
{
  id v10 = *(unsigned char **)(v6 + 16);
  swift_getKeyPath();
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ((v10[40] & 1) == 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v6 + 49) == 1)
  {
    sub_1000DABA8(a1, a2);
    if (!a4) {
      goto LABEL_25;
    }
    uint64_t v12 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (!v12) {
      goto LABEL_25;
    }
    swift_bridgeObjectRetain();
    sub_1000DD494();
    swift_retain();
    uint64_t v13 = CalculateExpression.expression.getter();
    uint64_t v15 = v14;
    swift_release();
    if (v13 == a3 && v15 == a4)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        sub_1000DD494();
        swift_retain();
        CalculateExpression.expression.setter();
        swift_release();
LABEL_25:
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if (v10[42] != (a5 & 1))
        {
          uint64_t v27 = swift_getKeyPath();
          __chkstk_darwin(v27);
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
          swift_release();
        }
        return sub_1000563E4(93);
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v37 = a1;
  if (a4)
  {
    uint64_t v16 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v16)
    {
      swift_bridgeObjectRetain();
      sub_1000DD494();
      swift_retain();
      uint64_t v17 = CalculateExpression.expression.getter();
      unint64_t v18 = a2;
      uint64_t v20 = v19;
      swift_release();
      if (v17 == v37 && v20 == v18)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v26)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1000DD494();
          swift_retain();
          CalculateExpression.expression.setter();
          swift_release();
        }
      }
      a2 = v18;
    }
    unint64_t v22 = a2;
    sub_1000DABA8(a3, a4);
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if ((v10[41] & 1) == 0)
    {
      uint64_t v28 = swift_getKeyPath();
      __chkstk_darwin(v28);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    CalculateExpression.inlineEvaluate()();
    swift_release();
    char v23 = a6;
  }
  else
  {
    uint64_t v21 = a1;
    unint64_t v22 = a2;
    sub_1000DABA8(v21, a2);
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    char v23 = a6;
    if (v10[41] == 1)
    {
      uint64_t v24 = swift_getKeyPath();
      __chkstk_darwin(v24);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
  }
  if (v23)
  {
    sub_100034264();
    swift_retain();
    CalculateExpression.rich.getter();
    char v29 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
    swift_release();
    if (v29)
    {
LABEL_34:
      swift_release();
      return sub_1000563E4(93);
    }
    CalculateExpression.rich.getter();
    char v30 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
    swift_release();
    swift_release();
    if ((v30 & 1) == 0)
    {
      sub_1000D98D8(0);
      uint64_t v31 = HIBYTE(v22) & 0xF;
      if ((v22 & 0x2000000000000000) == 0) {
        uint64_t v31 = v37 & 0xFFFFFFFFFFFFLL;
      }
      if (v31)
      {
        swift_bridgeObjectRetain();
        sub_1000DD494();
        swift_retain();
        uint64_t v32 = CalculateExpression.expression.getter();
        uint64_t v34 = v33;
        swift_release();
        if (v32 == v37 && v34 == v22)
        {
          swift_bridgeObjectRelease_n();
          return sub_1000563E4(93);
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v35)
        {
          swift_bridgeObjectRelease();
          return sub_1000563E4(93);
        }
        sub_1000DD494();
        swift_retain();
        CalculateExpression.expression.setter();
        goto LABEL_34;
      }
    }
  }
  return sub_1000563E4(93);
}

void sub_100056E34(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100032FA0(&qword_100155230);
    id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    id v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v11 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v11 >= v27) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v11);
  int64_t v13 = i + 1;
  if (!v12)
  {
    int64_t v13 = i + 2;
    if (i + 2 >= v27) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v13);
    if (!v12)
    {
      int64_t v13 = i + 3;
      if (i + 3 >= v27) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = i + 4;
        if (i + 4 >= v27) {
          goto LABEL_32;
        }
        unint64_t v12 = *(void *)(v28 + 8 * v13);
        if (!v12)
        {
          int64_t v14 = i + 5;
          if (i + 5 < v27)
          {
            unint64_t v12 = *(void *)(v28 + 8 * v14);
            if (v12)
            {
              int64_t v13 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_36;
              }
              if (v13 >= v27) {
                break;
              }
              unint64_t v12 = *(void *)(v28 + 8 * v13);
              ++v14;
              if (v12) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_10004CBE8();
          return;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v12 - 1) & v12;
  unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
  for (i = v13; ; unint64_t v10 = v9 | (i << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    unint64_t v18 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    id v19 = v18;
    unint64_t v20 = sub_100074534(v17, v16);
    unint64_t v21 = v20;
    if (v22)
    {
      uint64_t v7 = (uint64_t *)(v2[6] + 16 * v20);
      swift_bridgeObjectRelease();
      *uint64_t v7 = v17;
      v7[1] = v16;
      uint64_t v8 = v2[7];

      *(void *)(v8 + 8 * v21) = v19;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
    char v23 = (uint64_t *)(v2[6] + 16 * v20);
    *char v23 = v17;
    v23[1] = v16;
    *(void *)(v2[7] + 8 * v2sub_100102B8C(2, 18, 1, 0) = v19;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_34;
    }
    v2[2] = v26;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1000570D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    swift_getKeyPath();
    sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    sub_100017E2C(*(unsigned __int8 *)(v5 + 48), 0);
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v5 + 49) == 1)
    {
      swift_getKeyPath();
      sub_100032FE4((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if ((*(unsigned char *)(a3
                     + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed) & 1) == 0)
        sub_10000E104(0);
    }
    swift_getKeyPath();
    sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    uint64_t v6 = CalculateExpression.format.getter();
    swift_release();
    if (v6 == 2)
    {
      swift_getKeyPath();
      sub_100032FE4((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if ((*(unsigned char *)(a3 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed) & 1) == 0) {
        sub_1000115EC(0);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000573A0()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t sub_100057440(uint64_t result, char a2)
{
  *(unsigned char *)(result + 5sub_100102B8C(2, 18, 1, 0) = a2;
  return result;
}

uint64_t sub_100057448()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 51);
}

uint64_t sub_1000574E8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 51);
  return result;
}

uint64_t sub_100057590()
{
  return swift_release();
}

uint64_t sub_100057660()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t sub_100057700@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 52);
  return result;
}

uint64_t sub_1000577A8()
{
  return swift_release();
}

uint64_t sub_100057878(uint64_t result, char a2)
{
  *(unsigned char *)(result + 52) = a2;
  return result;
}

uint64_t sub_100057880()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 53);
}

uint64_t sub_100057940()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_1000579E0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 64);
  return result;
}

uint64_t sub_100057A88()
{
  return swift_release();
}

uint64_t sub_100057B58()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t sub_100057BF8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 65);
  return result;
}

uint64_t sub_100057CA0()
{
  return swift_release();
}

void sub_100057D70()
{
  swift_getKeyPath();
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  CalculateExpression.engine.setter();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v7 = v0;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  CalculateExpression.engine.setter();
  swift_release();
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100021598(v1, (uint64_t)qword_100161340);
  swift_retain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    type metadata accessor for CalculateEngine(0);
    uint64_t v5 = String.init<A>(describing:)();
    sub_10000DAA8(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "current engine: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1000580F4()
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 72);
}

uint64_t sub_100058194@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + 72);
  return result;
}

uint64_t sub_10005823C()
{
  return swift_release();
}

void sub_100058308(int a1, char a2, void *a3, NSObject *a4)
{
  uint64_t v5 = v4;
  uint64_t v170 = type metadata accessor for Locale();
  uint64_t v169 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  uint64_t v165 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessibilityNotification.Announcement();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v176 = v11;
  uint64_t v177 = v12;
  __chkstk_darwin(v11);
  uint64_t v171 = (char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100032FA0(&qword_1001552A8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for AttributedString.FormattingOptions();
  __chkstk_darwin(v168);
  uint64_t v167 = (char *)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100032FA0(&qword_1001552B0);
  __chkstk_darwin(v18 - 8);
  v166 = (char *)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v20 - 8);
  uint64_t v173 = (char *)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v22 - 8);
  uint64_t v164 = (char *)&v155 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for AttributedString();
  uint64_t v24 = *(NSObject ***)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v174 = (char *)&v155 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v175 = (char *)&v155 - v27;
  id v28 = [self defaultCenter];
  if (qword_1001544F0 != -1) {
    swift_once();
  }
  [v28 postNotificationName:qword_1001610F8 object:0];

  switch((char)a1)
  {
    case 8:
      swift_getKeyPath();
      uint64_t v32 = ((char *)v4 + OBJC_IVAR____TtC10Calculator19CalculatorViewModel___observationRegistrar);
      long long v180 = v4;
      sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v33 = (void *)v4[2];
      if (*((unsigned char *)v4 + 49) == 1)
      {
        os_log_t v160 = v32;
        long long v178 = v24;
        LODWORD(v161) = a1;
        uint64_t v159 = v4;
        sub_1000D98D8(1);
        if (a4)
        {
          uint64_t v34 = swift_retain();
          sub_1000D9AE4(v34);
          swift_release();
        }
        uint64_t v162 = sub_100034264();
        swift_retain();
        uint64_t v35 = sub_1000DD494();
        swift_getKeyPath();
        long long v180 = v33;
        sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
        swift_retain();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if (*((unsigned char *)v33 + 40) == 1)
        {
          if (a4)
          {
            id v36 = sub_100071234();
            unint64_t v155 = CalculateUnit.id.getter();
            uint64_t v158 = v37;

            id v38 = sub_100071418();
LABEL_21:
            char v44 = v38;
            uint64_t v156 = CalculateUnit.id.getter();
            uint64_t v163 = (char *)v45;

LABEL_23:
            LOBYTE(a1) = (_BYTE)v161;
            uint64_t v24 = v178;
LABEL_24:
            swift_getKeyPath();
            uint64_t v5 = v159;
            long long v180 = v159;
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            if (*((unsigned char *)v5 + 49) == 1 && a4)
            {
              swift_retain();
              if (sub_1000715FC())
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (qword_100154750 != -1) {
                  swift_once();
                }
                uint64_t v46 = type metadata accessor for Logger();
                sub_100021598(v46, (uint64_t)qword_100161340);
                char v47 = Logger.logObject.getter();
                os_log_type_t v48 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v47, v48))
                {
                  char v49 = (uint8_t *)swift_slowAlloc();
                  uint64_t v163 = v16;
                  *(_WORD *)char v49 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v47, v48, "User attempting to tap on equal while in unit conversion mode for currency and currency conversion being unavailable. Skipping saving current conversion to history.", v49, 2u);
                  uint64_t v16 = v163;
                  swift_slowDealloc();
                }

                swift_getKeyPath();
                long long v180 = v5;
                ObservationRegistrar.access<A, B>(_:keyPath:)();
                swift_release();
                char v50 = *((unsigned char *)v5 + 52);
                uint64_t v157 = a4;
                if ((v50 & 1) == 0)
                {
                  uint64_t KeyPath = swift_getKeyPath();
                  __chkstk_darwin(KeyPath);
                  long long v180 = v5;
                  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
                  swift_release();
                }
                sub_1000DD494();
                swift_retain();
                CalculateExpression.clear()();
                swift_release();
                swift_getKeyPath();
                long long v180 = v33;
                sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
                ObservationRegistrar.access<A, B>(_:keyPath:)();
                swift_release();
                if (*((unsigned char *)v33 + 41) == 1)
                {
                  uint64_t v59 = swift_getKeyPath();
                  long long v178 = &v155;
                  __chkstk_darwin(v59);
                  long long v180 = v33;
                  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
                  char v60 = v157;
                  swift_release();
                  swift_release();
                  swift_release();
                  a4 = v60;
                }
                else
                {
                  a4 = v157;
                  swift_release();
                  swift_release();
                }
                swift_release();
                goto LABEL_53;
              }
              swift_release();
            }
            if (CalculateExpression.activeError.getter() || CalculateExpression.activeError.getter())
            {
              swift_errorRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (qword_100154750 != -1) {
                swift_once();
              }
              uint64_t v51 = type metadata accessor for Logger();
              sub_100021598(v51, (uint64_t)qword_100161340);
              swift_retain_n();
              swift_retain_n();
              char v52 = Logger.logObject.getter();
              int v53 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v52, (os_log_type_t)v53))
              {
                LODWORD(v163) = v53;
                os_log_t v160 = v52;
                uint64_t v54 = swift_slowAlloc();
                uint64_t v161 = (void *)swift_slowAlloc();
                long long v180 = v161;
                *(_DWORD *)uint64_t v54 = 136315394;
                uint64_t v55 = CalculateExpression.debugDescription.getter();
                uint64_t v179 = sub_10000DAA8(v55, v56, (uint64_t *)&v180);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                *(_WORD *)(v54 + 12) = 2080;
                long long v178 = (NSObject **)v35;
                uint64_t v57 = CalculateExpression.activeError.getter();
                uint64_t v157 = a4;
                if (v57 || CalculateExpression.activeError.getter())
                {
                  swift_getErrorValue();
                  char v61 = v160;
                  uint64_t v62 = Error.localizedDescription.getter();
                  unint64_t v64 = v63;
                  swift_errorRelease();
                }
                else
                {
                  uint64_t v62 = 0;
                  unint64_t v64 = 0xE000000000000000;
                  char v61 = v160;
                }
                uint64_t v179 = sub_10000DAA8(v62, v64, (uint64_t *)&v180);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v163, "Could not solve expression: %s = %s", (uint8_t *)v54, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                a4 = v157;
              }
              else
              {

                swift_release_n();
                swift_release_n();
              }
              if (qword_100154760 != -1) {
                swift_once();
              }
              char v65 = (void *)qword_100161370;
              NSString v66 = String._bridgeToObjectiveC()();
              [v65 setObject:0 forKey:v66];

              char v67 = (void *)qword_100161370;
              NSString v68 = String._bridgeToObjectiveC()();
              [v67 setObject:0 forKey:v68];
              swift_release();
              swift_release();
            }
            else
            {
              if (qword_100154750 != -1) {
                swift_once();
              }
              uint64_t v157 = a4;
              uint64_t v132 = type metadata accessor for Logger();
              sub_100021598(v132, (uint64_t)qword_100161340);
              uint64_t v133 = v162;
              swift_retain_n();
              swift_retain_n();
              uint64_t v134 = Logger.logObject.getter();
              os_log_type_t v135 = static os_log_type_t.default.getter();
              int v136 = v135;
              if (os_log_type_enabled(v134, v135))
              {
                uint64_t v137 = swift_slowAlloc();
                LODWORD(v178) = v136;
                uint64_t v138 = v137;
                uint64_t v161 = (void *)swift_slowAlloc();
                long long v180 = v161;
                *(_DWORD *)uint64_t v138 = 136315394;
                os_log_t v160 = v134;
                uint64_t v139 = CalculateExpression.debugDescription.getter();
                uint64_t v179 = sub_10000DAA8(v139, v140, (uint64_t *)&v180);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                *(_WORD *)(v138 + 12) = 2080;
                uint64_t v141 = CalculateExpression.debugDescription.getter();
                uint64_t v179 = sub_10000DAA8(v141, v142, (uint64_t *)&v180);
                uint64_t v133 = v162;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                os_log_t v143 = v160;
                _os_log_impl((void *)&_mh_execute_header, v160, (os_log_type_t)v178, "Solved expression: %s = %s", (uint8_t *)v138, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_release_n();
                swift_release_n();
              }
              uint64_t v162 = v133;
              long long v178 = (NSObject **)CalculateExpression.expression.getter();
              uint64_t v145 = (uint64_t)v144;
              uint64_t v161 = v144;
              uint64_t v146 = CalculateExpression.expression.getter();
              uint64_t v148 = v147;
              sub_100034264();
              swift_retain();
              CalculateExpression.assumeDegrees.getter();
              swift_release();
              uint64_t v149 = v178;
              char v150 = v146;
              a4 = v157;
              long long v178 = (NSObject **)v35;
              uint64_t v151 = v156;
              uint64_t v152 = v163;
              sub_100060980(v149, v145, v150, v148, v155, v158, v156, (uint64_t)v163, v157);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v153 = CalculateExpression.expression.getter();
              sub_100081834(v153, v154, (uint64_t)v151, v152);
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
            }
            goto LABEL_53;
          }
        }
        else if (a4)
        {
          id v42 = sub_100071418();
          unint64_t v155 = CalculateUnit.id.getter();
          uint64_t v158 = v43;

          id v38 = sub_100071234();
          goto LABEL_21;
        }
        uint64_t v156 = 0;
        uint64_t v163 = 0;
        unint64_t v155 = 0;
        uint64_t v158 = 0;
        goto LABEL_23;
      }
      sub_100034264();
      swift_retain();
      char v39 = (void *)CalculateExpression.result.getter();
      swift_release();
      if (!v39 || (unsigned __int8 v40 = [v39 isTrivial], v39, (v40 & 1) == 0))
      {
        os_log_t v160 = v32;
        uint64_t v159 = v5;
        sub_1000D98D8(0);
        swift_getKeyPath();
        long long v180 = v33;
        sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v41 = v33[4];
        swift_getKeyPath();
        long long v180 = v33;
        uint64_t v162 = v41;
        swift_retain();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v35 = v33[3];
        swift_retain();
        uint64_t v156 = 0;
        uint64_t v163 = 0;
        unint64_t v155 = 0;
        uint64_t v158 = 0;
        goto LABEL_24;
      }
      return;
    case 10:
      goto LABEL_53;
    case 27:
      if (a3)
      {
        swift_getKeyPath();
        long long v180 = a3;
        sub_100032FE4(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
        uint64_t v163 = v16;
        LODWORD(v161) = a1;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        long long v180 = a3;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        *((unsigned char *)a3 + 17) = (*((unsigned char *)a3 + 17) & 1) == 0;
        long long v180 = a3;
        swift_getKeyPath();
        LOBYTE(a1) = (_BYTE)v161;
        uint64_t v16 = v163;
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        swift_release();
      }
      goto LABEL_53;
    case 46:
    case 54:
      char v29 = (void *)v4[2];
      swift_getKeyPath();
      long long v180 = v29;
      sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*((unsigned char *)v29 + 41) == 1)
      {
        uint64_t v30 = swift_getKeyPath();
        long long v178 = v24;
        uint64_t v163 = v16;
        __chkstk_darwin(v30);
        long long v180 = v29;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        uint64_t v16 = v163;
        uint64_t v24 = v178;
      }
      sub_100034264();
      swift_retain();
      char v31 = CalculateExpression.assumeDegrees.getter();
      swift_release();
      sub_1000086E8((v31 & 1) == 0);
      goto LABEL_53;
    default:
      sub_1000DA350(a1, a2 & 1);
LABEL_53:
      sub_1000563E4(a1);
      swift_getKeyPath();
      long long v180 = v5;
      sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*((unsigned char *)v5 + 49) != 1) {
        goto LABEL_63;
      }
      if (!a4) {
        goto LABEL_57;
      }
      swift_retain();
      if (sub_1000715FC())
      {
        swift_release();
LABEL_57:
        if (qword_100154750 != -1) {
          swift_once();
        }
        uint64_t v69 = type metadata accessor for Logger();
        sub_100021598(v69, (uint64_t)qword_100161340);
        char v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v70, v71))
        {
          char v72 = (uint8_t *)swift_slowAlloc();
          long long v178 = v24;
          *(_WORD *)char v72 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Unable to recompute unit conversion due to currency conversion being unavailable.", v72, 2u);
          uint64_t v24 = v178;
          swift_slowDealloc();
        }
      }
      else
      {
        sub_1000D9AE4((uint64_t)a4);
        swift_release();
      }
LABEL_63:
      switch(a1)
      {
        case 1u:
          goto LABEL_74;
        case 0x34u:
          sub_100034264();
          swift_retain();
          CalculateExpression.rich.getter();
          char v75 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
          swift_release();
          if (v75)
          {
            swift_release();
          }
          else
          {
            CalculateExpression.rich.getter();
            char v82 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
            swift_release();
            swift_release();
            if ((v82 & 1) == 0) {
              return;
            }
          }
LABEL_74:
          if (qword_100154790 != -1) {
            swift_once();
          }
          char v83 = (void *)qword_1001613A0;
          swift_getKeyPath();
          long long v180 = v83;
          sub_100032FE4((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings);
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          if ((v83[8] & 1) == 0) {
            sub_1000819B0();
          }
          sub_10008117C();
          if (qword_100154760 != -1) {
            swift_once();
          }
          unint64_t v84 = (void *)qword_100161370;
          NSString v85 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v86 = String._bridgeToObjectiveC()();
          [v84 setObject:v85 forKey:v86];

          uint64_t v87 = (void *)qword_100161370;
          NSString v88 = String._bridgeToObjectiveC()();
          [v87 setObject:0 forKey:v88];

          break;
        case 8u:
          long long v178 = v24;
          uint64_t v163 = v16;
          swift_getKeyPath();
          long long v180 = v5;
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          if (*((unsigned char *)v5 + 49) == 1)
          {
            int v73 = sub_100034264();
            swift_retain();
            if (a4) {
              id v74 = sub_100071234();
            }
            else {
              id v74 = 0;
            }
            uint64_t v89 = sub_10005A450(v73, v74);
            id v91 = v90;
            swift_release();

            int v92 = sub_100034264();
            swift_retain();
            if (a4) {
              id v93 = sub_100071418();
            }
            else {
              id v93 = 0;
            }
            uint64_t v114 = sub_10005A450(v92, v93);
            uint64_t v116 = v115;
            swift_release();

            String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
            v117._uint64_t countAndFlagsBits = 0x202C7475706E49;
            v117._object = (void *)0xE700000000000000;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v117);
            v118._uint64_t countAndFlagsBits = v89;
            v118._object = v91;
            String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v118);
            swift_bridgeObjectRelease();
            v119._object = (void *)0x80000001001084D0;
            v119._uint64_t countAndFlagsBits = 0xD000000000000015;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v119);
            v120._uint64_t countAndFlagsBits = v114;
            v120._object = v116;
            String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v120);
            swift_bridgeObjectRelease();
            v121._uint64_t countAndFlagsBits = 0;
            v121._object = (void *)0xE000000000000000;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v121);
            String.LocalizationValue.init(stringInterpolation:)();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56))(v166, 1, 1, v170);
            long long v180 = _swiftEmptyArrayStorage;
            sub_100032FE4(&qword_1001552C8, (void (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions);
            sub_100032FA0(&qword_1001552D0);
            sub_100040BE4(&qword_1001552D8, &qword_1001552D0);
            dispatch thunk of SetAlgebra.init<A>(_:)();
            uint64_t v122 = v175;
            AttributedString.init(localized:options:table:bundle:locale:comment:)();
            uint64_t v123 = swift_getKeyPath();
            __chkstk_darwin(v123);
            swift_getKeyPath();
            uint64_t v124 = enum case for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority.high(_:);
            uint64_t v125 = type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority();
            uint64_t v126 = *(void *)(v125 - 8);
            uint64_t v127 = (uint64_t)v163;
            (*(void (**)(char *, uint64_t, uint64_t))(v126 + 104))(v163, v124, v125);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v127, 0, 1, v125);
            sub_100061458();
            AttributedString.subscript.setter();
            uint64_t v128 = v178;
            uint64_t v129 = v172;
            ((void (*)(char *, char *, uint64_t))v178[2])(v174, v122, v172);
            uint64_t v130 = v171;
            AccessibilityNotification.Announcement.init(_:)();
            uint64_t v131 = v176;
            _AccessibilityNotifications.post()();
            (*(void (**)(char *, uint64_t))(v177 + 8))(v130, v131);
            ((void (*)(char *, uint64_t))v128[1])(v122, v129);
          }
          else
          {
            String.LocalizationValue.init(stringLiteral:)();
            static Locale.current.getter();
            String.init(localized:table:bundle:locale:comment:)();
            char v76 = (void *)v5[2];
            swift_getKeyPath();
            long long v180 = v76;
            sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            swift_retain();
            uint64_t v77 = CalculateExpression.activeError.getter();
            swift_release();
            if (v77)
            {
              swift_getErrorValue();
              Error.localizedDescription.getter();
              id v78 = objc_allocWithZone((Class)NSAttributedString);
              NSString v79 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              id v80 = [v78 initWithString:v79];

              swift_errorRelease();
              char v81 = v175;
            }
            else
            {
              sub_10001CE8C(0, &qword_1001552B8);
              swift_getKeyPath();
              long long v180 = v76;
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              swift_retain();
              char v81 = v175;
              CalculateExpression.accessibilityMathEquationDescription.getter();
              swift_release();
              id v80 = (id)NSAttributedString.init(_:)();
            }
            id v94 = objc_allocWithZone((Class)NSMutableAttributedString);
            swift_bridgeObjectRetain();
            NSString v95 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v96 = [v94 initWithString:v95];

            id v97 = objc_allocWithZone((Class)NSString);
            NSString v98 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v99 = [v97 initWithString:v98];

            NSString v100 = String._bridgeToObjectiveC()();
            id v101 = [v99 rangeOfString:v100];
            uint64_t v103 = v102;

            [v96 replaceCharactersInRange:v101 withAttributedString:v103];
            id v104 = v96;
            AttributedString.init(_:)();
            uint64_t v105 = swift_getKeyPath();
            __chkstk_darwin(v105);
            swift_getKeyPath();
            uint64_t v106 = enum case for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority.high(_:);
            uint64_t v107 = type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority();
            uint64_t v108 = *(void *)(v107 - 8);
            uint64_t v109 = (uint64_t)v163;
            (*(void (**)(char *, uint64_t, uint64_t))(v108 + 104))(v163, v106, v107);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v108 + 56))(v109, 0, 1, v107);
            sub_100061458();
            AttributedString.subscript.setter();
            char v110 = v178;
            uint64_t v111 = v172;
            ((void (*)(char *, char *, uint64_t))v178[2])(v174, v81, v172);
            uint64_t v112 = v171;
            AccessibilityNotification.Announcement.init(_:)();
            uint64_t v113 = v176;
            _AccessibilityNotifications.post()();

            (*(void (**)(char *, uint64_t))(v177 + 8))(v112, v113);
            ((void (*)(char *, uint64_t))v110[1])(v81, v111);
          }
          break;
      }
      return;
  }
}

uint64_t sub_10005A450(int a1, id a2)
{
  id v2 = a2;
  if (a2)
  {
    id v3 = [a2 category];
    if (v3 && (uint64_t v4 = v3, v5 = [v3 unitType], v4, v5 == (id)16)) {
      unint64_t v6 = &selRef_name;
    }
    else {
      unint64_t v6 = &selRef_displayName;
    }
    id v7 = [v2 *v6];
    id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (v9) {
    id v10 = v2;
  }
  else {
    id v10 = 0;
  }
  if (!v9) {
    unint64_t v9 = 0xE000000000000000;
  }
  unint64_t v11 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 10282;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = CalculateExpression.expression.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  CalculateExpression.options.getter();
  uint64_t v14 = (void *)evaluateError(_:options:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100154790 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_1001613A0;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  [v14 setNumberFormatter:*(void *)(v15 + 56)];
  [v14 setAutoScientificNotation:0];
  id v16 = [v14 formattedResult];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v17;
}

uint64_t sub_10005A6D4()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_10005A730()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10005A7E8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10005A850()
{
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator19CalculatorViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10005A918()
{
  return type metadata accessor for CalculatorViewModel();
}

uint64_t sub_10005A948(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = v2;
  uint64_t v5 = result;
  v32[0] = result;
  swift_getKeyPath();
  sub_100032FE4(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_100032FE4(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  sub_10004B9E8();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  uint64_t v31 = a2;
  if (!v32[1]) {
    goto LABEL_8;
  }
  v32[0] = v5;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  if (!a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_getKeyPath();
    v32[0] = v2;
    sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v2 + 49) == 1) {
      sub_10000E104(0);
    }
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  swift_getKeyPath();
  v32[0] = v6;
  sub_100032FE4((unint64_t *)&qword_100155238, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionDataProvider);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v7 = *(id *)(v6 + 16);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v7 findUnitWithName:v8];

  if (v9)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [v7 findUnitWithName:v10];

    if (v11)
    {
      sub_1000717F0(v9);
      sub_100072604(v11);
    }
    else
    {
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  v32[0] = v3;
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ((*(unsigned char *)(v3 + 49) & 1) == 0) {
    sub_10000E104(1);
  }
  swift_release();

LABEL_15:
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  sub_10001D214((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = sub_100081468(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  sub_10001D214((uint64_t)_swiftEmptyArrayStorage);
  sub_100081468(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = CalculateExpression.expression.getter();
  unint64_t v15 = v14;
  uint64_t v16 = CalculateExpression.expression.getter();
  unint64_t v18 = v17;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  char v19 = sub_10007C36C();
  sub_100056690(v13, v15, v16, v18, v5, (v19 & 1) == 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100021598(v20, (uint64_t)qword_100161340);
  swift_retain_n();
  swift_retain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v24 = CalculateExpression.debugDescription.getter();
    sub_10000DAA8(v24, v25, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    uint64_t v26 = CalculateExpression.debugDescription.getter();
    sub_10000DAA8(v26, v27, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Restored expression from history: %s = %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  v32[0] = v5;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  sub_1000086E8(v32[0]);
  swift_getKeyPath();
  v32[0] = v3;
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v3 + 49) == 1 && v31)
  {
    swift_getKeyPath();
    v32[0] = v31;
    sub_100032FE4(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (objc_msgSend(*(id *)(v31 + 32), "unitType", v12) == (id)16) {
      sub_1000D9AE4(v31);
    }
    swift_release();
  }
  sub_10000A794();
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  v32[0] = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_100032FA0(&qword_100155298);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010DCB0;
  *(void *)(inited + 32) = 0x656D656C45706174;
  *(void *)(inited + 4sub_100102B8C(2, 18, 1, 0) = 0xEA0000000000746ELL;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:1];
  unint64_t v30 = sub_100070B48(inited);
  sub_10005FADC(v30);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_10005B41C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100034264();
  swift_retain();
  if (CalculateExpression.activeError.getter())
  {
    swift_errorRelease();
    swift_release();
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    swift_release();
    swift_getKeyPath();
    sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    uint64_t v2 = CalculateExpression.expression.getter();
    uint64_t v3 = v4;
    swift_release();
  }
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ((*(unsigned char *)(v0 + 49) & 1) != 0
    || (swift_getKeyPath(),
        sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager), ObservationRegistrar.access<A, B>(_:keyPath:)(), swift_release(), *(unsigned char *)(v1 + 41) == 1))
  {
    swift_getKeyPath();
    sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    uint64_t v34 = CalculateExpression.expression.getter();
    uint64_t v6 = v5;
    swift_release();
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v6 = 0;
  }
  if (qword_100154760 != -1) {
    swift_once();
  }
  id v7 = (void *)qword_100161370;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 stringForKey:v8];

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v13 = (void *)qword_100161370;
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 stringForKey:v14];

  if (v15)
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (v12) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
    if (v12)
    {
LABEL_15:
      if (!v3)
      {
        swift_bridgeObjectRelease();
        char v19 = (void *)qword_100161370;
        NSString v20 = String._bridgeToObjectiveC()();
        [v19 setValue:0 forKey:v20];

        goto LABEL_26;
      }
      if (v10 == v2 && v12 == v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v21)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
  if (v3)
  {
LABEL_25:
    sub_10008117C();
    swift_bridgeObjectRelease();
    os_log_type_t v22 = (void *)qword_100161370;
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v24 = String._bridgeToObjectiveC()();
    [v22 setValue:v23 forKey:v24];
  }
LABEL_26:
  if (!v18)
  {
    if (!v6) {
      goto LABEL_37;
    }
LABEL_36:
    sub_10008117C();
    swift_bridgeObjectRelease();
    id v28 = (void *)qword_100161370;
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v30 = String._bridgeToObjectiveC()();
    [v28 setValue:v29 forKey:v30];

    goto LABEL_37;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease();
    unint64_t v25 = (void *)qword_100161370;
    NSString v26 = String._bridgeToObjectiveC()();
    [v25 setValue:0 forKey:v26];

    goto LABEL_37;
  }
  if (v16 != v34 || v18 != v6)
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_37:
  uint64_t v31 = (void *)qword_100161370;
  sub_100034264();
  swift_retain();
  CalculateExpression.assumeDegrees.getter();
  swift_release();
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v33 = String._bridgeToObjectiveC()();
  [v31 setValue:isa forKey:v33];
}

void sub_10005BA7C(uint8_t *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for CalculateExpression.Base();
  uint64_t v5 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  id v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100032FA0(&qword_100155268);
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  __chkstk_darwin(v8);
  id v93 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v99 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v98 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int v92 = (char *)&v84 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v84 - v15;
  uint64_t v17 = sub_100032FA0(&qword_100155270);
  __chkstk_darwin(v17 - 8);
  char v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for URLComponents();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  NSString v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v100 = a1;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_100032F44((uint64_t)v19, &qword_100155270);
    unint64_t v25 = v98;
    uint64_t v24 = v99;
LABEL_18:
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100021598(v46, (uint64_t)qword_100161340);
    (*(void (**)(char *, uint8_t *, uint64_t))(v24 + 16))(v25, v100, v10);
    char v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      char v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      *(_DWORD *)char v49 = 136380675;
      sub_100032FE4(&qword_100155278, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v103 = sub_10000DAA8(v50, v51, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v10);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Couldn't handle the url: %{private}s", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v10);
    }

    return;
  }
  uint64_t v90 = v5;
  NSString v85 = v7;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
  if (qword_100154750 != -1) {
    swift_once();
  }
  NSString v86 = v4;
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_100021598(v26, (uint64_t)qword_100161340);
  uint64_t v24 = v99;
  NSString v88 = *(void (**)(char *, uint8_t *, uint64_t))(v99 + 16);
  uint64_t v89 = v99 + 16;
  v88(v16, v100, v10);
  uint64_t v91 = v27;
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v84 = v21;
    uint64_t v31 = (uint8_t *)v30;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v87 = v20;
    uint64_t v105 = v32;
    *(_DWORD *)uint64_t v31 = 136380675;
    sub_100032FE4(&qword_100155278, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v103 = sub_10000DAA8(v33, v34, &v105);
    uint64_t v24 = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v24 + 8);
    v35(v16, v10);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%{private}s", v31, 0xCu);
    swift_arrayDestroy();
    uint64_t v20 = v87;
    swift_slowDealloc();
    uint64_t v21 = v84;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t))(v24 + 8);
    v35(v16, v10);
  }

  uint64_t v36 = URLComponents.scheme.getter();
  unint64_t v25 = v98;
  if (!v37) {
    goto LABEL_17;
  }
  if (v36 == 1668047203 && v37 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
LABEL_17:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v39 = URLComponents.queryItems.getter();
  if (v39)
  {
    uint64_t v40 = *(void *)(v39 + 16);
    swift_bridgeObjectRelease();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = v23;
      BOOL v44 = v40 == 0;
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 67174657;
      uint64_t v24 = v99;
      LODWORD(v105) = v44;
      NSString v23 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "query: %{BOOL,private}d", v45, 8u);
      swift_slowDealloc();
    }

    goto LABEL_17;
  }
  NSString v98 = v23;
  uint64_t v87 = URLComponents.host.getter();
  if (v52)
  {
    unint64_t v53 = v52;
    uint64_t v54 = v21;
    swift_getKeyPath();
    uint64_t v55 = v97;
    uint64_t v105 = v97;
    sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v56 = *(unsigned __int8 *)(v55 + 48);
    uint64_t v57 = v90;
    switch(v56)
    {
      case 1:
      case 2:
      case 3:
        char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v64) {
          goto LABEL_31;
        }
LABEL_34:
        sub_100055FF0(0);
        break;
      default:
        swift_bridgeObjectRelease();
LABEL_31:
        swift_getKeyPath();
        uint64_t v65 = v97;
        uint64_t v105 = v97;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        switch(*(unsigned char *)(v65 + 48))
        {
          case 1:
            swift_bridgeObjectRelease();
            uint64_t v57 = v90;
            break;
          default:
            char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v57 = v90;
            if ((v66 & 1) == 0) {
              goto LABEL_34;
            }
            break;
        }
        break;
    }
    swift_getKeyPath();
    uint64_t v67 = v97;
    uint64_t v105 = v97;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v67 + 49) == 1) {
      sub_10000E104(0);
    }
    uint64_t v68 = *(void *)(v67 + 16);
    swift_getKeyPath();
    uint64_t v105 = v68;
    sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_retain();
    uint64_t v69 = CalculateExpression.format.getter();
    swift_release();
    uint64_t v70 = v20;
    if (v69 == 2) {
      sub_1000115EC(0);
    }
    uint64_t v71 = v87;
    uint64_t v105 = v87;
    unint64_t v106 = v53;
    swift_bridgeObjectRetain();
    char v72 = v93;
    Regex.init(_regexString:version:)();
    sub_10006089C();
    sub_100040BE4(&qword_100155288, &qword_100155268);
    uint64_t v73 = v95;
    char v74 = BidirectionalCollection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v72, v73);
    swift_bridgeObjectRelease();
    uint64_t v75 = v96;
    if (v74)
    {
      uint64_t v105 = v71;
      unint64_t v106 = v53;
      uint64_t v103 = 808556483;
      unint64_t v104 = 0xA400000000000000;
      uint64_t v101 = 101;
      unint64_t v102 = 0xE100000000000000;
      sub_100023B24();
      uint64_t v76 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v78 = v77;
      swift_bridgeObjectRelease();
      uint64_t v105 = v76;
      unint64_t v106 = v78;
      uint64_t v71 = StringProtocol.decomposedStringWithCompatibilityMapping.getter();
      unint64_t v53 = v79;
      swift_bridgeObjectRelease();
      char v80 = 0;
    }
    else
    {
      sub_1000DD044((uint64_t)_swiftEmptyArrayStorage);
      (*(void (**)(char *, void, uint64_t))(v57 + 104))(v85, enum case for CalculateExpression.Base.base10(_:), v75);
      UUID.init()();
      type metadata accessor for CalculateExpression();
      swift_allocObject();
      swift_bridgeObjectRetain();
      CalculateExpression.init(_:options:base:id:)();
      char v81 = (void *)CalculateExpression.result.getter();
      swift_release();
      if (v81)
      {
        unsigned __int8 v82 = [v81 isTrivial];

        char v80 = v82 ^ 1;
      }
      else
      {
        char v80 = 1;
      }
    }
    char v83 = v98;
    sub_100056690(v71, v53, 0, 0, 0, v80);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v83, v70);
  }
  else
  {
    char v58 = v92;
    v88(v92, v100, v10);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      char v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      *(_DWORD *)char v61 = 136380675;
      uint64_t v87 = v20;
      NSString v100 = v61 + 4;
      sub_100032FE4(&qword_100155278, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v103 = sub_10000DAA8(v62, v63, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v58, v10);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Invalid url: %{private}s", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v21 + 8))(v98, v87);
    }
    else
    {

      v35(v58, v10);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v98, v20);
    }
  }
}

uint64_t sub_10005CA8C(char a1)
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = (void *)(v1 + 80);
  swift_beginAccess();
  uint64_t v4 = *(void **)(v1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 8sub_100102B8C(2, 18, 1, 0) = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_1000A4D2C(0, v4[2] + 1, 1, v4);
    *uint64_t v3 = v4;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t v4 = sub_1000A4D2C((void *)(v6 > 1), v7 + 1, 1, v4);
    *uint64_t v3 = v4;
  }
  v4[2] = v7 + 1;
  *((unsigned char *)v4 + v7 + 32) = a1;
  swift_endAccess();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return swift_release();
}

uint64_t sub_10005CC30(unsigned __int8 a1)
{
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    int v6 = a1;
    if (*(unsigned __int8 *)(v4 + 32) == a1)
    {
      unint64_t v7 = 0;
LABEL_7:
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      swift_beginAccess();
      sub_1000A1C88(v7);
      swift_endAccess();
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      return swift_release();
    }
    else
    {
      unint64_t v7 = 0;
      uint64_t v8 = v4 + 33;
      uint64_t v9 = v5 - 1;
      while (v9 != v7)
      {
        int v10 = *(unsigned __int8 *)(v8 + v7++);
        if (v10 == v6) {
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10005CDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 88) = a5;
  *(void *)(v5 + 16) = a4;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  *(void *)(v5 + 24) = v6;
  *(void *)(v5 + 32) = *(void *)(v6 - 8);
  *(void *)(v5 + 4sub_100102B8C(2, 18, 1, 0) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v5 + 48) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 56) = v8;
  *(void *)(v5 + 64) = v7;
  return _swift_task_switch(sub_10005CEF0, v8, v7);
}

uint64_t sub_10005CEF0()
{
  uint64_t v1 = static Duration.zero.getter();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100155300 + dword_100155300);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10005CFD0;
  return v6(70000000000000000, 0, v1, v3, 0);
}

uint64_t sub_10005CFD0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void *)(*v1 + 24);
  *(void *)(*v1 + 8sub_100102B8C(2, 18, 1, 0) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v8 = sub_10005D1EC;
  }
  else {
    uint64_t v8 = sub_10005D168;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_10005D168()
{
  unsigned __int8 v1 = *(unsigned char *)(v0 + 88);
  swift_release();
  sub_10005CC30(v1);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10005D1EC()
{
  swift_release();
  swift_task_dealloc();
  unsigned __int8 v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005D258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100032F44(a1, &qword_100154B68);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_10005D3E0(void *a1, NSObject *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = sub_100053460();
  if (v9 != 93)
  {
    char v10 = v9;
    sub_10005CA8C(v9);
    uint64_t v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v12 = static MainActor.shared.getter();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = &protocol witness table for MainActor;
    *(void *)(v13 + 32) = v3;
    *(unsigned char *)(v13 + 4sub_100102B8C(2, 18, 1, 0) = v10;
    sub_10005D258((uint64_t)v8, (uint64_t)&unk_1001552F8, v13);
    swift_release();
  }
  type metadata accessor for CalculateExpression.Operation();
  static CalculateExpression.Operation.equals.getter();
  char v14 = static CalculateExpression.Operation.== infix(_:_:)();
  swift_release();
  if (v14)
  {
    sub_100058308(8, 0, 0, a2);
    return;
  }
  char v15 = sub_100053460();
  sub_1000563E4(v15);
  uint64_t v16 = *(void *)(v3 + 16);
  swift_getKeyPath();
  uint64_t v35 = (void *)v16;
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  uint64_t v17 = CalculateExpression.format.getter();
  swift_release();
  if (v17 == 2) {
    return;
  }
  id v18 = [self defaultCenter];
  if (qword_1001544F0 != -1) {
    swift_once();
  }
  [v18 postNotificationName:qword_1001610F8 object:0];

  swift_getKeyPath();
  uint64_t v35 = (void *)v16;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v16 + 41) == 1)
  {
    uint64_t v19 = *(void *)(v3 + 56);
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      uint64_t v21 = (void *)(v19 + 32);
      while (*v21 != *a1)
      {
        ++v21;
        if (!--v20) {
          goto LABEL_15;
        }
      }
      uint64_t v35 = a1;
      v34[1] = static CalculateExpression.Operation.ee.getter();
      sub_100032FE4((unint64_t *)&qword_100155010, (void (*)(uint64_t))&type metadata accessor for CalculateExpression.Operation);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      if ((v22 & 1) == 0)
      {
        sub_100034264();
        swift_retain();
        CalculateExpression.clear()();
        swift_release();
        sub_1000DD494();
        swift_retain();
        CalculateExpression.clear()();
        swift_release();
        swift_getKeyPath();
        uint64_t v35 = (void *)v16;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if (*(unsigned char *)(v16 + 41) == 1)
        {
          uint64_t KeyPath = swift_getKeyPath();
          __chkstk_darwin(KeyPath);
          v34[-2] = v16;
          LOBYTE(v34[-1]) = 0;
          uint64_t v35 = (void *)v16;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
          swift_release();
        }
        sub_100034264();
        swift_retain();
        CalculateExpression.update(_:)();
        swift_release();
        if (!a2) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
LABEL_15:
    swift_getKeyPath();
    uint64_t v35 = (void *)v16;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v16 + 41) == 1)
    {
      uint64_t v23 = swift_getKeyPath();
      __chkstk_darwin(v23);
      v34[-2] = v16;
      LOBYTE(v34[-1]) = 0;
      uint64_t v35 = (void *)v16;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
  }
  if (a2)
  {
LABEL_18:
    uint64_t v24 = swift_retain();
    sub_1000D9AE4(v24);
    swift_release();
  }
LABEL_19:
  static CalculateExpression.Operation.delete.getter();
  char v25 = static CalculateExpression.Operation.== infix(_:_:)();
  swift_release();
  if ((v25 & 1) == 0) {
    return;
  }
  sub_100034264();
  swift_retain();
  CalculateExpression.rich.getter();
  char v26 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
  swift_release();
  if (v26)
  {
    swift_release();
  }
  else
  {
    CalculateExpression.rich.getter();
    char v27 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
    swift_release();
    swift_release();
    if ((v27 & 1) == 0) {
      return;
    }
  }
  sub_10008117C();
  if (qword_100154760 != -1) {
    swift_once();
  }
  id v28 = (void *)qword_100161370;
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v30 = String._bridgeToObjectiveC()();
  [v28 setObject:v29 forKey:v30];

  uint64_t v31 = (void *)qword_100161370;
  NSString v32 = String._bridgeToObjectiveC()();
  [v31 setObject:0 forKey:v32];
}

Class sub_10005DB24(uint64_t a1)
{
  unsigned __int8 v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10001CE8C(0, &qword_100155220);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_10005DBC0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10005DCB8(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed, a2);
}

uint64_t sub_10005DBD4()
{
  return swift_release();
}

uint64_t sub_10005DCA4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10005DCB8(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed, a2);
}

uint64_t sub_10005DCB8@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a3 = *(unsigned char *)(v5 + *a2);
  return result;
}

uint64_t sub_10005DD6C()
{
  return swift_release();
}

uint64_t sub_10005DE3C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 41);
  return result;
}

uint64_t sub_10005DEE4()
{
  return swift_release();
}

id sub_10005DFB4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  NSDictionary v4 = *(void **)(v3 + 56);
  *a2 = v4;

  return v4;
}

void sub_10005E06C(void **a1)
{
  unsigned __int8 v1 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10005E148@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 64);
  return result;
}

uint64_t sub_10005E1F0()
{
  return swift_release();
}

uint64_t sub_10005E2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 8sub_100102B8C(2, 18, 1, 0) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 4sub_100102B8C(2, 18, 1, 0) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_10005E3C4, 0, 0);
}

uint64_t sub_10005E3C4()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_100032FE4(&qword_100155308, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100032FE4(&qword_100155310, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10005E564;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_10005E564()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 12sub_100102B8C(2, 18, 1, 0) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_10005E720, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_10005E720()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005E78C(uint64_t *a1)
{
  uint64_t v9 = *a1;
  uint64_t v10 = &off_10014A6A0;
  v8[0] = a1;
  uint64_t v1 = *sub_10006052C(v8, v9);
  swift_getKeyPath();
  sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v2 = *(unsigned __int8 *)(v1 + 48);
  uint64_t v3 = *sub_10006052C(v8, v9);
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v4 = *(unsigned __int8 *)(v3 + 49);
  sub_10006052C(v8, v9);
  swift_getKeyPath();
  sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  int v5 = CalculateExpression.format.getter() == 2;
  swift_release();
  sub_10000DB7C((uint64_t)v8);
  if (v4) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return v6 | v2 | (v5 << 16);
}

uint64_t sub_10005E97C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[3] = type metadata accessor for CalculatorViewModel();
  v23[4] = &off_10014A6A0;
  v23[0] = a1;
  sub_100060604((uint64_t)v23, (uint64_t)v22);
  uint64_t v8 = sub_100060668((uint64_t)v22, v22[3]);
  double v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t **)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t **, double))(v12 + 16))(v11, v9);
  uint64_t v13 = *v11;
  swift_retain();
  LODWORD(a1) = sub_10005E78C(v13);
  sub_10000DB7C((uint64_t)v22);
  *(unsigned char *)(a2 + 26) = BYTE2(a1) & 1;
  *(_WORD *)(a2 + 24) = a1 & 0x1FF;
  if (qword_100154758 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100021598(v4, (uint64_t)qword_100161358);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
  swift_retain_n();
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v15, v16))
  {

    swift_release_n();
    goto LABEL_7;
  }
  uint64_t v17 = (uint8_t *)swift_slowAlloc();
  v22[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v17 = 136315138;
  if ((*(_WORD *)(a2 + 24) & 0xFF00) != 0x200)
  {
    uint64_t v18 = sub_1000F634C((*(unsigned __int16 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 26) << 16)) & 0x101FF);
    v21[1] = sub_10000DAA8(v18, v19, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "updated snapshot to: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_7:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return sub_10000DB7C((uint64_t)v23);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10005ECF0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v33 = a1;
  uint64_t v6 = type metadata accessor for CalculatorViewModel();
  uint64_t v31 = v6;
  NSString v32 = &off_10014A6A0;
  v30[0] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  if (sub_100070010())
  {
    if (qword_100154758 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100021598(v7, (uint64_t)qword_100161358);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Currently running in debug.  No events will be posted.", v10, 2u);
      swift_slowDealloc();
    }
  }
  else if ((*(unsigned char *)(a3 + 27) & 1) != 0 {
         && (int v11 = *(unsigned __int16 *)(a3 + 24),
  }
             int v12 = v11 | (*(unsigned __int8 *)(a3 + 26) << 16),
             (v11 & 0xFF00) != 0x200))
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    char v15 = (unint64_t *)(v14 + 16);
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_retain();
    unint64_t v17 = sub_100055108(v16, v12, a1);
    swift_release();
    if (v17)
    {
      *char v15 = v17;
      swift_bridgeObjectRelease();
    }
    if (qword_100154758 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100021598(v18, (uint64_t)qword_100161358);
    swift_retain_n();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315394;
      sub_10000DAA8(0xD000000000000020, 0x80000001001080C0, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2080;
      swift_beginAccess();
      if (*v15)
      {
        sub_10001CE8C(0, &qword_100155220);
        swift_bridgeObjectRetain();
        uint64_t v22 = Dictionary.description.getter();
        unint64_t v24 = v23;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v24 = 0xE300000000000000;
        uint64_t v22 = 7104878;
      }
      sub_10000DAA8(v22, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Posting event (%s) to CoreAnalytics with payload: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    NSString v25 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1000605FC;
    aBlock[5] = v14;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10005DB24;
    void aBlock[3] = (uint64_t)&unk_10014A7A8;
    char v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v26);

    sub_10006FC34();
    char v27 = sub_10006052C(v30, v31);
    sub_10005E97C(*v27, a3);
    swift_release();
  }
  else
  {
    uint64_t v13 = sub_10006052C(v30, v6);
    sub_10005E97C(*v13, a3);
  }
  sub_100060570((uint64_t)&v33);
  return sub_10000DB7C((uint64_t)v30);
}

uint64_t sub_10005F1C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for CalculatorViewModel();
  uint64_t v29 = v6;
  NSString v30 = &off_10014A6A0;
  v28[0] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  if (sub_100070010())
  {
    if (qword_100154758 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100021598(v7, (uint64_t)qword_100161358);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Currently running in debug.  No events will be posted.", v10, 2u);
      swift_slowDealloc();
    }
  }
  else if ((*(unsigned char *)(a3 + 27) & 1) != 0 && *(unsigned __int8 *)(a3 + 25) << 8 != 512)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a1;
    uint64_t v13 = (unint64_t *)(v12 + 16);
    swift_bridgeObjectRetain();
    uint64_t v14 = swift_retain();
    unint64_t v15 = sub_100055404(v14, a1);
    swift_release();
    if (v15)
    {
      *uint64_t v13 = v15;
      swift_bridgeObjectRelease();
    }
    if (qword_100154758 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100021598(v16, (uint64_t)qword_100161358);
    swift_retain_n();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      sub_10000DAA8(0xD00000000000001DLL, 0x80000001001080A0, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_beginAccess();
      if (*v13)
      {
        sub_10001CE8C(0, &qword_100155220);
        swift_bridgeObjectRetain();
        uint64_t v20 = Dictionary.description.getter();
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v22 = 0xE300000000000000;
        uint64_t v20 = 7104878;
      }
      sub_10000DAA8(v20, v22, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Posting event (%s) to CoreAnalytics with payload: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    NSString v23 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1000605FC;
    aBlock[5] = v12;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10005DB24;
    void aBlock[3] = (uint64_t)&unk_10014A7F8;
    unint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v24);

    sub_10006FC34();
    NSString v25 = sub_10006052C(v28, v29);
    sub_10005E97C(*v25, a3);
    swift_release();
  }
  else
  {
    int v11 = sub_10006052C(v28, v6);
    sub_10005E97C(*v11, a3);
  }
  sub_100060848((uint64_t)&v31);
  return sub_10000DB7C((uint64_t)v28);
}

uint64_t sub_10005F68C(unint64_t a1, uint64_t a2)
{
  unint64_t v24 = a1;
  swift_bridgeObjectRetain();
  if (sub_100070010())
  {
    if (qword_100154758 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100021598(v4, (uint64_t)qword_100161358);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Currently running in debug.  No events will be posted.", v7, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    os_log_type_t v9 = (unint64_t *)(v8 + 16);
    int v10 = *(unsigned __int16 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 26) << 16);
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_retain();
    unint64_t v12 = sub_100055108(v11, v10, a1);
    swift_release();
    if (v12)
    {
      *os_log_type_t v9 = v12;
      swift_bridgeObjectRelease();
    }
    if (qword_100154758 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100021598(v13, (uint64_t)qword_100161358);
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_10000DAA8(0xD000000000000020, 0x80000001001080C0, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      swift_beginAccess();
      if (*v9)
      {
        sub_10001CE8C(0, &qword_100155220);
        swift_bridgeObjectRetain();
        uint64_t v17 = Dictionary.description.getter();
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v19 = 0xE300000000000000;
        uint64_t v17 = 7104878;
      }
      sub_10000DAA8(v17, v19, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Posting event (%s) to CoreAnalytics with payload: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    NSString v20 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1000605FC;
    aBlock[5] = v8;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10005DB24;
    void aBlock[3] = (uint64_t)&unk_10014A7D0;
    unint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v21);
    swift_release();
  }
  return sub_100060570((uint64_t)&v24);
}

uint64_t sub_10005FADC(unint64_t a1)
{
  unint64_t v20 = a1;
  swift_bridgeObjectRetain();
  if (sub_100070010())
  {
    if (qword_100154758 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100021598(v2, (uint64_t)qword_100161358);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Currently running in debug.  No events will be posted.", v5, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    uint64_t v7 = (unint64_t *)(v6 + 16);
    swift_retain();
    unint64_t v8 = a1;
    if (!a1) {
      unint64_t v8 = sub_100070B48((uint64_t)_swiftEmptyArrayStorage);
    }
    swift_bridgeObjectRetain_n();
    swift_release();
    *uint64_t v7 = v8;
    swift_bridgeObjectRelease();
    if (qword_100154758 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100021598(v9, (uint64_t)qword_100161358);
    swift_retain_n();
    int v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      sub_10000DAA8(0xD00000000000001CLL, 0x8000000100108080, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2080;
      swift_beginAccess();
      if (*v7)
      {
        sub_10001CE8C(0, &qword_100155220);
        swift_bridgeObjectRetain();
        uint64_t v13 = Dictionary.description.getter();
        unint64_t v15 = v14;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v15 = 0xE300000000000000;
        uint64_t v13 = 7104878;
      }
      sub_10000DAA8(v13, v15, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Posting event (%s) to CoreAnalytics with payload: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    NSString v16 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1000605FC;
    aBlock[5] = v6;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10005DB24;
    void aBlock[3] = (uint64_t)&unk_10014A820;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v17);
    swift_release();
  }
  return sub_1000608F8((uint64_t)&v20);
}

void sub_10005FF28()
{
  if (qword_100154760 != -1) {
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v1 = (void *)qword_100161370;
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [v1 objectForKey:v2];

    if (v3)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v15, 0, sizeof(v15));
    }
    sub_1000125D0((uint64_t)v15, (uint64_t)v16);
    if (v16[3])
    {
      if (swift_dynamicCast()) {
        goto LABEL_22;
      }
    }
    else
    {
      sub_100032F44((uint64_t)v16, &qword_100155208);
    }
    if (qword_1001546C8 != -1) {
      swift_once();
    }
    uint64_t v4 = qword_1001612E0;
    swift_getKeyPath();
    v16[0] = v4;
    sub_100032FE4((unint64_t *)&qword_100155238, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionDataProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    id v5 = [*(id *)(v4 + 16) categories];
    sub_10001CE8C(0, (unint64_t *)&qword_100155240);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62) {
      break;
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_20;
    }
LABEL_13:
    uint64_t v8 = 4;
    while (1)
    {
      id v9 = (v6 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v6 + 8 * v8);
      uint64_t v0 = v9;
      uint64_t v10 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      if ([v9 unitType] == (id)16) {
        goto LABEL_21;
      }

      ++v8;
      if (v10 == v7) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_27:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (v7) {
    goto LABEL_13;
  }
LABEL_20:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_21:
  swift_bridgeObjectRelease_n();
  CalculateUnitCategory.id.getter();

LABEL_22:
  if (qword_1001546C8 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_1001612E0;
  swift_getKeyPath();
  v16[0] = v11;
  sub_100032FE4((unint64_t *)&qword_100155238, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v12 = *(id *)(v11 + 16);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 findCategoryWithName:v13];

  if (!v14) {
    __break(1u);
  }
}

uint64_t sub_100060310()
{
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100161370;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000125D0((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100032F44((uint64_t)v6, &qword_100155208);
    return 0;
  }
}

uint64_t sub_100060438()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100060470()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000604B0(uint64_t a1)
{
  return sub_1000570D8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000604B8()
{
  return swift_release();
}

void sub_1000604C8()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 65) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_1000604E8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10005DCB8(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed, a2);
}

void sub_10006051C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 49) = *(unsigned char *)(v0 + 24);
}

void *sub_10006052C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100060570(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000605C4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000605FC()
{
  return sub_10006FF38(v0);
}

uint64_t sub_100060604(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100060668(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_1000606C0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 4sub_100102B8C(2, 18, 1, 0) = v2;
  id v4 = v2;
}

uint64_t sub_100060708()
{
  return sub_1000DB100(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100060730()
{
  return sub_1000DB0F8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100060758()
{
  return sub_1000DB320(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_100060780()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 51) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100060790()
{
  return sub_1000F8A50(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1000607B0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10005DCB8(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed, a2);
}

void sub_1000607F4()
{
}

void sub_100060814()
{
  *(void *)(*(void *)(v0 + 16) + 72) = *(void *)(v0 + 24);
  sub_100057D70();
}

uint64_t sub_100060848(uint64_t a1)
{
  return a1;
}

unint64_t sub_10006089C()
{
  unint64_t result = qword_100155280;
  if (!qword_100155280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155280);
  }
  return result;
}

uint64_t sub_1000608F8(uint64_t a1)
{
  return a1;
}

void sub_100060980(NSObject *a1, uint64_t a2, NSObject *a3, uint64_t a4, NSObject *a5, uint64_t a6, NSObject *a7, uint64_t a8, NSObject *a9)
{
  os_log_t v67 = a1;
  uint64_t v62 = a9;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v17 - 8);
  uint64_t v66 = v17;
  __chkstk_darwin(v17);
  char v64 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for GenericRecord();
  __chkstk_darwin(v63);
  unint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_10000C4D8())
  {
    uint64_t v60 = a2;
    char v61 = a3;
    uint64_t v57 = a5;
    uint64_t v58 = a4;
    uint64_t v59 = a6;
    uint64_t v56 = a7;
    if (qword_1001541A0 != -1) {
      swift_once();
    }
    swift_retain();
    uint64_t v21 = sub_1000484F0();
    swift_release();
    if (!v21) {
      goto LABEL_42;
    }
    uint64_t v68 = v21;
    swift_getKeyPath();
    sub_100032FE4(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    sub_100032FE4(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    if (v68 == v67 && v69 == v60)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        goto LABEL_41;
      }
    }
    uint64_t v68 = v21;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    if (v68 == v61 && v69 == v58)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0) {
        goto LABEL_41;
      }
    }
    uint64_t v68 = v21;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    sub_10004B9E8();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    if (!v59)
    {
      if (v69) {
        goto LABEL_34;
      }
      goto LABEL_28;
    }
    if (v69)
    {
      if (v68 == v57 && v69 == v59)
      {
        swift_bridgeObjectRelease();
LABEL_28:
        uint64_t v68 = v21;
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        PersistentModel.getValue<A>(forKey:)();
        swift_release();
        if (a8)
        {
          if (v69)
          {
            if (v68 == v56 && v69 == a8)
            {
              swift_bridgeObjectRelease();
LABEL_36:
              if (qword_100154750 != -1) {
                swift_once();
              }
              uint64_t v30 = type metadata accessor for Logger();
              sub_100021598(v30, (uint64_t)qword_100161340);
              unint64_t v31 = Logger.logObject.getter();
              os_log_type_t v32 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v31, v32))
              {
                unint64_t v33 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v33 = 0;
                _os_log_impl((void *)&_mh_execute_header, v31, v32, "Duplicate calculation performed, skipping adding existing entry to history list", v33, 2u);
                swift_slowDealloc();
              }

              swift_release();
              return;
            }
            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v29) {
              goto LABEL_36;
            }
          }
          goto LABEL_41;
        }
        if (!v69) {
          goto LABEL_36;
        }
LABEL_34:
        swift_release();
        swift_bridgeObjectRelease();
LABEL_42:
        swift_getKeyPath();
        uint64_t v68 = v9;
        sub_100032FE4((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v34 = *(unsigned __int8 *)(v9 + 48);
        unint64_t v35 = 0xE500000000000000;
        uint64_t v36 = 0x6369736162;
        uint64_t v54 = a8;
        switch(v34)
        {
          case 1:
            uint64_t v36 = 0x6669746E65696373;
            unint64_t v35 = 0xEA00000000006369;
            break;
          case 2:
            unint64_t v35 = 0xE900000000000072;
            uint64_t v36 = 0x657061506874616DLL;
            break;
          case 3:
            unint64_t v35 = 0xEA00000000007265;
            uint64_t v36 = 0x6D6D6172676F7270;
            break;
          default:
            break;
        }
        uint64_t v52 = v36;
        unint64_t v53 = v35;
        uint64_t v55 = v9;
        uint64_t v37 = *(NSObject **)(v9 + 16);
        swift_getKeyPath();
        uint64_t v68 = v37;
        sub_100032FE4(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_retain();
        uint64_t v38 = CalculateExpression.format.getter();
        swift_release();
        uint64_t v39 = v62;
        if (v62)
        {
          swift_getKeyPath();
          uint64_t v68 = v39;
          sub_100032FE4(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          LODWORD(v62) = [(objc_class *)v39[4].isa unitType] == (id)16;
        }
        else
        {
          LODWORD(v62) = 0;
        }
        swift_getKeyPath();
        uint64_t v68 = v37;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_retain();
        char v40 = CalculateExpression.assumeDegrees.getter();
        swift_release();
        uint64_t v41 = v54;
        swift_bridgeObjectRetain();
        uint64_t v42 = v60;
        swift_bridgeObjectRetain();
        uint64_t v43 = v58;
        swift_bridgeObjectRetain();
        uint64_t v44 = v59;
        swift_bridgeObjectRetain();
        uint64_t v45 = v64;
        UUID.init()();
        uint64_t v46 = UUID.uuidString.getter();
        uint64_t v48 = v47;
        (*(void (**)(char *, uint64_t))(v65 + 8))(v45, v66);
        static Date.now.getter();
        *(void *)unint64_t v20 = v46;
        *((void *)v20 + 1) = v48;
        unint64_t v49 = v53;
        *((void *)v20 + 2) = v52;
        *((void *)v20 + 3) = v49;
        v20[32] = v38 == 2;
        v20[33] = (char)v62;
        v20[34] = v40 & 1;
        *((void *)v20 + 5) = v67;
        *((void *)v20 + 6) = v42;
        *((void *)v20 + 7) = v61;
        *((void *)v20 + 8) = v43;
        *((void *)v20 + 9) = v57;
        *((void *)v20 + 1sub_100102B8C(2, 18, 1, 0) = v44;
        *((void *)v20 + 11) = v56;
        *((void *)v20 + 12) = v41;
        swift_retain();
        sub_100044CF4((uint64_t)v20);
        swift_release();
        sub_100032FA0(&qword_100155298);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10010DCB0;
        strcpy((char *)(inited + 32), "insertElement");
        *(_WORD *)(inited + 46) = -4864;
        *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:1];
        unint64_t v51 = sub_100070B48(inited);
        sub_10005FADC(v51);
        sub_10004BD04((uint64_t)v20);
        swift_bridgeObjectRelease();
        return;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v28) {
        goto LABEL_28;
      }
    }
LABEL_41:
    swift_release();
    goto LABEL_42;
  }
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100021598(v22, (uint64_t)qword_100161340);
  os_log_t v67 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v23))
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v23, "History not supported for current app settings", v24, 2u);
    swift_slowDealloc();
  }
  os_log_t v25 = v67;
}

void sub_100061438()
{
}

unint64_t sub_100061458()
{
  unint64_t result = qword_1001552C0;
  if (!qword_1001552C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001552C0);
  }
  return result;
}

void sub_1000614AC()
{
}

uint64_t sub_1000614D4()
{
  return 8;
}

uint64_t sub_1000614E0()
{
  return swift_release();
}

uint64_t sub_1000614E8(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1000614F8()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_100061540(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_100061554()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 52) = *(unsigned char *)(v0 + 24);
}

void sub_100061574()
{
  sub_1000A34C0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100061590()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000615D0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10004BC10;
  return sub_10005CDF8(a1, v4, v5, v6, v7);
}

void sub_1000616B4()
{
}

void sub_1000616CC()
{
}

void sub_1000616E4()
{
}

uint64_t sub_1000616FC()
{
  return sub_100060708();
}

void sub_100061714()
{
}

void sub_10006172C()
{
}

uint64_t destroy for InputAccessoryView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InputAccessoryView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 12sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InputAccessoryView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 12sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for InputAccessoryView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for InputAccessoryView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 12sub_100102B8C(2, 18, 1, 0) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InputAccessoryView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InputAccessoryView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12sub_100102B8C(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 16sub_100102B8C(2, 18, 1, 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16sub_100102B8C(2, 18, 1, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InputAccessoryView()
{
  return &type metadata for InputAccessoryView;
}

uint64_t sub_100061C30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100061C4C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v39 = a1;
  uint64_t v37 = type metadata accessor for PopoverAttachmentAnchor();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v4 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = type metadata accessor for PlainButtonStyle();
  uint64_t v5 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100032FA0(&qword_1001547B8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100032FA0(&qword_1001547B0);
  uint64_t v38 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v34 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v13 = (_OWORD *)swift_allocObject();
  long long v14 = v2[7];
  v13[7] = v2[6];
  v13[8] = v14;
  long long v15 = v2[9];
  v13[9] = v2[8];
  v13[10] = v15;
  long long v16 = v2[3];
  v13[3] = v2[2];
  v13[4] = v16;
  long long v17 = v2[5];
  void v13[5] = v2[4];
  v13[6] = v17;
  long long v18 = v2[1];
  v13[1] = *v2;
  v13[2] = v18;
  uint64_t v41 = v2;
  sub_100063150((uint64_t)v2);
  sub_100032FA0(&qword_100155318);
  sub_100063218();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v19 = sub_100040BE4(&qword_1001547C0, &qword_1001547B8);
  uint64_t v20 = sub_100063514(&qword_1001547C8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v33 = v8;
  uint64_t v21 = v40;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  long long v46 = *v2;
  sub_100032FA0(&qword_100154898);
  State.projectedValue.getter();
  uint64_t v22 = (_OWORD *)swift_allocObject();
  long long v23 = v2[7];
  v22[7] = v2[6];
  v22[8] = v23;
  long long v24 = v2[9];
  v22[9] = v2[8];
  v22[10] = v24;
  long long v25 = v2[3];
  v22[3] = v2[2];
  v22[4] = v25;
  long long v26 = v2[5];
  uint64_t v22[5] = v2[4];
  v22[6] = v26;
  long long v27 = v2[1];
  v22[1] = *v2;
  v22[2] = v27;
  sub_100063150((uint64_t)v2);
  *uint64_t v4 = static Anchor.Source<A>.bounds.getter();
  uint64_t v28 = v35;
  uint64_t v29 = v37;
  (*(void (**)(uint64_t *, void, uint64_t))(v35 + 104))(v4, enum case for PopoverAttachmentAnchor.rect(_:), v37);
  type metadata accessor for UnitConversionPopoverView();
  uint64_t v42 = v33;
  uint64_t v43 = v40;
  uint64_t v44 = v19;
  uint64_t v45 = v20;
  swift_getOpaqueTypeConformance2();
  sub_100063514(&qword_1001547D0, (void (*)(uint64_t))type metadata accessor for UnitConversionPopoverView);
  uint64_t v30 = v36;
  unint64_t v31 = v34;
  View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v28 + 8))(v4, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v31, v30);
}

uint64_t sub_1000621A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v3 = sub_100032FA0(&qword_100155390);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100032FA0(&qword_100155398);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_1001553A0);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_100032FA0(&qword_1001553A8) - 8;
  __chkstk_darwin(v70);
  long long v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100032FA0(&qword_1001553B0) - 8;
  __chkstk_darwin(v71);
  long long v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100032FA0(&qword_1001553B8) - 8;
  __chkstk_darwin(v74);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100032FA0(&qword_100155360);
  __chkstk_darwin(v75);
  uint64_t v72 = (uint64_t)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100032FA0(&qword_100155348);
  __chkstk_darwin(v77);
  uint64_t v73 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v76 = (char *)&v70 - v23;
  __chkstk_darwin(v24);
  unint64_t v79 = (char *)&v70 - v25;
  uint64_t v26 = sub_100032FA0(&qword_1001553C0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v85 = v26;
  uint64_t v86 = v27;
  __chkstk_darwin(v26);
  unint64_t v78 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100032FA0(&qword_100155340);
  __chkstk_darwin(v29 - 8);
  char v80 = (char *)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100032FA0(&qword_100155330) - 8;
  __chkstk_darwin(v84);
  uint64_t v82 = (uint64_t)&v70 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100032FA0(&qword_100155318) - 8;
  __chkstk_darwin(v83);
  uint64_t v81 = (uint64_t)&v70 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
  *((void *)v5 + 1) = 0x4000000000000000;
  v5[16] = 0;
  uint64_t v33 = sub_100032FA0(&qword_1001553C8);
  sub_100062B38(a1, (uint64_t *)&v5[*(int *)(v33 + 44)]);
  long long v89 = *(_OWORD *)a1;
  sub_100032FA0(&qword_100154898);
  State.wrappedValue.getter();
  if ((_BYTE)v88) {
    double v34 = 0.5;
  }
  else {
    double v34 = 1.0;
  }
  sub_100033344((uint64_t)v5, (uint64_t)v9, &qword_100155390);
  *(double *)&v9[*(int *)(v7 + 44)] = v34;
  sub_100032F44((uint64_t)v5, &qword_100155390);
  uint64_t v35 = *(void *)(a1 + 48);
  uint64_t KeyPath = swift_getKeyPath();
  sub_100033344((uint64_t)v9, (uint64_t)v13, &qword_100155398);
  uint64_t v37 = (uint64_t *)&v13[*(int *)(v11 + 44)];
  *uint64_t v37 = KeyPath;
  v37[1] = v35;
  swift_retain();
  sub_100032F44((uint64_t)v9, &qword_100155398);
  uint64_t v38 = swift_getKeyPath();
  sub_100033344((uint64_t)v13, (uint64_t)v15, &qword_1001553A0);
  uint64_t v39 = (uint64_t *)&v15[*(int *)(v70 + 44)];
  *uint64_t v39 = v38;
  v39[1] = 0x3FE0000000000000;
  sub_100032F44((uint64_t)v13, &qword_1001553A0);
  uint64_t v40 = swift_getKeyPath();
  sub_100033344((uint64_t)v15, (uint64_t)v17, &qword_1001553A8);
  uint64_t v41 = &v17[*(int *)(v71 + 44)];
  *(void *)uint64_t v41 = v40;
  v41[8] = 2;
  sub_100032F44((uint64_t)v15, &qword_1001553A8);
  long long v89 = *(_OWORD *)(a1 + 16);
  sub_100032FA0(&qword_1001553D0);
  State.wrappedValue.getter();
  uint64_t v42 = v88;
  uint64_t v43 = swift_getKeyPath();
  *(void *)&long long v89 = v42;
  swift_retain();
  uint64_t v44 = AnyShapeStyle.init<A>(_:)();
  sub_100033344((uint64_t)v17, (uint64_t)v19, &qword_1001553B0);
  swift_release();
  uint64_t v45 = (uint64_t *)&v19[*(int *)(v74 + 44)];
  *uint64_t v45 = v43;
  v45[1] = v44;
  sub_100032F44((uint64_t)v17, &qword_1001553B0);
  uint64_t v47 = *(void *)(a1 + 32);
  uint64_t v46 = *(void *)(a1 + 40);
  uint64_t v48 = v72;
  sub_100033344((uint64_t)v19, v72, &qword_1001553B8);
  unint64_t v49 = (void *)(v48 + *(int *)(v75 + 52));
  *unint64_t v49 = v47;
  v49[1] = v46;
  swift_bridgeObjectRetain();
  sub_100032F44((uint64_t)v19, &qword_1001553B8);
  sub_100040BE4(&qword_100155358, &qword_100155360);
  uint64_t v50 = (uint64_t)v73;
  View.accessibilityIdentifier(_:)();
  sub_100032F44(v48, &qword_100155360);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v51 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v53 = v52;
  char v55 = v54 & 1;
  uint64_t v57 = (uint64_t)v76;
  uint64_t v56 = v77;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_1000356E0(v51, v53, v55);
  swift_bridgeObjectRelease();
  sub_100032F44(v50, &qword_100155348);
  long long v89 = *(_OWORD *)(a1 + 112);
  sub_100023B24();
  uint64_t v58 = (uint64_t)v79;
  ModifiedContent<>.accessibilityValue<A>(_:)();
  sub_100032F44(v57, &qword_100155348);
  unint64_t v59 = sub_100063438();
  uint64_t v60 = v78;
  View.help(_:)();
  sub_100032F44(v58, &qword_100155348);
  LocalizedStringKey.init(stringLiteral:)();
  *(void *)&long long v89 = v56;
  *((void *)&v89 + 1) = v59;
  swift_getOpaqueTypeConformance2();
  char v61 = v80;
  uint64_t v62 = v85;
  View.accessibilityHint(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v60, v62);
  uint64_t v63 = static Color.clear.getter();
  LOBYTE(v47) = static Edge.Set.all.getter();
  uint64_t v64 = (uint64_t)v61;
  uint64_t v65 = (uint64_t)v61;
  uint64_t v66 = v82;
  sub_100033344(v65, v82, &qword_100155340);
  uint64_t v67 = v66 + *(int *)(v84 + 44);
  *(void *)uint64_t v67 = v63;
  *(unsigned char *)(v67 + 8) = v47;
  sub_100032F44(v64, &qword_100155340);
  uint64_t v68 = v81;
  sub_100033344(v66, v81, &qword_100155330);
  *(unsigned char *)(v68 + *(int *)(v83 + 44)) = 0;
  sub_100032F44(v66, &qword_100155330);
  return sub_10002D9D0(v68, v87, &qword_100155318);
}

uint64_t sub_100062B38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v48 = sub_100032FA0(&qword_1001553D8);
  __chkstk_darwin(v48);
  uint64_t v4 = (uint64_t *)((char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = type metadata accessor for Image.Scale();
  uint64_t v5 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  unint64_t v49 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100032FA0(&qword_1001553E0);
  __chkstk_darwin(v44);
  uint64_t v8 = (uint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v51 = sub_100032FA0(&qword_1001553E8);
  __chkstk_darwin(v51);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100032FA0(&qword_1001553F0);
  __chkstk_darwin(v11 - 8);
  NSString v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v52 = (uint64_t)&v43 - v15;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v54 = v16;
  uint64_t v55 = v17;
  sub_100023B24();
  swift_bridgeObjectRetain();
  uint64_t v18 = Text.init<A>(_:)();
  uint64_t v20 = v19;
  char v22 = v21;
  if (qword_100154640 != -1) {
    swift_once();
  }
  char v23 = v22 & 1;
  uint64_t v24 = Text.foregroundColor(_:)();
  uint64_t v45 = v25;
  uint64_t v46 = v24;
  char v27 = v26;
  uint64_t v47 = v28;
  sub_1000356E0(v18, v20, v23);
  swift_bridgeObjectRelease();
  if (qword_100154430 != -1) {
    swift_once();
  }
  char v29 = v27 & 1;
  uint64_t v30 = qword_100160F48;
  uint64_t v32 = v49;
  uint64_t v31 = v50;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v49, enum case for Image.Scale.small(_:), v50);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v4 + *(int *)(v48 + 28), v32, v31);
  *uint64_t v4 = KeyPath;
  sub_100033344((uint64_t)v4, (uint64_t)v8 + *(int *)(v44 + 36), &qword_1001553D8);
  *uint64_t v8 = v30;
  swift_retain_n();
  sub_100032F44((uint64_t)v4, &qword_1001553D8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v32, v31);
  swift_release();
  uint64_t v34 = qword_100161248;
  uint64_t v35 = swift_getKeyPath();
  sub_100033344((uint64_t)v8, (uint64_t)v10, &qword_1001553E0);
  uint64_t v36 = (uint64_t *)&v10[*(int *)(v51 + 36)];
  *uint64_t v36 = v35;
  v36[1] = v34;
  swift_retain();
  sub_100032F44((uint64_t)v8, &qword_1001553E0);
  sub_100063674();
  View.accessibilityHidden(_:)();
  sub_100032F44((uint64_t)v10, &qword_1001553E8);
  uint64_t v37 = v52;
  sub_10002D9D0((uint64_t)v13, v52, &qword_1001553F0);
  sub_100033344(v37, (uint64_t)v13, &qword_1001553F0);
  uint64_t v38 = v53;
  uint64_t v40 = v45;
  uint64_t v39 = v46;
  *uint64_t v53 = v46;
  v38[1] = v40;
  *((unsigned char *)v38 + 16) = v29;
  v38[3] = v47;
  uint64_t v41 = sub_100032FA0(&qword_100155420);
  sub_100033344((uint64_t)v13, (uint64_t)v38 + *(int *)(v41 + 48), &qword_1001553F0);
  sub_1000637B4(v39, v40, v29);
  swift_bridgeObjectRetain();
  sub_100032F44(v37, &qword_1001553F0);
  sub_100032F44((uint64_t)v13, &qword_1001553F0);
  sub_1000356E0(v39, v40, v29);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100063038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100032FA0(&qword_100154898);
  State.projectedValue.getter();
  return sub_1000C3D20(v5, v6, v7, *(unsigned char *)(a1 + 56), a2);
}

uint64_t sub_1000630A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100061C4C(a1);
}

uint64_t sub_1000630F8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100063148@<X0>(uint64_t a1@<X8>)
{
  return sub_1000621A0(*(void *)(v1 + 16), a1);
}

uint64_t sub_100063150(uint64_t a1)
{
  return a1;
}

unint64_t sub_100063218()
{
  unint64_t result = qword_100155320;
  if (!qword_100155320)
  {
    sub_1000317D8(&qword_100155318);
    sub_1000632B8();
    sub_100040BE4(&qword_100155380, &qword_100155388);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155320);
  }
  return result;
}

unint64_t sub_1000632B8()
{
  unint64_t result = qword_100155328;
  if (!qword_100155328)
  {
    sub_1000317D8(&qword_100155330);
    sub_100063358();
    sub_100040BE4(&qword_100155370, &qword_100155378);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155328);
  }
  return result;
}

unint64_t sub_100063358()
{
  unint64_t result = qword_100155338;
  if (!qword_100155338)
  {
    sub_1000317D8(&qword_100155340);
    sub_1000317D8(&qword_100155348);
    sub_100063438();
    swift_getOpaqueTypeConformance2();
    sub_100063514(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155338);
  }
  return result;
}

unint64_t sub_100063438()
{
  unint64_t result = qword_100155350;
  if (!qword_100155350)
  {
    sub_1000317D8(&qword_100155348);
    sub_100040BE4(&qword_100155358, &qword_100155360);
    sub_100063514(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155350);
  }
  return result;
}

uint64_t sub_10006350C@<X0>(uint64_t a1@<X8>)
{
  return sub_100063038(v1 + 16, a1);
}

uint64_t sub_100063514(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006357C()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000635A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Image.Scale();
  double v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.imageScale.setter();
}

unint64_t sub_100063674()
{
  unint64_t result = qword_1001553F8;
  if (!qword_1001553F8)
  {
    sub_1000317D8(&qword_1001553E8);
    sub_100063714();
    sub_100040BE4(&qword_100155410, &qword_100155418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001553F8);
  }
  return result;
}

unint64_t sub_100063714()
{
  unint64_t result = qword_100155400;
  if (!qword_100155400)
  {
    sub_1000317D8(&qword_1001553E0);
    sub_100040BE4(&qword_100155408, &qword_1001553D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155400);
  }
  return result;
}

uint64_t sub_1000637B4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000637C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100063918()
{
  uint64_t result = Image.init(_:bundle:)();
  qword_100160F10 = result;
  return result;
}

uint64_t sub_10006395C()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F18 = result;
  return result;
}

uint64_t sub_100063990()
{
  uint64_t result = Image.init(_:bundle:)();
  qword_100160F20 = result;
  return result;
}

uint64_t sub_1000639CC()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F28 = result;
  return result;
}

uint64_t sub_1000639FC()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F30 = result;
  return result;
}

uint64_t sub_100063A28()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F38 = result;
  return result;
}

uint64_t sub_100063A60()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F40 = result;
  return result;
}

uint64_t sub_100063A9C()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F48 = result;
  return result;
}

uint64_t sub_100063AD4()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F50 = result;
  return result;
}

uint64_t sub_100063B14()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F58 = result;
  return result;
}

uint64_t sub_100063B50()
{
  uint64_t result = Image.init(_internalSystemName:)();
  qword_100160F60 = result;
  return result;
}

uint64_t sub_100063B90()
{
  uint64_t result = Image.init(_:bundle:)();
  qword_100160F68 = result;
  return result;
}

uint64_t sub_100063BD4()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F78 = result;
  return result;
}

uint64_t sub_100063C0C()
{
  uint64_t result = Image.init(_internalSystemName:)();
  qword_100160F80 = result;
  return result;
}

uint64_t sub_100063C44()
{
  uint64_t result = Image.init(systemName:)();
  qword_100160F88 = result;
  return result;
}

uint64_t sub_100063C84(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = type metadata accessor for PPTTestCase();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v20 = a2;
  a3 &= 1u;
  __int16 v21 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  unint64_t v16 = v15 + v14;
  *(void *)unint64_t v16 = a2;
  *(unsigned char *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 9) = 1;
  swift_retain();
  static Animation.default.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v19);
}

uint64_t sub_100063EDC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for PPTTestCase();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v20 = a2;
  a3 &= 1u;
  char v21 = a3;
  char v22 = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  unint64_t v16 = v15 + v14;
  *(void *)unint64_t v16 = a2;
  *(unsigned char *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 9) = 0;
  swift_retain();
  static Animation.default.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v19);
}

uint64_t sub_100064134(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = type metadata accessor for PPTTestCase();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v20 = a2;
  a3 &= 1u;
  __int16 v21 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  unint64_t v16 = v15 + v14;
  *(void *)unint64_t v16 = a2;
  *(unsigned char *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 9) = 2;
  swift_retain();
  static Animation.default.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v19);
}

uint64_t sub_10006438C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for PPTTestCase();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v20 = a2;
  a3 &= 1u;
  char v21 = a3;
  char v22 = 2;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  unint64_t v16 = v15 + v14;
  *(void *)unint64_t v16 = a2;
  *(unsigned char *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 9) = 0;
  swift_retain();
  static Animation.default.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v19);
}

uint64_t sub_1000645E4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for PPTTestCase();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v20 = a2;
  a3 &= 1u;
  char v21 = a3;
  char v22 = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  unint64_t v16 = v15 + v14;
  *(void *)unint64_t v16 = a2;
  *(unsigned char *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 9) = 2;
  swift_retain();
  static Animation.default.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v19);
}

uint64_t sub_100064840(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for PPTTestCase();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v20 = a2;
  a3 &= 1u;
  char v21 = a3;
  char v22 = 2;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  unint64_t v16 = v15 + v14;
  *(void *)unint64_t v16 = a2;
  *(unsigned char *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 9) = 1;
  swift_retain();
  static Animation.default.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v19);
}

uint64_t sub_100064A9C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v23 = a3;
  int v24 = a4;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v4 = type metadata accessor for PPTTestCase();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self mainRunLoop];
  Date.init(timeIntervalSinceNow:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  [v14 runUntilDate:isa];

  uint64_t v16 = v21;
  PPTTestCase.startTest()();
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v27 = v22;
  char v28 = v23 & 1;
  char v29 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v4);
  unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v18 + v17, (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  static Animation.default.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v9, v26);
}

uint64_t sub_100064DBC(uint64_t a1, char a2, uint64_t a3)
{
  char v4 = a2 & 1;
  uint64_t v5 = swift_retain();
  sub_100033AA8(v5, v4);
  swift_release();
  sub_100055FF0(a3);
  return swift_release();
}

uint64_t sub_100064E20()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100064E3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v2 = type metadata accessor for CalculatorHistoryScrollPPTTests();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = type metadata accessor for PPTTestCase.Name();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100032FA0(&qword_100155528);
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  uint64_t v33 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001544D0 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_100021598(v5, (uint64_t)qword_100161088);
  char v29 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v29(v8, v11, v5);
  sub_10006699C(v1, (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v27 = v12 | 7;
  uint64_t v28 = v13 + v4;
  uint64_t v14 = swift_allocObject();
  sub_100066A04((uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  uint64_t v15 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100032FA0(&qword_100155530);
  uint64_t v25 = v1;
  uint64_t v17 = v16;
  uint64_t v18 = sub_100040BE4(&qword_100155538, &qword_100155530);
  View.onTest(_:handler:)();
  swift_release();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v6 + 8);
  v26(v8, v5);
  if (qword_1001544D8 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_100021598(v5, (uint64_t)qword_1001610A0);
  v29(v8, v19, v5);
  sub_10006699C(v25, (uint64_t)v15);
  uint64_t v20 = swift_allocObject();
  sub_100066A04((uint64_t)v15, v20 + v13);
  uint64_t v34 = v17;
  uint64_t v35 = v18;
  swift_getOpaqueTypeConformance2();
  uint64_t v21 = v31;
  uint64_t v22 = v33;
  View.onTest(_:handler:)();
  swift_release();
  v26(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v22, v21);
}

uint64_t sub_100065240(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  unint64_t v49 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  uint64_t v48 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CalculatorHistoryScrollPPTTests();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v38 = *(void *)(v40 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v37 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for ScrollViewProxy();
  uint64_t v7 = *(void *)(v36 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for PPTTestCase();
  uint64_t v9 = *(void *)(v34 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v45 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v41 = (char *)&v33 - v16;
  sub_100004A98();
  uint64_t v42 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v39 = v12 + 8;
  uint64_t v46 = v17;
  v17(v14, v11);
  uint64_t v18 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v43, v34);
  uint64_t v19 = v35;
  uint64_t v20 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v35, v44, v36);
  uint64_t v21 = v37;
  sub_10006699C(v47, v37);
  unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v23 = (v10 + *(unsigned __int8 *)(v7 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v24 = (v8 + *(unsigned __int8 *)(v40 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v25 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v25 + v22, v33, v18);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v25 + v23, v19, v20);
  sub_100066A04(v21, v25 + v24);
  aBlock[4] = sub_100066DC0;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E0DB8;
  void aBlock[3] = &unk_10014AC98;
  uint64_t v26 = _Block_copy(aBlock);
  swift_release();
  uint64_t v27 = v48;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10000DA18(&qword_100155540, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100032FA0(&qword_100155548);
  sub_100040BE4(&qword_100155550, &qword_100155548);
  uint64_t v28 = v49;
  uint64_t v29 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v31 = v41;
  uint64_t v30 = (void *)v42;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v52);
  return v46(v31, v45);
}

uint64_t sub_100065890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CalculatorHistoryScrollPPTTests();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PPTTestCase();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  double v12 = __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  sub_10006699C(a3, (uint64_t)v8);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (v11 + *(unsigned __int8 *)(v6 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v13, (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_100066A04((uint64_t)v8, v15 + v14);
  PPTTestCase.performScrollTest(_:onComplete:)();
  return swift_release();
}

uint64_t sub_100065A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PPTTestCase.finishTest()();
  char v4 = *(unsigned char *)(a3 + 24);
  uint64_t v5 = swift_retain();
  sub_10003B8B4(v5, v4);
  swift_release();
  if (qword_100154790 != -1) {
    swift_once();
  }
  sub_100006C54();
  sub_1000943FC(0);
  swift_release();
  char v6 = *(unsigned char *)(a3 + 8);
  uint64_t v7 = swift_retain();
  uint64_t v8 = sub_1000D18F8(v7, v6);
  swift_release();
  sub_100047F34();
  swift_getKeyPath();
  sub_10000DA18(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(void *)(v8 + 24) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  sub_10004D0B4();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return swift_release();
}

uint64_t assignWithCopy for CalculatorModeSwitchPPTTests(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CalculatorModeSwitchPPTTests(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for CalculatorModeSwitchPPTTests(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorModeSwitchPPTTests(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorModeSwitchPPTTests(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100065D80()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100065DB8(uint64_t a1)
{
  return sub_100063C84(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100065DC4(uint64_t a1)
{
  return sub_100063EDC(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100065DD0(uint64_t a1)
{
  return sub_100064134(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100065DDC(uint64_t a1)
{
  return sub_10006438C(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100065DE8(uint64_t a1)
{
  return sub_1000645E4(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100065DF4(uint64_t a1)
{
  return sub_100064840(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100065E00()
{
  return sub_100064DBC(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(unsigned __int8 *)(v0 + 25));
}

uint64_t sub_100065E2C()
{
  uint64_t v1 = type metadata accessor for PPTTestCase();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

void sub_100065EBC()
{
}

uint64_t sub_100065F18(uint64_t a1)
{
  return sub_100021538(a1, qword_100161088);
}

uint64_t sub_100065F3C(uint64_t a1)
{
  return sub_100021538(a1, qword_1001610A0);
}

uint64_t sub_100065F74()
{
  uint64_t v1 = type metadata accessor for PPTTestCase();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100066018()
{
  uint64_t v1 = *(void *)(type metadata accessor for PPTTestCase() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + v2;
  uint64_t v4 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *(void *)v4;
  int v6 = *(unsigned __int8 *)(v4 + 8);
  int v7 = *(unsigned __int8 *)(v4 + 9);

  return sub_100064A9C(v3, v5, v6, v7);
}

uint64_t sub_1000660B0()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_1000662EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    char v5 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = v5;
    char v6 = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for ScrollViewProxy();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_1000663F4(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for ScrollViewProxy();
  char v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100066474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for ScrollViewProxy();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v10(v7, v8, v9);
  return a1;
}

uint64_t sub_10006652C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  char v7 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ScrollViewProxy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000665E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for ScrollViewProxy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10006667C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_release();
  char v7 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v7;
  swift_release();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ScrollViewProxy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100066728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006673C);
}

uint64_t sub_10006673C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for ScrollViewProxy();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000667E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000667F8);
}

uint64_t sub_1000667F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for ScrollViewProxy();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CalculatorHistoryScrollPPTTests()
{
  uint64_t result = qword_1001554E8;
  if (!qword_1001554E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000668E8()
{
  uint64_t result = type metadata accessor for ScrollViewProxy();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100066980()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006699C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculatorHistoryScrollPPTTests();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculatorHistoryScrollPPTTests();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066A70()
{
  unint64_t v1 = (int *)(type metadata accessor for CalculatorHistoryScrollPPTTests() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[8];
  uint64_t v4 = type metadata accessor for ScrollViewProxy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocObject();
}

uint64_t sub_100066B6C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CalculatorHistoryScrollPPTTests();
  return sub_100065240(a1, v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80))+ *(int *)(v3 + 24));
}

uint64_t sub_100066BD8()
{
  uint64_t v13 = type metadata accessor for PPTTestCase();
  uint64_t v1 = *(void *)(v13 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for ScrollViewProxy();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = (int *)(type metadata accessor for CalculatorHistoryScrollPPTTests() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(*(void *)v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v0 + v2, v13);
  uint64_t v10 = v0 + v6;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v10, v4);
  swift_release();
  swift_release();
  v11(v0 + v9 + v8[8], v4);

  return swift_deallocObject();
}

uint64_t sub_100066DC0()
{
  uint64_t v1 = *(void *)(type metadata accessor for PPTTestCase() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for ScrollViewProxy() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for CalculatorHistoryScrollPPTTests() - 8);
  uint64_t v8 = v0 + ((v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_100065890(v0 + v2, v0 + v5, v8);
}

uint64_t sub_100066EE8()
{
  return swift_release();
}

uint64_t sub_100066EF0()
{
  uint64_t v1 = type metadata accessor for PPTTestCase();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  unint64_t v5 = (int *)(type metadata accessor for CalculatorHistoryScrollPPTTests() - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(*(void *)v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v6 + v5[8];
  uint64_t v8 = type metadata accessor for ScrollViewProxy();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return swift_deallocObject();
}

uint64_t sub_100067070(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for PPTTestCase() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for CalculatorHistoryScrollPPTTests() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_100065A78(a1, v1 + v4, v7);
}

uint64_t sub_10006714C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000671FC()
{
  return sub_100065E00();
}

uint64_t sub_10006722C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v43 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v42 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v45 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v46 = (char *)&v37 - v9;
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  char v14 = Calendar.isDateInToday(_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v11 + 8);
  v15(v13, v10);
  uint64_t v16 = 0;
  if ((v14 & 1) == 0)
  {
    static Calendar.current.getter();
    char v17 = Calendar.isDateInYesterday(_:)();
    v15(v13, v10);
    if (v17)
    {
      return 0;
    }
    else
    {
      uint64_t v40 = v2;
      static Date.now.getter();
      static Calendar.current.getter();
      Calendar.startOfDay(for:)();
      uint64_t v39 = v15;
      v15(v13, v10);
      uint64_t v18 = v44;
      uint64_t v19 = v45 + 8;
      uint64_t v20 = *(void (**)(char *, uint64_t))(v45 + 8);
      v20(v7, v44);
      Date.addingTimeInterval(_:)();
      uint64_t v41 = v1;
      uint64_t v21 = v19;
      uint64_t v22 = Date.compare(_:)();
      v20(v7, v18);
      if (v22 == 1 || (v45 = v21, Date.addingTimeInterval(_:)(), uint64_t v23 = Date.compare(_:)(), v20(v7, v18), v23 == 1))
      {
        v20(v46, v18);
        return 0;
      }
      else
      {
        uint64_t v38 = v20;
        uint64_t v25 = v42;
        uint64_t v24 = v43;
        uint64_t v26 = v40;
        (*(void (**)(char *, void, uint64_t))(v43 + 104))(v42, enum case for Calendar.Component.year(_:), v40);
        static Calendar.current.getter();
        char v27 = Calendar.isDate(_:equalTo:toGranularity:)();
        uint64_t v28 = v39;
        v39(v13, v10);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
        if (v27)
        {
          uint64_t v29 = v38;
          uint64_t v30 = v44;
          if (qword_100154768 != -1) {
            swift_once();
          }
          uint64_t v31 = (void *)qword_100161378;
          static Calendar.current.getter();
          Calendar.startOfDay(for:)();
          v28(v13, v10);
          v32.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
          v29(v7, v30);
          id v33 = [v31 stringFromDate:v32.super.isa];
        }
        else
        {
          uint64_t v29 = v38;
          uint64_t v30 = v44;
          if (qword_100154770 != -1) {
            swift_once();
          }
          uint64_t v34 = (void *)qword_100161380;
          static Calendar.current.getter();
          Calendar.startOfDay(for:)();
          v28(v13, v10);
          v32.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
          v29(v7, v30);
          id v33 = [v34 stringFromDate:v32.super.isa];
        }
        id v35 = v33;

        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v29(v46, v30);
      }
    }
  }
  return v16;
}

BOOL sub_1000677CC()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v0 - 8);
  uint64_t v21 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Calendar();
  uint64_t v3 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DateComponents();
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  sub_100032FA0(&qword_100155558);
  uint64_t v9 = type metadata accessor for Calendar.Component();
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10010DCB0;
  (*(void (**)(unint64_t, void, uint64_t))(v10 + 104))(v12 + v11, enum case for Calendar.Component.hour(_:), v9);
  sub_100067E5C(v12);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  static Date.now.getter();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v2, v21);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v19);
  uint64_t v13 = DateComponents.hour.getter();
  char v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  return (v15 & 1) == 0 && v13 < 24;
}

uint64_t sub_100067AF0()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000677CC())
  {
    if (qword_100154780 != -1) {
      swift_once();
    }
    uint64_t v4 = (void *)qword_100161390;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    static Date.now.getter();
    v6.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    id v7 = [v4 localizedStringForDate:isa relativeToDate:v6.super.isa];
  }
  else
  {
    if (qword_100154778 != -1) {
      swift_once();
    }
    uint64_t v8 = (void *)qword_100161388;
    v6.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v7 = [v8 stringFromDate:v6.super.isa];
  }

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v9;
}

Swift::Int sub_100067CB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100032FA0(&qword_100155580);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      NSDate v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void *sub_100067E5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100032FA0(&qword_100155560);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    id v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10006848C(&qword_100155568, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10006848C(&qword_100155570, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        Swift::Int result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_100068174(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PresentationDetent();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100032FA0(&qword_100155588);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    id v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10006848C(&qword_100155590, (void (*)(uint64_t))&type metadata accessor for PresentationDetent);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10006848C(&qword_100155598, (void (*)(uint64_t))&type metadata accessor for PresentationDetent);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        Swift::Int result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10006848C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t assignWithCopy for CalculatorAppAlertView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for CalculatorAppAlertView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorAppAlertView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorAppAlertView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1000686B0(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v2 - 8);
  uint64_t v33 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v34 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100032FA0(&qword_1001550C0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  char v17 = *(unsigned char *)(a1 + 40);
  uint64_t v38 = v15;
  uint64_t v39 = v16;
  char v40 = v17;
  sub_100032FA0(&qword_1001555B0);
  Binding.wrappedValue.getter();
  if (v41 == 1)
  {
    if (qword_1001543E8 != -1) {
      swift_once();
    }
    unint64_t v18 = qword_100160EE0;
  }
  else
  {
    if (qword_1001543F0 != -1) {
      swift_once();
    }
    unint64_t v18 = qword_100160EF8;
  }
  uint64_t v19 = sub_100021598(v6, (uint64_t)v18);
  sub_100033344(v19, (uint64_t)v14, &qword_1001550C0);
  sub_100033344((uint64_t)v14, (uint64_t)v11, &qword_1001550C0);
  uint64_t v21 = v35;
  uint64_t v20 = v36;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v11, 1, v36) == 1)
  {
    sub_100032F44((uint64_t)v11, &qword_1001550C0);
    uint64_t v38 = v15;
    uint64_t v39 = v16;
    char v40 = v17;
    LOBYTE(v41) = 0;
    Binding.wrappedValue.setter();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v34, v11, v20);
    if (qword_100154718 != -1) {
      swift_once();
    }
    uint64_t v22 = qword_100161330;
    swift_getKeyPath();
    uint64_t v38 = v22;
    sub_100068ED4();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if ((*(unsigned char *)(v22 + 16) & 1) != 0
      || (v38 = v15, uint64_t v39 = v16, v40 = v17, Binding.wrappedValue.getter(), v41 == 2))
    {
      uint64_t v38 = v15;
      uint64_t v39 = v16;
      char v40 = v17;
      LOBYTE(v41) = 0;
      Binding.wrappedValue.setter();
      uint64_t v24 = v34;
      uint64_t v23 = v35;
      uint64_t v25 = v36;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v8, v34, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v25);
      sub_100081AA8((uint64_t)v8);
      sub_100032F44((uint64_t)v8, &qword_1001550C0);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
    }
    else
    {
      uint64_t v38 = v15;
      uint64_t v39 = v16;
      char v40 = v17;
      Binding.wrappedValue.getter();
      if (v41 == 1)
      {
        uint64_t v41 = v15;
        uint64_t v38 = v15;
        uint64_t v39 = v16;
        char v40 = v17;
        char v37 = 3;
        Binding.wrappedValue.setter();
        uint64_t v26 = type metadata accessor for TaskPriority();
        uint64_t v27 = (uint64_t)v33;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v33, 1, 1, v26);
        uint64_t v38 = *(void *)a1;
        type metadata accessor for MainActor();
        sub_100025ED0((uint64_t)&v38);
        swift_retain();
        sub_100025ED0((uint64_t)&v41);
        swift_retain();
        uint64_t v28 = static MainActor.shared.getter();
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = v28;
        *(void *)(v29 + 24) = &protocol witness table for MainActor;
        long long v30 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(v29 + 32) = *(_OWORD *)a1;
        *(_OWORD *)(v29 + 48) = v30;
        *(_OWORD *)(v29 + 57) = *(_OWORD *)(a1 + 25);
        sub_100013710(v27, (uint64_t)&unk_100155608, v29);
        swift_release();
      }
      else
      {
        uint64_t v38 = v15;
        uint64_t v39 = v16;
        char v40 = v17;
        LOBYTE(v41) = 0;
        Binding.wrappedValue.setter();
      }
      (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
    }
  }
  return sub_100032F44((uint64_t)v14, &qword_1001550C0);
}

uint64_t sub_100068C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 4sub_100102B8C(2, 18, 1, 0) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 48) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100068CD0, v6, v5);
}

uint64_t sub_100068CD0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  long long v2 = *(_OWORD *)(v1 + 24);
  *(unsigned char *)(v0 + 32) = *(unsigned char *)(v1 + 40);
  *(_OWORD *)(v0 + 16) = v2;
  sub_100032FA0(&qword_1001555B0);
  Binding.wrappedValue.getter();
  if (*(unsigned char *)(v0 + 33))
  {
    uint64_t v3 = *(void *)(v0 + 40);
    char v4 = *(unsigned char *)(v3 + 16);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)v3;
    *(unsigned char *)(v0 + 32) = v4;
    *(unsigned char *)(v0 + 33) = 1;
    sub_100032FA0(&qword_1001555B8);
    Binding.wrappedValue.setter();
  }
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100068DA0@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100068E5C()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_100068EB4()
{
  return sub_1000686B0(v0 + 16);
}

uint64_t sub_100068EBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100068DA0(a1);
}

unint64_t sub_100068ED4()
{
  unint64_t result = qword_100154FD8;
  if (!qword_100154FD8)
  {
    type metadata accessor for CalculatorNetworkManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100154FD8);
  }
  return result;
}

uint64_t sub_100068F2C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100068F84(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10004BC10;
  return sub_100068C38(a1, v4, v5, v1 + 32);
}

uint64_t sub_100069038()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_100069150(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)v4 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *((unsigned char *)v4 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)v4 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v10 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    uint64_t v11 = (void *)((char *)v4 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = a3[11];
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)v16;
    LOBYTE(v16) = v16[8];
    *(void *)uint64_t v15 = v17;
    v15[8] = (char)v16;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100069280(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100069310(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = a3[11];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  LOBYTE(v15) = *((unsigned char *)v15 + 8);
  *(void *)uint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = (_BYTE)v15;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000693F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = a3[11];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  LOBYTE(v13) = *((unsigned char *)v13 + 8);
  *(void *)uint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = (_BYTE)v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100069500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)uint64_t v11 = *(void *)v12;
  return a1;
}

uint64_t sub_1000695C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  uint64_t v7 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  swift_release();
  uint64_t v9 = a3[11];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v12 = *v11;
  LOBYTE(v11) = *((unsigned char *)v11 + 8);
  *(void *)uint64_t v10 = v12;
  *(unsigned char *)(v10 + 8) = (_BYTE)v11;
  swift_release();
  return a1;
}

uint64_t sub_1000696B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000696C4);
}

uint64_t sub_1000696C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1sub_100102B8C(2, 18, 1, 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100069784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069798);
}

uint64_t sub_100069798(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ModeMenuOption()
{
  uint64_t result = qword_100155668;
  if (!qword_100155668) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000698A0()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100069960()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006997C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v70 = a1;
  uint64_t v3 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v69 = v3;
  __chkstk_darwin(v3);
  uint64_t v67 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessibilityTraits();
  uint64_t v65 = *(void *)(v5 - 8);
  uint64_t v66 = v5;
  __chkstk_darwin(v5);
  uint64_t v64 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v63 = (char *)&v50 - v8;
  uint64_t v9 = (int *)type metadata accessor for ModeMenuOption();
  uint64_t v52 = *((void *)v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v53 = v10;
  uint64_t v54 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100032FA0(&qword_1001556B8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100032FA0(&qword_1001556C0);
  __chkstk_darwin(v50);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100032FA0(&qword_1001556C8);
  __chkstk_darwin(v51);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100032FA0(&qword_1001556D0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100032FA0(&qword_1001556D8);
  uint64_t v57 = *(void *)(v21 - 8);
  uint64_t v58 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100032FA0(&qword_1001556E0);
  __chkstk_darwin(v62);
  uint64_t v55 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v60 = (char *)&v50 - v26;
  uint64_t v61 = sub_100032FA0(&qword_1001556E8);
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v56 = (char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v28 = *(unsigned char *)(v1 + v9[11] + 8);
  uint64_t v29 = swift_retain();
  sub_10002BD88(v29, v28);
  swift_release();
  if (!sub_10002AFEC())
  {
    if (qword_1001541D0 == -1) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
  if (qword_1001543B8 != -1) {
LABEL_17:
  }
    swift_once();
LABEL_5:
  swift_release();
  sub_10006A3A0(v2, (uint64_t)v13);
  if (*(unsigned char *)(v2 + v9[7]) != 1)
  {
    int v30 = static HierarchicalShapeStyle.tertiary.getter();
LABEL_12:
    LODWORD(v71) = v30;
    goto LABEL_13;
  }
  if ((*(unsigned char *)(v2 + v9[6]) & 1) == 0)
  {
    int v30 = static HierarchicalShapeStyle.primary.getter();
    goto LABEL_12;
  }
  if (qword_100154538 != -1) {
    swift_once();
  }
  uint64_t v71 = (void *)qword_100161140;
  swift_retain();
LABEL_13:
  uint64_t v31 = AnyShapeStyle.init<A>(_:)();
  sub_100033344((uint64_t)v13, (uint64_t)v15, &qword_1001556B8);
  *(void *)&v15[*(int *)(v50 + 36)] = v31;
  sub_100032F44((uint64_t)v13, &qword_1001556B8);
  uint64_t KeyPath = swift_getKeyPath();
  sub_100033344((uint64_t)v15, (uint64_t)v17, &qword_1001556C0);
  uint64_t v33 = (uint64_t *)&v17[*(int *)(v51 + 36)];
  *uint64_t v33 = KeyPath;
  v33[1] = 0x3FEB333333333333;
  sub_100032F44((uint64_t)v15, &qword_1001556C0);
  sub_100033344((uint64_t)v17, (uint64_t)v20, &qword_1001556C8);
  v20[*(int *)(v18 + 36)] = 0;
  sub_100032F44((uint64_t)v17, &qword_1001556C8);
  uint64_t v34 = v54;
  sub_10006B4E0(v2, v54);
  unint64_t v35 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v36 = swift_allocObject();
  sub_10006B650(v34, v36 + v35);
  unint64_t v37 = sub_10006B714();
  View.onTapGesture(count:perform:)();
  swift_release();
  sub_100032F44((uint64_t)v20, &qword_1001556D0);
  if (*(unsigned char *)(v2 + v9[6]) == 1)
  {
    sub_100032FA0(&qword_100155760);
    uint64_t v38 = v65;
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_10010DCB0;
    static AccessibilityTraits.isSelected.getter();
    uint64_t v71 = (void *)v39;
    sub_10006BCAC(&qword_100155740, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
    sub_100032FA0(&qword_100155748);
    sub_100040BE4(&qword_100155750, &qword_100155748);
    char v40 = v63;
    uint64_t v41 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)();
  }
  else
  {
    uint64_t v71 = _swiftEmptyArrayStorage;
    sub_10006BCAC(&qword_100155740, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
    sub_100032FA0(&qword_100155748);
    sub_100040BE4(&qword_100155750, &qword_100155748);
    char v40 = v63;
    uint64_t v41 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v38 = v65;
  }
  uint64_t v71 = (void *)v18;
  unint64_t v72 = v37;
  swift_getOpaqueTypeConformance2();
  uint64_t v42 = (uint64_t)v55;
  uint64_t v43 = v58;
  View.accessibilityAddTraits(_:)();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v38 + 8);
  v44(v40, v41);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v23, v43);
  uint64_t v45 = v64;
  static AccessibilityTraits.isButton.getter();
  uint64_t v46 = (uint64_t)v60;
  ModifiedContent<>.accessibilityAddTraits(_:)();
  v44(v45, v41);
  sub_100032F44(v42, &qword_1001556E0);
  uint64_t v47 = v67;
  static AccessibilityChildBehavior.combine.getter();
  sub_10006B98C();
  uint64_t v48 = v56;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v47, v69);
  sub_100032F44(v46, &qword_1001556E0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v59 + 32))(v70, v48, v61);
}

uint64_t sub_10006A3A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100032FA0(&qword_100155768);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100032FA0(&qword_100155770);
  __chkstk_darwin(v50);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100032FA0(&qword_100155778);
  __chkstk_darwin(v52);
  uint64_t v55 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v49 = (uint64_t)&v48 - v11;
  __chkstk_darwin(v12);
  uint64_t v54 = (uint64_t)&v48 - v13;
  uint64_t v14 = sub_100032FA0(&qword_100155780);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v48 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = type metadata accessor for ModeMenuOption();
  uint64_t v24 = *(void *)(a1 + *(int *)(v23 + 20));
  uint64_t v25 = *(int *)(v23 + 44);
  uint64_t v48 = a1;
  uint64_t v26 = a1 + v25;
  LOBYTE(a1) = *(unsigned char *)(a1 + v25 + 8);
  swift_retain();
  uint64_t v27 = swift_retain();
  sub_10002BD88(v27, a1);
  swift_release();
  BOOL v28 = sub_10002AFEC();
  uint64_t v56 = a2;
  uint64_t v53 = v16;
  uint64_t v51 = v22;
  if (v28)
  {
    if (qword_100154710 != -1) {
      swift_once();
    }
    uint64_t v29 = &qword_100161328;
  }
  else
  {
    if (qword_100154700 != -1) {
      swift_once();
    }
    uint64_t v29 = &qword_100161318;
  }
  uint64_t v30 = *v29;
  swift_retain();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = static HorizontalAlignment.center.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)&long long v62 = v24;
  *((void *)&v62 + 1) = KeyPath;
  *(void *)&long long v63 = v30;
  *((void *)&v63 + 1) = v32;
  *(void *)&long long v64 = v57;
  BYTE8(v64) = v58;
  *(void *)&long long v65 = v59;
  BYTE8(v65) = v60;
  long long v66 = v61;
  sub_100032FA0(&qword_100155788);
  sub_10006BAB8();
  View.accessibilityHidden(_:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v33 = (uint64_t)v51;
  sub_10002D9D0((uint64_t)v19, (uint64_t)v51, &qword_100155780);
  *(void *)uint64_t v6 = static VerticalAlignment.center.getter();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v34 = sub_100032FA0(&qword_1001557D0);
  sub_10006A9F0(v48, (uint64_t)&v6[*(int *)(v34 + 44)]);
  char v35 = *(unsigned char *)(v26 + 8);
  uint64_t v36 = swift_retain();
  sub_10002BD88(v36, v35);
  swift_release();
  sub_1000D647C();
  swift_release();
  static Alignment.leading.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_100033344((uint64_t)v6, (uint64_t)v8, &qword_100155768);
  unint64_t v37 = &v8[*(int *)(v50 + 36)];
  long long v38 = v67;
  *((_OWORD *)v37 + 4) = v66;
  *((_OWORD *)v37 + 5) = v38;
  *((_OWORD *)v37 + 6) = v68;
  long long v39 = v63;
  *(_OWORD *)unint64_t v37 = v62;
  *((_OWORD *)v37 + 1) = v39;
  long long v40 = v65;
  *((_OWORD *)v37 + 2) = v64;
  *((_OWORD *)v37 + 3) = v40;
  sub_100032F44((uint64_t)v6, &qword_100155768);
  uint64_t v41 = v49;
  sub_100033344((uint64_t)v8, v49, &qword_100155770);
  *(_WORD *)(v41 + *(int *)(v52 + 36)) = 1;
  sub_100032F44((uint64_t)v8, &qword_100155770);
  uint64_t v42 = v54;
  sub_10002D9D0(v41, v54, &qword_100155778);
  uint64_t v43 = (uint64_t)v53;
  sub_100033344(v33, (uint64_t)v53, &qword_100155780);
  uint64_t v44 = v55;
  sub_100033344(v42, v55, &qword_100155778);
  uint64_t v45 = v56;
  sub_100033344(v43, v56, &qword_100155780);
  uint64_t v46 = sub_100032FA0(&qword_1001557D8);
  sub_100033344(v44, v45 + *(int *)(v46 + 48), &qword_100155778);
  sub_100032F44(v42, &qword_100155778);
  sub_100032F44(v33, &qword_100155780);
  sub_100032F44(v44, &qword_100155778);
  return sub_100032F44(v43, &qword_100155780);
}

uint64_t sub_10006A9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = sub_100032FA0(&qword_1001557E0);
  __chkstk_darwin(v83);
  uint64_t v84 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100032FA0(&qword_1001557E8);
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  __chkstk_darwin(v5);
  uint64_t v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_100032FA0(&qword_1001557F0);
  __chkstk_darwin(v82);
  uint64_t v75 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v81 = (uint64_t)&v70 - v9;
  uint64_t v74 = type metadata accessor for LayoutDirection();
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  unint64_t v72 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v71 = (char *)&v70 - v12;
  uint64_t v13 = sub_100032FA0(&qword_1001557F8);
  __chkstk_darwin(v13 - 8);
  uint64_t v80 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v79 = (char *)&v70 - v16;
  uint64_t v17 = sub_100032FA0(&qword_100155800);
  __chkstk_darwin(v17 - 8);
  long long v89 = (uint64_t *)((char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v70 - v20;
  uint64_t v21 = type metadata accessor for LocalizedStringResource();
  double v22 = __chkstk_darwin(v21);
  (*(void (**)(char *, uint64_t, double))(v24 + 16))((char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v22);
  uint64_t v25 = Text.init(_:)();
  uint64_t v27 = v26;
  char v29 = v28;
  uint64_t v30 = type metadata accessor for ModeMenuOption();
  char v31 = *(unsigned char *)(a1 + *(int *)(v30 + 44) + 8);
  uint64_t v32 = swift_retain();
  sub_10002BD88(v32, v31);
  swift_release();
  BOOL v33 = sub_10002AFEC();
  uint64_t v90 = a2;
  if (!v33)
  {
    if (qword_1001546F8 == -1) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  if (qword_100154708 != -1) {
LABEL_16:
  }
    swift_once();
LABEL_5:
  swift_retain();
  swift_release();
  char v34 = v29 & 1;
  uint64_t v35 = Text.font(_:)();
  uint64_t v86 = v36;
  uint64_t v87 = v35;
  int v85 = v37;
  uint64_t v39 = v38;
  swift_release();
  sub_1000356E0(v25, v27, v34);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + *(int *)(v30 + 36)) == 1)
  {
    uint64_t v40 = swift_retain();
    uint64_t v41 = sub_10002BD88(v40, v31);
    swift_release();
    swift_getKeyPath();
    uint64_t v93 = v41;
    sub_10006BCAC((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v42 = v41 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
    swift_beginAccess();
    uint64_t v43 = v73;
    uint64_t v44 = v71;
    uint64_t v45 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v71, v42, v74);
    swift_release();
    uint64_t v46 = v72;
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v72, enum case for LayoutDirection.leftToRight(_:), v45);
    LOBYTE(v41) = static LayoutDirection.== infix(_:_:)();
    uint64_t v47 = *(void (**)(char *, uint64_t))(v43 + 8);
    v47(v46, v45);
    v47(v44, v45);
    if (v41)
    {
      uint64_t v48 = (uint64_t)v79;
      if (qword_100154438 != -1) {
        swift_once();
      }
      uint64_t v91 = (void *)qword_100160F50;
      swift_retain();
      static Font.Weight.medium.getter();
      uint64_t v49 = v76;
      View.fontWeight(_:)();
      swift_release();
      uint64_t v91 = &type metadata for Image;
      int v92 = &protocol witness table for Image;
      swift_getOpaqueTypeConformance2();
      uint64_t v50 = v75;
      uint64_t v51 = v78;
      View.accessibilityHidden(_:)();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v49, v51);
      uint64_t v52 = (uint64_t)v50;
      uint64_t v53 = v81;
      sub_10002D9D0(v52, v81, &qword_1001557F0);
      sub_100033344(v53, v84, &qword_1001557F0);
    }
    else
    {
      uint64_t v48 = (uint64_t)v79;
      if (qword_100154440 != -1) {
        swift_once();
      }
      uint64_t v91 = (void *)qword_100160F58;
      swift_retain();
      static Font.Weight.medium.getter();
      char v58 = v76;
      View.fontWeight(_:)();
      swift_release();
      uint64_t v91 = &type metadata for Image;
      int v92 = &protocol witness table for Image;
      swift_getOpaqueTypeConformance2();
      uint64_t v59 = v75;
      uint64_t v60 = v78;
      View.accessibilityHidden(_:)();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v58, v60);
      uint64_t v61 = (uint64_t)v59;
      uint64_t v53 = v81;
      sub_10002D9D0(v61, v81, &qword_1001557F0);
      sub_100033344(v53, v84, &qword_1001557F0);
    }
    swift_storeEnumTagMultiPayload();
    sub_10006BCF4();
    _ConditionalContent<>.init(storage:)();
    uint64_t v55 = (uint64_t)v88;
    sub_100032F44(v53, &qword_1001557F0);
    uint64_t v62 = v80;
    sub_100033344(v48, v80, &qword_1001557F8);
    uint64_t v57 = (uint64_t)v89;
    void *v89 = 0;
    *(unsigned char *)(v57 + 8) = 1;
    uint64_t v63 = sub_100032FA0(&qword_100155820);
    sub_100033344(v62, v57 + *(int *)(v63 + 48), &qword_1001557F8);
    sub_100032F44(v48, &qword_1001557F8);
    sub_100032F44(v62, &qword_1001557F8);
    uint64_t v64 = sub_100032FA0(&qword_100155808);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v57, 0, 1, v64);
    sub_10002D9D0(v57, v55, &qword_100155800);
    uint64_t v56 = v90;
  }
  else
  {
    uint64_t v54 = sub_100032FA0(&qword_100155808);
    uint64_t v55 = (uint64_t)v88;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v88, 1, 1, v54);
    uint64_t v57 = (uint64_t)v89;
    uint64_t v56 = v90;
  }
  char v65 = v85 & 1;
  sub_100033344(v55, v57, &qword_100155800);
  uint64_t v67 = v86;
  uint64_t v66 = v87;
  *(void *)uint64_t v56 = v87;
  *(void *)(v56 + 8) = v67;
  *(unsigned char *)(v56 + 16) = v65;
  *(void *)(v56 + 24) = v39;
  uint64_t v68 = sub_100032FA0(&qword_100155810);
  sub_100033344(v57, v56 + *(int *)(v68 + 48), &qword_100155800);
  sub_1000637B4(v66, v67, v65);
  swift_bridgeObjectRetain();
  sub_100032F44(v55, &qword_100155800);
  sub_100032F44(v57, &qword_100155800);
  sub_1000356E0(v66, v67, v65);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006B468()
{
  return swift_release();
}

uint64_t sub_10006B4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModeMenuOption();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B544()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ModeMenuOption() - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10006B650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModeMenuOption();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B6B4()
{
  type metadata accessor for ModeMenuOption();

  return sub_10006B468();
}

unint64_t sub_10006B714()
{
  unint64_t result = qword_1001556F0;
  if (!qword_1001556F0)
  {
    sub_1000317D8(&qword_1001556D0);
    sub_10006B7B4();
    sub_100040BE4(&qword_100155380, &qword_100155388);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001556F0);
  }
  return result;
}

unint64_t sub_10006B7B4()
{
  unint64_t result = qword_1001556F8;
  if (!qword_1001556F8)
  {
    sub_1000317D8(&qword_1001556C8);
    sub_10006B854();
    sub_100040BE4(&qword_100155730, &qword_100155738);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001556F8);
  }
  return result;
}

unint64_t sub_10006B854()
{
  unint64_t result = qword_100155700;
  if (!qword_100155700)
  {
    sub_1000317D8(&qword_1001556C0);
    sub_10006B8F4();
    sub_100040BE4(&qword_100155720, &qword_100155728);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155700);
  }
  return result;
}

unint64_t sub_10006B8F4()
{
  unint64_t result = qword_100155708;
  if (!qword_100155708)
  {
    sub_1000317D8(&qword_1001556B8);
    sub_100040BE4(&qword_100155710, &qword_100155718);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155708);
  }
  return result;
}

unint64_t sub_10006B98C()
{
  unint64_t result = qword_100155758;
  if (!qword_100155758)
  {
    sub_1000317D8(&qword_1001556E0);
    sub_1000317D8(&qword_1001556D0);
    sub_10006B714();
    swift_getOpaqueTypeConformance2();
    sub_10006BCAC(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155758);
  }
  return result;
}

uint64_t sub_10006BA6C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for ModeMenuOption();
  return (*(uint64_t (**)(void))(v1 + *(int *)(v2 + 40)))();
}

unint64_t sub_10006BAB8()
{
  unint64_t result = qword_100155790;
  if (!qword_100155790)
  {
    sub_1000317D8(&qword_100155788);
    sub_10006BB34();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155790);
  }
  return result;
}

unint64_t sub_10006BB34()
{
  unint64_t result = qword_100155798;
  if (!qword_100155798)
  {
    sub_1000317D8(&qword_1001557A0);
    sub_10006BBB0();
    sub_10006BC50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155798);
  }
  return result;
}

unint64_t sub_10006BBB0()
{
  unint64_t result = qword_1001557A8;
  if (!qword_1001557A8)
  {
    sub_1000317D8(&qword_1001557B0);
    sub_100040BE4((unint64_t *)&qword_1001557B8, &qword_1001557C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001557A8);
  }
  return result;
}

unint64_t sub_10006BC50()
{
  unint64_t result = qword_1001557C8;
  if (!qword_1001557C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001557C8);
  }
  return result;
}

uint64_t sub_10006BCAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006BCF4()
{
  unint64_t result = qword_100155818;
  if (!qword_100155818)
  {
    sub_1000317D8(&qword_1001557F0);
    swift_getOpaqueTypeConformance2();
    sub_10006BCAC(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155818);
  }
  return result;
}

uint64_t sub_10006BDD0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithCopy for SidebarButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SidebarButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarButton(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10006BF84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v4 = a4 & 1;
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100021598(v5, (uint64_t)qword_100161340);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sidebar toggled from the button", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = swift_retain();
  uint64_t v10 = sub_10003B8B4(v9, v4);
  swift_release();
  swift_getKeyPath();
  sub_10000A640(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v11 = *(unsigned char *)(v10 + 16);
  char v12 = v11 ^ 1;
  if (qword_100154790 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1001613A0;
  sub_100006C54();
  if ((v11 & 1) != 0
    || (swift_getKeyPath(),
        sub_10000A640((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings), ObservationRegistrar.access<A, B>(_:keyPath:)(), swift_release(), *(unsigned char *)(v13 + 64) != 1))
  {
    sub_1000943FC(v12);
  }
  else
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v10;
    *(unsigned char *)(v14 + 24) = v12;
    swift_retain();
    sub_1000F8E4C((uint64_t)sub_10006C2D0, v14);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_10006C228()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10006C268()
{
  return sub_10006BF84(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_10006C298()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10006C2D0(uint64_t a1)
{
  sub_1000941C8(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_10006C2F0(uint8_t *a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = swift_retain();
  sub_100033AA8(v4, v3);
  swift_release();
  sub_10005BA7C(a1);

  return swift_release();
}

uint64_t sub_10006C35C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PPTTestCase();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v15 = a2;
  char v16 = 0;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(&v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v12 + v11, &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10006C574(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PPTTestCase();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v15 = a2;
  char v16 = 1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(&v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v12 + v11, &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10006C790(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PPTTestCase();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static AnimationCompletionCriteria.logicallyComplete.getter();
  uint64_t v15 = a2;
  char v16 = 2;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(&v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v12 + v11, &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10006C9AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PPTTestCase();
  double v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v6 + 16))(v5, a1, v3);
  type metadata accessor for AppRotationPPT();
  swift_allocObject();
  sub_10006CAF8((uint64_t)v5);
  sub_10006CF40();
  return swift_release();
}

uint64_t sub_10006CA90(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = swift_retain();
  sub_100033AA8(v4, v3);
  swift_release();
  sub_100055FF0(a2);
  return swift_release();
}

uint64_t sub_10006CAF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_testCase;
  uint64_t v5 = type metadata accessor for PPTTestCase();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  uint64_t v7 = PPTTestCase.parameters.getter();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_100074618((uint64_t)v25), (v9 & 1) != 0))
  {
    sub_10000DBCC(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v26);
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10006DD98((uint64_t)v25);
  if (*((void *)&v27 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v10 = 0x6F69746172657469;
      unint64_t v11 = 0xEA0000000000736ELL;
      goto LABEL_10;
    }
  }
  else
  {
    sub_100012570((uint64_t)&v26);
  }
  unint64_t v11 = 0xE100000000000000;
  uint64_t v10 = 48;
LABEL_10:
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = 0;
    goto LABEL_38;
  }
  v25[0] = v10;
  v25[1] = v11 & 0xFFFFFFFFFFFFFFLL;
  if (v10 != 43)
  {
    if ((v10 - 48) <= 9u)
    {
      uint64_t v13 = (v10 - 48);
      if (v12 == 1) {
        goto LABEL_34;
      }
      if ((BYTE1(v10) - 48) <= 9u)
      {
        uint64_t v13 = 10 * (v10 - 48) + (BYTE1(v10) - 48);
        uint64_t v19 = v12 - 2;
        if (v19)
        {
          uint64_t v20 = (unsigned __int8 *)v25 + 2;
          while (1)
          {
            unsigned int v21 = *v20 - 48;
            if (v21 > 9) {
              goto LABEL_24;
            }
            uint64_t v22 = 10 * v13;
            if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63) {
              goto LABEL_24;
            }
            uint64_t v13 = v22 + v21;
            if (__OFADD__(v22, v21)) {
              goto LABEL_24;
            }
            char v18 = 0;
            ++v20;
            if (!--v19) {
              goto LABEL_35;
            }
          }
        }
        goto LABEL_34;
      }
    }
LABEL_24:
    uint64_t v13 = 0;
    char v18 = 1;
    goto LABEL_35;
  }
  if (v12 == 1 || (BYTE1(v10) - 48) > 9u) {
    goto LABEL_24;
  }
  uint64_t v13 = (BYTE1(v10) - 48);
  if (v12 == 2) {
    goto LABEL_34;
  }
  if ((BYTE2(v10) - 48) > 9u) {
    goto LABEL_24;
  }
  uint64_t v13 = 10 * (BYTE1(v10) - 48) + (BYTE2(v10) - 48);
  uint64_t v14 = v12 - 3;
  if (v14)
  {
    uint64_t v15 = (unsigned __int8 *)v25 + 3;
    while (1)
    {
      unsigned int v16 = *v15 - 48;
      if (v16 > 9) {
        goto LABEL_24;
      }
      uint64_t v17 = 10 * v13;
      if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63) {
        goto LABEL_24;
      }
      uint64_t v13 = v17 + v16;
      if (__OFADD__(v17, v16)) {
        goto LABEL_24;
      }
      char v18 = 0;
      ++v15;
      if (!--v14) {
        goto LABEL_35;
      }
    }
  }
LABEL_34:
  char v18 = 0;
LABEL_35:
  swift_bridgeObjectRelease();
  if (v18) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v13;
  }
LABEL_38:
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  *(void *)(v2 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_iterations) = v23;
  return v2;
}

id sub_10006CF40()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100021598(v5, (uint64_t)qword_100161340);
  swift_retain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v8 = 134217984;
    v16[1] = *(void *)(v0 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_iterations);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Running Rotation Test with %ld iterations", v8, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  char v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Setting Orientation to Portrait", v11, 2u);
    swift_slowDealloc();
  }

  id v12 = [self sharedApplication];
  [v12 rotateIfNeeded:1];

  id v13 = [self mainRunLoop];
  Date.init(timeIntervalSinceNow:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  [v13 runUntilDate:isa];

  PPTTestCase.startTest()();
  return sub_10006D5D4();
}

uint64_t sub_10006D234()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v19 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v13 = (char *)&v17 - v12;
  sub_100004A98();
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  char v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, v7);
  aBlock[4] = sub_10006D9F0;
  uint64_t v24 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E0DB8;
  void aBlock[3] = &unk_10014AED8;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10000DA60(&qword_100155540, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100032FA0(&qword_100155548);
  sub_100040BE4(&qword_100155550, &qword_100155548);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v21);
  return ((uint64_t (*)(char *, uint64_t))v18)(v13, v19);
}

id sub_10006D5D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10Calculator14AppRotationPPT_iterations;
  if (*(void *)(v0 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_iterations))
  {
    id result = [self _applicationKeyWindow];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = result;
    id v5 = [result interfaceOrientation];

    if (v5 == (id)3)
    {
      uint64_t v6 = *(void *)(v1 + v2);
      BOOL v7 = __OFSUB__(v6, 1);
      uint64_t v8 = v6 - 1;
      if (!v7)
      {
        *(void *)(v1 + v2) = v8;
        if (qword_100154750 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_100021598(v9, (uint64_t)qword_100161340);
        os_log_type_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Setting Orientation to portrait", v12, 2u);
          swift_slowDealloc();
        }

        id v13 = [self sharedApplication];
        [v13 rotateIfNeeded:1];
LABEL_15:

        goto LABEL_16;
      }
      __break(1u);
    }
    else if (qword_100154750 == -1)
    {
LABEL_12:
      uint64_t v14 = type metadata accessor for Logger();
      sub_100021598(v14, (uint64_t)qword_100161340);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Setting Orientation to landscapeRight", v17, 2u);
        swift_slowDealloc();
      }

      id v13 = [self sharedApplication];
      [v13 rotateIfNeeded:3];
      goto LABEL_15;
    }
    swift_once();
    goto LABEL_12;
  }
  PPTTestCase.finishTest()();
LABEL_16:

  return (id)sub_10006D234();
}

uint64_t sub_10006D860()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_testCase;
  uint64_t v2 = type metadata accessor for PPTTestCase();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10006D900()
{
  return type metadata accessor for AppRotationPPT();
}

uint64_t type metadata accessor for AppRotationPPT()
{
  uint64_t result = qword_1001558C8;
  if (!qword_1001558C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006D954()
{
  uint64_t result = type metadata accessor for PPTTestCase();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006D9F4()
{
  return swift_release();
}

void *sub_10006D9FC(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t assignWithCopy for CalculatorContainerView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void **)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  sub_10002025C(v6, v7);
  uint64_t v8 = *(void **)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v7;
  sub_10001A83C(v8, v9);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CalculatorContainerView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_release();
  char v6 = *(unsigned char *)(a2 + 40);
  char v7 = *(void **)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v6;
  sub_10001A83C(v7, v8);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorContainerView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorContainerView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8sub_100102B8C(2, 18, 1, 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8sub_100102B8C(2, 18, 1, 0) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

uint64_t sub_10006DCE0@<X0>(uint64_t a1@<X8>)
{
  sub_100037384();
  uint64_t result = EnvironmentValues.subscript.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_10006DD48(uint8_t *a1)
{
  return sub_10006C2F0(a1, v1 + 16);
}

uint64_t sub_10006DD54(uint64_t a1)
{
  return sub_10006C35C(a1, v1 + 16);
}

uint64_t sub_10006DD60(uint64_t a1)
{
  return sub_10006C574(a1, v1 + 16);
}

uint64_t sub_10006DD6C(uint64_t a1)
{
  return sub_10006C790(a1, v1 + 16);
}

uint64_t sub_10006DD78(uint64_t a1)
{
  return sub_10006C9AC(a1);
}

unsigned __int8 *sub_10006DD80(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_10006DED4(a1, a2, a3);
}

uint64_t sub_10006DD98(uint64_t a1)
{
  return a1;
}

unsigned __int8 *sub_10006DDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    char v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10006E150();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    char v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    char v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  os_log_type_t v11 = sub_10006DED4(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_10006DED4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (int64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  char v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10006E150()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_10006E1D0(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10006E1D0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10006E328(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_10000DFF4(v9, 0),
          unint64_t v12 = sub_10006E428((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_10006E328(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_1000D2364(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_1000D2364(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_10006E428(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1000D2364(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1000D2364(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10006E63C()
{
  return sub_10006CA90(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_10006E66C()
{
  uint64_t v1 = type metadata accessor for PPTTestCase();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_10006E6FC()
{
  return PPTTestCase.performResizeTest(onComplete:)();
}

uint64_t sub_10006E760()
{
  return sub_10001A774();
}

uint64_t sub_10006E770()
{
  return sub_10001A774();
}

uint64_t sub_10006E780(uint64_t result)
{
  *(unsigned char *)(result + 169) = 1;
  return result;
}

uint64_t sub_10006E78C()
{
  return sub_1000076A4(&qword_100155A98, &qword_100155AA0, (void (*)(void))sub_10003C580, (void (*)(void))sub_10000772C);
}

uint64_t sub_10006E7D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  swift_release();
  swift_release();
  sub_100032EAC(v2, v3);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_10006E844(uint64_t result)
{
  *(unsigned char *)(result + 168) = 0;
  return result;
}

uint64_t sub_10006E854()
{
  return sub_10006E63C();
}

uint64_t sub_10006E86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10006E9A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Tips.InvalidationReason();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100021598(v6, (uint64_t)qword_100161340);
  sub_10002331C(a1);
  sub_10002331C(a1);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    uint64_t v21 = v9 + 4;
    uint64_t v10 = 0x1000000000000;
    if (!*(unsigned char *)(a1 + 88)) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = 0x10000000000;
    if (!*(unsigned char *)(a1 + 87)) {
      uint64_t v11 = 0;
    }
    BOOL v12 = &_mh_execute_header;
    if (!*(unsigned char *)(a1 + 86)) {
      BOOL v12 = 0;
    }
    uint64_t v13 = 0x1000000;
    if (!*(unsigned char *)(a1 + 85)) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 0x10000;
    if (!*(unsigned char *)(a1 + 84)) {
      uint64_t v14 = 0;
    }
    uint64_t v15 = 256;
    if (!*(unsigned char *)(a1 + 83)) {
      uint64_t v15 = 0;
    }
    char v16 = sub_100031670(v15 | *(unsigned __int8 *)(a1 + 82) | v14 | v13 | (unint64_t)v12 | v11 | v10);
    uint64_t v17 = sub_100023BE4(0, v16);
    uint64_t v22 = sub_10000DAA8(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006F984(a1);
    sub_10006F984(a1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s tapped", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10006F984(a1);
    sub_10006F984(a1);
  }

  static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v23 = Transaction.init(animation:)();
  uint64_t v19 = Transaction.disablesAnimations.setter();
  __chkstk_darwin(v19);
  *(&v21 - 2) = (uint8_t *)a1;
  swift_retain();
  withTransaction<A>(_:_:)();
  swift_release();
  uint64_t v22 = *(void *)(a1 + 160);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Tips.InvalidationReason.actionPerformed(_:), v2);
  sub_1000232C8();
  swift_bridgeObjectRetain();
  Tip.invalidate(reason:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10006ED70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 80);
  int v4 = *(unsigned __int8 *)(a1 + 81);
  sub_100023524(v1, v2, v3, v4);
  sub_1000D1914(v1, v2, v3 | (v4 << 8));
  sub_10002F4E8(v1, v2, v3, v4);
  swift_retain();
  swift_retain();
  sub_100032FA0(&qword_100154830);
  Binding.wrappedValue.getter();
  Binding.wrappedValue.setter();
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_10006EE74@<X0>(unint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v46 = a2;
  uint64_t v52 = a3;
  unint64_t v4 = HIBYTE(a1);
  uint64_t v5 = type metadata accessor for AccessibilityTraits();
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  __chkstk_darwin(v5);
  uint64_t v48 = &v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v49 = &v45[-v8];
  uint64_t v9 = sub_100032FA0(&qword_100155C00);
  __chkstk_darwin(v9);
  uint64_t v11 = &v45[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v14 = &v45[-v13];
  __chkstk_darwin(v15);
  uint64_t v17 = &v45[-v16];
  __chkstk_darwin(v18);
  uint64_t v47 = &v45[-v19];
  uint64_t v53 = 0;
  unint64_t v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  uint64_t v20 = a1 & 0x10101010101FFLL;
  char v21 = sub_100031670(v20);
  uint64_t v22 = sub_100035880(v21);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v53 = v22;
  unint64_t v54 = v24;
  v25._uint64_t countAndFlagsBits = 8250;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  unint64_t v26 = 0xE500000000000000;
  uint64_t v27 = 0x6369736162;
  switch(v4)
  {
    case 1uLL:
      uint64_t v27 = 0x6669746E65696373;
      unint64_t v26 = 0xEA00000000006369;
      break;
    case 2uLL:
      unint64_t v26 = 0xE900000000000072;
      uint64_t v27 = 0x657061506874616DLL;
      break;
    case 3uLL:
      unint64_t v26 = 0xEA00000000007265;
      uint64_t v27 = 0x6D6D6172676F7270;
      break;
    default:
      break;
  }
  unint64_t v28 = v26;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  v29._object = (void *)0x8000000100108910;
  v29._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v29);
  if (v46) {
    uint64_t v30 = 1702195828;
  }
  else {
    uint64_t v30 = 0x65736C6166;
  }
  if (v46) {
    unint64_t v31 = 0xE400000000000000;
  }
  else {
    unint64_t v31 = 0xE500000000000000;
  }
  unint64_t v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  sub_100032FA0(&qword_100155C08);
  sub_100040BE4(&qword_100155C10, &qword_100155C08);
  View.accessibilityIdentifier(_:)();
  swift_bridgeObjectRelease();
  sub_100031670(v20);
  sub_100036080();
  uint64_t v33 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v35 = v34;
  char v37 = v36 & 1;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_1000356E0(v33, v35, v37);
  swift_bridgeObjectRelease();
  sub_100032F44((uint64_t)v11, &qword_100155C00);
  sub_100031670(v20);
  sub_100036928();
  ModifiedContent<>.accessibilityHint(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100032F44((uint64_t)v14, &qword_100155C00);
  if (sub_100031670(v20) == 27)
  {
    uint64_t v38 = v48;
    static AccessibilityTraits.isToggle.getter();
  }
  else
  {
    uint64_t v38 = v48;
    static AccessibilityTraits.isKeyboardKey.getter();
  }
  uint64_t v40 = v49;
  uint64_t v39 = v50;
  uint64_t v41 = v38;
  uint64_t v42 = v51;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v50 + 32))(v49, v41, v51);
  uint64_t v43 = (uint64_t)v47;
  ModifiedContent<>.accessibilityAddTraits(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v40, v42);
  sub_100032F44((uint64_t)v17, &qword_100155C00);
  return sub_10002D9D0(v43, v52, &qword_100155C00);
}

uint64_t sub_10006F354@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = 256;
  if (!v1[1]) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 | *v1;
  uint64_t v4 = 0x10000;
  if (!v1[2]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x1000000;
  if (!v1[3]) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v3 | v4 | v5;
  uint64_t v7 = &_mh_execute_header;
  if (!v1[4]) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0x10000000000;
  if (!v1[5]) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = 0x1000000000000;
  if (!v1[6]) {
    uint64_t v9 = 0;
  }
  return sub_10006EE74(v6 | (unint64_t)v7 | v8 | v9 | ((unint64_t)v1[7] << 56), v1[8], a1);
}

uint64_t sub_10006F3E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10006F410()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_10006F440@<X0>(uint64_t a1@<X8>)
{
  sub_100037384();
  uint64_t result = EnvironmentValues.subscript.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t assignWithCopy for CalculatorModeButtonView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void **)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  sub_1000319C4(v6, v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void **)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v7;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  sub_10002F4DC(v10, v11, v12, v13);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  LOBYTE(v8) = *(unsigned char *)(a2 + 81);
  unsigned __int8 v16 = *(unsigned char *)(a2 + 80);
  sub_100023524(v14, v15, v16, (char)v8);
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 72);
  char v19 = *(unsigned char *)(a1 + 81);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v15;
  uint64_t v20 = *(unsigned __int8 *)(a1 + 80);
  *(unsigned char *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v16;
  *(unsigned char *)(a1 + 81) = (_BYTE)v8;
  sub_10002F4E8(v17, v18, v20, v19);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  *(unsigned char *)(a1 + 87) = *(unsigned char *)(a2 + 87);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v21 = *(void *)(a2 + 112);
  LOBYTE(v15) = *(unsigned char *)(a2 + 120);
  sub_100032F38(v21, v15);
  uint64_t v22 = *(void *)(a1 + 112);
  char v23 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 112) = v21;
  *(unsigned char *)(a1 + 12sub_100102B8C(2, 18, 1, 0) = v15;
  sub_100032EAC(v22, v23);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CalculatorModeButtonView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 16sub_100102B8C(2, 18, 1, 0) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for CalculatorModeButtonView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 48);
  char v7 = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 48);
  char v11 = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  sub_10002F4DC(v8, v9, v10, v11);
  char v12 = *(unsigned char *)(a2 + 80);
  char v13 = *(unsigned char *)(a2 + 81);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 81);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v17 = *(unsigned __int8 *)(a1 + 80);
  *(unsigned char *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v12;
  *(unsigned char *)(a1 + 81) = v13;
  sub_10002F4E8(v14, v15, v17, v16);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  *(unsigned char *)(a1 + 87) = *(unsigned char *)(a2 + 87);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  char v18 = *(unsigned char *)(a2 + 120);
  uint64_t v19 = *(void *)(a1 + 112);
  char v20 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 12sub_100102B8C(2, 18, 1, 0) = v18;
  sub_100032EAC(v19, v20);
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v21 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_100102B8C(2, 18, 1, 0) = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10006F7C4()
{
  swift_release();
  swift_release();
  sub_10002F4DC(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64), *(unsigned char *)(v0 + 72));
  sub_10002F4E8(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned __int8 *)(v0 + 96), *(unsigned char *)(v0 + 97));
  sub_100032EAC(*(void *)(v0 + 128), *(unsigned char *)(v0 + 136));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10006F848()
{
  return sub_10006E9A4(v0 + 16);
}

uint64_t sub_10006F858@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10006F888()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_10006F8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModeMenuView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F918(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModeMenuView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006F984(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = *(unsigned char *)(a1 + 81);
  char v11 = *(unsigned char *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 112);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 80);
  swift_release();
  swift_release();
  sub_10002F4DC(v2, v3, v4, v5);
  sub_10002F4E8(v6, v7, v9, v8);
  sub_100032EAC(v12, v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_10006FA68()
{
  return sub_10006ED70(*(void *)(v0 + 16));
}

uint64_t getEnumTagSinglePayload for ModeButtonAccessibilityModifiers(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ModeButtonAccessibilityModifiers(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_10006FB1C()
{
  return sub_100040BE4(&qword_100155BF0, &qword_100155BF8);
}

uint64_t sub_10006FB5C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_appStartTime;
  uint64_t v2 = type metadata accessor for Date();
  unsigned int v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10006FC2C()
{
  return type metadata accessor for AnalyticsTimeStampInfo();
}

void sub_10006FC34()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + 16);
  swift_retain();
  Date.init()();
  uint64_t v7 = v6 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v7, v5, v2);
  swift_endAccess();
  swift_release();
  if (qword_100154758 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100021598(v8, (uint64_t)qword_100161358);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    char v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    void v17[2] = v12;
    *(_DWORD *)char v11 = 136315138;
    uint64_t v18 = v12;
    v17[1] = v11 + 4;
    uint64_t v13 = *(void *)(v1 + 16) + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v13, v2);
    sub_10006FFB8();
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v17[3] = sub_10000DAA8(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "updated last event updated time to: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_10006FF3C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10006FF80()
{
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t sub_10006FFB8()
{
  unint64_t result = qword_100155D90;
  if (!qword_100155D90)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155D90);
  }
  return result;
}

BOOL sub_100070010()
{
  id v0 = [self mainBundle];
  id v1 = [v0 infoDictionary];

  if (!v1)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    goto LABEL_9;
  }
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v2 + 16) || (unint64_t v3 = sub_100074534(0x656C646E75424643, 0xEF6E6F6973726556), (v4 & 1) == 0))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_10000DBCC(*(void *)(v2 + 56) + 32 * v3, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_9:
    sub_100012570((uint64_t)&v11);
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    unint64_t v5 = v10;
    uint64_t v6 = *(void *)v9 & 0xFFFFFFFFFFFFLL;
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v6 = 0;
  unint64_t v5 = 0xE000000000000000;
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v7 = v6;
  }
  return v7 == 0;
}

uint64_t sub_100070170()
{
  return sub_100070238((uint64_t)&unk_10010F7D0, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed);
}

uint64_t sub_100070184()
{
  return sub_100070238((uint64_t)&unk_10010F7A8, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed);
}

uint64_t sub_100070198()
{
  return sub_100070238((uint64_t)&unk_10010F848, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed);
}

uint64_t sub_1000701AC(uint64_t result, char a2)
{
  *(unsigned char *)(result + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed) = a2;
  return result;
}

uint64_t sub_1000701BC(uint64_t result, char a2)
{
  *(unsigned char *)(result
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed) = a2;
  return result;
}

uint64_t sub_1000701CC()
{
  return sub_100070238((uint64_t)&unk_10010F820, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed);
}

uint64_t sub_1000701E0(uint64_t result, char a2)
{
  *(unsigned char *)(result + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed) = a2;
  return result;
}

uint64_t sub_1000701F0()
{
  return sub_100070238((uint64_t)&unk_10010F7F8, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed);
}

uint64_t sub_100070204(uint64_t result, char a2)
{
  *(unsigned char *)(result + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed) = a2;
  return result;
}

uint64_t sub_100070214(uint64_t result, char a2)
{
  *(unsigned char *)(result + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed) = a2;
  return result;
}

uint64_t sub_100070224()
{
  return sub_100070238((uint64_t)&unk_10010F870, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced);
}

uint64_t sub_100070238(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10003CD70();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_1000702A8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10003CD70();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3
                 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced);
  return result;
}

uint64_t sub_100070328()
{
  return swift_release();
}

id sub_1000703C8()
{
  ObjectType = (objc_class *)swift_getObjectType();
  id result = [self sharedConnection];
  if (result)
  {
    uint64_t v3 = result;
    [result unregisterObserver:v0];

    v4.receiver = v0;
    v4.super_class = ObjectType;
    return [super dealloc];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100070574()
{
  return type metadata accessor for CalculatorMDMRestrictionsManager();
}

void sub_10007063C(void *a1)
{
  if (!a1)
  {
    __break(1u);
    return;
  }
  unsigned __int8 v3 = [a1 isCalculatorModeScientificAllowed];
  swift_getKeyPath();
  sub_10003CD70();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v4 = v3 ^ *(unsigned char *)(v1
                     + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed);
  if (v4)
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
  unsigned int v6 = [a1 isCalculatorModeProgrammerAllowed];
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (v6 != *(unsigned __int8 *)(v1
                                + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed))
  {
    uint64_t v7 = swift_getKeyPath();
    __chkstk_darwin(v7);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    char v4 = 1;
  }
  unsigned int v8 = [a1 isCalculatorInputModeUnitConversionAllowed];
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (v8 != *(unsigned __int8 *)(v1
                                + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed))
  {
    uint64_t v9 = swift_getKeyPath();
    __chkstk_darwin(v9);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    char v4 = 1;
  }
  unsigned int v10 = [a1 isCalculatorModeMathPaperAllowed];
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (v10 != *(unsigned __int8 *)(v1
                                 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed))
  {
    uint64_t v11 = swift_getKeyPath();
    __chkstk_darwin(v11);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    char v4 = 1;
  }
  unsigned int v12 = [a1 isSquareRootOnBasicCalculatorForced];
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (v12 == *(unsigned __int8 *)(v1
                                 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced))
  {
    if ((v4 & 1) == 0) {
      return;
    }
  }
  else
  {
    uint64_t v13 = swift_getKeyPath();
    __chkstk_darwin(v13);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
  id v14 = [self defaultCenter];
  if (qword_1001544E8 != -1) {
    swift_once();
  }
  [v14 postNotificationName:qword_1001610F0 object:0];
}

unint64_t sub_100070B48(uint64_t a1)
{
  return sub_100070E08(a1, &qword_100155230);
}

unint64_t sub_100070B54(uint64_t a1)
{
  return sub_100070E08(a1, &qword_1001560E8);
}

unint64_t sub_100070B60(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unsigned __int8 v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100032FA0(&qword_1001560C0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100033344(v6, (uint64_t)v15, &qword_1001560C8);
    unint64_t result = sub_100074618((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10001CFF8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100070CA4(uint64_t a1)
{
  return sub_10001CEC8(a1, &qword_1001560D0, &qword_1001560D8, (uint64_t (*)(uint64_t))sub_10001D008);
}

unint64_t sub_100070CCC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unsigned __int8 v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100032FA0(&qword_1001560F0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100033344(v6, (uint64_t)&v13, &qword_1001560F8);
    uint64_t v7 = v13;
    unint64_t result = sub_10007465C(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_10001CFF8(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100070DFC(uint64_t a1)
{
  return sub_100070E08(a1, &qword_1001560E0);
}

unint64_t sub_100070E08(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    unsigned __int8 v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100032FA0(a2);
  unsigned __int8 v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    char v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_100074534(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100070F20(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_1001560B0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100032FA0(&qword_1001560B8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = v6 + 64;
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v21[1] = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100033344(v11, (uint64_t)v5, &qword_1001560B0);
    unint64_t result = sub_100076668();
    if (v14) {
      break;
    }
    unint64_t v15 = result;
    *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = v7[7];
    uint64_t v17 = type metadata accessor for DisplayRepresentation();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v15, v5, v17);
    uint64_t v18 = v7[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v7[2] = v20;
    v11 += v12;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000710FC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100032FA0(&qword_100156088);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v14 = *v4;
    swift_bridgeObjectRetain();
    id v7 = (id)v14;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100074534(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v10 = v5;
    v10[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v14;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_100071234()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v2 = *(id *)(v0 + 32);
  uint64_t v3 = CalculateUnitCategory.id.getter();
  uint64_t v5 = v4;

  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 40);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_100074534(v3, v5);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(v6 + 56) + 8 * v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v11 = [*(id *)(v1 + 32) preferredFromUnit:v1];

  return v11;
}

id sub_100071418()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v2 = *(id *)(v0 + 32);
  uint64_t v3 = CalculateUnitCategory.id.getter();
  uint64_t v5 = v4;

  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 48);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_100074534(v3, v5);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(v6 + 56) + 8 * v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v11 = [v1 preferredToUnit:v1];

  return v11;
}

uint64_t sub_1000715FC()
{
  swift_getKeyPath();
  sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ([*(id *)(v0 + 32) unitType] == (id)16)
  {
    uint64_t v1 = *(void *)(v0 + 24);
    swift_getKeyPath();
    sub_100076590(&qword_100154F68, (void (*)(uint64_t))type metadata accessor for CalculatorCurrencyCacheProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded) ^ 1;
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

id sub_100071740()
{
  swift_getKeyPath();
  sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 32);

  return v1;
}

void sub_1000717F0(void *a1)
{
  uint64_t v2 = v1;
  id v4 = sub_100071234();
  uint64_t v5 = CalculateUnit.id.getter();
  uint64_t v7 = v6;

  if (v5 == CalculateUnit.id.getter() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    id v10 = [a1 category];
    if (v10)
    {
      uint64_t v109 = v10;
      sub_100073F8C(v10);
      swift_getKeyPath();
      sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v11 = *(id *)(v2 + 32);
      uint64_t v12 = CalculateUnitCategory.id.getter();
      uint64_t v14 = v13;

      swift_getKeyPath();
      id v15 = a1;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v113 = *(void *)(v2 + 40);
      *(void *)(v2 + 4sub_100102B8C(2, 18, 1, 0) = 0x8000000000000000;
      char v110 = v15;
      sub_100075A9C((uint64_t)v15, v12, v14, isUniquelyReferenced_nonNull_native, &qword_100156080);
      *(void *)(v2 + 4sub_100102B8C(2, 18, 1, 0) = v113;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v17 = *(id *)(v2 + 32);
      uint64_t v18 = CalculateUnitCategory.id.getter();
      uint64_t v20 = v19;

      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v21 = (uint64_t *)(v2 + 48);
      swift_beginAccess();
      if (!*(void *)(*(void *)(v2 + 48) + 16)) {
        goto LABEL_15;
      }
      swift_bridgeObjectRetain();
      sub_100074534(v18, v20);
      char v23 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0) {
        goto LABEL_16;
      }
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v24 = *(id *)(v2 + 32);
      uint64_t v25 = CalculateUnitCategory.id.getter();
      uint64_t v27 = v26;

      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (!*(void *)(*(void *)(v2 + 48) + 16))
      {
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
      swift_bridgeObjectRetain();
      sub_100074534(v25, v27);
      char v29 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
LABEL_47:
        uint64_t KeyPath = swift_getKeyPath();
        __chkstk_darwin(KeyPath);
        sub_100076590((unint64_t *)&qword_100155238, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionDataProvider);
        id v98 = v110;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();

        if (qword_100154760 != -1) {
          swift_once();
        }
        uint64_t v99 = (void *)qword_100161370;
        CalculateUnit.id.getter();
        NSString v100 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v101 = String._bridgeToObjectiveC()();
        [v99 setObject:v100 forKey:v101];

        id v102 = sub_100071418();
        uint64_t v103 = swift_getKeyPath();
        __chkstk_darwin(v103);
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        unint64_t v104 = (void *)qword_100161370;
        CalculateUnit.id.getter();
        NSString v105 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v106 = String._bridgeToObjectiveC()();
        [v104 setObject:v105 forKey:v106];

        return;
      }
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v30 = *(id *)(v2 + 32);
      uint64_t v31 = CalculateUnitCategory.id.getter();
      uint64_t v33 = v32;

      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v34 = *(void *)(v2 + 48);
      if (*(void *)(v34 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v35 = sub_100074534(v31, v33);
        if (v36)
        {
          id v37 = *(id *)(*(void *)(v34 + 56) + 8 * v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v38 = CalculateUnit.id.getter();
          uint64_t v40 = v39;

          if (v38 != CalculateUnit.id.getter() || v40 != v41)
          {
            char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v107 & 1) == 0) {
              goto LABEL_47;
            }
LABEL_16:
            uint64_t v42 = CalculateUnit.id.getter();
            uint64_t v44 = v43;
            swift_getKeyPath();
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            id v45 = *(id *)(v2 + 32);
            uint64_t v46 = CalculateUnitCategory.id.getter();
            uint64_t v48 = v47;

            swift_getKeyPath();
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            uint64_t v49 = *(void *)(v2 + 48);
            if (*(void *)(v49 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v50 = sub_100074534(v46, v48);
              if (v51)
              {
                id v52 = *(id *)(*(void *)(v49 + 56) + 8 * v50);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v53 = CalculateUnit.id.getter();
                uint64_t v55 = v54;

                if (v42 == v53 && v44 == v55)
                {
                  swift_bridgeObjectRelease_n();
                  goto LABEL_33;
                }
                char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v76)
                {
LABEL_33:
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  id v77 = *(id *)(v2 + 32);
                  uint64_t v108 = CalculateUnitCategory.id.getter();
                  uint64_t v79 = v78;

                  uint64_t v80 = CalculateUnit.id.getter();
                  uint64_t v82 = v81;
                  id v83 = [v109 preferredToUnit];
                  uint64_t v84 = CalculateUnit.id.getter();
                  uint64_t v86 = v85;

                  if (v80 == v84 && v82 == v86)
                  {
                    swift_bridgeObjectRelease_n();
                    uint64_t v87 = &selRef_preferredFromUnit;
                  }
                  else
                  {
                    char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v87 = &selRef_preferredToUnit;
                    if (v88) {
                      uint64_t v87 = &selRef_preferredFromUnit;
                    }
                  }
                  id v89 = [v109 *v87];
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
                  swift_release();
                  swift_beginAccess();
                  char v90 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v111 = *(void *)(v2 + 48);
                  *(void *)(v2 + 48) = 0x8000000000000000;
                  sub_100075A9C((uint64_t)v89, v108, v79, v90, &qword_100156080);
                  *(void *)(v2 + 48) = v111;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_endAccess();
                  goto LABEL_46;
                }
                goto LABEL_24;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
LABEL_24:
            uint64_t v56 = CalculateUnit.id.getter();
            uint64_t v58 = v57;
            id v59 = [v109 preferredToUnit];
            uint64_t v60 = CalculateUnit.id.getter();
            uint64_t v62 = v61;

            if (v56 == v60 && v58 == v62)
            {
              swift_bridgeObjectRelease_n();
LABEL_28:
              swift_getKeyPath();
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              id v64 = *(id *)(v2 + 32);
              uint64_t v65 = CalculateUnitCategory.id.getter();
              uint64_t v67 = v66;

              id v68 = [v109 preferredFromUnit];
LABEL_42:
              id v94 = v68;
              swift_getKeyPath();
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              swift_getKeyPath();
              ObservationRegistrar.willSet<A, B>(_:keyPath:)();
              swift_release();
              swift_beginAccess();
              if (v94)
              {
                char v95 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v112 = *v21;
                *uint64_t v21 = 0x8000000000000000;
                sub_100075A9C((uint64_t)v94, v65, v67, v95, &qword_100156080);
                *uint64_t v21 = v112;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v96 = (void *)sub_100074454(v65, v67, &qword_100156080);
                swift_bridgeObjectRelease();
              }
              swift_endAccess();
LABEL_46:
              swift_getKeyPath();
              ObservationRegistrar.didSet<A, B>(_:keyPath:)();
              swift_release();
              goto LABEL_47;
            }
            char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v63) {
              goto LABEL_28;
            }
            uint64_t v69 = CalculateUnit.id.getter();
            uint64_t v71 = v70;
            id v72 = [v109 preferredFromUnit];
            uint64_t v73 = CalculateUnit.id.getter();
            uint64_t v75 = v74;

            if (v69 == v73 && v71 == v75)
            {
              swift_bridgeObjectRelease_n();
LABEL_41:
              swift_getKeyPath();
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              id v92 = *(id *)(v2 + 32);
              uint64_t v65 = CalculateUnitCategory.id.getter();
              uint64_t v67 = v93;

              id v68 = [v109 preferredToUnit];
              goto LABEL_42;
            }
            char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v91) {
              goto LABEL_41;
            }
            goto LABEL_47;
          }
          swift_bridgeObjectRelease();
LABEL_15:
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        __break(1u);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __break(1u);
    }
  }
}

void sub_100072604(void *a1)
{
  uint64_t v2 = v1;
  id v4 = sub_100071418();
  uint64_t v5 = CalculateUnit.id.getter();
  uint64_t v7 = v6;

  if (v5 == CalculateUnit.id.getter() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    id v10 = [a1 category];
    if (v10)
    {
      uint64_t v109 = v10;
      sub_100073F8C(v10);
      swift_getKeyPath();
      sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v11 = *(id *)(v2 + 32);
      uint64_t v12 = CalculateUnitCategory.id.getter();
      uint64_t v14 = v13;

      swift_getKeyPath();
      id v15 = a1;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v113 = *(void *)(v2 + 48);
      *(void *)(v2 + 48) = 0x8000000000000000;
      char v110 = v15;
      sub_100075A9C((uint64_t)v15, v12, v14, isUniquelyReferenced_nonNull_native, &qword_100156080);
      *(void *)(v2 + 48) = v113;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v17 = *(id *)(v2 + 32);
      uint64_t v18 = CalculateUnitCategory.id.getter();
      uint64_t v20 = v19;

      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v21 = (uint64_t *)(v2 + 40);
      swift_beginAccess();
      if (!*(void *)(*(void *)(v2 + 40) + 16)) {
        goto LABEL_15;
      }
      swift_bridgeObjectRetain();
      sub_100074534(v18, v20);
      char v23 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0) {
        goto LABEL_16;
      }
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v24 = *(id *)(v2 + 32);
      uint64_t v25 = CalculateUnitCategory.id.getter();
      uint64_t v27 = v26;

      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (!*(void *)(*(void *)(v2 + 40) + 16))
      {
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
      swift_bridgeObjectRetain();
      sub_100074534(v25, v27);
      char v29 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
LABEL_47:
        uint64_t KeyPath = swift_getKeyPath();
        __chkstk_darwin(KeyPath);
        sub_100076590((unint64_t *)&qword_100155238, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionDataProvider);
        id v98 = v110;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();

        if (qword_100154760 != -1) {
          swift_once();
        }
        uint64_t v99 = (void *)qword_100161370;
        CalculateUnit.id.getter();
        NSString v100 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v101 = String._bridgeToObjectiveC()();
        [v99 setObject:v100 forKey:v101];

        id v102 = sub_100071234();
        uint64_t v103 = swift_getKeyPath();
        __chkstk_darwin(v103);
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        unint64_t v104 = (void *)qword_100161370;
        CalculateUnit.id.getter();
        NSString v105 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v106 = String._bridgeToObjectiveC()();
        [v104 setObject:v105 forKey:v106];

        return;
      }
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      id v30 = *(id *)(v2 + 32);
      uint64_t v31 = CalculateUnitCategory.id.getter();
      uint64_t v33 = v32;

      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v34 = *(void *)(v2 + 40);
      if (*(void *)(v34 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v35 = sub_100074534(v31, v33);
        if (v36)
        {
          id v37 = *(id *)(*(void *)(v34 + 56) + 8 * v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v38 = CalculateUnit.id.getter();
          uint64_t v40 = v39;

          if (v38 != CalculateUnit.id.getter() || v40 != v41)
          {
            char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v107 & 1) == 0) {
              goto LABEL_47;
            }
LABEL_16:
            uint64_t v42 = CalculateUnit.id.getter();
            uint64_t v44 = v43;
            swift_getKeyPath();
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            id v45 = *(id *)(v2 + 32);
            uint64_t v46 = CalculateUnitCategory.id.getter();
            uint64_t v48 = v47;

            swift_getKeyPath();
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            uint64_t v49 = *(void *)(v2 + 40);
            if (*(void *)(v49 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v50 = sub_100074534(v46, v48);
              if (v51)
              {
                id v52 = *(id *)(*(void *)(v49 + 56) + 8 * v50);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v53 = CalculateUnit.id.getter();
                uint64_t v55 = v54;

                if (v42 == v53 && v44 == v55)
                {
                  swift_bridgeObjectRelease_n();
                  goto LABEL_33;
                }
                char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v76)
                {
LABEL_33:
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  id v77 = *(id *)(v2 + 32);
                  uint64_t v108 = CalculateUnitCategory.id.getter();
                  uint64_t v79 = v78;

                  uint64_t v80 = CalculateUnit.id.getter();
                  uint64_t v82 = v81;
                  id v83 = [v109 preferredFromUnit];
                  uint64_t v84 = CalculateUnit.id.getter();
                  uint64_t v86 = v85;

                  if (v80 == v84 && v82 == v86)
                  {
                    swift_bridgeObjectRelease_n();
                    uint64_t v87 = &selRef_preferredToUnit;
                  }
                  else
                  {
                    char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v87 = &selRef_preferredFromUnit;
                    if (v88) {
                      uint64_t v87 = &selRef_preferredToUnit;
                    }
                  }
                  id v89 = [v109 *v87];
                  swift_getKeyPath();
                  ObservationRegistrar.access<A, B>(_:keyPath:)();
                  swift_release();
                  swift_getKeyPath();
                  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
                  swift_release();
                  swift_beginAccess();
                  char v90 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v111 = *(void *)(v2 + 40);
                  *(void *)(v2 + 4sub_100102B8C(2, 18, 1, 0) = 0x8000000000000000;
                  sub_100075A9C((uint64_t)v89, v108, v79, v90, &qword_100156080);
                  *(void *)(v2 + 4sub_100102B8C(2, 18, 1, 0) = v111;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_endAccess();
                  goto LABEL_46;
                }
                goto LABEL_24;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
LABEL_24:
            uint64_t v56 = CalculateUnit.id.getter();
            uint64_t v58 = v57;
            id v59 = [v109 preferredFromUnit];
            uint64_t v60 = CalculateUnit.id.getter();
            uint64_t v62 = v61;

            if (v56 == v60 && v58 == v62)
            {
              swift_bridgeObjectRelease_n();
LABEL_28:
              swift_getKeyPath();
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              id v64 = *(id *)(v2 + 32);
              uint64_t v65 = CalculateUnitCategory.id.getter();
              uint64_t v67 = v66;

              id v68 = [v109 preferredToUnit];
LABEL_42:
              id v94 = v68;
              swift_getKeyPath();
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              swift_getKeyPath();
              ObservationRegistrar.willSet<A, B>(_:keyPath:)();
              swift_release();
              swift_beginAccess();
              if (v94)
              {
                char v95 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v112 = *v21;
                *uint64_t v21 = 0x8000000000000000;
                sub_100075A9C((uint64_t)v94, v65, v67, v95, &qword_100156080);
                *uint64_t v21 = v112;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v96 = (void *)sub_100074454(v65, v67, &qword_100156080);
                swift_bridgeObjectRelease();
              }
              swift_endAccess();
LABEL_46:
              swift_getKeyPath();
              ObservationRegistrar.didSet<A, B>(_:keyPath:)();
              swift_release();
              goto LABEL_47;
            }
            char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v63) {
              goto LABEL_28;
            }
            uint64_t v69 = CalculateUnit.id.getter();
            uint64_t v71 = v70;
            id v72 = [v109 preferredFromUnit];
            uint64_t v73 = CalculateUnit.id.getter();
            uint64_t v75 = v74;

            if (v69 == v73 && v71 == v75)
            {
              swift_bridgeObjectRelease_n();
LABEL_41:
              swift_getKeyPath();
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              id v92 = *(id *)(v2 + 32);
              uint64_t v65 = CalculateUnitCategory.id.getter();
              uint64_t v67 = v93;

              id v68 = [v109 preferredFromUnit];
              goto LABEL_42;
            }
            char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v91) {
              goto LABEL_41;
            }
            goto LABEL_47;
          }
          swift_bridgeObjectRelease();
LABEL_15:
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        __break(1u);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __break(1u);
    }
  }
}

uint64_t sub_100073414()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for CalculatorUnitConversionViewModel(0);
    uint64_t v1 = swift_allocObject();
    sub_100073AEC();
    *(void *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_100073488()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator40CalculatorUnitConversionViewModelWrapper___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100073530()
{
  return type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
}

void sub_100073538(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = a2;
  id v3 = a2;
}

uint64_t sub_10007356C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100073624@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000736E4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000737C4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007382C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000738E4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000739A4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100073A84(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100073AEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100032FA0(&qword_100154F60);
  __chkstk_darwin(v2 - 8);
  uint64_t v18 = (uint64_t)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001546C8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = qword_1001612E0;
  uint64_t v4 = qword_1001541A8;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  *(void *)(v1 + 24) = qword_100160C98;
  swift_retain();
  *(void *)(v1 + 4sub_100102B8C(2, 18, 1, 0) = sub_100070E08((uint64_t)_swiftEmptyArrayStorage, &qword_100156080);
  *(void *)(v1 + 48) = sub_100070E08((uint64_t)_swiftEmptyArrayStorage, &qword_100156080);
  ObservationRegistrar.init()();
  *(void *)(v1 + 32) = sub_1000A1EBC();
  swift_getKeyPath();
  uint64_t v21 = v1;
  sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v5 = *(id *)(v1 + 32);
  uint64_t v19 = CalculateUnitCategory.id.getter();
  uint64_t v7 = v6;

  id v8 = sub_1000A2250();
  swift_getKeyPath();
  uint64_t v21 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v21 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *(void *)(v1 + 40);
  *(void *)(v1 + 4sub_100102B8C(2, 18, 1, 0) = 0x8000000000000000;
  sub_100075A9C((uint64_t)v8, v19, v7, isUniquelyReferenced_nonNull_native, &qword_100156080);
  *(void *)(v1 + 4sub_100102B8C(2, 18, 1, 0) = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v21 = v1;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v21 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v10 = *(id *)(v1 + 32);
  uint64_t v11 = CalculateUnitCategory.id.getter();
  uint64_t v13 = v12;

  id v14 = sub_1000A2498();
  swift_getKeyPath();
  uint64_t v21 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v21 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0x8000000000000000;
  sub_100075A9C((uint64_t)v14, v11, v13, v15, &qword_100156080);
  *(void *)(v1 + 48) = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v21 = v1;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v21 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ([*(id *)(v1 + 32) unitType] == (id)16)
  {
    uint64_t v16 = v18;
    sub_10004FA74(v18);
    sub_100075D68(v16);
  }
  return v1;
}

id sub_100073F8C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100032FA0(&qword_100154F60);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v25 = v1;
  sub_100076590(&qword_1001552A0, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v7 = *(id *)(v1 + 32);
  uint64_t v8 = CalculateUnitCategory.id.getter();
  uint64_t v10 = v9;

  if (v8 == CalculateUnitCategory.id.getter() && v10 == v11) {
    return (id)swift_bridgeObjectRelease_n();
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  id result = (id)swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    id v24 = v6;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v23 - 2) = v2;
    *(&v23 - 1) = (uint64_t)a1;
    uint64_t v25 = v2;
    id v15 = a1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();

    uint64_t v16 = *(void *)(v2 + 16);
    uint64_t v17 = swift_getKeyPath();
    uint64_t v23 = (uint64_t)&v23;
    __chkstk_darwin(v17);
    *(&v23 - 2) = v16;
    *(&v23 - 1) = (uint64_t)v15;
    uint64_t v25 = v16;
    sub_100076590((unint64_t *)&qword_100155238, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionDataProvider);
    id v18 = v15;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();

    if (qword_100154760 != -1) {
      swift_once();
    }
    uint64_t v19 = (void *)qword_100161370;
    CalculateUnitCategory.id.getter();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v21 = String._bridgeToObjectiveC()();
    [v19 setObject:v20 forKey:v21];

    swift_getKeyPath();
    uint64_t v25 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    id result = [*(id *)(v2 + 32) unitType];
    uint64_t v22 = (uint64_t)v24;
    if (result == (id)16)
    {
      sub_10004FA74((uint64_t)v24);
      return (id)sub_100075D68(v22);
    }
  }
  return result;
}

uint64_t sub_100074368()
{
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator33CalculatorUnitConversionViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100074430()
{
  return type metadata accessor for CalculatorUnitConversionViewModel(0);
}

uint64_t sub_100074448(uint64_t a1, uint64_t a2)
{
  return sub_100074454(a1, a2, &qword_1001560A0);
}

uint64_t sub_100074454(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100074534(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  uint64_t v14 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000761D4(a3);
    uint64_t v11 = v14;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_1000758AC(v8, v11);
  uint64_t *v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_100074534(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100074710(a1, a2, v4);
}

unint64_t sub_1000745AC(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000747F4(a1, v2);
}

unint64_t sub_100074618(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100074894(a1, v4);
}

unint64_t sub_10007465C(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_100076590(&qword_100156100, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10007495C(a1, v2);
}

unint64_t sub_100074710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        char v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000747F4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100074894(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000766C8(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10006DD98((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10007495C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    char v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_100076590(&qword_100156100, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_100074AB8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100032FA0(&qword_1001560A8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    id v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *id v30 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      NSString v21 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
      if (a2) {
        sub_10001CFF8(v21, v31);
      }
      else {
        sub_10000DBCC((uint64_t)v21, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      uint64_t result = (uint64_t)sub_10001CFF8(v31, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100074D90(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100032FA0(&qword_100156090);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    NSString v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_10001CFF8(v22, v36);
    }
    else
    {
      sub_10000DBCC((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_10001CFF8(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000750CC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100032FA0(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  char v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    id v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    BOOL v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  id v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1000753D8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100032FA0(&qword_100156088);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v37 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v36 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v36) {
          goto LABEL_33;
        }
        unint64_t v24 = v37[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v24 = v37[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v36)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v37 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v37[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v24 = v37[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v38 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        id v34 = (id)v38;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v38;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

unint64_t sub_1000756F0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v10 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        uint64_t result = Hasher._finalize()();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (unsigned char *)(v12 + v3);
          int64_t v14 = (unsigned char *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *int64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000758AC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100075A84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_100075A90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_100075A9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100074534(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1000761D4(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000750CC(v17, a4 & 1, a5);
  unint64_t v22 = sub_100074534(a2, a3);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  unint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
  *unint64_t v24 = a2;
  v24[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;

  swift_bridgeObjectRetain();
}

_OWORD *sub_100075C24(_OWORD *a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000745AC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100075E4C();
      goto LABEL_7;
    }
    sub_100074AB8(v13, a3 & 1);
    unint64_t v19 = sub_1000745AC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_10000DB7C((uint64_t)v17);
    return sub_10001CFF8(a1, v17);
  }
LABEL_13:

  return sub_100075DE4(v10, a2, a1, v16);
}

uint64_t sub_100075D68(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_100154F60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100075DC8()
{
  return sub_100073A84(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

_OWORD *sub_100075DE4(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = sub_10001CFF8(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *sub_100075E4C()
{
  uint64_t v1 = v0;
  sub_100032FA0(&qword_1001560A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_10000DBCC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t result = sub_10001CFF8(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10007600C()
{
  uint64_t v1 = v0;
  sub_100032FA0(&qword_100156090);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10000DBCC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_10001CFF8(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000761D4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100032FA0(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    int64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v2sub_100102B8C(2, 18, 1, 0) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100076380()
{
  return sub_1000737C4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *sub_10007639C()
{
  uint64_t v1 = v0;
  sub_100032FA0(&qword_100156088);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v25 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v25;
    swift_bridgeObjectRetain();
    id v21 = (id)v25;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100076574()
{
  sub_1000A32E0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100076590(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000765E0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v2;
  id v4 = v2;
}

void sub_100076620()
{
  sub_1000A3100(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10007663C(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t sub_100076668()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();

  return sub_10007663C(v0);
}

uint64_t sub_1000766C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10007672C()
{
}

void sub_100076744()
{
}

void *initializeBufferWithCopyOfBuffer for CalculatorUnitCategory(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CalculatorUnitCategory(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for CalculatorUnitCategory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for CalculatorUnitCategory(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorUnitCategory(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorUnitCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorUnitCategory()
{
  return &type metadata for CalculatorUnitCategory;
}

uint64_t sub_100076900@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CalculateUnitCategory.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10007692C()
{
  uint64_t v0 = CalculateUnitCategory.id.getter();
  uint64_t v2 = v1;
  if (v0 == CalculateUnitCategory.id.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void *sub_1000769B8()
{
  return &protocol witness table for String;
}

ValueMetadata *type metadata accessor for ProgrammerEncodingType()
{
  return &type metadata for ProgrammerEncodingType;
}

uint64_t _s10Calculator19CalculatorInputBaseOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10Calculator19CalculatorInputBaseOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100076B3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorInputBase()
{
  return &type metadata for CalculatorInputBase;
}

unsigned char *sub_100076B9C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_100076BA4()
{
  return sub_1000775A8(&qword_100156108, &qword_100156110);
}

Swift::Int sub_100076BCC()
{
  return Hasher._finalize()();
}

uint64_t sub_100076CB4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100076D84()
{
  return Hasher._finalize()();
}

unint64_t sub_100076E68@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100005998(*a1);
  *a2 = result;
  return result;
}

void sub_100076E98(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x6369736162;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = 0x6669746E65696373;
      unint64_t v2 = 0xEA00000000006369;
      goto LABEL_3;
    case 2:
      *a1 = 0x657061506874616DLL;
      a1[1] = 0xE900000000000072;
      break;
    case 3:
      *a1 = 0x6D6D6172676F7270;
      a1[1] = 0xEA00000000007265;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_100076F40()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100076FA0()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_100076FF0(void *a1@<X8>)
{
  *a1 = &off_1001494E0;
}

unint64_t sub_100077004()
{
  unint64_t result = qword_100156120;
  if (!qword_100156120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156120);
  }
  return result;
}

uint64_t sub_100077058(char *a1, unsigned __int8 *a2)
{
  return sub_1000559AC(*a1, *a2);
}

Swift::Int sub_100077064()
{
  return Hasher._finalize()();
}

uint64_t sub_1000770E4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100077150()
{
  return Hasher._finalize()();
}

unint64_t sub_1000771CC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_100149508;
  unint64_t result = sub_10007765C(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100077204(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 12337;
  if (v2 != 1) {
    uint64_t v4 = 13873;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 56;
  }
  if (!v5) {
    unint64_t v3 = 0xE200000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

void sub_100077240(void *a1@<X8>)
{
  *a1 = &off_100149570;
}

uint64_t sub_100077250()
{
  return sub_1000775A8(&qword_100156128, &qword_100156130);
}

unint64_t sub_10007727C()
{
  unint64_t result = qword_100156138;
  if (!qword_100156138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156138);
  }
  return result;
}

unint64_t sub_1000772D4()
{
  unint64_t result = qword_100156140;
  if (!qword_100156140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156140);
  }
  return result;
}

uint64_t sub_100077328(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000558A8(*a1, *a2);
}

Swift::Int sub_100077334()
{
  return Hasher._finalize()();
}

uint64_t sub_1000773CC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100077450()
{
  return Hasher._finalize()();
}

unint64_t sub_1000774E4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_100149420;
  unint64_t result = sub_10007765C(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10007751C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x4949435341;
  if (v2 != 1)
  {
    uint64_t v5 = 0x65646F63696E55;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701736302;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100077570(void *a1@<X8>)
{
  *a1 = &off_100149598;
}

uint64_t sub_100077580()
{
  return sub_1000775A8(&qword_100156148, &qword_100156150);
}

uint64_t sub_1000775A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000775FC()
{
  unint64_t result = qword_100156158;
  if (!qword_100156158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156158);
  }
  return result;
}

unint64_t sub_100077650(Swift::String a1)
{
  v1._rawValue = &off_100149420;
  return sub_10007765C(a1, v1);
}

unint64_t sub_10007765C(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

unint64_t sub_1000776A4()
{
  unint64_t result = qword_100156160;
  if (!qword_100156160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156160);
  }
  return result;
}

uint64_t sub_100077704(uint64_t a1, char a2)
{
  uint64_t v3 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  if (a2)
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v4._uint64_t countAndFlagsBits = 0x28206573656854;
    v4._object = (void *)0xE700000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v4);
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
    v5._object = (void *)0x8000000100108D20;
    v5._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
    LocalizedStringKey.init(stringInterpolation:)();
  }
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t getEnumTagSinglePayload for CalculatorHistoryRecordDeletionMode(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CalculatorHistoryRecordDeletionMode(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000778C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000778DC(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorHistoryRecordDeletionMode()
{
  return &type metadata for CalculatorHistoryRecordDeletionMode;
}

unint64_t sub_100077938()
{
  unint64_t result = qword_100156170;
  if (!qword_100156170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156170);
  }
  return result;
}

Swift::Int sub_10007798C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000779D8()
{
  return swift_release();
}

uint64_t sub_100077B10()
{
  return sub_100077B34();
}

uint64_t sub_100077B1C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10007803C(a1, a2);
}

uint64_t sub_100077B28()
{
  return sub_100077B34();
}

uint64_t sub_100077B34()
{
  swift_getKeyPath();
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

uint64_t sub_100077C30()
{
  return sub_100077B34();
}

uint64_t sub_100077C3C()
{
  return sub_100077B34();
}

uint64_t sub_100077C48()
{
  return sub_100077C60();
}

uint64_t sub_100077C54()
{
  return sub_100077C60();
}

uint64_t sub_100077C60()
{
  swift_getKeyPath();
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v1;
}

uint64_t sub_100077D5C()
{
  return sub_100077C60();
}

uint64_t sub_100077D68()
{
  return sub_100077D80();
}

uint64_t sub_100077D74()
{
  return sub_100077D80();
}

uint64_t sub_100077D80()
{
  swift_getKeyPath();
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  sub_10007C1F8((unint64_t *)&qword_100154B88);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

uint64_t sub_100077EA4()
{
  uint64_t v0 = type metadata accessor for Schema.Version();
  sub_1000215D0(v0, qword_1001610D8);
  sub_100021598(v0, (uint64_t)qword_1001610D8);
  return Schema.Version.init(_:_:_:)();
}

uint64_t sub_100077EFC()
{
  sub_100032FA0(&qword_100154BF8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10010DCB0;
  uint64_t v1 = type metadata accessor for SchemaV1.HistoryRecord();
  uint64_t v2 = sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = v2;
  return v0;
}

uint64_t sub_100077F88@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001544E0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Schema.Version();
  uint64_t v3 = sub_100021598(v2, (uint64_t)qword_1001610D8);
  Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_100078030@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10007803C(a1, a2);
}

uint64_t sub_10007803C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  swift_getKeyPath();
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v5;
  return result;
}

uint64_t sub_100078144()
{
  return sub_100078434();
}

uint64_t sub_100078164@<X0>(unsigned char *a1@<X8>)
{
  return sub_10007817C(a1);
}

uint64_t sub_100078170@<X0>(unsigned char *a1@<X8>)
{
  return sub_10007817C(a1);
}

uint64_t sub_10007817C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100078284()
{
  return swift_release();
}

uint64_t sub_100078354()
{
  return swift_release();
}

uint64_t sub_1000783FC@<X0>(unsigned char *a1@<X8>)
{
  return sub_10007817C(a1);
}

uint64_t sub_100078408@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10007803C(a1, a2);
}

uint64_t sub_100078414()
{
  return sub_100078434();
}

uint64_t sub_100078434()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100078510()
{
  return swift_release();
}

uint64_t sub_1000785C0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10007803C(a1, a2);
}

uint64_t sub_1000785CC()
{
  return sub_100078434();
}

double sub_1000785EC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100078604(a1, a2);
}

double sub_1000785F8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100078604(a1, a2);
}

double sub_100078604@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&long long v4 = *a1;
  swift_getKeyPath();
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  sub_10007C1F8((unint64_t *)&qword_100154B88);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_100078734()
{
  return swift_release();
}

uint64_t sub_10007880C()
{
  return swift_release();
}

uint64_t sub_100078944()
{
  return swift_release();
}

void *sub_100078A1C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v45 = a8;
  int v43 = a7;
  int v41 = a6;
  int v39 = a5;
  unint64_t v38 = a4;
  uint64_t v37 = a3;
  uint64_t v36 = a1;
  uint64_t v55 = a16;
  uint64_t v54 = a15;
  uint64_t v53 = a14;
  uint64_t v52 = a13;
  uint64_t v56 = a12;
  uint64_t v47 = a11;
  uint64_t v46 = a10;
  uint64_t v44 = a9;
  uint64_t v18 = v16;
  uint64_t v19 = *v16;
  uint64_t v50 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v48 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t)(v18 + 3);
  v18[6] = sub_100032FA0(&qword_1001562B8);
  char v51 = type metadata accessor for SchemaV1.HistoryRecord;
  uint64_t v22 = sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  v65[0] = v19;
  v65[1] = v19;
  v65[2] = v22;
  uint64_t v66 = v22;
  v18[7] = swift_getOpaqueTypeConformance2();
  sub_100038BE8(v18 + 3);
  static PersistentModel.createBackingData<A>()();
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  uint64_t v63 = 0x6369736162;
  unint64_t v64 = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  LOBYTE(v63) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  LOBYTE(v63) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  LOBYTE(v63) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  uint64_t v40 = v18;
  *((_WORD *)v18 + 8) = 257;
  uint64_t v42 = (char *)v18 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  ObservationRegistrar.init()();
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  uint64_t v63 = v36;
  unint64_t v64 = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  uint64_t v63 = v37;
  unint64_t v64 = v38;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  LOBYTE(v63) = v39;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  LOBYTE(v63) = v41;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  LOBYTE(v63) = v43;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  uint64_t v23 = sub_10008117C();
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  uint64_t v63 = v23;
  unint64_t v64 = v25;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  uint64_t v26 = sub_10008117C();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  sub_100060604((uint64_t)(v18 + 3), (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  uint64_t v63 = v26;
  unint64_t v64 = v28;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v65);
  uint64_t v29 = v49;
  uint64_t v30 = v48;
  uint64_t v31 = v50;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v48, v56, v50);
  sub_100060604(v21, (uint64_t)v65);
  sub_10006052C(v65, v66);
  swift_getKeyPath();
  sub_10007C144(&qword_1001562C0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v29 + 8);
  v32(v30, v31);
  sub_10000DB7C((uint64_t)v65);
  uint64_t v33 = v40;
  v65[0] = v40;
  swift_getKeyPath();
  uint64_t v60 = v33;
  uint64_t v61 = v52;
  uint64_t v62 = v53;
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))v51);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  v65[0] = v33;
  swift_getKeyPath();
  uint64_t v57 = v33;
  uint64_t v58 = v54;
  uint64_t v59 = v55;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  v32(v56, v31);
  return v33;
}

void *sub_10007935C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  unint64_t v12 = v11;
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  int v34 = a6;
  int v32 = a5;
  uint64_t v30 = a3;
  unint64_t v31 = a4;
  int v41 = a11;
  uint64_t v37 = a10;
  uint64_t v38 = a9;
  uint64_t v15 = *v11;
  uint64_t v40 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  int v39 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[6] = sub_100032FA0(&qword_1001562B8);
  uint64_t v17 = sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  v44[0] = v15;
  v44[1] = v15;
  _DWORD v44[2] = v17;
  uint64_t v45 = v17;
  v12[7] = swift_getOpaqueTypeConformance2();
  sub_100038BE8(v12 + 3);
  static PersistentModel.createBackingData<A>()();
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  uint64_t v42 = 0x6369736162;
  unint64_t v43 = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  LOBYTE(v42) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  LOBYTE(v42) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  LOBYTE(v42) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  *((_WORD *)v12 + 8) = 257;
  ObservationRegistrar.init()();
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  uint64_t v42 = a1;
  unint64_t v43 = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  uint64_t v42 = v30;
  unint64_t v43 = v31;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  LOBYTE(v42) = v32;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  LOBYTE(v42) = v34;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  uint64_t v18 = sub_10008117C();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  uint64_t v42 = v18;
  unint64_t v43 = v20;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  uint64_t v21 = sub_10008117C();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  uint64_t v42 = v21;
  unint64_t v43 = v23;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v44);
  uint64_t v24 = v33;
  uint64_t v26 = v39;
  uint64_t v25 = v40;
  unint64_t v27 = v41;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v39, v41, v40);
  sub_100060604((uint64_t)(v12 + 3), (uint64_t)v44);
  sub_10006052C(v44, v45);
  swift_getKeyPath();
  sub_10007C144(&qword_1001562C0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  unint64_t v28 = *(void (**)(char *, uint64_t))(v24 + 8);
  v28(v26, v25);
  sub_10000DB7C((uint64_t)v44);
  v28(v27, v25);
  return v12;
}

unint64_t sub_100079A64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v47 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)(v2 + 3);
  v2[6] = sub_100032FA0(&qword_1001562B8);
  uint64_t v8 = sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  v56[0] = v4;
  v56[1] = v4;
  v56[2] = v8;
  uint64_t v57 = v8;
  v2[7] = swift_getOpaqueTypeConformance2();
  sub_100038BE8(v2 + 3);
  static PersistentModel.createBackingData<A>()();
  sub_100060604((uint64_t)(v2 + 3), (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  *(void *)&v55[0] = 0x6369736162;
  *((void *)&v55[0] + 1) = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v56);
  sub_100060604((uint64_t)(v2 + 3), (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  LOBYTE(v55[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v56);
  sub_100060604((uint64_t)(v2 + 3), (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  LOBYTE(v55[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v56);
  sub_100060604((uint64_t)(v2 + 3), (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  LOBYTE(v55[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v56);
  *((_WORD *)v2 + 8) = 257;
  unint64_t result = ObservationRegistrar.init()();
  if (!*(void *)(a1 + 16))
  {
    __break(1u);
    goto LABEL_41;
  }
  unint64_t result = sub_1000745AC(0);
  if ((v10 & 1) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v48 = v2;
  sub_10000DBCC(*(void *)(a1 + 56) + 32 * result, (uint64_t)&v53);
  sub_10001CFF8(&v53, v55);
  swift_dynamicCast();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  uint64_t v49 = v11;
  uint64_t v50 = v12;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t result = sub_10000DB7C((uint64_t)v56);
  if (!*(void *)(a1 + 16))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unint64_t result = sub_1000745AC(1u);
  if ((v13 & 1) == 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  sub_10000DBCC(*(void *)(a1 + 56) + 32 * result, (uint64_t)&v53);
  sub_10001CFF8(&v53, v55);
  swift_dynamicCast();
  uint64_t v14 = v51;
  uint64_t v15 = v52;
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  uint64_t v49 = v14;
  uint64_t v50 = v15;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t result = sub_10000DB7C((uint64_t)v56);
  if (!*(void *)(a1 + 16))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unint64_t result = sub_1000745AC(2u);
  if ((v16 & 1) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  sub_10000DBCC(*(void *)(a1 + 56) + 32 * result, (uint64_t)&v53);
  sub_10001CFF8(&v53, v55);
  swift_dynamicCast();
  char v17 = v51;
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  LOBYTE(v49) = v17;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  unint64_t result = sub_10000DB7C((uint64_t)v56);
  if (!*(void *)(a1 + 16))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  unint64_t result = sub_1000745AC(3u);
  if ((v18 & 1) == 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  sub_10000DBCC(*(void *)(a1 + 56) + 32 * result, (uint64_t)&v53);
  sub_10001CFF8(&v53, v55);
  swift_dynamicCast();
  char v19 = v51;
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  LOBYTE(v49) = v19;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  unint64_t result = sub_10000DB7C((uint64_t)v56);
  if (!*(void *)(a1 + 16))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  unint64_t result = sub_1000745AC(4u);
  if ((v20 & 1) == 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  sub_10000DBCC(*(void *)(a1 + 56) + 32 * result, (uint64_t)&v53);
  sub_10001CFF8(&v53, v55);
  swift_dynamicCast();
  char v21 = v51;
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  LOBYTE(v49) = v21;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  unint64_t result = sub_10000DB7C((uint64_t)v56);
  if (!*(void *)(a1 + 16))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  unint64_t result = sub_1000745AC(5u);
  if ((v22 & 1) == 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  sub_10000DBCC(*(void *)(a1 + 56) + 32 * result, (uint64_t)&v53);
  sub_10001CFF8(&v53, v55);
  swift_dynamicCast();
  uint64_t v23 = v51;
  uint64_t v24 = v52;
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  uint64_t v49 = v23;
  uint64_t v50 = v24;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t result = sub_10000DB7C((uint64_t)v56);
  if (!*(void *)(a1 + 16))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  unint64_t result = sub_1000745AC(6u);
  if ((v25 & 1) == 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  sub_10000DBCC(*(void *)(a1 + 56) + 32 * result, (uint64_t)&v53);
  sub_10001CFF8(&v53, v55);
  swift_dynamicCast();
  uint64_t v26 = v51;
  uint64_t v27 = v52;
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  uint64_t v49 = v26;
  uint64_t v50 = v27;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v56);
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v45 = v5;
  if (v28)
  {
    unint64_t v29 = sub_1000745AC(7u);
    uint64_t v30 = v48;
    if (v31)
    {
      sub_10000DBCC(*(void *)(a1 + 56) + 32 * v29, (uint64_t)v56);
      int v32 = swift_dynamicCast();
      if (v32) {
        uint64_t v33 = *(void *)&v55[0];
      }
      else {
        uint64_t v33 = 0;
      }
      if (v32) {
        uint64_t v34 = *((void *)&v55[0] + 1);
      }
      else {
        uint64_t v34 = 0;
      }
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
    }
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v30 = v48;
  }
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  *(void *)&v55[0] = v33;
  *((void *)&v55[0] + 1) = v34;
  sub_100032FA0(&qword_100154B90);
  sub_10007C1F8(&qword_1001562C8);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000DB7C((uint64_t)v56);
  *((unsigned char *)v30 + 16) = 0;
  if (*(void *)(a1 + 16) && (unint64_t v35 = sub_1000745AC(8u), (v36 & 1) != 0))
  {
    sub_10000DBCC(*(void *)(a1 + 56) + 32 * v35, (uint64_t)v56);
    int v37 = swift_dynamicCast();
    if (v37) {
      uint64_t v38 = *(void *)&v55[0];
    }
    else {
      uint64_t v38 = 0;
    }
    if (v37) {
      uint64_t v39 = *((void *)&v55[0] + 1);
    }
    else {
      uint64_t v39 = 0;
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  sub_100060604(v7, (uint64_t)v56);
  sub_10006052C(v56, v57);
  swift_getKeyPath();
  *(void *)&v55[0] = v38;
  *((void *)&v55[0] + 1) = v39;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000DB7C((uint64_t)v56);
  uint64_t v40 = v48;
  *((unsigned char *)v48 + 17) = 0;
  if (*(void *)(a1 + 16) && (unint64_t v41 = sub_1000745AC(9u), (v42 & 1) != 0))
  {
    sub_10000DBCC(*(void *)(a1 + 56) + 32 * v41, (uint64_t)&v53);
  }
  else
  {
    long long v53 = 0u;
    long long v54 = 0u;
  }
  unint64_t result = swift_bridgeObjectRelease();
  if (*((void *)&v54 + 1))
  {
    sub_10001CFF8(&v53, v55);
    uint64_t v44 = v46;
    uint64_t v43 = v47;
    swift_dynamicCast();
    sub_100060604(v7, (uint64_t)v56);
    sub_10006052C(v56, v57);
    swift_getKeyPath();
    sub_10007C144(&qword_1001562C0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of BackingData.setValue<A>(forKey:to:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v43);
    sub_10000DB7C((uint64_t)v56);
    return (unint64_t)v40;
  }
LABEL_54:
  __break(1u);
  return result;
}

void *sub_10007A678(uint64_t a1)
{
  char v3 = v1;
  uint64_t v4 = *v1;
  uint64_t v37 = type metadata accessor for Date();
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  char v36 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[6] = sub_100032FA0(&qword_1001562B8);
  unint64_t v35 = type metadata accessor for SchemaV1.HistoryRecord;
  uint64_t v6 = sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  v49[0] = v4;
  v49[1] = v4;
  v49[2] = v6;
  uint64_t v50 = v6;
  v3[7] = swift_getOpaqueTypeConformance2();
  sub_100038BE8(v3 + 3);
  static PersistentModel.createBackingData<A>()();
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  uint64_t v47 = 0x6369736162;
  unint64_t v48 = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  LOBYTE(v47) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  LOBYTE(v47) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  LOBYTE(v47) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  uint64_t v33 = v3;
  *((_WORD *)v3 + 8) = 257;
  uint64_t v34 = (char *)v3 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  ObservationRegistrar.init()();
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  uint64_t v47 = v7;
  unint64_t v48 = v8;
  swift_bridgeObjectRetain();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  uint64_t v47 = v9;
  unint64_t v48 = v10;
  swift_bridgeObjectRetain();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  LOBYTE(v9) = *(unsigned char *)(a1 + 32);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  LOBYTE(v47) = v9;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  LOBYTE(v9) = *(unsigned char *)(a1 + 33);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  LOBYTE(v47) = v9;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  LOBYTE(v9) = *(unsigned char *)(a1 + 34);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  LOBYTE(v47) = v9;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  uint64_t v11 = sub_10008117C();
  unint64_t v13 = v12;
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  uint64_t v47 = v11;
  unint64_t v48 = v13;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  uint64_t v14 = sub_10008117C();
  unint64_t v16 = v15;
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  uint64_t v47 = v14;
  unint64_t v48 = v16;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000DB7C((uint64_t)v49);
  uint64_t v32 = a1 + *(int *)(type metadata accessor for GenericRecord() + 52);
  uint64_t v17 = v38;
  char v31 = *(void (**)(char *))(v38 + 16);
  char v18 = v36;
  uint64_t v19 = v37;
  v31(v36);
  sub_100060604((uint64_t)(v3 + 3), (uint64_t)v49);
  sub_10006052C(v49, v50);
  swift_getKeyPath();
  sub_10007C144(&qword_1001562C0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  char v20 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v38 = v17 + 8;
  uint64_t v30 = v20;
  v20(v18, v19);
  sub_10000DB7C((uint64_t)v49);
  uint64_t v21 = *(void *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 80);
  uint64_t v23 = v33;
  v49[0] = v33;
  swift_getKeyPath();
  uint64_t v44 = v23;
  uint64_t v45 = v21;
  uint64_t v46 = v22;
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))v35);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v29 = a1;
  uint64_t v25 = *(void *)(a1 + 88);
  uint64_t v24 = *(void *)(a1 + 96);
  v49[0] = v23;
  swift_getKeyPath();
  unint64_t v41 = v23;
  uint64_t v42 = v25;
  uint64_t v43 = v24;
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  ((void (*)(char *, uint64_t, uint64_t))v31)(v36, v32, v37);
  v49[0] = v23;
  swift_getKeyPath();
  uint64_t v39 = v23;
  uint64_t v40 = v26;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v30(v26, v27);
  sub_10004BD04(v29);
  return v23;
}

void *sub_10007AFD0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[6] = sub_100032FA0(&qword_1001562B8);
  *(void *)&long long v6 = v4;
  *((void *)&v6 + 1) = v4;
  uint64_t v7 = sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  uint64_t v8 = v7;
  v2[7] = swift_getOpaqueTypeConformance2();
  sub_100038BE8(v2 + 3);
  static PersistentModel.createBackingData<A>()();
  sub_100060604((uint64_t)(v2 + 3), (uint64_t)&v6);
  sub_10006052C(&v6, v8);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)&v6);
  sub_100060604((uint64_t)(v2 + 3), (uint64_t)&v6);
  sub_10006052C(&v6, v8);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)&v6);
  sub_100060604((uint64_t)(v2 + 3), (uint64_t)&v6);
  sub_10006052C(&v6, v8);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)&v6);
  sub_100060604((uint64_t)(v2 + 3), (uint64_t)&v6);
  sub_10006052C(&v6, v8);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10000DB7C((uint64_t)&v6);
  *((_WORD *)v2 + 8) = 257;
  ObservationRegistrar.init()();
  *((_WORD *)v2 + 8) = 0;
  sub_100060604(a1, (uint64_t)&v6);
  swift_beginAccess();
  sub_10000DB7C((uint64_t)(v2 + 3));
  sub_10007C12C(&v6, (uint64_t)(v2 + 3));
  swift_endAccess();
  sub_10000DB7C(a1);
  return v2;
}

uint64_t sub_10007B2D8()
{
  sub_10000DB7C(v0 + 24);
  uint64_t v1 = v0 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10007B380()
{
  return type metadata accessor for SchemaV1.HistoryRecord();
}

uint64_t type metadata accessor for SchemaV1.HistoryRecord()
{
  uint64_t result = qword_1001561A8;
  if (!qword_1001561A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007B3D4()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SchemaV1.HistoryRecord._SwiftDataNoType()
{
  return &type metadata for SchemaV1.HistoryRecord._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for SchemaV1()
{
  return &type metadata for SchemaV1;
}

uint64_t sub_10007B4BC@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  swift_getKeyPath();
  sub_10007C144(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t sub_10007B5C8(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_10007AFD0(a1);
  return v2;
}

uint64_t sub_10007B608@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_100060604(v1 + 24, a1);
}

uint64_t sub_10007B654(long long *a1)
{
  uint64_t v3 = v1 + 24;
  swift_beginAccess();
  sub_10000DB7C(v3);
  sub_10007C12C(a1, v3);
  return swift_endAccess();
}

void (*sub_10007B6B0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess();
  sub_100060604(v1 + 24, (uint64_t)v3);
  return sub_10007B72C;
}

void sub_10007B72C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  if (a2)
  {
    uint64_t v4 = *(void *)(v2 + 128) + 24;
    sub_100060604(*a1, (uint64_t)v3);
    swift_beginAccess();
    sub_10000DB7C(v4);
    sub_10007C12C(v3, v4);
    swift_endAccess();
    sub_10000DB7C(v2);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 128) + 24;
    swift_beginAccess();
    sub_10000DB7C(v5);
    sub_10007C12C((long long *)v2, v5);
    swift_endAccess();
  }

  free((void *)v2);
}

Swift::Int sub_10007B800()
{
  return Hasher._finalize()();
}

uint64_t sub_10007B864()
{
  return PersistentModel.hash(into:)();
}

Swift::Int sub_10007B8D8()
{
  return Hasher._finalize()();
}

uint64_t sub_10007B938(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10007C144(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);

  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_10007B9B8()
{
  return sub_10007C144(&qword_100154C50, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
}

uint64_t sub_10007BA00()
{
  return sub_10007C144(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
}

uint64_t sub_10007BA48()
{
  return sub_10007C144(&qword_100154C58, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
}

uint64_t sub_10007BA90()
{
  return sub_10007C144(&qword_1001562A8, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
}

uint64_t sub_10007BAD8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10007803C(a1, a2);
}

uint64_t sub_10007BAF8()
{
  sub_100032FA0(&qword_1001562B0);
  type metadata accessor for Schema.PropertyMetadata();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100110030;
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  return v0;
}

uint64_t sub_10007BEF0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10007803C(a1, a2);
}

uint64_t sub_10007BF10()
{
  return sub_100078434();
}

uint64_t sub_10007BF44@<X0>(unsigned char *a1@<X8>)
{
  return sub_10007817C(a1);
}

uint64_t sub_10007BF64@<X0>(unsigned char *a1@<X8>)
{
  return sub_10007817C(a1);
}

uint64_t sub_10007BF88@<X0>(unsigned char *a1@<X8>)
{
  return sub_10007817C(a1);
}

uint64_t sub_10007BFA8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10007803C(a1, a2);
}

uint64_t sub_10007BFC8()
{
  return sub_100078434();
}

uint64_t sub_10007BFFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10007803C(a1, a2);
}

uint64_t sub_10007C01C()
{
  return sub_100078434();
}

double sub_10007C050@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100078604(a1, a2);
}

double sub_10007C070@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100078604(a1, a2);
}

uint64_t sub_10007C094()
{
  return sub_100078510();
}

uint64_t sub_10007C0BC()
{
  return sub_100078510();
}

uint64_t sub_10007C0E4()
{
  return sub_100078354();
}

uint64_t sub_10007C104()
{
  return sub_100078510();
}

uint64_t sub_10007C12C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10007C144(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007C18C()
{
  return sub_100078734();
}

uint64_t sub_10007C1B4()
{
  return sub_100078734();
}

uint64_t sub_10007C1DC()
{
  return sub_100078944();
}

uint64_t sub_10007C1F8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(&qword_100154B90);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007C25C()
{
  return sub_10007C18C();
}

uint64_t sub_10007C274()
{
  return sub_10007C1B4();
}

NSString sub_10007C28C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001610F8 = (uint64_t)result;
  return result;
}

NSString sub_10007C2C4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100161100 = (uint64_t)result;
  return result;
}

NSString sub_10007C2FC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100161110 = (uint64_t)result;
  return result;
}

NSString sub_10007C334()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100161118 = (uint64_t)result;
  return result;
}

uint64_t sub_10007C36C()
{
  swift_getKeyPath();
  sub_10007D3A8(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_10007D3A8(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  sub_10004B9E8();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v1) {
    return 0;
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t getEnumTagSinglePayload for HistoryRecordKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HistoryRecordKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *NSString result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007C664);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *NSString result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryRecordKey()
{
  return &type metadata for HistoryRecordKey;
}

void *sub_10007C69C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
    uint64_t v7 = a2[6];
    *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = a2[5];
    *(void *)(a1 + 48) = v7;
    uint64_t v8 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v8;
    uint64_t v9 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v9;
    uint64_t v10 = a2[12];
    uint64_t v11 = *(int *)(a3 + 52);
    uint64_t v16 = a1 + v11;
    uint64_t v17 = (uint64_t)a2 + v11;
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v10;
    uint64_t v12 = type metadata accessor for Date();
    unint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v16, v17, v12);
  }
  return v3;
}

uint64_t sub_10007C7F4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_10007C894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  uint64_t v10 = *(int *)(a3 + 52);
  uint64_t v14 = a1 + v10;
  uint64_t v15 = a2 + v10;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v14, v15, v11);
  return a1;
}

uint64_t sub_10007C99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 52);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_10007CAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(_OWORD *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v5 = *(int *)(a3 + 52);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_10007CB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 52);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_10007CC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007CCA4);
}

uint64_t sub_10007CCA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10007CD54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007CD68);
}

uint64_t sub_10007CD68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for GenericRecord()
{
  uint64_t result = qword_100156328;
  if (!qword_100156328) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007CE5C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10007CF14()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 33));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 34));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 80))
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 96)) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    goto LABEL_6;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 96)) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_6:
  type metadata accessor for GenericRecord();
  type metadata accessor for Date();
  sub_10007D3A8(&qword_100156390, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_10007D0E8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

Swift::Int sub_10007D0F4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007D138()
{
  return Hasher._finalize()();
}

uint64_t sub_10007D178()
{
  return sub_10007D3A8(&qword_100156380, (void (*)(uint64_t))type metadata accessor for GenericRecord);
}

unint64_t sub_10007D1C4()
{
  unint64_t result = qword_100156388;
  if (!qword_100156388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156388);
  }
  return result;
}

uint64_t sub_10007D218(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33)
    || *(unsigned __int8 *)(a1 + 34) != *(unsigned __int8 *)(a2 + 34)
    || (*(void *)(a1 + 40) != *(void *)(a2 + 40) || *(void *)(a1 + 48) != *(void *)(a2 + 48))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  if ((*(void *)(a1 + 56) != *(void *)(a2 + 56) || *(void *)(a1 + 64) != *(void *)(a2 + 64))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a2 + 80);
  if (v7)
  {
    if (!v8
      || (*(void *)(a1 + 72) != *(void *)(a2 + 72) || v7 != v8)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 96);
  uint64_t v10 = *(void *)(a2 + 96);
  if (v9)
  {
    if (v10
      && (*(void *)(a1 + 88) == *(void *)(a2 + 88) && v9 == v10
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      goto LABEL_35;
    }
    return 0;
  }
  if (v10) {
    return 0;
  }
LABEL_35:
  uint64_t v11 = *(int *)(type metadata accessor for GenericRecord() + 52);

  return static Date.== infix(_:_:)(a1 + v11, a2 + v11);
}

uint64_t sub_10007D3A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NotesFeatureFlags(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for NotesFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10007D4E4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotesFeatureFlags()
{
  return &type metadata for NotesFeatureFlags;
}

unint64_t sub_10007D520()
{
  unint64_t result = qword_100156398;
  if (!qword_100156398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156398);
  }
  return result;
}

uint64_t sub_10007D574()
{
  return 1;
}

Swift::Int sub_10007D57C()
{
  return Hasher._finalize()();
}

void sub_10007D5C0()
{
}

Swift::Int sub_10007D5E8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007D90C()
{
  Swift::Int result = sub_10001AA98((uint64_t)&off_1001494B0);
  static CalculatorButtonRepresentable.shiftableButtons = result;
  return result;
}

uint64_t *CalculatorButtonRepresentable.shiftableButtons.unsafeMutableAddressor()
{
  if (qword_100154518 != -1) {
    swift_once();
  }
  return &static CalculatorButtonRepresentable.shiftableButtons;
}

uint64_t static CalculatorButtonRepresentable.shiftableButtons.getter()
{
  return sub_10007DB44(&qword_100154518);
}

Swift::Int sub_10007D9A4()
{
  Swift::Int result = sub_10001AA98((uint64_t)&off_100149488);
  static CalculatorButtonRepresentable.alternateRPNButtons = result;
  return result;
}

uint64_t *CalculatorButtonRepresentable.alternateRPNButtons.unsafeMutableAddressor()
{
  if (qword_100154520 != -1) {
    swift_once();
  }
  return &static CalculatorButtonRepresentable.alternateRPNButtons;
}

uint64_t static CalculatorButtonRepresentable.alternateRPNButtons.getter()
{
  return sub_10007DB44(&qword_100154520);
}

Swift::Int sub_10007DA3C()
{
  Swift::Int result = sub_10001AA98((uint64_t)&off_1001495C0);
  static CalculatorButtonRepresentable.swappableButtons = result;
  return result;
}

uint64_t *CalculatorButtonRepresentable.swappableButtons.unsafeMutableAddressor()
{
  if (qword_100154528 != -1) {
    swift_once();
  }
  return &static CalculatorButtonRepresentable.swappableButtons;
}

uint64_t static CalculatorButtonRepresentable.swappableButtons.getter()
{
  return sub_10007DB44(&qword_100154528);
}

uint64_t *CalculatorButtonRepresentable.attributedTitledButtons.unsafeMutableAddressor()
{
  if (qword_100154530 != -1) {
    swift_once();
  }
  return &static CalculatorButtonRepresentable.attributedTitledButtons;
}

uint64_t static CalculatorButtonRepresentable.attributedTitledButtons.getter()
{
  return sub_10007DB44(&qword_100154530);
}

uint64_t sub_10007DB44(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t CalculatorButtonRepresentable.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_10007DB9C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s10Calculator0A19ButtonRepresentableO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10007DBC8(void *a1@<X8>)
{
  *a1 = *v1;
}

Calculator::CalculatorButtonRepresentable __swiftcall CalculatorButtonRepresentable.shiftedButton(isRPN:)(Swift::Bool isRPN)
{
  Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_exponentialBase2;
  switch(v1)
  {
    case Calculator_CalculatorButtonRepresentable_power:
      BOOL v4 = !isRPN;
      Calculator::CalculatorButtonRepresentable v5 = Calculator_CalculatorButtonRepresentable_power;
      goto LABEL_16;
    case Calculator_CalculatorButtonRepresentable_exponential:
      if (isRPN) {
        Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_power;
      }
      else {
        Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_exponentialBaseY;
      }
      break;
    case Calculator_CalculatorButtonRepresentable_exponentialBase10:
      return result;
    case Calculator_CalculatorButtonRepresentable_logarithmNatural:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_logarithm;
      break;
    case Calculator_CalculatorButtonRepresentable_logarithmBase10:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_logarithmBase2;
      break;
    case Calculator_CalculatorButtonRepresentable_sine:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_inverseSine;
      break;
    case Calculator_CalculatorButtonRepresentable_cosine:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_inverseCosine;
      break;
    case Calculator_CalculatorButtonRepresentable_tangent:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_inverseTangent;
      break;
    case Calculator_CalculatorButtonRepresentable_hyperbolicSine:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_inverseHyperbolicSine;
      break;
    case Calculator_CalculatorButtonRepresentable_hyperbolicCosine:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_inverseHyperbolicCosine;
      break;
    case Calculator_CalculatorButtonRepresentable_hyperbolicTangent:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_inverseHyperbolicTangent;
      break;
    case Calculator_CalculatorButtonRepresentable_exponentialBaseY:
      BOOL v4 = !isRPN;
      Calculator::CalculatorButtonRepresentable v5 = Calculator_CalculatorButtonRepresentable_exponential;
LABEL_16:
      if (v4) {
        Calculator::CalculatorButtonRepresentable result = v5;
      }
      else {
        Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_exponentialBaseY;
      }
      break;
    case Calculator_CalculatorButtonRepresentable_exponentialBase2:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_exponentialBase10;
      break;
    case Calculator_CalculatorButtonRepresentable_logarithm:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_logarithmNatural;
      break;
    case Calculator_CalculatorButtonRepresentable_logarithmBase2:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_logarithmBase10;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseSine:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_sine;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseCosine:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_cosine;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseTangent:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_tangent;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseHyperbolicSine:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_hyperbolicSine;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseHyperbolicCosine:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_hyperbolicCosine;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseHyperbolicTangent:
      Calculator::CalculatorButtonRepresentable result = Calculator_CalculatorButtonRepresentable_hyperbolicTangent;
      break;
    default:
      Calculator::CalculatorButtonRepresentable result = v1;
      break;
  }
  return result;
}

Calculator::CalculatorButtonRepresentable __swiftcall CalculatorButtonRepresentable.alternateRPNButton()()
{
  if (result > Calculator_CalculatorButtonRepresentable_cubeRoot)
  {
    if (result == Calculator_CalculatorButtonRepresentable_root)
    {
      return 37;
    }
    else if (result == Calculator_CalculatorButtonRepresentable_exponentialBaseY)
    {
      return 30;
    }
  }
  else if (result == Calculator_CalculatorButtonRepresentable_equals)
  {
    return 92;
  }
  else if (result == Calculator_CalculatorButtonRepresentable_power)
  {
    return 55;
  }
  return result;
}

Calculator::CalculatorButtonRepresentable __swiftcall CalculatorButtonRepresentable.editableButton(_:)(Swift::Bool a1)
{
  if (v1 == Calculator_CalculatorButtonRepresentable_allClear) {
    Calculator::CalculatorButtonRepresentable v2 = Calculator_CalculatorButtonRepresentable_delete;
  }
  else {
    Calculator::CalculatorButtonRepresentable v2 = v1;
  }
  if (v1 == Calculator_CalculatorButtonRepresentable_delete) {
    Calculator::CalculatorButtonRepresentable v3 = Calculator_CalculatorButtonRepresentable_allClear;
  }
  else {
    Calculator::CalculatorButtonRepresentable v3 = v1;
  }
  if (a1) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t sub_10007DF40(unsigned __int8 a1, double a2)
{
  uint64_t v2 = 0;
  int v3 = a1 - 27;
  uint64_t v4 = 0xE100000000000000;
  uint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 50;
  uint64_t v7 = 25710;
  uint64_t v8 = 0;
  switch(v3)
  {
    case 0:
      goto LABEL_16;
    case 1:
      uint64_t v2 = 0;
      uint64_t v8 = 0;
      uint64_t v5 = 0xE100000000000000;
      uint64_t v6 = 120;
      uint64_t v7 = 50;
      goto LABEL_16;
    case 2:
      uint64_t v2 = 0;
      uint64_t v8 = 0;
      uint64_t v5 = 0xE100000000000000;
      uint64_t v6 = 120;
      uint64_t v7 = 51;
      goto LABEL_16;
    case 3:
      uint64_t v2 = 0;
      uint64_t v8 = 0;
      uint64_t v5 = 0xE100000000000000;
      uint64_t v6 = 120;
      uint64_t v7 = 121;
      goto LABEL_16;
    case 4:
      uint64_t v2 = 0;
      uint64_t v8 = 0;
      uint64_t v4 = 0xA400000000000000;
      uint64_t v5 = 0xE100000000000000;
      uint64_t v6 = 2459016688;
      uint64_t v7 = 120;
      goto LABEL_16;
    case 5:
      uint64_t v2 = 0;
      uint64_t v8 = 0;
      uint64_t v4 = 0xE200000000000000;
      uint64_t v5 = 0xE100000000000000;
      uint64_t v6 = 12337;
      uint64_t v7 = 120;
      goto LABEL_16;
    case 12:
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      uint64_t v4 = 0xE300000000000000;
      uint64_t v8 = 0xE200000000000000;
      uint64_t v2 = 12337;
      goto LABEL_12;
    case 28:
      uint64_t v2 = 0;
      uint64_t v8 = 0;
      uint64_t v5 = 0xE100000000000000;
      uint64_t v6 = 121;
      uint64_t v7 = 120;
      goto LABEL_16;
    case 29:
      uint64_t v2 = 0;
      uint64_t v8 = 0;
      uint64_t v5 = 0xE100000000000000;
      uint64_t v6 = 50;
      uint64_t v7 = 120;
      goto LABEL_16;
    case 30:
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      uint64_t v4 = 0xE300000000000000;
      uint64_t v8 = 0xE100000000000000;
      uint64_t v2 = 121;
      goto LABEL_12;
    case 31:
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      uint64_t v4 = 0xE300000000000000;
      uint64_t v8 = 0xE100000000000000;
      uint64_t v2 = 50;
LABEL_12:
      uint64_t v6 = 6778732;
      goto LABEL_16;
    case 56:
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      uint64_t v4 = 0xE400000000000000;
      uint64_t v8 = 0xE100000000000000;
      uint64_t v2 = 56;
      goto LABEL_15;
    case 57:
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      uint64_t v4 = 0xE400000000000000;
      uint64_t v8 = 0xE200000000000000;
      uint64_t v2 = 13873;
LABEL_15:
      uint64_t v6 = 1885957222;
LABEL_16:
      uint64_t v2 = (uint64_t)sub_1000E95A0(a2, v6, v4, v7, v5, v2, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t sub_10007E200(unsigned __int8 a1)
{
  int v2 = a1 - 28;
  uint64_t result = 17733;
  switch(v2)
  {
    case 0:
      return 12894;
    case 1:
      return 13150;
    case 2:
    case 27:
      return 94;
    case 3:
      return 24165;
    case 4:
      return 6172721;
    case 10:
      return 2649708;
    case 11:
      return 0x283031676F6CLL;
    case 12:
      return 33;
    case 13:
      return 678324595;
    case 14:
      return 678653795;
    case 15:
      return 678322548;
    case 17:
      return result;
    case 19:
      return 0x28686E6973;
    case 20:
      return 0x2868736F63;
    case 21:
      return 0x28686E6174;
    case 28:
      return 24114;
    case 29:
      return 0x28A7B5E1676F6CLL;
    case 30:
      return 0x2832676F6CLL;
    case 31:
      return 0xB9C2BB81E26E6973;
    case 32:
      unsigned int v4 = -495751325;
      return v4 | 0xB9C2BB8100000000;
    case 33:
      unsigned int v4 = -496082572;
      return v4 | 0xB9C2BB8100000000;
    case 34:
      return 0xC2BB81E2686E6973;
    case 35:
      unsigned int v5 = 1752395619;
      goto LABEL_27;
    case 36:
      unsigned int v5 = 1752064372;
LABEL_27:
      uint64_t result = v5 | 0xC2BB81E200000000;
      break;
    default:
      uint64_t result = sub_100023BE4(0, a1);
      break;
  }
  return result;
}

unint64_t _s10Calculator0A19ButtonRepresentableO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 0x5D) {
    return 93;
  }
  return result;
}

uint64_t destroy for SectionHeaderView()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SectionHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SectionHeaderView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for SectionHeaderView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SectionHeaderView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionHeaderView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionHeaderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionHeaderView()
{
  return &type metadata for SectionHeaderView;
}

uint64_t sub_10007E704()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_10007E720@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  __chkstk_darwin(v4 - 8);
  if (*(unsigned char *)(v1 + 32))
  {
    swift_bridgeObjectRetain();
    LocalizedStringResource.init(stringLiteral:)();
    *(void *)&long long v36 = Text.init(_:)();
    *((void *)&v36 + 1) = v9;
    *(void *)&long long v37 = v10 & 1;
    *((void *)&v37 + 1) = v11;
    char v38 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 8);
    *(void *)&long long v24 = *(void *)v1;
    *((void *)&v24 + 1) = v5;
    sub_100023B24();
    swift_bridgeObjectRetain();
    *(void *)&long long v36 = Text.init<A>(_:)();
    *((void *)&v36 + 1) = v7;
    *(void *)&long long v37 = v6 & 1;
    *((void *)&v37 + 1) = v8;
    char v38 = 1;
  }
  _ConditionalContent<>.init(storage:)();
  uint64_t v12 = v24;
  char v13 = v25;
  uint64_t v14 = *(void *)(v1 + 24);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = *(void *)(v2 + 16);
  uint64_t v16 = *((void *)&v24 + 1);
  long long v36 = v24;
  long long v37 = v25;
  char v38 = v26;
  uint64_t v39 = KeyPath;
  uint64_t v40 = v14;
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = v15;
  swift_retain();
  swift_retain();
  static Alignment.leading.getter();
  sub_1000C3104(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v24, 0.0, 1, 0.0, 1);
  sub_10007E9AC(v12, v16, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v17 = v33;
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 144) = v17;
  *(_OWORD *)(a1 + 16sub_100102B8C(2, 18, 1, 0) = v34;
  *(void *)(a1 + 176) = v35;
  long long v18 = v29;
  *(_OWORD *)(a1 + 64) = v28;
  *(_OWORD *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v18;
  long long v19 = v31;
  *(_OWORD *)(a1 + 96) = v30;
  *(_OWORD *)(a1 + 112) = v19;
  long long v20 = v25;
  *(_OWORD *)a1 = v24;
  *(_OWORD *)(a1 + 16) = v20;
  double result = *(double *)&v26;
  long long v22 = v27;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 48) = v22;
  return result;
}

uint64_t sub_10007E9AC(uint64_t a1, uint64_t a2, char a3)
{
  sub_1000356E0(a1, a2, a3 & 1);

  return swift_bridgeObjectRelease();
}

unint64_t sub_10007E9EC()
{
  unint64_t result = qword_1001563B0;
  if (!qword_1001563B0)
  {
    sub_1000317D8(&qword_1001563B8);
    sub_10007EA68();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001563B0);
  }
  return result;
}

unint64_t sub_10007EA68()
{
  unint64_t result = qword_1001563C0;
  if (!qword_1001563C0)
  {
    sub_1000317D8(&qword_1001563C8);
    sub_10007EAF4();
    sub_10007EBF4((unint64_t *)&qword_1001557B8, &qword_1001557C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001563C0);
  }
  return result;
}

unint64_t sub_10007EAF4()
{
  unint64_t result = qword_1001563D0;
  if (!qword_1001563D0)
  {
    sub_1000317D8(&qword_1001563D8);
    sub_10007EB80();
    sub_10007EBF4(&qword_100155410, &qword_100155418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001563D0);
  }
  return result;
}

unint64_t sub_10007EB80()
{
  unint64_t result = qword_1001563E0;
  if (!qword_1001563E0)
  {
    sub_1000317D8(&qword_1001563E8);
    sub_100023B78();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001563E0);
  }
  return result;
}

uint64_t sub_10007EBF4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for HistoryDeletionConfirmationView()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for HistoryDeletionConfirmationView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HistoryDeletionConfirmationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for HistoryDeletionConfirmationView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HistoryDeletionConfirmationView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryDeletionConfirmationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryDeletionConfirmationView()
{
  return &type metadata for HistoryDeletionConfirmationView;
}

uint64_t sub_10007EE8C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007EEA8()
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v0 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v2 = v1;
  char v4 = v3 & 1;
  sub_100032FA0(&qword_1001555B8);
  Binding.projectedValue.getter();
  sub_100032FA0(&qword_100156400);
  sub_100032FA0(&qword_100156408);
  sub_100040BE4(&qword_100156410, &qword_100156400);
  sub_100040BE4(&qword_100156418, &qword_100156408);
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)();
  swift_release();
  swift_release();
  sub_1000356E0(v0, v2, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007F09C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  long long v53 = a2;
  uint64_t v3 = type metadata accessor for KeyEquivalent();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = (void (*)(char *, uint64_t))v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100032FA0(&qword_1001555E8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100032FA0(&qword_1001555F0);
  uint64_t v43 = *(void *)(v48 - 8);
  uint64_t v9 = v43;
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v13 = (char *)&v42 - v12;
  uint64_t v49 = sub_100032FA0(&qword_100156420);
  uint64_t v55 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  long long v54 = (char *)&v42 - v17;
  static ButtonRole.destructive.getter();
  uint64_t v18 = type metadata accessor for ButtonRole();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v46 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
  uint64_t v47 = v19 + 56;
  v46(v8, 0, 1, v18);
  uint64_t v20 = *(void *)(a1 + 8);
  v58[0] = *(void *)a1;
  uint64_t v21 = *(void *)(a1 + 48);
  uint64_t v44 = v20;
  uint64_t v45 = v21;
  uint64_t v22 = swift_allocObject();
  long long v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v22 + 32) = v23;
  *(_OWORD *)(v22 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v22 + 64) = *(void *)(a1 + 48);
  uint64_t v57 = a1;
  sub_100025ED0((uint64_t)v58);
  swift_retain();
  swift_retain();
  Button.init(role:action:label:)();
  static KeyEquivalent.delete.getter();
  EventModifiers.init(rawValue:)();
  sub_100040BE4(&qword_100156428, &qword_1001555F0);
  uint64_t v24 = v48;
  View.keyboardShortcut(_:modifiers:)();
  (*(void (**)(char *, void))(v50 + 8))(v5, v51);
  long long v25 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v50 = v9 + 8;
  uint64_t v51 = v25;
  v25(v13, v24);
  long long v27 = v54;
  uint64_t v26 = v55;
  uint64_t v28 = v49;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v15, v49);
  static ButtonRole.cancel.getter();
  v46(v8, 0, 1, v18);
  uint64_t v29 = swift_allocObject();
  long long v30 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v29 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v29 + 32) = v30;
  *(_OWORD *)(v29 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v29 + 64) = *(void *)(a1 + 48);
  uint64_t v56 = a1;
  sub_100025ED0((uint64_t)v58);
  swift_retain();
  swift_retain();
  Button.init(role:action:label:)();
  long long v31 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  long long v32 = v27;
  uint64_t v33 = v28;
  v31(v15, v32, v28);
  long long v34 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  uint64_t v35 = v52;
  v34(v52, v13, v24);
  long long v36 = v53;
  v31(v53, v15, v33);
  uint64_t v37 = sub_100032FA0(&qword_100156430);
  char v38 = v35;
  v34(&v36[*(int *)(v37 + 48)], v35, v24);
  uint64_t v39 = v51;
  v51(v13, v24);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v55 + 8);
  v40(v54, v33);
  v39(v38, v24);
  return ((uint64_t (*)(char *, uint64_t))v40)(v15, v33);
}

uint64_t sub_10007F650(uint64_t a1)
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_10007F6B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10007F8D8((uint64_t *)(a1 + 24), (uint64_t)v7);
  sub_10007F8D8(v7, (uint64_t)v8);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  *(void *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_10007F768@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10007F7D8()
{
  return sub_10007EEA8();
}

uint64_t sub_10007F81C@<X0>(char *a1@<X8>)
{
  return sub_10007F09C(*(void *)(v1 + 16), a1);
}

uint64_t sub_10007F824@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_100077704(*(void *)(*(void *)(v1 + 16) + 24), *(unsigned char *)(*(void *)(v1 + 16) + 32));
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  *(void *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_10007F868()
{
  return sub_10007F650(v0 + 16);
}

uint64_t sub_10007F870@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F6B4(*(void *)(v1 + 16), a1);
}

uint64_t sub_10007F87C()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_10007F8D0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F768(a1);
}

uint64_t sub_10007F8D8(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10007F934()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007FA10()
{
  uint64_t result = static Color.secondary.getter();
  qword_100161150 = result;
  return result;
}

uint64_t sub_10007FA30(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154618, &qword_100161220, &qword_100161158);
}

uint64_t sub_10007FA5C(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154548, &qword_100161150, &qword_100161160);
}

uint64_t sub_10007FA88()
{
  uint64_t result = static Color.primary.getter();
  qword_100161168 = result;
  return result;
}

uint64_t sub_10007FAA8(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154538, &qword_100161140, &qword_100161170);
}

uint64_t sub_10007FAD4()
{
  uint64_t result = static Color.white.getter();
  qword_100161178 = result;
  return result;
}

uint64_t sub_10007FAF4(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154538, &qword_100161140, &qword_100161180);
}

uint64_t sub_10007FB20()
{
  uint64_t result = static Color.white.getter();
  qword_100161188 = result;
  return result;
}

uint64_t sub_10007FB40(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_1001545E0, &qword_1001611E8, &qword_100161190);
}

uint64_t sub_10007FB6C(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154538, &qword_100161140, &qword_100161198);
}

uint64_t sub_10007FB98()
{
  uint64_t result = static Color.secondary.getter();
  qword_1001611A0 = result;
  return result;
}

uint64_t sub_10007FBB8(uint64_t a1)
{
  return sub_10007FD10(a1, &qword_1001611A8);
}

uint64_t sub_10007FBD8()
{
  uint64_t result = static Color.secondary.getter();
  qword_1001611B0 = result;
  return result;
}

uint64_t sub_10007FBF8()
{
  uint64_t result = static Color.primary.getter();
  qword_1001611B8 = result;
  return result;
}

uint64_t sub_10007FC18()
{
  uint64_t result = static Color.secondary.getter();
  qword_1001611C0 = result;
  return result;
}

uint64_t sub_10007FC38()
{
  uint64_t result = static Color.clear.getter();
  qword_1001611C8 = result;
  return result;
}

uint64_t sub_10007FC58()
{
  uint64_t result = static Color.red.getter();
  qword_1001611D0 = result;
  return result;
}

uint64_t sub_10007FC78(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_1001545E8, &qword_1001611F0, &qword_1001611D8);
}

uint64_t sub_10007FCA4()
{
  uint64_t result = static Color.secondary.getter();
  qword_1001611E0 = result;
  return result;
}

uint64_t sub_10007FCC4(uint64_t a1)
{
  return sub_10007FFD0(a1, (SEL *)&selRef_tertiaryLabelColor, &qword_1001611E8);
}

uint64_t sub_10007FCD8(uint64_t a1)
{
  return sub_10007FE54(a1, &qword_1001611F8);
}

uint64_t sub_10007FCEC(uint64_t a1)
{
  return sub_10007FD10(a1, &qword_100161208);
}

uint64_t sub_10007FD10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Color.RGBColorSpace();
  double v4 = __chkstk_darwin(v3);
  (*(void (**)(char *, void, double))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v4);
  uint64_t result = Color.init(_:red:green:blue:opacity:)();
  *a2 = result;
  return result;
}

uint64_t sub_10007FE04(uint64_t a1)
{
  return sub_10007FE54(a1, &qword_100161218);
}

uint64_t sub_10007FE18(uint64_t a1)
{
  return sub_100008350(a1, &qword_100161220);
}

uint64_t sub_10007FE2C(uint64_t a1)
{
  return sub_10007FE54(a1, &qword_100161228);
}

uint64_t sub_10007FE44(uint64_t a1)
{
  return sub_10007FE54(a1, &qword_100161230);
}

uint64_t sub_10007FE54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Color.RGBColorSpace();
  double v4 = __chkstk_darwin(v3);
  (*(void (**)(char *, void, double))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v4);
  uint64_t result = Color.init(_:white:opacity:)();
  *a2 = result;
  return result;
}

uint64_t sub_10007FF30(uint64_t a1)
{
  return sub_10007FFD0(a1, (SEL *)&selRef_secondarySystemFillColor, &qword_100161238);
}

uint64_t sub_10007FF44(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154618, &qword_100161220, &qword_100161240);
}

uint64_t sub_10007FF70()
{
  uint64_t result = static Color.gray.getter();
  qword_100161248 = result;
  return result;
}

uint64_t sub_10007FF90(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154538, &qword_100161140, &qword_100161250);
}

uint64_t sub_10007FFBC(uint64_t a1)
{
  return sub_10007FFD0(a1, (SEL *)&selRef_separatorColor, &qword_100161258);
}

uint64_t sub_10007FFD0(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4 = [self *a2];
  uint64_t result = Color.init(uiColor:)();
  *a3 = result;
  return result;
}

uint64_t sub_100080018(uint64_t a1)
{
  return sub_1000390C4(a1, &qword_100154550, &qword_100161158, &qword_100161260);
}

uint64_t sub_100080044()
{
  uint64_t result = static Color.clear.getter();
  qword_100161268 = result;
  return result;
}

uint64_t sub_100080064()
{
  sub_100037384();
  EnvironmentValues.subscript.getter();
  return v1;
}

uint64_t EnvironmentValues.isModeMenuPresented.getter()
{
  sub_100037384();
  EnvironmentValues.subscript.getter();
  sub_100032FA0(&qword_100154830);
  Binding.wrappedValue.getter();
  swift_release();
  swift_release();
  return v1;
}

ValueMetadata *type metadata accessor for ModeMenuPresentationKey()
{
  return &type metadata for ModeMenuPresentationKey;
}

uint64_t assignWithCopy for HistoryViewFirstLaunch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for HistoryViewFirstLaunch(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t sub_10008021C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100080314(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed, a2);
}

uint64_t sub_100080230()
{
  return swift_release();
}

uint64_t sub_100080300@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100080314(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed, a2);
}

uint64_t sub_100080314@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_100082AE8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a3 = *(unsigned char *)(v5 + *a2);
  return result;
}

uint64_t sub_1000803C8()
{
  return swift_release();
}

uint64_t sub_100080498@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100080314(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed, a2);
}

uint64_t sub_1000804AC()
{
  return swift_release();
}

uint64_t sub_10008057C(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100080B04(a1, (uint64_t)sub_100080AB4, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_100080608@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v21[1] = a1;
  uint64_t v22 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = type metadata accessor for AttributedString.FormattingOptions();
  __chkstk_darwin(v24);
  long long v23 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100032FA0(&qword_1001552B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  v21[0] = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AttributedString.InterpolationOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v13 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v14._uint64_t countAndFlagsBits = 0x202C7475706E49;
  v14._object = (void *)0xE700000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100082AE8(&qword_100156520, (void (*)(uint64_t))&type metadata accessor for AttributedString.InterpolationOptions);
  sub_100032FA0(&qword_100156528);
  sub_100082B30(&qword_100156530, &qword_100156528);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v10 + 8);
  v15(v12, v9);
  v16._uint64_t countAndFlagsBits = 0x746C75736572202CLL;
  v16._object = (void *)0xEA0000000000202CLL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  uint64_t v26 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  v15(v12, v9);
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  String.LocalizationValue.init(stringInterpolation:)();
  uint64_t v18 = type metadata accessor for Locale();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v6, v22, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v6, 0, 1, v18);
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100082AE8(&qword_1001552C8, (void (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions);
  sub_100032FA0(&qword_1001552D0);
  sub_100082B30(&qword_1001552D8, &qword_1001552D0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  return AttributedString.init(localized:options:table:bundle:locale:comment:)();
}

uint64_t type metadata accessor for Utilities()
{
  return self;
}

id sub_100080AB4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  sub_10000DBCC((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;

  return v4;
}

uint64_t sub_100080B04(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v46 = a1;
  uint64_t v47 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v48 = v8;
  uint64_t v49 = 0;
  uint64_t v50 = v11 & v9;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100080E30((uint64_t)&v44);
  uint64_t v12 = v44;
  if (!v44) {
    goto LABEL_27;
  }
  sub_10001CFF8(v45, v43);
  uint64_t v13 = *(void **)a5;
  unint64_t v15 = sub_10001D008((uint64_t)v12);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10007600C();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    long long v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(void *)(v23[6] + 8 * v15) = v12;
    sub_10001CFF8(v43, (_OWORD *)(v23[7] + 32 * v15));
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v23[2] = v26;
LABEL_16:
    sub_100080E30((uint64_t)&v44);
    for (unint64_t i = v44; v44; unint64_t i = v44)
    {
      sub_10001CFF8(v45, v43);
      uint64_t v29 = *(void **)a5;
      unint64_t v31 = sub_10001D008((uint64_t)i);
      uint64_t v32 = v29[2];
      BOOL v33 = (v30 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_28;
      }
      char v35 = v30;
      if (v29[3] < v34)
      {
        sub_100074D90(v34, 1);
        unint64_t v36 = sub_10001D008((uint64_t)i);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_30;
        }
        unint64_t v31 = v36;
      }
      if (v35)
      {
        sub_10000DBCC((uint64_t)v43, (uint64_t)v42);
        sub_10000DB7C((uint64_t)v43);

        uint64_t v28 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v31);
        sub_10000DB7C((uint64_t)v28);
        sub_10001CFF8(v42, v28);
      }
      else
      {
        char v38 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(void *)(v38[6] + 8 * v31) = i;
        sub_10001CFF8(v43, (_OWORD *)(v38[7] + 32 * v31));
        uint64_t v39 = v38[2];
        BOOL v25 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v25) {
          goto LABEL_29;
        }
        _DWORD v38[2] = v40;
      }
      sub_100080E30((uint64_t)&v44);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10004CBE8();
    return swift_release();
  }
  sub_100074D90(v18, a4 & 1);
  unint64_t v20 = sub_10001D008((uint64_t)v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_10000DBCC((uint64_t)v43, (uint64_t)v42);
    sub_10000DB7C((uint64_t)v43);

    uint64_t v22 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v15);
    sub_10000DB7C((uint64_t)v22);
    sub_10001CFF8(v42, v22);
    goto LABEL_16;
  }
LABEL_30:
  type metadata accessor for CalculateKey(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100080E30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v10);
    sub_10000DBCC(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(void *)&v24[0] = v11;
    id v12 = v11;
    goto LABEL_23;
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v10 = __clz(__rbit64(v15)) + (v13 << 6);
      int64_t v7 = v13;
      goto LABEL_3;
    }
    int64_t v16 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        int64_t v13 = v16;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        unint64_t v15 = *(void *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          int64_t v13 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v16 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (v15) {
            goto LABEL_10;
          }
          int64_t v13 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            unint64_t v15 = *(void *)(v4 + 8 * v13);
            if (v15) {
              goto LABEL_7;
            }
            int64_t v7 = v14 - 1;
            int64_t v17 = v5 + 6;
            while (v14 != v17)
            {
              unint64_t v15 = *(void *)(v4 + 8 * v17++);
              if (v15)
              {
                int64_t v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *unsigned __int8 v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v18 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10002D9D0((uint64_t)v24, (uint64_t)v22, &qword_100156508);
  if (*(void *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    uint64_t v21 = v23;
    v18(v20);
    return sub_100032F44((uint64_t)v20, &qword_100156510);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void *sub_100081010()
{
  if (!os_variant_has_internal_diagnostics()) {
    return _swiftEmptyArrayStorage;
  }
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100161370;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringForKey:v1];

  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100032FA0(&qword_1001564F0);
  type metadata accessor for Locale();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10010DCB0;
  Locale.init(identifier:)();
  return (void *)v3;
}

uint64_t sub_10008117C()
{
  uint64_t v0 = type metadata accessor for UUID();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for CalculateExpression.Base();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100032FA0(&qword_1001564E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100110A40;
  uint64_t v6 = (void *)CalculateKeyLocales;
  *(void *)(inited + 32) = CalculateKeyLocales;
  swift_bridgeObjectRetain();
  id v7 = v6;
  unint64_t v8 = sub_100081010();
  uint64_t v9 = sub_100032FA0(&qword_1001564F8);
  *(void *)(inited + 4sub_100102B8C(2, 18, 1, 0) = v8;
  unint64_t v10 = (void *)CalculateKeyAllowPartialExpressions;
  *(void *)(inited + 64) = v9;
  *(void *)(inited + 72) = v10;
  id v11 = objc_allocWithZone((Class)NSNumber);
  id v12 = v10;
  id v13 = [v11 initWithBool:1];
  *(void *)(inited + 104) = sub_10001CE8C(0, (unint64_t *)&qword_100156500);
  *(void *)(inited + 8sub_100102B8C(2, 18, 1, 0) = v13;
  sub_10001D214(inited);
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, enum case for CalculateExpression.Base.base10(_:), v1);
  UUID.init()();
  type metadata accessor for CalculateExpression();
  swift_allocObject();
  CalculateExpression.init(_:options:base:id:)();
  sub_100032FA0(&qword_1001564F0);
  type metadata accessor for Locale();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10010DCB0;
  Locale.init(identifier:)();
  CalculateExpression.locales.setter();
  uint64_t v14 = CalculateExpression.expression.getter();
  swift_release();
  return v14;
}

uint64_t sub_100081468(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v1 = type metadata accessor for UUID();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for CalculateExpression.Base();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032FA0(&qword_1001564E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100110A50;
  id v7 = (void *)CalculateKeyLocales;
  *(void *)(inited + 32) = CalculateKeyLocales;
  sub_100032FA0(&qword_1001564F0);
  type metadata accessor for Locale();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10010DCB0;
  id v9 = v7;
  Locale.init(identifier:)();
  uint64_t v10 = sub_100032FA0(&qword_1001564F8);
  *(void *)(inited + 4sub_100102B8C(2, 18, 1, 0) = v8;
  id v11 = (void *)CalculateKeyAllowPartialExpressions;
  *(void *)(inited + 64) = v10;
  *(void *)(inited + 72) = v11;
  id v12 = objc_allocWithZone((Class)NSNumber);
  id v13 = v11;
  id v14 = [v12 initWithBool:1 v24];
  uint64_t v15 = sub_10001CE8C(0, (unint64_t *)&qword_100156500);
  *(void *)(inited + 8sub_100102B8C(2, 18, 1, 0) = v14;
  int64_t v16 = (void *)CalculateKeyScientificNotationFormat;
  *(void *)(inited + 104) = v15;
  *(void *)(inited + 112) = v16;
  id v17 = objc_allocWithZone((Class)NSNumber);
  id v18 = v16;
  id v19 = [v17 initWithUnsignedInteger:0];
  *(void *)(inited + 144) = v15;
  *(void *)(inited + 12sub_100102B8C(2, 18, 1, 0) = v19;
  unint64_t v20 = sub_10001D214(inited);
  uint64_t v21 = swift_bridgeObjectRetain();
  sub_10008057C(v21, v20);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for CalculateExpression.Base.base10(_:), v2);
  swift_bridgeObjectRetain();
  UUID.init()();
  type metadata accessor for CalculateExpression();
  swift_allocObject();
  uint64_t v22 = CalculateExpression.init(_:options:base:id:)();
  sub_100081010();
  CalculateExpression.locales.setter();
  return v22;
}

uint64_t sub_1000817B0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100080314(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed, a2);
}

uint64_t sub_1000817DC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100080314(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed, a2);
}

uint64_t sub_100081808@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100080314(a1, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed, a2);
}

void sub_100081834(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4)
{
  if (a2)
  {
    sub_10008117C();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (qword_100154760 != -1) {
    swift_once();
  }
  id v7 = (void *)qword_100161370;
  if (v6)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v7 setObject:v8 forKey:v9];
  swift_unknownObjectRelease();

  uint64_t v10 = (void *)qword_100161370;
  if (a4) {
    a4 = String._bridgeToObjectiveC()();
  }
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 setObject:a4 forKey:v11];
  swift_unknownObjectRelease();
}

void sub_1000819B0()
{
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100161370;
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setURL:0 forKey:v1];

  uint64_t v2 = (void *)qword_100161370;
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setURL:0 forKey:v3];
}

void sub_100081AA8(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_1001550C0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v7 = (char *)v37 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v37 - v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v17 = (char *)v37 - v16;
  sub_100082A80(a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100032F44((uint64_t)v10, &qword_1001550C0);
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100021598(v18, (uint64_t)qword_100161340);
    sub_100082A80(a1, (uint64_t)v7);
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      sub_100082A80((uint64_t)v7, (uint64_t)v4);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v38 = sub_10000DAA8(v22, v23, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100032F44((uint64_t)v7, &qword_1001550C0);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Can't open URL: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100032F44((uint64_t)v7, &qword_1001550C0);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100021598(v24, (uint64_t)qword_100161340);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      long long v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)long long v27 = 136315138;
      v37[1] = v27 + 4;
      sub_100082AE8(&qword_100155278, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v38 = sub_10000DAA8(v28, v29, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v30 = *(void (**)(char *, uint64_t))(v12 + 8);
      v30(v14, v11);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "opening URL: %s", v27, 0xCu);
      swift_arrayDestroy();
      unint64_t v31 = v30;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v31 = *(void (**)(char *, uint64_t))(v12 + 8);
      v31(v14, v11);
    }

    id v32 = [self sharedApplication];
    URL._bridgeToObjectiveC()(v33);
    char v35 = v34;
    sub_100070CA4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for OpenExternalURLOptionsKey(0);
    sub_100082AE8(&qword_1001548B8, type metadata accessor for OpenExternalURLOptionsKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v32 openURL:v35 options:isa completionHandler:0];

    v31(v17, v11);
  }
}

uint64_t sub_1000820C8()
{
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100161370;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_10002D9D0((uint64_t)v6, (uint64_t)v7, &qword_100155208);
  if (!v8)
  {
    sub_100032F44((uint64_t)v7, &qword_100155208);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  sub_10001D214((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = sub_100081468(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

id sub_100082234()
{
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100161370;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10002D9D0((uint64_t)v9, (uint64_t)v10, &qword_100155208);
  if (!v10[3])
  {
    sub_100032F44((uint64_t)v10, &qword_100155208);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (qword_1001546C8 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1001612E0;
  swift_getKeyPath();
  v10[0] = v3;
  sub_100082AE8((unint64_t *)&qword_100155238, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v4 = *(id *)(v3 + 16);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 findUnitWithName:v5];

  if (v6)
  {
    id v7 = [v6 shortName];

    id v6 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v6;
}

void sub_1000824AC()
{
  id v42 = [self sharedApplication];
  id v0 = [v42 shortcutItems];
  if (!v0)
  {
    [v42 setShortcutItems:0];
    swift_bridgeObjectRelease();
    Class isa = (Class)v42;
    goto LABEL_28;
  }
  NSString v1 = v0;
  sub_10001CE8C(0, (unint64_t *)&qword_100156518);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v43 = v2;
  unint64_t v3 = v2 >> 62;
  if (v2 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_4:
      uint64_t v5 = 0;
      while (1)
      {
        id v6 = (v2 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v2 + 8 * v5 + 32);
        id v7 = v6;
        id v8 = [v6 type];
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v11 = v10;

        if (v9 == 0x7473614C79706F63 && v11 == 0xEE00746C75736552) {
          break;
        }
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v13) {
          goto LABEL_19;
        }
        uint64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        ++v5;
        if (v14 == v4) {
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();

LABEL_19:
      swift_bridgeObjectRelease();
      uint64_t v16 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
      }
      else if (!v3)
      {
        if (v16 == *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_22;
        }
LABEL_39:
        uint64_t v20 = v5 + 5;
        while (1)
        {
          unint64_t v21 = v20 - 4;
          if ((v2 & 0xC000000000000001) != 0)
          {
            id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v21 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
              return;
            }
            if (v21 >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_80;
            }
            id v22 = *(id *)(v2 + 8 * v20);
          }
          unint64_t v23 = v22;
          id v24 = [v22 type];
          uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;

          if (v25 == 0x7473614C79706F63 && v27 == 0xEE00746C75736552)
          {

            swift_bridgeObjectRelease();
          }
          else
          {
            char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();

            swift_bridgeObjectRelease();
            if ((v29 & 1) == 0)
            {
              if (v21 != v5)
              {
                if ((v2 & 0xC000000000000001) != 0)
                {
                  uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  if (v5 < 0) {
                    goto LABEL_83;
                  }
                  unint64_t v30 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (v5 >= v30) {
                    goto LABEL_84;
                  }
                  id v31 = *(id *)(v2 + 8 * v5 + 32);
                  if ((v21 & 0x8000000000000000) != 0) {
                    goto LABEL_85;
                  }
                  if (v21 >= v30) {
                    goto LABEL_86;
                  }
                  uint64_t v32 = (uint64_t)v31;
                  id v33 = *(id *)(v2 + 8 * v20);
                }
                id v34 = v33;
                if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                  || (v2 & 0x8000000000000000) != 0
                  || (v2 & 0x4000000000000000) != 0)
                {
                  unint64_t v2 = sub_1000A5940(v2);
                  unint64_t v43 = v2;
                }
                char v35 = *(void **)((v2 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
                *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x2sub_100102B8C(2, 18, 1, 0) = v34;

                specialized Array._endMutation()();
                uint64_t v36 = v43;
                if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                  || (v43 & 0x8000000000000000) != 0
                  || (v43 & 0x4000000000000000) != 0)
                {
                  uint64_t v36 = sub_1000A5940(v43);
                  unint64_t v43 = v36;
                }
                if ((v21 & 0x8000000000000000) != 0) {
                  goto LABEL_87;
                }
                uint64_t v37 = v36 & 0xFFFFFFFFFFFFFF8;
                if (v21 >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_88;
                }
                uint64_t v38 = *(void **)(v37 + 8 * v20);
                *(void *)(v37 + 8 * v2sub_100102B8C(2, 18, 1, 0) = v32;

                specialized Array._endMutation()();
              }
              if (__OFADD__(v5++, 1)) {
                goto LABEL_82;
              }
            }
          }
          uint64_t v40 = v20 - 3;
          if (__OFADD__(v21, 1)) {
            goto LABEL_81;
          }
          unint64_t v2 = v43;
          if (v43 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v41 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v20;
          if (v40 == v41) {
            goto LABEL_22;
          }
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v16 == v19) {
        goto LABEL_22;
      }
      goto LABEL_39;
    }
  }
LABEL_15:
  swift_bridgeObjectRelease();
  if (v3) {
    goto LABEL_36;
  }
  uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_22:
  while (!(v2 >> 62))
  {
    uint64_t v17 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17 >= v5) {
      goto LABEL_24;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v17 < v5) {
    goto LABEL_35;
  }
LABEL_24:
  sub_1000A8200(v5, v17);
  if (v43)
  {
    v18.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.Class isa = 0;
  }
  [v42 setShortcutItems:v18.super.isa];

  Class isa = v18.super.isa;
LABEL_28:
}

uint64_t sub_100082A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_1001550C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100082AE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100082B30(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 initializeWithTake for CalculatorKeypadLayout(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CalculatorKeypadLayout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  return a1;
}

unint64_t sub_100082BE8()
{
  unint64_t result = qword_100156538;
  if (!qword_100156538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156538);
  }
  return result;
}

void (*sub_100082C40(void *a1))(void *a1)
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100082CB0;
}

void sub_100082CB0(void *a1)
{
  NSString v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

id sub_100082E68()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return [super dealloc];
}

uint64_t sub_100082E9C(void *a1)
{
  id v2 = [a1 type];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (v3 == 0x7473614C79706F63 && v5 == 0xEE00746C75736552)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      if (qword_100154750 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100021598(v8, (uint64_t)qword_100161340);
      id v9 = a1;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136315138;
        id v13 = [v9 debugDescription];
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v16 = v15;

        sub_10000DAA8(v14, v16, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error: Unkown shortcutItem initiated: %s", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  if (sub_1000820C8())
  {
    uint64_t v17 = CalculateExpression.copyableExpression.getter();
    uint64_t v19 = v18;
    uint64_t v29 = v17;
    unint64_t v30 = v18;
    id v20 = sub_100082234();
    if (v21)
    {
      String.append(_:)(*(Swift::String *)&v20);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 32;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v17 = v29;
      uint64_t v19 = v30;
    }
    v23.value._uint64_t countAndFlagsBits = v17;
    v23.value._object = v19;
    CalculateExpression.copyToClipboard(overridePlaintext:)(v23);
    swift_bridgeObjectRelease();
    swift_release();
    return 1;
  }
  else
  {
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100021598(v25, (uint64_t)qword_100161340);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error: 'Copy Last Result' shortcut item initiated though no last result is being stored", v28, 2u);
      swift_slowDealloc();
    }

    return 1;
  }
}

id sub_100083260()
{
  uint64_t v0 = type metadata accessor for Locale();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v1 - 8);
  if (!sub_1000820C8()) {
    return 0;
  }
  CalculateExpression.copyableExpression.getter();
  id v2 = sub_100082234();
  if (v3)
  {
    String.append(_:)(*(Swift::String *)&v2);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 32;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  if (qword_100154788 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_100161398;
  id v6 = objc_allocWithZone((Class)UIApplicationShortcutItem);
  id v7 = v5;
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v6 initWithType:v8 localizedTitle:v9 localizedSubtitle:v10 icon:v7 userInfo:0];
  swift_release();

  return v11;
}

unint64_t sub_100083644()
{
  unint64_t result = qword_100156518;
  if (!qword_100156518)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100156518);
  }
  return result;
}

uint64_t sub_100083684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000837D0(a2);
  uint64_t v4 = a2 + *(int *)(sub_100032FA0(&qword_100156750) + 36);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for CalculatorHistoryScrollPPTTests() + 24);
  uint64_t v6 = type metadata accessor for ScrollViewProxy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a1, v6);
  type metadata accessor for CalculatorHistoryViewModel(0);
  sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  *(void *)uint64_t v4 = Environment.init<A>(_:)();
  *(unsigned char *)(v4 + 8) = v7 & 1;
  type metadata accessor for CalculatorToolbarViewModel();
  sub_100033074(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  uint64_t result = Environment.init<A>(_:)();
  *(void *)(v4 + 16) = result;
  *(unsigned char *)(v4 + 24) = v9 & 1;
  return result;
}

uint64_t sub_1000837D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v92 = a1;
  uint64_t v81 = type metadata accessor for PlainListStyle();
  uint64_t v82 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v78 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CalculatorHistoryListView();
  uint64_t v75 = *(void *)(v3 - 8);
  uint64_t v93 = *(void *)(v75 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100032FA0(&qword_100156758);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100032FA0(&qword_100156760);
  uint64_t v74 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v70 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100032FA0(&qword_100156768);
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v69 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_100032FA0(&qword_100156770);
  __chkstk_darwin(v86);
  char v76 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100032FA0(&qword_100156778);
  uint64_t v90 = *(void *)(v13 - 8);
  uint64_t v91 = v13;
  __chkstk_darwin(v13);
  char v88 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_100032FA0(&qword_100156780);
  uint64_t v85 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  id v83 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocBox();
  uint64_t v18 = v17;
  char v19 = *(unsigned char *)(v1 + 40);
  uint64_t v94 = v1;
  uint64_t v20 = swift_retain();
  sub_1000D18F8(v20, v19);
  swift_release();
  type metadata accessor for CalculatorHistoryViewModel(0);
  uint64_t v71 = sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  Bindable<A>.init(wrappedValue:)();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v72 = v18;
  uint64_t v68 = v7 + 16;
  uint64_t v67 = v21;
  v21(v9, v18, v6);
  Bindable.wrappedValue.getter();
  Swift::String v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v84 = v9;
  uint64_t v77 = v6;
  uint64_t v89 = v7 + 8;
  uint64_t v66 = v22;
  v22(v9, v6);
  uint64_t v23 = *(void *)(v101 + 16);
  swift_retain();
  swift_release();
  swift_getKeyPath();
  uint64_t v101 = v23;
  sub_100033074(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v63 = *(void *)(v23 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v24 = static MainActor.shared.getter();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v24;
  v25[3] = &protocol witness table for MainActor;
  v25[4] = v16;
  uint64_t v26 = (uint64_t)v5;
  sub_10008DBE0(v1, (uint64_t)v5);
  swift_retain();
  uint64_t v27 = static MainActor.shared.getter();
  uint64_t v28 = *(unsigned __int8 *)(v75 + 80);
  uint64_t v64 = ~v28;
  uint64_t v29 = v93;
  unint64_t v30 = (void *)swift_allocObject();
  v30[2] = v27;
  void v30[3] = &protocol witness table for MainActor;
  v30[4] = v16;
  sub_10008DC48(v26, (uint64_t)v30 + ((v28 + 40) & ~v28));
  sub_100032FA0(&qword_100156788);
  Binding.init(get:set:)();
  uint64_t v31 = v26;
  sub_10008DBE0(v94, v26);
  uint64_t v32 = (v28 + 16) & ~v28;
  uint64_t v33 = v29;
  uint64_t v34 = v16;
  unint64_t v35 = (v33 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v65 = v28 | 7;
  uint64_t v36 = swift_allocObject();
  uint64_t v75 = v31;
  sub_10008DC48(v31, v36 + v32);
  *(void *)(v36 + v35) = v34;
  uint64_t v98 = v63;
  char v95 = &v98;
  uint64_t v96 = sub_10008E030;
  uint64_t v97 = v36;
  swift_retain();
  sub_100032FA0(&qword_100156790);
  sub_10008E5E0();
  uint64_t v37 = v70;
  List.init(selection:content:)();
  uint64_t v38 = v69;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v39 = v78;
  PlainListStyle.init()();
  sub_100040BE4(&qword_100156890, &qword_100156760);
  uint64_t v40 = v73;
  uint64_t v41 = v81;
  View.listStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v39, v41);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v40);
  if (qword_100154538 != -1) {
    swift_once();
  }
  uint64_t v42 = qword_100161140;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v44 = v79;
  uint64_t v45 = (uint64_t)v76;
  uint64_t v46 = v38;
  uint64_t v47 = v38;
  uint64_t v48 = v80;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v46, v80);
  uint64_t v49 = v86;
  uint64_t v50 = (uint64_t *)(v45 + *(int *)(v86 + 36));
  *uint64_t v50 = KeyPath;
  v50[1] = v42;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v44 + 8);
  swift_retain();
  v51(v47, v48);
  unint64_t v52 = sub_10008ECEC();
  long long v53 = v88;
  View.scrollContentBackground(_:)();
  sub_100032F44(v45, &qword_100156770);
  long long v54 = v84;
  uint64_t v55 = v77;
  v67(v84, v72, v77);
  Bindable.wrappedValue.getter();
  v66(v54, v55);
  uint64_t v56 = v99;
  swift_getKeyPath();
  uint64_t v99 = v56;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v54) = *(unsigned char *)(v56 + 32);
  swift_release();
  LOBYTE(v98) = (_BYTE)v54;
  uint64_t v57 = v75;
  sub_10008DBE0(v94, v75);
  uint64_t v58 = (v28 + 24) & v64;
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = v34;
  sub_10008DC48(v57, v59 + v58);
  swift_retain();
  uint64_t v99 = v49;
  unint64_t v100 = v52;
  swift_getOpaqueTypeConformance2();
  uint64_t v60 = v83;
  uint64_t v61 = v91;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v53, v61);
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v92, v60, v87);
  return swift_release();
}

uint64_t sub_100084358@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_100032FA0(&qword_100156758);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = swift_projectBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  Bindable.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v7 = v11;
  swift_getKeyPath();
  uint64_t v11 = v7;
  sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  *a1 = v8;
  return result;
}

uint64_t sub_1000844FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a5;
  uint64_t v6 = sub_100032FA0(&qword_100156758);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v11 = swift_projectBox();
  uint64_t v18 = *(void (**)(char *))(v7 + 16);
  uint64_t v19 = v11;
  v18(v9);
  Bindable.wrappedValue.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  uint64_t v12 = v22;
  swift_getKeyPath();
  uint64_t v20 = v12;
  uint64_t v21 = v10;
  uint64_t v22 = v12;
  sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v10 + 16))
  {
    ((void (*)(char *, uint64_t, uint64_t))v18)(v9, v19, v6);
    Bindable.wrappedValue.getter();
    v17(v9, v6);
    uint64_t v14 = v22;
    swift_getKeyPath();
    uint64_t v22 = v14;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v15 = *(void *)(v14 + 40);
    swift_retain();
    uint64_t result = swift_release();
    if (v15)
    {
      sub_10008478C(v15);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10008478C(uint64_t a1)
{
  uint64_t v53 = a1;
  uint64_t v2 = type metadata accessor for AccessibilityNotification.ScreenChanged();
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  __chkstk_darwin(v2);
  uint64_t v49 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EditMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v52 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100032FA0(&qword_1001568E0);
  __chkstk_darwin(v7);
  char v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_100156680);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100032FA0(&qword_1001568E8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v49 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v49 - v20;
  type metadata accessor for CalculatorHistoryListView();
  sub_1000D1944((uint64_t)v12);
  uint64_t v22 = sub_100032FA0(&qword_100156678);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v12, 1, v22);
  long long v54 = v1;
  if (v23 == 1)
  {
    sub_100032F44((uint64_t)v12, &qword_100156680);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v24(v21, 1, 1, v4);
  }
  else
  {
    Binding.wrappedValue.getter();
    sub_100032F44((uint64_t)v12, &qword_100156678);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v24(v21, 0, 1, v4);
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v18, enum case for EditMode.active(_:), v4);
  v24(v18, 0, 1, v4);
  uint64_t v25 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100033344((uint64_t)v21, (uint64_t)v9, &qword_1001568E8);
  sub_100033344((uint64_t)v18, v25, &qword_1001568E8);
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v9, 1, v4) == 1)
  {
    sub_100032F44((uint64_t)v18, &qword_1001568E8);
    sub_100032F44((uint64_t)v21, &qword_1001568E8);
    if (v26(v25, 1, v4) == 1) {
      return sub_100032F44((uint64_t)v9, &qword_1001568E8);
    }
  }
  else
  {
    sub_100033344((uint64_t)v9, (uint64_t)v15, &qword_1001568E8);
    if (v26(v25, 1, v4) != 1)
    {
      uint64_t v46 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v52, v25, v4);
      sub_100033074(&qword_1001568F0, (void (*)(uint64_t))&type metadata accessor for EditMode);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v48 = *(void (**)(char *, uint64_t))(v5 + 8);
      v48(v46, v4);
      sub_100032F44((uint64_t)v18, &qword_1001568E8);
      sub_100032F44((uint64_t)v21, &qword_1001568E8);
      v48(v15, v4);
      uint64_t result = sub_100032F44((uint64_t)v9, &qword_1001568E8);
      uint64_t v28 = v54;
      if (v47) {
        return result;
      }
      goto LABEL_10;
    }
    sub_100032F44((uint64_t)v18, &qword_1001568E8);
    sub_100032F44((uint64_t)v21, &qword_1001568E8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
  }
  sub_100032F44((uint64_t)v9, &qword_1001568E0);
  uint64_t v28 = v54;
LABEL_10:
  char v29 = v28[8];
  uint64_t v30 = swift_retain();
  sub_100033AA8(v30, v29);
  swift_release();
  char v31 = v28[24];
  uint64_t v32 = swift_retain();
  sub_1000D1928(v32, v31);
  swift_release();
  uint64_t v33 = sub_100073414();
  swift_release();
  sub_10005A948(v53, v33);
  swift_release();
  swift_release();
  char v34 = v28[56];
  uint64_t v35 = swift_retain();
  uint64_t v36 = sub_10003B8B4(v35, v34);
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v55 = v36;
  sub_100033074(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v37 = *(unsigned char *)(v36 + 17);
  uint64_t result = swift_release();
  if ((v37 & 1) == 0)
  {
    char v38 = v28[56];
    uint64_t v39 = swift_retain();
    uint64_t v40 = sub_10003B8B4(v39, v38);
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v55 = v40;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v41 = *(unsigned __int8 *)(v40 + 16);
    uint64_t result = swift_release();
    if (v41 == 1)
    {
      char v42 = v28[56];
      uint64_t v43 = swift_retain();
      sub_10003B8B4(v43, v42);
      swift_release();
      if (qword_100154790 != -1) {
        swift_once();
      }
      sub_100006C54();
      sub_1000943FC(0);
      swift_release();
      long long v55 = 0u;
      long long v56 = 0u;
      uint64_t v44 = v49;
      AccessibilityNotification.ScreenChanged.init(_:)();
      uint64_t v45 = v51;
      _AccessibilityNotifications.post()();
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v44, v45);
    }
  }
  return result;
}

uint64_t sub_100084F48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100032FA0(&qword_1001567C8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100032FA0(&qword_1001567B8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v15 = a1[1];
  uint64_t v16 = a1[2];
  uint64_t v23 = *a1;
  unint64_t v24 = v15;
  uint64_t v25 = v16;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  sub_10008795C(v23, v15, (uint64_t)v10);
  sub_100032FA0(&qword_1001567F0);
  sub_10008E77C();
  sub_10008E870();
  Section<>.init(header:content:)();
  if (qword_100154268 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100160D50;
  uint64_t v18 = qword_100160D50;
  if (qword_100154260 != -1)
  {
    swift_once();
    uint64_t v18 = qword_100160D50;
  }
  uint64_t v19 = qword_100160D48;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v12 + 16))(a4, v14, v11);
  uint64_t v20 = a4 + *(int *)(sub_100032FA0(&qword_1001567A8) + 36);
  *(void *)uint64_t v20 = v17;
  *(void *)(v20 + 8) = v19;
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v19;
  *(unsigned char *)(v20 + 32) = 0;
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000851A8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for CalculatorHistoryListView();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100032FA0(&qword_100156800);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = a1;
  sub_10008DBE0(a2, (uint64_t)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = swift_allocObject();
  sub_10008DC48((uint64_t)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  *(void *)(v16 + ((v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100032FA0(&qword_1001568C8);
  sub_100032FA0(&qword_100156810);
  sub_100040BE4(&qword_1001568D0, &qword_1001568C8);
  sub_10008E9BC(&qword_100156808, &qword_100156810, (void (*)(void))sub_10008EA44, (void (*)(void))sub_10008EC90);
  sub_100033074(&qword_1001562A8, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ForEach<>.init(_:content:)();
  if (qword_100154248 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100160D30;
  if (qword_100154258 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_100160D40;
  uint64_t v19 = qword_100160D40;
  if (qword_100154250 != -1)
  {
    swift_once();
    uint64_t v19 = qword_100160D40;
  }
  uint64_t v20 = qword_100160D38;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(a4, v14, v11);
  uint64_t v21 = a4 + *(int *)(sub_100032FA0(&qword_1001567F0) + 36);
  *(void *)uint64_t v21 = v17;
  *(void *)(v21 + 8) = v18;
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = v19;
  *(unsigned char *)(v21 + 32) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100085554@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a3;
  uint64_t v73 = a4;
  uint64_t v64 = sub_100032FA0(&qword_100156758);
  uint64_t v61 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v60 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CalculatorHistoryListView();
  uint64_t v71 = *(char **)(v7 - 8);
  uint64_t v63 = *((void *)v71 + 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for AccessibilityActionKind();
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v53 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v11 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100032FA0(&qword_100156848);
  __chkstk_darwin(v74);
  unint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100032FA0(&qword_1001568D8);
  uint64_t v56 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100032FA0(&qword_100156840);
  __chkstk_darwin(v55);
  unint64_t v52 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v51 = (char *)&v51 - v20;
  uint64_t v66 = sub_100032FA0(&qword_100156830);
  __chkstk_darwin(v66);
  uint64_t v67 = (uint64_t)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100032FA0(&qword_100156820);
  __chkstk_darwin(v65);
  uint64_t v70 = (uint64_t)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100032FA0(&qword_100156810);
  __chkstk_darwin(v68);
  uint64_t v69 = (uint64_t)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *a1;
  sub_100085F8C(*a1, (uint64_t)v15);
  static AccessibilityChildBehavior.combine.getter();
  uint64_t v25 = sub_100040BE4(&qword_100156850, &qword_100156848);
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v72);
  sub_100032F44((uint64_t)v15, &qword_100156848);
  uint64_t v26 = v53;
  static AccessibilityActionKind.default.getter();
  uint64_t v72 = a2;
  sub_10008DBE0(a2, (uint64_t)v9);
  uint64_t v27 = v71[80];
  uint64_t v28 = (v27 + 16) & ~v27;
  uint64_t v62 = v27 | 7;
  v63 += v28;
  unint64_t v29 = (v63 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = swift_allocObject();
  uint64_t v71 = v9;
  sub_10008DC48((uint64_t)v9, v30 + v28);
  *(void *)(v30 + v29) = v59;
  *(void *)(v30 + ((v29 + 15) & 0xFFFFFFFFFFFFFFF8)) = v24;
  swift_retain();
  swift_retain();
  uint64_t v77 = v74;
  uint64_t v78 = v25;
  uint64_t v31 = (uint64_t)v51;
  swift_getOpaqueTypeConformance2();
  uint64_t v32 = (uint64_t)v52;
  uint64_t v33 = v54;
  View.accessibilityAction(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v26, v58);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v33);
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_100032F44(v32, &qword_100156840);
  uint64_t v34 = swift_projectBox();
  uint64_t v36 = v60;
  uint64_t v35 = v61;
  uint64_t v37 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v34, v64);
  Bindable.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  uint64_t v38 = v77;
  swift_getKeyPath();
  uint64_t v77 = v38;
  sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v39 = *(void *)(v38 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v75 = v24;
  swift_getKeyPath();
  sub_100033074(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_100033074(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  LOBYTE(v38) = sub_10006E86C(v75, v76, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v38)
  {
    if (qword_100154630 != -1) {
      swift_once();
    }
    uint64_t v40 = &qword_100161238;
  }
  else
  {
    if (qword_1001545C0 != -1) {
      swift_once();
    }
    uint64_t v40 = &qword_1001611C8;
  }
  uint64_t v41 = *v40;
  swift_retain();
  uint64_t v75 = v41;
  swift_retain();
  uint64_t v42 = AnyView.init<A>(_:)();
  uint64_t v43 = v67;
  sub_100033344(v31, v67, &qword_100156840);
  swift_release();
  *(void *)(v43 + *(int *)(v66 + 36)) = v42;
  sub_100032F44(v31, &qword_100156840);
  uint64_t v44 = v70;
  sub_100033344(v43, v70, &qword_100156830);
  *(unsigned char *)(v44 + *(int *)(v65 + 36)) = 1;
  sub_100032F44(v43, &qword_100156830);
  uint64_t v45 = static HorizontalAlignment.listRowSeparatorLeading.getter();
  uint64_t v46 = (uint64_t)v71;
  sub_10008DBE0(v72, (uint64_t)v71);
  uint64_t v47 = swift_allocObject();
  sub_10008DC48(v46, v47 + v28);
  uint64_t v48 = v69;
  sub_100033344(v44, v69, &qword_100156820);
  uint64_t v49 = (uint64_t *)(v48 + *(int *)(v68 + 36));
  *uint64_t v49 = v45;
  v49[1] = (uint64_t)sub_10008F57C;
  v49[2] = v47;
  sub_100032F44(v44, &qword_100156820);
  return sub_10002D9D0(v48, v73, &qword_100156810);
}

uint64_t sub_100085F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v125 = a2;
  uint64_t v4 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v123 = *(void *)(v4 - 8);
  uint64_t v124 = v4;
  __chkstk_darwin(v4);
  uint64_t v122 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CalculatorHistoryListView();
  uint64_t v119 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v120 = v7;
  uint64_t v121 = (uint64_t)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v104 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v103 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100032FA0(&qword_1001568F8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_100032FA0(&qword_100156900);
  __chkstk_darwin(v96);
  uint64_t v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100032FA0(&qword_100156908);
  uint64_t v100 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v98 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_100032FA0(&qword_100156910);
  __chkstk_darwin(v95);
  uint64_t v101 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100032FA0(&qword_100156918);
  __chkstk_darwin(v16 - 8);
  uint64_t v99 = (uint64_t)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100032FA0(&qword_100156920);
  __chkstk_darwin(v97);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_100032FA0(&qword_100156928);
  __chkstk_darwin(v107);
  uint64_t v105 = (uint64_t)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_100032FA0(&qword_100156930);
  uint64_t v110 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v108 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_100032FA0(&qword_100156938);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v111 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100032FA0(&qword_100156940);
  uint64_t v117 = *(void *)(v23 - 8);
  uint64_t v118 = v23;
  __chkstk_darwin(v23);
  uint64_t v109 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100032FA0(&qword_100156848);
  __chkstk_darwin(v115);
  uint64_t v116 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = swift_allocObject();
  uint64_t v106 = v2;
  char v27 = *(unsigned char *)(v2 + 40);
  uint64_t v28 = swift_retain();
  sub_1000D18F8(v28, v27);
  swift_release();
  swift_retain();
  swift_release();
  id v29 = sub_100049A60(a1);
  swift_release();
  uint64_t v127 = v26;
  *(void *)(v26 + 16) = v29;
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = swift_retain();
  sub_1000D18F8(v31, v27);
  swift_release();
  swift_retain();
  swift_release();
  id v32 = sub_100049DB4(a1);
  swift_release();
  uint64_t v128 = v30;
  *(void *)(v30 + 16) = v32;
  uint64_t v33 = static HorizontalAlignment.leading.getter();
  if (qword_100154238 != -1) {
    swift_once();
  }
  uint64_t v34 = qword_100160D20;
  *(void *)uint64_t v11 = v33;
  *((void *)v11 + 1) = v34;
  unsigned char v11[16] = 0;
  uint64_t v35 = sub_100032FA0(&qword_100156948);
  uint64_t v36 = v106;
  sub_100088390(v106, a1, v30 + 16, (uint64_t)&v11[*(int *)(v35 + 44)]);
  char v37 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_100033344((uint64_t)v11, (uint64_t)v13, &qword_1001568F8);
  uint64_t v46 = &v13[*(int *)(v96 + 36)];
  *uint64_t v46 = v37;
  *((void *)v46 + 1) = v39;
  *((void *)v46 + 2) = v41;
  *((void *)v46 + 3) = v43;
  *((void *)v46 + 4) = v45;
  v46[40] = 0;
  sub_100032F44((uint64_t)v11, &qword_1001568F8);
  uint64_t v47 = v103;
  static AccessibilityChildBehavior.ignore.getter();
  sub_10008F634();
  uint64_t v48 = v98;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v47, v126);
  sub_100032F44((uint64_t)v13, &qword_100156900);
  id v49 = sub_100088028(a1, v36);
  id v50 = sub_100088028(a1, v36);
  uint64_t v51 = v100;
  uint64_t v52 = (uint64_t)v101;
  uint64_t v53 = v102;
  (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v101, v48, v102);
  uint64_t v54 = (uint64_t *)(v52 + *(int *)(v95 + 36));
  *uint64_t v54 = a1;
  v54[1] = (uint64_t)v49;
  v54[2] = (uint64_t)v50;
  uint64_t v55 = *(void (**)(char *, uint64_t))(v51 + 8);
  swift_retain();
  v55(v48, v53);
  uint64_t v56 = static Alignment.leading.getter();
  uint64_t v57 = v99;
  sub_1000C32D0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v99, 0.0, 1, 0.0, 1, v56, v58);
  sub_100032F44(v52, &qword_100156910);
  sub_100033344(v57, (uint64_t)v19, &qword_100156918);
  v19[*(int *)(v97 + 36)] = 0;
  sub_100032F44(v57, &qword_100156918);
  uint64_t v59 = v105;
  sub_100033344((uint64_t)v19, v105, &qword_100156920);
  uint64_t v60 = v107;
  *(unsigned char *)(v59 + *(int *)(v107 + 36)) = 0;
  uint64_t v61 = sub_100032F44((uint64_t)v19, &qword_100156920);
  __chkstk_darwin(v61);
  uint64_t v126 = a1;
  uint64_t v62 = sub_100032FA0(&qword_100156960);
  unint64_t v63 = sub_10008F6E0();
  uint64_t v64 = sub_100040BE4(&qword_100156998, &qword_100156960);
  uint64_t v65 = v108;
  View.contextMenu<A>(menuItems:)();
  uint64_t v66 = sub_100032F44(v59, &qword_100156928);
  __chkstk_darwin(v66);
  uint64_t v67 = sub_100032FA0(&qword_1001569A0);
  uint64_t v129 = v60;
  uint64_t v130 = v62;
  unint64_t v131 = v63;
  unint64_t v132 = v64;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v69 = sub_10008F994();
  uint64_t v70 = v111;
  uint64_t v71 = v112;
  View.swipeActions<A>(edge:allowsFullSwipe:content:)();
  uint64_t v72 = (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v65, v71);
  __chkstk_darwin(v72);
  uint64_t v73 = v126;
  uint64_t v129 = v71;
  uint64_t v130 = v67;
  unint64_t v131 = OpaqueTypeConformance2;
  unint64_t v132 = v69;
  swift_getOpaqueTypeConformance2();
  uint64_t v74 = v109;
  uint64_t v75 = v114;
  View.swipeActions<A>(edge:allowsFullSwipe:content:)();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v70, v75);
  uint64_t v76 = v36;
  uint64_t v77 = v127;
  if (qword_100154510 != -1) {
    swift_once();
  }
  uint64_t v78 = v121;
  sub_10008DBE0(v76, v121);
  unint64_t v79 = (*(unsigned __int8 *)(v119 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
  unint64_t v80 = (v120 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = v77;
  sub_10008DC48(v78, v81 + v79);
  *(void *)(v81 + v8sub_100102B8C(2, 18, 1, 0) = v73;
  *(void *)(v81 + ((v80 + 15) & 0xFFFFFFFFFFFFFFF8)) = v128;
  uint64_t v82 = self;
  swift_retain();
  swift_retain();
  swift_retain();
  id v83 = [v82 defaultCenter];
  uint64_t v84 = v122;
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v85 = swift_allocObject();
  *(void *)(v85 + 16) = sub_10008FD6C;
  *(void *)(v85 + 24) = v81;
  uint64_t v87 = (uint64_t)v116;
  uint64_t v86 = v117;
  uint64_t v88 = v118;
  (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v116, v74, v118);
  uint64_t v89 = v115;
  uint64_t v91 = v123;
  uint64_t v90 = v124;
  (*(void (**)(uint64_t, char *, uint64_t))(v123 + 16))(v87 + *(int *)(v115 + 52), v84, v124);
  uint64_t v92 = (uint64_t (**)(uint64_t))(v87 + *(int *)(v89 + 56));
  void *v92 = sub_10008FE08;
  v92[1] = (uint64_t (*)(uint64_t))v85;
  (*(void (**)(char *, uint64_t))(v91 + 8))(v84, v90);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v74, v88);
  sub_10002D9D0(v87, v125, &qword_100156848);
  swift_release();
  return swift_release();
}

uint64_t sub_100086DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v56 = a3;
  uint64_t v51 = a2;
  uint64_t v4 = sub_100032FA0(&qword_100156758);
  uint64_t v53 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for EditMode();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v50 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100032FA0(&qword_1001568E0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100032FA0(&qword_100156680);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100032FA0(&qword_1001568E8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v49 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v49 - v22;
  type metadata accessor for CalculatorHistoryListView();
  uint64_t v55 = a1;
  sub_1000D1944((uint64_t)v14);
  uint64_t v24 = sub_100032FA0(&qword_100156678);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24);
  uint64_t v54 = v4;
  if (v25 == 1)
  {
    sub_100032F44((uint64_t)v14, &qword_100156680);
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v26(v23, 1, 1, v6);
  }
  else
  {
    Binding.wrappedValue.getter();
    sub_100032F44((uint64_t)v14, &qword_100156678);
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v26(v23, 0, 1, v6);
  }
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v20, enum case for EditMode.active(_:), v6);
  v26(v20, 0, 1, v6);
  uint64_t v27 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_100033344((uint64_t)v23, (uint64_t)v11, &qword_1001568E8);
  sub_100033344((uint64_t)v20, v27, &qword_1001568E8);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v28((uint64_t)v11, 1, v6) != 1)
  {
    sub_100033344((uint64_t)v11, (uint64_t)v17, &qword_1001568E8);
    if (v28(v27, 1, v6) != 1)
    {
      uint64_t v31 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v50, v27, v6);
      sub_100033074(&qword_1001568F0, (void (*)(uint64_t))&type metadata accessor for EditMode);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
      v33(v31, v6);
      sub_100032F44((uint64_t)v20, &qword_1001568E8);
      sub_100032F44((uint64_t)v23, &qword_1001568E8);
      v33(v17, v6);
      sub_100032F44((uint64_t)v11, &qword_1001568E8);
      uint64_t v29 = v56;
      if (v32) {
        goto LABEL_12;
      }
      return sub_10008478C(v29);
    }
    sub_100032F44((uint64_t)v20, &qword_1001568E8);
    sub_100032F44((uint64_t)v23, &qword_1001568E8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
LABEL_9:
    sub_100032F44((uint64_t)v11, &qword_1001568E0);
    uint64_t v29 = v56;
    return sub_10008478C(v29);
  }
  sub_100032F44((uint64_t)v20, &qword_1001568E8);
  sub_100032F44((uint64_t)v23, &qword_1001568E8);
  if (v28(v27, 1, v6) != 1) {
    goto LABEL_9;
  }
  sub_100032F44((uint64_t)v11, &qword_1001568E8);
  uint64_t v29 = v56;
LABEL_12:
  uint64_t v34 = swift_projectBox();
  uint64_t v36 = v52;
  uint64_t v35 = v53;
  id v50 = *(char **)(v53 + 16);
  uint64_t v51 = v34;
  uint64_t v37 = v54;
  ((void (*)(char *, uint64_t, uint64_t))v50)(v52, v34, v54);
  Bindable.wrappedValue.getter();
  uint64_t v53 = *(void *)(v35 + 8);
  ((void (*)(char *, uint64_t))v53)(v36, v37);
  uint64_t v38 = v60;
  swift_getKeyPath();
  uint64_t v60 = v38;
  uint64_t v49 = sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v39 = *(void *)(v38 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v40 = v29 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  uint64_t v57 = v29;
  swift_getKeyPath();
  sub_100033074(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  uint64_t v55 = v40;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v41 = v56;
  sub_100033074(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  LOBYTE(v38) = sub_10006E86C(v57, v58, v39);
  swift_bridgeObjectRelease();
  uint64_t v42 = v36;
  uint64_t v43 = (void (*)(char *, uint64_t))v53;
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t))v50)(v42, v51, v37);
  Bindable.wrappedValue.getter();
  v43(v42, v37);
  uint64_t v44 = v57;
  uint64_t v57 = v41;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  if (v38)
  {
    uint64_t v46 = v57;
    uint64_t v45 = v58;
    swift_getKeyPath();
    uint64_t v57 = v44;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v57 = v44;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    sub_10008E0DC(v46, v45);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::Int v47 = v57;
    Swift::Int v48 = v58;
    swift_getKeyPath();
    uint64_t v57 = v44;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v57 = v44;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    sub_1000B1C88(&v59, v47, v48);
    swift_endAccess();
  }
  swift_bridgeObjectRelease();
  sub_10004D0B4();
  uint64_t v57 = v44;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10008783C(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 56);
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_10003B8B4(v3, v2);
  swift_release();
  swift_getKeyPath();
  sub_100033074(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v5 = *(unsigned char *)(v4 + 17);
  uint64_t result = swift_release();
  if (v5)
  {
    if (qword_100154258 != -1) {
      return swift_once();
    }
  }
  else
  {
    static HorizontalAlignment.leading.getter();
    return ViewDimensions.subscript.getter();
  }
  return result;
}

uint64_t sub_10008795C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v25 = sub_100032FA0(&qword_1001567E0);
  __chkstk_darwin(v25);
  uint64_t v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100032FA0(&qword_1001568B8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_1001568C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100032FA0(&qword_1001567C8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = 0xE500000000000000;
  unint64_t v17 = 0x7961646F54;
  switch(a2)
  {
    case 0uLL:
      break;
    case 1uLL:
      unint64_t v16 = 0xE900000000000079;
      unint64_t v17 = 0x6164726574736559;
      break;
    case 2uLL:
      unint64_t v16 = 0xEF73796144203720;
      unint64_t v17 = 0x73756F6976657250;
      break;
    case 3uLL:
      unint64_t v16 = 0x8000000100107D30;
      unint64_t v17 = 0xD000000000000010;
      break;
    default:
      unint64_t v17 = a1;
      unint64_t v16 = a2;
      break;
  }
  unint64_t v24 = v17;
  type metadata accessor for CalculatorHistoryListView();
  sub_10004C02C(a1, a2);
  sub_100032FA0(&qword_100156688);
  ScaledMetric.wrappedValue.getter();
  static Font.Weight.medium.getter();
  uint64_t v18 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v12, 1, 1, v18);
  uint64_t v19 = static Font.system(size:weight:design:)();
  sub_100032F44((uint64_t)v12, &qword_1001568C0);
  if (qword_1001545B8 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1001611C0;
  uint64_t v21 = type metadata accessor for Text.Case();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
  uint64_t KeyPath = swift_getKeyPath();
  sub_100033344((uint64_t)v9, (uint64_t)v6 + *(int *)(v25 + 28), &qword_1001568B8);
  *uint64_t v6 = KeyPath;
  sub_100033344((uint64_t)v6, (uint64_t)&v15[*(int *)(v13 + 36)], &qword_1001567E0);
  *(void *)uint64_t v15 = v24;
  *((void *)v15 + 1) = v16;
  *((void *)v15 + 2) = v19;
  *((void *)v15 + 3) = v20;
  v15[32] = a2 < 4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100032F44((uint64_t)v6, &qword_1001567E0);
  sub_100032F44((uint64_t)v9, &qword_1001568B8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10002D9D0((uint64_t)v15, v26, &qword_1001567C8);
}

uint64_t sub_100087D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_100032FA0(&qword_100156758);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_projectBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  Bindable.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = v19;
  swift_getKeyPath();
  uint64_t v19 = v10;
  sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  unint64_t v12 = *(void *)(v11 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12 <= 1)
  {
    char v14 = *(unsigned char *)(a4 + 8);
    uint64_t v15 = swift_retain();
    uint64_t v16 = sub_100033AA8(v15, v14);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v18[-2] = v16;
    LOBYTE(v18[-1]) = 5;
    v18[2] = v16;
    sub_100033074((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

id sub_100088028(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  sub_100033074(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_100033074(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  sub_10004B9E8();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  id v3 = v11;
  if (v11)
  {
    char v4 = *(unsigned char *)(a2 + 24);
    uint64_t v5 = swift_retain();
    sub_1000D1928(v5, v4);
    swift_release();
    uint64_t v6 = sub_100073414();
    swift_release();
    uint64_t v7 = *(void *)(v6 + 16);
    swift_retain();
    swift_release();
    swift_getKeyPath();
    sub_100033074((unint64_t *)&qword_100155238, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionDataProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    id v8 = *(id *)(v7 + 16);
    swift_release();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v8 findUnitWithName:v9, v7];
  }
  return v3;
}

uint64_t sub_100088248(uint64_t a1, uint64_t a2)
{
  id v2 = sub_100088028(a1, a2);
  if (v2)
  {
    id v3 = v2;
    swift_beginAccess();
    swift_retain();
    uint64_t v4 = CalculateExpression.copyableExpression.getter();
    swift_release();
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    id v6 = [v3 shortName];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = v8;

    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return v4;
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    uint64_t v11 = CalculateExpression.copyableExpression.getter();
    swift_release();
  }
  return v11;
}

uint64_t sub_100088390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v51[3] = a3;
  uint64_t v57 = a4;
  uint64_t v6 = sub_100032FA0(&qword_100156A68);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100032FA0(&qword_100156A70);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100032FA0(&qword_100156A78);
  __chkstk_darwin(v12);
  uint64_t v56 = (uint64_t)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v55 = (uint64_t)v51 - v15;
  __chkstk_darwin(v16);
  uint64_t v54 = (uint64_t)v51 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v51 - v19;
  swift_retain();
  uint64_t v52 = a2;
  uint64_t v21 = (char *)sub_100088028(a2, a1);
  v51[2] = type metadata accessor for CalculatorHistoryListView();
  v51[1] = sub_100032FA0(&qword_100156688);
  ScaledMetric.wrappedValue.getter();
  double v22 = *(double *)&v62;
  if (qword_1001545A8 != -1) {
    swift_once();
  }
  uint64_t v53 = v20;
  uint64_t v58 = v12;
  uint64_t v23 = static VerticalAlignment.firstTextBaseline.getter();
  if (qword_100154240 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_100160D28;
  *(void *)id v8 = v23;
  *((void *)v8 + 1) = v24;
  v8[16] = 0;
  uint64_t v25 = sub_100032FA0(&qword_100156A80);
  sub_10008B558(0x6365527475706E49, (char *)0xEB0000000064726FLL, v21, 0x6365527475706E49, 0xEF74696E5564726FLL, (uint64_t)&v8[*(int *)(v25 + 44)], v22);
  uint64_t v26 = CalculateExpression.copyableExpression.getter();
  uint64_t v28 = v27;
  sub_100033344((uint64_t)v8, (uint64_t)v11, &qword_100156A68);
  uint64_t v29 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *uint64_t v29 = v26;
  v29[1] = v28;
  v29[2] = (uint64_t)v21;
  uint64_t v30 = v21;
  sub_100032F44((uint64_t)v8, &qword_100156A68);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v31 = (uint64_t)v53;
  sub_100033344((uint64_t)v11, (uint64_t)v53, &qword_100156A70);
  char v32 = (_OWORD *)(v31 + *(int *)(v58 + 36));
  long long v33 = v60;
  *char v32 = v59;
  v32[1] = v33;
  v32[2] = v61;
  sub_100032F44((uint64_t)v11, &qword_100156A70);
  swift_release();

  swift_retain();
  uint64_t v34 = (char *)sub_100088028(v52, a1);
  ScaledMetric.wrappedValue.getter();
  double v35 = *(double *)&v62;
  if (qword_1001545B0 != -1) {
    swift_once();
  }
  uint64_t v36 = static VerticalAlignment.firstTextBaseline.getter();
  uint64_t v37 = qword_100160D28;
  *(void *)id v8 = v36;
  *((void *)v8 + 1) = v37;
  v8[16] = 0;
  sub_10008B558(0x6552746C75736552, (char *)0xEC00000064726F63, v34, 0xD000000000000010, 0x8000000100109190, (uint64_t)&v8[*(int *)(v25 + 44)], v35);
  uint64_t v38 = CalculateExpression.copyableExpression.getter();
  uint64_t v40 = v39;
  sub_100033344((uint64_t)v8, (uint64_t)v11, &qword_100156A68);
  uint64_t v41 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *uint64_t v41 = v38;
  v41[1] = v40;
  v41[2] = (uint64_t)v34;
  uint64_t v42 = v34;
  sub_100032F44((uint64_t)v8, &qword_100156A68);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v43 = v54;
  sub_100033344((uint64_t)v11, v54, &qword_100156A70);
  uint64_t v44 = (_OWORD *)(v43 + *(int *)(v58 + 36));
  long long v45 = v63;
  *uint64_t v44 = v62;
  v44[1] = v45;
  _DWORD v44[2] = v64;
  sub_100032F44((uint64_t)v11, &qword_100156A70);
  swift_release();

  uint64_t v46 = v55;
  sub_100033344(v31, v55, &qword_100156A78);
  uint64_t v47 = v56;
  sub_100033344(v43, v56, &qword_100156A78);
  uint64_t v48 = v57;
  sub_100033344(v46, v57, &qword_100156A78);
  uint64_t v49 = sub_100032FA0(&qword_100156A88);
  sub_100033344(v47, v48 + *(int *)(v49 + 48), &qword_100156A78);
  sub_100032F44(v43, &qword_100156A78);
  sub_100032F44(v31, &qword_100156A78);
  sub_100032F44(v47, &qword_100156A78);
  return sub_100032F44(v46, &qword_100156A78);
}

uint64_t sub_1000889AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v85 = a4;
  uint64_t v95 = a5;
  uint64_t v8 = sub_100032FA0(&qword_1001555E8);
  __chkstk_darwin(v8 - 8);
  uint64_t v87 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_100032FA0(&qword_1001569D8);
  uint64_t v94 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v88 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100032FA0(&qword_1001569E0);
  __chkstk_darwin(v11 - 8);
  uint64_t v89 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v101 = (uint64_t)&v72 - v14;
  uint64_t v92 = type metadata accessor for Divider();
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v90 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v100 = (char *)&v72 - v17;
  uint64_t v18 = type metadata accessor for CalculatorHistoryListView();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18 - 8);
  uint64_t v21 = v20;
  uint64_t v84 = v20;
  double v22 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = v22;
  uint64_t v23 = sub_100032FA0(&qword_1001569E8);
  uint64_t v103 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_100032FA0(&qword_1001569F0);
  uint64_t v104 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100032FA0(&qword_1001569F8);
  __chkstk_darwin(v28 - 8);
  uint64_t v86 = (uint64_t)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v98 = (uint64_t)&v72 - v31;
  __chkstk_darwin(v32);
  uint64_t v102 = (uint64_t)&v72 - v33;
  __chkstk_darwin(v34);
  uint64_t v105 = (uint64_t)&v72 - v35;
  sub_10008DBE0(a3, (uint64_t)v22);
  uint64_t v83 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v36 = (v83 + 32) & ~v83;
  uint64_t v80 = v36 + v21;
  uint64_t v99 = v83 | 7;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a1;
  *(void *)(v37 + 24) = a2;
  uint64_t v96 = a2;
  sub_10008DC48((uint64_t)v22, v37 + v36);
  uint64_t v109 = a2;
  uint64_t v110 = a3;
  uint64_t v111 = a1;
  swift_retain();
  swift_retain();
  uint64_t v79 = sub_100032FA0(&qword_100156A00);
  uint64_t v78 = sub_100040BE4(&qword_100156A08, &qword_100156A00);
  Button.init(action:label:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v82 = &protocol conformance descriptor for Button<A>;
  uint64_t v38 = sub_100040BE4(&qword_100156A10, &qword_1001569E8);
  View.help(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v103 + 8);
  v103 += 8;
  uint64_t v77 = v39;
  uint64_t v73 = v23;
  v39(v25, v23);
  uint64_t v112 = v23;
  uint64_t v113 = v38;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v40 = v102;
  uint64_t v41 = v81;
  View.accessibilityIdentifier(_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v104 + 8);
  v104 += 8;
  uint64_t v74 = v42;
  v42(v27, v41);
  sub_10002D9D0(v40, v105, &qword_1001569F8);
  uint64_t v43 = a3;
  uint64_t v76 = a3;
  uint64_t v44 = (uint64_t)v97;
  sub_10008DBE0(a3, (uint64_t)v97);
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v85;
  uint64_t v47 = v96;
  *(void *)(v45 + 16) = v85;
  *(void *)(v45 + 24) = v47;
  sub_10008DC48(v44, v45 + v36);
  uint64_t v106 = v47;
  uint64_t v107 = v43;
  uint64_t v108 = v46;
  swift_retain();
  swift_retain();
  Button.init(action:label:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v48 = v73;
  View.help(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v77(v25, v48);
  uint64_t v49 = v98;
  View.accessibilityIdentifier(_:)();
  v74(v27, v41);
  uint64_t v50 = v102;
  sub_10002D9D0(v49, v102, &qword_1001569F8);
  uint64_t v51 = v100;
  Divider.init()();
  uint64_t v52 = v87;
  static ButtonRole.destructive.getter();
  uint64_t v53 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
  uint64_t v54 = (uint64_t)v97;
  sub_10008DBE0(v76, (uint64_t)v97);
  uint64_t v55 = (v83 + 16) & ~v83;
  unint64_t v56 = (v84 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = swift_allocObject();
  sub_10008DC48(v54, v57 + v55);
  *(void *)(v57 + v56) = v96;
  swift_retain();
  sub_100032FA0(&qword_100156A18);
  sub_1000903F8();
  uint64_t v58 = v88;
  Button.init(role:action:label:)();
  sub_100040BE4(&qword_100156A38, &qword_1001569D8);
  uint64_t v59 = (uint64_t)v89;
  uint64_t v60 = v93;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v58, v60);
  uint64_t v61 = v101;
  sub_10002D9D0(v59, v101, &qword_1001569E0);
  sub_100033344(v105, v49, &qword_1001569F8);
  uint64_t v62 = v86;
  sub_100033344(v50, v86, &qword_1001569F8);
  uint64_t v63 = v91;
  long long v64 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  uint64_t v65 = v90;
  uint64_t v66 = v51;
  uint64_t v67 = v92;
  v64(v90, v66, v92);
  sub_100033344(v61, v59, &qword_1001569E0);
  uint64_t v68 = v95;
  sub_100033344(v49, v95, &qword_1001569F8);
  unint64_t v69 = (int *)sub_100032FA0(&qword_100156A40);
  sub_100033344(v62, v68 + v69[12], &qword_1001569F8);
  v64((char *)(v68 + v69[16]), v65, v67);
  sub_100033344(v59, v68 + v69[20], &qword_1001569E0);
  sub_100032F44(v101, &qword_1001569E0);
  uint64_t v70 = *(void (**)(char *, uint64_t))(v63 + 8);
  v70(v100, v67);
  sub_100032F44(v102, &qword_1001569F8);
  sub_100032F44(v105, &qword_1001569F8);
  sub_100032F44(v59, &qword_1001569E0);
  v70(v65, v67);
  sub_100032F44(v62, &qword_1001569F8);
  return sub_100032F44(v98, &qword_1001569F8);
}

uint64_t sub_100089578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = sub_100088248(a1, a2);
  uint64_t v15 = v14;
  if (qword_100154460 != -1) {
    swift_once();
  }
  char v16 = v10 & 1;
  uint64_t v17 = qword_100160F78;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v12;
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 4sub_100102B8C(2, 18, 1, 0) = v15;
  *(unsigned char *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = _swiftEmptyArrayStorage;
  *(void *)(a3 + 64) = v17;
  sub_1000637B4(v6, v8, v16);
  swift_bridgeObjectRetain();
  sub_1000637B4(v13, v15, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000356E0(v13, v15, 0);
  swift_bridgeObjectRelease();
  sub_1000356E0(v6, v8, v16);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10008971C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  swift_retain();
  v5.value._uint64_t countAndFlagsBits = sub_100088248(a2, a3);
  CalculateExpression.copyToClipboard(overridePlaintext:)(v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000897B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = sub_100088248(a1, a2);
  uint64_t v15 = v14;
  if (qword_100154460 != -1) {
    swift_once();
  }
  char v16 = v10 & 1;
  uint64_t v17 = qword_100160F78;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v12;
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 4sub_100102B8C(2, 18, 1, 0) = v15;
  *(unsigned char *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = _swiftEmptyArrayStorage;
  *(void *)(a3 + 64) = v17;
  sub_1000637B4(v6, v8, v16);
  swift_bridgeObjectRetain();
  sub_1000637B4(v13, v15, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000356E0(v13, v15, 0);
  swift_bridgeObjectRelease();
  sub_1000356E0(v6, v8, v16);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100089950(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for CalculatorHistoryListView();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v29 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *(unsigned char *)(a1 + 40);
  uint64_t v9 = swift_retain();
  uint64_t v10 = sub_1000D18F8(v9, v8);
  swift_release();
  swift_getKeyPath();
  uint64_t v31 = v10;
  sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  unint64_t v12 = *(void *)(v11 + 16);
  swift_bridgeObjectRelease();
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_1000D18F8(v13, v8);
  swift_release();
  if (v12 < 2)
  {
    sub_1000451AC(v28);
    swift_release();
    uint64_t v24 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
    sub_10008DBE0(a1, (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v25 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = 0;
    *(void *)(v26 + 24) = 0;
    sub_10008DC48((uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25);
    sub_10004F600((uint64_t)v7, (uint64_t)&unk_100156A50, v26);
  }
  else
  {
    swift_getKeyPath();
    uint64_t v30 = v14;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    uint64_t v15 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v16 = *(void *)(v15 + 16);
    swift_bridgeObjectRelease();
    id v17 = objc_allocWithZone((Class)NSNumber);
    id v18 = [v17 initWithInteger:v16, v28];
    LOBYTE(v16) = *(unsigned char *)(a1 + 40);
    uint64_t v19 = swift_retain();
    sub_1000D18F8(v19, v16);
    swift_release();
    sub_10004EC28();
    swift_release();
    uint64_t v20 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
    sub_10008DBE0(a1, (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v21 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    sub_10008DC48((uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21);
    *(void *)(v22 + ((v4 + v21 + 7) & 0xFFFFFFFFFFFFFFF8)) = v18;
    id v23 = v18;
    sub_10004F600((uint64_t)v7, (uint64_t)&unk_100156A60, v22);
  }
  swift_release();
  return sub_100032F44((uint64_t)v7, &qword_100154B68);
}

uint64_t sub_100089D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 128) = a4;
  *(void *)(v5 + 136) = a5;
  return _swift_task_switch(sub_100089DBC, 0, 0);
}

uint64_t sub_100089DBC()
{
  *(void *)(v0 + 144) = type metadata accessor for MainActor();
  *(void *)(v0 + 152) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100089E54, v2, v1);
}

uint64_t sub_100089E54()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  LOBYTE(v1) = *(unsigned char *)(v1 + 40);
  uint64_t v2 = swift_retain();
  *(void *)(v0 + 16sub_100102B8C(2, 18, 1, 0) = sub_1000D18F8(v2, v1);
  swift_release();
  return _swift_task_switch(sub_100089EE4, 0, 0);
}

uint64_t sub_100089EE4()
{
  uint64_t v1 = *(void *)(v0[20] + 16);
  swift_retain();
  swift_release();
  swift_getKeyPath();
  v0[15] = v1;
  sub_100033074(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 48;
    do
    {
      unint64_t v5 = swift_bridgeObjectRetain();
      sub_10004EEE0(v5);
      v4 += 24;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n();
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_5;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_5:
      uint64_t v6 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v7 = (void *)v0[17];
  swift_bridgeObjectRelease();
  sub_100032FA0(&qword_1001569D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100110A40;
  strcpy((char *)(inited + 32), "deleteElement");
  *(_WORD *)(inited + 46) = -4864;
  *(void *)(inited + 48) = v7;
  strcpy((char *)(inited + 56), "elementCount");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 7sub_100102B8C(2, 18, 1, 0) = -5120;
  id v9 = objc_allocWithZone((Class)NSNumber);
  id v10 = v7;
  *(void *)(inited + 72) = [v9 initWithInteger:v6];
  v0[21] = sub_100070DFC(inited);
  v0[22] = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10008A184, v12, v11);
}

uint64_t sub_10008A184()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  LOBYTE(v1) = *(unsigned char *)(v1 + 8);
  uint64_t v2 = swift_retain();
  *(void *)(v0 + 184) = sub_100033AA8(v2, v1);
  swift_release();
  return _swift_task_switch(sub_10008A214, 0, 0);
}

uint64_t sub_10008A214()
{
  unint64_t v1 = sub_100056E30(*(void *)(v0 + 168));
  swift_bridgeObjectRelease();
  sub_10005FADC(v1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008A2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 128) = a4;
  return _swift_task_switch(sub_10008A2CC, 0, 0);
}

uint64_t sub_10008A2CC()
{
  *(void *)(v0 + 136) = type metadata accessor for MainActor();
  *(void *)(v0 + 144) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10008A364, v2, v1);
}

uint64_t sub_10008A364()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  LOBYTE(v1) = *(unsigned char *)(v1 + 40);
  uint64_t v2 = swift_retain();
  *(void *)(v0 + 152) = sub_1000D18F8(v2, v1);
  swift_release();
  return _swift_task_switch(sub_10008A3F4, 0, 0);
}

uint64_t sub_10008A3F4()
{
  uint64_t v1 = *(void *)(v0[19] + 16);
  swift_retain();
  swift_release();
  swift_getKeyPath();
  v0[15] = v1;
  sub_100033074(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 48;
    do
    {
      unint64_t v5 = swift_bridgeObjectRetain();
      sub_10004EEE0(v5);
      v4 += 24;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n();
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_5;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_5:
      uint64_t v6 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  sub_100032FA0(&qword_1001569D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100110A40;
  strcpy((char *)(inited + 32), "deleteElement");
  *(_WORD *)(inited + 46) = -4864;
  sub_100090B24();
  *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
  strcpy((char *)(inited + 56), "elementCount");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 7sub_100102B8C(2, 18, 1, 0) = -5120;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithInteger:v6];
  v0[20] = sub_100070DFC(inited);
  v0[21] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10008A69C, v9, v8);
}

uint64_t sub_10008A69C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  LOBYTE(v1) = *(unsigned char *)(v1 + 8);
  uint64_t v2 = swift_retain();
  *(void *)(v0 + 176) = sub_100033AA8(v2, v1);
  swift_release();
  return _swift_task_switch(sub_10008A72C, 0, 0);
}

uint64_t sub_10008A72C()
{
  unint64_t v1 = sub_100056E30(*(void *)(v0 + 160));
  swift_bridgeObjectRelease();
  sub_10005FADC(v1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008A7C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100032FA0(&qword_100156A30);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  Label<>.init(_:systemImage:)();
  if (qword_1001545C8 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1001611D0;
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(sub_100032FA0(&qword_100156A18) + 36));
  *uint64_t v8 = KeyPath;
  v8[1] = v6;
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  swift_retain();
  return v9(v5, v2);
}

uint64_t sub_10008A944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v32 = a3;
  uint64_t v4 = type metadata accessor for CalculatorHistoryListView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100032FA0(&qword_1001555E8);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100032FA0(&qword_1001569C8);
  uint64_t v11 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100032FA0(&qword_1001569B8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100032FA0(&qword_1001569A0);
  __chkstk_darwin(v31);
  id v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter();
  uint64_t v19 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 0, 1, v19);
  sub_10008DBE0(a1, (uint64_t)v7);
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v21 = (v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  sub_10008DC48((uint64_t)v7, v22 + v20);
  *(void *)(v22 + v21) = v29;
  swift_retain();
  Button.init(role:action:label:)();
  if (qword_1001545C8 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1001611D0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = v30;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v30);
  uint64_t v26 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  *uint64_t v26 = KeyPath;
  v26[1] = v23;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v11 + 8);
  swift_retain();
  v27(v13, v25);
  LocalizedStringKey.init(stringLiteral:)();
  sub_10008FA40();
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100032F44((uint64_t)v16, &qword_1001569B8);
  ModifiedContent<>.accessibilityIdentifier(_:)();
  return sub_100032F44((uint64_t)v18, &qword_1001569A0);
}

uint64_t sub_10008AD84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  char v4 = *(unsigned char *)(a1 + 40);
  uint64_t v5 = swift_retain();
  sub_1000D18F8(v5, v4);
  swift_release();
  sub_1000451AC(a2);
  swift_release();
  sub_100032FA0(&qword_1001569D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100110A40;
  strcpy((char *)(inited + 32), "deleteElement");
  *(_WORD *)(inited + 46) = -4864;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:1];
  strcpy((char *)(inited + 56), "elementCount");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 7sub_100102B8C(2, 18, 1, 0) = -5120;
  uint64_t v7 = swift_retain();
  uint64_t v8 = sub_1000D18F8(v7, v4);
  swift_release();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_retain();
  swift_release();
  swift_getKeyPath();
  sub_100033074(&qword_100154BA8, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v10 = *(void *)(v9 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithInteger:v11];
  unint64_t v12 = sub_100070DFC(inited);
  LOBYTE(v3) = *(unsigned char *)(v3 + 8);
  uint64_t v13 = swift_retain();
  sub_100033AA8(v13, v3);
  swift_release();
  unint64_t v14 = sub_100056E30(v12);
  swift_bridgeObjectRelease();
  sub_10005FADC(v14);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10008AFD0@<X0>(void *a1@<X8>)
{
  return sub_10008B3D4(&qword_100154458, &qword_100160F70, a1);
}

uint64_t sub_10008AFF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v7 = type metadata accessor for CalculatorHistoryListView();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v25 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v26 = sub_100032FA0(&qword_1001569C8);
  uint64_t v9 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100032FA0(&qword_1001569B8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100032FA0(&qword_1001569A0);
  __chkstk_darwin(v27);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008DBE0(a3, (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  sub_10008DC48((uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  swift_retain();
  swift_retain();
  Button.init(action:label:)();
  if (qword_1001545D0 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_1001611D8;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v11, v26);
  uint64_t v22 = (uint64_t *)&v14[*(int *)(v12 + 36)];
  *uint64_t v22 = KeyPath;
  v22[1] = v19;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  swift_retain();
  v23(v11, v21);
  LocalizedStringKey.init(stringLiteral:)();
  sub_10008FA40();
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100032F44((uint64_t)v14, &qword_1001569B8);
  ModifiedContent<>.accessibilityIdentifier(_:)();
  return sub_100032F44((uint64_t)v16, &qword_1001569A0);
}

uint64_t sub_10008B3B0@<X0>(void *a1@<X8>)
{
  return sub_10008B3D4(&qword_100154460, &qword_100160F78, a1);
}

uint64_t sub_10008B3D4@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_retain();
}

uint64_t sub_10008B428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = *(unsigned char *)(a2 + 40);
  uint64_t v8 = swift_retain();
  sub_1000D18F8(v8, v7);
  swift_release();
  swift_retain();
  swift_release();
  id v9 = sub_100049A60(a3);
  swift_release();
  swift_beginAccess();
  *(void *)(a1 + 16) = v9;
  swift_release();
  uint64_t v10 = swift_retain();
  sub_1000D18F8(v10, v7);
  swift_release();
  swift_retain();
  swift_release();
  id v11 = sub_100049DB4(a3);
  swift_release();
  swift_beginAccess();
  *(void *)(a4 + 16) = v11;
  return swift_release();
}

uint64_t sub_10008B558@<X0>(uint64_t a1@<X2>, char *a2@<X3>, char *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  uint64_t v69 = a1;
  uint64_t v74 = a6;
  uint64_t v8 = sub_100032FA0(&qword_1001568C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v65 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_100156A90);
  __chkstk_darwin(v10 - 8);
  uint64_t v73 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v72 = (char *)&v64 - v13;
  uint64_t v14 = sub_100032FA0(&qword_100156A98);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CalculateExpressionView();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100032FA0(&qword_100156AA0);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v64 - v25;
  double v68 = a7 / 1.35;
  uint64_t v27 = qword_1001543A8;
  swift_retain();
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Text.TruncationMode();
  uint64_t v29 = sub_100021598(v28, (uint64_t)qword_100160E90);
  uint64_t v30 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v16, v29, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v16, 0, 1, v28);
  CalculateExpressionView.init(expression:isEditable:fontSize:minFontSizeRatio:textAlignment:textColor:truncationMode:operationCallback:)();
  sub_100033074((unint64_t *)&qword_100156AA8, (void (*)(uint64_t))&type metadata accessor for CalculateExpressionView);
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  sub_10002D9D0((uint64_t)v23, (uint64_t)v26, &qword_100156AA0);
  if (v71)
  {
    uint64_t v70 = v71;
    id v31 = [v70 shortName];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    uint64_t v75 = v32;
    uint64_t v76 = v34;
    sub_100023B24();
    uint64_t v35 = Text.init<A>(_:)();
    uint64_t v37 = v36;
    char v39 = v38 & 1;
    uint64_t v40 = Text.foregroundColor(_:)();
    uint64_t v71 = v26;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    char v45 = v44 & 1;
    sub_1000356E0(v35, v37, v39);
    swift_bridgeObjectRelease();
    uint64_t v46 = type metadata accessor for Font.Design();
    uint64_t v47 = (uint64_t)v65;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v65, 1, 1, v46);
    static Font.system(size:weight:design:)();
    sub_100032F44(v47, &qword_1001568C0);
    uint64_t v48 = Text.font(_:)();
    uint64_t v50 = v49;
    char v52 = v51;
    uint64_t v54 = v53;
    swift_release();
    char v55 = v52 & 1;
    sub_1000356E0(v41, v43, v45);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v75 = v48;
    uint64_t v76 = v50;
    char v77 = v52 & 1;
    uint64_t v78 = v54;
    uint64_t v79 = 0x4000000000000000;
    uint64_t v80 = KeyPath;
    uint64_t v81 = 1;
    char v82 = 0;
    sub_100032FA0(&qword_100156AC0);
    sub_100090B7C();
    uint64_t v57 = (uint64_t)v72;
    View.accessibilityIdentifier(_:)();

    sub_1000356E0(v48, v50, v55);
    uint64_t v26 = v71;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v58 = sub_100032FA0(&qword_100156AB0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 0, 1, v58);
  }
  else
  {
    uint64_t v59 = sub_100032FA0(&qword_100156AB0);
    uint64_t v57 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v72, 1, 1, v59);
  }
  sub_100033344((uint64_t)v26, (uint64_t)v23, &qword_100156AA0);
  uint64_t v60 = v73;
  sub_100033344(v57, v73, &qword_100156A90);
  uint64_t v61 = v74;
  sub_100033344((uint64_t)v23, v74, &qword_100156AA0);
  uint64_t v62 = sub_100032FA0(&qword_100156AB8);
  sub_100033344(v60, v61 + *(int *)(v62 + 48), &qword_100156A90);
  sub_100032F44(v57, &qword_100156A90);
  sub_100032F44((uint64_t)v26, &qword_100156AA0);
  sub_100032F44(v60, &qword_100156A90);
  return sub_100032F44((uint64_t)v23, &qword_100156AA0);
}

uint64_t sub_10008BC34@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CalculatorViewModel();
  sub_100033074((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  *(void *)a1 = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 8) = v2 & 1;
  type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  sub_100033074(&qword_100156660, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModelWrapper);
  *(void *)(a1 + 16) = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 24) = v3 & 1;
  type metadata accessor for CalculatorHistoryViewModel(0);
  sub_100033074(&qword_100154E30, (void (*)(uint64_t))type metadata accessor for CalculatorHistoryViewModel);
  *(void *)(a1 + 32) = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v4 & 1;
  type metadata accessor for CalculatorToolbarViewModel();
  sub_100033074(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  *(void *)(a1 + 48) = Environment.init<A>(_:)();
  *(unsigned char *)(a1 + 56) = v5 & 1;
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CalculatorHistoryListView() + 32));
  *uint64_t v6 = swift_getKeyPath();
  sub_100032FA0(&qword_100156668);
  swift_storeEnumTagMultiPayload();
  if (qword_100154230 != -1) {
    swift_once();
  }
  sub_10003B8D0();
  ScaledMetric.init(wrappedValue:)();
  if (qword_100154220 != -1) {
    swift_once();
  }
  ScaledMetric.init(wrappedValue:)();
  if (qword_100154228 != -1) {
    swift_once();
  }
  return ScaledMetric.init(wrappedValue:)();
}

uint64_t type metadata accessor for CalculatorHistoryListView()
{
  uint64_t result = qword_1001566F0;
  if (!qword_1001566F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008BF78@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  sub_10008DBE0(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_10008DC48((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  *a2 = sub_10008DCAC;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v7;
  return result;
}

uint64_t sub_10008C064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v67 = a4;
  uint64_t v72 = a1;
  uint64_t v73 = a5;
  uint64_t v59 = type metadata accessor for Locale();
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v57 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v60 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100032FA0(&qword_100156B10);
  __chkstk_darwin(v9 - 8);
  uint64_t v71 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  __chkstk_darwin(v11 - 8);
  uint64_t v74 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CalculateExpression.Base();
  uint64_t v62 = v13;
  uint64_t v75 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AttributedString();
  uint64_t v69 = *(void *)(v16 - 8);
  uint64_t v70 = v16;
  __chkstk_darwin(v16);
  uint64_t v56 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v65 = (char *)&v55 - v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v64 = a2 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  uint64_t v76 = a2;
  uint64_t v61 = a2;
  swift_getKeyPath();
  uint64_t v63 = sub_100033074(&qword_100154B78, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_100033074(&qword_100154B80, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  sub_1000DD044((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = enum case for CalculateExpression.Base.base10(_:);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 104);
  v75 += 104;
  v24(v15, enum case for CalculateExpression.Base.base10(_:), v13);
  UUID.init()();
  type metadata accessor for CalculateExpression();
  swift_allocObject();
  CalculateExpression.init(_:options:base:id:)();
  double v68 = v22;
  CalculateExpression.accessibilityMathEquationDescription.getter();
  swift_release();
  uint64_t v76 = v61;
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v25 = (uint64_t)v65;
  swift_getKeyPath();
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  sub_1000DD044((uint64_t)_swiftEmptyArrayStorage);
  v24(v15, v23, v62);
  uint64_t v26 = v66;
  UUID.init()();
  uint64_t v27 = v67;
  swift_allocObject();
  CalculateExpression.init(_:options:base:id:)();
  CalculateExpression.accessibilityMathEquationDescription.getter();
  swift_release();
  if (v26 && v27)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v28._uint64_t countAndFlagsBits = 0x202C7475706E49;
    v28._object = (void *)0xE700000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t v29 = v68;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    v30._uint64_t countAndFlagsBits = 32;
    v30._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
    id v31 = [v26 displayName];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    v35._uint64_t countAndFlagsBits = v32;
    v35._object = v34;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 0x746C75736572202CLL;
    v36._object = (void *)0xE900000000000020;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v36);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    v37._uint64_t countAndFlagsBits = 32;
    v37._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v37);
    id v38 = [v27 displayName];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    v42._uint64_t countAndFlagsBits = v39;
    v42._object = v41;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v42);
    swift_bridgeObjectRelease();
    v43._uint64_t countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v43);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v44 = Text.init(_:tableName:bundle:comment:)();
  }
  else
  {
    type metadata accessor for Utilities();
    uint64_t v47 = (uint64_t)v57;
    static Locale.current.getter();
    uint64_t v29 = v68;
    sub_100080608(v25, v47, v56);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v47, v59);
    uint64_t v44 = Text.init(_:)();
  }
  uint64_t v48 = v44;
  uint64_t v49 = v45;
  char v50 = v46 & 1;
  sub_100032FA0(&qword_100156B18);
  sub_100040BE4(&qword_100156B20, &qword_100156B18);
  uint64_t v51 = (uint64_t)v71;
  View.accessibilityLabel(_:)();
  sub_1000356E0(v48, v49, v50);
  swift_bridgeObjectRelease();
  uint64_t v52 = v70;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
  v53(v25, v70);
  v53((uint64_t)v29, v52);
  return sub_10002D9D0(v51, v73, &qword_100156B10);
}

uint64_t sub_10008C81C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008C064(a1, *(void *)v2, *(void **)(v2 + 8), *(void **)(v2 + 16), a2);
}

char *sub_10008C830(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (char *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    char v7 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = v7;
    char v8 = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = v8;
    char v9 = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v9;
    uint64_t v10 = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v11 = a3[8];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    *(void *)(a1 + 48) = v10;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100032FA0(&qword_100156668);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_100032FA0(&qword_100156678);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_100032FA0(&qword_100156680);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        uint64_t v18 = v13[1];
        *uint64_t v12 = *v13;
        v12[1] = v18;
        uint64_t v19 = *(int *)(v14 + 32);
        Swift::String v28 = (char *)v13 + v19;
        uint64_t v29 = (char *)v12 + v19;
        uint64_t v20 = type metadata accessor for EditMode();
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
        swift_retain();
        swift_retain();
        v27(v29, v28, v20);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a3[9];
    uint64_t v22 = &v4[v21];
    uint64_t v23 = (uint64_t)a2 + v21;
    uint64_t v24 = sub_100032FA0(&qword_100156688);
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
    v25(v22, v23, v24);
    v25(&v4[a3[10]], (uint64_t)a2 + a3[10], v24);
    v25(&v4[a3[11]], (uint64_t)a2 + a3[11], v24);
  }
  return v4;
}

uint64_t sub_10008CB40(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + a2[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = a1 + a2[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v12)((void *)(v9 - 8), v8, v9);
  v12(a1 + a2[10], v9);
  uint64_t v10 = a1 + a2[11];

  return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v9);
}

uint64_t sub_10008CCF4(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  char v7 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v7;
  char v8 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *(void *)(a1 + 48) = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_100032FA0(&qword_100156678);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_100032FA0(&qword_100156680);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = v12[1];
      *uint64_t v11 = *v12;
      v11[1] = v16;
      uint64_t v17 = *(int *)(v13 + 32);
      uint64_t v26 = (char *)v12 + v17;
      uint64_t v27 = (char *)v11 + v17;
      uint64_t v18 = type metadata accessor for EditMode();
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_retain();
      swift_retain();
      v25(v27, v26, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = sub_100032FA0(&qword_100156688);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16);
  v23(v20, v21, v22);
  v23(a1 + a3[10], a2 + a3[10], v22);
  v23(a1 + a3[11], a2 + a3[11], v22);
  return a1;
}

uint64_t sub_10008CFB4(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  char v7 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v7;
  swift_retain();
  swift_release();
  char v8 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v8;
  swift_retain();
  swift_release();
  char v9 = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v9;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_100032F44(a1 + v10, &qword_100156668);
    sub_100032FA0(&qword_100156668);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_100032FA0(&qword_100156678);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_100032FA0(&qword_100156680);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
        uint64_t v16 = *(int *)(v13 + 32);
        uint64_t v25 = (char *)v12 + v16;
        uint64_t v26 = (char *)v11 + v16;
        uint64_t v17 = type metadata accessor for EditMode();
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
        swift_retain();
        swift_retain();
        v24(v26, v25, v17);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = sub_100032FA0(&qword_100156688);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24);
  v22(v19, v20, v21);
  v22(a1 + a3[10], a2 + a3[10], v21);
  v22(a1 + a3[11], a2 + a3[11], v21);
  return a1;
}

uint64_t sub_10008D2B8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = a3[8];
  char v7 = (void *)(a1 + v6);
  char v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_100032FA0(&qword_100156678);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      uint64_t v12 = sub_100032FA0(&qword_100156680);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v13 = v8[1];
      *char v7 = *v8;
      v7[1] = v13;
      uint64_t v14 = *(int *)(v10 + 32);
      uint64_t v15 = (char *)v7 + v14;
      uint64_t v16 = (char *)v8 + v14;
      uint64_t v17 = type metadata accessor for EditMode();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = sub_100032FA0(&qword_100156688);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32);
  v22(v19, v20, v21);
  v22(a1 + a3[10], a2 + a3[10], v21);
  v22(a1 + a3[11], a2 + a3[11], v21);
  return a1;
}

uint64_t sub_10008D544(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_release();
  char v7 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v7;
  swift_release();
  char v8 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v8;
  swift_release();
  char v9 = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v9;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_100032F44(a1 + v10, &qword_100156668);
    uint64_t v13 = sub_100032FA0(&qword_100156668);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_100032FA0(&qword_100156678);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      {
        uint64_t v16 = sub_100032FA0(&qword_100156680);
        memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        uint64_t v17 = v12[1];
        *uint64_t v11 = *v12;
        v11[1] = v17;
        uint64_t v18 = *(int *)(v14 + 32);
        uint64_t v19 = (char *)v11 + v18;
        uint64_t v20 = (char *)v12 + v18;
        uint64_t v21 = type metadata accessor for EditMode();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = sub_100032FA0(&qword_100156688);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 40);
  v26(v23, v24, v25);
  v26(a1 + a3[10], a2 + a3[10], v25);
  v26(a1 + a3[11], a2 + a3[11], v25);
  return a1;
}

uint64_t sub_10008D808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D81C);
}

uint64_t sub_10008D81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_100032FA0(&qword_100156690);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100032FA0(&qword_100156688);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10008D948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008D95C);
}

uint64_t sub_10008D95C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v8 = sub_100032FA0(&qword_100156690);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100032FA0(&qword_100156688);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10008DA8C()
{
  sub_10008DB68();
  if (v0 <= 0x3F)
  {
    sub_10003B690();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10008DB68()
{
  if (!qword_100156700)
  {
    sub_1000317D8(&qword_100156680);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100156700);
    }
  }
}

uint64_t sub_10008DBC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008DBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculatorHistoryListView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008DC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalculatorHistoryListView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008DCAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CalculatorHistoryListView();

  return sub_100083684(a1, a2);
}

uint64_t sub_10008DD34()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10008DD74@<X0>(void *a1@<X8>)
{
  return sub_100084358(a1);
}

uint64_t sub_10008DD80()
{
  uint64_t v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v3 = v0 + ((v2 + 40) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[10], v9);
  v10(v3 + v1[11], v9);

  return swift_deallocObject();
}

uint64_t sub_10008DFB4(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000844FC(a1, v4, v5, v6, v7);
}

uint64_t sub_10008E030@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100084F48(a1, v2 + v6, v7, a2);
}

uint64_t sub_10008E0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000B31C8();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_10008E26C(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_10008E26C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10008E434(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_1001568B8);
  __chkstk_darwin(v2 - 8);
  sub_100033344(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1001568B8);
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_10008E4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100032FA0(&qword_1001568A0);
  sub_100032FA0(&qword_1001567A8);
  sub_100040BE4(&qword_1001568A8, &qword_1001568A0);
  sub_10008E654();
  sub_10008F148();
  return ForEach<>.init(_:content:)();
}

uint64_t sub_10008E5D4()
{
  return sub_10008E4C8(v0[2], v0[3], v0[4]);
}

unint64_t sub_10008E5E0()
{
  unint64_t result = qword_100156798;
  if (!qword_100156798)
  {
    sub_1000317D8(&qword_100156790);
    sub_10008E654();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156798);
  }
  return result;
}

unint64_t sub_10008E654()
{
  unint64_t result = qword_1001567A0;
  if (!qword_1001567A0)
  {
    sub_1000317D8(&qword_1001567A8);
    sub_10008E6F4();
    sub_100040BE4(&qword_100156880, &qword_100156888);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001567A0);
  }
  return result;
}

unint64_t sub_10008E6F4()
{
  unint64_t result = qword_1001567B0;
  if (!qword_1001567B0)
  {
    sub_1000317D8(&qword_1001567B8);
    sub_10008E77C();
    sub_10008E870();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001567B0);
  }
  return result;
}

unint64_t sub_10008E77C()
{
  unint64_t result = qword_1001567C0;
  if (!qword_1001567C0)
  {
    sub_1000317D8(&qword_1001567C8);
    sub_10008E81C();
    sub_100040BE4(&qword_1001567D8, &qword_1001567E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001567C0);
  }
  return result;
}

unint64_t sub_10008E81C()
{
  unint64_t result = qword_1001567D0;
  if (!qword_1001567D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001567D0);
  }
  return result;
}

unint64_t sub_10008E870()
{
  unint64_t result = qword_1001567E8;
  if (!qword_1001567E8)
  {
    sub_1000317D8(&qword_1001567F0);
    sub_10008E910();
    sub_100040BE4(&qword_100156880, &qword_100156888);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001567E8);
  }
  return result;
}

unint64_t sub_10008E910()
{
  unint64_t result = qword_1001567F8;
  if (!qword_1001567F8)
  {
    sub_1000317D8(&qword_100156800);
    sub_10008E9BC(&qword_100156808, &qword_100156810, (void (*)(void))sub_10008EA44, (void (*)(void))sub_10008EC90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001567F8);
  }
  return result;
}

uint64_t sub_10008E9BC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008EA44()
{
  unint64_t result = qword_100156818;
  if (!qword_100156818)
  {
    sub_1000317D8(&qword_100156820);
    sub_10008EAE4();
    sub_100040BE4(&qword_100156868, &qword_100156870);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156818);
  }
  return result;
}

unint64_t sub_10008EAE4()
{
  unint64_t result = qword_100156828;
  if (!qword_100156828)
  {
    sub_1000317D8(&qword_100156830);
    sub_10008EB84();
    sub_100040BE4(&qword_100156858, &qword_100156860);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156828);
  }
  return result;
}

unint64_t sub_10008EB84()
{
  unint64_t result = qword_100156838;
  if (!qword_100156838)
  {
    sub_1000317D8(&qword_100156840);
    sub_1000317D8(&qword_100156848);
    sub_100040BE4(&qword_100156850, &qword_100156848);
    swift_getOpaqueTypeConformance2();
    sub_100033074(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156838);
  }
  return result;
}

unint64_t sub_10008EC90()
{
  unint64_t result = qword_100156878;
  if (!qword_100156878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156878);
  }
  return result;
}

unint64_t sub_10008ECEC()
{
  unint64_t result = qword_100156898;
  if (!qword_100156898)
  {
    sub_1000317D8(&qword_100156770);
    sub_1000317D8(&qword_100156760);
    type metadata accessor for PlainListStyle();
    sub_100040BE4(&qword_100156890, &qword_100156760);
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100155410, &qword_100155418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156898);
  }
  return result;
}

uint64_t sub_10008EE0C()
{
  uint64_t v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  Swift::Int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[10], v9);
  v10(v3 + v1[11], v9);

  return swift_deallocObject();
}

uint64_t sub_10008F038(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100087D80(a1, a2, v6, v7);
}

uint64_t sub_10008F0CC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10008F104(long long *a1)
{
  uint64_t v2 = *(uint64_t (**)(long long *))(v1 + 16);
  uint64_t v3 = *((void *)a1 + 2);
  long long v5 = *a1;
  uint64_t v6 = v3;
  return v2(&v5);
}

unint64_t sub_10008F148()
{
  unint64_t result = qword_1001568B0;
  if (!qword_1001568B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001568B0);
  }
  return result;
}

uint64_t sub_10008F19C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000851A8(v1[4], v1[5], v1[6], a1);
}

uint64_t sub_10008F1AC()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_10008F1D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100085554(a1, v2 + v6, v7, a2);
}

uint64_t sub_10008F284()
{
  uint64_t v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  Swift::Int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[10], v9);
  v10(v3 + v1[11], v9);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10008F4DC()
{
  uint64_t v1 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_100086DE4(v0 + v2, v4, v5);
}

uint64_t sub_10008F57C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10008783C(a1, v4);
}

uint64_t sub_10008F5FC()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_10008F634()
{
  unint64_t result = qword_100156950;
  if (!qword_100156950)
  {
    sub_1000317D8(&qword_100156900);
    sub_100040BE4(&qword_100156958, &qword_1001568F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156950);
  }
  return result;
}

uint64_t sub_10008F6D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000889AC(v1[2], v1[3], v1[4], v1[5], a1);
}

unint64_t sub_10008F6E0()
{
  unint64_t result = qword_100156968;
  if (!qword_100156968)
  {
    sub_1000317D8(&qword_100156928);
    sub_10008E9BC(&qword_100156970, &qword_100156920, (void (*)(void))sub_10008F7B8, (void (*)(void))sub_10008F938);
    sub_100040BE4(&qword_100155380, &qword_100155388);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156968);
  }
  return result;
}

unint64_t sub_10008F7B8()
{
  unint64_t result = qword_100156978;
  if (!qword_100156978)
  {
    sub_1000317D8(&qword_100156918);
    sub_10008F834();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156978);
  }
  return result;
}

unint64_t sub_10008F834()
{
  unint64_t result = qword_100156980;
  if (!qword_100156980)
  {
    sub_1000317D8(&qword_100156910);
    sub_1000317D8(&qword_100156900);
    sub_10008F634();
    swift_getOpaqueTypeConformance2();
    sub_10008F8E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156980);
  }
  return result;
}

unint64_t sub_10008F8E4()
{
  unint64_t result = qword_100156988;
  if (!qword_100156988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156988);
  }
  return result;
}

unint64_t sub_10008F938()
{
  unint64_t result = qword_100156990;
  if (!qword_100156990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156990);
  }
  return result;
}

uint64_t sub_10008F98C@<X0>(uint64_t a1@<X8>)
{
  return sub_10008A944(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10008F994()
{
  unint64_t result = qword_1001569A8;
  if (!qword_1001569A8)
  {
    sub_1000317D8(&qword_1001569A0);
    sub_10008FA40();
    sub_100033074(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001569A8);
  }
  return result;
}

unint64_t sub_10008FA40()
{
  unint64_t result = qword_1001569B0;
  if (!qword_1001569B0)
  {
    sub_1000317D8(&qword_1001569B8);
    sub_100040BE4(&qword_1001569C0, &qword_1001569C8);
    sub_100040BE4(&qword_100155410, &qword_100155418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001569B0);
  }
  return result;
}

uint64_t sub_10008FB04@<X0>(uint64_t a1@<X8>)
{
  return sub_10008AFF4(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_10008FB10()
{
  uint64_t v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  Swift::Int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[10], v9);
  v10(v3 + v1[11], v9);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10008FD6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10008B428(v4, v0 + v2, v5, v6);
}

uint64_t sub_10008FE08(uint64_t a1)
{
  return sub_1000FCDFC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10008FE14()
{
  return sub_100090090();
}

uint64_t sub_10008FE24()
{
  return sub_100090358((uint64_t (*)(unint64_t, uint64_t))sub_10008AD84);
}

uint64_t sub_10008FE40()
{
  return sub_100090090();
}

uint64_t sub_10008FE4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100089578(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10008FE5C()
{
  uint64_t v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  swift_release();
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  Swift::Int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[10], v9);
  v10(v3 + v1[11], v9);

  return swift_deallocObject();
}

uint64_t sub_100090090()
{
  uint64_t v1 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  return sub_10008971C(*(void *)(v0 + 16), *(void *)(v0 + 24), v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_1000900F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000897B0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100090108()
{
  uint64_t v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  Swift::Int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[10], v9);
  v10(v3 + v1[11], v9);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100090340()
{
  return sub_100090358((uint64_t (*)(unint64_t, uint64_t))sub_100089950);
}

uint64_t sub_100090358(uint64_t (*a1)(unint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a1(v1 + v3, v4);
}

unint64_t sub_1000903F8()
{
  unint64_t result = qword_100156A20;
  if (!qword_100156A20)
  {
    sub_1000317D8(&qword_100156A18);
    sub_100040BE4(&qword_100156A28, &qword_100156A30);
    sub_100040BE4(&qword_100155410, &qword_100155418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156A20);
  }
  return result;
}

uint64_t sub_1000904C4()
{
  uint64_t v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v6 = v4 + *(int *)(v5 + 32);
      uint64_t v7 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[9];
  uint64_t v9 = sub_100032FA0(&qword_100156688);
  Swift::Int v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[10], v9);
  v10(v3 + v1[11], v9);

  return swift_deallocObject();
}

uint64_t sub_1000906F0()
{
  uint64_t v2 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10004BC10;
  v4[16] = v3;
  return _swift_task_switch(sub_10008A2CC, 0, 0);
}

uint64_t sub_1000907D4()
{
  uint64_t v1 = (int *)type metadata accessor for CalculatorHistoryListView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  uint64_t v5 = v0 + v3;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3 + v1[8];
  sub_100032FA0(&qword_100156668);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_100032FA0(&qword_100156678);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
    {
      swift_release();
      swift_release();
      uint64_t v8 = v6 + *(int *)(v7 + 32);
      uint64_t v9 = type metadata accessor for EditMode();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }
  unint64_t v10 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = v5 + v1[9];
  uint64_t v12 = sub_100032FA0(&qword_100156688);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v5 + v1[10], v12);
  v13(v5 + v1[11], v12);

  return swift_deallocObject();
}

uint64_t sub_100090A14()
{
  uint64_t v2 = *(void *)(type metadata accessor for CalculatorHistoryListView() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10003819C;
  v6[16] = v4;
  v6[17] = v5;
  return _swift_task_switch(sub_100089DBC, 0, 0);
}

unint64_t sub_100090B24()
{
  unint64_t result = qword_100156500;
  if (!qword_100156500)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100156500);
  }
  return result;
}

unint64_t sub_100090B7C()
{
  unint64_t result = qword_100156AC8;
  if (!qword_100156AC8)
  {
    sub_1000317D8(&qword_100156AC0);
    sub_100090C1C();
    sub_100040BE4(&qword_100156AF0, &qword_100156AF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156AC8);
  }
  return result;
}

unint64_t sub_100090C1C()
{
  unint64_t result = qword_100156AD0;
  if (!qword_100156AD0)
  {
    sub_1000317D8(&qword_100156AD8);
    sub_100040BE4(&qword_100156AE0, &qword_100156AE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156AD0);
  }
  return result;
}

void destroy for HistoryViewAccessibilityLabel(uint64_t a1)
{
  swift_release();

  uint64_t v2 = *(void **)(a1 + 16);
}

void *_s10Calculator29HistoryViewAccessibilityLabelVwCP_0(void *a1, void *a2)
{
  unint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_retain();
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for HistoryViewAccessibilityLabel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)a1[1];
  id v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  uint64_t v7 = (void *)a1[2];
  uint64_t v8 = (void *)a2[2];
  a1[2] = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for HistoryViewAccessibilityLabel(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for HistoryViewAccessibilityLabel()
{
  return &type metadata for HistoryViewAccessibilityLabel;
}

uint64_t sub_100090E24()
{
  return sub_100040BE4(&qword_100156B00, &qword_100156B08);
}

uint64_t sub_100090E60()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100090E90()
{
  unint64_t result = qword_100156B28;
  if (!qword_100156B28)
  {
    sub_1000317D8(&qword_100156B10);
    sub_100040BE4(&qword_100156B20, &qword_100156B18);
    sub_100033074(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156B28);
  }
  return result;
}

uint64_t destroy for FilteredHistoryRecord(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 4uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void *_s10Calculator21FilteredHistoryRecordVwCP_0(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >= 4)
  {
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FilteredHistoryRecord(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] >= 4uLL)
  {
    if (v4 >= 4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1000910B4((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 4)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000910B4(uint64_t a1)
{
  return a1;
}

void *assignWithTake for FilteredHistoryRecord(void *a1, void *a2)
{
  if (a1[1] >= 4uLL)
  {
    unint64_t v4 = a2[1];
    if (v4 >= 4)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000910B4((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FilteredHistoryRecord(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FilteredHistoryRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FilteredHistoryRecord()
{
  return &type metadata for FilteredHistoryRecord;
}

unint64_t sub_100091214()
{
  unint64_t result = qword_100156B30;
  if (!qword_100156B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156B30);
  }
  return result;
}

uint64_t sub_100091268@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_10004C02C(v2, v3);
}

unint64_t sub_100091278()
{
  unint64_t result = qword_100156B38;
  if (!qword_100156B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156B38);
  }
  return result;
}

Swift::Int sub_1000912CC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 1:
      Swift::UInt v2 = 1;
      goto LABEL_7;
    case 2:
      Swift::UInt v2 = 2;
      goto LABEL_7;
    case 3:
      Swift::UInt v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      break;
  }
  return Hasher._finalize()();
}

void sub_10009139C()
{
  switch(*(void *)(v0 + 8))
  {
    case 0:
      Swift::UInt v1 = 0;
      goto LABEL_9;
    case 1:
      Swift::UInt v1 = 1;
      goto LABEL_9;
    case 2:
      Swift::UInt v1 = 2;
      goto LABEL_9;
    case 3:
      Swift::UInt v1 = 3;
LABEL_9:
      Hasher._combine(_:)(v1);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      break;
  }
}

Swift::Int sub_100091464()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 0:
      Swift::UInt v2 = 0;
      goto LABEL_7;
    case 1:
      Swift::UInt v2 = 1;
      goto LABEL_7;
    case 2:
      Swift::UInt v2 = 2;
      goto LABEL_7;
    case 3:
      Swift::UInt v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_100091530(uint64_t *a1, uint64_t a2)
{
  return sub_100091928(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_100091544(uint64_t *a1, uint64_t a2)
{
  return sub_100091C38(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

BOOL sub_100091558(uint64_t a1, uint64_t *a2)
{
  return sub_10009156C(*(void *)a1, *(void *)(a1 + 8), *a2, a2[1]);
}

BOOL sub_10009156C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a4)
  {
    case 0:
      if (!a2) {
        goto LABEL_17;
      }
      unint64_t v4 = 0;
      goto LABEL_12;
    case 1:
      if (a2 == 1) {
        goto LABEL_17;
      }
      unint64_t v4 = 1;
      goto LABEL_12;
    case 2:
      if (a2 == 2) {
        goto LABEL_17;
      }
      unint64_t v4 = 2;
      goto LABEL_12;
    case 3:
      if (a2 == 3) {
        goto LABEL_17;
      }
      unint64_t v4 = 3;
      goto LABEL_12;
    default:
      if (a2 >= 4)
      {
        if (a3 == a1 && a4 == a2)
        {
LABEL_17:
          char v6 = 0;
        }
        else
        {
          char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v6 = 0;
          if ((v8 & 1) == 0) {
            char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
      else
      {
        unint64_t v4 = 4;
LABEL_12:
        unint64_t v5 = 4;
        if (a2 < 4) {
          unint64_t v5 = a2;
        }
        char v6 = v4 < v5;
      }
      return (v6 & 1) == 0;
  }
}

BOOL sub_100091698(uint64_t *a1, uint64_t a2)
{
  return sub_1000916AC(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

BOOL sub_1000916AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (!a4) {
        goto LABEL_17;
      }
      unint64_t v4 = 0;
      goto LABEL_12;
    case 1:
      if (a4 == 1) {
        goto LABEL_17;
      }
      unint64_t v4 = 1;
      goto LABEL_12;
    case 2:
      if (a4 == 2) {
        goto LABEL_17;
      }
      unint64_t v4 = 2;
      goto LABEL_12;
    case 3:
      if (a4 == 3) {
        goto LABEL_17;
      }
      unint64_t v4 = 3;
      goto LABEL_12;
    default:
      if (a4 >= 4)
      {
        if (a1 == a3 && a2 == a4)
        {
LABEL_17:
          char v6 = 0;
        }
        else
        {
          char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v6 = 0;
          if ((v8 & 1) == 0) {
            char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
      else
      {
        unint64_t v4 = 4;
LABEL_12:
        unint64_t v5 = 4;
        if (a4 < 4) {
          unint64_t v5 = a4;
        }
        char v6 = v4 < v5;
      }
      return (v6 & 1) == 0;
  }
}

uint64_t sub_1000917D8(uint64_t a1, uint64_t *a2)
{
  return sub_1000917EC(*(void *)a1, *(void *)(a1 + 8), *a2, a2[1]);
}

uint64_t sub_1000917EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a4)
  {
    case 0:
      if (!a2) {
        return 0;
      }
      unint64_t v4 = 0;
      goto LABEL_12;
    case 1:
      if (a2 == 1) {
        return 0;
      }
      unint64_t v4 = 1;
      goto LABEL_12;
    case 2:
      if (a2 == 2) {
        return 0;
      }
      unint64_t v4 = 2;
      goto LABEL_12;
    case 3:
      if (a2 == 3) {
        return 0;
      }
      unint64_t v4 = 3;
      goto LABEL_12;
    default:
      if (a2 >= 4)
      {
        if (a3 == a1 && a4 == a2)
        {
          return 0;
        }
        else
        {
          char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = 0;
          if ((v7 & 1) == 0)
          {
            return _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
      else
      {
        unint64_t v4 = 4;
LABEL_12:
        unint64_t v5 = 4;
        if (a2 < 4) {
          unint64_t v5 = a2;
        }
        return v4 < v5;
      }
      return result;
  }
}

uint64_t sub_100091928(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (a4) {
        goto LABEL_14;
      }
      uint64_t result = 1;
      break;
    case 1:
      if (a4 != 1) {
        goto LABEL_14;
      }
      uint64_t result = 1;
      break;
    case 2:
      if (a4 != 2) {
        goto LABEL_14;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (a4 != 3) {
        goto LABEL_14;
      }
      uint64_t result = 1;
      break;
    default:
      if (a4 < 4)
      {
LABEL_14:
        uint64_t result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      break;
  }
  return result;
}

unint64_t destroy for TimestampSelectionType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s10Calculator22TimestampSelectionTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for TimestampSelectionType(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimestampSelectionType(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimestampSelectionType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimestampSelectionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_100091BF0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100091C08(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TimestampSelectionType()
{
  return &type metadata for TimestampSelectionType;
}

uint64_t sub_100091C38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (!a4) {
        return 0;
      }
      unint64_t v4 = 0;
      goto LABEL_12;
    case 1:
      if (a4 == 1) {
        return 0;
      }
      unint64_t v4 = 1;
      goto LABEL_12;
    case 2:
      if (a4 == 2) {
        return 0;
      }
      unint64_t v4 = 2;
      goto LABEL_12;
    case 3:
      if (a4 == 3) {
        return 0;
      }
      unint64_t v4 = 3;
      goto LABEL_12;
    default:
      if (a4 >= 4)
      {
        if (a1 == a3 && a2 == a4)
        {
          return 0;
        }
        else
        {
          char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = 0;
          if ((v7 & 1) == 0)
          {
            return _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
      else
      {
        unint64_t v4 = 4;
LABEL_12:
        unint64_t v5 = 4;
        if (a4 < 4) {
          unint64_t v5 = a4;
        }
        return v4 < v5;
      }
      return result;
  }
}

uint64_t assignWithCopy for CalculatorDisplayView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for CalculatorDisplayView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CalculatorDisplayView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorDisplayView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorDisplayView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)(result + 4sub_100102B8C(2, 18, 1, 0) = a2;
    }
  }
  return result;
}

uint64_t sub_100091FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  type metadata accessor for CalculatorViewModel();
  sub_1000330BC((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  *(void *)(a6 + 16) = Environment.init<A>(_:)();
  *(unsigned char *)(a6 + 24) = v12 & 1;
  type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  sub_1000330BC(&qword_100156660, (void (*)(uint64_t))type metadata accessor for CalculatorUnitConversionViewModelWrapper);
  *(void *)(a6 + 32) = Environment.init<A>(_:)();
  *(unsigned char *)(a6 + 4sub_100102B8C(2, 18, 1, 0) = v13 & 1;
  type metadata accessor for CalculatorLayout();
  sub_1000330BC((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  *(void *)(a6 + 48) = Environment.init<A>(_:)();
  *(unsigned char *)(a6 + 56) = v14 & 1;
  State.init(wrappedValue:)();
  *(unsigned char *)(a6 + 64) = v16;
  *(void *)(a6 + 72) = v17;
  State.init(wrappedValue:)();
  *(unsigned char *)(a6 + 8sub_100102B8C(2, 18, 1, 0) = v16;
  *(void *)(a6 + 88) = v17;
  *(_OWORD *)(a6 + 12sub_100102B8C(2, 18, 1, 0) = xmmword_1001111B0;
  sub_100032FA0(&qword_100156BD0);
  sub_10003B8D0();
  uint64_t result = ScaledMetric.init(wrappedValue:)();
  *(void *)(a6 + 96) = a1;
  *(void *)(a6 + 104) = a2;
  *(unsigned char *)(a6 + 112) = a3;
  *(void *)a6 = a4;
  *(void *)(a6 + 8) = a5;
  return result;
}

uint64_t sub_1000921B0@<X0>(int a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v77[1] = a4;
  int v89 = a1;
  uint64_t v91 = a5;
  sub_100032FA0(&qword_100156D68);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v90 = (uint64_t)v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100032FA0(&qword_100156D70);
  uint64_t v78 = *(void *)(v79 - 8);
  ((void (*)(void))__chkstk_darwin)();
  id v9 = (char *)v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_100156CE0) - 8;
  ((void (*)(void))__chkstk_darwin)();
  char v12 = (char *)v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100032FA0(&qword_100156CD0) - 8;
  ((void (*)(void))__chkstk_darwin)();
  v77[0] = (char *)v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100032FA0(&qword_100156CC0);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v83 = (uint64_t)v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_100032FA0(&qword_100156CB0);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v87 = (uint64_t)v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_100032FA0(&qword_100156CA0);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v88 = (char *)v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100032FA0(&qword_100156C90);
  uint64_t v18 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v86 = (uint64_t)v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v85 = (uint64_t)v77 - v20;
  *(void *)&long long v92 = a2;
  *((void *)&v92 + 1) = a3;
  LOBYTE(v93) = 0;
  *((void *)&v93 + 1) = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  View.help(_:)();
  sub_1000356E0(v21, v23, v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = v77[0];
  swift_bridgeObjectRelease();
  uint64_t v27 = static Color.white.getter();
  uint64_t v28 = v78;
  uint64_t v29 = v79;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v12, v9, v79);
  *(void *)&v12[*(int *)(v10 + 44)] = v27;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_100033344((uint64_t)v12, v26, &qword_100156CE0);
  Swift::String v30 = (_OWORD *)(v26 + *(int *)(v13 + 44));
  long long v31 = v97;
  v30[4] = v96;
  v30[5] = v31;
  v30[6] = v98;
  long long v32 = v93;
  *Swift::String v30 = v92;
  v30[1] = v32;
  long long v33 = v95;
  v30[2] = v94;
  void v30[3] = v33;
  sub_100032F44((uint64_t)v12, &qword_100156CE0);
  LOBYTE(v9) = static Edge.Set.vertical.getter();
  unsigned __int8 v34 = static Edge.Set.leading.getter();
  char v35 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v9) {
    char v35 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v34) {
    char v35 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v44 = v83;
  sub_100033344(v26, v83, &qword_100156CD0);
  uint64_t v45 = v44 + *(int *)(v80 + 36);
  *(unsigned char *)uint64_t v45 = v35;
  *(void *)(v45 + 8) = v37;
  *(void *)(v45 + 16) = v39;
  *(void *)(v45 + 24) = v41;
  *(void *)(v45 + 32) = v43;
  *(unsigned char *)(v45 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  sub_100032F44(v26, &qword_100156CD0);
  char v46 = static Edge.Set.trailing.getter();
  int v47 = v89 & 1;
  EdgeInsets.init(_all:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v56 = v87;
  sub_100033344(v44, v87, &qword_100156CC0);
  uint64_t v57 = v56 + *(int *)(v81 + 36);
  *(unsigned char *)uint64_t v57 = v46;
  *(void *)(v57 + 8) = v49;
  *(void *)(v57 + 16) = v51;
  *(void *)(v57 + 24) = v53;
  *(void *)(v57 + 32) = v55;
  *(unsigned char *)(v57 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  sub_100032F44(v44, &qword_100156CC0);
  uint64_t v58 = v90;
  sub_1000930FC(v47, v90);
  uint64_t v59 = static Alignment.center.getter();
  uint64_t v61 = v60;
  uint64_t v62 = (uint64_t)v88;
  uint64_t v63 = (uint64_t)&v88[*(int *)(v82 + 36)];
  sub_100033344(v58, v63, &qword_100156D68);
  uint64_t v64 = (uint64_t *)(v63 + *(int *)(sub_100032FA0(&qword_100156D00) + 36));
  *uint64_t v64 = v59;
  v64[1] = v61;
  sub_100033344(v56, v62, &qword_100156CB0);
  sub_100032F44(v58, &qword_100156D68);
  sub_100032F44(v56, &qword_100156CB0);
  LOBYTE(v59) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  uint64_t v72 = v71;
  uint64_t v73 = v86;
  sub_100033344(v62, v86, &qword_100156CA0);
  uint64_t v74 = v73 + *(int *)(v84 + 36);
  *(unsigned char *)uint64_t v74 = v59;
  *(void *)(v74 + 8) = v66;
  *(void *)(v74 + 16) = v68;
  *(void *)(v74 + 24) = v70;
  *(void *)(v74 + 32) = v72;
  *(unsigned char *)(v74 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  sub_100032F44(v62, &qword_100156CA0);
  uint64_t v75 = v85;
  sub_10002D9D0(v73, v85, &qword_100156C90);
  sub_10002D9D0(v75, v91, &qword_100156C90);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100092988@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v84 = a1;
  uint64_t v86 = a2;
  uint64_t v2 = sub_100032FA0(&qword_100156D68);
  __chkstk_darwin(v2 - 8);
  uint64_t v85 = (uint64_t)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100032FA0(&qword_100156DA0);
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  char v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100032FA0(&qword_100156D60);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  id v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100032FA0(&qword_100156D50) - 8;
  __chkstk_darwin(v75);
  uint64_t v72 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100032FA0(&qword_100156D40);
  __chkstk_darwin(v76);
  uint64_t v79 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100032FA0(&qword_100156D30);
  __chkstk_darwin(v77);
  uint64_t v82 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100032FA0(&qword_100156D20);
  __chkstk_darwin(v78);
  uint64_t v83 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100032FA0(&qword_100156C60);
  __chkstk_darwin(v80);
  uint64_t v81 = (uint64_t)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v87 = 6578514;
  *((void *)&v87 + 1) = 0xE300000000000000;
  sub_100023B24();
  uint64_t v15 = Text.init<A>(_:)();
  uint64_t v17 = v16;
  *(void *)&long long v87 = v15;
  *((void *)&v87 + 1) = v16;
  char v19 = v18 & 1;
  LOBYTE(v88) = v18 & 1;
  *((void *)&v88 + 1) = v20;
  LocalizedStringKey.init(stringLiteral:)();
  View.help(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = v15;
  uint64_t v22 = (uint64_t)v72;
  sub_1000356E0(v21, v17, v19);
  swift_bridgeObjectRelease();
  uint64_t v23 = static Color.white.getter();
  uint64_t v24 = v73;
  uint64_t v25 = v74;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v9, v5, v74);
  *(void *)&v9[*(int *)(v7 + 44)] = v23;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v25);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_100033344((uint64_t)v9, v22, &qword_100156D60);
  uint64_t v26 = (_OWORD *)(v22 + *(int *)(v75 + 44));
  long long v27 = v92;
  v26[4] = v91;
  v26[5] = v27;
  v26[6] = v93;
  long long v28 = v88;
  *uint64_t v26 = v87;
  v26[1] = v28;
  long long v29 = v90;
  v26[2] = v89;
  v26[3] = v29;
  sub_100032F44((uint64_t)v9, &qword_100156D60);
  LOBYTE(v5) = static Edge.Set.vertical.getter();
  unsigned __int8 v30 = static Edge.Set.leading.getter();
  char v31 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v5) {
    char v31 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v30) {
    char v31 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v40 = v79;
  sub_100033344(v22, v79, &qword_100156D50);
  uint64_t v41 = v40 + *(int *)(v76 + 36);
  *(unsigned char *)uint64_t v41 = v31;
  *(void *)(v41 + 8) = v33;
  *(void *)(v41 + 16) = v35;
  *(void *)(v41 + 24) = v37;
  *(void *)(v41 + 32) = v39;
  *(unsigned char *)(v41 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  sub_100032F44(v22, &qword_100156D50);
  char v42 = static Edge.Set.trailing.getter();
  int v43 = v84 & 1;
  EdgeInsets.init(_all:)();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v52 = v82;
  sub_100033344(v40, v82, &qword_100156D40);
  uint64_t v53 = v52 + *(int *)(v77 + 36);
  *(unsigned char *)uint64_t v53 = v42;
  *(void *)(v53 + 8) = v45;
  *(void *)(v53 + 16) = v47;
  *(void *)(v53 + 24) = v49;
  *(void *)(v53 + 32) = v51;
  *(unsigned char *)(v53 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  sub_100032F44(v40, &qword_100156D40);
  uint64_t v54 = v85;
  sub_1000930FC(v43, v85);
  uint64_t v55 = static Alignment.center.getter();
  uint64_t v57 = v56;
  uint64_t v58 = (uint64_t)v83;
  uint64_t v59 = (uint64_t)&v83[*(int *)(v78 + 36)];
  sub_100033344(v54, v59, &qword_100156D68);
  uint64_t v60 = (uint64_t *)(v59 + *(int *)(sub_100032FA0(&qword_100156D00) + 36));
  *uint64_t v60 = v55;
  v60[1] = v57;
  sub_100033344(v52, v58, &qword_100156D30);
  sub_100032F44(v54, &qword_100156D68);
  sub_100032F44(v52, &qword_100156D30);
  LOBYTE(v55) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v69 = v81;
  sub_100033344(v58, v81, &qword_100156D20);
  uint64_t v70 = v69 + *(int *)(v80 + 36);
  *(unsigned char *)uint64_t v70 = v55;
  *(void *)(v70 + 8) = v62;
  *(void *)(v70 + 16) = v64;
  *(void *)(v70 + 24) = v66;
  *(void *)(v70 + 32) = v68;
  *(unsigned char *)(v70 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  sub_100032F44(v58, &qword_100156D20);
  return sub_10002D9D0(v69, v86, &qword_100156C60);
}

uint64_t sub_1000930FC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  LODWORD(v39) = a1;
  uint64_t v37 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin();
  uint64_t v38 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100032FA0(&qword_100156D78);
  __chkstk_darwin();
  char v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Material();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  id v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032FA0(&qword_100156D80);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100032FA0(&qword_100156D88);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100032FA0(&qword_100156D90);
  __chkstk_darwin();
  char v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v39)
  {
    uint64_t v39 = v16;
    static Material.ultraThin.getter();
    char v19 = static Edge.Set.all.getter();
    uint64_t v35 = a2;
    char v20 = v19;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v5, v9, v6);
    v5[*(int *)(v36 + 36)] = v20;
    sub_100033344((uint64_t)v5, (uint64_t)v11, &qword_100156D78);
    sub_100032F44((uint64_t)v5, &qword_100156D78);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_100033344((uint64_t)v11, (uint64_t)v14, &qword_100156D80);
    *(void *)&v14[*(int *)(v12 + 36)] = 0x3FC999999999999ALL;
    sub_100032F44((uint64_t)v11, &qword_100156D80);
    uint64_t v21 = v38;
    uint64_t v22 = &v38[*(int *)(v37 + 20)];
    uint64_t v23 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v24 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v22, v23, v24);
    __asm { FMOV            V0.2D, #4.0 }
    *uint64_t v21 = _Q0;
    uint64_t v30 = (uint64_t)&v18[*(int *)(v15 + 36)];
    sub_100093634((uint64_t)v21, v30);
    *(_WORD *)(v30 + *(int *)(sub_100032FA0(&qword_100156D98) + 36)) = 256;
    sub_100033344((uint64_t)v14, (uint64_t)v18, &qword_100156D88);
    sub_100093698((uint64_t)v21);
    sub_100032F44((uint64_t)v14, &qword_100156D88);
    uint64_t v31 = v35;
    sub_10002D9D0((uint64_t)v18, v35, &qword_100156D90);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v15);
  }
  else
  {
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    return v33(a2, 1, 1, v15);
  }
}

uint64_t sub_100093574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100032FA0(&qword_100156DB0);
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

BOOL sub_1000935E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100093634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093698(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for DisplayViewFrame(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000937C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1000937E8()
{
  return sub_100040BE4(&qword_100156DA8, &qword_100156BB0);
}

uint64_t initializeWithTake for AccessibilityMathEquationViewModifier(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for AccessibilityMathEquationViewModifier(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityMathEquationViewModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityMathEquationViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 1sub_100102B8C(2, 18, 1, 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 1sub_100102B8C(2, 18, 1, 0) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10009390C()
{
  return sub_100040BE4(&qword_100156DB8, &qword_100156DB0);
}

unsigned char *storeEnumTagSinglePayload for AXMathEquationExpression(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100093A1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t sub_100093A4C()
{
  unint64_t result = qword_100156DF8;
  if (!qword_100156DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156DF8);
  }
  return result;
}

uint64_t sub_100093AA0()
{
  return sub_10003C558();
}

double sub_100093ABC()
{
  sub_100032FA0(&qword_100156E40);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 5;
  *(_OWORD *)(v0 + 16) = xmmword_100111590;
  *(void *)(v0 + 32) = &off_100149618;
  *(void *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = &off_100149640;
  *(void *)(v0 + 48) = &off_100149668;
  *(void *)(v0 + 56) = &off_100149690;
  *(void *)(v0 + 64) = &off_1001496B8;
  off_100156E18 = (_UNKNOWN *)v0;
  return result;
}

double sub_100093B30()
{
  sub_100032FA0(&qword_100156E40);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 4;
  *(_OWORD *)(v0 + 16) = xmmword_10010E6E0;
  *(void *)(v0 + 32) = &off_1001497A8;
  *(void *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = &off_1001497D0;
  *(void *)(v0 + 48) = &off_1001497F8;
  *(void *)(v0 + 56) = &off_100149820;
  qword_100156E28 = v0;
  return result;
}

double sub_100093B98()
{
  sub_100032FA0(&qword_100156E40);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 5;
  *(_OWORD *)(v0 + 16) = xmmword_100111590;
  *(void *)(v0 + 32) = &off_100149848;
  *(void *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = &off_100149870;
  *(void *)(v0 + 48) = &off_100149898;
  *(void *)(v0 + 56) = &off_1001498C0;
  *(void *)(v0 + 64) = &off_1001498E8;
  qword_100156E30 = v0;
  return result;
}

double sub_100093C0C()
{
  sub_100032FA0(&qword_100156E40);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 5;
  *(_OWORD *)(v0 + 16) = xmmword_100111590;
  *(void *)(v0 + 32) = &off_100149910;
  *(void *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = &off_100149938;
  *(void *)(v0 + 48) = &off_100149960;
  *(void *)(v0 + 56) = &off_100149988;
  *(void *)(v0 + 64) = &off_1001499B0;
  qword_100156E38 = v0;
  return result;
}

void sub_100093DB8(char a1)
{
  uint64_t v2 = v1;
  if (qword_100154790 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1001613A0;
  sub_100006C54();
  if ((a1 & 1) != 0
    && (swift_getKeyPath(),
        sub_1000121A0((unint64_t *)&qword_100155228, (void (*)(uint64_t))type metadata accessor for AppSettings), ObservationRegistrar.access<A, B>(_:keyPath:)(), swift_release(), *(unsigned char *)(v4 + 64) == 1))
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v2;
    *(unsigned char *)(v5 + 24) = 1;
    swift_retain();
    sub_1000F8E4C((uint64_t)sub_10006C2D0, v5);
    swift_release();
  }
  else
  {
    sub_1000943FC(a1 & 1);
  }
}

uint64_t sub_100093F10()
{
  swift_getKeyPath();
  sub_1000121A0(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_100093FB0()
{
  swift_getKeyPath();
  sub_1000121A0(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_100094050@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000121A0(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_1000940F8()
{
  return swift_release();
}

void sub_1000941C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100032FA0(&qword_100154B68);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v10 = static MainActor.shared.getter();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    *(void *)(v11 + 24) = &protocol witness table for MainActor;
    *(void *)(v11 + 32) = a2;
    *(unsigned char *)(v11 + 4sub_100102B8C(2, 18, 1, 0) = a3 & 1;
    sub_100013710((uint64_t)v8, (uint64_t)&unk_100156F18, v11);
    swift_release();
  }
}

uint64_t sub_1000942F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 32) = a5;
  *(void *)(v5 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v5 + 24) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100094390, v7, v6);
}

uint64_t sub_100094390()
{
  char v1 = *(unsigned char *)(v0 + 32);
  swift_release();
  sub_1000943FC(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1000943FC(char a1)
{
  int v2 = a1 & 1;
  swift_getKeyPath();
  uint64_t v10 = v1;
  sub_1000121A0(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned __int8 *)(v1 + 16) != v2)
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    uint64_t v10 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    if (qword_100154750 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100021598(v4, (uint64_t)qword_100161340);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v1 + 16)) {
        uint64_t v8 = 1702195828;
      }
      else {
        uint64_t v8 = 0x65736C6166;
      }
      if (*(unsigned char *)(v1 + 16)) {
        unint64_t v9 = 0xE400000000000000;
      }
      else {
        unint64_t v9 = 0xE500000000000000;
      }
      sub_10000DAA8(v8, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "History View toggled with %{public}s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_100094708@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000121A0(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 17);
  return result;
}

uint64_t sub_1000947B0()
{
  return swift_release();
}

uint64_t sub_100094880()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator26CalculatorToolbarViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100094920()
{
  return type metadata accessor for CalculatorToolbarViewModel();
}

uint64_t sub_100094928()
{
  _StringGuts.grow(_:)(43);
  v1._object = (void *)0x80000001001092C0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  swift_getKeyPath();
  sub_1000121A0(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v0 + 16)) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 16)) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0xD000000000000014;
  v5._object = (void *)0x80000001001092E0;
  String.append(_:)(v5);
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t sub_100094AD4()
{
  return sub_100094928();
}

uint64_t sub_100094B08()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100094B48(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10004BC10;
  return sub_1000942F4(a1, v4, v5, v6, v7);
}

uint64_t sub_100094C14()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100094C4C()
{
  uint64_t v0 = sub_100032FA0(&qword_100156FC8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v3 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = type metadata accessor for TypeDisplayRepresentation();
  sub_1000215D0(v10, static CalculatorAppView.typeDisplayRepresentation);
  sub_100021598(v10, (uint64_t)static CalculatorAppView.typeDisplayRepresentation);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v12[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v2, 1, 1, v8);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t CalculatorAppView.typeDisplayRepresentation.unsafeMutableAddressor()
{
  if (qword_100154698 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();

  return sub_100021598(v0, (uint64_t)static CalculatorAppView.typeDisplayRepresentation);
}

uint64_t static CalculatorAppView.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_100154698 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = sub_100021598(v2, (uint64_t)static CalculatorAppView.typeDisplayRepresentation);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t sub_10009503C()
{
  uint64_t v0 = sub_100032FA0(&qword_100156FD8);
  __chkstk_darwin(v0 - 8);
  uint64_t v17 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100032FA0(&qword_100156FC8);
  __chkstk_darwin(v2 - 8);
  uint64_t v16 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100032FA0(&qword_100156FE0);
  sub_100032FA0(&qword_1001560B0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10010DCB0;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for LocalizedStringResource.BundleDescription.main(_:), v4);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, 1, 1, v10);
  uint64_t v13 = type metadata accessor for DisplayRepresentation.Image();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v17, 1, 1, v13);
  DisplayRepresentation.init(title:subtitle:image:)();
  unint64_t result = sub_100070F20(v12);
  static CalculatorAppView.caseDisplayRepresentations = result;
  return result;
}

uint64_t *CalculatorAppView.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_1001546A0 != -1) {
    swift_once();
  }
  return &static CalculatorAppView.caseDisplayRepresentations;
}

uint64_t static CalculatorAppView.caseDisplayRepresentations.getter()
{
  if (qword_1001546A0 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

BOOL CalculatorAppView.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001499D8, v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

_UNKNOWN **static CalculatorAppView.allCases.getter()
{
  return &off_100149A10;
}

uint64_t CalculatorAppView.rawValue.getter()
{
  return 7368801;
}

uint64_t sub_10009553C@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100149A38, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100095590(void *a1@<X8>)
{
  *a1 = 7368801;
  a1[1] = 0xE300000000000000;
}

unint64_t sub_1000955A8()
{
  unint64_t result = qword_100156F20;
  if (!qword_100156F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F20);
  }
  return result;
}

Swift::Int sub_1000955FC()
{
  return Hasher._finalize()();
}

uint64_t sub_100095648()
{
  return String.hash(into:)();
}

Swift::Int sub_100095658()
{
  return Hasher._finalize()();
}

unint64_t sub_1000956A4()
{
  unint64_t result = qword_100156F28;
  if (!qword_100156F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F28);
  }
  return result;
}

unint64_t sub_1000956FC()
{
  unint64_t result = qword_100156F30;
  if (!qword_100156F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F30);
  }
  return result;
}

unint64_t sub_100095754()
{
  unint64_t result = qword_100156F38;
  if (!qword_100156F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F38);
  }
  return result;
}

void *sub_1000957A8()
{
  return &protocol witness table for String;
}

unint64_t sub_1000957B8()
{
  unint64_t result = qword_100156F40;
  if (!qword_100156F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F40);
  }
  return result;
}

unint64_t sub_100095810()
{
  unint64_t result = qword_100156F48;
  if (!qword_100156F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F48);
  }
  return result;
}

unint64_t sub_100095868()
{
  unint64_t result = qword_100156F50;
  if (!qword_100156F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F50);
  }
  return result;
}

unint64_t sub_1000958C0()
{
  unint64_t result = qword_100156F58;
  if (!qword_100156F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F58);
  }
  return result;
}

uint64_t sub_100095918@<X0>(uint64_t a1@<X8>)
{
  return sub_100096208(&qword_100154698, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static CalculatorAppView.typeDisplayRepresentation, a1);
}

uint64_t sub_100095950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100096150(a1, a2, a3, (void (*)(void))sub_10009597C);
}

unint64_t sub_10009597C()
{
  unint64_t result = qword_100156F60;
  if (!qword_100156F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F60);
  }
  return result;
}

uint64_t sub_1000959D0(uint64_t a1)
{
  unint64_t v2 = sub_10009597C();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100095A20()
{
  unint64_t result = qword_100156F68;
  if (!qword_100156F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F68);
  }
  return result;
}

unint64_t sub_100095A78()
{
  unint64_t result = qword_100156F70;
  if (!qword_100156F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F70);
  }
  return result;
}

unint64_t sub_100095AD0()
{
  unint64_t result = qword_100156F78;
  if (!qword_100156F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F78);
  }
  return result;
}

uint64_t sub_100095B24(uint64_t a1)
{
  unint64_t v2 = sub_1000958C0();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100095B74()
{
  unint64_t result = qword_100156F80;
  if (!qword_100156F80)
  {
    sub_1000317D8(&qword_100156F88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F80);
  }
  return result;
}

void sub_100095BD0(void *a1@<X8>)
{
  *a1 = &off_100149A70;
}

unint64_t sub_100095BE4()
{
  unint64_t result = qword_100156F90;
  if (!qword_100156F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F90);
  }
  return result;
}

uint64_t sub_100095C38()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::Int v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_1000215D0(v6, qword_100161290);
  sub_100021598(v6, (uint64_t)qword_100161290);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t sub_100095E24()
{
  uint64_t v0 = type metadata accessor for IntentAuthenticationPolicy();
  sub_1000215D0(v0, qword_1001612A8);
  uint64_t v1 = sub_100021598(v0, (uint64_t)qword_1001612A8);
  uint64_t v2 = enum case for IntentAuthenticationPolicy.alwaysAllowed(_:);
  Swift::Int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v3(v1, v2, v0);
}

uint64_t sub_100095EAC()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_100095ED0()
{
  return IntentParameter.wrappedValue.setter();
}

void (*sub_100095EF4(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100095F50;
}

void sub_100095F50(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

unint64_t sub_100095FA0()
{
  unint64_t result = qword_100156F98;
  if (!qword_100156F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156F98);
  }
  return result;
}

unint64_t sub_100095FF8()
{
  unint64_t result = qword_100156FA0;
  if (!qword_100156FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156FA0);
  }
  return result;
}

unint64_t sub_100096050()
{
  unint64_t result = qword_100156FA8;
  if (!qword_100156FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156FA8);
  }
  return result;
}

uint64_t sub_1000960A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100096150(a1, a2, a3, (void (*)(void))sub_1000960D0);
}

unint64_t sub_1000960D0()
{
  unint64_t result = qword_100156FB0;
  if (!qword_100156FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100156FB0);
  }
  return result;
}

uint64_t sub_100096124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100096150(a1, a2, a3, (void (*)(void))sub_100095FA0);
}

uint64_t sub_100096150(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100096198@<X0>(uint64_t a1@<X8>)
{
  return sub_100096208(&qword_1001546A8, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100161290, a1);
}

uint64_t sub_1000961D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100096208(&qword_1001546B0, (uint64_t (*)(void))&type metadata accessor for IntentAuthenticationPolicy, (uint64_t)qword_1001612A8, a1);
}

uint64_t sub_100096208@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_100021598(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t sub_1000962B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000960D0();
  void *v5 = v2;
  v5[1] = sub_10004BC10;
  return OpenIntent.perform()(a1, a2, v6);
}

uint64_t sub_10009636C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100096494();
  *a1 = result;
  return result;
}

unint64_t sub_100096394()
{
  return 0xD00000000000001ALL;
}

unsigned char *storeEnumTagSinglePayload for CalculatorAppView(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10009644CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorAppView()
{
  return &type metadata for CalculatorAppView;
}

ValueMetadata *type metadata accessor for LaunchCalculatorOpenIntent()
{
  return &type metadata for LaunchCalculatorOpenIntent;
}

uint64_t sub_100096494()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v24 = *(void *)(v0 - 8);
  uint64_t v25 = v0;
  __chkstk_darwin(v0);
  uint64_t v23 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100032FA0(&qword_100156FC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v22 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v21 - v5;
  uint64_t v7 = sub_100032FA0(&qword_100156FC8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Locale();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for LocalizedStringResource();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v21 = sub_100032FA0(&qword_100156FD0);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v9, 1, 1, v16);
  char v26 = 0;
  uint64_t v18 = type metadata accessor for IntentDialog();
  char v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v19(v6, 1, 1, v18);
  v19(v22, 1, 1, v18);
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v23, enum case for InputConnectionBehavior.default(_:), v25);
  sub_10009597C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t sub_1000968F4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10003314C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 50);
  return result;
}

uint64_t sub_10009699C()
{
  return swift_release();
}

uint64_t sub_100096A6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v2 = sub_100032FA0(&qword_100154890);
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v27 - v5;
  uint64_t v6 = sub_100032FA0(&qword_100157158);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v32 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100032FA0(&qword_100157160) - 8;
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = swift_allocBox();
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)v1;
  char v11 = *(unsigned char *)(v1 + 8);
  uint64_t v12 = swift_retain();
  sub_100033AA8(v12, v11);
  swift_release();
  type metadata accessor for CalculatorViewModel();
  sub_10003314C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  Bindable<A>.init(wrappedValue:)();
  double v13 = sub_100014120(v10, v11, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24) & 1);
  uint64_t v14 = static HorizontalAlignment.center.getter();
  uint64_t v15 = v27;
  sub_10000CFF8((uint64_t)v40);
  *(_OWORD *)((char *)&v42[4] + 7) = v40[4];
  *(_OWORD *)((char *)&v42[3] + 7) = v40[3];
  *(_OWORD *)((char *)&v42[7] + 7) = v40[7];
  *(_OWORD *)((char *)&v42[8] + 7) = v40[8];
  *(_OWORD *)((char *)&v42[9] + 7) = v40[9];
  *(void *)((char *)&v42[10] + 7) = v41;
  *(_OWORD *)((char *)&v42[5] + 7) = v40[5];
  *(_OWORD *)((char *)&v42[6] + 7) = v40[6];
  *(_OWORD *)((char *)v42 + 7) = v40[0];
  *(_OWORD *)((char *)&v42[1] + 7) = v40[1];
  *(_OWORD *)((char *)&v42[2] + 7) = v40[2];
  *((double *)&v38 + 1) = v13;
  *(_OWORD *)((char *)&v39[7] + 1) = v42[7];
  *(_OWORD *)((char *)&v39[8] + 1) = v42[8];
  *(_OWORD *)((char *)&v39[9] + 1) = v42[9];
  v39[10] = *(_OWORD *)((char *)&v42[9] + 15);
  *(_OWORD *)((char *)&v39[3] + 1) = v42[3];
  *(_OWORD *)((char *)&v39[4] + 1) = v42[4];
  *(_OWORD *)((char *)&v39[5] + 1) = v42[5];
  *(_OWORD *)((char *)&v39[6] + 1) = v42[6];
  *(_OWORD *)((char *)v39 + 1) = v42[0];
  char v43 = 0;
  *(void *)&long long v38 = v14;
  LOBYTE(v39[0]) = 0;
  *(_OWORD *)((char *)&v39[1] + 1) = v42[1];
  *(_OWORD *)((char *)&v39[2] + 1) = v42[2];
  uint64_t v16 = v29;
  uint64_t v17 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v28, v2);
  uint64_t v18 = v30;
  Bindable.projectedValue.getter();
  char v19 = *(void (**)(char *, uint64_t))(v16 + 8);
  v19(v17, v2);
  swift_getKeyPath();
  Bindable<A>.subscript.getter();
  swift_release();
  v19(v18, v2);
  sub_100032FA0(&qword_100157168);
  type metadata accessor for DebugMenu();
  sub_100040BE4(&qword_100157170, &qword_100157168);
  sub_10003314C(&qword_100157178, (void (*)(uint64_t))type metadata accessor for DebugMenu);
  char v20 = v32;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  v44[8] = v39[7];
  v44[9] = v39[8];
  v44[10] = v39[9];
  v44[11] = v39[10];
  v44[4] = v39[3];
  v44[5] = v39[4];
  v44[6] = v39[5];
  v44[7] = v39[6];
  v44[0] = v38;
  v44[1] = v39[0];
  _DWORD v44[2] = v39[1];
  void v44[3] = v39[2];
  sub_100097A44((uint64_t)v44);
  uint64_t v22 = v35;
  uint64_t v21 = v36;
  uint64_t v23 = (uint64_t)v33;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v33, v20, v36);
  uint64_t v24 = (uint64_t (**)())(v23 + *(int *)(v34 + 44));
  *uint64_t v24 = sub_100097AF0;
  v24[1] = (uint64_t (*)())v15;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v22 + 8);
  swift_retain();
  v25(v20, v21);
  sub_100097AF8(v23, v37);
  return swift_release();
}

uint64_t sub_100096FFC()
{
  uint64_t v0 = sub_100032FA0(&qword_100154890);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = swift_projectBox();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  Bindable.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v5 = v10;
  swift_getKeyPath();
  uint64_t v8 = v5;
  char v9 = 1;
  uint64_t v10 = v5;
  sub_10003314C((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1000971A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100032FA0(&qword_1001570A8);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100032FA0(&qword_100157078);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  char v9 = (_OWORD *)((char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = static Alignment.center.getter();
  uint64_t v12 = v11;
  uint64_t v13 = static Alignment.center.getter();
  sub_10003913C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v35, 0.0, 1, INFINITY, 0, v13, v14, v10, v12);
  uint64_t v15 = static Alignment.bottom.getter();
  uint64_t v17 = v16;
  sub_100096A6C((uint64_t)v5);
  uint64_t v18 = (uint64_t *)&v5[*(int *)(v3 + 44)];
  *uint64_t v18 = v15;
  v18[1] = v17;
  sub_100033344((uint64_t)v5, (uint64_t)v9 + *(int *)(v7 + 44), &qword_1001570A8);
  long long v19 = v35[5];
  v9[4] = v35[4];
  v9[5] = v19;
  long long v20 = v35[7];
  unsigned char v9[6] = v35[6];
  v9[7] = v20;
  long long v21 = v35[1];
  *char v9 = v35[0];
  v9[1] = v21;
  long long v22 = v35[3];
  _OWORD v9[2] = v35[2];
  v9[3] = v22;
  sub_100032F44((uint64_t)v5, &qword_1001570A8);
  uint64_t v23 = static Alignment.top.getter();
  uint64_t v25 = v24;
  type metadata accessor for CalculatorLayout();
  sub_10003314C((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  uint64_t v26 = Environment.init<A>(_:)();
  LOBYTE(v3) = v27;
  type metadata accessor for CalculatorToolbarViewModel();
  sub_10003314C(&qword_100154FF0, (void (*)(uint64_t))type metadata accessor for CalculatorToolbarViewModel);
  uint64_t v28 = Environment.init<A>(_:)();
  LOBYTE(v15) = v29;
  v34[0] = 0x3FF0000000000000;
  State.init(wrappedValue:)();
  uint64_t v30 = v34[1];
  uint64_t v31 = v34[2];
  sub_100033344((uint64_t)v9, a1, &qword_100157078);
  uint64_t v32 = a1 + *(int *)(sub_100032FA0(&qword_100156FE8) + 36);
  *(void *)uint64_t v32 = v26;
  *(unsigned char *)(v32 + 8) = v3 & 1;
  *(void *)(v32 + 16) = v28;
  *(unsigned char *)(v32 + 24) = v15 & 1;
  *(void *)(v32 + 32) = v30;
  *(void *)(v32 + 4sub_100102B8C(2, 18, 1, 0) = v31;
  *(void *)(v32 + 48) = v23;
  *(void *)(v32 + 56) = v25;
  return sub_100032F44((uint64_t)v9, &qword_100157078);
}

uint64_t sub_100097494()
{
  return sub_10009750C(&qword_100157050, &qword_100157000, (void (*)(void))sub_1000974BC);
}

uint64_t sub_1000974BC()
{
  return sub_10009750C(&qword_100157058, &qword_100156FF8, (void (*)(void))sub_1000974E4);
}

uint64_t sub_1000974E4()
{
  return sub_10009750C(&qword_100157060, &qword_100156FF0, (void (*)(void))sub_10009758C);
}

uint64_t sub_10009750C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009758C()
{
  unint64_t result = qword_100157068;
  if (!qword_100157068)
  {
    sub_1000317D8(&qword_100156FE8);
    sub_10009762C();
    sub_100040BE4(&qword_1001570B0, &qword_1001570B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157068);
  }
  return result;
}

unint64_t sub_10009762C()
{
  unint64_t result = qword_100157070;
  if (!qword_100157070)
  {
    sub_1000317D8(&qword_100157078);
    sub_10003AAE8();
    sub_100040BE4(&qword_1001570A0, &qword_1001570A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157070);
  }
  return result;
}

unint64_t sub_1000976D8()
{
  unint64_t result = qword_1001570D0;
  if (!qword_1001570D0)
  {
    sub_1000317D8(&qword_100157028);
    sub_100097778();
    sub_100040BE4(&qword_1001570F8, &qword_100157100);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001570D0);
  }
  return result;
}

unint64_t sub_100097778()
{
  unint64_t result = qword_1001570D8;
  if (!qword_1001570D8)
  {
    sub_1000317D8(&qword_100157020);
    sub_100097818();
    sub_100040BE4(&qword_1001570E8, &qword_1001570F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001570D8);
  }
  return result;
}

unint64_t sub_100097818()
{
  unint64_t result = qword_1001570E0;
  if (!qword_1001570E0)
  {
    sub_1000317D8(&qword_100157018);
    sub_1000317D8(&qword_100157008);
    sub_1000317D8(&qword_100157040);
    sub_10009750C(&qword_100157048, &qword_100157008, (void (*)(void))sub_100097494);
    sub_1000317D8(&qword_1001570C0);
    sub_100040BE4(&qword_1001570C8, &qword_1001570C0);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100040BE4(&qword_100155A10, &qword_100155A18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001570E0);
  }
  return result;
}

uint64_t sub_1000979A0()
{
  swift_release();
  swift_release();
  swift_release();
  sub_100032EAC(*(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t sub_100097A0C()
{
  return swift_deallocObject();
}

uint64_t sub_100097A1C()
{
  return sub_10000A474();
}

uint64_t sub_100097A2C()
{
  return sub_10000A474();
}

uint64_t sub_100097A44(uint64_t a1)
{
  return a1;
}

uint64_t sub_100097AF0()
{
  return sub_100096FFC();
}

uint64_t sub_100097AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100157160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100097B60()
{
  return sub_100057440(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

unint64_t sub_100097B8C()
{
  unint64_t result = qword_100157180;
  if (!qword_100157180)
  {
    sub_1000317D8(&qword_100157108);
    sub_100097C2C();
    sub_100040BE4(&qword_100155BE8, &qword_100154880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157180);
  }
  return result;
}

unint64_t sub_100097C2C()
{
  unint64_t result = qword_100157188[0];
  if (!qword_100157188[0])
  {
    sub_1000317D8(&qword_100157038);
    sub_1000317D8(&qword_100157028);
    sub_1000976D8();
    swift_getOpaqueTypeConformance2();
    sub_10003314C(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100157188);
  }
  return result;
}

uint64_t sub_100097D0C()
{
  return sub_100097B60();
}

_OWORD *sub_100097D24(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t sub_100097D6C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100097DB4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_100097DF4()
{
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for GridRow();

  return swift_getWitnessTable();
}

uint64_t destroy for BackgroundDimView(uint64_t a1)
{
  sub_10002F4E8(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));

  return swift_release();
}

uint64_t initializeWithCopy for BackgroundDimView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 17);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 16);
  sub_100023524(*(void *)a2, v5, v7, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 17) = v6;
  char v8 = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BackgroundDimView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 17);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 16);
  sub_100023524(*(void *)a2, v5, v7, v6);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 17) = v6;
  sub_10002F4E8(v8, v9, v11, v10);
  char v12 = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BackgroundDimView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 17) = v5;
  sub_10002F4E8(v6, v7, v9, v8);
  char v10 = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v10;
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for BackgroundDimView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000980A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000980BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v25 = sub_100032FA0(&qword_100157210);
  uint64_t v2 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  char v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100032FA0(&qword_100157218);
  __chkstk_darwin(v24);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v9 = v8;
  uint64_t v10 = static Alignment.center.getter();
  uint64_t v22 = v9;
  char v11 = 1;
  sub_10003913C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v27, 0.0, 1, INFINITY, 0, v10, v12, v7, v22);
  static Color.black.getter();
  uint64_t v13 = Color.opacity(_:)();
  swift_release();
  LOBYTE(v7) = static Edge.Set.all.getter();
  char v14 = static Edge.Set.all.getter();
  *(void *)&v28[1] = v13;
  BYTE8(v28[1]) = v7;
  BYTE9(v28[1]) = v14;
  long long v29 = *v1;
  __int16 v30 = *((_WORD *)v1 + 8);
  LOBYTE(v7) = *((unsigned char *)v1 + 32);
  uint64_t v15 = swift_allocObject();
  long long v16 = v1[1];
  *(_OWORD *)(v15 + 16) = *v1;
  *(_OWORD *)(v15 + 32) = v16;
  *(unsigned char *)(v15 + 48) = *((unsigned char *)v1 + 32);
  sub_100098680((uint64_t)&v29);
  swift_retain();
  sub_100032FA0(&qword_100157220);
  sub_1000986B8();
  View.onTapGesture(count:perform:)();
  swift_release();
  v31[6] = v27[6];
  v32[0] = v28[0];
  *(_OWORD *)((char *)v32 + 1sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)((char *)v28 + 10);
  _OWORD v31[2] = v27[2];
  v31[3] = v27[3];
  v31[4] = v27[4];
  v31[5] = v27[5];
  v31[0] = v27[0];
  v31[1] = v27[1];
  sub_1000987D4((uint64_t)v31);
  uint64_t v17 = swift_retain();
  uint64_t v18 = sub_100033AA8(v17, v7);
  swift_release();
  swift_getKeyPath();
  *(void *)&v27[0] = v18;
  sub_100098808();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v19 = *(unsigned __int8 *)(v18 + 48);
  swift_release();
  switch(v19)
  {
    case 2:
      break;
    default:
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = v25;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v6, v4, v25);
  v6[*(int *)(v24 + 36)] = v11 & 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v20);
  return sub_100098860((uint64_t)v6, v26);
}

uint64_t sub_1000984B4()
{
  return swift_release();
}

uint64_t sub_10009852C(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 17);
  sub_100023524(*(void *)a1, v2, v3, v4);
  sub_1000D1970(v1, v2, v3 | (v4 << 8));
  sub_10002F4E8(v1, v2, v3, v4);
  swift_retain();
  swift_retain();
  sub_100032FA0(&qword_100154830);
  Binding.wrappedValue.getter();
  Binding.wrappedValue.setter();
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_100098630()
{
  sub_10002F4E8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned char *)(v0 + 33));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100098678()
{
  return sub_1000984B4();
}

uint64_t sub_100098680(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000986B8()
{
  unint64_t result = qword_100157228;
  if (!qword_100157228)
  {
    sub_1000317D8(&qword_100157220);
    sub_100098734();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157228);
  }
  return result;
}

unint64_t sub_100098734()
{
  unint64_t result = qword_100157230;
  if (!qword_100157230)
  {
    sub_1000317D8(&qword_100157238);
    sub_10003AAE8();
    sub_100040BE4(&qword_100155370, &qword_100155378);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157230);
  }
  return result;
}

uint64_t sub_1000987D4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100098808()
{
  unint64_t result = qword_100154818;
  if (!qword_100154818)
  {
    type metadata accessor for CalculatorViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100154818);
  }
  return result;
}

uint64_t sub_100098860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100157218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000988C8()
{
  return sub_10009852C(*(void *)(v0 + 16));
}

unint64_t sub_1000988E8()
{
  unint64_t result = qword_100157240;
  if (!qword_100157240)
  {
    sub_1000317D8(&qword_100157218);
    sub_1000317D8(&qword_100157220);
    sub_1000986B8();
    swift_getOpaqueTypeConformance2();
    sub_100039520();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157240);
  }
  return result;
}

uint64_t sub_100098998(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_10001CFF8((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_100075C24(v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100032F44(a1, &qword_100155208);
    unint64_t v7 = sub_1000745AC(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_100075E4C();
        uint64_t v11 = v13;
      }
      sub_10001CFF8((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      sub_1000756F0(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_100032F44((uint64_t)v14, &qword_100155208);
  }
}

uint64_t sub_100098AAC()
{
  v1[29] = v0;
  sub_100032FA0(&qword_100157350);
  v1[30] = swift_task_alloc();
  uint64_t v2 = sub_100032FA0(&qword_1001573B8);
  v1[31] = v2;
  v1[32] = *(void *)(v2 - 8);
  v1[33] = swift_task_alloc();
  v1[34] = type metadata accessor for StoreContext();
  sub_10009C784(&qword_100157340, v3, (void (*)(uint64_t))type metadata accessor for StoreContext);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100098BF4, v5, v4);
}

uint64_t sub_100098BF4()
{
  uint64_t v44 = v0;
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100021598(v1, (uint64_t)qword_100161340);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Attempting to fetch all existing records from db.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 240);

  uint64_t v6 = sub_100032FA0(&qword_100157358);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  sub_100032FA0(&qword_1001573C0);
  sub_100032FA0(&qword_1001573C8);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10010DCB0;
  swift_getKeyPath();
  sub_10009C784(&qword_1001573D0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
  SortDescriptor.init<A>(_:order:)();
  type metadata accessor for SchemaV1.HistoryRecord();
  sub_10009C784(&qword_100154B80, 255, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  FetchDescriptor.init(predicate:sortBy:)();
  sub_10009C784(&qword_100157348, v7, (void (*)(uint64_t))type metadata accessor for StoreContext);
  ModelActor.modelContext.getter();
  unint64_t v8 = dispatch thunk of ModelContext.fetch<A>(_:)();
  uint64_t result = swift_release();
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_7;
    }
LABEL_25:
    uint64_t v41 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    goto LABEL_25;
  }
LABEL_7:
  if (v10 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v11 = 0;
  uint64_t v39 = (uint64_t *)(v0 + 16);
  unint64_t v38 = v8 & 0xC000000000000001;
  uint64_t v41 = _swiftEmptyArrayStorage;
  unint64_t v37 = v8;
  do
  {
    uint64_t v40 = v11;
    if (v38)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v12 = *(void *)(v8 + 8 * v11 + 32);
      swift_retain();
    }
    *(void *)(v0 + 20sub_100102B8C(2, 18, 1, 0) = v12;
    swift_getKeyPath();
    sub_10009C784(&qword_100154B78, 255, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v13 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 72);
    *((void *)&v43 + 1) = &type metadata for String;
    *(void *)&long long v42 = v13;
    *((void *)&v42 + 1) = v14;
    sub_100098998((uint64_t)&v42, 0);
    *(void *)(v0 + 216) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v16 = *(void *)(v0 + 104);
    *((void *)&v43 + 1) = &type metadata for String;
    *(void *)&long long v42 = v15;
    *((void *)&v42 + 1) = v16;
    sub_100098998((uint64_t)&v42, 1);
    *(void *)(v0 + 152) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    char v17 = *(unsigned char *)(v0 + 281);
    *((void *)&v43 + 1) = &type metadata for Bool;
    LOBYTE(v42) = v17;
    sub_100098998((uint64_t)&v42, 2);
    *(void *)(v0 + 144) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    char v18 = *(unsigned char *)(v0 + 280);
    *((void *)&v43 + 1) = &type metadata for Bool;
    LOBYTE(v42) = v18;
    sub_100098998((uint64_t)&v42, 3);
    *(void *)(v0 + 16sub_100102B8C(2, 18, 1, 0) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    char v19 = *(unsigned char *)(v0 + 282);
    *((void *)&v43 + 1) = &type metadata for Bool;
    LOBYTE(v42) = v19;
    sub_100098998((uint64_t)&v42, 4);
    *(void *)(v0 + 176) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 136);
    *((void *)&v43 + 1) = &type metadata for String;
    *(void *)&long long v42 = v20;
    *((void *)&v42 + 1) = v21;
    sub_100098998((uint64_t)&v42, 5);
    *(void *)(v0 + 192) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v22 = *(void *)(v0 + 112);
    uint64_t v23 = *(void *)(v0 + 120);
    *((void *)&v43 + 1) = &type metadata for String;
    *(void *)&long long v42 = v22;
    *((void *)&v42 + 1) = v23;
    sub_100098998((uint64_t)&v42, 6);
    *(void *)(v0 + 208) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    sub_10004B9E8();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v24 = *(void *)(v0 + 88);
    if (v24)
    {
      uint64_t v25 = *(void *)(v0 + 80);
      *((void *)&v43 + 1) = &type metadata for String;
      *(void *)&long long v42 = v25;
      *((void *)&v42 + 1) = v24;
    }
    else
    {
      long long v42 = 0u;
      long long v43 = 0u;
    }
    sub_100098998((uint64_t)&v42, 7);
    *(void *)(v0 + 224) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    uint64_t v26 = *(void *)(v0 + 56);
    if (v26)
    {
      uint64_t v27 = *(void *)(v0 + 48);
      *((void *)&v43 + 1) = &type metadata for String;
      *(void *)&long long v42 = v27;
      *((void *)&v42 + 1) = v26;
    }
    else
    {
      long long v42 = 0u;
      long long v43 = 0u;
    }
    sub_100098998((uint64_t)&v42, 8);
    *(void *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = type metadata accessor for Date();
    sub_100038BE8(v39);
    *(void *)(v0 + 168) = v12;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    sub_10009C784(&qword_100154B98, 255, (void (*)(uint64_t))&type metadata accessor for Date);
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    sub_100098998((uint64_t)v39, 9);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v41 = sub_1000A4C1C(0, v41[2] + 1, 1, v41);
    }
    unint64_t v8 = v37;
    unint64_t v29 = v41[2];
    unint64_t v28 = v41[3];
    if (v29 >= v28 >> 1) {
      uint64_t v41 = sub_1000A4C1C((void *)(v28 > 1), v29 + 1, 1, v41);
    }
    ++v11;
    v41[2] = v29 + 1;
    v41[v29 + 4] = &_swiftEmptyDictionarySingleton;
    swift_release();
  }
  while (v10 != v40 + 1);
LABEL_26:
  swift_bridgeObjectRelease();
  __int16 v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Successfully fetched all existing records from db.", v32, 2u);
    swift_slowDealloc();
  }
  uint64_t v34 = *(void *)(v0 + 256);
  uint64_t v33 = *(void *)(v0 + 264);
  uint64_t v35 = *(void *)(v0 + 248);

  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void *))(v0 + 8);
  return v36(v41);
}

uint64_t sub_1000998CC(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  type metadata accessor for GenericRecord();
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for StoreContext();
  sub_10009C784(&qword_100157340, v3, (void (*)(uint64_t))type metadata accessor for StoreContext);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000999B0, v5, v4);
}

uint64_t sub_1000999B0()
{
  uint64_t v12 = v0;
  uint64_t v1 = v0[13];
  sub_10004BA5C(v0[11], v1);
  type metadata accessor for SchemaV1.HistoryRecord();
  swift_allocObject();
  uint64_t v2 = sub_10007A678(v1);
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100021598(v3, (uint64_t)qword_100161340);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t type = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v11 = type;
    v0[8] = v2;
    swift_getKeyPath();
    sub_10009C784(&qword_100154B78, 255, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    sub_10009C784(&qword_100154B80, 255, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    v0[10] = sub_10000DAA8(v0[2], v0[3], &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Adding record: %s to db.", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  sub_10009C784(&qword_100157348, v7, (void (*)(uint64_t))type metadata accessor for StoreContext);
  ModelActor.modelContext.getter();
  sub_10009C784(&qword_100154B80, 255, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  dispatch thunk of ModelContext.insert<A>(_:)();
  swift_release();
  ModelActor.modelContext.getter();
  dispatch thunk of ModelContext.save()();
  swift_release();
  swift_release();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10009A040(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = v3;
  *(unsigned char *)(v4 + 12sub_100102B8C(2, 18, 1, 0) = a3;
  *(void *)(v4 + 48) = a1;
  sub_100032FA0(&qword_100157350);
  *(void *)(v4 + 72) = swift_task_alloc();
  *(void *)(v4 + 8sub_100102B8C(2, 18, 1, 0) = swift_task_alloc();
  uint64_t v5 = sub_100032FA0(&qword_100157358);
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = *(void *)(v5 - 8);
  *(void *)(v4 + 104) = swift_task_alloc();
  *(void *)(v4 + 112) = type metadata accessor for StoreContext();
  sub_10009C784(&qword_100157340, v6, (void (*)(uint64_t))type metadata accessor for StoreContext);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10009A1A0, v8, v7);
}

uint64_t sub_10009A1A0()
{
  uint64_t v27 = v0;
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100021598(v1, (uint64_t)qword_100161340);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 56);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 4sub_100102B8C(2, 18, 1, 0) = sub_10000DAA8(v6, v5, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Deleting record: %s from db.", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 56);
  int v10 = *(unsigned __int8 *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v9;
  *(void *)(v0 + 16) = type metadata accessor for SchemaV1.HistoryRecord();
  Predicate.init(_:)();
  sub_10009C784(&qword_100157348, v13, (void (*)(uint64_t))type metadata accessor for StoreContext);
  ModelActor.modelContext.getter();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, void))(v8 + 16);
  uint64_t v15 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
  uint64_t v16 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 88);
  if (v10 == 1)
  {
    uint64_t v18 = *(void *)(v0 + 80);
    v14(v18, v16, *(void *)(v0 + 88));
    (*v15)(v18, 0, 1, v17);
    sub_10009C784(&qword_100154B80, 255, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
    uint64_t v20 = *(void *)(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v21 = *(void *)(v0 + 80);
    uint64_t v22 = *(void *)(v0 + 88);
    swift_release();
    sub_100032F44(v21, &qword_100157350);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v22);
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 72);
    v14(v23, v16, *(void *)(v0 + 88));
    (*v15)(v23, 0, 1, v17);
    sub_10009C784(&qword_100154B80, 255, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
    sub_100032F44(*(void *)(v0 + 72), &qword_100157350);
    swift_release();
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.save()();
    (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10009A900@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v5 = sub_100032FA0(&qword_100157360);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100032FA0(&qword_100157368);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v23 = v9;
  uint64_t v24 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100032FA0(&qword_100157370);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  static PredicateExpressions.build_Arg<A>(_:)();
  sub_100040BE4(&qword_100157378, &qword_100157360);
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = sub_100032FA0(&qword_100157380);
  uint64_t v18 = v22;
  v22[3] = v17;
  v18[4] = sub_10009C5C8();
  sub_100038BE8(v18);
  sub_100040BE4(&qword_1001573A8, &qword_100157370);
  sub_100040BE4(&qword_1001573B0, &qword_100157368);
  uint64_t v19 = v23;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_10009AC44(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  v2[8] = type metadata accessor for StoreContext();
  sub_10009C784(&qword_100157340, v3, (void (*)(uint64_t))type metadata accessor for StoreContext);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[9] = v5;
  v2[10] = v4;
  return _swift_task_switch(sub_10009ACFC, v5, v4);
}

uint64_t sub_10009ACFC()
{
  uint64_t v24 = v0;
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[11] = sub_100021598(v1, (uint64_t)qword_100161340);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[5] = sub_10000DAA8(v5, v7, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Deleting records with identifiers: %s from db.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = (void *)v0[6];
  uint64_t v10 = v9[2];
  v0[12] = v10;
  if (v10)
  {
    v0[13] = 0;
    uint64_t v11 = v9[5];
    v0[14] = v11;
    uint64_t v12 = v9[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[15] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10009B3AC;
    return sub_10009A040(v12, v11, 1);
  }
  else
  {
    sub_10009C784(&qword_100157348, v8, (void (*)(uint64_t))type metadata accessor for StoreContext);
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.save()();
    swift_release();
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      v23[0] = v18;
      swift_bridgeObjectRetain();
      uint64_t v19 = Array.description.getter();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      v0[4] = sub_10000DAA8(v19, v21, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully deleted records with identifiers: %s from db.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_10009B3AC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v5 = sub_10009B9F0;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v5 = sub_10009B4F0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10009B4F0()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[13] + 1;
  if (v1 == v0[12])
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = v0[16];
    sub_10009C784(&qword_100157348, v3, (void (*)(uint64_t))type metadata accessor for StoreContext);
    ModelActor.modelContext.getter();
    dispatch thunk of ModelContext.save()();
    if (v2)
    {
      swift_release();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = swift_slowAlloc();
        log = v4;
        uint64_t v7 = (void *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 138412546;
        v26[0] = v25;
        swift_errorRetain();
        uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
        v0[2] = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v7 = v8;
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v6 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v9 = Array.description.getter();
        unint64_t v11 = v10;
        swift_bridgeObjectRelease();
        v0[3] = sub_10000DAA8(v9, v11, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v5, "Error: %@ deleting records with identifiers: %s from datastore.", (uint8_t *)v6, 0x16u);
        sub_100032FA0(&qword_100154BE0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
LABEL_13:
        uint64_t v23 = (uint64_t (*)(void))v0[1];
        return v23();
      }
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRetain_n();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        v26[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v20 = Array.description.getter();
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
        v0[4] = sub_10000DAA8(v20, v22, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully deleted records with identifiers: %s from db.", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  v0[13] = v1;
  uint64_t v12 = v0[6] + 16 * v1;
  uint64_t v13 = *(void *)(v12 + 40);
  v0[14] = v13;
  uint64_t v14 = *(void *)(v12 + 32);
  swift_bridgeObjectRetain();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[15] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_10009B3AC;
  return sub_10009A040(v14, v13, 1);
}

uint64_t sub_10009B9F0()
{
  uint64_t v13 = v0;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    log = v1;
    uint64_t v3 = swift_slowAlloc();
    unint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412546;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v10 = v4;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v3 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[3] = sub_10000DAA8(v5, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v2, "Error: %@ deleting records with identifiers: %s from datastore.", (uint8_t *)v3, 0x16u);
    sub_100032FA0(&qword_100154BE0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10009BC84(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v3[9] = type metadata accessor for StoreContext();
  sub_10009C784(&qword_100157340, v4, (void (*)(uint64_t))type metadata accessor for StoreContext);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10009BD40, v6, v5);
}

uint64_t sub_10009BD40()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0;
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100021598(v2, (uint64_t)qword_100161340);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    dispatch thunk of static PersistentModel.schemaMetadata.getter();
    type metadata accessor for Schema.PropertyMetadata();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    v0[5] = sub_10000DAA8(v6, v8, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deleting all records of type: %s from db.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v9 = v0[6];
  sub_10009C784(&qword_100157348, v10, (void (*)(uint64_t))type metadata accessor for StoreContext);
  ModelActor.modelContext.getter();
  v0[2] = v9;
  uint64_t v11 = type metadata accessor for Predicate();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v14, 1, 1, v11);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v12);
  swift_release();
  ModelActor.modelContext.getter();
  dispatch thunk of ModelContext.save()();
  swift_release();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    dispatch thunk of static PersistentModel.schemaMetadata.getter();
    type metadata accessor for Schema.PropertyMetadata();
    uint64_t v21 = Array.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    v1[4] = sub_10000DAA8(v21, v23, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully deleted all records of type: %s from db.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v1[1];
  return v15();
}

uint64_t sub_10009C358()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StoreContext()
{
  return self;
}

uint64_t sub_10009C3BC(uint64_t a1, uint64_t a2)
{
  return sub_10009C784(&qword_100157340, a2, (void (*)(uint64_t))type metadata accessor for StoreContext);
}

uint64_t sub_10009C404()
{
  uint64_t v0 = type metadata accessor for StoreContext();
  uint64_t v2 = sub_10009C784(&qword_100157348, v1, (void (*)(uint64_t))type metadata accessor for StoreContext);

  return ModelActor.unownedExecutor.getter(v0, v2);
}

uint64_t sub_10009C474()
{
  return swift_retain();
}

uint64_t sub_10009C47C()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10009C4A4(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_10009C4DC(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10009C504(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  unint64_t v8 = *a2;
  if (*a2)
  {
    *unint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_10009C5BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10009A900(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10009C5C8()
{
  unint64_t result = qword_100157388;
  if (!qword_100157388)
  {
    sub_1000317D8(&qword_100157380);
    sub_10009C644();
    sub_10009C6B8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157388);
  }
  return result;
}

unint64_t sub_10009C644()
{
  unint64_t result = qword_100157390;
  if (!qword_100157390)
  {
    sub_1000317D8(&qword_100157370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157390);
  }
  return result;
}

unint64_t sub_10009C6B8()
{
  unint64_t result = qword_100157398;
  if (!qword_100157398)
  {
    sub_1000317D8(&qword_100157368);
    sub_100040BE4(&qword_1001573A0, &qword_100157360);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157398);
  }
  return result;
}

uint64_t sub_10009C784(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009C7CC()
{
  return sub_10009C834(&qword_100155AE0);
}

uint64_t sub_10009C800()
{
  return sub_10009C834(&qword_100155AE8);
}

uint64_t sub_10009C834(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Tips.EmptyDonation();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009C878@<X0>(uint64_t *a1@<X8>)
{
  sub_100032FA0(&qword_100155AD0);
  uint64_t result = Tips.Event.donations.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10009C8B0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 16);
  return result;
}

uint64_t sub_10009C8C0()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t sub_10009C920()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t sub_10009C988@<X0>(uint64_t *a1@<X8>)
{
  sub_1000232C8();
  uint64_t result = Tip.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CalculatorKeypadButton(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorKeypadButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

void sub_10009CA64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  BOOL v4 = *(void **)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  sub_1000319C4(v2, v3, v4, v5);
  uint64_t v6 = (void (*)(uint64_t, void))sub_1000D1BC4(v2, v3, v4, v5);
  unint64_t v8 = v7;
  sub_10002F4DC(v2, v3, v4, v5);
  if (v6)
  {
    uint64_t v9 = 0x1000000000000;
    if (!*(unsigned char *)(a1 + 47)) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = 0x10000000000;
    if (!*(unsigned char *)(a1 + 46)) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = &_mh_execute_header;
    if (!*(unsigned char *)(a1 + 45)) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = 0x1000000;
    if (!*(unsigned char *)(a1 + 44)) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = 0x10000;
    if (!*(unsigned char *)(a1 + 43)) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 256;
    if (!*(unsigned char *)(a1 + 42)) {
      uint64_t v14 = 0;
    }
    uint64_t v15 = sub_100031670(v14 | *(unsigned __int8 *)(a1 + 41) | v13 | v12 | (unint64_t)v11 | v10 | v9);
    char v16 = v15;
    v6(v15, 0);
    if (v8)
    {
      uint64_t v17 = 3;
      if (v16 != 52) {
        uint64_t v17 = 1;
      }
      if (v16 == 10) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = v17;
      }
      [v8 actionOccurred:v18];
    }
    swift_release();
  }
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100021598(v19, (uint64_t)qword_100161340);
  sub_1000318D0(a1);
  sub_1000318D0(a1);
  oslog = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136380675;
    uint64_t v22 = 0x1000000000000;
    if (!*(unsigned char *)(a1 + 47)) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = 0x10000000000;
    if (!*(unsigned char *)(a1 + 46)) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = &_mh_execute_header;
    if (!*(unsigned char *)(a1 + 45)) {
      uint64_t v24 = 0;
    }
    uint64_t v25 = 0x1000000;
    if (!*(unsigned char *)(a1 + 44)) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = 0x10000;
    if (!*(unsigned char *)(a1 + 43)) {
      uint64_t v26 = 0;
    }
    uint64_t v27 = 256;
    if (!*(unsigned char *)(a1 + 42)) {
      uint64_t v27 = 0;
    }
    char v28 = sub_100031670(v27 | *(unsigned __int8 *)(a1 + 41) | v26 | v25 | (unint64_t)v24 | v23 | v22);
    uint64_t v29 = sub_100023BE4(0, v28);
    sub_10000DAA8(v29, v30, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10009D3C4(a1);
    sub_10009D3C4(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v20, "%{private}s tapped", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10009D3C4(a1);
    sub_10009D3C4(a1);
  }
}

void sub_10009CDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(void **)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  sub_1000319C4(v3, v4, v5, v6);
  uint64_t v7 = (void (*)(uint64_t, uint64_t))sub_1000D1BC4(v3, v4, v5, v6);
  uint64_t v9 = v8;
  sub_10002F4DC(v3, v4, v5, v6);
  if (v7)
  {
    uint64_t v10 = 0x1000000000000;
    if (!*(unsigned char *)(a2 + 47)) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = 0x10000000000;
    if (!*(unsigned char *)(a2 + 46)) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &_mh_execute_header;
    if (!*(unsigned char *)(a2 + 45)) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = 0x1000000;
    if (!*(unsigned char *)(a2 + 44)) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 0x10000;
    if (!*(unsigned char *)(a2 + 43)) {
      uint64_t v14 = 0;
    }
    uint64_t v15 = 256;
    if (!*(unsigned char *)(a2 + 42)) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = sub_100031670(v15 | *(unsigned __int8 *)(a2 + 41) | v14 | v13 | (unint64_t)v12 | v11 | v10);
    char v17 = v16;
    v7(v16, 1);
    if (v9)
    {
      uint64_t v18 = 4;
      if (v17 != 52) {
        uint64_t v18 = 1;
      }
      if (v17 == 10) {
        uint64_t v19 = 6;
      }
      else {
        uint64_t v19 = v18;
      }
      [v9 actionOccurred:v19];
    }
    swift_release();
  }
}

__n128 initializeWithTake for CalculatorButtonView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for CalculatorButtonView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void **)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v6;
  sub_10002F4DC(v7, v8, v9, v10);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 47);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorButtonView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorButtonView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void sub_10009D290()
{
  sub_10009CA64(v0 + 16);
}

uint64_t sub_10009D2A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentTransition();
  double v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.contentTransition.setter();
}

uint64_t sub_10009D378()
{
  return swift_deallocObject();
}

uint64_t sub_10009D390()
{
  return EnvironmentValues.contentTransition.getter();
}

void sub_10009D3BC(uint64_t a1)
{
  sub_10009CDFC(a1, v1 + 16);
}

uint64_t sub_10009D3C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  swift_release();
  sub_10002F4DC(v2, v3, v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorButtonText(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorButtonText(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_10009D4C0(uint64_t a1, uint64_t a2, char a3)
{
  sub_1000637B4(a1, a2, a3 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10009D504()
{
  return swift_release();
}

uint64_t sub_10009D5FC(uint64_t a1, char *a2)
{
  char v2 = *a2;
  sub_100032FA0(&qword_100157600);
  State.wrappedValue.getter();
  sub_1000B10F8(v2);
  return swift_release();
}

uint64_t sub_10009D658(int a1, char a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(v2 + 8);
  uint64_t v7 = swift_retain();
  sub_100033AA8(v7, v6);
  swift_release();
  sub_100032FA0(&qword_100157600);
  State.wrappedValue.getter();
  uint64_t v8 = swift_retain();
  uint64_t v9 = sub_100033AA8(v8, v6);
  swift_release();
  swift_getKeyPath();
  sub_100033194((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v10 = *(unsigned __int8 *)(v9 + 49);
  swift_release();
  if (v10 == 1)
  {
    char v11 = *(unsigned char *)(v3 + 24);
    uint64_t v12 = swift_retain();
    sub_1000D1928(v12, v11);
    swift_release();
    uint64_t v13 = sub_100073414();
    swift_release();
  }
  else
  {
    uint64_t v13 = 0;
  }
  sub_100058308(a1, a2 & 1, v15, v13);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10009D7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = static EventModifiers.shift.getter();
  EventModifiers.init(rawValue:)();
  uint64_t v5 = EventModifiers.init(rawValue:)();
  char v6 = *(unsigned char *)(a3 + 8);
  if (v5 != v4) {
    goto LABEL_3;
  }
  uint64_t v7 = swift_retain();
  uint64_t v8 = sub_100033AA8(v7, v6);
  swift_release();
  swift_getKeyPath();
  sub_100033194((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v9 = *(unsigned __int8 *)(v8 + 53);
  swift_release();
  if (v9 == 3)
  {
LABEL_3:
    uint64_t v10 = swift_retain();
    sub_100033AA8(v10, v6);
    swift_release();
    sub_10005CC30(0x1Bu);
    swift_release();
    sub_100032FA0(&qword_100157600);
    State.wrappedValue.getter();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
LABEL_4:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_100033AA8(v13, v6);
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  uint64_t v15 = *(void *)(v14 + 80);
  swift_bridgeObjectRetain();
  swift_release();
  BOOL v16 = sub_100033680(27, v15);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v16)
  {
    uint64_t v17 = swift_retain();
    sub_100033AA8(v17, v6);
    swift_release();
    sub_10005CA8C(27);
    swift_release();
    sub_100032FA0(&qword_100157600);
    State.wrappedValue.getter();
    uint64_t v18 = swift_getKeyPath();
    __chkstk_darwin(v18);
    sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_10009DBCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  char v10 = *(unsigned char *)(v4 + 40);
  uint64_t v11 = swift_retain();
  uint64_t v37 = sub_10002BD88(v11, v10);
  swift_release();
  int64_t v12 = *(void *)(a1 + 16);
  sub_100032FA0(&qword_100157600);
  State.wrappedValue.getter();
  uint64_t v13 = swift_retain();
  sub_10002BD88(v13, v10);
  swift_release();
  uint64_t v39 = a2;
  int64_t v40 = v12;
  char v38 = a3;
  if (a3)
  {
    if (*(void *)(a2 + 16))
    {
      if (v12)
      {
        uint64_t v14 = *(void *)(*(void *)(a2 + 32) + 16);
        uint64_t v15 = a1;
        uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 16);
        swift_release();
        swift_release();
        if (!__OFADD__(v14, v16))
        {
          uint64_t v36 = v14 + v16;
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v12)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x10009E090);
  }
  uint64_t v15 = a1;
  uint64_t v36 = *(void *)(*(void *)(a1 + 32) + 16);
  swift_release();
  swift_release();
LABEL_8:
  uint64_t v17 = swift_retain();
  uint64_t v18 = sub_10002BD88(v17, v10);
  swift_release();
  State.wrappedValue.getter();
  swift_getKeyPath();
  sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v19 = *(unsigned __int8 *)(v41 + 16);
  swift_release();
  char v20 = 1;
  switch(v19)
  {
    case 1:
      break;
    default:
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  swift_bridgeObjectRelease();
  sub_10002C358(v18, v20 & 1);
  uint64_t v22 = v21;
  swift_release();
  uint64_t v23 = swift_retain();
  uint64_t v24 = sub_10002BD88(v23, v10);
  swift_release();
  sub_10002AA00(v24, (v38 & 1) == 0);
  uint64_t v26 = v25;
  swift_release();
  uint64_t v27 = swift_retain();
  uint64_t v28 = sub_10002BD88(v27, v10);
  swift_release();
  double v29 = sub_10002C098(v28, (v38 & 1) == 0);
  swift_release();
  *a4 = v37;
  a4[1] = v40;
  a4[2] = v36;
  a4[3] = v22;
  a4[4] = v26;
  *((double *)a4 + 5) = v29;
  sub_100032FA0(&qword_100157620);
  sub_10002BDF0(0, v40);
  swift_getKeyPath();
  uint64_t v30 = swift_allocObject();
  long long v31 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(v30 + 88) = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(v30 + 104) = v31;
  *(_OWORD *)(v30 + 12sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)(v5 + 96);
  long long v32 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v30 + 24) = *(_OWORD *)v5;
  *(_OWORD *)(v30 + 4sub_100102B8C(2, 18, 1, 0) = v32;
  long long v33 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v30 + 56) = *(_OWORD *)(v5 + 32);
  *(unsigned char *)(v30 + 16) = v38 & 1;
  uint64_t v34 = *(void *)(v5 + 112);
  *(_OWORD *)(v30 + 72) = v33;
  *(void *)(v30 + 136) = v34;
  *(void *)(v30 + 144) = v15;
  *(void *)(v30 + 152) = v39;
  sub_100033AC4(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100032FA0(&qword_1001576D8);
  sub_100032FA0(&qword_100157650);
  sub_100040BE4(&qword_1001576E8, &qword_1001576D8);
  sub_100040BE4(&qword_100157648, &qword_100157650);
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_10009E0B0@<X0>(unint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v48 = a6;
  uint64_t v49 = a4;
  uint64_t v10 = sub_100032FA0(&qword_100157700);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v50 = (char *)v10;
  uint64_t v51 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100032FA0(&qword_1001576E0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v20 = (char *)v45 - v19;
  uint64_t v21 = sub_100032FA0(&qword_100157798);
  __chkstk_darwin(v21 - 8);
  double v24 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)v45 - v23;
  unint64_t v26 = *a1;
  uint64_t v47 = v27;
  if (a2)
  {
    uint64_t v46 = v14;
    if ((v26 & 0x8000000000000000) != 0)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
    if (v26 >= *(void *)(a5 + 16))
    {
LABEL_11:
      __break(1u);
      JUMPOUT(0x10009E668);
    }
    uint64_t v52 = *(void *)(a5 + 8 * v26 + 32);
    uint64_t v28 = swift_allocObject();
    long long v29 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v28 + 8sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v28 + 96) = v29;
    *(_OWORD *)(v28 + 112) = *(_OWORD *)(a3 + 96);
    *(void *)(v28 + 128) = *(void *)(a3 + 112);
    long long v30 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v28 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(v28 + 32) = v30;
    long long v31 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v28 + 48) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v28 + 64) = v31;
    swift_bridgeObjectRetain();
    sub_100033AC4(a3);
    _OWORD v45[2] = sub_100032FA0(&qword_100157778);
    v45[1] = sub_100032FA0(&qword_100157710);
    sub_100040BE4(&qword_100157780, &qword_100157778);
    sub_10001B07C();
    sub_10001B11C();
    ForEach<>.init(_:content:)();
    uint64_t v33 = (uint64_t)v50;
    uint64_t v32 = v51;
    (*(void (**)(char *, char *, char *))(v51 + 16))(v20, v13, v50);
    uint64_t v14 = v46;
    *(void *)&v20[*(int *)(v46 + 36)] = 0x4008000000000000;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v33);
    sub_10002D9D0((uint64_t)v20, (uint64_t)v25, &qword_1001576E0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v25, 0, 1, v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v15 + 56))((char *)v45 - v23, 1, 1, v14, v24);
    uint64_t v33 = (uint64_t)v50;
    if ((v26 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }
  }
  if (v26 >= *(void *)(v49 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v52 = *(void *)(v49 + 8 * v26 + 32);
  uint64_t v34 = swift_allocObject();
  long long v35 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v34 + 8sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v34 + 96) = v35;
  *(_OWORD *)(v34 + 112) = *(_OWORD *)(a3 + 96);
  *(void *)(v34 + 128) = *(void *)(a3 + 112);
  long long v36 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v34 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v34 + 32) = v36;
  long long v37 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v34 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v34 + 64) = v37;
  sub_100033AC4(a3);
  swift_bridgeObjectRetain();
  sub_100032FA0(&qword_100157778);
  uint64_t v50 = v25;
  sub_100032FA0(&qword_100157710);
  uint64_t v38 = (uint64_t)v17;
  sub_100040BE4(&qword_100157780, &qword_100157778);
  sub_10001B07C();
  sub_10001B11C();
  ForEach<>.init(_:content:)();
  uint64_t v39 = v51;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v17, v13, v33);
  *(void *)&v17[*(int *)(v14 + 36)] = 0x4000000000000000;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v33);
  sub_10002D9D0((uint64_t)v17, (uint64_t)v20, &qword_1001576E0);
  uint64_t v40 = (uint64_t)v50;
  uint64_t v41 = v47;
  sub_100033344((uint64_t)v50, v47, &qword_100157798);
  sub_100033344((uint64_t)v20, v38, &qword_1001576E0);
  uint64_t v42 = v48;
  sub_100033344(v41, v48, &qword_100157798);
  uint64_t v43 = sub_100032FA0(qword_1001577A0);
  sub_100033344(v38, v42 + *(int *)(v43 + 48), &qword_1001576E0);
  sub_100032F44((uint64_t)v20, &qword_1001576E0);
  sub_100032F44(v40, &qword_100157798);
  sub_100032F44(v38, &qword_1001576E0);
  return sub_100032F44(v41, &qword_100157798);
}

void sub_10009E678(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100032FA0(&qword_100157700);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(void *)(a3 + 16))
  {
    v17[1] = *(void *)(a3 + 8 * v12 + 32);
    uint64_t v13 = swift_allocObject();
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v13 + 8sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v13 + 96) = v14;
    *(_OWORD *)(v13 + 112) = *(_OWORD *)(a2 + 96);
    *(void *)(v13 + 128) = *(void *)(a2 + 112);
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v13 + 32) = v15;
    long long v16 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v13 + 64) = v16;
    swift_bridgeObjectRetain();
    sub_100033AC4(a2);
    sub_100032FA0(&qword_100157778);
    sub_100032FA0(&qword_100157710);
    sub_100040BE4(&qword_100157780, &qword_100157778);
    sub_10001B07C();
    sub_10001B11C();
    ForEach<>.init(_:content:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a4, v11, v8);
    *(void *)(a4 + *(int *)(sub_100032FA0(&qword_1001576E0) + 36)) = 0x4008000000000000;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return;
  }
  __break(1u);
}

uint64_t sub_10009E8AC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *a1;
  int v5 = a1[1];
  int v6 = a1[2];
  int v7 = a1[3];
  int v8 = a1[4];
  int v9 = a1[5];
  int v10 = a1[6];
  long long v47 = *(_OWORD *)(a2 + 96);
  sub_100032FA0(&qword_100157790);
  State.wrappedValue.getter();
  char v11 = *(unsigned char *)(a2 + 8);
  uint64_t v12 = swift_retain();
  sub_100033AA8(v12, v11);
  swift_release();
  char v41 = v10;
  char v42 = v8;
  uint64_t v13 = 0x1000000000000;
  if (!v10) {
    uint64_t v13 = 0;
  }
  char v44 = v6;
  uint64_t v14 = 0x10000000000;
  if (!v9) {
    uint64_t v14 = 0;
  }
  long long v15 = &_mh_execute_header;
  if (!v8) {
    long long v15 = 0;
  }
  char v43 = v7;
  uint64_t v16 = 0x1000000;
  if (!v7) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = 0x10000;
  if (!v6) {
    uint64_t v17 = 0;
  }
  uint64_t v18 = 256;
  if (!v5) {
    uint64_t v18 = 0;
  }
  char v19 = sub_100031670(v18 | v36 | v17 | v16 | (unint64_t)v15 | v14 | v13);
  uint64_t v20 = sub_100033B98(v19);
  if (v20)
  {
    uint64_t v21 = v20;
    sub_100034264();
    swift_retain();
    uint64_t v22 = CalculateExpression.allowedOperations.getter();
    swift_release();
    char v23 = sub_100034408(v21, v22);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    char v39 = v23 ^ 1;
  }
  else
  {
    swift_release();
    char v39 = 0;
  }
  type metadata accessor for CalculatorKeypadViewModel();
  sub_100033194(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  uint64_t v38 = Environment.init<A>(_:)();
  char v25 = v24;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = static Anchor.Source<A>.bounds.getter();
  unint64_t v26 = (unsigned char *)swift_allocObject();
  v26[16] = v36;
  v26[17] = v5;
  v26[18] = v44;
  v26[19] = v43;
  v26[20] = v42;
  v26[21] = v9;
  v26[22] = v10;
  uint64_t v27 = swift_allocObject();
  long long v28 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v27 + 8sub_100102B8C(2, 18, 1, 0) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v27 + 96) = v28;
  *(_OWORD *)(v27 + 112) = *(_OWORD *)(a2 + 96);
  *(void *)(v27 + 128) = *(void *)(a2 + 112);
  long long v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v27 + 32) = v29;
  long long v30 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v27 + 64) = v30;
  char v46 = v25 & 1;
  sub_100033AC4(a2);
  uint64_t v31 = Namespace.wrappedValue.getter();
  int v32 = static MatchedGeometryProperties.frame.getter();
  uint64_t result = static UnitPoint.center.getter();
  *(_DWORD *)(a3 + 9) = v48;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)&v48 + 3);
  *(_DWORD *)(a3 + 65) = *(_DWORD *)v45;
  *(_DWORD *)(a3 + 68) = *(_DWORD *)&v45[3];
  *(void *)a3 = v38;
  *(unsigned char *)(a3 + 8) = v46;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = KeyPath;
  *(unsigned char *)(a3 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  *(unsigned char *)(a3 + 41) = v36;
  *(unsigned char *)(a3 + 42) = v5;
  *(unsigned char *)(a3 + 43) = v44;
  *(unsigned char *)(a3 + 44) = v43;
  *(unsigned char *)(a3 + 45) = v42;
  *(unsigned char *)(a3 + 46) = v9;
  *(unsigned char *)(a3 + 47) = v41;
  *(void *)(a3 + 48) = v48;
  *(void *)(a3 + 56) = v49;
  *(unsigned char *)(a3 + 64) = v39 & 1;
  *(void *)(a3 + 72) = v40;
  *(void *)(a3 + 8sub_100102B8C(2, 18, 1, 0) = sub_100037D2C;
  *(void *)(a3 + 88) = v26;
  *(void *)(a3 + 96) = sub_10009F1F4;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = sub_10009F0E8;
  *(void *)(a3 + 12sub_100102B8C(2, 18, 1, 0) = v27;
  *(unsigned char *)(a3 + 128) = v36;
  *(_DWORD *)(a3 + 132) = *(_DWORD *)((char *)&v47 + 3);
  *(_DWORD *)(a3 + 129) = v47;
  *(void *)(a3 + 136) = v31;
  *(_DWORD *)(a3 + 144) = v32;
  *(void *)(a3 + 152) = v34;
  *(void *)(a3 + 16sub_100102B8C(2, 18, 1, 0) = v35;
  *(unsigned char *)(a3 + 168) = 1;
  return result;
}

uint64_t sub_10009EC68(double *a1)
{
  double v1 = *a1;
  double v2 = a1[1];
  sub_100032FA0(&qword_100157790);
  uint64_t result = State.wrappedValue.getter();
  if (v5 != v1 || v6 != v2) {
    return State.wrappedValue.setter();
  }
  return result;
}

uint64_t assignWithCopy for CalculatorKeypadView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  char v6 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v6;
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for CalculatorKeypadView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for CalculatorKeypadView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_release();
  char v6 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v6;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorKeypadView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorKeypadView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 12sub_100102B8C(2, 18, 1, 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 12sub_100102B8C(2, 18, 1, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10009EFC8()
{
  return sub_10009D504();
}

uint64_t sub_10009EFDC(uint64_t a1, char *a2)
{
  return sub_10009D5FC(a1, a2);
}

uint64_t sub_10009EFEC()
{
  return swift_deallocObject();
}

uint64_t sub_10009F000(int a1, char a2)
{
  return sub_10009D658(a1, a2);
}

uint64_t sub_10009F028(uint64_t a1, uint64_t a2)
{
  return sub_10009D7F4(a1, a2, v2 + 16);
}

uint64_t sub_10009F038()
{
  return sub_1000B150C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10009F078()
{
  return sub_1000B172C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_10009F0B8(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10009E678(a1, v2 + 16, *(void *)(v2 + 144), a2);
}

uint64_t sub_10009F0CC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009E8AC(a1, v2 + 16, a2);
}

uint64_t sub_10009F0D4()
{
  return swift_deallocObject();
}

uint64_t sub_10009F0E8(double *a1)
{
  return sub_10009EC68(a1);
}

uint64_t sub_10009F0F4()
{
  return swift_deallocObject();
}

uint64_t sub_10009F108()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10009F180@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009E0B0(a1, *(unsigned char *)(v2 + 16), v2 + 24, *(void *)(v2 + 144), *(void *)(v2 + 152), a2);
}

uint64_t sub_10009F198()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10009F200()
{
  return sub_10009F038();
}

uint64_t sub_10009F218()
{
  return sub_10009F078();
}

uint64_t sub_10009F230(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v5;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t sub_10009F2B8(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10009F300(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4sub_100102B8C(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10009F354()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10009F398()
{
  sub_100032FA0(&qword_100157850);
  FocusState.Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_10009F3E8()
{
  return FocusState.Binding.wrappedValue.setter();
}

uint64_t sub_10009F43C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v84 = a2;
  uint64_t v67 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  type metadata accessor for Optional();
  sub_1000317D8(&qword_1001557C0);
  type metadata accessor for ModifiedContent();
  sub_1000317D8(&qword_100157828);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for HStack();
  uint64_t v71 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v70 = (char *)&v62 - v6;
  uint64_t v7 = sub_1000317D8(&qword_100157830);
  uint64_t v8 = swift_getWitnessTable();
  unint64_t v9 = sub_1000A0C24();
  uint64_t v88 = v5;
  uint64_t v89 = v7;
  uint64_t v90 = v8;
  unint64_t v91 = v9;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v76 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v72 = (char *)&v62 - v11;
  type metadata accessor for CalculateEngine(255);
  uint64_t v13 = v12;
  uint64_t v88 = v5;
  uint64_t v89 = v7;
  uint64_t v69 = v7;
  uint64_t v68 = v8;
  uint64_t v90 = v8;
  unint64_t v91 = v9;
  unint64_t v66 = v9;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v15 = sub_1000A0EE0(&qword_100157848, type metadata accessor for CalculateEngine);
  uint64_t v83 = OpaqueTypeMetadata2;
  uint64_t v88 = OpaqueTypeMetadata2;
  uint64_t v89 = v13;
  uint64_t v73 = v13;
  uint64_t v78 = OpaqueTypeConformance2;
  uint64_t v90 = OpaqueTypeConformance2;
  unint64_t v91 = v15;
  uint64_t v74 = v15;
  uint64_t v16 = swift_getOpaqueTypeMetadata2();
  uint64_t v79 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v85 = (char *)&v62 - v17;
  uint64_t v80 = v18;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v81 = *(void *)(v19 - 8);
  uint64_t v82 = v19;
  __chkstk_darwin(v19);
  uint64_t v75 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v77 = (uint64_t)&v62 - v22;
  uint64_t v23 = static VerticalAlignment.bottom.getter();
  if (qword_1001541B8 != -1) {
    uint64_t v23 = swift_once();
  }
  __chkstk_darwin(v23);
  uint64_t v24 = *(void *)(v67 + 24);
  *(&v62 - 4) = v4;
  *(&v62 - 3) = v24;
  uint64_t v25 = v24;
  *(&v62 - 2) = v3;
  unint64_t v26 = v70;
  HStack.init(alignment:spacing:content:)();
  unsigned __int8 v27 = *(unsigned char *)(v3 + 24);
  LODWORD(v67) = v27;
  uint64_t v28 = swift_retain();
  uint64_t v29 = sub_100033AA8(v28, v27);
  swift_release();
  uint64_t v30 = *(void *)(v29 + 16);
  swift_retain();
  swift_release();
  swift_getKeyPath();
  uint64_t v88 = v30;
  sub_1000A0EE0(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  swift_release();
  uint64_t v31 = CalculateExpression.postfixStack.getter();
  swift_release();
  uint64_t v88 = v31;
  uint64_t v32 = *(void *)(v3 + 8);
  uint64_t v33 = *(void *)(v3 + 32);
  char v94 = *(unsigned char *)(v3 + 40);
  uint64_t v34 = *(void *)(v3 + 48);
  uint64_t WitnessTable = *(void *)(v3 + 56);
  uint64_t v92 = v34;
  uint64_t v93 = v33;
  uint64_t v35 = swift_allocObject();
  uint64_t v63 = v4;
  *(void *)(v35 + 16) = v4;
  *(void *)(v35 + 24) = v25;
  uint64_t v36 = v25;
  uint64_t v64 = v25;
  long long v37 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v35 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v35 + 8sub_100102B8C(2, 18, 1, 0) = v37;
  *(unsigned char *)(v35 + 96) = *(unsigned char *)(v3 + 64);
  long long v38 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v35 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v35 + 48) = v38;
  swift_retain();
  uint64_t v62 = v32;
  swift_retain();
  sub_100025ED0((uint64_t)&v93);
  sub_100025ED0((uint64_t)&v92);
  swift_retain();
  char v39 = v72;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v26, v5);
  uint64_t v40 = swift_retain();
  uint64_t v41 = sub_100033AA8(v40, v67);
  swift_release();
  swift_getKeyPath();
  uint64_t v88 = v41;
  sub_1000A0EE0((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v42 = *(void *)(v41 + 72);
  swift_release();
  uint64_t v88 = v42;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v4;
  *(void *)(v43 + 24) = v36;
  long long v44 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v43 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v43 + 8sub_100102B8C(2, 18, 1, 0) = v44;
  *(unsigned char *)(v43 + 96) = *(unsigned char *)(v3 + 64);
  long long v45 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v43 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v43 + 48) = v45;
  swift_retain();
  swift_retain();
  sub_100025ED0((uint64_t)&v93);
  sub_100025ED0((uint64_t)&v92);
  swift_retain();
  uint64_t v46 = swift_checkMetadataState();
  uint64_t v47 = v83;
  uint64_t v48 = v78;
  unint64_t v49 = v74;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v39, v47);
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = v64;
  *(void *)(v50 + 16) = v63;
  *(void *)(v50 + 24) = v51;
  long long v52 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v50 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v50 + 8sub_100102B8C(2, 18, 1, 0) = v52;
  *(unsigned char *)(v50 + 96) = *(unsigned char *)(v3 + 64);
  long long v53 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v50 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v50 + 48) = v53;
  swift_retain();
  swift_retain();
  sub_100025ED0((uint64_t)&v93);
  sub_100025ED0((uint64_t)&v92);
  swift_retain();
  uint64_t v88 = v47;
  uint64_t v89 = v46;
  uint64_t v90 = v48;
  unint64_t v91 = v49;
  uint64_t v54 = swift_getOpaqueTypeConformance2();
  uint64_t v55 = (uint64_t)v75;
  uint64_t v56 = v80;
  uint64_t v57 = v85;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v57, v56);
  uint64_t v86 = v54;
  long long v87 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v58 = v82;
  swift_getWitnessTable();
  uint64_t v59 = v77;
  sub_10001BAFC(v55, v58, v77);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
  v60(v55, v58);
  sub_10001BAFC(v59, v58, v84);
  return ((uint64_t (*)(uint64_t, uint64_t))v60)(v59, v58);
}

uint64_t sub_10009FDE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v61[0] = a3;
  uint64_t v63 = a2;
  uint64_t v83 = a4;
  uint64_t v67 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v65 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for CalculateExpressionStackView();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v62 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100032FA0(&qword_100157858);
  __chkstk_darwin(v71);
  uint64_t v70 = (char *)v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100032FA0(&qword_100157860);
  __chkstk_darwin(v79);
  uint64_t v77 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_100032FA0(&qword_100157828);
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v80 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v78 = (char *)v61 - v12;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v61 - v15;
  sub_1000317D8(&qword_1001557C0);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v84 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)v61 - v22;
  uint64_t v24 = *(void (**)(double))a1;
  v61[1] = *(void *)(a1 + 8);
  v24(v21);
  static Font.footnote.getter();
  v92[4] = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.font(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  unint64_t v26 = sub_1000A0D1C();
  v92[2] = WitnessTable;
  v92[3] = v26;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v73 = v23;
  uint64_t v64 = v27;
  sub_10001BAFC((uint64_t)v19, v17, (uint64_t)v23);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v84 + 8);
  uint64_t v76 = v19;
  uint64_t v72 = v17;
  uint64_t v29 = v17;
  uint64_t v30 = v62;
  uint64_t v69 = v84 + 8;
  uint64_t v68 = v28;
  v28(v19, v29);
  char v31 = *(unsigned char *)(a1 + 24);
  uint64_t v32 = swift_retain();
  uint64_t v33 = sub_100033AA8(v32, v31);
  swift_release();
  uint64_t v34 = *(void *)(v33 + 16);
  swift_retain();
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v93 = v34;
  sub_1000A0EE0(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_retain();
  swift_release();
  static Color.white.getter();
  uint64_t v35 = *(void *)(a1 + 32);
  char v98 = *(unsigned char *)(a1 + 40);
  uint64_t v96 = *(void *)(a1 + 48);
  uint64_t v97 = v35;
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = v61[0];
  *(void *)(v36 + 16) = v63;
  *(void *)(v36 + 24) = v37;
  long long v38 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v36 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v36 + 8sub_100102B8C(2, 18, 1, 0) = v38;
  *(unsigned char *)(v36 + 96) = *(unsigned char *)(a1 + 64);
  long long v39 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v36 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v36 + 48) = v39;
  (*(void (**)(char *, void, uint64_t))(v66 + 104))(v65, enum case for Color.RGBColorSpace.sRGB(_:), v67);
  swift_retain();
  swift_retain();
  sub_100025ED0((uint64_t)&v97);
  sub_100025ED0((uint64_t)&v96);
  swift_retain();
  Color.init(_:white:opacity:)();
  CalculateExpressionStackView.init(expression:textAlignment:textColor:rowCount:separatorColor:operationCallback:)();
  if (qword_1001543A0 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v40 = v74;
  uint64_t v41 = (uint64_t)v70;
  uint64_t v42 = v75;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v70, v30, v75);
  uint64_t v43 = (_OWORD *)(v41 + *(int *)(v71 + 36));
  long long v44 = v94;
  *uint64_t v43 = v93;
  v43[1] = v44;
  _OWORD v43[2] = v95;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v42);
  sub_1000A0D88();
  uint64_t v45 = (uint64_t)v77;
  View.accessibilityIdentifier(_:)();
  sub_100032F44(v41, &qword_100157858);
  uint64_t v85 = sub_10001BE18();
  uint64_t v86 = v46;
  LOBYTE(v87) = v47;
  LOBYTE(v92[0]) = 4;
  uint64_t v75 = sub_100032FA0(&qword_100156B88);
  unint64_t v48 = sub_1000A0E34();
  unint64_t v49 = sub_10001BDA4();
  uint64_t v50 = v80;
  uint64_t v51 = v79;
  View.focused<A>(_:equals:)();
  swift_release();
  swift_release();
  sub_100032F44(v45, &qword_100157860);
  uint64_t v52 = v81;
  long long v53 = v78;
  uint64_t v54 = v82;
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v78, v50, v82);
  uint64_t v55 = v76;
  uint64_t v56 = v73;
  uint64_t v57 = v72;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v76, v73, v72);
  v92[0] = v55;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v50, v53, v54);
  v92[1] = v50;
  v91[0] = v57;
  v91[1] = v54;
  unint64_t v88 = v49;
  uint64_t v89 = v64;
  uint64_t v85 = v51;
  uint64_t v86 = v75;
  unint64_t v87 = v48;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_100025EFC((uint64_t)v92, 2uLL, (uint64_t)v91);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v52 + 8);
  v58(v53, v54);
  uint64_t v59 = v68;
  v68(v56, v57);
  v58(v50, v54);
  return v59(v55, v57);
}

uint64_t sub_1000A07E4(void *a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 24);
  uint64_t v4 = swift_retain();
  sub_100033AA8(v4, v3);
  swift_release();
  sub_10005D3E0(a1, 0);

  return swift_release();
}

uint64_t sub_1000A0854(uint64_t a1)
{
  sub_100032FA0(&qword_100157850);
  uint64_t result = FocusState.Binding.wrappedValue.getter();
  if (v6 != 6)
  {
    char v3 = *(unsigned char *)(a1 + 24);
    uint64_t v4 = swift_retain();
    sub_100033AA8(v4, v3);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_1000A0EE0((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    sub_100032FA0(&qword_100157850);
    return FocusState.Binding.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_1000A09F0(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 24);
  uint64_t v2 = swift_retain();
  sub_100033AA8(v2, v1);
  swift_release();
  swift_getKeyPath();
  sub_1000A0EE0((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1000A0AE8(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 24);
  uint64_t v2 = swift_retain();
  sub_100033AA8(v2, v1);
  swift_release();
  swift_getKeyPath();
  sub_1000A0EE0((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1000A0BE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009F43C(a1, a2);
}

unint64_t sub_1000A0C24()
{
  unint64_t result = qword_100157838;
  if (!qword_100157838)
  {
    sub_1000317D8(&qword_100157830);
    sub_1000A0EE0(&qword_100157840, (void (*)(uint64_t))&type metadata accessor for CalculateExpression);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157838);
  }
  return result;
}

uint64_t sub_1000A0CC8@<X0>(uint64_t a1@<X8>)
{
  return sub_10009FDE4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000A0CE0()
{
  return sub_1000A0854(v0 + 32);
}

uint64_t sub_1000A0CF8()
{
  return sub_1000A09F0(v0 + 32);
}

uint64_t sub_1000A0D08()
{
  return sub_1000A0AE8(v0 + 32);
}

unint64_t sub_1000A0D1C()
{
  unint64_t result = qword_1001557B8;
  if (!qword_1001557B8)
  {
    sub_1000317D8(&qword_1001557C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001557B8);
  }
  return result;
}

uint64_t sub_1000A0D7C(void *a1)
{
  return sub_1000A07E4(a1, v1 + 32);
}

unint64_t sub_1000A0D88()
{
  unint64_t result = qword_100157868;
  if (!qword_100157868)
  {
    sub_1000317D8(&qword_100157858);
    sub_1000A0EE0(&qword_100157870, (void (*)(uint64_t))&type metadata accessor for CalculateExpressionStackView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157868);
  }
  return result;
}

unint64_t sub_1000A0E34()
{
  unint64_t result = qword_100157878;
  if (!qword_100157878)
  {
    sub_1000317D8(&qword_100157860);
    sub_1000A0D88();
    sub_1000A0EE0(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157878);
  }
  return result;
}

uint64_t sub_1000A0EE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A0F28()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000A113C()
{
  id v0 = objc_allocWithZone((Class)LSApplicationRecord);
  id v1 = sub_100006D80(0xD000000000000015, 0x80000001001094B0, 0);
  uint64_t v4 = v1;
  if (!v1) {
    return 0;
  }
  id v5 = [v1 applicationState];
  unsigned __int8 v6 = [v5 isRestricted];

  if (v6)
  {

    return 0;
  }
  id v7 = [v4 applicationState];
  unsigned __int8 v8 = [v7 isInstalled];

  if (v8)
  {

    return 1;
  }
  else
  {
    id v9 = [v4 applicationState];
    id v2 = [v9 isPlaceholder];
  }
  return (uint64_t)v2;
}

uint64_t sub_1000A1264()
{
  return _swift_task_switch(sub_10000605C, 0, 0);
}

uint64_t sub_1000A1280()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

id sub_1000A12B8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return [super dealloc];
}

uint64_t destroy for BounceEffect()
{
  return swift_release();
}

uint64_t initializeWithCopy for BounceEffect(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BounceEffect(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for BounceEffect(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for BounceEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BounceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BounceEffect()
{
  return &type metadata for BounceEffect;
}

uint64_t sub_1000A149C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A14B8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  char v9 = a2;
  int v37 = a2;
  uint64_t v39 = a1;
  uint64_t v41 = a4;
  uint64_t v10 = sub_100032FA0(&qword_100157A30);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_100032FA0(&qword_100157A38);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_100032FA0(&qword_100157A40);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  double v21 = &v36[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v38 = sub_100032FA0(&qword_100157A48) - 8;
  __chkstk_darwin(v38);
  uint64_t v40 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v42 = v9;
  uint64_t v43 = a3;
  sub_100032FA0(&qword_100154898);
  State.wrappedValue.getter();
  if (v44) {
    double v23 = a5;
  }
  else {
    double v23 = 0.0;
  }
  uint64_t v24 = sub_100032FA0(&qword_100157A50);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v13, v39, v24);
  uint64_t v25 = (double *)&v13[*(int *)(v11 + 44)];
  double *v25 = 0.0;
  v25[1] = v23;
  static Animation.spring(response:dampingFraction:blendDuration:)();
  uint64_t v26 = Animation.delay(_:)();
  swift_release();
  char v27 = v37;
  char v42 = v37;
  uint64_t v43 = a3;
  State.wrappedValue.getter();
  char v28 = v44;
  sub_100033344((uint64_t)v13, (uint64_t)v17, &qword_100157A30);
  uint64_t v29 = &v17[*(int *)(v15 + 44)];
  *(void *)uint64_t v29 = v26;
  v29[8] = v28;
  sub_100032F44((uint64_t)v13, &qword_100157A30);
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = v27;
  *(void *)(v30 + 24) = a3;
  *(double *)(v30 + 32) = a5;
  *(double *)(v30 + 4sub_100102B8C(2, 18, 1, 0) = a6;
  sub_100033344((uint64_t)v17, (uint64_t)v21, &qword_100157A38);
  char v31 = &v21[*(int *)(v19 + 44)];
  *char v31 = sub_1000A18AC;
  v31[1] = v30;
  _OWORD v31[2] = 0;
  v31[3] = 0;
  swift_retain();
  sub_100032F44((uint64_t)v17, &qword_100157A38);
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = v27;
  *(void *)(v32 + 24) = a3;
  *(double *)(v32 + 32) = a5;
  *(double *)(v32 + 4sub_100102B8C(2, 18, 1, 0) = a6;
  uint64_t v33 = v40;
  sub_100033344((uint64_t)v21, (uint64_t)v40, &qword_100157A40);
  uint64_t v34 = &v33[*(int *)(v38 + 44)];
  *uint64_t v34 = 0;
  v34[1] = 0;
  v34[2] = sub_1000A18AC;
  void v34[3] = v32;
  swift_retain();
  sub_100032F44((uint64_t)v21, &qword_100157A40);
  return sub_1000A1904((uint64_t)v33, v41);
}

uint64_t sub_1000A1864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A14B8(a1, *v2, *((void *)v2 + 1), a2, *((double *)v2 + 2), *((double *)v2 + 3));
}

uint64_t sub_1000A1874()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000A18B0()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000A1904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032FA0(&qword_100157A48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A196C()
{
  return sub_1000A19D0(&qword_100157A58, &qword_100157A48, (void (*)(void))sub_1000A19A8);
}

uint64_t sub_1000A19A8()
{
  return sub_1000A19D0(&qword_100157A60, &qword_100157A40, (void (*)(void))sub_1000A1A50);
}

uint64_t sub_1000A19D0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A1A50()
{
  unint64_t result = qword_100157A68;
  if (!qword_100157A68)
  {
    sub_1000317D8(&qword_100157A38);
    sub_1000A1AF0();
    sub_100040BE4(&qword_100157A80, &qword_100157A88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157A68);
  }
  return result;
}

unint64_t sub_1000A1AF0()
{
  unint64_t result = qword_100157A70;
  if (!qword_100157A70)
  {
    sub_1000317D8(&qword_100157A30);
    sub_100040BE4(&qword_100157A78, &qword_100157A50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157A70);
  }
  return result;
}

uint64_t sub_1000A1B98(unint64_t a1)
{
  unint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_1000A592C(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      id v7 = &v3[3 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 7, 24 * v6);
      v3[2] = v5;
      *id v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A1C88(unint64_t a1)
{
  unint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_1000A5944(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    int64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      id v7 = (unsigned __int8 *)v3 + a1 + 32;
      uint64_t v8 = *v7;
      memmove(v7, v7 + 1, v6);
      v3[2] = v5;
      *id v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A1D58(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *id v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    unint64_t v3 = sub_1000A5958(v3);
    *id v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_1000A1E3C()
{
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v1 = *(void **)(v0 + 16);

  return v1;
}

id sub_1000A1EBC()
{
  unint64_t v1 = v0;
  swift_getKeyPath();
  v18[0] = v0;
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  objc_super v2 = *(void **)(v0 + 40);
  if (v2)
  {
    return v2;
  }
  if (qword_100154760 != -1) {
    goto LABEL_27;
  }
  while (1)
  {
    unint64_t v4 = (void *)qword_100161370;
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 objectForKey:v5];

    if (v6)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v17, 0, sizeof(v17));
    }
    sub_1000125D0((uint64_t)v17, (uint64_t)v18);
    if (v18[3])
    {
      if (swift_dynamicCast())
      {
        swift_getKeyPath();
        v18[0] = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        id v7 = [*(id *)(v1 + 16) categories];
        sub_10001CE8C(0, (unint64_t *)&qword_100155240);
        unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        swift_bridgeObjectRetain();
        uint64_t KeyPath = sub_1000A74B8(v8, v15, v16, (uint64_t (*)(void))&CalculateUnitCategory.id.getter);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (KeyPath) {
          return KeyPath;
        }
      }
    }
    else
    {
      sub_100012570((uint64_t)v18);
    }
    uint64_t KeyPath = (void *)swift_getKeyPath();
    v18[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    id v10 = [*(id *)(v1 + 16) categories];
    sub_10001CE8C(0, (unint64_t *)&qword_100155240);
    unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v1 >> 62) {
      break;
    }
    uint64_t v11 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_23;
    }
LABEL_16:
    uint64_t v12 = 4;
    while (1)
    {
      id v13 = (v1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v1 + 8 * v12);
      uint64_t KeyPath = v13;
      uint64_t v14 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      if ([v13 unitType] == (id)16) {
        goto LABEL_24;
      }

      ++v12;
      if (v14 == v11) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_27:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (v11) {
    goto LABEL_16;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_24:
  swift_bridgeObjectRelease_n();
  return KeyPath;
}

id sub_1000A2250()
{
  swift_getKeyPath();
  v15[0] = v0;
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
    goto LABEL_14;
  }
  if (qword_100154760 != -1) {
    swift_once();
  }
  unint64_t v3 = (void *)qword_100161370;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_1000125D0((uint64_t)v14, (uint64_t)v15);
  if (!v15[3])
  {
    sub_100012570((uint64_t)v15);
LABEL_13:
    id v9 = sub_1000A1EBC();
    id v2 = [v9 preferredFromUnit];

    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_13;
  }
  id v6 = sub_1000A1EBC();
  id v7 = [v6 units];

  sub_10001CE8C(0, &qword_100157B78);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  id v2 = sub_1000A74B8(v8, v12, v13, (uint64_t (*)(void))&CalculateUnit.id.getter);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v2) {
    goto LABEL_13;
  }
LABEL_14:
  id v10 = v1;
  return v2;
}

id sub_1000A2498()
{
  swift_getKeyPath();
  v15[0] = v0;
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = *(id *)(v0 + 56);
    goto LABEL_14;
  }
  if (qword_100154760 != -1) {
    swift_once();
  }
  unint64_t v3 = (void *)qword_100161370;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_1000125D0((uint64_t)v14, (uint64_t)v15);
  if (!v15[3])
  {
    sub_100012570((uint64_t)v15);
LABEL_13:
    id v9 = sub_1000A1EBC();
    id v2 = [v9 preferredToUnit];

    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_13;
  }
  id v6 = sub_1000A1EBC();
  id v7 = [v6 units];

  sub_10001CE8C(0, &qword_100157B78);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  id v2 = sub_1000A74B8(v8, v12, v13, (uint64_t (*)(void))&CalculateUnit.id.getter);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v2) {
    goto LABEL_13;
  }
LABEL_14:
  id v10 = v1;
  return v2;
}

void *sub_1000A26E0(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_1000A5A04(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    unint64_t v14 = v1 & 0xC000000000000001;
    unint64_t v5 = v1;
    while (v2 != v4)
    {
      if (v14) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v1 + 8 * v4 + 32);
      }
      id v7 = v6;
      uint64_t v8 = CalculateUnit.id.getter();
      uint64_t v10 = v9;

      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1000A5A04(v11 > 1, v12 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      void v13[5] = v10;
      unint64_t v1 = v5;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *sub_1000A284C()
{
  type metadata accessor for CalculatorUnitConversionDataProvider();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_1000A34F4();
  qword_1001612E0 = v0;
  return result;
}

id sub_1000A288C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 16);
  *a2 = v4;

  return v4;
}

void sub_1000A2914(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_1000A29C0()
{
  unint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  uint64_t v2 = v0;
  swift_getKeyPath();
  uint64_t v39 = (void *)v0;
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v3 = [*(id *)(v0 + 16) categories];
  sub_10001CE8C(0, (unint64_t *)&qword_100155240);
  unint64_t isUniquelyReferenced_nonNull_native = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v1 = (void *)sub_1000710FC((uint64_t)_swiftEmptyArrayStorage);
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain_n();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v33 = v2;
    if (v5) {
      goto LABEL_5;
    }
LABEL_31:
    swift_bridgeObjectRelease_n();
    *(void *)(v33 + 24) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  uint64_t v5 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v33 = v0;
  if (!v5) {
    goto LABEL_31;
  }
LABEL_5:
  uint64_t v2 = 0;
  unint64_t v34 = isUniquelyReferenced_nonNull_native;
  unint64_t v35 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  uint64_t v6 = 4;
  while (1)
  {
    if (v35) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v6);
    }
    uint64_t v10 = v9;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v11 = CalculateUnitCategory.id.getter();
    uint64_t v38 = v12;
    id v37 = v10;
    id v13 = [v37 units];
    sub_10001CE8C(0, &qword_100157B78);
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v36 = v6 - 3;
    if (v14 < 0 || (v14 & 0x4000000000000000) != 0)
    {
      unint64_t v31 = swift_bridgeObjectRetain();
      uint64_t v15 = (uint64_t)sub_1000A5B90(v31);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    uint64_t v39 = (void *)v15;
    sub_1000A5C88((uint64_t *)&v39);
    swift_bridgeObjectRelease();
    uint64_t v16 = (uint64_t)v39;
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = v1;
    uint64_t v17 = v11;
    unint64_t v19 = sub_100074534(v11, v38);
    uint64_t v20 = v1[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_28;
    }
    char v23 = v18;
    if (v1[3] < v22) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t v1 = v39;
      if (v18) {
        goto LABEL_6;
      }
    }
    else
    {
      sub_10007639C();
      unint64_t v1 = v39;
      if (v23)
      {
LABEL_6:
        uint64_t v7 = v1[7] + 16 * v19;
        uint64_t v8 = *(void **)v7;
        swift_bridgeObjectRelease();

        unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v37;
        *(void *)uint64_t v7 = v37;
        *(void *)(v7 + 8) = v16;
        goto LABEL_7;
      }
    }
LABEL_22:
    v1[(v19 >> 6) + 8] |= 1 << v19;
    uint64_t v26 = (uint64_t *)(v1[6] + 16 * v19);
    unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v37;
    *uint64_t v26 = v17;
    v26[1] = v38;
    char v27 = (void *)(v1[7] + 16 * v19);
    void *v27 = v37;
    v27[1] = v16;
    uint64_t v28 = v1[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_29;
    }
    v1[2] = v30;
    swift_bridgeObjectRetain();
LABEL_7:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v6;
    unint64_t isUniquelyReferenced_nonNull_native = v34;
    if (v36 == v5) {
      goto LABEL_31;
    }
  }
  sub_1000753D8(v22, isUniquelyReferenced_nonNull_native);
  unint64_t v24 = sub_100074534(v17, v38);
  if ((v23 & 1) == (v25 & 1))
  {
    unint64_t v19 = v24;
    unint64_t v1 = v39;
    if (v23) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A2D8C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A2E14@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A2EA4()
{
  return swift_bridgeObjectRelease();
}

void *sub_1000A2F54()
{
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v1 = *(void **)(v0 + 40);
  id v2 = v1;
  return v1;
}

id sub_1000A2FCC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 40);
  *a2 = v4;

  return v4;
}

void sub_1000A3054(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void sub_1000A3100(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 40);
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = a2;
  id v3 = a2;
}

void *sub_1000A3134()
{
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v1 = *(void **)(v0 + 48);
  id v2 = v1;
  return v1;
}

id sub_1000A31AC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 48);
  *a2 = v4;

  return v4;
}

void sub_1000A3234(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void sub_1000A32E0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = a2;
  id v3 = a2;
}

void *sub_1000A3314()
{
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

id sub_1000A338C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 56);
  *a2 = v4;

  return v4;
}

void sub_1000A3414(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1000A498C();
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void sub_1000A34C0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = a2;
  id v3 = a2;
}

void *sub_1000A34F4()
{
  unint64_t v1 = v0;
  v0[2] = [objc_allocWithZone((Class)CalculateUnitCollection) initWithLocales:0];
  v0[3] = 0;
  v0[4] = _swiftEmptyArrayStorage;
  v0[5] = 0;
  v0[6] = 0;
  v0[7] = 0;
  ObservationRegistrar.init()();
  id v2 = sub_1000A1EBC();
  uint64_t v3 = CalculateUnitCategory.id.getter();
  uint64_t v5 = v4;

  swift_getKeyPath();
  v27[0] = v1;
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v6 = [(id)v1[2] categories];
  sub_10001CE8C(0, (unint64_t *)&qword_100155240);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1000A74B8(v7, v3, v5, (uint64_t (*)(void))&CalculateUnitCategory.id.getter);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v8)
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    id v10 = v8;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();

    id v11 = sub_1000A2250();
    uint64_t v12 = swift_getKeyPath();
    __chkstk_darwin(v12);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();

    id v13 = sub_1000A2498();
    uint64_t v14 = swift_getKeyPath();
    __chkstk_darwin(v14);
    v27[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

    swift_release();
  }
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_100161370;
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 objectForKey:v16];

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v26, 0, sizeof(v26));
  }
  sub_1000125D0((uint64_t)v26, (uint64_t)v27);
  if (v27[3])
  {
    sub_100032FA0(&qword_100157B80);
    if (swift_dynamicCast())
    {
      v27[0] = _swiftEmptyArrayStorage;
      uint64_t v18 = *(void *)(v25 + 16);
      if (v18)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v19 = v25 + 40;
        do
        {
          swift_getKeyPath();
          *(void *)&v26[0] = v1;
          swift_bridgeObjectRetain();
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          id v20 = (id)v1[2];
          NSString v21 = String._bridgeToObjectiveC()();
          id v22 = [v20 findUnitWithName:v21];
          swift_bridgeObjectRelease();

          if (v22)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v27[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          v19 += 16;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_retain();
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v23 = swift_getKeyPath();
      __chkstk_darwin(v23);
      v27[0] = v1;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100012570((uint64_t)v27);
  }
  return v1;
}

void sub_1000A3ACC(void *a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = (void *)(v1 + 32);
  swift_beginAccess();
  id v5 = a1;
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = sub_1000A77E8(v6);
  char v9 = v8;
  swift_bridgeObjectRelease();

  if ((v9 & 1) == 0)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    id v10 = (void *)sub_1000A1D58(v7);
    swift_endAccess();

    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v11 = *(void *)(v2 + 32);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21 < 20) {
      goto LABEL_12;
    }
  }
  else if (*(uint64_t *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) < 20)
  {
LABEL_12:
    swift_getKeyPath();
    id v16 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    if (*(void *)(v2 + 32) >> 62
      && (swift_bridgeObjectRetain(), uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(), swift_bridgeObjectRelease(), v22 < 0))
    {
      __break(1u);
    }
    else
    {
      sub_1000A5630(0, 0, (uint64_t)v16);
      swift_endAccess();
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
      if (qword_100154760 == -1)
      {
LABEL_14:
        id v17 = (void *)qword_100161370;
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        unint64_t v18 = swift_bridgeObjectRetain();
        sub_1000A26E0(v18);
        swift_bridgeObjectRelease();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        NSString v20 = String._bridgeToObjectiveC()();
        [v17 setObject:isa forKey:v20];

        return;
      }
    }
    swift_once();
    goto LABEL_14;
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  unint64_t v12 = *(void *)(v2 + 32);
  if (!(v12 >> 62))
  {
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_21;
  }
LABEL_7:
  id v13 = (void *)sub_1000A7420();
  if (v13)
  {
LABEL_11:

    swift_endAccess();
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    goto LABEL_12;
  }
  if (*v4 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v15 = v24 - 1;
    if (!__OFSUB__(v24, 1)) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v15 = v14 - 1;
  if (!__OFSUB__(v14, 1))
  {
LABEL_10:
    id v13 = (void *)sub_1000A1D58(v15);
    goto LABEL_11;
  }
LABEL_24:
  __break(1u);
}

void sub_1000A4020()
{
  swift_getKeyPath();
  sub_1000A498C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v0;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v3 = v0;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  if (qword_100154760 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_100161370;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setURL:0 forKey:v2, v3, v4];
}

void sub_1000A4188(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return;
  }
  int64_t v3 = 0;
  uint64_t v54 = sub_1000A29C0();
  uint64_t v52 = v54 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v54 + 64);
  int64_t v53 = (unint64_t)(v4 + 63) >> 6;
  unint64_t v7 = _swiftEmptyArrayStorage;
LABEL_7:
  unint64_t v49 = v7 + 9;
  uint64_t v50 = v7;
  if (v6)
  {
LABEL_8:
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v3 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    if (__OFADD__(v3++, 1))
    {
      __break(1u);
      goto LABEL_72;
    }
    if (v3 >= v53) {
      goto LABEL_69;
    }
    unint64_t v11 = *(void *)(v52 + 8 * v3);
    if (v11) {
      goto LABEL_21;
    }
    int64_t v12 = v3 + 1;
    if (v3 + 1 >= v53) {
      goto LABEL_69;
    }
    unint64_t v11 = *(void *)(v52 + 8 * v12);
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v53) {
        goto LABEL_69;
      }
      unint64_t v11 = *(void *)(v52 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v53) {
          goto LABEL_69;
        }
        unint64_t v11 = *(void *)(v52 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v53)
          {
LABEL_69:
            swift_release();
            return;
          }
          unint64_t v11 = *(void *)(v52 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
    int64_t v3 = v12;
LABEL_21:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v3 << 6);
LABEL_22:
    long long v57 = *(_OWORD *)(*(void *)(v54 + 56) + 16 * v9);
    id v13 = (id)v57;
    swift_bridgeObjectRetain();
    NSString v14 = String._bridgeToObjectiveC()();
    unsigned int v15 = [v13 contains:v14];

    if (v15)
    {
      id v44 = v13;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v7 = sub_1000A5090(0, v7[2] + 1, 1, v7);
      }
      unint64_t v46 = v7[2];
      unint64_t v45 = v7[3];
      long long v47 = v57;
      if (v46 >= v45 >> 1)
      {
        unint64_t v48 = sub_1000A5090((void *)(v45 > 1), v46 + 1, 1, v7);
        long long v47 = v57;
        unint64_t v7 = v48;
      }
      uint64_t v7[2] = v46 + 1;
      *(_OWORD *)&v7[2 * v46 + 4] = v47;
      goto LABEL_68;
    }
    uint64_t v16 = v7[2];
    if (v16)
    {
      int64_t v55 = v3;
      unint64_t v58 = v6;
      id v17 = (void *)v7[4];
      swift_bridgeObjectRetain_n();
      id v18 = v17;
      swift_bridgeObjectRetain();
      uint64_t v19 = CalculateUnitCategory.id.getter();
      uint64_t v21 = v20;
      if (v19 == CalculateUnitCategory.id.getter() && v21 == v22) {
        goto LABEL_37;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        if (v16 == 1) {
          goto LABEL_30;
        }
        id v18 = (id)v7[6];
        swift_bridgeObjectRetain();
        uint64_t v26 = CalculateUnitCategory.id.getter();
        uint64_t v28 = v27;
        if (v26 != CalculateUnitCategory.id.getter() || v28 != v29)
        {
          char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v30) {
            goto LABEL_38;
          }
          if (v16 == 2)
          {
LABEL_30:
            unint64_t v7 = v50;
            swift_bridgeObjectRelease_n();
            int64_t v3 = v55;
            goto LABEL_31;
          }
          uint64_t v31 = 2;
          uint64_t v32 = v49;
          while (!__OFADD__(v31, 1))
          {
            uint64_t v51 = v31 + 1;
            id v18 = (id)*(v32 - 1);
            swift_bridgeObjectRetain();
            uint64_t v33 = CalculateUnitCategory.id.getter();
            uint64_t v35 = v34;
            if (v33 == CalculateUnitCategory.id.getter() && v35 == v36)
            {
              unint64_t v7 = v50;
              goto LABEL_37;
            }
            char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v38)
            {
              unint64_t v7 = v50;
              goto LABEL_38;
            }
            v32 += 2;
            ++v31;
            unint64_t v6 = v58;
            if (v51 == v16) {
              goto LABEL_30;
            }
          }
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
LABEL_37:
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
      }
LABEL_38:
      int64_t v3 = v55;
      unint64_t v6 = v58;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      if (v58) {
        goto LABEL_8;
      }
    }
    else
    {
LABEL_31:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v25 = (unint64_t)sub_1000A8098(*((unint64_t *)&v57 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v25 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v39)
        {
LABEL_58:
          int64_t v56 = v3;
          id v40 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v7 = sub_1000A5090(0, v7[2] + 1, 1, v7);
          }
          unint64_t v42 = v7[2];
          unint64_t v41 = v7[3];
          if (v42 >= v41 >> 1) {
            unint64_t v7 = sub_1000A5090((void *)(v41 > 1), v42 + 1, 1, v7);
          }
          uint64_t v7[2] = v42 + 1;
          uint64_t v43 = &v7[2 * v42];
          v43[4] = v40;
          v43[5] = v25;
          int64_t v3 = v56;
LABEL_68:
          swift_bridgeObjectRelease();

          goto LABEL_7;
        }
      }
      else if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_58;
      }
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_8;
      }
    }
  }
  while (1)
  {
    int64_t v3 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v3 >= v53) {
      goto LABEL_69;
    }
    unint64_t v11 = *(void *)(v52 + 8 * v3);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_73:
  __break(1u);
}

uint64_t sub_1000A47A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC10Calculator36CalculatorUnitConversionDataProvider___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000A4874()
{
  return type metadata accessor for CalculatorUnitConversionDataProvider();
}

uint64_t type metadata accessor for CalculatorUnitConversionDataProvider()
{
  uint64_t result = qword_100157AC0;
  if (!qword_100157AC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A48C8()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000A498C()
{
  unint64_t result = qword_100155238;
  if (!qword_100155238)
  {
    type metadata accessor for CalculatorUnitConversionDataProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100155238);
  }
  return result;
}

void *sub_1000A49E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100032FA0(&qword_100157BB8);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000A76F0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000A4B0C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100032FA0(&qword_100154E38);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      id v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A7A40(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000A4C1C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100032FA0(&qword_100157BA8);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      id v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A7F8C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000A4D2C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_100032FA0(&qword_100157BD0);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000A7958(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A4E28(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    id v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100032FA0(&qword_1001564F0);
  uint64_t v10 = *(void *)(type metadata accessor for Locale() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  id v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for Locale() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000A84F0(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_1000A5090(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100032FA0(&qword_100157BA0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      id v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000A8648(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000A51A0(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = *(void **)v5;
  int64_t v8 = *(void *)(*(void *)v5 + 16);
  if (v8 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v12 > v7[3] >> 1)
  {
    if (v8 <= v12) {
      int64_t v16 = v8 + v11;
    }
    else {
      int64_t v16 = v8;
    }
    uint64_t v7 = sub_1000A49E4(isUniquelyReferenced_nonNull_native, v16, 1, v7);
  }
  unint64_t v17 = v7 + 4;
  unint64_t v18 = &v7[3 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v20 = v7[2];
  BOOL v21 = __OFSUB__(v20, a2);
  uint64_t v22 = v20 - a2;
  if (v21) {
    goto LABEL_26;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v18 + 3);
    uint64_t v23 = (char *)&v17[3 * a2];
    if (v18 + 3 != (void *)v23 || result >= &v23[24 * v22]) {
      uint64_t result = (char *)memmove(result, v23, 24 * v22);
    }
    uint64_t v24 = v7[2];
    BOOL v21 = __OFADD__(v24, v11);
    uint64_t v25 = v24 + v11;
    if (!v21)
    {
      uint64_t v7[2] = v25;
LABEL_20:
      *unint64_t v18 = a3;
      v18[1] = a4;
      v17[3 * a1 + 2] = a5;
      *(void *)uint64_t v5 = v7;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A5344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  size_t v14 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for SchemaV1.HistoryRecord();
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unint64_t v17 = (char *)(v14 + 1);
        unint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  *size_t v14 = v3;

  return specialized Array._endMutation()();
}

uint64_t sub_1000A5630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  size_t v14 = (void *)(v13 + 32 + 8 * v6);
  sub_10001CE8C(0, &qword_100157B78);
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unint64_t v17 = (char *)(v14 + 1);
        unint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  *size_t v14 = v3;

  return specialized Array._endMutation()();
}

void *sub_1000A592C(void *a1)
{
  return sub_1000A49E4(0, a1[2], 0, a1);
}

void *sub_1000A5944(void *a1)
{
  return sub_1000A4D2C(0, a1[2], 0, a1);
}

uint64_t sub_1000A5958(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1000A59D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10002A6C4(a1, a2, a3, (void *)*v3, &qword_100157BC0, &qword_1001568C8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000A5A04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000A5A24(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000A5A24(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100032FA0(&qword_100154E38);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000A5B90(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100032FA0(&qword_100154BB0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1000A6FDC((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

uint64_t sub_1000A5C88(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1000A74A4(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1000A5D04(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_1000A5D04(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result < v4)
  {
    if (v4 >= 0) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = v4 + 1;
    }
    if (v4 >= -1)
    {
      Swift::Int v7 = result;
      uint64_t v101 = a1;
      if (v4 < 2)
      {
        uint64_t v10 = (char *)_swiftEmptyArrayStorage;
        uint64_t v113 = (uint64_t)_swiftEmptyArrayStorage;
        __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
        if (v4 != 1)
        {
          unint64_t v13 = _swiftEmptyArrayStorage[2];
          if (v13 < 2) {
            goto LABEL_109;
          }
          goto LABEL_97;
        }
      }
      else
      {
        uint64_t v8 = v6 >> 1;
        sub_10001CE8C(0, &qword_100157B78);
        uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x1sub_100102B8C(2, 18, 1, 0) = v8;
        __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
        uint64_t v113 = v9;
      }
      Swift::Int v11 = 0;
      uint64_t v12 = *a1;
      uint64_t v103 = *a1 + 16;
      Swift::Int v104 = v7;
      uint64_t v102 = *a1 - 8;
      uint64_t v10 = (char *)_swiftEmptyArrayStorage;
      Swift::Int v108 = v4;
      uint64_t v112 = *a1;
      while (1)
      {
        Swift::Int v14 = v11++;
        Swift::Int v107 = v14;
        if (v11 < v4)
        {
          uint64_t v105 = v10;
          uint64_t v15 = *(void **)(v12 + 8 * v14);
          id v16 = *(id *)(v12 + 8 * v11);
          id v17 = v15;
          id v18 = [v16 displayName];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v19 = [v17 displayName];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          Swift::Int v4 = v108;
          sub_100023B24();
          uint64_t v109 = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          Swift::Int v11 = v14 + 2;
          if (v14 + 2 < v108)
          {
            uint64_t v20 = (id *)(v103 + 8 * v14);
            while (1)
            {
              BOOL v21 = *(v20 - 1);
              id v22 = *v20;
              id v23 = v21;
              id v24 = [v22 displayName];
              static String._unconditionallyBridgeFromObjectiveC(_:)();

              id v25 = [v23 displayName];
              static String._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v26 = StringProtocol.localizedStandardCompare<A>(_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v109 == -1) == (v26 != -1)) {
                break;
              }
              ++v11;
              ++v20;
              Swift::Int v4 = v108;
              if (v108 == v11)
              {
                Swift::Int v11 = v108;
                goto LABEL_22;
              }
            }
            Swift::Int v4 = v108;
          }
LABEL_22:
          uint64_t v10 = v105;
          uint64_t v12 = v112;
          if (v109 == -1)
          {
            if (v11 < v14) {
              goto LABEL_135;
            }
            if (v14 < v11)
            {
              uint64_t v27 = (uint64_t *)(v102 + 8 * v11);
              Swift::Int v28 = v11;
              Swift::Int v29 = v14;
              char v30 = (uint64_t *)(v112 + 8 * v14);
              do
              {
                if (v29 != --v28)
                {
                  if (!v112) {
                    goto LABEL_138;
                  }
                  uint64_t v31 = *v30;
                  *char v30 = *v27;
                  uint64_t *v27 = v31;
                }
                ++v29;
                --v27;
                ++v30;
              }
              while (v29 < v28);
            }
          }
        }
        if (v11 < v4)
        {
          if (__OFSUB__(v11, v14)) {
            goto LABEL_131;
          }
          if (v11 - v14 < v104)
          {
            if (__OFADD__(v14, v104)) {
              goto LABEL_133;
            }
            if (v14 + v104 >= v4) {
              Swift::Int v32 = v4;
            }
            else {
              Swift::Int v32 = v14 + v104;
            }
            if (v32 < v14)
            {
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              break;
            }
            if (v11 != v32)
            {
              Swift::Int v106 = v32;
              uint64_t v33 = v102 + 8 * v11;
              do
              {
                uint64_t v34 = *(void **)(v12 + 8 * v11);
                Swift::Int v35 = v14;
                uint64_t v110 = v33;
                uint64_t v36 = v33;
                while (1)
                {
                  id v37 = *(void **)v36;
                  id v38 = v34;
                  id v39 = v37;
                  id v40 = [v38 displayName];
                  static String._unconditionallyBridgeFromObjectiveC(_:)();

                  id v41 = [v39 displayName];
                  static String._unconditionallyBridgeFromObjectiveC(_:)();

                  sub_100023B24();
                  uint64_t v42 = StringProtocol.localizedStandardCompare<A>(_:)();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v42 != -1) {
                    break;
                  }
                  uint64_t v12 = v112;
                  if (!v112) {
                    goto LABEL_136;
                  }
                  uint64_t v43 = *(void **)v36;
                  uint64_t v34 = *(void **)(v36 + 8);
                  *(void *)uint64_t v36 = v34;
                  *(void *)(v36 + 8) = v43;
                  v36 -= 8;
                  if (v11 == ++v35) {
                    goto LABEL_41;
                  }
                }
                uint64_t v12 = v112;
LABEL_41:
                ++v11;
                uint64_t v33 = v110 + 8;
                Swift::Int v14 = v107;
              }
              while (v11 != v106);
              Swift::Int v11 = v106;
            }
          }
        }
        if (v11 < v14) {
          goto LABEL_126;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_1000A6B44(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v45 = *((void *)v10 + 2);
        unint64_t v44 = *((void *)v10 + 3);
        unint64_t v13 = v45 + 1;
        uint64_t v12 = v112;
        if (v45 >= v44 >> 1)
        {
          long long v94 = sub_1000A6B44((char *)(v44 > 1), v45 + 1, 1, v10);
          uint64_t v12 = v112;
          uint64_t v10 = v94;
        }
        *((void *)v10 + 2) = v13;
        unint64_t v46 = v10 + 32;
        long long v47 = &v10[16 * v45 + 32];
        *(void *)long long v47 = v14;
        *((void *)v47 + 1) = v11;
        if (v45)
        {
          while (1)
          {
            unint64_t v48 = v13 - 1;
            if (v13 >= 4)
            {
              int64_t v53 = &v46[16 * v13];
              uint64_t v54 = *((void *)v53 - 8);
              uint64_t v55 = *((void *)v53 - 7);
              BOOL v59 = __OFSUB__(v55, v54);
              uint64_t v56 = v55 - v54;
              if (v59) {
                goto LABEL_115;
              }
              uint64_t v58 = *((void *)v53 - 6);
              uint64_t v57 = *((void *)v53 - 5);
              BOOL v59 = __OFSUB__(v57, v58);
              uint64_t v51 = v57 - v58;
              char v52 = v59;
              if (v59) {
                goto LABEL_116;
              }
              unint64_t v60 = v13 - 2;
              uint64_t v61 = &v46[16 * v13 - 32];
              uint64_t v63 = *(void *)v61;
              uint64_t v62 = *((void *)v61 + 1);
              BOOL v59 = __OFSUB__(v62, v63);
              uint64_t v64 = v62 - v63;
              if (v59) {
                goto LABEL_118;
              }
              BOOL v59 = __OFADD__(v51, v64);
              uint64_t v65 = v51 + v64;
              if (v59) {
                goto LABEL_121;
              }
              if (v65 >= v56)
              {
                uint64_t v83 = &v46[16 * v48];
                uint64_t v85 = *(void *)v83;
                uint64_t v84 = *((void *)v83 + 1);
                BOOL v59 = __OFSUB__(v84, v85);
                uint64_t v86 = v84 - v85;
                if (v59) {
                  goto LABEL_125;
                }
                BOOL v76 = v51 < v86;
                goto LABEL_85;
              }
            }
            else
            {
              if (v13 != 3)
              {
                uint64_t v77 = *((void *)v10 + 4);
                uint64_t v78 = *((void *)v10 + 5);
                BOOL v59 = __OFSUB__(v78, v77);
                uint64_t v70 = v78 - v77;
                char v71 = v59;
                goto LABEL_79;
              }
              uint64_t v50 = *((void *)v10 + 4);
              uint64_t v49 = *((void *)v10 + 5);
              BOOL v59 = __OFSUB__(v49, v50);
              uint64_t v51 = v49 - v50;
              char v52 = v59;
            }
            if (v52) {
              goto LABEL_117;
            }
            unint64_t v60 = v13 - 2;
            uint64_t v66 = &v46[16 * v13 - 32];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v69 = __OFSUB__(v67, v68);
            uint64_t v70 = v67 - v68;
            char v71 = v69;
            if (v69) {
              goto LABEL_120;
            }
            uint64_t v72 = &v46[16 * v48];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v59 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v59) {
              goto LABEL_123;
            }
            if (__OFADD__(v70, v75)) {
              goto LABEL_124;
            }
            if (v70 + v75 >= v51)
            {
              BOOL v76 = v51 < v75;
LABEL_85:
              if (v76) {
                unint64_t v48 = v60;
              }
              goto LABEL_87;
            }
LABEL_79:
            if (v71) {
              goto LABEL_119;
            }
            uint64_t v79 = &v46[16 * v48];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v59 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v59) {
              goto LABEL_122;
            }
            if (v82 < v70) {
              goto LABEL_14;
            }
LABEL_87:
            unint64_t v87 = v48 - 1;
            if (v48 - 1 >= v13)
            {
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
              goto LABEL_134;
            }
            if (!v12) {
              goto LABEL_137;
            }
            unint64_t v88 = v10;
            uint64_t v89 = &v46[16 * v87];
            uint64_t v90 = *(void *)v89;
            unint64_t v91 = &v46[16 * v48];
            uint64_t v92 = *((void *)v91 + 1);
            sub_1000A673C((id *)(v12 + 8 * *(void *)v89), (id *)(v12 + 8 * *(void *)v91), v12 + 8 * v92, __dst);
            if (v1) {
              goto LABEL_109;
            }
            if (v92 < v90) {
              goto LABEL_112;
            }
            if (v48 > *((void *)v88 + 2)) {
              goto LABEL_113;
            }
            *(void *)uint64_t v89 = v90;
            *(void *)&v46[16 * v87 + 8] = v92;
            unint64_t v93 = *((void *)v88 + 2);
            if (v48 >= v93) {
              goto LABEL_114;
            }
            uint64_t v10 = v88;
            unint64_t v13 = v93 - 1;
            memmove(&v46[16 * v48], v91 + 16, 16 * (v93 - 1 - v48));
            *((void *)v88 + 2) = v93 - 1;
            uint64_t v12 = v112;
            if (v93 <= 2) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v13 = 1;
LABEL_14:
        Swift::Int v4 = v108;
        if (v11 >= v108)
        {
          uint64_t v2 = v1;
          if (v13 < 2)
          {
LABEL_109:
            swift_bridgeObjectRelease();
            *(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x1sub_100102B8C(2, 18, 1, 0) = 0;
            specialized Array._endMutation()();
            return swift_bridgeObjectRelease();
          }
LABEL_97:
          uint64_t v95 = *v101;
          while (1)
          {
            unint64_t v96 = v13 - 2;
            if (v13 < 2) {
              goto LABEL_127;
            }
            if (!v95) {
              goto LABEL_139;
            }
            uint64_t v97 = *(void *)&v10[16 * v96 + 32];
            uint64_t v98 = *(void *)&v10[16 * v13 + 24];
            sub_1000A673C((id *)(v95 + 8 * v97), (id *)(v95 + 8 * *(void *)&v10[16 * v13 + 16]), v95 + 8 * v98, __dst);
            if (v2) {
              goto LABEL_109;
            }
            if (v98 < v97) {
              goto LABEL_128;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v10 = sub_1000A6DB8((uint64_t)v10);
            }
            if (v96 >= *((void *)v10 + 2)) {
              goto LABEL_129;
            }
            uint64_t v99 = &v10[16 * v96 + 32];
            *(void *)uint64_t v99 = v97;
            *((void *)v99 + 1) = v98;
            unint64_t v100 = *((void *)v10 + 2);
            if (v13 > v100) {
              goto LABEL_130;
            }
            memmove(&v10[16 * v13 + 16], &v10[16 * v13 + 32], 16 * (v100 - v13));
            *((void *)v10 + 2) = v100 - 1;
            unint64_t v13 = v100 - 1;
            if (v100 <= 2) {
              goto LABEL_109;
            }
          }
        }
      }
    }
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < 0) {
    goto LABEL_132;
  }
  if (v4) {
    return sub_1000A65C8(0, v4, 1, a1);
  }
  return result;
}

uint64_t sub_1000A65C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v18 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v6 = *(void **)(v18 + 8 * v4);
    uint64_t v7 = v16;
    uint64_t v17 = v5;
    while (1)
    {
      uint64_t v8 = *(void **)v5;
      id v9 = v6;
      id v10 = v8;
      id v11 = [v9 displayName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v12 = [v10 displayName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100023B24();
      uint64_t v13 = StringProtocol.localizedStandardCompare<A>(_:)();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      if (v13 != -1)
      {
LABEL_4:
        ++v4;
        uint64_t v5 = v17 + 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v18) {
        break;
      }
      Swift::Int v14 = *(void **)v5;
      uint64_t v6 = *(void **)(v5 + 8);
      *(void *)uint64_t v5 = v6;
      *(void *)(v5 + 8) = v14;
      v5 -= 8;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A673C(id *a1, id *__src, unint64_t a3, char *__dst)
{
  uint64_t v5 = __src;
  uint64_t v6 = (char *)__src - (char *)a1;
  uint64_t v7 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v7 = (char *)__src - (char *)a1;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 3;
  id v41 = a1;
  id v40 = (void **)__dst;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (__dst != (char *)__src || &__src[v11] <= (id *)__dst) {
        memmove(__dst, __src, 8 * v11);
      }
      uint64_t v33 = __dst;
      BOOL v21 = &__dst[8 * v11];
      id v39 = v21;
      id v41 = v5;
      if (a1 < v5 && v9 >= 8)
      {
        id v22 = (id *)(a3 - 8);
        id v23 = v5;
        do
        {
          Swift::Int v35 = v21;
          id v37 = v22 + 1;
          id v25 = (void *)*((void *)v21 - 1);
          v21 -= 8;
          id v24 = v25;
          uint64_t v26 = *--v23;
          id v27 = v24;
          id v28 = v26;
          id v29 = [v27 displayName];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v30 = [v28 displayName];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100023B24();
          uint64_t v31 = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v31 == -1)
          {
            BOOL v21 = v35;
            if (v37 != v5 || v22 >= v5) {
              *id v22 = *v23;
            }
            id v41 = v23;
          }
          else
          {
            id v39 = v21;
            id v23 = v5;
            if (v37 < (id *)v35 || v22 >= (id *)v35 || v37 != (id *)v35) {
              *id v22 = *(id *)v21;
            }
          }
          if (v23 <= a1) {
            break;
          }
          --v22;
          uint64_t v5 = v23;
        }
        while (v21 > v33);
      }
      goto LABEL_42;
    }
  }
  else if (v6 >= -7)
  {
    if (__dst != (char *)a1 || &a1[v8] <= (id *)__dst) {
      memmove(__dst, a1, 8 * v8);
    }
    uint64_t v36 = (void **)&__dst[8 * v8];
    id v39 = (char *)v36;
    if ((unint64_t)v5 < a3 && v6 >= 8)
    {
      id v12 = (void **)__dst;
      uint64_t v13 = a1;
      do
      {
        Swift::Int v14 = *v12;
        id v15 = *v5;
        id v16 = v14;
        id v17 = [v15 displayName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v18 = [v16 displayName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100023B24();
        uint64_t v19 = StringProtocol.localizedStandardCompare<A>(_:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v19 == -1)
        {
          uint64_t v20 = v5 + 1;
          if (v13 < v5 || v13 >= v20 || v13 != v5) {
            *uint64_t v13 = *v5;
          }
        }
        else
        {
          if (v13 != v12) {
            *uint64_t v13 = *v12;
          }
          id v40 = ++v12;
          uint64_t v20 = v5;
        }
        ++v13;
        if (v12 >= v36) {
          break;
        }
        uint64_t v5 = v20;
      }
      while ((unint64_t)v20 < a3);
      id v41 = v13;
    }
LABEL_42:
    sub_1000A6CFC((void **)&v41, (const void **)&v40, &v39);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000A6B44(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100032FA0(&qword_100157B98);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  Swift::Int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000A6C40(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1000A6CFC(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1000A6DB8(uint64_t a1)
{
  return sub_1000A6B44(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000A6DCC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000775A8(&qword_100157BC8, &qword_1001568C8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100032FA0(&qword_1001568C8);
          uint64_t v12 = sub_1000A7268(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SchemaV1.HistoryRecord();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A6FDC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000775A8(&qword_100157B90, &qword_100157B88);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100032FA0(&qword_100157B88);
          uint64_t v12 = sub_1000A71FC(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001CE8C(0, &qword_100157B78);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*sub_1000A71FC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000A7318(v6, a2, a3);
  return sub_1000A7264;
}

uint64_t (*sub_1000A7268(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000A73A0(v6, a2, a3);
  return sub_1000A7264;
}

void sub_1000A72D0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1000A7318(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1000A7398;
  }
  __break(1u);
  return result;
}

void sub_1000A7398(id *a1)
{
}

uint64_t (*sub_1000A73A0(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return destroy for CalculatorModeSwitchPPTTests;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A7420()
{
  unint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v0 = v1;
  if (!result || (v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_1000A5958(v1);
    unint64_t v1 = result;
    *uint64_t v0 = result;
  }
  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(void *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A7490(uint64_t a1)
{
  return sub_1000A5A24(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000A74A4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_1000A74B8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v8 = 4;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v8);
      uint64_t v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      if (a4() == a2 && v12 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        return v10;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_14;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_1000A7628()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + 56);
  *(void *)(v1 + 56) = v2;
  id v4 = v2;
}

void sub_1000A7668()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = v2;
  id v4 = v2;
}

void sub_1000A76B0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v2;
  id v4 = v2;
}

uint64_t sub_1000A76F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A77E8(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    for (uint64_t i = 0; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v4 = *(id *)(a1 + 8 * i + 32);
      }
      unint64_t v5 = v4;
      uint64_t v6 = CalculateUnit.id.getter();
      uint64_t v8 = v7;
      if (v6 == CalculateUnit.id.getter() && v8 == v9)
      {

        swift_bridgeObjectRelease_n();
        return i;
      }
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10) {
        return i;
      }
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if (v11 == v2) {
        return 0;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

char *sub_1000A7958(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A7A40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A7B34(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  type metadata accessor for SchemaV1.HistoryRecord();
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        id v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1000A7E14(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1000A49E4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (void *)&v16[24 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[3 * a1 + 4], v16, 24 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A7F8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100032FA0(&qword_100157BB0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000A8098(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        NSString v7 = String._bridgeToObjectiveC()();
        unsigned int v8 = [v5 contains:v7];

        if (v8)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v3;
        if (v6 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000A8200(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *unint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_10001CE8C(0, (unint64_t *)&qword_100156518);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        BOOL v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1000A84F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for Locale() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A8648(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000A873C()
{
}

void sub_1000A8754()
{
}

void sub_1000A876C()
{
}

uint64_t sub_1000A8784()
{
  return sub_10004C058();
}

char *sub_1000A879C(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v23 = *a2;
    *(void *)a1 = *a2;
    a1 = &v23[(v5 + 16) & ~(unint64_t)v5];
  }
  else
  {
    uint64_t v7 = *a2;
    char v8 = *((unsigned char *)a2 + 8);
    sub_10002025C(*a2, v8);
    *(void *)a1 = v7;
    a1[8] = v8;
    char v9 = *((unsigned char *)a2 + 24);
    *((void *)a1 + 2) = a2[2];
    a1[24] = v9;
    uint64_t v10 = (uint64_t)a2[4];
    uint64_t v11 = (uint64_t)a2[5];
    char v12 = *((unsigned char *)a2 + 49);
    uint64_t v13 = *((unsigned __int8 *)a2 + 48);
    swift_retain();
    sub_100023524(v10, v11, v13, v12);
    *((void *)a1 + 4) = v10;
    *((void *)a1 + 5) = v11;
    a1[48] = v13;
    a1[49] = v12;
    char v14 = *((unsigned char *)a2 + 64);
    *((void *)a1 + 7) = a2[7];
    a1[64] = v14;
    uint64_t v15 = a2[10];
    *((void *)a1 + 9) = a2[9];
    *((void *)a1 + 1sub_100102B8C(2, 18, 1, 0) = v15;
    a1[88] = *((unsigned char *)a2 + 88);
    a1[96] = *((unsigned char *)a2 + 96);
    uint64_t v16 = a2[13];
    uint64_t v17 = *(int *)(a3 + 40);
    uint64_t v18 = &a1[v17];
    uint64_t v19 = (char *)a2 + v17;
    *((void *)a1 + 13) = v16;
    uint64_t v20 = type metadata accessor for AccessibilityTechnologies();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v26(v19, 1, v20))
    {
      uint64_t v22 = sub_100032FA0(&qword_100157C00);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    id v24 = (int *)sub_100032FA0(&qword_100157C08);
    v18[v24[9]] = v19[v24[9]];
    *(void *)&v18[v24[10]] = *(void *)&v19[v24[10]];
    v18[v24[11]] = v19[v24[11]];
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000A8A00(uint64_t a1, uint64_t a2)
{
  sub_10001A83C(*(id *)a1, *(unsigned char *)(a1 + 8));
  swift_release();
  sub_10002F4E8(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(unsigned char *)(a1 + 49));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_100032FA0(&qword_100157C08);

  return swift_release();
}

uint64_t sub_1000A8B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10002025C(*(id *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  char v8 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v8;
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  char v11 = *(unsigned char *)(a2 + 49);
  uint64_t v12 = *(unsigned __int8 *)(a2 + 48);
  swift_retain();
  sub_100023524(v9, v10, v12, v11);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v10;
  *(unsigned char *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 49) = v11;
  char v13 = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = v14;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  *(void *)(a1 + 104) = v15;
  uint64_t v19 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v20 = *(void *)(v19 - 8);
  id v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v24(v18, 1, v19))
  {
    uint64_t v21 = sub_100032FA0(&qword_100157C00);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = (int *)sub_100032FA0(&qword_100157C08);
  v17[v22[9]] = v18[v22[9]];
  *(void *)&v17[v22[10]] = *(void *)&v18[v22[10]];
  v17[v22[11]] = v18[v22[11]];
  swift_retain();
  return a1;
}

uint64_t sub_1000A8D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10002025C(*(id *)a2, v7);
  char v8 = *(void **)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_10001A83C(v8, v9);
  char v10 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  char v13 = *(unsigned char *)(a2 + 49);
  unsigned __int8 v14 = *(unsigned char *)(a2 + 48);
  sub_100023524(v11, v12, v14, v13);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  char v17 = *(unsigned char *)(a1 + 49);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 4sub_100102B8C(2, 18, 1, 0) = v12;
  uint64_t v18 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 49) = v13;
  sub_10002F4E8(v15, v16, v18, v17);
  char v19 = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v19;
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  uint64_t v20 = *(int *)(a3 + 40);
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v24 = *(void *)(v23 - 8);
  id v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v12) = v25(v21, 1, v23);
  int v26 = v25(v22, 1, v23);
  if (!v12)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v21, v22, v23);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v27 = sub_100032FA0(&qword_100157C00);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_7:
  id v28 = (int *)sub_100032FA0(&qword_100157C08);
  v21[v28[9]] = v22[v28[9]];
  *(void *)&v21[v28[10]] = *(void *)&v22[v28[10]];
  swift_retain();
  swift_release();
  v21[v28[11]] = v22[v28[11]];
  return a1;
}

uint64_t sub_1000A8FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  uint64_t v5 = *(int *)(a3 + 40);
  id v6 = (char *)(a1 + v5);
  char v7 = (char *)(a2 + v5);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v8 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_100032FA0(&qword_100157C00);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v11 = (int *)sub_100032FA0(&qword_100157C08);
  v6[v11[9]] = v7[v11[9]];
  *(void *)&v6[v11[10]] = *(void *)&v7[v11[10]];
  v6[v11[11]] = v7[v11[11]];
  return a1;
}

uint64_t sub_1000A9174(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void **)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_10001A83C(v8, v9);
  char v10 = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v10;
  swift_release();
  char v11 = *((unsigned char *)a2 + 48);
  char v12 = *((unsigned char *)a2 + 49);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  char v15 = *(unsigned char *)(a1 + 49);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 49) = v12;
  sub_10002F4E8(v13, v14, v16, v15);
  char v17 = *((unsigned char *)a2 + 64);
  *(void *)(a1 + 56) = a2[7];
  *(unsigned char *)(a1 + 64) = v17;
  swift_release();
  *(void *)(a1 + 72) = a2[9];
  swift_release();
  *(void *)(a1 + 8sub_100102B8C(2, 18, 1, 0) = a2[10];
  swift_release();
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 104) = a2[13];
  swift_release();
  uint64_t v18 = *(int *)(a3 + 40);
  char v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v26 = sub_100032FA0(&qword_100157C00);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  uint64_t v27 = (int *)sub_100032FA0(&qword_100157C08);
  v19[v27[9]] = v20[v27[9]];
  *(void *)&v19[v27[10]] = *(void *)&v20[v27[10]];
  swift_release();
  v19[v27[11]] = v20[v27[11]];
  return a1;
}

uint64_t sub_1000A93DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A93F0);
}

uint64_t sub_1000A93F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 80);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100032FA0(&qword_100157C08);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000A94A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A94B8);
}

uint64_t sub_1000A94B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8sub_100102B8C(2, 18, 1, 0) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100032FA0(&qword_100157C08);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000A9564()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A9580()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v1 - 8);
  uint64_t v29 = v1;
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ModeMenuView();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v25 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(v0 + 104);
  LOBYTE(aBlock) = *(unsigned char *)(v0 + 96);
  uint64_t v31 = v16;
  sub_100032FA0(&qword_100157D38);
  uint64_t result = State.wrappedValue.getter();
  if (v36)
  {
    sub_100004A98();
    uint64_t v23 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    int v24 = *(void (**)(char *, uint64_t))(v10 + 8);
    v24(v12, v9);
    sub_1000AEF28(v0, (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ModeMenuView);
    unint64_t v18 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v19 = swift_allocObject();
    sub_1000AF5C8((uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
    uint64_t v34 = sub_1000B03C0;
    uint64_t v35 = v19;
    aBlock = _NSConcreteStackBlock;
    uint64_t v31 = 1107296256;
    Swift::Int v32 = sub_1000E0DB8;
    uint64_t v33 = &unk_10014D1A0;
    uint64_t v20 = _Block_copy(&aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock = (void **)_swiftEmptyArrayStorage;
    sub_1000B0AB8(&qword_100155540, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100032FA0(&qword_100155548);
    sub_100040BE4(&qword_100155550, &qword_100155548);
    uint64_t v21 = v29;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v22 = (void *)v23;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v3, v21);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);
    return ((uint64_t (*)(char *, uint64_t))v24)(v15, v9);
  }
  return result;
}

uint64_t sub_1000A9A1C()
{
  sub_100032FA0(&qword_100157D38);
  uint64_t v0 = State.wrappedValue.setter();
  return sub_1000A9580(v0);
}

uint64_t sub_1000A9A7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v151 = a1;
  uint64_t v2 = type metadata accessor for AccessibilityTraits();
  uint64_t v148 = *(void *)(v2 - 8);
  uint64_t v149 = v2;
  __chkstk_darwin(v2);
  uint64_t v147 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v145 = *(void *)(v4 - 8);
  uint64_t v146 = v4;
  __chkstk_darwin(v4);
  char v144 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccessibilityActionKind();
  uint64_t v142 = *(void *)(v6 - 8);
  uint64_t v143 = v6;
  __chkstk_darwin(v6);
  uint64_t v141 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for ModeMenuView();
  uint64_t v132 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v133 = v8;
  uint64_t v135 = (uint64_t)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v120);
  uint64_t v10 = (uint64_t *)((char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100032FA0(&qword_100157CC0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100032FA0(&qword_100157CC8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100032FA0(&qword_100157CD0);
  __chkstk_darwin(v115);
  unint64_t v18 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_100032FA0(&qword_100157CD8);
  __chkstk_darwin(v117);
  uint64_t v116 = (uint64_t)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_100032FA0(&qword_100157CE0);
  __chkstk_darwin(v118);
  uint64_t v119 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_100032FA0(&qword_100157CE8);
  __chkstk_darwin(v121);
  uint64_t v122 = (uint64_t)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100032FA0(&qword_100157CF0);
  __chkstk_darwin(v22 - 8);
  uint64_t v124 = (uint64_t)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_100032FA0(&qword_100157CF8);
  __chkstk_darwin(v123);
  uint64_t v125 = (uint64_t)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_100032FA0(&qword_100157D00);
  __chkstk_darwin(v152);
  uint64_t v126 = (uint64_t)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_100032FA0(&qword_100157D08);
  __chkstk_darwin(v129);
  uint64_t v127 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_100032FA0(&qword_100157D10);
  uint64_t v130 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v128 = (char *)&v114 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100032FA0(&qword_100157D18);
  __chkstk_darwin(v28 - 8);
  uint64_t v134 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_100032FA0(&qword_100157D20);
  __chkstk_darwin(v137);
  uint64_t v139 = (uint64_t)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100032FA0(&qword_100157D28);
  uint64_t v138 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  int v136 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = static Alignment.leading.getter();
  uint64_t v34 = v33;
  uint64_t v153 = v1;
  char v35 = *(unsigned char *)(v1 + 24);
  uint64_t v36 = swift_retain();
  sub_10002BD88(v36, v35);
  swift_release();
  if (sub_10002AFEC())
  {
    if (qword_1001543D0 != -1) {
      swift_once();
    }
    id v37 = &qword_100160EC8;
  }
  else
  {
    if (qword_1001541E0 != -1) {
      swift_once();
    }
    id v37 = &qword_100160CC8;
  }
  uint64_t v38 = *v37;
  swift_release();
  uint64_t v39 = swift_retain();
  sub_10002BD88(v39, v35);
  swift_release();
  if (sub_10002AFEC())
  {
    if (qword_1001543C8 != -1) {
      swift_once();
    }
    id v40 = &qword_100160EC0;
  }
  else
  {
    if (qword_1001541D8 != -1) {
      swift_once();
    }
    id v40 = &qword_100160CC0;
  }
  uint64_t v41 = *v40;
  swift_release();
  *(void *)uint64_t v13 = v32;
  *((void *)v13 + 1) = v34;
  *((void *)v13 + 2) = v38;
  v13[24] = 0;
  *((void *)v13 + 4) = v41;
  v13[40] = 0;
  uint64_t v42 = sub_100032FA0(&qword_100157D30);
  sub_1000AAE28(v153, (uint64_t)&v13[*(int *)(v42 + 44)]);
  char v43 = static Edge.Set.vertical.getter();
  uint64_t v44 = swift_retain();
  sub_10002BD88(v44, v35);
  swift_release();
  if (!sub_10002AFEC())
  {
    if (qword_1001541F8 == -1) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
  if (qword_1001543E0 != -1) {
LABEL_38:
  }
    swift_once();
LABEL_19:
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  sub_100033344((uint64_t)v13, (uint64_t)v16, &qword_100157CC0);
  int64_t v53 = &v16[*(int *)(v14 + 36)];
  *int64_t v53 = v43;
  *((void *)v53 + 1) = v46;
  *((void *)v53 + 2) = v48;
  *((void *)v53 + 3) = v50;
  *((void *)v53 + 4) = v52;
  v53[40] = 0;
  sub_100032F44((uint64_t)v13, &qword_100157CC0);
  char v54 = static Edge.Set.horizontal.getter();
  char v55 = *(unsigned char *)(v153 + 24);
  uint64_t v56 = swift_retain();
  sub_10002BD88(v56, v55);
  swift_release();
  if (!sub_10002AFEC())
  {
    if (qword_1001541F0 == -1) {
      goto LABEL_23;
    }
    goto LABEL_40;
  }
  if (qword_1001543D8 != -1) {
LABEL_40:
  }
    swift_once();
LABEL_23:
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  uint64_t v64 = v63;
  sub_100033344((uint64_t)v16, (uint64_t)v18, &qword_100157CC8);
  uint64_t v65 = &v18[*(int *)(v115 + 36)];
  *uint64_t v65 = v54;
  *((void *)v65 + 1) = v58;
  *((void *)v65 + 2) = v60;
  *((void *)v65 + 3) = v62;
  *((void *)v65 + 4) = v64;
  v65[40] = 0;
  sub_100032F44((uint64_t)v16, &qword_100157CC8);
  if (qword_100154550 != -1) {
    swift_once();
  }
  uint64_t v66 = qword_100161158;
  swift_retain();
  uint64_t v67 = static Color.black.getter();
  char v68 = static Edge.Set.all.getter();
  uint64_t v69 = static Alignment.center.getter();
  uint64_t v71 = v70;
  uint64_t v72 = v116;
  sub_100033344((uint64_t)v18, v116, &qword_100157CD0);
  uint64_t v73 = v72 + *(int *)(v117 + 36);
  *(void *)uint64_t v73 = v66;
  *(void *)(v73 + 8) = v67;
  *(unsigned char *)(v73 + 16) = v68;
  *(void *)(v73 + 24) = v69;
  *(void *)(v73 + 32) = v71;
  sub_100032F44((uint64_t)v18, &qword_100157CD0);
  LOBYTE(v66) = *(unsigned char *)(v153 + 24);
  uint64_t v74 = swift_retain();
  sub_10002BD88(v74, v66);
  swift_release();
  if (sub_10002AFEC())
  {
    uint64_t v75 = 0x403B800000000000;
    uint64_t v76 = (uint64_t)v119;
  }
  else
  {
    uint64_t v76 = (uint64_t)v119;
    if (qword_1001541E8 != -1) {
      swift_once();
    }
    uint64_t v75 = qword_100160CD0;
  }
  swift_release();
  uint64_t v77 = (char *)v10 + *(int *)(v120 + 20);
  uint64_t v78 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v79 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v79 - 8) + 104))(v77, v78, v79);
  *uint64_t v10 = v75;
  v10[1] = v75;
  uint64_t v80 = v76 + *(int *)(v118 + 36);
  sub_1000AEF28((uint64_t)v10, v80, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v80 + *(int *)(sub_100032FA0(&qword_100156D98) + 36)) = 256;
  sub_100033344(v72, v76, &qword_100157CD8);
  sub_100093698((uint64_t)v10);
  sub_100032F44(v72, &qword_100157CD8);
  uint64_t v81 = static Color.black.getter();
  LOBYTE(v8sub_100102B8C(2, 18, 1, 0) = *(unsigned char *)(v153 + 24);
  uint64_t v82 = swift_retain();
  sub_10002BD88(v82, v80);
  swift_release();
  if (sub_10002AFEC())
  {
    uint64_t v83 = 0x403B800000000000;
  }
  else
  {
    if (qword_1001541E8 != -1) {
      swift_once();
    }
    uint64_t v83 = qword_100160CD0;
  }
  swift_release();
  uint64_t v84 = v122;
  sub_100033344(v76, v122, &qword_100157CE0);
  uint64_t v85 = v84 + *(int *)(v121 + 36);
  *(void *)uint64_t v85 = v81;
  *(void *)(v85 + 8) = v83;
  *(_OWORD *)(v85 + 16) = xmmword_100112A00;
  sub_100032F44(v76, &qword_100157CE0);
  uint64_t v86 = v124;
  sub_100033344(v84, v124, &qword_100157CE8);
  sub_100032F44(v84, &qword_100157CE8);
  uint64_t v87 = v153;
  unint64_t v88 = *(void *)(v153 + 104);
  LOBYTE(v154) = *(unsigned char *)(v153 + 96);
  unint64_t v155 = v88;
  sub_100032FA0(&qword_100157D38);
  State.wrappedValue.getter();
  char v89 = v156;
  uint64_t v90 = v125;
  sub_100033344(v86, v125, &qword_100157CF0);
  *(unsigned char *)(v90 + *(int *)(v123 + 36)) = v89;
  sub_100032F44(v86, &qword_100157CF0);
  uint64_t v91 = v135;
  sub_1000AEF28(v87, v135, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  unint64_t v92 = (*(unsigned __int8 *)(v132 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
  uint64_t v93 = swift_allocObject();
  sub_1000AF5C8(v91, v93 + v92, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  uint64_t v94 = v126;
  sub_100033344(v90, v126, &qword_100157CF8);
  uint64_t v95 = (uint64_t (**)())(v94 + *(int *)(v152 + 36));
  uint64_t *v95 = sub_1000AEF94;
  v95[1] = (uint64_t (*)())v93;
  v95[2] = 0;
  v95[3] = 0;
  sub_100032F44(v90, &qword_100157CF8);
  unint64_t v96 = v141;
  static AccessibilityActionKind.escape.getter();
  uint64_t v97 = v153;
  sub_1000AEF28(v153, v91, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  uint64_t v98 = swift_allocObject();
  sub_1000AF5C8(v91, v98 + v92, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  sub_1000AF094(&qword_100157D40, &qword_100157D00, (void (*)(void))sub_1000AEFC8);
  uint64_t v99 = (uint64_t)v127;
  View.accessibilityAction(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v142 + 8))(v96, v143);
  sub_100032F44(v94, &qword_100157D00);
  unint64_t v100 = v144;
  static AccessibilityChildBehavior.contain.getter();
  unint64_t v101 = sub_1000AF34C();
  uint64_t v102 = v128;
  uint64_t v103 = v129;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v145 + 8))(v100, v146);
  sub_100032F44(v99, &qword_100157D08);
  Swift::Int v104 = v147;
  static AccessibilityTraits.isModal.getter();
  uint64_t v154 = v103;
  unint64_t v155 = v101;
  char v105 = 1;
  swift_getOpaqueTypeConformance2();
  uint64_t v106 = (uint64_t)v134;
  uint64_t v107 = v131;
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v148 + 8))(v104, v149);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v102, v107);
  LOBYTE(v104) = *(unsigned char *)(v97 + 64);
  uint64_t v108 = swift_retain();
  uint64_t v109 = sub_100033AA8(v108, (char)v104);
  swift_release();
  swift_getKeyPath();
  uint64_t v154 = v109;
  sub_1000B0AB8((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v110 = *(unsigned __int8 *)(v109 + 48);
  swift_release();
  switch(v110)
  {
    case 2:
      break;
    default:
      char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  swift_bridgeObjectRelease();
  uint64_t v111 = v139;
  sub_100033344(v106, v139, &qword_100157D18);
  *(unsigned char *)(v111 + *(int *)(v137 + 36)) = v105 & 1;
  sub_100032F44(v106, &qword_100157D18);
  sub_100032FA0(&qword_100157C08);
  AccessibilityFocusState.projectedValue.getter();
  sub_1000AF42C();
  uint64_t v112 = v136;
  View.accessibilityFocused(_:)();
  swift_release();
  swift_release();
  sub_100032F44(v111, &qword_100157D20);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v138 + 32))(v151, v112, v140);
}

uint64_t sub_1000AAE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v113 = a2;
  uint64_t v100 = sub_100032FA0(&qword_100157DC8);
  __chkstk_darwin(v100);
  uint64_t v103 = (uint64_t *)((char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v101 = sub_100032FA0(&qword_100157DD0);
  __chkstk_darwin(v101);
  uint64_t v105 = (uint64_t)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v104 = (uint64_t)&v96 - v6;
  uint64_t v7 = sub_100032FA0(&qword_100157DD8);
  __chkstk_darwin(v7 - 8);
  uint64_t v98 = (uint64_t)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100032FA0(&qword_100157DE0);
  __chkstk_darwin(v97);
  uint64_t v102 = (uint64_t)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v99 = (uint64_t)&v96 - v11;
  uint64_t v12 = sub_100032FA0(&qword_100157DE8);
  __chkstk_darwin(v12 - 8);
  uint64_t v112 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v114 = (char *)&v96 - v15;
  uint64_t v16 = sub_100032FA0(&qword_100157DF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v111 = (uint64_t)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v118 = (uint64_t)&v96 - v19;
  uint64_t v20 = sub_100032FA0(&qword_100157DF8);
  uint64_t v107 = v20;
  __chkstk_darwin(v20);
  uint64_t v106 = (uint64_t *)((char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v96 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v96 - v26;
  uint64_t v28 = sub_100032FA0(&qword_100157E00);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v108 = v28;
  uint64_t v109 = v29;
  __chkstk_darwin(v28);
  uint64_t v110 = (uint64_t)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v115 = (uint64_t)&v96 - v32;
  __chkstk_darwin(v33);
  uint64_t v35 = (uint64_t)&v96 - v34;
  __chkstk_darwin(v36);
  uint64_t v116 = (uint64_t)&v96 - v37;
  __chkstk_darwin(v38);
  id v40 = (char *)&v96 - v39;
  __chkstk_darwin(v41);
  char v43 = (char *)&v96 - v42;
  *(void *)uint64_t v27 = 0;
  uint64_t v44 = 1;
  v27[8] = 1;
  uint64_t v45 = (uint64_t)&v27[*(int *)(v20 + 36)];
  uint64_t v46 = a1;
  sub_1000AB9F4(a1, v45);
  char v123 = 1;
  State.init(wrappedValue:)();
  char v47 = v119;
  uint64_t v48 = v120;
  sub_100033344((uint64_t)v27, (uint64_t)v40, &qword_100157DF8);
  uint64_t v49 = v108;
  uint64_t v50 = &v40[*(int *)(v108 + 36)];
  *uint64_t v50 = v47;
  *((void *)v50 + 1) = v48;
  *((_OWORD *)v50 + 1) = xmmword_100112A10;
  uint64_t v51 = (uint64_t)v27;
  uint64_t v52 = v46;
  uint64_t v53 = v49;
  uint64_t v54 = v107;
  sub_100032F44(v51, &qword_100157DF8);
  uint64_t v117 = v43;
  sub_10002D9D0((uint64_t)v40, (uint64_t)v43, &qword_100157E00);
  *(void *)uint64_t v24 = 0;
  v24[8] = 1;
  sub_1000ABF20(v52, (uint64_t)&v24[*(int *)(v54 + 36)]);
  char v123 = 1;
  State.init(wrappedValue:)();
  LOBYTE(v48) = v119;
  uint64_t v55 = v120;
  sub_100033344((uint64_t)v24, v35, &qword_100157DF8);
  uint64_t v56 = v35 + *(int *)(v53 + 36);
  *(unsigned char *)uint64_t v56 = v48;
  *(void *)(v56 + 8) = v55;
  *(_OWORD *)(v56 + 16) = xmmword_100112A20;
  sub_100032F44((uint64_t)v24, &qword_100157DF8);
  sub_10002D9D0(v35, v116, &qword_100157E00);
  uint64_t v121 = &type metadata for NotesFeatureFlags;
  unint64_t v122 = sub_10003BF2C();
  LOBYTE(v35) = isFeatureEnabled(_:)();
  sub_10000DB7C((uint64_t)&v119);
  if (v35)
  {
    uint64_t v57 = (uint64_t)v106;
    *uint64_t v106 = 0;
    *(unsigned char *)(v57 + 8) = 1;
    sub_1000AC618(v52, v57 + *(int *)(v54 + 36));
    char v123 = 1;
    State.init(wrappedValue:)();
    char v58 = v119;
    uint64_t v59 = v120;
    uint64_t v60 = v115;
    sub_100033344(v57, v115, &qword_100157DF8);
    uint64_t v61 = v60 + *(int *)(v53 + 36);
    *(unsigned char *)uint64_t v61 = v58;
    *(void *)(v61 + 8) = v59;
    *(_OWORD *)(v61 + 16) = xmmword_100112A30;
    sub_100032F44(v57, &qword_100157DF8);
    sub_10002D9D0(v60, v118, &qword_100157E00);
    uint64_t v44 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56))(v118, v44, 1, v53);
  char v62 = *(unsigned char *)(v52 + 64);
  uint64_t v63 = swift_retain();
  uint64_t v64 = sub_100033AA8(v63, v62);
  swift_release();
  swift_getKeyPath();
  uint64_t v119 = v64;
  sub_1000B0AB8((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v65 = *(unsigned __int8 *)(v64 + 48);
  swift_release();
  uint64_t v66 = (uint64_t)v112;
  uint64_t v67 = (uint64_t)v114;
  switch(v65)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    default:
      char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v68)
      {
LABEL_6:
        uint64_t v69 = sub_100032FA0(&qword_100157E10);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v67, 1, 1, v69);
      }
      else
      {
        uint64_t v70 = v98;
        sub_1000AD300(v98);
        char v123 = 1;
        State.init(wrappedValue:)();
        uint64_t v71 = v66;
        char v72 = v119;
        uint64_t v73 = v120;
        uint64_t v74 = v102;
        sub_100033344(v70, v102, &qword_100157DD8);
        uint64_t v75 = v74 + *(int *)(v97 + 36);
        *(unsigned char *)uint64_t v75 = v72;
        *(void *)(v75 + 8) = v73;
        *(_OWORD *)(v75 + 16) = xmmword_100112A30;
        sub_100032F44(v70, &qword_100157DD8);
        uint64_t v76 = v99;
        sub_10002D9D0(v74, v99, &qword_100157DE0);
        uint64_t v77 = (uint64_t)v103;
        *uint64_t v103 = 0;
        *(unsigned char *)(v77 + 8) = 1;
        sub_1000AD9BC(v52, v77 + *(int *)(v100 + 36));
        char v123 = 1;
        State.init(wrappedValue:)();
        char v78 = v119;
        uint64_t v79 = v120;
        uint64_t v80 = v105;
        sub_100033344(v77, v105, &qword_100157DC8);
        uint64_t v81 = v80 + *(int *)(v101 + 36);
        *(unsigned char *)uint64_t v81 = v78;
        *(void *)(v81 + 8) = v79;
        uint64_t v66 = v71;
        *(_OWORD *)(v81 + 16) = xmmword_100112A40;
        sub_100032F44(v77, &qword_100157DC8);
        uint64_t v82 = v104;
        sub_10002D9D0(v80, v104, &qword_100157DD0);
        sub_100033344(v76, v74, &qword_100157DE0);
        sub_100033344(v82, v80, &qword_100157DD0);
        sub_100033344(v74, v71, &qword_100157DE0);
        uint64_t v83 = sub_100032FA0(&qword_100157E08);
        sub_100033344(v80, v71 + *(int *)(v83 + 48), &qword_100157DD0);
        uint64_t v84 = v82;
        uint64_t v67 = (uint64_t)v114;
        sub_100032F44(v84, &qword_100157DD0);
        sub_100032F44(v76, &qword_100157DE0);
        sub_100032F44(v80, &qword_100157DD0);
        sub_100032F44(v74, &qword_100157DE0);
        uint64_t v85 = sub_100032FA0(&qword_100157E10);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v71, 0, 1, v85);
        sub_10002D9D0(v71, v67, &qword_100157DE8);
      }
      uint64_t v86 = v115;
      sub_100033344((uint64_t)v117, v115, &qword_100157E00);
      uint64_t v87 = v116;
      uint64_t v88 = v110;
      sub_100033344(v116, v110, &qword_100157E00);
      uint64_t v89 = v118;
      uint64_t v90 = v111;
      sub_100033344(v118, v111, &qword_100157DF0);
      sub_100033344(v67, v66, &qword_100157DE8);
      uint64_t v91 = v113;
      sub_100033344(v86, v113, &qword_100157E00);
      uint64_t v92 = v67;
      uint64_t v93 = v66;
      uint64_t v94 = (int *)sub_100032FA0(&qword_100157E18);
      sub_100033344(v88, v91 + v94[12], &qword_100157E00);
      sub_100033344(v90, v91 + v94[16], &qword_100157DF0);
      sub_100033344(v93, v91 + v94[20], &qword_100157DE8);
      sub_100032F44(v92, &qword_100157DE8);
      sub_100032F44(v89, &qword_100157DF0);
      sub_100032F44(v87, &qword_100157E00);
      sub_100032F44((uint64_t)v117, &qword_100157E00);
      sub_100032F44(v93, &qword_100157DE8);
      sub_100032F44(v90, &qword_100157DF0);
      sub_100032F44(v88, &qword_100157E00);
      return sub_100032F44(v86, &qword_100157E00);
  }
}

uint64_t sub_1000AB9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for ModeMenuView();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v23 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for ModeMenuOption();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringResource.init(stringLiteral:)();
  if (qword_1001543F8 != -1) {
    swift_once();
  }
  char v11 = *(unsigned char *)(a1 + 64);
  uint64_t v22 = qword_100160F10;
  swift_retain();
  uint64_t v12 = swift_retain();
  uint64_t v13 = sub_100033AA8(v12, v11);
  swift_release();
  swift_getKeyPath();
  uint64_t v27 = v13;
  sub_1000B0AB8((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v14 = *(unsigned __int8 *)(v13 + 48);
  swift_release();
  char v15 = 1;
  switch(v14)
  {
    case 1:
    case 2:
    case 3:
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  sub_1000AEF28(a1, (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  unint64_t v16 = (*(unsigned __int8 *)(v23 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1000AF5C8((uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v7, v25);
  *(void *)&v10[v8[5]] = v22;
  v10[v8[6]] = v15 & 1;
  v10[v8[7]] = 1;
  v10[v8[8]] = 1;
  v10[v8[9]] = 0;
  uint64_t v18 = (uint64_t (**)())&v10[v8[10]];
  *uint64_t v18 = sub_1000B0B48;
  v18[1] = (uint64_t (*)())v17;
  uint64_t v19 = &v10[v8[11]];
  type metadata accessor for CalculatorLayout();
  sub_1000B0AB8((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  *(void *)uint64_t v19 = Environment.init<A>(_:)();
  v19[8] = v20 & 1;
  return sub_1000AF5C8((uint64_t)v10, v26, (uint64_t (*)(void))type metadata accessor for ModeMenuOption);
}

uint64_t sub_1000ABE70(uint64_t a1)
{
  static Animation.easeOut(duration:)();
  withAnimation<A>(_:_:)();
  swift_release();
  LOBYTE(a1) = *(unsigned char *)(a1 + 64);
  uint64_t v2 = swift_retain();
  sub_100033AA8(v2, a1);
  swift_release();
  sub_100055FF0(0);
  return swift_release();
}

uint64_t sub_1000ABF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for ModeMenuView();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v27 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for ModeMenuOption();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringResource.init(stringLiteral:)();
  if (qword_100154400 != -1) {
    swift_once();
  }
  char v11 = *(unsigned char *)(a1 + 64);
  uint64_t v26 = qword_100160F18;
  swift_retain();
  uint64_t v12 = swift_retain();
  uint64_t v13 = sub_100033AA8(v12, v11);
  swift_release();
  swift_getKeyPath();
  uint64_t v31 = (unsigned char *)v13;
  sub_1000B0AB8((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v14 = *(unsigned __int8 *)(v13 + 48);
  swift_release();
  char v15 = 1;
  switch(v14)
  {
    case 1:
      break;
    default:
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  swift_bridgeObjectRelease();
  id v16 = *(id *)a1;
  char v17 = *(unsigned char *)(a1 + 8);
  sub_10002025C(*(id *)a1, v17);
  uint64_t v18 = sub_1000D1E04(v16, v17);
  sub_10001A83C(v16, v17);
  swift_getKeyPath();
  uint64_t v31 = v18;
  sub_1000B0AB8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v19 = v18[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed];

  sub_1000AEF28(a1, (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  unint64_t v20 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v21 = swift_allocObject();
  sub_1000AF5C8((uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v10, v7, v29);
  *(void *)&v10[v8[5]] = v26;
  v10[v8[6]] = v15 & 1;
  v10[v8[7]] = v19;
  v10[v8[8]] = 0;
  v10[v8[9]] = 0;
  uint64_t v22 = (uint64_t (**)())&v10[v8[10]];
  *uint64_t v22 = sub_1000B0B2C;
  v22[1] = (uint64_t (*)())v21;
  uint64_t v23 = &v10[v8[11]];
  type metadata accessor for CalculatorLayout();
  sub_1000B0AB8((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  *(void *)uint64_t v23 = Environment.init<A>(_:)();
  v23[8] = v24 & 1;
  return sub_1000AF5C8((uint64_t)v10, v30, (uint64_t (*)(void))type metadata accessor for ModeMenuOption);
}

uint64_t sub_1000AC450(uint64_t a1)
{
  id v2 = *(id *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  sub_10002025C(*(id *)a1, v3);
  uint64_t v4 = (unsigned __int8 *)sub_1000D1E04(v2, v3);
  sub_10001A83C(v2, v3);
  swift_getKeyPath();
  sub_1000B0AB8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v2) = v4[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed];

  if (v2 == 1)
  {
    uint64_t v5 = static Animation.easeOut(duration:)();
    __chkstk_darwin(v5);
    withAnimation<A>(_:_:)();
    swift_release();
    char v6 = *(unsigned char *)(a1 + 64);
    uint64_t v7 = swift_retain();
    sub_100033AA8(v7, v6);
    swift_release();
    sub_100055FF0(1);
    return swift_release();
  }
  else
  {
    sub_100032FA0(&qword_100157D38);
    State.wrappedValue.setter();
    return sub_1000A9580();
  }
}

uint64_t sub_1000AC618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for ModeMenuView();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v27 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for ModeMenuOption();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringResource.init(stringLiteral:)();
  if (qword_100154408 != -1) {
    swift_once();
  }
  char v11 = *(unsigned char *)(a1 + 64);
  uint64_t v26 = qword_100160F20;
  swift_retain();
  uint64_t v12 = swift_retain();
  uint64_t v13 = sub_100033AA8(v12, v11);
  swift_release();
  swift_getKeyPath();
  uint64_t v31 = (unsigned char *)v13;
  sub_1000B0AB8((unint64_t *)&qword_100154818, (void (*)(uint64_t))type metadata accessor for CalculatorViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v14 = *(unsigned __int8 *)(v13 + 48);
  swift_release();
  char v15 = 1;
  switch(v14)
  {
    case 2:
      break;
    default:
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      break;
  }
  swift_bridgeObjectRelease();
  id v16 = *(id *)a1;
  char v17 = *(unsigned char *)(a1 + 8);
  sub_10002025C(*(id *)a1, v17);
  uint64_t v18 = sub_1000D1E04(v16, v17);
  sub_10001A83C(v16, v17);
  swift_getKeyPath();
  uint64_t v31 = v18;
  sub_1000B0AB8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v19 = v18[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed];

  sub_1000AEF28(a1, (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  unint64_t v20 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v21 = swift_allocObject();
  sub_1000AF5C8((uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v10, v7, v29);
  *(void *)&v10[v8[5]] = v26;
  v10[v8[6]] = v15 & 1;
  v10[v8[7]] = v19;
  v10[v8[8]] = 0;
  v10[v8[9]] = 0;
  uint64_t v22 = (uint64_t (**)())&v10[v8[10]];
  *uint64_t v22 = sub_1000AF5B0;
  v22[1] = (uint64_t (*)())v21;
  uint64_t v23 = &v10[v8[11]];
  type metadata accessor for CalculatorLayout();
  sub_1000B0AB8((unint64_t *)&qword_100154820, (void (*)(uint64_t))type metadata accessor for CalculatorLayout);
  *(void *)uint64_t v23 = Environment.init<A>(_:)();
  v23[8] = v24 & 1;
  return sub_1000AF5C8((uint64_t)v10, v30, (uint64_t (*)(void))type metadata accessor for ModeMenuOption);
}

uint64_t sub_1000ACB50()
{
  uint64_t v0 = type metadata accessor for ModeMenuView();
  __chkstk_darwin(v0 - 8);
  if (qword_100154790 != -1) {
    swift_once();
  }
  SBSGetScreenLockStatus();
  return sub_1000ACCF4();
}

uint64_t sub_1000ACCF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100032FA0(&qword_1001550C0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v36[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *v0;
  char v6 = *((unsigned char *)v1 + 8);
  sub_10002025C(v5, v6);
  uint64_t v7 = (unsigned __int8 *)sub_1000D1E04(v5, v6);
  sub_10001A83C(v5, v6);
  swift_getKeyPath();
  uint64_t v38 = v7;
  sub_1000B0AB8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v5) = v7[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed];

  if (v5 == 1)
  {
    if (sub_1000A113C())
    {
      id v8 = objc_allocWithZone((Class)LSApplicationRecord);
      id v9 = sub_100006D80(0xD000000000000015, 0x80000001001094B0, 0);
      uint64_t v33 = v9;
      if (!v9) {
        goto LABEL_4;
      }
      if (qword_1001541B0 != -1) {
        swift_once();
      }
      unsigned int v34 = [(id)qword_100155018 requiresPreflightForApplicationRecord:v33];

      if (!v34)
      {
LABEL_4:
        char v10 = *((unsigned char *)v1 + 64);
        uint64_t v11 = swift_retain();
        sub_100033AA8(v11, v10);
        swift_release();
        sub_100055FF0(2);
        swift_release();
        goto LABEL_24;
      }
      uint64_t v35 = v1[13];
      LOBYTE(v38) = *((unsigned char *)v1 + 96);
      uint64_t v39 = v35;
      char v30 = 2;
    }
    else
    {
      if (qword_1001543E8 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_100021598(v2, (uint64_t)qword_100160EE0);
      sub_100033344(v18, (uint64_t)v4, &qword_1001550C0);
      uint64_t v19 = type metadata accessor for URL();
      int v20 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v4, 1, v19);
      sub_100032F44((uint64_t)v4, &qword_1001550C0);
      if (v20 == 1)
      {
        if (qword_100154750 != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_100021598(v21, (uint64_t)qword_100161340);
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          char v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v24 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Invalid URL link attempting to prompt Notes app installation.", v24, 2u);
          swift_slowDealloc();
        }

        goto LABEL_24;
      }
      if (qword_100154750 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_100021598(v25, (uint64_t)qword_100161340);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Notes app not installed. Prompting installation…", v28, 2u);
        swift_slowDealloc();
      }

      uint64_t v29 = v1[13];
      LOBYTE(v38) = *((unsigned char *)v1 + 96);
      uint64_t v39 = v29;
      char v30 = 1;
    }
    char v37 = v30;
    sub_100032FA0(&qword_100157D38);
    State.wrappedValue.setter();
    sub_1000A9580();
LABEL_24:
    uint64_t v31 = v1[13];
    LOBYTE(v38) = *((unsigned char *)v1 + 96);
    uint64_t v39 = v31;
    sub_100032FA0(&qword_100157D38);
    uint64_t result = State.wrappedValue.getter();
    if (!v37)
    {
      uint64_t v32 = static Animation.easeOut(duration:)();
      __chkstk_darwin(v32);
      *(void *)&v36[-16] = v1;
      withAnimation<A>(_:_:)();
      return swift_release();
    }
    return result;
  }
  if (qword_100154750 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100021598(v12, (uint64_t)qword_100161340);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    char v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Math Notes disabled…", v15, 2u);
    swift_slowDealloc();
  }

  id v16 = v1[13];
  LOBYTE(v38) = *((unsigned char *)v1 + 96);
  uint64_t v39 = v16;
  char v37 = 5;
  sub_100032FA0(&qword_100157D38);
  State.wrappedValue.setter();
  return sub_1000A9580();
}

uint64_t sub_1000AD300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v2 = type metadata accessor for Divider();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100032FA0(&qword_100157EE0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  id v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100032FA0(&qword_100157EE8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100032FA0(&qword_100157EF0);
  __chkstk_darwin(v14);
  id v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100032FA0(&qword_100157EF8);
  __chkstk_darwin(v62);
  uint64_t v65 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100032FA0(&qword_100157DD8);
  __chkstk_darwin(v63);
  uint64_t v64 = (uint64_t)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Divider.init()();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
  uint64_t v19 = &v9[*(int *)(v7 + 44)];
  long long v20 = v68;
  *(_OWORD *)uint64_t v19 = v67;
  *((_OWORD *)v19 + 1) = v20;
  *((_OWORD *)v19 + 2) = v69;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v21 = static Color.black.getter();
  LOBYTE(v7) = static Edge.Set.all.getter();
  sub_100033344((uint64_t)v9, (uint64_t)v13, &qword_100157EE0);
  uint64_t v22 = &v13[*(int *)(v11 + 44)];
  *(void *)uint64_t v22 = v21;
  v22[8] = v7;
  sub_100032F44((uint64_t)v9, &qword_100157EE0);
  char v23 = static Edge.Set.horizontal.getter();
  char v24 = *(unsigned char *)(v1 + 24);
  uint64_t v25 = swift_retain();
  sub_10002BD88(v25, v24);
  swift_release();
  if (!sub_10002AFEC() && qword_1001541E8 != -1) {
    swift_once();
  }
  uint64_t v26 = (uint64_t)v65;
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  sub_100033344((uint64_t)v13, (uint64_t)v16, &qword_100157EE8);
  uint64_t v35 = &v16[*(int *)(v14 + 36)];
  *uint64_t v35 = v23;
  *((void *)v35 + 1) = v28;
  *((void *)v35 + 2) = v30;
  *((void *)v35 + 3) = v32;
  *((void *)v35 + 4) = v34;
  v35[40] = 0;
  sub_100032F44((uint64_t)v13, &qword_100157EE8);
  char v36 = static Edge.Set.top.getter();
  uint64_t v37 = swift_retain();
  sub_10002BD88(v37, v24);
  swift_release();
  if (!sub_10002AFEC())
  {
    if (qword_1001541D8 == -1) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  if (qword_1001543C8 != -1) {
LABEL_17:
  }
    swift_once();
LABEL_8:
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_100033344((uint64_t)v16, v26, &qword_100157EF0);
  uint64_t v46 = v26 + *(int *)(v62 + 36);
  *(unsigned char *)uint64_t v46 = v36;
  *(void *)(v46 + 8) = v39;
  *(void *)(v46 + 16) = v41;
  *(void *)(v46 + 24) = v43;
  *(void *)(v46 + 32) = v45;
  *(unsigned char *)(v46 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  sub_100032F44((uint64_t)v16, &qword_100157EF0);
  char v47 = static Edge.Set.bottom.getter();
  uint64_t v48 = swift_retain();
  sub_10002BD88(v48, v24);
  swift_release();
  if (!sub_10002AFEC())
  {
    if (qword_1001541F8 == -1) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
  if (qword_1001543E0 != -1) {
LABEL_19:
  }
    swift_once();
LABEL_12:
  swift_release();
  uint64_t v49 = swift_retain();
  sub_10002BD88(v49, v24);
  swift_release();
  if (sub_10002AFEC())
  {
    if (qword_1001543C8 == -1) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  if (qword_1001541D8 != -1) {
LABEL_21:
  }
    swift_once();
LABEL_16:
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v58 = v64;
  sub_100033344(v26, v64, &qword_100157EF8);
  uint64_t v59 = v58 + *(int *)(v63 + 36);
  *(unsigned char *)uint64_t v59 = v47;
  *(void *)(v59 + 8) = v51;
  *(void *)(v59 + 16) = v53;
  *(void *)(v59 + 24) = v55;
  *(void *)(v59 + 32) = v57;
  *(unsigned char *)(v59 + 4sub_100102B8C(2, 18, 1, 0) = 0;
  sub_100032F44(v26, &qword_100157EF8);
  return sub_10002D9D0(v58, v66, &qword_100157DD8);
}

uint64_t sub_1000AD9BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v137 = a2;
  uint64_t v3 = sub_100032FA0(&qword_100157E20);
  __chkstk_darwin(v3 - 8);
  uint64_t v138 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v135 = (char *)&v108 - v6;
  __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v108 - v8;
  uint64_t v9 = type metadata accessor for AccessibilityTraits();
  uint64_t v132 = *(void *)(v9 - 8);
  uint64_t v133 = v9;
  __chkstk_darwin(v9);
  uint64_t v131 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for ControlSize();
  uint64_t v127 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v125 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for TintPlacement();
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v117 = (char *)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = v12;
  __chkstk_darwin(v13);
  uint64_t v118 = (char *)&v108 - v14;
  uint64_t v15 = type metadata accessor for ModeMenuView();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_100032FA0(&qword_100157E28);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v108 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100032FA0(&qword_100157E30);
  __chkstk_darwin(v109);
  uint64_t v113 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_100032FA0(&qword_100157E38);
  __chkstk_darwin(v112);
  uint64_t v116 = (uint64_t)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_100032FA0(&qword_100157E40);
  __chkstk_darwin(v119);
  uint64_t v114 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_100032FA0(&qword_100157E48);
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v120 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_100032FA0(&qword_100157E50);
  __chkstk_darwin(v130);
  uint64_t v126 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v128 = (char *)&v108 - v26;
  __chkstk_darwin(v27);
  uint64_t v140 = (uint64_t)&v108 - v28;
  __chkstk_darwin(v29);
  uint64_t v139 = (uint64_t)&v108 - v30;
  sub_1000AEF28(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  type metadata accessor for MainActor();
  uint64_t v31 = static MainActor.shared.getter();
  unint64_t v32 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v31;
  *(void *)(v33 + 24) = &protocol witness table for MainActor;
  sub_1000AF5C8((uint64_t)v18, v33 + v32, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  uint64_t v134 = a1;
  sub_1000AEF28(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  uint64_t v34 = static MainActor.shared.getter();
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v34;
  *(void *)(v35 + 24) = &protocol witness table for MainActor;
  sub_1000AF5C8((uint64_t)v18, v35 + v32, (uint64_t (*)(void))type metadata accessor for ModeMenuView);
  char v36 = v108;
  Binding.init(get:set:)();
  Toggle.init(isOn:label:)();
  if (qword_100154538 != -1) {
    swift_once();
  }
  uint64_t v37 = qword_100161140;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v39 = v110;
  uint64_t v40 = (uint64_t)v113;
  uint64_t v41 = v111;
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v113, v36, v111);
  uint64_t v42 = (uint64_t *)(v40 + *(int *)(v109 + 36));
  *uint64_t v42 = KeyPath;
  v42[1] = v37;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v39 + 8);
  swift_retain();
  v43(v36, v41);
  uint64_t v44 = static Color.white.getter();
  uint64_t v45 = v118;
  static TintPlacement.switchThumb.getter();
  uint64_t v46 = swift_getKeyPath();
  uint64_t v141 = (unsigned __int8 *)v44;
  uint64_t v47 = v121;
  uint64_t v48 = v117;
  uint64_t v49 = v122;
  (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v117, v45, v122);
  unint64_t v50 = (*(unsigned __int8 *)(v47 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v51 = swift_allocObject();
  sub_10002D9D0((uint64_t)&v141, v51 + 16, &qword_100157E58);
  (*(void (**)(unint64_t, char *, uint64_t))(v47 + 32))(v51 + v50, v48, v49);
  uint64_t v52 = v116;
  sub_100033344(v40, v116, &qword_100157E30);
  uint64_t v53 = (uint64_t *)(v52 + *(int *)(v112 + 36));
  *uint64_t v53 = v46;
  v53[1] = (uint64_t)sub_1000B0790;
  v53[2] = v51;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v49);
  sub_100032F44(v40, &qword_100157E30);
  uint64_t v54 = v127;
  uint64_t v55 = v125;
  uint64_t v56 = v129;
  (*(void (**)(char *, void, uint64_t))(v127 + 104))(v125, enum case for ControlSize.mini(_:), v129);
  uint64_t v57 = swift_getKeyPath();
  uint64_t v58 = v119;
  uint64_t v59 = (uint64_t)v114;
  uint64_t v60 = (uint64_t *)&v114[*(int *)(v119 + 36)];
  uint64_t v61 = sub_100032FA0(&qword_100157E60);
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))((char *)v60 + *(int *)(v61 + 28), v55, v56);
  *uint64_t v60 = v57;
  sub_100033344(v52, v59, &qword_100157E38);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
  sub_100032F44(v52, &qword_100157E38);
  unint64_t v62 = sub_1000B080C();
  uint64_t v63 = v120;
  View.labelsHidden()();
  sub_100032F44(v59, &qword_100157E40);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v64 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v66 = v65;
  LOBYTE(v59) = v67 & 1;
  uint64_t v141 = (unsigned __int8 *)v58;
  unint64_t v142 = v62;
  swift_getOpaqueTypeConformance2();
  uint64_t v68 = (uint64_t)v126;
  uint64_t v69 = v124;
  View.accessibilityLabel(_:)();
  sub_1000356E0(v64, v66, v59);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v123 + 8))(v63, v69);
  sub_100032FA0(&qword_100155760);
  uint64_t v70 = v132;
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_100110A40;
  static AccessibilityTraits.isToggle.getter();
  static AccessibilityTraits.isButton.getter();
  uint64_t v141 = (unsigned __int8 *)v71;
  sub_1000B0AB8(&qword_100155740, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_100032FA0(&qword_100155748);
  sub_100040BE4(&qword_100155750, &qword_100155748);
  char v72 = v131;
  uint64_t v73 = v133;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v74 = (uint64_t)v128;
  ModifiedContent<>.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v72, v73);
  sub_100032F44(v68, &qword_100157E50);
  uint64_t v75 = v140;
  ModifiedContent<>.accessibilityIdentifier(_:)();
  sub_100032F44(v74, &qword_100157E50);
  sub_10002D9D0(v75, v139, &qword_100157E50);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v76 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v78 = v77;
  char v80 = v79;
  uint64_t v81 = v134;
  LOBYTE(v6sub_100102B8C(2, 18, 1, 0) = *(unsigned char *)(v134 + 24);
  uint64_t v82 = swift_retain();
  sub_10002BD88(v82, (char)v60);
  swift_release();
  if (!sub_10002AFEC())
  {
    if (qword_1001546F8 == -1) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  if (qword_100154708 != -1) {
LABEL_11:
  }
    swift_once();
LABEL_7:
  swift_retain();
  swift_release();
  uint64_t v83 = Text.font(_:)();
  uint64_t v85 = v84;
  char v87 = v86;
  swift_release();
  sub_1000356E0(v76, v78, v80 & 1);
  swift_bridgeObjectRelease();
  id v88 = *(id *)v81;
  char v89 = *(unsigned char *)(v81 + 8);
  sub_10002025C(*(id *)v81, v89);
  uint64_t v90 = (unsigned __int8 *)sub_1000D1E04(v88, v89);
  sub_10001A83C(v88, v89);
  swift_getKeyPath();
  uint64_t v141 = v90;
  sub_1000B0AB8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v88) = v90[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed];

  if (v88 == 1) {
    int v91 = static HierarchicalShapeStyle.primary.getter();
  }
  else {
    int v91 = static HierarchicalShapeStyle.tertiary.getter();
  }
  char v92 = v87 & 1;
  LODWORD(v141) = v91;
  uint64_t v93 = Text.foregroundStyle<A>(_:)();
  uint64_t v95 = v94;
  uint64_t v97 = v96;
  char v99 = v98 & 1;
  sub_1000356E0(v83, v85, v92);
  swift_bridgeObjectRelease();
  uint64_t v141 = (unsigned __int8 *)v93;
  unint64_t v142 = v95;
  char v143 = v99;
  uint64_t v144 = v97;
  __int16 v145 = 256;
  char v146 = 1;
  sub_100032FA0(&qword_100157EA0);
  sub_1000AF094(&qword_100157EA8, &qword_100157EA0, (void (*)(void))sub_1000B0A18);
  uint64_t v100 = (uint64_t)v135;
  View.accessibilityHidden(_:)();
  sub_1000356E0(v93, v95, v99);
  swift_bridgeObjectRelease();
  uint64_t v101 = v136;
  sub_10002D9D0(v100, v136, &qword_100157E20);
  uint64_t v103 = v139;
  uint64_t v102 = v140;
  sub_100033344(v139, v140, &qword_100157E50);
  uint64_t v104 = v138;
  sub_100033344(v101, v138, &qword_100157E20);
  uint64_t v105 = v137;
  sub_100033344(v102, v137, &qword_100157E50);
  uint64_t v106 = sub_100032FA0(&qword_100157EC0);
  sub_100033344(v104, v105 + *(int *)(v106 + 48), &qword_100157E20);
  sub_100032F44(v101, &qword_100157E20);
  sub_100032F44(v103, &qword_100157E50);
  sub_100032F44(v104, &qword_100157E20);
  return sub_100032F44(v102, &qword_100157E50);
}

uint64_t sub_1000AEA24@<X0>(unsigned char *a1@<X8>)
{
  sub_100032FA0(&qword_1001555B8);
  uint64_t result = Binding.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1000AEA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = *(id *)a4;
  char v5 = *(unsigned char *)(a4 + 8);
  sub_10002025C(*(id *)a4, v5);
  uint64_t v6 = (unsigned __int8 *)sub_1000D1E04(v4, v5);
  sub_10001A83C(v4, v5);
  swift_getKeyPath();
  sub_1000B0AB8((unint64_t *)&qword_100155218, (void (*)(uint64_t))type metadata accessor for CalculatorMDMRestrictionsManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v4) = v6[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed];

  if (v4 == 1)
  {
    uint64_t v7 = static Animation.easeInOut.getter();
    __chkstk_darwin(v7);
    withAnimation<A>(_:_:)();
    swift_release();
    uint64_t v8 = static Animation.easeOut(duration:)();
    __chkstk_darwin(v8);
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  else
  {
    sub_100032FA0(&qword_100157D38);
    State.wrappedValue.setter();
    return sub_1000A9580();
  }
}

uint64_t sub_1000AEC78()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000AECD4@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000AED54()
{
  return AccessibilityFocusState.wrappedValue.setter();
}

uint64_t sub_1000AEDAC()
{
  return swift_release();
}

uint64_t sub_1000AEE24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  int v4 = *(unsigned __int8 *)(a1 + 49);
  sub_100023524(v1, v2, v3, v4);
  sub_1000D1970(v1, v2, v3 | (v4 << 8));
  sub_10002F4E8(v1, v2, v3, v4);
  swift_retain();
  swift_retain();
  sub_100032FA0(&qword_100154830);
  Binding.wrappedValue.getter();
  Binding.wrappedValue.setter();
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_1000AEF28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AEF94()
{
  return sub_1000B0B60((uint64_t (*)(uint64_t))sub_1000AED54);
}

uint64_t sub_1000AEFB0()
{
  return sub_1000B0B60((uint64_t (*)(uint64_t))sub_1000AEDAC);
}

unint64_t sub_1000AEFC8()
{
  unint64_t result = qword_100157D48;
  if (!qword_100157D48)
  {
    sub_1000317D8(&qword_100157CF8);
    sub_1000AF094(&qword_100157D50, &qword_100157CF0, (void (*)(void))sub_1000AF110);
    sub_100040BE4(&qword_100157DA0, &qword_100157DA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157D48);
  }
  return result;
}

uint64_t sub_1000AF094(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000317D8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AF110()
{
  return sub_1000AF094(&qword_100157D58, &qword_100157CE8, (void (*)(void))sub_1000AF140);
}

unint64_t sub_1000AF140()
{
  unint64_t result = qword_100157D60;
  if (!qword_100157D60)
  {
    sub_1000317D8(&qword_100157CE0);
    sub_1000AF1E0();
    sub_100040BE4(&qword_100157D98, &qword_100156D98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157D60);
  }
  return result;
}

unint64_t sub_1000AF1E0()
{
  unint64_t result = qword_100157D68;
  if (!qword_100157D68)
  {
    sub_1000317D8(&qword_100157CD8);
    sub_1000AF094(&qword_100157D70, &qword_100157CD0, (void (*)(void))sub_1000AF2AC);
    sub_100040BE4(&qword_100157D88, &qword_100157D90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157D68);
  }
  return result;
}

unint64_t sub_1000AF2AC()
{
  unint64_t result = qword_100157D78;
  if (!qword_100157D78)
  {
    sub_1000317D8(&qword_100157CC8);
    sub_100040BE4(&qword_100157D80, &qword_100157CC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157D78);
  }
  return result;
}

unint64_t sub_1000AF34C()
{
  unint64_t result = qword_100157DB0;
  if (!qword_100157DB0)
  {
    sub_1000317D8(&qword_100157D08);
    sub_1000AF094(&qword_100157D40, &qword_100157D00, (void (*)(void))sub_1000AEFC8);
    sub_1000B0AB8(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157DB0);
  }
  return result;
}

unint64_t sub_1000AF42C()
{
  unint64_t result = qword_100157DB8;
  if (!qword_100157DB8)
  {
    sub_1000317D8(&qword_100157D20);
    sub_1000AF4A8();
    sub_100039520();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157DB8);
  }
  return result;
}

unint64_t sub_1000AF4A8()
{
  unint64_t result = qword_100157DC0;
  if (!qword_100157DC0)
  {
    sub_1000317D8(&qword_100157D18);
    sub_1000317D8(&qword_100157D08);
    sub_1000AF34C();
    swift_getOpaqueTypeConformance2();
    sub_1000B0AB8(&qword_100155368, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157DC0);
  }
  return result;
}

uint64_t sub_1000AF588()
{
  return sub_1000AEE24(*(void *)(v0 + 16));
}

uint64_t sub_1000AF5B0()
{
  return sub_1000B0B60((uint64_t (*)(uint64_t))sub_1000ACB50);
}

uint64_t sub_1000AF5C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AF634(uint64_t a1)
{
  uint64_t result = type metadata accessor for ModeMenuView() - 8;
  if (!a1) {
    return sub_1000ACCF4();
  }
  return result;
}

void sub_1000AF698(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TintPlacement();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a3, v6, v8);
    uint64_t v14 = a2;
    swift_retain_n();
    uint64_t v11 = AnyShapeStyle.init<A>(_:)();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *a1;
    *a1 = 0x8000000000000000;
    sub_1000AF804(v11, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
    *a1 = v14;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_release();
  }
}

uint64_t sub_1000AF804(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = (void **)v3;
  uint64_t v9 = type metadata accessor for TintPlacement();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_1000AF9AC(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v4 = v14;
  if (v13[3] >= v18)
  {
    if (a3)
    {
      uint64_t v21 = *v5;
      if ((v14 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_release();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
LABEL_10:
    sub_1000AFA44();
    uint64_t v21 = *v5;
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  sub_1000AFD08(v18, a3 & 1);
  unint64_t v19 = sub_1000AF9AC(a2);
  if ((v4 & 1) != (v20 & 1))
  {
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v19;
  uint64_t v21 = *v5;
  if (v4) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return sub_1000B0144(v15, (uint64_t)v12, a1, v21);
}

unint64_t sub_1000AF9AC(uint64_t a1)
{
  type metadata accessor for TintPlacement();
  sub_1000B0AB8(&qword_100157ED0, (void (*)(uint64_t))&type metadata accessor for TintPlacement);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1000B01FC(a1, v2);
}

void *sub_1000AFA44()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TintPlacement();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100032FA0(&qword_100157EC8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_26:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v24 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v25 = v6 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v3 + 32;
  uint64_t v28 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_24;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21)
      {
        int64_t v11 = v20 + 2;
        if (v20 + 2 >= v26) {
          goto LABEL_24;
        }
        unint64_t v21 = *(void *)(v25 + 8 * v11);
        if (!v21)
        {
          int64_t v11 = v20 + 3;
          if (v20 + 3 >= v26)
          {
LABEL_24:
            uint64_t result = (void *)swift_release();
            uint64_t v1 = v24;
            goto LABEL_26;
          }
          unint64_t v21 = *(void *)(v25 + 8 * v11);
          int64_t v22 = v20 + 3;
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v6 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    *(void *)(*(void *)(v8 + 56) + v18) = v19;
    uint64_t result = (void *)swift_retain();
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000AFD08(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for TintPlacement();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100032FA0(&qword_100157EC8);
  int v45 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (*(void *)(v11 + 16))
  {
    uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v14 = *(void *)(v11 + 64);
    uint64_t v41 = (void *)(v11 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v42 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v39 = v3;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v44 = v6;
    unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v18 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v20 = 0;
    for (i = v11; ; uint64_t v11 = i)
    {
      if (v16)
      {
        unint64_t v22 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v23 = v22 | (v20 << 6);
      }
      else
      {
        int64_t v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v42) {
          goto LABEL_35;
        }
        unint64_t v25 = v41[v24];
        ++v20;
        if (!v25)
        {
          int64_t v20 = v24 + 1;
          if (v24 + 1 >= v42) {
            goto LABEL_35;
          }
          unint64_t v25 = v41[v20];
          if (!v25)
          {
            int64_t v20 = v24 + 2;
            if (v24 + 2 >= v42) {
              goto LABEL_35;
            }
            unint64_t v25 = v41[v20];
            if (!v25)
            {
              int64_t v20 = v24 + 3;
              if (v24 + 3 >= v42)
              {
LABEL_35:
                swift_release();
                uint64_t v3 = v39;
                if (v45)
                {
                  uint64_t v37 = 1 << *(unsigned char *)(v11 + 32);
                  if (v37 >= 64) {
                    bzero(v41, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  }
                  else {
                    *uint64_t v41 = -1 << v37;
                  }
                  *(void *)(v11 + 16) = 0;
                }
                break;
              }
              unint64_t v25 = v41[v20];
              for (int64_t j = v24 + 3; !v25; ++j)
              {
                int64_t v20 = j + 1;
                if (__OFADD__(j, 1)) {
                  goto LABEL_42;
                }
                if (v20 >= v42) {
                  goto LABEL_35;
                }
                unint64_t v25 = v41[v20];
              }
            }
          }
        }
        unint64_t v16 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v20 << 6);
      }
      uint64_t v27 = *(void *)(v44 + 72);
      unint64_t v28 = *(void *)(v11 + 48) + v27 * v23;
      if (v45)
      {
        (*v17)(v8, v28, v5);
        uint64_t v29 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      }
      else
      {
        (*v40)(v8, v28, v5);
        uint64_t v29 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
        swift_retain();
      }
      sub_1000B0AB8(&qword_100157ED0, (void (*)(uint64_t))&type metadata accessor for TintPlacement);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v18 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v31) & ~*(void *)(v18 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v18 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v21 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v27 * v21, v8, v5);
      *(void *)(*(void *)(v12 + 56) + 8 * v21) = v29;
      ++*(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1000B0144(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for TintPlacement();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_1000B01FC(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = type metadata accessor for TintPlacement();
  uint64_t v5 = *(void *)(v4 - 8);
  v6.n128_f64[0] = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v13 = v5 + 16;
    BOOL v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4, v6);
      sub_1000B0AB8(&qword_100157ED8, (void (*)(uint64_t))&type metadata accessor for TintPlacement);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_1000B03C0()
{
  return sub_1000B0B60((uint64_t (*)(uint64_t))sub_1000A9A1C);
}

uint64_t sub_1000B03D8()
{
  return swift_release();
}

uint64_t sub_1000B03E4@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for ModeMenuView();

  return sub_1000AEA24(a1);
}

uint64_t sub_1000B045C()
{
  uint64_t v1 = (int *)(type metadata accessor for ModeMenuView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  swift_unknownObjectRelease();
  sub_10001A83C(*(id *)(v0 + v2), *(unsigned char *)(v0 + v2 + 8));
  swift_release();
  sub_10002F4E8(*(void *)(v0 + v2 + 32), *(void *)(v0 + v2 + 40), *(unsigned __int8 *)(v0 + v2 + 48), *(unsigned char *)(v0 + v2 + 49));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v3 = v0 + v2 + v1[12];
  uint64_t v4 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  sub_100032FA0(&qword_100157C08);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000B05F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ModeMenuView() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000AEA7C(a1, v4, v5, v6);
}

uint64_t sub_1000B066C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.placementTint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B0698()
{
  return EnvironmentValues.placementTint.setter();
}

uint64_t sub_1000B06C4()
{
  uint64_t v1 = type metadata accessor for TintPlacement();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_1000B0790(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for TintPlacement() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = *(void *)(v1 + 16);

  sub_1000AF698(a1, v5, v4);
}

unint64_t sub_1000B080C()
{
  unint64_t result = qword_100157E68;
  if (!qword_100157E68)
  {
    sub_1000317D8(&qword_100157E40);
    sub_1000B08AC();
    sub_100040BE4(&qword_100157E98, &qword_100157E60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157E68);
  }
  return result;
}

unint64_t sub_1000B08AC()
{
  unint64_t result = qword_100157E70;
  if (!qword_100157E70)
  {
    sub_1000317D8(&qword_100157E38);
    sub_1000B094C();
    sub_100040BE4(&qword_100157E88, &qword_100157E90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157E70);
  }
  return result;
}

unint64_t sub_1000B094C()
{
  unint64_t result = qword_100157E78;
  if (!qword_100157E78)
  {
    sub_1000317D8(&qword_100157E30);
    sub_100040BE4(&qword_100157E80, &qword_100157E28);
    sub_100040BE4(&qword_100155410, &qword_100155418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157E78);
  }
  return result;
}

unint64_t sub_1000B0A18()
{
  unint64_t result = qword_100157EB0;
  if (!qword_100157EB0)
  {
    sub_1000317D8(&qword_100157EB8);
    sub_100040BE4(&qword_100155380, &qword_100155388);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100157EB0);
  }
  return result;
}

uint64_t sub_1000B0AB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B0B00()
{
  return sub_1000AEC78();
}

uint64_t sub_1000B0B2C()
{
  return sub_1000B0B60(sub_1000AC450);
}

uint64_t sub_1000B0B48()
{
  return sub_1000B0B60(sub_1000ABE70);
}

uint64_t sub_1000B0B60(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for ModeMenuView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_1000B0BD4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B0C30()
{
  return sub_1000AF588();
}

uint64_t sub_1000B0C48()
{
  uint64_t result = static Font.caption2.getter();
  qword_1001612E8 = result;
  return result;
}

uint64_t sub_1000B0C68(uint64_t a1)
{
  return sub_1000B0CC8(a1, (void (*)(void))&static Font.footnote.getter, &qword_1001612F0);
}

uint64_t sub_1000B0C88()
{
  uint64_t result = static Font.footnote.getter();
  qword_1001612F8 = result;
  return result;
}

uint64_t sub_1000B0CA8(uint64_t a1)
{
  return sub_1000B0CC8(a1, (void (*)(void))&static Font.subheadline.getter, &qword_100161300);
}

uint64_t sub_1000B0CC8(uint64_t a1, void (*a2)(void), uint64_t *a3)
{
  a2();
  uint64_t v4 = Font.bold()();
  uint64_t result = swift_release();
  *a3 = v4;
  return result;
}

uint64_t sub_1000B0D10()
{
  static Font.headline.getter();
  static Font.Weight.semibold.getter();
  uint64_t v0 = Font.weight(_:)();
  uint64_t result = swift_release();
  qword_100161308 = v0;
  return result;
}

uint64_t sub_1000B0D54(uint64_t a1)
{
  return sub_1000B0DF4(a1, &qword_100161310);
}

uint64_t sub_1000B0D64(uint64_t a1)
{
  return sub_1000B0DF4(a1, &qword_100161318);
}

uint64_t sub_1000B0D74(uint64_t a1)
{
  return sub_1000B0DF4(a1, &qword_100161320);
}

uint64_t sub_1000B0D84(uint64_t a1)
{
  uint64_t v2 = sub_100032FA0(&qword_1001568C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B0DE4(uint64_t a1)
{
  return sub_1000B0DF4(a1, &qword_100161328);
}

uint64_t sub_1000B0DF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100032FA0(&qword_1001568C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Font.Weight.medium.getter();
  uint64_t v6 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = static Font.system(size:weight:design:)();
  uint64_t result = sub_1000B0D84((uint64_t)v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000B0EE0()
{
  swift_getKeyPath();
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1000B0F80@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_1000B1028()
{
  return swift_release();
}

uint64_t sub_1000B10F8(char a1)
{
  swift_getKeyPath();
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = sub_100018D24(*(unsigned char *)(v1 + 16), a1);
  if ((result & 1) == 0)
  {
    switch(a1)
    {
      case 2:
        uint64_t result = swift_bridgeObjectRelease();
        break;
      default:
        char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          uint64_t KeyPath = swift_getKeyPath();
          __chkstk_darwin(KeyPath);
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
          uint64_t result = swift_release();
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1000B12F4()
{
  swift_getKeyPath();
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_1000B1394@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 17);
  return result;
}

uint64_t sub_1000B143C()
{
  return swift_release();
}

uint64_t sub_1000B150C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 17) = a2;
  return result;
}

uint64_t sub_1000B1514()
{
  swift_getKeyPath();
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t sub_1000B15B4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100034378(&qword_1001552E0, (void (*)(uint64_t))type metadata accessor for CalculatorKeypadViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 18);
  return result;
}

uint64_t sub_1000B165C()
{
  return swift_release();
}

uint64_t sub_1000B172C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 18) = a2;
  return result;
}

uint64_t sub_1000B1734()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10Calculator25CalculatorKeypadViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000B17DC()
{
  return type metadata accessor for CalculatorKeypadViewModel();
}

id sub_1000B17E4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100034378(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v4 = *(void **)(v3 + 48);
  *a2 = v4;

  return v4;
}

void sub_1000B189C(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_100034378(&qword_100155210, (void (*)(uint64_t))type metadata accessor for CalculatorExpressionManager);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_1000B1978(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for SchemaV1.HistoryRecord();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v16 = sub_1000B1F58(v7, result + 1);
    Swift::Int v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_1000B21A4();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_1000B2A50(a2, v17);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  Hasher.init(_seed:)();
  type metadata accessor for SchemaV1.HistoryRecord();
  sub_100034378(&qword_100154C58, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    Swift::Int v15 = swift_retain();
    sub_1000B2B40(v15, v12, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  sub_100034378(&qword_100154C50, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t sub_1000B1C88(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000B2D30(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000B1E38(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_1000B2ECC(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_1000B1F58(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100032FA0(&qword_1001580F0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for SchemaV1.HistoryRecord();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1000B21A4();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        sub_100034378(&qword_100154C58, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_1000B21A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100032FA0(&qword_1001580F0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      type metadata accessor for SchemaV1.HistoryRecord();
      sub_100034378(&qword_100154C58, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000B24C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100032FA0(&qword_100155580);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000B27A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100032FA0(&qword_100155578);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_1000B2A50(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for SchemaV1.HistoryRecord();
  sub_100034378(&qword_100154C58, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int sub_1000B2B40(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000B21A4();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_1000B301C();
      goto LABEL_12;
    }
    sub_1000B3510();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for SchemaV1.HistoryRecord();
  sub_100034378(&qword_100154C58, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_100034378(&qword_100154C50, (void (*)(uint64_t))type metadata accessor for SchemaV1.HistoryRecord);
    do
    {
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1000B2D30(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000B24C4();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)sub_1000B31C8();
      goto LABEL_22;
    }
    sub_1000B381C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        Swift::UInt v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_1000B2ECC(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000B27A4();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_1000B337C();
      goto LABEL_14;
    }
    sub_1000B3ACC();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}