Class sub_1002258C8(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  NSArray v5;
  uint64_t vars8;

  v4 = a1;
  a3();

  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v5.super.isa;
}

void MultiKeySyncProcessor.cleanKeys.getter()
{
  id v1 = v0;
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)sub_100227C84(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_16;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      v6 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      v6 = (char *)*(id *)(v3 + 8 * i + 32);
    }
    v7 = v6;
    v8 = *(void **)&v6[OBJC_IVAR___MTKeyProcessorPair_processor];
    if ((objc_msgSend(v8, "hasLocalChanges", v19) & 1) != 0
      || ([v8 requiresNextGetTransaction] & 1) == 0)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v9 = v19;
  if ((v19 & 0x8000000000000000) != 0) {
    goto LABEL_28;
  }
LABEL_17:
  if ((v9 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10)
    {
LABEL_27:
      swift_release();
      return;
    }
    goto LABEL_19;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v10) {
    goto LABEL_27;
  }
LABEL_19:
  sub_10005986C(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0) {
        v12 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        v12 = (char *)*(id *)(v9 + 8 * v11 + 32);
      }
      v13 = v12;
      uint64_t v15 = *(void *)&v12[OBJC_IVAR___MTKeyProcessorPair_key];
      uint64_t v14 = *(void *)&v12[OBJC_IVAR___MTKeyProcessorPair_key + 8];
      swift_bridgeObjectRetain();

      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1) {
        sub_10005986C(v16 > 1, v17 + 1, 1);
      }
      ++v11;
      _swiftEmptyArrayStorage[2] = v17 + 1;
      v18 = &_swiftEmptyArrayStorage[2 * v17];
      v18[4] = v15;
      v18[5] = v14;
    }
    while (v10 != v11);
    goto LABEL_27;
  }
LABEL_31:
  __break(1u);
}

uint64_t MultiKeySyncProcessor.processor(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100051E78(a1, a2);
  if (v7)
  {
    uint64_t v8 = *(void *)(*(void *)(v3 + 56) + 8 * v6);
    swift_unknownObjectRetain();
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

void MultiKeySyncProcessor.init()()
{
}

uint64_t MultiKeySyncProcessor.operationTypeForSET()()
{
  return 17;
}

Swift::Bool __swiftcall MultiKeySyncProcessor.hasLocalChanges()()
{
  return sub_100225DE4((SEL *)&selRef_hasLocalChanges);
}

Swift::Bool __swiftcall MultiKeySyncProcessor.requiresNextGetTransaction()()
{
  return sub_100225DE4((SEL *)&selRef_requiresNextGetTransaction);
}

uint64_t sub_100225DE4(SEL *a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v10 = 0;
  for (char i = 0; ; i |= result)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v8) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v10);
        if (!v15)
        {
          int64_t v10 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_25;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v10);
          if (!v15)
          {
            int64_t v10 = v14 + 4;
            if (v14 + 4 >= v8) {
              goto LABEL_25;
            }
            unint64_t v15 = *(void *)(v4 + 8 * v10);
            if (!v15) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    uint64_t result = (uint64_t)[*(id *)(*(void *)(v3 + 56) + 8 * v13) *a1];
  }
  int64_t v16 = v14 + 5;
  if (v16 >= v8)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return i & 1;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall MultiKeySyncProcessor.version(forGetTransaction:key:)(MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_6;
  }
  object = key._object;
  uint64_t countAndFlagsBits = key._countAndFlagsBits;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_100051E78(countAndFlagsBits, (uint64_t)object);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  unint64_t v9 = *(void **)(*(void *)(v3 + 56) + 8 * v7);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 versionForGetTransaction:forGetTransaction key:v10];

  swift_unknownObjectRelease();
  if (!v11)
  {
LABEL_6:
    uint64_t v12 = 0;
    int64_t v14 = 0;
    goto LABEL_7;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int64_t v14 = v13;

LABEL_7:
  uint64_t v15 = v12;
  int64_t v16 = v14;
  result.value._object = v16;
  result.value._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t MultiKeySyncProcessor.data(forSetTransaction:key:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (!*(void *)(v5 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_100051E78(a2, a3);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v12 = *(void **)(*(void *)(v5 + 56) + 8 * v10);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 dataForSetTransaction:a1 key:v13 version:a4];

  swift_unknownObjectRelease();
  if (!v14) {
    return 0;
  }
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v15;
}

void MultiKeySyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
}

uint64_t sub_100226350(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void MultiKeySyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
}

void MultiKeySyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
}

void sub_10022674C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSString a7, void *a8, uint64_t a9, uint64_t a10, SEL *a11)
{
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_100051E78(a4, a5);
    if (v20)
    {
      v21 = *(void **)(*(void *)(v12 + 56) + 8 * v19);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      if (a3 >> 60 == 15) {
        Class isa = 0;
      }
      else {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
      }
      NSString v23 = String._bridgeToObjectiveC()();
      if (a7) {
        a7 = String._bridgeToObjectiveC()();
      }
      if (a8)
      {
        aBlock[4] = a8;
        aBlock[5] = a9;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100226350;
        aBlock[3] = a10;
        a8 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
      }
      [v21 *a11:a1 isa:v23 a7:a8 a10:a9];
      swift_unknownObjectRelease();
      _Block_release(a8);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall MultiKeySyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)(MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  type metadata accessor for SyncKeysRepository();
  id v2 = (id)static SyncKeysRepository.shared.getter();
  swift_bridgeObjectRetain();
  SyncKeysRepository.podcastsDomainVersion.setter();
}

unint64_t sub_100226BFC()
{
  unint64_t result = qword_1005FB8C8;
  if (!qword_1005FB8C8)
  {
    sub_100044244(&qword_1005FB8C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FB8C8);
  }
  return result;
}

unint64_t sub_100226C5C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100227124(a1, v4);
}

unint64_t sub_100226CA0(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_1002277BC(a1, v2);
}

unint64_t sub_100226D30(uint64_t a1)
{
  Hasher.init(_seed:)();
  NavigationTab.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1002271EC(a1, v2);
}

unint64_t sub_100226D9C(uint64_t a1)
{
  type metadata accessor for MediaRequest.ContentType();
  sub_100227E90(&qword_1005FB948, (void (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1002272F8(a1, v2);
}

unint64_t sub_100226E34(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100227E90(&qword_1005FB940, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1002274B8(a1, v2);
}

unint64_t sub_100226EE8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a3 & 1;
  Hasher.init(_seed:)();
  EpisodeStateIdentifier.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();

  return sub_100227934(a1, a2, v5, v6);
}

unint64_t sub_100226F74(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100227AB4(a1, v4, &qword_1005FB938);
}

unint64_t sub_100226FC4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100227AB4(a1, v4, &qword_1005FB930);
}

unint64_t sub_100227014(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100227AB4(a1, v4, &qword_1005F8440);
}

unint64_t sub_100227064(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100227AB4(a1, v4, &qword_1005F7728);
}

unint64_t sub_1002270B4(char a1)
{
  char v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  Swift::Int v3 = Hasher._finalize()();

  return sub_100227BC8(v2, v3);
}

unint64_t sub_100227124(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100172EBC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100172F18((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1002271EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v6 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    sub_100036488(v6);
    char v7 = static NavigationTab.== infix(_:_:)();
    sub_10003649C(v6);
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        uint64_t v9 = *(void *)(*(void *)(v2 + 48) + 8 * i);
        sub_100036488(v9);
        char v10 = static NavigationTab.== infix(_:_:)();
        sub_10003649C(v9);
        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1002272F8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for MediaRequest.ContentType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    NSString v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100227E90((unint64_t *)&unk_1005FB950, (void (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_1002274B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (int *)type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    return v10;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v6 + 72);
  uint64_t v35 = a1 + 24;
  v36 = v8 + 24;
  while (1)
  {
    sub_1001D89BC(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8);
    if ((static UUID.== infix(_:_:)() & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v13 = v5[5];
    uint64_t v14 = *(void *)&v8[v13];
    uint64_t v15 = *(void *)&v8[v13 + 8];
    int64_t v16 = (void *)(a1 + v13);
    BOOL v17 = v14 == *v16 && v15 == v16[1];
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_4;
    }
    if ((static Date.== infix(_:_:)() & 1) == 0 || *(void *)&v8[v5[7]] != *(void *)(a1 + v5[7])) {
      goto LABEL_4;
    }
    uint64_t v18 = v5[8];
    uint64_t v19 = *(void *)&v8[v18];
    uint64_t v20 = *(void *)&v8[v18 + 8];
    int v21 = v8[v18 + 16];
    uint64_t v22 = a1 + v18;
    int v23 = *(unsigned __int8 *)(v22 + 16);
    BOOL v24 = v19 == *(void *)v22 && v20 == *(void *)(v22 + 8);
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v25 = v21 ? 1936484398 : 0x7261646E6174732ELL;
    unint64_t v26 = v21 ? 0xE400000000000000 : 0xE900000000000064;
    uint64_t v27 = v23 ? 1936484398 : 0x7261646E6174732ELL;
    unint64_t v28 = v23 ? 0xE400000000000000 : 0xE900000000000064;
    if (v25 == v27 && v26 == v28) {
      break;
    }
    int v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_37;
    }
LABEL_4:
    sub_1001D92EC((uint64_t)v8);
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      return v10;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_37:
  if ((sub_100238084((uint64_t)&v8[v5[9]], a1 + v5[9]) & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v30 = v5[10];
  uint64_t v31 = *(void *)&v36[v30];
  uint64_t v32 = *(void *)(v35 + v30);
  switch(v31)
  {
    case 1:
      if (v32 != 1) {
        goto LABEL_4;
      }
      break;
    case 2:
      if (v32 != 2) {
        goto LABEL_4;
      }
      break;
    case 3:
      if (v32 != 3) {
        goto LABEL_4;
      }
      break;
    case 4:
      if (v32 != 4) {
        goto LABEL_4;
      }
      break;
    default:
      if ((unint64_t)(v32 - 1) < 4) {
        goto LABEL_4;
      }
      break;
  }
  sub_1001D92EC((uint64_t)v8);
  return v10;
}

unint64_t sub_1002277BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100227934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t i = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v8 = *(void *)(v4 + 48) + 24 * i;
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    char v11 = *(unsigned char *)(v8 + 16);
    sub_1001DD838(*(void *)v8, v10, v11);
    char v12 = static EpisodeStateIdentifier.== infix(_:_:)();
    sub_1001DD848(v9, v10, v11);
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v6;
      for (unint64_t i = (i + 1) & v13; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
      {
        uint64_t v14 = *(void *)(v4 + 48) + 24 * i;
        uint64_t v15 = *(void *)v14;
        uint64_t v16 = *(void *)(v14 + 8);
        char v17 = *(unsigned char *)(v14 + 16);
        sub_1001DD838(*(void *)v14, v16, v17);
        char v18 = static EpisodeStateIdentifier.== infix(_:_:)();
        sub_1001DD848(v15, v16, v17);
        if (v18) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100227AB4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10004D29C(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100227BC8(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if ((((a1 & 1) == 0) ^ *(unsigned char *)(v7 + result))) {
          break;
        }
      }
    }
  }
  return result;
}

void *sub_100227C84(uint64_t a1, uint64_t a2)
{
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + OBJC_IVAR___MTMultiKeySyncProcessor_processorsByKey);
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(v5 + 16))
      {
        uint64_t v8 = *(v6 - 1);
        uint64_t v7 = *v6;
        swift_bridgeObjectRetain_n();
        unint64_t v9 = sub_100051E78(v8, v7);
        if (v10)
        {
          uint64_t v11 = *(void *)(*(void *)(v5 + 56) + 8 * v9);
          swift_unknownObjectRetain();
          swift_bridgeObjectRelease();
          char v12 = (objc_class *)type metadata accessor for KeyProcessorPair();
          uint64_t v13 = (char *)objc_allocWithZone(v12);
          uint64_t v14 = (uint64_t *)&v13[OBJC_IVAR___MTKeyProcessorPair_key];
          *uint64_t v14 = v8;
          v14[1] = v7;
          *(void *)&v13[OBJC_IVAR___MTKeyProcessorPair_processor] = v11;
          v15.receiver = v13;
          v15.super_class = v12;
          if (objc_msgSendSuper2(&v15, "init"))
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return (void *)v16;
  }
  return result;
}

uint64_t type metadata accessor for KeyProcessorPair()
{
  return self;
}

uint64_t type metadata accessor for MultiKeySyncProcessor()
{
  return self;
}

uint64_t sub_100227E50()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_100227E88(char a1)
{
  return sub_1002A572C(a1, *(void *)(v1 + 16));
}

uint64_t sub_100227E90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100227EEC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LibraryViewControllerProvider();
  return [super dealloc];
}

uint64_t sub_100227F24()
{
  sub_1001F5338(2, 0xD000000000000018, 0x80000001004D39C0, v2);
  id v0 = objc_allocWithZone((Class)sub_100054B78(&qword_1005FB9F8));
  return UIHostingController.init(rootView:)();
}

void sub_100227F8C()
{
  uint64_t v1 = *v0;
  id v2 = [self sharedInstance];
  id v3 = objc_allocWithZone((Class)MTiOSPlaylistSettingsViewController);
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithPlaylistUuid:v4 library:v2];

  if (v5) {
    [v5 setDelegate:v1];
  }
  else {
    __break(1u);
  }
}

id sub_10022805C(uint64_t a1)
{
  id v1 = [self defaultViewControllerWithLibraryActionControllerBridge:a1];

  return v1;
}

id sub_1002280AC()
{
  id v0 = [objc_allocWithZone((Class)MTInlineNowPlayingIndicatorView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  sub_1001A5458(&qword_1005FB9E8, (unint64_t *)&qword_1005FB9F0);
  return v0;
}

uint64_t sub_10022812C(uint64_t a1, uint64_t a2)
{
  sub_10004D29C(0, (unint64_t *)&unk_1005FBA00);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  id v5 = [ObjCClassFromMetadata sharedInstance];
  uint64_t v6 = sub_1001A5458((unint64_t *)&qword_1005F7530, (unint64_t *)&unk_1005FBA00);
  v12[3] = &type metadata for ShowSettingsController;
  v12[4] = &off_10055F3D8;
  uint64_t v7 = (void *)swift_allocObject();
  v12[0] = v7;
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v5;
  v7[5] = v6;
  swift_bridgeObjectRetain();
  id v8 = v5;
  sub_100291A38(v12, (uint64_t)v13);
  id v9 = objc_allocWithZone((Class)sub_100054B78((uint64_t *)&unk_1005FBA10));
  uint64_t v10 = UIHostingController.init(rootView:)();

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100228260(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MTNotificationSettingsViewController();
  NSString v4 = (char *)[objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v5 = &v4[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid];
  *(void *)id v5 = a1;
  *((void *)v5 + 1) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *((void *)v5 + 1);
  uint64_t v7 = (void *)(*(void *)&v4[OBJC_IVAR____TtC8Podcasts36MTNotificationSettingsViewController_sectionedContentViewController]
                + OBJC_IVAR____TtC8Podcasts45MTNotificationSettingsSectionedViewController_newEpisodeNotifcationGroupInitialHighlightedPodcastUuid);
  void *v7 = *(void *)v5;
  v7[1] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100228318()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100228358()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005F8B20);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  NSString v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100054B78((uint64_t *)&unk_1005FBC00);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100054B78(&qword_1005F8B30);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001C0DD4();
  static OS_os_log.carPlay.getter();
  objc_super v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    char v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "CarPlayStoreShowProvider: Fetch content called.", v17, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v31 = StorePageProvider.pageContent.getter();
  swift_allocObject();
  swift_weakInit();
  sub_100054B78(&qword_1005F5BC0);
  sub_100054B78(&qword_1005F7800);
  sub_100044200((unint64_t *)&unk_1005F8B50, &qword_1005F5BC0);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  sub_100044200((unint64_t *)&unk_1005FBC10, (uint64_t *)&unk_1005F8B20);
  uint64_t v18 = v26;
  Publisher.removeDuplicates(by:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v18);
  uint64_t v31 = *(void *)(v1 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_updatePlayStateSubject);
  sub_100054B78((uint64_t *)&unk_1005F8B00);
  sub_100044200((unint64_t *)&unk_1005F8B60, (uint64_t *)&unk_1005FBC00);
  sub_100044200(&qword_1005F9F40, (uint64_t *)&unk_1005F8B00);
  uint64_t v19 = v28;
  Publisher.combineLatest<A>(_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v19);
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10022AD5C;
  *(void *)(v21 + 24) = v20;
  sub_100044200(&qword_1005F8B78, &qword_1005F8B30);
  uint64_t v22 = v30;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v22);
  swift_beginAccess();
  sub_100054B78((uint64_t *)&unk_1005F9ED0);
  sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10022893C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v4 - 8);
  unint64_t v58 = v4;
  __chkstk_darwin(v4);
  v56 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for ModernShelf.ItemPresentation();
  v54 = *(uint64_t (***)(char *, uint64_t))(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ModernShelf();
  uint64_t v60 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  v52 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v13 = type metadata accessor for ModernPage();
  __chkstk_darwin(v13);
  uint64_t v51 = (uint64_t)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PageContent();
  __chkstk_darwin(v15);
  char v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_28;
  }
  uint64_t v19 = result;
  sub_1001C6A68(a1, (uint64_t)v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v49 = a2;
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    sub_1001C0DD4();
    v40 = v56;
    static OS_os_log.carPlay.getter();
    swift_errorRetain();
    swift_errorRetain();
    v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      v63 = (void *)swift_slowAlloc();
      *(_DWORD *)v43 = 136315138;
      swift_getErrorValue();
      uint64_t v44 = Error.localizedDescription.getter();
      uint64_t v62 = sub_10004B974(v44, v45, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to load the Store Show store page with error: %s", v43, 0xCu);
      swift_arrayDestroy();
      a2 = v49;
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_errorRelease();
    }
    else
    {
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t result = (*(uint64_t (**)(char *, unint64_t))(v57 + 8))(v40, v58);
    goto LABEL_28;
  }
  if (EnumCaseMultiPayload != 3)
  {
    swift_release();
    uint64_t result = sub_10022B6A0((uint64_t)v17, (uint64_t (*)(void))&type metadata accessor for PageContent);
LABEL_28:
    int v23 = 0;
    goto LABEL_29;
  }
  uint64_t v21 = v51;
  sub_10022B63C((uint64_t)v17, v51);
  uint64_t v22 = *(char **)(v21 + *(int *)(v13 + 24));
  int v23 = _swiftEmptyArrayStorage;
  v63 = _swiftEmptyArrayStorage;
  uint64_t v24 = *((void *)v22 + 2);
  uint64_t v53 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_unsupportedSectionIds;
  uint64_t v50 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_supportedItemModelTypes;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  uint64_t v57 = v24;
  if (!v24)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10022B6A0(v51, (uint64_t (*)(void))&type metadata accessor for ModernPage);
    uint64_t result = swift_release();
LABEL_29:
    *a2 = v23;
    return result;
  }
  unint64_t v25 = 0;
  uint64_t v55 = v60 + 16;
  uint64_t v26 = (void (**)(char *, uint64_t))(v54 + 1);
  v48 = (uint64_t (**)(char *, char *, uint64_t))(v60 + 32);
  v54 = (uint64_t (**)(char *, uint64_t))(v60 + 8);
  uint64_t v47 = v19;
  uint64_t v59 = v8;
  v56 = v22;
  while (v25 < *((void *)v22 + 2))
  {
    uint64_t v27 = *(void *)(v60 + 72);
    unint64_t v58 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v12, &v22[v58 + v27 * v25], v8);
    if ((ModernShelf.hideFromCarPlay.getter() & 1) != 0
      || (uint64_t v28 = *(void *)(v19 + v53),
          uint64_t v29 = ModernShelf.id.getter(),
          LOBYTE(v28) = sub_10030A84C(v29, v30, v28),
          swift_bridgeObjectRelease(),
          (v28 & 1) != 0)
      || (uint64_t v31 = *(void *)(v19 + v50), (v32 = *(void *)(v31 + 16)) == 0))
    {
LABEL_14:
      uint64_t v8 = v59;
      uint64_t result = (*v54)(v12, v59);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = 32;
      while (1)
      {
        uint64_t v34 = *(void *)(v31 + v33);
        ModernShelf.itemPresentation.getter();
        ModernShelf.ItemPresentation.itemKind.getter();
        (*v26)(v7, v61);
        if (v34 == ModernShelf.ItemKind.modelType.getter()) {
          break;
        }
        v33 += 16;
        if (!--v32)
        {
          swift_bridgeObjectRelease();
          uint64_t v19 = v47;
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v35 = *v48;
      (*v48)(v52, v12, v59);
      v36 = v63;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001BA794(0, v36[2] + 1, 1);
        v36 = v63;
      }
      uint64_t v19 = v47;
      unint64_t v38 = v36[2];
      unint64_t v37 = v36[3];
      if (v38 >= v37 >> 1)
      {
        sub_1001BA794(v37 > 1, v38 + 1, 1);
        v36 = v63;
      }
      v36[2] = v38 + 1;
      v39 = (char *)v36 + v58 + v38 * v27;
      uint64_t v8 = v59;
      uint64_t result = v35(v39, v52, v59);
      v63 = v36;
    }
    ++v25;
    uint64_t v22 = v56;
    if (v25 == v57)
    {
      int v23 = v63;
      a2 = v49;
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002290C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005F7768);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v56 = type metadata accessor for ModernShelf();
  uint64_t v10 = *(void *)(v56 - 8);
  uint64_t v11 = __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = *a1;
  uint64_t v16 = *a2;
  int64_t v17 = *(void *)(v15 + 16);
  uint64_t v18 = _swiftEmptyArrayStorage;
  v54 = v7;
  if (v17)
  {
    uint64_t v48 = v16;
    uint64_t v57 = _swiftEmptyArrayStorage;
    sub_1001BA7D0(0, v17, 0);
    uint64_t v49 = v10;
    uint64_t v19 = v10 + 16;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v21 = v15 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v51 = *(void *)(v19 + 56);
    v52 = v20;
    uint64_t v53 = (void (*)(char *, uint64_t, uint64_t))v19;
    uint64_t v50 = (void (**)(char *, uint64_t))(v19 - 8);
    do
    {
      v52(v14, v21, v56);
      ModernShelf.header.getter();
      uint64_t v22 = type metadata accessor for Header();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v22) == 1)
      {
        sub_100054B1C((uint64_t)v9, &qword_1005F7768);
        uint64_t v24 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v24 = Header.title.getter();
        uint64_t v25 = v26;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
      }
      (*v50)(v14, v56);
      uint64_t v18 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001BA7D0(0, v18[2] + 1, 1);
        uint64_t v18 = v57;
      }
      unint64_t v28 = v18[2];
      unint64_t v27 = v18[3];
      if (v28 >= v27 >> 1)
      {
        sub_1001BA7D0(v27 > 1, v28 + 1, 1);
        uint64_t v18 = v57;
      }
      v18[2] = v28 + 1;
      uint64_t v29 = &v18[2 * v28];
      v29[4] = v24;
      v29[5] = v25;
      v21 += v51;
      --v17;
    }
    while (v17);
    uint64_t v7 = v54;
    uint64_t v16 = v48;
    uint64_t v10 = v49;
  }
  int64_t v30 = *(void *)(v16 + 16);
  uint64_t v31 = _swiftEmptyArrayStorage;
  if (v30)
  {
    uint64_t v57 = _swiftEmptyArrayStorage;
    sub_1001BA7D0(0, v30, 0);
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v32 = v10 + 16;
    uint64_t v34 = v16 + ((*(unsigned __int8 *)(v32 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 64));
    v52 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 56);
    uint64_t v53 = v33;
    uint64_t v35 = (void (**)(char *, uint64_t))(v32 - 8);
    do
    {
      uint64_t v36 = v32;
      v53(v55, v34, v56);
      ModernShelf.header.getter();
      uint64_t v37 = type metadata accessor for Header();
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v7, 1, v37) == 1)
      {
        sub_100054B1C((uint64_t)v7, &qword_1005F7768);
        uint64_t v39 = 0;
        uint64_t v40 = 0;
      }
      else
      {
        uint64_t v39 = Header.title.getter();
        v41 = v7;
        uint64_t v40 = v42;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v37);
      }
      (*v35)(v55, v56);
      uint64_t v31 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001BA7D0(0, v31[2] + 1, 1);
        uint64_t v31 = v57;
      }
      unint64_t v44 = v31[2];
      unint64_t v43 = v31[3];
      if (v44 >= v43 >> 1)
      {
        sub_1001BA7D0(v43 > 1, v44 + 1, 1);
        uint64_t v31 = v57;
      }
      v31[2] = v44 + 1;
      unint64_t v45 = &v31[2 * v44];
      v45[4] = v39;
      v45[5] = v40;
      v34 += (uint64_t)v52;
      --v30;
      uint64_t v7 = v54;
      uint64_t v32 = v36;
    }
    while (v30);
  }
  char v46 = sub_10019F6F8((uint64_t)v18, (uint64_t)v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v46 & 1;
}

uint64_t sub_1002295B4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    swift_retain();
    sub_10022ADA4(a1, v3, v3);
    return swift_release_n();
  }
  return result;
}

uint64_t sub_100229624()
{
  uint64_t v1 = EpisodeStateController.stateMachine(for:)();
  uint64_t v2 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_stateMachine;
  *(void *)(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_stateMachine) = v1;
  uint64_t result = swift_release();
  if (*(void *)(v0 + v2))
  {
    swift_retain();
    dispatch thunk of EpisodeStateMachine.removeStateTransitionActions(for:)();
    uint64_t result = swift_release();
    if (*(void *)(v0 + v2))
    {
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100229714(void *a1, uint64_t a2, uint64_t a3, NSObject *a4, void (*a5)(unint64_t), void (*a6)(void, void, void))
{
  v74 = a4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v75 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ModernShelf();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v73 = result;
    unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v72 = a3;
    if (a1)
    {
      id v18 = a1;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      a3 = v72;
    }
    uint64_t v68 = v11;
    uint64_t v69 = v10;
    v70 = a6;
    v71 = a5;
    *(void *)&v80[0] = _swiftEmptyArrayStorage;
    uint64_t v19 = *(void *)(a3 + 16);
    if (v19)
    {
      uint64_t v21 = *(void (**)(void, void, void))(v14 + 16);
      uint64_t v20 = v14 + 16;
      a6 = v21;
      uint64_t v22 = a3 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
      uint64_t v23 = *(void *)(v20 + 56);
      swift_bridgeObjectRetain();
      do
      {
        a6(v16, v22, v13);
        uint64_t v24 = ModernShelf.items.getter();
        (*(void (**)(char *, uint64_t))(v20 - 8))(v16, v13);
        sub_1001B1E64(v24);
        v22 += v23;
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void **)&v80[0];
    }
    else
    {
      uint64_t v25 = _swiftEmptyArrayStorage;
    }
    unint64_t v78 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v26 = v25[2];
    if (v26)
    {
      uint64_t v27 = (uint64_t)(v25 + 4);
      swift_bridgeObjectRetain();
      do
      {
        sub_100056D54(v27, (uint64_t)v80);
        sub_100056D54((uint64_t)v80, (uint64_t)&v76);
        sub_100054B78(&qword_1005F8430);
        type metadata accessor for LegacyEpisodeLockup();
        if ((swift_dynamicCast() & 1) == 0) {
          uint64_t v77 = 0;
        }
        sub_10004D2D8((uint64_t)v80);
        if (v77)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v27 += 40;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      unint64_t v28 = v78;
    }
    else
    {
      unint64_t v28 = (unint64_t)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    *(void *)&v80[0] = _swiftEmptyArrayStorage;
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      int64_t v30 = v74;
      if (v29) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      int64_t v30 = v74;
      if (v29)
      {
LABEL_24:
        if (v29 < 1)
        {
          __break(1u);
          goto LABEL_67;
        }
        for (uint64_t i = 0; i != v29; ++i)
        {
          if ((v28 & 0xC000000000000001) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_retain();
          }
          if (LegacyLockup.adamId.getter() == v30)
          {
            swift_release();
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v32 = *(void **)&v80[0];
LABEL_36:
        *(void *)&v80[0] = v32;
        sub_100054B78((uint64_t *)&unk_1005FBC30);
        sub_100044200((unint64_t *)&unk_1005F7E40, (uint64_t *)&unk_1005FBC30);
        if ((Collection.isNotEmpty.getter() & 1) == 0)
        {
          swift_release();
          a6 = (void (*)(void, void, void))v75;
          goto LABEL_46;
        }
        uint64_t v33 = v73;
        uint64_t v34 = *(void *)(v73 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject);
        uint64_t v35 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeDataProvider;
        uint64_t v36 = *(void *)(v73 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_playStateController);
        uint64_t v37 = *(void *)(v73 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_downloadStateController);
        long long v39 = *(_OWORD *)(v73 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 16);
        long long v38 = *(_OWORD *)(v73 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 32);
        long long v40 = *(_OWORD *)(v73 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo);
        uint64_t v81 = *(void *)(v73 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 48);
        v80[1] = v39;
        v80[2] = v38;
        v80[0] = v40;
        v76._uint64_t countAndFlagsBits = (uint64_t)v32;
        swift_retain();
        swift_retain();
        swift_retain();
        if (Collection.isNotEmpty.getter())
        {
          v76._uint64_t countAndFlagsBits = (uint64_t)v32;
          swift_getKeyPath();
          sub_100044200(&qword_1005FBC40, (uint64_t *)&unk_1005FBC30);
          sub_10022B5A4();
          unint64_t v41 = Sequence.uniqued<A>(by:)();
          uint64_t v42 = swift_release();
          __chkstk_darwin(v42);
          *(&v68 - 6) = v33 + v35;
          *(&v68 - 5) = v36;
          *(&v68 - 4) = v37;
          *(&v68 - 3) = (uint64_t)v80;
          v82._object = sub_1001C0E14;
          uint64_t v67 = v34;
          unint64_t v43 = (unint64_t)sub_1003B8170((void (*)(uint64_t *__return_ptr, uint64_t *))sub_10022B610, (uint64_t)(&v68 - 8), v41);
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          unint64_t v43 = (unint64_t)_swiftEmptyArrayStorage;
        }
        a6 = (void (*)(void, void, void))v75;
        if (!(v43 >> 62))
        {
          swift_bridgeObjectRetain();
          dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
          unint64_t v44 = v43;
LABEL_43:
          swift_bridgeObjectRelease();
          id v45 = [self mainBundle];
          v82._object = (void *)0xE000000000000000;
          v46._uint64_t countAndFlagsBits = 0x5345444F53495045;
          v46._object = (void *)0xE800000000000000;
          v47._uint64_t countAndFlagsBits = 0;
          v47._object = (void *)0xE000000000000000;
          v82._uint64_t countAndFlagsBits = 0;
          Swift::String v48 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, (Swift::String_optional)0, (NSBundle)v45, v47, v82);

          Swift::String v76 = v48;
          sub_1001AA530();
          StringProtocol.localizedUppercase.getter();
          swift_bridgeObjectRelease();
          id v49 = objc_allocWithZone((Class)CPListSection);
          sub_1001C04A0(v44);
          swift_bridgeObjectRelease();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          NSString v51 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v52 = [v49 initWithItems:isa header:v51 sectionIndexTitle:0];

          id v53 = v52;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();

LABEL_46:
          sub_1001C0DD4();
          static OS_os_log.carPlay.getter();
          unint64_t v54 = v79;
          swift_bridgeObjectRetain_n();
          uint64_t v55 = Logger.logObject.getter();
          int v56 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v55, (os_log_type_t)v56))
          {

            swift_bridgeObjectRelease_n();
LABEL_61:
            (*(void (**)(void (*)(void, void, void), uint64_t))(v68 + 8))(a6, v69);
            swift_beginAccess();
            v71(v79);
            swift_bridgeObjectRelease();
            return swift_release();
          }
          uint64_t v57 = swift_slowAlloc();
          *(_DWORD *)uint64_t v57 = 134218240;
          if (v54 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v58 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          v76._uint64_t countAndFlagsBits = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v57 + 12) = 2048;
          v76._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
          if (v54 >> 62)
          {
            swift_bridgeObjectRetain_n();
            uint64_t result = _CocoaArrayWrapper.endIndex.getter();
            uint64_t v59 = result;
            if (result)
            {
LABEL_51:
              LODWORD(v72) = v56;
              v74 = v55;
              if (v59 < 1)
              {
                __break(1u);
                return result;
              }
              uint64_t v60 = 0;
              do
              {
                if ((v54 & 0xC000000000000001) != 0) {
                  id v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v61 = *(id *)(v54 + 8 * v60 + 32);
                }
                uint64_t v62 = v61;
                ++v60;
                id v63 = [v61 items:v68, v69, v70];
                sub_100054B78(&qword_1005F7E20);
                unint64_t v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                sub_1001B187C(v64);
              }
              while (v59 != v60);
              swift_bridgeObjectRelease_n();
              uint64_t countAndFlagsBits = v76._countAndFlagsBits;
              uint64_t v55 = v74;
              a6 = (void (*)(void, void, void))v75;
              LOBYTE(v56) = v72;
              if (!((unint64_t)v76._countAndFlagsBits >> 62)) {
                goto LABEL_59;
              }
              goto LABEL_65;
            }
          }
          else
          {
            uint64_t v59 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
            uint64_t result = swift_bridgeObjectRetain_n();
            if (v59) {
              goto LABEL_51;
            }
          }
          swift_bridgeObjectRelease_n();
          uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
          if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
          {
LABEL_59:
            uint64_t v66 = *(void *)((countAndFlagsBits & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_60:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v76._uint64_t countAndFlagsBits = v66;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v56, "CarPlayStoreShowProvider: Returned sections count %ld and total section items count %ld.", (uint8_t *)v57, 0x16u);
            swift_slowDealloc();

            goto LABEL_61;
          }
LABEL_65:
          swift_bridgeObjectRetain();
          uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
LABEL_67:
        swift_bridgeObjectRetain();
        sub_100054B78(&qword_1005F7E20);
        unint64_t v44 = _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v32 = _swiftEmptyArrayStorage;
    goto LABEL_36;
  }
  return result;
}

uint64_t sub_10022A2AC()
{
  uint64_t v0 = type metadata accessor for EpisodePlayState();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    dispatch thunk of EpisodeStateMachine.currentState.getter();
    uint64_t v4 = dispatch thunk of SmartPlayButtonController.buttonTitle(for:)();
    uint64_t v6 = v5;
    sub_10022B6A0((uint64_t)v2, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    v7[1] = v4;
    v7[2] = v6;
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10022A3C0()
{
  sub_100054B1C(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_pageURL, (uint64_t *)&unk_1005F7750);
  swift_release();
  sub_10004D2D8(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeDataProvider);
  swift_release();
  swift_release();
  swift_release();
  sub_10004D2D8(v0 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_imageProvider);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10022A4D0()
{
  sub_10022A3C0();

  return swift_deallocClassInstance();
}

uint64_t sub_10022A528()
{
  return type metadata accessor for CarPlayStoreShowProvider();
}

uint64_t type metadata accessor for CarPlayStoreShowProvider()
{
  uint64_t result = qword_1005FBAC8;
  if (!qword_1005FBAC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10022A57C()
{
  sub_10000927C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10022A654(uint64_t a1, uint64_t a2)
{
  return sub_10022A68C(a1, a2, (uint64_t)&OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeSectionsSubject, &qword_1005F8AF0, &qword_1005F8AF8);
}

uint64_t sub_10022A670(uint64_t a1, uint64_t a2)
{
  return sub_10022A68C(a1, a2, (uint64_t)&OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject, (uint64_t *)&unk_1005F8AE0, &qword_1005F8990);
}

uint64_t sub_10022A68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t sub_10022A70C()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_10022A73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v7 = type metadata accessor for SmartPlayPlatformContext();
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  __chkstk_darwin(v7);
  long long v38 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for SmartPlayContext();
  uint64_t v9 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeSectionsSubject;
  sub_100054B78(&qword_1005F8AF0);
  swift_allocObject();
  *(void *)(v4 + v15) = PassthroughSubject.init()();
  uint64_t v16 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_smartPlayEpisodeTitleSubject;
  *(void *)&v41[0] = 0;
  *((void *)&v41[0] + 1) = 0xE000000000000000;
  sub_100054B78(&qword_1005FBBD8);
  swift_allocObject();
  *(void *)(v4 + v16) = CurrentValueSubject.init(_:)();
  uint64_t v17 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject;
  sub_100054B78((uint64_t *)&unk_1005F8AE0);
  swift_allocObject();
  *(void *)(v4 + v17) = PassthroughSubject.init()();
  uint64_t v18 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_unsupportedSectionIds;
  sub_100054B78((uint64_t *)&unk_1005F83F0);
  uint64_t inited = swift_initStackObject();
  long long v34 = xmmword_10046D030;
  *(_OWORD *)(inited + 16) = xmmword_10046D030;
  *(void *)(inited + 32) = static String.pageHighlightShelfID.getter();
  *(void *)(inited + 40) = v20;
  *(void *)(inited + 48) = static String.loadingShelfID.getter();
  *(void *)(inited + 56) = v21;
  Swift::Int v22 = sub_1001729C8(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  *(void *)(v5 + v18) = v22;
  uint64_t v23 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_supportedItemModelTypes;
  sub_100054B78((uint64_t *)&unk_100600E20);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v34;
  uint64_t v25 = type metadata accessor for ShowHeader();
  uint64_t v26 = sub_10022ACD4(&qword_1005FBBE0, (void (*)(uint64_t))&type metadata accessor for ShowHeader);
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v26;
  uint64_t v27 = type metadata accessor for LegacyEpisodeLockup();
  uint64_t v28 = sub_10022ACD4(&qword_1005FBBE8, (void (*)(uint64_t))&type metadata accessor for LegacyEpisodeLockup);
  *(void *)(v24 + 48) = v27;
  *(void *)(v24 + 56) = v28;
  *(void *)(v5 + v23) = v24;
  uint64_t v29 = OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_updatePlayStateSubject;
  sub_100054B78((uint64_t *)&unk_1005F8B00);
  swift_allocObject();
  *(void *)(v5 + v29) = CurrentValueSubject.init(_:)();
  *(void *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_subscriptions) = _swiftEmptyArrayStorage;
  *(void *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_stateMachine) = 0;
  uint64_t v30 = v35;
  sub_10003B19C(v35, v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_pageURL);
  uint64_t v31 = v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo;
  long long v32 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)a4;
  *(_OWORD *)(v31 + 16) = v32;
  *(_OWORD *)(v31 + 32) = *(_OWORD *)(a4 + 32);
  *(void *)(v31 + 48) = *(void *)(a4 + 48);
  sub_10003B19C(v30, (uint64_t)v14);
  type metadata accessor for StorePageProvider();
  swift_allocObject();
  swift_retain();
  swift_retain();
  *(void *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storePageProvider) = StorePageProvider.init(asPartOf:pageURL:page:)();
  sub_100054B78((uint64_t *)&unk_1005F8B10);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v41, v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeDataProvider);
  sub_100054B78(&qword_1005F7050);
  BaseObjectGraph.inject<A>(_:)();
  *(void *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_playStateController) = *(void *)&v41[0];
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for SmartPlayContext.showPage(_:), v37);
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v38, enum case for SmartPlayPlatformContext.carPlay(_:), v40);
  type metadata accessor for SmartPlayButtonController();
  swift_allocObject();
  swift_retain();
  *(void *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_smartPlayButtonController) = SmartPlayButtonController.init(button:context:platform:objectGraph:)();
  sub_100054B78((uint64_t *)&unk_1005F74C0);
  BaseObjectGraph.inject<A>(_:)();
  *(void *)(v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_downloadStateController) = *(void *)&v41[0];
  sub_100054B78((uint64_t *)&unk_1005FBBF0);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v41, v5 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_imageProvider);
  swift_retain();
  StorePageProvider.viewDidLoad()();
  swift_release();
  sub_100228358();
  sub_100054B1C(v30, (uint64_t *)&unk_1005F7750);
  return v5;
}

uint64_t sub_10022ACD4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10022AD1C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10022AD54@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10022893C(a1, a2);
}

uint64_t sub_10022AD5C(uint64_t a1)
{
  return sub_1002295B4(a1);
}

uint64_t sub_10022AD64()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10022AD9C(void *a1)
{
  return sub_1002E612C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10022ADA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for EpisodePlayState();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EpisodeOffer();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v60 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for ModernShelf.ItemPresentation();
  uint64_t v12 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for ModernShelf();
  uint64_t v15 = __chkstk_darwin(v66);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v20 = *(void *)(a1 + 16);
  if (!v20)
  {
    swift_retain();
LABEL_26:
    *(void *)&v67[0] = _swiftEmptyArrayStorage;
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  uint64_t v57 = a2;
  uint64_t v58 = (char *)&v53 - v18;
  uint64_t v54 = v10;
  uint64_t v55 = v9;
  int v56 = v8;
  uint64_t v59 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v22 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  uint64_t v23 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v24 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v63 = *(void *)(v19 + 72);
  unint64_t v64 = v21;
  uint64_t v62 = a3;
  swift_retain();
  uint64_t v61 = a1;
  swift_bridgeObjectRetain();
  uint64_t v25 = v66;
  while (1)
  {
    v64(v17, v22, v25);
    ModernShelf.itemPresentation.getter();
    ModernShelf.ItemPresentation.itemKind.getter();
    (*v23)(v14, v65);
    uint64_t v26 = ModernShelf.ItemKind.rawValue.getter();
    uint64_t v28 = v27;
    if (v26 == ModernShelf.ItemKind.rawValue.getter() && v28 == v29) {
      break;
    }
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_10;
    }
    uint64_t v25 = v66;
    (*v24)(v17, v66);
    v22 += v63;
    if (!--v20) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v31 = v58;
  uint64_t v32 = v59 + 32;
  uint64_t v33 = v17;
  uint64_t v34 = v66;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v33, v66);
  uint64_t v35 = ModernShelf.items.getter();
  (*(void (**)(char *, uint64_t))(v32 - 24))(v31, v34);
  unint64_t v36 = (unint64_t)sub_1003E4A88(v35);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v36) {
    goto LABEL_26;
  }
  if (!(v36 >> 62))
  {
    if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
LABEL_13:
  if ((v36 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_16:
    swift_bridgeObjectRelease();
    if (ShowHeader.primaryButtonAction.getter())
    {
      type metadata accessor for PlayAction();
      if (swift_dynamicCastClass())
      {
        long long v38 = v60;
        PlayAction.episodeOffer.getter();
        swift_release();
        uint64_t v39 = EpisodeOffer.contentId.getter();
        (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v55);
        uint64_t v40 = v57;
        sub_100229624();
        dispatch thunk of SmartPlayButtonController.apply(model:)();
        uint64_t v41 = *(void *)(v40 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_playStateController);
        EpisodeStateController.stateMachine(for:)();
        uint64_t v42 = (uint64_t)v56;
        dispatch thunk of EpisodeStateMachine.currentState.getter();
        uint64_t v43 = dispatch thunk of SmartPlayButtonController.buttonTitle(for:)();
        uint64_t v45 = v44;
        sub_10022B6A0(v42, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
        *(void *)&v67[0] = v43;
        *((void *)&v67[0] + 1) = v45;
        sub_1001AB688();
        if (Collection.isNotEmpty.getter())
        {
          uint64_t v66 = v41;
          uint64_t v46 = *(void *)(v40 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_didSelectItemSubject);
          uint64_t v65 = v40 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_storeDataProvider;
          Swift::String v47 = (void *)(v40 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_imageProvider);
          long long v48 = *(_OWORD *)(v40 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 16);
          v67[0] = *(_OWORD *)(v40 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo);
          v67[1] = v48;
          v67[2] = *(_OWORD *)(v40 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 32);
          uint64_t v68 = *(void *)(v40 + OBJC_IVAR____TtC8Podcasts24CarPlayStoreShowProvider_deviceInfo + 48);
          uint64_t v49 = swift_allocObject();
          swift_weakInit();
          uint64_t v50 = (void *)swift_allocObject();
          v50[2] = v49;
          uint64_t v51 = v62;
          v50[3] = v61;
          v50[4] = v39;
          v50[5] = sub_10022B50C;
          v50[6] = v51;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          sub_1003789C4(v65, v66, v43, v45, 1, v47, (uint64_t)v67, (uint64_t)sub_10022B700, v46, (uint64_t)sub_10022B590, (uint64_t)v50);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          *(void *)&v67[0] = _swiftEmptyArrayStorage;
          PassthroughSubject.send(_:)();
          swift_release();
        }
        swift_release();
        return swift_release();
      }
      swift_release();
    }
    *(void *)&v67[0] = _swiftEmptyArrayStorage;
    PassthroughSubject.send(_:)();
    swift_release();
    return swift_release();
  }
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10022B50C()
{
  return PassthroughSubject.send(_:)();
}

uint64_t sub_10022B548()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10022B590(void *a1)
{
  return sub_100229714(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32), *(void (**)(unint64_t))(v1 + 40), *(void (**)(void, void, void))(v1 + 48));
}

unint64_t sub_10022B5A4()
{
  unint64_t result = qword_100606330;
  if (!qword_100606330)
  {
    sub_100044244(&qword_1005F93A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100606330);
  }
  return result;
}

uint64_t sub_10022B610@<X0>(uint64_t *a1@<X8>)
{
  return sub_100382840(v1[2], v1[3], v1[4], v1[6], v1[7], a1);
}

uint64_t sub_10022B634()
{
  return sub_10022A2AC();
}

uint64_t sub_10022B63C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModernPage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022B6A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10022B704(void *a1, unint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  int v219 = a5;
  uint64_t v11 = sub_100054B78(&qword_1005F7748);
  __chkstk_darwin(v11 - 8);
  v225 = (char *)v190 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = type metadata accessor for PodcastDetail.DisplayType();
  uint64_t v222 = *(void *)(v223 - 8);
  __chkstk_darwin(v223);
  v224 = (char *)v190 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v216 = type metadata accessor for Logger();
  uint64_t v215 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  v226 = (char *)v190 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = sub_100054B78(&qword_1005FBC48);
  uint64_t v15 = __chkstk_darwin(v214);
  uint64_t v213 = (uint64_t)v190 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v229 = (uint64_t)v190 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v228 = (char *)v190 - v20;
  __chkstk_darwin(v19);
  uint64_t v238 = (uint64_t)v190 - v21;
  uint64_t v245 = type metadata accessor for DarkModeOptions();
  uint64_t v236 = *(void *)(v245 - 8);
  uint64_t v22 = __chkstk_darwin(v245);
  v221 = (char *)v190 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  v237 = (char *)v190 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v227 = (char *)v190 - v27;
  __chkstk_darwin(v26);
  v244 = (char *)v190 - v28;
  uint64_t v29 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v220 = (uint64_t)v190 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v232 = (uint64_t)v190 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v231 = (uint64_t)v190 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  long long v38 = (char *)v190 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v241 = (uint64_t)v190 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v43 = (char *)v190 - v42;
  uint64_t v44 = __chkstk_darwin(v41);
  uint64_t v240 = (uint64_t)v190 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  long long v48 = (char *)v190 - v47;
  __chkstk_darwin(v46);
  uint64_t v239 = (uint64_t)v190 - v49;
  uint64_t v50 = sub_100054B78(&qword_1005F76A0);
  uint64_t v51 = __chkstk_darwin(v50 - 8);
  v235 = (char *)v190 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v234 = (uint64_t)v190 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  uint64_t v233 = (uint64_t)v190 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  uint64_t v243 = (uint64_t)v190 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v61 = (char *)v190 - v60;
  __chkstk_darwin(v59);
  uint64_t v242 = (uint64_t)v190 - v62;
  id v63 = [a1 uuid];
  if (!v63)
  {

    swift_bridgeObjectRelease();
    return (uint64_t)v63;
  }
  id v230 = a3;
  uint64_t v208 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v207 = v64;

  uint64_t v206 = MTPodcast.adamId.getter();
  int v202 = v65;
  id v66 = [a1 title];
  if (v66)
  {
    uint64_t v67 = v66;
    uint64_t v205 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v204 = v68;
  }
  else
  {
    uint64_t v205 = 0;
    uint64_t v204 = 0;
  }
  uint64_t v209 = a4;
  uint64_t v210 = v6;
  [a1 addedDate];
  id v69 = [a1 bestDescription];
  if (v69)
  {
    v70 = v69;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v71 = (objc_class *)type metadata accessor for LanguageAwareString();
    static LanguageAwareString.alwaysGenerateAttributedString.getter();
    id v72 = objc_allocWithZone(v71);
    uint64_t v203 = LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)();
  }
  else
  {
    uint64_t v203 = 0;
  }
  id v73 = [a1 author];
  if (v73)
  {
    v74 = v73;
    uint64_t v201 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v200 = v75;
  }
  else
  {
    uint64_t v201 = 0;
    uint64_t v200 = 0;
  }
  id v76 = [a1 provider];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v199 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v198 = v78;
  }
  else
  {
    uint64_t v199 = 0;
    uint64_t v198 = 0;
  }
  if ([a1 isSerialShowTypeInFeed]) {
    goto LABEL_16;
  }
  if ((uint64_t)[a1 newEpisodesCount] < 1)
  {
    if ((uint64_t)[a1 newTrailersCount] < 1)
    {
LABEL_16:
      uint64_t v197 = 0;
      uint64_t v196 = 0;
      goto LABEL_22;
    }
    id v84 = [self mainBundle];
    v251._object = (void *)0xE000000000000000;
    v85._object = (void *)0x80000001004D7C70;
    v85._uint64_t countAndFlagsBits = 0xD000000000000013;
    v86._uint64_t countAndFlagsBits = 0;
    v86._object = (void *)0xE000000000000000;
    v251._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v85, (Swift::String_optional)0, (NSBundle)v84, v86, v251);

    sub_100054B78(&qword_1005F7720);
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_10046D010;
    id v83 = [a1 newTrailersCount];
  }
  else
  {
    id v79 = [self mainBundle];
    v250._object = (void *)0xE000000000000000;
    v80._object = (void *)0x80000001004D7C90;
    v80._uint64_t countAndFlagsBits = 0xD000000000000013;
    v81._uint64_t countAndFlagsBits = 0;
    v81._object = (void *)0xE000000000000000;
    v250._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v80, (Swift::String_optional)0, (NSBundle)v79, v81, v250);

    sub_100054B78(&qword_1005F7720);
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_10046D010;
    id v83 = [a1 newEpisodesCount];
  }
  *(void *)(v82 + 56) = &type metadata for Int64;
  *(void *)(v82 + 64) = &protocol witness table for Int64;
  *(void *)(v82 + 32) = v83;
  uint64_t v197 = String.init(format:_:)();
  uint64_t v196 = v87;
  swift_bridgeObjectRelease();
LABEL_22:
  id v88 = [a1 artworkPrimaryColor];
  if (v88)
  {
    v89 = v88;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v90 = (void *)Color.init(descriptor:)();
    int v217 = v95;
    uint64_t v191 = 0;
    uint64_t v96 = (uint64_t)v38;
    id v218 = v90;
  }
  else
  {
    uint64_t v191 = 0;
    sub_10004D29C(0, &qword_1005FBC50);
    id v91 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
    id v92 = [a1 uuid];
    id v93 = [v91 colorThemeForPodcastUuid:v92];

    id v94 = [v93 backgroundColor];
    if (!v94) {
      id v94 = [self whiteColor];
    }
    uint64_t v96 = (uint64_t)v38;
    id v218 = [v94 CGColor];

    int v217 = 1;
  }
  MTPodcast.artworkModel.getter();
  uint64_t v97 = type metadata accessor for ArtworkModel();
  uint64_t v98 = *(void *)(v97 - 8);
  int v99 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48))(v61, 1, v97);
  uint64_t v212 = v97;
  if (v99 == 1)
  {
    sub_100054B1C((uint64_t)v61, &qword_1005F76A0);
    v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
    uint64_t v101 = v242;
    uint64_t v102 = 1;
  }
  else
  {
    uint64_t v103 = v242;
    ArtworkModel.with(backgroundColor:)();
    sub_10022D86C((uint64_t)v61);
    v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
    uint64_t v101 = v103;
    uint64_t v102 = 0;
  }
  v211 = v100;
  v100((char *)v101, v102, 1, v97);
  MTPodcast.uberBackgroundArtworkModel.getter();
  id v104 = [a1 bestAvailableStoreCleanURL];
  if (v104)
  {
    v105 = v104;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v106 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v48, 0, 1, v106);
  }
  else
  {
    uint64_t v107 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v48, 1, 1, v107);
  }
  sub_100222DB4((uint64_t)v48, v239);
  id v108 = [a1 webpageURL];
  uint64_t v109 = (uint64_t)v228;
  if (!v108) {
    goto LABEL_36;
  }
  v110 = v108;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v111 = type metadata accessor for URL();
  uint64_t v112 = *(void *)(v111 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v43, 1, v111) == 1)
  {
    sub_100054B1C((uint64_t)v43, (uint64_t *)&unk_1005F7750);
LABEL_36:
    uint64_t v113 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v240, 1, 1, v113);
    goto LABEL_38;
  }
  uint64_t v114 = v240;
  (*(void (**)(uint64_t, char *, uint64_t))(v112 + 32))(v240, v43, v111);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v112 + 56))(v114, 0, 1, v111);
LABEL_38:
  id v115 = [a1 bestFeedURLExcludingRedirectURL:0];
  if (v115)
  {
    v116 = v115;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v117 = type metadata accessor for URL();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v96, 0, 1, v117);
  }
  else
  {
    uint64_t v118 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 56))(v96, 1, 1, v118);
  }
  sub_100222DB4(v96, v241);
  *(void *)&long long v246 = _swiftEmptyArrayStorage;
  sub_10022D8C8(&qword_1005FBC58);
  sub_100054B78(&qword_1005FBC60);
  sub_10022D7FC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  if ([a1 isAuthenticatedDark])
  {
    uint64_t v119 = (uint64_t)v237;
    static DarkModeOptions.authenticated.getter();
    v120 = v227;
    sub_10022D524(v227, v119);
    v121 = *(void (**)(uint64_t, uint64_t))(v236 + 8);
    uint64_t v122 = v119;
    uint64_t v123 = v245;
    v121(v122, v245);
    v121((uint64_t)v120, v123);
  }
  if ([a1 isPastAutodownloadOrEpisodeLimitDark])
  {
    uint64_t v124 = (uint64_t)v237;
    static DarkModeOptions.autoDownload.getter();
    v125 = v227;
    sub_10022D524(v227, v124);
    v126 = *(void (**)(uint64_t, uint64_t))(v236 + 8);
    uint64_t v127 = v124;
    uint64_t v128 = v245;
    v126(v127, v245);
    v126((uint64_t)v125, v128);
  }
  id v129 = v230;
  if (v230)
  {
    type metadata accessor for Episode();
    uint64_t v248 = 0;
    long long v246 = 0u;
    long long v247 = 0u;
    uint64_t v195 = Episode.init(from:clickAction:wantsListenNowReason:)(v129, (uint64_t)&v246, 0);
  }
  else
  {
    uint64_t v195 = 0;
  }
  id v130 = [a1 displayType];
  if (v130)
  {
    v131 = v130;
    uint64_t v194 = MTDisplayTypeFromPersistentString();
  }
  else
  {
    uint64_t v194 = 0;
  }
  LODWORD(v227) = [a1 isExplicit];
  unsigned int v132 = [a1 offerTypes];
  id v133 = [a1 channel];
  if (v133)
  {
    v134 = v133;
    unsigned int v135 = [v133 subscriptionActive];

    int v193 = v135 & (v132 >> 1);
  }
  else
  {
    int v193 = 0;
  }
  id v136 = [a1 channel];
  if (v136)
  {
    v137 = v136;
    type metadata accessor for ChannelDetail();
    uint64_t v192 = sub_1003A9830(v137);
  }
  else
  {
    uint64_t v192 = 0;
  }
  v138 = v226;
  v237 = a1;
  uint64_t v139 = v238;
  PodcastStateModel.init(podcast:)();
  sub_100054BBC(v139, v109, &qword_1005FBC48);
  uint64_t v140 = type metadata accessor for PodcastStateModel();
  uint64_t v141 = *(void *)(v140 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v109, 1, v140) == 1)
  {
    sub_100054B1C(v109, &qword_1005FBC48);
  }
  else
  {
    uint64_t v142 = v191;
    int v143 = PodcastStateModel.sanitizedState()();
    if (!v142)
    {
      LODWORD(v216) = v143;
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v109, v140);
      goto LABEL_66;
    }
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v109, v140);
  }
  static Logger.database.getter();
  v144 = v237;
  uint64_t v145 = v229;
  sub_100054BBC(v238, v229, &qword_1005FBC48);
  v146 = v144;
  v147 = Logger.logObject.getter();
  int v148 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v147, (os_log_type_t)v148))
  {

    sub_100054B1C(v145, &qword_1005FBC48);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v138, v216);
    LODWORD(v216) = 3;
LABEL_66:
    v155 = v211;
    goto LABEL_75;
  }
  LODWORD(v228) = v148;
  uint64_t v149 = swift_slowAlloc();
  v226 = (char *)swift_slowAlloc();
  v249 = v226;
  *(_DWORD *)uint64_t v149 = 136381699;
  id v150 = [v146 title];
  if (v150)
  {
    v151 = v150;
    uint64_t v152 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v154 = v153;
  }
  else
  {
    uint64_t v152 = 0;
    uint64_t v154 = 0;
  }
  *(void *)&long long v246 = v152;
  *((void *)&v246 + 1) = v154;
  sub_100054B78(&qword_1005F93A0);
  uint64_t v156 = String.init<A>(describing:)();
  *(void *)&long long v246 = sub_10004B974(v156, v157, (uint64_t *)&v249);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v149 + 12) = 2080;
  id v158 = [v146 uuid];
  v190[1] = v98;
  if (v158)
  {
    v159 = v158;
    uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v162 = v161;
  }
  else
  {
    uint64_t v160 = 0;
    uint64_t v162 = 0;
  }
  *(void *)&long long v246 = v160;
  *((void *)&v246 + 1) = v162;
  uint64_t v163 = String.init<A>(describing:)();
  *(void *)&long long v246 = sub_10004B974(v163, v164, (uint64_t *)&v249);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v149 + 22) = 2081;
  *(void *)&long long v246 = [v146 storeCollectionId];
  uint64_t v165 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)&long long v246 = sub_10004B974(v165, v166, (uint64_t *)&v249);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v149 + 32) = 2081;
  id v167 = [v146 feedURL];
  if (v167)
  {
    v168 = v167;
    uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v171 = v170;
  }
  else
  {
    uint64_t v169 = 0;
    uint64_t v171 = 0;
  }
  *(void *)&long long v246 = v169;
  *((void *)&v246 + 1) = v171;
  uint64_t v172 = String.init<A>(describing:)();
  *(void *)&long long v246 = sub_10004B974(v172, v173, (uint64_t *)&v249);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v149 + 42) = 2080;
  uint64_t v174 = v229;
  sub_100054BBC(v229, v213, &qword_1005FBC48);
  uint64_t v175 = String.init<A>(describing:)();
  *(void *)&long long v246 = sub_10004B974(v175, v176, (uint64_t *)&v249);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100054B1C(v174, &qword_1005FBC48);
  _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v228, "Podcast %{private}s, uuid: %s, adamID: %{private}s, feedURL: %{private}s; Can't get a sanitized state from it, podca"
    "stsStateModel: %s",
    (uint8_t *)v149,
    0x34u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v215 + 8))(v138, v216);
  LODWORD(v216) = 3;
  v155 = v211;
LABEL_75:
  sub_100054BBC(v242, v233, &qword_1005F76A0);
  sub_100054BBC(v243, v234, &qword_1005F76A0);
  v155(v235, 1, 1, v212);
  unsigned int v177 = [v237 isSerialShowTypeInFeed];
  uint64_t v178 = MTPodcast.episodeUserFilter.getter();
  LODWORD(v229) = v177;
  v228 = (char *)v178;
  LODWORD(v226) = v179;
  if (!a2)
  {
    uint64_t v214 = 0;
LABEL_93:
    LODWORD(v215) = v219 & 1;
    int v219 = v202 & 1;
    sub_100054BBC(v239, v231, (uint64_t *)&unk_1005F7750);
    sub_100054BBC(v240, v232, (uint64_t *)&unk_1005F7750);
    sub_100054BBC(v241, v220, (uint64_t *)&unk_1005F7750);
    uint64_t v185 = v236;
    (*(void (**)(char *, char *, uint64_t))(v236 + 16))(v221, v244, v245);
    id v186 = v237;
    [v237 lastDatePlayed];
    [v186 hidesPlayedEpisodes];
    MTPodcast.episodeSortType.getter();
    v187 = (unsigned int *)&enum case for PodcastDetail.DisplayType.paid(_:);
    v188 = (unsigned int *)&enum case for PodcastDetail.DisplayType.hybrid(_:);
    if (v194 != 2) {
      v188 = (unsigned int *)&enum case for PodcastDetail.DisplayType.free(_:);
    }
    if (v194 != 1) {
      v187 = v188;
    }
    (*(void (**)(char *, void, uint64_t))(v222 + 104))(v224, *v187, v223);
    uint64_t v189 = type metadata accessor for ImpressionMetrics();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v189 - 8) + 56))(v225, 1, 1, v189);
    id v63 = (id)dispatch thunk of PodcastDetail.__allocating_init(uuid:adamId:title:podcastState:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:episodeToPlay:seasonToShow:isSerialShowTypeInFeed:episodeUserFilter:episodes:storeUrl:webpageUrl:feedUrl:offerAction:darkModeOptions:hasEverPlayed:hidesPlayedEpisodes:sort:displayType:channel:isExplicit:impressionMetrics:)();

    sub_10022D858(v218, v217);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v244, v245);
    sub_100054B1C(v241, (uint64_t *)&unk_1005F7750);
    sub_100054B1C(v240, (uint64_t *)&unk_1005F7750);
    sub_100054B1C(v239, (uint64_t *)&unk_1005F7750);
    sub_100054B1C(v243, &qword_1005F76A0);
    sub_100054B1C(v242, &qword_1005F76A0);
    sub_100054B1C(v238, &qword_1005FBC48);
    return (uint64_t)v63;
  }
  v249 = (char *)_swiftEmptyArrayStorage;
  if (!(a2 >> 62))
  {
    uint64_t v180 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v180) {
      goto LABEL_78;
    }
LABEL_91:
    swift_bridgeObjectRelease();
    v184 = (char *)_swiftEmptyArrayStorage;
LABEL_92:
    uint64_t v214 = (uint64_t)v184;
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
  swift_bridgeObjectRetain();
  uint64_t v180 = _CocoaArrayWrapper.endIndex.getter();
  if (!v180) {
    goto LABEL_91;
  }
LABEL_78:
  uint64_t result = type metadata accessor for Episode();
  if (v180 >= 1)
  {
    for (uint64_t i = 0; i != v180; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v183 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v183 = *(id *)(a2 + 8 * i + 32);
      }
      uint64_t v248 = 0;
      long long v246 = 0u;
      long long v247 = 0u;
      if (Episode.init(from:clickAction:wantsListenNowReason:)(v183, (uint64_t)&v246, 0))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)v249 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v249 & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v184 = v249;
    goto LABEL_92;
  }
  __break(1u);
  return result;
}

unint64_t sub_10022D330(void *a1)
{
  if ([v1 showTypeInFeedResolvedValue] != (id)2) {
    return 0;
  }
  if (a1)
  {
    id v3 = [a1 seasonNumber];
    if (v3) {
      return (unint64_t)v3;
    }
  }
  id v5 = [v1 seasonNumbers];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  sub_10004D29C(0, (unint64_t *)&unk_1005F9460);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t result = (unint64_t)[v1 showTypeUserSetting];
  unint64_t v9 = v7 >> 62;
  if (result == 4)
  {
    if (v9)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t result = swift_bridgeObjectRelease();
      if (v14)
      {
LABEL_9:
        if ((v7 & 0xC000000000000001) == 0)
        {
          if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v10 = *(void **)(v7 + 32);
LABEL_19:
            id v12 = v10;
LABEL_20:
            uint64_t v13 = v12;
            swift_bridgeObjectRelease();
            id v4 = [v13 longLongValue];

            return (unint64_t)v4;
          }
          __break(1u);
          goto LABEL_29;
        }
        goto LABEL_27;
      }
    }
    else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  if (!v9)
  {
    uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11) {
      goto LABEL_14;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_24;
  }
LABEL_14:
  unint64_t result = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_27:
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_20;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (result < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v10 = *(void **)(v7 + 8 * result + 32);
    goto LABEL_19;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10022D524(char *a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t v4 = sub_100054B78(&qword_1005FBC70);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v26 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = type metadata accessor for DarkModeOptions();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v25 = v2;
  v16(v13, v2, v9);
  uint64_t v23 = sub_10022D8C8(&qword_1005FBC58);
  dispatch thunk of SetAlgebra.intersection(_:)();
  sub_10022D8C8(&qword_1005FBC78);
  uint64_t v24 = a2;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  uint64_t v27 = v4;
  uint64_t v18 = &v8[*(int *)(v4 + 48)];
  unsigned char *v8 = v17 & 1;
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v20 = v24;
    v16(v18, v24, v9);
    v16(v13, v20, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)();
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v19(v18, v15, v9);
  }
  uint64_t v21 = &v26[*(int *)(v27 + 48)];
  v19(v21, v18, v9);
  v19(v28, v21, v9);
  return v17 & 1;
}

unint64_t sub_10022D7FC()
{
  unint64_t result = qword_1005FBC68;
  if (!qword_1005FBC68)
  {
    sub_100044244(&qword_1005FBC60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FBC68);
  }
  return result;
}

void sub_10022D858(id a1, char a2)
{
  if (a2 == 1) {
}
  }

uint64_t sub_10022D86C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ArtworkModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10022D8C8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DarkModeOptions();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10022D90C()
{
  uint64_t v1 = sub_100054B78(&qword_1005FBDA8);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v15[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + 64);
  if (v8)
  {
    unint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = *(void *)(v8 + 24);
    char v11 = *(unsigned char *)(v8 + 32);
    sub_1001DCD9C(v9, v10, v11);
    sub_10022DAB8(v9, v10, v11, (uint64_t)v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_100054B1C((uint64_t)v3, &qword_1005FBDA8);
      LOBYTE(v8) = 0;
    }
    else
    {
      sub_10022F6C0((uint64_t)v3, (uint64_t)v7);
      sub_10022EF50(v15);
      char v12 = PodcastState.isSubscribed.getter();
      sub_1001E2BF8((uint64_t)v15);
      sub_10022F724((uint64_t)v7);
      LOBYTE(v8) = v12 ^ 1;
    }
  }
  return v8 & 1;
}

uint64_t sub_10022DAB8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v7 = type metadata accessor for ShowOffer();
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100054B78(&qword_1005FBDA8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = type metadata accessor for EpisodeOffer();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  uint64_t v57 = *(void *)(v23 - 8);
  uint64_t v58 = v23;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a3)
  {
    case 1:
      if (*(void *)(a1 + 16) != 1)
      {
        uint64_t v44 = 1;
        sub_1001DCDF8(a1, a2, 1u);
        goto LABEL_39;
      }
      uint64_t v37 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v22, a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)), v19);
      EpisodeOffer.showOffer.getter();
      sub_10022E47C((uint64_t)v9, (uint64_t)v18);
      sub_1001DCDF8(a1, a2, 1u);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      uint64_t v36 = v57;
      uint64_t v34 = v58;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v18, 1, v58))
      {
        uint64_t v38 = (uint64_t)v18;
        goto LABEL_24;
      }
      uint64_t v48 = (uint64_t)v18;
      uint64_t v33 = (uint64_t)v37;
      uint64_t v49 = (uint64_t)v37;
      goto LABEL_30;
    case 2:
      if (!(a1 >> 62))
      {
        if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1) {
          goto LABEL_11;
        }
LABEL_34:
        uint64_t v45 = a1;
        uint64_t v46 = a2;
        unsigned __int8 v47 = 2;
        goto LABEL_38;
      }
      uint64_t v13 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
      sub_1001DCDF8(a1, a2, 2u);
      if (v50 != 1) {
        goto LABEL_34;
      }
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
      sub_1001DCDF8(a1, a2, 2u);
      uint64_t v25 = v13;
      if (!v51) {
        goto LABEL_34;
      }
LABEL_11:
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v33 = (uint64_t)v25;
        id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_14;
      }
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v33 = (uint64_t)v25;
        id v39 = *(id *)(a1 + 32);
LABEL_14:
        sub_10022E714(v39, (uint64_t)v16);
        sub_1001DCDF8(a1, a2, 2u);
        uint64_t v36 = v57;
        uint64_t v34 = v58;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v16, 1, v58))
        {
          uint64_t v38 = (uint64_t)v16;
          goto LABEL_24;
        }
        uint64_t v48 = (uint64_t)v16;
        uint64_t v49 = v33;
LABEL_30:
        sub_10022F6C0(v48, v49);
        uint64_t v35 = v59;
LABEL_31:
        sub_10022F6C0(v33, v35);
        uint64_t v44 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v35, v44, 1, v34);
      }
      __break(1u);
LABEL_43:
      uint64_t v40 = v25;
      id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_21:
      uint64_t v42 = v41;
      uint64_t v43 = (void *)MPCPlayerResponseItem.podcastEpisode.getter();

      if (v43)
      {
        sub_10022EA70(v43, (uint64_t)v13);
        sub_1001DCDF8(a1, a2, 3u);
        uint64_t v36 = v57;
        uint64_t v34 = v58;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v13, 1, v58))
        {
          uint64_t v38 = (uint64_t)v13;
LABEL_24:
          sub_100054B1C(v38, &qword_1005FBDA8);
          uint64_t v44 = 1;
          uint64_t v35 = v59;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v35, v44, 1, v34);
        }
        uint64_t v48 = (uint64_t)v13;
        uint64_t v33 = (uint64_t)v40;
        uint64_t v49 = (uint64_t)v40;
        goto LABEL_30;
      }
LABEL_37:
      uint64_t v45 = a1;
      uint64_t v46 = a2;
      unsigned __int8 v47 = 3;
LABEL_38:
      sub_1001DCDF8(v45, v46, v47);
      uint64_t v44 = 1;
LABEL_39:
      uint64_t v34 = v58;
      uint64_t v35 = v59;
      uint64_t v36 = v57;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v35, v44, 1, v34);
    case 3:
      if (a1 >> 62)
      {
        uint64_t v52 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        swift_bridgeObjectRetain();
        uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
        sub_1001DCDF8(a1, a2, 3u);
        if (v53 != 1) {
          goto LABEL_37;
        }
        swift_bridgeObjectRetain();
        uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
        sub_1001DCDF8(a1, a2, 3u);
        uint64_t v25 = v52;
        if (!v54) {
          goto LABEL_37;
        }
      }
      else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1)
      {
        goto LABEL_37;
      }
      if ((a1 & 0xC000000000000001) != 0) {
        goto LABEL_43;
      }
      if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        JUMPOUT(0x10022E108);
      }
      uint64_t v40 = v25;
      id v41 = *(id *)(a1 + 32);
      goto LABEL_21;
    default:
      if (*(void *)(a1 + 16) == 1)
      {
        uint64_t v26 = (uint64_t *)((char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v27 = (void *)sub_10040241C((void *)a1, a2, 0);
        if (v27)
        {
          uint64_t v28 = v27;
          id v29 = [v27 podcastUuid];

          if (v29)
          {
            uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v32 = v31;
            sub_1001DCDF8(a1, a2, 0);

            uint64_t v33 = (uint64_t)v26;
            *uint64_t v26 = v30;
            v26[1] = v32;
            uint64_t v34 = v58;
            swift_storeEnumTagMultiPayload();
            uint64_t v35 = v59;
            uint64_t v36 = v57;
            goto LABEL_31;
          }
        }
      }
      uint64_t v45 = a1;
      uint64_t v46 = a2;
      unsigned __int8 v47 = 0;
      goto LABEL_38;
  }
}

uint64_t sub_10022E118()
{
  uint64_t v1 = sub_100054B78(&qword_1005FBDA8);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v0 + 64);
  if (v9)
  {
    unint64_t v10 = *(void *)(v9 + 16);
    uint64_t v11 = *(void *)(v9 + 24);
    char v12 = *(unsigned char *)(v9 + 32);
    sub_1001DCD9C(v10, v11, v12);
    sub_10022DAB8(v10, v11, v12, (uint64_t)v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      return sub_100054B1C((uint64_t)v3, &qword_1005FBDA8);
    }
    else
    {
      sub_10022F6C0((uint64_t)v3, (uint64_t)v8);
      sub_10022E2A4((void *)(v0 + 16));
      swift_release();
      return sub_10022F724((uint64_t)v8);
    }
  }
  return result;
}

uint64_t sub_10022E2A4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10022F780(v2, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_100054B78(&qword_1005FBDB0);
    sub_100222DB4((uint64_t)&v9[*(int *)(v10 + 48)], (uint64_t)v6);
    sub_100041A98(a1, a1[3]);
    uint64_t v11 = dispatch thunk of LibraryActionControllerProtocol.subscribe(feedUrl:adamId:location:explicit:displaySuccessHUD:)();
    swift_bridgeObjectRelease();
    sub_100054B1C((uint64_t)v6, (uint64_t *)&unk_1005F7750);
  }
  else
  {
    sub_100041A98(a1, a1[3]);
    uint64_t v11 = dispatch thunk of LibraryActionControllerProtocol.subscribe(podcast:displaySuccessHUD:)();
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_10022E47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  ShowOffer.adamId.getter();
  if (AdamID.isEmpty.getter())
  {
    uint64_t v7 = type metadata accessor for ShowOffer();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
    return v8(a2, 1, 1, v4);
  }
  else
  {
    uint64_t v10 = sub_100054B78(&qword_1005FBDB0);
    uint64_t *v6 = ShowOffer.adamId.getter();
    ShowOffer.feedUrl.getter();
    if (ShowOffer.contentRating.getter() == 2)
    {
      char v11 = 0;
    }
    else
    {
      uint64_t v12 = ContentRating.rawValue.getter();
      uint64_t v14 = v13;
      char v11 = 1;
      if (v12 != ContentRating.rawValue.getter() || v14 != v15) {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v16 = (uint64_t *)((char *)v6 + *(int *)(v10 + 80));
    *((unsigned char *)v6 + *(int *)(v10 + 64)) = v11 & 1;
    uint64_t v17 = ShowOffer.dzcPageLocation.getter();
    uint64_t v19 = v18;
    uint64_t v20 = type metadata accessor for ShowOffer();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
    *uint64_t v16 = v17;
    v16[1] = v19;
    swift_storeEnumTagMultiPayload();
    sub_10022F6C0((uint64_t)v6, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(a2, 0, 1, v4);
  }
}

uint64_t sub_10022E714@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  [a1 podcastStoreId];
  uint64_t v10 = AdamID.init(rawValue:)();
  if ((AdamID.isEmpty.getter() & 1) == 0)
  {
    uint64_t v13 = (int *)sub_100054B78(&qword_1005FBDB0);
    uint64_t v14 = (char *)v9 + v13[12];
    *uint64_t v9 = v10;
    id v15 = [a1 podcastFeedUrl];
    if (v15)
    {
      uint64_t v16 = v15;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URL.init(string:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = type metadata accessor for URL();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v6, 1, v17) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v6, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
        goto LABEL_10;
      }
      sub_100054B1C((uint64_t)v6, (uint64_t *)&unk_1005F7750);
    }
    uint64_t v19 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v14, 1, 1, v19);
LABEL_10:
    uint64_t v20 = v13[16];
    uint64_t v21 = (uint64_t *)((char *)v9 + v13[20]);
    *((unsigned char *)v9 + v20) = [a1 isExplicit];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    uint64_t *v21 = v22;
    v21[1] = v24;
    swift_storeEnumTagMultiPayload();
    sub_10022F6C0((uint64_t)v9, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(a2, 0, 1, v7);
  }

  char v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);

  return v11(a2, 1, 1, v7);
}

uint64_t sub_10022EA70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  uint64_t v53 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v48 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  uint64_t v55 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v18 = [a1 podcast];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = MPModelObject.adamID.getter();
    char v22 = v21;

    if ((v22 & 1) == 0)
    {
      uint64_t v23 = sub_100054B78(&qword_1005FBDB0);
      uint64_t v24 = (char *)v17 + *(int *)(v23 + 48);
      *uint64_t v17 = v20;
      id v25 = [a1 podcast];
      uint64_t v50 = v23;
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v49 = v24;
        id v27 = [v25 feedURL];

        if (v27)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v28 = v53;
          id v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
          uint64_t v30 = v12;
          uint64_t v31 = 0;
        }
        else
        {
          uint64_t v28 = v53;
          id v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
          uint64_t v30 = v12;
          uint64_t v31 = 1;
        }
        uint64_t v36 = v52;
        v29(v30, v31, 1, v52);
        sub_100222DB4((uint64_t)v12, (uint64_t)v14);
        uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
        if (v37((uint64_t)v14, 1, v36))
        {
          sub_100054B1C((uint64_t)v14, (uint64_t *)&unk_1005F7750);
          uint64_t v35 = v54;
          uint64_t v24 = v49;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v6, v14, v36);
          sub_100054B1C((uint64_t)v14, (uint64_t *)&unk_1005F7750);
          URL.absoluteString.getter();
          (*(void (**)(char *, uint64_t))(v53 + 8))(v6, v36);
          uint64_t v38 = (uint64_t)v51;
          URL.init(string:)();
          uint64_t v39 = v53;
          swift_bridgeObjectRelease();
          int v40 = v37(v38, 1, v36);
          uint64_t v35 = v54;
          uint64_t v24 = v49;
          if (v40 != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v49, v38, v36);
            id v41 = v24;
            uint64_t v42 = 0;
            goto LABEL_16;
          }
          sub_100054B1C(v38, (uint64_t *)&unk_1005F7750);
        }
      }
      else
      {
        uint64_t v35 = v54;
        id v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
        uint64_t v36 = v52;
      }
      id v41 = v24;
      uint64_t v42 = 1;
LABEL_16:
      v29(v41, v42, 1, v36);
      uint64_t v43 = *(int *)(v50 + 64);
      uint64_t v44 = (uint64_t *)((char *)v17 + *(int *)(v50 + 80));
      *((unsigned char *)v17 + v43) = [a1 isExplicitEpisode];
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v46;

      *uint64_t v44 = v45;
      v44[1] = v47;
      swift_storeEnumTagMultiPayload();
      sub_10022F6C0((uint64_t)v17, v35);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v35, 0, 1, v15);
    }
  }

  uint64_t v32 = v54;
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);

  return v33(v32, 1, 1, v15);
}

uint64_t sub_10022EF50@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10022F780(v1, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = (uint64_t)&v5[*(int *)(sub_100054B78(&qword_1005FBDB0) + 48)];
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 2;
    dispatch thunk of PodcastStateController.stateMachine(for:initialState:)();
    dispatch thunk of PodcastStateMachine.currentState.getter();
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    swift_release();
    uint64_t result = sub_100054B1C(v6, (uint64_t *)&unk_1005F7750);
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 2;
    dispatch thunk of PodcastStateController.stateMachine(for:initialState:)();
    swift_bridgeObjectRelease();
    dispatch thunk of PodcastStateMachine.currentState.getter();
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    uint64_t result = swift_release();
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  a1[4] = v11;
  return result;
}

uint64_t sub_10022F0D4()
{
  sub_10004D2D8(v0 + 16);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SubscribeEpisodeContextAction()
{
  return self;
}

uint64_t sub_10022F148()
{
  return swift_retain();
}

uint64_t sub_10022F150(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t sub_10022F160()
{
  id v0 = [self mainBundle];
  v5._object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x535F574F4C4C4F46;
  v1._object = (void *)0xEB00000000574F48;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_10022F204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsLabel.subscribe(_:);
  uint64_t v3 = type metadata accessor for MetricsLabel();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10022F278@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ContextActionType.subscribeEpisode(_:);
  uint64_t v3 = type metadata accessor for ContextActionType();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t sub_10022F358(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100267180(a1, a2, WitnessTable);
}

uint64_t sub_10022F3B8()
{
  return swift_retain();
}

uint64_t sub_10022F3F0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 72) = a1;
  return swift_release();
}

uint64_t (*sub_10022F438())()
{
  return j__swift_endAccess;
}

void *sub_10022F48C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266A1C(a1, a2, WitnessTable);
}

uint64_t sub_10022F4EC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266B78(a1, a2, WitnessTable);
}

id sub_10022F54C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266E10(a1, a2, WitnessTable);
}

uint64_t sub_10022F5AC(uint64_t a1)
{
  uint64_t result = sub_10022F634((unint64_t *)&unk_100608BD0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10022F5F0(uint64_t a1)
{
  uint64_t result = sub_10022F634(&qword_1005FBDA0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10022F634(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SubscribeEpisodeContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer()
{
  uint64_t result = qword_1005FBE28;
  if (!qword_1005FBE28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10022F6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022F724(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10022F780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SubscribeEpisodeContextAction.SubscribeOffer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_10022F7E4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = (int *)sub_100054B78(&qword_1005FBDB0);
      uint64_t v8 = v7[12];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = sub_100054B78((uint64_t *)&unk_1005F7750);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *((unsigned char *)a1 + v7[16]) = *((unsigned char *)a2 + v7[16]);
      uint64_t v15 = v7[20];
      uint64_t v16 = (void *)((char *)a1 + v15);
      uint64_t v17 = (void *)((char *)a2 + v15);
      uint64_t v18 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v18;
      swift_bridgeObjectRetain();
    }
    else
    {
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10022F9CC(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = a1 + *(int *)(sub_100054B78(&qword_1005FBDB0) + 48);
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v4 = *(void *)(v3 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    }
  }

  return swift_bridgeObjectRelease();
}

void *sub_10022FAB0(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    int v5 = (int *)sub_100054B78(&qword_1005FBDB0);
    uint64_t v6 = v5[12];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      uint64_t v11 = sub_100054B78((uint64_t *)&unk_1005F7750);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    *((unsigned char *)a1 + v5[16]) = *((unsigned char *)a2 + v5[16]);
    uint64_t v12 = v5[20];
    uint64_t v13 = (void *)((char *)a1 + v12);
    uint64_t v14 = (void *)((char *)a2 + v12);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
  }
  else
  {
    a1[1] = a2[1];
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10022FC40(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10022F724((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      int v5 = (int *)sub_100054B78(&qword_1005FBDB0);
      uint64_t v6 = v5[12];
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_100054B78((uint64_t *)&unk_1005F7750);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      *((unsigned char *)a1 + v5[16]) = *((unsigned char *)a2 + v5[16]);
      uint64_t v12 = v5[20];
      uint64_t v13 = (void *)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      void *v13 = *v14;
      v13[1] = v14[1];
    }
    else
    {
      a1[1] = a2[1];
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10022FDE8(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = (int *)sub_100054B78(&qword_1005FBDB0);
    uint64_t v7 = v6[12];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100054B78((uint64_t *)&unk_1005F7750);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *((unsigned char *)a1 + v6[16]) = *((unsigned char *)a2 + v6[16]);
    *(_OWORD *)((char *)a1 + v6[20]) = *(_OWORD *)((char *)a2 + v6[20]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10022FF7C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10022F724((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = (int *)sub_100054B78(&qword_1005FBDB0);
      uint64_t v7 = v6[12];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for URL();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = sub_100054B78((uint64_t *)&unk_1005F7750);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *((unsigned char *)a1 + v6[16]) = *((unsigned char *)a2 + v6[16]);
      *(_OWORD *)((char *)a1 + v6[20]) = *(_OWORD *)((char *)a2 + v6[20]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_100230120()
{
  uint64_t v2 = &unk_1004703E0;
  sub_10000927C();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    uint64_t v3 = &v1;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_1002301F4@<X0>(uint64_t a1@<X8>)
{
  v19[3] = a1;
  uint64_t v1 = type metadata accessor for ActionMetrics();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_100054B78(&qword_1005F76A0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  int v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)v19 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v19 - v9;
  uint64_t v11 = type metadata accessor for ArtworkModel();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v19[2] = v10;
  v12(v10, 1, 1, v11);
  sub_100054B78(&qword_1005FBE60);
  v19[1] = type metadata accessor for ActionMenu.Child();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10046D010;
  id v13 = [self mainBundle];
  v22._object = (void *)0xEB000000006E6F69;
  v14._object = (void *)0x80000001004D7CE0;
  v14._uint64_t countAndFlagsBits = 0xD000000000000012;
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0x746174532077654ELL;
  v19[0] = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v22)._countAndFlagsBits;

  v12(v8, 1, 1, v11);
  LOBYTE(v11) = static Link.Presentation.textFollowsTintColor.getter();
  Link.Presentation.init(rawValue:)();
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v11) {
    Link.Presentation.init(rawValue:)();
  }
  static ActionMetrics.notInstrumented.getter();
  uint64_t v16 = type metadata accessor for ClosureAction();
  swift_allocObject();
  uint64_t v17 = ClosureAction.init(title:presentationStyle:actionMetrics:closure:)();
  v21[3] = v16;
  v21[4] = sub_100231B94(&qword_1005F8FD8, (void (*)(uint64_t))&type metadata accessor for ClosureAction);
  v21[0] = v17;
  ActionMenu.ID.init()();
  sub_100054BBC((uint64_t)v8, (uint64_t)v5, &qword_1005F76A0);
  sub_100054BBC((uint64_t)v21, (uint64_t)v20, (uint64_t *)&unk_1005F89E0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ActionMenu.Item.init(id:title:icon:role:state:action:)();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100054B1C((uint64_t)v8, &qword_1005F76A0);
  sub_100054B1C((uint64_t)v21, (uint64_t *)&unk_1005F89E0);
  ActionMenu.ID.init()();
  return ActionMenu.init(id:title:subtitle:icon:children:)();
}

void sub_100230608()
{
  id v0 = [objc_allocWithZone((Class)MTAddPodcastOrStationController) init];
  [v0 presentAddStationUI];
}

uint64_t sub_100230660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v36 = type metadata accessor for Glyph.Settings();
  uint64_t v46 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v45 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Glyph();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_1005F76A0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = type metadata accessor for ActionMenu.Child();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v35 = (uint64_t)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = type metadata accessor for ArtworkModel();
  uint64_t v19 = *(void *)(v18 - 8);
  int v40 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 56);
  uint64_t v41 = v18;
  uint64_t v39 = v19 + 56;
  v40(v11, 1, 1);
  sub_100054B78(&qword_1005FBE60);
  uint64_t v20 = *(void *)(v13 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_10046D030;
  unint64_t v23 = v22 + v21;
  sub_100230BA4(v22 + v21);
  uint64_t v38 = a1;
  sub_100231208(a1, v23 + v20);
  ActionMenu.ID.init()();
  sub_100054BBC((uint64_t)v11, (uint64_t)v9, &qword_1005F76A0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ActionMenu.init(id:title:subtitle:icon:children:)();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100054B1C((uint64_t)v11, &qword_1005F76A0);
  unint64_t v24 = sub_1002EFB20(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v26 = *(void *)(v24 + 16);
  unint64_t v25 = *(void *)(v24 + 24);
  if (v26 >= v25 >> 1) {
    unint64_t v24 = sub_1002EFB20(v25 > 1, v26 + 1, 1, v24);
  }
  *(void *)(v24 + 16) = v26 + 1;
  sub_100231B28((uint64_t)v17, v24 + v21 + v26 * v20);
  unint64_t v27 = dispatch thunk of StationDetail.episodes.getter();
  if (v27)
  {
    uint64_t v28 = v36;
    if (v27 >> 62) {
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v29)
    {
      sub_10023177C();
      unint64_t v31 = *(void *)(v24 + 16);
      unint64_t v30 = *(void *)(v24 + 24);
      if (v31 >= v30 >> 1) {
        unint64_t v24 = sub_1002EFB20(v30 > 1, v31 + 1, 1, v24);
      }
      *(void *)(v24 + 16) = v31 + 1;
      sub_100231B28(v35, v24 + v21 + v31 * v20);
    }
  }
  else
  {
    uint64_t v28 = v36;
  }
  uint64_t v32 = v42;
  static Glyph.HeaderButtons.more.getter();
  uint64_t v33 = v45;
  Glyph.settings.getter();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
  Glyph.Settings.name.getter();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v28);
  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)();
  ((void (*)(char *, void, uint64_t, uint64_t))v40)(v11, 0, 1, v41);
  ActionMenu.ID.init()();
  return ActionMenu.init(id:title:subtitle:icon:children:)();
}

uint64_t sub_100230BA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v1 = type metadata accessor for AlertActionStyle();
  uint64_t v37 = *(void *)(v1 - 8);
  uint64_t v38 = v1;
  __chkstk_darwin(v1);
  uint64_t v41 = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ActionMetrics();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_100054B78(&qword_1005F76A0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v42 = (uint64_t)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v39 = (char *)v35 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v35 - v9;
  uint64_t v11 = self;
  id v12 = [v11 mainBundle];
  v13._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v46._object = (void *)0xEE006E6F69746174;
  v13._object = (void *)0x80000001004D7D40;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0x53206574656C6544;
  Swift::String v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v46);

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)();
  uint64_t v15 = type metadata accessor for ArtworkModel();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v35[1] = v16 + 56;
  uint64_t v36 = v17;
  v17(v10, 0, 1, v15);
  id v18 = [v11 mainBundle];
  v47._object = (void *)0xE000000000000000;
  v19._object = (void *)0x80000001004D7D60;
  v19._uint64_t countAndFlagsBits = 0xD000000000000018;
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v47._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v47);

  sub_100054B78(&qword_1005F7720);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_10046D010;
  uint64_t v22 = StationDetail.title.getter();
  uint64_t v24 = v23;
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_10004DA4C();
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v24;
  String.init(format:_:)();
  v35[0] = v25;
  swift_bridgeObjectRelease();
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_10046D060;
  id v27 = [v11 mainBundle];
  v48._object = (void *)0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0x53206574656C6544;
  v28._object = (void *)0xEE006E6F69746174;
  v29._uint64_t countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v48._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v48);

  unsigned __int8 v30 = static Link.Presentation.alertDestructive.getter();
  Link.Presentation.init(rawValue:)();
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v30) {
    Link.Presentation.init(rawValue:)();
  }
  swift_retain();
  static ActionMetrics.notInstrumented.getter();
  type metadata accessor for ClosureAction();
  swift_allocObject();
  *(void *)(v26 + 32) = ClosureAction.init(title:presentationStyle:actionMetrics:closure:)();
  v45[0] = v26;
  specialized Array._endMutation()();
  v36(v39, 1, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v41, enum case for AlertActionStyle.normal(_:), v38);
  unsigned __int8 v31 = static Link.Presentation.textFollowsTintColor.getter();
  Link.Presentation.init(rawValue:)();
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v31) {
    Link.Presentation.init(rawValue:)();
  }
  uint64_t v32 = type metadata accessor for AlertAction();
  swift_allocObject();
  uint64_t v33 = AlertAction.init(title:message:isCancelable:buttonActions:style:artwork:presentationStyle:)();
  v45[3] = v32;
  v45[4] = sub_100231B94(&qword_1005FBE70, (void (*)(uint64_t))&type metadata accessor for AlertAction);
  v45[0] = v33;
  ActionMenu.ID.init()();
  sub_100054BBC((uint64_t)v10, v42, &qword_1005F76A0);
  sub_100054BBC((uint64_t)v45, (uint64_t)v44, (uint64_t *)&unk_1005F89E0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ActionMenu.Item.init(id:title:icon:role:state:action:)();
  type metadata accessor for ActionMenu.Child();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100054B1C((uint64_t)v10, &qword_1005F76A0);
  return sub_100054B1C((uint64_t)v45, (uint64_t *)&unk_1005F89E0);
}

uint64_t sub_100231208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v28[1] = a1;
  uint64_t v33 = a2;
  uint64_t v2 = type metadata accessor for ActionMetrics();
  __chkstk_darwin(v2 - 8);
  uint64_t v32 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for FlowDestinationPageHeader();
  uint64_t v4 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  unsigned __int8 v30 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FlowPresentationContext();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FlowDestination();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (void *)((char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100054B78(&qword_1005F76A0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v31 = (uint64_t)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v18 = (char *)v28 - v17;
  id v19 = [self mainBundle];
  v36._object = (void *)0xAB00000000A680E2;
  v20._object = (void *)0x80000001004D7D20;
  v20._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v36._uint64_t countAndFlagsBits = 0x73676E6974746553;
  v28[2] = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v36)._countAndFlagsBits;

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)();
  uint64_t v22 = type metadata accessor for ArtworkModel();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v18, 0, 1, v22);
  uint64_t *v13 = StationDetail.uuid.getter();
  v13[1] = v23;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for FlowDestination.stationSettings(_:), v10);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FlowPresentationContext.presentModalPageSheet(_:), v6);
  LOBYTE(v10) = static Link.Presentation.textFollowsTintColor.getter();
  unsigned __int8 v24 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  Link.Presentation.init(rawValue:)();
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v10) {
    Link.Presentation.init(rawValue:)();
  }
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v24) {
    Link.Presentation.init(rawValue:)();
  }
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v30, enum case for FlowDestinationPageHeader.standard(_:), v29);
  static ActionMetrics.notInstrumented.getter();
  uint64_t v25 = type metadata accessor for FlowAction();
  swift_allocObject();
  uint64_t v26 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)();
  v35[3] = v25;
  v35[4] = sub_100231B94((unint64_t *)&unk_1005FEA80, (void (*)(uint64_t))&type metadata accessor for FlowAction);
  v35[0] = v26;
  ActionMenu.ID.init()();
  sub_100054BBC((uint64_t)v18, v31, &qword_1005F76A0);
  sub_100054BBC((uint64_t)v35, (uint64_t)v34, (uint64_t *)&unk_1005F89E0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ActionMenu.Item.init(id:title:icon:role:state:action:)();
  type metadata accessor for ActionMenu.Child();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100054B1C((uint64_t)v18, &qword_1005F76A0);
  return sub_100054B1C((uint64_t)v35, (uint64_t *)&unk_1005F89E0);
}

uint64_t sub_10023177C()
{
  uint64_t v0 = type metadata accessor for ActionMetrics();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_100054B78(&qword_1005F76A0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  uint64_t v6 = &v14[-v5];
  id v7 = [self mainBundle];
  v16._object = (void *)0xE400000000000000;
  v8._object = (void *)0x80000001004D7D00;
  v8._uint64_t countAndFlagsBits = 0xD000000000000019;
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v16._uint64_t countAndFlagsBits = 2036427856;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v16);

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)();
  uint64_t v10 = type metadata accessor for ArtworkModel();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 0, 1, v10);
  StationDetail.uuid.getter();
  static ActionMetrics.notInstrumented.getter();
  uint64_t v11 = type metadata accessor for PlayStationAction();
  swift_allocObject();
  uint64_t v12 = PlayStationAction.init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)();
  v15[3] = v11;
  v15[4] = sub_100231B94(&qword_1005FBE68, (void (*)(uint64_t))&type metadata accessor for PlayStationAction);
  v15[0] = v12;
  ActionMenu.ID.init()();
  sub_100054BBC((uint64_t)v6, (uint64_t)v4, &qword_1005F76A0);
  sub_100054BBC((uint64_t)v15, (uint64_t)v14, (uint64_t *)&unk_1005F89E0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ActionMenu.Item.init(id:title:icon:role:state:action:)();
  type metadata accessor for ActionMenu.Child();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100054B1C((uint64_t)v6, &qword_1005F76A0);
  return sub_100054B1C((uint64_t)v15, (uint64_t *)&unk_1005F89E0);
}

void sub_100231A90()
{
  id v0 = [self sharedInstance];
  if (v0)
  {
    uint64_t v1 = v0;
    StationDetail.uuid.getter();
    id v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v1 deleteStationWithUuid:v2];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100231B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionMenu.Child();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100231B8C()
{
}

uint64_t sub_100231B94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100231BE8(void (*a1)(char *, uint64_t), uint64_t a2, void *a3)
{
  v71 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v73 = *(void *)(v6 - 8);
  __chkstk_darwin();
  Swift::String v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v75 = *(void *)(v9 - 8);
  __chkstk_darwin();
  v74 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for MetricsPipeline();
  uint64_t v11 = *(void *)(v72 - 8);
  __chkstk_darwin();
  uint64_t v70 = v12;
  Swift::String v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v77 = v14;
  uint64_t v78 = v15;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v76 = (char *)&v55 - v18;
  uint64_t v19 = *(void *)(*(void *)(type metadata accessor for MetricsData() - 8) + 64);
  __chkstk_darwin();
  uint64_t result = __chkstk_darwin();
  if ((*(unsigned char *)(v3 + 17) & 1) == 0)
  {
    uint64_t v64 = result;
    id v69 = (char *)&v55 - v21;
    uint64_t v63 = v23;
    uint64_t v62 = v22;
    uint64_t v24 = swift_allocObject();
    uint64_t v68 = v8;
    *(void *)(v24 + 16) = 0;
    uint64_t v25 = (void *)(v24 + 16);
    *(unsigned char *)(v24 + 24) = 1;
    uint64_t v58 = a2;
    uint64_t v26 = v24;
    id v27 = (uint64_t (*)())swift_allocObject();
    uint64_t v67 = v6;
    *((void *)v27 + 2) = v3;
    *((void *)v27 + 3) = v26;
    *((void *)v27 + 4) = a3;
    Swift::String v28 = v27;
    swift_retain();
    uint64_t v56 = v13;
    uint64_t v29 = v26;
    uint64_t v65 = v26;
    swift_retain();
    id v30 = a3;
    NSString v31 = String._bridgeToObjectiveC()();
    uint64_t v32 = swift_allocObject();
    uint64_t v61 = sub_100232908;
    *(void *)(v32 + 16) = sub_100232908;
    *(void *)(v32 + 24) = v28;
    uint64_t v57 = v28;
    id v83 = sub_10004A018;
    uint64_t v84 = v32;
    aBlock = _NSConcreteStackBlock;
    uint64_t v80 = 1107296256;
    uint64_t v60 = &v81;
    Swift::String v81 = sub_10003B424;
    uint64_t v82 = &unk_10055A958;
    uint64_t v33 = _Block_copy(&aBlock);
    uint64_t v66 = v9;
    swift_retain();
    swift_release();
    id v34 = [v30 beginBackgroundTaskWithName:v31 expirationHandler:v33];
    _Block_release(v33);

    swift_beginAccess();
    *uint64_t v25 = v34;
    *(unsigned char *)(v29 + 24) = 0;
    uint64_t v35 = v69;
    static AppExitMetricsEvent.makeData(exitKind:)();
    sub_1000566BC();
    uint64_t v59 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    Swift::String v36 = *(void (**)(char *, uint64_t))(v78 + 8);
    v78 += 8;
    v71 = v36;
    v36(v17, v77);
    uint64_t v37 = v56;
    uint64_t v38 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v56, v58, v72);
    uint64_t v39 = v62;
    uint64_t v40 = v63;
    uint64_t v41 = v64;
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 16))(v63, v35, v64);
    unint64_t v42 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v43 = (v70 + *(unsigned __int8 *)(v39 + 80) + v42) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    uint64_t v44 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v44 + v42, v37, v38);
    uint64_t v45 = v40;
    uint64_t v46 = v41;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(v44 + v43, v45, v41);
    Swift::String v47 = (uint64_t (**)())(v44 + ((v19 + v43 + 7) & 0xFFFFFFFFFFFFFFF8));
    Swift::String v48 = v57;
    *Swift::String v47 = v61;
    v47[1] = v48;
    id v83 = sub_100232AB4;
    uint64_t v84 = v44;
    aBlock = _NSConcreteStackBlock;
    uint64_t v80 = 1107296256;
    Swift::String v81 = sub_10003B424;
    uint64_t v82 = &unk_10055A9A8;
    uint64_t v49 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    uint64_t v50 = v74;
    static DispatchQoS.unspecified.getter();
    aBlock = (void **)_swiftEmptyArrayStorage;
    sub_10002FC48();
    sub_100054B78((uint64_t *)&unk_1005FE4B0);
    sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
    uint64_t v51 = v68;
    uint64_t v52 = v67;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v53 = v76;
    uint64_t v54 = (void *)v59;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v49);
    swift_release();

    (*(void (**)(char *, uint64_t))(v73 + 8))(v51, v52);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v50, v66);
    v71(v53, v77);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v69, v46);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002323C0(unsigned char *a1, uint64_t a2, void *a3)
{
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    [a3 endBackgroundTask:*(void *)(a2 + 16)];
    swift_beginAccess();
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
    a1[17] = 1;
  }
  return objc_sync_exit(a1);
}

id sub_10023245C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a4;
  uint64_t v32 = a1;
  uint64_t v33 = a3;
  uint64_t v31 = a2;
  uint64_t v4 = sub_100054B78(&qword_1005FBF60);
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin();
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100054B78(&qword_100603EC0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for MetricsFieldsContext();
  uint64_t v11 = *(void *)(v34 - 8);
  __chkstk_darwin();
  Swift::String v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)v28 - v14;
  __chkstk_darwin();
  uint64_t v17 = (char *)v28 - v16;
  id result = [self flushImmediately];
  if (result)
  {
    sub_100054B78(&qword_1005FBF68);
    v28[1] = Promise<A>.init(_:)();
    MetricsFieldsContext.init()();
    type metadata accessor for PageContextTracker();
    v36[0] = static PageContextTracker.shared.getter();
    static MetricsFieldsContext.Property<A>.pageContextTracker.getter();
    MetricsFieldsContext.addingValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_release();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    Swift::String v20 = v13;
    uint64_t v21 = v34;
    v19(v20, v34);
    type metadata accessor for MetricsActivity();
    uint64_t v22 = (void *)static MetricsActivity.shared.getter();
    uint64_t v23 = MetricsActivity.currentPageFields.getter();

    v36[0] = v23;
    static MetricsFieldsContext.Property<A>.pageFields.getter();
    sub_100054B78(&qword_1005F8378);
    MetricsFieldsContext.addingValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
    swift_bridgeObjectRelease();
    v19(v15, v21);
    MetricsPipeline.process(_:using:)();
    sub_100044200(&qword_1005FBF70, &qword_1005FBF68);
    Promise.join<A>(with:)();
    uint64_t v24 = swift_allocObject();
    uint64_t v25 = v35;
    *(void *)(v24 + 16) = v33;
    *(void *)(v24 + 24) = v25;
    unint64_t v26 = sub_1000566BC();
    swift_retain();
    uint64_t v27 = static OS_dispatch_queue.main.getter();
    v36[3] = v26;
    v36[4] = &protocol witness table for OS_dispatch_queue;
    v36[0] = v27;
    Promise.always(on:perform:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10004D2D8((uint64_t)v36);
    return (id)((uint64_t (*)(char *, uint64_t))v19)(v17, v21);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002328A0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1002328B0()
{
  return swift_deallocObject();
}

uint64_t sub_1002328C0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100232908()
{
  return sub_1002323C0(*(unsigned char **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100232914()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10023294C()
{
  uint64_t v1 = type metadata accessor for MetricsPipeline();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for MetricsData();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();

  return swift_deallocObject();
}

id sub_100232AB4()
{
  uint64_t v1 = *(void *)(type metadata accessor for MetricsPipeline() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for MetricsData() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v0 + v5;
  unint64_t v7 = (uint64_t *)(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_10023245C(v0 + v2, v6, v8, v9);
}

uint64_t ImplicitFollowsDecayCoordinator.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ImplicitFollowsDecayCoordinator.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*ImplicitFollowsDecayCoordinator.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 48);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_100232CE8;
}

uint64_t ImplicitFollowsDecayCoordinator.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ImplicitFollowsDecayCoordinator.init()();
  return v0;
}

uint64_t sub_100232D24()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100232D5C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100232DBC();
    return swift_release();
  }
  return result;
}

uint64_t sub_100232DB4()
{
  return sub_100232D5C();
}

void sub_100232DBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.podcastsStatesCoordination.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  unint64_t v7 = Logger.logObject.getter();
  if (os_log_type_enabled(v7, v6))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v6, "Triggering new check for Max Implicit Follows limit.", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v9 = [self sharedInstance];
  id v10 = [v9 integerForKey:kMTImplicitlyFollowedShowsLimit];

  aBlock[4] = sub_100233B70;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100014BE0;
  aBlock[3] = &unk_10055AAD8;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v10 asyncValueWithCompletion:v11];
  _Block_release(v11);
}

void sub_100232FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v29 - v10;
  if (a3)
  {
    swift_errorRetain();
    static Logger.podcastsStatesCoordination.getter();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      uint64_t v30 = v6;
      *(_DWORD *)uint64_t v14 = 138412290;
      uint64_t v16 = _convertErrorToNSError(_:)();
      aBlock = (void **)v16;
      uint64_t v6 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to fetch implicit followed shows limit from the bag: %@", v14, 0xCu);
      sub_100054B78((uint64_t *)&unk_1005F9F00);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else if (a1 {
         && (aBlock = 0, LOBYTE(v32) = 1, static Int._conditionallyBridgeFromObjectiveC(_:result:)(), (v32 & 1) == 0))
  }
  {
    Swift::String v20 = aBlock;
    id v21 = [self predicateForImplicitlyFollowedPodcasts];
    id v22 = [self sharedInstance];
    id v23 = [v22 privateQueueContext];

    uint64_t v24 = swift_allocObject();
    swift_weakInit();
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = v24;
    v25[3] = v23;
    v25[4] = v21;
    v25[5] = v20;
    uint64_t v35 = sub_100233BC0;
    Swift::String v36 = v25;
    aBlock = _NSConcreteStackBlock;
    uint64_t v32 = 1107296256;
    uint64_t v33 = sub_10003B424;
    uint64_t v34 = &unk_10055AB28;
    unint64_t v26 = _Block_copy(&aBlock);
    id v27 = v23;
    id v28 = v21;
    swift_release();
    [v27 performBlock:v26];
    _Block_release(v26);
  }
  else
  {
    static Logger.podcastsStatesCoordination.getter();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to cast value for implicitly followed shows limit from the bag to an Int", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_100233418(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v41 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v43 = v8;
    uint64_t v16 = (void *)kMTPodcastEntityName;
    uint64_t v17 = (char *)[a2 countOfObjectsInEntity:kMTPodcastEntityName predicate:a3];
    if ((uint64_t)v17 <= a4)
    {
      static Logger.podcastsStatesCoordination.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = v37;
      if (os_log_type_enabled(v38, v37))
      {
        uint64_t v40 = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 134218240;
        unint64_t v44 = (unint64_t)v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v40 + 12) = 2048;
        unint64_t v44 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Not proceeding with eviction of implicitly followed shows -- Count of implicitly followed shows: %ld is not over the limit: %ld", (uint8_t *)v40, 0x16u);
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v11, v7);
    }
    else
    {
      uint64_t v41 = v7;
      id v42 = a2;
      sub_100054B78((uint64_t *)&unk_1005FA7F0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10046D060;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v19 = objc_allocWithZone((Class)NSSortDescriptor);
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v21 = [v19 initWithKey:v20 ascending:1];

      *(void *)(inited + 32) = v21;
      unint64_t v44 = inited;
      uint64_t result = specialized Array._endMutation()();
      BOOL v22 = __OFSUB__(v17, a4);
      id v23 = &v17[-a4];
      if (v22)
      {
        __break(1u);
      }
      else
      {
        unint64_t v24 = v44;
        id v25 = v16;
        sub_1001B7D58(v24);
        swift_bridgeObjectRelease();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v27 = v42;
        id v28 = [v42 objectsInEntity:v25 predicate:a3 sortDescriptors:isa returnsObjectsAsFaults:0 limit:v23];

        if (v28)
        {
          sub_10004D29C(0, (unint64_t *)&qword_1005F7130);
          unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v30 = sub_1003E4610(v29);
          swift_bridgeObjectRelease();
          if (v30)
          {
            static Logger.podcastsStatesCoordination.getter();
            os_log_type_t v31 = static os_log_type_t.default.getter();
            uint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = v31;
            if (os_log_type_enabled(v32, v31))
            {
              uint64_t v34 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v34 = 134217984;
              id v27 = v42;
              unint64_t v44 = (unint64_t)v23;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "Implicitly followed shows over the limit. Proceeding to evict %ld shows.", v34, 0xCu);
              swift_slowDealloc();
            }

            (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v41);
            swift_beginAccess();
            if (swift_unknownObjectWeakLoadStrong())
            {
              uint64_t v35 = *(void *)(v15 + 48);
              uint64_t ObjectType = swift_getObjectType();
              (*(void (**)(uint64_t, void *, id, uint64_t, uint64_t))(v35 + 8))(v15, v30, v27, ObjectType, v35);
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            [v27 saveInCurrentBlock];
          }
        }
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t ImplicitFollowsDecayCoordinator.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_10018DB70(v0 + 40);
  return v0;
}

uint64_t ImplicitFollowsDecayCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_10018DB70(v0 + 40);

  return swift_deallocClassInstance();
}

uint64_t sub_100233990()
{
  return swift_retain();
}

uint64_t sub_10023399C()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t (*sub_1002339E8(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 48);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_100232CE8;
}

void sub_100233A6C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 48) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

unint64_t sub_100233AF4()
{
  unint64_t result = qword_1005FBFA0;
  if (!qword_1005FBFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FBFA0);
  }
  return result;
}

void sub_100233B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100233B78()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100233BC0()
{
  return sub_100233418(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100233BCC()
{
  uint64_t v1 = v0;
  type metadata accessor for LegacyDownload();
  swift_allocObject();
  sub_1001DDDAC();
  uint64_t v3 = v2;
  uint64_t v4 = (int *)type metadata accessor for DownloadJob(0);
  uint64_t v5 = (void *)(v1 + v4[5]);
  uint64_t v6 = v5[1];
  *(void *)(v3 + 64) = *v5;
  *(void *)(v3 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = v1 + v4[9];
  uint64_t v8 = *(void *)(v7 + 24);
  *(void *)(v3 + 16) = *(void *)(v7 + 16);
  *(void *)(v3 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v7 + 40) & 1) == 0)
  {
    id v9 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:*(void *)(v7 + 32)];
    uint64_t v10 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v9;
  }
  if ((*(unsigned char *)(v7 + 56) & 1) == 0)
  {
    id v11 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:*(void *)(v7 + 48)];
    uint64_t v12 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = v11;
  }
  os_log_type_t v13 = (uint64_t *)(v1 + v4[10]);
  uint64_t v14 = v13[3];
  switch(v14)
  {
    case 1:
      uint64_t v15 = 1;
      goto LABEL_15;
    case 2:
      uint64_t v15 = 4;
      goto LABEL_15;
    case 3:
      *(void *)(v3 + 88) = 0;
      return v3;
    case 4:
      uint64_t v15 = 5;
LABEL_15:
      *(void *)(v3 + 88) = v15;
      break;
    default:
      __int16 v16 = *((_WORD *)v13 + 24);
      uint64_t v18 = v13[4];
      double v17 = *((double *)v13 + 5);
      uint64_t v19 = *v13;
      *(void *)(v3 + 120) = v13[2];
      *(void *)(v3 + 128) = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v20 = 2;
      if ((v16 & 0x100) != 0) {
        uint64_t v20 = 3;
      }
      *(void *)(v3 + 80) = v19;
      *(void *)(v3 + 88) = v20;
      double v21 = 0.0;
      if ((v16 & 1) == 0) {
        double v21 = v17;
      }
      *(void *)(v3 + 96) = v18;
      *(double *)(v3 + 104) = v21;
      break;
  }
  return v3;
}

uint64_t sub_100233D8C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DownloadJob(0);
  if (*(void *)(v4 + *(int *)(v8 + 40) + 24) == 3)
  {
    static os_log_type_t.error.getter();
    sub_1001C0DD4();
    id v9 = (void *)static OS_os_log.downloads.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10046D010;
    _print_unlocked<A, B>(_:_:)();
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10004DA4C();
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0xE000000000000000;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return sub_100238910(v4, a3, type metadata accessor for DownloadJob);
  }
  else
  {
    uint64_t v12 = (int *)v8;
    char v33 = *(unsigned char *)(a1 + 48);
    uint64_t v34 = *(void *)(a1 + 32);
    uint64_t v35 = *(void *)(a1 + 40);
    long long v31 = *(_OWORD *)a1;
    long long v32 = *(_OWORD *)(a1 + 16);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a3, v4, v13);
    uint64_t v14 = (uint64_t *)(v4 + v12[5]);
    uint64_t v15 = v14[1];
    uint64_t v30 = *v14;
    uint64_t v16 = v4 + v12[8];
    uint64_t v18 = *(void *)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    char v29 = a2;
    char v19 = *(unsigned char *)(v16 + 16);
    uint64_t v20 = *(void *)(v4 + v12[7]);
    sub_100238910(v4 + v12[9], a3 + v12[9], type metadata accessor for EpisodeMetadata);
    uint64_t v21 = v12[6];
    uint64_t v22 = v4 + v21;
    uint64_t v23 = a3 + v21;
    uint64_t v24 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, v22, v24);
    *(void *)(a3 + v12[7]) = v20;
    uint64_t v25 = a3 + v12[8];
    *(void *)uint64_t v25 = v18;
    *(void *)(v25 + 8) = v17;
    *(unsigned char *)(v25 + 16) = v19;
    unint64_t v26 = (void *)(a3 + v12[5]);
    *unint64_t v26 = v30;
    v26[1] = v15;
    uint64_t v27 = a3 + v12[10];
    if (v29) {
      __int16 v28 = 256;
    }
    else {
      __int16 v28 = 0;
    }
    *(_OWORD *)uint64_t v27 = v31;
    *(_OWORD *)(v27 + 16) = v32;
    *(void *)(v27 + 32) = v34;
    *(void *)(v27 + 40) = v35;
    *(_WORD *)(v27 + 48) = v28 & 0xFFFE | v33 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_1002388E4(a1);
  }
}

BOOL sub_1002340A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  switch(*(void *)(a1 + 24))
  {
    case 1:
      return v2 == 1;
    case 2:
      return v2 == 2;
    case 3:
      return v2 == 3;
    case 4:
      return v2 == 4;
    default:
      return (unint64_t)(v2 - 1) >= 4;
  }
}

Swift::Int sub_100234134()
{
  return Hasher._finalize()();
}

uint64_t sub_1002341BC()
{
  type metadata accessor for UUID();
  sub_100237E88(&qword_1005FB940, (void (*)(uint64_t))&type metadata accessor for UUID);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100234240()
{
  return Hasher._finalize()();
}

uint64_t sub_1002342C4(char *a1, char *a2)
{
  return sub_1002ED24C(*a1, *a2);
}

Swift::Int sub_1002342D0()
{
  return Hasher._finalize()();
}

uint64_t sub_100234340()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100234394()
{
  return Hasher._finalize()();
}

uint64_t sub_100234400@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100554290, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100234460(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6F69647561;
  if (*v1) {
    uint64_t v2 = 0x6F65646976;
  }
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_100234490()
{
  uint64_t v1 = (int *)type metadata accessor for EpisodeMetadata(0);
  uint64_t v2 = (unsigned char *)(v0 + v1[13]);
  if (v2[8] != 1) {
    return *(void *)v2;
  }
  uint64_t v3 = v0 + v1[14];
  char v4 = *(unsigned char *)(v0 + v1[12]);
  if ((*(unsigned char *)(v3 + 8) & 1) == 0)
  {
    uint64_t v6 = *(void *)v3;
    if (v4)
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      double v8 = 188475.637;
      if (v7) {
        double v8 = 14685.2654;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      double v8 = 14685.2654;
    }
    double v9 = v8 * (double)v6;
    if ((~*(void *)&v9 & 0x7FF0000000000000) != 0)
    {
      if (v9 > -9.22337204e18)
      {
        if (v9 < 9.22337204e18) {
          return (uint64_t)v9;
        }
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (*(unsigned char *)(v0 + v1[12])) {
    return 339256146;
  }
  else {
    return 44055796;
  }
}

void sub_1002345BC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100054B78(&qword_1005F5D20);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 24))
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 24)) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v8 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
  }
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 72)) {
      goto LABEL_11;
    }
  }
  else
  {
    Swift::UInt64 v9 = *(void *)(v0 + 48);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    if (*(void *)(v0 + 72))
    {
LABEL_11:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 88)) {
        goto LABEL_12;
      }
LABEL_16:
      Hasher._combine(_:)(0);
      if (*(void *)(v0 + 104)) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
  Hasher._combine(_:)(0);
  if (!*(void *)(v0 + 88)) {
    goto LABEL_16;
  }
LABEL_12:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 104))
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
LABEL_17:
  Hasher._combine(_:)(0);
LABEL_18:
  uint64_t v10 = (int *)type metadata accessor for EpisodeMetadata(0);
  type metadata accessor for URL();
  sub_100237E88(&qword_1005FC1D8, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v0 + v10[13];
  if (*(unsigned char *)(v11 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v12 = *(void *)v11;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }
  uint64_t v13 = v0 + v10[14];
  if (*(unsigned char *)(v13 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v14 = *(void *)v13;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  sub_1001B6B5C(v0 + v10[15], (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    sub_100237E88(&qword_1005FC1E0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Int sub_100234A94()
{
  return Hasher._finalize()();
}

Swift::Int sub_100234AD8()
{
  return Hasher._finalize()();
}

uint64_t sub_100234B18(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 32))();
  if (!v3) {
    return 0x6E776F6E6B6E755BLL;
  }
  return result;
}

BOOL sub_100234B68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  Swift::UInt64 v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  Swift::UInt64 v12 = (char *)v30 - v11;
  __chkstk_darwin(v10);
  Swift::UInt64 v14 = (char *)v30 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v15((char *)v30 - v13, v3, a1);
  uint64_t v16 = _getErrorEmbeddedNSError<A>(_:)();
  v30[1] = a2;
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v17, v14, a1);
  }
  uint64_t v18 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v19 = [v18 domain];

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
    v15(v12, v3, a1);
  }
  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15(v12, v3, a1);
    if ((v25 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a1);
      return 0;
    }
  }
  v15(v9, (uint64_t)v12, a1);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v27, v9, a1);
  }
  __int16 v28 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v29 = [v28 code];

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a1);
  return v29 == (id)-999;
}

id sub_100234EC4()
{
  return [*v0 state];
}

id sub_100234ED4()
{
  id v1 = [*v0 progress];

  return v1;
}

id sub_100234F0C()
{
  return [*v0 taskIdentifier];
}

uint64_t sub_100234F1C()
{
  id v1 = [*v0 taskDescription];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

BOOL sub_100234F88()
{
  id v1 = [*v0 error];
  if (v1)
  {
    uint64_t v2 = v1;
    swift_getErrorValue();
    BOOL v3 = sub_100234B68(v5, v6);
  }
  else
  {
    return 0;
  }
  return v3;
}

id sub_100234FF8()
{
  return [*v0 countOfBytesExpectedToReceive];
}

id sub_100235008()
{
  return [*v0 countOfBytesReceived];
}

id sub_100235018()
{
  return [*v0 resume];
}

id sub_100235028()
{
  return [*v0 cancel];
}

id sub_100235038()
{
  return [*v0 suspend];
}

uint64_t sub_100235048(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  uint64_t v5 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();
  return v5;
}

uint64_t NSURLSessionTaskState.description.getter()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1002351C0()
{
  uint64_t result = 0x6E696C65636E6163;
  switch(*v0)
  {
    case 0:
      uint64_t result = 0x676E696E6E7572;
      break;
    case 1:
      uint64_t result = 0x65646E6570737573;
      break;
    case 2:
      return result;
    case 3:
      uint64_t result = 0x6574656C706D6F63;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

void *sub_100235278(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v9 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v9;
    uint64_t v10 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v10;
    uint64_t v11 = a2[13];
    uint64_t v12 = a3[11];
    uint64_t v29 = (uint64_t)a2 + v12;
    uint64_t v30 = a1 + v12;
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v11;
    uint64_t v13 = type metadata accessor for URL();
    __int16 v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28(v30, v29, v13);
    uint64_t v14 = a3[13];
    *((unsigned char *)v4 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = *(unsigned char *)(v16 + 8);
    uint64_t v17 = a3[14];
    uint64_t v18 = a3[15];
    id v19 = (char *)v4 + v17;
    uint64_t v20 = (uint64_t)a2 + v17;
    *(void *)id v19 = *(void *)v20;
    v19[8] = *(unsigned char *)(v20 + 8);
    uint64_t v21 = (char *)v4 + v18;
    uint64_t v22 = (char *)a2 + v18;
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_100054B78(&qword_1005F5D20);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
  }
  return v4;
}

uint64_t sub_1002354F4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 60);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

uint64_t sub_100235630(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void *)(a2 + 104);
  uint64_t v11 = a3[11];
  uint64_t v27 = a2 + v11;
  uint64_t v28 = a1 + v11;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(v28, v27, v12);
  uint64_t v13 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = a3[14];
  uint64_t v17 = a3[15];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  uint64_t v20 = (void *)(a1 + v17);
  uint64_t v21 = (const void *)(a2 + v17);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_100054B78(&qword_1005F5D20);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t sub_10023585C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[11];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v12 = a3[13];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  char v15 = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v15;
  uint64_t v16 = a3[14];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  char v19 = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  uint64_t v20 = a3[15];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v10) = v25(v21, 1, v23);
  int v26 = v25(v22, 1, v23);
  if (!v10)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v27 = sub_100054B78(&qword_1005F5D20);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_100235B20(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v8 = a3[11];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[14];
  uint64_t v16 = a3[15];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  char v19 = (void *)(a1 + v16);
  uint64_t v20 = (const void *)(a2 + v16);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_100054B78(&qword_1005F5D20);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_100235CF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[11];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = a3[14];
  uint64_t v19 = a3[15];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  uint64_t v22 = (void *)(a1 + v19);
  uint64_t v23 = (void *)(a2 + v19);
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  int v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v13) = v26(v22, 1, v24);
  int v27 = v26(v23, 1, v24);
  if (!v13)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    uint64_t v28 = sub_100054B78(&qword_1005F5D20);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_100235F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100235F70);
}

uint64_t sub_100235F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = a1 + *(int *)(a3 + 44);
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      return v13(v12, a2, v11);
    }
    else
    {
      uint64_t v14 = sub_100054B78(&qword_1005F5D20);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      uint64_t v16 = v14;
      uint64_t v17 = a1 + *(int *)(a3 + 60);
      return v15(v17, a2, v16);
    }
  }
}

uint64_t sub_1002360AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002360C0);
}

uint64_t sub_1002360C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100054B78(&qword_1005F5D20);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 60);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for EpisodeMetadata(uint64_t a1)
{
  return sub_10004F778(a1, qword_1005FC0B8);
}

void sub_100236210()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100006B48();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_100236304(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v41 = *a2;
    *a1 = *a2;
    a1 = (void *)(v41 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v53 = type metadata accessor for Date();
    uint64_t v54 = *(void *)(v53 - 8);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    swift_bridgeObjectRetain();
    uint64_t v49 = v15;
    v15(v13, v14, v53);
    uint64_t v16 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = *((void *)v18 + 1);
    *(void *)uint64_t v17 = *(void *)v18;
    *((void *)v17 + 1) = v19;
    v17[16] = v18[16];
    uint64_t v55 = a3;
    uint64_t v56 = a2;
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    uint64_t v24 = *((void *)v22 + 3);
    *((void *)v21 + 2) = *((void *)v22 + 2);
    *((void *)v21 + 3) = v24;
    v21[40] = v22[40];
    *((void *)v21 + 4) = *((void *)v22 + 4);
    v21[56] = v22[56];
    *((void *)v21 + 6) = *((void *)v22 + 6);
    uint64_t v25 = *((void *)v22 + 9);
    *((void *)v21 + 8) = *((void *)v22 + 8);
    *((void *)v21 + 9) = v25;
    uint64_t v26 = *((void *)v22 + 11);
    *((void *)v21 + 10) = *((void *)v22 + 10);
    *((void *)v21 + 11) = v26;
    uint64_t v27 = *((void *)v22 + 13);
    *((void *)v21 + 12) = *((void *)v22 + 12);
    *((void *)v21 + 13) = v27;
    uint64_t v28 = (int *)type metadata accessor for EpisodeMetadata(0);
    uint64_t v29 = v28[11];
    uint64_t v51 = &v22[v29];
    uint64_t v52 = &v21[v29];
    uint64_t v30 = type metadata accessor for URL();
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50(v52, v51, v30);
    v21[v28[12]] = v22[v28[12]];
    uint64_t v31 = v28[13];
    long long v32 = &v21[v31];
    char v33 = &v22[v31];
    v32[8] = v33[8];
    *(void *)long long v32 = *(void *)v33;
    uint64_t v34 = v28[14];
    uint64_t v35 = &v21[v34];
    Swift::String v36 = &v22[v34];
    v35[8] = v36[8];
    *(void *)uint64_t v35 = *(void *)v36;
    uint64_t v37 = v28[15];
    uint64_t v38 = &v21[v37];
    os_log_type_t v39 = &v22[v37];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(&v22[v37], 1, v53))
    {
      uint64_t v40 = sub_100054B78(&qword_1005F5D20);
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      v49(v38, v39, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v38, 0, 1, v53);
    }
    uint64_t v42 = v55[10];
    uint64_t v43 = (char *)a1 + v42;
    unint64_t v44 = (char *)v56 + v42;
    uint64_t v45 = *((void *)v44 + 3);
    if ((unint64_t)(v45 - 1) >= 4)
    {
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
      *((void *)v43 + 2) = *((void *)v44 + 2);
      *((void *)v43 + 3) = v45;
      uint64_t v47 = *((void *)v44 + 5);
      *((void *)v43 + 4) = *((void *)v44 + 4);
      *((void *)v43 + 5) = v47;
      *((_WORD *)v43 + 24) = *((_WORD *)v44 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v46 = *((_OWORD *)v44 + 1);
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
      *((_OWORD *)v43 + 1) = v46;
      *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
      *((_WORD *)v43 + 24) = *((_WORD *)v44 + 24);
    }
  }
  return a1;
}

uint64_t sub_1002366B4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for EpisodeMetadata(0);
  uint64_t v11 = v9 + *(int *)(v10 + 44);
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v9 + *(int *)(v10 + 60);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6)) {
    v8(v13, v6);
  }
  uint64_t result = *(void *)(a1 + a2[10] + 24);
  if ((unint64_t)(result - 1) >= 4)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002368A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (const void *)(a2 + v8);
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v14 = *(void (**)(void *, const void *, uint64_t))(v52 + 16);
  swift_bridgeObjectRetain();
  uint64_t v47 = v14;
  v14(v12, v13, v51);
  uint64_t v15 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = *(void *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8) = v18;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  uint64_t v53 = a3;
  uint64_t v54 = a2;
  uint64_t v19 = a3[9];
  uint64_t v55 = a1;
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(void *)(v20 + 8) = v22;
  uint64_t v23 = *(void *)(v21 + 24);
  *(void *)(v20 + 16) = *(void *)(v21 + 16);
  *(void *)(v20 + 24) = v23;
  *(unsigned char *)(v20 + 40) = *(unsigned char *)(v21 + 40);
  *(void *)(v20 + 32) = *(void *)(v21 + 32);
  *(unsigned char *)(v20 + 56) = *(unsigned char *)(v21 + 56);
  *(void *)(v20 + 48) = *(void *)(v21 + 48);
  uint64_t v24 = *(void *)(v21 + 72);
  *(void *)(v20 + 64) = *(void *)(v21 + 64);
  *(void *)(v20 + 72) = v24;
  uint64_t v25 = *(void *)(v21 + 88);
  *(void *)(v20 + 80) = *(void *)(v21 + 80);
  *(void *)(v20 + 88) = v25;
  uint64_t v26 = *(void *)(v21 + 104);
  *(void *)(v20 + 96) = *(void *)(v21 + 96);
  *(void *)(v20 + 104) = v26;
  uint64_t v27 = (int *)type metadata accessor for EpisodeMetadata(0);
  uint64_t v28 = v27[11];
  uint64_t v49 = v21 + v28;
  uint64_t v50 = v20 + v28;
  uint64_t v29 = type metadata accessor for URL();
  Swift::String v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48(v50, v49, v29);
  *(unsigned char *)(v20 + v27[12]) = *(unsigned char *)(v21 + v27[12]);
  uint64_t v30 = v27[13];
  uint64_t v31 = v20 + v30;
  uint64_t v32 = v21 + v30;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(void *)uint64_t v31 = *(void *)v32;
  uint64_t v33 = v27[14];
  uint64_t v34 = v20 + v33;
  uint64_t v35 = v21 + v33;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  *(void *)uint64_t v34 = *(void *)v35;
  uint64_t v36 = v27[15];
  uint64_t v37 = (void *)(v20 + v36);
  uint64_t v38 = (const void *)(v21 + v36);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v21 + v36, 1, v51))
  {
    uint64_t v39 = sub_100054B78(&qword_1005F5D20);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    v47(v37, v38, v51);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v37, 0, 1, v51);
  }
  uint64_t v40 = v53[10];
  uint64_t v41 = v55 + v40;
  uint64_t v42 = v54 + v40;
  uint64_t v43 = *(void *)(v42 + 24);
  if ((unint64_t)(v43 - 1) >= 4)
  {
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *(void *)(v41 + 16) = *(void *)(v42 + 16);
    *(void *)(v41 + 24) = v43;
    uint64_t v45 = *(void *)(v42 + 40);
    *(void *)(v41 + 32) = *(void *)(v42 + 32);
    *(void *)(v41 + 40) = v45;
    *(_WORD *)(v41 + 48) = *(_WORD *)(v42 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v44 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v44;
    *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
    *(_WORD *)(v41 + 48) = *(_WORD *)(v42 + 48);
  }
  return v55;
}

uint64_t sub_100236C10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24);
  v56(v11, v12, v13);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)(a2 + v15);
  *(void *)(v16 + 8) = *(void *)(a2 + v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  uint64_t v57 = a3;
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)(a2 + v18);
  *(void *)(v19 + 8) = *(void *)(a2 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  *(void *)(v19 + 24) = *(void *)(v20 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v20 + 32);
  *(unsigned char *)(v19 + 40) = *(unsigned char *)(v20 + 40);
  *(void *)(v19 + 32) = v21;
  uint64_t v22 = *(void *)(v20 + 48);
  *(unsigned char *)(v19 + 56) = *(unsigned char *)(v20 + 56);
  *(void *)(v19 + 48) = v22;
  *(void *)(v19 + 64) = *(void *)(v20 + 64);
  *(void *)(v19 + 72) = *(void *)(v20 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v19 + 80) = *(void *)(v20 + 80);
  *(void *)(v19 + 88) = *(void *)(v20 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v19 + 96) = *(void *)(v20 + 96);
  *(void *)(v19 + 104) = *(void *)(v20 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = (int *)type metadata accessor for EpisodeMetadata(0);
  uint64_t v24 = v23[11];
  uint64_t v25 = v19 + v24;
  uint64_t v26 = v20 + v24;
  uint64_t v27 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  *(unsigned char *)(v19 + v23[12]) = *(unsigned char *)(v20 + v23[12]);
  uint64_t v28 = v23[13];
  uint64_t v29 = v19 + v28;
  uint64_t v30 = v20 + v28;
  char v31 = *(unsigned char *)(v30 + 8);
  *(void *)uint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = v31;
  uint64_t v32 = v23[14];
  uint64_t v33 = v19 + v32;
  uint64_t v34 = v20 + v32;
  char v35 = *(unsigned char *)(v34 + 8);
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = v35;
  uint64_t v36 = v23[15];
  uint64_t v37 = (void *)(v19 + v36);
  uint64_t v38 = (const void *)(v20 + v36);
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v26) = v39(v19 + v36, 1, v13);
  int v40 = v39((uint64_t)v38, 1, v13);
  if (v26)
  {
    if (!v40)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v37, v38, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v37, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v37, v13);
LABEL_6:
    uint64_t v41 = sub_100054B78(&qword_1005F5D20);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_7;
  }
  v56((uint64_t)v37, (uint64_t)v38, v13);
LABEL_7:
  uint64_t v42 = v57[10];
  uint64_t v43 = a1 + v42;
  long long v44 = (long long *)(a2 + v42);
  uint64_t v45 = *(void *)(a1 + v42 + 24);
  unint64_t v46 = *((void *)v44 + 3) - 1;
  if ((unint64_t)(v45 - 1) >= 4)
  {
    if (v46 >= 4)
    {
      *(void *)uint64_t v43 = *(void *)v44;
      *(void *)(v43 + 8) = *((void *)v44 + 1);
      *(void *)(v43 + 16) = *((void *)v44 + 2);
      *(void *)(v43 + 24) = *((void *)v44 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v43 + 32) = *((void *)v44 + 4);
      uint64_t v54 = *((void *)v44 + 5);
      *(unsigned char *)(v43 + 48) = *((unsigned char *)v44 + 48);
      *(void *)(v43 + 40) = v54;
      *(unsigned char *)(v43 + 49) = *((unsigned char *)v44 + 49);
    }
    else
    {
      sub_100054B1C(v43, &qword_1005FC118);
      long long v51 = v44[1];
      long long v50 = v44[2];
      long long v52 = *v44;
      *(_WORD *)(v43 + 48) = *((_WORD *)v44 + 24);
      *(_OWORD *)(v43 + 16) = v51;
      *(_OWORD *)(v43 + 32) = v50;
      *(_OWORD *)uint64_t v43 = v52;
    }
  }
  else if (v46 >= 4)
  {
    *(void *)uint64_t v43 = *(void *)v44;
    *(void *)(v43 + 8) = *((void *)v44 + 1);
    *(void *)(v43 + 16) = *((void *)v44 + 2);
    *(void *)(v43 + 24) = *((void *)v44 + 3);
    *(void *)(v43 + 32) = *((void *)v44 + 4);
    uint64_t v53 = *((void *)v44 + 5);
    *(unsigned char *)(v43 + 48) = *((unsigned char *)v44 + 48);
    *(void *)(v43 + 40) = v53;
    *(unsigned char *)(v43 + 49) = *((unsigned char *)v44 + 49);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v47 = *v44;
    long long v48 = v44[1];
    long long v49 = v44[2];
    *(_WORD *)(v43 + 48) = *((_WORD *)v44 + 24);
    *(_OWORD *)(v43 + 16) = v48;
    *(_OWORD *)(v43 + 32) = v49;
    *(_OWORD *)uint64_t v43 = v47;
  }
  return a1;
}

uint64_t sub_1002370EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v41 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v41(v8, v9, v10);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  long long v18 = *(_OWORD *)(a2 + v15 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)(a2 + v15);
  *(_OWORD *)(v16 + 16) = v18;
  *(void *)(v16 + 32) = *(void *)(a2 + v15 + 32);
  *(unsigned char *)(v16 + 40) = *(unsigned char *)(a2 + v15 + 40);
  uint64_t v19 = *(void *)(a2 + v15 + 48);
  *(unsigned char *)(v16 + 56) = *(unsigned char *)(v17 + 56);
  *(void *)(v16 + 48) = v19;
  long long v20 = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(v17 + 64);
  *(_OWORD *)(v16 + 80) = v20;
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(v17 + 96);
  uint64_t v21 = (int *)type metadata accessor for EpisodeMetadata(0);
  uint64_t v22 = v21[11];
  uint64_t v23 = v16 + v22;
  uint64_t v24 = v17 + v22;
  uint64_t v25 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
  *(unsigned char *)(v16 + v21[12]) = *(unsigned char *)(v17 + v21[12]);
  uint64_t v26 = v21[13];
  uint64_t v27 = v16 + v26;
  uint64_t v28 = v17 + v26;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  *(void *)uint64_t v27 = *(void *)v28;
  uint64_t v29 = v21[14];
  uint64_t v30 = v16 + v29;
  uint64_t v31 = v17 + v29;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  *(void *)uint64_t v30 = *(void *)v31;
  uint64_t v32 = v21[15];
  uint64_t v33 = (void *)(v16 + v32);
  uint64_t v34 = (const void *)(v17 + v32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v17 + v32, 1, v10))
  {
    uint64_t v35 = sub_100054B78(&qword_1005F5D20);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v41(v33, v34, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v33, 0, 1, v10);
  }
  uint64_t v36 = a3[10];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  long long v39 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  *(_OWORD *)(v37 + 16) = v39;
  *(_OWORD *)(v37 + 32) = *(_OWORD *)(v38 + 32);
  *(_WORD *)(v37 + 48) = *(_WORD *)(v38 + 48);
  return a1;
}

uint64_t sub_1002373AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v53(v13, v14, v15);
  uint64_t v17 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a2 + v17);
  uint64_t v21 = *(void *)(a2 + v17 + 8);
  *(void *)uint64_t v18 = v20;
  *(void *)(v18 + 8) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  uint64_t v54 = a1;
  uint64_t v55 = a3;
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = *(void *)(a2 + v22 + 8);
  *(void *)uint64_t v23 = *(void *)(a2 + v22);
  *(void *)(v23 + 8) = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v24 + 24);
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(void *)(v23 + 24) = v26;
  swift_bridgeObjectRelease();
  *(void *)(v23 + 32) = *(void *)(v24 + 32);
  *(unsigned char *)(v23 + 40) = *(unsigned char *)(v24 + 40);
  *(void *)(v23 + 48) = *(void *)(v24 + 48);
  *(unsigned char *)(v23 + 56) = *(unsigned char *)(v24 + 56);
  uint64_t v27 = *(void *)(v24 + 72);
  *(void *)(v23 + 64) = *(void *)(v24 + 64);
  *(void *)(v23 + 72) = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(v24 + 88);
  *(void *)(v23 + 80) = *(void *)(v24 + 80);
  *(void *)(v23 + 88) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(v24 + 104);
  *(void *)(v23 + 96) = *(void *)(v24 + 96);
  *(void *)(v23 + 104) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = (int *)type metadata accessor for EpisodeMetadata(0);
  uint64_t v31 = v30[11];
  uint64_t v32 = v23 + v31;
  uint64_t v33 = v24 + v31;
  uint64_t v34 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 40))(v32, v33, v34);
  *(unsigned char *)(v23 + v30[12]) = *(unsigned char *)(v24 + v30[12]);
  uint64_t v35 = v30[13];
  uint64_t v36 = v23 + v35;
  uint64_t v37 = v24 + v35;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  *(void *)uint64_t v36 = *(void *)v37;
  uint64_t v38 = v30[14];
  uint64_t v39 = v23 + v38;
  uint64_t v40 = v24 + v38;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)uint64_t v39 = *(void *)v40;
  uint64_t v41 = v30[15];
  uint64_t v42 = (void *)(v23 + v41);
  uint64_t v43 = (const void *)(v24 + v41);
  long long v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v33) = v44(v23 + v41, 1, v15);
  int v45 = v44((uint64_t)v43, 1, v15);
  if (v33)
  {
    if (!v45)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v42, v43, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v42, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v45)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v42, v15);
LABEL_6:
    uint64_t v46 = sub_100054B78(&qword_1005F5D20);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_7;
  }
  v53((uint64_t)v42, (uint64_t)v43, v15);
LABEL_7:
  uint64_t v47 = v55[10];
  uint64_t v48 = v54 + v47;
  uint64_t v49 = a2 + v47;
  if ((unint64_t)(*(void *)(v54 + v47 + 24) - 1) >= 4)
  {
    uint64_t v50 = *(void *)(v49 + 24);
    if ((unint64_t)(v50 - 1) >= 4)
    {
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      *(void *)(v48 + 16) = *(void *)(v49 + 16);
      *(void *)(v48 + 24) = v50;
      swift_bridgeObjectRelease();
      *(void *)(v48 + 32) = *(void *)(v49 + 32);
      *(void *)(v48 + 40) = *(void *)(v49 + 40);
      *(unsigned char *)(v48 + 48) = *(unsigned char *)(v49 + 48);
      *(unsigned char *)(v48 + 49) = *(unsigned char *)(v49 + 49);
      return v54;
    }
    sub_100054B1C(v48, &qword_1005FC118);
  }
  long long v51 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v51;
  *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
  *(_WORD *)(v48 + 48) = *(_WORD *)(v49 + 48);
  return v54;
}

uint64_t sub_100237790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002377A4);
}

uint64_t sub_1002377A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[6];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = type metadata accessor for EpisodeMetadata(0);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[9];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_100237928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023793C);
}

uint64_t sub_10023793C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5] + 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[6];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for EpisodeMetadata(0);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[9];

  return v16(v18, a2, a2, v17);
}

uint64_t sub_100237AC0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for EpisodeMetadata(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for DownloadProgress()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DownloadProgress(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DownloadProgress(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  return a1;
}

__n128 initializeWithTake for DownloadProgress(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DownloadProgress(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadProgress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloadProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadProgress()
{
  return &type metadata for DownloadProgress;
}

uint64_t sub_100237DF8()
{
  return sub_100237E88(&qword_1005FC1C8, (void (*)(uint64_t))type metadata accessor for DownloadJob);
}

uint64_t sub_100237E40()
{
  return sub_100237E88(&qword_1005FC1D0, (void (*)(uint64_t))type metadata accessor for EpisodeMetadata);
}

uint64_t sub_100237E88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100237ED0()
{
  unint64_t v1 = v0;
  id v2 = [v0 userInfo];
  type metadata accessor for ProgressUserInfoKey(0);
  sub_100237E88(&qword_1005F66A0, type metadata accessor for ProgressUserInfoKey);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16) || (uint64_t v6 = sub_100226C58(v4), (v7 & 1) == 0))
  {
    long long v14 = 0u;
    long long v15 = 0u;

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_10004D328(*(void *)(v3 + 56) + 32 * v6, (uint64_t)&v14);

  swift_bridgeObjectRelease();
  if (!*((void *)&v15 + 1))
  {
LABEL_9:
    sub_100054B1C((uint64_t)&v14, &qword_1005F5D30);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  Swift::Int v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005539C0, v13);
  swift_bridgeObjectRelease();
  if (v8) {
    return 0;
  }
  id v9 = [v1 localizedAdditionalDescription];
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v11;
}

uint64_t sub_100238084(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = &v57[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100054B78(&qword_1005FC1E8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v57[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100054B78(&qword_1005F5D20);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  long long v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v57[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v57[-v18];
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a2 + 8);
  if (!v20)
  {
    if (v21) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v21) {
    return 0;
  }
  if (*(void *)a1 == *(void *)a2 && v20 == v21
    || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v22 & 1) != 0))
  {
LABEL_8:
    uint64_t v24 = *(void *)(a1 + 24);
    uint64_t v25 = *(void *)(a2 + 24);
    if (v24)
    {
      if (!v25) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v24 != v25)
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v26 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v25)
    {
      return 0;
    }
    char v27 = *(unsigned char *)(a2 + 40);
    if (*(unsigned char *)(a1 + 40))
    {
      if (!*(unsigned char *)(a2 + 40)) {
        return 0;
      }
    }
    else
    {
      if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
        char v27 = 1;
      }
      if (v27) {
        return 0;
      }
    }
    char v28 = *(unsigned char *)(a2 + 56);
    if (*(unsigned char *)(a1 + 56))
    {
      if (!*(unsigned char *)(a2 + 56)) {
        return 0;
      }
    }
    else
    {
      if (*(void *)(a1 + 48) != *(void *)(a2 + 48)) {
        char v28 = 1;
      }
      if (v28) {
        return 0;
      }
    }
    uint64_t v29 = *(void *)(a1 + 72);
    uint64_t v30 = *(void *)(a2 + 72);
    if (v29)
    {
      if (!v30) {
        return 0;
      }
      if (*(void *)(a1 + 64) != *(void *)(a2 + 64) || v29 != v30)
      {
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v31 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v30)
    {
      return 0;
    }
    uint64_t v32 = *(void *)(a1 + 88);
    uint64_t v33 = *(void *)(a2 + 88);
    if (v32)
    {
      if (!v33) {
        return 0;
      }
      if (*(void *)(a1 + 80) != *(void *)(a2 + 80) || v32 != v33)
      {
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v34 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v33)
    {
      return 0;
    }
    uint64_t v35 = *(void *)(a1 + 104);
    uint64_t v36 = *(void *)(a2 + 104);
    if (v35)
    {
      if (!v36) {
        return 0;
      }
      if (*(void *)(a1 + 96) != *(void *)(a2 + 96) || v35 != v36)
      {
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v37 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v36)
    {
      return 0;
    }
    uint64_t v59 = (int *)type metadata accessor for EpisodeMetadata(0);
    if (static URL.== infix(_:_:)())
    {
      uint64_t v38 = v59[12];
      int v39 = *(unsigned __int8 *)(a1 + v38);
      int v40 = *(unsigned __int8 *)(a2 + v38);
      if (v39) {
        uint64_t v41 = 0x6F65646976;
      }
      else {
        uint64_t v41 = 0x6F69647561;
      }
      if (v40) {
        uint64_t v42 = 0x6F65646976;
      }
      else {
        uint64_t v42 = 0x6F69647561;
      }
      if (v41 == v42)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        int v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease_n();
        uint64_t result = 0;
        if ((v58 & 1) == 0) {
          return result;
        }
      }
      uint64_t v43 = v59[13];
      long long v44 = (void *)(a1 + v43);
      char v45 = *(unsigned char *)(a1 + v43 + 8);
      uint64_t v46 = (void *)(a2 + v43);
      int v47 = *(unsigned __int8 *)(a2 + v43 + 8);
      if (v45)
      {
        if (!v47) {
          return 0;
        }
      }
      else
      {
        if (*v44 != *v46) {
          LOBYTE(v47) = 1;
        }
        if (v47) {
          return 0;
        }
      }
      uint64_t v48 = v59[14];
      uint64_t v49 = (void *)(a1 + v48);
      char v50 = *(unsigned char *)(a1 + v48 + 8);
      long long v51 = (void *)(a2 + v48);
      int v52 = *(unsigned __int8 *)(a2 + v48 + 8);
      if (v50)
      {
        if (!v52) {
          return 0;
        }
      }
      else
      {
        if (*v49 != *v51) {
          LOBYTE(v52) = 1;
        }
        if (v52) {
          return 0;
        }
      }
      sub_1001B6B5C(a1 + v59[15], (uint64_t)v19);
      sub_1001B6B5C(a2 + v59[15], (uint64_t)v17);
      uint64_t v53 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_1001B6B5C((uint64_t)v19, (uint64_t)v10);
      sub_1001B6B5C((uint64_t)v17, v53);
      uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v54((uint64_t)v10, 1, v4) == 1)
      {
        sub_100054B1C((uint64_t)v17, &qword_1005F5D20);
        sub_100054B1C((uint64_t)v19, &qword_1005F5D20);
        if (v54(v53, 1, v4) == 1)
        {
          sub_100054B1C((uint64_t)v10, &qword_1005F5D20);
          return 1;
        }
        goto LABEL_75;
      }
      sub_1001B6B5C((uint64_t)v10, (uint64_t)v14);
      if (v54(v53, 1, v4) == 1)
      {
        sub_100054B1C((uint64_t)v17, &qword_1005F5D20);
        sub_100054B1C((uint64_t)v19, &qword_1005F5D20);
        (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_75:
        sub_100054B1C((uint64_t)v10, &qword_1005FC1E8);
        return 0;
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 32))(v7, v53, v4);
      sub_100237E88(&qword_1005FC1F0, (void (*)(uint64_t))&type metadata accessor for Date);
      char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v56 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
      v56(v7, v4);
      sub_100054B1C((uint64_t)v17, &qword_1005F5D20);
      sub_100054B1C((uint64_t)v19, &qword_1005F5D20);
      v56(v14, v4);
      sub_100054B1C((uint64_t)v10, &qword_1005F5D20);
      if (v55) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1002386D8(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for DownloadJob(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1])
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  if ((static Date.== infix(_:_:)() & 1) == 0 || *(void *)(a1 + v4[7]) != *(void *)(a2 + v4[7])) {
    return 0;
  }
  uint64_t v12 = v4[8];
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  int v15 = *(unsigned __int8 *)(a1 + v12 + 16);
  uint64_t v16 = a2 + v12;
  int v17 = *(unsigned __int8 *)(v16 + 16);
  if (v13 != *(void *)v16 || v14 != *(void *)(v16 + 8))
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v19 & 1) == 0) {
      return result;
    }
  }
  uint64_t v20 = v15 ? 1936484398 : 0x7261646E6174732ELL;
  unint64_t v21 = v15 ? 0xE400000000000000 : 0xE900000000000064;
  uint64_t v22 = v17 ? 1936484398 : 0x7261646E6174732ELL;
  unint64_t v23 = v17 ? 0xE400000000000000 : 0xE900000000000064;
  if (v20 == v22 && v21 == v23)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v25 & 1) == 0) {
      return result;
    }
  }
  if ((sub_100238084(a1 + v4[9], a2 + v4[9]) & 1) == 0) {
    return 0;
  }
  uint64_t v26 = v4[10];
  uint64_t v27 = *(void *)(a1 + v26 + 24);
  uint64_t v28 = *(void *)(a2 + v26 + 24);
  switch(v27)
  {
    case 1:
      if (v28 != 1) {
        return 0;
      }
      break;
    case 2:
      if (v28 != 2) {
        return 0;
      }
      break;
    case 3:
      if (v28 != 3) {
        return 0;
      }
      break;
    case 4:
      if (v28 != 4) {
        return 0;
      }
      break;
    default:
      if ((unint64_t)(v28 - 1) < 4) {
        return 0;
      }
      break;
  }
  return 1;
}

uint64_t sub_1002388E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100238910(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

const char *sub_100238978()
{
  return "state";
}

id sub_100238984@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 state];
  *a2 = result;
  return result;
}

uint64_t sub_1002389B8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002389F0(id *a1)
{
  return (*(uint64_t (**)(id))(v1 + 16))([*a1 state]);
}

unsigned char *storeEnumTagSinglePayload for EpisodeMetadata.EpisodeType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100238AF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EpisodeMetadata.EpisodeType()
{
  return &type metadata for EpisodeMetadata.EpisodeType;
}

unint64_t destroy for DownloadJob.Phase(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 24);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for DownloadJob.Phase(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 24);
  }
  if ((int)v4 - 1 < 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v3;
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v6;
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for DownloadJob.Phase(uint64_t a1, long long *a2)
{
  LODWORD(v4) = -1;
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  int v6 = v5 - 1;
  if (*((void *)a2 + 3) < 0xFFFFFFFFuLL) {
    uint64_t v4 = *((void *)a2 + 3);
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      uint64_t v13 = *((void *)a2 + 5);
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(void *)(a1 + 40) = v13;
      *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
      return a1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    long long v9 = *a2;
    long long v10 = a2[1];
    long long v11 = a2[2];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)a1 = v9;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  uint64_t v8 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
  swift_bridgeObjectRetain();
  return a1;
}

__n128 initializeWithTake for DownloadJob.Phase(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DownloadJob.Phase(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 24);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = *(void *)(a2 + 24);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = *(void *)(a2 + 24);
    }
    if ((int)v7 - 1 < 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v6;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
      return a1;
    }
    swift_bridgeObjectRelease();
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadJob.Phase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 50)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 3;
  if (v5 >= 5) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DownloadJob.Phase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_WORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 50) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 50) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 4;
    }
  }
  return result;
}

uint64_t sub_100238E68(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

double sub_100238E8C(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 48) = 0;
    *(void *)a1 = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadJob.Phase()
{
  return &type metadata for DownloadJob.Phase;
}

unint64_t sub_100238EE0()
{
  unint64_t result = qword_1005FC1F8;
  if (!qword_1005FC1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FC1F8);
  }
  return result;
}

uint64_t *DownloadConsistency.application.unsafeMutableAddressor()
{
  if (qword_1005F5A58 != -1) {
    swift_once();
  }
  return &static DownloadConsistency.application;
}

id static DownloadConsistency.application.getter()
{
  if (qword_1005F5A58 != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)static DownloadConsistency.application;

  return v0;
}

char *InterestSyncProcessor.init()()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  int v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v25 - v5;
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  long long v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [objc_allocWithZone((Class)type metadata accessor for InterestSyncStorage()) init];
  id v11 = [objc_allocWithZone((Class)type metadata accessor for CloudSyncBugReporter()) init];
  id v12 = objc_allocWithZone((Class)type metadata accessor for InterestSyncProcessor());
  id v13 = sub_10023BB94((uint64_t)v10, (uint64_t)v11, v12);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  uint64_t v14 = (char *)v13;
  static OSSignposter.cloudSync.getter();
  uint64_t v26 = v1;
  int v15 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  uint64_t v16 = v6;
  int v17 = v6;
  uint64_t v18 = v0;
  v15(v17, &v14[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID], v0);
  char v19 = OSSignposter.logHandle.getter();
  os_signpost_type_t v20 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v15(v4, v16, v18);
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v20, v22, "InterestSyncProcessor.created", "", v21, 2u);
    swift_slowDealloc();

    unint64_t v23 = *(void (**)(char *, uint64_t))(v26 + 8);
    v23(v16, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
    v23(v4, v18);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  }
  return v14;
}

uint64_t type metadata accessor for InterestSyncProcessor()
{
  uint64_t result = qword_1005FC288;
  if (!qword_1005FC288) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id InterestSyncProcessor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InterestSyncProcessor();
  [super dealloc];
}

uint64_t InterestSyncProcessor.operationTypeForSET()()
{
  return 18;
}

Swift::Bool __swiftcall InterestSyncProcessor.hasLocalChanges()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess();
  sub_100056D54(v1, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  sub_100041A98(v5, v6);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_10004D2D8((uint64_t)v5);
  return v2 & 1;
}

Swift::String_optional __swiftcall InterestSyncProcessor.version(forGetTransaction:key:)(MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v2 = sub_10023BD14(key._countAndFlagsBits, (unint64_t)key._object);
  result.value._object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t InterestSyncProcessor.data(forSetTransaction:key:version:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  return sub_10023C30C(a2, a3, a4);
}

void InterestSyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9)
{
}

void sub_1002397AC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v43 = a4;
  char v45 = a3;
  uint64_t v46 = a1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSSignpostError();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v44 - 8);
  uint64_t v14 = __chkstk_darwin(v44);
  uint64_t v42 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  int v17 = (char *)&v35 - v16;
  uint64_t v18 = type metadata accessor for OSSignposter();
  uint64_t v19 = __chkstk_darwin(v18);
  os_signpost_id_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v4 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState))
  {
    uint64_t v38 = v20;
    uint64_t v39 = v19;
    uint64_t v40 = a2;
    uint64_t v41 = v4;
    swift_retain();
    static OSSignposter.cloudSync.getter();
    unint64_t v23 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    int v37 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v12, v9) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v24 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        uint64_t v24 = "";
      }
      uint64_t v36 = v24;
      uint64_t v25 = v42;
      uint64_t v26 = v44;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v42, v17, v44);
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      os_signpost_id_t v28 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, (os_signpost_type_t)v37, v28, "InterestSyncProcessor.finish", v36, v27, 2u);
      swift_slowDealloc();

      uint64_t v29 = *(void (**)(char *, uint64_t))(v13 + 8);
      v29(v17, v26);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v39);
      swift_release();
      v29(v25, v26);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v44);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v39);
      swift_release();
    }
    a2 = v40;
  }
  sub_10023B6F4(v46, a2);
  static Logger.cloudSync.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  char v31 = Logger.logObject.getter();
  if (os_log_type_enabled(v31, v30))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v30, "[Interests] Cleaning up neutral interests after successful transaction.", v32, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v48);
  id v33 = [self sharedInstance];
  if (v33)
  {
    char v34 = v33;
    [v33 cleanUpNeutralInterests];

    if (v45) {
      v45(0);
    }
  }
  else
  {
    __break(1u);
  }
}

void InterestSyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t a9)
{
}

uint64_t InterestSyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  return sub_10023DD24(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10023A030(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v34 = a2;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v27[-v12];
  uint64_t v14 = type metadata accessor for OSSignposter();
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v18 = &v27[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(void *)(v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState))
  {
    uint64_t v29 = v7;
    uint64_t v30 = v16;
    uint64_t v31 = result;
    uint64_t v32 = a1;
    swift_retain();
    static OSSignposter.cloudSync.getter();
    uint64_t v19 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    int v20 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v28 = v20;
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v21 = v33;
      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v33 + 88))(v6, v4) == enum case for OSSignpostError.doubleEnd(_:))
      {
        os_signpost_id_t v22 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v6, v4);
        os_signpost_id_t v22 = "";
      }
      uint64_t v23 = v29;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v11, v13, v29);
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, (os_signpost_type_t)v28, v25, "InterestSyncProcessor.reschedule", v22, v24, 2u);
      swift_slowDealloc();

      uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v26(v13, v23);
      (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v18, v31);
      swift_release();
      uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v26)(v11, v23);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v13, v29);
      (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v18, v31);
      uint64_t result = swift_release();
    }
    a1 = v32;
  }
  if (a1) {
    return a1(1);
  }
  return result;
}

Swift::Void __swiftcall InterestSyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)(MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  object = didProcessResponseWithDomainVersion.value._object;
  uint64_t countAndFlagsBits = didProcessResponseWithDomainVersion.value._countAndFlagsBits;
  uint64_t v5 = v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  sub_100055EF0(v5, v6);
  uint64_t v8 = *(void (**)(uint64_t, void *, uint64_t, uint64_t))(v7 + 96);
  swift_bridgeObjectRetain();
  v8(countAndFlagsBits, object, v6, v7);
  swift_endAccess();
}

uint64_t sub_10023A734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v56 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v56 - v13;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v60 = a3;
  uint64_t v61 = v6;
  uint64_t v57 = v9;
  static Logger.cloudSync.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  BOOL v19 = os_log_type_enabled(v18, v17);
  uint64_t v59 = v12;
  if (v19)
  {
    uint64_t v58 = v5;
    int v20 = (uint8_t *)swift_slowAlloc();
    v65[0] = swift_slowAlloc();
    *(_DWORD *)int v20 = 136380675;
    v56[1] = v20 + 4;
    type metadata accessor for RemoteInterest();
    swift_bridgeObjectRetain();
    uint64_t v21 = Array.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v24 = v21;
    uint64_t v5 = v58;
    v64[1] = sub_10004B974(v24, v23, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "[Interests] Inserting or updating Interests for remote list %{private}s.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  os_signpost_id_t v25 = *(void (**)(char *, uint64_t))(v61 + 8);
  v25(v14, v5);
  uint64_t v26 = v60;
  uint64_t v27 = sub_10023AE38(a2, v60);
  uint64_t v28 = (uint64_t)v16 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess();
  sub_100056D54(v28, (uint64_t)v65);
  uint64_t v29 = v66;
  uint64_t v30 = v67;
  sub_100041A98(v65, v66);
  unint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v30 + 136))(v27, v26, v29, v30);
  swift_bridgeObjectRelease();
  sub_10004D2D8((uint64_t)v65);
  if (v31)
  {
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v32 = v59;
      if (v50) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v32 = v59;
      if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_8:
        uint64_t v58 = v5;
        static Logger.cloudSync.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        swift_bridgeObjectRetain_n();
        uint64_t v34 = v16;
        uint64_t v35 = Logger.logObject.getter();
        if (os_log_type_enabled(v35, v33))
        {
          uint64_t v36 = swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          v64[0] = v60;
          *(_DWORD *)uint64_t v36 = 136315651;
          sub_100056D54(v28, (uint64_t)v65);
          LODWORD(v57) = v33;
          uint64_t v37 = v66;
          uint64_t v38 = v67;
          sub_100041A98(v65, v66);
          uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 40))(v37, v38);
          char v41 = v40;
          sub_10004D2D8((uint64_t)v65);
          uint64_t v62 = v39;
          char v63 = v41 & 1;
          sub_100054B78(&qword_1005FC2B0);
          uint64_t v42 = String.init<A>(describing:)();
          v65[0] = sub_10004B974(v42, v43, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v36 + 12) = 2160;
          v65[0] = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v36 + 22) = 2081;
          type metadata accessor for MTInterest();
          swift_bridgeObjectRetain();
          uint64_t v44 = Array.description.getter();
          unint64_t v46 = v45;
          swift_bridgeObjectRelease();
          v65[0] = sub_10004B974(v44, v46, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v57, "[Interests] Removing Interests only local and before timestamp %s: %{private,mask.hash}s.", (uint8_t *)v36, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v47 = v59;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v47 = v32;
        }
        v25(v47, v58);
        sub_100056D54(v28, (uint64_t)v65);
        uint64_t v48 = v66;
        uint64_t v49 = v67;
        sub_100041A98(v65, v66);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v49 + 144))(v31, v48, v49);

        swift_bridgeObjectRelease();
        return sub_10004D2D8((uint64_t)v65);
      }
    }
    swift_bridgeObjectRelease();
  }
  long long v51 = v57;
  static Logger.cloudSync.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  uint64_t v53 = Logger.logObject.getter();
  if (os_log_type_enabled(v53, v52))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v52, "[Interests], We didn't find any interests which are not present in the cloud and which are older than the last sync date. We are done.", v54, 2u);
    swift_slowDealloc();
    char v55 = v16;
  }
  else
  {
    char v55 = v53;
    uint64_t v53 = v16;
  }

  return ((uint64_t (*)(char *, uint64_t))v25)(v51, v5);
}

void *sub_10023AE38(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = a2;
  uint64_t v82 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v82 - 8);
  uint64_t v5 = __chkstk_darwin(v82);
  uint64_t v7 = (char *)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v73 - v8;
  uint64_t v10 = type metadata accessor for RemoteInterest();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v76 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  id v79 = (char *)v73 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v80 = (char *)v73 - v17;
  __chkstk_darwin(v16);
  v89 = (char *)v73 - v18;
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return _swiftEmptyArrayStorage;
  }
  id v83 = v9;
  uint64_t v75 = v7;
  uint64_t v20 = v2 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  uint64_t v21 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v73[1] = a1;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v22 = v11 + 16;
  unint64_t v23 = v24;
  v90 = (void (**)(char *, uint64_t))(v22 - 8);
  Swift::String v81 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v85 = *(void *)(v22 + 56);
  os_signpost_id_t v25 = _swiftEmptyArrayStorage;
  *(void *)&long long v26 = 134218242;
  long long v78 = v26;
  uint64_t v77 = (char *)&type metadata for Any + 8;
  uint64_t v86 = v22;
  uint64_t v87 = v10;
  uint64_t v27 = v89;
  uint64_t v91 = v20;
  id v88 = v24;
  do
  {
    uint64_t v93 = v21;
    id v94 = v25;
    uint64_t v32 = v27;
    v23(v27, v21, v10);
    uint64_t v33 = RemoteInterest.adamID.getter();
    sub_100056D54(v20, (uint64_t)v97);
    uint64_t v34 = v98;
    uint64_t v35 = v99;
    sub_100041A98(v97, v98);
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 152);
    uint64_t v96 = v33;
    uint64_t v37 = v20;
    uint64_t v38 = (void *)v36(v33, v92, v34, v35);
    sub_10004D2D8((uint64_t)v97);
    uint64_t v95 = v19;
    if (v38)
    {
      sub_100056D54(v37, (uint64_t)v97);
      uint64_t v39 = v99;
      sub_100041A98(v97, v98);
      char v40 = *(void (**)(void))(v39 + 128);
      id v41 = v38;
      v40();

      sub_10004D2D8((uint64_t)v97);
      os_signpost_id_t v25 = v94;
      uint64_t v42 = (void (*)(char *, uint64_t))v38;
    }
    else
    {
      uint64_t v84 = 0;
      unint64_t v43 = v83;
      static Logger.cloudSync.getter();
      uint64_t v44 = v80;
      v23(v80, (uint64_t)v32, v10);
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = v44;
        uint64_t v48 = swift_slowAlloc();
        v97[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = v78;
        *(void *)(v48 + 4) = v96;
        *(_WORD *)(v48 + 12) = 2080;
        v23(v79, (uint64_t)v47, v10);
        uint64_t v49 = String.init<A>(describing:)();
        *(void *)(v48 + 14) = sub_10004B974(v49, v50, v97);
        uint64_t v51 = v87;
        swift_bridgeObjectRelease();
        uint64_t v32 = v89;
        os_log_type_t v52 = *v90;
        uint64_t v53 = v51;
        (*v90)(v47, v51);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "[Interests] Received Interest from sync which doesn't exist in this device. We must insert it. AdamID: %lld, remote interest: %s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v54 = *v81;
        (*v81)(v83, v82);
      }
      else
      {
        os_log_type_t v52 = *v90;
        uint64_t v53 = v10;
        (*v90)(v44, v10);

        uint64_t v54 = *v81;
        (*v81)(v43, v82);
      }
      uint64_t v55 = v92;
      uint64_t v42 = v84;
      sub_100056D54(v91, (uint64_t)v97);
      uint64_t v56 = v98;
      uint64_t v57 = v99;
      sub_100041A98(v97, v98);
      uint64_t v58 = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 120))(v32, v55, v56, v57);
      if (!v58)
      {
        uint64_t v84 = v52;
        sub_10004D2D8((uint64_t)v97);
        uint64_t v62 = v75;
        static Logger.cloudSync.getter();
        char v63 = v76;
        unint64_t v23 = v88;
        v88(v76, (uint64_t)v32, v53);
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = swift_slowAlloc();
          uint64_t v74 = swift_slowAlloc();
          v97[0] = v74;
          *(_DWORD *)uint64_t v66 = v78;
          *(void *)(v66 + 4) = v96;
          *(_WORD *)(v66 + 12) = 2080;
          v88(v79, (uint64_t)v63, v53);
          uint64_t v67 = String.init<A>(describing:)();
          *(void *)(v66 + 14) = sub_10004B974(v67, v68, v97);
          uint64_t v69 = v87;
          swift_bridgeObjectRelease();
          uint64_t v70 = v63;
          v71 = (void (*)(void))v84;
          v84(v70, v69);
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "[Interests] Unable to insert a new interest from sync. AdamID: %lld, remote interest: %s", (uint8_t *)v66, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v23 = v88;
          swift_slowDealloc();

          v54(v62, v82);
          uint64_t v27 = v89;
          v71();
          uint64_t v10 = v69;
        }
        else
        {

          uint64_t v28 = v63;
          uint64_t v29 = (void (*)(void))v84;
          v84(v28, v53);
          v54(v62, v82);
          uint64_t v27 = v89;
          v29();
          uint64_t v10 = v53;
        }
        os_signpost_id_t v25 = v94;
        uint64_t v30 = v95;
        uint64_t v20 = v91;
        uint64_t v31 = v93;
        goto LABEL_5;
      }

      sub_10004D2D8((uint64_t)v97);
      os_signpost_id_t v25 = v94;
    }
    uint64_t v31 = v93;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      os_signpost_id_t v25 = sub_1002EF374(0, v25[2] + 1, 1, v25);
    }
    uint64_t v10 = v87;
    uint64_t v59 = v89;
    uint64_t v30 = v95;
    uint64_t v20 = v91;
    unint64_t v61 = v25[2];
    unint64_t v60 = v25[3];
    if (v61 >= v60 >> 1) {
      os_signpost_id_t v25 = sub_1002EF374((void *)(v60 > 1), v61 + 1, 1, v25);
    }
    v25[2] = v61 + 1;
    v25[v61 + 4] = v96;

    uint64_t v27 = v59;
    (*v90)(v59, v10);
    unint64_t v23 = v88;
LABEL_5:
    uint64_t v21 = v31 + v85;
    uint64_t v19 = v30 - 1;
  }
  while (v19);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_10023B6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  static Logger.cloudSync.getter();
  LOBYTE(v10) = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = v10;
  if (os_log_type_enabled(v16, (os_log_type_t)v10))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v36 = v3;
    uint64_t v37 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v35 = v6;
    uint64_t v38 = a1;
    uint64_t v39 = a2;
    swift_bridgeObjectRetain();
    sub_100054B78(&qword_1005F93A0);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v34 = a1;
    uint64_t v38 = sub_10004B974(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v38 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v22 = v17;
    uint64_t v23 = v34;
    _os_log_impl((void *)&_mh_execute_header, v16, v22, "[Interests] Bumping InterestSync version: %s, interestLastSyncTimestamp: %f, isInterestSyncDirty = false.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    uint64_t v3 = v36;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v35);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v23 = a1;
  }
  uint64_t v24 = v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess();
  uint64_t v25 = *(void *)(v24 + 24);
  uint64_t v26 = *(void *)(v24 + 32);
  sub_100055EF0(v24, v25);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 72);
  swift_bridgeObjectRetain();
  v27(v23, a2, v25, v26);
  uint64_t v28 = *(void *)(v24 + 24);
  uint64_t v29 = *(void *)(v24 + 32);
  sub_100055EF0(v24, v28);
  (*(void (**)(void, uint64_t, uint64_t))(v29 + 24))(0, v28, v29);
  uint64_t v30 = *(void *)(v24 + 24);
  uint64_t v31 = *(void *)(v24 + 32);
  sub_100055EF0(v24, v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 48))(v15, 0, v30, v31);
  return swift_endAccess();
}

uint64_t sub_10023BB00@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_10023BB10(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, a3, a4, v13, a6, a7, a1, a2);
}

id sub_10023BB94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for OSSignposter();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[3] = type metadata accessor for InterestSyncStorage();
  v16[4] = &protocol witness table for InterestSyncStorage;
  v16[0] = a1;
  uint64_t v10 = a3;
  static OSSignposter.interests.getter();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState] = 0;
  sub_100056D54((uint64_t)v16, (uint64_t)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage]);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_cloudSyncBugReporter] = a2;
  swift_unknownObjectRetain();

  uint64_t v11 = (objc_class *)type metadata accessor for InterestSyncProcessor();
  v15.receiver = v10;
  v15.super_class = v11;
  [super init];
  sub_10004D2D8((uint64_t)v16);
  return v12;
}

uint64_t sub_10023BD14(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = type metadata accessor for OSSignposter();
  uint64_t v43 = *(void *)(v15 - 8);
  uint64_t v44 = v15;
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSSignposter.cloudSync.getter();
  uint64_t v42 = v9;
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v48(v14, v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID, v8);
  swift_bridgeObjectRetain_n();
  id v41 = v17;
  uint64_t v18 = OSSignposter.logHandle.getter();
  int v39 = static os_signpost_type_t.begin.getter();
  char v19 = OS_os_log.signpostsEnabled.getter();
  unint64_t v45 = v7;
  if (v19)
  {
    v48(v12, (uint64_t)v14, v8);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = v3;
    unint64_t v21 = (uint8_t *)v20;
    v50[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    v49[1] = sub_10004B974(v40, a2, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, (os_signpost_type_t)v39, v22, "InterestSyncProcessor.GET", "%s", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v45;
    swift_slowDealloc();
    uint64_t v3 = v38;
    swift_slowDealloc();

    uint64_t v23 = v42;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v8);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v23 = v42;
  }
  v48(v12, (uint64_t)v14, v8);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v24 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v8);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v44);
  *(void *)(v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState) = v24;
  swift_release();
  uint64_t v25 = v3 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess();
  sub_100056D54(v25, (uint64_t)v50);
  uint64_t v26 = v51;
  uint64_t v27 = v52;
  sub_100041A98(v50, v51);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 64))(v26, v27);
  uint64_t v30 = v29;
  sub_10004D2D8((uint64_t)v50);
  static Logger.cloudSync.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  if (os_log_type_enabled(v32, v31))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315138;
    v50[0] = v28;
    v50[1] = v30;
    swift_bridgeObjectRetain();
    sub_100054B78(&qword_1005F93A0);
    uint64_t v34 = String.init<A>(describing:)();
    v50[0] = sub_10004B974(v34, v35, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v31, "[Interests] Version for Get transaction: %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v47);
  }
  return v28;
}

uint64_t sub_10023C30C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v87 = a1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v93 = &v82[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = &v82[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v16 = &v82[-v15];
  uint64_t v17 = type metadata accessor for OSSignposter();
  uint64_t v90 = *(void *)(v17 - 8);
  uint64_t v91 = v17;
  __chkstk_darwin(v17);
  char v19 = &v82[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static OSSignposter.cloudSync.getter();
  uint64_t v92 = v4;
  uint64_t v88 = v11;
  id v94 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16);
  v94(v16, v4 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostID, v10);
  unint64_t v20 = a2;
  swift_bridgeObjectRetain_n();
  v89 = v19;
  unint64_t v21 = OSSignposter.logHandle.getter();
  int v83 = static os_signpost_type_t.begin.getter();
  char v22 = OS_os_log.signpostsEnabled.getter();
  uint64_t v85 = v7;
  uint64_t v86 = a3;
  uint64_t v84 = v8;
  if (v22)
  {
    v94(v14, (uint64_t)v16, v10);
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v97[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v96 = sub_10004B974(v87, v20, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v83, v24, "InterestSyncProcessor.SET", "%s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = v88;
    (*(void (**)(unsigned char *, uint64_t))(v88 + 8))(v14, v10);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v25 = v88;
  }
  v94(v14, (uint64_t)v16, v10);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v26 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v16, v10);
  (*(void (**)(unsigned char *, uint64_t))(v90 + 8))(v89, v91);
  uint64_t v27 = v92;
  *(void *)(v92 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_signpostState) = v26;
  swift_release();
  uint64_t v28 = v27 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess();
  sub_100056D54(v28, (uint64_t)v97);
  uint64_t v29 = v98;
  uint64_t v30 = v99;
  sub_100041A98(v97, v98);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 112))(v29, v30);
  sub_10004D2D8((uint64_t)v97);
  uint64_t v32 = v93;
  if (!*(void *)(v31 + 16))
  {
    sub_100056D54(v28, (uint64_t)v97);
    uint64_t v44 = v98;
    uint64_t v45 = v99;
    sub_100041A98(v97, v98);
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 64))(v44, v45);
    if (!v47)
    {
      sub_10004D2D8((uint64_t)v97);
      goto LABEL_5;
    }
    uint64_t v48 = v46;
    unint64_t v49 = v47;
    uint64_t result = sub_10004D2D8((uint64_t)v97);
    uint64_t v51 = HIBYTE(v49) & 0xF;
    uint64_t v52 = v48 & 0xFFFFFFFFFFFFLL;
    if ((v49 & 0x2000000000000000) != 0) {
      uint64_t v53 = HIBYTE(v49) & 0xF;
    }
    else {
      uint64_t v53 = v48 & 0xFFFFFFFFFFFFLL;
    }
    if (!v53)
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if ((v49 & 0x1000000000000000) != 0)
    {
      uint64_t v55 = sub_10035C284(v48, v49, 10);
      char v57 = v81;
      goto LABEL_60;
    }
    if ((v49 & 0x2000000000000000) == 0)
    {
      if ((v48 & 0x1000000000000000) != 0) {
        uint64_t v54 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v54 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v55 = (uint64_t)sub_10035C26C(v54, v52, 10);
      char v57 = v56 & 1;
LABEL_60:
      swift_bridgeObjectRelease();
      if ((v57 & 1) == 0 && v55 >= 11)
      {
        uint64_t v73 = *(void **)(v27 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_cloudSyncBugReporter);
        sub_100056D54(v28, (uint64_t)v97);
        uint64_t v74 = v98;
        uint64_t v75 = v99;
        sub_100041A98(v97, v98);
        (*(void (**)(uint64_t, uint64_t))(v75 + 64))(v74, v75);
        if (v76)
        {
          NSString v77 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v77 = 0;
        }
        sub_10004D2D8((uint64_t)v97);
        [v73 reportInterestSyncIssue:0 version:v77 userInfo:0];
      }
      goto LABEL_5;
    }
    v97[0] = v48;
    v97[1] = v49 & 0xFFFFFFFFFFFFFFLL;
    if (v48 == 43)
    {
      if (!v51) {
        goto LABEL_76;
      }
      if (v51 == 1 || (BYTE1(v48) - 48) > 9u) {
        goto LABEL_47;
      }
      uint64_t v55 = (BYTE1(v48) - 48);
      if (v51 != 2)
      {
        if ((BYTE2(v48) - 48) > 9u) {
          goto LABEL_47;
        }
        uint64_t v55 = 10 * (BYTE1(v48) - 48) + (BYTE2(v48) - 48);
        uint64_t v64 = v51 - 3;
        if (v64)
        {
          os_log_type_t v65 = (unsigned __int8 *)v97 + 3;
          while (1)
          {
            unsigned int v66 = *v65 - 48;
            if (v66 > 9) {
              goto LABEL_47;
            }
            uint64_t v67 = 10 * v55;
            if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63) {
              goto LABEL_47;
            }
            uint64_t v55 = v67 + v66;
            if (__OFADD__(v67, v66)) {
              goto LABEL_47;
            }
            char v57 = 0;
            ++v65;
            if (!--v64) {
              goto LABEL_60;
            }
          }
        }
      }
    }
    else
    {
      if (v48 == 45)
      {
        if (v51)
        {
          if (v51 != 1 && (BYTE1(v48) - 48) <= 9u)
          {
            if (v51 == 2)
            {
              char v57 = 0;
              uint64_t v55 = -(uint64_t)(BYTE1(v48) - 48);
              goto LABEL_60;
            }
            if ((BYTE2(v48) - 48) <= 9u)
            {
              uint64_t v55 = -10 * (BYTE1(v48) - 48) - (BYTE2(v48) - 48);
              uint64_t v72 = v51 - 3;
              if (!v72) {
                goto LABEL_59;
              }
              long long v78 = (unsigned __int8 *)v97 + 3;
              while (1)
              {
                unsigned int v79 = *v78 - 48;
                if (v79 > 9) {
                  break;
                }
                uint64_t v80 = 10 * v55;
                if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63) {
                  break;
                }
                uint64_t v55 = v80 - v79;
                if (__OFSUB__(v80, v79)) {
                  break;
                }
                char v57 = 0;
                ++v78;
                if (!--v72) {
                  goto LABEL_60;
                }
              }
            }
          }
LABEL_47:
          uint64_t v55 = 0;
          char v57 = 1;
          goto LABEL_60;
        }
        __break(1u);
LABEL_76:
        __break(1u);
        return result;
      }
      if (!v51 || (v48 - 48) > 9u) {
        goto LABEL_47;
      }
      uint64_t v55 = (v48 - 48);
      if (v51 != 1)
      {
        if ((BYTE1(v48) - 48) > 9u) {
          goto LABEL_47;
        }
        uint64_t v55 = 10 * (v48 - 48) + (BYTE1(v48) - 48);
        uint64_t v68 = v51 - 2;
        if (v68)
        {
          uint64_t v69 = (unsigned __int8 *)v97 + 2;
          while (1)
          {
            unsigned int v70 = *v69 - 48;
            if (v70 > 9) {
              goto LABEL_47;
            }
            uint64_t v71 = 10 * v55;
            if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63) {
              goto LABEL_47;
            }
            uint64_t v55 = v71 + v70;
            if (__OFADD__(v71, v70)) {
              goto LABEL_47;
            }
            char v57 = 0;
            ++v69;
            if (!--v68) {
              goto LABEL_60;
            }
          }
        }
      }
    }
LABEL_59:
    char v57 = 0;
    goto LABEL_60;
  }
LABEL_5:
  static Logger.cloudSync.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  if (os_log_type_enabled(v34, v33))
  {
    uint64_t v35 = swift_slowAlloc();
    v97[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_bridgeObjectRetain();
    sub_100054B78(&qword_1005F8378);
    uint64_t v36 = Array.description.getter();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v95 = sub_10004B974(v36, v38, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v95 = sub_10004B974(v87, v20, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, v33, "[Interests] Providing data for SET transaction. interests: %s, key: %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v93, v85);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v32, v85);
  }
  int v39 = v86;
  sub_100056D54(v28, (uint64_t)v97);
  uint64_t v40 = v98;
  uint64_t v41 = v99;
  sub_100041A98(v97, v98);
  (*(void (**)(uint64_t, uint64_t))(v41 + 64))(v40, v41);
  if (v42)
  {
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v43 = 0;
  }
  sub_10004D2D8((uint64_t)v97);
  id v58 = v43;
  void *v39 = v43;
  id v59 = [objc_allocWithZone((Class)MZKeyValueStoreNode) init];
  sub_1001B7FC0(v31);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v59 setArrayValue:isa];

  id v61 = [v59 value];
  if (v61)
  {
    uint64_t v62 = v61;
    uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {

    return 0;
  }
  return v63;
}

void sub_10023CE4C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v62 = (char *)&v56 - v8;
  uint64_t v9 = sub_100054B78((uint64_t *)&unk_1005FC2A0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unsigned int v66 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v14 = type metadata accessor for RemoteInterest();
  uint64_t v64 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v72 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v63 = (char *)&v56 - v17;
  id v18 = [objc_allocWithZone((Class)MZKeyValueStoreNode) init];
  Class isa = 0;
  if (a2 >> 60 != 15) {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v18 setValue:isa];

  if ([v18 hasData])
  {
    id v20 = [v18 arrayValue];
    if (!v20
      || (unint64_t v21 = v20,
          uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v21,
          uint64_t v23 = sub_1003E4BB4(v22),
          swift_bridgeObjectRelease(),
          !v23))
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = _swiftEmptyArrayStorage;
    }
    uint64_t v24 = (uint64_t)v66;
    uint64_t v70 = v23[2];
    if (v70)
    {
      id v57 = v18;
      uint64_t v75 = v64 + 56;
      uint64_t v65 = v4 + 8;
      uint64_t v68 = (void (**)(char *, uint64_t, uint64_t))(v64 + 32);
      uint64_t v69 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
      uint64_t v71 = v23;
      swift_bridgeObjectRetain();
      uint64_t v25 = 0;
      uint64_t v26 = _swiftEmptyArrayStorage;
      *(void *)&long long v27 = 136380675;
      long long v60 = v27;
      id v59 = (char *)&type metadata for Any + 8;
      uint64_t v73 = v14;
      uint64_t v61 = v3;
      uint64_t v67 = v13;
      do
      {
        swift_bridgeObjectRetain();
        RemoteInterest.init(dictionary:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v75)(v24, 0, 1, v14);
        uint64_t v28 = (uint64_t)v67;
        sub_10023E328(v24, (uint64_t)v67);
        if ((*v69)(v28, 1, v14) == 1)
        {
          sub_10023E23C(v28);
        }
        else
        {
          uint64_t v29 = *v68;
          uint64_t v30 = v63;
          (*v68)(v63, v28, v14);
          v29(v72, (uint64_t)v30, v14);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v26 = (void *)sub_1002EFB54(0, v26[2] + 1, 1, (unint64_t)v26);
          }
          unint64_t v32 = v26[2];
          unint64_t v31 = v26[3];
          if (v32 >= v31 >> 1) {
            uint64_t v26 = (void *)sub_1002EFB54(v31 > 1, v32 + 1, 1, (unint64_t)v26);
          }
          v26[2] = v32 + 1;
          unint64_t v33 = (unint64_t)v26
              + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))
              + *(void *)(v64 + 72) * v32;
          uint64_t v14 = v73;
          v29((char *)v33, (uint64_t)v72, v73);
          uint64_t v24 = (uint64_t)v66;
        }
        ++v25;
      }
      while (v70 != v25);
      swift_bridgeObjectRelease_n();
      id v18 = v57;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = _swiftEmptyArrayStorage;
    }
    uint64_t v48 = &v58[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage];
    swift_beginAccess();
    sub_100056D54((uint64_t)v48, (uint64_t)aBlock);
    unint64_t v49 = v77;
    unint64_t v50 = v78;
    sub_100041A98(aBlock, (uint64_t)v77);
    uint64_t v51 = (void *)(*((uint64_t (**)(void *, uint64_t (*)()))v50 + 1))(v49, v50);
    sub_10004D2D8((uint64_t)aBlock);
    uint64_t v52 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v53 = (void *)swift_allocObject();
    v53[2] = v52;
    v53[3] = v26;
    v53[4] = v51;
    long long v78 = sub_10023E31C;
    unsigned int v79 = v53;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003B424;
    NSString v77 = &unk_10055AE80;
    uint64_t v54 = _Block_copy(aBlock);
    id v55 = v51;
    swift_release();
    [v55 performBlockAndWaitWithSave:v54];
    _Block_release(v54);
  }
  else
  {
    static Logger.cloudSync.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    uint64_t v35 = v58;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = v34;
    if (os_log_type_enabled(v36, v34))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      id v57 = v18;
      uint64_t v75 = v4;
      *(_DWORD *)unint64_t v38 = 136315138;
      uint64_t v82 = v39;
      uint64_t v74 = v38 + 4;
      uint64_t v40 = (uint64_t)&v35[OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage];
      swift_beginAccess();
      sub_100056D54(v40, (uint64_t)aBlock);
      uint64_t v61 = v3;
      uint64_t v42 = v77;
      uint64_t v41 = v78;
      sub_100041A98(aBlock, (uint64_t)v77);
      uint64_t v43 = (*((uint64_t (**)(void *, uint64_t (*)()))v41 + 8))(v42, v41);
      uint64_t v45 = v44;
      sub_10004D2D8((uint64_t)aBlock);
      uint64_t v80 = v43;
      uint64_t v81 = v45;
      sub_100054B78(&qword_1005F93A0);
      uint64_t v46 = String.init<A>(describing:)();
      aBlock[0] = sub_10004B974(v46, v47, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "[Interests] Empty remote Interests key for current version %s. Nothing to merge.", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v61);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }
  }
}

void sub_10023D8A0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  unint64_t v27 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  id v18 = Logger.logObject.getter();
  if (os_log_type_enabled(v18, v17))
  {
    uint64_t v24 = v9;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v22 = a7;
    id v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v23 = a8;
    uint64_t v31 = v21;
    *(_DWORD *)id v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_10004B974(v25, a4, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "[Interests] Updating local cache after GET transaction for key %s", v20, 0xCu);
    swift_arrayDestroy();
    a8 = v23;
    swift_slowDealloc();
    a7 = v22;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  sub_10023CE4C(v26, v27);
  sub_1002397AC(v28, v29, a7, a8);
}

void sub_10023DAE8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v23 = a1;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  if (os_log_type_enabled(v16, v15))
  {
    id v20 = a5;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v21 = a6;
    id v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v22 = v7;
    uint64_t v27 = v19;
    *(_DWORD *)id v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_10004B974(v23, a2, &v27);
    a5 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v15, "[Interests] Successful SET transaction for key %s, marking everything as synced and finishing normally.", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v21;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_1002397AC(v24, v25, a5, a6);
}

uint64_t sub_10023DD24(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  unint64_t v33 = a2;
  uint64_t v34 = a5;
  uint64_t v30 = a3;
  uint64_t v32 = a1;
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  id v18 = Logger.logObject.getter();
  if (os_log_type_enabled(v18, v17))
  {
    uint64_t v27 = a7;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v28 = a8;
    id v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v29 = a6;
    v36[0] = v21;
    *(_DWORD *)id v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_10004B974(v30, a4, v36);
    a7 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "[Interests] Failure on SET transaction for key %s, Bookkeeper copy has diverged from local copy, we must merge both.", v20, 0xCu);
    swift_arrayDestroy();
    a6 = v29;
    swift_slowDealloc();
    a8 = v28;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v31);
  sub_10023CE4C(v32, v33);
  sub_10023A030(a7, a8);
  uint64_t v22 = v9 + OBJC_IVAR____TtC8Podcasts21InterestSyncProcessor_interestSyncStorage;
  swift_beginAccess();
  uint64_t v23 = *(void *)(v22 + 24);
  uint64_t v24 = *(void *)(v22 + 32);
  sub_100055EF0(v22, v23);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 72);
  swift_bridgeObjectRetain();
  v25(v34, a6, v23, v24);
  return swift_endAccess();
}

uint64_t sub_10023DFD4()
{
  return type metadata accessor for InterestSyncProcessor();
}

uint64_t sub_10023DFDC()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10023E088()
{
  uint64_t v0 = type metadata accessor for Podcasts();
  uint64_t v10 = v0;
  unint64_t v1 = sub_10023E1AC();
  unint64_t v11 = v1;
  uint64_t v2 = sub_10004A244(v9);
  uint64_t v3 = *(void (**)(uint64_t *, void, uint64_t))(*(void *)(v0 - 8) + 104);
  v3(v2, enum case for Podcasts.ponderosa(_:), v0);
  char v4 = isFeatureEnabled(_:)();
  sub_10004D2D8((uint64_t)v9);
  if ((v4 & 1) != 0
    && (uint64_t v10 = v0,
        unint64_t v11 = v1,
        uint64_t v5 = sub_10004A244(v9),
        v3(v5, enum case for Podcasts.ponderosaSync(_:), v0),
        char v6 = isFeatureEnabled(_:)(),
        sub_10004D2D8((uint64_t)v9),
        (v6 & 1) != 0)
    && (uint64_t v7 = self, ([v7 isRunningOnHomepod] & 1) == 0))
  {
    return [v7 isRunningOnTV] ^ 1;
  }
  else
  {
    return 0;
  }
}

unint64_t sub_10023E1AC()
{
  unint64_t result = qword_1005F79D0;
  if (!qword_1005F79D0)
  {
    type metadata accessor for Podcasts();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F79D0);
  }
  return result;
}

uint64_t sub_10023E204()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_10023E23C(uint64_t a1)
{
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005FC2A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10023E29C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10023E2D4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10023E31C()
{
  return sub_10023A734(v0[2], v0[3], v0[4]);
}

uint64_t sub_10023E328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005FC2A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10023E39C(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v37 = a1;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v32 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10);
  uint64_t v31 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PodcastReview();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v18 = (char *)&v30 - v17;
  uint64_t v19 = sub_100054B78(&qword_1005FC360);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v36 = a2;
  if (a2 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v21, 1, 1, v12);
    a4(v21);
    return sub_100054B1C((uint64_t)v21, &qword_1005FC360);
  }
  else
  {
    uint64_t v30 = v8;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    sub_10023FCA8(v37, v36);
    JSONDecoder.init()();
    sub_10004ACEC(&qword_1005FC368, (void (*)(uint64_t))&type metadata accessor for PodcastReview);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
    uint64_t v23 = (void *)static OS_dispatch_queue.main.getter();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    unint64_t v24 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = a4;
    *(void *)(v25 + 24) = a5;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v25 + v24, v16, v12);
    aBlock[4] = sub_10023FE14;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003B424;
    void aBlock[3] = &unk_10055B038;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    uint64_t v27 = v31;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_10004ACEC((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100054B78((uint64_t *)&unk_1005FE4B0);
    sub_10002FBEC();
    uint64_t v28 = v32;
    uint64_t v29 = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);

    sub_10021A3FC(v37, v36);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
}

uint64_t sub_10023EB28(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100054B78(&qword_1005FC360);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PodcastReview();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a3, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  a1(v7);
  return sub_100054B1C((uint64_t)v7, &qword_1005FC360);
}

uint64_t sub_10023EC4C(void (*a1)(char *))
{
  uint64_t v2 = sub_100054B78(&qword_1005FC360);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PodcastReview();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  a1(v4);
  return sub_100054B1C((uint64_t)v4, &qword_1005FC360);
}

uint64_t sub_10023ED20(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_10021A3FC((uint64_t)v4, v8);

  return swift_release();
}

void ReviewController.saveReview(forAdamId:review:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PodcastReview.Metadata();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  PodcastReview.metadata.getter();
  PodcastReview.Metadata.saveURL.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v13 = PodcastReview.httpData(forAdamId:)();
  unint64_t v15 = v14;
  URL._bridgeToObjectiveC()(v16);
  id v18 = v17;
  Class isa = 0;
  if (v15 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10021A3FC(v13, v15);
  }
  id v20 = [objc_allocWithZone((Class)IMSaveReviewService) initWithEndpointURL:v18 bodyData:isa];

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = v27;
  uint64_t v24 = v28;
  v22[2] = v21;
  v22[3] = v23;
  v22[4] = v24;
  aBlock[4] = sub_10023FC18;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10023ED20;
  void aBlock[3] = &unk_10055AEF8;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v20 performDataRequestWithCompletion:v25];
  _Block_release(v25);
}

uint64_t sub_10023F0B4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v15 - 8);
  uint64_t v24 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  uint64_t v22 = static OS_dispatch_queue.main.getter();
  id v18 = (void *)swift_allocObject();
  v18[2] = a4;
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a5;
  v18[6] = a6;
  v18[7] = a3;
  aBlock[4] = sub_10023FC84;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055AF48;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  sub_10023FC94(a1, a2);
  swift_retain();
  swift_errorRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10004ACEC((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10002FBEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v20 = (void *)v22;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v17, v24);
}

uint64_t sub_10023F3AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(BOOL, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_100054B78(&qword_1005FC350);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for PodcastReviewServerError();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10023F644(a2, a3, v12);
    swift_release();
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
    {
      (*(void (**)(char *, void *, uint64_t))(v14 + 32))(v16, v12, v13);
      sub_10004ACEC(&qword_1005FC358, (void (*)(uint64_t))&type metadata accessor for PodcastReviewServerError);
      uint64_t v17 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v18, v16, v13);
      a4(0, v17);
      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
  }
  else
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  }
  sub_100054B1C((uint64_t)v12, &qword_1005FC350);
  return a4(a3 >> 60 != 15, a6);
}

uint64_t sub_10023F644@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 >> 60 == 15) {
    goto LABEL_20;
  }
  uint64_t v6 = self;
  sub_10023FCA8(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v23[0] = 0;
  id v8 = [v6 JSONObjectWithData:isa options:4 error:v23];

  if (!v8)
  {
    id v12 = v23[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10021A3FC(a1, a2);
    swift_errorRelease();
    goto LABEL_20;
  }
  id v9 = v23[0];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10004D29C(0, (unint64_t *)&qword_1005F88D0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_10021A3FC(a1, a2);
    goto LABEL_20;
  }
  uint64_t v10 = (void *)v21;
  *(void *)&long long v21 = 0x676F6C616964;
  *((void *)&v21 + 1) = 0xE600000000000000;
  id v11 = [v10 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_100004C04((uint64_t)&v21, (uint64_t)v23);
  if (!v24)
  {
    sub_10021A3FC(a1, a2);

    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_10021A3FC(a1, a2);

    goto LABEL_20;
  }
  *(void *)&long long v21 = 0x6567617373656DLL;
  *((void *)&v21 + 1) = 0xE700000000000000;
  id v13 = [v19 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    sub_10021A3FC(a1, a2);

    swift_unknownObjectRelease();
  }
  else
  {
    sub_10021A3FC(a1, a2);

    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_100004C04((uint64_t)&v21, (uint64_t)v23);
  if (!v24)
  {
LABEL_19:
    sub_100054B1C((uint64_t)v23, &qword_1005F5D30);
    goto LABEL_20;
  }
  if (swift_dynamicCast())
  {
    *a3 = v19;
    a3[1] = v20;
    uint64_t v14 = enum case for PodcastReviewServerError.generic(_:);
    uint64_t v15 = type metadata accessor for PodcastReviewServerError();
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v16 + 104))(a3, v14, v15);
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(a3, 0, 1, v15);
  }
LABEL_20:
  uint64_t v18 = type metadata accessor for PodcastReviewServerError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a3, 1, 1, v18);
}

uint64_t ChannelLockupGenerator.deinit()
{
  return v0;
}

void _s8Podcasts16ReviewControllerC013fetchExistingB09forAdamId10completionySS_y8ShelfKit07PodcastB0VSgctF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_allocWithZone((Class)IMFetchReviewService);
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithAdamID:v7];

  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  v11[4] = sub_10023FD38;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10023ED20;
  v11[3] = &unk_10055AF98;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  [v8 performDataRequestWithCompletion:v10];
  _Block_release(v10);
}

uint64_t sub_10023FBA0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10023FBD8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10023FC18(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10023F0B4(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_10023FC24()
{
  swift_release();
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_10021A410(*(void *)(v0 + 24), v1);
  }
  swift_release();
  swift_errorRelease();

  return swift_deallocObject();
}

uint64_t sub_10023FC84()
{
  return sub_10023F3AC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(uint64_t (**)(BOOL, uint64_t))(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_10023FC94(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10023FCA8(a1, a2);
  }
  return a1;
}

uint64_t sub_10023FCA8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10023FD00()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10023FD38(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10023E39C(a1, a2, a3, *(void (**)(char *))(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_10023FD40()
{
  return sub_10023EC4C(*(void (**)(char *))(v0 + 16));
}

uint64_t sub_10023FD48()
{
  uint64_t v1 = type metadata accessor for PodcastReview();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10023FE14()
{
  uint64_t v1 = *(void *)(type metadata accessor for PodcastReview() - 8);
  uint64_t v2 = *(void (**)(char *))(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10023EB28(v2, v3, v4);
}

void *sub_10023FE9C(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      id v12 = (int *)type metadata accessor for DownloadJob(0);
      uint64_t v13 = v12[5];
      uint64_t v14 = (void *)((char *)a1 + v13);
      uint64_t v15 = (void *)((char *)a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v12[6];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v58 = type metadata accessor for Date();
      uint64_t v59 = *(void *)(v58 - 8);
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
      swift_bridgeObjectRetain();
      uint64_t v53 = v20;
      v20(v18, v19, v58);
      *(void *)((char *)a1 + v12[7]) = *(void *)((char *)a2 + v12[7]);
      uint64_t v21 = v12[8];
      long long v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = *((void *)v23 + 1);
      *(void *)long long v22 = *(void *)v23;
      *((void *)v22 + 1) = v24;
      v22[16] = v23[16];
      uint64_t v54 = v12;
      uint64_t v25 = v12[9];
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = *(void *)((char *)a2 + v25 + 8);
      *(void *)uint64_t v26 = *(void *)((char *)a2 + v25);
      *((void *)v26 + 1) = v28;
      uint64_t v29 = *(void *)((char *)a2 + v25 + 24);
      *((void *)v26 + 2) = *(void *)((char *)a2 + v25 + 16);
      *((void *)v26 + 3) = v29;
      *((void *)v26 + 4) = *(void *)((char *)a2 + v25 + 32);
      v26[40] = *((unsigned char *)a2 + v25 + 40);
      *((void *)v26 + 6) = *(void *)((char *)a2 + v25 + 48);
      v26[56] = *((unsigned char *)a2 + v25 + 56);
      uint64_t v30 = *(void *)((char *)a2 + v25 + 72);
      *((void *)v26 + 8) = *(void *)((char *)a2 + v25 + 64);
      *((void *)v26 + 9) = v30;
      uint64_t v31 = *(void *)((char *)a2 + v25 + 88);
      *((void *)v26 + 10) = *(void *)((char *)a2 + v25 + 80);
      *((void *)v26 + 11) = v31;
      uint64_t v32 = *(void *)((char *)a2 + v25 + 104);
      *((void *)v26 + 12) = *(void *)((char *)a2 + v25 + 96);
      *((void *)v26 + 13) = v32;
      uint64_t v33 = (int *)type metadata accessor for EpisodeMetadata(0);
      uint64_t v34 = v33[11];
      uint64_t v56 = &v27[v34];
      id v57 = &v26[v34];
      uint64_t v35 = type metadata accessor for URL();
      id v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v55(v57, v56, v35);
      v26[v33[12]] = v27[v33[12]];
      uint64_t v36 = v33[13];
      uint64_t v37 = &v26[v36];
      unint64_t v38 = &v27[v36];
      v37[8] = v38[8];
      *(void *)uint64_t v37 = *(void *)v38;
      uint64_t v39 = v33[14];
      uint64_t v40 = &v26[v39];
      uint64_t v41 = &v27[v39];
      v40[8] = v41[8];
      *(void *)uint64_t v40 = *(void *)v41;
      uint64_t v42 = v33[15];
      uint64_t v43 = &v26[v42];
      uint64_t v44 = &v27[v42];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(&v27[v42], 1, v58))
      {
        uint64_t v45 = sub_100054B78(&qword_1005F5D20);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        v53(v43, v44, v58);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v43, 0, 1, v58);
      }
      uint64_t v47 = v54[10];
      uint64_t v48 = (char *)a1 + v47;
      unint64_t v49 = (char *)a2 + v47;
      uint64_t v50 = *((void *)v49 + 3);
      if ((unint64_t)(v50 - 1) >= 4)
      {
        *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
        *((void *)v48 + 2) = *((void *)v49 + 2);
        *((void *)v48 + 3) = v50;
        uint64_t v52 = *((void *)v49 + 5);
        *((void *)v48 + 4) = *((void *)v49 + 4);
        *((void *)v48 + 5) = v52;
        *((_WORD *)v48 + 24) = *((_WORD *)v49 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v51 = *((_OWORD *)v49 + 1);
        *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
        *((_OWORD *)v48 + 1) = v51;
        *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
        *((_WORD *)v48 + 24) = *((_WORD *)v49 + 24);
      }
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v46 = a2[1];
      *a1 = *a2;
      a1[1] = v46;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = *a2;
      swift_errorRetain();
      *a1 = v8;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1002402F4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 2)
  {
    if (result != 1)
    {
      if (!result)
      {
        return swift_errorRelease();
      }
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  uint64_t v4 = (int *)type metadata accessor for DownloadJob(0);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + v4[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + v4[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for EpisodeMetadata(0);
  uint64_t v11 = v9 + *(int *)(v10 + 44);
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v9 + *(int *)(v10 + 60);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6)) {
    v8(v13, v6);
  }
  uint64_t result = *(void *)(a1 + v4[10] + 24);
  if ((unint64_t)(result - 1) >= 4)
  {
LABEL_11:
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_10024053C(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = (int *)type metadata accessor for DownloadJob(0);
      uint64_t v10 = v9[5];
      uint64_t v11 = (void *)((char *)a1 + v10);
      uint64_t v12 = (void *)((char *)a2 + v10);
      uint64_t v13 = v12[1];
      *uint64_t v11 = *v12;
      v11[1] = v13;
      uint64_t v14 = v9[6];
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v55 = type metadata accessor for Date();
      uint64_t v56 = *(void *)(v55 - 8);
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
      swift_bridgeObjectRetain();
      long long v51 = v17;
      v17(v15, v16, v55);
      *(void *)((char *)a1 + v9[7]) = *(void *)((char *)a2 + v9[7]);
      uint64_t v18 = v9[8];
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = *((void *)v20 + 1);
      *(void *)uint64_t v19 = *(void *)v20;
      *((void *)v19 + 1) = v21;
      v19[16] = v20[16];
      id v57 = v9;
      uint64_t v22 = v9[9];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = *(void *)((char *)a2 + v22 + 8);
      *(void *)uint64_t v23 = *(void *)((char *)a2 + v22);
      *((void *)v23 + 1) = v25;
      uint64_t v26 = *(void *)((char *)a2 + v22 + 24);
      *((void *)v23 + 2) = *(void *)((char *)a2 + v22 + 16);
      *((void *)v23 + 3) = v26;
      *((void *)v23 + 4) = *(void *)((char *)a2 + v22 + 32);
      v23[40] = *((unsigned char *)a2 + v22 + 40);
      *((void *)v23 + 6) = *(void *)((char *)a2 + v22 + 48);
      v23[56] = *((unsigned char *)a2 + v22 + 56);
      uint64_t v27 = *(void *)((char *)a2 + v22 + 72);
      *((void *)v23 + 8) = *(void *)((char *)a2 + v22 + 64);
      *((void *)v23 + 9) = v27;
      uint64_t v28 = *(void *)((char *)a2 + v22 + 88);
      *((void *)v23 + 10) = *(void *)((char *)a2 + v22 + 80);
      *((void *)v23 + 11) = v28;
      uint64_t v29 = *(void *)((char *)a2 + v22 + 104);
      *((void *)v23 + 12) = *(void *)((char *)a2 + v22 + 96);
      *((void *)v23 + 13) = v29;
      uint64_t v30 = (int *)type metadata accessor for EpisodeMetadata(0);
      uint64_t v31 = v30[11];
      uint64_t v53 = &v24[v31];
      uint64_t v54 = &v23[v31];
      uint64_t v32 = type metadata accessor for URL();
      uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v52(v54, v53, v32);
      v23[v30[12]] = v24[v30[12]];
      uint64_t v33 = v30[13];
      uint64_t v34 = &v23[v33];
      uint64_t v35 = &v24[v33];
      v34[8] = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      uint64_t v36 = v30[14];
      uint64_t v37 = &v23[v36];
      unint64_t v38 = &v24[v36];
      v37[8] = v38[8];
      *(void *)uint64_t v37 = *(void *)v38;
      uint64_t v39 = v30[15];
      uint64_t v40 = &v23[v39];
      uint64_t v41 = &v24[v39];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(&v24[v39], 1, v55))
      {
        uint64_t v42 = sub_100054B78(&qword_1005F5D20);
        memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        v51(v40, v41, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v40, 0, 1, v55);
      }
      uint64_t v44 = v57[10];
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      uint64_t v47 = *((void *)v46 + 3);
      if ((unint64_t)(v47 - 1) >= 4)
      {
        *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
        *((void *)v45 + 2) = *((void *)v46 + 2);
        *((void *)v45 + 3) = v47;
        uint64_t v49 = *((void *)v46 + 5);
        *((void *)v45 + 4) = *((void *)v46 + 4);
        *((void *)v45 + 5) = v49;
        *((_WORD *)v45 + 24) = *((_WORD *)v46 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v48 = *((_OWORD *)v46 + 1);
        *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
        *((_OWORD *)v45 + 1) = v48;
        *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
        *((_WORD *)v45 + 24) = *((_WORD *)v46 + 24);
      }
      goto LABEL_13;
    case 1:
      uint64_t v43 = a2[1];
      *a1 = *a2;
      a1[1] = v43;
      swift_bridgeObjectRetain();
      goto LABEL_13;
    case 0:
      uint64_t v7 = *a2;
      swift_errorRetain();
      *a1 = v7;
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_100240948(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100240DC4((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = (int *)type metadata accessor for DownloadJob(0);
        uint64_t v10 = v9[5];
        uint64_t v11 = (void *)((char *)a1 + v10);
        uint64_t v12 = (void *)((char *)a2 + v10);
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
        uint64_t v13 = v9[6];
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for Date();
        uint64_t v52 = *(void *)(v16 - 8);
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
        swift_bridgeObjectRetain();
        long long v48 = v17;
        v17(v14, v15, v16);
        *(void *)((char *)a1 + v9[7]) = *(void *)((char *)a2 + v9[7]);
        uint64_t v18 = v9[8];
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        *(void *)uint64_t v19 = *(void *)v20;
        *((void *)v19 + 1) = *((void *)v20 + 1);
        v19[16] = v20[16];
        uint64_t v21 = v9[9];
        uint64_t v22 = (char *)a1 + v21;
        uint64_t v23 = (char *)a2 + v21;
        *(void *)uint64_t v22 = *(void *)((char *)a2 + v21);
        *((void *)v22 + 1) = *(void *)((char *)a2 + v21 + 8);
        *((void *)v22 + 2) = *(void *)((char *)a2 + v21 + 16);
        *((void *)v22 + 3) = *(void *)((char *)a2 + v21 + 24);
        uint64_t v24 = *(void *)((char *)a2 + v21 + 32);
        v22[40] = v23[40];
        *((void *)v22 + 4) = v24;
        LOBYTE(v24) = v23[56];
        *((void *)v22 + 6) = *((void *)v23 + 6);
        v22[56] = v24;
        *((void *)v22 + 8) = *((void *)v23 + 8);
        *((void *)v22 + 9) = *((void *)v23 + 9);
        *((void *)v22 + 10) = *((void *)v23 + 10);
        *((void *)v22 + 11) = *((void *)v23 + 11);
        *((void *)v22 + 12) = *((void *)v23 + 12);
        *((void *)v22 + 13) = *((void *)v23 + 13);
        uint64_t v25 = (int *)type metadata accessor for EpisodeMetadata(0);
        uint64_t v26 = v25[11];
        uint64_t v50 = &v23[v26];
        long long v51 = &v22[v26];
        uint64_t v27 = type metadata accessor for URL();
        uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v49(v51, v50, v27);
        v22[v25[12]] = v23[v25[12]];
        uint64_t v28 = v25[13];
        uint64_t v29 = &v22[v28];
        uint64_t v30 = &v23[v28];
        char v31 = v30[8];
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v31;
        uint64_t v32 = v25[14];
        uint64_t v33 = &v22[v32];
        uint64_t v34 = &v23[v32];
        char v35 = v34[8];
        *(void *)uint64_t v33 = *(void *)v34;
        v33[8] = v35;
        uint64_t v36 = v25[15];
        uint64_t v37 = &v22[v36];
        unint64_t v38 = &v23[v36];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(&v23[v36], 1, v16))
        {
          uint64_t v39 = sub_100054B78(&qword_1005F5D20);
          memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          v48(v37, v38, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v37, 0, 1, v16);
        }
        uint64_t v40 = v9[10];
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        if ((unint64_t)(*((void *)v42 + 3) - 1) >= 4)
        {
          *(void *)uint64_t v41 = *(void *)v42;
          *((void *)v41 + 1) = *((void *)v42 + 1);
          *((void *)v41 + 2) = *((void *)v42 + 2);
          *((void *)v41 + 3) = *((void *)v42 + 3);
          *((void *)v41 + 4) = *((void *)v42 + 4);
          uint64_t v46 = *((void *)v42 + 5);
          v41[48] = v42[48];
          *((void *)v41 + 5) = v46;
          v41[49] = v42[49];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v43 = *(_OWORD *)v42;
          long long v44 = *((_OWORD *)v42 + 1);
          long long v45 = *((_OWORD *)v42 + 2);
          *((_WORD *)v41 + 24) = *((_WORD *)v42 + 24);
          *((_OWORD *)v41 + 1) = v44;
          *((_OWORD *)v41 + 2) = v45;
          *(_OWORD *)uint64_t v41 = v43;
        }
        goto LABEL_14;
      case 1:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_14;
      case 0:
        uint64_t v7 = *a2;
        swift_errorRetain();
        *a1 = v7;
LABEL_14:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100240DC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JobStorageError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for JobStorageError()
{
  uint64_t result = qword_1005FC3E0;
  if (!qword_1005FC3E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_100240E6C(char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = (int *)type metadata accessor for DownloadJob(0);
    *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
    uint64_t v8 = v7[6];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v41 = *(void *)(v11 - 8);
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v40(v9, v10, v11);
    *(void *)&a1[v7[7]] = *(void *)&a2[v7[7]];
    uint64_t v12 = v7[8];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    v13[16] = v14[16];
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    uint64_t v15 = v7[9];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    long long v18 = *(_OWORD *)&a2[v15 + 16];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)&a2[v15];
    *((_OWORD *)v16 + 1) = v18;
    v16[40] = a2[v15 + 40];
    *((void *)v16 + 4) = *(void *)&a2[v15 + 32];
    v16[56] = a2[v15 + 56];
    *((void *)v16 + 6) = *(void *)&a2[v15 + 48];
    long long v19 = *(_OWORD *)&a2[v15 + 80];
    *((_OWORD *)v16 + 4) = *(_OWORD *)&a2[v15 + 64];
    *((_OWORD *)v16 + 5) = v19;
    *((_OWORD *)v16 + 6) = *(_OWORD *)&a2[v15 + 96];
    uint64_t v20 = (int *)type metadata accessor for EpisodeMetadata(0);
    uint64_t v21 = v20[11];
    uint64_t v22 = &v16[v21];
    uint64_t v23 = &v17[v21];
    uint64_t v24 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
    v16[v20[12]] = v17[v20[12]];
    uint64_t v25 = v20[13];
    uint64_t v26 = &v16[v25];
    uint64_t v27 = &v17[v25];
    v26[8] = v27[8];
    *(void *)uint64_t v26 = *(void *)v27;
    uint64_t v28 = v20[14];
    uint64_t v29 = &v16[v28];
    uint64_t v30 = &v17[v28];
    v29[8] = v30[8];
    *(void *)uint64_t v29 = *(void *)v30;
    uint64_t v31 = v20[15];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = &v17[v31];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(&v17[v31], 1, v11))
    {
      uint64_t v34 = sub_100054B78(&qword_1005F5D20);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      v40(v32, v33, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v32, 0, 1, v11);
    }
    uint64_t v35 = v7[10];
    uint64_t v36 = &a1[v35];
    uint64_t v37 = &a2[v35];
    long long v38 = *((_OWORD *)v37 + 1);
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v38;
    *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
    *((_WORD *)v36 + 24) = *((_WORD *)v37 + 24);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10024118C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100240DC4((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for DownloadJob(0);
      *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
      uint64_t v8 = v7[6];
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v41 = *(void *)(v11 - 8);
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      v40(v9, v10, v11);
      *(void *)&a1[v7[7]] = *(void *)&a2[v7[7]];
      uint64_t v12 = v7[8];
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      v13[16] = v14[16];
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      uint64_t v15 = v7[9];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      long long v18 = *(_OWORD *)&a2[v15 + 16];
      *(_OWORD *)uint64_t v16 = *(_OWORD *)&a2[v15];
      *((_OWORD *)v16 + 1) = v18;
      v16[40] = a2[v15 + 40];
      *((void *)v16 + 4) = *(void *)&a2[v15 + 32];
      v16[56] = a2[v15 + 56];
      *((void *)v16 + 6) = *(void *)&a2[v15 + 48];
      long long v19 = *(_OWORD *)&a2[v15 + 80];
      *((_OWORD *)v16 + 4) = *(_OWORD *)&a2[v15 + 64];
      *((_OWORD *)v16 + 5) = v19;
      *((_OWORD *)v16 + 6) = *(_OWORD *)&a2[v15 + 96];
      uint64_t v20 = (int *)type metadata accessor for EpisodeMetadata(0);
      uint64_t v21 = v20[11];
      uint64_t v22 = &v16[v21];
      uint64_t v23 = &v17[v21];
      uint64_t v24 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
      v16[v20[12]] = v17[v20[12]];
      uint64_t v25 = v20[13];
      uint64_t v26 = &v16[v25];
      uint64_t v27 = &v17[v25];
      v26[8] = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      uint64_t v28 = v20[14];
      uint64_t v29 = &v16[v28];
      uint64_t v30 = &v17[v28];
      v29[8] = v30[8];
      *(void *)uint64_t v29 = *(void *)v30;
      uint64_t v31 = v20[15];
      uint64_t v32 = &v16[v31];
      uint64_t v33 = &v17[v31];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(&v17[v31], 1, v11))
      {
        uint64_t v34 = sub_100054B78(&qword_1005F5D20);
        memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        v40(v32, v33, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v32, 0, 1, v11);
      }
      uint64_t v35 = v7[10];
      uint64_t v36 = &a1[v35];
      uint64_t v37 = &a2[v35];
      long long v38 = *((_OWORD *)v37 + 1);
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v38;
      *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
      *((_WORD *)v36 + 24) = *((_WORD *)v37 + 24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1002414BC()
{
  uint64_t result = type metadata accessor for DownloadJob(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100241558()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = [self sharedInstance];
  id v6 = [v5 mainOrPrivateContext];

  sub_1001AC690(v1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {

    sub_1001AC758((uint64_t)v4);
    return 0;
  }
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v17 = 0;
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = &v17;
  v10[3] = v6;
  v10[4] = v8;
  v10[5] = v9;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100242A28;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_10004A010;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  void aBlock[3] = &unk_10055B0B0;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v6;
  swift_retain();
  swift_release();
  [v13 performBlockAndWait:v12];

  _Block_release(v12);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v13 & 1) == 0)
  {
    uint64_t v7 = v17;
    swift_release();
    return v7;
  }
  __break(1u);
  return result;
}

void sub_10024178C(void **a1, void *a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a2 podcastForUuid:v4];

  id v6 = *a1;
  *a1 = v5;
}

uint64_t sub_100241804()
{
  uint64_t v1 = type metadata accessor for ShowOffer();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  NSString v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = [*(id *)(v0 + 16) mainOrPrivateContext];
  uint64_t v9 = v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess();
  sub_1001AC690(v9, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v7, v1);
    aBlock[0] = ShowOffer.adamId.getter();
    sub_1001A5874();
    uint64_t v10 = BinaryInteger.description.getter();

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v10;
  }
  uint64_t v11 = *v7;
  uint64_t v12 = v7[1];
  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  id v13 = (void *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v11;
  v13[4] = v12;
  v13[5] = v20;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100242B0C;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100018840;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  void aBlock[3] = &unk_10055B1A0;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v8;
  swift_retain();
  swift_release();
  [v16 performBlockAndWait:v15];

  _Block_release(v15);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v16 & 1) == 0)
  {
    uint64_t v10 = v20[0];
    swift_release();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100241B10(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a1 podcastForUuid:v6];

  if (!v7 || (v8 = v7, MTPodcast.adamId.getter(), char v10 = v9, v8, (v10 & 1) != 0))
  {

    uint64_t v11 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  else
  {
    sub_1001A5874();
    uint64_t v11 = BinaryInteger.description.getter();
    unint64_t v13 = v12;
  }
  *a4 = v11;
  a4[1] = v13;
  return swift_bridgeObjectRelease();
}

void sub_100241BE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v2 - 8);
  NSString v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ShowOffer();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PodcastContextActionDataType(0);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = v1 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess();
  sub_1001AC690(v15, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1001AC758((uint64_t)v14);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v5);
  if (ShowOffer.adamId.getter() < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v29 = v5;
    uint64_t v30 = v1;
    uint64_t v28 = v6;
    ShowOffer.feedUrl.getter();
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v4, 1, v16) == 1)
    {
      sub_100222D54((uint64_t)v4);
    }
    else
    {
      URL.absoluteString.getter();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v16);
    }
    type metadata accessor for CoreDataFetcher();
    id v18 = [*(id *)(v30 + 16) mainOrPrivateContext];
    long long v19 = (void *)static CoreDataFetcher.fetchPodcast(adamId:feedUrl:with:)();

    swift_bridgeObjectRelease();
    if (v19)
    {
      id v20 = [v19 uuid];
      uint64_t v21 = v29;
      if (v20)
      {
        uint64_t v22 = v20;
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        if ([v19 hidden])
        {
          (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v21);
          swift_bridgeObjectRelease();

          return;
        }
        uint64_t *v12 = v23;
        v12[1] = v25;
        swift_storeEnumTagMultiPayload();
        swift_beginAccess();
        sub_100242A64((uint64_t)v12, v15);
        uint64_t v26 = swift_endAccess();
        sub_100241BE8(v26);
        sub_1001AC758((uint64_t)v12);
      }

      (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v21);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
    }
  }
}

uint64_t sub_100241FD4()
{
  uint64_t v1 = type metadata accessor for PodcastContextActionDataType(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (void *)((char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v4 = [*(id *)(v0 + 16) mainOrPrivateContext];
  uint64_t v5 = v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess();
  sub_1001AC690(v5, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {

    sub_1001AC758((uint64_t)v3);
    return 0;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  unsigned __int8 v15 = 0;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v4;
  uint64_t v9[3] = v7;
  v9[4] = v8;
  v9[5] = &v15;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_100242A48;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100018840;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  void aBlock[3] = &unk_10055B128;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v12 performBlockAndWait:v11];

  _Block_release(v11);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v12 & 1) == 0)
  {
    uint64_t v6 = v15;
    swift_release();
    return v6;
  }
  __break(1u);
  return result;
}

void sub_100242220(void *a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a1 podcastForUuid:v6];

  BOOL v10 = 0;
  if (v7)
  {
    [v7 lastUnfollowedDate];
    double v9 = v8;

    if (v9 > 0.0) {
      BOOL v10 = 1;
    }
  }
  *a4 = v10;
}

uint64_t sub_1002422BC()
{
  swift_unknownObjectRelease();
  sub_1001AC758(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_presentationHint;
  uint64_t v2 = type metadata accessor for PreviewingPresentationHint();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1001D624C(*(void *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType), *(void *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 8), *(void *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 16), *(void *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 24), *(void *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 32), *(void *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 40), *(void *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 48), *(void *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 56), *(unsigned char *)(v0 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_groupedEpisodeListType + 64));

  return swift_deallocClassInstance();
}

uint64_t sub_1002423A4()
{
  return type metadata accessor for PodcastContextActionData(0);
}

uint64_t type metadata accessor for PodcastContextActionData(uint64_t a1)
{
  return sub_10004F778(a1, qword_1005FC448);
}

uint64_t sub_1002423CC()
{
  uint64_t result = type metadata accessor for PodcastContextActionDataType(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PreviewingPresentationHint();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for PodcastContextActionDataType(uint64_t a1)
{
  return sub_10004F778(a1, qword_1005FC598);
}

uint64_t *sub_1002424CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ShowOffer();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1002425CC(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ShowOffer();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void *sub_10024265C(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ShowOffer();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10024270C(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1001AC758((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for ShowOffer();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1002427D4(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ShowOffer();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10024288C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001AC758((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ShowOffer();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100242954()
{
  uint64_t result = type metadata accessor for ShowOffer();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1002429E8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_100242A28()
{
  sub_10024178C(*(void ***)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100242A34()
{
  return swift_deallocObject();
}

void sub_100242A48()
{
  sub_100242220(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(BOOL **)(v0 + 40));
}

uint64_t sub_100242A54()
{
  return swift_deallocObject();
}

uint64_t sub_100242A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PodcastContextActionDataType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100242ACC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100242B0C()
{
  return sub_100241B10(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

uint64_t sub_100242B18()
{
  return swift_deallocObject();
}

uint64_t sub_100242B30()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts30AddToQueuePodcastContextAction_metricsLabel;
  uint64_t v2 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100242BE8()
{
  return type metadata accessor for AddToQueuePodcastContextAction();
}

uint64_t type metadata accessor for AddToQueuePodcastContextAction()
{
  uint64_t result = qword_1005FC5F8;
  if (!qword_1005FC5F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100242C3C()
{
  uint64_t result = type metadata accessor for MetricsLabel();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100242CE8()
{
  id v0 = [self mainBundle];
  v5._object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x51206F7420646441;
  v1._object = (void *)0xEC00000065756575;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_100242D8C()
{
  return 0xD000000000000028;
}

uint64_t sub_100242DA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts30AddToQueuePodcastContextAction_metricsLabel;
  uint64_t v4 = type metadata accessor for MetricsLabel();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100242E1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ContextActionType.addPodcastToQueue(_:);
  uint64_t v3 = type metadata accessor for ContextActionType();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t sub_100242EF4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266940(a1, a2, WitnessTable);
}

void *sub_100242F54(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266A1C(a1, a2, WitnessTable);
}

uint64_t sub_100242FB4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266B78(a1, a2, WitnessTable);
}

id sub_100243014(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266E10(a1, a2, WitnessTable);
}

uint64_t sub_100243074(uint64_t a1)
{
  uint64_t result = sub_100243140((unint64_t *)&unk_100608C10);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002430B8(uint64_t a1)
{
  uint64_t result = sub_100243140(&qword_1005FC6F0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002430FC(uint64_t a1)
{
  uint64_t result = sub_100243140(&qword_1005FC6F8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100243140(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AddToQueuePodcastContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Optional.asOptional.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_1002431BC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for EpisodeStorageError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_errorRetain();
  *a1 = v3;
  return a1;
}

uint64_t destroy for EpisodeStorageError()
{
  return swift_errorRelease();
}

void *assignWithCopy for EpisodeStorageError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_errorRetain();
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

void *initializeWithTake for EpisodeStorageError(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for EpisodeStorageError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EpisodeStorageError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EpisodeStorageError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_100243354(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10024336C(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for EpisodeStorageError()
{
  return &type metadata for EpisodeStorageError;
}

uint64_t sub_1002433A0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2) {
    return swift_errorRetain();
  }
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for EpisodeMetadataError(uint64_t a1)
{
  return sub_1002433D8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1002433D8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 == 2) {
    return swift_errorRelease();
  }
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s8Podcasts20EpisodeMetadataErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1002433A0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EpisodeMetadataError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1002433A0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1002433D8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for EpisodeMetadataError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1002433D8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EpisodeContextActionDataType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EpisodeContextActionDataType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100243578(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_100243590(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EpisodeMetadataError()
{
  return &type metadata for EpisodeMetadataError;
}

unint64_t sub_1002435BC()
{
  unint64_t result = qword_100607F70;
  if (!qword_100607F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100607F70);
  }
  return result;
}

uint64_t sub_100243610()
{
  return String.init<A>(describing:)();
}

uint64_t sub_100243650()
{
  sub_1002433A0(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  return String.init<A>(describing:)();
}

unint64_t sub_10024369C()
{
  unint64_t result = qword_100603A30;
  if (!qword_100603A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100603A30);
  }
  return result;
}

void sub_1002436F4(uint64_t a1)
{
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  unsigned int v3 = static OS_os_log.downloads.getter();
  sub_100056D54(a1, (uint64_t)v14);
  sub_100056D54(a1, (uint64_t)v11);
  if (os_log_type_enabled(v3, v2))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v5 = v15;
    uint64_t v6 = v16;
    sub_100041A98(v14, v15);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(v5, v6);
    sub_10004B974(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004D2D8((uint64_t)v14);
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v9 = v12;
    uint64_t v10 = v13;
    sub_100041A98(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    sub_10004B974(0x6E776F6E6B6E75, 0xE700000000000000, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004D2D8((uint64_t)v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v2, "Syncing task %{public}s state: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10004D2D8((uint64_t)v14);
    sub_10004D2D8((uint64_t)v11);
  }
}

uint64_t sub_1002439D4@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100041A98(a1, v6);
  char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 64))(v6, v7);
  sub_100056D54((uint64_t)a1, (uint64_t)v34);
  if ((v8 & 1) == 0)
  {
    sub_10004D2D8((uint64_t)v34);
    goto LABEL_12;
  }
  uint64_t v9 = v35;
  uint64_t v10 = v36;
  sub_100041A98(v34, v35);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  sub_10004D2D8((uint64_t)v34);
  if (v11 != 3)
  {
LABEL_12:
    uint64_t v27 = a1[3];
    uint64_t v28 = a1[4];
    sub_100041A98(a1, v27);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
    char v25 = 0;
    goto LABEL_13;
  }
  os_log_type_t v12 = static os_log_type_t.error.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v13 = static OS_os_log.downloads.getter();
  sub_100056D54((uint64_t)a1, (uint64_t)v31);
  os_log_type_t v14 = v12;
  BOOL v15 = os_log_type_enabled(v13, v12);
  uint64_t v16 = a2;
  if (v15)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134349314;
    os_log_type_t type = v14;
    uint64_t v19 = v32;
    uint64_t v18 = v33;
    sub_100041A98(v31, v32);
    (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v19, v18);
    sub_10004D2D8((uint64_t)v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2082;
    id v20 = *(void **)&v16[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    if (v16[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16]) {
      uint64_t v21 = 1936484398;
    }
    else {
      uint64_t v21 = 0x7261646E6174732ELL;
    }
    if (v16[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16]) {
      uint64_t v22 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v22 = (void *)0xE900000000000064;
    }
    uint64_t v30 = *(void *)&v16[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    swift_bridgeObjectRetain_n();
    v23._uint64_t countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = v30;
    v24._object = v20;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10004B974(0x496E6F6973736553, 0xEB00000000203A44, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, type, "Not adding restored pipeline for task id: %{public}ld, session id: %{public}s because task was cancelled", (uint8_t *)v17, 0x16u);
    char v25 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t result = 0;
  }
  else
  {
    sub_10004D2D8((uint64_t)v31);

    uint64_t result = 0;
    char v25 = 1;
  }
LABEL_13:
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v25;
  return result;
}

void sub_100243D68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    uint64_t v8 = *(int *)(type metadata accessor for DownloadJob(0) + 28);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100056D54(v7, (uint64_t)&v45);
      uint64_t v9 = v46;
      uint64_t v10 = v47;
      sub_100041A98(&v45, v46);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10) == *(void *)(a1 + v8)) {
        break;
      }
      sub_10004D2D8((uint64_t)&v45);
      v7 += 40;
      if (!--v6) {
        goto LABEL_7;
      }
    }
    sub_100042FC4(&v45, (uint64_t)&v42);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v43 + 1))
  {
    sub_1002446A4((uint64_t)&v42);
LABEL_15:
    sub_1001D89BC(a1, a3);
    return;
  }
  sub_100042FC4(&v42, (uint64_t)&v45);
  uint64_t v11 = v46;
  uint64_t v12 = v47;
  sub_100041A98(&v45, v46);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12) != 1)
  {
    sub_10004D2D8((uint64_t)&v45);
    goto LABEL_15;
  }
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v13 = (void *)static OS_os_log.downloads.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10046D050;
  uint64_t v15 = v46;
  uint64_t v16 = v47;
  sub_100041A98(&v45, v46);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 104))(v15, v16);
  *(void *)(v14 + 56) = &type metadata for Int64;
  *(void *)(v14 + 64) = &protocol witness table for Int64;
  *(void *)(v14 + 32) = v17;
  uint64_t v18 = v46;
  uint64_t v19 = v47;
  sub_100041A98(&v45, v46);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 96))(v18, v19);
  *(void *)(v14 + 96) = &type metadata for Int64;
  *(void *)(v14 + 104) = &protocol witness table for Int64;
  *(void *)(v14 + 72) = v20;
  uint64_t v21 = v46;
  uint64_t v22 = v47;
  sub_100041A98(&v45, v46);
  Swift::String v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
  id v24 = [v23 localizedAdditionalDescription];

  if (v24)
  {
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    *(void *)(v14 + 136) = &type metadata for String;
    *(void *)(v14 + 144) = sub_10004DA4C();
    *(void *)(v14 + 112) = v25;
    *(void *)(v14 + 120) = v27;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    uint64_t v28 = v46;
    uint64_t v29 = v47;
    sub_100041A98(&v45, v46);
    uint64_t v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
    id v31 = [v30 totalUnitCount];
    id v32 = [v30 completedUnitCount];
    uint64_t v33 = sub_100237ED0();
    uint64_t v35 = v34;
    [v30 fractionCompleted];
    uint64_t v37 = v36;
    uint64_t v38 = NSProgress.estimatedTimeRemaining.getter();
    char v40 = v39;

    sub_1001D89BC(a1, a3);
    LOWORD(v30) = v40 & 1 | 0x100;
    uint64_t v41 = a3 + *(int *)(type metadata accessor for DownloadJob(0) + 40);
    sub_10018A688(*(void *)v41, *(void *)(v41 + 8), *(void *)(v41 + 16), *(void *)(v41 + 24));
    *(void *)uint64_t v41 = v31;
    *(void *)(v41 + 8) = v32;
    *(void *)(v41 + 16) = v33;
    *(void *)(v41 + 24) = v35;
    *(void *)(v41 + 32) = v37;
    *(void *)(v41 + 40) = v38;
    *(_WORD *)(v41 + 48) = (_WORD)v30;
    sub_10004D2D8((uint64_t)&v45);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10024415C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v5 = type metadata accessor for DownloadJob(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v29 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v29 - v12;
  os_log_type_t v14 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v15 = static OS_os_log.downloads.getter();
  sub_1001D89BC(a2, (uint64_t)v13);
  BOOL v16 = os_log_type_enabled(v15, v14);
  uint64_t v33 = a1;
  uint64_t v31 = v5;
  if (v16)
  {
    uint64_t v30 = v8;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(void *)&v37[0] = v29;
    *(_DWORD *)uint64_t v17 = 136446210;
    sub_1001D89BC((uint64_t)v13, (uint64_t)v11);
    uint64_t v18 = String.init<A>(describing:)();
    *(void *)&long long v34 = sub_10004B974(v18, v19, (uint64_t *)v37);
    uint64_t v8 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D92EC((uint64_t)v13);
    _os_log_impl((void *)&_mh_execute_header, v15, v14, "Mapping job to dict with job: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_1001D92EC((uint64_t)v13);
  }
  uint64_t v20 = v32;
  uint64_t v21 = (uint64_t)v8;
  sub_1001D89BC(a2, (uint64_t)v8);
  uint64_t v22 = *(void *)(v20 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks);
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v24 = v22 + 32;
    uint64_t v25 = *(int *)(v31 + 28);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100056D54(v24, (uint64_t)&v34);
      uint64_t v26 = v35;
      uint64_t v27 = v36;
      sub_100041A98(&v34, v35);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v27 + 24))(v26, v27) == *(void *)(a2 + v25)) {
        break;
      }
      sub_10004D2D8((uint64_t)&v34);
      v24 += 40;
      if (!--v23) {
        goto LABEL_10;
      }
    }
    sub_100042FC4(&v34, (uint64_t)v37);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_10:
    uint64_t v38 = 0;
    memset(v37, 0, sizeof(v37));
  }
  swift_bridgeObjectRelease();
  return sub_100276B10((uint64_t)v37, v21);
}

uint64_t sub_100244474(uint64_t a1)
{
  swift_errorRetain();
  sub_100419850(a1, 1);

  return swift_errorRelease();
}

void sub_1002444EC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_operationQueue);
}

id sub_100244550()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncDownloadJobsOperation();
  return [super dealloc];
}

uint64_t sub_100244584()
{
  return swift_deallocObject();
}

uint64_t sub_1002445BC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002445F4(uint64_t a1)
{
  return sub_100244474(a1);
}

uint64_t sub_1002445FC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100244640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DownloadJob(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002446A4(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FC7A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_s7EpisodeVwcp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s7EpisodeVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s7EpisodeVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *_s7EpisodeVwta(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7EpisodeVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s7EpisodeVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s7EpisodeVMa()
{
  return &_s7EpisodeVN;
}

unint64_t sub_1002448C4(void (*a1)(uint64_t *__return_ptr, unint64_t *), void *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v6 = a4;
  unint64_t v7 = a3;
  int64_t v8 = sub_100245F30(a3, a4);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (!v8) {
    return (unint64_t)v9;
  }
  int64_t v10 = v8;
  char v40 = _swiftEmptyArrayStorage;
  unint64_t result = sub_1001BA818(0, v8 & ~(v8 >> 63), 0);
  if (v10 < 0) {
    goto LABEL_58;
  }
  uint64_t v12 = (v7 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  uint64_t v14 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v14 = v7 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v36 = v14;
  uint64_t v30 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v31 = v6 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v15 = 15;
  uint64_t v32 = v13;
  uint64_t v33 = v7;
  while (1)
  {
    unint64_t v16 = v15 & 0xC;
    BOOL v17 = (v15 & 1) == 0 || v16 == v13;
    BOOL v18 = v17;
    if (v17) {
      break;
    }
    unint64_t result = v15;
    if (v15 >> 16 >= v36) {
      goto LABEL_55;
    }
LABEL_24:
    if ((v6 & 0x1000000000000000) != 0)
    {
      int v19 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        unint64_t v37 = v7;
        uint64_t v38 = v31;
      }
      else if ((v7 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      int v19 = _decodeScalar(_:startingAt:)();
    }
    LODWORD(v37) = v19;
    uint64_t v9 = a2;
    a1(&v39, &v37);
    if (v5)
    {
      swift_release();
      return (unint64_t)v9;
    }
    uint64_t v20 = v6;
    BOOL v21 = v18;
    int v22 = v39;
    uint64_t v9 = v40;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = sub_1001BA818(0, v9[2] + 1, 1);
      uint64_t v9 = v40;
    }
    unint64_t v24 = v9[2];
    unint64_t v23 = v9[3];
    if (v24 >= v23 >> 1)
    {
      unint64_t result = sub_1001BA818(v23 > 1, v24 + 1, 1);
      uint64_t v9 = v40;
    }
    v9[2] = v24 + 1;
    *((_DWORD *)v9 + v24 + 8) = v22;
    if (v21)
    {
      uint64_t v13 = v32;
      unint64_t v7 = v33;
      unint64_t v6 = v20;
      if ((v15 & 0xC) == v32)
      {
        unint64_t result = sub_10035C05C(v15, v33, v20);
        unint64_t v15 = result;
      }
      if (v36 <= v15 >> 16) {
        goto LABEL_56;
      }
      uint64_t v5 = 0;
      if ((v15 & 1) == 0) {
        unint64_t v15 = v15 & 0xC | sub_100246280(v15, v33, v6) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
    }
    else
    {
      uint64_t v13 = v32;
      unint64_t v7 = v33;
      unint64_t v6 = v20;
      uint64_t v5 = 0;
      if (v36 <= v15 >> 16) {
        goto LABEL_57;
      }
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      unint64_t v15 = String.UnicodeScalarView._foreignIndex(after:)();
    }
    else
    {
      unint64_t v25 = v15 >> 16;
      if ((v6 & 0x2000000000000000) != 0)
      {
        unint64_t v37 = v7;
        uint64_t v38 = v31;
        int v27 = *((unsigned __int8 *)&v37 + v25);
      }
      else
      {
        uint64_t v26 = v30;
        if ((v7 & 0x1000000000000000) == 0) {
          uint64_t v26 = _StringObject.sharedUTF8.getter();
        }
        int v27 = *(unsigned __int8 *)(v26 + v25);
      }
      int v28 = (char)v27;
      unsigned int v29 = __clz(v27 ^ 0xFF) - 24;
      if (v28 >= 0) {
        LOBYTE(v29) = 1;
      }
      unint64_t v15 = ((v25 + v29) << 16) | 5;
    }
    if (!--v10) {
      return (unint64_t)v9;
    }
  }
  unint64_t result = v15;
  if (v16 == v13) {
    unint64_t result = sub_10035C05C(v15, v7, v6);
  }
  if (result >> 16 < v36)
  {
    if ((result & 1) == 0) {
      sub_100246280(result, v7, v6);
    }
    goto LABEL_24;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

void *sub_100244C34(void *a1)
{
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v39 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = __chkstk_darwin(v39);
  unint64_t v37 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v40 = (uint64_t)&v34 - v5;
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = _swiftEmptyArrayStorage;
  int64_t v10 = (void **)a1[2];
  uint64_t v11 = a1[3];
  aBlock = v10;
  uint64_t v42 = v11;
  swift_bridgeObjectRetain();
  static CharacterSet.urlQueryAllowed.getter();
  sub_1001AA530();
  uint64_t v12 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v14)
  {
    if ((void **)v12 == v10 && v14 == v11) {
      goto LABEL_8;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_9;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_8:
  swift_bridgeObjectRelease();
LABEL_9:
  unint64_t v36 = v10;
  uint64_t v17 = v2;
  _s8DefaultsCMa();
  uint64_t v18 = v40;
  sub_1003D4D9C(v40);
  uint64_t v19 = a1[6];
  uint64_t v34 = *(void *)(a1[7] + 16);
  uint64_t v35 = v19;
  id v20 = [self sharedInstance];
  id v21 = [v20 mainOrPrivateContext];

  unint64_t result = [self sharedInstance];
  if (result)
  {
    unint64_t v23 = result;
    [result immediatelyDeleteAllHiddenPodcasts];

    unint64_t v24 = v37;
    uint64_t v25 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v37, v18, v39);
    unint64_t v26 = (*(unsigned __int8 *)(v17 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    unint64_t v27 = (v3 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    int v28 = (char *)swift_allocObject();
    *((void *)v28 + 2) = v38;
    *((void *)v28 + 3) = v21;
    *((void *)v28 + 4) = v36;
    *((void *)v28 + 5) = v11;
    uint64_t v29 = v35;
    *((void *)v28 + 6) = a1;
    *((void *)v28 + 7) = v29;
    *((void *)v28 + 8) = v34;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v28[v26], v24, v25);
    *(void *)&v28[v27] = &v47;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_100245CC4;
    *(void *)(v30 + 24) = v28;
    long long v45 = sub_10004A010;
    uint64_t v46 = v30;
    aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    long long v43 = sub_100018818;
    uint64_t v44 = &unk_10055B720;
    uint64_t v31 = _Block_copy(&aBlock);
    id v32 = v21;
    swift_retain();
    swift_retain();
    swift_release();
    [v32 performBlockAndWait:v31];
    _Block_release(v31);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v25);
    LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
    unint64_t result = (void *)swift_release();
    if ((v31 & 1) == 0)
    {
      uint64_t v33 = v47;
      swift_release();
      return v33;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100245104(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, unint64_t *a6, uint64_t a7, void *a8, uint64_t *a9)
{
  uint64_t v106 = a8;
  uint64_t v104 = type metadata accessor for CharacterSet();
  unint64_t v15 = *(void (***)(char *, uint64_t))(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v103 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v112 = 0;
  uint64_t v111 = 0;
  uint64_t v17 = a5[4];
  uint64_t v18 = a5[5];
  v105 = a5;
  sub_100246588(a2, a3, a4, v17, v18, &v112, &v111);
  if (!v111) {
    goto LABEL_31;
  }
  uint64_t v19 = v111;
  id v20 = [v19 uuid];
  if (!v20) {
    goto LABEL_35;
  }
  id v21 = v20;
  int v22 = (uint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  sub_10004D29C(0, &qword_1005F6FE0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v26 = [ObjCClassFromMetadata defaultStore];
  uint64_t v102 = v22;
  NSString v27 = String._bridgeToObjectiveC()();
  unsigned __int8 v28 = [v26 hasItemForKey:v27];

  uint64_t v100 = a7;
  uint64_t v99 = a6;
  if (v28)
  {

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v97 = v24;
  uint64_t v101 = v15;
  uint64_t v98 = a2;
  v114.size.double width = 300.0;
  v114.origin.double x = 0.0;
  v114.origin.double y = 0.0;
  v114.size.double height = 300.0;
  CGRect v115 = CGRectInset(v114, 8.0, 8.0);
  double x = v115.origin.x;
  double y = v115.origin.y;
  double width = v115.size.width;
  double height = v115.size.height;
  id v33 = [v19 title];
  if (!v33)
  {
LABEL_35:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v34 = v33;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100054B78(&qword_1005FC7C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D050;
  *(void *)(inited + 32) = NSFontAttributeName;
  unint64_t v36 = self;
  unint64_t v37 = NSFontAttributeName;
  id v38 = [v36 boldSystemFontOfSize:48.0];
  uint64_t v39 = sub_10004D29C(0, &qword_1005FC7C8);
  *(void *)(inited + 40) = v38;
  *(void *)(inited + 64) = v39;
  *(void *)(inited + 72) = NSForegroundColorAttributeName;
  uint64_t v40 = self;
  uint64_t v41 = NSForegroundColorAttributeName;
  id v42 = [v40 blackColor];
  uint64_t v43 = sub_10004D29C(0, &qword_1005FC7D0);
  *(void *)(inited + 80) = v42;
  *(void *)(inited + 104) = v43;
  *(void *)(inited + 112) = NSParagraphStyleAttributeName;
  id v44 = objc_allocWithZone((Class)NSMutableParagraphStyle);
  long long v45 = NSParagraphStyleAttributeName;
  id v46 = [v44 init];
  [v46 setAlignment:1];
  [v46 setLineBreakMode:0];
  *(void *)(inited + 144) = sub_10004D29C(0, &qword_1005FC7D8);
  *(void *)(inited + 120) = v46;
  sub_10016EF60(inited);
  v113.double width = 300.0;
  v113.double height = 300.0;
  UIGraphicsBeginImageContext(v113);
  id v47 = [v40 orangeColor];
  [v47 set];

  v116.origin.double x = 0.0;
  v116.origin.double y = 0.0;
  v116.size.double width = 300.0;
  v116.size.double height = 300.0;
  UIRectFill(v116);
  NSString v48 = String._bridgeToObjectiveC()();
  type metadata accessor for Key(0);
  sub_100246828();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [v48 boundingRectWithSize:3 isa:0 width:width height:height];
  double v51 = v50;

  double v52 = (height - v51) * 0.5;
  if (v52 < 0.0) {
    double v52 = 0.0;
  }
  double v53 = y + v52;
  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v55 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v54 drawWithRect:3 v55 options:0 x:v53 context:width height:height];

  uint64_t v56 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  if (v56)
  {
    id v57 = v56;
    id v58 = [ObjCClassFromMetadata defaultStore];
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v58 addImage:v57 forKey:v59];
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  a2 = v98;
  a7 = v100;
  a6 = v99;
  unint64_t v15 = v101;
LABEL_12:
  type metadata accessor for NotificationSettings();
  id v60 = v19;
  char v61 = static NotificationSettings.canSendNotification()();
  if (__OFADD__(a6, a7))
  {
    __break(1u);
    goto LABEL_35;
  }
  if ((uint64_t)((char *)a6 + a7) > (uint64_t)a6)
  {
    uint64_t v62 = 0;
    uint64_t v102 = a9;
    uint64_t v101 = v15 + 1;
    LODWORD(v98) = v61 & 1;
    do
    {
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      unsigned int v66 = v60;
      id v67 = [v60 uuid];
      if (!v67) {
        goto LABEL_35;
      }
      uint64_t v68 = v67;
      uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v71 = v70;

      uint64_t v107 = (char *)v69;
      id v108 = v71;
      swift_bridgeObjectRetain();
      uint64_t v72 = v103;
      static CharacterSet.urlQueryAllowed.getter();
      sub_1001AA530();
      uint64_t v73 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
      uint64_t v75 = v74;
      (*v101)(v72, v104);
      if (!v75) {
        goto LABEL_35;
      }
      if (v73 == v69 && v75 == v71)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0) {
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease();
      long long v78 = (uint64_t *)((char *)a6 + v62);
      v79._uint64_t countAndFlagsBits = v69;
      v79._object = v71;
      String.append(_:)(v79);
      swift_bridgeObjectRelease();
      v80._uint64_t countAndFlagsBits = 0x65646F736970652ELL;
      v80._object = (void *)0xE90000000000002DLL;
      String.append(_:)(v80);
      uint64_t v107 = (char *)a6 + v62;
      v81._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      NSString v82 = String._bridgeToObjectiveC()();
      id v83 = [a2 episodeForUuid:v82];

      if (v83)
      {
        swift_bridgeObjectRelease();
        id v63 = v83;
        uint64_t v64 = v106;
      }
      else
      {
        uint64_t v84 = v106;
        uint64_t v85 = a2;
        id v86 = [self insertNewEpisodeInManagedObjectContext:a2 canSendNotifications:v98];
        NSString v87 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v86 setUuid:v87];

        [v86 setPodcast:v66];
        id v88 = [v66 title];
        if (!v88) {
          goto LABEL_35;
        }
        v89 = v88;
        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v92 = v91;

        uint64_t v109 = 0;
        unint64_t v110 = 0xE000000000000000;
        if (!v92) {
          goto LABEL_35;
        }
        swift_bridgeObjectRetain();
        v93._uint64_t countAndFlagsBits = v90;
        v93._object = v92;
        String.append(_:)(v93);
        swift_bridgeObjectRelease();
        v94._uint64_t countAndFlagsBits = 779109664;
        v94._object = (void *)0xE400000000000000;
        String.append(_:)(v94);
        uint64_t v107 = (char *)v78;
        v95._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v96 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v86 setTitle:v96];

        id v63 = v86;
        a2 = v85;
        uint64_t v64 = v84;
        a7 = v100;
        a6 = v99;
      }
      id v65 = v83;
      id v60 = v66;
      sub_100246880(v66, v63, v78, a6, v105, v64, &v112, v102);
    }
    while (a7 != ++v62);
  }

LABEL_31:
  if (v112) {
    [a2 saveInCurrentBlock];
  }
}

uint64_t sub_100245BDC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_100245CC4()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100245104(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(unint64_t **)(v0 + 56), *(void *)(v0 + 64), (void *)(v0 + v2), *(uint64_t **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100245D60()
{
  return swift_deallocObject();
}

void sub_100245D70(void *a1, unsigned char *a2, void **a3)
{
  id v6 = [a1 uuid];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v10 = 0;
  }
  uint64_t v11 = sub_1003D5738(10000000, v8, v10);
  swift_bridgeObjectRelease();
  [a1 setStoreCollectionId:v11];
  [a1 storeCollectionId];
  _StringGuts.grow(_:)(57);
  v12._object = (void *)0x80000001004D8A20;
  v12._uint64_t countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x323D746D3FLL;
  v14._object = (void *)0xE500000000000000;
  String.append(_:)(v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setStoreCleanURL:v15];

  [a1 setSubscribed:1];
  [a1 setEpisodeLimit:&_mh_execute_header];
  *a2 = [a1 hasChanges];
  uint64_t v16 = *a3;
  *a3 = a1;
  id v17 = a1;
}

unint64_t sub_100245F30(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  unint64_t v6 = v5 | (v4 << 16);
  unint64_t v7 = sub_100246170(0xFuLL, a1, a2);
  unint64_t result = sub_100246170(v6, a1, a2);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unint64_t v7 = result;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_40;
  }
  return 0;
}

unint64_t sub_100246170(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = sub_100246210(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_100246280(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_100246210(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = sub_10035C05C(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_100246280(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          unint64_t v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(unsigned char *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }
      return v5 << 16;
    }
    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

uint64_t sub_100246394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    goto LABEL_11;
  }
  v14[0] = a1;
  v14[1] = a2;
  swift_bridgeObjectRetain();
  static CharacterSet.urlQueryAllowed.getter();
  sub_1001AA530();
  uint64_t v8 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!v10) {
    goto LABEL_11;
  }
  if (v8 == a1 && v10 == a2)
  {
    swift_bridgeObjectRelease();
    return a1;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v12) {
    return a1;
  }
LABEL_11:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100246588(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6, void **a7)
{
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = a2;
  v13._object = a3;
  String.append(_:)(v13);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [a1 podcastForUuid:v14];

  id v16 = v15;
  if (!v15)
  {
    uint64_t v17 = self;
    NSString v26 = String._bridgeToObjectiveC()();
    NSString v27 = a7;
    id v25 = [v17 defaultShowType];
    NSString v18 = String._bridgeToObjectiveC()();
    unsigned __int8 v28 = a6;
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v17 insertNewPodcastInManagedObjectContext:a1 subscribed:0 feedUrl:v26 showType:v25 title:v18 author:v19 provider:0 imageUrl:0 description:0];

    a6 = v28;
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 setUuid:v21];

    a7 = v27;
    [v20 setEpisodes:0];
    id v16 = v20;
  }
  id v29 = v16;
  id v22 = v15;
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 setFeedURL:v23];

  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 setAuthor:v24];

  sub_100245D70(v29, a6, a7);
}

unint64_t sub_100246828()
{
  unint64_t result = qword_1005F6690;
  if (!qword_1005F6690)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F6690);
  }
  return result;
}

uint64_t sub_100246880(void *a1, void *a2, uint64_t *a3, unint64_t *a4, void *a5, void *a6, unsigned __int8 *a7, uint64_t *a8)
{
  uint64_t v56 = a8;
  id v57 = a7;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  NSString v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = (char *)a3 - (char *)a4;
  if (__OFSUB__(a3, a4))
  {
    __break(1u);
    goto LABEL_25;
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v20 >= *(void *)(a5[7] + 16))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v54 = v17;
  id v55 = a1;
  swift_bridgeObjectRetain();
  a4 = (unint64_t *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a2 setTitle:a4];

  if (a5[12])
  {
    uint64_t v8 = String._bridgeToObjectiveC()();
  }
  else
  {
    unint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    a4 = &v58;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v58 = 0xD00000000000001ALL;
    unint64_t v59 = 0x80000001004D89A0;
    uint64_t v22 = qword_1005FC7B0;
    NSString v21 = off_1005FC7B8;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v22;
    v23._object = v21;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x3E79646F622F3CLL;
    v24._object = (void *)0xE700000000000000;
    String.append(_:)(v24);
    uint64_t v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [a2 setItemDescription:v8];

  uint64_t v25 = a5[8];
  if (v20 >= *(void *)(v25 + 16)) {
    goto LABEL_27;
  }
  [a2 setDuration:*(double *)(v25 + 8 * v20 + 32)];
  uint64_t v26 = a5[9];
  if (v20 >= *(void *)(v26 + 16))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    uint64_t result = (uint64_t)sub_1002EF4D8(0, a6[2] + 1, 1, a6);
    a6 = (void *)result;
    *a3 = result;
    goto LABEL_21;
  }
  [a2 setByteSize:*(void *)(v26 + 8 * v20 + 32)];
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSinceReferenceDate.getter();
  double v28 = v27;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v54);
  [a2 setPubDate:v28];
  [a2 suppressAutomaticDownloadsIfNeeded];
  NSString v29 = String._bridgeToObjectiveC()();
  [a2 setEnclosureURL:v29];

  id v30 = [a2 uuid];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v34 = 0;
  }
  a3 = v56;
  uint64_t v35 = sub_1003D5738(20000000, v32, v34);
  swift_bridgeObjectRelease();
  [a2 setStoreTrackId:v35];
  unsigned __int8 v36 = 1;
  [a2 setIsNew:1];
  [a2 setSentNotification:0];
  unint64_t v37 = v57;
  if ((*v57 & 1) == 0) {
    unsigned __int8 v36 = [a2 hasChanges];
  }
  *unint64_t v37 = v36;
  id v38 = [a2 uuid];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v42 = 0;
  }
  a4 = (unint64_t *)sub_100246394(v40, v42);
  uint64_t v16 = v43;
  swift_bridgeObjectRelease();
  id v44 = [v55 uuid];
  if (v44)
  {
    long long v45 = v44;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v48 = 0;
  }
  uint64_t v8 = (void *)sub_100246394(v46, v48);
  a2 = v49;
  swift_bridgeObjectRelease();
  a6 = (void *)*a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = (uint64_t)a6;
  if ((result & 1) == 0) {
    goto LABEL_29;
  }
LABEL_21:
  unint64_t v52 = a6[2];
  unint64_t v51 = a6[3];
  if (v52 >= v51 >> 1)
  {
    uint64_t result = (uint64_t)sub_1002EF4D8((void *)(v51 > 1), v52 + 1, 1, a6);
    a6 = (void *)result;
    *a3 = result;
  }
  a6[2] = v52 + 1;
  double v53 = &a6[4 * v52];
  v53[4] = a4;
  v53[5] = v16;
  v53[6] = v8;
  v53[7] = a2;
  return result;
}

uint64_t sub_100246D7C(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v22 = v4;
  __chkstk_darwin();
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CharacterSet.alphanumerics.getter();
  v23[2] = v6;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_1002448C4((void (*)(uint64_t *__return_ptr, unint64_t *))sub_10024706C, v23, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  uint64_t v24 = v7;
  sub_100054B78(&qword_1005FC7E0);
  sub_100044200(&qword_1005FC7E8, &qword_1005FC7E0);
  String.UnicodeScalarView.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = 32;
  unint64_t v25 = 0xE100000000000000;
  sub_1001AA530();
  uint64_t v8 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v8 + 40);
    int v11 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v15 = *(v10 - 1);
      uint64_t v16 = *v10;
      uint64_t v17 = HIBYTE(*v10) & 0xF;
      if ((*v10 & 0x2000000000000000) == 0) {
        uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
      }
      if (v17)
      {
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v26 = v11;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10005986C(0, v11[2] + 1, 1);
          int v11 = v26;
        }
        unint64_t v13 = v11[2];
        unint64_t v12 = v11[3];
        if (v13 >= v12 >> 1)
        {
          sub_10005986C(v12 > 1, v13 + 1, 1);
          int v11 = v26;
        }
        v11[2] = v13 + 1;
        NSString v14 = &v11[2 * v13];
        v14[4] = v15;
        v14[5] = v16;
      }
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  else
  {
    int v11 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = v11;
  sub_100054B78((uint64_t *)&unk_100603260);
  sub_100044200((unint64_t *)&qword_1005F8138, (uint64_t *)&unk_100603260);
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
  return v19;
}

uint64_t sub_10024706C@<X0>(int *a1@<X0>, int *a2@<X8>)
{
  int v3 = *a1;
  uint64_t result = CharacterSet.contains(_:)();
  if (result) {
    int v5 = v3;
  }
  else {
    int v5 = 32;
  }
  *a2 = v5;
  return result;
}

uint64_t CoreDataDownloadLibrary.downloadedAssets(for:)(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FC7F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  sub_100054B78((uint64_t *)&unk_1005F7DF0);
  uint64_t v6 = NSManagedObjectContext.performAndPublish<A>(_:)();
  swift_release();
  v9[1] = v6;
  sub_100054B78(&qword_1005FC7F8);
  sub_100054B78(&qword_1005FC800);
  sub_100044200(&qword_1005FC808, &qword_1005FC7F8);
  Publisher.map<A>(_:)();
  swift_release();
  sub_100044200(&qword_1005FC810, &qword_1005FC7F0);
  uint64_t v7 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

void sub_1002472B4(uint64_t *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v3 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithEntityName:v4];

  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100470E80;
  uint64_t v7 = self;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  id v9 = [v7 predicateForEpisodeUuids:isa];

  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 40) = [v7 predicateForDownloaded:1 excludeHidden:1];
  specialized Array._endMutation()();
  sub_10004D29C(0, (unint64_t *)&unk_1005F8100);
  Class v10 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [self andPredicateWithSubpredicates:v10];

  [v5 setPredicate:v11];
  sub_10004D29C(0, (unint64_t *)&qword_100603220);
  uint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v1) {
    *a1 = v12;
  }
}

uint64_t sub_1002474C4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_1002474FC(uint64_t *a1@<X8>)
{
}

uint64_t sub_100247518@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v56 - 8);
  uint64_t v8 = __chkstk_darwin(v56);
  uint64_t v41 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v11 = (char *)&v39 - v10;
  uint64_t v12 = sub_100054B78(&qword_1005FC848);
  __chkstk_darwin(v12 - 8);
  NSString v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DownloadedAsset();
  uint64_t v48 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  long long v45 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v47 = (char *)&v39 - v18;
  uint64_t v19 = *a1;
  unint64_t v20 = (unint64_t)*a1 >> 62;
  uint64_t v55 = *a1;
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = v55;
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v21 = result;
    uint64_t v23 = v56;
    if (result) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v25 = (char *)_swiftEmptyArrayStorage;
LABEL_27:
    *a2 = v25;
    return result;
  }
  uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v23 = v56;
  if (!v21) {
    goto LABEL_26;
  }
LABEL_3:
  if (v21 >= 1)
  {
    uint64_t v53 = v21;
    uint64_t v24 = 0;
    uint64_t v43 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    id v44 = v11;
    uint64_t v39 = a2;
    uint64_t v40 = (void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v42 = (void (**)(char *, uint64_t))(v7 + 8);
    unint64_t v51 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56);
    unint64_t v52 = v19 & 0xC000000000000001;
    uint64_t v46 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    double v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    uint64_t v54 = (void (**)(char *, char *, uint64_t))(v48 + 32);
    unint64_t v25 = (char *)_swiftEmptyArrayStorage;
    uint64_t v26 = v45;
    while (1)
    {
      if (v52) {
        id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v27 = *(id *)(v19 + 8 * v24 + 32);
      }
      double v28 = v27;
      id v29 = [v27 assetURL:v39];
      if (v29)
      {
        id v30 = v29;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        swift_bridgeObjectRetain();
        uint64_t v23 = v56;
        URL.init(string:)();
        swift_bridgeObjectRelease_n();
        if ((*v49)(v6, 1, v23) != 1)
        {
          uint64_t v31 = v44;
          (*v43)(v44, v6, v23);
          id v32 = [v28 uuid];
          if (v32)
          {
            unint64_t v33 = v32;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            (*v40)(v41, v31, v56);
            uint64_t v23 = v56;
            DownloadedAsset.init(episodeUuid:fileURL:)();
            (*v42)(v31, v23);
            uint64_t v34 = 0;
          }
          else
          {
            (*v42)(v31, v23);
            uint64_t v34 = 1;
          }
          uint64_t v26 = v45;
          goto LABEL_18;
        }
      }
      else
      {
        (*v46)(v6, 1, 1, v23);
      }
      sub_100054B1C((uint64_t)v6, (uint64_t *)&unk_1005F7750);
      uint64_t v34 = 1;
LABEL_18:
      (*v51)(v14, v34, 1, v15);

      if ((*v50)(v14, 1, v15) == 1)
      {
        sub_100054B1C((uint64_t)v14, &qword_1005FC848);
      }
      else
      {
        uint64_t v35 = *v54;
        unsigned __int8 v36 = v47;
        (*v54)(v47, v14, v15);
        v35(v26, v36, v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v25 = (char *)sub_1002EFCA0(0, *((void *)v25 + 2) + 1, 1, (unint64_t)v25);
        }
        unint64_t v38 = *((void *)v25 + 2);
        unint64_t v37 = *((void *)v25 + 3);
        if (v38 >= v37 >> 1) {
          unint64_t v25 = (char *)sub_1002EFCA0(v37 > 1, v38 + 1, 1, (unint64_t)v25);
        }
        *((void *)v25 + 2) = v38 + 1;
        v35(&v25[((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v38], v26, v15);
        uint64_t v23 = v56;
      }
      uint64_t v19 = v55;
      if (v53 == ++v24)
      {
        uint64_t result = swift_bridgeObjectRelease();
        a2 = v39;
        goto LABEL_27;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t CoreDataDownloadLibrary.remove(episodes:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  return sub_100247DA4(a1, a3, a4);
}

uint64_t sub_100247B24@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  [a2 removeDownloadAssetsForEpisodeUuids:isa];

  *a3 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100247BA4(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FC7F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  sub_100054B78((uint64_t *)&unk_1005F7DF0);
  uint64_t v6 = NSManagedObjectContext.performAndPublish<A>(_:)();
  swift_release();
  v9[1] = v6;
  sub_100054B78(&qword_1005FC7F8);
  sub_100054B78(&qword_1005FC800);
  sub_100044200(&qword_1005FC808, &qword_1005FC7F8);
  Publisher.map<A>(_:)();
  swift_release();
  sub_100044200(&qword_1005FC810, &qword_1005FC7F0);
  uint64_t v7 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t sub_100247D9C(void *a1)
{
  return sub_100247DA4(a1, *(void **)(v1 + 8), *(void **)(v1 + 16));
}

uint64_t sub_100247DA4(void *a1, void *a2, void *a3)
{
  id v30 = a2;
  uint64_t v5 = sub_100054B78(&qword_1005F9F20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100054B78(&qword_1005FC818);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100054B78(&qword_1005FC820);
  uint64_t v28 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100054B78(&qword_1005FC828);
  uint64_t v29 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v31 = a1;
  swift_bridgeObjectRetain();
  v25[1] = sub_100054B78(&qword_100602070);
  Just.init(_:)();
  id v31 = a3;
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  sub_100044200(&qword_1005FC830, &qword_1005FC818);
  sub_100059BE0();
  id v17 = a3;
  Publisher.receive<A>(on:options:)();
  sub_100054B1C((uint64_t)v7, &qword_1005F9F20);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v30;
  *(void *)(v18 + 16) = v30;
  sub_100044200(&qword_1005FC838, &qword_1005FC820);
  id v20 = v19;
  uint64_t v21 = v26;
  Publisher.tryMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v21);
  sub_100044200(&qword_1005FC840, &qword_1005FC828);
  uint64_t v22 = v27;
  uint64_t v23 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v22);
  return v23;
}

uint64_t assignWithCopy for CoreDataDownloadLibrary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  uint64_t v10 = *(void **)(a2 + 16);
  id v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  return a1;
}

uint64_t assignWithTake for CoreDataDownloadLibrary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for CoreDataDownloadLibrary()
{
  return &type metadata for CoreDataDownloadLibrary;
}

uint64_t sub_100248298()
{
  return swift_deallocObject();
}

uint64_t sub_1002482D0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100247B24(a1, *(void **)(v2 + 16), a2);
}

void sub_1002482F4(uint64_t *a1@<X8>)
{
}

void sub_10024830C(void *a1)
{
  [a1 podcastStoreId];
  id v1 = [a1 podcastFeedUrl];
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v3 = [a1 author];
  if (v3)
  {
    uint64_t v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v5 = [a1 podcastDisplayType];
  if (v5)
  {
    id v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  [a1 isNotSubscribeable];
  PodcastPlayerItem.init(adamID:feedURL:title:displayType:isSubscribeable:)();
}

void sub_100248468(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  id v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78(&qword_1005F5D20);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v21 - v9;
  id v25 = [a1 episodeStoreId];
  id v11 = [a1 title];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v14;
    uint64_t v24 = v13;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  id v15 = [a1 subtitle];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v22 = 0;
  }
  id v17 = [a1 episodeGuid];
  if (v17)
  {
    uint64_t v18 = v17;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v19 = [a1 pubDate];
  if (v19)
  {
    id v20 = v19;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v8, 1, 1, v3);
  }
  sub_1001B6AF4((uint64_t)v8, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3))
  {
    sub_1001B6BC4((uint64_t)v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v10, v3);
    sub_1001B6BC4((uint64_t)v10);
    Date.timeIntervalSinceReferenceDate.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  EpisodePlayerItem.init(adamID:title:subtitle:guid:pubDate:)();
}

void *sub_100248780(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  return sub_100248798(a1, a2, a3);
}

void *sub_100248798(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v13 = v8;
      char v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_1002488C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = self;
  swift_retain();
  *(void *)(v2 + 96) = [v4 sharedInstance];
  *(void *)(v2 + 104) = _swiftEmptyArrayStorage;
  uint64_t v5 = self;
  id v6 = [v5 _applePodcastsFoundationSharedUserDefaults];
  unsigned __int8 v7 = [v6 BOOLForKey:kMTNotificationStatusIsAuthorizedKey];

  *(unsigned char *)(v2 + 88) = v7;
  swift_release();
  *(void *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(void *)(v2 + 16) = 0x6F7369704577656ELL;
  *(void *)(v2 + 24) = 0xEB00000000736564;
  *(void *)(v2 + 32) = [objc_allocWithZone((Class)MTDynamicTypeConstant) initWithDefaultConstant:UIFontTextStyleBody textStyle:64.0];
  NSString v8 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v10 = self;
  id v11 = [v10 groupWithTitle:v8 footerText:0 settings:isa];

  if (v11)
  {
    *(void *)(v2 + 40) = v11;
    swift_retain_n();
    id v12 = sub_10024A298(a1);
    swift_bridgeObjectRelease();
    swift_release();
    id v13 = [self mainBundle];
    v21._object = (void *)0xE000000000000000;
    v14._object = (void *)0x80000001004D8AD0;
    v14._uint64_t countAndFlagsBits = 0xD000000000000031;
    v15._uint64_t countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v21._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v21);

    swift_retain();
    sub_1001B7D44((unint64_t)v12);
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v17 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = [v10 groupWithTitle:v16 footerText:0 settings:v17];

    if (v18)
    {
      id v19 = *(void **)(v2 + 40);
      *(void *)(v2 + 40) = v18;
      swift_release();

      id v20 = [v5 _applePodcastsFoundationSharedUserDefaults];
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSUserDefaults.BOOLPublisher(forKey:)();

      swift_bridgeObjectRelease();
      swift_allocObject();
      swift_weakInit();
      sub_100054B78((uint64_t *)&unk_1005FCA40);
      sub_100044200(&qword_100603460, (uint64_t *)&unk_1005FCA40);
      Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      swift_beginAccess();
      sub_100054B78((uint64_t *)&unk_1005F9ED0);
      sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
      AnyCancellable.store<A>(in:)();
      swift_endAccess();
      swift_release();
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100248D00(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    int v3 = *(unsigned __int8 *)(result + 88);
    *(unsigned char *)(result + 88) = v1;
    if (v1 == v3)
    {
      return swift_release();
    }
    else
    {
      sub_100249B04();
      sub_100248F64();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_100248D90(void *a1, id a2)
{
  id v3 = [a2 identifier];
  if (v3)
  {
    uint64_t v4 = v3;
    [a1 setArtworkKey:v3];

    [a1 setMaximumNumberOfTextLines:2];
    id v5 = [a1 textLabel];
    if (v5)
    {
      id v6 = v5;
      [v5 setAdjustsFontSizeToFitWidth:0];
    }
    id v7 = [a1 traitCollection];
    char v8 = UITraitCollection.interfaceIdiomIsMac.getter();

    if (v8)
    {
      id v9 = [a1 textLabel];
      if (v9)
      {
        uint64_t v10 = v9;
        id v11 = [self systemFontOfSize:14.0];
        [v10 setFont:v11];
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100248EF8(void *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + 88);
  id v4 = String._bridgeToObjectiveC()();
  [a1 setEnabled:v3 forGroupWithIdentifier:v4];
}

id sub_100248F64()
{
  uint64_t v1 = self;
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1000505EC(v2);
  swift_bridgeObjectRelease();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v1 predicateForPodcastUuids:isa];

  id v5 = *(void **)(v0 + 96);
  swift_getObjectType();
  id v6 = sub_10024A068(v4, (uint64_t)_swiftEmptyArrayStorage, v5);

  uint64_t v32 = v6[2];
  uint64_t v29 = (uint64_t)v6;
  if (!v32)
  {
    char v27 = 0;
    goto LABEL_38;
  }
  id v31 = v6 + 4;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  uint64_t v30 = v0;
  while (1)
  {
    id v9 = &v31[5 * v7];
    uint64_t v10 = *v9;
    int v11 = *((unsigned __int8 *)v9 + 32);
    id v12 = *(void **)(v0 + 40);
    uint64_t v35 = v9[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = [v12 groupSettings];
    if (!result)
    {
LABEL_42:
      __break(1u);
      return result;
    }
    Swift::String v14 = result;
    sub_10004D29C(0, (unint64_t *)&qword_1005F8288);
    unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = v7;
    int v33 = v11;
    if (v15 >> 62) {
      break;
    }
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_8;
    }
LABEL_3:
    swift_bridgeObjectRelease_n();
    uint64_t v0 = v30;
    uint64_t v8 = v34;
    if (v33) {
      goto LABEL_35;
    }
LABEL_4:
    uint64_t v7 = v8 + 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7 == v32)
    {
      char v27 = 0;
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_3;
  }
LABEL_8:
  uint64_t v17 = 4;
  while (1)
  {
    if ((v15 & 0xC000000000000001) != 0) {
      id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id result = *(id *)(v15 + 8 * v17);
    }
    id v18 = result;
    uint64_t v19 = v17 - 3;
    if (__OFADD__(v17 - 4, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    id v20 = [result identifier];
    if (!v20) {
      goto LABEL_9;
    }
    Swift::String v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    if (v22 == v10 && v24 == v35) {
      break;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_22;
    }
LABEL_9:

    ++v17;
    if (v19 == v16) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v0 = v30;
  if ([v18 value])
  {
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
  }
  else
  {

    long long v36 = 0u;
    long long v37 = 0u;
  }
  sub_100053820((uint64_t)&v36, (uint64_t)v39, &qword_1005F5D30);
  uint64_t v8 = v34;
  if (v40)
  {
    if (swift_dynamicCast())
    {
      if (v33 == v38) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else
  {
    sub_100054B1C((uint64_t)v39, &qword_1005F5D30);
  }
  if (!v33) {
    goto LABEL_4;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v27 = 1;
LABEL_37:
  swift_bridgeObjectRelease();
LABEL_38:
  swift_beginAccess();
  sub_10024A230(v0 + 48, (uint64_t)v39);
  if (v40)
  {
    sub_100056D54((uint64_t)v39, (uint64_t)&v36);
    sub_100054B1C((uint64_t)v39, (uint64_t *)&unk_1005FCA20);
    uint64_t v28 = (void *)*sub_100041A98(&v36, *((uint64_t *)&v37 + 1));
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1001F1A78(v27, v28, v29, (unsigned __int8 *)v0);
    swift_bridgeObjectRelease_n();
    swift_release();
    return (id)sub_10004D2D8((uint64_t)&v36);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (id)sub_100054B1C((uint64_t)v39, (uint64_t *)&unk_1005FCA20);
  }
}

void sub_100249420(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    int v11 = a3;
    swift_bridgeObjectRetain();
    uint64_t v6 = a2 + 64;
    do
    {
      v6 += 40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v8 = String._bridgeToObjectiveC()();
      NSString v9 = String._bridgeToObjectiveC()();
      [a1 setValue:isa forSettingWithIdentifier:v8 inGroup:v9];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a3 = v11;
  }
  uint64_t v10 = a3[88];
  id v12 = String._bridgeToObjectiveC()();
  [a1 setEnabled:v10 forGroupWithIdentifier:v12];
}

uint64_t sub_10024955C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100054B78((uint64_t *)&unk_1005F83F0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_10046D010;
    *(void *)(v8 + 32) = a3;
    *(void *)(v8 + 40) = a4;
    swift_bridgeObjectRetain();
    sub_1002498CC(v8, a1 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100249618(void *a1, uint64_t a2, unint64_t a3, void *a4)
{
  sub_100054B78((uint64_t *)&unk_1005F83F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D050;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v11;
  id v12 = kMTPodcastEntityName;
  sub_1001B7D58(a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1001B79E8(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  Class v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v15 = [a1 objectDictionariesInEntity:v12 predicate:a2 sortDescriptors:isa propertiesToFetch:v14 includeObjectId:0];

  if (v15)
  {
    sub_100054B78(&qword_1005F8378);
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v29 = a4;
      swift_bridgeObjectRetain();
      uint64_t v18 = 0;
      unint64_t v15 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v20 = swift_bridgeObjectRetain();
        sub_10024A61C(v20, (uint64_t)v30);
        uint64_t v21 = v30[0];
        uint64_t v22 = v30[1];
        uint64_t v23 = v30[2];
        uint64_t v24 = v30[3];
        char v25 = v31;
        sub_100053820((uint64_t)v30, (uint64_t)v32, (uint64_t *)&unk_1005FCA30);
        if (v33)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v15 = sub_1002EFCD4(0, v15[2] + 1, 1, v15);
          }
          unint64_t v27 = v15[2];
          unint64_t v26 = v15[3];
          if (v27 >= v26 >> 1) {
            unint64_t v15 = sub_1002EFCD4((void *)(v26 > 1), v27 + 1, 1, v15);
          }
          v15[2] = v27 + 1;
          uint64_t v19 = &v15[5 * v27];
          void v19[4] = v21;
          v19[5] = v22;
          v19[6] = v23;
          v19[7] = v24;
          *((unsigned char *)v19 + 64) = v25 & 1;
        }
        ++v18;
      }
      while (v17 != v18);
      swift_bridgeObjectRelease();
      a4 = v29;
    }
    else
    {
      unint64_t v15 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
  }
  *a4 = v15;
  return swift_bridgeObjectRelease();
}

void sub_1002498CC(uint64_t a1, char a2)
{
  id v4 = [self sharedInstance];
  id v5 = [v4 mainOrPrivateContext];

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v5;
  *(unsigned char *)(v6 + 32) = a2;
  v9[4] = sub_100249E94;
  v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  void v9[2] = sub_10003B424;
  uint64_t v9[3] = &unk_10055B870;
  uint64_t v7 = _Block_copy(v9);
  swift_bridgeObjectRetain();
  id v8 = v5;
  swift_release();
  [v8 performBlockAndWaitWithSave:v7];
  _Block_release(v7);
  sub_100248F64();
}

uint64_t sub_100249A0C(uint64_t result, void *a2, char a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = swift_bridgeObjectRetain() + 40;
    uint64_t v7 = a3 & 1;
    do
    {
      swift_bridgeObjectRetain();
      NSString v8 = String._bridgeToObjectiveC()();
      id v9 = [a2 podcastForUuid:v8];

      [v9 setNotifications:v7];
      swift_bridgeObjectRelease();

      v6 += 16;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100249B04()
{
  id v1 = [*(id *)(v0 + 40) groupSettings];
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = v1;
  sub_10004D29C(0, (unint64_t *)&qword_1005F8288);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    uint64_t result = (void *)sub_10005986C(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    uint64_t v6 = 0;
    while (v4 != v6)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v3 + 8 * v6 + 32);
      }
      NSString v8 = v7;
      uint64_t result = [v7 identifier];
      if (!result) {
        goto LABEL_20;
      }
      id v9 = result;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10005986C(v13 > 1, v14 + 1, 1);
      }
      ++v6;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      unint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      void v15[5] = v12;
      if (v4 == v6) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

BOOL sub_100249CC8(id *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*a1 identifier];
  if (!v5) {
    return a3 == 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if (a3)
  {
    if (v7 == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v11 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_100249D98()
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100249DC8()
{
  swift_bridgeObjectRelease();

  sub_100054B1C(v0 + 48, (uint64_t *)&unk_1005FCA20);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t _s14descr10054B011C17NewEpisodeSectionCMa()
{
  return self;
}

uint64_t sub_100249E54()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100249E94()
{
  return sub_100249A0C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

void *sub_100249EA0(void *a1, uint64_t a2, id a3)
{
  unint64_t v14 = 0;
  id v5 = [a3 mainOrPrivateContext];
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = &v14;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10024AAF8;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_100018840;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  void aBlock[3] = &unk_10055B9D8;
  uint64_t v8 = _Block_copy(aBlock);
  id v9 = v5;
  id v10 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v9 performBlockAndWait:v8];
  _Block_release(v8);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = (void *)swift_release();
  if (a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v14;
    if (v14) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t v12 = _swiftEmptyArrayStorage;
    }

    swift_release();
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

void *sub_10024A068(void *a1, uint64_t a2, id a3)
{
  unint64_t v14 = 0;
  id v5 = [a3 mainOrPrivateContext];
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = &v14;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10024A600;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_10004A010;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  void aBlock[3] = &unk_10055B8E8;
  uint64_t v8 = _Block_copy(aBlock);
  id v9 = v5;
  id v10 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v9 performBlockAndWait:v8];
  _Block_release(v8);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = (void *)swift_release();
  if (a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v14;
    if (v14) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t v12 = _swiftEmptyArrayStorage;
    }

    swift_release();
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

uint64_t sub_10024A230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005FCA20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_10024A298(uint64_t a1)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    id v14 = self;
    uint64_t v4 = (unsigned __int8 *)(a1 + 64);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v7 = *((void *)v4 - 4);
      uint64_t v6 = *((void *)v4 - 3);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      NSString v8 = String._bridgeToObjectiveC()();
      NSString v9 = String._bridgeToObjectiveC()();
      uint64_t v10 = swift_allocObject();
      swift_weakInit();
      char v11 = (void *)swift_allocObject();
      v11[2] = v10;
      void v11[3] = v7;
      v11[4] = v6;
      aBlock[4] = sub_10024A8D0;
      aBlock[5] = v11;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100226350;
      void aBlock[3] = &unk_10055B960;
      uint64_t v12 = _Block_copy(aBlock);
      swift_release();
      id v13 = [v14 switchSettingWithTitle:v8 initialValue:v5 identifier:v9 changeHandler:v12];
      _Block_release(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if (v13)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return (void *)v16;
  }
  return result;
}

id sub_10024A4DC()
{
  id v0 = [self sharedInstance];
  id v1 = self;
  id result = [v1 sortDescriptorsForSortType:3];
  if (result)
  {
    uint64_t v3 = result;
    sub_10004D29C(0, (unint64_t *)&qword_1005F8120);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v5 = [v1 predicateForSubscribedAndNotHidden];
    uint64_t v6 = sub_100249EA0(v5, v4, v0);

    swift_bridgeObjectRelease();
    if (v6[2])
    {
      _s14descr10054B011C17NewEpisodeSectionCMa();
      uint64_t v7 = swift_allocObject();
      sub_1002488C0((uint64_t)v6);
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10024A600()
{
  return sub_100249618(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10024A60C()
{
  return swift_deallocObject();
}

uint64_t sub_10024A61C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(a1 + 16) || (unint64_t v6 = sub_100051E78(v4, v5), (v7 & 1) == 0))
  {
    long long v24 = 0u;
    long long v25 = 0u;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_10004D328(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v24);
  swift_bridgeObjectRelease();
  if (!*((void *)&v25 + 1))
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t result = sub_100054B1C((uint64_t)&v24, &qword_1005F5D30);
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v9 = v22;
  uint64_t v8 = v23;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v12 = sub_100051E78(v10, v11), (v13 & 1) != 0))
  {
    sub_10004D328(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v24);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v25 + 1)) {
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v15 = v22;
  uint64_t v16 = v23;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v20 = sub_100051E78(v18, v19), (v21 & 1) != 0))
  {
    sub_10004D328(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v24);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v25 + 1)) {
    goto LABEL_9;
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    char v17 = v22;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
LABEL_12:
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v16;
  *(unsigned char *)(a2 + 32) = v17;
  return result;
}

uint64_t sub_10024A850()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10024A888(unsigned __int8 *a1)
{
  return sub_100248D00(a1);
}

uint64_t sub_10024A890()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10024A8D0(char a1)
{
  return sub_10024955C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10024A8E0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10024A928()
{
  return swift_deallocObject();
}

uint64_t _s14descr10054B011C17NewEpisodeSectionC13DBPodcastInfoVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s14descr10054B011C17NewEpisodeSectionC13DBPodcastInfoVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 _s14descr10054B011C17NewEpisodeSectionC13DBPodcastInfoVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s14descr10054B011C17NewEpisodeSectionC13DBPodcastInfoVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t _s14descr10054B011C17NewEpisodeSectionC13DBPodcastInfoVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14descr10054B011C17NewEpisodeSectionC13DBPodcastInfoVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s14descr10054B011C17NewEpisodeSectionC13DBPodcastInfoVMa()
{
  return &_s14descr10054B011C17NewEpisodeSectionC13DBPodcastInfoVN;
}

id sub_10024AB14()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 createAndSaveStationWithTitle:v1];

  return v2;
}

void (*sub_10024AB60(void *a1))(void **a1, char a2)
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return sub_10024ABCC;
}

void sub_10024ABCC(void **a1, char a2)
{
  long long v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v3[3];
    if (!*(void *)(v4 + v3[4]))
    {
      [*(id *)(v4 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController) endAutomaticResponseLoading];
      if (*(void *)(v4 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer))
      {
        swift_retain();
        sub_10024E37C();
        swift_release();
      }
    }
  }

  free(v3);
}

uint64_t sub_10024AC58(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v11 = (void *)result;
    id v12 = objc_retain(*(id *)(result
                            + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisodeRefreshSerialQueue));

    aBlock[4] = sub_10024F51C;
    aBlock[5] = a1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003B424;
    void aBlock[3] = &unk_10055BD30;
    char v13 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v16 = _swiftEmptyArrayStorage;
    sub_10024F4D4((unint64_t *)&qword_1005FA630, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v15 = v6;
    sub_100054B78((uint64_t *)&unk_1005FE4B0);
    sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_10024AF30()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (char *)result;
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v3 = (void *)Strong;
      swift_bridgeObjectRetain();
    }
    __chkstk_darwin(Strong);
    type metadata accessor for PlayingEpisodePlayStateDataSource();
    sub_10024F4D4((unint64_t *)&unk_1005FCBB8, v4, (void (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource);
    SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)();
    uint64_t v5 = &v1[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
    swift_beginAccess();
    uint64_t v6 = *(void (**)(void *))v5;
    if (*(void *)v5)
    {
      sub_10004ACDC((uint64_t)v6);
      uint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = sub_10025C3E4(v7);
      swift_bridgeObjectRelease();
      v6(v8);
      sub_1000536BC((uint64_t)v6);
      swift_release();
    }

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_10024B16C()
{
  if (*(void *)&v0[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer])
  {
    swift_retain();
    sub_10024E728();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlayingEpisodePlayStateDataSource();
  return [super dealloc];
}

uint64_t sub_10024B3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v70 = a3;
  sub_10024F434(a1, (uint64_t)v90);
  uint64_t v76 = sub_100054B78(&qword_1005FCBE8);
  __chkstk_darwin(v76);
  uint64_t v6 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100054B78(&qword_1005FCBF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  char v13 = (char *)v67 - v12;
  __chkstk_darwin(v11);
  uint64_t v84 = (uint64_t)v67 - v14;
  uint64_t v15 = type metadata accessor for EpisodePlayState();
  uint64_t v68 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v79 = (uint64_t)v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  long long v78 = (double *)((char *)v67 - v18);
  uint64_t v19 = &_swiftEmptySetSingleton;
  v89 = &_swiftEmptySetSingleton;
  sub_10024F434(a1, (uint64_t)v91);
  uint64_t v77 = v91[0];
  if (!v91[0]) {
    goto LABEL_43;
  }
  double v20 = v92;
  char v21 = v95;
  char v22 = v96 & 1;
  Swift::String v80 = v13;
  if (v92 <= 0.0)
  {
    swift_bridgeObjectRetain();
    double v28 = 0.0;
  }
  else
  {
    float v23 = v94;
    double v24 = v93;
    double v25 = *(double *)&v91[1];
    swift_bridgeObjectRetain();
    static Date.timeIntervalSinceReferenceDate.getter();
    double v27 = v24 + (v26 - v25) * v23;
    if (v27 >= v20) {
      double v27 = v20;
    }
    double v28 = fmax(v27, 0.0);
  }
  uint64_t v29 = v84;
  uint64_t v30 = v78;
  *long long v78 = v28;
  v30[1] = v20;
  *((unsigned char *)v30 + 16) = (v21 & 1) == 0;
  *((unsigned char *)v30 + 17) = v22;
  *((unsigned char *)v30 + 18) = 0;
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = *(void *)(v77 + 56);
  uint64_t v71 = v77 + 56;
  uint64_t v32 = 1 << *(unsigned char *)(v77 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & v31;
  v67[1] = a2;
  id v83 = (uint64_t *)(a2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_expectedEpisodeStates);
  uint64_t result = swift_beginAccess();
  int64_t v36 = 0;
  int64_t v72 = (unint64_t)(v32 + 63) >> 6;
  uint64_t v73 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56);
  uint64_t v74 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  uint64_t v69 = v10;
  uint64_t v75 = v6;
  if (v34) {
    goto LABEL_14;
  }
LABEL_15:
  int64_t v41 = v36 + 1;
  if (!__OFADD__(v36, 1))
  {
    if (v41 < v72)
    {
      unint64_t v42 = *(void *)(v71 + 8 * v41);
      ++v36;
      if (v42) {
        goto LABEL_28;
      }
      int64_t v36 = v41 + 1;
      if (v41 + 1 < v72)
      {
        unint64_t v42 = *(void *)(v71 + 8 * v36);
        if (v42) {
          goto LABEL_28;
        }
        int64_t v36 = v41 + 2;
        if (v41 + 2 < v72)
        {
          unint64_t v42 = *(void *)(v71 + 8 * v36);
          if (!v42)
          {
            int64_t v43 = v41 + 3;
            if (v43 < v72)
            {
              unint64_t v42 = *(void *)(v71 + 8 * v43);
              if (v42)
              {
                int64_t v36 = v43;
                goto LABEL_28;
              }
              while (1)
              {
                int64_t v36 = v43 + 1;
                if (__OFADD__(v43, 1)) {
                  goto LABEL_45;
                }
                if (v36 >= v72) {
                  goto LABEL_42;
                }
                unint64_t v42 = *(void *)(v71 + 8 * v36);
                ++v43;
                if (v42) {
                  goto LABEL_28;
                }
              }
            }
            goto LABEL_42;
          }
LABEL_28:
          uint64_t v39 = (v42 - 1) & v42;
          for (unint64_t i = __clz(__rbit64(v42)) + (v36 << 6); ; unint64_t i = v38 | (v36 << 6))
          {
            uint64_t v44 = *(void *)(v77 + 48) + 24 * i;
            uint64_t v46 = *(void *)v44;
            uint64_t v45 = *(void *)(v44 + 8);
            char v47 = *(unsigned char *)(v44 + 16);
            uint64_t v48 = *v83;
            uint64_t v49 = *(void *)(*v83 + 16);
            int64_t v82 = v36;
            unint64_t v81 = v39;
            if (v49)
            {
              sub_1001DD838(v46, v45, v47);
              swift_bridgeObjectRetain();
              unint64_t v50 = sub_100226EE8(v46, v45, v47);
              if (v51)
              {
                uint64_t v52 = v68;
                sub_1001DD65C(*(void *)(v48 + 56) + *(void *)(v68 + 72) * v50, v29);
                uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
                v53(v29, 0, 1, v15);
              }
              else
              {
                uint64_t v53 = *v73;
                (*v73)(v29, 1, 1, v15);
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v53 = *v73;
              (*v73)(v29, 1, 1, v15);
              sub_1001DD838(v46, v45, v47);
            }
            sub_1001DD838(v46, v45, v47);
            sub_1003F51C0((uint64_t)&v86, v46, v45, v47);
            sub_1001DD848(v86, v87, v88);
            uint64_t v54 = v83;
            swift_beginAccess();
            uint64_t v55 = v78;
            uint64_t v56 = v79;
            sub_1001DD65C((uint64_t)v78, v79);
            sub_1001DD838(v46, v45, v47);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v85 = *v54;
            uint64_t *v54 = 0x8000000000000000;
            sub_10027F618(v56, v46, v45, v47, isUniquelyReferenced_nonNull_native);
            uint64_t *v54 = v85;
            swift_bridgeObjectRelease();
            sub_1001DD848(v46, v45, v47);
            swift_endAccess();
            uint64_t v58 = (uint64_t)v80;
            sub_1001DD65C((uint64_t)v55, (uint64_t)v80);
            v53(v58, 0, 1, v15);
            uint64_t v37 = (uint64_t)v75;
            uint64_t v59 = (uint64_t)&v75[*(int *)(v76 + 48)];
            sub_100054BBC(v84, (uint64_t)v75, &qword_1005FCBF0);
            sub_100054BBC(v58, v59, &qword_1005FCBF0);
            id v60 = *v74;
            if ((*v74)(v37, 1, v15) == 1)
            {
              sub_100054B1C(v58, &qword_1005FCBF0);
              if (v60(v59, 1, v15) != 1) {
                goto LABEL_12;
              }
              sub_100054B1C(v37, &qword_1005FCBF0);
              uint64_t v29 = v84;
              int64_t v36 = v82;
              unint64_t v34 = v81;
            }
            else
            {
              uint64_t v61 = v37;
              uint64_t v62 = v37;
              uint64_t v63 = (uint64_t)v69;
              sub_100054BBC(v61, (uint64_t)v69, &qword_1005FCBF0);
              if (v60(v59, 1, v15) == 1)
              {
                sub_100054B1C((uint64_t)v80, &qword_1005FCBF0);
                sub_1001DD6C0(v63);
                uint64_t v37 = v62;
LABEL_12:
                sub_100054B1C(v37, &qword_1005FCBE8);
                uint64_t v29 = v84;
                int64_t v36 = v82;
                unint64_t v34 = v81;
LABEL_13:
                sub_1003F51C0((uint64_t)&v86, v46, v45, v47);
                sub_1001DD848(v86, v87, v88);
                uint64_t result = sub_100054B1C(v29, &qword_1005FCBF0);
                if (!v34) {
                  goto LABEL_15;
                }
                goto LABEL_14;
              }
              uint64_t v64 = v79;
              sub_1001DD7D4(v59, v79);
              char v65 = static EpisodePlayState.== infix(_:_:)();
              sub_1001DD6C0(v64);
              sub_100054B1C((uint64_t)v80, &qword_1005FCBF0);
              sub_1001DD6C0(v63);
              sub_100054B1C(v62, &qword_1005FCBF0);
              uint64_t v29 = v84;
              int64_t v36 = v82;
              unint64_t v34 = v81;
              if ((v65 & 1) == 0) {
                goto LABEL_13;
              }
            }
            sub_100054B1C(v29, &qword_1005FCBF0);
            uint64_t result = sub_1001DD848(v46, v45, v47);
            if (!v34) {
              goto LABEL_15;
            }
LABEL_14:
            unint64_t v38 = __clz(__rbit64(v34));
            uint64_t v39 = (v34 - 1) & v34;
          }
        }
      }
    }
LABEL_42:
    swift_release();
    sub_1001DD6C0((uint64_t)v78);
    uint64_t v19 = v89;
LABEL_43:
    uint64_t v66 = sub_10024BCE8((uint64_t)v19);
    swift_bridgeObjectRelease();
    return sub_10036FF10(v66);
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_10024BCE8(uint64_t a1)
{
  uint64_t v3 = sub_100054B78(&qword_1005FCBF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_previouslyPlayingEpisodes);
  uint64_t v37 = a1;
  uint64_t v35 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_previouslyPlayingEpisodes;
  if (v5)
  {
    if (*(void *)(a1 + 16) <= *(void *)(v5 + 16) >> 3)
    {
      uint64_t v44 = (unint64_t *)v5;
      swift_bridgeObjectRetain();
      sub_1003CD0B4(a1);
      uint64_t v6 = v44;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_1003CD868(a1, v5);
    }
  }
  else
  {
    uint64_t v6 = (unint64_t *)&_swiftEmptySetSingleton;
  }
  unint64_t v7 = v6[7];
  uint64_t v40 = v6 + 7;
  uint64_t v8 = 1 << *((unsigned char *)v6 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  uint64_t v36 = v1;
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_expectedEpisodeStates);
  int64_t v41 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  uint64_t v14 = v39;
  unint64_t v38 = v6;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v42 = v13;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v18 >= v41) {
      goto LABEL_31;
    }
    unint64_t v19 = v40[v18];
    int64_t v20 = v13 + 1;
    if (!v19)
    {
      int64_t v20 = v13 + 2;
      if (v13 + 2 >= v41) {
        goto LABEL_31;
      }
      unint64_t v19 = v40[v20];
      if (!v19)
      {
        int64_t v20 = v13 + 3;
        if (v13 + 3 >= v41) {
          goto LABEL_31;
        }
        unint64_t v19 = v40[v20];
        if (!v19) {
          break;
        }
      }
    }
LABEL_26:
    unint64_t v10 = (v19 - 1) & v19;
    int64_t v42 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_27:
    uint64_t v22 = v6[6] + 24 * v17;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    char v25 = *(unsigned char *)(v22 + 16);
    swift_beginAccess();
    sub_1001DD838(v23, v24, v25);
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_100226EE8(v23, v24, v25);
    char v28 = v27;
    swift_bridgeObjectRelease();
    if (v28)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = *v11;
      uint64_t v43 = *v11;
      *uint64_t v11 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002812AC();
        uint64_t v30 = v43;
      }
      sub_1001DD848(*(void *)(*(void *)(v30 + 48) + 24 * v26), *(void *)(*(void *)(v30 + 48) + 24 * v26 + 8), *(unsigned char *)(*(void *)(v30 + 48) + 24 * v26 + 16));
      uint64_t v31 = *(void *)(v30 + 56);
      uint64_t v32 = type metadata accessor for EpisodePlayState();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = v31 + *(void *)(v33 + 72) * v26;
      uint64_t v14 = v39;
      sub_1001DD7D4(v34, v39);
      sub_10027E3E8(v26, v30);
      *uint64_t v11 = v30;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v14, 0, 1, v32);
      uint64_t v6 = v38;
    }
    else
    {
      uint64_t v15 = type metadata accessor for EpisodePlayState();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    }
    int64_t v13 = v42;
    sub_100054B1C(v14, &qword_1005FCBF0);
    swift_endAccess();
    uint64_t result = sub_1001DD848(v23, v24, v25);
  }
  uint64_t v21 = v13 + 4;
  if (v13 + 4 >= v41)
  {
LABEL_31:
    swift_release();
    *(void *)(v36 + v35) = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  unint64_t v19 = v40[v21];
  if (v19)
  {
    int64_t v20 = v13 + 4;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v20 >= v41) {
      goto LABEL_31;
    }
    unint64_t v19 = v40[v20];
    ++v21;
    if (v19) {
      goto LABEL_26;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PlayingEpisodePlayStateDataSource()
{
  return self;
}

uint64_t sub_10024C168()
{
  return swift_bridgeObjectRetain();
}

id sub_10024C1B8()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_accessQueue);
}

id sub_10024C1CC()
{
  uint64_t v1 = *v0;
  id result = [*(id *)(*v0 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController) beginAutomaticResponseLoading];
  if (*(void *)(v1 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer))
  {
    swift_retain();
    sub_10024E284();
    return (id)swift_release();
  }
  return result;
}

uint64_t sub_10024C240()
{
  uint64_t v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates);
  swift_beginAccess();
  uint64_t v2 = *v1;
  sub_10004ACDC(*v1);
  return v2;
}

uint64_t sub_10024C2A0(uint64_t a1, uint64_t a2)
{
  sub_10024F00C(a1, a2);

  return sub_1000536BC(a1);
}

void (*sub_10024C2EC(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_10024AB60(v2);
  return sub_1001B9084;
}

uint64_t sub_10024C348(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a3 & 1;
  uint64_t v6 = type metadata accessor for PlayingEpisodePlayStateDataSource();
  uint64_t v8 = sub_10024F4D4((unint64_t *)&unk_1005FCBB8, v7, (void (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource);

  return SynchronizedEpisodeStateDataSource.state(for:)(a1, a2, v5, v6, v8);
}

id sub_10024C3E8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 request];
  self;
  uint64_t v9 = (void *)swift_dynamicCastObjCClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  swift_unknownObjectRetain();
  uint64_t v10 = NowPlayingDataProvider.shared.unsafeMutableAddressor();
  swift_beginAccess();
  sub_100054BBC(v10, (uint64_t)v19, &qword_1005FCBC8);
  if (!*(void *)&v19[0])
  {
    swift_unknownObjectRelease();
    sub_100054B1C((uint64_t)v19, &qword_1005FCBC8);
    goto LABEL_7;
  }
  v20[4] = v19[4];
  v20[5] = v19[5];
  v20[6] = v19[6];
  v20[0] = v19[0];
  v20[1] = v19[1];
  void v20[2] = v19[2];
  v20[3] = v19[3];
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v11 = (void *)dispatch thunk of PlayerProtocol.playerPathCoordinator.getter();
  swift_unknownObjectRelease();
  id result = [v9 playerPath];
  if (result)
  {
    int64_t v13 = result;
    dispatch thunk of PlayerPathCoordinator.didReceiveResponse(for:)();

    swift_unknownObjectRelease();
    sub_10024F29C((uint64_t)v20);
LABEL_7:
    uint64_t v14 = *(void *)&v4[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_episodeLookupUtil];
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a1;
    void v15[5] = v4;
    v15[6] = v9;
    v15[7] = v14;
    id v16 = v9;
    swift_unknownObjectRetain();
    swift_retain();
    id v17 = a1;
    int64_t v18 = v4;
    dispatch_to_main_queue(_:)();

    return (id)swift_release();
  }
  __break(1u);
  return result;
}

id sub_10024C5F4(void (*a1)(uint64_t), uint64_t a2, void *a3, char *a4, void *a5, void *a6)
{
  id v111 = a6;
  id v112 = a5;
  CGRect v114 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v116 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v115 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int64_t v13 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100054B78((uint64_t *)&unk_1005FCBD0);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for IndexPath();
  uint64_t v117 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  int64_t v20 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  CGSize v113 = (char *)&v99 - v22;
  a1(v21);
  id result = [a3 response];
  if (!result) {
    return result;
  }
  self;
  uint64_t v24 = (void *)swift_dynamicCastObjCClass();
  if (!v24)
  {
    return (id)swift_unknownObjectRelease();
  }
  char v25 = v24;
  id v108 = v10;
  uint64_t v109 = v11;
  uint64_t v110 = v8;
  id v26 = [v24 tracklist];
  id v27 = [v26 playingItemIndexPath];

  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56))(v16, 1, 1, v17);
    goto LABEL_15;
  }
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = v117;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v117 + 32);
  v29(v16, v20, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v16, 0, 1, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v16, 1, v17) == 1)
  {
LABEL_15:
    sub_100054B1C((uint64_t)v16, (uint64_t *)&unk_1005FCBD0);
    if (*(void *)&v114[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer])
    {
      swift_retain();
      sub_10024E37C();
      swift_release();
    }
    uint64_t v45 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v120 = sub_10024F3C8;
    uint64_t v121 = v45;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v119 = sub_10003B424;
    *((void *)&v119 + 1) = &unk_10055BC40;
    uint64_t v46 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v125 = _swiftEmptyArrayStorage;
    sub_10024F4D4((unint64_t *)&qword_1005FA630, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100054B78((uint64_t *)&unk_1005FE4B0);
    sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
    char v47 = v108;
    uint64_t v48 = v110;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    swift_unknownObjectRelease();
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v47, v48);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v13, v109);
    goto LABEL_18;
  }
  uint64_t v30 = v113;
  v29(v113, v16, v17);
  id v31 = [v25 tracklist];
  id v32 = [v31 items];

  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v34 = [v32 itemAtIndexPath:isa];

  id v35 = [v34 metadataObject];
  if (v35)
  {
    uint64_t v36 = v35;
    id v37 = [v35 flattenedGenericObject];

    if (v37)
    {
      id v38 = [v37 anyObject];

      if (v38)
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          sub_10004D29C(0, (unint64_t *)&qword_1005FD2C0);
          id v107 = v38;
          uint64_t v39 = (void *)IMPlayerItem.init(modelObject:includeArtworkCatalog:)();
          id v40 = [v25 state];
          id v106 = v39;
          if (v40 == (id)1)
          {
            id v112 = *(id *)&v114[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisodeRefreshSerialQueue];
            uint64_t v41 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v120 = sub_10024F420;
            uint64_t v121 = v41;
            *(void *)&long long aBlock = _NSConcreteStackBlock;
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v119 = sub_10003B424;
            *((void *)&v119 + 1) = &unk_10055BCB8;
            CGRect v114 = (char *)_Block_copy(&aBlock);
            swift_retain();
            static DispatchQoS.unspecified.getter();
            v125 = _swiftEmptyArrayStorage;
            sub_10024F4D4((unint64_t *)&qword_1005FA630, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_100054B78((uint64_t *)&unk_1005FE4B0);
            sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
            int64_t v42 = v108;
            uint64_t v43 = v110;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            uint64_t v44 = v114;
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            swift_unknownObjectRelease();

            _Block_release(v44);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v42, v43);
LABEL_67:
            (*(void (**)(char *, uint64_t))(v115 + 8))(v13, v109);
            (*(void (**)(char *, uint64_t))(v117 + 8))(v113, v17);
LABEL_18:
            swift_release();
            return (id)swift_release();
          }
          id v49 = [v39 episodeGuid];
          if (v49)
          {
            unint64_t v50 = v49;
            uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v53 = v52;
          }
          else
          {
            uint64_t v51 = 0;
            uint64_t v53 = 0;
          }
          id v54 = [v39 episodeStoreId];
          id v101 = [v25 state];
          [v34 duration];
          int v55 = v123;
          id v56 = [v39 episode];
          id v105 = v56;
          int v102 = v55;
          if (v56)
          {
            *(void *)&long long v103 = v54;
            id v57 = [v56 uuid];
            if (v57)
            {
              uint64_t v58 = v57;
              uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v60 = v59;
            }
            else
            {
              uint64_t v99 = 0;
              uint64_t v60 = 0;
            }
            id v61 = v105;
            if (!v53)
            {
              id v62 = [v105 guid];
              if (v62)
              {
                uint64_t v63 = v62;
                uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v53 = v64;
              }
              else
              {
                uint64_t v51 = 0;
                uint64_t v53 = 0;
              }
              id v61 = v105;
            }
            uint64_t v100 = v51;
            uint64_t v65 = v53;
            id v66 = v61;
            *(void *)&long long v104 = MTEpisode.contentId.getter();
            char v68 = v67;

            if ((v68 & 1) == 0)
            {
              LODWORD(v103) = 0;
              id v69 = v112;
              uint64_t v53 = v65;
              if (!v69) {
                goto LABEL_49;
              }
LABEL_44:
              uint64_t v70 = v53;
              id v71 = [v69 playerPath];
              if (!v71)
              {
LABEL_69:
                id result = (id)swift_bridgeObjectRelease();
                __break(1u);
                return result;
              }
              int64_t v72 = v71;
              id v73 = [v71 route];

              uint64_t v53 = v70;
              if (v73)
              {
                unsigned int v74 = [v73 isDeviceRoute];

                if (v60)
                {
                  swift_bridgeObjectRelease();
                  int v75 = v74 ^ 1;
LABEL_51:
                  LODWORD(v100) = v75;
LABEL_52:
                  uint64_t v76 = &selRef_dismissActionSheetsAndPopovers;
                  id v77 = v101;
LABEL_66:
                  BOOL v86 = v77 == (id)2;
                  uint64_t v87 = static EpisodeStateIdentifier.generateIdsFrom(uuid:contentId:)();
                  swift_bridgeObjectRelease();
                  [v34 v76[61]];
                  long long v104 = aBlock;
                  long long v103 = v119;
                  char v88 = v122;
                  unsigned __int8 v89 = v123;
                  char v90 = v124;
                  uint64_t v91 = v120;
                  uint64_t v92 = v121;
                  id v112 = v34;
                  id v111 = *(id *)&v114[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisodeRefreshSerialQueue];
                  uint64_t v93 = swift_allocObject();
                  swift_unknownObjectWeakInit();
                  uint64_t v94 = swift_allocObject();
                  *(void *)(v94 + 16) = v93;
                  *(void *)(v94 + 24) = v87;
                  long long v95 = v103;
                  *(_OWORD *)(v94 + 32) = v104;
                  *(_OWORD *)(v94 + 48) = v95;
                  *(void *)(v94 + 64) = v91;
                  *(void *)(v94 + 72) = v92;
                  *(unsigned char *)(v94 + 80) = v88;
                  *(unsigned char *)(v94 + 81) = v89;
                  *(unsigned char *)(v94 + 82) = v90;
                  *(_DWORD *)(v94 + 83) = v126;
                  *(unsigned char *)(v94 + 87) = v127;
                  *(unsigned char *)(v94 + 88) = v86;
                  *(unsigned char *)(v94 + 89) = v102;
                  *(unsigned char *)(v94 + 90) = v100;
                  *(unsigned char *)(v94 + 91) = v86;
                  v120 = sub_10024F410;
                  uint64_t v121 = v94;
                  *(void *)&long long aBlock = _NSConcreteStackBlock;
                  *((void *)&aBlock + 1) = 1107296256;
                  *(void *)&long long v119 = sub_10003B424;
                  *((void *)&v119 + 1) = &unk_10055BC90;
                  char v96 = _Block_copy(&aBlock);
                  swift_retain();
                  static DispatchQoS.unspecified.getter();
                  v125 = _swiftEmptyArrayStorage;
                  sub_10024F4D4((unint64_t *)&qword_1005FA630, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                  sub_100054B78((uint64_t *)&unk_1005FE4B0);
                  sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
                  uint64_t v97 = v108;
                  uint64_t v98 = v110;
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  OS_dispatch_queue.async(group:qos:flags:execute:)();
                  swift_unknownObjectRelease();

                  _Block_release(v96);
                  (*(void (**)(char *, uint64_t))(v116 + 8))(v97, v98);
                  goto LABEL_67;
                }
                if (v74)
                {
                  swift_bridgeObjectRelease();
                  LODWORD(v100) = 0;
                  goto LABEL_52;
                }
              }
              else
              {
LABEL_49:
                if (v60)
                {
                  swift_bridgeObjectRelease();
                  int v75 = 1;
                  goto LABEL_51;
                }
              }
              uint64_t v78 = v53;
              id v79 = [objc_allocWithZone((Class)MTEpisodeLookupRequest) init];
              if (v78)
              {
                NSString v80 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
              }
              else
              {
                NSString v80 = 0;
              }
              [v79 setEpisodeGuid:v80 v99];

              if (v103)
              {
                uint64_t v81 = 0;
                goto LABEL_61;
              }
              uint64_t v81 = v104;
              if ((v104 & 0x8000000000000000) == 0)
              {
LABEL_61:
                [v79 setStoreTrackId:v81];
                id v82 = [v39 podcastFeedUrl];
                [v79 setPodcastFeedUrl:v82];

                id v83 = [v111 findEpisodeWithRequest:v79];
                if (v83
                  && (uint64_t v84 = v83,
                      id v85 = [v83 uuid],
                      v84,
                      v85))
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                }
                else
                {
                }
                LODWORD(v100) = 1;
                uint64_t v76 = &selRef_dismissActionSheetsAndPopovers;
                id v77 = v101;
                goto LABEL_66;
              }
              __break(1u);
              goto LABEL_69;
            }
            uint64_t v53 = v65;
            uint64_t v51 = v100;
            id v54 = (id)v103;
          }
          else
          {
            uint64_t v99 = 0;
            uint64_t v60 = 0;
            if (!v53) {
              uint64_t v51 = 0;
            }
          }
          uint64_t v100 = v51;
          if ([self isNotEmpty:v54])
          {
            *(void *)&long long v104 = AdamID.init(rawValue:)();
            LODWORD(v103) = 0;
          }
          else
          {
            *(void *)&long long v104 = 0;
            LODWORD(v103) = 1;
          }
          id v69 = v112;
          goto LABEL_44;
        }
      }
    }
  }
  swift_unknownObjectRelease();

  return (id)(*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v30, v17);
}

uint64_t sub_10024D570()
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = &Strong[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode];
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *(_DWORD *)(v1 + 63) = 0;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = (char *)result;
    __chkstk_darwin(result);
    type metadata accessor for PlayingEpisodePlayStateDataSource();
    sub_10024F4D4((unint64_t *)&unk_1005FCBB8, v4, (void (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource);
    SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)();
    uint64_t v5 = &v3[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
    swift_beginAccess();
    uint64_t v6 = *(void (**)(void *))v5;
    if (*(void *)v5)
    {
      sub_10004ACDC((uint64_t)v6);
      uint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = sub_10025C3E4(v7);
      swift_bridgeObjectRelease();
      v6(v8);
      sub_1000536BC((uint64_t)v6);
      swift_release();
    }

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10024D758()
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = &Strong[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode];
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *(_DWORD *)(v1 + 63) = 0;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v2 = swift_unknownObjectWeakLoadStrong();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
    swift_retain();

    if (v4)
    {
      sub_10024E37C();
      swift_release();
    }
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v6 = (char *)result;
    __chkstk_darwin(result);
    type metadata accessor for PlayingEpisodePlayStateDataSource();
    sub_10024F4D4((unint64_t *)&unk_1005FCBB8, v7, (void (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource);
    SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)();
    uint64_t v8 = &v6[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
    swift_beginAccess();
    uint64_t v9 = *(void (**)(void *))v8;
    if (*(void *)v8)
    {
      sub_10004ACDC((uint64_t)v9);
      uint64_t v10 = swift_bridgeObjectRetain();
      uint64_t v11 = sub_10025C3E4(v10);
      swift_bridgeObjectRelease();
      v9(v11);
      sub_1000536BC((uint64_t)v9);
      swift_release();
    }

    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10024D990(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(unsigned char *)(a2 + 56) & 1;
  uint64_t v11 = *(unsigned char *)(a2 + 57) & 1;
  uint64_t v12 = *(unsigned char *)(a2 + 58) & 1;
  __int16 v13 = *(unsigned char *)(a2 + 64) & 1;
  __int16 v14 = *(unsigned char *)(a2 + 65) & 1;
  char v15 = *(unsigned char *)(a2 + 66) & 1;
  unsigned int v17 = *(_DWORD *)(a2 + 48);
  unsigned int v16 = *(_DWORD *)(a2 + 52);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v19 = (void *)Strong;
    uint64_t v20 = Strong + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode;
    *(void *)uint64_t v20 = v4;
    *(void *)(v20 + 8) = v5;
    *(void *)(v20 + 16) = v6;
    *(void *)(v20 + 24) = v7;
    *(void *)(v20 + 32) = v8;
    *(void *)(v20 + 40) = v9;
    *(void *)(v20 + 48) = v17 | ((unint64_t)v16 << 32);
    *(void *)(v20 + 56) = v10 | (v11 << 8) | (v12 << 16);
    *(unsigned char *)(v20 + 66) = v15;
    *(_WORD *)(v20 + 64) = v13 | (v14 << 8);
    sub_1001DCF64(a2);

    swift_bridgeObjectRelease();
  }
  if (a3)
  {
    swift_beginAccess();
    uint64_t v21 = swift_unknownObjectWeakLoadStrong();
    if (v21)
    {
      uint64_t v22 = (void *)v21;
      uint64_t v23 = *(void *)(v21 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
      swift_retain();

      if (v23)
      {
        sub_10024E284();
        swift_release();
      }
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v24 = swift_unknownObjectWeakLoadStrong();
    if (v24)
    {
      char v25 = (void *)v24;
      uint64_t v26 = *(void *)(v24 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer);
      swift_retain();

      if (v26)
      {
        sub_10024E37C();
        swift_release();
      }
    }
    swift_beginAccess();
    uint64_t v27 = swift_unknownObjectWeakLoadStrong();
    if (v27)
    {
      uint64_t v28 = (char *)v27;
      __chkstk_darwin(v27);
      type metadata accessor for PlayingEpisodePlayStateDataSource();
      sub_10024F4D4((unint64_t *)&unk_1005FCBB8, v29, (void (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource);
      SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)();
      uint64_t v30 = &v28[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
      swift_beginAccess();
      id v31 = *(void (**)(void *))v30;
      if (*(void *)v30)
      {
        sub_10004ACDC((uint64_t)v31);
        uint64_t v32 = swift_bridgeObjectRetain();
        uint64_t v33 = sub_10025C3E4(v32);
        swift_bridgeObjectRelease();
        v31(v33);
        sub_1000536BC((uint64_t)v31);
        swift_release();
      }

      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10024DE34()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v18 = v1;
  uint64_t v19 = v2;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v15 = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_10024F4D4((unint64_t *)&qword_1005F5BE0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_10005666C((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v17);
  uint64_t v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v11 = v16;
  *(void *)(v16 + 32) = v10;
  sub_10004D29C(0, &qword_1005FCBF8);
  uint64_t v20 = 0;
  sub_10024F4D4((unint64_t *)&unk_1005FCC00, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  uint64_t v12 = v18;
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v13 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v12);
  uint64_t result = v11;
  *(void *)(v11 + 24) = v13;
  return result;
}

uint64_t sub_10024E1B8()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10024E284()
{
  return sub_10024E39C((uint64_t)sub_10024F114, (uint64_t)&unk_10055BBA0);
}

uint64_t sub_10024E2A4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong || (char v1 = *(unsigned char *)(Strong + 16), result = swift_release(), (v1 & 1) == 0))
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_unknownObjectRetain();
      swift_release();
      swift_getObjectType();
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease();
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      *(unsigned char *)(result + 16) = 1;
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10024E37C()
{
  return sub_10024E39C((uint64_t)sub_10024F10C, (uint64_t)&unk_10055BB78);
}

uint64_t sub_10024E39C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *(void *)(v2 + 32);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = a1;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = _swiftEmptyArrayStorage;
  sub_10024F4D4((unint64_t *)&qword_1005FA630, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v16);
  swift_release();
  return swift_release();
}

uint64_t sub_10024E650()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong || (int v1 = *(unsigned __int8 *)(Strong + 16), result = swift_release(), v1 == 1))
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_unknownObjectRetain();
      swift_release();
      swift_getObjectType();
      OS_dispatch_source.suspend()();
      swift_unknownObjectRelease();
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      *(unsigned char *)(result + 16) = 0;
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10024E728()
{
  return sub_10024E39C((uint64_t)sub_10024F104, (uint64_t)&unk_10055BB50);
}

uint64_t sub_10024E748()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_unknownObjectRetain();
    swift_release();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10024E7BC()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PositionUpdateTimer()
{
  return self;
}

uint64_t destroy for PlayingEpisodeInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlayingEpisodeInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlayingEpisodeInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  return a1;
}

__n128 initializeWithTake for PlayingEpisodeInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PlayingEpisodeInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayingEpisodeInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 67)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayingEpisodeInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 67) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 67) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayingEpisodeInfo()
{
  return &type metadata for PlayingEpisodeInfo;
}

uint64_t sub_10024EA8C()
{
  return sub_10024F4D4(&qword_1005FCBA8, 255, (void (*)(uint64_t))&type metadata accessor for EpisodePlayState);
}

uint64_t sub_10024EAD8(uint64_t a1, uint64_t a2)
{
  return sub_10024F4D4(&qword_1005FCBB0, a2, (void (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource);
}

uint64_t sub_10024EB20(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = type metadata accessor for DispatchTimeInterval();
  uint64_t v35 = *(void *)(v37 - 8);
  uint64_t v4 = __chkstk_darwin(v37);
  uint64_t v39 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v31 - v6);
  uint64_t v38 = type metadata accessor for DispatchTime();
  uint64_t v40 = *(void *)(v38 - 8);
  uint64_t v8 = __chkstk_darwin(v38);
  id v34 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v36 = (char *)&v31 - v10;
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(ObjectType - 8);
  __chkstk_darwin(ObjectType);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PositionUpdateTimer();
  swift_allocObject();
  uint64_t v17 = sub_10024DE34();
  uint64_t v31 = v17;
  swift_getObjectType();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  aBlock[4] = sub_10004A018;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055BD08;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_10024E1B8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v33);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, ObjectType);
  swift_release();
  uint64_t v33 = *(void *)(v17 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v20 = v34;
  static DispatchTime.now()();
  void *v7 = 1;
  uint64_t v21 = v35;
  uint64_t v22 = *(void (**)(void *, void, uint64_t))(v35 + 104);
  uint64_t v23 = v37;
  v22(v7, enum case for DispatchTimeInterval.seconds(_:), v37);
  uint64_t v24 = v36;
  + infix(_:_:)();
  char v25 = *(void (**)(void *, uint64_t))(v21 + 8);
  v25(v7, v23);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v40 + 8);
  v40 += 8;
  uint64_t v27 = v20;
  uint64_t v28 = v38;
  v26(v27, v38);
  void *v7 = 500;
  v22(v7, enum case for DispatchTimeInterval.milliseconds(_:), v23);
  uint64_t v29 = v39;
  void *v39 = 0;
  v22(v29, enum case for DispatchTimeInterval.nanoseconds(_:), v23);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  v25(v29, v23);
  v25(v7, v23);
  v26(v24, v28);
  return v31;
}

id sub_10024F00C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  sub_10004ACDC(a1);
  id result = (id)sub_1000536BC(v6);
  if (!*v5)
  {
    id result = [*(id *)(v2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController) endAutomaticResponseLoading];
    if (*(void *)(v2 + OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer))
    {
      swift_retain();
      sub_10024E37C();
      return (id)swift_release();
    }
  }
  return result;
}

uint64_t sub_10024F0CC()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10024F104()
{
  return sub_10024E748();
}

uint64_t sub_10024F10C()
{
  return sub_10024E650();
}

uint64_t sub_10024F114()
{
  return sub_10024E2A4();
}

uint64_t sub_10024F11C(void *a1)
{
  id v1 = [a1 request];
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    return 1;
  }
  long long v3 = (void *)v2;
  uint64_t v4 = NowPlayingDataProvider.shared.unsafeMutableAddressor();
  swift_beginAccess();
  sub_100054BBC(v4, (uint64_t)v8, &qword_1005FCBC8);
  if (!*(void *)&v8[0])
  {
    swift_unknownObjectRelease();
    sub_100054B1C((uint64_t)v8, &qword_1005FCBC8);
    return 1;
  }
  v9[4] = v8[4];
  v9[5] = v8[5];
  void v9[6] = v8[6];
  v9[0] = v8[0];
  v9[1] = v8[1];
  void v9[2] = v8[2];
  uint64_t v9[3] = v8[3];
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v5 = (void *)dispatch thunk of PlayerProtocol.playerPathCoordinator.getter();
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)[v3 playerPath];
  if (result)
  {
    uint64_t v7 = (void *)result;
    dispatch thunk of PlayerPathCoordinator.didReceiveErrorLoadingResponse(for:error:)();

    swift_unknownObjectRelease();
    sub_10024F29C((uint64_t)v9);
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_10024F29C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10024F2F0()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_10024F328()
{
  swift_release();

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

id sub_10024F380()
{
  return sub_10024C5F4(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(char **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_10024F390()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10024F3C8()
{
  return sub_10024D570();
}

uint64_t sub_10024F3D0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_10024F410()
{
  sub_10024D990(*(void *)(v0 + 16), v0 + 24, *(unsigned char *)(v0 + 91));
}

uint64_t sub_10024F420()
{
  return sub_10024D758();
}

uint64_t sub_10024F428()
{
  return sub_10024B3D0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10024F434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FCBE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024F49C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10024F4D4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10024F51C()
{
  return sub_10024AF30();
}

void sub_10024F54C(uint64_t a1, long long *a2)
{
  sub_1001FC43C(a2, &v31);
  long long v3 = v31;
  uint64_t v4 = v32;
  uint64_t v5 = v33;
  uint64_t v6 = v34;
  uint64_t v7 = v35;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_11;
  }
  uint64_t v9 = a2;
  uint64_t v27 = v6;
  uint64_t v10 = *(unsigned __int8 *)(Strong + 64);
  uint64_t v11 = *(void *)(Strong + 24);
  uint64_t v29 = *(void *)(Strong + 32);
  uint64_t v30 = *(void *)(Strong + 40);
  uint64_t v28 = *(void *)(Strong + 48);
  uint64_t v12 = *(void *)(Strong + 56);
  sub_1001FC3C0(v11, v29, v30, v28, v12, *(unsigned char *)(Strong + 64));
  swift_release();
  if ((int)v10 <= 1)
  {
    if (v10) {
      uint64_t v13 = 4;
    }
    else {
      uint64_t v13 = v10;
    }
    uint64_t v14 = v12;
LABEL_14:
    uint64_t v16 = v9;
    if (!v7) {
      goto LABEL_36;
    }
    goto LABEL_15;
  }
  if (v10 != 2)
  {
LABEL_11:
    sub_1003D19F0();
    return;
  }
  uint64_t v14 = v12;
  if (!(v30 | v29 | v11 | v28 | v12))
  {
    uint64_t v13 = 2;
    goto LABEL_14;
  }
  uint64_t v15 = v30 | v29 | v28 | v12;
  uint64_t v16 = v9;
  if (v11 == 1 && !v15)
  {
    uint64_t v13 = 3;
    if (!v7) {
      goto LABEL_36;
    }
    goto LABEL_15;
  }
  if (v15) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v11 == 2;
  }
  uint64_t v13 = 5;
  if (!v18) {
    uint64_t v13 = 6;
  }
  if (v7)
  {
LABEL_15:
    if (v7 == 1)
    {
      uint64_t v7 = 4;
    }
    else if (v4 | *((void *)&v3 + 1) | (unint64_t)v3 | v5 | v27)
    {
      uint64_t v17 = v4 | *((void *)&v3 + 1) | v5 | v27;
      if ((void)v3 != 1 || v17)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = (void)v3 == 2;
        }
        if (v19) {
          uint64_t v7 = 5;
        }
        else {
          uint64_t v7 = 6;
        }
      }
      else
      {
        uint64_t v7 = 3;
      }
    }
    else
    {
      uint64_t v7 = 2;
    }
  }
LABEL_36:
  if (v13 != v7)
  {
    *(void *)&long long v36 = 0;
    *((void *)&v36 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(76);
    v25._object = (void *)0x80000001004D8E10;
    v25._uint64_t countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v25);
    sub_1001FC43C(v16, &v36);
    _print_unlocked<A, B>(_:_:)();
    v26._uint64_t countAndFlagsBits = 0xD000000000000028;
    v26._object = (void *)0x80000001004D8E40;
    String.append(_:)(v26);
    *(void *)&long long v36 = v11;
    *((void *)&v36 + 1) = v29;
    uint64_t v37 = v30;
    uint64_t v38 = v28;
    uint64_t v39 = v14;
    char v40 = v10;
    _print_unlocked<A, B>(_:_:)();
    sub_1003D19F0();
    swift_bridgeObjectRelease();
    uint64_t v20 = v11;
    uint64_t v21 = v29;
    uint64_t v22 = v30;
    uint64_t v23 = v28;
    uint64_t v24 = v14;
    goto LABEL_40;
  }
  sub_1001FC43C(v16, &v36);
  if (v40 || (swift_beginAccess(), !swift_weakLoadStrong()))
  {
    uint64_t v20 = v11;
    uint64_t v21 = v29;
    uint64_t v22 = v30;
    uint64_t v23 = v28;
    uint64_t v24 = v14;
LABEL_40:
    sub_1001FC3AC(v20, v21, v22, v23, v24, v10);
    return;
  }
  sub_100250128(v16);
  sub_1001FC3AC(v11, v29, v30, v28, v14, v10);
  swift_release();
}

uint64_t sub_10024F888(long long *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000566BC();
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  sub_1001FC43C(a1, (_OWORD *)(v12 + 24));
  aBlock[4] = sub_100250930;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055BE40;
  uint64_t v13 = _Block_copy(aBlock);
  sub_10025093C((uint64_t)a1);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10002FC48();
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10002FBEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10024FB40(uint64_t a1, long long *a2)
{
  sub_1001FC43C(a2, &v43);
  long long v4 = v43;
  uint64_t v5 = v44;
  uint64_t v6 = v45;
  uint64_t v7 = v46;
  uint64_t v36 = a1;
  char v8 = v47;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    int v10 = *(unsigned __int8 *)(Strong + 64);
    swift_release();
    if (v10 != 255) {
      sub_1003D19F0();
    }
  }
  swift_beginAccess();
  uint64_t v11 = swift_weakLoadStrong();
  if (v11)
  {
    uint64_t v12 = v5;
    uint64_t v13 = *(void *)(v11 + 24);
    uint64_t v14 = *(void *)(v11 + 32);
    uint64_t v15 = v6;
    uint64_t v16 = v7;
    uint64_t v17 = *(void *)(v11 + 40);
    uint64_t v18 = *(void *)(v11 + 48);
    uint64_t v19 = *(void *)(v11 + 56);
    *(_OWORD *)(v11 + 24) = v4;
    *(void *)(v11 + 40) = v12;
    *(void *)(v11 + 48) = v15;
    *(void *)(v11 + 56) = v16;
    char v20 = *(unsigned char *)(v11 + 64);
    *(unsigned char *)(v11 + 64) = v8;
    sub_10025093C((uint64_t)a2);
    sub_1001FC3AC(v13, v14, v17, v18, v19, v20);
    swift_release();
  }
  sub_1001FC43C(a2, &v48);
  if (v52)
  {
    if (v52 != 1)
    {
      if (v50 | v51 | (unint64_t)v48 | v49 | *((void *)&v48 + 1))
      {
        uint64_t v25 = v50 | v51 | v49 | *((void *)&v48 + 1);
        if ((void)v48 != 1 || v25)
        {
          if ((void)v48 != 2 || v25)
          {
            swift_beginAccess();
            uint64_t v33 = swift_weakLoadStrong();
            if (!v33) {
              return;
            }
            uint64_t v34 = *(void **)(v33 + 16);
            swift_unknownObjectRetain();
            swift_release();
            if (!v34) {
              return;
            }
            uint64_t v41 = sub_1002508C8;
            uint64_t v42 = v36;
            long long aBlock = _NSConcreteStackBlock;
            uint64_t v38 = 1107296256;
            uint64_t v39 = sub_10003B424;
            char v40 = &unk_10055BE68;
            uint64_t v28 = _Block_copy(&aBlock);
            swift_retain();
            swift_release();
            [v34 showSubscriptionRequired:v28];
          }
          else
          {
            swift_beginAccess();
            uint64_t v31 = swift_weakLoadStrong();
            if (!v31) {
              return;
            }
            uint64_t v32 = *(void **)(v31 + 16);
            swift_unknownObjectRetain();
            swift_release();
            if (!v32) {
              return;
            }
            uint64_t v41 = sub_1002508C8;
            uint64_t v42 = v36;
            long long aBlock = _NSConcreteStackBlock;
            uint64_t v38 = 1107296256;
            uint64_t v39 = sub_10003B424;
            char v40 = &unk_10055BE90;
            uint64_t v28 = _Block_copy(&aBlock);
            swift_retain();
            swift_release();
            [v32 showEpisodeRestricted:v28];
          }
        }
        else
        {
          swift_beginAccess();
          uint64_t v26 = swift_weakLoadStrong();
          if (!v26) {
            return;
          }
          uint64_t v27 = *(void **)(v26 + 16);
          swift_unknownObjectRetain();
          swift_release();
          if (!v27) {
            return;
          }
          uint64_t v41 = sub_1002508C8;
          uint64_t v42 = v36;
          long long aBlock = _NSConcreteStackBlock;
          uint64_t v38 = 1107296256;
          uint64_t v39 = sub_10003B424;
          char v40 = &unk_10055BEE0;
          uint64_t v28 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          [v27 showGenericAlert:v28];
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v29 = swift_weakLoadStrong();
        if (!v29) {
          return;
        }
        uint64_t v30 = *(void **)(v29 + 16);
        swift_unknownObjectRetain();
        swift_release();
        if (!v30) {
          return;
        }
        uint64_t v41 = sub_1002508C8;
        uint64_t v42 = v36;
        long long aBlock = _NSConcreteStackBlock;
        uint64_t v38 = 1107296256;
        uint64_t v39 = sub_10003B424;
        char v40 = &unk_10055BF08;
        uint64_t v28 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v30 showNoInternet:v28];
      }
      swift_unknownObjectRelease();
      _Block_release(v28);
      return;
    }
    uint64_t v21 = *((void *)&v48 + 1);
    swift_beginAccess();
    uint64_t v22 = swift_weakLoadStrong();
    if (v22)
    {
      uint64_t v23 = *(void **)(v22 + 16);
      swift_unknownObjectRetain();
      swift_release();
      if (v23)
      {
        if (v21) {
          NSString v24 = String._bridgeToObjectiveC()();
        }
        else {
          NSString v24 = 0;
        }
        uint64_t v41 = sub_1002508C8;
        uint64_t v42 = v36;
        long long aBlock = _NSConcreteStackBlock;
        uint64_t v38 = 1107296256;
        uint64_t v39 = sub_10003B424;
        char v40 = &unk_10055BEB8;
        unsigned __int8 v35 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v23 showEpisodeFeedDeleted:v24 onDismiss:v35];
        swift_unknownObjectRelease();
        _Block_release(v35);
      }
    }
  }
  else
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_100250128(a2);
      swift_release();
    }
  }
}

void sub_100250128(long long *a1)
{
  sub_1001FC43C(a1, &v50);
  if (!v54)
  {
    object = (void *)*((void *)&v50 + 1);
    uint64_t tableName = v50;
    uint64_t tableName_8 = v1;
    uint64_t v4 = v51;
    uint64_t v3 = v52;
    uint64_t v5 = v53;
    uint64_t v6 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v40 = v3;
    uint64_t v41 = v5;
    sub_10004ACDC(v3);
    id v7 = [v6 mainBundle];
    v8._uint64_t countAndFlagsBits = 0xD000000000000015;
    v55._object = (void *)0xE000000000000000;
    v8._object = (void *)0x80000001004D8D80;
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    v55._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v55);

    sub_100054B78(&qword_1005F7720);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10046D010;
    uint64_t v11 = *(void *)(v4 + 16);
    *(void *)(v10 + 56) = &type metadata for Int;
    *(void *)(v10 + 64) = &protocol witness table for Int;
    *(void *)(v10 + 32) = v11;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v12 = *(void *)(v4 + 16);
    id v13 = [v6 mainBundle];
    if (v12 < 2)
    {
      v20._uint64_t countAndFlagsBits = 0xD000000000000017;
      v57._object = (void *)0xE000000000000000;
      v20._object = (void *)0x80000001004D8DA0;
      v21._uint64_t countAndFlagsBits = 0;
      v21._object = (void *)0xE000000000000000;
      v57._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v13, v21, v57);

      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_10046D010;
      *(void *)(v22 + 56) = &type metadata for String;
      *(void *)(v22 + 64) = sub_10004DA4C();
      if (object)
      {
        uint64_t countAndFlagsBits = tableName;
        uint64_t v18 = tableName_8;
      }
      else
      {
        id v28 = [v6 mainBundle];
        v59._object = (void *)0xE000000000000000;
        v29._object = (void *)0x80000001004D8DC0;
        v29._uint64_t countAndFlagsBits = 0xD000000000000028;
        v30._uint64_t countAndFlagsBits = 0;
        v30._object = (void *)0xE000000000000000;
        v59._uint64_t countAndFlagsBits = 0;
        Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)(unint64_t)tableName, (NSBundle)v28, v30, v59);
        uint64_t countAndFlagsBits = v31._countAndFlagsBits;
        object = v31._object;

        uint64_t v18 = tableName_8;
      }
      *(void *)(v22 + 32) = countAndFlagsBits;
      *(void *)(v22 + 40) = object;
    }
    else
    {
      v14._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      v56._object = (void *)0xE000000000000000;
      v14._object = (void *)0x80000001004D8DF0;
      v15._uint64_t countAndFlagsBits = 0;
      v15._object = (void *)0xE000000000000000;
      v56._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v56);

      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_10046D030;
      uint64_t v17 = *(void *)(v4 + 16) - 1;
      *(void *)(v16 + 56) = &type metadata for Int;
      *(void *)(v16 + 64) = &protocol witness table for Int;
      *(void *)(v16 + 32) = v17;
      *(void *)(v16 + 96) = &type metadata for String;
      *(void *)(v16 + 104) = sub_10004DA4C();
      if (object)
      {
        uint64_t v19 = tableName;
        uint64_t v18 = tableName_8;
      }
      else
      {
        id v24 = [v6 mainBundle];
        v58._object = (void *)0xE000000000000000;
        v25._object = (void *)0x80000001004D8DC0;
        v25._uint64_t countAndFlagsBits = 0xD000000000000028;
        v26._uint64_t countAndFlagsBits = 0;
        v26._object = (void *)0xE000000000000000;
        v58._uint64_t countAndFlagsBits = 0;
        Swift::String v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)(unint64_t)tableName, (NSBundle)v24, v26, v58);
        uint64_t v19 = v27._countAndFlagsBits;
        object = v27._object;

        uint64_t v18 = tableName_8;
      }
      *(void *)(v16 + 72) = v19;
      *(void *)(v16 + 80) = object;
    }
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void **)(v18 + 16);
    if (v32)
    {
      swift_unknownObjectRetain();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v35 = swift_allocObject();
      swift_weakInit();
      uint64_t v36 = (void *)swift_allocObject();
      v36[2] = v40;
      uint64_t v36[3] = v41;
      v36[4] = v4;
      void v36[5] = v35;
      long long v48 = sub_1002508BC;
      uint64_t v49 = v36;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v45 = 1107296256;
      uint64_t v46 = sub_10003B424;
      char v47 = &unk_10055BDC8;
      uint64_t v37 = _Block_copy(&aBlock);
      sub_10004ACDC(v40);
      swift_release();
      uint64_t v38 = swift_allocObject();
      swift_weakInit();
      long long v48 = sub_1002508C8;
      uint64_t v49 = (void *)v38;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v45 = 1107296256;
      uint64_t v46 = sub_10003B424;
      char v47 = &unk_10055BDF0;
      uint64_t v39 = _Block_copy(&aBlock);
      swift_release();
      [v32 showOrUpdateNetworkErrorAlert:v33 body:v34 onRetry:v37 onDismiss:v39];
      sub_1000536BC(v40);
      swift_unknownObjectRelease();
      _Block_release(v39);
      _Block_release(v37);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000536BC(v40);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1002506D0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  if (a1) {
    a1(a3);
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 24);
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v7 = *(void *)(v4 + 40);
    uint64_t v8 = *(void *)(v4 + 48);
    uint64_t v9 = *(void *)(v4 + 56);
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(void *)(v4 + 56) = 0;
    char v10 = *(unsigned char *)(v4 + 64);
    *(unsigned char *)(v4 + 64) = -1;
    sub_1001FC3AC(v5, v6, v7, v8, v9, v10);
    return swift_release();
  }
  return result;
}

uint64_t sub_100250768()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 24);
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = *(void *)(v1 + 40);
    uint64_t v5 = *(void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 56);
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(void *)(v1 + 56) = 0;
    char v7 = *(unsigned char *)(v1 + 64);
    *(unsigned char *)(v1 + 64) = -1;
    sub_1001FC3AC(v2, v3, v4, v5, v6, v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002507E8()
{
  swift_unknownObjectRelease();
  sub_1001FC3AC(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocClassInstance();
}

uint64_t sub_100250834()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10025086C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002508BC()
{
  return sub_1002506D0(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1002508C8()
{
  return sub_100250768();
}

uint64_t sub_1002508E4()
{
  swift_release();
  sub_1001F94C8(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocObject();
}

void sub_100250930()
{
  sub_10024FB40(*(void *)(v0 + 16), (long long *)(v0 + 24));
}

uint64_t sub_10025093C(uint64_t a1)
{
  return a1;
}

char *NonFollowedShowsSyncProcessor.init()()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v25 - v5;
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [objc_allocWithZone((Class)type metadata accessor for NonFollowedShowsSyncStorage()) init];
  id v11 = [objc_allocWithZone((Class)type metadata accessor for CloudSyncBugReporter()) init];
  id v12 = objc_allocWithZone((Class)type metadata accessor for NonFollowedShowsSyncProcessor());
  id v13 = sub_100255548((uint64_t)v10, (uint64_t)v11, v12);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  Swift::String v14 = (char *)v13;
  static OSSignposter.cloudSync.getter();
  uint64_t v26 = v1;
  Swift::String v15 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  uint64_t v16 = v6;
  uint64_t v17 = v6;
  uint64_t v18 = v0;
  v15(v17, &v14[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID], v0);
  uint64_t v19 = OSSignposter.logHandle.getter();
  os_signpost_type_t v20 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v15(v4, v16, v18);
    Swift::String v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v20, v22, "NonFollowedShowsSyncProcessor.created", "", v21, 2u);
    swift_slowDealloc();

    uint64_t v23 = *(void (**)(char *, uint64_t))(v26 + 8);
    v23(v16, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
    v23(v4, v18);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  }
  return v14;
}

uint64_t type metadata accessor for NonFollowedShowsSyncProcessor()
{
  uint64_t result = qword_1005FCD48;
  if (!qword_1005FCD48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id NonFollowedShowsSyncProcessor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NonFollowedShowsSyncProcessor();
  [super dealloc];
}

uint64_t NonFollowedShowsSyncProcessor.operationTypeForSET()()
{
  return 15;
}

Swift::Bool __swiftcall NonFollowedShowsSyncProcessor.hasLocalChanges()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess();
  sub_100056D54(v1, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  sub_100041A98(v5, v6);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 112))(v2, v3);
  sub_10004D2D8((uint64_t)v5);
  return v2 & 1;
}

Swift::String_optional __swiftcall NonFollowedShowsSyncProcessor.version(forGetTransaction:key:)(MZKeyValueStoreTransaction *forGetTransaction, Swift::String key)
{
  uint64_t v2 = sub_1002556C8(key._countAndFlagsBits, (unint64_t)key._object);
  result.value._object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t NonFollowedShowsSyncProcessor.data(forSetTransaction:key:version:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  return sub_100255CC0(a2, a3, a4);
}

uint64_t NonFollowedShowsSyncProcessor.success(forGetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  return sub_100256800(a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100251178(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = a4;
  uint64_t v57 = a3;
  uint64_t v68 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v68 - 8);
  uint64_t v6 = __chkstk_darwin(v68);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v63 = (char *)&v56 - v9;
  uint64_t v10 = sub_100054B78(&qword_1005FCD58);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  id v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v70 = (char *)&v56 - v14;
  uint64_t v15 = type metadata accessor for RemoteNonFollowedShow();
  uint64_t v65 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  unsigned int v74 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v64 = (char *)&v56 - v18;
  id v19 = [objc_allocWithZone((Class)MZKeyValueStoreNode) init];
  Class isa = 0;
  if (a2 >> 60 != 15) {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v19 setValue:isa];

  if ([v19 hasData])
  {
    id v21 = [v19 arrayValue];
    if (!v21
      || (os_signpost_id_t v22 = v21,
          uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v22,
          id v24 = sub_1003E4BB4(v23),
          swift_bridgeObjectRelease(),
          !v24))
    {
      swift_bridgeObjectRelease();
      id v24 = _swiftEmptyArrayStorage;
    }
    uint64_t v25 = (uint64_t)v70;
    uint64_t v73 = v24[2];
    if (v73)
    {
      id v56 = v19;
      uint64_t v76 = v65 + 56;
      uint64_t v66 = v5 + 8;
      id v71 = (void (**)(char *, uint64_t, uint64_t))(v65 + 32);
      int64_t v72 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
      swift_bridgeObjectRetain();
      uint64_t v26 = 0;
      uint64_t v27 = (char *)_swiftEmptyArrayStorage;
      *(void *)&long long v28 = 136380675;
      long long v62 = v28;
      id v61 = (char *)&type metadata for Any + 8;
      id v69 = v24;
      char v67 = v13;
      uint64_t v60 = v15;
      do
      {
        swift_bridgeObjectRetain();
        RemoteNonFollowedShow.init(dictionary:)();
        (*(void (**)(char *, void, uint64_t, uint64_t))v76)(v13, 0, 1, v15);
        sub_100257134((uint64_t)v13, v25);
        if ((*v72)(v25, 1, v15) == 1)
        {
          sub_10025703C(v25);
        }
        else
        {
          Swift::String v29 = *v71;
          Swift::String v30 = v64;
          (*v71)(v64, v25, v15);
          v29(v74, (uint64_t)v30, v15);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v27 = (char *)sub_1002EFDF4(0, *((void *)v27 + 2) + 1, 1, (unint64_t)v27);
          }
          unint64_t v32 = *((void *)v27 + 2);
          unint64_t v31 = *((void *)v27 + 3);
          if (v32 >= v31 >> 1) {
            uint64_t v27 = (char *)sub_1002EFDF4(v31 > 1, v32 + 1, 1, (unint64_t)v27);
          }
          *((void *)v27 + 2) = v32 + 1;
          v29(&v27[((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(void *)(v65 + 72) * v32], (uint64_t)v74, v15);
          uint64_t v25 = (uint64_t)v70;
        }
        ++v26;
      }
      while (v73 != v26);
      swift_bridgeObjectRelease_n();
      id v19 = v56;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = (char *)_swiftEmptyArrayStorage;
    }
    char v47 = &v59[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage];
    swift_beginAccess();
    sub_100056D54((uint64_t)v47, (uint64_t)aBlock);
    long long v48 = v78;
    uint64_t v49 = v79;
    sub_100041A98(aBlock, (uint64_t)v78);
    long long v50 = (void *)(*((uint64_t (**)(void *, uint64_t (*)()))v49 + 1))(v48, v49);
    sub_10004D2D8((uint64_t)aBlock);
    uint64_t v51 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v52 = (void *)swift_allocObject();
    v52[2] = v51;
    v52[3] = v27;
    uint64_t v53 = v57;
    v52[4] = v50;
    v52[5] = v53;
    v52[6] = v58;
    id v79 = sub_100257124;
    NSString v80 = v52;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003B424;
    uint64_t v78 = &unk_10055BFF8;
    char v54 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v55 = v50;
    swift_release();
    [v55 performBlockAndWaitWithSave:v54];
    _Block_release(v54);
  }
  else
  {
    static Logger.cloudSync.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    NSString v34 = v59;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = v33;
    if (os_log_type_enabled(v35, v33))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v76 = v5;
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t v83 = v38;
      int v75 = v37 + 4;
      uint64_t v39 = (uint64_t)&v34[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage];
      swift_beginAccess();
      sub_100056D54(v39, (uint64_t)aBlock);
      id v56 = v19;
      uint64_t v41 = v78;
      uint64_t v40 = v79;
      sub_100041A98(aBlock, (uint64_t)v78);
      uint64_t v42 = (*((uint64_t (**)(void *, uint64_t (*)()))v40 + 8))(v41, v40);
      uint64_t v44 = v43;
      sub_10004D2D8((uint64_t)aBlock);
      uint64_t v81 = v42;
      uint64_t v82 = v44;
      sub_100054B78(&qword_1005F93A0);
      uint64_t v45 = String.init<A>(describing:)();
      aBlock[0] = sub_10004B974(v45, v46, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[NonFollowedShows] Empty remote Implicit Follows key for current version %s. Nothing to merge.", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v76 + 8))(v8, v68);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v68);
    }
  }
}

uint64_t sub_100251BDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v6 = type metadata accessor for OSSignpostError();
  uint64_t v37 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v30[-v14];
  uint64_t v16 = type metadata accessor for OSSignposter();
  uint64_t v17 = __chkstk_darwin(v16);
  os_signpost_type_t v20 = &v30[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(void *)(v4 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState))
  {
    uint64_t v32 = v9;
    uint64_t v33 = v18;
    uint64_t v34 = v17;
    uint64_t v35 = v4;
    os_log_type_t v36 = a3;
    swift_retain();
    static OSSignposter.cloudSync.getter();
    id v21 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    int v22 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v31 = v22;
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v23 = v37;
      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v37 + 88))(v8, v6) == enum case for OSSignpostError.doubleEnd(_:))
      {
        id v24 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v8, v6);
        id v24 = "";
      }
      uint64_t v25 = v32;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v13, v15, v32);
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      os_signpost_id_t v27 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v31, v27, "NonFollowedShowsSyncProcessor.finish", v24, v26, 2u);
      swift_slowDealloc();

      long long v28 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
      v28(v15, v25);
      (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v20, v34);
      swift_release();
      v28(v13, v25);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v32);
      (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v20, v34);
      swift_release();
    }
    a3 = v36;
  }
  uint64_t result = sub_100255158(v39, v40);
  if (a3) {
    return a3(0);
  }
  return result;
}

uint64_t NonFollowedShowsSyncProcessor.success(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  return sub_100256A58(a4, a5, a6, a7, a8, a9);
}

uint64_t NonFollowedShowsSyncProcessor.conflict(forSetTransaction:with:forKey:version:finishedBlock:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9)
{
  return sub_100256C94(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100252318(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v34 = a2;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  id v13 = &v27[-v12];
  uint64_t v14 = type metadata accessor for OSSignposter();
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v18 = &v27[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(void *)(v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState))
  {
    uint64_t v29 = v7;
    uint64_t v30 = v16;
    uint64_t v31 = result;
    uint64_t v32 = a1;
    swift_retain();
    static OSSignposter.cloudSync.getter();
    uint64_t v19 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    int v20 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      int v28 = v20;
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v21 = v33;
      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v33 + 88))(v6, v4) == enum case for OSSignpostError.doubleEnd(_:))
      {
        int v22 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v6, v4);
        int v22 = "";
      }
      uint64_t v23 = v29;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v11, v13, v29);
      id v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v24 = 0;
      os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, (os_signpost_type_t)v28, v25, "NonFollowedShowsSyncProcessor.reschedule", v22, v24, 2u);
      swift_slowDealloc();

      uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v26(v13, v23);
      (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v18, v31);
      swift_release();
      uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v26)(v11, v23);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v13, v29);
      (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v18, v31);
      uint64_t result = swift_release();
    }
    a1 = v32;
  }
  if (a1) {
    return a1(1);
  }
  return result;
}

Swift::Void __swiftcall NonFollowedShowsSyncProcessor.transaction(_:didProcessResponseWithDomainVersion:)(MZKeyValueStoreTransaction *_, Swift::String_optional didProcessResponseWithDomainVersion)
{
  object = didProcessResponseWithDomainVersion.value._object;
  uint64_t countAndFlagsBits = didProcessResponseWithDomainVersion.value._countAndFlagsBits;
  uint64_t v5 = v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  sub_100055EF0(v5, v6);
  uint64_t v8 = *(void (**)(uint64_t, void *, uint64_t, uint64_t))(v7 + 96);
  swift_bridgeObjectRetain();
  v8(countAndFlagsBits, object, v6, v7);
  swift_endAccess();
}

uint64_t sub_100252A1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  int64_t v72 = a3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v65 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v65 - v16;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v19 = result;
  uint64_t v66 = a4;
  id v69 = v15;
  uint64_t v70 = v12;
  static Logger.cloudSync.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  BOOL v22 = os_log_type_enabled(v21, v20);
  uint64_t v67 = a5;
  if (v22)
  {
    uint64_t v71 = v9;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v76[0] = swift_slowAlloc();
    uint64_t v68 = v8;
    *(_DWORD *)uint64_t v23 = 136380675;
    v65[1] = v23 + 4;
    type metadata accessor for RemoteNonFollowedShow();
    id v24 = v19;
    swift_bridgeObjectRetain();
    uint64_t v25 = Array.description.getter();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    uint64_t v28 = v25;
    uint64_t v19 = v24;
    v75[1] = sub_10004B974(v28, v27, v76);
    uint64_t v8 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v9 = v71;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v20, "[NonFollowedShows] Inserting or updating Implicit Follows for remote list %{private}s.", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 8);
  v29(v17, v8);
  uint64_t v30 = v72;
  sub_100253168(a2, v72);
  uint64_t v32 = v31;
  uint64_t v33 = (uint64_t)v19 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess();
  sub_100056D54(v33, (uint64_t)v76);
  uint64_t v34 = v77;
  uint64_t v35 = v78;
  sub_100041A98(v76, v77);
  unint64_t v36 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v35 + 128))(v32, v30, v34, v35);
  sub_10004D2D8((uint64_t)v76);
  if (v36)
  {
    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v59)
      {
        uint64_t v71 = v9;
        unint64_t v37 = *(void *)(v32 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    else if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v71 = v9;
      unint64_t v37 = *(void *)(v32 + 16);
      swift_bridgeObjectRelease();
      uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
      sub_100254A84(v37, v38, v66, v67);
      uint64_t v39 = v69;
      static Logger.cloudSync.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v41 = v19;
      uint64_t v42 = Logger.logObject.getter();
      if (os_log_type_enabled(v42, v40))
      {
        uint64_t v43 = swift_slowAlloc();
        uint64_t v68 = v8;
        uint64_t v44 = v43;
        int64_t v72 = (void *)swift_slowAlloc();
        v75[0] = (uint64_t)v72;
        *(_DWORD *)uint64_t v44 = 136315395;
        sub_100056D54(v33, (uint64_t)v76);
        LODWORD(v70) = v40;
        uint64_t v45 = v77;
        uint64_t v46 = v78;
        sub_100041A98(v76, v77);
        uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 40))(v45, v46);
        char v49 = v48;
        sub_10004D2D8((uint64_t)v76);
        uint64_t v73 = v47;
        char v74 = v49 & 1;
        sub_100054B78(&qword_1005FC2B0);
        uint64_t v50 = String.init<A>(describing:)();
        v76[0] = sub_10004B974(v50, v51, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2081;
        sub_10025719C();
        swift_bridgeObjectRetain();
        uint64_t v52 = Array.description.getter();
        unint64_t v54 = v53;
        swift_bridgeObjectRelease();
        v76[0] = sub_10004B974(v52, v54, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v70, "[NonFollowedShows] Removing Implicit Follows only local and before timestamp %s: %{private}s.", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v56 = v68;
        id v55 = v69;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        id v55 = v39;
        uint64_t v56 = v8;
      }
      v29(v55, v56);
      sub_100056D54(v33, (uint64_t)v76);
      uint64_t v57 = v77;
      uint64_t v58 = v78;
      sub_100041A98(v76, v77);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v58 + 152))(v36, v57, v58);

      swift_bridgeObjectRelease();
      return sub_10004D2D8((uint64_t)v76);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v60 = v70;
  static Logger.cloudSync.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  long long v62 = Logger.logObject.getter();
  if (os_log_type_enabled(v62, v61))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v61, "[NonFollowedShows] We didn't find any local Implicit Follow which is not present in cloud and which is older than last sync date. We are done.", v63, 2u);
    swift_slowDealloc();
    uint64_t v64 = v19;
  }
  else
  {
    uint64_t v64 = v62;
    long long v62 = v19;
  }

  return ((uint64_t (*)(char *, uint64_t))v29)(v60, v8);
}

void sub_100253168(uint64_t a1, void *a2)
{
  id v195 = a2;
  uint64_t v210 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v210 - 8);
  uint64_t v5 = __chkstk_darwin(v210);
  uint64_t v7 = (char *)v179 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  v188 = (char *)v179 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v190 = (char *)v179 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v180 = (char *)v179 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v179 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v179 - v17;
  uint64_t v197 = type metadata accessor for RemoteNonFollowedShow();
  uint64_t v19 = *(void *)(v197 - 8);
  uint64_t v20 = __chkstk_darwin(v197);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v191 = (char *)v179 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  __chkstk_darwin(v23);
  unint64_t v27 = (char *)v179 - v26;
  uint64_t v200 = *(void *)(a1 + 16);
  if (!v200) {
    return;
  }
  uint64_t v189 = v25;
  int v193 = v24;
  uint64_t v28 = v2 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  uint64_t v199 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v179[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v192 = v28;
  swift_beginAccess();
  uint64_t v29 = 0;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  uint64_t v30 = v19 + 16;
  uint64_t v205 = v31;
  uint64_t v203 = (void (**)(char *, uint64_t))(v30 - 8);
  uint64_t v209 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v198 = *(void *)(v30 + 56);
  v187 = &v212;
  uint64_t v196 = (char *)_swiftEmptyArrayStorage;
  id v183 = (char *)&v211 + 4;
  *(void *)&long long v32 = 136315394;
  long long v186 = v32;
  uint64_t v185 = (char *)&type metadata for Any + 8;
  *(void *)&long long v32 = 136381955;
  long long v182 = v32;
  *(void *)&long long v32 = 136315138;
  long long v201 = v32;
  uint64_t v207 = v18;
  uint64_t v33 = v197;
  uint64_t v204 = v27;
  uint64_t v194 = v7;
  v181 = v16;
  uint64_t v206 = v30;
  while (2)
  {
    uint64_t v208 = v29;
    unint64_t v36 = v205;
    v205(v27, (char *)(v199 + v198 * v29), v33);
    uint64_t v37 = RemoteNonFollowedShow.prioritizedIDs.getter();
    os_log_t v211 = (os_log_t)v37;
    sub_100054B78(&qword_1005FCD60);
    sub_1002571DC();
    if ((Collection.isNotEmpty.getter() & 1) == 0)
    {
      uint64_t v50 = v27;
      swift_bridgeObjectRelease();
      static Logger.cloudSync.getter();
      unint64_t v51 = v193;
      v36(v193, v50, v33);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        unint64_t v54 = v203;
        uint64_t v55 = swift_slowAlloc();
        os_log_t v211 = (os_log_t)swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = v201;
        v36(v191, v51, v33);
        uint64_t v56 = String.init<A>(describing:)();
        *(void *)(v55 + 4) = sub_10004B974(v56, v57, (uint64_t *)&v211);
        swift_bridgeObjectRelease();
        uint64_t v34 = *v54;
        (*v54)(v51, v33);
        uint64_t v18 = v207;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "[NonFollowedShows] Remote Implicit Follow received without any meaningful podcast ID. There is nothing we can do with this show: %s", (uint8_t *)v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v7 = v194;
        (*v209)(v194, v210);
      }
      else
      {
        uint64_t v34 = *v203;
        (*v203)(v51, v33);

        (*v209)(v7, v210);
      }
      uint64_t v35 = v208;
      unint64_t v27 = v204;
      v34(v204, v33);
      goto LABEL_5;
    }
    uint64_t v38 = *(NSObject **)(v37 + 16);
    if (!v38)
    {
LABEL_23:
      uint64_t v58 = v190;
      static Logger.cloudSync.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      uint64_t v60 = v189;
      uint64_t v61 = v197;
      v36(v189, v204, v197);
      swift_bridgeObjectRetain();
      long long v62 = Logger.logObject.getter();
      os_log_type_t v63 = v59;
      if (os_log_type_enabled(v62, v59))
      {
        uint64_t v64 = swift_slowAlloc();
        os_log_t v202 = (os_log_t)swift_slowAlloc();
        os_log_t v211 = v202;
        *(_DWORD *)uint64_t v64 = v186;
        swift_bridgeObjectRetain();
        uint64_t v65 = Array.description.getter();
        unint64_t v67 = v66;
        swift_bridgeObjectRelease();
        *(void *)(v64 + 4) = sub_10004B974(v65, v67, (uint64_t *)&v211);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v64 + 12) = 2080;
        v205(v191, v60, v61);
        uint64_t v68 = String.init<A>(describing:)();
        *(void *)(v64 + 14) = sub_10004B974(v68, v69, (uint64_t *)&v211);
        swift_bridgeObjectRelease();
        uint64_t v70 = *v203;
        (*v203)(v60, v61);
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "[NonFollowedShows] Received Implicit Follow from sync which doesn't exist in this device, we must insert it as Implicitly Followed: IDs %s, remote show: %s", (uint8_t *)v64, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v70 = *v203;
        (*v203)(v60, v61);
      }

      uint64_t v71 = *v209;
      (*v209)(v58, v210);
      uint64_t v7 = v194;
      sub_100056D54(v192, (uint64_t)&v211);
      uint64_t v72 = v214;
      uint64_t v73 = v215;
      sub_100041A98(&v211, v214);
      unint64_t v27 = v204;
      char v74 = (void *)(*(uint64_t (**)(char *, id, uint64_t, uint64_t))(v73 + 136))(v204, v195, v72, v73);
      sub_10004D2D8((uint64_t)&v211);
      id v75 = [v74 uuid];
      if (v75)
      {
        uint64_t v76 = v75;
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v79 = v78;

        if (swift_isUniquelyReferenced_nonNull_native()) {
          NSString v80 = v196;
        }
        else {
          NSString v80 = sub_10004CEAC(0, *((void *)v196 + 2) + 1, 1, v196);
        }
        unint64_t v82 = *((void *)v80 + 2);
        unint64_t v81 = *((void *)v80 + 3);
        if (v82 >= v81 >> 1) {
          NSString v80 = sub_10004CEAC((char *)(v81 > 1), v82 + 1, 1, v80);
        }
        *((void *)v80 + 2) = v82 + 1;
        uint64_t v196 = v80;
        uint64_t v83 = &v80[16 * v82];
        *((void *)v83 + 4) = v77;
        *((void *)v83 + 5) = v79;

        goto LABEL_32;
      }
      uint64_t v84 = v188;
      static Logger.cloudSync.getter();
      id v85 = v74;
      BOOL v86 = Logger.logObject.getter();
      int v87 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v86, (os_log_type_t)v87))
      {
        LODWORD(v202) = v87;
        uint64_t v88 = swift_slowAlloc();
        uint64_t v89 = swift_slowAlloc();
        uint64_t v216 = (void *)v89;
        *(_DWORD *)uint64_t v88 = v182;
        id v90 = [v85 title];
        uint64_t v184 = v89;
        if (v90)
        {
          uint64_t v91 = v90;
          os_log_t v92 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v94 = v93;
        }
        else
        {
          os_log_t v92 = 0;
          uint64_t v94 = 0;
        }
        os_log_t v211 = v92;
        uint64_t v212 = v94;
        sub_100054B78(&qword_1005F93A0);
        uint64_t v112 = String.init<A>(describing:)();
        os_log_t v211 = (os_log_t)sub_10004B974(v112, v113, (uint64_t *)&v216);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v88 + 12) = 2080;
        id v114 = [v85 uuid];
        if (v114)
        {
          uint64_t v115 = v114;
          os_log_t v116 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v118 = v117;
        }
        else
        {
          os_log_t v116 = 0;
          uint64_t v118 = 0;
        }
        os_log_t v211 = v116;
        uint64_t v212 = v118;
        uint64_t v119 = String.init<A>(describing:)();
        os_log_t v211 = (os_log_t)sub_10004B974(v119, v120, (uint64_t *)&v216);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v88 + 22) = 2081;
        os_log_t v211 = (os_log_t)MTPodcast.adamId.getter();
        LOBYTE(v212) = v121 & 1;
        sub_100054B78(&qword_1005FCD70);
        uint64_t v122 = String.init<A>(describing:)();
        os_log_t v211 = (os_log_t)sub_10004B974(v122, v123, (uint64_t *)&v216);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v88 + 32) = 1024;
        unsigned int v124 = [v85 subscribed];

        LODWORD(v211) = v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v88 + 38) = 1024;
        unsigned int v125 = [v85 hidden];

        LODWORD(v211) = v125;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v88 + 44) = 1024;
        unsigned int v126 = [v85 isImplicitlyFollowed];

        LODWORD(v211) = v126;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v202, "[NonFollowedShows] New inserted podcast has no uuid: %{private}s, uuid: %s, adamID: %{private}s, isFollowed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.", (uint8_t *)v88, 0x32u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v209)(v188, v210);
        uint64_t v70 = *v203;
      }
      else
      {

        v71(v84, v210);
      }
      uint64_t v33 = v197;
      v70(v27, v197);
      uint64_t v18 = v207;
      goto LABEL_49;
    }
    swift_bridgeObjectRetain();
    id v39 = v195;
    os_log_type_t v40 = 0;
    uint64_t v41 = (unsigned char *)(v37 + 48);
    os_log_t v202 = v38;
    while (1)
    {
      uint64_t v44 = *((void *)v41 - 2);
      if (*v41)
      {
        unint64_t v45 = *((void *)v41 - 1);
        if (*v41 == 1)
        {
          sub_100257238(*((void *)v41 - 2), *((void *)v41 - 1), 1u);
          swift_bridgeObjectRetain();
          sub_100257238(v44, v45, 1u);
          static Logger.cloudSync.getter();
          swift_bridgeObjectRetain();
          uint64_t v46 = Logger.logObject.getter();
          os_log_type_t v47 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v46, v47))
          {
            uint64_t v48 = swift_slowAlloc();
            os_log_t v211 = (os_log_t)swift_slowAlloc();
            *(_DWORD *)uint64_t v48 = v201;
            swift_bridgeObjectRetain();
            *(void *)(v48 + 4) = sub_10004B974(v44, v45, (uint64_t *)&v211);
            sub_10021C03C(v44, v45, 1u);
            sub_10021C03C(v44, v45, 1u);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "[NonFollowedShows] A remote podcast identified by a local ID as the UUID does not make any sense at all. Offending UUID: %s", (uint8_t *)v48, 0xCu);
            swift_arrayDestroy();
            uint64_t v38 = v202;
            swift_slowDealloc();
            uint64_t v18 = v207;
            swift_slowDealloc();
          }
          else
          {

            sub_10021C03C(v44, v45, 1u);
            sub_10021C03C(v44, v45, 1u);
          }
          (*v209)(v18, v210);
          sub_10021C03C(v44, v45, 1u);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_100257238(v44, v45, 2u);
          NSString v42 = String._bridgeToObjectiveC()();
          id v43 = [v39 podcastForFeedUrl:v42];

          sub_10021C03C(v44, v45, 2u);
          swift_bridgeObjectRelease();
          if (v43) {
            break;
          }
        }
        goto LABEL_10;
      }
      id v49 = [v39 podcastForStoreId:*((void *)v41 - 2)];

      if (v49) {
        break;
      }
LABEL_10:
      os_log_type_t v40 = ((char *)v40 + 1);
      v41 += 24;
      if (v38 == v40) {
        goto LABEL_22;
      }
    }
    if (v38 == v40)
    {
LABEL_22:

      swift_bridgeObjectRelease();
      unint64_t v36 = v205;
      goto LABEL_23;
    }
    if ((unint64_t)v40 < *(void *)(v37 + 16))
    {
      uint64_t v95 = *((void *)v41 - 2);
      uint64_t v96 = *((void *)v41 - 1);
      unsigned __int8 v97 = *v41;
      os_log_t v211 = (os_log_t)v95;
      uint64_t v212 = v96;
      unsigned __int8 v213 = v97;
      sub_100257238(v95, v96, v97);
      sub_100254E9C((uint64_t *)&v211, v39, &v216);
      sub_10021C03C(v95, v96, v97);
      uint64_t v98 = v216;
      if (!v216) {
        goto LABEL_76;
      }

      id v99 = v98;
      swift_bridgeObjectRelease_n();
      uint64_t v100 = v181;
      static Logger.cloudSync.getter();
      int v101 = static os_log_type_t.default.getter();
      id v102 = v99;
      long long v103 = Logger.logObject.getter();
      BOOL v104 = os_log_type_enabled(v103, (os_log_type_t)v101);
      uint64_t v7 = v194;
      unint64_t v27 = v204;
      if (v104)
      {
        LODWORD(v202) = v101;
        uint64_t v105 = swift_slowAlloc();
        uint64_t v184 = swift_slowAlloc();
        uint64_t v216 = (void *)v184;
        *(_DWORD *)uint64_t v105 = v182;
        id v106 = [v102 title];
        if (v106)
        {
          id v107 = v106;
          os_log_t v108 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v110 = v109;
        }
        else
        {
          os_log_t v108 = 0;
          uint64_t v110 = 0;
        }
        os_log_t v211 = v108;
        uint64_t v212 = v110;
        sub_100054B78(&qword_1005F93A0);
        uint64_t v127 = String.init<A>(describing:)();
        os_log_t v211 = (os_log_t)sub_10004B974(v127, v128, (uint64_t *)&v216);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 12) = 2080;
        id v129 = [v102 uuid];
        if (v129)
        {
          id v130 = v129;
          os_log_t v131 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v133 = v132;
        }
        else
        {
          os_log_t v131 = 0;
          uint64_t v133 = 0;
        }
        os_log_t v211 = v131;
        uint64_t v212 = v133;
        uint64_t v134 = String.init<A>(describing:)();
        os_log_t v211 = (os_log_t)sub_10004B974(v134, v135, (uint64_t *)&v216);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 22) = 2081;
        os_log_t v211 = (os_log_t)MTPodcast.adamId.getter();
        LOBYTE(v212) = v136 & 1;
        sub_100054B78(&qword_1005FCD70);
        uint64_t v137 = String.init<A>(describing:)();
        os_log_t v211 = (os_log_t)sub_10004B974(v137, v138, (uint64_t *)&v216);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 32) = 1024;
        unsigned int v139 = [v102 subscribed];

        LODWORD(v211) = v139;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v105 + 38) = 1024;
        unsigned int v140 = [v102 hidden];

        LODWORD(v211) = v140;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v105 + 44) = 1024;
        unsigned int v141 = [v102 isImplicitlyFollowed];

        LODWORD(v211) = v141;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v202, "[NonFollowedShows] Upgrade to Implicitly Followed if needed from sync already existing local podcast: %{private}s, uuid: %s, adamID: %{private}s, isFollowed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.", (uint8_t *)v105, 0x32u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v111 = *v209;
        (*v209)(v181, v210);
        uint64_t v18 = v207;
      }
      else
      {

        id v111 = *v209;
        (*v209)(v100, v210);
      }
      sub_100056D54(v192, (uint64_t)&v211);
      uint64_t v142 = v214;
      uint64_t v143 = v215;
      sub_100041A98(&v211, v214);
      (*(void (**)(id, char *, uint64_t, uint64_t))(v143 + 144))(v102, v27, v142, v143);
      sub_10004D2D8((uint64_t)&v211);
      id v144 = [v102 uuid];
      if (!v144)
      {
        uint64_t v153 = v180;
        static Logger.cloudSync.getter();
        id v154 = v102;
        v155 = Logger.logObject.getter();
        os_log_type_t v156 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v155, v156))
        {
          os_log_t v202 = v155;
          uint64_t v157 = swift_slowAlloc();
          uint64_t v184 = swift_slowAlloc();
          uint64_t v216 = (void *)v184;
          *(_DWORD *)uint64_t v157 = v182;
          id v158 = [v154 title];
          if (v158)
          {
            v159 = v158;
            os_log_t v160 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v162 = v161;
          }
          else
          {
            os_log_t v160 = 0;
            uint64_t v162 = 0;
          }
          os_log_t v211 = v160;
          uint64_t v212 = v162;
          sub_100054B78(&qword_1005F93A0);
          uint64_t v163 = String.init<A>(describing:)();
          os_log_t v211 = (os_log_t)sub_10004B974(v163, v164, (uint64_t *)&v216);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v157 + 12) = 2080;
          id v165 = [v154 uuid];
          if (v165)
          {
            unint64_t v166 = v165;
            os_log_t v167 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v169 = v168;
          }
          else
          {
            os_log_t v167 = 0;
            uint64_t v169 = 0;
          }
          os_log_t v211 = v167;
          uint64_t v212 = v169;
          uint64_t v170 = String.init<A>(describing:)();
          os_log_t v211 = (os_log_t)sub_10004B974(v170, v171, (uint64_t *)&v216);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v157 + 22) = 2081;
          os_log_t v211 = (os_log_t)MTPodcast.adamId.getter();
          LOBYTE(v212) = v172 & 1;
          sub_100054B78(&qword_1005FCD70);
          uint64_t v173 = String.init<A>(describing:)();
          os_log_t v211 = (os_log_t)sub_10004B974(v173, v174, (uint64_t *)&v216);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v157 + 32) = 1024;
          unsigned int v175 = [v154 subscribed];

          LODWORD(v211) = v175;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v157 + 38) = 1024;
          unsigned int v176 = [v154 hidden];

          LODWORD(v211) = v176;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v157 + 44) = 1024;
          unsigned int v177 = [v154 isImplicitlyFollowed];

          LODWORD(v211) = v177;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          os_log_t v178 = v202;
          _os_log_impl((void *)&_mh_execute_header, v202, v156, "[NonFollowedShows] Existing local podcast has no uuid: %{private}s, uuid: %s, adamID: %{private}s, isFollowed: %{BOOL}d, isHidden: %{BOOL}d, isImplicitlyFollowed: %{BOOL}d.", (uint8_t *)v157, 0x32u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v209)(v180, v210);
          uint64_t v18 = v207;
        }
        else
        {

          v111(v153, v210);
        }
        uint64_t v33 = v197;
        (*v203)(v27, v197);
LABEL_49:
        uint64_t v35 = v208;
        goto LABEL_5;
      }
      uint64_t v145 = v144;
      uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v148 = v147;

      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v149 = v196;
      }
      else {
        uint64_t v149 = sub_10004CEAC(0, *((void *)v196 + 2) + 1, 1, v196);
      }
      unint64_t v151 = *((void *)v149 + 2);
      unint64_t v150 = *((void *)v149 + 3);
      if (v151 >= v150 >> 1) {
        uint64_t v149 = sub_10004CEAC((char *)(v150 > 1), v151 + 1, 1, v149);
      }
      *((void *)v149 + 2) = v151 + 1;
      uint64_t v196 = v149;
      uint64_t v152 = &v149[16 * v151];
      *((void *)v152 + 4) = v146;
      *((void *)v152 + 5) = v148;

      uint64_t v70 = *v203;
LABEL_32:
      uint64_t v33 = v197;
      v70(v27, v197);
      uint64_t v18 = v207;
      uint64_t v35 = v208;
LABEL_5:
      uint64_t v29 = v35 + 1;
      if (v29 == v200)
      {
        swift_bridgeObjectRelease();
        return;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_76:
  __break(1u);
}

void sub_100254A84(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  if (a1 || a2 < 10)
  {
    static Logger.cloudSync.getter();
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 134218240;
      unint64_t v30 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2048;
      unint64_t v30 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%ld non followed shows added from cloud, %ld non-followed-shows removed locally.", (uint8_t *)v26, 0x16u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  else
  {
    static Logger.cloudSync.getter();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (_DWORD *)swift_slowAlloc();
      uint64_t v29 = a3;
      uint64_t v20 = a2;
      uint64_t v21 = v19;
      *uint64_t v19 = 134218240;
      unint64_t v30 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v21 + 6) = 2048;
      unint64_t v30 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[NonFollowedShows] Big library removal detected remoteNonFollowedShowsCount = %ld, localNonFollowedShowsToDeleteCount = %ld", (uint8_t *)v21, 0x16u);
      a2 = v20;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    uint64_t v22 = *(void **)(v5 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter);
    if (a4) {
      NSString v23 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v23 = 0;
    }
    sub_100054B78(&qword_1005F6CB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10046D030;
    unint64_t v30 = 0xD00000000000001BLL;
    unint64_t v31 = 0x80000001004D8F20;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 0;
    unint64_t v30 = 0xD000000000000022;
    unint64_t v31 = 0x80000001004D8F40;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 168) = &type metadata for Int;
    *(void *)(inited + 144) = a2;
    sub_10016E860(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v22 reportNonFollowedShowsSyncIssue:1 version:v23 userInfo:isa];
  }
}

void sub_100254E9C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  int v11 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    unint64_t v12 = a1[1];
    if (v11 == 1)
    {
      swift_bridgeObjectRetain();
      static Logger.cloudSync.getter();
      swift_bridgeObjectRetain();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v19 = a3;
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v21 = v18;
        *(_DWORD *)uint64_t v15 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v20 = sub_10004B974(v10, v12, &v21);
        a3 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10021C03C(v10, v12, 1u);
        sub_10021C03C(v10, v12, 1u);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "[NonFollowedShows] A remote podcast identified by a local ID as the UUID does not make any sense at all. Offending UUID: %s", v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10021C03C(v10, v12, 1u);
        sub_10021C03C(v10, v12, 1u);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      id v16 = 0;
    }
    else
    {
      NSString v17 = String._bridgeToObjectiveC()();
      id v16 = [a2 podcastForFeedUrl:v17];
    }
  }
  else
  {
    id v16 = [a2 podcastForStoreId:*a1];
  }
  *a3 = v16;
}

uint64_t sub_100255158(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  static Logger.cloudSync.getter();
  LOBYTE(v10) = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = v10;
  if (os_log_type_enabled(v16, (os_log_type_t)v10))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v36 = v3;
    uint64_t v37 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v35 = v6;
    uint64_t v38 = a1;
    uint64_t v39 = a2;
    swift_bridgeObjectRetain();
    sub_100054B78(&qword_1005F93A0);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v34 = a1;
    uint64_t v38 = sub_10004B974(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v38 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v22 = v17;
    uint64_t v23 = v34;
    _os_log_impl((void *)&_mh_execute_header, v16, v22, "[NonFollowedShows] Bumping NonFollowedShowsSync version: %s, nonFollowedShowsLastSyncTimestamp: %f, isNonFollowedShowsSyncDirtdouble y = false.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    uint64_t v3 = v36;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v35);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v23 = a1;
  }
  uint64_t v24 = v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess();
  uint64_t v25 = *(void *)(v24 + 24);
  uint64_t v26 = *(void *)(v24 + 32);
  sub_100055EF0(v24, v25);
  unint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 72);
  swift_bridgeObjectRetain();
  v27(v23, a2, v25, v26);
  uint64_t v28 = *(void *)(v24 + 24);
  uint64_t v29 = *(void *)(v24 + 32);
  sub_100055EF0(v24, v28);
  (*(void (**)(void, uint64_t, uint64_t))(v29 + 24))(0, v28, v29);
  uint64_t v30 = *(void *)(v24 + 24);
  uint64_t v31 = *(void *)(v24 + 32);
  sub_100055EF0(v24, v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 48))(v15, 0, v30, v31);
  return swift_endAccess();
}

id sub_100255548(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for OSSignposter();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[3] = type metadata accessor for NonFollowedShowsSyncStorage();
  v16[4] = &protocol witness table for NonFollowedShowsSyncStorage;
  v16[0] = a1;
  uint64_t v10 = a3;
  static OSSignposter.cloudSync.getter();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState] = 0;
  sub_100056D54((uint64_t)v16, (uint64_t)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage]);
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter] = a2;
  swift_unknownObjectRetain();

  uint64_t v11 = (objc_class *)type metadata accessor for NonFollowedShowsSyncProcessor();
  v15.receiver = v10;
  v15.super_class = v11;
  [super init];
  sub_10004D2D8((uint64_t)v16);
  return v12;
}

uint64_t sub_1002556C8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = type metadata accessor for OSSignposter();
  uint64_t v43 = *(void *)(v15 - 8);
  uint64_t v44 = v15;
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSSignposter.cloudSync.getter();
  uint64_t v42 = v9;
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v48(v14, v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID, v8);
  swift_bridgeObjectRetain_n();
  uint64_t v41 = v17;
  uint64_t v18 = OSSignposter.logHandle.getter();
  int v39 = static os_signpost_type_t.begin.getter();
  char v19 = OS_os_log.signpostsEnabled.getter();
  unint64_t v45 = v7;
  if (v19)
  {
    v48(v12, (uint64_t)v14, v8);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = v3;
    unint64_t v21 = (uint8_t *)v20;
    v50[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    v49[1] = sub_10004B974(v40, a2, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, (os_signpost_type_t)v39, v22, "NonFollowedShowsSyncProcessor.GET", "%s", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v45;
    swift_slowDealloc();
    uint64_t v3 = v38;
    swift_slowDealloc();

    uint64_t v23 = v42;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v8);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v23 = v42;
  }
  v48(v12, (uint64_t)v14, v8);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v24 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v8);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v44);
  *(void *)(v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState) = v24;
  swift_release();
  uint64_t v25 = v3 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess();
  sub_100056D54(v25, (uint64_t)v50);
  uint64_t v26 = v51;
  uint64_t v27 = v52;
  sub_100041A98(v50, v51);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 64))(v26, v27);
  uint64_t v30 = v29;
  sub_10004D2D8((uint64_t)v50);
  static Logger.cloudSync.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  long long v32 = Logger.logObject.getter();
  if (os_log_type_enabled(v32, v31))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315138;
    v50[0] = v28;
    v50[1] = v30;
    swift_bridgeObjectRetain();
    sub_100054B78(&qword_1005F93A0);
    uint64_t v34 = String.init<A>(describing:)();
    v50[0] = sub_10004B974(v34, v35, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v31, "[NonFollowedShows] Version for Get transaction: %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v47);
  }
  return v28;
}

uint64_t sub_100255CC0(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v87 = a1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v93 = &v82[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = &v82[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v16 = &v82[-v15];
  uint64_t v17 = type metadata accessor for OSSignposter();
  uint64_t v90 = *(void *)(v17 - 8);
  uint64_t v91 = v17;
  __chkstk_darwin(v17);
  char v19 = &v82[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static OSSignposter.cloudSync.getter();
  uint64_t v92 = v4;
  uint64_t v88 = v11;
  uint64_t v94 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16);
  v94(v16, v4 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostID, v10);
  unint64_t v20 = a2;
  swift_bridgeObjectRetain_n();
  uint64_t v89 = v19;
  unint64_t v21 = OSSignposter.logHandle.getter();
  int v83 = static os_signpost_type_t.begin.getter();
  char v22 = OS_os_log.signpostsEnabled.getter();
  uint64_t v85 = v7;
  BOOL v86 = a3;
  uint64_t v84 = v8;
  if (v22)
  {
    v94(v14, (uint64_t)v16, v10);
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v97[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v96 = sub_10004B974(v87, v20, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v83, v24, "NonFollowedShowsSyncProcessor.SET", "%s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = v88;
    (*(void (**)(unsigned char *, uint64_t))(v88 + 8))(v14, v10);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v25 = v88;
  }
  v94(v14, (uint64_t)v16, v10);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v26 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v16, v10);
  (*(void (**)(unsigned char *, uint64_t))(v90 + 8))(v89, v91);
  uint64_t v27 = v92;
  *(void *)(v92 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_signpostState) = v26;
  swift_release();
  uint64_t v28 = v27 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess();
  sub_100056D54(v28, (uint64_t)v97);
  uint64_t v29 = v98;
  uint64_t v30 = v99;
  sub_100041A98(v97, v98);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 120))(v29, v30);
  sub_10004D2D8((uint64_t)v97);
  long long v32 = v93;
  if (!*(void *)(v31 + 16))
  {
    sub_100056D54(v28, (uint64_t)v97);
    uint64_t v44 = v98;
    uint64_t v45 = v99;
    sub_100041A98(v97, v98);
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 64))(v44, v45);
    if (!v47)
    {
      sub_10004D2D8((uint64_t)v97);
      goto LABEL_5;
    }
    uint64_t v48 = v46;
    unint64_t v49 = v47;
    uint64_t result = sub_10004D2D8((uint64_t)v97);
    uint64_t v51 = HIBYTE(v49) & 0xF;
    uint64_t v52 = v48 & 0xFFFFFFFFFFFFLL;
    if ((v49 & 0x2000000000000000) != 0) {
      uint64_t v53 = HIBYTE(v49) & 0xF;
    }
    else {
      uint64_t v53 = v48 & 0xFFFFFFFFFFFFLL;
    }
    if (!v53)
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if ((v49 & 0x1000000000000000) != 0)
    {
      uint64_t v55 = sub_10035C284(v48, v49, 10);
      char v57 = v81;
      goto LABEL_60;
    }
    if ((v49 & 0x2000000000000000) == 0)
    {
      if ((v48 & 0x1000000000000000) != 0) {
        unint64_t v54 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unint64_t v54 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v55 = (uint64_t)sub_10035C26C(v54, v52, 10);
      char v57 = v56 & 1;
LABEL_60:
      swift_bridgeObjectRelease();
      if ((v57 & 1) == 0 && v55 >= 11)
      {
        uint64_t v73 = *(void **)(v27 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_cloudSyncBugReporter);
        sub_100056D54(v28, (uint64_t)v97);
        uint64_t v74 = v98;
        uint64_t v75 = v99;
        sub_100041A98(v97, v98);
        (*(void (**)(uint64_t, uint64_t))(v75 + 64))(v74, v75);
        if (v76)
        {
          NSString v77 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v77 = 0;
        }
        sub_10004D2D8((uint64_t)v97);
        [v73 reportNonFollowedShowsSyncIssue:0 version:v77 userInfo:0];
      }
      goto LABEL_5;
    }
    v97[0] = v48;
    v97[1] = v49 & 0xFFFFFFFFFFFFFFLL;
    if (v48 == 43)
    {
      if (!v51) {
        goto LABEL_76;
      }
      if (v51 == 1 || (BYTE1(v48) - 48) > 9u) {
        goto LABEL_47;
      }
      uint64_t v55 = (BYTE1(v48) - 48);
      if (v51 != 2)
      {
        if ((BYTE2(v48) - 48) > 9u) {
          goto LABEL_47;
        }
        uint64_t v55 = 10 * (BYTE1(v48) - 48) + (BYTE2(v48) - 48);
        uint64_t v64 = v51 - 3;
        if (v64)
        {
          uint64_t v65 = (unsigned __int8 *)v97 + 3;
          while (1)
          {
            unsigned int v66 = *v65 - 48;
            if (v66 > 9) {
              goto LABEL_47;
            }
            uint64_t v67 = 10 * v55;
            if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63) {
              goto LABEL_47;
            }
            uint64_t v55 = v67 + v66;
            if (__OFADD__(v67, v66)) {
              goto LABEL_47;
            }
            char v57 = 0;
            ++v65;
            if (!--v64) {
              goto LABEL_60;
            }
          }
        }
      }
    }
    else
    {
      if (v48 == 45)
      {
        if (v51)
        {
          if (v51 != 1 && (BYTE1(v48) - 48) <= 9u)
          {
            if (v51 == 2)
            {
              char v57 = 0;
              uint64_t v55 = -(uint64_t)(BYTE1(v48) - 48);
              goto LABEL_60;
            }
            if ((BYTE2(v48) - 48) <= 9u)
            {
              uint64_t v55 = -10 * (BYTE1(v48) - 48) - (BYTE2(v48) - 48);
              uint64_t v72 = v51 - 3;
              if (!v72) {
                goto LABEL_59;
              }
              uint64_t v78 = (unsigned __int8 *)v97 + 3;
              while (1)
              {
                unsigned int v79 = *v78 - 48;
                if (v79 > 9) {
                  break;
                }
                uint64_t v80 = 10 * v55;
                if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63) {
                  break;
                }
                uint64_t v55 = v80 - v79;
                if (__OFSUB__(v80, v79)) {
                  break;
                }
                char v57 = 0;
                ++v78;
                if (!--v72) {
                  goto LABEL_60;
                }
              }
            }
          }
LABEL_47:
          uint64_t v55 = 0;
          char v57 = 1;
          goto LABEL_60;
        }
        __break(1u);
LABEL_76:
        __break(1u);
        return result;
      }
      if (!v51 || (v48 - 48) > 9u) {
        goto LABEL_47;
      }
      uint64_t v55 = (v48 - 48);
      if (v51 != 1)
      {
        if ((BYTE1(v48) - 48) > 9u) {
          goto LABEL_47;
        }
        uint64_t v55 = 10 * (v48 - 48) + (BYTE1(v48) - 48);
        uint64_t v68 = v51 - 2;
        if (v68)
        {
          unint64_t v69 = (unsigned __int8 *)v97 + 2;
          while (1)
          {
            unsigned int v70 = *v69 - 48;
            if (v70 > 9) {
              goto LABEL_47;
            }
            uint64_t v71 = 10 * v55;
            if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63) {
              goto LABEL_47;
            }
            uint64_t v55 = v71 + v70;
            if (__OFADD__(v71, v70)) {
              goto LABEL_47;
            }
            char v57 = 0;
            ++v69;
            if (!--v68) {
              goto LABEL_60;
            }
          }
        }
      }
    }
LABEL_59:
    char v57 = 0;
    goto LABEL_60;
  }
LABEL_5:
  static Logger.cloudSync.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  if (os_log_type_enabled(v34, v33))
  {
    uint64_t v35 = swift_slowAlloc();
    v97[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_bridgeObjectRetain();
    sub_100054B78(&qword_1005F8378);
    uint64_t v36 = Array.description.getter();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v95 = sub_10004B974(v36, v38, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v95 = sub_10004B974(v87, v20, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, v33, "[NonFollowedShows] Providing data for SET transaction. implicitlyFollowedShows: %s, key: %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v93, v85);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v32, v85);
  }
  int v39 = v86;
  sub_100056D54(v28, (uint64_t)v97);
  uint64_t v40 = v98;
  uint64_t v41 = v99;
  sub_100041A98(v97, v98);
  (*(void (**)(uint64_t, uint64_t))(v41 + 64))(v40, v41);
  if (v42)
  {
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v43 = 0;
  }
  sub_10004D2D8((uint64_t)v97);
  id v58 = v43;
  void *v39 = v43;
  id v59 = [objc_allocWithZone((Class)MZKeyValueStoreNode) init];
  sub_1001B7FC0(v31);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v59 setArrayValue:isa];

  id v61 = [v59 value];
  if (v61)
  {
    long long v62 = v61;
    uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {

    return 0;
  }
  return v63;
}

uint64_t sub_100256800(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a1;
  unint64_t v30 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  if (os_log_type_enabled(v18, v17))
  {
    uint64_t v25 = a7;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v27 = v9;
    unint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v26 = a8;
    uint64_t v34 = v21;
    *(_DWORD *)unint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_10004B974(v28, a4, &v34);
    a7 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "[NonFollowedShows] Updating local cache after GET transaction for key %s", v20, 0xCu);
    swift_arrayDestroy();
    a8 = v26;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v23 = v31;
  uint64_t v22 = v32;
  sub_100251178(v29, v30, v31, v32);
  return sub_100251BDC(v23, v22, a7, a8);
}

uint64_t sub_100256A58(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v24 = a1;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  if (os_log_type_enabled(v16, v15))
  {
    uint64_t v21 = a5;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v22 = a6;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v23 = v7;
    uint64_t v28 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_10004B974(v24, a2, &v28);
    a5 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v15, "[NonFollowedShows] Successful SET transaction for key %s, marking everything as synced and finishing normally.", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v22;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return sub_100251BDC(v25, v26, a5, a6);
}

uint64_t sub_100256C94(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  unint64_t v34 = a2;
  uint64_t v35 = a5;
  uint64_t v31 = a3;
  uint64_t v33 = a1;
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  if (os_log_type_enabled(v18, v17))
  {
    uint64_t v29 = a8;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v30 = a6;
    unint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v28 = a7;
    v37[0] = v21;
    *(_DWORD *)unint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_10004B974(v31, a4, v37);
    a8 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "[NonFollowedShows] Failure on SET transaction for key %s, Bookkeeper copy has diverged from local copy, we must merge both.", v20, 0xCu);
    swift_arrayDestroy();
    a7 = v28;
    swift_slowDealloc();
    a6 = v30;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v32);
  uint64_t v22 = v35;
  sub_100251178(v33, v34, v35, a6);
  sub_100252318(a7, a8);
  uint64_t v23 = v9 + OBJC_IVAR____TtC8Podcasts29NonFollowedShowsSyncProcessor_nonFollowedShowsSyncStorage;
  swift_beginAccess();
  uint64_t v24 = *(void *)(v23 + 24);
  uint64_t v25 = *(void *)(v23 + 32);
  sub_100055EF0(v23, v24);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 72);
  swift_bridgeObjectRetain();
  v26(v22, a6, v24, v25);
  return swift_endAccess();
}

uint64_t sub_100256F50()
{
  return type metadata accessor for NonFollowedShowsSyncProcessor();
}

uint64_t sub_100256F58()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100257004()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_10025703C(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FCD58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10025709C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002570D4()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100257124()
{
  return sub_100252A1C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100257134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FCD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10025719C()
{
  unint64_t result = qword_1005F71F0;
  if (!qword_1005F71F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005F71F0);
  }
  return result;
}

unint64_t sub_1002571DC()
{
  unint64_t result = qword_1005FCD68;
  if (!qword_1005FCD68)
  {
    sub_100044244(&qword_1005FCD60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FCD68);
  }
  return result;
}

uint64_t sub_100257238(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10025730C()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

id sub_100257344(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = self;
  id v6 = [v5 mainBundle];
  v7._uint64_t countAndFlagsBits = 0xD000000000000018;
  v39._object = (void *)0x80000001004D9020;
  v7._object = (void *)0x80000001004D7D60;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v39._uint64_t countAndFlagsBits = 0xD000000000000014;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v39);

  sub_100054B78(&qword_1005F7720);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10046D010;
  id v10 = [a1 title];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v14 = 0;
  }
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10004DA4C();
  if (v14) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14) {
    unint64_t v16 = v14;
  }
  else {
    unint64_t v16 = 0xE000000000000000;
  }
  *(void *)(v9 + 32) = v15;
  *(void *)(v9 + 40) = v16;
  String.init(format:_:)();
  swift_bridgeObjectRelease();
  id v17 = [v5 mainBundle];
  v40._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0x6C65636E6143;
  v18._object = (void *)0xE600000000000000;
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v40._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v40);

  id v20 = [v5 mainBundle];
  v41._object = (void *)0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0x53206574656C6544;
  v21._object = (void *)0xEE006E6F69746174;
  v22._uint64_t countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v41._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v41);

  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [self alertControllerWithTitle:v23 message:0 preferredStyle:1];

  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v26 = self;
  id v27 = [v26 actionWithTitle:v25 style:1 handler:0];

  [v24 addAction:v27];
  uint64_t v28 = (void *)swift_allocObject();
  void v28[2] = a2;
  void v28[3] = a1;
  v28[4] = a3;
  v28[5] = a4;
  id v29 = a2;
  id v30 = a1;
  swift_retain();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_10025777C;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001F2B1C;
  void aBlock[3] = &unk_10055C070;
  uint64_t v32 = _Block_copy(aBlock);
  swift_release();
  id v33 = [v26 actionWithTitle:v31 style:2 handler:v32];
  _Block_release(v32);

  [v24 addAction:v33];
  return v24;
}

uint64_t sub_100257734()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10025777C()
{
  return (*(uint64_t (**)(id))(v0 + 32))([*(id *)(v0 + 16) deletePlaylist:*(void *)(v0 + 24)]);
}

uint64_t sub_1002577B4(uint64_t a1, uint64_t a2)
{
  sub_100054B78((uint64_t *)&unk_1005F83F0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10046D010;
  *(void *)(v4 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  *(void *)(v4 + 40) = v5;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v9, a1, a2);
  if (v10)
  {
    sub_100042FC4(&v9, (uint64_t)v11);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    sub_100041A98(v11, v12);
    *(void *)&long long v9 = sub_1002577B4(v6, v7);
    sub_1001B0FD0(v4);
    uint64_t v4 = v9;
    sub_10004D2D8((uint64_t)v11);
  }
  else
  {
    sub_1002578B4((uint64_t)&v9);
  }
  return v4;
}

uint64_t sub_1002578B4(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FCD78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100257914(char a1)
{
  uint64_t v2 = v1;
  sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v2;
  id v7 = objc_allocWithZone((Class)CLSContext);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithType:v6 identifier:v8 title:v9];

  [v10 setAssignable:*((unsigned __int8 *)v2 + 40)];
  [v10 setDisplayOrder:v2[6]];
  uint64_t v11 = type metadata accessor for CLSContextMetadata();
  sub_10003B19C((uint64_t)v2 + *(int *)(v11 + 36), (uint64_t)v5);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    uint64_t v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v12);
  }
  [v10 setUniversalLinkURL:v15];

  if (a1)
  {
    id v17 = (void *)(*(uint64_t (**)(void))((char *)v2 + *(int *)(v11 + 40)))();
    [v10 setThumbnail:v17];
  }
  return v10;
}

uint64_t type metadata accessor for CLSContextMetadata()
{
  uint64_t result = qword_1005FCDD8;
  if (!qword_1005FCDD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_100257B8C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    uint64_t v9 = a3[9];
    __dst = (void *)(a1 + v9);
    id v10 = (char *)a2 + v9;
    *(void *)(a1 + 32) = v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100054B78((uint64_t *)&unk_1005F7750);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v16 = a3[10];
    uint64_t v17 = a3[11];
    Swift::String v18 = (void *)((char *)v4 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    *(void *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
    *(void *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100257D7C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100257E64(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = a3[9];
  __dst = (void *)(a1 + v8);
  uint64_t v9 = (const void *)(a2 + v8);
  *(void *)(a1 + 32) = v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100054B78((uint64_t *)&unk_1005F7750);
    memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v14);
  uint64_t v17 = (void *)(a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100258004(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = a3[9];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100054B78((uint64_t *)&unk_1005F7750);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[10];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100258228(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = a3[9];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100054B78((uint64_t *)&unk_1005F7750);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10025838C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = a3[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100054B78((uint64_t *)&unk_1005F7750);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  swift_release();
  uint64_t v16 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100258578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10025858C);
}

uint64_t sub_10025858C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100054B78((uint64_t *)&unk_1005F7750);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100258640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100258654);
}

uint64_t sub_100258654(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100054B78((uint64_t *)&unk_1005F7750);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100258700()
{
  sub_10000927C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

char *sub_1002587CC(void *a1, void *a2, char *a3)
{
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v41 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v46 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v42;
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  v37[1] = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&a3[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_expectedEpisodeStates] = &_swiftEmptyDictionarySingleton;
  *(void *)&a3[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_previouslyPlayingEpisodes] = 0;
  uint64_t v9 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController;
  id v10 = objc_allocWithZone((Class)MPRequestResponseController);
  uint64_t v11 = a3;
  *(void *)&a3[v9] = [v10 init];
  *(void *)&v11[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer] = 0;
  uint64_t v12 = &v11[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisode];
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_DWORD *)(v12 + 63) = 0;
  uint64_t v40 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playingEpisodeRefreshSerialQueue;
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v37[3] = sub_100022EEC((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  _OWORD v37[2] = sub_100054B78((uint64_t *)&unk_1005F7A60);
  uint64_t v39 = sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v13 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  int v14 = *(void (**)(void, uint64_t, uint64_t))(v46 + 104);
  v46 += 104;
  unint64_t v38 = v14;
  v37[0] = v5;
  uint64_t v15 = v41;
  v14(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v41);
  *(void *)&v11[v40] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = &v11[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_refreshControllerStates];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  uint64_t v40 = OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_accessQueue;
  sub_100054B78(&qword_1005FCE48);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_10046D010;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v48 = (void *)v17;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  static DispatchQoS.unspecified.getter();
  v38(v37[0], v13, v15);
  *(void *)&v11[v40] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v18 = v44;
  uint64_t v19 = v45;
  *(void *)&v11[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerController] = v44;
  *(void *)&v11[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_episodeLookupUtil] = v19;
  id v20 = v18;
  id v21 = v19;

  Swift::String v22 = (objc_class *)type metadata accessor for PlayingEpisodePlayStateDataSource();
  v47.receiver = v11;
  v47.super_class = v22;
  id v23 = [super init];
  id v24 = objc_allocWithZone((Class)MPCPlayerRequest);
  id v25 = v23;
  id v26 = [v24 init];
  NSString v27 = String._bridgeToObjectiveC()();
  [v26 setLabel:v27];

  sub_10004D29C(0, (unint64_t *)&unk_1005FCE50);
  uint64_t v28 = (void *)static MPModelPodcastEpisode.propertiesRequiredForPopulatingPlayerItem()();
  [v26 setPlayingItemProperties:v28];

  id v29 = (void *)static MPModelPodcastEpisode.propertiesRequiredForPopulatingPlayerItem()();
  [v26 setQueueItemProperties:v29];

  id v30 = [self defaultCenter];
  NSString v31 = (char *)v25;
  PlayerNotification_PlayerPathDidChange.getter();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v30 addObserver:v31 selector:"playerPathDidChange" name:v32 object:0];

  id v33 = *(void **)&v31[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_playerRequestController];
  [v33 setDelegate:v31];
  [v33 setRequest:v26];
  uint64_t v34 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  uint64_t v35 = sub_10024EB20((uint64_t)sub_100258E9C, v34);
  swift_release_n();

  *(void *)&v31[OBJC_IVAR____TtC8Podcasts33PlayingEpisodePlayStateDataSource_timer] = v35;
  swift_release();
  return v31;
}

uint64_t sub_100258E64()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100258E9C()
{
  return sub_10024AC58(v0);
}

uint64_t property wrapper backing initializer of FeedIngesterProvider.downloadManager()
{
  return Synchronized.init(wrappedValue:)();
}

uint64_t FeedIngesterProvider.downloadManager.getter()
{
  swift_beginAccess();
  swift_retain();
  sub_100054B78((uint64_t *)&unk_1005FCE60);
  Synchronized.wrappedValue.getter();
  swift_release();
  return v1;
}

uint64_t FeedIngesterProvider.downloadManager.setter()
{
  return swift_unknownObjectRelease();
}

void (*FeedIngesterProvider.downloadManager.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  sub_100054B78((uint64_t *)&unk_1005FCE60);
  Synchronized.wrappedValue.getter();
  return sub_100259048;
}

void sub_100259048(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)(*(void *)a1 + 32) = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    swift_unknownObjectRetain();
    sub_100054B78((uint64_t *)&unk_100602280);
    Synchronized.wrappedValue.setter();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_100054B78((uint64_t *)&unk_100602280);
    Synchronized.wrappedValue.setter();
  }
  swift_endAccess();

  free(v2);
}

id FeedIngesterProvider.createNewIngester(with:from:updaterJobUUID:)(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)v2[2];
  uint64_t v4 = v2[3];
  uint64_t v20 = v2[9];
  uint64_t v5 = (void *)v2[5];
  uint64_t v16 = v2[8];
  uint64_t v17 = v2[4];
  swift_beginAccess();
  swift_unknownObjectRetain();
  id v19 = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v6 = v5;
  swift_retain();
  swift_unknownObjectRetain();
  sub_100054B78((uint64_t *)&unk_1005FCE60);
  Synchronized.wrappedValue.getter();
  swift_release();
  id v15 = [objc_allocWithZone((Class)type metadata accessor for EpisodeLevelCalculator()) init];
  uint64_t v7 = v2[6];
  type metadata accessor for NotificationSettings();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  char v8 = static NotificationSettings.canSendNotification()();
  id v9 = objc_allocWithZone((Class)MTFeedIngester);
  id v10 = a1;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v14) = v8 & 1;
  id v12 = [v9 initWithPodcast:v10 ctx:v19 storeInfoUpdater:v4 imageDownloader:v16 imageStore:v20 syncController:v17 library:v6 downloadManager:v22 episodeLevelCalculator:v15 categoryIngester:v7 feedUpdateSource:a2 updaterJobUUID:v11 canSendNotifications:v14];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v12;
}

uint64_t FeedIngesterProvider.deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t FeedIngesterProvider.__deallocating_deinit()
{
  FeedIngesterProvider.deinit();

  return swift_deallocClassInstance();
}

id sub_10025936C(void *a1, uint64_t a2)
{
  return FeedIngesterProvider.createNewIngester(with:from:updaterJobUUID:)(a1, a2);
}

uint64_t sub_100259390()
{
  uint64_t v1 = type metadata accessor for EpisodeOffer();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v16 = (char *)&v44 - v15;
  uint64_t v17 = *(void *)(v0 + 16);
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = *(void *)(v17 + 24);
    int v20 = *(unsigned __int8 *)(v17 + 32);
    if (v20 == 1)
    {
      uint64_t v31 = *(void *)(v18 + 16);
      if (v31)
      {
        uint64_t v53 = v14;
        id v52 = self;
        unint64_t v32 = v18 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
        uint64_t v45 = v19;
        sub_1001DCD9C(v18, v19, 1u);
        uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
        uint64_t v33 = v2 + 16;
        uint64_t v50 = *(void (***)(char *, char *, uint64_t))(v33 + 56);
        uint64_t v51 = v34;
        uint64_t v48 = (void (**)(char *, uint64_t))(v33 - 8);
        unint64_t v49 = (void (**)(char *, uint64_t))(v9 + 8);
        uint64_t v46 = v18;
        swift_bridgeObjectRetain();
        objc_super v47 = (char *)&type metadata for Any + 8;
        do
        {
          v51(v4, v32, v1);
          uint64_t v35 = v33;
          id v36 = [v52 sharedApplication];
          EpisodeOffer.streamUrl.getter();
          URL._bridgeToObjectiveC()(v37);
          uint64_t v39 = v38;
          (*v49)(v12, v53);
          sub_10016E9B0((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for OpenExternalURLOptionsKey(0);
          uint64_t v40 = v1;
          sub_10025A034(&qword_1005F66F0, type metadata accessor for OpenExternalURLOptionsKey);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v36 openURL:v39 options:isa completionHandler:0];

          uint64_t v33 = v35;
          uint64_t v1 = v40;
          (*v48)(v4, v40);
          v32 += (unint64_t)v50;
          --v31;
        }
        while (v31);
        uint64_t v43 = v45;
        uint64_t v42 = v46;
        sub_1001DCDF8(v46, v45, 1u);
        return sub_1001DCDF8(v42, v43, 1u);
      }
    }
    else if (!v20)
    {
      uint64_t v21 = *(void *)(v18 + 16);
      if (v21)
      {
        uint64_t v53 = v14;
        id v52 = (id)type metadata accessor for CoreDataFetcher();
        uint64_t v45 = v19;
        sub_1001DCD9C(v18, v19, 0);
        uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
        unint64_t v49 = (void (**)(char *, uint64_t))(v9 + 8);
        uint64_t v50 = (void (**)(char *, char *, uint64_t))(v9 + 32);
        uint64_t v23 = swift_bridgeObjectRetain();
        uint64_t v46 = v18;
        uint64_t v24 = v18 + 40;
        uint64_t v51 = (void (*)(char *, unint64_t, uint64_t))((char *)&type metadata for () + 8);
        uint64_t v48 = (void (**)(char *, uint64_t))((char *)&type metadata for Any + 8);
        uint64_t v25 = v53;
        do
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          __chkstk_darwin(v23);
          *(&v44 - 2) = (uint64_t)&v54;
          swift_bridgeObjectRetain();
          static CoreDataFetcher.performAndWaitOnEpisode<A>(with:block:)();
          swift_bridgeObjectRelease();
          if (v55)
          {
            swift_bridgeObjectRetain();
            URL.init(string:)();
            swift_bridgeObjectRelease();
            if ((*v22)(v7, 1, v25) == 1)
            {
              sub_100222D54((uint64_t)v7);
            }
            else
            {
              (*v50)(v16, v7, v25);
              id v26 = [self sharedApplication];
              URL._bridgeToObjectiveC()(v27);
              id v29 = v28;
              sub_10016E9B0((uint64_t)_swiftEmptyArrayStorage);
              type metadata accessor for OpenExternalURLOptionsKey(0);
              sub_10025A034(&qword_1005F66F0, type metadata accessor for OpenExternalURLOptionsKey);
              Class v30 = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v26 openURL:v29 options:v30 completionHandler:0];

              (*v49)(v16, v25);
            }
          }
          v24 += 16;
          uint64_t v23 = swift_bridgeObjectRelease();
          --v21;
        }
        while (v21);
        sub_1001DCDF8(v46, v45, 0);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_10025999C(void *a1, uint64_t *a2)
{
  if (a1 && (id v3 = [a1 enclosureURL]) != 0)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;

  return swift_bridgeObjectRelease();
}

uint64_t sub_100259A18()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts24OpenEpisodeContextAction_metricsLabel;
  uint64_t v2 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100259AC8()
{
  return type metadata accessor for OpenEpisodeContextAction();
}

uint64_t type metadata accessor for OpenEpisodeContextAction()
{
  uint64_t result = qword_1005FCF90;
  if (!qword_1005FCF90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100259B1C()
{
  uint64_t result = type metadata accessor for MetricsLabel();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100259BB8()
{
  id v0 = [self mainBundle];
  v5._object = (void *)0xE400000000000000;
  v1._object = (void *)0x80000001004D91A0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000013;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 1852141647;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100259C5C()
{
  return 6516580;
}

uint64_t sub_100259C6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts24OpenEpisodeContextAction_metricsLabel;
  uint64_t v4 = type metadata accessor for MetricsLabel();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100259CE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ContextActionType.openEpisode(_:);
  uint64_t v3 = type metadata accessor for ContextActionType();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t sub_100259DB8()
{
  if (!*(void *)(v0 + 16)) {
    return 0;
  }
  swift_retain();
  char v1 = sub_100400E80();
  swift_release();
  return v1 & 1;
}

uint64_t sub_100259E04(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100267180(a1, a2, WitnessTable);
}

void *sub_100259E64(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266A1C(a1, a2, WitnessTable);
}

uint64_t sub_100259EC4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266B78(a1, a2, WitnessTable);
}

id sub_100259F24(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266E10(a1, a2, WitnessTable);
}

uint64_t sub_100259F84(uint64_t a1)
{
  uint64_t result = sub_10025A034((unint64_t *)&unk_100608BA0, (void (*)(uint64_t))type metadata accessor for OpenEpisodeContextAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100259FDC(uint64_t a1)
{
  uint64_t result = sub_10025A034((unint64_t *)&unk_1005FD090, (void (*)(uint64_t))type metadata accessor for OpenEpisodeContextAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10025A034(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10025A07C(void *a1)
{
  return sub_10025999C(a1, *(uint64_t **)(v1 + 16));
}

uint64_t (*sub_10025A084())()
{
  uint64_t v1 = v0[22];
  if (v1)
  {
    uint64_t v2 = (uint64_t (*)())v0[22];
  }
  else
  {
    uint64_t v3 = v0[21];
    uint64_t v2 = sub_1001C0E14;
    v0[22] = sub_1001C0E14;
    v0[23] = v3;
    swift_retain_n();
    sub_1000536BC(0);
  }
  sub_10004ACDC(v1);
  return v2;
}

uint64_t sub_10025A10C(uint64_t a1, char a2, uint64_t a3)
{
  sub_100054B78((uint64_t *)&unk_1005F8AE0);
  swift_allocObject();
  uint64_t v6 = PassthroughSubject.init()();
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 168) = v6;
  *(unsigned char *)(v3 + 16) = a2;
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v3 + 40) = v7;
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a3 + 32);
  *(void *)(v3 + 72) = *(void *)(a3 + 48);
  type metadata accessor for ShowListProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(v3 + 80) = ShowListProvider.init(asPartOf:kind:pageSize:)();
  sub_100054B78((uint64_t *)&unk_1005F8B10);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v9, v3 + 88);
  sub_100054B78((uint64_t *)&unk_1005FBBF0);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v9, v3 + 128);
  swift_retain();
  ShowListProvider.start()();
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_10025A23C()
{
  swift_release();
  sub_10004D2D8(v0 + 88);
  sub_10004D2D8(v0 + 128);
  swift_release();
  sub_1000536BC(*(void *)(v0 + 176));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CarPlayShowsProvider()
{
  return self;
}

uint64_t sub_10025A2B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78(&qword_1005F9F20);
  __chkstk_darwin(v2 - 8);
  uint64_t v33 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78(&qword_1005FD178);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100054B78(&qword_1005FD180);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  uint64_t v27 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100054B78(&qword_1005FD188);
  uint64_t v31 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100054B78((uint64_t *)&unk_1005FD190);
  uint64_t v32 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v28 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v34 = (id)ShowListProvider.pageContent.getter();
  sub_100054B78(&qword_1005F5BC0);
  sub_100054B78((uint64_t *)&unk_1005FD1A0);
  sub_100044200((unint64_t *)&unk_1005F8B50, &qword_1005F5BC0);
  Publisher.compactMap<A>(_:)();
  swift_release();
  char v15 = *(unsigned char *)(v0 + 16);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v1;
  *(unsigned char *)(v16 + 24) = v15;
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_100054B78(&qword_1005FD1B0);
  sub_100044200(&qword_1005FD1B8, &qword_1005FD178);
  sub_100044200((unint64_t *)&unk_1005FD1C0, &qword_1005FD1B0);
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100054B78((uint64_t *)&unk_1005F8BD0);
  sub_100044200((unint64_t *)&unk_1005FD1D0, &qword_1005FD180);
  uint64_t v17 = v26;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v17);
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  id v34 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v19 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v33, 1, 1, v18);
  sub_100044200((unint64_t *)&unk_1005FD1E0, &qword_1005FD188);
  sub_1001A5458((unint64_t *)&qword_1005F8B80, (unint64_t *)&qword_1005F8B70);
  uint64_t v21 = v28;
  uint64_t v20 = v29;
  Publisher.receive<A>(on:options:)();
  sub_100054B1C(v19, &qword_1005F9F20);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v20);
  sub_100044200(&qword_1005FD1F0, (uint64_t *)&unk_1005FD190);
  uint64_t v22 = v30;
  uint64_t v23 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v22);
  return v23;
}

uint64_t sub_10025A8C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005FD290);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for ModernShelf();
  uint64_t v7 = *(void *)(v45 - 8);
  uint64_t v8 = __chkstk_darwin(v45);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v38 - v11;
  uint64_t v13 = type metadata accessor for PageContent();
  __chkstk_darwin(v13);
  char v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ModernPage();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001C6A68(a1, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v42 = v12;
    sub_10022B63C((uint64_t)v15, (uint64_t)v18);
    uint64_t v19 = *(void *)&v18[*(int *)(v16 + 24)];
    uint64_t v20 = *(void *)(v19 + 16);
    uint64_t v43 = v18;
    if (v20)
    {
      uint64_t v39 = v6;
      uint64_t v41 = a2;
      uint64_t v44 = type metadata accessor for ShowListProvider();
      uint64_t v40 = v7;
      uint64_t v22 = v7 + 16;
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      uint64_t v23 = v19 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      uint64_t v24 = *(void *)(v22 + 56);
      v38[1] = v19;
      swift_bridgeObjectRetain_n();
      uint64_t v25 = v45;
      while (1)
      {
        v21(v10, v23, v25);
        uint64_t v26 = ModernShelf.id.getter();
        uint64_t v28 = v27;
        if (v26 == static ShowListProvider.showsShelfID.getter() && v28 == v29) {
          break;
        }
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30) {
          goto LABEL_12;
        }
        uint64_t v25 = v45;
        (*(void (**)(char *, uint64_t))(v22 - 8))(v10, v45);
        v23 += v24;
        if (!--v20)
        {
          swift_bridgeObjectRelease();
          uint64_t v31 = 1;
          uint64_t v7 = v40;
          a2 = v41;
          uint64_t v32 = v42;
          uint64_t v18 = v43;
          uint64_t v6 = v39;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_12:
      uint64_t v7 = v40;
      a2 = v41;
      uint64_t v32 = v42;
      uint64_t v18 = v43;
      uint64_t v6 = v39;
      swift_bridgeObjectRelease();
      uint64_t v25 = v45;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v6, v10, v45);
      uint64_t v31 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = 1;
      uint64_t v25 = v45;
      uint64_t v32 = v42;
    }
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, v31, 1, v25);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v25) == 1)
    {
      sub_1001C6B34((uint64_t)v18, (uint64_t (*)(void))&type metadata accessor for ModernPage);
      uint64_t result = sub_100054B1C((uint64_t)v6, (uint64_t *)&unk_1005FD290);
      id v34 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v32, v6, v25);
      uint64_t v35 = ModernShelf.items.getter();
      id v34 = _swiftEmptyArrayStorage;
      unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v36 = *(void *)(v35 + 16);
      if (v36)
      {
        uint64_t v37 = v35 + 32;
        do
        {
          sub_100056D54(v37, (uint64_t)v48);
          sub_100056D54((uint64_t)v48, (uint64_t)v46);
          sub_100054B78(&qword_1005F8430);
          type metadata accessor for LibraryShowLockup();
          if ((swift_dynamicCast() & 1) == 0) {
            uint64_t v47 = 0;
          }
          sub_10004D2D8((uint64_t)v48);
          if (v47)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          v37 += 40;
          --v36;
        }
        while (v36);
        id v34 = (void *)v49;
        uint64_t v25 = v45;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v25);
      uint64_t result = sub_1001C6B34((uint64_t)v43, (uint64_t (*)(void))&type metadata accessor for ModernPage);
    }
  }
  else
  {
    uint64_t result = sub_1001C6B34((uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for PageContent);
    id v34 = 0;
  }
  *a2 = v34;
  return result;
}

uint64_t sub_10025AE34@<X0>(uint64_t *a1@<X0>, char a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v5 = sub_100054B78(&qword_1005FD1F8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100054B78(&qword_1005FD200);
  uint64_t v33 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100054B78(&qword_1005FD208);
  uint64_t v34 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100054B78(&qword_1005FD210);
  uint64_t v37 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100054B78(&qword_1005FD218);
  uint64_t v38 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  char v30 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  uint64_t v40 = v16;
  swift_bridgeObjectRetain();
  sub_100054B78((uint64_t *)&unk_1005FD1A0);
  sub_100044200((unint64_t *)&unk_1005FD220, (uint64_t *)&unk_1005FD1A0);
  Publishers.Sequence.init(sequence:)();
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(unsigned char *)(v18 + 24) = a2;
  static Subscribers.Demand.unlimited.getter();
  sub_100054B78(&qword_1005F8CA0);
  sub_100044200((unint64_t *)&unk_1005FD230, &qword_1005FD1F8);
  sub_100044200((unint64_t *)&unk_1005F8CB0, &qword_1005F8CA0);
  uint64_t v19 = v28;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v19);
  sub_10004D29C(0, (unint64_t *)&qword_1005FD240);
  sub_100044200(&qword_1005FD248, &qword_1005FD200);
  uint64_t v20 = v31;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v20);
  sub_100044200((unint64_t *)&unk_1005FD250, &qword_1005FD208);
  uint64_t v21 = v32;
  Publisher.collect()();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v21);
  *(void *)(swift_allocObject() + 16) = v16;
  swift_bridgeObjectRetain();
  sub_100054B78((uint64_t *)&unk_1005F7E10);
  sub_100044200(&qword_1005FD260, &qword_1005FD210);
  uint64_t v22 = v30;
  uint64_t v23 = v35;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v23);
  sub_100044200(&qword_1005FD268, &qword_1005FD218);
  uint64_t v24 = v36;
  uint64_t v25 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v22, v24);
  uint64_t *v39 = v25;
  return result;
}

uint64_t sub_10025B478@<X0>(char a1@<W2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100054B78(&qword_1005FD278);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    int v10 = sub_10025B680(a1);
    memset(v18, 0, sizeof(v18));
    char v19 = -1;
    long long v11 = *(_OWORD *)(v9 + 40);
    v20[0] = *(_OWORD *)(v9 + 24);
    v20[1] = v11;
    long long v12 = *(_OWORD *)(v9 + 56);
    uint64_t v21 = *(void *)(v9 + 72);
    void v20[2] = v12;
    uint64_t v13 = sub_10025A084();
    uint64_t v15 = sub_1003820B8(v9 + 88, (uint64_t)v18, v10, (uint64_t)v20, v9 + 128, (uint64_t)v13, v14);
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    sub_100054B78(&qword_1005FD280);
    Empty.init(completeImmediately:)();
    sub_100044200(&qword_1005FD288, &qword_1005FD278);
    uint64_t v15 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *a2 = v15;
  return result;
}

uint64_t sub_10025B680(char a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 8) {
    return 3;
  }
  if (a1 == 9)
  {
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    static OS_os_log.carPlay.getter();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Recently Unfollowed should not appear in CarPlay.", v8, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  else
  {
    uint64_t v10 = ShowsSortType.rawValue.getter();
    uint64_t v12 = v11;
    if (v10 == ShowsSortType.rawValue.getter() && v12 == v13)
    {
      uint64_t v9 = 2;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        return 2;
      }
      else {
        return 0;
      }
    }
  }
  return v9;
}

uint64_t sub_10025B878@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (!(a2 >> 62))
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    if (v5 < 0) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_24;
  }
LABEL_3:
  if (v6 >= 1)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
      do
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v10 = LegacyLockup.title.getter();
        uint64_t v12 = v11;
        swift_unknownObjectRelease();
        if (v12)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_10004CEAC(0, *((void *)v8 + 2) + 1, 1, v8);
          }
          unint64_t v14 = *((void *)v8 + 2);
          unint64_t v13 = *((void *)v8 + 3);
          if (v14 >= v13 >> 1) {
            uint64_t v8 = sub_10004CEAC((char *)(v13 > 1), v14 + 1, 1, v8);
          }
          *((void *)v8 + 2) = v14 + 1;
          uint64_t v9 = &v8[16 * v14];
          *((void *)v9 + 4) = v10;
          *((void *)v9 + 5) = v12;
        }
        ++v7;
      }
      while (v6 != v7);
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
      do
      {
        swift_retain();
        uint64_t v17 = LegacyLockup.title.getter();
        uint64_t v19 = v18;
        swift_release();
        if (v19)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_10004CEAC(0, *((void *)v8 + 2) + 1, 1, v8);
          }
          unint64_t v21 = *((void *)v8 + 2);
          unint64_t v20 = *((void *)v8 + 3);
          if (v21 >= v20 >> 1) {
            uint64_t v8 = sub_10004CEAC((char *)(v20 > 1), v21 + 1, 1, v8);
          }
          *((void *)v8 + 2) = v21 + 1;
          uint64_t v16 = &v8[16 * v21];
          *((void *)v16 + 4) = v17;
          *((void *)v16 + 5) = v19;
        }
        ++v15;
      }
      while (v6 != v15);
    }
    swift_bridgeObjectRelease();
    if (v5 < 0) {
      goto LABEL_28;
    }
LABEL_25:
    if ((v5 & 0x4000000000000000) == 0)
    {
      uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_27:
      uint64_t v25 = v22;
      sub_10025F1BC(&v25, v8);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v25;
      return result;
    }
LABEL_28:
    swift_bridgeObjectRetain();
    unint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v22 = (uint64_t)sub_10025BFD4(v24, (void (*)(void *, uint64_t, unint64_t))sub_1001B2958);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10025BB2C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *a1;
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.carPlay.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  unint64_t v11 = v8 >> 62;
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134217984;
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "CarPlayShowsProvider: section total items count is %ld.", v12, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10046D060;
  swift_bridgeObjectRetain();
  if (v11)
  {
    sub_100054B78(&qword_1005F7E20);
    uint64_t v19 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    unint64_t v8 = v19;
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  }
  id v15 = objc_allocWithZone((Class)CPListSection);
  sub_1001C04A0(v8);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v15 initWithItems:isa];

  *(void *)(v14 + 32) = v17;
  uint64_t v21 = v14;
  uint64_t result = specialized Array._endMutation()();
  *a2 = v21;
  return result;
}

uint64_t sub_10025BE20()
{
  return sub_10025A2B8();
}

uint64_t sub_10025BE44()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t sub_10025BEC4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10025BEFC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10025AE34(a1, *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_10025BF08()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10025BF40@<X0>(uint64_t *a1@<X8>)
{
  return sub_10025B478(*(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_10025BF4C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10025BF84@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10025B878(a1, *(void *)(v2 + 16), a2);
}

void *sub_10025BF8C(unint64_t a1)
{
  return sub_10025BFD4(a1, (void (*)(void *, uint64_t, unint64_t))sub_1001B26F8);
}

void *sub_10025BFA4(unint64_t a1)
{
  return sub_10025BFD4(a1, (void (*)(void *, uint64_t, unint64_t))sub_1001B2958);
}

void *sub_10025BFBC(unint64_t a1)
{
  return sub_10025BFD4(a1, (void (*)(void *, uint64_t, unint64_t))sub_1001B2B78);
}

void *sub_10025BFD4(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100054B78((uint64_t *)&unk_1005FA7F0);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = j__malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      void v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

void *sub_10025C0DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_100054B78((uint64_t *)&unk_1005F83F0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      long long v9[2] = v5;
      uint64_t v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10025C250(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        sub_10004D29C(0, (unint64_t *)&qword_1005FD2C0);
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_100054B78((uint64_t *)&unk_1005FA7F0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      long long v9[2] = v5;
      uint64_t v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10025C3E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100054B78(&qword_1005F8328);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_10025CC60((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10004E644();
  if (v5 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_10025C4DC(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100054B78((uint64_t *)&unk_1005FA7F0);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  int64_t v6 = sub_10025CE70(&v8, v3 + 4, v2, a1);
  uint64_t result = (void *)sub_10004E644();
  if (v6 == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_10025C5D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100054B78((uint64_t *)&unk_1005FD2A0);
  uint64_t v3 = *(void *)(type metadata accessor for MediaLibraryPid() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  int64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_10025D190(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_10004E644();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10025C72C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100054B78(&qword_1005F82C8);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  uint64_t v5 = sub_10025D4D8((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10004E644();
  if (v5 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_10025C820(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100054B78((uint64_t *)&unk_1005F83F0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_10025D6E8((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10004E644();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

char *sub_10025C908(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100054B78(&qword_1005FD270);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10025CA04(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_10025CAC4(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_10025CB80(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -48)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = 48 * (v4 / 48);
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

char *sub_10025CC4C(uint64_t a1)
{
  return sub_10025C908(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10025CC60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 24 * v16;
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    char v23 = *(unsigned char *)(v20 + 16);
    *(void *)uint64_t v11 = *(void *)v20;
    *(void *)(v11 + 8) = v22;
    *(unsigned char *)(v11 + 16) = v23;
    if (v13 == v10)
    {
      sub_1001DD838(v21, v22, v23);
      goto LABEL_38;
    }
    v11 += 24;
    uint64_t result = sub_1001DD838(v21, v22, v23);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_10025CE70(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v24 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10004D29C(0, (unint64_t *)&unk_100608000);
    sub_1001A5458((unint64_t *)&qword_1005FD2B0, (unint64_t *)&unk_100608000);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v7 = v28;
    uint64_t v8 = v29;
    int64_t v9 = v30;
    unint64_t v10 = v31;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  int64_t v9 = 0;
  uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = a4 + 56;
  uint64_t v8 = ~v19;
  uint64_t v20 = -v19;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v10 = v21 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v11 = 0;
LABEL_38:
    uint64_t v22 = v24;
LABEL_41:
    *uint64_t v22 = v4;
    v22[1] = v7;
    v22[2] = v8;
    v22[3] = v9;
    v22[4] = v10;
    return (void *)v11;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v11 = 0;
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v23 = v8;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      sub_10004D29C(0, (unint64_t *)&unk_100608000);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v14 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_40;
      }
      goto LABEL_8;
    }
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_7;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v15 >= v25)
    {
      unint64_t v10 = 0;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    if (v16) {
      goto LABEL_23;
    }
    int64_t v17 = v9 + 2;
    if (v9 + 2 >= v25)
    {
      unint64_t v10 = 0;
      ++v9;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v17);
    if (!v16)
    {
      if (v9 + 3 >= v25) {
        goto LABEL_44;
      }
      unint64_t v16 = *(void *)(v7 + 8 * (v9 + 3));
      if (v16)
      {
        int64_t v15 = v9 + 3;
        goto LABEL_23;
      }
      int64_t v17 = v9 + 4;
      if (v9 + 4 >= v25)
      {
        unint64_t v10 = 0;
        v9 += 3;
        goto LABEL_40;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (!v16)
      {
        int64_t v15 = v9 + 5;
        if (v9 + 5 >= v25)
        {
LABEL_44:
          unint64_t v10 = 0;
          int64_t v9 = v17;
          goto LABEL_40;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v15);
        if (!v16)
        {
          int64_t v18 = v9 + 6;
          while (v25 != v18)
          {
            unint64_t v16 = *(void *)(v7 + 8 * v18++);
            if (v16)
            {
              int64_t v15 = v18 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v10 = 0;
          int64_t v9 = v25 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    int64_t v15 = v17;
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v9 = v15;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v13);
    id v14 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_8:
    ++v11;
    *v6++ = v14;
    if (v11 == a3)
    {
      uint64_t v11 = a3;
LABEL_40:
      uint64_t v8 = v23;
      uint64_t v22 = v24;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_10025D190(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for MediaLibraryPid();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v15 = a4 + 64;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 32);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 32);
  uint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  uint64_t v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    uint64_t v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v42, *(void *)(v43 + 56) + v29 * v24, v8);
    int64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v8);
    a3 = v40;
    if (v21 == v40) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    a3 = v21;
LABEL_37:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10025D4D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_36:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    sub_100056D54(*(void *)(a4 + 56) + 40 * v16, (uint64_t)v21);
    sub_100042FC4(v21, (uint64_t)v22);
    uint64_t result = sub_100042FC4(v22, v11);
    v11 += 40;
    if (v13 == a3)
    {
      uint64_t v13 = a3;
LABEL_35:
      uint64_t v7 = v20;
      goto LABEL_36;
    }
  }
  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v17);
  if (v18) {
    goto LABEL_23;
  }
  int64_t v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v12 = v17 + 1;
  if (v17 + 2 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_23;
  }
  int64_t v12 = v17 + 2;
  if (v17 + 3 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_23;
  }
  int64_t v19 = v17 + 4;
  int64_t v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_34:
    unint64_t v9 = 0;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_16:
    int64_t v17 = v19;
LABEL_23:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_34;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10025D6E8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10025D8E8(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10025D8FC(uint64_t a1)
{
  return sub_1001BAE90(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10025D910(void *a1)
{
  return sub_1001BBE40(0, a1[2], 0, a1);
}

uint64_t sub_10025D924(id *a1, id *a2, id *a3, void **__dst, void *a5)
{
  uint64_t v5 = __dst;
  uint64_t v6 = a3;
  uint64_t v7 = (char *)a2 - (char *)a1;
  uint64_t v8 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0) {
    uint64_t v8 = (char *)a2 - (char *)a1;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = (char *)a3 - (char *)a2;
  uint64_t v11 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v11 = (char *)a3 - (char *)a2;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v91 = a1;
  uint64_t v90 = __dst;
  __src = a1;
  if (v9 < v11 >> 3)
  {
    if (v7 < -7) {
      goto LABEL_122;
    }
    if (__dst != a1 || &a1[v9] <= __dst)
    {
      uint64_t v13 = a2;
      memmove(__dst, a1, 8 * v9);
      a2 = v13;
      a1 = __src;
    }
    int v83 = &v5[v9];
    uint64_t v89 = v83;
    if (a2 < v6 && v7 >= 8)
    {
      char v81 = v6;
      unint64_t v14 = a5[2];
      if (v14 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = a5[2];
      }
      uint64_t v87 = v15;
      while (1)
      {
        uint64_t v78 = v5;
        __srca = a1;
        uint64_t v85 = a2;
        unint64_t v16 = *v5;
        id v17 = *a2;
        id v18 = v16;
        id v19 = [v17 text];
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v23 = v22;

          if (!v14) {
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v21 = 0;
          unint64_t v23 = 0xE000000000000000;
          if (!v14) {
            goto LABEL_40;
          }
        }
        uint64_t v24 = a5[4];
        uint64_t v25 = a5[5];
        if ((v24 != v21 || v25 != v23) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          int64_t v33 = a5 + 7;
          uint64_t v34 = 1;
          while (v14 != v34)
          {
            uint64_t v26 = v34;
            if (*(v33 - 1) != v21 || *v33 != v23)
            {
              char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v34 = v26 + 1;
              v33 += 2;
              if ((v36 & 1) == 0) {
                continue;
              }
            }
            goto LABEL_24;
          }
LABEL_40:

          swift_bridgeObjectRelease();
          goto LABEL_54;
        }
        uint64_t v26 = 0;
LABEL_24:
        swift_bridgeObjectRelease();
        id v27 = [v18 text];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v31 = v30;

          if (v24 != v29) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v29 = 0;
          unint64_t v31 = 0xE000000000000000;
          if (v24) {
            goto LABEL_30;
          }
        }
        if (v25 != v31)
        {
LABEL_30:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v37 = a5 + 7;
            uint64_t v38 = 1;
            while (v14 != v38)
            {
              uint64_t v32 = v38;
              if (v87 == v38) {
                goto LABEL_121;
              }
              if (*(v37 - 1) != v29 || *v37 != v31)
              {
                char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
                uint64_t v38 = v32 + 1;
                v37 += 2;
                if ((v40 & 1) == 0) {
                  continue;
                }
              }
              goto LABEL_49;
            }

            swift_bridgeObjectRelease();
LABEL_50:
            uint64_t v41 = v85 + 1;
            uint64_t v5 = v78;
            uint64_t v42 = __srca;
            if (__srca < v85 || __srca >= v41 || __srca != v85) {
              *__srca = *v85;
            }
            goto LABEL_57;
          }
          uint64_t v32 = 0;
          goto LABEL_49;
        }
        uint64_t v32 = 0;
LABEL_49:

        swift_bridgeObjectRelease();
        if (v26 < v32) {
          goto LABEL_50;
        }
LABEL_54:
        uint64_t v42 = __srca;
        if (__srca != v78) {
          *__srca = *v78;
        }
        uint64_t v5 = v78 + 1;
        uint64_t v90 = v78 + 1;
        uint64_t v41 = v85;
LABEL_57:
        a1 = v42 + 1;
        if (v5 < v83)
        {
          a2 = v41;
          if (v41 < v81) {
            continue;
          }
        }
        uint64_t v91 = a1;
        break;
      }
    }
LABEL_119:
    sub_10025CAC4((void **)&v91, (const void **)&v90, &v89);
    return 1;
  }
  if (v10 < -7) {
    goto LABEL_122;
  }
  if (__dst != a2 || &a2[v12] <= __dst)
  {
    uint64_t v43 = a2;
    memmove(__dst, a2, 8 * v12);
    a2 = v43;
    a1 = __src;
  }
  uint64_t v44 = &v5[v12];
  uint64_t v89 = v44;
  uint64_t v91 = a2;
  if (a1 >= a2 || v10 < 8) {
    goto LABEL_119;
  }
  unint64_t v45 = a5[2];
  unint64_t v88 = v45;
  if (v45 <= 1) {
    unint64_t v45 = 1;
  }
  unint64_t v75 = v45;
  uint64_t v46 = a2;
  while (1)
  {
    BOOL v86 = a2;
    uint64_t v47 = *--v46;
    id v48 = *(v44 - 1);
    id v84 = v47;
    uint64_t v76 = v48;
    id v49 = [v48 text];
    if (v49)
    {
      uint64_t v50 = v49;
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;
    }
    else
    {
      uint64_t v51 = 0;
      unint64_t v53 = 0xE000000000000000;
    }
    unint64_t v82 = v6;
    NSString v77 = v6 - 1;
    if (!v88) {
      goto LABEL_94;
    }
    uint64_t v54 = a5[4];
    uint64_t v55 = a5[5];
    if ((v54 != v51 || v55 != v53) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v63 = a5 + 7;
      uint64_t v64 = 1;
      while (1)
      {
        uint64_t v56 = v64;
        if (v88 == v64) {
          break;
        }
        if (*(v63 - 1) != v51 || *v63 != v53)
        {
          char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v64 = v56 + 1;
          v63 += 2;
          if ((v66 & 1) == 0) {
            continue;
          }
        }
        goto LABEL_78;
      }
LABEL_94:

      swift_bridgeObjectRelease();
      uint64_t v6 = v77;
      goto LABEL_109;
    }
    uint64_t v56 = 0;
LABEL_78:
    swift_bridgeObjectRelease();
    id v57 = [v84 text];
    if (v57)
    {
      id v58 = v57;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v61 = v60;

      if (v54 != v59) {
        goto LABEL_84;
      }
    }
    else
    {
      uint64_t v59 = 0;
      unint64_t v61 = 0xE000000000000000;
      if (v54) {
        goto LABEL_84;
      }
    }
    if (v55 == v61)
    {
      uint64_t v62 = 0;
      goto LABEL_103;
    }
LABEL_84:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
    uint64_t v62 = 0;
LABEL_103:

    swift_bridgeObjectRelease();
    BOOL v71 = v56 < v62;
    uint64_t v6 = v77;
    if (v71)
    {
LABEL_105:
      uint64_t v72 = __src;
      if (v82 != v86 || v6 >= v86) {
        id *v6 = *v46;
      }
      uint64_t v91 = v46;
      goto LABEL_114;
    }
LABEL_109:
    uint64_t v89 = v44 - 1;
    uint64_t v72 = __src;
    uint64_t v46 = v86;
    if (v82 < v44 || v6 >= v44 || v82 != v44) {
      id *v6 = *(v44 - 1);
    }
    --v44;
LABEL_114:
    if (v46 > v72)
    {
      a2 = v46;
      if (v44 > v5) {
        continue;
      }
    }
    goto LABEL_119;
  }
  uint64_t v67 = a5 + 7;
  uint64_t v68 = 1;
  while (1)
  {
    uint64_t v62 = v68;
    if (v88 == v68)
    {

      swift_bridgeObjectRelease();
      uint64_t v6 = v77;
      goto LABEL_105;
    }
    if (v75 == v68) {
      break;
    }
    if (*(v67 - 1) != v59 || *v67 != v61)
    {
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v68 = v62 + 1;
      v67 += 2;
      if ((v70 & 1) == 0) {
        continue;
      }
    }
    goto LABEL_103;
  }
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10025E02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  if (a3 == a2) {
    return;
  }
  uint64_t v5 = a3;
  uint64_t v6 = *a4;
  unint64_t v7 = a5[2];
  if (v7 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a5[2];
  }
  uint64_t v35 = v8;
  uint64_t v37 = a5 + 7;
LABEL_9:
  uint64_t v9 = *(void **)(v6 + 8 * v5);
  uint64_t v36 = v5;
  while (1)
  {
    uint64_t v10 = *(void **)(v6 + 8 * (v5 - 1));
    id v11 = v9;
    id v42 = v10;
    id v12 = [v11 text];
    uint64_t v40 = v5 - 1;
    uint64_t v41 = v11;
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      if (!v7) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v16 = 0xE000000000000000;
      if (!v7) {
        goto LABEL_7;
      }
    }
    uint64_t v18 = a5[4];
    uint64_t v17 = a5[5];
    if ((v18 != v14 || v17 != v16) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v26 = v37;
      uint64_t v27 = 1;
      while (v7 != v27)
      {
        uint64_t v19 = v27;
        if (*(v26 - 1) != v14 || *v26 != v16)
        {
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v27 = v19 + 1;
          v26 += 2;
          if ((v29 & 1) == 0) {
            continue;
          }
        }
        goto LABEL_18;
      }
LABEL_7:

      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t v5 = v36 + 1;
      if (v36 + 1 == a2) {
        return;
      }
      goto LABEL_9;
    }
    uint64_t v19 = 0;
LABEL_18:
    swift_bridgeObjectRelease();
    id v20 = [v42 text];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      if (v18 != v22) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v24 = 0xE000000000000000;
      if (v18) {
        goto LABEL_24;
      }
    }
    if (v17 == v24)
    {
      uint64_t v25 = 0;
LABEL_42:

      swift_bridgeObjectRelease();
      if (v19 >= v25) {
        goto LABEL_8;
      }
      if (!v6) {
        break;
      }
      goto LABEL_44;
    }
LABEL_24:
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      uint64_t v25 = 0;
      goto LABEL_42;
    }
    unint64_t v30 = v37;
    uint64_t v31 = 1;
    while (v7 != v31)
    {
      uint64_t v25 = v31;
      if (v35 == v31) {
        goto LABEL_48;
      }
      if (*(v30 - 1) != v22 || *v30 != v24)
      {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v31 = v25 + 1;
        v30 += 2;
        if ((v33 & 1) == 0) {
          continue;
        }
      }
      goto LABEL_42;
    }

    swift_bridgeObjectRelease();
    if (!v6) {
      break;
    }
LABEL_44:
    uint64_t v9 = *(void **)(v6 + 8 * v5);
    *(void *)(v6 + 8 * v5) = *(void *)(v6 + 8 * v40);
    *(void *)(v6 + 8 * v40) = v9;
    --v5;
    if (v40 == a1) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
}

uint64_t sub_10025E30C(uint64_t *a1, void *a2)
{
  Swift::Int v5 = a1[1];
  swift_bridgeObjectRetain_n();
  Swift::Int v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 < v5)
  {
    if (v5 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v5 + 1;
    }
    if (v5 < -1) {
      goto LABEL_267;
    }
    v187 = a2;
    unint64_t v171 = a1;
    Swift::Int v172 = v6;
    uint64_t v184 = v2;
    if (v5 < 2)
    {
      id v11 = (char *)_swiftEmptyArrayStorage;
      uint64_t v193 = (uint64_t)_swiftEmptyArrayStorage;
      __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
      if (v5 != 1)
      {
        unint64_t v111 = _swiftEmptyArrayStorage[2];
        goto LABEL_222;
      }
    }
    else
    {
      uint64_t v8 = v7 >> 1;
      sub_10004D29C(0, (unint64_t *)&qword_1005FD240);
      uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
      __dst = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
      uint64_t v193 = v9;
    }
    Swift::Int v12 = 0;
    uint64_t v13 = *a1;
    id v183 = a2 + 7;
    uint64_t v170 = *a1 - 8;
    id v11 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v14 = v5;
    Swift::Int v176 = v5;
    uint64_t v186 = *a1;
    while (1)
    {
      Swift::Int v15 = v12 + 1;
      unsigned int v177 = v11;
      Swift::Int v185 = v12;
      if (v12 + 1 >= v14) {
        goto LABEL_110;
      }
      Swift::Int v180 = v12 + 1;
      unint64_t v16 = *(void **)(v13 + 8 * v15);
      uint64_t v17 = *(void **)(v13 + 8 * v12);
      id v18 = v16;
      id v19 = v17;
      id v20 = [v18 text];
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v24 = v23;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v24 = 0xE000000000000000;
      }
      a2 = v187;
      unint64_t v190 = v187[2];
      if (v190) {
        break;
      }

      swift_bridgeObjectRelease();
      int v188 = 0;
LABEL_55:
      Swift::Int v12 = v185;
      Swift::Int v45 = v185 + 2;
      Swift::Int v14 = v176;
      uint64_t v13 = v186;
      Swift::Int v46 = v180;
      if (v185 + 2 >= v176) {
        goto LABEL_101;
      }
      if (v190 <= 1) {
        uint64_t v47 = 1;
      }
      else {
        uint64_t v47 = v190;
      }
      uint64_t v174 = v47;
      do
      {
        id v48 = *(void **)(v13 + 8 * v46);
        id v49 = *(id *)(v13 + 8 * v45);
        id v50 = v48;
        id v51 = [v49 text];
        if (v51)
        {
          unint64_t v52 = v51;
          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v55 = v54;
        }
        else
        {
          uint64_t v53 = 0;
          unint64_t v55 = 0xE000000000000000;
        }
        a2 = v187;
        if (v190)
        {
          uint64_t v57 = v187[4];
          uint64_t v56 = v187[5];
          if (v57 == v53 && v56 == v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v58 = 0;
LABEL_71:
            swift_bridgeObjectRelease();
            id v59 = [v50 text];
            if (v59)
            {
              unint64_t v60 = v59;
              uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v63 = v62;

              if (v57 != v61)
              {
LABEL_77:
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  unint64_t v69 = v183;
                  uint64_t v70 = 1;
                  while (1)
                  {
                    uint64_t v64 = v70;
                    if (v190 == v70) {
                      break;
                    }
                    if (v174 == v70) {
                      goto LABEL_240;
                    }
                    if (*(v69 - 1) != v61 || *v69 != v63)
                    {
                      char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      uint64_t v70 = v64 + 1;
                      v69 += 2;
                      if ((v72 & 1) == 0) {
                        continue;
                      }
                    }
                    goto LABEL_95;
                  }

                  swift_bridgeObjectRelease();
                  a2 = v187;
                  id v11 = v177;
                  if ((v188 & 1) == 0)
                  {
                    Swift::Int v15 = v45;
                    Swift::Int v14 = v176;
                    uint64_t v13 = v186;
                    Swift::Int v12 = v185;
                    goto LABEL_110;
                  }
                  goto LABEL_62;
                }
                uint64_t v64 = 0;
                goto LABEL_95;
              }
            }
            else
            {
              uint64_t v61 = 0;
              unint64_t v63 = 0xE000000000000000;
              if (v57) {
                goto LABEL_77;
              }
            }
            if (v56 != v63) {
              goto LABEL_77;
            }
            uint64_t v64 = 0;
LABEL_95:

            swift_bridgeObjectRelease();
            int v73 = v58 >= v64;
            a2 = v187;
            id v11 = v177;
            if (v188 == v73)
            {
              Swift::Int v14 = v176;
              uint64_t v13 = v186;
              goto LABEL_100;
            }
            goto LABEL_62;
          }
          uint64_t v65 = v183;
          uint64_t v66 = 1;
          while (1)
          {
            uint64_t v58 = v66;
            if (v190 == v66) {
              break;
            }
            if (*(v65 - 1) != v53 || *v65 != v55)
            {
              char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v66 = v58 + 1;
              v65 += 2;
              if ((v68 & 1) == 0) {
                continue;
              }
            }
            goto LABEL_71;
          }
          a2 = v187;
          id v11 = v177;
        }

        swift_bridgeObjectRelease();
        if (v188)
        {
          Swift::Int v14 = v176;
          uint64_t v13 = v186;
          Swift::Int v12 = v185;
          if (v45 < v185) {
            goto LABEL_260;
          }
          goto LABEL_103;
        }
LABEL_62:
        Swift::Int v46 = v45++;
        Swift::Int v14 = v176;
        uint64_t v13 = v186;
      }
      while (v45 != v176);
      Swift::Int v45 = v176;
LABEL_100:
      Swift::Int v12 = v185;
LABEL_101:
      Swift::Int v15 = v45;
      if (!v188) {
        goto LABEL_110;
      }
      if (v45 < v12) {
        goto LABEL_260;
      }
LABEL_103:
      if (v12 < v45)
      {
        uint64_t v74 = (uint64_t *)(v170 + 8 * v45);
        Swift::Int v75 = v45;
        Swift::Int v76 = v12;
        NSString v77 = (uint64_t *)(v13 + 8 * v12);
        do
        {
          if (v76 != --v75)
          {
            if (!v13) {
              goto LABEL_265;
            }
            uint64_t v78 = *v77;
            *NSString v77 = *v74;
            uint64_t *v74 = v78;
          }
          ++v76;
          --v74;
          ++v77;
        }
        while (v76 < v75);
      }
      Swift::Int v15 = v45;
LABEL_110:
      if (v15 >= v14) {
        goto LABEL_165;
      }
      if (__OFSUB__(v15, v12)) {
        goto LABEL_258;
      }
      if (v15 - v12 >= v172) {
        goto LABEL_165;
      }
      Swift::Int v79 = v12 + v172;
      if (__OFADD__(v12, v172)) {
        goto LABEL_261;
      }
      if (v79 >= v14) {
        Swift::Int v79 = v14;
      }
      if (v79 < v12)
      {
LABEL_262:
        __break(1u);
LABEL_263:
        swift_bridgeObjectRelease_n();
        __break(1u);
LABEL_264:
        swift_bridgeObjectRelease_n();
        __break(1u);
LABEL_265:
        swift_bridgeObjectRelease_n();
        __break(1u);
LABEL_266:
        swift_bridgeObjectRelease_n();
        __break(1u);
LABEL_267:
        swift_bridgeObjectRelease_n();
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if (v15 == v79) {
        goto LABEL_165;
      }
      unint64_t v80 = a2[2];
      if (v80 <= 1) {
        uint64_t v81 = 1;
      }
      else {
        uint64_t v81 = a2[2];
      }
      Swift::Int v173 = v79;
      uint64_t v175 = v81;
      while (2)
      {
        int v83 = *(void **)(v13 + 8 * v15);
        Swift::Int v181 = v15;
        Swift::Int v84 = v15;
        while (2)
        {
          Swift::Int v85 = v84 - 1;
          BOOL v86 = *(void **)(v13 + 8 * (v84 - 1));
          id v82 = v83;
          id v191 = v86;
          id v87 = [v82 text];
          if (v87)
          {
            unint64_t v88 = v87;
            uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v91 = v90;

            if (!v80) {
              goto LABEL_123;
            }
          }
          else
          {
            uint64_t v89 = 0;
            unint64_t v91 = 0xE000000000000000;
            if (!v80) {
              goto LABEL_123;
            }
          }
          uint64_t v93 = a2[4];
          uint64_t v92 = a2[5];
          uint64_t v189 = v82;
          if (v93 == v89 && v92 == v91 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v94 = 0;
LABEL_134:
            swift_bridgeObjectRelease();
            id v95 = [v191 text];
            if (v95)
            {
              uint64_t v96 = v95;
              uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v99 = v98;

              if (v93 != v97)
              {
LABEL_140:
                if (_stringCompareWithSmolCheck(_:_:expecting:)())
                {
                  uint64_t v100 = 0;
                  goto LABEL_158;
                }
                uint64_t v105 = v183;
                uint64_t v106 = 1;
                while (v80 != v106)
                {
                  uint64_t v100 = v106;
                  if (v175 == v106)
                  {
                    __break(1u);
LABEL_236:
                    __break(1u);
LABEL_237:
                    __break(1u);
LABEL_238:
                    __break(1u);
LABEL_239:
                    __break(1u);
LABEL_240:
                    __break(1u);
LABEL_241:
                    __break(1u);
LABEL_242:
                    __break(1u);
LABEL_243:
                    __break(1u);
LABEL_244:
                    __break(1u);
LABEL_245:
                    __break(1u);
LABEL_246:
                    __break(1u);
LABEL_247:
                    __break(1u);
LABEL_248:
                    __break(1u);
LABEL_249:
                    __break(1u);
LABEL_250:
                    __break(1u);
LABEL_251:
                    __break(1u);
LABEL_252:
                    __break(1u);
LABEL_253:
                    __break(1u);
LABEL_254:
                    __break(1u);
LABEL_255:
                    __break(1u);
LABEL_256:
                    __break(1u);
LABEL_257:
                    __break(1u);
LABEL_258:
                    __break(1u);
LABEL_259:
                    __break(1u);
LABEL_260:
                    __break(1u);
LABEL_261:
                    __break(1u);
                    goto LABEL_262;
                  }
                  if (*(v105 - 1) != v97 || *v105 != v99)
                  {
                    char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    uint64_t v106 = v100 + 1;
                    v105 += 2;
                    if ((v108 & 1) == 0) {
                      continue;
                    }
                  }
                  goto LABEL_158;
                }

                swift_bridgeObjectRelease();
                uint64_t v13 = v186;
                a2 = v187;
                if (!v186) {
                  goto LABEL_263;
                }
LABEL_160:
                int v83 = *(void **)(v13 + 8 * v84);
                *(void *)(v13 + 8 * v84) = *(void *)(v13 + 8 * v85);
                *(void *)(v13 + 8 * v85) = v83;
                --v84;
                if (v85 == v185) {
                  goto LABEL_124;
                }
                continue;
              }
            }
            else
            {
              uint64_t v97 = 0;
              unint64_t v99 = 0xE000000000000000;
              if (v93) {
                goto LABEL_140;
              }
            }
            if (v92 != v99) {
              goto LABEL_140;
            }
            uint64_t v100 = 0;
LABEL_158:

            swift_bridgeObjectRelease();
            uint64_t v13 = v186;
            a2 = v187;
            if (v94 >= v100) {
              goto LABEL_124;
            }
            if (!v186) {
              goto LABEL_263;
            }
            goto LABEL_160;
          }
          break;
        }
        int v101 = v183;
        uint64_t v102 = 1;
        while (v80 != v102)
        {
          uint64_t v94 = v102;
          if (*(v101 - 1) != v89 || *v101 != v91)
          {
            char v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v102 = v94 + 1;
            v101 += 2;
            if ((v104 & 1) == 0) {
              continue;
            }
          }
          goto LABEL_134;
        }
        a2 = v187;
        id v82 = v189;
LABEL_123:

        swift_bridgeObjectRelease();
        uint64_t v13 = v186;
LABEL_124:
        Swift::Int v15 = v181 + 1;
        if (v181 + 1 != v173) {
          continue;
        }
        break;
      }
      Swift::Int v15 = v173;
      id v11 = v177;
      Swift::Int v12 = v185;
LABEL_165:
      if (v15 < v12) {
        goto LABEL_253;
      }
      Swift::Int v182 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v11 = sub_10025C908(0, *((void *)v11 + 2) + 1, 1, v11);
      }
      unint64_t v110 = *((void *)v11 + 2);
      unint64_t v109 = *((void *)v11 + 3);
      unint64_t v111 = v110 + 1;
      uint64_t v13 = v186;
      if (v110 >= v109 >> 1)
      {
        uint64_t v162 = sub_10025C908((char *)(v109 > 1), v110 + 1, 1, v11);
        uint64_t v13 = v186;
        id v11 = v162;
      }
      *((void *)v11 + 2) = v111;
      uint64_t v112 = v11 + 32;
      unint64_t v113 = &v11[16 * v110 + 32];
      *(void *)unint64_t v113 = v185;
      *((void *)v113 + 1) = v182;
      if (v110)
      {
        while (2)
        {
          unint64_t v114 = v111 - 1;
          if (v111 >= 4)
          {
            uint64_t v119 = &v112[16 * v111];
            uint64_t v120 = *((void *)v119 - 8);
            uint64_t v121 = *((void *)v119 - 7);
            BOOL v125 = __OFSUB__(v121, v120);
            uint64_t v122 = v121 - v120;
            if (v125) {
              goto LABEL_241;
            }
            uint64_t v124 = *((void *)v119 - 6);
            uint64_t v123 = *((void *)v119 - 5);
            BOOL v125 = __OFSUB__(v123, v124);
            uint64_t v117 = v123 - v124;
            char v118 = v125;
            if (v125) {
              goto LABEL_242;
            }
            unint64_t v126 = v111 - 2;
            uint64_t v127 = &v112[16 * v111 - 32];
            uint64_t v129 = *(void *)v127;
            uint64_t v128 = *((void *)v127 + 1);
            BOOL v125 = __OFSUB__(v128, v129);
            uint64_t v130 = v128 - v129;
            if (v125) {
              goto LABEL_244;
            }
            BOOL v125 = __OFADD__(v117, v130);
            uint64_t v131 = v117 + v130;
            if (v125) {
              goto LABEL_247;
            }
            if (v131 >= v122)
            {
              uint64_t v149 = &v112[16 * v114];
              uint64_t v151 = *(void *)v149;
              uint64_t v150 = *((void *)v149 + 1);
              BOOL v125 = __OFSUB__(v150, v151);
              uint64_t v152 = v150 - v151;
              if (v125) {
                goto LABEL_251;
              }
              BOOL v142 = v117 < v152;
            }
            else
            {
LABEL_184:
              if (v118) {
                goto LABEL_243;
              }
              unint64_t v126 = v111 - 2;
              uint64_t v132 = &v112[16 * v111 - 32];
              uint64_t v134 = *(void *)v132;
              uint64_t v133 = *((void *)v132 + 1);
              BOOL v135 = __OFSUB__(v133, v134);
              uint64_t v136 = v133 - v134;
              char v137 = v135;
              if (v135) {
                goto LABEL_246;
              }
              unint64_t v138 = &v112[16 * v114];
              uint64_t v140 = *(void *)v138;
              uint64_t v139 = *((void *)v138 + 1);
              BOOL v125 = __OFSUB__(v139, v140);
              uint64_t v141 = v139 - v140;
              if (v125) {
                goto LABEL_249;
              }
              if (__OFADD__(v136, v141)) {
                goto LABEL_250;
              }
              if (v136 + v141 < v117) {
                goto LABEL_196;
              }
              BOOL v142 = v117 < v141;
            }
            if (v142) {
              unint64_t v114 = v126;
            }
          }
          else
          {
            if (v111 == 3)
            {
              uint64_t v116 = *((void *)v11 + 4);
              uint64_t v115 = *((void *)v11 + 5);
              BOOL v125 = __OFSUB__(v115, v116);
              uint64_t v117 = v115 - v116;
              char v118 = v125;
              goto LABEL_184;
            }
            uint64_t v143 = *((void *)v11 + 4);
            uint64_t v144 = *((void *)v11 + 5);
            BOOL v125 = __OFSUB__(v144, v143);
            uint64_t v136 = v144 - v143;
            char v137 = v125;
LABEL_196:
            if (v137) {
              goto LABEL_245;
            }
            uint64_t v145 = &v112[16 * v114];
            uint64_t v147 = *(void *)v145;
            uint64_t v146 = *((void *)v145 + 1);
            BOOL v125 = __OFSUB__(v146, v147);
            uint64_t v148 = v146 - v147;
            if (v125) {
              goto LABEL_248;
            }
            if (v148 < v136) {
              goto LABEL_213;
            }
          }
          unint64_t v153 = v114 - 1;
          if (v114 - 1 >= v111) {
            goto LABEL_236;
          }
          if (!v13) {
            goto LABEL_264;
          }
          id v154 = &v112[16 * v153];
          uint64_t v155 = *(void *)v154;
          unint64_t v156 = v114;
          uint64_t v157 = &v112[16 * v114];
          uint64_t v158 = *((void *)v157 + 1);
          v159 = (id *)(v13 + 8 * *(void *)v154);
          os_log_t v160 = (id *)(v13 + 8 * *(void *)v157);
          uint64_t v192 = (id *)(v13 + 8 * v158);
          swift_bridgeObjectRetain();
          sub_10025D924(v159, v160, v192, __dst, v187);
          if (v184)
          {
LABEL_219:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(void *)((v193 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()();
            swift_bridgeObjectRelease_n();
            return swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          if (v158 < v155) {
            goto LABEL_237;
          }
          if (v156 > *((void *)v11 + 2)) {
            goto LABEL_238;
          }
          uint64_t v184 = 0;
          *(void *)id v154 = v155;
          uint64_t v112 = v11 + 32;
          *(void *)&v11[16 * v153 + 40] = v158;
          unint64_t v161 = *((void *)v11 + 2);
          if (v156 >= v161) {
            goto LABEL_239;
          }
          unint64_t v111 = v161 - 1;
          memmove(v157, v157 + 16, 16 * (v161 - 1 - v156));
          *((void *)v11 + 2) = v161 - 1;
          uint64_t v13 = v186;
          if (v161 <= 2) {
            goto LABEL_213;
          }
          continue;
        }
      }
      unint64_t v111 = 1;
LABEL_213:
      Swift::Int v14 = v176;
      Swift::Int v12 = v182;
      a2 = v187;
      if (v182 >= v176)
      {
LABEL_222:
        os_log_t v178 = v11;
        if (v111 >= 2)
        {
          uint64_t v163 = *v171;
          do
          {
            unint64_t v164 = v111 - 2;
            if (v111 < 2) {
              goto LABEL_252;
            }
            if (!v163) {
              goto LABEL_266;
            }
            uint64_t v165 = *(void *)&v178[16 * v164 + 32];
            uint64_t v166 = *(void *)&v178[16 * v111 + 24];
            os_log_t v167 = (id *)(v163 + 8 * *(void *)&v178[16 * v111 + 16]);
            swift_bridgeObjectRetain();
            sub_10025D924((id *)(v163 + 8 * v165), v167, (id *)(v163 + 8 * v166), __dst, v187);
            if (v184) {
              goto LABEL_219;
            }
            swift_bridgeObjectRelease();
            if (v166 < v165) {
              goto LABEL_254;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              os_log_t v178 = sub_10025CC4C((uint64_t)v178);
            }
            if (v164 >= *((void *)v178 + 2)) {
              goto LABEL_255;
            }
            uint64_t v184 = 0;
            uint64_t v168 = &v178[16 * v164 + 32];
            *(void *)uint64_t v168 = v165;
            *((void *)v168 + 1) = v166;
            unint64_t v169 = *((void *)v178 + 2);
            if (v111 > v169) {
              goto LABEL_256;
            }
            memmove(&v178[16 * v111 + 16], &v178[16 * v111 + 32], 16 * (v169 - v111));
            *((void *)v178 + 2) = v169 - 1;
            unint64_t v111 = v169 - 1;
          }
          while (v169 > 2);
        }
        swift_bridgeObjectRelease();
        *(void *)((v193 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()();
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v26 = v187[4];
    uint64_t v25 = v187[5];
    if ((v26 != v22 || v25 != v24) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v34 = v183;
      uint64_t v35 = 1;
      while (1)
      {
        uint64_t v27 = v35;
        if (v190 == v35) {
          break;
        }
        if (*(v34 - 1) != v22 || *v34 != v24)
        {
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v35 = v27 + 1;
          v34 += 2;
          if ((v37 & 1) == 0) {
            continue;
          }
        }
        goto LABEL_23;
      }

      swift_bridgeObjectRelease();
      int v188 = 0;
      goto LABEL_54;
    }
    uint64_t v27 = 0;
LABEL_23:
    swift_bridgeObjectRelease();
    id v28 = [v19 text];
    if (v28)
    {
      char v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v32 = v31;

      if (v26 != v30) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v30 = 0;
      unint64_t v32 = 0xE000000000000000;
      if (v26) {
        goto LABEL_30;
      }
    }
    if (v25 == v32)
    {
      uint64_t v33 = 0;
      goto LABEL_52;
    }
LABEL_30:
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      uint64_t v33 = 0;
      goto LABEL_52;
    }
    uint64_t v38 = v19;
    if (v190 <= 1) {
      uint64_t v39 = 1;
    }
    else {
      uint64_t v39 = v190;
    }
    uint64_t v40 = v183;
    uint64_t v41 = 1;
    do
    {
      uint64_t v33 = v41;
      if (v190 == v41)
      {

        swift_bridgeObjectRelease();
        BOOL v44 = 1;
        goto LABEL_53;
      }
      if (v39 == v41) {
        goto LABEL_257;
      }
      if (*(v40 - 1) == v30 && *v40 == v32) {
        break;
      }
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v41 = v33 + 1;
      v40 += 2;
    }
    while ((v43 & 1) == 0);
    id v19 = v38;
LABEL_52:

    swift_bridgeObjectRelease();
    BOOL v44 = v27 < v33;
LABEL_53:
    int v188 = v44;
LABEL_54:
    a2 = v187;
    id v11 = v177;
    goto LABEL_55;
  }
  if (v5 < 0) {
    goto LABEL_259;
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_10025E02C(0, v5, 1, a1, a2);
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10025F1BC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_10025D8E8(v4);
    *a1 = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  swift_bridgeObjectRetain();
  sub_10025E30C(v8, a2);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._endMutation()();
  return swift_bridgeObjectRelease_n();
}

void sub_10025F270()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v49 - v8;
  __chkstk_darwin(v7);
  id v11 = (char *)&v49 - v10;
  if (v0[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_iTunesCloudFairPlayOfflineEnabled] != 1)
  {
    static Logger.fairPlay.getter();
    Swift::Int v12 = v0;
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void **)swift_slowAlloc();
      uint64_t v49 = v2;
      long long aBlock = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      unint64_t v23 = sub_10025F9B8();
      uint64_t v56 = sub_10004B974(v23, v24, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v49);
      goto LABEL_12;
    }

    uint64_t v38 = *(void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v39 = v6;
LABEL_11:
    v38(v39, v2);
LABEL_12:
    uint64_t v40 = *(void (**)(void ***))&v12[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    if (v40)
    {
      uint64_t v53 = (void *)sub_100054B78(&qword_100607FD0);
      long long aBlock = 0;
      LOBYTE(v51) = 0;
      swift_retain();
      v40(&aBlock);
      sub_1000536BC((uint64_t)v40);
      sub_10004D2D8((uint64_t)&aBlock);
    }
    goto LABEL_14;
  }
  if (v0[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeAdamID + 8])
  {
    static Logger.fairPlay.getter();
    Swift::Int v12 = v0;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      Swift::Int v15 = (uint8_t *)swift_slowAlloc();
      unint64_t v16 = (void **)swift_slowAlloc();
      uint64_t v49 = v2;
      long long aBlock = v16;
      *(_DWORD *)Swift::Int v15 = 136315138;
      unint64_t v17 = sub_10025F9B8();
      uint64_t v56 = sub_10004B974(v17, v18, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v49);
      goto LABEL_12;
    }

    uint64_t v38 = *(void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v39 = v9;
    goto LABEL_11;
  }
  URL.path(percentEncoded:)(0);
  v25._uint64_t countAndFlagsBits = 0x676B70766F6D2ELL;
  v25._object = (void *)0xE700000000000000;
  Swift::Bool v26 = String.hasSuffix(_:)(v25);
  swift_bridgeObjectRelease();
  if (v26)
  {
    id v27 = objc_allocWithZone((Class)AVURLAsset);
    URL._bridgeToObjectiveC()(v28);
    uint64_t v30 = v29;
    [v27 initWithURL:v29 options:0];

    id v31 = objc_allocWithZone((Class)type metadata accessor for FairPlayAsset());
    unint64_t v32 = (void *)FairPlayAsset.init(adamID:avAsset:)();
    uint64_t v33 = *(void **)&v1[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_fairPlayKeyLoader];
    uint64_t v34 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v34;
    *(void *)(v35 + 24) = v32;
    unint64_t v54 = sub_100260968;
    uint64_t v55 = v35;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v51 = 1107296256;
    unint64_t v52 = sub_1002605B8;
    uint64_t v53 = &unk_10055C278;
    uint64_t v36 = _Block_copy(&aBlock);
    id v37 = v32;
    swift_release();
    [v33 createSessionWithAsset:v37 completion:v36];
    _Block_release(v36);

    return;
  }
  static Logger.fairPlay.getter();
  uint64_t v41 = v0;
  id v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    BOOL v44 = (uint8_t *)swift_slowAlloc();
    Swift::Int v45 = (void **)swift_slowAlloc();
    uint64_t v49 = v2;
    long long aBlock = v45;
    *(_DWORD *)BOOL v44 = 136315138;
    unint64_t v46 = sub_10025F9B8();
    uint64_t v56 = sub_10004B974(v46, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s Not a FairPlay asset, finishing operation.", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v49);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
  }
  id v48 = *(void (**)(void ***))&v41[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  if (v48)
  {
    uint64_t v53 = (void *)sub_100054B78(&qword_100607FD0);
    long long aBlock = 0;
    LOBYTE(v51) = 0;
    swift_retain();
    v48(&aBlock);
    sub_1000536BC((uint64_t)v48);
    sub_10004D2D8((uint64_t)&aBlock);
  }
LABEL_14:
  sub_100049E74();
}

unint64_t sub_10025F9B8()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation____lazy_storage___logPrefix);
  if (*(void *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation____lazy_storage___logPrefix + 8))
  {
    unint64_t v2 = *v1;
  }
  else
  {
    unint64_t v2 = 0xD00000000000001CLL;
    *uint64_t v1 = 0xD00000000000001CLL;
    v1[1] = 0x80000001004D9320;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10025FA30(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v45 - v12;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    Swift::Int v15 = (void *)result;
    if (a2)
    {
      swift_errorRetain();
      static Logger.fairPlay.getter();
      id v16 = v15;
      id v17 = a4;
      id v18 = v16;
      id v19 = v17;
      os_log_type_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        v45[1] = v23;
        *(_DWORD *)uint64_t v22 = 136315651;
        uint64_t v47 = v8;
        aBlock[0] = v23;
        unint64_t v24 = sub_10025F9B8();
        uint64_t v49 = sub_10004B974(v24, v25, aBlock);
        uint64_t v46 = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2160;
        uint64_t v49 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v22 + 22) = 2081;
        uint64_t v26 = FairPlayAsset.description.getter();
        uint64_t v49 = sub_10004B974(v26, v27, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s Error creating content key session for adamID %{private,mask.hash}s, failing operation.", (uint8_t *)v22, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v46);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      }
      swift_errorRetain();
      sub_10041985C(a2, 1);
      swift_errorRelease();
    }
    else
    {
      if (a1)
      {
        id v28 = *(void **)(result + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_fairPlayKeyLoader);
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = v15;
        *(void *)(v29 + 24) = a4;
        aBlock[4] = (uint64_t)sub_100260A04;
        aBlock[5] = v29;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_10034BD38;
        void aBlock[3] = (uint64_t)&unk_10055C2C8;
        uint64_t v30 = _Block_copy(aBlock);
        id v31 = v15;
        id v32 = a4;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_release();
        [v28 startKeyRequestWithSession:a1 completion:v30];

        _Block_release(v30);
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      uint64_t v47 = v8;
      static Logger.fairPlay.getter();
      id v33 = v15;
      id v34 = a4;
      id v35 = v33;
      id v36 = v34;
      id v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136315651;
        unint64_t v40 = sub_10025F9B8();
        uint64_t v49 = sub_10004B974(v40, v41, aBlock);
        uint64_t v46 = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2160;
        uint64_t v49 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 22) = 2081;
        uint64_t v42 = FairPlayAsset.description.getter();
        uint64_t v49 = sub_10004B974(v42, v43, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s No error or session returned creating content key session for adamID %{private,mask.hash}s, failing operation.", (uint8_t *)v39, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v46);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v7);
      }
      sub_100260970();
      uint64_t v44 = swift_allocError();
      sub_10041985C(v44, 1);
    }
    return swift_errorRelease();
  }
  return result;
}

void sub_100260060(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - v11;
  if (a1)
  {
    swift_errorRetain();
    static Logger.fairPlay.getter();
    id v13 = a2;
    id v14 = a3;
    id v15 = v13;
    id v16 = v14;
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v40 = v37;
      *(_DWORD *)uint64_t v19 = 136315651;
      uint64_t v38 = v6;
      unint64_t v20 = sub_10025F9B8();
      uint64_t v39 = sub_10004B974(v20, v21, &v40);
      uint64_t v36 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2160;
      uint64_t v39 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2081;
      uint64_t v22 = FairPlayAsset.description.getter();
      uint64_t v39 = sub_10004B974(v22, v23, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s Error fetching key for adamID %{private,mask.hash}s, failing operation.", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v38);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    swift_errorRetain();
    sub_10041985C(a1, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    static Logger.fairPlay.getter();
    id v24 = a2;
    id v25 = a3;
    uint64_t v26 = (char *)v24;
    id v27 = v25;
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v40 = v37;
      *(_DWORD *)uint64_t v30 = 136315651;
      uint64_t v38 = v6;
      unint64_t v31 = sub_10025F9B8();
      uint64_t v39 = sub_10004B974(v31, v32, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2160;
      uint64_t v39 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 22) = 2081;
      uint64_t v33 = FairPlayAsset.description.getter();
      uint64_t v39 = sub_10004B974(v33, v34, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s Successfully fetched key for adamID %{private,mask.hash}s, finishing operation.", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v38);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    id v35 = *(void (**)(uint64_t *))&v26[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    if (v35)
    {
      uint64_t v42 = sub_100054B78(&qword_100607FD0);
      uint64_t v40 = 0;
      char v41 = 0;
      swift_retain();
      v35(&v40);
      sub_1000536BC((uint64_t)v35);
      sub_10004D2D8((uint64_t)&v40);
    }
    sub_100049E74();
  }
}

uint64_t sub_1002605B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100260668()
{
  sub_100050358(*(void *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input), *(unsigned char *)(v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input + 8));
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeLocation;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002607BC()
{
  return type metadata accessor for FetchFairPlayKeyOperation();
}

uint64_t type metadata accessor for FetchFairPlayKeyOperation()
{
  uint64_t result = qword_1005FD320;
  if (!qword_1005FD320) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100260810()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002608D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input);
  *(void *)a1 = v3;
  char v4 = *(unsigned char *)(v2 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  return sub_10005036C(v3, v4);
}

uint64_t sub_1002608F0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100260928()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100260968(uint64_t a1, uint64_t a2)
{
  return sub_10025FA30(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

unint64_t sub_100260970()
{
  unint64_t result = qword_1005FD368;
  if (!qword_1005FD368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FD368);
  }
  return result;
}

uint64_t sub_1002609C4()
{
  return swift_deallocObject();
}

void sub_100260A04(uint64_t a1)
{
  sub_100260060(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

unsigned char *storeEnumTagSinglePayload for FetchFairPlayKeyOperationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100260AA8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchFairPlayKeyOperationError()
{
  return &type metadata for FetchFairPlayKeyOperationError;
}

unint64_t sub_100260AE4()
{
  unint64_t result = qword_1005FD370;
  if (!qword_1005FD370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FD370);
  }
  return result;
}

uint64_t (*sub_100260B38())()
{
  uint64_t v1 = v0[29];
  if (v1)
  {
    uint64_t v2 = (uint64_t (*)())v0[29];
  }
  else
  {
    uint64_t v3 = v0[26];
    uint64_t v2 = sub_1001C0E14;
    v0[29] = sub_1001C0E14;
    v0[30] = v3;
    swift_retain_n();
    sub_1000536BC(0);
  }
  sub_10004ACDC(v1);
  return v2;
}

uint64_t sub_100260BC0(uint64_t a1, uint64_t a2)
{
  swift_getObjectType();
  dispatch thunk of LibraryDataProviderProtocol.libraryActionController.getter();
  sub_100041A98(v9, v9[3]);
  dispatch thunk of LibraryActionControllerProtocol.updateFeed(podcast:context:)();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  swift_bridgeObjectRetain_n();
  v8[3] = v6;
  v8[4] = &protocol witness table for OS_dispatch_queue;
  v8[0] = static OS_dispatch_queue.main.getter();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10004D2D8((uint64_t)v8);
  return sub_10004D2D8((uint64_t)v9);
}

uint64_t sub_100260D20()
{
  if (*(void *)(v0 + 248))
  {
    swift_retain();
    dispatch thunk of EpisodeStateMachine.removeStateTransitionActions(for:)();
    swift_release();
  }
  swift_release();
  swift_unknownObjectRelease();
  sub_10004D2D8(v0 + 104);
  swift_release();
  swift_release();
  sub_10004D2D8(v0 + 160);
  swift_release();
  swift_release();
  swift_release();
  sub_1000536BC(*(void *)(v0 + 232));
  swift_release();
  return v0;
}

uint64_t sub_100260DBC()
{
  sub_100260D20();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CarPlayLibraryShowProvider()
{
  return self;
}

uint64_t sub_100260E14()
{
  uint64_t v1 = v0;
  Episode.uuid.getter();
  uint64_t v2 = EpisodeStateController.stateMachine(for:)();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 248) = v2;
  uint64_t result = swift_release();
  if (*(void *)(v1 + 248))
  {
    swift_retain();
    dispatch thunk of EpisodeStateMachine.removeStateTransitionActions(for:)();
    uint64_t result = swift_release();
    if (*(void *)(v1 + 248))
    {
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100260F0C()
{
  uint64_t v0 = type metadata accessor for EpisodePlayState();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    dispatch thunk of EpisodeStateMachine.currentState.getter();
    uint64_t v4 = dispatch thunk of SmartPlayButtonController.buttonTitle(for:)();
    uint64_t v6 = v5;
    sub_10022B6A0((uint64_t)v2, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    v7[1] = v4;
    v7[2] = v6;
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_100261010(unsigned char *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *a1;
  uint64_t v11 = "Feed update was not successful from CarPlay store page";
  if (*a1) {
    uint64_t v11 = "Feed update was successful from CarPlay store page";
  }
  unint64_t v12 = (unint64_t)(v11 - 32) | 0x8000000000000000;
  static Logger.podcastsStatesCoordination.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    uint64_t v20 = a2;
    if (v10) {
      uint64_t v16 = 0xD000000000000032;
    }
    else {
      uint64_t v16 = 0xD000000000000036;
    }
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v6;
    uint64_t v23 = v18;
    *(_DWORD *)uint64_t v17 = 136315395;
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_10004B974(v16, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_10004B974(v20, a3, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s adamID: %{private}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_1002612B8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.podcastsStatesCoordination.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v19 = v6;
    uint64_t v21 = v14;
    *(_DWORD *)uint64_t v13 = 136380931;
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_10004B974(a2, a3, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v20 = a1;
    swift_errorRetain();
    sub_100054B78(&qword_100603F70);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v20 = sub_10004B974(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error triggering feed update from CarPlay store page for podcast adamID: %{private}s, with error: %s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_100261558()
{
  uint64_t v0 = sub_100054B78(&qword_1005FD488);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v50 = v0;
  uint64_t v51 = v1;
  __chkstk_darwin(v0);
  uint64_t v46 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100054B78(&qword_1005FD490);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  uint64_t v56 = v4;
  __chkstk_darwin(v3);
  uint64_t v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_1005FD498);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  uint64_t v58 = v7;
  __chkstk_darwin(v6);
  unint64_t v52 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100054B78(&qword_1005FD4A0);
  uint64_t v61 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v53 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100054B78(&qword_1005FD4A8);
  uint64_t v62 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  unint64_t v54 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100054B78((uint64_t *)&unk_1005FD4B0);
  uint64_t v66 = *(void *)(v63 - 8);
  uint64_t v11 = __chkstk_darwin(v63);
  uint64_t v44 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v41 - v13;
  uint64_t v14 = sub_100054B78((uint64_t *)&unk_1005F8B20);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100054B78((uint64_t *)&unk_1005FBC00);
  uint64_t v48 = *(void *)(v64 - 8);
  uint64_t v18 = v48;
  uint64_t v19 = __chkstk_darwin(v64);
  unint64_t v43 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v41 - v21;
  uint64_t v67 = LibraryShowProvider.pageContent.getter();
  sub_100054B78(&qword_1005F5BC0);
  sub_100054B78(&qword_1005F7800);
  sub_100044200((unint64_t *)&unk_1005F8B50, &qword_1005F5BC0);
  Publisher.compactMap<A>(_:)();
  swift_release();
  Swift::Int v45 = &protocol conformance descriptor for Publishers.CompactMap<A, B>;
  sub_100044200((unint64_t *)&unk_1005FBC10, (uint64_t *)&unk_1005F8B20);
  uint64_t v47 = v22;
  Publisher.removeDuplicates(by:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v23 = v42;
  uint64_t v67 = *(void *)(v42 + 200);
  sub_100054B78(&qword_1005FBBD8);
  sub_100044200(&qword_1005FD4C0, &qword_1005FBBD8);
  id v24 = v65;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v43, v22, v64);
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v44, v24, v63);
  uint64_t v67 = *(void *)(v23 + 216);
  swift_retain();
  sub_100054B78((uint64_t *)&unk_1005F8B00);
  sub_100044200((unint64_t *)&unk_1005F8B60, (uint64_t *)&unk_1005FBC00);
  sub_100044200((unint64_t *)&unk_1005FD4C8, (uint64_t *)&unk_1005FD4B0);
  sub_100044200(&qword_1005F9F40, (uint64_t *)&unk_1005F8B00);
  id v25 = v46;
  Publishers.CombineLatest3.init(_:_:_:)();
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_100265118;
  *(void *)(v27 + 24) = v26;
  static Subscribers.Demand.unlimited.getter();
  sub_100054B78(&qword_1005FD4D8);
  sub_100044200(&qword_1005FD4E0, &qword_1005FD488);
  sub_100044200(&qword_1005FD4E8, &qword_1005FD4D8);
  os_log_type_t v29 = v49;
  uint64_t v28 = v50;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v25, v28);
  uint64_t v30 = swift_allocObject();
  swift_weakInit();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_100265194;
  *(void *)(v31 + 24) = v30;
  static Subscribers.Demand.unlimited.getter();
  sub_100054B78(&qword_1005FD4F0);
  sub_100044200(&qword_1005FD4F8, &qword_1005FD490);
  sub_100044200((unint64_t *)&unk_1005FD500, &qword_1005FD4F0);
  unint64_t v32 = v52;
  uint64_t v33 = v55;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v33);
  sub_100054B78((uint64_t *)&unk_1005F8BD0);
  sub_100044200(&qword_1005FD510, &qword_1005FD498);
  unint64_t v34 = v53;
  uint64_t v35 = v57;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v35);
  *(void *)(swift_allocObject() + 16) = 2;
  sub_100044200(&qword_1005FD518, &qword_1005FD4A0);
  uint64_t v36 = v54;
  uint64_t v37 = v59;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v37);
  sub_100044200(&qword_1005FD520, &qword_1005FD4A8);
  uint64_t v38 = v60;
  uint64_t v39 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v36, v38);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v63);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v64);
  return v39;
}

uint64_t sub_100262030@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PageContent();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ModernPage();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001C6A68(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    sub_10022B63C((uint64_t)v6, (uint64_t)v9);
    uint64_t v10 = *(void *)&v9[*(int *)(v7 + 24)];
    swift_bridgeObjectRetain();
    uint64_t result = sub_10022B6A0((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for ModernPage);
  }
  else
  {
    uint64_t result = sub_10022B6A0((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for PageContent);
    uint64_t v10 = 0;
  }
  *a2 = v10;
  return result;
}

uint64_t sub_100262180(uint64_t *a1, uint64_t *a2)
{
  uint64_t v124 = type metadata accessor for ModernShelf.ItemPresentation();
  uint64_t v4 = *(void *)(v124 - 8);
  uint64_t v5 = __chkstk_darwin(v124);
  uint64_t v122 = (char *)v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v114 - v7;
  unint64_t v9 = type metadata accessor for ModernShelf();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  BOOL v125 = (char *)v114 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v123 = (char *)v114 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v115 = (char *)v114 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)v114 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = *a1;
  uint64_t v25 = *a2;
  uint64_t v26 = *(char **)(*a1 + 16);
  uint64_t v128 = v13;
  unint64_t v129 = v9;
  uint64_t v119 = v10;
  uint64_t v120 = v25;
  uint64_t v127 = v26;
  uint64_t v118 = v24;
  uint64_t v116 = v4;
  if (!v26)
  {
    uint64_t v36 = 0;
    goto LABEL_20;
  }
  uint64_t v117 = (char *)v114 - v23;
  unint64_t v126 = *(void (**)(char *, uint64_t, unint64_t))(v10 + 16);
  uint64_t v27 = v24 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v28 = (void (**)(char *, uint64_t))(v4 + 8);
  os_log_type_t v29 = (void (**)(char *, unint64_t))(v10 + 8);
  uint64_t v121 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  uint64_t v30 = v26;
  while (1)
  {
    v126(v22, v27, v9);
    ModernShelf.itemPresentation.getter();
    ModernShelf.ItemPresentation.itemKind.getter();
    (*v28)(v8, v124);
    uint64_t v31 = ModernShelf.ItemKind.rawValue.getter();
    uint64_t v33 = v32;
    if (v31 == ModernShelf.ItemKind.rawValue.getter() && v33 == v34) {
      break;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_10;
    }
    unint64_t v9 = v129;
    (*v29)(v22, v129);
    v27 += v121;
    if (!--v30)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = 0;
      uint64_t v10 = v119;
      uint64_t v25 = v120;
      uint64_t v13 = v128;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v10 = v119;
  uint64_t v37 = v119 + 32;
  uint64_t v38 = v117;
  unint64_t v9 = v129;
  (*(void (**)(char *, char *, unint64_t))(v119 + 32))(v117, v22, v129);
  uint64_t v39 = ModernShelf.items.getter();
  (*(void (**)(char *, unint64_t))(v37 - 24))(v38, v9);
  unint64_t v40 = (unint64_t)sub_1003E4A88(v39);
  swift_bridgeObjectRelease();
  uint64_t v13 = v128;
  if (v40)
  {
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v41) {
        goto LABEL_13;
      }
    }
    else if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_13:
      if ((v40 & 0xC000000000000001) != 0) {
        goto LABEL_122;
      }
      if (!*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_124;
      }
      uint64_t v36 = *(void *)(v40 + 32);
      swift_retain();
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v36 = 0;
  uint64_t v25 = v120;
  while (1)
  {
LABEL_20:
    uint64_t v42 = *(void (**)(char *, uint64_t, unint64_t))(v25 + 16);
    uint64_t v117 = (char *)v36;
    unint64_t v126 = v42;
    unint64_t v43 = v123;
    if (!v42)
    {
      uint64_t v55 = 0;
      goto LABEL_39;
    }
    uint64_t v44 = v10 + 16;
    Swift::Int v45 = *(void (**)(char *, uint64_t, unint64_t))(v10 + 16);
    uint64_t v46 = v25 + ((*(unsigned __int8 *)(v44 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 64));
    uint64_t v47 = (void (**)(char *, uint64_t))(v116 + 8);
    uint64_t v48 = *(void *)(v44 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v45(v43, v46, v9);
      uint64_t v49 = v122;
      ModernShelf.itemPresentation.getter();
      ModernShelf.ItemPresentation.itemKind.getter();
      (*v47)(v49, v124);
      uint64_t v50 = ModernShelf.ItemKind.rawValue.getter();
      uint64_t v52 = v51;
      if (v50 == ModernShelf.ItemKind.rawValue.getter() && v52 == v53) {
        break;
      }
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v54) {
        goto LABEL_29;
      }
      unint64_t v43 = v123;
      unint64_t v9 = v129;
      (*(void (**)(char *, unint64_t))(v44 - 8))(v123, v129);
      v46 += v48;
      uint64_t v42 = (void (*)(char *, uint64_t, unint64_t))((char *)v42 - 1);
      if (!v42)
      {
        swift_bridgeObjectRelease();
        uint64_t v55 = 0;
        uint64_t v36 = (uint64_t)v117;
        uint64_t v10 = v119;
        uint64_t v13 = v128;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v10 = v119;
    uint64_t v56 = v119 + 32;
    uint64_t v57 = v115;
    unint64_t v9 = v129;
    (*(void (**)(char *, char *, unint64_t))(v119 + 32))(v115, v123, v129);
    uint64_t v58 = ModernShelf.items.getter();
    (*(void (**)(char *, unint64_t))(v56 - 24))(v57, v9);
    unint64_t v59 = (unint64_t)sub_1003E4A88(v58);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v13 = v128;
    if (!v59) {
      goto LABEL_38;
    }
    if (!(v59 >> 62))
    {
      if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v61) {
      break;
    }
LABEL_37:
    swift_bridgeObjectRelease();
LABEL_38:
    uint64_t v55 = 0;
    uint64_t v36 = (uint64_t)v117;
LABEL_39:
    uint64_t v115 = (char *)v55;
    if (v36)
    {
      swift_retain();
      uint64_t v62 = ShowHeader.episodeToPlay.getter();
      swift_release();
      if (!v55)
      {
        uint64_t v63 = 0;
        if (!v62) {
          goto LABEL_57;
        }
        uint64_t v64 = 0;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v63 = 0;
      if (!v55)
      {
LABEL_57:
        LODWORD(v116) = 1;
        uint64_t v70 = 0;
        goto LABEL_77;
      }
      uint64_t v62 = 0;
    }
    swift_retain();
    uint64_t v64 = ShowHeader.episodeToPlay.getter();
    swift_release();
    if (!v62)
    {
      uint64_t v65 = 0;
      uint64_t v63 = 0;
      uint64_t v70 = 0;
      int v68 = 1;
      char v69 = 1;
      LODWORD(v116) = 1;
      if (!v64) {
        goto LABEL_77;
      }
LABEL_49:
      swift_retain();
      uint64_t v71 = Episode.adamId.getter();
      char v73 = v72;
      swift_release();
      if (v69)
      {
        if ((v73 & 1) == 0)
        {
          LODWORD(v116) = 0;
LABEL_62:
          uint64_t v63 = v62;
          uint64_t v70 = v64;
          uint64_t v13 = v128;
          unint64_t v9 = v129;
          goto LABEL_77;
        }
      }
      else if ((v73 & 1) != 0 || v65 != v71)
      {
        LODWORD(v116) = 0;
        goto LABEL_62;
      }
      if (v68)
      {
        Episode.uuid.getter();
        uint64_t v13 = v128;
        unint64_t v9 = v129;
        if (v74) {
          goto LABEL_70;
        }
      }
      else
      {
        uint64_t v76 = Episode.uuid.getter();
        uint64_t v78 = v77;
        uint64_t v79 = Episode.uuid.getter();
        if (v78)
        {
          if (v80)
          {
            if (v76 == v79 && v78 == v80) {
              LODWORD(v116) = 1;
            }
            else {
              LODWORD(v116) = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            uint64_t v13 = v128;
            unint64_t v9 = v129;
            swift_bridgeObjectRelease();
          }
          else
          {
            LODWORD(v116) = 0;
            uint64_t v13 = v128;
            unint64_t v9 = v129;
          }
          goto LABEL_75;
        }
        uint64_t v13 = v128;
        unint64_t v9 = v129;
        if (v80) {
          goto LABEL_70;
        }
      }
      goto LABEL_71;
    }
LABEL_46:
    swift_retain();
    uint64_t v65 = Episode.adamId.getter();
    char v67 = v66;
    swift_release();
    if (v64)
    {
      int v68 = 0;
      char v69 = v67 & 1;
      goto LABEL_49;
    }
    if ((v67 & 1) == 0)
    {
      uint64_t v70 = 0;
      LODWORD(v116) = 0;
      uint64_t v63 = v62;
      goto LABEL_77;
    }
    Episode.uuid.getter();
    uint64_t v64 = 0;
    if (v75)
    {
LABEL_70:
      LODWORD(v116) = 0;
LABEL_75:
      swift_bridgeObjectRelease();
      goto LABEL_76;
    }
LABEL_71:
    LODWORD(v116) = 1;
LABEL_76:
    uint64_t v63 = v62;
    uint64_t v70 = v64;
LABEL_77:
    v114[0] = v70;
    v114[1] = v63;
    uint64_t v81 = _swiftEmptyArrayStorage;
    uint64_t v133 = _swiftEmptyArrayStorage;
    if (v127)
    {
      int v83 = *(char **)(v10 + 16);
      uint64_t v82 = v10 + 16;
      uint64_t v122 = (char *)(v118
                    + ((*(unsigned __int8 *)(v82 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 64)));
      uint64_t v123 = v83;
      uint64_t v121 = *(void *)(v82 + 56);
      uint64_t v124 = v82;
      Swift::Int v84 = (void (**)(char *, unint64_t))(v82 - 8);
      swift_bridgeObjectRetain();
      Swift::Int v85 = 0;
      BOOL v86 = v125;
      id v87 = _swiftEmptyArrayStorage;
      do
      {
        ((void (*)(char *, char *, unint64_t))v123)(v86, &v122[v121 * (void)v85], v9);
        uint64_t v89 = ModernShelf.items.getter();
        unint64_t v90 = v87;
        uint64_t v132 = v87;
        uint64_t v91 = *(void *)(v89 + 16);
        specialized ContiguousArray.reserveCapacity(_:)();
        if (v91)
        {
          uint64_t v92 = v89 + 32;
          while (1)
          {
            sub_100056D54(v92, (uint64_t)v131);
            sub_100054B78(&qword_1005F8430);
            type metadata accessor for LegacyEpisodeLockup();
            if (!swift_dynamicCast()) {
              break;
            }
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v92 += 40;
            if (!--v91) {
              goto LABEL_79;
            }
          }
          uint64_t v130 = 0;
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          id v87 = v90;
          unint64_t v88 = (unint64_t)v90;
        }
        else
        {
LABEL_79:
          unint64_t v88 = (unint64_t)v132;
          swift_bridgeObjectRelease();
          id v87 = v90;
        }
        ++v85;
        BOOL v86 = v125;
        unint64_t v9 = v129;
        (*v84)(v125, v129);
        sub_1001B1678(v88);
      }
      while (v85 != v127);
      swift_bridgeObjectRelease();
      unint64_t v93 = (unint64_t)v133;
      uint64_t v10 = v119;
      uint64_t v81 = v87;
      uint64_t v13 = v128;
    }
    else
    {
      unint64_t v93 = (unint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v133 = v81;
    if (v126)
    {
      uint64_t v94 = *(char **)(v10 + 16);
      v10 += 16;
      uint64_t v127 = v94;
      BOOL v125 = (char *)(v120
                    + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64)));
      uint64_t v95 = *(void *)(v10 + 56);
      uint64_t v123 = (char *)(v10 - 8);
      uint64_t v124 = v95;
      swift_bridgeObjectRetain();
      uint64_t v96 = 0;
      do
      {
        uint64_t v98 = v10;
        ((void (*)(char *, char *, unint64_t))v127)(v13, &v125[v124 * (void)v96], v9);
        uint64_t v99 = ModernShelf.items.getter();
        uint64_t v132 = _swiftEmptyArrayStorage;
        uint64_t v100 = *(void *)(v99 + 16);
        specialized ContiguousArray.reserveCapacity(_:)();
        if (v100)
        {
          uint64_t v101 = v99 + 32;
          while (1)
          {
            sub_100056D54(v101, (uint64_t)v131);
            sub_100054B78(&qword_1005F8430);
            type metadata accessor for LegacyEpisodeLockup();
            if (!swift_dynamicCast()) {
              break;
            }
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v101 += 40;
            if (!--v100) {
              goto LABEL_91;
            }
          }
          uint64_t v130 = 0;
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v97 = _swiftEmptyArrayStorage;
        }
        else
        {
LABEL_91:
          uint64_t v97 = v132;
          swift_bridgeObjectRelease();
        }
        uint64_t v96 = (void (*)(char *, uint64_t, unint64_t))((char *)v96 + 1);
        uint64_t v13 = v128;
        unint64_t v9 = v129;
        (*(void (**)(char *, unint64_t))v123)(v128, v129);
        sub_1001B1678((unint64_t)v97);
        uint64_t v10 = v98;
      }
      while (v96 != v126);
      swift_bridgeObjectRelease();
      unint64_t v102 = (unint64_t)v133;
      uint64_t v13 = (char *)_swiftEmptyArrayStorage;
      if (!(v93 >> 62))
      {
LABEL_100:
        uint64_t v103 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v103) {
          goto LABEL_116;
        }
        goto LABEL_101;
      }
    }
    else
    {
      unint64_t v102 = (unint64_t)v81;
      uint64_t v13 = (char *)v81;
      if (!(v93 >> 62)) {
        goto LABEL_100;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v103)
    {
LABEL_116:
      swift_bridgeObjectRelease();
      uint64_t v105 = _swiftEmptyArrayStorage;
      if (v102 >> 62) {
        goto LABEL_117;
      }
      goto LABEL_107;
    }
LABEL_101:
    v131[0] = v13;
    sub_1001BA628(0, v103 & ~(v103 >> 63), 0);
    if (v103 < 0)
    {
      __break(1u);
      goto LABEL_121;
    }
    uint64_t v104 = 0;
    uint64_t v105 = (void *)v131[0];
    do
    {
      swift_retain();
      uint64_t v10 = LegacyLockup.adamId.getter();
      swift_release();
      v131[0] = v105;
      unint64_t v9 = v105[2];
      unint64_t v106 = v105[3];
      if (v9 >= v106 >> 1)
      {
        sub_1001BA628(v106 > 1, v9 + 1, 1);
        uint64_t v105 = (void *)v131[0];
      }
      ++v104;
      v105[2] = v9 + 1;
      v105[v9 + 4] = v10;
    }
    while (v103 != v104);
    swift_bridgeObjectRelease();
    if (v102 >> 62)
    {
LABEL_117:
      swift_bridgeObjectRetain();
      uint64_t v107 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v107)
      {
LABEL_118:
        swift_bridgeObjectRelease();
        unint64_t v109 = _swiftEmptyArrayStorage;
LABEL_119:
        BOOL v113 = sub_10019F684(v105, v109);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return v116 & v113 & 1;
      }
      goto LABEL_108;
    }
LABEL_107:
    uint64_t v107 = *(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v107) {
      goto LABEL_118;
    }
LABEL_108:
    v131[0] = v13;
    sub_1001BA628(0, v107 & ~(v107 >> 63), 0);
    if ((v107 & 0x8000000000000000) == 0)
    {
      uint64_t v108 = 0;
      unint64_t v109 = (void *)v131[0];
      do
      {
        swift_retain();
        uint64_t v110 = LegacyLockup.adamId.getter();
        swift_release();
        v131[0] = v109;
        unint64_t v112 = v109[2];
        unint64_t v111 = v109[3];
        if (v112 >= v111 >> 1)
        {
          sub_1001BA628(v111 > 1, v112 + 1, 1);
          unint64_t v109 = (void *)v131[0];
        }
        ++v108;
        v109[2] = v112 + 1;
        v109[v112 + 4] = v110;
      }
      while (v107 != v108);
      swift_bridgeObjectRelease();
      goto LABEL_119;
    }
LABEL_121:
    __break(1u);
LABEL_122:
    uint64_t v36 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_16:
    uint64_t v25 = v120;
    swift_bridgeObjectRelease();
  }
  if ((v59 & 0xC000000000000001) != 0)
  {
LABEL_124:
    uint64_t v55 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_35;
  }
  if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v55 = *(void *)(v59 + 32);
    swift_retain();
LABEL_35:
    uint64_t v36 = (uint64_t)v117;
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  __break(1u);
  return result;
}

uint64_t sub_100263058(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v114 = a4;
  uint64_t v5 = sub_100054B78(&qword_1005FD568);
  uint64_t v111 = *(void *)(v5 - 8);
  uint64_t v112 = v5;
  __chkstk_darwin(v5);
  uint64_t v110 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_100054B78(&qword_1005FD570);
  uint64_t v90 = *(void *)(v92 - 8);
  uint64_t v7 = __chkstk_darwin(v92);
  id v87 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v88 = (char *)&v84 - v9;
  uint64_t v96 = sub_100054B78(&qword_1005FD578);
  uint64_t v94 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v89 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100054B78(&qword_1005FD580);
  uint64_t v95 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v91 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100054B78(&qword_1005FD588);
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  unint64_t v93 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_100054B78(&qword_1005FD590);
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v100 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100054B78(&qword_1005FD598);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v101 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100054B78(&qword_1005FD5A0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for ModernShelf.ItemPresentation();
  uint64_t v21 = *(void *)(v123 - 8);
  uint64_t v22 = __chkstk_darwin(v123);
  uint64_t v116 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v84 - v24;
  uint64_t v26 = type metadata accessor for ModernShelf();
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v122 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v84 - v31;
  __chkstk_darwin(v30);
  uint64_t v36 = *(void *)(a1 + 16);
  uint64_t v108 = v17;
  uint64_t v107 = v18;
  uint64_t v106 = v14;
  uint64_t v105 = v20;
  uint64_t v104 = v15;
  if (!v36)
  {
    uint64_t v50 = 0;
    goto LABEL_30;
  }
  BOOL v86 = (char *)&v84 - v33;
  Swift::Int v85 = v35;
  uint64_t v109 = v34;
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
  uint64_t v37 = v34 + 16;
  uint64_t v39 = v36;
  unint64_t v40 = a1 + ((*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64));
  uint64_t v119 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v120 = v38;
  uint64_t v121 = (void (*)(char *, uint64_t))v37;
  uint64_t v117 = *(void *)(v37 + 56);
  uint64_t v118 = (void (**)(char *, uint64_t))(v37 - 8);
  unint64_t v113 = a1;
  swift_bridgeObjectRetain();
  unint64_t v41 = v40;
  uint64_t v115 = v39;
  uint64_t v42 = v39;
  while (1)
  {
    v120(v32, v41, v26);
    ModernShelf.itemPresentation.getter();
    ModernShelf.ItemPresentation.itemKind.getter();
    unint64_t v43 = *v119;
    (*v119)(v25, v123);
    uint64_t v44 = ModernShelf.ItemKind.rawValue.getter();
    uint64_t v46 = v45;
    if (v44 == ModernShelf.ItemKind.rawValue.getter() && v46 == v47) {
      break;
    }
    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v48) {
      goto LABEL_10;
    }
    uint64_t v49 = *v118;
    (*v118)(v32, v26);
    v41 += v117;
    if (!--v42)
    {
      uint64_t v50 = 0;
      unint64_t v51 = v113;
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v52 = v109 + 32;
  uint64_t v53 = v86;
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v86, v32, v26);
  unint64_t v51 = ModernShelf.items.getter();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v52 - 24);
  v49(v53, v26);
  uint64_t v50 = sub_1003E461C(v51);
LABEL_11:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v54 = 0;
  while (1)
  {
    a1 = v54 + 1;
    if (__OFADD__(v54, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v120(v122, v40, v26);
    uint64_t v55 = v116;
    ModernShelf.itemPresentation.getter();
    ModernShelf.ItemPresentation.itemKind.getter();
    v43(v55, v123);
    uint64_t v56 = ModernShelf.ItemKind.rawValue.getter();
    unint64_t v51 = v57;
    if (v56 == ModernShelf.ItemKind.rawValue.getter() && v51 == v58)
    {
      a1 = v113;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v59) {
      break;
    }
    v49(v122, v26);
    ++v54;
    v40 += v117;
    if (a1 == v115)
    {
      a1 = v113;
      goto LABEL_29;
    }
  }
  a1 = v113;
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v60 = v85;
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v85, v122, v26);
  uint64_t v61 = ModernShelf.items.getter();
  v49(v60, v26);
  unint64_t v51 = (unint64_t)sub_1003E4A88(v61);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v51) {
    goto LABEL_30;
  }
  unint64_t v43 = (void (*)(char *, uint64_t))(v51 & 0xFFFFFFFFFFFFFF8);
  if (v51 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v64) {
      goto LABEL_29;
    }
LABEL_23:
    if ((v51 & 0xC000000000000001) != 0)
    {
      uint64_t v63 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*((void *)v43 + 2))
      {
        __break(1u);
        return result;
      }
      uint64_t v63 = *(void *)(v51 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  if (*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_23;
  }
LABEL_29:
  swift_bridgeObjectRelease();
LABEL_30:
  uint64_t v63 = 0;
LABEL_31:
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    goto LABEL_37;
  }
  if (v50)
  {
    if (v63)
    {
      uint64_t v124 = v50;
      swift_retain();
      sub_100054B78((uint64_t *)&unk_1005F71D0);
      sub_100044200((unint64_t *)&unk_1005FD5C0, (uint64_t *)&unk_1005F71D0);
      uint64_t v65 = v87;
      Sequence.publisher.getter();
      char v66 = v88;
      uint64_t v67 = v92;
      Publishers.Sequence.filter(_:)();
      uint64_t v122 = (char *)v50;
      uint64_t v121 = *(void (**)(char *, uint64_t))(v90 + 8);
      v121(v65, v67);
      swift_retain();
      static Subscribers.Demand.unlimited.getter();
      sub_100054B78(&qword_1005F8CA0);
      sub_100044200(&qword_1005FD5D0, &qword_1005FD570);
      uint64_t v123 = v63;
      sub_100044200((unint64_t *)&unk_1005F8CB0, &qword_1005F8CA0);
      int v68 = v89;
      Publisher<>.flatMap<A>(maxPublishers:_:)();
      swift_release();
      v121(v66, v67);
      sub_10004D29C(0, (unint64_t *)&qword_1005FD240);
      sub_100044200(&qword_1005FD5D8, &qword_1005FD578);
      char v69 = v91;
      uint64_t v70 = v96;
      Publisher.compactMap<A>(_:)();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v68, v70);
      sub_100044200(&qword_1005FD5E0, &qword_1005FD580);
      uint64_t v71 = v93;
      uint64_t v72 = v97;
      Publisher.collect()();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v69, v72);
      sub_100044200(&qword_1005FD5E8, &qword_1005FD588);
      char v73 = v100;
      uint64_t v74 = v99;
      Publisher.filter(_:)();
      (*(void (**)(char *, uint64_t))(v98 + 8))(v71, v74);
      uint64_t v75 = swift_allocObject();
      *(void *)(v75 + 16) = v122;
      *(void *)(v75 + 24) = a1;
      swift_bridgeObjectRetain();
      sub_100054B78(&qword_1005FD5A8);
      sub_100044200(&qword_1005FD5F0, &qword_1005FD590);
      uint64_t v76 = v101;
      uint64_t v77 = v103;
      Publisher.map<A>(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v102 + 8))(v73, v77);
      uint64_t v124 = 0;
      unint64_t v125 = a1;
      sub_100044200(&qword_1005FD5F8, &qword_1005FD598);
      uint64_t v78 = v105;
      uint64_t v79 = v106;
      Publisher.replaceEmpty(with:)();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v76, v79);
      sub_100044200((unint64_t *)&unk_1005FD600, &qword_1005FD5A0);
      uint64_t v80 = v108;
      uint64_t v81 = Publisher.eraseToAnyPublisher()();
      swift_release();
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v78, v80);
      return v81;
    }
    swift_release();
LABEL_37:
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v124 = 0;
  unint64_t v125 = a1;
  swift_bridgeObjectRetain();
  sub_100054B78(&qword_1005FD5A8);
  uint64_t v82 = v110;
  Just.init(_:)();
  sub_100044200((unint64_t *)&unk_1005FD5B0, &qword_1005FD568);
  uint64_t v83 = v112;
  uint64_t v81 = Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v111 + 8))(v82, v83);
  return v81;
}

uint64_t sub_100264040()
{
  uint64_t v0 = LibraryEpisodeLockup.uuid.getter();
  uint64_t v2 = v1;
  if (ShowHeader.episodeToPlay.getter())
  {
    uint64_t v3 = Episode.uuid.getter();
    uint64_t v5 = v4;
    swift_release();
    if (v0 == v3 && v2 == v5)
    {
      swift_bridgeObjectRelease_n();
      char v8 = 0;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v8 = v7 ^ 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    char v8 = 1;
  }
  return v8 & 1;
}

uint64_t sub_10026410C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v3 = a1 + 104;
  uint64_t v4 = *(void *)(a1 + 144);
  long long v5 = *(_OWORD *)(a1 + 40);
  v12[0] = *(_OWORD *)(a1 + 24);
  v12[1] = v5;
  v12[2] = *(_OWORD *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v6 = a1 + 160;
  int v7 = *(unsigned __int8 *)(a1 + 16);
  char v8 = sub_100260B38();
  uint64_t v10 = sub_100380CA0(v3, v4, 0, 1, v7, v12, v6, (uint64_t)v8, v9);
  uint64_t result = swift_release();
  *a2 = v10;
  return result;
}

uint64_t sub_1002641C4()
{
  return Collection.isNotEmpty.getter() & 1;
}

uint64_t sub_100264244@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  if (!(a2 >> 62))
  {
    uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    if (v7 < 0) {
      goto LABEL_33;
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_24;
  }
LABEL_3:
  if (v8 < 1)
  {
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v36 = a3;
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    do
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v12 = LegacyLockup.title.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      if (v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_10004CEAC(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v16 = *((void *)v10 + 2);
        unint64_t v15 = *((void *)v10 + 3);
        if (v16 >= v15 >> 1) {
          uint64_t v10 = sub_10004CEAC((char *)(v15 > 1), v16 + 1, 1, v10);
        }
        *((void *)v10 + 2) = v16 + 1;
        uint64_t v11 = &v10[16 * v16];
        *((void *)v11 + 4) = v12;
        *((void *)v11 + 5) = v14;
      }
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    do
    {
      swift_retain();
      uint64_t v19 = LegacyLockup.title.getter();
      uint64_t v21 = v20;
      swift_release();
      if (v21)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_10004CEAC(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v23 = *((void *)v10 + 2);
        unint64_t v22 = *((void *)v10 + 3);
        if (v23 >= v22 >> 1) {
          uint64_t v10 = sub_10004CEAC((char *)(v22 > 1), v23 + 1, 1, v10);
        }
        *((void *)v10 + 2) = v23 + 1;
        uint64_t v18 = &v10[16 * v23];
        *((void *)v18 + 4) = v19;
        *((void *)v18 + 5) = v21;
      }
      ++v17;
    }
    while (v8 != v17);
  }
  swift_bridgeObjectRelease();
  a3 = v36;
  if (v7 < 0) {
    goto LABEL_33;
  }
LABEL_25:
  if ((v7 & 0x4000000000000000) == 0)
  {
    uint64_t v24 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_27;
  }
LABEL_33:
  swift_bridgeObjectRetain();
  unint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v24 = (uint64_t)sub_10025BFA4(v35);
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v37 = v24;
  sub_10025F1BC(&v37, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v37;
  swift_bridgeObjectRetain();
  if (v25 < 0 || (v25 & 0x4000000000000000) != 0)
  {
    sub_100054B78(&qword_1005F7E20);
    unint64_t v26 = _bridgeCocoaArray<A>(_:)();
    swift_release();
  }
  else
  {
    unint64_t v26 = v25;
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  }
  swift_release();
  id v27 = [self mainBundle];
  v39._object = (void *)0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0x5345444F53495045;
  v28._object = (void *)0xE800000000000000;
  v29._uint64_t countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v39._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v39);

  id v30 = objc_allocWithZone((Class)CPListSection);
  sub_1001C04A0(v26);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v33 = [v30 initWithItems:isa header:v32 sectionIndexTitle:0];

  *a4 = v33;
  a4[1] = a3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100264638(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FD528);
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  __chkstk_darwin(v4);
  uint64_t v72 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_1005FD530);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for EpisodePlayState();
  __chkstk_darwin(v10 - 8);
  char v69 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for ModernShelf.ItemPresentation();
  uint64_t v12 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for ModernShelf();
  uint64_t v71 = *(void *)(v78 - 8);
  uint64_t v15 = __chkstk_darwin(v78);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v70 = (char *)&v63 - v18;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v65 = v9;
    uint64_t v20 = *(void *)(a2 + 16);
    if (!v20)
    {
      swift_release();
      goto LABEL_28;
    }
    uint64_t v66 = Strong;
    uint64_t v63 = v7;
    uint64_t v64 = v6;
    int v68 = a1;
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
    uint64_t v22 = a2;
    uint64_t v23 = a2 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
    uint64_t v24 = (void (**)(char *, uint64_t))(v71 + 8);
    uint64_t v75 = *(void *)(v71 + 72);
    uint64_t v76 = v21;
    uint64_t v67 = v22;
    swift_bridgeObjectRetain();
    uint64_t v25 = v78;
    while (1)
    {
      v76(v17, v23, v25);
      ModernShelf.itemPresentation.getter();
      ModernShelf.ItemPresentation.itemKind.getter();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v77);
      uint64_t v26 = ModernShelf.ItemKind.rawValue.getter();
      uint64_t v28 = v27;
      if (v26 == ModernShelf.ItemKind.rawValue.getter() && v28 == v29)
      {
        a2 = v67;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v30) {
        break;
      }
      uint64_t v25 = v78;
      (*v24)(v17, v78);
      v23 += v75;
      if (!--v20)
      {
        swift_release();
        a2 = v67;
        swift_bridgeObjectRelease();
LABEL_22:
        a1 = v68;
        goto LABEL_28;
      }
    }
    a2 = v67;
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v31 = v70;
    uint64_t v32 = v71 + 32;
    id v33 = v17;
    uint64_t v34 = v78;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v33, v78);
    uint64_t v35 = ModernShelf.items.getter();
    (*(void (**)(char *, uint64_t))(v32 - 24))(v31, v34);
    unint64_t v36 = (unint64_t)sub_1003E4A88(v35);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v36)
    {
      swift_release();
      goto LABEL_22;
    }
    a1 = v68;
    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v59) {
        goto LABEL_15;
      }
    }
    else if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_15:
      if ((v36 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        swift_retain();
      }
      swift_bridgeObjectRelease();
      uint64_t v38 = ShowHeader.episodeToPlay.getter();
      if (!v38)
      {
        swift_release();
        swift_release();
        goto LABEL_28;
      }
      uint64_t v39 = v38;
      uint64_t v40 = v66;
      sub_100260E14();
      swift_retain();
      dispatch thunk of SmartPlayButtonController.apply(model:)();
      swift_release();
      swift_retain();
      Episode.uuid.getter();
      uint64_t v41 = EpisodeStateController.stateMachine(for:)();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v42 = (uint64_t)v69;
      uint64_t v78 = v41;
      dispatch thunk of EpisodeStateMachine.currentState.getter();
      uint64_t v43 = dispatch thunk of SmartPlayButtonController.buttonTitle(for:)();
      uint64_t v45 = v44;
      sub_10022B6A0(v42, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
      *(void *)&long long v80 = v43;
      *((void *)&v80 + 1) = v45;
      sub_1001AB688();
      if (Collection.isNotEmpty.getter())
      {
        uint64_t v46 = *(void *)(v40 + 144);
        long long v47 = *(_OWORD *)(v40 + 40);
        long long v80 = *(_OWORD *)(v40 + 24);
        long long v81 = v47;
        long long v82 = *(_OWORD *)(v40 + 56);
        uint64_t v83 = *(void *)(v40 + 72);
        uint64_t v77 = v39;
        int v48 = *(unsigned __int8 *)(v40 + 16);
        swift_retain();
        uint64_t v49 = sub_100260B38();
        uint64_t v51 = sub_100378BF0(v40 + 104, v46, v43, v45, v48, (uint64_t)&v80, (void *)(v40 + 160), (uint64_t)v49, v50);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v79 = v51;
        uint64_t v52 = swift_allocObject();
        uint64_t v53 = v68;
        uint64_t v54 = v67;
        *(void *)(v52 + 16) = v68;
        *(void *)(v52 + 24) = v54;
        id v55 = v53;
        swift_bridgeObjectRetain();
        sub_100054B78((uint64_t *)&unk_1005FD550);
        sub_100054B78(&qword_1005FD538);
        sub_100044200(&qword_1005F8C28, (uint64_t *)&unk_1005FD550);
        uint64_t v56 = v65;
        Publisher.map<A>(_:)();
        swift_release();
        swift_release();
        sub_100044200(&qword_1005FD560, &qword_1005FD530);
        uint64_t v57 = v64;
        uint64_t v58 = Publisher.eraseToAnyPublisher()();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v57);
        return v58;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_27;
    }
    swift_release();
LABEL_27:
    swift_bridgeObjectRelease();
  }
LABEL_28:
  *(void *)&long long v80 = a1;
  *((void *)&v80 + 1) = a2;
  *(void *)&long long v81 = 0;
  id v60 = a1;
  swift_bridgeObjectRetain();
  sub_100054B78(&qword_1005FD538);
  uint64_t v61 = v72;
  Just.init(_:)();
  sub_100044200((unint64_t *)&unk_1005FD540, &qword_1005FD528);
  uint64_t v62 = v74;
  uint64_t v58 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v61, v62);
  return v58;
}

id sub_100264F18@<X0>(id *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v6 = *a1;
  *a4 = a2;
  a4[1] = a3;
  a4[2] = v6;
  id v4 = a2;
  swift_bridgeObjectRetain();

  return v6;
}

uint64_t sub_100264F70@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10026567C(*a1, a1[2]);
  *a2 = result;
  return result;
}

BOOL sub_100264FA4(void *a1, uint64_t a2)
{
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v3 == a2;
}

uint64_t sub_100265014()
{
  return sub_100261558();
}

uint64_t sub_100265038()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t sub_1002650B8()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_1002650E0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100265118(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100263058(a1, a2, a3, v3);
}

uint64_t sub_100265120()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100265158@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v2 + 16))(*a1, a1[1], a1[2]);
  *a2 = result;
  return result;
}

uint64_t sub_100265194(void *a1, uint64_t a2)
{
  return sub_100264638(a1, a2);
}

uint64_t sub_10026519C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v2 + 16))(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1002651D4()
{
  return swift_deallocObject();
}

BOOL sub_1002651E4(void *a1)
{
  return sub_100264FA4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002651EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6 = v5;
  LODWORD(v31) = a4;
  uint64_t v26 = a3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for SmartPlayPlatformContext();
  uint64_t v12 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for SmartPlayContext();
  uint64_t v15 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v32[0] = 0;
  *((void *)&v32[0] + 1) = 0xE000000000000000;
  sub_100054B78(&qword_1005FBBD8);
  swift_allocObject();
  *(void *)(v5 + 200) = CurrentValueSubject.init(_:)();
  sub_100054B78((uint64_t *)&unk_1005F8AE0);
  swift_allocObject();
  *(void *)(v5 + 208) = PassthroughSubject.init()();
  sub_100054B78((uint64_t *)&unk_1005F8B00);
  swift_allocObject();
  uint64_t v18 = CurrentValueSubject.init(_:)();
  long long v19 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a5;
  *(void *)(v5 + 216) = v18;
  *(void *)(v5 + 224) = 2;
  *(void *)(v5 + 240) = 0;
  *(void *)(v5 + 248) = 0;
  *(void *)(v5 + 232) = 0;
  *(unsigned char *)(v5 + 16) = v31;
  *(_OWORD *)(v5 + 40) = v19;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a5 + 32);
  uint64_t v20 = *(void *)(a5 + 48);
  uint64_t v21 = v26;
  *(void *)(v5 + 72) = v20;
  type metadata accessor for LibraryShowProvider();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v31 = a2;
  *(void *)(v5 + 80) = LibraryShowProvider.init(asPartOf:showUUID:)();
  sub_100054B78(&qword_1005FD620);
  BaseObjectGraph.inject<A>(_:)();
  *(_OWORD *)(v5 + 88) = v32[0];
  sub_100054B78((uint64_t *)&unk_1005F8B10);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v32, v5 + 104);
  sub_100054B78(&qword_1005F7050);
  BaseObjectGraph.inject<A>(_:)();
  *(void *)(v5 + 144) = *(void *)&v32[0];
  sub_100054B78((uint64_t *)&unk_1005FBBF0);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v32, v5 + 160);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for SmartPlayContext.showPage(_:), v27);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for SmartPlayPlatformContext.carPlay(_:), v28);
  type metadata accessor for SmartPlayButtonController();
  swift_allocObject();
  swift_retain();
  *(void *)(v5 + 152) = SmartPlayButtonController.init(button:context:platform:objectGraph:)();
  swift_retain();
  LibraryShowProvider.loadPageContent()();
  swift_release();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.carPlay.getter();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "CarPlayLibraryShowProvider: Loading content.", v24, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  sub_100260BC0(v31, v21);
  return v6;
}

uint64_t sub_10026567C(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
  if (a2)
  {
    id v8 = a2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (a1)
  {
    id v9 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.carPlay.getter();
  unint64_t v10 = v31;
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  int v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v11, (os_log_type_t)v12))
  {

    swift_bridgeObjectRelease_n();
LABEL_24:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess();
    return v31;
  }
  int v28 = v12;
  uint64_t v29 = v7;
  uint64_t v13 = swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 134218240;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  unint64_t v30 = v14;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v13 + 12) = 2048;
  unint64_t v30 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v10 >> 62))
  {
    uint64_t v15 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v15) {
      goto LABEL_14;
    }
LABEL_26:
    swift_bridgeObjectRelease_n();
    unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_22:
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v28, "CarPlayLibraryShowProvider: Returned sections count %ld and total section items count %ld.", (uint8_t *)v13, 0x16u);
      swift_slowDealloc();

      uint64_t v7 = v29;
      goto LABEL_24;
    }
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v15 = result;
  if (!result) {
    goto LABEL_26;
  }
LABEL_14:
  if (v15 >= 1)
  {
    uint64_t v25 = v11;
    uint64_t v26 = v5;
    uint64_t v27 = v4;
    uint64_t v17 = 0;
    do
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v10 + 8 * v17 + 32);
      }
      long long v19 = v18;
      ++v17;
      id v20 = [v18 items];
      sub_100054B78(&qword_1005F7E20);
      unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1001B187C(v21);
    }
    while (v15 != v17);
    swift_bridgeObjectRelease_n();
    unint64_t v22 = v30;
    uint64_t v5 = v26;
    uint64_t v4 = v27;
    uint64_t v11 = v25;
    if (!(v30 >> 62)) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_100265AE0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id sub_100265B20@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_100264F18(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100265B28()
{
  return sub_100260F0C();
}

uint64_t sub_100265B30()
{
  return sub_100264040();
}

uint64_t sub_100265B38@<X0>(uint64_t *a1@<X8>)
{
  return sub_10026410C(v1, a1);
}

uint64_t sub_100265B40()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100265B80@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100264244(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100265B88()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100265BC0(unsigned char *a1)
{
  return sub_100261010(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100265BC8(uint64_t a1)
{
  return sub_1002612B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_100265BDC(uint64_t a1@<X8>)
{
}

void sub_100265C0C(uint64_t a1@<X8>)
{
}

void sub_100265C44(uint64_t a1@<X8>)
{
}

void sub_100265C80(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v5 = self;
  swift_bridgeObjectRetain();
  id v6 = [v5 mainBundle];
  v10._uint64_t countAndFlagsBits = 0xD000000000000025;
  v10._object = (void *)0x80000001004D6850;
  v7._object = (void *)0x80000001004D6830;
  v7._uint64_t countAndFlagsBits = 0xD000000000000010;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v10);

  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  *(Swift::String *)(a1 + 24) = v9;
}

void sub_100265D58(void *a1@<X8>)
{
  swift_beginAccess();
  if (*(void *)(v1 + 24)
    && (type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(), swift_dynamicCastClass()))
  {
    unint64_t v3 = 0xD000000000000014;
    id v4 = [self mainBundle];
    v14._object = (void *)0xAE00A680E2747865;
    v5._object = (void *)0x80000001004D68D0;
    v5._uint64_t countAndFlagsBits = 0xD000000000000014;
    v6._uint64_t countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v14._uint64_t countAndFlagsBits = 0x54207463656C6553;
    Swift::String v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v14);
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
    object = v7._object;
    unint64_t v10 = 0x80000001004D68F0;
  }
  else
  {
    id v4 = [self mainBundle];
    v15._object = (void *)0xEF7470697263736ELL;
    v11._uint64_t countAndFlagsBits = 0x4152545F57454956;
    v11._object = (void *)0xEF5450495243534ELL;
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v15._uint64_t countAndFlagsBits = 0x6172542077656956;
    Swift::String v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v4, v12, v15);
    uint64_t countAndFlagsBits = v13._countAndFlagsBits;
    object = v13._object;
    unint64_t v3 = 0x75622E65746F7571;
    unint64_t v10 = 0xEC000000656C6262;
  }

  *a1 = 0;
  a1[1] = v3;
  a1[2] = v10;
  a1[3] = countAndFlagsBits;
  a1[4] = object;
}

void sub_100265F14(uint64_t a1@<X8>)
{
}

void sub_100265F4C(uint64_t a1@<X8>)
{
}

void sub_100265F80(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v12 = *(void *)(v5 + 24);
  uint64_t v11 = *(void *)(v5 + 32);
  Swift::String v13 = self;
  swift_bridgeObjectRetain();
  id v14 = [v13 mainBundle];
  v18._object = a4;
  v15._uint64_t countAndFlagsBits = a1;
  v15._object = a2;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = a3;
  Swift::String v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v18);

  *(void *)a5 = 0;
  *(void *)(a5 + 8) = v12;
  *(void *)(a5 + 16) = v11;
  *(Swift::String *)(a5 + 24) = v17;
}

uint64_t sub_100266048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void))(a2 + 32))();
  uint64_t v8 = v7;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  *a3 = 0;
  a3[1] = v6;
  a3[2] = v8;
  a3[3] = result;
  a3[4] = v10;
  return result;
}

uint64_t sub_1002660C8()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_adamID + 8) & 1) != 0
    || *(unsigned char *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_interestState) == 4
    || (uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC8Podcasts25UndoFavoriteContextAction_configuration),
        swift_beginAccess(),
        *v1)
    && (type metadata accessor for PodcastContextActionConfiguration(0), swift_dynamicCastClass()))
  {
    char v2 = 0;
  }
  else
  {
    uint64_t v4 = InterestState.rawValue.getter();
    uint64_t v6 = v5;
    if (v4 == InterestState.rawValue.getter() && v6 == v7) {
      char v2 = 1;
    }
    else {
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v2 & 1;
}

BOOL sub_1002661D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for InteractionContext.Page();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for InteractionContext();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(v0 + 16)
    && (swift_retain(),
        dispatch thunk of ContextActionsConfiguration.context.getter(),
        swift_release(),
        InteractionContext.page.getter(),
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5),
        char v9 = InteractionContext.Page.isShowPage.getter(),
        sub_1001B4BB0((uint64_t)v4),
        (v9 & 1) != 0))
  {
    return 0;
  }
  else
  {
    return *(void *)(v1 + 24) != 0;
  }
}

uint64_t sub_10026634C()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_adamID + 8) & 1) != 0
    || *(unsigned char *)(v0 + OBJC_IVAR____TtC8Podcasts28UndoSuggestLessContextAction_interestState) == 4)
  {
    char v1 = 0;
  }
  else
  {
    uint64_t v2 = InterestState.rawValue.getter();
    uint64_t v4 = v3;
    if (v2 == InterestState.rawValue.getter() && v4 == v5) {
      char v1 = 1;
    }
    else {
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v1 & 1;
}

uint64_t sub_100266408()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1 || *(unsigned char *)(v1 + 32)) {
    return 0;
  }
  uint64_t result = swift_bridgeObjectRetain();
  if (result)
  {
    uint64_t v3 = *(void *)(result + 16);
    swift_bridgeObjectRelease();
    return v3 != 0;
  }
  return result;
}

uint64_t sub_100266458()
{
  uint64_t v1 = type metadata accessor for InteractionContext.Page();
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InteractionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    if (sub_100401A34())
    {
      swift_beginAccess();
      uint64_t v8 = *(void *)(v0 + 40);
      if (v8)
      {
        swift_retain();
        dispatch thunk of ContextActionsConfiguration.context.getter();
        swift_release();
        InteractionContext.page.getter();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        LOBYTE(v8) = InteractionContext.Page.isTranscriptView.getter();
        swift_release();
        sub_1001B4BB0((uint64_t)v3);
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      swift_release();
      LOBYTE(v8) = 0;
    }
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  return v8 & 1;
}

uint64_t sub_10026660C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_100266624(uint64_t result)
{
  uint64_t v2 = (uint64_t (*)(void))result;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    BOOL v4 = *(unsigned char *)(v3 + 32) || *(void *)(v3 + 24) == 0;
    if (!v4 && *(void *)(v1 + 80))
    {
      sub_1001DCD9C(*(void *)(v3 + 16), *(void *)(v3 + 24), 0);
      swift_retain();
      dispatch thunk of EpisodeDeletionActionProvider.deleteEpisodesFromStations(episodeUuids:stationUuids:)();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  if (v2) {
    return v2();
  }
  return result;
}

uint64_t sub_1002666D0(uint64_t (*a1)(uint64_t))
{
  sub_1002E9E24();
  id v3 = [self sharedInstance];
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v4;
  void v5[3] = sub_1002875F8;
  v5[4] = 0;
  aBlock[4] = sub_10020C75C;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10026924C;
  void aBlock[3] = &unk_10055C650;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain_n();
  swift_release();
  [v3 reportAConcernURLWithCompletion:v6];
  _Block_release(v6);

  uint64_t result = swift_release();
  if (a1) {
    return a1(result);
  }
  return result;
}

uint64_t sub_10026682C(uint64_t result)
{
  uint64_t v2 = (uint64_t (*)(void))result;
  uint64_t v3 = v1[3];
  if (v3 && !*(unsigned char *)(v3 + 32))
  {
    uint64_t v5 = *(void *)(v3 + 16);
    uint64_t v4 = *(void *)(v3 + 24);
    swift_retain();
    sub_1001DCD9C(v5, v4, 0);
    swift_bridgeObjectRelease();
    sub_100041A98(v1 + 4, v1[7]);
    dispatch thunk of LibraryActionControllerProtocol.removeFromUpNext(uuids:)();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v2) {
      return result;
    }
  }
  else if (!result)
  {
    return result;
  }
  return v2();
}

uint64_t sub_1002668E8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  if (a1) {
    return a1(result);
  }
  return result;
}

uint64_t sub_100266940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  swift_retain();
  dispatch thunk of ContextAction.configuration.setter();
  type metadata accessor for PodcastContextActionConfiguration(0);
  if (swift_dynamicCastClass())
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
    swift_retain();
    uint64_t v7 = swift_retain();
    v6(v7, a2, a3);
    swift_release();
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);

  return v8(a2, v5);
}

void *sub_100266A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch thunk of ContextAction.apply(configuration:)();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3) & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  type metadata accessor for CopyLinkEpisodeContextAction();
  if (swift_dynamicCastClass()) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = (uint64_t (*)())swift_allocObject();
  *((void *)v8 + 2) = a2;
  *((void *)v8 + 3) = a3;
  *((void *)v8 + 4) = v3;
  *((void *)v8 + 5) = a1;
  char v9 = (objc_class *)type metadata accessor for ContextActionActivity();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_contextActionItem];
  *(void *)uint64_t v11 = v3;
  *((void *)v11 + 1) = a3;
  uint64_t v12 = (uint64_t (**)())&v10[OBJC_IVAR____TtC8Podcasts21ContextActionActivity_performHandler];
  char *v12 = sub_1002699BC;
  v12[1] = v8;
  v16.receiver = v10;
  v16.super_class = v9;
  swift_unknownObjectRetain_n();
  swift_retain();
  id v13 = [super init];
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10046D060;
  *(void *)(v14 + 32) = v13;
  uint64_t v15 = v14;
  specialized Array._endMutation()();
  return (void *)v15;
}

uint64_t sub_100266B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100054B78(&qword_1005F9A58);
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ContextAction.apply(configuration:)();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v16[0] = v11;
  v16[1] = v10;
  sub_1002672F0(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  uint64_t v12 = type metadata accessor for ContextActionType();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) == 1)
  {
    sub_100054B1C((uint64_t)v9, &qword_1005F9A58);
  }
  else
  {
    ContextActionType.actionIdentifier.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(a2, a3);
  sub_10004D29C(0, (unint64_t *)&qword_1005FAAD8);
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a2;
  v15[3] = a3;
  v15[4] = v3;
  void v15[5] = a1;
  swift_unknownObjectRetain();
  swift_retain();
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
}

id sub_100266E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100054B78(&qword_1005F9A58);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ContextAction.apply(configuration:)();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3) & 1) == 0) {
    return 0;
  }
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(a3 + 80))(&aBlock, a2, a3);
  uint64_t v11 = v28;
  v24[2] = v27;
  uint64_t v25 = aBlock;
  uint64_t v12 = v30;
  v24[1] = v29;
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  uint64_t v13 = type metadata accessor for ContextActionType();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    sub_100054B1C((uint64_t)v10, &qword_1005F9A58);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = sub_100268988() & 1;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v13);
  }
  Swift::String v17 = v25;
  Swift::String v18 = (void *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  _OWORD v18[4] = v4;
  v18[5] = a1;
  v18[6] = v15;
  swift_unknownObjectRetain();
  swift_retain();
  if (v12)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  unint64_t v30 = sub_100267F78;
  unint64_t v31 = v18;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  int v28 = sub_10026835C;
  uint64_t v29 = &unk_10055C510;
  id v20 = _Block_copy(&aBlock);
  id v16 = [self contextualActionWithStyle:v15 title:v19 handler:v20];

  _Block_release(v20);
  swift_release();
  [v16 setBackgroundColor:v17];
  if (v11)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [self systemImageNamed:v21];
  }
  else
  {
    id v22 = sub_1002672F0(a2, a3);
  }
  [v16 setImage:v22];

  return v16;
}

uint64_t sub_100267180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  swift_retain();
  dispatch thunk of ContextAction.configuration.setter();
  type metadata accessor for NowPlayingContextActionConfiguration();
  if (swift_dynamicCastClass())
  {
    swift_retain();
    uint64_t v6 = sub_10020F810();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(v6, a2, a3);
  }
  else
  {
    type metadata accessor for EpisodeContextActionConfiguration(0);
    if (swift_dynamicCastClass())
    {
      uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
      swift_retain();
      uint64_t v8 = swift_retain();
      v7(v8, a2, a3);
    }
    else
    {
      type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
      uint64_t v9 = swift_dynamicCastClass();
      if (!v9) {
        goto LABEL_9;
      }
      uint64_t v10 = *(void *)(v9 + qword_1005FAD60);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
      swift_retain();
      swift_retain();
      v11(v10, a2, a3);
    }
  }
  swift_release();
LABEL_9:
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);

  return v12(a2, v5);
}

id sub_1002672F0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 32))();
  if (!v2) {
    return 0;
  }
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [self _systemImageNamed:v3];

  if (!v4) {
    return 0;
  }
  id v5 = [v4 imageWithRenderingMode:2];

  return v5;
}

double sub_1002673A0@<D0>(uint64_t a1@<X8>)
{
  return sub_1002697C4(0xD00000000000001ALL, (void *)0x80000001004D67C0, a1);
}

uint64_t sub_1002673C0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_100220CF4);
}

uint64_t sub_1002673D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSLogger();
  uint64_t v77 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v76 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for ActionMetricsBehavior();
  uint64_t v68 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v67 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for PresentationSource.Position();
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v64 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100054B78(&qword_1005FAAB8);
  __chkstk_darwin(v10 - 8);
  uint64_t v75 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for ContextMetricsActionContext();
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v73 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MetricsLabel();
  uint64_t v70 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100054B78((uint64_t *)&unk_100605DC0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v74 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v20 = (char *)&v54 - v19;
  uint64_t result = sub_100268430();
  if (!v24) {
    return result;
  }
  uint64_t v62 = v22;
  uint64_t v63 = result;
  uint64_t v78 = v23;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 112))(a1, a2, a3))
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v61 = v6;
  uint64_t v59 = a1;
  dispatch thunk of ContextActionsConfiguration.presentationSource.getter();
  uint64_t v25 = type metadata accessor for PresentationSource();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v58 = v26 + 48;
  uint64_t v57 = v27;
  uint64_t result = v27(v20, 1, v25);
  if (result == 1)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  uint64_t v28 = PresentationSource.viewController.getter();
  if (!v28)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v25);
LABEL_18:
    uint64_t v44 = v76;
    static OSLogger.actions.getter();
    sub_100054B78((uint64_t *)&unk_100603DC0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10046D010;
    LogMessage.init(stringLiteral:)();
    uint64_t v45 = v61;
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v44, v45);
  }
  uint64_t v29 = (void *)v28;
  unint64_t v30 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v60 = v25;
  uint64_t v56 = v26 + 8;
  id v55 = v30;
  v30(v20, v25);
  uint64_t v31 = UIResponder.nearestActionRunner.getter();
  id v33 = v32;

  if (!v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v76 = v33;
  uint64_t v77 = v31;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  MetricsLabel.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v13);
  type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
  if (swift_dynamicCastClass()
    || (type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration(), swift_dynamicCastClass()))
  {
    static MetricsTargetType.transcriptText.getter();
  }
  else
  {
    static MetricsTargetType.button.getter();
  }
  uint64_t v35 = v74;
  uint64_t v34 = (uint64_t)v75;
  unint64_t v36 = v73;
  uint64_t v37 = swift_dynamicCastClass();
  uint64_t v38 = (unsigned int *)&enum case for ContextMetricsActionContext.contextual(_:);
  if (v37) {
    uint64_t v38 = (unsigned int *)&enum case for ContextMetricsActionContext.selectionMenu(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v71 + 104))(v36, *v38, v72);
  uint64_t v39 = type metadata accessor for ContextMetricsAction();
  swift_allocObject();
  uint64_t v40 = ContextMetricsAction.init(title:targetId:podcastStoreId:targetType:actionContext:)();
  type metadata accessor for ActionRunnerOptions();
  ContextActionsConfiguration.objectGraph.getter();
  BaseObjectGraph.__allocating_init(_:)();
  dispatch thunk of ContextActionsConfiguration.previewModel.getter();
  uint64_t v41 = v81;
  if (v81)
  {
    uint64_t v42 = sub_100041A98(v80, v81);
    *((void *)&v84 + 1) = v41;
    uint64_t v43 = sub_10004A244((uint64_t *)&v83);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(v43, v42, v41);
    sub_10004D2D8((uint64_t)v80);
  }
  else
  {
    sub_100054B1C((uint64_t)v80, (uint64_t *)&unk_100600590);
    long long v83 = 0u;
    long long v84 = 0u;
  }
  uint64_t v46 = v66;
  uint64_t v47 = v65;
  dispatch thunk of ContextActionsConfiguration.presentationSource.getter();
  uint64_t result = v57(v35, 1, v60);
  if (result == 1) {
    goto LABEL_28;
  }
  PresentationSource.position.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v34, 1, v46))
  {
    sub_100054B1C(v34, &qword_1005FAAB8);
    v55(v35, v60);
    int v48 = 0;
  }
  else
  {
    uint64_t v49 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v64, v34, v46);
    sub_100054B1C(v34, &qword_1005FAAB8);
    v55(v35, v60);
    int v48 = (void *)PresentationSource.Position.view.getter();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
  }
  sub_10026994C((uint64_t)&v83, (uint64_t)v79);
  id v50 = v48;
  ActionOrigin.init(sender:view:)();
  ActionRunnerOptions.withActionOrigin(_:)();
  sub_100054B1C((uint64_t)v80, (uint64_t *)&unk_100600670);

  swift_release();
  sub_100054B1C((uint64_t)&v83, &qword_1005F5D30);
  swift_getObjectType();
  uint64_t v81 = v39;
  uint64_t v82 = sub_10004AD34(&qword_1005FAAC0, (void (*)(uint64_t))&type metadata accessor for ContextMetricsAction);
  v80[0] = v40;
  uint64_t v51 = v68;
  uint64_t v52 = v67;
  uint64_t v53 = v69;
  (*(void (**)(char *, void, uint64_t))(v68 + 104))(v67, enum case for ActionMetricsBehavior.fromAction(_:), v69);
  swift_retain();
  ActionRunner.perform(_:withMetrics:asPartOf:)();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
  return sub_10004D2D8((uint64_t)v80);
}

uint64_t sub_100267EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002673D8(a6, a8, a9);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a7;
  v13[3] = a3;
  void v13[4] = a4;
  uint64_t v14 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(a9 + 96);
  swift_retain();
  v14(sub_10020C294, v13, a8, a9);

  return swift_release();
}

uint64_t sub_100267F70()
{
  return sub_100016C84();
}

uint64_t sub_100267F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100267EA4(a1, a2, a3, a4, v4[4], v4[5], v4[6], v4[2], v4[3]);
}

uint64_t sub_100267FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v22 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v22 - v14;
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  uint64_t v16 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v24;
  *(void *)(v18 + 16) = v23;
  *(void *)(v18 + 24) = v19;
  aBlock[4] = sub_100269920;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055C5B0;
  id v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10004AD34((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10002FBEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v22);
}

void sub_10026835C(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  swift_retain();
  id v10 = a2;
  id v9 = a3;
  v6(v10, v9, sub_1002691C0, v8);
  swift_release();
  swift_release();
}

uint64_t sub_100268430()
{
  uint64_t v1 = v0;
  type metadata accessor for ChannelContextActionConfiguration(0);
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + qword_10061AA48);
    unint64_t v4 = *(void *)(v2 + qword_10061AA48 + 8);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
    goto LABEL_41;
  }
  swift_getObjectType();
  uint64_t v7 = swift_conformsToProtocol2();
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v7) {
    uint64_t v0 = 0;
  }
  if (!v0 || (uint64_t v9 = swift_getObjectType(), !(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v9, v8)))
  {
LABEL_23:
    swift_getObjectType();
    uint64_t v17 = swift_conformsToProtocol2();
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v17) {
      uint64_t v19 = v1;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19)
    {
      uint64_t ObjectType = swift_getObjectType();
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(ObjectType, v18))
      {
        uint64_t v5 = sub_100241804();
        unint64_t v6 = v21;
        swift_release();
        goto LABEL_32;
      }
    }
    if (dispatch thunk of ContextAction.configuration.getter()
      && (type metadata accessor for ContextActionsConfiguration(),
          sub_100054B78(&qword_1005FAAD0),
          (swift_dynamicCast() & 1) != 0))
    {
      if (*((void *)&v31 + 1))
      {
        sub_100042FC4(&v30, (uint64_t)v33);
        uint64_t v22 = v34;
        uint64_t v23 = v35;
        sub_100041A98(v33, v34);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23))
        {
          uint64_t v5 = sub_1004025F4();
          unint64_t v6 = v24;
          uint64_t v3 = v25;
          unint64_t v4 = v26;
          swift_release();
          sub_10004D2D8((uint64_t)v33);
          goto LABEL_41;
        }
        sub_10004D2D8((uint64_t)v33);
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
    }
    sub_100054B1C((uint64_t)&v30, &qword_1005FAAC8);
LABEL_40:
    uint64_t v5 = 0;
    uint64_t v3 = 0;
    unint64_t v6 = 0xE000000000000000;
    unint64_t v4 = 0xE000000000000000;
    goto LABEL_41;
  }
  sub_1004025F4();
  uint64_t v3 = v10;
  unint64_t v4 = v11;
  swift_release();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  uint64_t v12 = swift_conformsToProtocol2();
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v12) {
    uint64_t v14 = v1;
  }
  else {
    uint64_t v14 = 0;
  }
  if (!v14 || (uint64_t v15 = swift_getObjectType(), !(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v15, v13)))
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v5 = sub_1004025F4();
  unint64_t v6 = v16;
  swift_release();
  swift_bridgeObjectRelease();
  if (object_getClass(v1) == (Class)_TtC8Podcasts34EpisodePresentPodcastContextAction && v1
    || (type metadata accessor for SubscribeEpisodeContextAction(), swift_dynamicCastClass()))
  {
    swift_bridgeObjectRelease();
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v3 = v5;
    unint64_t v4 = v6;
  }
LABEL_41:
  uint64_t v27 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v27 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27)
  {
    uint64_t v28 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0) {
      uint64_t v28 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (!v28)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v3;
}

uint64_t sub_1002687C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  dispatch thunk of ContextAction.configuration.setter();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 72);

  return v5(a2, a3);
}

uint64_t sub_10026882C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100054B78(&qword_1005FD628);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  dispatch thunk of ContextAction.configuration.setter();
  type metadata accessor for StationShowContextActionConfiguration(0);
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    sub_100269A5C(result + qword_10061AA30, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for StationShowContextActionData);
    uint64_t v8 = type metadata accessor for StationShowContextActionData();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
    uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(a3 + 24);
    swift_retain();
    v9(v6, a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_100268988()
{
  uint64_t v0 = type metadata accessor for ContextActionType();
  uint64_t v50 = *(void *)(v0 - 8);
  uint64_t v51 = v0;
  __chkstk_darwin(v0);
  uint64_t v49 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005FEA40);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EpisodeListSettings();
  uint64_t v45 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for InteractionContext();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for InteractionContext.Page();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v43 - v16;
  dispatch thunk of ContextActionsConfiguration.context.getter();
  InteractionContext.page.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v52 = v17;
  sub_100269A5C((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for InteractionContext.Page);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v44 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    char v20 = *v15 & 1;
    int v21 = 4;
    uint64_t v22 = 0xE000000000000000;
    unint64_t v23 = 0xE000000000000000;
    uint64_t v24 = 0xE000000000000000;
    uint64_t v46 = 0;
    uint64_t v47 = 0xE000000000000000;
  }
  else
  {
    InteractionContext.Page.episodeListSettings.getter();
    uint64_t v25 = v45;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v4, 1, v5) == 1)
    {
      sub_1001B4BB0((uint64_t)v52);
      sub_100054B1C((uint64_t)v4, (uint64_t *)&unk_1005FEA40);
      uint64_t v26 = (uint64_t)v15;
LABEL_20:
      sub_1001B4BB0(v26);
LABEL_21:
      char v20 = 0;
      return v20 & 1;
    }
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v7, v4, v5);
    EpisodeListSettings.listType.getter();
    uint64_t v27 = v54;
    unint64_t v28 = v56;
    uint64_t v43 = v55;
    uint64_t v44 = v53;
    uint64_t v29 = v57;
    uint64_t v24 = v58;
    uint64_t v46 = v59;
    uint64_t v47 = v60;
    int v21 = v61;
    char v20 = EpisodeListSettings.hidePlayedEpisodes.getter();
    long long v30 = v7;
    uint64_t v19 = v29;
    unint64_t v23 = v28;
    uint64_t v18 = v43;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v5);
    uint64_t v31 = (uint64_t)v15;
    uint64_t v22 = v27;
    sub_1001B4BB0(v31);
  }
  id v33 = v49;
  uint64_t v32 = v50;
  uint64_t v34 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v48, v51);
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v32 + 88))(v33, v34);
  if (v35 == enum case for ContextActionType.removeEpisode(_:))
  {
    if (v21 != 1)
    {
      if (v21 != 7)
      {
        uint64_t v36 = v44;
        if (v21 == 9 && !(v18 | v22 | v44 | v23 | v19 | v24 | v46 | v47)) {
          goto LABEL_35;
        }
        goto LABEL_18;
      }
      goto LABEL_31;
    }
    sub_100053720(v44, v22, v18, v23, v19, v24, v46, v47, 1);
    goto LABEL_35;
  }
  int v37 = v35;
  if (v35 == enum case for ContextActionType.removeEpisodeFromBookmarks(_:))
  {
    if (v21 != 6)
    {
      if (v21 != 7)
      {
        uint64_t v36 = v44;
        if (v21 == 9 && v44 == 4 && !(v18 | v22 | v23 | v19 | v24 | v46 | v47)) {
          goto LABEL_35;
        }
LABEL_18:
        sub_100053720(v36, v22, v18, v23, v19, v24, v46, v47, v21);
LABEL_19:
        uint64_t v26 = (uint64_t)v52;
        goto LABEL_20;
      }
      goto LABEL_31;
    }
    sub_100053720(v44, v22, v18, v23, v19, v24, v46, v47, 6);
    goto LABEL_35;
  }
  if (v35 != enum case for ContextActionType.markPlayed(_:))
  {
    if (v35 == enum case for ContextActionType.markUnplayed(_:))
    {
      if (v21 != 7)
      {
LABEL_46:
        sub_100053720(v44, v22, v18, v23, v19, v24, v46, v47, v21);
        goto LABEL_19;
      }
LABEL_31:
      sub_1001A5A18(v18, v23);
      char v20 = static EpisodeUserFilter.== infix(_:_:)();
      sub_1001A5A58(v18, v23);
      sub_100053720(v44, v22, v18, v23, v19, v24, v46, v47, 7);
LABEL_32:
      sub_1001B4BB0((uint64_t)v52);
      return v20 & 1;
    }
    if (v35 != enum case for ContextActionType.removeFromUpNext(_:))
    {
      int v40 = enum case for ContextActionType.removeFromStation(_:);
      sub_100053720(v44, v22, v18, v23, v19, v24, v46, v47, v21);
      sub_1001B4BB0((uint64_t)v52);
      if (v37 == v40) {
        goto LABEL_36;
      }
      (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
      goto LABEL_21;
    }
    sub_100053720(v44, v22, v18, v23, v19, v24, v46, v47, v21);
LABEL_35:
    sub_1001B4BB0((uint64_t)v52);
LABEL_36:
    char v20 = 1;
    return v20 & 1;
  }
  uint64_t v38 = v44;
  switch(v21)
  {
    case 1:
    case 2:
    case 4:
    case 6:
      sub_100053720(v44, v22, v18, v23, v19, v24, v46, v47, v21);
      goto LABEL_32;
    case 3:
      sub_1001B4BB0((uint64_t)v52);
      sub_100053720(v38, v22, v18, v23, v19, v24, v46, v47, 3);
      char v20 = v23 & 1;
      break;
    case 5:
      goto LABEL_35;
    case 7:
      sub_1001A5A18(v18, v23);
      char v41 = static EpisodeUserFilter.== infix(_:_:)();
      sub_1001A5A58(v18, v23);
      sub_100053720(v38, v22, v18, v23, v19, v24, v46, v47, 7);
      sub_1001B4BB0((uint64_t)v52);
      v20 |= v41;
      break;
    case 9:
      uint64_t v42 = v19 | v24 | v46;
      if (v18 | v22 | v44 | v23 | v42 | v47 && ((unint64_t)(v44 - 3) > 1 || v18 | v22 | v23 | v42 | v47)) {
        goto LABEL_46;
      }
      goto LABEL_32;
    default:
      goto LABEL_46;
  }
  return v20 & 1;
}

uint64_t sub_100269188()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1002691C0(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_1002691D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100269210@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v2 = *(void *)(v1 + 32);
  *(_OWORD *)a1 = xmmword_1004716D0;
  *(void *)(a1 + 16) = 0xE400000000000000;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100269234(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_10026AC78);
}

uint64_t sub_10026924C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100269348@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[12];
  uint64_t v2 = v1[13];
  uint64_t v4 = v1[9];
  uint64_t v5 = v1[10];
  *a1 = 0;
  a1[1] = v3;
  a1[2] = v2;
  a1[3] = v4;
  a1[4] = v5;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100269394(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_1002C1B68);
}

double sub_1002693AC@<D0>(uint64_t a1@<X8>)
{
  return sub_1002694FC(0xD000000000000029, (void *)0x80000001004D67E0, 0x100000000000001DLL, (void *)0x80000001004D6810, a1);
}

BOOL sub_1002693E0()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC8Podcasts37ManageFavoriteCategoriesContextAction_configuration);
  swift_beginAccess();
  BOOL result = 0;
  if (*v1)
  {
    type metadata accessor for CategoryContextActionConfiguration(0);
    if (swift_dynamicCastClass()) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100269454(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_1002DF458);
}

double sub_10026946C@<D0>(uint64_t a1@<X8>)
{
  return sub_100269484((void (*)(_OWORD *__return_ptr))sub_100265C80, a1);
}

double sub_100269484@<D0>(void (*a1)(_OWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(v6);
  uint64_t v3 = v7;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v3;
  return result;
}

double sub_1002694CC@<D0>(uint64_t a1@<X8>)
{
  return sub_1002694FC(0xD000000000000015, (void *)0x80000001004D6890, 0x657469726F766146, (void *)0xE800000000000000, a1);
}

double sub_1002694FC@<D0>(uint64_t a1@<X2>, void *a2@<X3>, uint64_t a3@<X4>, void *a4@<X5>, uint64_t a5@<X8>)
{
  sub_100265F80(a1, a2, a3, a4, (uint64_t)v9);
  uint64_t v6 = v10;
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a5 = v9[0];
  *(_OWORD *)(a5 + 16) = v8;
  *(void *)(a5 + 32) = v6;
  return result;
}

uint64_t sub_100269550(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_1002FDC80);
}

double sub_100269568@<D0>(uint64_t a1@<X8>)
{
  return sub_1002694FC(0xD000000000000019, (void *)0x80000001004D68B0, 0x2074736567677553, (void *)0xEC0000007373654CLL, a1);
}

uint64_t sub_1002695A4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_1003136CC);
}

double sub_1002695BC@<D0>(uint64_t a1@<X8>)
{
  return sub_100269484((void (*)(_OWORD *__return_ptr))sub_100265D58, a1);
}

uint64_t sub_1002695D8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_1003304D0);
}

double sub_1002695F0@<D0>(uint64_t a1@<X8>)
{
  return sub_1002694FC(0xD00000000000001ELL, (void *)0x80000001004D6910, 0xD000000000000011, (void *)0x80000001004D6930, a1);
}

uint64_t sub_10026962C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_100364B3C);
}

double sub_100269644@<D0>(uint64_t a1@<X8>)
{
  return sub_1002694FC(0xD00000000000001ALL, (void *)0x80000001004D6950, 0x766146206F646E55, (void *)0xED0000657469726FLL, a1);
}

uint64_t sub_100269684(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_1003AF92C);
}

double sub_10026969C@<D0>(uint64_t a1@<X8>)
{
  id v2 = [self mainBundle];
  v7._object = (void *)0xE000000000000000;
  v3._uint64_t countAndFlagsBits = 0x73676E6974746553;
  v3._object = (void *)0xE800000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v7._uint64_t countAndFlagsBits = 0;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v7);

  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1004716E0;
  *(void *)(a1 + 16) = 0xE400000000000000;
  *(Swift::String *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100269750(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_1003FFB38);
}

double sub_100269768@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100266048(a1, a2, v7);
  uint64_t v4 = v8;
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 32) = v4;
  return result;
}

double sub_1002697A8@<D0>(uint64_t a1@<X8>)
{
  return sub_1002697C4(0xD000000000000021, (void *)0x80000001004D6970, a1);
}

double sub_1002697C4@<D0>(uint64_t a1@<X2>, void *a2@<X3>, uint64_t a3@<X8>)
{
  id v6 = [self mainBundle];
  v11._object = a2;
  v7._uint64_t countAndFlagsBits = 0x6853206F74206F47;
  v7._object = (void *)0xEA0000000000776FLL;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = a1;
  Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v11);

  double result = 0.0;
  *(_OWORD *)a3 = xmmword_1004716F0;
  *(void *)(a3 + 16) = 0xEF6572617571732ELL;
  *(Swift::String *)(a3 + 24) = v9;
  return result;
}

uint64_t sub_10026988C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002698A4(a1, a2, a3, a4, sub_10041C21C);
}

uint64_t sub_1002698A4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5();
  if (a1) {
    return a1(result);
  }
  return result;
}

uint64_t sub_1002698E8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100269920()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_10026994C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005F5D30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002699B4()
{
  return sub_100016C84();
}

uint64_t sub_1002699BC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  sub_1002673D8(v0[5], v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t sub_100269A14()
{
  return sub_100016C84();
}

uint64_t sub_100269A1C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100269A5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100269ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  sub_100054B78(&qword_1005FD6C8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URLComponents();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  __chkstk_darwin();
  id v33 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v37 = *(void *)(a1 + 16);
  uint64_t v38 = v8;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v35 = *(void *)(a1 + 48);
  uint64_t v36 = v11;
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v34 = *(void *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  double v17 = *(double *)(a1 + 96);
  LOBYTE(a1) = *(unsigned char *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = v14;
  uint64_t v18 = v39;
  uint64_t v19 = v13;
  uint64_t v20 = v40;
  sub_1003060F0(v38, v9, v37, v10, v36, v12, v35, v19, v21, v22, v23, v24, v25, v26, v27, v28, v34, v32, v15,
    v16,
    v17,
    a1);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v5, 1, v20) == 1)
  {
    sub_100269D58((uint64_t)v5);
    uint64_t v29 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v42, 1, 1, v29);
  }
  else
  {
    long long v30 = v33;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v33, v5, v20);
    swift_bridgeObjectRetain();
    URLComponents.queryItems.setter();
    URLComponents.url.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v30, v20);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100269D58(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FD6C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100269DB8(long long *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = 0;
  id v5 = [self mainBundle];
  v16._object = (void *)0xE400000000000000;
  v6._object = (void *)0x80000001004D9520;
  v6._uint64_t countAndFlagsBits = 0xD000000000000013;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v16._uint64_t countAndFlagsBits = 2036427856;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v16);

  *(Swift::String *)(v2 + 24) = v8;
  *(void *)(v2 + 40) = 0;
  uint64_t v9 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
  uint64_t v10 = type metadata accessor for EpisodePlayState();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(void *)(v12 + 32) = 0;
  uint64_t v13 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
  uint64_t v14 = type metadata accessor for PendingPlaybackMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_100042FC4(a1, v2 + 48);
  *(void *)(v2 + 88) = a2;
  return v2;
}

void sub_100269F4C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1006005C0);
  __chkstk_darwin(v4 - 8);
  Swift::String v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EpisodeOffer();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100054B78(&qword_1005FCBF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100054B78((uint64_t *)&unk_1006006A0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  switch(*(unsigned char *)(a1 + 32))
  {
    case 1:
      uint64_t v20 = sub_100401E68(1);
      if (*(void *)(v20 + 16))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, v20 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
      }
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
        EpisodeOffer.contentId.getter();
        PendingPlaybackMetadata.init(adamId:uuid:)();
        uint64_t v27 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
        swift_beginAccess();
        sub_100039D84(v16, v27, (uint64_t *)&unk_1006006A0);
        swift_endAccess();
        EpisodeOffer.contentId.getter();
        EpisodeStateController.stateMachine(for:)();
        dispatch thunk of EpisodeStateMachine.currentState.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        goto LABEL_47;
      }
      sub_100054B1C((uint64_t)v6, (uint64_t *)&unk_1006005C0);
      return;
    case 2:
      unint64_t v56 = (unint64_t)_swiftEmptyArrayStorage;
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        if (v21)
        {
LABEL_8:
          uint64_t v54 = v2;
          uint64_t v55 = v13;
          if (v21 < 1)
          {
            __break(1u);
            goto LABEL_72;
          }
          uint64_t v22 = 0;
          do
          {
            if ((v18 & 0xC000000000000001) != 0) {
              id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v23 = *(id *)(v18 + 8 * v22 + 32);
            }
            if ([v23 isExplicit])
            {
              type metadata accessor for RestrictionsController();
              static RestrictionsController.isExplicitContentAllowed.getter();
            }
            ++v22;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v21 != v22);
          sub_1001DCDF8(v18, v17, 2u);
          uint64_t v13 = v55;
          unint64_t v26 = v56;
          uint64_t v2 = v54;
          if ((v56 & 0x8000000000000000) != 0) {
            goto LABEL_67;
          }
LABEL_53:
          if ((v26 & 0x4000000000000000) == 0)
          {
            if (!*(void *)(v26 + 16)) {
              goto LABEL_68;
            }
LABEL_55:
            if ((v26 & 0xC000000000000001) != 0) {
              goto LABEL_75;
            }
            if (!*(void *)(v26 + 16))
            {
              __break(1u);
              JUMPOUT(0x10026A97CLL);
            }
            uint64_t v44 = v2;
            id v45 = *(id *)(v26 + 32);
            goto LABEL_58;
          }
LABEL_67:
          swift_bridgeObjectRetain();
          uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          if (!v52) {
            goto LABEL_68;
          }
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v21 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v21) {
          goto LABEL_8;
        }
      }
      sub_1001DCDF8(v18, v17, 2u);
      unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_67;
      }
      goto LABEL_53;
    case 3:
      unint64_t v56 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v24 = v2;
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        if (!v16) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v16 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v16) {
          goto LABEL_34;
        }
      }
      if (v16 < 1)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      if ((v18 & 0xC000000000000001) != 0)
      {
        uint64_t v25 = 0;
        do
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          ++v25;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v16 != v25);
      }
      else
      {
        double v28 = (void **)(v18 + 32);
        do
        {
          uint64_t v29 = *v28++;
          id v30 = v29;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v16;
        }
        while (v16);
      }
LABEL_34:
      sub_1001DCDF8(v18, v17, 3u);
      unint64_t v31 = v56;
      if ((v56 & 0x8000000000000000) == 0 && (v56 & 0x4000000000000000) == 0)
      {
        uint64_t v2 = v24;
        if (*(void *)(v56 + 16)) {
          goto LABEL_37;
        }
LABEL_68:
        swift_release();
        return;
      }
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      uint64_t v2 = v24;
      if (!v16) {
        goto LABEL_68;
      }
LABEL_37:
      if ((v31 & 0xC000000000000001) != 0)
      {
LABEL_73:
        uint64_t v32 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_40;
      }
      if (!*(void *)(v31 + 16))
      {
        __break(1u);
LABEL_75:
        uint64_t v44 = v2;
        id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_58:
        uint64_t v46 = v45;
        swift_release();
        [v46 episodeStoreId];
        AdamID.init(rawValue:)();
        id v47 = [v46 episodeUuid];
        if (v47)
        {
          uint64_t v48 = v47;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          swift_bridgeObjectRetain();
          PendingPlaybackMetadata.init(adamId:uuid:)();
          uint64_t v49 = v44 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
          swift_beginAccess();
          sub_100039D84(v16, v49, (uint64_t *)&unk_1006006A0);
          swift_endAccess();
          EpisodeStateController.stateMachine(for:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          [v46 episodeStoreId];
          AdamID.init(rawValue:)();
          PendingPlaybackMetadata.init(adamId:uuid:)();
          uint64_t v50 = v44 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
          swift_beginAccess();
          sub_100039D84(v16, v50, (uint64_t *)&unk_1006006A0);
          swift_endAccess();
          EpisodeStateController.stateMachine(for:)();
        }
        dispatch thunk of EpisodeStateMachine.currentState.getter();
        swift_release();

        uint64_t v51 = type metadata accessor for EpisodePlayState();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v13, 0, 1, v51);
        uint64_t v42 = v44 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
LABEL_62:
        swift_beginAccess();
        sub_100039D84((uint64_t)v13, v42, &qword_1005FCBF0);
        swift_endAccess();
        return;
      }
      uint64_t v32 = (char *)*(id *)(v31 + 32);
LABEL_40:
      uint64_t v55 = v32;
      swift_release();
      uint64_t v33 = MPCPlayerResponseItem.podcastEpisode.getter();
      if (v33)
      {
        uint64_t v34 = (void *)v33;
        MPModelObject.uuid.getter();
        uint64_t v36 = v35;

        if (v36)
        {
          EpisodeStateController.stateMachine(for:)();
          swift_bridgeObjectRelease();
LABEL_46:
          dispatch thunk of EpisodeStateMachine.currentState.getter();
          swift_release();

          goto LABEL_47;
        }
      }
      uint64_t v37 = MPCPlayerResponseItem.podcastEpisode.getter();
      if (v37)
      {
        uint64_t v38 = (void *)v37;
        MPModelObject.adamID.getter();
        char v40 = v39;

        if ((v40 & 1) == 0)
        {
          EpisodeStateController.stateMachine(for:)();
          goto LABEL_46;
        }
      }
      uint64_t v43 = v55;

      return;
    default:
      if (!sub_100401D38()[2])
      {
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      PendingPlaybackMetadata.init(adamId:uuid:)();
      uint64_t v19 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
      swift_beginAccess();
      sub_100039D84(v16, v19, (uint64_t *)&unk_1006006A0);
      swift_endAccess();
      EpisodeStateController.stateMachine(for:)();
      swift_bridgeObjectRelease();
      dispatch thunk of EpisodeStateMachine.currentState.getter();
      swift_release();
LABEL_47:
      uint64_t v41 = type metadata accessor for EpisodePlayState();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v13, 0, 1, v41);
      uint64_t v42 = v2 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
      goto LABEL_62;
  }
}

uint64_t sub_10026A98C()
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(v0 + 40))
  {
    type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      uint64_t v3 = v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime;
      *(void *)uint64_t v3 = *(void *)(v2 + qword_1005FAD70);
      *(unsigned char *)(v3 + 8) = 0;
      sub_100056D54(v2 + qword_1005FAD78, (uint64_t)v8);
    }
    else
    {
      type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration();
      uint64_t result = swift_dynamicCastClass();
      if (!result) {
        return result;
      }
      swift_retain();
      uint64_t started = NowPlayingTranscriptSelectionContextActionConfiguration.referenceStartTime.getter();
      uint64_t v5 = v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime;
      *(void *)uint64_t v5 = started;
      *(unsigned char *)(v5 + 8) = v6 & 1;
      NowPlayingTranscriptSelectionContextActionConfiguration.alignmentCoordinator.getter();
      swift_release();
    }
    uint64_t v7 = v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator;
    swift_beginAccess();
    sub_100039D84((uint64_t)v8, v7, &qword_1005FD7F8);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10026AAB8()
{
  uint64_t v1 = type metadata accessor for InteractionContext.Page();
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InteractionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v0 + 16)) {
    goto LABEL_6;
  }
  swift_retain();
  if (!sub_100401A34())
  {
    swift_release();
LABEL_6:
    LOBYTE(v8) = 0;
    return v8 & 1;
  }
  swift_beginAccess();
  uint64_t v8 = *(void *)(v0 + 40);
  if (v8)
  {
    swift_retain();
    dispatch thunk of ContextActionsConfiguration.context.getter();
    swift_release();
    InteractionContext.page.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    LOBYTE(v8) = InteractionContext.Page.isTranscriptView.getter();
    swift_release();
    sub_10026D160((uint64_t)v3, (uint64_t (*)(void))&type metadata accessor for InteractionContext.Page);
  }
  else
  {
    swift_release();
  }
  return v8 & 1;
}

uint64_t sub_10026AC78()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_100603370);
  __chkstk_darwin(v2 - 8);
  uint64_t v33 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100054B78(&qword_1005FCBF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (long long *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for EpisodePlayState();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
  swift_beginAccess();
  sub_100054BBC(v17, (uint64_t)v9, &qword_1005FCBF0);
  if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    unint64_t v18 = &qword_1005FCBF0;
    uint64_t v19 = v9;
    return sub_100054B1C((uint64_t)v19, v18);
  }
  sub_1001DD7D4((uint64_t)v9, (uint64_t)v16);
  uint64_t v20 = v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator;
  swift_beginAccess();
  sub_100054BBC(v20, (uint64_t)&v34, &qword_1005FD7F8);
  if (!v35)
  {
    sub_10026D160((uint64_t)v16, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    unint64_t v18 = &qword_1005FD7F8;
    uint64_t v19 = &v34;
    return sub_100054B1C((uint64_t)v19, v18);
  }
  sub_100042FC4(&v34, (uint64_t)v36);
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime + 8) & 1) == 0)
  {
    uint64_t v21 = *(void *)(v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_referenceStartTime);
    static Logger.transcripts.getter();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 134217984;
      *(void *)&long long v34 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "User tapped transcript play button at %f", v24, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);
    uint64_t v25 = type metadata accessor for TaskPriority();
    uint64_t v26 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v33, 1, 1, v25);
    sub_1001DD65C((uint64_t)v16, (uint64_t)v14);
    sub_100056D54((uint64_t)v36, (uint64_t)&v34);
    unint64_t v27 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v28 = (v12 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = 0;
    v29[3] = 0;
    v29[4] = v1;
    sub_1001DD7D4((uint64_t)v14, (uint64_t)v29 + v27);
    sub_100042FC4(&v34, (uint64_t)v29 + v28);
    *(void *)((char *)v29 + ((v28 + 47) & 0xFFFFFFFFFFFFFFF8)) = v21;
    swift_retain();
    sub_10001201C(v26, (uint64_t)&unk_1005FD808, (uint64_t)v29);
    swift_release();
  }
  sub_10004D2D8((uint64_t)v36);
  return sub_10026D160((uint64_t)v16, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
}

uint64_t sub_10026B12C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(double *)(v7 + 104) = a1;
  *(void *)(v7 + 88) = a6;
  *(void *)(v7 + 96) = a7;
  *(void *)(v7 + 80) = a5;
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v7 + 112) = v8;
  *(void *)(v7 + 120) = *(void *)(v8 - 8);
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  type metadata accessor for EpisodePlayState();
  *(void *)(v7 + 152) = swift_task_alloc();
  sub_100054B78((uint64_t *)&unk_1006006A0);
  *(void *)(v7 + 160) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PendingPlaybackMetadata();
  *(void *)(v7 + 168) = v9;
  *(void *)(v7 + 176) = *(void *)(v9 - 8);
  *(void *)(v7 + 184) = swift_task_alloc();
  return _swift_task_switch(sub_10026B2C8, 0, 0);
}

uint64_t sub_10026B2C8()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[10] + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata;
  swift_beginAccess();
  sub_100054BBC(v4, v3, (uint64_t *)&unk_1006006A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100054B1C(v0[20], (uint64_t *)&unk_1006006A0);
    goto LABEL_8;
  }
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[11];
  (*(void (**)(void, void, void))(v0[22] + 32))(v0[23], v0[20], v0[21]);
  char v7 = EpisodePlayState.isEpisodePlaying.getter();
  sub_1001DD65C(v6, v5);
  uint64_t v8 = v0[19];
  if (v7)
  {
    sub_10026D160(v0[19], (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
LABEL_6:
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
    goto LABEL_8;
  }
  char v9 = EpisodePlayState.isEpisodePaused.getter();
  sub_10026D160(v8, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
  if (v9) {
    goto LABEL_6;
  }
  uint64_t v11 = v0[22];
  uint64_t v10 = v0[23];
  uint64_t v12 = v0[21];
  sub_100041A98((void *)(v0[10] + 48), *(void *)(v0[10] + 72));
  dispatch thunk of EpisodeControllerProtocol.preflight(_:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
LABEL_8:
  uint64_t v13 = (void *)v0[12];
  uint64_t v14 = v13[3];
  uint64_t v15 = v13[4];
  sub_100041A98(v13, v14);
  uint64_t v16 = (void *)swift_task_alloc();
  v0[24] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10026B4E8;
  v17.n128_u64[0] = v0[13];
  return dispatch thunk of AlignmentCoordinator.fetchPlayerTimestamp(for:)(v14, v15, v17);
}

uint64_t sub_10026B4E8(double a1)
{
  uint64_t v3 = *v2;
  *(double *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10026B7A4;
  }
  else {
    uint64_t v4 = sub_10026B600;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10026B600()
{
  static Logger.transcripts.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[25];
    uint64_t v4 = v0[13];
    uint64_t v5 = swift_slowAlloc();
    v0[8] = v3;
    *(_DWORD *)uint64_t v5 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2048;
    v0[9] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Starting play at %f, reference timestamp: %f", (uint8_t *)v5, 0x16u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[15];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  sub_10026BAB4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10026B7A4()
{
  static Logger.transcripts.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[13];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    v0[6] = v3;
    *(_DWORD *)uint64_t v4 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to play from transcript at time: %f, error: %@", (uint8_t *)v4, 0x16u);
    sub_100054B78((uint64_t *)&unk_1005F9F00);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[16];
  uint64_t v8 = v0[14];
  uint64_t v9 = v0[15];

  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  static Logger.transcripts.getter();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = v0[13];
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134217984;
    v0[5] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Falling back to play at reference time: %f", v14, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v15 = v0[17];
  uint64_t v16 = v0[14];

  v10(v15, v16);
  sub_10026BAB4();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  __n128 v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_10026BAB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100054B78((uint64_t *)&unk_1006005C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for EpisodeOffer();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100054B78((uint64_t *)&unk_1005FEA40);
  __chkstk_darwin(v10 - 8);
  os_log_type_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100054B78(&qword_1005FCBF0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v63 - v18;
  uint64_t v20 = v1[2];
  if (v20)
  {
    uint64_t v67 = v12;
    uint64_t v21 = (uint64_t)v1 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state;
    swift_beginAccess();
    sub_100054BBC(v21, (uint64_t)v19, &qword_1005FCBF0);
    uint64_t v22 = type metadata accessor for EpisodePlayState();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v19, 1, v22) == 1)
    {
      uint64_t v66 = v2;
      swift_retain();
    }
    else
    {
      sub_100054BBC((uint64_t)v19, (uint64_t)v16, &qword_1005FCBF0);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        int v23 = v16[16];
        sub_100041A98(v1 + 6, v1[9]);
        swift_retain();
        dispatch thunk of EpisodeControllerProtocol.seekTo(time:)();
        if (v23 == 1)
        {
          sub_100041A98(v1 + 6, v1[9]);
          dispatch thunk of EpisodeControllerProtocol.playPlayer()();
        }
        swift_release();
        return sub_100054B1C((uint64_t)v19, &qword_1005FCBF0);
      }
      uint64_t v66 = v2;
      swift_retain();
      sub_10026D160((uint64_t)v16, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    }
    unint64_t v24 = *(void *)(v20 + 16);
    switch(*(unsigned char *)(v20 + 32))
    {
      case 1:
        unint64_t v27 = v19;
        uint64_t v28 = 1;
        uint64_t v29 = sub_100401E68(1);
        if (*(void *)(v29 + 16))
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v5, v29 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
          uint64_t v28 = 0;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v28, 1, v6);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
        {
          swift_release();
          id v30 = (uint64_t *)&unk_1006005C0;
          uint64_t v31 = v5;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
          sub_100041A98(v1 + 6, v1[9]);
          uint64_t v69 = v66;
          v68[0] = v1;
          swift_retain();
          dispatch thunk of EpisodeControllerProtocol.play(episodeOffer:queueEpisodesIds:timestamp:sender:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          id v30 = &qword_1005F5D30;
          uint64_t v31 = (char *)v68;
        }
        sub_100054B1C((uint64_t)v31, v30);
        uint64_t v19 = v27;
        return sub_100054B1C((uint64_t)v19, &qword_1005FCBF0);
      case 2:
        uint64_t v65 = *(void *)(v20 + 24);
        v68[0] = _swiftEmptyArrayStorage;
        if (v24 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t v64 = v19;
          if (v32)
          {
LABEL_18:
            if (v32 < 1)
            {
              __break(1u);
              goto LABEL_75;
            }
            uint64_t v33 = 0;
            do
            {
              if ((v24 & 0xC000000000000001) != 0) {
                id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v34 = *(id *)(v24 + 8 * v33 + 32);
              }
              if ([v34 isExplicit])
              {
                type metadata accessor for RestrictionsController();
                static RestrictionsController.isExplicitContentAllowed.getter();
              }
              ++v33;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            while (v32 != v33);
            sub_1001DCDF8(v24, v65, 2u);
            unint64_t v37 = v68[0];
            uint64_t v19 = v64;
            if ((v68[0] & 0x8000000000000000) != 0) {
              goto LABEL_70;
            }
LABEL_57:
            if ((v37 & 0x4000000000000000) == 0)
            {
              if (!*(void *)(v37 + 16)) {
                goto LABEL_71;
              }
LABEL_59:
              if ((v37 & 0xC000000000000001) != 0) {
                goto LABEL_78;
              }
              if (!*(void *)(v37 + 16))
              {
                __break(1u);
                JUMPOUT(0x10026C708);
              }
              id v55 = *(id *)(v37 + 32);
              goto LABEL_62;
            }
LABEL_70:
            swift_bridgeObjectRetain();
            uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            if (!v62) {
              goto LABEL_71;
            }
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v32 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v64 = v19;
          if (v32) {
            goto LABEL_18;
          }
        }
        sub_1001DCDF8(v24, v65, 2u);
        unint64_t v37 = (unint64_t)_swiftEmptyArrayStorage;
        if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        goto LABEL_57;
      case 3:
        uint64_t v65 = *(void *)(v20 + 24);
        v68[0] = _swiftEmptyArrayStorage;
        if (v24 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
          if (v35) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v35 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v35)
          {
LABEL_28:
            if (v35 < 1)
            {
LABEL_75:
              __break(1u);
              goto LABEL_76;
            }
            if ((v24 & 0xC000000000000001) != 0)
            {
              uint64_t v36 = 0;
              do
              {
                specialized _ArrayBuffer._getElementSlowPath(_:)();
                ++v36;
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
              }
              while (v35 != v36);
            }
            else
            {
              uint64_t v38 = (void **)(v24 + 32);
              do
              {
                char v39 = *v38++;
                id v40 = v39;
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
                --v35;
              }
              while (v35);
            }
          }
        }
        sub_1001DCDF8(v24, v65, 3u);
        uint64_t v41 = v68[0];
        if ((v68[0] & 0x8000000000000000) != 0 || (v68[0] & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          if (v61)
          {
LABEL_43:
            if ((v41 & 0xC000000000000001) == 0)
            {
              if (*(void *)(v41 + 16))
              {
                id v42 = *(id *)(v41 + 32);
LABEL_46:
                uint64_t v43 = v42;
                swift_release();
                uint64_t v44 = v19;
                uint64_t v45 = MPCPlayerResponseItem.podcastEpisode.getter();
                if (v45 && (uint64_t v46 = (void *)v45, MPModelObject.uuid.getter(), v48 = v47, v46, v48))
                {
                  sub_100041A98(v1 + 6, v1[9]);
                  uint64_t v49 = type metadata accessor for EpisodeListSettings();
                  uint64_t v50 = (uint64_t)v67;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v67, 1, 1, v49);
                  uint64_t v69 = v66;
                  v68[0] = v1;
                  swift_retain();
                  dispatch thunk of EpisodeControllerProtocol.play(episodeUuid:settings:sender:isSmartPlayButton:preventQueueing:adamId:reason:timestamp:waitForEngine:)();
                  swift_bridgeObjectRelease();

                  swift_release();
                  sub_100054B1C(v50, (uint64_t *)&unk_1005FEA40);
                }
                else
                {
                  uint64_t v51 = MPCPlayerResponseItem.podcastEpisode.getter();
                  if (!v51
                    || (uint64_t v52 = (void *)v51, MPModelObject.adamID.getter(), v54 = v53, v52, (v54 & 1) != 0))
                  {

                    swift_release();
                    goto LABEL_54;
                  }
                  sub_100041A98(v1 + 6, v1[9]);
                  uint64_t v69 = v66;
                  v68[0] = v1;
                  swift_retain();
                  dispatch thunk of EpisodeControllerProtocol.play(storeEpisodeId:timestamp:sender:)();
                  swift_release();
                }
                sub_100054B1C((uint64_t)v68, &qword_1005F5D30);
LABEL_54:
                uint64_t v19 = v44;
                return sub_100054B1C((uint64_t)v19, &qword_1005FCBF0);
              }
              __break(1u);
LABEL_78:
              id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_62:
              unint64_t v56 = v55;
              swift_release();
              id v57 = [v56 episodeUuid];
              if (v57)
              {
                uint64_t v58 = v57;
                static String._unconditionallyBridgeFromObjectiveC(_:)();

                sub_100041A98(v1 + 6, v1[9]);
                uint64_t v59 = type metadata accessor for EpisodeListSettings();
                uint64_t v60 = (uint64_t)v67;
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v67, 1, 1, v59);
                uint64_t v69 = v66;
                v68[0] = v1;
                swift_retain();
                dispatch thunk of EpisodeControllerProtocol.play(episodeUuid:settings:sender:isSmartPlayButton:preventQueueing:adamId:reason:timestamp:waitForEngine:)();

                swift_bridgeObjectRelease();
                swift_release();
                sub_100054B1C(v60, (uint64_t *)&unk_1005FEA40);
              }
              else
              {
                [v56 episodeStoreId];
                AdamID.init(rawValue:)();
                sub_100041A98(v1 + 6, v1[9]);
                uint64_t v69 = v66;
                v68[0] = v1;
                swift_retain();
                dispatch thunk of EpisodeControllerProtocol.play(storeEpisodeId:timestamp:sender:)();
                swift_release();
              }
              sub_100054B1C((uint64_t)v68, &qword_1005F5D30);
              uint64_t v19 = v64;
              return sub_100054B1C((uint64_t)v19, &qword_1005FCBF0);
            }
LABEL_76:
            id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_46;
          }
        }
        else if (*(void *)(v68[0] + 16))
        {
          goto LABEL_43;
        }
LABEL_71:
        swift_release();
        swift_release();
        return sub_100054B1C((uint64_t)v19, &qword_1005FCBF0);
      default:
        if (sub_100401D38()[2])
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          sub_100041A98(v1 + 6, v1[9]);
          uint64_t v25 = type metadata accessor for EpisodeListSettings();
          uint64_t v26 = (uint64_t)v67;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v67, 1, 1, v25);
          uint64_t v69 = v66;
          v68[0] = v1;
          swift_retain();
          dispatch thunk of EpisodeControllerProtocol.play(episodeUuid:settings:sender:isSmartPlayButton:preventQueueing:adamId:reason:timestamp:waitForEngine:)();
          swift_bridgeObjectRelease();
          swift_release();
          sub_100054B1C(v26, (uint64_t *)&unk_1005FEA40);
          sub_100054B1C((uint64_t)v68, &qword_1005F5D30);
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
        }
        return sub_100054B1C((uint64_t)v19, &qword_1005FCBF0);
    }
  }
  return result;
}

uint64_t sub_10026C718()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10004D2D8(v0 + 48);
  swift_release();
  sub_100054B1C(v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_state, &qword_1005FCBF0);
  sub_100054B1C(v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_alignmentCoordinator, &qword_1005FD7F8);
  sub_100054B1C(v0 + OBJC_IVAR____TtC8Podcasts36PlayTranscriptSelectionContextAction_pendingMetadata, (uint64_t *)&unk_1006006A0);

  return swift_deallocClassInstance();
}

uint64_t sub_10026C7DC()
{
  return type metadata accessor for PlayTranscriptSelectionContextAction();
}

uint64_t type metadata accessor for PlayTranscriptSelectionContextAction()
{
  uint64_t result = qword_1005FD718;
  if (!qword_1005FD718) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10026C830()
{
  sub_10026C974(319, (unint64_t *)&qword_1005FD728, (void (*)(uint64_t))&type metadata accessor for EpisodePlayState);
  if (v0 <= 0x3F)
  {
    sub_10026C974(319, (unint64_t *)&unk_1005FD730, (void (*)(uint64_t))&type metadata accessor for PendingPlaybackMetadata);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10026C974(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10026C9C8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10026C9F8()
{
  return 2036427888;
}

uint64_t sub_10026CA08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsLabel.play(_:);
  uint64_t v3 = type metadata accessor for MetricsLabel();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10026CA7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ContextActionType.playFromTranscript(_:);
  uint64_t v3 = type metadata accessor for ContextActionType();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  unint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

void sub_10026CB5C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    swift_retain();
    if (sub_100401A34())
    {
      sub_100269F4C(v1);
      sub_10026A98C();
    }
    swift_release();
  }
}

uint64_t sub_10026CBD8()
{
  return swift_retain();
}

uint64_t sub_10026CC10(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*sub_10026CC58())()
{
  return j__swift_endAccess;
}

uint64_t sub_10026CCB8(uint64_t a1)
{
  uint64_t result = sub_10026CD40(&qword_1005FD7F0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10026CCFC(uint64_t a1)
{
  uint64_t result = sub_10026CD40(&qword_1005FAAE8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10026CD40(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PlayTranscriptSelectionContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10026CD84()
{
  uint64_t v1 = *(void *)(type metadata accessor for EpisodePlayState() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v4 = type metadata accessor for Date();
    uint64_t v5 = *(void *)(v4 - 8);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v2, 1, v4)) {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v2, v4);
    }
  }
  sub_10004D2D8(v0 + ((v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return swift_deallocObject();
}

uint64_t sub_10026CF04(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for EpisodePlayState() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = (uint64_t)v1 + v6;
  double v12 = *(double *)((char *)v1 + ((v6 + 47) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_10000B8F0;
  return sub_10026B12C(v12, a1, v7, v8, v9, v10, v11);
}

uint64_t sub_10026D048(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_10026D080(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10026D0A8(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    void *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_10026D160(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for MTTestActionBlockStep()
{
  return self;
}

uint64_t sub_10026D1E4(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void (**)(uint64_t (*)(), uint64_t))(*(void *)v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  v5(sub_10004A018, v6);

  return swift_release();
}

uint64_t sub_10026D278()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10026D2B0()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)MTInformativeTableViewCell);
  swift_retain();
  *(void *)(v1 + 88) = [v2 init];
  swift_release();
  *(void *)(v1 + 80) = 0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(void *)(v1 + 16) = 0x7263736275536F6ELL;
  *(void *)(v1 + 24) = 0xEF736E6F69747069;
  *(void *)(v1 + 32) = [objc_allocWithZone((Class)MTDynamicTypeConstant) initWithDefaultConstant:UIFontTextStyleBody textStyle:UITableViewAutomaticDimension];
  NSString v3 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  unint64_t v5 = self;
  id v6 = [v5 groupWithTitle:v3 footerText:0 settings:isa];

  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(void *)(v1 + 40) = v6;
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D060;
  uint64_t v8 = self;
  uint64_t v9 = self;
  swift_retain();
  id v10 = [v9 mainBundle];
  v11._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v28._object = (void *)0xE000000000000000;
  v11._object = (void *)0x80000001004D95E0;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v28);

  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v8 informativeSettingWithText:v13 identifier:v14];

  if (!v15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(void *)(inited + 32) = v15;
  aBlock[0] = inited;
  specialized Array._endMutation()();
  swift_retain();
  id v16 = [v9 mainBundle];
  v17._uint64_t countAndFlagsBits = 0xD000000000000031;
  v29._object = (void *)0xE000000000000000;
  v17._object = (void *)0x80000001004D8AD0;
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v29._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v29);

  sub_1001B7D44(inited);
  swift_bridgeObjectRelease();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = [v5 groupWithTitle:v19 footerText:0 settings:v20];

  if (v21)
  {
    uint64_t v22 = *(void **)(v1 + 40);
    *(void *)(v1 + 40) = v21;
    swift_release();

    id v23 = [self defaultCenter];
    uint64_t v24 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_10026DA2C;
    aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000AEC8;
    void aBlock[3] = &unk_10055C7B0;
    uint64_t v25 = _Block_copy(aBlock);
    swift_release();
    id v26 = [v23 addObserverForName:UIContentSizeCategoryDidChangeNotification object:0 queue:0 usingBlock:v25];
    swift_release();
    _Block_release(v25);
    swift_unknownObjectRelease();

    return;
  }
LABEL_7:
  __break(1u);
}

void sub_10026D750()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    id v2 = [objc_allocWithZone((Class)MTInformativeTableViewCell) init];
    NSString v3 = *(void **)(v1 + 88);
    *(void *)(v1 + 88) = v2;
    swift_release();
  }
}

double sub_10026D7C8()
{
  id v1 = [*(id *)(v0 + 88) messageLabel];
  id v2 = [self mainBundle];
  v11._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000001004D95E0;
  v3._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v11);

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setText:v5];

  [*(id *)(v0 + 88) fittingSize];
  if (v7 != 0.0 || v6 != 0.0) {
    return v6;
  }
  uint64_t v8 = *(void **)(v0 + 32);

  [v8 currentConstant];
  return result;
}

void sub_10026D910()
{
}

uint64_t sub_10026D918()
{
  swift_bridgeObjectRelease();

  sub_10026D994((uint64_t)(v0 + 6));

  return swift_deallocClassInstance();
}

uint64_t _s14descr10054B1E1C22NoSubscriptionsSectionCMa()
{
  return self;
}

uint64_t sub_10026D994(uint64_t a1)
{
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005FCA20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10026D9F4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

void sub_10026DA2C()
{
}

uint64_t MTEpisode.subscriptionName.getter()
{
  return sub_10026DA78((SEL *)&selRef_subscriptionName);
}

double MTEpisode.timeRemainingOpt.getter()
{
  [v0 timeRemaining];
  return result;
}

uint64_t MTEpisode.channelName.getter()
{
  return sub_10026DA78((SEL *)&selRef_name);
}

uint64_t sub_10026DA78(SEL *a1)
{
  id v3 = [v1 podcast];
  if (!v3) {
    return 0;
  }
  Swift::String v4 = v3;
  id v5 = [v3 channel];

  if (!v5) {
    return 0;
  }
  id v6 = [v5 *a1];

  if (!v6) {
    return 0;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

double MTEpisode.durationOpt.getter()
{
  [v0 duration];
  return result;
}

id MTEpisode.isExplicit.getter()
{
  return [v0 explicit];
}

uint64_t MTEpisode.mediaType.getter()
{
  if ([v0 isVideo]) {
    return 1;
  }
  if ([v0 isExternalType]) {
    return 2;
  }
  return 0;
}

uint64_t MTEpisode.episodeTypeResolvedValue.getter()
{
  if ([v0 isTrailer]) {
    return 2;
  }
  else {
    return [v0 isBonus] ^ 1;
  }
}

void MTEpisode.episodeTypeResolvedValue.setter()
{
  uint64_t v1 = EpisodeType.rawValue.getter();
  uint64_t v3 = v2;
  if (v1 == EpisodeType.rawValue.getter() && v3 == v4)
  {
    swift_bridgeObjectRelease();
    id v7 = 0;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6)
    {
      id v7 = 0;
      [v0 setEpisodeType:0];
      goto LABEL_10;
    }
    EpisodeType.rawValue.getter();
    id v7 = String._bridgeToObjectiveC()();
  }
  swift_bridgeObjectRelease();
  [v0 setEpisodeType:v7];
LABEL_10:
}

void (*MTEpisode.episodeTypeResolvedValue.modify(uint64_t a1))(id *a1)
{
  uint64_t v2 = v1;
  *(void *)a1 = v2;
  if ([v2 isTrailer]) {
    char v4 = 2;
  }
  else {
    char v4 = [v2 isBonus] ^ 1;
  }
  *(unsigned char *)(a1 + 8) = v4;
  return sub_10026DD84;
}

void sub_10026DD84(id *a1)
{
  uint64_t v2 = EpisodeType.rawValue.getter();
  uint64_t v4 = v3;
  if (v2 == EpisodeType.rawValue.getter() && v4 == v5)
  {
    swift_bridgeObjectRelease();
    id v9 = 0;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8)
    {
      id v9 = 0;
      [*a1 setEpisodeType:0];
      goto LABEL_13;
    }
    EpisodeType.rawValue.getter();
    id v9 = String._bridgeToObjectiveC()();
  }
  swift_bridgeObjectRelease();
  [*a1 setEpisodeType:v9];
LABEL_13:
}

id MTEpisode.showTypeIsSerial.getter()
{
  id v1 = [v0 podcast];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 isSerialShowTypeInFeed];

  return v3;
}

uint64_t MTEpisode.releaseDate.getter@<X0>(uint64_t a1@<X8>)
{
  [v1 pubDate];
  if (v3 <= 0.0)
  {
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a1;
    uint64_t v8 = 1;
  }
  else
  {
    [v1 pubDate];
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v4 = type metadata accessor for Date();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
  }

  return v5(v7, v8, 1, v6);
}

id MTEpisode.seasonNumberOpt.getter()
{
  return sub_10026DFC8((SEL *)&selRef_seasonNumber);
}

id MTEpisode.episodeNumberOpt.getter()
{
  return sub_10026DFC8((SEL *)&selRef_episodeNumber);
}

id sub_10026DFC8(SEL *a1)
{
  if ((uint64_t)[v1 *a1] < 1) {
    return 0;
  }
  else {
    return [v1 *a1];
  }
}

uint64_t sub_10026E024()
{
  return MTEpisode.channelName.getter();
}

uint64_t sub_10026E048()
{
  return MTEpisode.subscriptionName.getter();
}

id sub_10026E06C()
{
  return [*v0 entitlementState];
}

id sub_10026E07C()
{
  return [*v0 hasFreeVersion];
}

void sub_10026E0A0(uint64_t a1@<X8>)
{
}

uint64_t sub_10026E0C4()
{
  id v1 = *v0;
  if ([*v0 isTrailer]) {
    return 2;
  }
  else {
    return [v1 isBonus] ^ 1;
  }
}

uint64_t sub_10026E114()
{
  id v1 = *v0;
  if ([*v0 isVideo]) {
    return 1;
  }
  if ([v1 isExternalType]) {
    return 2;
  }
  return 0;
}

id sub_10026E16C()
{
  return [*v0 explicit];
}

id sub_10026E190()
{
  id v1 = [*v0 podcast];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 isSerialShowTypeInFeed];

  return v3;
}

double sub_10026E1EC()
{
  [*v0 duration];
  return result;
}

id sub_10026E218(uint64_t a1, uint64_t a2)
{
  return sub_10026E230(a1, a2, (SEL *)&selRef_seasonNumber);
}

id sub_10026E224(uint64_t a1, uint64_t a2)
{
  return sub_10026E230(a1, a2, (SEL *)&selRef_episodeNumber);
}

id sub_10026E230(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5 = *v3;
  if ((uint64_t)[v5 *a3] < 1) {
    return 0;
  }
  else {
    return [v5 *a3];
  }
}

uint64_t sub_10026E290@<X0>(uint64_t a1@<X8>)
{
  id v3 = *v1;
  [v3 pubDate];
  if (v4 <= 0.0)
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }
  else
  {
    [v3 pubDate];
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }

  return v6(v8, v9, 1, v7);
}

double sub_10026E368()
{
  [*v0 timeRemaining];
  return result;
}

id sub_10026E398(void *a1)
{
  id v2 = [a1 uuid];
  if (!v2) {
    goto LABEL_6;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v2 = [a1 podcast];
  if (!v2)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();

    return v2;
  }
  type metadata accessor for PodcastDetail();
  id v3 = v2;
  if (sub_10022B704(v3, 0, 0, 0, 1))
  {
    swift_retain();
    [a1 episodeCount];
    id v2 = (id)dispatch thunk of StationShow.__allocating_init(uuid:stationUuid:podcast:episodeCount:)();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

void sub_10026E4EC()
{
  sub_1002700A4();
  swift_getKeyPath();
  uint64_t v0 = NSExpression.init<A, B>(forKeyPath:)();
  id v1 = [v0 keyPath];

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  qword_10061AB00 = v2;
  *(void *)algn_10061AB08 = v4;
}

uint64_t sub_10026E608(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v32 = a2;
  uint64_t v8 = sub_100054B78((uint64_t *)&unk_100603370);
  __chkstk_darwin(v8 - 8);
  uint64_t v33 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.modernPlayback.getter();
  id v14 = v4;
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v31 = a4;
    uint64_t v17 = swift_slowAlloc();
    Swift::String v29 = a1;
    Swift::String v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v28 = v10;
    uint64_t v35 = v19;
    *(_DWORD *)Swift::String v18 = 136315138;
    swift_getObjectType();
    uint64_t v20 = _typeName(_:qualified:)();
    uint64_t v30 = a3;
    uint64_t v34 = sub_10004B974(v20, v21, &v35);
    a4 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v30;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] Resolving manifest for playback. ", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v29;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v28);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v22 = type metadata accessor for TaskPriority();
  uint64_t v23 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v33, 1, 1, v22);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 32) = a1;
  *(void *)(v24 + 40) = a3;
  *(void *)(v24 + 48) = a4;
  *(void *)(v24 + 56) = v14;
  *(unsigned char *)(v24 + 64) = v32 & 1;
  id v25 = v14;
  id v26 = a1;
  sub_10004ACDC(a3);
  sub_10001201C(v23, (uint64_t)&unk_1005FDA60, v24);
  return swift_release();
}

uint64_t sub_10026E938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 316) = a8;
  *(void *)(v8 + 128) = a6;
  *(void *)(v8 + 136) = a7;
  *(void *)(v8 + 120) = a5;
  uint64_t v9 = type metadata accessor for PlaybackController.QueueCommand();
  *(void *)(v8 + 144) = v9;
  *(void *)(v8 + 152) = *(void *)(v9 - 8);
  *(void *)(v8 + 160) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 168) = v10;
  *(void *)(v8 + 176) = *(void *)(v10 - 8);
  *(void *)(v8 + 184) = swift_task_alloc();
  *(void *)(v8 + 192) = swift_task_alloc();
  sub_100054B78(&qword_1005FDA68);
  uint64_t v11 = swift_task_alloc();
  *(void *)(v8 + 200) = v11;
  uint64_t v12 = type metadata accessor for PlaybackIntent();
  *(void *)(v8 + 208) = v12;
  *(void *)(v8 + 216) = *(void *)(v12 - 8);
  *(void *)(v8 + 224) = swift_task_alloc();
  NSString v13 = (void *)swift_task_alloc();
  *(void *)(v8 + 232) = v13;
  void *v13 = v8;
  v13[1] = sub_10026EB34;
  return sub_100340020(v11);
}

uint64_t sub_10026EB34()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10026EC30, 0, 0);
}

uint64_t sub_10026EC30()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10027000C(v3);
    type metadata accessor for MainActor();
    *(void *)(v0 + 240) = static MainActor.shared.getter();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10026F0B8, v5, v4);
  }
  else
  {
    uint64_t v6 = *(void **)(v0 + 136);
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 224), v3, v1);
    static Logger.modernPlayback.getter();
    id v7 = v6;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 192);
    uint64_t v13 = *(void *)(v0 + 168);
    uint64_t v12 = *(void *)(v0 + 176);
    if (v10)
    {
      int v33 = *(unsigned __int8 *)(v0 + 316);
      id v14 = *(void **)(v0 + 136);
      uint64_t v34 = *(void *)(v0 + 192);
      uint64_t v15 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_getObjectType();
      uint64_t v16 = _typeName(_:qualified:)();
      *(void *)(v0 + 112) = sub_10004B974(v16, v17, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v15 + 12) = 1024;
      *(_DWORD *)(v0 + 312) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] Intent created, requesting playback (waitForEngine: %{BOOL}d)", (uint8_t *)v15, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      Swift::String v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v18(v34, v13);
    }
    else
    {
      uint64_t v19 = *(void **)(v0 + 136);

      Swift::String v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v18(v11, v13);
    }
    *(void *)(v0 + 248) = v18;
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v20 = *(void *)(v0 + 160);
    int v22 = *(unsigned __int8 *)(v0 + 316);
    uint64_t v23 = *(void *)(v0 + 144);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 216) + 16))(v20, *(void *)(v0 + 224), *(void *)(v0 + 208));
    (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, enum case for PlaybackController.QueueCommand.replace(_:), v23);
    uint64_t v24 = (void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v25 = *(void *)(v0 + 160);
    uint64_t v26 = *(void *)(v0 + 144);
    if (v22 == 1)
    {
      *(void *)(v0 + 80) = v26;
      *(void *)(v0 + 88) = &protocol witness table for PlaybackController.QueueCommand;
      unint64_t v27 = sub_10004A244((uint64_t *)(v0 + 56));
      (*v24)(v27, v25, v26);
      uint64_t v35 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
          + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v0 + 256) = v28;
      *uint64_t v28 = v0;
      v28[1] = sub_10026F16C;
      v29.n128_u64[0] = 5.0;
      return ((uint64_t (*)(uint64_t, void, __n128))v35)(v0 + 56, 0, v29);
    }
    else
    {
      *(void *)(v0 + 40) = v26;
      *(void *)(v0 + 48) = &protocol witness table for PlaybackController.QueueCommand;
      uint64_t v30 = sub_10004A244((uint64_t *)(v0 + 16));
      (*v24)(v30, v25, v26);
      uint64_t v36 = (char *)&async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:)
          + async function pointer to dispatch thunk of PlaybackController.performCommand(_:options:);
      uint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v31;
      *uint64_t v31 = v0;
      v31[1] = sub_10026F330;
      return ((uint64_t (*)(uint64_t, void))v36)(v0 + 16, 0);
    }
  }
}

uint64_t sub_10026F0B8()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release();
  if (v1) {
    (*(void (**)(uint64_t))(v0 + 120))(2);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10026F16C(void *a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 264) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10026F6E8;
  }
  else
  {

    sub_10004D2D8(v4 + 56);
    uint64_t v5 = sub_10026F29C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10026F29C()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 288) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026F460, v2, v1);
}

uint64_t sub_10026F330(void *a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 280) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10026FA00;
  }
  else
  {

    sub_10004D2D8(v4 + 16);
    uint64_t v5 = sub_100270138;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10026F460()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release();
  if (v1) {
    (*(void (**)(uint64_t))(v0 + 120))(1);
  }
  return _swift_task_switch(sub_10026F4E0, 0, 0);
}

uint64_t sub_10026F4E0()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10026F5AC()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release();
  if (v1) {
    (*(void (**)(uint64_t))(v0 + 120))(2);
  }
  return _swift_task_switch(sub_10026F62C, 0, 0);
}

uint64_t sub_10026F62C()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10026F6E8()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0;
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  sub_10004D2D8((uint64_t)(v0 + 7));
  v0[37] = v0[33];
  uint64_t v2 = (void *)v0[17];
  static Logger.modernPlayback.getter();
  id v3 = v2;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v21 = v1[23];
    int v22 = (void (*)(uint64_t, uint64_t))v1[31];
    uint64_t v20 = v1[21];
    uint64_t v7 = (void *)v1[17];
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v9 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_getObjectType();
    uint64_t v10 = _typeName(_:qualified:)();
    v1[12] = sub_10004B974(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v1[13] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v9 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] Error starting manifest playback: %@", (uint8_t *)v8, 0x16u);
    sub_100054B78((uint64_t *)&unk_1005F9F00);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v22(v21, v20);
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v1[31];
    uint64_t v14 = v1[23];
    uint64_t v15 = v1[21];
    uint64_t v16 = (void *)v1[17];

    swift_errorRelease();
    swift_errorRelease();

    v13(v14, v15);
  }
  type metadata accessor for MainActor();
  v1[38] = static MainActor.shared.getter();
  uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026F5AC, v18, v17);
}

uint64_t sub_10026FA00()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0;
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  sub_10004D2D8((uint64_t)(v0 + 2));
  v0[37] = v0[35];
  uint64_t v2 = (void *)v0[17];
  static Logger.modernPlayback.getter();
  id v3 = v2;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v21 = v1[23];
    int v22 = (void (*)(uint64_t, uint64_t))v1[31];
    uint64_t v20 = v1[21];
    uint64_t v7 = (void *)v1[17];
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v9 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_getObjectType();
    uint64_t v10 = _typeName(_:qualified:)();
    v1[12] = sub_10004B974(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v1[13] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v9 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] Error starting manifest playback: %@", (uint8_t *)v8, 0x16u);
    sub_100054B78((uint64_t *)&unk_1005F9F00);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v22(v21, v20);
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v1[31];
    uint64_t v14 = v1[23];
    uint64_t v15 = v1[21];
    uint64_t v16 = (void *)v1[17];

    swift_errorRelease();
    swift_errorRelease();

    v13(v14, v15);
  }
  type metadata accessor for MainActor();
  v1[38] = static MainActor.shared.getter();
  uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026F5AC, v18, v17);
}

id sub_10026FE20()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedPlaybackController();
  return [super dealloc];
}

uint64_t sub_10026FEA0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10026FED8()
{
  swift_unknownObjectRelease();

  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10026FF30(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  char v10 = *(unsigned char *)(v1 + 64);
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = sub_10000B8F0;
  return sub_10026E938(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10027000C(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FDA68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10027006C()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

unint64_t sub_1002700A4()
{
  unint64_t result = qword_1005FDA70;
  if (!qword_1005FDA70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005FDA70);
  }
  return result;
}

const char *sub_1002700E4()
{
  return "isPlaying";
}

id sub_1002700F0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isPlaying];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100270124(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsPlaying:*a1];
}

uint64_t sub_10027013C(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FDB58);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v107 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v106 = (uint64_t)&v103 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v113 = (uint64_t)&v103 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v109 = (char *)&v103 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v108 = (uint64_t)&v103 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v111 = (uint64_t)&v103 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v112 = (char *)&v103 - v16;
  __chkstk_darwin(v15);
  uint64_t v114 = (char *)&v103 - v17;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v117 = v18;
  uint64_t v118 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v105 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v110 = (char *)&v103 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v116 = (void (**)(uint64_t, uint64_t))((char *)&v103 - v25);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v103 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v103 - v29;
  uint64_t v31 = sub_100054B78(&qword_1005FDB60);
  __chkstk_darwin(v31 - 8);
  int v33 = (char *)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = (int *)type metadata accessor for WidgetNowPlayingInfo();
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = __chkstk_darwin(v34);
  *(void *)&double v115 = (char *)&v103 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v36);
  id v40 = (char *)&v103 - v39;
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v43 = (uint64_t *)((char *)&v103 - v42);
  __chkstk_darwin(v41);
  uint64_t v45 = (char *)&v103 - v44;
  sub_100054BBC(a1, (uint64_t)v33, &qword_1005FDB60);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))(v33, 1, v34) == 1)
  {
    sub_100054B1C((uint64_t)v33, &qword_1005FDB60);
    return 1;
  }
  sub_10027609C((uint64_t)v33, (uint64_t)v45);
  uint64_t v46 = v119;
  uint64_t v47 = *(void *)(v119 + 8);
  uint64_t v48 = *((void *)v45 + 1);
  if (v47)
  {
    if (v48
      && (*(void *)v119 == *(void *)v45 && v47 == v48 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
LABEL_8:
      if (*(unsigned __int8 *)(v46 + 16) != v45[16])
      {
        static Logger.widget.getter();
        sub_1002742B0(v46, (uint64_t)v40);
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 67109120;
          int v52 = v40[16];
          sub_100274314((uint64_t)v40);
          LODWORD(v121[0]) = v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "WidgetNowPlayingInfo: isPlaying has changed %{BOOL}d", v51, 8u);
          swift_slowDealloc();
        }
        else
        {
          sub_100274314((uint64_t)v40);
        }

        (*(void (**)(char *, uint64_t))(v118 + 8))(v28, v117);
        goto LABEL_24;
      }
      if (*(unsigned char *)(v46 + 16)
        && (sub_100270F58(0xD000000000000017, 0x80000001004D9740, v46 + v34[7], (uint64_t)&v45[v34[7]]) & 1) != 0
        || (sub_100270F58(0xD00000000000001ALL, 0x80000001004D9760, v46 + v34[10], (uint64_t)&v45[v34[10]]) & 1) != 0)
      {
        goto LABEL_24;
      }
      uint64_t v59 = v34[8];
      uint64_t v60 = (uint64_t *)(v46 + v59);
      char v61 = *(unsigned char *)(v46 + v59 + 8);
      uint64_t v62 = &v45[v59];
      if (v61)
      {
        if (v62[8])
        {
LABEL_21:
          sub_100274314((uint64_t)v45);
          return 0;
        }
LABEL_30:
        static Logger.widget.getter();
        uint64_t v65 = v46;
        uint64_t v66 = *(void *)&v115;
        sub_1002742B0(v65, *(uint64_t *)&v115);
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = 134217984;
          uint64_t v70 = v66 + v34[8];
          double v71 = *(double *)v70;
          if (*(unsigned char *)(v70 + 8)) {
            double v71 = 0.0;
          }
          v121[0] = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_100274314(v66);
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "WidgetNowPlayingInfo: timeRemaining has changed %f", v69, 0xCu);
          swift_slowDealloc();
        }
        else
        {

          sub_100274314(v66);
        }
        (*(void (**)(char *, uint64_t))(v118 + 8))((char *)v116, v117);
        goto LABEL_24;
      }
      if (v62[8]) {
        goto LABEL_30;
      }
      double v72 = *(double *)v62;
      uint64_t v73 = (uint64_t)v114;
      double v115 = *(double *)v60;
      PlayButtonTimeFormatHelper.init(timeLeft:duration:)();
      uint64_t v74 = (uint64_t)v112;
      double v104 = v72;
      PlayButtonTimeFormatHelper.init(timeLeft:duration:)();
      uint64_t v75 = v111;
      sub_100054BBC(v73, v111, &qword_1005FDB58);
      uint64_t v76 = type metadata accessor for PlayButtonTimeFormatHelper();
      uint64_t v77 = *(char **)(v76 - 8);
      uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v77 + 6);
      int v79 = v78(v75, 1, v76);
      uint64_t v116 = (void (**)(uint64_t, uint64_t))v77;
      if (v79 == 1)
      {
        sub_100054B1C(v75, &qword_1005FDB58);
        char v80 = 3;
      }
      else
      {
        char v80 = PlayButtonTimeFormatHelper.formatStyle.getter();
        (*((void (**)(uint64_t, uint64_t))v77 + 1))(v75, v76);
      }
      uint64_t v81 = v108;
      uint64_t v82 = (uint64_t)v109;
      sub_100054BBC(v74, v108, &qword_1005FDB58);
      if (v78(v81, 1, v76) == 1)
      {
        sub_100054B1C(v81, &qword_1005FDB58);
        if (v80 == 3)
        {
          char v83 = 3;
LABEL_43:
          char v84 = v83 == 3;
          goto LABEL_44;
        }
      }
      else
      {
        char v83 = PlayButtonTimeFormatHelper.formatStyle.getter();
        v116[1](v81, v76);
        if (v80 == 3) {
          goto LABEL_43;
        }
        if (v83 != 3)
        {
          char v84 = static PlayButtonTimeFormatHelper.FormatStyle.== infix(_:_:)();
LABEL_44:
          uint64_t v85 = v82;
          sub_100054BBC(v73, v82, &qword_1005FDB58);
          uint64_t v86 = v113;
          sub_100054BBC(v74, v113, &qword_1005FDB58);
          if (v84)
          {
            uint64_t v87 = v106;
            sub_100054BBC(v82, v106, &qword_1005FDB58);
            if (v78(v87, 1, v76) == 1)
            {
              sub_100054B1C(v87, &qword_1005FDB58);
              char v88 = 6;
              uint64_t v89 = v113;
              uint64_t v90 = (uint64_t)v107;
              uint64_t v91 = v116;
            }
            else
            {
              char v88 = PlayButtonTimeFormatHelper.widgetCountDownHelper.getter();
              uint64_t v91 = v116;
              v116[1](v87, v76);
              uint64_t v89 = v113;
              uint64_t v90 = (uint64_t)v107;
            }
            sub_100054BBC(v89, v90, &qword_1005FDB58);
            if (v78(v90, 1, v76) == 1)
            {
              sub_100054B1C(v90, &qword_1005FDB58);
              uint64_t v86 = v113;
              if (v88 == 6)
              {
                char v97 = 6;
                goto LABEL_59;
              }
            }
            else
            {
              char v97 = PlayButtonTimeFormatHelper.widgetCountDownHelper.getter();
              v91[1](v90, v76);
              if (v88 == 6)
              {
LABEL_59:
                uint64_t v92 = v110;
                sub_100054B1C(v113, &qword_1005FDB58);
                sub_100054B1C(v85, &qword_1005FDB58);
                uint64_t v93 = (uint64_t)v114;
                if (v97 == 6) {
                  goto LABEL_60;
                }
                goto LABEL_50;
              }
              uint64_t v86 = v113;
              if (v97 != 6)
              {
                char v102 = static PlayButtonTimeFormatHelper.WidgetCountDownSizeRestrictingHelper.== infix(_:_:)();
                sub_100054B1C(v86, &qword_1005FDB58);
                sub_100054B1C(v85, &qword_1005FDB58);
                uint64_t v92 = v110;
                uint64_t v93 = (uint64_t)v114;
                if (v102)
                {
LABEL_60:
                  if ((*(unsigned char *)(v119 + 16) & 1) != 0 || (double v98 = vabdd_f64(v115, v104), v98 <= 1.0))
                  {
                    sub_100054B1C(v74, &qword_1005FDB58);
                    sub_100054B1C(v93, &qword_1005FDB58);
                    goto LABEL_21;
                  }
                  static Logger.widget.getter();
                  uint64_t v99 = Logger.logObject.getter();
                  os_log_type_t v100 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v99, v100))
                  {
                    uint64_t v101 = swift_slowAlloc();
                    *(_DWORD *)uint64_t v101 = 134218240;
                    v121[0] = v98;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    *(_WORD *)(v101 + 12) = 2048;
                    v121[0] = v115;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    _os_log_impl((void *)&_mh_execute_header, v99, v100, "WidgetNowPlayingInfo: timeRemaining has changed by %f seconds %f", (uint8_t *)v101, 0x16u);
                    swift_slowDealloc();
                  }

                  (*(void (**)(char *, uint64_t))(v118 + 8))(v105, v117);
                  goto LABEL_53;
                }
LABEL_50:
                static Logger.widget.getter();
                uint64_t v94 = Logger.logObject.getter();
                os_log_type_t v95 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v94, v95))
                {
                  uint64_t v96 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v96 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v94, v95, "WidgetNowPlayingInfo: format is changing", v96, 2u);
                  swift_slowDealloc();
                }

                (*(void (**)(char *, uint64_t))(v118 + 8))(v92, v117);
LABEL_53:
                sub_100054B1C(v74, &qword_1005FDB58);
                sub_100054B1C(v93, &qword_1005FDB58);
                goto LABEL_24;
              }
            }
          }
LABEL_49:
          sub_100054B1C(v86, &qword_1005FDB58);
          sub_100054B1C(v85, &qword_1005FDB58);
          uint64_t v92 = v110;
          uint64_t v93 = (uint64_t)v114;
          goto LABEL_50;
        }
      }
      uint64_t v85 = v82;
      sub_100054BBC(v73, v82, &qword_1005FDB58);
      uint64_t v86 = v113;
      sub_100054BBC(v74, v113, &qword_1005FDB58);
      goto LABEL_49;
    }
  }
  else if (!v48)
  {
    goto LABEL_8;
  }
  static Logger.widget.getter();
  sub_1002742B0(v46, (uint64_t)v43);
  char v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v53, v54))
  {

    sub_100274314((uint64_t)v43);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v30, v117);
LABEL_24:
    sub_100274314((uint64_t)v45);
    return 1;
  }
  uint64_t v55 = (uint64_t)v45;
  unint64_t v56 = (uint8_t *)swift_slowAlloc();
  v121[0] = COERCE_DOUBLE(swift_slowAlloc());
  *(_DWORD *)unint64_t v56 = 136446210;
  if (v43[1])
  {
    uint64_t v57 = *v43;
    unint64_t v58 = v43[1];
  }
  else
  {
    unint64_t v58 = 0xE500000000000000;
    uint64_t v57 = 0x3E6C696E3CLL;
  }
  swift_bridgeObjectRetain();
  uint64_t v120 = sub_10004B974(v57, v58, (uint64_t *)v121);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100274314((uint64_t)v43);
  _os_log_impl((void *)&_mh_execute_header, v53, v54, "WidgetNowPlayingInfo: currentEpisodeUUID has changed %{public}s", v56, 0xCu);
  uint64_t v63 = 1;
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v118 + 8))(v30, v117);
  sub_100274314(v55);
  return v63;
}

uint64_t sub_100270F58(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v74 = a2;
  uint64_t v69 = a1;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  double v72 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v73 = (char *)&v67 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v67 - v12;
  uint64_t v68 = sub_100054B78(&qword_1005F5D20);
  uint64_t v14 = __chkstk_darwin(v68);
  uint64_t v67 = (uint64_t)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v70 = (char *)&v67 - v16;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v75 = *(void *)(v17 - 8);
  uint64_t v76 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  double v71 = (char *)&v67 - v21;
  uint64_t v22 = sub_100054B78(&qword_1005FC1E8);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v25 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (uint64_t)&v25[*(int *)(v23 + 56)];
  uint64_t v27 = a3;
  sub_100054BBC(a3, (uint64_t)v25, &qword_1005F5D20);
  sub_100054BBC(a4, v26, &qword_1005F5D20);
  uint64_t v28 = v7;
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v30 = v29(v25, 1, v6);
  int v31 = v29((char *)v26, 1, v6);
  if (v30 == 1)
  {
    if (v31 != 1)
    {
      sub_100054B1C(v26, &qword_1005F5D20);
LABEL_6:
      uint64_t v35 = v76;
      unint64_t v36 = v74;
      uint64_t v38 = (uint64_t)v70;
      uint64_t v37 = v71;
      static Logger.widget.getter();
      sub_100054BBC(v27, v38, &qword_1005F5D20);
      swift_bridgeObjectRetain_n();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v77 = sub_10004B974(v69, v36, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v41 + 12) = 2082;
        sub_100054BBC(v38, v67, &qword_1005F5D20);
        uint64_t v42 = String.init<A>(describing:)();
        uint64_t v77 = sub_10004B974(v42, v43, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100054B1C(v38, &qword_1005F5D20);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "WidgetNowPlayingInfo: %{public}s has changed %{public}s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v76);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        sub_100054B1C(v38, &qword_1005F5D20);

        (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v35);
      }
      return 1;
    }
    return 0;
  }
  uint64_t v32 = v6;
  uint64_t v34 = v72;
  int v33 = v73;
  if (v31 == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v32);
    goto LABEL_6;
  }
  uint64_t v44 = v20;
  uint64_t v45 = v28;
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  uint64_t v47 = v13;
  uint64_t v48 = v32;
  v46(v13, v25, v32);
  v46(v33, (char *)v26, v48);
  Date.distance(to:)();
  double v50 = fabs(v49);
  if (v50 <= 1.0)
  {
    uint64_t v65 = *(void (**)(char *, uint64_t))(v28 + 8);
    v65(v33, v48);
    v65(v13, v48);
    return 0;
  }
  uint64_t v51 = (uint64_t)v44;
  static Logger.widget.getter();
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v34, v47, v48);
  unint64_t v52 = v74;
  swift_bridgeObjectRetain_n();
  char v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  LODWORD(v71) = v54;
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v57 = v75;
  uint64_t v56 = v76;
  if (v55)
  {
    uint64_t v58 = swift_slowAlloc();
    uint64_t v70 = v47;
    uint64_t v59 = v58;
    uint64_t v60 = swift_slowAlloc();
    uint64_t v68 = v51;
    uint64_t v78 = v60;
    *(_DWORD *)uint64_t v59 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v77 = sub_10004B974(v69, v52, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v59 + 12) = 2048;
    uint64_t v77 = *(void *)&v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v59 + 22) = 2082;
    sub_100276100(&qword_1005FDB68, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = sub_10004B974(v61, v62, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v45 + 8);
    v63(v34, v48);
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v71, "WidgetNowPlayingInfo: %{public}s has changed by %f seconds %{public}s", (uint8_t *)v59, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v68, v76);
    v63(v73, v48);
    v63(v70, v48);
  }
  else
  {

    uint64_t v66 = *(void (**)(char *, uint64_t))(v45 + 8);
    v66(v34, v48);
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v51, v56);
    v66(v33, v48);
    v66(v47, v48);
  }
  return 1;
}

uint64_t sub_1002717B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  __chkstk_darwin(v2);
  id v3 = [self _applePodcastsFoundationSharedUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 dataForKey:v4];

  if (v5)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    sub_10023FCA8(v6, v8);
    JSONDecoder.init()();
    type metadata accessor for WidgetNowPlayingInfo();
    sub_100276100(&qword_1005FDB78, (void (*)(uint64_t))type metadata accessor for WidgetNowPlayingInfo);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    sub_10021A410(v6, v8);
    return sub_10021A410(v6, v8);
  }
  else
  {
    uint64_t v10 = (int *)type metadata accessor for WidgetNowPlayingInfo();
    uint64_t v11 = a1 + v10[6];
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    v13(v11, 1, 1, v12);
    v13(a1 + v10[7], 1, 1, v12);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(a1 + v10[10], 1, 1, v12);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v14 = a1 + v10[8];
    *(void *)uint64_t v14 = 0;
    *(unsigned char *)(v14 + 8) = 1;
    uint64_t v15 = a1 + v10[9];
    *(void *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 8) = 1;
  }
  return result;
}

void WidgetNowPlayingInfo.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v35 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100054B78(&qword_1005F5D20);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v34 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 16));
  uint64_t v13 = (int *)type metadata accessor for WidgetNowPlayingInfo();
  sub_100054BBC(v0 + v13[6], (uint64_t)v12, &qword_1005F5D20);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  int v15 = v14(v12, 1, v2);
  uint64_t v33 = v3;
  if (v15 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v32 = v14;
    uint64_t v17 = v35;
    v16(v35, v12, v2);
    Hasher._combine(_:)(1u);
    sub_100276100(&qword_1005FC1E0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v18 = v17;
    uint64_t v14 = v32;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v18, v2);
  }
  sub_100054BBC(v0 + v13[7], (uint64_t)v10, &qword_1005F5D20);
  if (v14(v10, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v19 = v33;
    uint64_t v20 = v14;
    uint64_t v21 = v35;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v35, v10, v2);
    Hasher._combine(_:)(1u);
    sub_100276100(&qword_1005FC1E0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v22 = v21;
    uint64_t v14 = v20;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v2);
  }
  uint64_t v23 = v0 + v13[8];
  if (*(unsigned char *)(v23 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v24 = *(void *)v23;
    Hasher._combine(_:)(1u);
    if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v25 = v24;
    }
    else {
      Swift::UInt64 v25 = 0;
    }
    Hasher._combine(_:)(v25);
  }
  uint64_t v26 = v0 + v13[9];
  if (*(unsigned char *)(v26 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v27 = *(void *)v26;
    Hasher._combine(_:)(1u);
    if ((v27 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v28 = v27;
    }
    else {
      Swift::UInt64 v28 = 0;
    }
    Hasher._combine(_:)(v28);
  }
  uint64_t v29 = v34;
  sub_100054BBC(v1 + v13[10], v34, &qword_1005F5D20);
  if (v14((char *)v29, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v30 = v33;
    int v31 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v35, v29, v2);
    Hasher._combine(_:)(1u);
    sub_100276100(&qword_1005FC1E0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v2);
  }
}

unint64_t sub_10027212C(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6979616C507369;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x616D6552656D6974;
      break;
    case 5:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100272214(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_100272228()
{
  return sub_10027212C(*v0);
}

uint64_t sub_100272230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100275DA8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100272258(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100272264(uint64_t a1)
{
  unint64_t v2 = sub_10027425C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002722A0(uint64_t a1)
{
  unint64_t v2 = sub_10027425C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WidgetNowPlayingInfo.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100054B78(&qword_1005FDA78);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100041A98(a1, a1[3]);
  sub_10027425C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for WidgetNowPlayingInfo();
    char v13 = 2;
    type metadata accessor for Date();
    sub_100276100(&qword_1005FB158, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v11 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v10 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int WidgetNowPlayingInfo.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t WidgetNowPlayingInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = sub_100054B78(&qword_1005F5D20);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - v7;
  __chkstk_darwin(v6);
  char v10 = (char *)&v31 - v9;
  uint64_t v11 = sub_100054B78(&qword_1005FDA88);
  uint64_t v33 = *(void *)(v11 - 8);
  uint64_t v34 = v11;
  __chkstk_darwin(v11);
  char v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (int *)type metadata accessor for WidgetNowPlayingInfo();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v35 = a1;
  sub_100041A98(a1, v17);
  sub_10027425C();
  uint64_t v18 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return sub_10004D2D8((uint64_t)v35);
  }
  uint64_t v19 = (uint64_t)v8;
  uint64_t v20 = v33;
  char v43 = 0;
  *(void *)uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v16 + 1) = v21;
  char v42 = 1;
  v16[16] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  type metadata accessor for Date();
  char v41 = 2;
  uint64_t v22 = sub_100276100(&qword_1005FB170, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1001B6AF4((uint64_t)v10, (uint64_t)&v16[v14[6]]);
  char v40 = 3;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v36 = v22;
  sub_1001B6AF4(v19, (uint64_t)&v16[v14[7]]);
  char v39 = 4;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  Swift::UInt64 v24 = &v16[v14[8]];
  *(void *)Swift::UInt64 v24 = v23;
  v24[8] = v25 & 1;
  char v38 = 5;
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  Swift::UInt64 v27 = &v16[v14[9]];
  *(void *)Swift::UInt64 v27 = v26;
  v27[8] = v28 & 1;
  char v37 = 6;
  uint64_t v29 = (uint64_t)v32;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v34);
  sub_1001B6AF4(v29, (uint64_t)&v16[v14[10]]);
  sub_1002742B0((uint64_t)v16, v31);
  sub_10004D2D8((uint64_t)v35);
  return sub_100274314((uint64_t)v16);
}

uint64_t sub_100272A8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetNowPlayingInfo.init(from:)(a1, a2);
}

uint64_t sub_100272AA4(void *a1)
{
  return WidgetNowPlayingInfo.encode(to:)(a1);
}

Swift::Int sub_100272AC0()
{
  return Hasher._finalize()();
}

Swift::Void __swiftcall WidgetNowPlayingInfo.logInfo()()
{
  uint64_t v1 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v60 = *(void *)(v1 - 8);
  uint64_t v61 = v1;
  __chkstk_darwin(v1);
  uint64_t v59 = (uint64_t)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100054B78(&qword_1005F5D20);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v66 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v64 = (uint64_t)&v53 - v6;
  uint64_t v7 = type metadata accessor for WidgetNowPlayingInfo();
  uint64_t v8 = __chkstk_darwin(v7);
  char v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v68 = (uint64_t)&v53 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v53 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (uint64_t *)((char *)&v53 - v16);
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + *(int *)(v7 + 36) + 8))
  {
    unint64_t v22 = 0xE300000000000000;
    uint64_t v63 = 7104878;
  }
  else
  {
    uint64_t v63 = Double.description.getter();
    unint64_t v22 = v23;
  }
  char v24 = *(unsigned char *)(v0 + *(int *)(v7 + 32) + 8);
  uint64_t v65 = v7;
  if (v24)
  {
    unint64_t v25 = 0xE300000000000000;
    uint64_t v62 = 7104878;
  }
  else
  {
    uint64_t v62 = Double.description.getter();
    unint64_t v25 = v26;
  }
  static Logger.widget.getter();
  sub_1002742B0(v0, (uint64_t)v17);
  sub_1002742B0(v0, (uint64_t)v15);
  uint64_t v27 = v68;
  sub_1002742B0(v0, v68);
  sub_1002742B0(v0, (uint64_t)v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v28 = Logger.logObject.getter();
  int v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, (os_log_type_t)v58))
  {
    os_log_t v57 = v28;
    uint64_t v67 = v10;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    uint64_t v70 = v53;
    *(_DWORD *)uint64_t v29 = 136447490;
    unint64_t v30 = v17[1];
    uint64_t v31 = v65;
    uint64_t v55 = v19;
    uint64_t v56 = v18;
    os_log_type_t v54 = v21;
    if (v30)
    {
      uint64_t v32 = *v17;
      unint64_t v33 = v30;
    }
    else
    {
      unint64_t v33 = 0xE300000000000000;
      uint64_t v32 = 7104878;
    }
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_10004B974(v32, v33, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100274314((uint64_t)v17);
    *(_WORD *)(v29 + 12) = 1024;
    int v34 = v15[16];
    sub_100274314((uint64_t)v15);
    LODWORD(v69) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 18) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_10004B974(v63, v22, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 28) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_10004B974(v62, v25, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 38) = 2082;
    uint64_t v35 = v64;
    sub_100054BBC(v68 + *(int *)(v31 + 24), v64, &qword_1005F5D20);
    uint64_t v36 = type metadata accessor for Date();
    uint64_t v37 = *(void *)(v36 - 8);
    char v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    if (v38(v35, 1, v36) == 1)
    {
      sub_100054B1C(v35, &qword_1005F5D20);
      unint64_t v39 = 0xE300000000000000;
      uint64_t v40 = 7104878;
    }
    else
    {
      uint64_t v41 = v59;
      sub_1002732A8(v59);
      uint64_t v40 = Date.ISO8601Format(_:)();
      unint64_t v39 = v42;
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v41, v61);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
    }
    uint64_t v43 = v56;
    uint64_t v69 = sub_10004B974(v40, v39, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100274314(v68);
    *(_WORD *)(v29 + 48) = 2082;
    uint64_t v44 = v66;
    sub_100054BBC((uint64_t)&v67[*(int *)(v31 + 28)], v66, &qword_1005F5D20);
    if (v38(v44, 1, v36) == 1)
    {
      sub_100054B1C(v44, &qword_1005F5D20);
      unint64_t v45 = 0xE300000000000000;
      uint64_t v47 = v54;
      uint64_t v46 = v55;
      uint64_t v48 = 7104878;
    }
    else
    {
      uint64_t v49 = v59;
      sub_1002732A8(v59);
      uint64_t v48 = Date.ISO8601Format(_:)();
      unint64_t v45 = v50;
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v49, v61);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v44, v36);
      uint64_t v47 = v54;
      uint64_t v46 = v55;
    }
    os_log_type_t v51 = v58;
    uint64_t v69 = sub_10004B974(v48, v45, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100274314((uint64_t)v67);
    os_log_t v52 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, v51, "WidgetNowPlayingInfo: %{public}s, isPlaying: %{BOOL}d, duration %{public}s, timeRemaining %{public}s, start %{public}s, end %{public}s", (uint8_t *)v29, 0x3Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v43);
  }
  else
  {
    sub_100274314((uint64_t)v15);
    sub_100274314((uint64_t)v17);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_100274314(v27);
    sub_100274314((uint64_t)v10);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
}

uint64_t sub_1002732A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v1 = sub_100054B78(&qword_1005FDB80);
  __chkstk_darwin(v1 - 8);
  uint64_t v29 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for TimeZone();
  uint64_t v3 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  unint64_t v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  __chkstk_darwin(v16);
  (*(void (**)(char *, void))(v18 + 104))((char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:));
  uint64_t v19 = v12;
  uint64_t v20 = v28;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v19);
  uint64_t v21 = v7;
  unint64_t v22 = v29;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v8);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v21, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v27);
  TimeZone.init(secondsFromGMT:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v22, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v25, v22, v20);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
  }
  return result;
}

uint64_t sub_1002736A8(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_1002736D4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1002736FC@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

BOOL _s8Podcasts20WidgetNowPlayingInfoV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(char **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v128 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100054B78(&qword_1005FC1E8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v112 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v112 - v14;
  uint64_t v16 = sub_100054B78(&qword_1005F5D20);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v21 = __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v112 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v26 = __chkstk_darwin(v25);
  __chkstk_darwin(v26);
  uint64_t v35 = (char *)&v112 - v31;
  uint64_t v36 = *(void *)(a1 + 8);
  uint64_t v129 = a2;
  uint64_t v37 = *(void *)(a2 + 8);
  if (!v36)
  {
    if (v37) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v37) {
    return 0;
  }
  if (*(void *)a1 == *(void *)v129 && v36 == v37) {
    goto LABEL_8;
  }
  uint64_t v125 = v27;
  unint64_t v126 = v13;
  uint64_t v123 = a1;
  uint64_t v124 = v7;
  uint64_t v38 = v29;
  uint64_t v122 = (char *)&v112 - v31;
  unint64_t v39 = v5;
  uint64_t v40 = v33;
  uint64_t v127 = v4;
  uint64_t v41 = v34;
  unint64_t v42 = v23;
  uint64_t v43 = v28;
  uint64_t v44 = v15;
  uint64_t v45 = v32;
  uint64_t v46 = v30;
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v30 = v46;
  uint64_t v32 = v45;
  uint64_t v15 = v44;
  uint64_t v28 = v43;
  unint64_t v23 = v42;
  uint64_t v34 = v41;
  uint64_t v13 = v126;
  uint64_t v4 = v127;
  uint64_t v33 = v40;
  uint64_t v5 = v39;
  uint64_t v35 = v122;
  a1 = v123;
  uint64_t v29 = v38;
  uint64_t v7 = v124;
  uint64_t v27 = v125;
  char v48 = v47;
  BOOL result = 0;
  if (v48)
  {
LABEL_8:
    if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(v129 + 16)) {
      return 0;
    }
    uint64_t v125 = v27;
    unint64_t v126 = v13;
    uint64_t v115 = v29;
    uint64_t v116 = v33;
    uint64_t v121 = v28;
    uint64_t v117 = v34;
    uint64_t v114 = v32;
    uint64_t v119 = v10;
    uint64_t v50 = v30;
    uint64_t v51 = type metadata accessor for WidgetNowPlayingInfo();
    uint64_t v52 = v4;
    uint64_t v53 = v51;
    uint64_t v54 = a1 + *(int *)(v51 + 24);
    uint64_t v127 = v52;
    sub_100054BBC(v54, (uint64_t)v35, &qword_1005F5D20);
    uint64_t v120 = (int *)v53;
    sub_100054BBC(v129 + *(int *)(v53 + 24), v50, &qword_1005F5D20);
    uint64_t v55 = v5;
    uint64_t v56 = (uint64_t)&v15[*(int *)(v7 + 48)];
    sub_100054BBC((uint64_t)v35, (uint64_t)v15, &qword_1005F5D20);
    uint64_t v57 = v127;
    sub_100054BBC(v50, v56, &qword_1005F5D20);
    uint64_t v122 = v5;
    uint64_t v58 = (uint64_t)v15;
    uint64_t v61 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v55 + 6);
    uint64_t v59 = v55 + 48;
    uint64_t v60 = v61;
    if (v61(v58, 1, v57) == 1)
    {
      uint64_t v118 = v23;
      sub_100054B1C(v50, &qword_1005F5D20);
      uint64_t v62 = v127;
      sub_100054B1C((uint64_t)v35, &qword_1005F5D20);
      if (v60(v56, 1, v62) == 1)
      {
        uint64_t v112 = v59;
        sub_100054B1C(v58, &qword_1005F5D20);
        uint64_t v63 = v62;
        uint64_t v64 = v60;
LABEL_16:
        double v72 = v120;
        uint64_t v71 = v121;
        sub_100054BBC(a1 + v120[7], v121, &qword_1005F5D20);
        uint64_t v73 = (uint64_t)v118;
        sub_100054BBC(v129 + v72[7], (uint64_t)v118, &qword_1005F5D20);
        uint64_t v124 = v7;
        uint64_t v74 = (uint64_t)v126;
        uint64_t v75 = (uint64_t)&v126[*(int *)(v7 + 48)];
        sub_100054BBC(v71, (uint64_t)v126, &qword_1005F5D20);
        sub_100054BBC(v73, v75, &qword_1005F5D20);
        if (v64(v74, 1, v63) == 1)
        {
          sub_100054B1C(v73, &qword_1005F5D20);
          sub_100054B1C(v71, &qword_1005F5D20);
          unsigned int v76 = v64(v75, 1, v127);
          uint64_t v77 = v64;
          uint64_t v78 = (uint64_t)v119;
          if (v76 == 1)
          {
            sub_100054B1C((uint64_t)v126, &qword_1005F5D20);
LABEL_25:
            uint64_t v89 = v72[8];
            uint64_t v90 = (double *)(a1 + v89);
            char v91 = *(unsigned char *)(a1 + v89 + 8);
            uint64_t v92 = (double *)(v129 + v89);
            int v93 = *(unsigned __int8 *)(v129 + v89 + 8);
            if (v91)
            {
              if (!v93) {
                return 0;
              }
            }
            else
            {
              if (*v90 != *v92) {
                LOBYTE(v93) = 1;
              }
              if (v93) {
                return 0;
              }
            }
            uint64_t v94 = v72[9];
            os_log_type_t v95 = (double *)(a1 + v94);
            char v96 = *(unsigned char *)(a1 + v94 + 8);
            char v97 = (double *)(v129 + v94);
            int v98 = *(unsigned __int8 *)(v129 + v94 + 8);
            if (v96)
            {
              if (!v98) {
                return 0;
              }
            }
            else
            {
              if (*v95 != *v97) {
                LOBYTE(v98) = 1;
              }
              if (v98) {
                return 0;
              }
            }
            uint64_t v99 = v116;
            sub_100054BBC(a1 + v72[10], v116, &qword_1005F5D20);
            uint64_t v100 = v129 + v72[10];
            uint64_t v101 = v115;
            sub_100054BBC(v100, v115, &qword_1005F5D20);
            uint64_t v102 = v78 + *(int *)(v124 + 48);
            sub_100054BBC(v99, v78, &qword_1005F5D20);
            sub_100054BBC(v101, v102, &qword_1005F5D20);
            uint64_t v103 = v78;
            uint64_t v104 = v78;
            uint64_t v105 = v127;
            if (v77(v103, 1, v127) == 1)
            {
              sub_100054B1C(v101, &qword_1005F5D20);
              sub_100054B1C(v99, &qword_1005F5D20);
              if (v77(v102, 1, v105) == 1)
              {
                sub_100054B1C(v104, &qword_1005F5D20);
                return 1;
              }
              goto LABEL_42;
            }
            uint64_t v106 = v77;
            uint64_t v107 = v114;
            sub_100054BBC(v104, v114, &qword_1005F5D20);
            if (v106(v102, 1, v105) == 1)
            {
              sub_100054B1C(v101, &qword_1005F5D20);
              sub_100054B1C(v99, &qword_1005F5D20);
              (*((void (**)(uint64_t, uint64_t))v122 + 1))(v107, v105);
LABEL_42:
              uint64_t v66 = v104;
              goto LABEL_22;
            }
            uint64_t v108 = v122;
            uint64_t v109 = v128;
            (*((void (**)(char *, uint64_t, uint64_t))v122 + 4))(v128, v102, v105);
            sub_100276100(&qword_1005FC1F0, (void (*)(uint64_t))&type metadata accessor for Date);
            char v110 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v111 = (void (*)(char *, uint64_t))*((void *)v108 + 1);
            v111(v109, v105);
            sub_100054B1C(v101, &qword_1005F5D20);
            sub_100054B1C(v99, &qword_1005F5D20);
            v111((char *)v107, v105);
            sub_100054B1C(v104, &qword_1005F5D20);
            return (v110 & 1) != 0;
          }
        }
        else
        {
          uint64_t v79 = v117;
          sub_100054BBC(v74, v117, &qword_1005F5D20);
          unsigned int v80 = v64(v75, 1, v63);
          uint64_t v81 = v64;
          uint64_t v78 = (uint64_t)v119;
          if (v80 != 1)
          {
            uint64_t v123 = a1;
            uint64_t v82 = v122;
            char v83 = v128;
            (*((void (**)(char *, uint64_t, uint64_t))v122 + 4))(v128, v75, v63);
            sub_100276100(&qword_1005FC1F0, (void (*)(uint64_t))&type metadata accessor for Date);
            char v84 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v113 = v81;
            char v85 = v84;
            uint64_t v86 = (void (*)(char *, uint64_t))*((void *)v82 + 1);
            uint64_t v87 = v83;
            double v72 = v120;
            v86(v87, v63);
            sub_100054B1C((uint64_t)v118, &qword_1005F5D20);
            sub_100054B1C(v121, &qword_1005F5D20);
            uint64_t v88 = v79;
            uint64_t v77 = v113;
            v86((char *)v88, v63);
            a1 = v123;
            sub_100054B1C(v74, &qword_1005F5D20);
            if ((v85 & 1) == 0) {
              return 0;
            }
            goto LABEL_25;
          }
          sub_100054B1C((uint64_t)v118, &qword_1005F5D20);
          sub_100054B1C(v121, &qword_1005F5D20);
          (*((void (**)(uint64_t, uint64_t))v122 + 1))(v79, v63);
        }
        uint64_t v66 = (uint64_t)v126;
LABEL_22:
        sub_100054B1C(v66, &qword_1005FC1E8);
        return 0;
      }
    }
    else
    {
      uint64_t v124 = v50;
      uint64_t v65 = v125;
      sub_100054BBC(v58, v125, &qword_1005F5D20);
      uint64_t v113 = v60;
      if (v60(v56, 1, v57) != 1)
      {
        uint64_t v118 = v23;
        uint64_t v112 = v59;
        uint64_t v67 = v122;
        uint64_t v68 = v128;
        (*((void (**)(char *, uint64_t, uint64_t))v122 + 4))(v128, v56, v57);
        sub_100276100(&qword_1005FC1F0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v63 = v57;
        char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v70 = (void (*)(char *, uint64_t))*((void *)v67 + 1);
        v70(v68, v57);
        sub_100054B1C(v124, &qword_1005F5D20);
        sub_100054B1C((uint64_t)v35, &qword_1005F5D20);
        v70((char *)v65, v57);
        sub_100054B1C(v58, &qword_1005F5D20);
        uint64_t v64 = v113;
        if ((v69 & 1) == 0) {
          return 0;
        }
        goto LABEL_16;
      }
      sub_100054B1C(v124, &qword_1005F5D20);
      sub_100054B1C((uint64_t)v35, &qword_1005F5D20);
      (*((void (**)(uint64_t, uint64_t))v122 + 1))(v65, v57);
    }
    uint64_t v66 = v58;
    goto LABEL_22;
  }
  return result;
}

unint64_t sub_10027425C()
{
  unint64_t result = qword_1005FDA80;
  if (!qword_1005FDA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FDA80);
  }
  return result;
}

uint64_t sub_1002742B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WidgetNowPlayingInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100274314(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WidgetNowPlayingInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100274370()
{
  return sub_100276100(&qword_1005FDA90, (void (*)(uint64_t))type metadata accessor for WidgetNowPlayingInfo);
}

void *initializeBufferWithCopyOfBuffer for WidgetNowPlayingInfo(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a3[6];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100054B78(&qword_1005F5D20);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v11))
    {
      uint64_t v19 = sub_100054B78(&qword_1005F5D20);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (char *)v4 + v20;
    uint64_t v23 = (uint64_t)a2 + v20;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = *(unsigned char *)(v23 + 8);
    uint64_t v24 = (char *)v4 + v21;
    uint64_t v25 = (uint64_t)a2 + v21;
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = *(unsigned char *)(v25 + 8);
    uint64_t v26 = a3[10];
    uint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (char *)a2 + v26;
    if (v13(v28, 1, v11))
    {
      uint64_t v29 = sub_100054B78(&qword_1005F5D20);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v27, v28, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v27, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t destroy for WidgetNowPlayingInfo(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v6(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[7];
  if (!v6(v7, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v7, v5);
  }
  uint64_t v8 = a1 + a2[10];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v8, 1, v5);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v8, v5);
  }
  return result;
}

uint64_t initializeWithCopy for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100054B78(&qword_1005F5D20);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    uint64_t v17 = sub_100054B78(&qword_1005F5D20);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  uint64_t v22 = a1 + v19;
  uint64_t v23 = a2 + v19;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  if (v12(v26, 1, v10))
  {
    uint64_t v27 = sub_100054B78(&qword_1005F5D20);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v25, v26, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100054B78(&qword_1005F5D20);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    uint64_t v20 = sub_100054B78(&qword_1005F5D20);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
LABEL_13:
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  *(unsigned char *)(v22 + 8) = *((unsigned char *)v23 + 8);
  *(void *)uint64_t v22 = v24;
  uint64_t v25 = a3[9];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v28 = *v27;
  *(unsigned char *)(v26 + 8) = *((unsigned char *)v27 + 8);
  *(void *)uint64_t v26 = v28;
  uint64_t v29 = a3[10];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  int v32 = v11((void *)(a1 + v29), 1, v9);
  int v33 = v11(v31, 1, v9);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v30, v31, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v30, v9);
    goto LABEL_18;
  }
  if (v33)
  {
LABEL_18:
    uint64_t v34 = sub_100054B78(&qword_1005F5D20);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v30, v31, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v30, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100054B78(&qword_1005F5D20);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    uint64_t v16 = sub_100054B78(&qword_1005F5D20);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  if (v11(v25, 1, v9))
  {
    uint64_t v26 = sub_100054B78(&qword_1005F5D20);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100054B78(&qword_1005F5D20);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_12:
    uint64_t v21 = sub_100054B78(&qword_1005F5D20);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v17, v18, v10);
LABEL_13:
  uint64_t v22 = a3[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  uint64_t v26 = a1 + v23;
  uint64_t v27 = a2 + v23;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  uint64_t v28 = a3[10];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  int v31 = v12((void *)(a1 + v28), 1, v10);
  int v32 = v12(v30, 1, v10);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v29, v30, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v29, v10);
    goto LABEL_18;
  }
  if (v32)
  {
LABEL_18:
    uint64_t v33 = sub_100054B78(&qword_1005F5D20);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v29, v30, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100275510);
}

uint64_t sub_100275510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100054B78(&qword_1005F5D20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetNowPlayingInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002755E4);
}

uint64_t sub_1002755E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_100054B78(&qword_1005F5D20);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetNowPlayingInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for WidgetNowPlayingInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002757ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetNowPlayingInfo.CodingKeys()
{
  return &type metadata for WidgetNowPlayingInfo.CodingKeys;
}

unint64_t sub_100275828()
{
  unint64_t result = qword_1005FDB40;
  if (!qword_1005FDB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FDB40);
  }
  return result;
}

unint64_t sub_100275880()
{
  unint64_t result = qword_1005FDB48;
  if (!qword_1005FDB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FDB48);
  }
  return result;
}

unint64_t sub_1002758D8()
{
  unint64_t result = qword_1005FDB50;
  if (!qword_1005FDB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FDB50);
  }
  return result;
}

uint64_t sub_10027592C()
{
  uint64_t v0 = type metadata accessor for WidgetNowPlayingInfo();
  uint64_t v1 = __chkstk_darwin(v0);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for Logger();
  __chkstk_darwin(v2);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100276100(&qword_1005FDB70, (void (*)(uint64_t))type metadata accessor for WidgetNowPlayingInfo);
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  id v6 = [self _applePodcastsFoundationSharedUserDefaults];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v8 = String._bridgeToObjectiveC()();
  [v6 setValue:isa forKey:v8];

  return sub_10021A410(v3, v5);
}

uint64_t sub_100275DA8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001004D9700
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6979616C507369 && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001004D9720 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001004D9740 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616D6552656D6974 && a2 == 0xED0000676E696E69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001004D9760)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_10027609C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WidgetNowPlayingInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100276100(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for FetchNonFollowedShows()
{
  return self;
}

uint64_t sub_10027616C@<X0>(void *a1@<X8>)
{
  sub_1002761FC();
  unint64_t v2 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v3 = sub_1003E4EDC(v2);
  uint64_t result = swift_bridgeObjectRelease();
  char v5 = _swiftEmptyArrayStorage;
  if (v3) {
    char v5 = v3;
  }
  *a1 = v5;
  return result;
}

unint64_t sub_1002761FC()
{
  unint64_t result = qword_1005F88D0;
  if (!qword_1005F88D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005F88D0);
  }
  return result;
}

uint64_t FlowAction.init(station:presentationContext:)(void *a1, uint64_t a2)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for ActionMetrics();
  __chkstk_darwin(v3 - 8);
  uint64_t v29 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FlowDestinationPageHeader();
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  __chkstk_darwin(v5);
  uint64_t v26 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FlowPresentationContext();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FlowDestination();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v14 = (void *)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for StationDetail();
  id v15 = a1;
  sub_10004BE90(v15, 0, 1, 1);
  if (v16)
  {
    id v25 = v15;
    *int v14 = v16;
    (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for FlowDestination.station(_:), v11);
    swift_retain();
    uint64_t v17 = StationDetail.title.getter();
    v24[1] = v18;
    v24[2] = v17;
    uint64_t v19 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v30, v7);
    unsigned __int8 v20 = static Link.Presentation.textFollowsTintColor.getter();
    unsigned __int8 v21 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
    Link.Presentation.init(rawValue:)();
    Link.Presentation.init(rawValue:)();
    if (Link.Presentation.init(rawValue:)() != v20) {
      Link.Presentation.init(rawValue:)();
    }
    Link.Presentation.init(rawValue:)();
    if (Link.Presentation.init(rawValue:)() != v21) {
      Link.Presentation.init(rawValue:)();
    }
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v26, enum case for FlowDestinationPageHeader.standard(_:), v28);
    static ActionMetrics.notInstrumented.getter();
    uint64_t v22 = dispatch thunk of FlowAction.__allocating_init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v19, v7);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v30, v7);
    return 0;
  }
  return v22;
}

uint64_t FlowAction.init(podcast:presentationContext:actionMetrics:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  uint64_t v43 = type metadata accessor for ActionMetrics();
  uint64_t v40 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  unint64_t v39 = &v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for FlowDestinationPageHeader();
  uint64_t v37 = *(unsigned char **)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for FlowPresentationContext();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for FlowDestination();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (uint64_t *)&v31[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PodcastDetail();
  id v16 = a1;
  uint64_t v17 = sub_10022B704(v16, 0, 0, 0, 1);
  if (v17)
  {
    uint64_t v18 = v17;
    id v33 = v16;
    sub_1001D6264();
    LOBYTE(v32) = static UITraitCollection.interfaceIdiomIsMac.getter() & 1;
    int v32 = v32;
    *id v15 = v18;
    (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))(v15, enum case for FlowDestination.podcast(_:), v12);
    uint64_t v34 = v11;
    uint64_t v35 = v9;
    uint64_t v19 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v20 = v42;
    uint64_t v36 = v8;
    v19(v11, v42, v8);
    unsigned __int8 v21 = (void (*)(unsigned char *, void, uint64_t))*((void *)v37 + 13);
    uint64_t v37 = v7;
    v21(v7, enum case for FlowDestinationPageHeader.uber(_:), v38);
    uint64_t v22 = v40;
    uint64_t v23 = v41;
    (*(void (**)(void))(v40 + 16))();
    swift_retain();
    unsigned __int8 v24 = static Link.Presentation.textFollowsTintColor.getter();
    unsigned __int8 v25 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
    Link.Presentation.init(rawValue:)();
    Link.Presentation.init(rawValue:)();
    uint64_t v26 = v22;
    if (Link.Presentation.init(rawValue:)() != v24) {
      Link.Presentation.init(rawValue:)();
    }
    Link.Presentation.init(rawValue:)();
    if (Link.Presentation.init(rawValue:)() != v25) {
      Link.Presentation.init(rawValue:)();
    }
    uint64_t v27 = v36;
    uint64_t v28 = v35;
    uint64_t v29 = dispatch thunk of FlowAction.__allocating_init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v23, v43);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v20, v27);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v43);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v42, v8);
    return 0;
  }
  return v29;
}

uint64_t sub_100276A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10004D384((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10027F010(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100054B1C(a1, &qword_1005F5D30);
    sub_10027D580(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_100054B1C((uint64_t)v9, &qword_1005F5D30);
  }
}

uint64_t sub_100276B10(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100042FC4((long long *)a1, (uint64_t)v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    sub_10027F464(v7, a2, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v6;
    swift_bridgeObjectRelease();
    return sub_100282FDC(a2, type metadata accessor for DownloadJob);
  }
  else
  {
    sub_100054B1C(a1, &qword_1005FC7A8);
    sub_10027D684(a2, (uint64_t)v7);
    sub_100282FDC(a2, type metadata accessor for DownloadJob);
    return sub_100054B1C((uint64_t)v7, &qword_1005FC7A8);
  }
}

uint64_t sub_100276BF8(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100054B78(&qword_1005FDDC0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100054B1C(a1, &qword_1005FDDC0);
    sub_10027D7B4((uint64_t)a2, (uint64_t)v8);

    return sub_100054B1C((uint64_t)v8, &qword_1005FDDC0);
  }
  else
  {
    sub_1002830A4(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10027FBD8((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100276DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100042FC4((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10027FD44(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100054B1C(a1, &qword_1005FDDA0);
    sub_10027D94C(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_100054B1C((uint64_t)v9, &qword_1005FDDA0);
  }
}

uint64_t sub_100276E8C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100054B78(&qword_1005FDDB0);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v24) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v24) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v25 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    sub_100172EBC(*(void *)(a1 + 48) + 40 * v12, (uint64_t)&v40);
    sub_10004D328(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v42 + 8);
    v38[0] = v42[0];
    v38[1] = v42[1];
    uint64_t v39 = v43;
    _OWORD v37[2] = v40;
    uint64_t v37[3] = v41;
    long long v26 = v40;
    long long v28 = v41;
    uint64_t v30 = *(void *)&v42[0];
    sub_10004D384((_OWORD *)((char *)v38 + 8), v37);
    sub_100054B78(&qword_1005F5D30);
    swift_dynamicCast();
    long long v33 = v26;
    long long v34 = v28;
    uint64_t v35 = v30;
    sub_100004C04((uint64_t)&v32, (uint64_t)v36);
    long long v27 = v33;
    long long v29 = v34;
    uint64_t v31 = v35;
    sub_100004C04((uint64_t)v36, (uint64_t)v37);
    sub_100004C04((uint64_t)v37, (uint64_t)&v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)&v6[8 * v19];
      }
      while (v23 == -1);
      unint64_t v9 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v31;
    uint64_t result = sub_100004C04((uint64_t)&v33, v2[7] + 32 * v9);
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v24)
  {
LABEL_37:
    swift_release();
    sub_10004E644();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10027726C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100054B78(&qword_1005F6460);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10004D328(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    _OWORD v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10004D384(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_10004D384(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_10004D384(v36, v37);
    sub_10004D384(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_10004D384(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10004E644();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100277634(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100054B78(&qword_1005F6460);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    *(void *)&v37[0] = *v17;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    v19;
    swift_dynamicCast();
    sub_10004D29C(0, &qword_1005FA380);
    swift_dynamicCast();
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_10004D384(&v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_10004D384(v36, v37);
    sub_10004D384(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_10004D384(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10004E644();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_1002779F8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100054B78(&qword_1005F6388);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v33 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v32 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v38;
  uint64_t v7 = &v40;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v34 = 0;
  unint64_t v9 = (unint64_t *)&unk_1005F9460;
  uint64_t v10 = NSNumber_ptr;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = v34 + 1;
  if (__OFADD__(v34, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v32) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v33 + 8 * v19);
  int64_t v21 = v34 + 1;
  if (!v20)
  {
    int64_t v21 = v34 + 2;
    if (v34 + 2 >= v32) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v34 + 3;
      if (v34 + 3 >= v32) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v34 + 4;
        if (v34 + 4 >= v32) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = v34 + 5;
          if (v34 + 5 < v32)
          {
            unint64_t v20 = *(void *)(v33 + 8 * v22);
            if (v20)
            {
              int64_t v21 = v34 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v32) {
                break;
              }
              unint64_t v20 = *(void *)(v33 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_10004E644();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v34 = v21;
  uint64_t v35 = (v20 - 1) & v20;
  for (unint64_t i = __clz(__rbit64(v20)) + (v21 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v34 << 6))
  {
    char v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    unint64_t v24 = *(void **)(*(void *)(v1 + 56) + 8 * i);
    uint64_t v36 = *v23;
    uint64_t v37 = v23[1];
    sub_10004D29C(0, v9);
    swift_bridgeObjectRetain();
    id v25 = v24;
    swift_dynamicCast();
    sub_10004D384(v6, v7);
    sub_10004D384(v7, v41);
    sub_10004D384(v41, &v39);
    unint64_t result = sub_100051E78(v36, v37);
    unint64_t v26 = result;
    if (v27)
    {
      unint64_t v11 = v7;
      unint64_t v12 = v6;
      uint64_t v13 = v1;
      unint64_t v14 = v10;
      int64_t v15 = v9;
      int64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int64_t v16 = v36;
      v16[1] = v37;
      unint64_t v9 = v15;
      uint64_t v10 = v14;
      uint64_t v1 = v13;
      uint64_t v6 = v12;
      uint64_t v7 = v11;
      uint64_t v17 = (_OWORD *)(v2[7] + 32 * v26);
      sub_10004D2D8((uint64_t)v17);
      unint64_t result = (unint64_t)sub_10004D384(&v39, v17);
      unint64_t v5 = v35;
      if (!v35) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v28 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v28 = v36;
    v28[1] = v37;
    unint64_t result = (unint64_t)sub_10004D384(&v39, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v29 = v2[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_34;
    }
    v2[2] = v31;
    unint64_t v5 = v35;
    if (!v35) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v35 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

id sub_100277D78(char *a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005F76A0);
  __chkstk_darwin(v2 - 8);
  uint64_t v87 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ArtworkModel();
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v86 = v4;
  __chkstk_darwin(v4);
  char v84 = (uint64_t *)((char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v6 - 8);
  uint64_t v88 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  __chkstk_darwin(v8);
  char v83 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ShowOffer();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v91 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PodcastContextActionDataType(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (char *)&v80 - v19;
  __chkstk_darwin(v18);
  int64_t v22 = (char *)&v80 - v21;
  uint64_t v23 = sub_100054B78(&qword_1005FDD70);
  __chkstk_darwin(v23 - 8);
  id v25 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *((void *)a1 + 2);
  if (!v26)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v25, 1, 1, v13);
    sub_100054B1C((uint64_t)v25, &qword_1005FDD70);
    return 0;
  }
  uint64_t v81 = v11;
  uint64_t v82 = v10;
  uint64_t v27 = v26 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess();
  sub_10028303C(v27, (uint64_t)v25, type metadata accessor for PodcastContextActionDataType);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v25, 0, 1, v13);
  sub_100054B1C((uint64_t)v25, &qword_1005FDD70);
  uint64_t v28 = *((void *)a1 + 2);
  if (!v28) {
    return 0;
  }
  uint64_t v29 = a1;
  uint64_t v30 = v28 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess();
  sub_10028303C(v30, (uint64_t)v20, type metadata accessor for PodcastContextActionDataType);
  uint64_t v31 = (uint64_t)v20;
  uint64_t v32 = (uint64_t)v22;
  sub_1002830A4(v31, (uint64_t)v22, type metadata accessor for PodcastContextActionDataType);
  sub_10028303C((uint64_t)v22, (uint64_t)v17, type metadata accessor for PodcastContextActionDataType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v33 = v91;
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v91, v17, v82);
    sub_100054B78(&qword_1006086A0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10046D050;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v35;
    uint64_t v36 = ShowOffer.title.getter();
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v36;
    *(void *)(inited + 56) = v37;
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v38;
    uint64_t v39 = ShowOffer.provider.getter();
    *(void *)(inited + 120) = &type metadata for String;
    if (v40) {
      uint64_t v41 = v39;
    }
    else {
      uint64_t v41 = 0;
    }
    unint64_t v42 = 0xE000000000000000;
    if (v40) {
      unint64_t v42 = v40;
    }
    *(void *)(inited + 96) = v41;
    *(void *)(inited + 104) = v42;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v43;
    *(void *)&long long v94 = ShowOffer.adamId.getter();
    sub_1001A5874();
    uint64_t v44 = BinaryInteger.description.getter();
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = v44;
    *(void *)(inited + 152) = v45;
    unint64_t v46 = sub_10016E9D8(inited);
    uint64_t v47 = (uint64_t)v88;
    ShowOffer.storeUrl.getter();
    uint64_t v48 = v89;
    uint64_t v49 = v90;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v47, 1, v90) == 1)
    {
      sub_100054B1C(v47, (uint64_t *)&unk_1005F7750);
    }
    else
    {
      uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 32);
      uint64_t v80 = v32;
      uint64_t v55 = v83;
      v54(v83, v47, v49);
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v58 = v57;
      uint64_t v88 = v29;
      uint64_t v59 = URL.absoluteString.getter();
      os_log_type_t v95 = &type metadata for String;
      *(void *)&long long v94 = v59;
      *((void *)&v94 + 1) = v60;
      sub_10004D384(&v94, v93);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v92 = v46;
      sub_10027F010(v93, v56, v58, isUniquelyReferenced_nonNull_native);
      unint64_t v46 = v92;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = v55;
      uint64_t v32 = v80;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v62, v49);
    }
    uint64_t v63 = v81;
    uint64_t v65 = v86;
    uint64_t v64 = (uint64_t)v87;
    uint64_t v66 = v85;
    ShowOffer.artwork.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65) == 1)
    {
      sub_100054B1C(v64, &qword_1005F76A0);
    }
    else
    {
      uint64_t v67 = v84;
      sub_1002830A4(v64, (uint64_t)v84, (uint64_t (*)(void))&type metadata accessor for ArtworkModel);
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v70 = v69;
      sub_100054B78(&qword_1005F9068);
      uint64_t v71 = swift_initStackObject();
      *(_OWORD *)(v71 + 16) = xmmword_10046D010;
      *(void *)(v71 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v71 + 40) = v72;
      uint64_t v73 = v67[1];
      *(void *)(v71 + 48) = *v67;
      *(void *)(v71 + 56) = v73;
      swift_bridgeObjectRetain();
      unint64_t v74 = sub_10016EB10(v71);
      os_log_type_t v95 = (void *)sub_100054B78(&qword_1005FDD80);
      *(void *)&long long v94 = v74;
      sub_10004D384(&v94, v93);
      char v75 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v92 = v46;
      sub_10027F010(v93, v68, v70, v75);
      unint64_t v46 = v92;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100282FDC((uint64_t)v67, (uint64_t (*)(void))&type metadata accessor for ArtworkModel);
    }
    unsigned int v76 = self;
    sub_10027726C(v46);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    type metadata accessor for SharePodcastContextAction();
    sub_10028310C(&qword_1005FDD78, (void (*)(uint64_t))type metadata accessor for SharePodcastContextAction);
    ShareAction.applicationActivities.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1006005B0);
    Class v78 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v50 = [v76 shareViewControllerWithPodcastDetails:isa applicationActivities:v78];

    (*(void (**)(char *, uint64_t))(v63 + 8))(v33, v82);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v50 = (id)sub_100241558();
    if (v50)
    {
      uint64_t v51 = self;
      type metadata accessor for SharePodcastContextAction();
      sub_10028310C(&qword_1005FDD78, (void (*)(uint64_t))type metadata accessor for SharePodcastContextAction);
      id v52 = v50;
      ShareAction.applicationActivities.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1006005B0);
      Class v53 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v50 = [v51 shareViewControllerWithPodcast:v52 applicationActivities:v53];
    }
  }
  sub_100282FDC(v32, type metadata accessor for PodcastContextActionDataType);
  return v50;
}

id sub_100278784()
{
  uint64_t v1 = sub_100054B78(&qword_1005F76A0);
  __chkstk_darwin(v1 - 8);
  uint64_t v86 = (char *)&v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ArtworkModel();
  uint64_t v83 = *(void *)(v3 - 8);
  uint64_t v84 = v3;
  __chkstk_darwin(v3);
  uint64_t v80 = (uint64_t *)((char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v5 - 8);
  uint64_t v81 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for URL();
  uint64_t v82 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v79 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ShowOffer();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PodcastContextActionDataType(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v76 - v17;
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v76 - v19;
  uint64_t v21 = sub_100054B78(&qword_1005FDD70);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v0 + 16);
  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v23, 1, 1, v11);
    sub_100054B1C((uint64_t)v23, &qword_1005FDD70);
    return 0;
  }
  uint64_t v77 = v9;
  uint64_t v78 = v8;
  uint64_t v25 = v24 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess();
  sub_10028303C(v25, (uint64_t)v23, type metadata accessor for PodcastContextActionDataType);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  sub_100054B1C((uint64_t)v23, &qword_1005FDD70);
  uint64_t v26 = *(void *)(v0 + 16);
  if (!v26) {
    return 0;
  }
  uint64_t v27 = v26 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
  swift_beginAccess();
  sub_10028303C(v27, (uint64_t)v18, type metadata accessor for PodcastContextActionDataType);
  uint64_t v28 = (uint64_t)v20;
  sub_1002830A4((uint64_t)v18, (uint64_t)v20, type metadata accessor for PodcastContextActionDataType);
  sub_10028303C((uint64_t)v20, (uint64_t)v15, type metadata accessor for PodcastContextActionDataType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = v85;
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v85, v15, v78);
    sub_100054B78(&qword_1006086A0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10046D050;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v31;
    uint64_t v32 = ShowOffer.title.getter();
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v32;
    *(void *)(inited + 56) = v33;
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v34;
    uint64_t v35 = ShowOffer.provider.getter();
    *(void *)(inited + 120) = &type metadata for String;
    if (v36) {
      uint64_t v37 = v35;
    }
    else {
      uint64_t v37 = 0;
    }
    unint64_t v38 = 0xE000000000000000;
    if (v36) {
      unint64_t v38 = v36;
    }
    *(void *)(inited + 96) = v37;
    *(void *)(inited + 104) = v38;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v39;
    *(void *)&long long v90 = ShowOffer.adamId.getter();
    sub_1001A5874();
    uint64_t v40 = BinaryInteger.description.getter();
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = v40;
    *(void *)(inited + 152) = v41;
    unint64_t v42 = sub_10016E9D8(inited);
    uint64_t v43 = (uint64_t)v81;
    ShowOffer.storeUrl.getter();
    uint64_t v44 = v82;
    uint64_t v45 = v87;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v43, 1, v87) == 1)
    {
      sub_100054B1C(v43, (uint64_t *)&unk_1005F7750);
    }
    else
    {
      uint64_t v51 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v79, v43, v45);
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v54 = v53;
      uint64_t v55 = URL.absoluteString.getter();
      char v91 = &type metadata for String;
      *(void *)&long long v90 = v55;
      *((void *)&v90 + 1) = v56;
      sub_10004D384(&v90, v89);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v88 = v42;
      sub_10027F010(v89, v52, v54, isUniquelyReferenced_nonNull_native);
      unint64_t v42 = v88;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v51, v87);
    }
    uint64_t v58 = (uint64_t)v86;
    ShowOffer.artwork.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v58, 1, v84) == 1)
    {
      sub_100054B1C(v58, &qword_1005F76A0);
    }
    else
    {
      uint64_t v59 = v80;
      sub_1002830A4(v58, (uint64_t)v80, (uint64_t (*)(void))&type metadata accessor for ArtworkModel);
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v62 = v61;
      sub_100054B78(&qword_1005F9068);
      uint64_t v63 = swift_initStackObject();
      *(_OWORD *)(v63 + 16) = xmmword_10046D010;
      *(void *)(v63 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v63 + 40) = v64;
      uint64_t v65 = v59[1];
      *(void *)(v63 + 48) = *v59;
      *(void *)(v63 + 56) = v65;
      swift_bridgeObjectRetain();
      unint64_t v66 = sub_10016EB10(v63);
      char v91 = (void *)sub_100054B78(&qword_1005FDD80);
      *(void *)&long long v90 = v66;
      sub_10004D384(&v90, v89);
      char v67 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v88 = v42;
      sub_10027F010(v89, v60, v62, v67);
      unint64_t v42 = v88;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100282FDC((uint64_t)v59, (uint64_t (*)(void))&type metadata accessor for ArtworkModel);
    }
    uint64_t v68 = self;
    sub_10027726C(v42);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v70 = [v68 shareActivityItemsWithPodcastDetails:isa];

    if (v70)
    {
      static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v71 = self;
    Class v72 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v46 = [v71 mt_configurationWithActivityItems:v72];

    (*(void (**)(char *, uint64_t))(v77 + 8))(v29, v78);
LABEL_25:
    sub_100282FDC(v28, type metadata accessor for PodcastContextActionDataType);
    return v46;
  }
  swift_bridgeObjectRelease();
  uint64_t v47 = sub_100241558();
  if (v47)
  {
    uint64_t v48 = (void *)v47;
    id v49 = [self shareActivityItemsWithPodcast:v47];
    if (v49)
    {
      id v50 = v49;
      static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v73 = self;
    Class v74 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v46 = [v73 mt_configurationWithActivityItems:v74];

    goto LABEL_25;
  }
  sub_100282FDC((uint64_t)v20, type metadata accessor for PodcastContextActionDataType);
  return 0;
}

uint64_t sub_10027914C()
{
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_100605DC0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = sub_100277D78((char *)v0);
  type metadata accessor for SharePodcastContextAction();
  sub_10028310C(&qword_1005FDD78, (void (*)(uint64_t))type metadata accessor for SharePodcastContextAction);
  uint64_t result = ShareAction.prepareShareController(_:sharingStyle:)();
  if (v4)
  {
    swift_beginAccess();
    if (*(void *)(v0 + 24))
    {
      swift_retain();
      dispatch thunk of ContextActionsConfiguration.presentationSource.getter();
      swift_release();
      uint64_t v6 = type metadata accessor for PresentationSource();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) != 1)
      {
        PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)();

        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v3, v6);
      }
    }
    else
    {
      uint64_t v8 = type metadata accessor for PresentationSource();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
    }

    return sub_100054B1C((uint64_t)v3, (uint64_t *)&unk_100605DC0);
  }
  return result;
}

uint64_t sub_100279354()
{
  swift_release();
  swift_release();
  sub_10004D2D8(v0 + 32);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts25SharePodcastContextAction_metricsLabel;
  uint64_t v2 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10027940C()
{
  return type metadata accessor for SharePodcastContextAction();
}

uint64_t type metadata accessor for SharePodcastContextAction()
{
  uint64_t result = qword_1005FDC50;
  if (!qword_1005FDC50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100279460()
{
  uint64_t result = type metadata accessor for MetricsLabel();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_100279508()
{
  id v1 = sub_100277D78(v0);
  type metadata accessor for SharePodcastContextAction();
  ShareAction.prepareShareController(_:sharingStyle:)();
  return v1;
}

uint64_t sub_100279564@<X0>(uint64_t a1@<X8>)
{
  return sub_100056D54(v1 + 32, a1);
}

uint64_t sub_100279584()
{
  id v0 = [self mainBundle];
  v5._object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x6853206572616853;
  v1._object = (void *)0xAD0000A680E2776FLL;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_10027962C()
{
  return 0xD000000000000013;
}

uint64_t sub_100279648@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts25SharePodcastContextAction_metricsLabel;
  uint64_t v4 = type metadata accessor for MetricsLabel();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1002796BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ContextActionType.iOSShareSheetPodcast(_:);
  uint64_t v3 = type metadata accessor for ContextActionType();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

BOOL sub_100279794()
{
  uint64_t v1 = sub_100054B78(&qword_1005FDD70);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + 16);
  if (v4)
  {
    uint64_t v5 = v4 + OBJC_IVAR____TtC8Podcasts24PodcastContextActionData_type;
    swift_beginAccess();
    sub_10028303C(v5, (uint64_t)v3, type metadata accessor for PodcastContextActionDataType);
    uint64_t v6 = type metadata accessor for PodcastContextActionDataType(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 0, 1, v6);
  }
  else
  {
    uint64_t v7 = type metadata accessor for PodcastContextActionDataType(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  }
  sub_100054B1C((uint64_t)v3, &qword_1005FDD70);
  return v4 != 0;
}

uint64_t sub_1002798E8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266940(a1, a2, WitnessTable);
}

void *sub_100279948(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266A1C(a1, a2, WitnessTable);
}

uint64_t sub_1002799A8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266B78(a1, a2, WitnessTable);
}

id sub_100279A08(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266E10(a1, a2, WitnessTable);
}

uint64_t sub_100279A68(uint64_t a1)
{
  uint64_t result = sub_10028310C(&qword_1005FDD60, (void (*)(uint64_t))type metadata accessor for SharePodcastContextAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100279AC0()
{
  return sub_10028310C(&qword_1005FDD60, (void (*)(uint64_t))type metadata accessor for SharePodcastContextAction);
}

uint64_t sub_100279B08(uint64_t a1)
{
  uint64_t result = sub_10028310C(&qword_1005FDD68, (void (*)(uint64_t))type metadata accessor for SharePodcastContextAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100279B60(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100054B78(&qword_1005F6388);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10004D384(v24, v35);
      }
      else
      {
        sub_10004D328((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10004D384(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100279E60(uint64_t a1, char a2)
{
  return sub_10027C4E0(a1, a2, &qword_1005FDDD8);
}

uint64_t sub_100279E6C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100054B78(&qword_1005F6460);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_10004D384((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_100172EBC(v25, (uint64_t)&v38);
      sub_10004D328(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_10004D384(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10027A184(uint64_t a1, char a2)
{
  return sub_10027BEE4(a1, a2, &qword_1005F6530);
}

uint64_t sub_10027A190(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for MediaRequest.ContentType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100054B78((uint64_t *)&unk_1005F64E0);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  unint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  long long v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (uint64_t i = v11; ; v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_10028310C(&qword_1005FB948, (void (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_10027A5B4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DownloadJob(0);
  uint64_t v38 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100054B78(&qword_1005FDDD0);
  int v39 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v37 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  unint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = v37;
    unint64_t v23 = v37[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_34;
      }
      unint64_t v23 = v37[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v35;
          if ((v39 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v37[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v36) {
              goto LABEL_34;
            }
            unint64_t v23 = v37[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v38 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v39)
    {
      sub_1002830A4(v26, (uint64_t)v7, type metadata accessor for DownloadJob);
      sub_100042FC4((long long *)(*(void *)(v8 + 56) + 40 * v20), (uint64_t)v40);
    }
    else
    {
      sub_10028303C(v26, (uint64_t)v7, type metadata accessor for DownloadJob);
      sub_100056D54(*(void *)(v8 + 56) + 40 * v20, (uint64_t)v40);
    }
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_10028310C(&qword_1005FB940, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_1002830A4((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, type metadata accessor for DownloadJob);
    uint64_t result = sub_100042FC4(v40, *(void *)(v10 + 56) + 40 * v18);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = v37;
  if ((v39 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10027A9F0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for EpisodePlayState();
  uint64_t v45 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v47 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100054B78(&qword_1005FDDC8);
  int v46 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  unint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v43) {
      break;
    }
    unint64_t v22 = v44;
    unint64_t v23 = v44[v21];
    ++v16;
    if (!v23)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v23 = v44[v16];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v44[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v16 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v16 >= v43) {
              goto LABEL_34;
            }
            unint64_t v23 = v44[v16];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v16 = v24;
      }
    }
LABEL_21:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v7 + 56);
    uint64_t v26 = v7;
    uint64_t v27 = *(void *)(v7 + 48) + 24 * v20;
    uint64_t v28 = *(void *)v27;
    uint64_t v29 = *(void *)(v27 + 8);
    char v30 = *(unsigned char *)(v27 + 16);
    uint64_t v31 = *(void *)(v45 + 72);
    uint64_t v32 = v25 + v31 * v20;
    if (v46)
    {
      sub_1002830A4(v32, v47, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    }
    else
    {
      sub_10028303C(v32, v47, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
      sub_1001DD838(v28, v29, v30);
    }
    Hasher.init(_seed:)();
    EpisodeStateIdentifier.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v14 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v34) & ~*(void *)(v14 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v14 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v17 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = *(void *)(v9 + 48) + 24 * v17;
    *(void *)uint64_t v18 = v28;
    *(void *)(v18 + 8) = v29;
    *(unsigned char *)(v18 + 16) = v30;
    uint64_t result = sub_1002830A4(v47, *(void *)(v9 + 56) + v31 * v17, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v26;
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v22 = v44;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_10027ADF8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100054B78(&qword_1005FDD90);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0) {
      id v33 = v31;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10027B0C8(uint64_t a1, char a2)
{
  return sub_10027C204(a1, a2, &qword_1005FDD88);
}

uint64_t sub_10027B0D4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100054B78(&qword_1005FDDB8);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    unint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    int64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_10004D384(v22, v36);
    }
    else
    {
      sub_10004D328((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_10004D384(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10027B410(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100054B78(&qword_1005F6540);
  int v41 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  BOOL v38 = v2;
  uint64_t v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v16 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v15) {
      break;
    }
    id v23 = v39;
    unint64_t v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v15) {
        goto LABEL_34;
      }
      unint64_t v24 = v39[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v15)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v41 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v15) {
              goto LABEL_34;
            }
            unint64_t v24 = v39[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    unint64_t v26 = *(void **)(*(void *)(v8 + 48) + 8 * v21);
    uint64_t v27 = *(void *)(v40 + 72);
    uint64_t v28 = *(void *)(v8 + 56) + v27 * v21;
    if (v41)
    {
      sub_1002830A4(v28, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    }
    else
    {
      sub_10028303C(v28, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
      id v29 = v26;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(void *)(*(void *)(v10 + 48) + 8 * v19) = v26;
    uint64_t result = sub_1002830A4((uint64_t)v7, *(void *)(v10 + 56) + v27 * v19, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  id v23 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v23 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10027B7B8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = type metadata accessor for EpisodeDownloadState();
  uint64_t v5 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100054B78(&qword_1005FDDA8);
  int v45 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    uint64_t v40 = v2;
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v11 = *(void *)(v7 + 64);
    unint64_t v42 = (void *)(v7 + 64);
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & v11;
    int64_t v41 = (unint64_t)(v10 + 63) >> 6;
    int64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    int v46 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v14 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    uint64_t v44 = v7;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v16 << 6);
      }
      else
      {
        int64_t v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41) {
          goto LABEL_34;
        }
        unint64_t v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          int64_t v16 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v22 = v42[v16];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v40;
              if (v45)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v7 + 32);
                if (v39 >= 64) {
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v42 = -1 << v39;
                }
                *(void *)(v7 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v16 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v22 = v42[v16];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v16 = v23;
          }
        }
LABEL_21:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      uint64_t v24 = *(void *)(v7 + 56);
      uint64_t v25 = *(void *)(v7 + 48) + 24 * v20;
      uint64_t v27 = *(void *)v25;
      uint64_t v26 = *(void *)(v25 + 8);
      char v28 = *(unsigned char *)(v25 + 16);
      uint64_t v29 = v5;
      uint64_t v30 = *(void *)(v5 + 72);
      uint64_t v31 = v24 + v30 * v20;
      if (v45)
      {
        (*v46)(v47, v31, v48);
      }
      else
      {
        (*v43)(v47, v31, v48);
        sub_1001DD838(v27, v26, v28);
      }
      Hasher.init(_seed:)();
      EpisodeStateIdentifier.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v32 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v33 = result & ~v32;
      unint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v35 = 0;
        unint64_t v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v37 = v34 == v36;
          if (v34 == v36) {
            unint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v14 + 8 * v34);
        }
        while (v38 == -1);
        unint64_t v17 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v9 + 48) + 24 * v17;
      *(void *)uint64_t v18 = v27;
      *(void *)(v18 + 8) = v26;
      *(unsigned char *)(v18 + 16) = v28;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v9 + 56) + v30 * v17, v47, v48);
      ++*(void *)(v9 + 16);
      uint64_t v7 = v44;
      uint64_t v5 = v29;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_10027BBBC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100054B78(&qword_1005F64C0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_100042FC4(v25, (uint64_t)v38);
    }
    else
    {
      sub_100056D54((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    int64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *int64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_100042FC4(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10027BEE4(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100054B78(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10027C1F8(uint64_t a1, char a2)
{
  return sub_10027C204(a1, a2, &qword_1005FE4E0);
}

uint64_t sub_10027C204(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100054B78(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v37 = v3;
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      id v35 = v33;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v37;
  unint64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10027C4D4(uint64_t a1, char a2)
{
  return sub_10027C4E0(a1, a2, &qword_1005F6510);
}

uint64_t sub_10027C4E0(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100054B78(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  int64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10027C7EC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100054B78(&qword_1005FDD98);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v30 = a2;
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      char v21 = *(unsigned char *)(*(void *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(unsigned char *)(*(void *)(v7 + 56) + v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10027CAB4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100054B78(&qword_1005F6480);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v34 = v2;
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((v36 & 1) == 0)
    {
      sub_100036488(v31);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    NavigationTab.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10027CDB8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = *(void *)(type metadata accessor for EpisodeMetadata(0) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100054B78(&qword_1005F6490);
  int v42 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v40 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    int64_t v22 = v40;
    unint64_t v23 = v40[v21];
    ++v16;
    if (!v23)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = v40[v16];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v16 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v16 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = v40[v16];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v16 = v24;
      }
    }
LABEL_21:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_22:
    int64_t v25 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v41 + 72);
    uint64_t v29 = *(void *)(v7 + 56) + v28 * v20;
    if (v42)
    {
      sub_1002830A4(v29, (uint64_t)v6, type metadata accessor for EpisodeMetadata);
    }
    else
    {
      sub_10028303C(v29, (uint64_t)v6, type metadata accessor for EpisodeMetadata);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v30 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v14 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v31) & ~*(void *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v14 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v9 + 48) + 16 * v17);
    void *v18 = v27;
    v18[1] = v26;
    uint64_t result = sub_1002830A4((uint64_t)v6, *(void *)(v9 + 56) + v28 * v17, type metadata accessor for EpisodeMetadata);
    ++*(void *)(v9 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  int64_t v22 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v7 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v37;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_10027D198(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = type metadata accessor for MediaLibraryPid();
  uint64_t v5 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100054B78(&qword_1005F64B0);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  int v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    unint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    uint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

double sub_10027D580@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100051E78(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10028099C();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10004D384((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_10027DB40(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_10027D684@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100226E34(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10028101C();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for DownloadJob(0);
    sub_100282FDC(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for DownloadJob);
    sub_100042FC4((long long *)(*(void *)(v9 + 56) + 40 * v6), a2);
    sub_10027E0BC(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10027D7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100226F74(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002818BC();
      uint64_t v9 = v19;
    }

    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
    uint64_t v18 = *(void *)(v11 - 8);
    sub_1002830A4(v10 + *(void *)(v18 + 72) * v6, a2, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    sub_10027E7A8(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }

  return v12(v13, v14, 1, v15);
}

double sub_10027D94C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100051E78(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100281E20();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100042FC4((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_10027EC4C(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10027DA58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10004FA6C(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100282858();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_10027EE38(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_10027DB40(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          int64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10027DD18(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_100172EBC(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = sub_100172F18((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *BOOL v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10027DEE4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    long long v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *long long v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10027E0BC(int64_t a1, uint64_t a2)
{
  uint64_t v32 = type metadata accessor for DownloadJob(0);
  uint64_t v4 = *(void *)(v32 - 8);
  unint64_t result = __chkstk_darwin(v32);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v4 + 72);
      uint64_t v13 = v11;
      do
      {
        uint64_t v16 = v12;
        int64_t v17 = v12 * v10;
        uint64_t v18 = v13;
        sub_10028303C(*(void *)(a2 + 48) + v12 * v10, (uint64_t)v7, type metadata accessor for DownloadJob);
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_10028310C(&qword_1005FB940, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v19 = Hasher._finalize()();
        unint64_t result = sub_100282FDC((uint64_t)v7, type metadata accessor for DownloadJob);
        uint64_t v13 = v18;
        Swift::Int v20 = v19 & v18;
        if (a1 >= (uint64_t)v33)
        {
          if (v20 < v33)
          {
            uint64_t v12 = v16;
          }
          else
          {
            uint64_t v12 = v16;
            if (a1 >= v20) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v12 = v16;
          if (v20 >= v33 || a1 >= v20)
          {
LABEL_12:
            uint64_t v21 = *(void *)(a2 + 48);
            unint64_t result = v21 + v12 * a1;
            if (v12 * a1 < v17 || result >= v21 + v17 + v12)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_17:
              uint64_t v13 = v18;
            }
            else if (v12 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_17;
            }
            uint64_t v22 = *(void *)(a2 + 56);
            unint64_t v23 = v22 + 40 * a1;
            uint64_t v24 = (long long *)(v22 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v23 >= (unint64_t)v24 + 40))
            {
              long long v14 = *v24;
              long long v15 = v24[1];
              *(void *)(v23 + 32) = *((void *)v24 + 4);
              *(_OWORD *)unint64_t v23 = v14;
              *(_OWORD *)(v23 + 16) = v15;
              a1 = v10;
            }
          }
        }
        unint64_t v10 = (v10 + 1) & v13;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10027E3E8(unint64_t a1, uint64_t a2)
{
  return sub_10027E9AC(a1, a2, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
}

void sub_10027E400(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            int64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *int64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            Swift::Int v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *Swift::Int v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_10027E5B4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        id v11 = v10;
        String.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();

        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          long long v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *long long v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            long long v9 = v19[1];
            _OWORD *v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::Int v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    Swift::Int v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *Swift::Int v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10027E7A8(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9 || v3 < v13) {
            goto LABEL_6;
          }
        }
        else if (v13 < v9 && v3 < v13)
        {
          goto LABEL_6;
        }
        uint64_t v16 = *(void *)(a2 + 48);
        uint64_t v17 = (void *)(v16 + 8 * v3);
        uint64_t v18 = (void *)(v16 + 8 * v6);
        if (v3 != v6 || v17 >= v18 + 1) {
          *uint64_t v17 = *v18;
        }
        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v20 = *(void *)(*(void *)(type metadata accessor for FairPlayDownloadsObserver.DownloadState() - 8) + 72);
        int64_t v21 = v20 * v3;
        unint64_t v22 = v19 + v20 * v3;
        int64_t v23 = v20 * v6;
        unint64_t v24 = v19 + v20 * v6 + v20;
        if (v21 < v23 || v22 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v21 == v23) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v26 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v26 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *BOOL v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_10027E994(unint64_t a1, uint64_t a2)
{
  return sub_10027E9AC(a1, a2, (uint64_t (*)(void))&type metadata accessor for EpisodeDownloadState);
}

unint64_t sub_10027E9AC(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a2;
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v9 = (result + 1) & v8;
      uint64_t v40 = v5;
      do
      {
        uint64_t v10 = 24 * v7;
        uint64_t v11 = v3;
        uint64_t v12 = *(void *)(v3 + 48) + 24 * v7;
        unint64_t v13 = v9;
        uint64_t v14 = v8;
        uint64_t v15 = *(void *)v12;
        uint64_t v16 = *(void *)(v12 + 8);
        int64_t v17 = v4;
        char v18 = *(unsigned char *)(v12 + 16);
        Hasher.init(_seed:)();
        sub_1001DD838(v15, v16, v18);
        EpisodeStateIdentifier.hash(into:)();
        Swift::Int v19 = Hasher._finalize()();
        uint64_t v20 = v16;
        uint64_t v8 = v14;
        unint64_t v9 = v13;
        char v21 = v18;
        int64_t v4 = v17;
        unint64_t result = sub_1001DD848(v15, v20, v21);
        Swift::Int v22 = v19 & v8;
        if (v17 >= (uint64_t)v13)
        {
          if (v22 < v13)
          {
            uint64_t v5 = v40;
            uint64_t v3 = v11;
            goto LABEL_6;
          }
          uint64_t v5 = v40;
          uint64_t v3 = v11;
          if (v4 < v22) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v5 = v40;
          uint64_t v3 = v11;
          if (v22 < v9 && v4 < v22) {
            goto LABEL_6;
          }
        }
        uint64_t v23 = *(void *)(v3 + 48);
        unint64_t v24 = v23 + 24 * v4;
        uint64_t v25 = (long long *)(v23 + v10);
        if (24 * v4 < v10 || v24 >= (unint64_t)v25 + 24 || v4 != v7)
        {
          long long v26 = *v25;
          *(void *)(v24 + 16) = *((void *)v25 + 2);
          *(_OWORD *)unint64_t v24 = v26;
        }
        uint64_t v27 = *(void *)(v3 + 56);
        uint64_t v28 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v29 = v28 * v4;
        unint64_t result = v27 + v28 * v4;
        int64_t v30 = v28 * v7;
        unint64_t v31 = v27 + v28 * v7 + v28;
        if (v29 < v30 || result >= v31)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v29 == v30) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v8;
      }
      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    unint64_t v33 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v34 = *v33;
    uint64_t v35 = (-1 << v4) - 1;
  }
  else
  {
    unint64_t v33 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v35 = *v33;
    uint64_t v34 = (-1 << result) - 1;
  }
  *unint64_t v33 = v35 & v34;
  uint64_t v36 = *(void *)(v3 + 16);
  BOOL v37 = __OFSUB__(v36, 1);
  uint64_t v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v38;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10027EC4C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          char v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    Swift::Int v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    Swift::Int v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *Swift::Int v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10027EE38(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_10027F010(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100051E78(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10028099C();
      goto LABEL_7;
    }
    sub_100279B60(v15, a4 & 1);
    unint64_t v21 = sub_100051E78(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10004D2D8((uint64_t)v19);
    return sub_10004D384(a1, v19);
  }
LABEL_13:
  sub_1001A4D64(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_10027F164(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100226C5C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100280B90();
      goto LABEL_7;
    }
    sub_100279E6C(v13, a3 & 1);
    unint64_t v19 = sub_100226C5C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_100172EBC(a2, (uint64_t)v21);
      return sub_100280434(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_10004D2D8((uint64_t)v17);

  return sub_10004D384(a1, v17);
}

uint64_t sub_10027F2B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10027FEA8(a1, a2, a3, a4, &qword_1005F6530);
}

uint64_t sub_10027F2BC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for MediaRequest.ContentType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_100226D9C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100280D84();
    goto LABEL_7;
  }
  sub_10027A190(v17, a3 & 1);
  unint64_t v23 = sub_100226D9C(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1002804F8(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10027F464(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_100226E34(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_10028101C();
      goto LABEL_7;
    }
    sub_10027A5B4(v16, a3 & 1);
    unint64_t v22 = sub_100226E34(a2);
    if ((v17 & 1) == (v23 & 1))
    {
      unint64_t v13 = v22;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      sub_10028303C(a2, (uint64_t)v10, type metadata accessor for DownloadJob);
      return sub_1002805B0(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = v19[7] + 40 * v13;
  sub_10004D2D8(v20);

  return sub_100042FC4(a1, v20);
}

uint64_t sub_10027F618(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  unint64_t v6 = (void **)v5;
  char v11 = a4 & 1;
  char v12 = (void *)*v5;
  unint64_t v14 = sub_100226EE8(a2, a3, a4 & 1);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for EpisodePlayState();
      return sub_100282F74(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1002812AC();
    goto LABEL_7;
  }
  sub_10027A9F0(v17, a5 & 1);
  unint64_t v24 = sub_100226EE8(a2, a3, v11);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100280670(v14, a2, a3, v11, a1, v20);

  return sub_1001DD838(a2, a3, v11);
}

id sub_10027F7A8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100226FC4((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= (uint64_t)result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = sub_100281550();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      *(void *)(v15[7] + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10027ADF8((uint64_t)result, a3 & 1);
  id result = (id)sub_100226FC4((uint64_t)a2);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_17:
    sub_10004D29C(0, &qword_1005FB930);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v17 = 8 * v9;
  *(void *)(v15[6] + v17) = a2;
  *(void *)(v15[7] + v17) = a1;
  uint64_t v18 = v15[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v20;

  return a2;
}

void sub_10027F910(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100227014((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002821C8(&qword_1005FDD88);
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10027C204(v12, a3 & 1, &qword_1005FDD88);
  unint64_t v17 = sub_100227014((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_10004D29C(0, &qword_1005F8440);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v15[2] = v22;

  id v23 = a2;
}

_OWORD *sub_10027FA94(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100226C58(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1002816F4();
      goto LABEL_7;
    }
    sub_10027B0D4(v12, a3 & 1);
    uint64_t v18 = sub_100226C58(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for OpenURLOptionsKey(0);
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    uint64_t v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_10004D2D8((uint64_t)v16);
    return sub_10004D384(a1, v16);
  }
LABEL_13:
  sub_100280728(v9, (uint64_t)a2, a1, v15);

  return a2;
}

id sub_10027FBD8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100226F74((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      uint64_t v17 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
      return (id)sub_100282F74(a1, v16 + *(void *)(*(void *)(v17 - 8) + 72) * v9, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002818BC();
    goto LABEL_7;
  }
  sub_10027B410(v12, a3 & 1);
  unint64_t v19 = sub_100226F74((uint64_t)a2);
  if ((v13 & 1) != (v20 & 1))
  {
LABEL_15:
    sub_10004D29C(0, &qword_1005FB938);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v19;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100280790(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_10027FD44(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100051E78(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100281E20();
      goto LABEL_7;
    }
    sub_10027BBBC(v15, a4 & 1);
    unint64_t v21 = sub_100051E78(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    sub_10004D2D8(v19);
    return sub_100042FC4(a1, v19);
  }
LABEL_13:
  sub_100280838(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10027FE9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10027FEA8(a1, a2, a3, a4, &qword_1005F64B8);
}

uint64_t sub_10027FEA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100051E78(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10028200C(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10027BEE4(v17, a4 & 1, a5);
  unint64_t v23 = sub_100051E78(a2, a3);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  char v25 = (uint64_t *)(v20[6] + 16 * v14);
  *char v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v28;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100280030(char a1, char a2, char a3)
{
  uint64_t v4 = v3;
  char v7 = a2 & 1;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1002270B4(a2 & 1);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100282520();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1 & 1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = v7;
    *(unsigned char *)(v16[7] + v10) = a1 & 1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      void v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_10027C7EC(result, a3 & 1);
  uint64_t result = sub_1002270B4(v7);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100280164(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100226D30(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1002826AC();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10027CAB4(v13, a3 & 1);
  unint64_t v19 = sub_100226D30(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  BOOL v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v21 = 8 * v10;
  *(void *)(v16[6] + v21) = a2;
  *(void *)(v16[7] + v21) = a1;
  uint64_t v22 = v16[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v16[2] = v24;

  return sub_100036488(a2);
}

uint64_t sub_1002802C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100051E78(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for EpisodeMetadata(0);
      return sub_100282F74(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for EpisodeMetadata);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100282A1C();
    goto LABEL_7;
  }
  sub_10027CDB8(v15, a4 & 1);
  unint64_t v22 = sub_100051E78(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1002808F0(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

_OWORD *sub_100280434(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_10004D384(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t sub_1002804B0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_1002804F8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for MediaRequest.ContentType();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1002805B0(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for DownloadJob(0);
  sub_1002830A4(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for DownloadJob);
  uint64_t result = sub_100042FC4(a3, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100280670(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a6[6] + 24 * a1;
  *(void *)uint64_t v9 = a2;
  *(void *)(v9 + 8) = a3;
  *(unsigned char *)(v9 + 16) = a4 & 1;
  uint64_t v10 = a6[7];
  uint64_t v11 = type metadata accessor for EpisodePlayState();
  uint64_t result = sub_1002830A4(a5, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
  uint64_t v13 = a6[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a6[2] = v15;
  }
  return result;
}

_OWORD *sub_100280728(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10004D384(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_100280790(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  uint64_t result = sub_1002830A4(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_100280838(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100042FC4(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_1002808A8(unint64_t result, char a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2 & 1;
  *(unsigned char *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_1002808F0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for EpisodeMetadata(0);
  uint64_t result = sub_1002830A4(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, type metadata accessor for EpisodeMetadata);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_10028099C()
{
  uint64_t v1 = v0;
  sub_100054B78(&qword_1005F6388);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  char v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10004D328(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_10004D384(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100280B84()
{
  return sub_100282374(&qword_1005FDDD8);
}

void *sub_100280B90()
{
  uint64_t v1 = v0;
  sub_100054B78(&qword_1005F6460);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_100172EBC(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10004D328(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_10004D384(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100280D78()
{
  return sub_10028200C(&qword_1005F6530);
}

void *sub_100280D84()
{
  uint64_t v1 = type metadata accessor for MediaRequest.ContentType();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78((uint64_t *)&unk_1005F64E0);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10028101C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DownloadJob(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78(&qword_1005FDDD0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v24 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v16) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v12);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    sub_10028303C(*(void *)(v6 + 48) + v19, (uint64_t)v5, type metadata accessor for DownloadJob);
    uint64_t v20 = 40 * v18;
    sub_100056D54(*(void *)(v6 + 56) + v20, (uint64_t)v25);
    sub_1002830A4((uint64_t)v5, *(void *)(v8 + 48) + v19, type metadata accessor for DownloadJob);
    uint64_t result = (void *)sub_100042FC4(v25, *(void *)(v8 + 56) + v20);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    int64_t v12 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1002812AC()
{
  uint64_t v1 = type metadata accessor for EpisodePlayState();
  uint64_t v28 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78(&qword_1005FDDC8);
  int64_t v25 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *int64_t v25 = v6;
    return result;
  }
  uint64_t result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  uint64_t v26 = v4 + 64;
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  int64_t v27 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v14 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_9:
    uint64_t v15 = 24 * v14;
    uint64_t v16 = *(void *)(v4 + 48) + 24 * v14;
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    unint64_t v20 = *(void *)(v28 + 72) * v14;
    sub_10028303C(*(void *)(v4 + 56) + v20, (uint64_t)v3, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    uint64_t v21 = *(void *)(v6 + 48) + v15;
    *(void *)uint64_t v21 = v17;
    *(void *)(v21 + 8) = v18;
    *(unsigned char *)(v21 + 16) = v19;
    sub_1002830A4((uint64_t)v3, *(void *)(v6 + 56) + v20, (uint64_t (*)(void))&type metadata accessor for EpisodePlayState);
    uint64_t result = (void *)sub_1001DD838(v17, v18, v19);
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v27) {
    goto LABEL_23;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_100281550()
{
  uint64_t v1 = v0;
  sub_100054B78(&qword_1005FDD90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002816F4()
{
  uint64_t v1 = v0;
  sub_100054B78(&qword_1005FDDB8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10004D328(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_10004D384(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002818BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  uint64_t v25 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78(&qword_1005F6540);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (id)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  int64_t v24 = v1;
  id result = (id)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 8 * v17;
    int64_t v19 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    unint64_t v20 = *(void *)(v25 + 72) * v17;
    sub_10028303C(*(void *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    *(void *)(*(void *)(v7 + 48) + v18) = v19;
    sub_1002830A4((uint64_t)v4, *(void *)(v7 + 56) + v20, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    id result = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    id result = (id)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100281B3C()
{
  uint64_t v39 = type metadata accessor for EpisodeDownloadState();
  uint64_t v1 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78(&qword_1005FDDA8);
  unint64_t v33 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v41 = v4;
  if (!v5)
  {
    uint64_t result = swift_release();
    uint64_t v31 = v41;
    int64_t v30 = v33;
LABEL_25:
    *int64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t v7 = (char *)(v4 + 64);
  unint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  uint64_t v34 = v3 + 64;
  if (v6 != v3 || v7 >= &v8[8 * v9])
  {
    memmove(v7, v8, 8 * v9);
    uint64_t v6 = v41;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v40 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v37 = v1 + 16;
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v36 = v1 + 32;
  unint64_t v14 = v38;
  uint64_t v15 = v39;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v10 << 6);
      uint64_t result = v40;
      goto LABEL_9;
    }
    int64_t v27 = v10 + 1;
    uint64_t result = v40;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    ++v10;
    if (!v28)
    {
      int64_t v10 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v10);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v28 - 1) & v28;
    unint64_t v17 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_9:
    uint64_t v19 = 24 * v17;
    uint64_t v20 = *(void *)(result + 48) + 24 * v17;
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    char v23 = *(unsigned char *)(v20 + 16);
    unint64_t v24 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(result + 56) + v24, v15);
    uint64_t v25 = v41;
    uint64_t v26 = *(void *)(v41 + 48) + v19;
    *(void *)uint64_t v26 = v21;
    *(void *)(v26 + 8) = v22;
    *(unsigned char *)(v26 + 16) = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v25 + 56) + v24, v14, v15);
    sub_1001DD838(v21, v22, v23);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v35)
  {
LABEL_23:
    uint64_t result = swift_release();
    int64_t v30 = v33;
    uint64_t v31 = v41;
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v34 + 8 * v29);
  if (v28)
  {
    int64_t v10 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v10 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v10);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100281E20()
{
  uint64_t v1 = v0;
  sub_100054B78(&qword_1005F64C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_100056D54(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_100042FC4(v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10028200C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100054B78(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002821BC()
{
  return sub_1002821C8(&qword_1005FE4E0);
}

id sub_1002821C8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100054B78(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100282368()
{
  return sub_100282374(&qword_1005F6510);
}

id sub_100282374(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100054B78(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    int64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100282520()
{
  uint64_t v1 = v0;
  sub_100054B78(&qword_1005FDD98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002826AC()
{
  uint64_t v1 = v0;
  sub_100054B78(&qword_1005F6480);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    sub_100036488(v17);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100282858()
{
  uint64_t v1 = v0;
  sub_100054B78(&qword_1005F6508);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100282A1C()
{
  uint64_t v1 = v0;
  uint64_t v28 = *(void *)(type metadata accessor for EpisodeMetadata(0) - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78(&qword_1005F6490);
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v6;
    return result;
  }
  uint64_t v26 = v1;
  id result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  uint64_t v27 = v4 + 64;
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v13) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_9:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    unint64_t v20 = *(void *)(v28 + 72) * v15;
    sub_10028303C(*(void *)(v4 + 56) + v20, (uint64_t)v3, type metadata accessor for EpisodeMetadata);
    int64_t v21 = (void *)(*(void *)(v6 + 48) + v16);
    void *v21 = v18;
    v21[1] = v19;
    sub_1002830A4((uint64_t)v3, *(void *)(v6 + 56) + v20, type metadata accessor for EpisodeMetadata);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v26;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100282CB0()
{
  uint64_t v35 = type metadata accessor for MediaLibraryPid();
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78(&qword_1005F64B0);
  int64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    id result = (void *)swift_release();
    uint64_t v28 = v36;
    uint64_t v27 = v30;
LABEL_25:
    *uint64_t v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  id result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    unint64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *unint64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100282F74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100282FDC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10028303C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002830A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10028310C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100283154(void *a1)
{
  if (a1[2])
  {
    uint64_t v2 = a1[4];
    uint64_t v1 = (void *)a1[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v1 = 0;
  }
  if (qword_1005F5AA8 != -1) {
    swift_once();
  }
  id v3 = (id)qword_10061ABA0;
  v4.value._uint64_t countAndFlagsBits = v2;
  v4.value._object = v1;
  MTNotificationSettingsPresentationController.presentModal(highlightedPodcastUuid:)(v4);

  return swift_bridgeObjectRelease();
}

uint64_t _s24PickShowThenGoToSettingsCMa()
{
  return self;
}

uint64_t sub_100283224()
{
  type metadata accessor for MTTestActionContentPickerPresenter();
  uint64_t v0 = (void *)swift_allocObject();
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = 0;
  sub_100319868(0x6F6853206B636950, 0xAC000000A680E277, 1, 0, (uint64_t)sub_100283154, 0);

  return swift_release();
}

uint64_t sub_1002832B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1005FDE80;
  swift_beginAccess();
  return sub_100283A94(v3, a1);
}

uint64_t sub_100283308(uint64_t a1)
{
  uint64_t v3 = v1 + qword_1005FDE80;
  swift_beginAccess();
  sub_100283A2C(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_100283364())()
{
  return j__swift_endAccess;
}

id sub_1002833C0()
{
  return [*(id *)(v0 + qword_1005FDE88) reloadData];
}

unint64_t sub_1002833D8()
{
  unint64_t result = (unint64_t)[*(id *)(v0 + qword_1005FDE88) numberOfObjects];
  if ((result & 0x8000000000000000) != 0) {
    __break(1u);
  }
  return result;
}

void sub_10028340C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_100283AFC();
}

uint64_t sub_100283470(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v12 = sub_100054B78((uint64_t *)&unk_1005FCBD0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  unint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v31 - v16;
  if (a4)
  {
    id v18 = a3;
    id v19 = a5;
    id v20 = a7;
    id v21 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    if (a5)
    {
LABEL_3:
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v22 = type metadata accessor for IndexPath();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v17, 0, 1, v22);
      goto LABEL_6;
    }
  }
  else
  {
    memset(v31, 0, sizeof(v31));
    id v23 = a3;
    id v24 = a5;
    id v25 = a7;
    id v26 = a1;
    if (a5) {
      goto LABEL_3;
    }
  }
  uint64_t v27 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v17, 1, 1, v27);
LABEL_6:
  if (a7)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v28 = type metadata accessor for IndexPath();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v15, 0, 1, v28);
  }
  else
  {
    uint64_t v29 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v15, 1, 1, v29);
  }

  sub_100054B1C((uint64_t)v15, (uint64_t *)&unk_1005FCBD0);
  sub_100054B1C((uint64_t)v17, (uint64_t *)&unk_1005FCBD0);
  return sub_100054B1C((uint64_t)v31, &qword_1005F5D30);
}

void sub_1002836B8()
{
}

id sub_1002836E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BaseResultsController();
  return [super dealloc];
}

void sub_10028373C(uint64_t a1)
{
  sub_100054B1C(a1 + qword_1005FDE80, &qword_1005FE178);
  objc_super v2 = *(void **)(a1 + qword_1005FDE88);
}

uint64_t sub_100283790@<X0>(uint64_t a1@<X8>)
{
  return sub_1002832B4(a1);
}

uint64_t sub_1002837B4(uint64_t a1)
{
  return sub_100283308(a1);
}

void (*sub_1002837D8(void *a1))(void *a1)
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100283364();
  return sub_1001B9084;
}

id sub_100283834()
{
  return sub_1002833C0();
}

unint64_t sub_100283858()
{
  return sub_1002833D8();
}

void sub_10028387C()
{
}

id sub_10028388C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChapterResultsController();
  return [super dealloc];
}

void sub_1002838C4(uint64_t a1)
{
}

uint64_t sub_1002838D4()
{
  return type metadata accessor for ChapterResultsController();
}

void sub_1002838DC(uint64_t *a1@<X8>)
{
  id v3 = *(id *)(*v1 + qword_1005FDF70);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v5 = [v3 objectAtIndexPath:isa];

  if (v5)
  {
    uint64_t v6 = type metadata accessor for ChapterInfoAdapter();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v5;
    a1[3] = v6;
    a1[4] = (uint64_t)&off_10055CA58;
    *a1 = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for ChapterInfoAdapter()
{
  return self;
}

uint64_t sub_1002839A8()
{
  id v1 = [*(id *)(*(void *)v0 + 16) title];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id sub_100283A04()
{
  return [*(id *)(*(void *)v0 + 16) time];
}

id sub_100283A18()
{
  return [*(id *)(*(void *)v0 + 16) duration];
}

uint64_t sub_100283A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FE178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100283A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FE178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100283AFC()
{
  uint64_t v1 = (uint64_t)v0 + qword_1005FDE80;
  swift_beginAccess();
  sub_100283A94(v1, (uint64_t)v11);
  if (!v12) {
    return sub_100054B1C((uint64_t)v11, &qword_1005FE178);
  }
  sub_100056D54((uint64_t)v11, (uint64_t)v8);
  sub_100054B1C((uint64_t)v11, &qword_1005FE178);
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  sub_100041A98(v8, v9);
  void v7[3] = type metadata accessor for BaseResultsController();
  v7[4] = &off_10055CA90;
  v7[0] = v0;
  uint64_t v4 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 8);
  id v5 = v0;
  v4(v7, v2, v3);
  sub_10004D2D8((uint64_t)v7);
  return sub_10004D2D8((uint64_t)v8);
}

void sub_100283C34()
{
}

ValueMetadata *type metadata accessor for PodcastsWidgetInfo()
{
  return &type metadata for PodcastsWidgetInfo;
}

uint64_t *sub_100283C80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ShowEntity();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100283D4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShowEntity();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100283DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ShowEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100283E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ShowEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100283EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ShowEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100283F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ShowEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100283FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100283FB4);
}

uint64_t sub_100283FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShowEntity();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100284020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100284034);
}

uint64_t sub_100284034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShowEntity();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_1002840A4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10004D29C(0, &qword_1005FE2F0);
    sub_10028C560();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v25;
    uint64_t v22 = v26;
    uint64_t v2 = v27;
    uint64_t v3 = v28;
    unint64_t v4 = v29;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v21 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (!v11) {
      goto LABEL_42;
    }
    uint64_t v30 = v11;
    sub_10004D29C(0, &qword_1005FE2F0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = (id)v23;
    swift_unknownObjectRelease();
    uint64_t v10 = v3;
    uint64_t v8 = v4;
    if (!v12) {
      goto LABEL_42;
    }
LABEL_34:
    id v16 = [v12 session];
    id v17 = [v16 userInfo];

    if (!v17)
    {
      long long v23 = 0u;
      long long v24 = 0u;
LABEL_9:
      sub_100054B1C((uint64_t)&v23, &qword_1005F5D30);
      goto LABEL_10;
    }
    uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v18 + 16) && (unint64_t v19 = sub_100051E78(0xD000000000000018, 0x80000001004D9CF0), (v20 & 1) != 0))
    {
      sub_10004D328(*(void *)(v18 + 56) + 32 * v19, (uint64_t)&v23);
    }
    else
    {
      long long v23 = 0u;
      long long v24 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v24 + 1)) {
      goto LABEL_9;
    }
    if swift_dynamicCast() && (v30) {
      goto LABEL_42;
    }
LABEL_10:

    uint64_t v3 = v10;
    unint64_t v4 = v8;
  }
  if (v4)
  {
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v10 = v3;
LABEL_33:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v12) {
      goto LABEL_42;
    }
    goto LABEL_34;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v21) {
      goto LABEL_42;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v13);
    uint64_t v10 = v3 + 1;
    if (!v14)
    {
      uint64_t v10 = v3 + 2;
      if (v3 + 2 >= v21) {
        goto LABEL_42;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v10);
      if (!v14)
      {
        uint64_t v10 = v3 + 3;
        if (v3 + 3 >= v21) {
          goto LABEL_42;
        }
        unint64_t v14 = *(void *)(v22 + 8 * v10);
        if (!v14)
        {
          uint64_t v10 = v3 + 4;
          if (v3 + 4 >= v21) {
            goto LABEL_42;
          }
          unint64_t v14 = *(void *)(v22 + 8 * v10);
          if (!v14)
          {
            uint64_t v10 = v3 + 5;
            if (v3 + 5 >= v21) {
              goto LABEL_42;
            }
            unint64_t v14 = *(void *)(v22 + 8 * v10);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v21 != v15)
              {
                unint64_t v14 = *(void *)(v22 + 8 * v15++);
                if (v14)
                {
                  uint64_t v10 = v15 - 1;
                  goto LABEL_32;
                }
              }
LABEL_42:
              sub_10004E644();
              return;
            }
          }
        }
      }
    }
LABEL_32:
    uint64_t v8 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

id sub_100284480()
{
  id v0 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v0 setMinimumFractionDigits:0];
  [v0 setMaximumFractionDigits:2];
  id result = [v0 setNumberStyle:1];
  qword_1005FE210 = (uint64_t)v0;
  return result;
}

void sub_1002844F8()
{
  id v0 = [self mainSystem];
  [v0 setNeedsRebuild];
}

uint64_t sub_100284558()
{
  sub_10004D29C(0, &qword_1005FE328);
  id v0 = [self mainBundle];
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001004D9F50;
  v1._uint64_t countAndFlagsBits = 0xD000000000000014;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  uint64_t result = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  qword_10061AB18 = result;
  return result;
}

uint64_t sub_100284658()
{
  sub_10004D29C(0, &qword_1005FE328);
  id v0 = [self mainBundle];
  v4._object = (void *)0xED00007364656546;
  v1._object = (void *)0x80000001004D9F30;
  v1._uint64_t countAndFlagsBits = 0xD000000000000011;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0x2068736572666552;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  static MenuSelectors.refreshCommand.getter();
  uint64_t result = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  qword_10061AB20 = result;
  return result;
}

uint64_t sub_100284770()
{
  sub_10004D29C(0, &qword_1005FE328);
  id v0 = [self mainBundle];
  v4._uint64_t countAndFlagsBits = 0xD000000000000018;
  v4._object = (void *)0x80000001004D9F10;
  v1._object = (void *)0x80000001004D9EF0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000011;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  uint64_t result = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  qword_10061AB28 = result;
  return result;
}

uint64_t sub_100284884()
{
  sub_10004D29C(0, &qword_1005FE328);
  id v0 = [self mainBundle];
  v4._object = (void *)0xEB000000006E6F69;
  v1._object = (void *)0x80000001004D7CE0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000012;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0x746174532077654ELL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  uint64_t result = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  qword_10061AB30 = result;
  return result;
}

void sub_100284998(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  sub_10004D29C(0, &qword_1005FE310);
  id v5 = [a1 system];
  id v6 = [self mainSystem];
  char v7 = static NSObject.== infix(_:_:)();

  if (v7)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = ObjectType;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_10028C7F4;
    *(void *)(v9 + 24) = v8;
    v20[4] = sub_10028C80C;
    v20[5] = v9;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1107296256;
    void v20[2] = sub_100284D0C;
    _OWORD v20[3] = &unk_10055CBF8;
    uint64_t v10 = _Block_copy(v20);
    swift_retain();
    swift_release();
    [a1 replaceChildrenOfMenuForIdentifier:UIMenuApplication fromChildrenBlock:v10];
    _Block_release(v10);
    LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v10)
    {
      __break(1u);
    }
    else
    {
      Class v11 = sub_1002894E4();
      [a1 insertSiblingMenu:v11 afterMenuForIdentifier:UIMenuView];
      id v12 = (id)ASKBuildTypeGetCurrent();
      sub_100054B78(&qword_1005FE318);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_10046D030;
      unint64_t v14 = (void *)ASKBuildTypeDebug;
      uint64_t v15 = (void *)ASKBuildTypeInternal;
      *(void *)(v13 + 32) = ASKBuildTypeDebug;
      *(void *)(v13 + 40) = v15;
      type metadata accessor for BuildType(0);
      id v16 = v14;
      id v17 = v15;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      int IsAnyOf = ASKBuildTypeIsAnyOf();

      if (IsAnyOf) {
        sub_10028B014(a1);
      }
      if (*(void *)(v2 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        dispatch thunk of MenuBarPresenter.buildMenuBar(with:)();
        swift_release();

        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
  }
}

uint64_t sub_100284CB8(uint64_t a1)
{
  unint64_t v2 = sub_10028937C();
  swift_bridgeObjectRetain();
  sub_1001B1E84(v2);
  return a1;
}

Class sub_100284D0C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(void))(a1 + 32);
  sub_10004D29C(0, &qword_1005F7EF0);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v1();
  swift_bridgeObjectRelease();
  v2.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v2.super.isa;
}

uint64_t sub_100284E88()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_100284EBC(uint64_t a1, uint64_t a2)
{
  sub_100289240(a1, a2);

  return swift_unknownObjectRelease();
}

uint64_t (*sub_100284EF4(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter);
  swift_unknownObjectRetain();
  return sub_100284F50;
}

uint64_t sub_100284F50(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  if (a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
    sub_100289240(v4, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_100289240(v3, v2);
  }

  return swift_unknownObjectRelease();
}

id sub_100284FB8()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v2 = [self defaultCenter];
  [v2 removeObserver:v0];

  v4.receiver = v0;
  v4.super_class = ObjectType;
  return [super dealloc];
}

uint64_t sub_100285180()
{
  uint64_t v1 = type metadata accessor for ActionMetrics();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v2 - 8);
  objc_super v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SearchAction();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Class v11 = (char *)v22 - v10;
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  static ActionMetrics.notInstrumented.getter();
  SearchAction.init(origin:term:url:hintIndex:activatesSearchBar:actionMetrics:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v0;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v14 + v13, v9, v5);
  id v15 = v0;
  LOBYTE(v13) = static Link.Presentation.textFollowsTintColor.getter();
  Link.Presentation.init(rawValue:)();
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v13) {
    Link.Presentation.init(rawValue:)();
  }
  static ActionMetrics.notInstrumented.getter();
  uint64_t v16 = type metadata accessor for ClosureAction();
  swift_allocObject();
  uint64_t v17 = ClosureAction.init(title:presentationStyle:actionMetrics:closure:)();
  sub_100054B78(&qword_100603DD0);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_10046D010;
  *(void *)(v18 + 56) = v16;
  *(void *)(v18 + 64) = sub_10028C5C8(&qword_1005F8FD8, (void (*)(uint64_t))&type metadata accessor for ClosureAction);
  *(void *)(v18 + 32) = v17;
  swift_retain();
  Link.Presentation.init(rawValue:)();
  static ActionMetrics.notInstrumented.getter();
  type metadata accessor for TabChangeAction();
  swift_allocObject();
  uint64_t v19 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)();
  memset(v22, 0, sizeof(v22));
  swift_retain();
  char v20 = (void *)UIResponder.firstViewInResponderChain.getter();
  sub_100289060(v19, (uint64_t)v22, v20, (uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for TabChangeAction, (unint64_t *)&unk_100600680, (void (*)(uint64_t))&type metadata accessor for TabChangeAction);
  swift_release();
  swift_release();
  swift_release();

  sub_100054B1C((uint64_t)v22, &qword_1005F5D30);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return swift_release();
}

uint64_t sub_1002855D4(void *a1, uint64_t a2)
{
  uint64_t v26 = a2;
  unint64_t v29 = a1;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v30 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SearchAction();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)&v25 - v14;
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  uint64_t v25 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v13, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v6);
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v29;
  *(void *)(v17 + 16) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_10028C754;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055CB80;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v18;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10028C5C8((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10002FBEC();
  uint64_t v22 = v30;
  uint64_t v21 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v23 = (void *)v25;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v33);
  return ((uint64_t (*)(char *, uint64_t))v27)(v15, v28);
}

uint64_t sub_100285A4C(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  uint64_t v3 = (void *)UIResponder.firstViewInResponderChain.getter();
  sub_100288E54(a2, (uint64_t)v5, v3);
  swift_release();

  return sub_100054B1C((uint64_t)v5, &qword_1005F5D30);
}

void sub_100285BB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78(&qword_1005FE300);
  __chkstk_darwin(v2 - 8);
  char v91 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PodcastsPlayerAdapter.CurrentItemType(0);
  uint64_t v89 = *(void *)(v4 - 8);
  uint64_t v90 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v86 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v79 - v7;
  uint64_t v9 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v83 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v82 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v80 = (char *)&v79 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v92 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v87 = (char *)&v79 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v85 = (char *)&v79 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v88 = (char *)&v79 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v79 - v26;
  static Logger.navigation.getter();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v84 = v12;
  uint64_t v81 = v11;
  if (v30)
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v79 = v8;
    uint64_t v94 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v93 = sub_10004B974(0xD00000000000001ALL, 0x80000001004D9D40, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s Attempting to navigate to current show page.", v31, 0xCu);
    swift_arrayDestroy();
    uint64_t v8 = v79;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v27, v16);
  id v34 = [self sharedApplication];
  uint64_t v35 = sub_10030A120();
  id v36 = [v35 rootViewController];

  if (!v36)
  {
    uint64_t v45 = v92;
    static Logger.navigation.getter();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315138;
      uint64_t v93 = sub_10004B974(0xD00000000000001ALL, 0x80000001004D9D40, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    goto LABEL_28;
  }
  if ((static Podcasts.isBlueMoonEnabled()() & 1) == 0)
  {
    uint64_t v49 = *(void *)(v1
                    + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                    + 24);
    uint64_t v50 = *(void *)(v1
                    + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                    + 32);
    sub_100041A98((void *)(v1 + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl), v49);
    uint64_t v51 = (uint64_t)v91;
    (*(void (**)(uint64_t, uint64_t))(v50 + 72))(v49, v50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v51, 1, v90) != 1)
    {
      sub_10028C610(v51, (uint64_t)v8);
      uint64_t v56 = v86;
      sub_10028C674((uint64_t)v8, v86);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v58 = (uint64_t)v82;
        uint64_t v57 = v83;
        uint64_t v59 = v56;
        uint64_t v60 = v84;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v82, v59, v84);
        sub_10028B800(v58, v1, (uint64_t)v36);

        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v60);
      }
      else
      {
        sub_10028B470(*(void *)v56, *(void *)(v56 + 8), v1, (uint64_t)v36);
        swift_bridgeObjectRelease();
      }
      sub_10028C6D8((uint64_t)v8);
      return;
    }
    sub_100054B1C(v51, &qword_1005FE300);
    uint64_t v45 = (uint64_t)v87;
    static Logger.navigation.getter();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v92 = v17;
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315138;
      uint64_t v93 = sub_10004B974(0xD00000000000001ALL, 0x80000001004D9D40, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v52, v53, v55, v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_28:
      uint64_t v73 = (char *)v45;
      goto LABEL_29;
    }
LABEL_27:

    goto LABEL_28;
  }
  uint64_t v37 = (void *)dispatch thunk of PlaybackController.nowPlayingItem.getter();
  if (!v37)
  {
    uint64_t v45 = (uint64_t)v85;
    static Logger.navigation.getter();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v92 = v17;
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315138;
      uint64_t v93 = sub_10004B974(0xD00000000000001ALL, 0x80000001004D9D40, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  uint64_t v38 = v37;
  uint64_t v39 = v1;
  id v40 = [v37 podcast];
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v42 = MPModelObject.uuid.getter();
    unint64_t v44 = v43;

    if (v44)
    {
      sub_10028B470(v42, v44, v1, (uint64_t)v36);
      swift_bridgeObjectRelease();

      return;
    }
  }
  id v61 = [v38 podcast];
  if (!v61 || (uint64_t v62 = v61, v63 = MPModelObject.adamID.getter(), v65 = v64, v62, (v65 & 1) != 0))
  {
LABEL_35:
    char v75 = v88;
    static Logger.navigation.getter();
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v92 = v16;
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      *(_DWORD *)uint64_t v78 = 136315138;
      uint64_t v93 = sub_10004B974(0xD00000000000001ALL, 0x80000001004D9D40, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v73 = v88;
      uint64_t v74 = v92;
      goto LABEL_30;
    }

    uint64_t v73 = v75;
LABEL_29:
    uint64_t v74 = v16;
LABEL_30:
    v33(v73, v74);
    return;
  }
  if ((v63 & 0x8000000000000000) == 0)
  {
    id v66 = [self podcastUrlForStoreId:v63];
    uint64_t v68 = v83;
    uint64_t v67 = v84;
    if (v66)
    {
      uint64_t v69 = v66;
      uint64_t v92 = v39;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      id v70 = *(void (**)(void))(v68 + 32);
      uint64_t v71 = (uint64_t)v81;
      v70();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v71, 0, 1, v67);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v71, 1, v67) != 1)
      {
        uint64_t v72 = (uint64_t)v80;
        ((void (*)(char *, uint64_t, uint64_t))v70)(v80, v71, v67);
        sub_10028B800(v72, v92, (uint64_t)v36);

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v72, v67);
        return;
      }
    }
    else
    {
      uint64_t v71 = (uint64_t)v81;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v81, 1, 1, v84);
    }
    sub_100054B1C(v71, (uint64_t *)&unk_1005F7750);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_10028682C()
{
  uint64_t v0 = type metadata accessor for FlowPresentationContext();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for FlowPresentationHints();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FlowDestination();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)&v14[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v11 = 0;
  v11[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for FlowDestination.notificationSettings(_:), v8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for FlowPresentationContext.presentModalPageSheet(_:), v0);
  FlowPresentationHints.init(context:animate:)();
  UIResponder.nearestFlowController.getter();
  if (v15)
  {
    sub_100041A98(v14, v15);
    dispatch thunk of FlowController.show(destination:hints:referrer:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
    return sub_10004D2D8((uint64_t)v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
    return sub_100054B1C((uint64_t)v14, &qword_100604710);
  }
}

void sub_100286ED8(char *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = type metadata accessor for PlayerPlaybackSpeed();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                    + 24];
  uint64_t v10 = *(void *)&a1[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                     + 32];
  sub_100041A98(&a1[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl], v9);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *a3, v5);
  uint64_t v11 = *(void (**)(char *, void, void, uint64_t, uint64_t))(v10 + 192);
  uint64_t v12 = a1;
  v11(v8, 0, 0, v9, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1002875A0()
{
  type metadata accessor for AnalyticsIdentifierManager();
  id v0 = (id)static AnalyticsIdentifierManager.sharedInstance.getter();
  dispatch thunk of AnalyticsIdentifierManager.resetIdentifiers()();
}

void sub_1002875F8()
{
  id v0 = [self sharedApplication];
  URL._bridgeToObjectiveC()(v1);
  id v3 = v2;
  [v0 openURL:v2 withCompletionHandler:0];
}

id sub_100287768(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (sub_10028BC34() && (static Selector.== infix(_:_:)() & 1) != 0
    || _UIAccessibilityFullKeyboardAccessEnabled() && (static Selector.== infix(_:_:)() & 1) != 0)
  {
    return 0;
  }
  if (static Selector.== infix(_:_:)()) {
    return [self allowAccountModifications];
  }
  sub_10026994C(a2, (uint64_t)v15);
  uint64_t v7 = v16;
  if (v16)
  {
    uint64_t v8 = sub_100041A98(v15, v16);
    uint64_t v9 = *(void *)(v7 - 8);
    __chkstk_darwin(v8);
    uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    sub_10004D2D8((uint64_t)v15);
  }
  else
  {
    uint64_t v12 = 0;
  }
  v14.receiver = v2;
  v14.super_class = ObjectType;
  [super canPerformAction:a1 withSender:v12];
  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1002879D4(void *a1)
{
  uint64_t v82 = type metadata accessor for PlayerPlaybackSpeed();
  uint64_t v3 = *(void *)(v82 - 8);
  uint64_t v4 = __chkstk_darwin(v82);
  id v6 = (char *)&countAndFlagsBits - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&countAndFlagsBits - v7;
  [a1 action];
  uint64_t v9 = (void *)(v1
                + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl);
  uint64_t v10 = *(void *)(v1
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                  + 24);
  uint64_t v11 = *(void *)(v1
                  + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl
                  + 32);
  sub_100041A98((void *)(v1 + OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl), v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v10, v11);
  uint64_t v12 = &selRef_moreButtonTapCancelled_;
  if (static Selector.== infix(_:_:)()) {
    goto LABEL_2;
  }
  if (static Selector.== infix(_:_:)())
  {
    swift_getObjectType();
    char v14 = dispatch thunk of LibraryDataProviderProtocol.hasFollowedShows()();
LABEL_5:
    char v13 = v14;
    goto LABEL_6;
  }
  if (static Selector.== infix(_:_:)())
  {
    if ((_UIAccessibilityFullKeyboardAccessEnabled() & 1) == 0) {
      goto LABEL_23;
    }
LABEL_25:
    [a1 setAttributes:[a1 attributes] | 4];
    goto LABEL_2;
  }
  if ((static Selector.== infix(_:_:)() & 1) == 0)
  {
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v29 = v9[3];
      uint64_t v30 = v9[4];
      sub_100041A98(v9, v29);
      char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 104))(v29, v30);
      goto LABEL_5;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v31 = v9[3];
      uint64_t v32 = v9[4];
      sub_100041A98(v9, v31);
      char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 120))(v31, v32);
      goto LABEL_5;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v33 = v9[3];
      uint64_t v34 = v9[4];
      sub_100041A98(v9, v33);
      (*(void (**)(uint64_t, uint64_t))(v34 + 56))(v33, v34);
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [a1 setTitle:v35];

      uint64_t v36 = v9[3];
      uint64_t v37 = v9[4];
      sub_100041A98(v9, v36);
      char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 136))(v36, v37);
      goto LABEL_5;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v38 = v9[3];
      uint64_t v39 = v9[4];
      sub_100041A98(v9, v38);
      (*(void (**)(uint64_t, uint64_t))(v39 + 64))(v38, v39);
      NSString v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [a1 setTitle:v40];

      uint64_t v41 = v9[3];
      uint64_t v42 = v9[4];
      sub_100041A98(v9, v41);
      char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 152))(v41, v42);
      goto LABEL_5;
    }
    if (static Selector.== infix(_:_:)() & 1) != 0 || (static Selector.== infix(_:_:)())
    {
      if (static Podcasts.isBlueMoonEnabled()())
      {
        char v14 = dispatch thunk of PlaybackController.isVolumeControlAvailable.getter();
      }
      else
      {
        uint64_t v43 = v9[3];
        uint64_t v44 = v9[4];
        sub_100041A98(v9, v43);
        char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 208))(v43, v44);
      }
      goto LABEL_5;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v45 = v9[3];
      uint64_t v46 = v9[4];
      sub_100041A98(v9, v45);
      char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 184))(v45, v46);
      os_log_type_t v47 = (unsigned int *)&enum case for PlayerPlaybackSpeed.threeQuarters(_:);
LABEL_51:
      uint64_t v15 = v82;
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *v47, v82);
      sub_10028C5C8((unint64_t *)&unk_100604410, (void (*)(uint64_t))&type metadata accessor for PlayerPlaybackSpeed);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v58.n128_f32[0] = v83;
      v59.n128_f32[0] = v84;
      BOOL v60 = v84 == v83;
      (*(void (**)(char *, uint64_t, __n128, __n128))(v3 + 8))(v6, v15, v58, v59);
      [a1 setState:v60];
      goto LABEL_7;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v48 = v9[3];
      uint64_t v49 = v9[4];
      sub_100041A98(v9, v48);
      char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 184))(v48, v49);
      os_log_type_t v47 = (unsigned int *)&enum case for PlayerPlaybackSpeed.normal(_:);
      goto LABEL_51;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v50 = v9[3];
      uint64_t v51 = v9[4];
      sub_100041A98(v9, v50);
      char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 184))(v50, v51);
      os_log_type_t v47 = (unsigned int *)&enum case for PlayerPlaybackSpeed.oneAndAQuarter(_:);
      goto LABEL_51;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v52 = v9[3];
      uint64_t v53 = v9[4];
      sub_100041A98(v9, v52);
      char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 184))(v52, v53);
      os_log_type_t v47 = (unsigned int *)&enum case for PlayerPlaybackSpeed.oneAndAHalf(_:);
      goto LABEL_51;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v54 = v9[3];
      uint64_t v55 = v9[4];
      sub_100041A98(v9, v54);
      char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 184))(v54, v55);
      os_log_type_t v47 = (unsigned int *)&enum case for PlayerPlaybackSpeed.oneAndThreeQuarters(_:);
      goto LABEL_51;
    }
    if (static Selector.== infix(_:_:)())
    {
      uint64_t v56 = v9[3];
      uint64_t v57 = v9[4];
      sub_100041A98(v9, v56);
      char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 184))(v56, v57);
      os_log_type_t v47 = (unsigned int *)&enum case for PlayerPlaybackSpeed.double(_:);
      goto LABEL_51;
    }
    if (static Selector.== infix(_:_:)())
    {
      sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
      id v61 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
      id v62 = [v61 activeFullName];

      if (!v62) {
        goto LABEL_63;
      }
    }
    else
    {
      if ((static Selector.== infix(_:_:)() & 1) == 0)
      {
        if (static Selector.== infix(_:_:)())
        {
          char v64 = self;
          id v65 = [v64 mainBundle];
          v87._object = (void *)0xAA0000000000A680;
          v66._uint64_t countAndFlagsBits = 0x6E49206E676953;
          v66._object = (void *)0xE700000000000000;
          v67._uint64_t countAndFlagsBits = 0;
          v67._object = (void *)0xE000000000000000;
          v87._uint64_t countAndFlagsBits = 0xE26E49206E676953;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v66, (Swift::String_optional)0, (NSBundle)v65, v67, v87);

          id v68 = [v64 mainBundle];
          v69._uint64_t countAndFlagsBits = 0xD000000000000012;
          v88._object = (void *)0x80000001004D9BD0;
          v69._object = (void *)0x80000001004D9BB0;
          v70._uint64_t countAndFlagsBits = 0;
          v70._object = (void *)0xE000000000000000;
          v88._uint64_t countAndFlagsBits = 0x1000000000000015;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v69, (Swift::String_optional)0, (NSBundle)v68, v70, v88);

          sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
          id v71 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
          [v71 isUserLoggedIn];

          swift_bridgeObjectRelease();
          NSString v72 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [a1 setTitle:v72];

          char v13 = 1;
          uint64_t v15 = v82;
          uint64_t v12 = &selRef_moreButtonTapCancelled_;
          goto LABEL_7;
        }
        if ((static Selector.== infix(_:_:)() & 1) == 0) {
          goto LABEL_2;
        }
        id v73 = [self mainBundle];
        v89._uint64_t countAndFlagsBits = 0x100000000000001DLL;
        v74._uint64_t countAndFlagsBits = 0xD000000000000029;
        v89._object = (void *)0x80000001004D6810;
        v74._object = (void *)0x80000001004D67E0;
        v75._uint64_t countAndFlagsBits = 0;
        v75._object = (void *)0xE000000000000000;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v74, (Swift::String_optional)0, (NSBundle)v73, v75, v89);

        NSString v28 = String._bridgeToObjectiveC()();
        goto LABEL_24;
      }
      sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
      id v63 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
      id v62 = [v63 activeEmail];

      if (!v62)
      {
LABEL_63:
        NSString v76 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [a1 setTitle:v76];

        id v77 = [a1 title];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v78 = String.count.getter();
        swift_bridgeObjectRelease();
        unint64_t v79 = (unint64_t)[a1 attributes];
        if (v78) {
          unint64_t v80 = v79 & 0xFFFFFFFFFFFFFFFBLL;
        }
        else {
          unint64_t v80 = v79 | 4;
        }
        [a1 setAttributes:v80];
        char v13 = 0;
        goto LABEL_6;
      }
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_63;
  }
  if (!_UIAccessibilityFullKeyboardAccessEnabled()) {
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v19 = self;
  id v20 = [v19 mainBundle];
  v85._object = (void *)0xE400000000000000;
  v21._object = (void *)0x80000001004D9520;
  v21._uint64_t countAndFlagsBits = 0xD000000000000013;
  v22._uint64_t countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v85._uint64_t countAndFlagsBits = 2036427856;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v85)._countAndFlagsBits;

  id v23 = [v19 mainBundle];
  v24._uint64_t countAndFlagsBits = 0xD000000000000014;
  v86._object = (void *)0xE500000000000000;
  v24._object = (void *)0x80000001004D9BF0;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v86._uint64_t countAndFlagsBits = 0x6573756150;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v86);

  uint64_t v27 = v9[3];
  uint64_t v26 = v9[4];
  sub_100041A98(v9, v27);
  (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v27, v26);
  uint64_t v12 = &selRef_moreButtonTapCancelled_;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, "setAttributes:", (unint64_t)objc_msgSend(a1, "attributes") & 0xFFFFFFFFFFFFFFFBLL);
  NSString v28 = String._bridgeToObjectiveC()();
LABEL_24:
  swift_bridgeObjectRelease();
  [a1 setTitle:v28];

LABEL_2:
  char v13 = 1;
LABEL_6:
  uint64_t v15 = v82;
LABEL_7:
  sub_100054B78(&qword_1005FE2D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D020;
  *(void *)(inited + 32) = "nextTrack";
  *(void *)(inited + 40) = "previousTrack";
  *(void *)(inited + 48) = "jumpForwards";
  *(void *)(inited + 56) = "jumpBackwards";
  *(void *)(inited + 64) = v12[266];
  if (sub_10028BC34())
  {
    [a1 action];
    if ((static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0)
    {
      swift_setDeallocating();
LABEL_16:
      unint64_t v17 = (unint64_t)[a1 attributes] | 1;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0) {
    goto LABEL_16;
  }
  unint64_t v17 = (unint64_t)[a1 attributes] & 0xFFFFFFFFFFFFFFFELL;
LABEL_17:
  [a1 setAttributes:v17];
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v15);
}

void sub_1002889D0(void *a1, uint64_t a2, Class *a3, SEL *a4)
{
  id v6 = objc_allocWithZone(*a3);
  id v7 = a1;
  id v8 = [v6 init];
  [v8 *a4];
}

uint64_t sub_100288A4C()
{
  uint64_t v0 = type metadata accessor for FlowPresentationContext();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for FlowPresentationHints();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FlowDestination();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for FlowDestination.debug(_:), v8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for FlowPresentationContext.presentModalCard(_:), v0);
  FlowPresentationHints.init(context:animate:)();
  UIResponder.nearestFlowController.getter();
  if (v15)
  {
    sub_100041A98(v14, v15);
    dispatch thunk of FlowController.show(destination:hints:referrer:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return sub_10004D2D8((uint64_t)v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return sub_100054B1C((uint64_t)v14, &qword_100604710);
  }
}

id sub_100288D58()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DebugActionsController();
  [super dealloc];
}

uint64_t sub_100288D94(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_100288E54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for ActionPerformer();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for SearchAction();
  v17[3] = v10;
  v17[4] = sub_10028C5C8(&qword_1005FE308, (void (*)(uint64_t))&type metadata accessor for SearchAction);
  uint64_t v11 = sub_10004A244(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v11, a1, v10);
  type metadata accessor for ActionRunnerOptions();
  swift_retain();
  BaseObjectGraph.__allocating_init(_:)();
  sub_10026994C(a2, (uint64_t)v15);
  id v12 = a3;
  ActionOrigin.init(sender:view:)();
  ActionRunnerOptions.withActionOrigin(_:)();
  sub_100054B1C((uint64_t)v16, (uint64_t *)&unk_100600670);
  swift_release();
  sub_100056D54((uint64_t)v17, (uint64_t)v16);
  swift_retain();
  ActionPerformer.init(_:asPartOf:)();
  uint64_t v13 = ActionPerformer.callAsFunction()();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10004D2D8((uint64_t)v17);
  return v13;
}

uint64_t sub_100289060(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  uint64_t v13 = type metadata accessor for ActionPerformer();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22[3] = a5(0);
  v22[4] = sub_10028C5C8(a6, a7);
  v22[0] = a1;
  type metadata accessor for ActionRunnerOptions();
  swift_retain();
  swift_retain();
  BaseObjectGraph.__allocating_init(_:)();
  sub_10026994C(a2, (uint64_t)v20);
  id v17 = a3;
  ActionOrigin.init(sender:view:)();
  ActionRunnerOptions.withActionOrigin(_:)();
  sub_100054B1C((uint64_t)v21, (uint64_t *)&unk_100600670);
  swift_release();
  sub_100056D54((uint64_t)v22, (uint64_t)v21);
  swift_retain();
  ActionPerformer.init(_:asPartOf:)();
  uint64_t v18 = ActionPerformer.callAsFunction()();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
  sub_10004D2D8((uint64_t)v22);
  return v18;
}

void sub_100289240(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter);
  if (*(void *)(v2 + OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of MenuBarPresenter.rebuildMenuBar.setter();
    swift_unknownObjectRelease();
  }
  *uint64_t v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (*v5)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of MenuBarPresenter.rebuildMenuBar.setter();
    swift_unknownObjectRelease();
  }
  id v6 = [self mainSystem];
  [v6 setNeedsRebuild];
}

uint64_t sub_10028937C()
{
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10046ECF0;
  if (qword_1005F5A70 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_10061AB18;
  *(void *)(v0 + 32) = qword_10061AB18;
  uint64_t v2 = qword_1005F5A78;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_10061AB20;
  *(void *)(v0 + 40) = qword_10061AB20;
  uint64_t v5 = qword_1005F5A80;
  id v6 = v4;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_10061AB28;
  *(void *)(v0 + 48) = qword_10061AB28;
  uint64_t v8 = qword_1005F5A88;
  id v9 = v7;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_10061AB30;
  *(void *)(v0 + 56) = qword_10061AB30;
  specialized Array._endMutation()();
  id v11 = v10;
  return v0;
}

Class sub_1002894E4()
{
  uint64_t v234 = type metadata accessor for PlayerPlaybackSpeed();
  long long v246 = *(void **)(v234 - 8);
  __chkstk_darwin(v234);
  uint64_t v245 = (char *)&v220 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  UIMenuElementSize v250 = (UIMenuElementSize)_swiftEmptyArrayStorage;
  uint64_t v1 = self;
  id v2 = [v1 mainBundle];
  v255._object = (void *)0xE000000000000000;
  v3._uint64_t countAndFlagsBits = 1954047310;
  v3._object = (void *)0xE400000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v255._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v255);

  uint64_t v5 = (void *)sub_10004D29C(0, &qword_1005FE328);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v248 = 0u;
  long long v249 = 0u;
  id v6 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  id v7 = [v1 mainBundle];
  v256._object = (void *)0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0x73756F6976657250;
  v8._object = (void *)0xE800000000000000;
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v256._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v256);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v10 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v248 = 0u;
  long long v249 = 0u;
  id v11 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v248 = 0u;
  long long v249 = 0u;
  id v12 = (void (*)(void, void, void))UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  id v242 = v6;
  [v6 setAllowsAutomaticMirroring:0];
  [v10 setAllowsAutomaticMirroring:0];
  id v241 = v11;
  [v11 setAllowsAutomaticMirroring:0];
  uint64_t v243 = v12;
  [v12 setAllowsAutomaticMirroring:0];
  id v13 = [v1 mainBundle];
  v257._uint64_t countAndFlagsBits = 0xD000000000000012;
  v257._object = (void *)0x80000001004D9E40;
  v14._uint64_t countAndFlagsBits = 0x6853206F74206F47;
  v14._object = (void *)0xEA0000000000776FLL;
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v257);

  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v16 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  unint64_t v239 = static UIMenuIdentifier.play.getter();
  id v244 = v1;
  id v17 = [v1 mainBundle];
  v258._object = (void *)0xE400000000000000;
  v18._object = (void *)0x80000001004D9520;
  v18._uint64_t countAndFlagsBits = 0xD000000000000013;
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v258._uint64_t countAndFlagsBits = 2036427856;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v258);

  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v20 = 4;
  _UIAccessibilityFullKeyboardAccessEnabled();
  swift_bridgeObjectRetain();
  uint64_t v21 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  long long v248 = 0u;
  long long v249 = 0u;
  _UIAccessibilityFullKeyboardAccessEnabled();
  id v247 = v5;
  uint64_t v22 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  uint64_t v23 = sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v24 = swift_allocObject();
  long long v240 = xmmword_100470E80;
  *(_OWORD *)(v24 + 16) = xmmword_100470E80;
  *(void *)(v24 + 32) = v21;
  *(void *)(v24 + 40) = v22;
  *(void *)&long long v248 = v24;
  specialized Array._endMutation()();
  unint64_t v25 = v248;
  if ((unint64_t)v248 >> 62)
  {
    sub_10004D29C(0, &qword_1005F7EF0);
    uint64_t v26 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    unint64_t v25 = v26;
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10004D29C(0, &qword_1005F7EF0);
    swift_bridgeObjectRelease();
    uint64_t v26 = v25;
  }
  *(void *)&long long v248 = v25;
  id v27 = v242;
  NSString v28 = v243;
  uint64_t v29 = (void *)v16;
  if (v25 >> 62)
  {
    id v209 = v242;
    id v210 = v10;
    id v33 = v241;
    id v211 = v241;
    id v212 = v28;
    id v213 = v29;
    swift_bridgeObjectRetain();
    uint64_t v214 = _CocoaArrayWrapper.endIndex.getter();
    BOOL v215 = __OFADD__(v214, 5);
    uint64_t v37 = v214 + 5;
    if (!v215)
    {
LABEL_5:
      sub_100288D94(v37);
      specialized Array._endMutation()();
      uint64_t v20 = (uint64_t)v27;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_6;
      }
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v30 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v31 = v242;
    id v32 = v10;
    id v33 = v241;
    id v34 = v241;
    id v35 = v28;
    id v36 = v29;
    swift_bridgeObjectRetain();
    uint64_t v37 = v30 + 5;
    if (!__OFADD__(v30, 5)) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_72:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
  uint64_t v237 = v23;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v38 = v10;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v39 = v33;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v40 = v28;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  id v41 = v244;
  if (*(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v42 = v29;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  uint64_t v43 = sub_10004D29C(0, (unint64_t *)&unk_100600650);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  UIMenuElementSize v44 = (uint64_t)v248;
  swift_bridgeObjectRelease();
  id v233 = (id)v20;

  id v229 = v42;
  id v230 = v40;

  id v231 = v39;
  id v232 = v38;

  v45._uint64_t countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  v251.value.super.Class isa = 0;
  v251.is_nil = v239;
  uint64_t v46 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v45, (Swift::String_optional)0, v251, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v44, v216).super.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  v227 = v46;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v47 = [v41 mainBundle];
  v48._uint64_t countAndFlagsBits = 0x6573616572636E49;
  v259._object = (void *)0xE000000000000000;
  v48._object = (void *)0xEF656D756C6F5620;
  v49._uint64_t countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  v259._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v48, (Swift::String_optional)0, (NSBundle)v47, v49, v259);

  String.init(format:_:)();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v50 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  id v51 = [v41 mainBundle];
  v260._object = (void *)0xE000000000000000;
  v52._uint64_t countAndFlagsBits = 0x6573616572636544;
  v52._object = (void *)0xEF656D756C6F5620;
  v53._uint64_t countAndFlagsBits = 0;
  v53._object = (void *)0xE000000000000000;
  v260._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v52, (Swift::String_optional)0, (NSBundle)v51, v53, v260);

  String.init(format:_:)();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v54 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  char v55 = static UIMenuIdentifier.volume.getter();
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = v240;
  *(void *)(v56 + 32) = v50;
  *(void *)(v56 + 40) = v54;
  *(void *)&long long v248 = v56;
  specialized Array._endMutation()();
  UIMenuElementSize v57 = (uint64_t)v248;
  id v226 = v50;
  id v225 = v54;
  v58._uint64_t countAndFlagsBits = 0;
  v58._object = (void *)0xE000000000000000;
  v252.value.super.Class isa = 0;
  v252.is_nil = v55;
  __n128 v59 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v58, (Swift::String_optional)0, v252, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v57, v217).super.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  v224 = v59;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v61 = v245;
  BOOL v60 = v246;
  id v62 = (char *)(v246 + 13);
  uint64_t v63 = v234;
  uint64_t v243 = (void (*)(void, void, void))v246[13];
  v243(v245, enum case for PlayerPlaybackSpeed.threeQuarters(_:), v234);
  PlayerPlaybackSpeed.rawValue.getter();
  int v65 = v64;
  Swift::String v66 = (void *)v60[1];
  long long v246 = v60 + 1;
  id v242 = v66;
  ((void (*)(char *, uint64_t))v66)(v61, v63);
  if (qword_1005F5A68 != -1) {
    swift_once();
  }
  Swift::String v67 = (void *)qword_1005FE210;
  id v68 = objc_allocWithZone((Class)NSNumber);
  id v69 = v67;
  LODWORD(v70) = v65;
  id v71 = [v68 initWithFloat:v70];
  id v72 = [v69 stringFromNumber:v71];

  uint64_t v228 = v43;
  if (v72)
  {
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v75 = v74;
  }
  else
  {
    uint64_t v73 = 0;
    unint64_t v75 = 0;
  }
  id v76 = [v41 mainBundle];
  uint64_t v236 = "MENU_PLAYBACK_SPEED";
  v261._object = (void *)0x80000001004D9E80;
  unint64_t v235 = (unint64_t)"Go to Current Show";
  v77._uint64_t countAndFlagsBits = 0xD000000000000013;
  v77._object = (void *)0x80000001004D9E60;
  v78._uint64_t countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  v261._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v77, (Swift::String_optional)0, (NSBundle)v76, v78, v261);

  id v241 = (id)sub_100054B78(&qword_1005F7720);
  uint64_t v79 = swift_allocObject();
  long long v240 = xmmword_10046D010;
  *(_OWORD *)(v79 + 16) = xmmword_10046D010;
  *(void *)(v79 + 56) = &type metadata for String;
  unint64_t v239 = sub_10004DA4C();
  *(void *)(v79 + 64) = v239;
  uint64_t v80 = 892808752;
  if (v75) {
    uint64_t v80 = v73;
  }
  unint64_t v81 = 0xE400000000000000;
  if (v75) {
    unint64_t v81 = v75;
  }
  *(void *)(v79 + 32) = v80;
  *(void *)(v79 + 40) = v81;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v223 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  uint64_t v82 = v245;
  uint64_t v238 = v62;
  v243(v245, enum case for PlayerPlaybackSpeed.normal(_:), v63);
  PlayerPlaybackSpeed.rawValue.getter();
  int v84 = v83;
  ((void (*)(char *, uint64_t))v242)(v82, v63);
  Swift::String v85 = (void *)qword_1005FE210;
  id v86 = objc_allocWithZone((Class)NSNumber);
  id v87 = v85;
  LODWORD(v88) = v84;
  id v89 = [v86 initWithFloat:v88];
  id v90 = [v87 stringFromNumber:v89];

  if (v90)
  {
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v93 = v92;
  }
  else
  {
    uint64_t v91 = 0;
    unint64_t v93 = 0;
  }
  id v94 = v244;
  id v95 = [v244 mainBundle];
  v262._object = (void *)0x80000001004D9E80;
  v96._uint64_t countAndFlagsBits = 0xD000000000000013;
  v96._object = (void *)0x80000001004D9E60;
  v97._uint64_t countAndFlagsBits = 0;
  v97._object = (void *)0xE000000000000000;
  v262._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v96, (Swift::String_optional)0, (NSBundle)v95, v97, v262);

  uint64_t v98 = swift_allocObject();
  *(_OWORD *)(v98 + 16) = v240;
  unint64_t v99 = v239;
  *(void *)(v98 + 56) = &type metadata for String;
  *(void *)(v98 + 64) = v99;
  if (v93) {
    uint64_t v100 = v91;
  }
  else {
    uint64_t v100 = 3157553;
  }
  unint64_t v101 = 0xE300000000000000;
  if (v93) {
    unint64_t v101 = v93;
  }
  *(void *)(v98 + 32) = v100;
  *(void *)(v98 + 40) = v101;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v222 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  uint64_t v102 = v245;
  v243(v245, enum case for PlayerPlaybackSpeed.oneAndAQuarter(_:), v63);
  PlayerPlaybackSpeed.rawValue.getter();
  int v104 = v103;
  ((void (*)(char *, uint64_t))v242)(v102, v63);
  uint64_t v105 = (void *)qword_1005FE210;
  id v106 = objc_allocWithZone((Class)NSNumber);
  id v107 = v105;
  LODWORD(v108) = v104;
  id v109 = [v106 initWithFloat:v108];
  id v110 = [v107 stringFromNumber:v109];

  if (v110)
  {
    uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v113 = v112;
  }
  else
  {
    uint64_t v111 = 0;
    unint64_t v113 = 0;
  }
  uint64_t v114 = v236;
  id v115 = [v94 mainBundle];
  uint64_t v116 = (void *)((unint64_t)v114 | 0x8000000000000000);
  v263._object = (void *)((unint64_t)v114 | 0x8000000000000000);
  uint64_t v117 = (void *)(v235 | 0x8000000000000000);
  v118._uint64_t countAndFlagsBits = 0xD000000000000013;
  v118._object = (void *)(v235 | 0x8000000000000000);
  v119._uint64_t countAndFlagsBits = 0;
  v119._object = (void *)0xE000000000000000;
  v263._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v118, (Swift::String_optional)0, (NSBundle)v115, v119, v263);

  uint64_t v120 = swift_allocObject();
  *(_OWORD *)(v120 + 16) = v240;
  unint64_t v121 = v239;
  *(void *)(v120 + 56) = &type metadata for String;
  *(void *)(v120 + 64) = v121;
  uint64_t v122 = 892481073;
  if (v113) {
    uint64_t v122 = v111;
  }
  unint64_t v123 = 0xE400000000000000;
  if (v113) {
    unint64_t v123 = v113;
  }
  *(void *)(v120 + 32) = v122;
  *(void *)(v120 + 40) = v123;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v221 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  uint64_t v124 = v245;
  v243(v245, enum case for PlayerPlaybackSpeed.oneAndAHalf(_:), v63);
  PlayerPlaybackSpeed.rawValue.getter();
  int v126 = v125;
  ((void (*)(char *, uint64_t))v242)(v124, v63);
  uint64_t v127 = (void *)qword_1005FE210;
  id v128 = objc_allocWithZone((Class)NSNumber);
  id v129 = v127;
  LODWORD(v130) = v126;
  id v131 = [v128 initWithFloat:v130];
  id v132 = [v129 stringFromNumber:v131];

  if (v132)
  {
    uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v135 = v134;
  }
  else
  {
    uint64_t v133 = 0;
    unint64_t v135 = 0;
  }
  id v136 = v244;
  id v137 = [v244 mainBundle];
  v264._object = v116;
  v138._uint64_t countAndFlagsBits = 0xD000000000000013;
  v138._object = v117;
  v139._uint64_t countAndFlagsBits = 0;
  v139._object = (void *)0xE000000000000000;
  v264._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v138, (Swift::String_optional)0, (NSBundle)v137, v139, v264);

  uint64_t v140 = swift_allocObject();
  *(_OWORD *)(v140 + 16) = v240;
  unint64_t v141 = v239;
  *(void *)(v140 + 56) = &type metadata for String;
  *(void *)(v140 + 64) = v141;
  uint64_t v142 = 3485233;
  if (v135) {
    uint64_t v142 = v133;
  }
  unint64_t v143 = 0xE300000000000000;
  if (v135) {
    unint64_t v143 = v135;
  }
  *(void *)(v140 + 32) = v142;
  *(void *)(v140 + 40) = v143;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v220 = UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  uint64_t v144 = v245;
  v243(v245, enum case for PlayerPlaybackSpeed.oneAndThreeQuarters(_:), v63);
  PlayerPlaybackSpeed.rawValue.getter();
  int v146 = v145;
  ((void (*)(char *, uint64_t))v242)(v144, v63);
  uint64_t v147 = (void *)qword_1005FE210;
  id v148 = objc_allocWithZone((Class)NSNumber);
  id v149 = v147;
  LODWORD(v150) = v146;
  id v151 = [v148 initWithFloat:v150];
  id v152 = [v149 stringFromNumber:v151];

  if (v152)
  {
    uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v155 = v154;
  }
  else
  {
    uint64_t v153 = 0;
    unint64_t v155 = 0;
  }
  unint64_t v156 = v236;
  id v157 = [v136 mainBundle];
  uint64_t v158 = (void *)((unint64_t)v156 | 0x8000000000000000);
  v265._object = (void *)((unint64_t)v156 | 0x8000000000000000);
  v159 = (void *)(v235 | 0x8000000000000000);
  v160._uint64_t countAndFlagsBits = 0xD000000000000013;
  v160._object = (void *)(v235 | 0x8000000000000000);
  v161._uint64_t countAndFlagsBits = 0;
  v161._object = (void *)0xE000000000000000;
  v265._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v160, (Swift::String_optional)0, (NSBundle)v157, v161, v265);

  uint64_t v162 = swift_allocObject();
  *(_OWORD *)(v162 + 16) = v240;
  unint64_t v163 = v239;
  *(void *)(v162 + 56) = &type metadata for String;
  *(void *)(v162 + 64) = v163;
  if (v155) {
    uint64_t v164 = v153;
  }
  else {
    uint64_t v164 = 892808753;
  }
  unint64_t v165 = 0xE400000000000000;
  if (v155) {
    unint64_t v165 = v155;
  }
  *(void *)(v162 + 32) = v164;
  *(void *)(v162 + 40) = v165;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v236 = (const char *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  uint64_t v166 = v245;
  v243(v245, enum case for PlayerPlaybackSpeed.double(_:), v63);
  PlayerPlaybackSpeed.rawValue.getter();
  int v168 = v167;
  ((void (*)(char *, uint64_t))v242)(v166, v63);
  unint64_t v169 = (void *)qword_1005FE210;
  id v170 = objc_allocWithZone((Class)NSNumber);
  id v171 = v169;
  LODWORD(v172) = v168;
  id v173 = [v170 initWithFloat:v172];
  id v174 = [v171 stringFromNumber:v173];

  if (v174)
  {
    uint64_t v175 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v177 = v176;
  }
  else
  {
    uint64_t v175 = 0;
    unint64_t v177 = 0;
  }
  id v178 = v244;
  id v179 = [v244 mainBundle];
  v266._object = v158;
  v180._uint64_t countAndFlagsBits = 0xD000000000000013;
  v180._object = v159;
  v181._uint64_t countAndFlagsBits = 0;
  v181._object = (void *)0xE000000000000000;
  v266._uint64_t countAndFlagsBits = 0xD00000000000006BLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v180, (Swift::String_optional)0, (NSBundle)v179, v181, v266);

  uint64_t v182 = swift_allocObject();
  *(_OWORD *)(v182 + 16) = v240;
  unint64_t v183 = v239;
  *(void *)(v182 + 56) = &type metadata for String;
  *(void *)(v182 + 64) = v183;
  if (v177) {
    uint64_t v184 = v175;
  }
  else {
    uint64_t v184 = 3157554;
  }
  unint64_t v185 = 0xE300000000000000;
  if (v177) {
    unint64_t v185 = v177;
  }
  *(void *)(v182 + 32) = v184;
  *(void *)(v182 + 40) = v185;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v248 = 0u;
  long long v249 = 0u;
  uint64_t v186 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  id v187 = [v178 mainBundle];
  v267._object = (void *)0xE000000000000000;
  v188._uint64_t countAndFlagsBits = 0x6B63616279616C50;
  v188._object = (void *)0xEE00646565705320;
  v189._uint64_t countAndFlagsBits = 0;
  v189._object = (void *)0xE000000000000000;
  v267._uint64_t countAndFlagsBits = 0;
  Swift::String v190 = NSLocalizedString(_:tableName:bundle:value:comment:)(v188, (Swift::String_optional)0, (NSBundle)v187, v189, v267);

  char v191 = static UIMenuIdentifier.playbackSpeed.getter();
  uint64_t v192 = swift_allocObject();
  *(_OWORD *)(v192 + 16) = xmmword_10046D000;
  uint64_t v193 = (void *)v223;
  uint64_t v194 = (void *)v222;
  *(void *)(v192 + 32) = v223;
  *(void *)(v192 + 40) = v194;
  id v195 = (void *)v221;
  uint64_t v196 = (void *)v220;
  *(void *)(v192 + 48) = v221;
  *(void *)(v192 + 56) = v196;
  uint64_t v197 = (char *)v236;
  *(void *)(v192 + 64) = v236;
  *(void *)(v192 + 72) = v186;
  *(void *)&long long v248 = v192;
  specialized Array._endMutation()();
  UIMenuElementSize v198 = (uint64_t)v248;
  id v247 = v193;
  long long v246 = v194;
  uint64_t v245 = v195;
  id v199 = v196;
  uint64_t v200 = v197;
  id v201 = v186;
  v253.value.super.Class isa = 0;
  v253.is_nil = v191;
  os_log_t v202 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v190, (Swift::String_optional)0, v253, 0, 0xFFFFFFFFFFFFFFFFLL, v198, v218).super.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v203 = [v244 mainBundle];
  v268._object = (void *)0xE000000000000000;
  v204._uint64_t countAndFlagsBits = 0x736C6F72746E6F43;
  v204._object = (void *)0xE800000000000000;
  v205._uint64_t countAndFlagsBits = 0;
  v205._object = (void *)0xE000000000000000;
  v268._uint64_t countAndFlagsBits = 0;
  Swift::String v206 = NSLocalizedString(_:tableName:bundle:value:comment:)(v204, (Swift::String_optional)0, (NSBundle)v203, v205, v268);

  v254.is_nil = static UIMenuIdentifier.controls.getter();
  v254.value.super.Class isa = 0;
  Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v206, (Swift::String_optional)0, v254, 0, 0xFFFFFFFFFFFFFFFFLL, v250, v219).super.super.isa;

  return isa;
}

void sub_10028B014(void *a1)
{
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  unint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10046ECF0;
  sub_10004D29C(0, &qword_1005FE320);
  *(void *)(v2 + 32) = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  *(void *)(v2 + 40) = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  *(void *)(v2 + 48) = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  *(void *)(v2 + 56) = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  specialized Array._endMutation()();
  if (v2 >> 62)
  {
    sub_10004D29C(0, &qword_1005F7EF0);
    swift_bridgeObjectRetain();
    UIMenuElementSize preferredElementSize = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10004D29C(0, &qword_1005F7EF0);
    UIMenuElementSize preferredElementSize = v2;
  }
  swift_bridgeObjectRelease();
  sub_10004D29C(0, (unint64_t *)&unk_100600650);
  v4._uint64_t countAndFlagsBits = 0x6163696669746F4ELL;
  v4._object = (void *)0xED0000736E6F6974;
  v20.value.super.Class isa = 0;
  v20.is_nil = 0;
  Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v4, (Swift::String_optional)0, v20, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0).super.super.isa;
  id v6 = (void *)UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10046D060;
  *(void *)(v7 + 32) = v6;
  UIMenuElementSize v17 = v7;
  specialized Array._endMutation()();
  id v8 = v6;
  v9._uint64_t countAndFlagsBits = 0x7562654420534F69;
  v9._object = (void *)0xEE00756E654D2067;
  v21.value.super.Class isa = 0;
  v21.is_nil = 0;
  Class v10 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v9, (Swift::String_optional)0, v21, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v17, 0).super.super.isa;
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100470E80;
  *(void *)(v11 + 32) = isa;
  *(void *)(v11 + 40) = v10;
  UIMenuElementSize v18 = v11;
  specialized Array._endMutation()();
  id v12 = isa;
  id v13 = v10;
  v14._uint64_t countAndFlagsBits = 0x6775626544;
  v14._object = (void *)0xE500000000000000;
  v22.value.super.Class isa = 0;
  v22.is_nil = 0;
  Class v16 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v14, (Swift::String_optional)0, v22, 0, 0xFFFFFFFFFFFFFFFFLL, v18, v15).super.super.isa;
  [a1 insertSiblingMenu:v16 afterMenuForIdentifier:UIMenuHelp];
}

uint64_t sub_10028B470(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a1;
  uint64_t v7 = type metadata accessor for PreviewingPresentationHint();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Class v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.navigation.getter();
  swift_bridgeObjectRetain_n();
  Swift::String v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v21 = a4;
    uint64_t v17 = v16;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = v19;
    *(_DWORD *)uint64_t v17 = 136315651;
    uint64_t v20 = a3;
    uint64_t v25 = sub_10004B974(0xD00000000000001ALL, 0x80000001004D9D40, &v26);
    uint64_t v22 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2160;
    uint64_t v25 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_10004B974(v24, a2, &v26);
    uint64_t v7 = v22;
    a3 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s Navigating to current show page for uuid=%{private,mask.hash}s.", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  sub_100041A98((void *)(a3+ OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController), *(void *)(a3+ OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController+ 24));
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for PreviewingPresentationHint.inferTab(_:), v7);
  dispatch thunk of EpisodeControllerProtocol.presentShowPage(asPartOf:for:from:presentationHint:suppressMetrics:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10028B800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v5 = type metadata accessor for PreviewingPresentationHint();
  uint64_t v32 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v30 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Class v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  __chkstk_darwin(v11);
  id v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.navigation.getter();
  Swift::String v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v31 = a1;
  v14(v10, a1, v7);
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = a2;
    uint64_t v18 = v17;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v35 = v25;
    *(_DWORD *)uint64_t v18 = 136315651;
    uint64_t v34 = sub_10004B974(0xD00000000000001ALL, 0x80000001004D9D40, &v35);
    uint64_t v27 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2160;
    uint64_t v34 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 22) = 2081;
    uint64_t v19 = URL.absoluteString.getter();
    uint64_t v34 = sub_10004B974(v19, v20, &v35);
    uint64_t v5 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s Navigating to current show page at url=%{private,mask.hash}s.", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v26;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
  sub_100041A98((void *)(a2+ OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController), *(void *)(a2+ OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController+ 24));
  uint64_t v21 = v32;
  uint64_t v22 = v30;
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v30, enum case for PreviewingPresentationHint.inferTab(_:), v5);
  dispatch thunk of EpisodeControllerProtocol.presentStorePage(asPartOf:for:from:presentationHint:suppressMetrics:)();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v22, v5);
}

BOOL sub_10028BC34()
{
  id v0 = [self sharedApplication];
  id v1 = [v0 delegate];

  if (!v1) {
    return 0;
  }
  if (([v1 respondsToSelector:"window"] & 1) == 0)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  id v2 = [v1 window];
  swift_unknownObjectRelease();
  if (!v2) {
    return 0;
  }
  id v3 = [v2 firstResponder];

  if (!v3) {
    return 0;
  }
  sub_10004D29C(0, &qword_1005FE2E0);
  if ([v3 isKindOfClass:swift_getObjCClassFromMetadata()])
  {

    return 1;
  }
  sub_10004D29C(0, &qword_1005FE2E8);
  unsigned __int8 v5 = [v3 isKindOfClass:swift_getObjCClassFromMetadata()];

  return (v5 & 1) != 0;
}

unint64_t sub_10028C560()
{
  unint64_t result = qword_1005FE2F8;
  if (!qword_1005FE2F8)
  {
    sub_10004D29C(255, &qword_1005FE2F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE2F8);
  }
  return result;
}

uint64_t sub_10028C5C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10028C610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PodcastsPlayerAdapter.CurrentItemType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028C674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PodcastsPlayerAdapter.CurrentItemType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028C6D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PodcastsPlayerAdapter.CurrentItemType(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10028C738()
{
  return sub_10028C76C((uint64_t (*)(uint64_t, uint64_t))sub_1002855D4);
}

uint64_t sub_10028C754()
{
  return sub_10028C76C(sub_100285A4C);
}

uint64_t sub_10028C76C(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for SearchAction() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_10028C7E4()
{
  return swift_deallocObject();
}

uint64_t sub_10028C7F4(uint64_t a1)
{
  return sub_100284CB8(a1);
}

uint64_t sub_10028C7FC()
{
  return swift_deallocObject();
}

uint64_t sub_10028C80C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10028C84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, int64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v67 = a3;
  uint64_t v70 = a1;
  int v15 = a7 & 1;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v68 = *(void *)(v16 - 8);
  id v69 = (id)v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v66 - v20;
  uint64_t v22 = sub_100041A98(&v9[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(void *)&v9[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24]);
  unint64_t v23 = 0xD000000000000033;
  uint64_t v24 = (void *)0x80000001004D1B10;
  switch(*(unsigned char *)v22)
  {
    case 1:
      uint64_t v25 = "com.apple.podcasts.downloads.episodes.restore";
      goto LABEL_4;
    case 2:
      uint64_t v25 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_4:
      uint64_t v24 = (void *)((unint64_t)(v25 - 32) | 0x8000000000000000);
      unint64_t v23 = 0xD00000000000002DLL;
      break;
    case 3:
      unint64_t v23 = 0xD00000000000002FLL;
      uint64_t v24 = (void *)0x80000001004D1BB0;
      break;
    default:
      break;
  }
  id v71 = v24;
  unint64_t v72 = v23;
  if (!URL.isHLSPlaylist()())
  {
    static Logger.downloads.getter();
    uint64_t v50 = v9;
    id v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      Swift::String v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)Swift::String v53 = 136315138;
      unint64_t v54 = sub_10028CF10();
      uint64_t v73 = sub_10004B974(v54, v55, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t result = (*(uint64_t (**)(char *, id))(v68 + 8))(v19, v69);
    goto LABEL_20;
  }
  if (a4)
  {
    static Logger.downloads.getter();
    uint64_t v56 = v9;
    UIMenuElementSize v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      __n128 v59 = (uint8_t *)swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)__n128 v59 = 136315138;
      unint64_t v60 = sub_10028CF10();
      uint64_t v73 = sub_10004B974(v60, v61, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s Attempting to download HLS content without an AdamID.", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t result = (*(uint64_t (**)(char *, id))(v68 + 8))(v21, v69);
LABEL_20:
    id v62 = (_OWORD *)v70;
    uint64_t v63 = v71;
    uint64_t v64 = v72;
    uint64_t v35 = 0;
    id v36 = 0;
    *(void *)(v70 + 32) = 0;
    *id v62 = 0u;
    v62[1] = 0u;
    goto LABEL_23;
  }
  uint64_t result = (uint64_t)sub_10028CF88(a2, v72, v71, 1, a5 & 1, a6, v15);
  if (result)
  {
    uint64_t v27 = (void *)result;
    uint64_t v28 = __chkstk_darwin(result);
    uint64_t v29 = v67;
    *(&v66 - 2) = v28;
    *(&v66 - 1) = v29;
    uint64_t v31 = (uint64_t *)&v30[4];
    uint64_t v32 = v30 + 6;
    os_unfair_lock_lock(v30 + 6);
    sub_100290A0C(v31);
    os_unfair_lock_unlock(v32);
    type metadata accessor for FairPlayRolloutController();
    uint64_t v33 = (void *)static FairPlayRolloutController.shared.getter();
    Swift::Bool v34 = FairPlayRolloutController.isEnabled()();

    uint64_t v35 = 0;
    id v36 = 0;
    if (!v34)
    {
      id v37 = [v27 URLAsset];
      sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
      id v38 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
      id v39 = [v38 activeAccount];

      uint64_t v40 = *(void *)&v9[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_urlProtocolDelegate];
      id v41 = objc_allocWithZone((Class)IMAVSecureKeyLoader);
      id v42 = v37;
      id v43 = [v41 initWithRecipient:v42 useCase:1 account:v39 urlProtocolDelegate:v40];

      id v69 = [objc_allocWithZone((Class)type metadata accessor for MediaItemMetadataLoader()) init];
      __chkstk_darwin(v69);
      *(&v66 - 2) = (uint64_t)v27;
      *(&v66 - 1) = (uint64_t)v43;
      uint64_t v45 = (uint64_t)&v44[4];
      uint64_t v46 = v44 + 6;
      os_unfair_lock_lock(v44 + 6);
      sub_100290A28(v45);
      os_unfair_lock_unlock(v46);
      id v36 = (void *)swift_allocObject();
      _OWORD v36[2] = v69;
      uint64_t v36[3] = v42;
      uint64_t v47 = v67;
      v36[4] = v9;
      void v36[5] = v47;
      v36[6] = v43;
      Swift::String v48 = v9;
      uint64_t v35 = sub_100290A94;
    }
    uint64_t result = sub_10004D29C(0, &qword_1005FB930);
    Swift::String v49 = (void *)v70;
    *(void *)(v70 + 24) = result;
    uint64_t v49[4] = &off_10055AB50;
    void *v49 = v27;
  }
  else
  {
    uint64_t v35 = 0;
    id v36 = 0;
    int v65 = (_OWORD *)v70;
    *(void *)(v70 + 32) = 0;
    *int v65 = 0u;
    v65[1] = 0u;
  }
  uint64_t v63 = v71;
  uint64_t v64 = v72;
LABEL_23:
  *(void *)a8 = v35;
  *(void *)(a8 + 8) = v36;
  *(void *)(a8 + 16) = v64;
  *(void *)(a8 + 24) = v63;
  *(unsigned char *)(a8 + 32) = 1;
  return result;
}

unint64_t sub_10028CF10()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___logPrefix);
  if (*(void *)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___logPrefix + 8))
  {
    unint64_t v2 = *v1;
  }
  else
  {
    unint64_t v2 = 0xD00000000000001BLL;
    *uint64_t v1 = 0xD00000000000001BLL;
    v1[1] = 0x80000001004DA150;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

id sub_10028CF88(uint64_t a1, uint64_t a2, void *a3, int a4, Swift::Bool a5, int64_t a6, int a7)
{
  uint64_t v8 = v7;
  int v47 = a7;
  int v48 = a4;
  uint64_t v49 = a2;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78((uint64_t *)&unk_1005FE4A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D010;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v16;
  sub_10004D29C(0, (unint64_t *)&unk_1005F9460);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(a5);
  unint64_t v17 = sub_10016F444(inited);
  sub_1002779F8(v17);
  swift_bridgeObjectRelease();
  id v18 = objc_allocWithZone((Class)AVURLAsset);
  URL._bridgeToObjectiveC()(v19);
  uint64_t v21 = v20;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v23 = [v18 initWithURL:v21 options:isa];

  uint64_t v24 = *(os_unfair_lock_s **)&v8[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_sessionLock];
  Swift::String v53 = v8;
  uint64_t v50 = sub_100291A18;
  id v51 = &v52;
  uint64_t v25 = v24 + 4;
  os_unfair_lock_lock(v24 + 4);
  sub_10005DED4(v55);
  os_unfair_lock_unlock(v25);
  uint64_t v26 = (void *)v55[0];
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v26 assetDownloadTaskWithURLAsset:v23 assetTitle:v27 assetArtworkData:0 options:0];

  if (v28)
  {
    if (v47) {
      int64_t v29 = NSURLSessionTransferSizeUnknown;
    }
    else {
      int64_t v29 = a6;
    }
    id v30 = v28;
    [v30 setCountOfBytesClientExpectsToReceive:v29];
    v55[0] = 0;
    v55[1] = 0xE000000000000000;
    if (v48) {
      uint64_t v31 = 1936484398;
    }
    else {
      uint64_t v31 = 0x7261646E6174732ELL;
    }
    if (v48) {
      uint64_t v32 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v32 = (void *)0xE900000000000064;
    }
    v54._uint64_t countAndFlagsBits = v49;
    v54._object = a3;
    id v33 = v30;
    swift_bridgeObjectRetain();
    v34._uint64_t countAndFlagsBits = v31;
    v34._object = v32;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 46;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    v54._uint64_t countAndFlagsBits = (uint64_t)[v33 taskIdentifier];
    v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v33 setTaskDescription:v37];
  }
  else
  {
    uint64_t v49 = v12;
    static Logger.downloads.getter();
    id v38 = v8;
    id v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      v55[0] = swift_slowAlloc();
      *(_DWORD *)id v41 = 136315138;
      unint64_t v42 = sub_10028CF10();
      v54._uint64_t countAndFlagsBits = sub_10004B974(v42, v43, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v49);
    return 0;
  }
  return v28;
}

uint64_t sub_10028D480(uint64_t *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *a1;
  *a1 = 0x8000000000000000;
  sub_10027F7A8(a3, v5, isUniquelyReferenced_nonNull_native);
  *a1 = v8;

  return swift_bridgeObjectRelease();
}

void sub_10028D508()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.downloads.getter();
  id v5 = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v22 = v1;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v24[0] = v21;
    *(_DWORD *)uint64_t v8 = 136315394;
    unint64_t v9 = sub_10028CF10();
    v23[0] = (id)sub_10004B974(v9, v10, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v11 = 0xD000000000000033;
    uint64_t v12 = (void *)0x80000001004D1B10;
    switch(*(unsigned char *)sub_100041A98(&v5[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(void *)&v5[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24]))
    {
      case 1:
        uint64_t v13 = "com.apple.podcasts.downloads.episodes.restore";
        goto LABEL_6;
      case 2:
        uint64_t v13 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_6:
        uint64_t v12 = (void *)((unint64_t)(v13 - 32) | 0x8000000000000000);
        uint64_t v11 = 0xD00000000000002DLL;
        break;
      case 3:
        uint64_t v11 = 0xD00000000000002FLL;
        uint64_t v12 = (void *)0x80000001004D1BB0;
        break;
      default:
        break;
    }
    strcpy((char *)v23, "ConfigType: ");
    BYTE5(v23[1]) = 0;
    HIWORD(v23[1]) = -5120;
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v11;
    v15._object = v12;
    String.append(_:)(v15);
    swift_bridgeObjectRelease_n();
    v23[0] = (id)sub_10004B974((uint64_t)v23[0], (unint64_t)v23[1], v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s Invalidation downloader for %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v22);
  }
  else
  {

    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v16 = __chkstk_darwin(v14);
  *(&v21 - 2) = (uint64_t)v5;
  __chkstk_darwin(v16);
  *(&v21 - 2) = (uint64_t)sub_10005B450;
  *(&v21 - 1) = v17;
  uint64_t v19 = v18 + 4;
  os_unfair_lock_lock(v18 + 4);
  sub_10005DED4(v23);
  os_unfair_lock_unlock(v19);
  id v20 = v23[0];
  [v23[0] invalidateAndCancel];
}

double sub_10028DA24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, int64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  sub_10028C84C(a1, a2, a3, a4 & 1, a5, a6, a7 & 1, (uint64_t)&v13);
  uint64_t v9 = v14;
  uint64_t v10 = v15;
  char v11 = v16;
  double result = *(double *)&v13;
  *(_OWORD *)a8 = v13;
  *(void *)(a8 + 16) = v9;
  *(void *)(a8 + 24) = v10;
  *(unsigned char *)(a8 + 32) = v11;
  return result;
}

uint64_t sub_10028DA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100032DDC(a1, a2, a3, a4, &OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_backgroundCompletionHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1000536BC);
}

void sub_10028DA98(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  sub_1002904B0((uint64_t)v4, v5);
}

uint64_t sub_10028DAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a5;
  _OWORD v12[3] = a1;
  v12[4] = a2;
  void v12[5] = a6;
  v12[6] = a7;
  id v13 = a5;
  swift_retain();
  id v14 = a7;
  dispatch thunk of MediaItemMetadataLoader.keyIdentifiers(from:completion:)();

  return swift_release();
}

void sub_10028DBB4(void *a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v58 = a5;
  uint64_t v60 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v60 - 8);
  uint64_t v12 = __chkstk_darwin(v60);
  id v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v52 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v52 - v18;
  __n128 v59 = a3;
  if (a1 && (uint64_t v20 = a1[2]) != 0)
  {
    uint64_t v21 = a1[5];
    uint64_t v54 = a1[4];
    uint64_t v55 = v21;
    id v56 = a6;
    swift_bridgeObjectRetain();
    if (v20 != 1)
    {
      static Logger.downloads.getter();
      id v22 = a2;
      id v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        aBlock[0] = v53;
        uint64_t v57 = a4;
        *(_DWORD *)uint64_t v25 = 136315138;
        char v52 = v25 + 4;
        unint64_t v26 = sub_10028CF10();
        uint64_t v62 = sub_10004B974(v26, v27, aBlock);
        a4 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s Unexpected number of keyUris found in asset metadata. Continuing with first keyUri", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a3 = v59;
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v60);
    }
    static Logger.downloads.getter();
    id v37 = a2;
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v57 = a4;
      uint64_t v41 = v40;
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315651;
      unint64_t v42 = sub_10028CF10();
      uint64_t v62 = sub_10004B974(v42, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2160;
      uint64_t v62 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 22) = 2081;
      uint64_t v44 = v58;
      uint64_t v62 = v58;
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = sub_10004B974(v45, v46, aBlock);
      a3 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s Starting key loading process for adamID:  %{private,mask.hash}s.", (uint8_t *)v41, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v57;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v60);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v60);
      uint64_t v44 = v58;
    }
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    aBlock[0] = v44;
    dispatch thunk of CustomStringConvertible.description.getter();
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v49 = (void *)swift_allocObject();
    v49[2] = v37;
    v49[3] = v44;
    uint64_t v49[4] = a3;
    v49[5] = a4;
    aBlock[4] = (uint64_t)sub_100290B90;
    aBlock[5] = (uint64_t)v49;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10034BD38;
    void aBlock[3] = (uint64_t)&unk_10055CD10;
    uint64_t v50 = _Block_copy(aBlock);
    id v51 = v37;
    swift_retain();
    swift_release();
    [v56 startKeyLoadingProcessWithKeyIdentifier:v47 contentAdamId:v48 isRenewal:0 completion:v50];
    _Block_release(v50);
  }
  else
  {
    static Logger.downloads.getter();
    id v28 = a2;
    int64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v57 = a4;
      uint64_t v32 = (uint8_t *)v31;
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315138;
      unint64_t v33 = sub_10028CF10();
      uint64_t v62 = sub_10004B974(v33, v34, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s Downloading unprotected HLS content with an adamId is not supported.", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v60);
    Swift::String v35 = v59;
    sub_100290AFC();
    swift_allocError();
    unsigned char *v36 = 2;
    v35();
    swift_errorRelease();
  }
}

uint64_t sub_10028E2C0(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)&v36 - v13;
  uint64_t v40 = a3;
  if (a1)
  {
    uint64_t v41 = v9;
    swift_errorRetain();
    static Logger.downloads.getter();
    id v15 = a2;
    swift_errorRetain();
    id v16 = v15;
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v39 = v8;
      uint64_t v20 = v19;
      uint64_t v37 = swift_slowAlloc();
      uint64_t v43 = v37;
      *(_DWORD *)uint64_t v20 = 136315907;
      unint64_t v21 = sub_10028CF10();
      uint64_t v42 = sub_10004B974(v21, v22, &v43);
      id v38 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2160;
      uint64_t v42 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 22) = 2081;
      uint64_t v42 = v40;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v42 = sub_10004B974(v23, v24, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 32) = 2080;
      swift_getErrorValue();
      uint64_t v25 = Error.localizedDescription.getter();
      uint64_t v42 = sub_10004B974(v25, v26, &v43);
      a4 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s Finished key loading process for adamID %{private,mask.hash}s with error %s.", (uint8_t *)v20, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v39);
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v8);
    }
  }
  else
  {
    uint64_t v39 = v8;
    static Logger.downloads.getter();
    id v27 = a2;
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v43 = v37;
      *(_DWORD *)uint64_t v30 = 136315651;
      id v38 = a4;
      unint64_t v31 = sub_10028CF10();
      uint64_t v42 = sub_10004B974(v31, v32, &v43);
      uint64_t v41 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2160;
      uint64_t v42 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 22) = 2081;
      uint64_t v42 = v40;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v42 = sub_10004B974(v33, v34, &v43);
      a4 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s Finished key loading process for adamID  %{private,mask.hash}s.", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v39);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v39);
    }
  }
  return a4(a1);
}

void sub_10028E84C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v47 = a2;
  uint64_t v5 = type metadata accessor for AssetDownloadStatus();
  __chkstk_darwin(v5);
  os_log_type_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(os_unfair_lock_s **)&v2[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_taskToKeyAdamIDMap];
  NSString v48 = a1;
  uint64_t v13 = (uint64_t *)&v12[4];
  id v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  sub_100290C20(v13, (uint64_t)&v50);
  os_unfair_lock_unlock(v14);
  uint64_t v45 = v50;
  int v46 = v51;
  if (v51 == 1)
  {
    uint64_t v44 = v9;
    static Logger.downloads.getter();
    id v15 = v2;
    id v16 = a1;
    uint64_t v17 = v15;
    id v18 = v16;
    uint64_t v19 = Logger.logObject.getter();
    int v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, (os_log_type_t)v20))
    {
      int v41 = v20;
      uint64_t v42 = v8;
      uint64_t v43 = v5;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v50 = v40;
      *(_DWORD *)uint64_t v21 = 136315394;
      unint64_t v22 = sub_10028CF10();
      uint64_t v49 = sub_10004B974(v22, v23, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      id v24 = v18;
      id v25 = [v24 taskDescription];
      if (v25)
      {
        unint64_t v26 = v25;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;
      }
      else
      {

        unint64_t v29 = 0xEC0000005D646920;
        uint64_t v27 = 0x6E776F6E6B6E755BLL;
      }
      uint64_t v49 = sub_10004B974(v27, v29, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v41, "%s No corresponding adamID found for asset task %{public}s.", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v42);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v8);
    }
  }
  uint64_t v30 = *(void (**)(uint64_t *, unint64_t, unint64_t, uint64_t, char *))&v3[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler];
  if (v30)
  {
    uint64_t v52 = sub_10004D29C(0, &qword_1005FB930);
    uint64_t v53 = &off_10055AB50;
    uint64_t v50 = (uint64_t)a1;
    unint64_t v31 = 0xD000000000000033;
    unint64_t v32 = 0x80000001004D1B10;
    switch(*(unsigned char *)sub_100041A98(&v3[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(void *)&v3[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24]))
    {
      case 1:
        uint64_t v33 = "com.apple.podcasts.downloads.episodes.restore";
        goto LABEL_12;
      case 2:
        uint64_t v33 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_12:
        unint64_t v32 = (unint64_t)(v33 - 32) | 0x8000000000000000;
        unint64_t v31 = 0xD00000000000002DLL;
        break;
      case 3:
        unint64_t v31 = 0xD00000000000002FLL;
        unint64_t v32 = 0x80000001004D1BB0;
        break;
      default:
        break;
    }
    unint64_t v34 = (int *)sub_100054B78(&qword_1005FE4C0);
    Swift::String v35 = &v7[v34[12]];
    uint64_t v36 = v34[16];
    uint64_t v37 = v34[20];
    uint64_t v38 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v7, v47, v38);
    *(void *)Swift::String v35 = v45;
    v35[8] = v46;
    id v39 = a1;
    sub_10004ACDC((uint64_t)v30);
    *(void *)&v7[v36] = [v39 countOfBytesReceived];
    *(void *)&v7[v37] = 0;
    swift_storeEnumTagMultiPayload();
    v30(&v50, v31, v32, 1, v7);
    swift_bridgeObjectRelease();
    sub_1000536BC((uint64_t)v30);
    sub_100290C3C((uint64_t)v7);
    sub_10004D2D8((uint64_t)&v50);
  }
}

uint64_t sub_10028EDA4(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AssetDownloadStatus();
  __chkstk_darwin(v5);
  os_log_type_t v7 = (uint64_t *)((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v65 = *(void *)(v8 - 8);
  uint64_t v66 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v60 - v12;
  swift_getErrorValue();
  if (sub_10028F7E0(v71))
  {
    static Logger.downloads.getter();
    id v14 = v2;
    id v15 = a1;
    swift_errorRetain();
    id v16 = (char *)v14;
    id v17 = v15;
    swift_errorRetain();
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v63 = v5;
      uint64_t v64 = v7;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v68[0] = v61;
      *(_DWORD *)uint64_t v20 = 136315650;
      unint64_t v21 = sub_10028CF10();
      uint64_t v67 = sub_10004B974(v21, v22, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2082;
      id v62 = v17;
      id v23 = v17;
      id v24 = [v23 taskDescription];
      if (v24)
      {
        id v25 = v24;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v28 = v27;
      }
      else
      {
        uint64_t v26 = 0x6E776F6E6B6E755BLL;

        unint64_t v28 = 0xEC0000005D646920;
      }
      uint64_t v67 = sub_10004B974(v26, v28, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v45 = Error.localizedDescription.getter();
      uint64_t v67 = sub_10004B974(v45, v46, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s Download for task %{public}s was cancelled %{public}s.", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v13, v66);
      os_log_type_t v7 = v64;
      id v17 = v62;
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v13, v66);
    }
    uint64_t v47 = *(void (**)(uint64_t *, unint64_t, unint64_t, uint64_t, void *))&v16[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler];
    if (v47)
    {
      uint64_t v69 = sub_10004D29C(0, &qword_1005FB930);
      uint64_t v70 = &off_10055AB50;
      NSString v48 = v17;
      v68[0] = (uint64_t)v17;
      unint64_t v49 = 0xD000000000000033;
      unint64_t v50 = 0x80000001004D1B10;
      switch(*(unsigned char *)sub_100041A98(&v16[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(void *)&v16[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24]))
      {
        case 1:
          unsigned __int8 v51 = "com.apple.podcasts.downloads.episodes.restore";
          goto LABEL_21;
        case 2:
          unsigned __int8 v51 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_21:
          unint64_t v50 = (unint64_t)(v51 - 32) | 0x8000000000000000;
          unint64_t v49 = 0xD00000000000002DLL;
          break;
        case 3:
          unint64_t v49 = 0xD00000000000002FLL;
          unint64_t v50 = 0x80000001004D1BB0;
          break;
        default:
          break;
      }
      swift_storeEnumTagMultiPayload();
      id v58 = v48;
      sub_10004ACDC((uint64_t)v47);
      v47(v68, v49, v50, 1, v7);
LABEL_28:
      swift_bridgeObjectRelease();
      sub_1000536BC((uint64_t)v47);
      sub_100290C3C((uint64_t)v7);
      return sub_10004D2D8((uint64_t)v68);
    }
  }
  else
  {
    static Logger.downloads.getter();
    id v29 = v2;
    id v30 = a1;
    swift_errorRetain();
    unint64_t v31 = (char *)v29;
    id v32 = v30;
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v63 = v5;
      uint64_t v64 = v7;
      uint64_t v35 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v68[0] = v61;
      *(_DWORD *)uint64_t v35 = 136315650;
      unint64_t v36 = sub_10028CF10();
      uint64_t v67 = sub_10004B974(v36, v37, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2082;
      id v62 = v32;
      id v38 = v32;
      id v39 = [v38 taskDescription];
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v43 = v42;
      }
      else
      {
        uint64_t v41 = 0x6E776F6E6B6E755BLL;

        unint64_t v43 = 0xEC0000005D646920;
      }
      uint64_t v67 = sub_10004B974(v41, v43, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v52 = Error.localizedDescription.getter();
      uint64_t v67 = sub_10004B974(v52, v53, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s Download for task %{public}s failed with error %{public}s.", (uint8_t *)v35, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v11, v66);
      os_log_type_t v7 = v64;
      id v32 = v62;
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v11, v66);
    }
    uint64_t v47 = *(void (**)(uint64_t *, unint64_t, unint64_t, uint64_t, void *))&v31[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler];
    if (v47)
    {
      uint64_t v69 = sub_10004D29C(0, &qword_1005FB930);
      uint64_t v70 = &off_10055AB50;
      uint64_t v54 = v32;
      v68[0] = (uint64_t)v32;
      unint64_t v55 = 0xD000000000000033;
      unint64_t v56 = 0x80000001004D1B10;
      switch(*(unsigned char *)sub_100041A98(&v31[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(void *)&v31[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24]))
      {
        case 1:
          uint64_t v57 = "com.apple.podcasts.downloads.episodes.restore";
          goto LABEL_25;
        case 2:
          uint64_t v57 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_25:
          unint64_t v56 = (unint64_t)(v57 - 32) | 0x8000000000000000;
          unint64_t v55 = 0xD00000000000002DLL;
          break;
        case 3:
          unint64_t v55 = 0xD00000000000002FLL;
          unint64_t v56 = 0x80000001004D1BB0;
          break;
        default:
          break;
      }
      void *v7 = a2;
      swift_storeEnumTagMultiPayload();
      id v59 = v54;
      swift_errorRetain();
      sub_10004ACDC((uint64_t)v47);
      v47(v68, v55, v56, 1, v7);
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t sub_10028F6FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100226FC4(a2);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *a1;
    uint64_t v13 = *a1;
    *a1 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100281550();
      uint64_t v11 = v13;
    }

    uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v6);
    sub_10027E400(v6, v11);
    *a1 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(void *)a3 = v12;
  *(unsigned char *)(a3 + 8) = (v8 & 1) == 0;
  return result;
}

BOOL sub_10028F7E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v6, v4, a1);
  }
  char v7 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v8 = [v7 domain];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {

      return 0;
    }
  }
  id v16 = [v7 code];

  return v16 == (id)-999;
}

uint64_t sub_10028FBF8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v46 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unint64_t v42 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    char v14 = (void *)v13;
    id v15 = a2;
    id v16 = [v14 URLAsset];
    sub_1002BA07C(v16, a3, a1, v14);
  }
  static Logger.downloads.getter();
  id v17 = a2;
  id v18 = v3;
  id v19 = v17;
  id v20 = v18;
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v39 = v7;
    uint64_t v23 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    unint64_t v24 = sub_10028CF10();
    uint64_t v47 = sub_10004B974(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    id v26 = v19;
    id v27 = [v26 taskDescription];
    if (v27)
    {
      unint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v31 = v30;
    }
    else
    {

      unint64_t v31 = 0xEC0000005D646920;
      uint64_t v29 = 0x6E776F6E6B6E755BLL;
    }
    uint64_t v47 = sub_10004B974(v29, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s Download for task %{public}s successfully completed.", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
    uint64_t v7 = v39;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  }
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  id v32 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = (uint64_t)sub_100290C18;
  aBlock[5] = v33;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10003B424;
  void aBlock[3] = (uint64_t)&unk_10055CD60;
  os_log_type_t v34 = _Block_copy(aBlock);
  swift_release();
  uint64_t v35 = v42;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10002FC48();
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10002FBEC();
  unint64_t v36 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v34);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v35, v45);
}

void sub_10029019C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    static Logger.fairPlay.getter();
    uint64_t v6 = v5;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      v17[0] = v0;
      uint64_t v10 = (uint8_t *)v9;
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      unint64_t v11 = sub_10028CF10();
      v17[1] = sub_10004B974(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s Calling background completion handlers.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, void))(v1 + 8))(v3, v17[0]);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
    uint64_t v13 = (uint64_t *)&v6[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_backgroundCompletionHandler];
    char v14 = *(void (**)(uint64_t))&v6[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_backgroundCompletionHandler];
    if (v14)
    {
      uint64_t v15 = swift_retain();
      v14(v15);
      sub_1000536BC((uint64_t)v14);
      uint64_t v16 = *v13;
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t *v13 = 0;
    v13[1] = 0;
    sub_1000536BC(v16);
  }
}

uint64_t sub_1002904B0(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = sub_100290564(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_10027F910(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v10;

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100290564(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100054B78(&qword_1005FDD88);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10004D29C(0, &qword_1005F8440);
      do
      {
        swift_dynamicCast();
        sub_10004D29C(0, &qword_1005FE498);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10027B0C8(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1002907B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100054B78(&qword_1005FE4E0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10004D29C(0, &qword_1005F7728);
      do
      {
        swift_dynamicCast();
        sub_10004D29C(0, (unint64_t *)&qword_1005F71F0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10027C1F8(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_100290A0C(uint64_t *a1)
{
  return sub_10028D480(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

void sub_100290A28(uint64_t a1)
{
  sub_10028DA98(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100290A44()
{
  return swift_deallocObject();
}

uint64_t sub_100290A94(uint64_t a1, uint64_t a2)
{
  return sub_10028DAF8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_100290AA4()
{
  swift_release();

  return swift_deallocObject();
}

void sub_100290AEC(void *a1)
{
  sub_10028DBB4(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48));
}

unint64_t sub_100290AFC()
{
  unint64_t result = qword_1005FE490;
  if (!qword_1005FE490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE490);
  }
  return result;
}

uint64_t sub_100290B50()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100290B90(uint64_t a1)
{
  return sub_10028E2C0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(void))(v1 + 32));
}

void *sub_100290B9C@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_100290BE0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_100290C18()
{
}

uint64_t sub_100290C20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10028F6FC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100290C3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetDownloadStatus();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100290C98(NSObject *a1, unint64_t a2, CMTimeValue *a3)
{
  uint64_t v4 = v3;
  id v95 = a1;
  uint64_t v94 = type metadata accessor for AssetDownloadStatus();
  __chkstk_darwin(v94);
  unint64_t v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  char v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v87 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v87 - v17;
  CMTimeEpoch v19 = a3[5];
  time.value = a3[3];
  *(void *)&time.timescale = a3[4];
  time.epoch = v19;
  time.value = CMTimeGetSeconds(&time);
  sub_1001F5800();
  uint64_t v20 = BinaryFloatingPoint.safeInt64.getter();
  if (v21)
  {
    static Logger.downloads.getter();
    uint64_t v29 = v4;
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v30, v31))
    {

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      return;
    }
    uint64_t v32 = swift_slowAlloc();
    time.value = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315651;
    unint64_t v33 = sub_10028CF10();
    uint64_t v35 = sub_10004B974(v33, v34, &time.value);
    uint64_t v96 = v9;
    v97._uint64_t countAndFlagsBits = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2160;
    v97._uint64_t countAndFlagsBits = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 22) = 2081;
    uint64_t v36 = Double.description.getter();
    v97._uint64_t countAndFlagsBits = sub_10004B974(v36, v37, &time.value);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s Unable to convert duration=%{private,mask.hash}s to Int64.", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v38 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v39 = v13;
    goto LABEL_22;
  }
  uint64_t v22 = v20;
  id v92 = [self progressWithTotalUnitCount:v20];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v23 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v93 = v10;
  uint64_t v96 = v9;
  uint64_t v90 = v22;
  uint64_t v91 = v8;
  if (v23)
  {
    if (v23 < 1)
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v24 = 0;
    double v25 = 0.0;
    do
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v26 = *(id *)(a2 + 8 * v24 + 32);
      }
      id v27 = v26;
      ++v24;
      [v26 CMTimeRangeValue];
      CMTime time = v100;
      double Seconds = CMTimeGetSeconds(&time);

      double v25 = v25 + Seconds;
    }
    while (v23 != v24);
  }
  else
  {
    double v25 = 0.0;
  }
  swift_bridgeObjectRelease();
  *(double *)&time.value = v25;
  uint64_t v40 = BinaryFloatingPoint.safeInt64.getter();
  if (v41)
  {
    static Logger.downloads.getter();
    unint64_t v50 = v4;
    unsigned __int8 v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    BOOL v53 = os_log_type_enabled(v51, v52);
    uint64_t v54 = v93;
    if (v53)
    {
      uint64_t v55 = swift_slowAlloc();
      time.value = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315651;
      unint64_t v56 = sub_10028CF10();
      v97._uint64_t countAndFlagsBits = sub_10004B974(v56, v57, &time.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2160;
      v97._uint64_t countAndFlagsBits = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 22) = 2081;
      uint64_t v58 = Double.description.getter();
      v97._uint64_t countAndFlagsBits = sub_10004B974(v58, v59, &time.value);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s Unable to convert timeLoaded=%{private,mask.hash}s to Int64.", (uint8_t *)v55, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v38 = *(void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v39 = v16;
LABEL_22:
    v38(v39, v96);
    return;
  }
  id v42 = v92;
  [v92 setCompletedUnitCount:v40];
  NSString v43 = String._bridgeToObjectiveC()();
  NSString v44 = String._bridgeToObjectiveC()();
  [v42 setUserInfoObject:v43 forKey:v44];

  uint64_t v45 = sub_100041A98(&v4[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(void *)&v4[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24]);
  uint64_t v46 = 0xD000000000000033;
  uint64_t v47 = (void *)0x80000001004D1B10;
  uint64_t v48 = v93;
  switch(*(unsigned char *)v45)
  {
    case 1:
      unint64_t v49 = "com.apple.podcasts.downloads.episodes.restore";
      goto LABEL_24;
    case 2:
      unint64_t v49 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_24:
      uint64_t v47 = (void *)((unint64_t)(v49 - 32) | 0x8000000000000000);
      uint64_t v46 = 0xD00000000000002DLL;
      break;
    case 3:
      uint64_t v46 = 0xD00000000000002FLL;
      uint64_t v47 = (void *)0x80000001004D1BB0;
      break;
    default:
      break;
  }
  static Logger.downloads.getter();
  uint64_t v60 = v4;
  uint64_t v61 = v95;
  swift_bridgeObjectRetain_n();
  id v62 = v42;
  uint64_t v63 = v60;
  uint64_t v64 = v61;
  id v65 = v62;
  uint64_t v66 = Logger.logObject.getter();
  int v67 = static os_log_type_t.debug.getter();
  BOOL v68 = os_log_type_enabled(v66, (os_log_type_t)v67);
  uint64_t v89 = v46;
  if (v68)
  {
    LODWORD(v92) = v67;
    id v95 = v66;
    uint64_t v69 = swift_slowAlloc();
    uint64_t v88 = swift_slowAlloc();
    uint64_t v98 = v88;
    *(_DWORD *)uint64_t v69 = 136315906;
    unint64_t v70 = sub_10028CF10();
    time.value = sub_10004B974(v70, v71, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v69 + 12) = 2048;
    id v72 = [v64 taskIdentifier];

    time.value = (CMTimeValue)v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v87 = v64;

    *(_WORD *)(v69 + 22) = 2082;
    time.value = 0x496E6F6973736553;
    *(void *)&time.timescale = 0xEB00000000203A44;
    v97._uint64_t countAndFlagsBits = v46;
    v97._object = v47;
    swift_bridgeObjectRetain_n();
    v73._uint64_t countAndFlagsBits = 1936484398;
    v73._object = (void *)0xE400000000000000;
    String.append(_:)(v73);
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    time.value = sub_10004B974(time.value, *(unint64_t *)&time.timescale, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v69 + 32) = 2082;
    id v74 = [v65 localizedAdditionalDescription];
    if (v74)
    {
      unint64_t v75 = v74;
      CMTimeValue v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v78 = v77;
    }
    else
    {
      CMTimeValue v76 = 0;
      uint64_t v78 = 0;
    }
    time.value = v76;
    *(void *)&time.timescale = v78;
    sub_100054B78(&qword_1005F93A0);
    uint64_t v80 = String.init<A>(describing:)();
    time.value = sub_10004B974(v80, v81, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v82 = v95;
    _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v92, "%s Progress update for task %ld %{public}s: %{public}s.", (uint8_t *)v69, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v93 + 8))(v18, v96);
    uint64_t v79 = v91;
    uint64_t v64 = v87;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v96);
    uint64_t v79 = v91;
  }
  int v83 = *(void (**)(CMTime *, uint64_t, void *, uint64_t, void *))&v63[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler];
  if (v83)
  {
    v100.value = sub_10004D29C(0, &qword_1005FB930);
    *(void *)&v100.timescale = &off_10055AB50;
    time.value = (CMTimeValue)v64;
    if ((~*(void *)&v25 & 0x7FF0000000000000) != 0)
    {
      if (v25 > -9.22337204e18)
      {
        if (v25 < 9.22337204e18)
        {
          uint64_t v84 = v90;
          *uint64_t v79 = v65;
          v79[1] = v84;
          v79[2] = (uint64_t)v25;
          swift_storeEnumTagMultiPayload();
          Swift::String v85 = v64;
          id v86 = v65;
          sub_10004ACDC((uint64_t)v83);
          v83(&time, v89, v47, 1, v79);
          sub_1000536BC((uint64_t)v83);
          swift_bridgeObjectRelease();

          sub_100290C3C((uint64_t)v79);
          sub_10004D2D8((uint64_t)&time);
          return;
        }
LABEL_42:
        __break(1u);
        JUMPOUT(0x10029181CLL);
      }
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for BaseOperation.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FairPlayAssetsDownloaderError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100291988);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FairPlayAssetsDownloaderError()
{
  return &type metadata for FairPlayAssetsDownloaderError;
}

unint64_t sub_1002919C4()
{
  unint64_t result = qword_1005FE4E8;
  if (!qword_1005FE4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE4E8);
  }
  return result;
}

id sub_100291A18@<X0>(void *a1@<X8>)
{
  return sub_10005B450(a1);
}

uint64_t sub_100291A38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v4 = self;
  id v5 = [v4 _applePodcastsFoundationSharedUserDefaults];
  *((void *)&v24 + 1) = AppStorage.init<A>(wrappedValue:_:store:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = [v4 _applePodcastsFoundationSharedUserDefaults];
  *(void *)&long long v25 = AppStorage.init<A>(wrappedValue:_:store:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = (id)MTPodcastHidesPlayedEpisodesAppWideUserDefaults();
  *((void *)&v25 + 1) = AppStorage.init<A>(wrappedValue:_:store:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = [v4 _applePodcastsFoundationSettingsUserDefaults];
  *(void *)&long long v26 = AppStorage.init<A>(wrappedValue:_:store:)();
  sub_100056D54((uint64_t)a1, (uint64_t)v19);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100041A98(a1, v9);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 16))(v28, v9, v10);
  *((void *)&v20 + 1) = v28[0];
  *(void *)&long long v21 = v28[1];
  WORD4(v21) = v29;
  BYTE10(v21) = v30;
  *(void *)&long long v22 = v31;
  DWORD2(v22) = v32;
  long long v23 = v33;
  *(void *)&long long v24 = 0;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100041A98(a1, v11);
  *((void *)&v26 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  uint64_t v27 = v13;
  *(void *)(a2 + 144) = v13;
  long long v14 = v25;
  *(_OWORD *)(a2 + 96) = v24;
  *(_OWORD *)(a2 + 112) = v14;
  long long v15 = v21;
  *(_OWORD *)(a2 + 32) = v20;
  *(_OWORD *)(a2 + 48) = v15;
  long long v16 = v23;
  *(_OWORD *)(a2 + 64) = v22;
  *(_OWORD *)(a2 + 80) = v16;
  long long v17 = v19[1];
  *(_OWORD *)a2 = v19[0];
  *(_OWORD *)(a2 + 16) = v17;
  *(_OWORD *)(a2 + 128) = v26;
  return sub_10004D2D8((uint64_t)a1);
}

BOOL sub_100291C7C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  long long v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_100297500((uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_100291CD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v60 = a1;
  uint64_t v59 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  unint64_t v57 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78(&qword_1005FE640);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100054B78(&qword_1005FE648);
  __chkstk_darwin(v53);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100054B78(&qword_1005FE650);
  uint64_t v56 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v1;
  sub_100054B78(&qword_1005FE658);
  sub_1002975D0();
  Form.init(content:)();
  uint64_t v11 = *(void *)(v1 + 48);
  char v12 = *(unsigned char *)(v1 + 56);
  char v13 = *(unsigned char *)(v1 + 57);
  char v14 = *(unsigned char *)(v1 + 58);
  uint64_t v15 = *(void *)(v1 + 64);
  int v16 = *(_DWORD *)(v1 + 72);
  uint64_t v17 = *(void *)(v1 + 96);
  *(void *)&long long v62 = *(void *)(v1 + 40);
  *((void *)&v62 + 1) = v11;
  LOBYTE(v63) = v12;
  BYTE1(v63) = v13;
  BYTE2(v63) = v14;
  *((void *)&v63 + 1) = v15;
  *(_DWORD *)uint64_t v64 = v16;
  *(_OWORD *)&v64[8] = *(_OWORD *)(v1 + 80);
  *(void *)&v64[24] = v17;
  uint64_t v52 = sub_100054B78(&qword_1005FE6A8);
  State.wrappedValue.getter();
  uint64_t v18 = *((void *)&v71 + 1);
  uint64_t v51 = v71;
  char v19 = v72;
  char v20 = v73;
  int v50 = v74;
  uint64_t v49 = v75;
  int v48 = v76;
  uint64_t v47 = v77;
  uint64_t v46 = v78;
  sub_100297790(v1, (uint64_t)&v62);
  uint64_t v21 = swift_allocObject();
  long long v22 = v68;
  *(_OWORD *)(v21 + 112) = v67;
  *(_OWORD *)(v21 + 128) = v22;
  *(_OWORD *)(v21 + 144) = v69;
  *(void *)(v21 + 160) = v70;
  long long v23 = *(_OWORD *)&v64[16];
  *(_OWORD *)(v21 + 48) = *(_OWORD *)v64;
  *(_OWORD *)(v21 + 64) = v23;
  long long v24 = v66;
  *(_OWORD *)(v21 + 80) = v65;
  *(_OWORD *)(v21 + 96) = v24;
  long long v25 = v63;
  *(_OWORD *)(v21 + 16) = v62;
  *(_OWORD *)(v21 + 32) = v25;
  uint64_t v26 = v5;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v7, v4);
  uint64_t v27 = v53;
  unint64_t v28 = &v9[*(int *)(v53 + 36)];
  *(void *)unint64_t v28 = v51;
  *((void *)v28 + 1) = v18;
  v28[16] = v19;
  v28[17] = v20;
  v28[18] = v50;
  *((void *)v28 + 3) = v49;
  *((_DWORD *)v28 + 8) = v48;
  uint64_t v29 = v46;
  *((void *)v28 + 5) = v47;
  *((void *)v28 + 6) = v29;
  *((void *)v28 + 7) = sub_1002977CC;
  *((void *)v28 + 8) = v21;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v4);
  uint64_t v30 = *(void *)(v2 + 48);
  char v31 = *(unsigned char *)(v2 + 56);
  char v32 = *(unsigned char *)(v2 + 57);
  char v33 = *(unsigned char *)(v2 + 58);
  uint64_t v34 = *(void *)(v2 + 64);
  int v35 = *(_DWORD *)(v2 + 72);
  uint64_t v36 = *(void *)(v2 + 96);
  *(void *)&long long v62 = *(void *)(v2 + 40);
  *((void *)&v62 + 1) = v30;
  LOBYTE(v63) = v31;
  BYTE1(v63) = v32;
  BYTE2(v63) = v33;
  *((void *)&v63 + 1) = v34;
  *(_DWORD *)uint64_t v64 = v35;
  *(_OWORD *)&v64[8] = *(_OWORD *)(v2 + 80);
  *(void *)&v64[24] = v36;
  State.wrappedValue.getter();
  long long v62 = v71;
  unint64_t v37 = sub_1002977D4();
  unint64_t v38 = sub_1001AA530();
  uint64_t v39 = v54;
  View.navigationTitle<A>(_:)();
  swift_bridgeObjectRelease();
  sub_100054B1C((uint64_t)v9, &qword_1005FE648);
  uint64_t v40 = v58;
  char v41 = v57;
  uint64_t v42 = v59;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v57, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v59);
  *(void *)&long long v62 = v27;
  *((void *)&v62 + 1) = &type metadata for String;
  *(void *)&long long v63 = v37;
  *((void *)&v63 + 1) = v38;
  swift_getOpaqueTypeConformance2();
  uint64_t v43 = v55;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v39, v43);
}

uint64_t sub_100292300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100054B78(&qword_1005FE690);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100054B78(&qword_1005FE6D0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100054B78(&qword_1005FE670);
  __chkstk_darwin(v11);
  char v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 56);
  char v16 = *(unsigned char *)(a1 + 57);
  char v17 = *(unsigned char *)(a1 + 58);
  uint64_t v18 = *(void *)(a1 + 64);
  int v19 = *(_DWORD *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 96);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v29 = v14;
  char v30 = v15;
  char v31 = v16;
  char v32 = v17;
  uint64_t v33 = v18;
  int v34 = v19;
  long long v35 = *(_OWORD *)(a1 + 80);
  uint64_t v36 = v20;
  sub_100054B78(&qword_1005FE6A8);
  State.wrappedValue.getter();
  int v21 = v37;
  uint64_t v22 = swift_bridgeObjectRelease();
  if (v21 == 1)
  {
    sub_100293D00(a1, (uint64_t)v13);
    sub_100054BBC((uint64_t)v13, (uint64_t)v10, &qword_1005FE670);
    swift_storeEnumTagMultiPayload();
    sub_10029764C();
    sub_1002976E4();
    _ConditionalContent<>.init(storage:)();
    return sub_100054B1C((uint64_t)v13, &qword_1005FE670);
  }
  else
  {
    v27[1] = a2;
    __chkstk_darwin(v22);
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v28 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v29 = v24;
    char v30 = v25 & 1;
    uint64_t v33 = v26;
    sub_100054B78(&qword_1005FE6A0);
    sub_100044200(&qword_1005FE698, &qword_1005FE6A0);
    Section<>.init(footer:content:)();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v4);
    swift_storeEnumTagMultiPayload();
    sub_10029764C();
    sub_1002976E4();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1002926AC(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  v23[0] = *(_OWORD *)a1;
  long long v4 = *(_OWORD *)(a1 + 32);
  v23[1] = v3;
  id v23[2] = v4;
  uint64_t v24 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  sub_100041A98((void *)a2, v5);
  (*(void (**)(void *__return_ptr, _OWORD *, uint64_t, uint64_t))(v6 + 24))(v15, v23, v5, v6);
  uint64_t v7 = *(void *)(a2 + 48);
  char v8 = *(unsigned char *)(a2 + 56);
  char v9 = *(unsigned char *)(a2 + 57);
  char v10 = *(unsigned char *)(a2 + 58);
  uint64_t v11 = *(void *)(a2 + 64);
  int v12 = *(_DWORD *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 96);
  v15[7] = *(void *)(a2 + 40);
  v15[8] = v7;
  char v16 = v8;
  char v17 = v9;
  char v18 = v10;
  uint64_t v19 = v11;
  int v20 = v12;
  long long v21 = *(_OWORD *)(a2 + 80);
  uint64_t v22 = v13;
  sub_100054B78(&qword_1005FE6A8);
  return State.wrappedValue.setter();
}

uint64_t sub_100292790()
{
  uint64_t v0 = self;
  id v1 = [v0 currentDevice];
  id v2 = [v1 userInterfaceIdiom];

  if (v2)
  {
    id v3 = [v0 currentDevice];
    [v3 userInterfaceIdiom];
  }
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_100292878()
{
  uint64_t v0 = self;
  id v1 = [v0 currentDevice];
  id v2 = [v1 userInterfaceIdiom];

  if (v2)
  {
    id v3 = [v0 currentDevice];
    [v3 userInterfaceIdiom];
  }
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_100292960@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = sub_100054B78(&qword_1005FE828);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_1005FE830);
  __chkstk_darwin(v6);
  char v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100054B78(&qword_1005FE838);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppStorage.wrappedValue.getter();
  int v13 = LOBYTE(v22[0]);
  sub_100297790(v1, (uint64_t)v22);
  if (v13 == 1)
  {
    AppStorage.wrappedValue.getter();
    char v14 = v21;
    uint64_t v15 = sub_100297C2C((uint64_t)v22);
    if ((v14 & 1) == 0)
    {
      __chkstk_darwin(v15);
      sub_100292878();
      v22[0] = Text.init(_:tableName:bundle:comment:)();
      v22[1] = v16;
      char v23 = v17 & 1;
      uint64_t v24 = v18;
      sub_100054B78(&qword_1005FE860);
      sub_100044200(&qword_1005FE858, &qword_1005FE860);
      Section<>.init(footer:content:)();
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
      swift_storeEnumTagMultiPayload();
      sub_100297C64();
      sub_100297D10();
      _ConditionalContent<>.init(storage:)();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  else
  {
    uint64_t v15 = sub_100297C2C((uint64_t)v22);
  }
  __chkstk_darwin(v15);
  sub_100054B78(&qword_1005FE840);
  sub_100044200(&qword_1005FE848, &qword_1005FE840);
  Section<>.init(content:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
  swift_storeEnumTagMultiPayload();
  sub_100297C64();
  sub_100297D10();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100292D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v93 = sub_100054B78(&qword_1005FA5C0);
  uint64_t v92 = *(void *)(v93 - 8);
  uint64_t v3 = __chkstk_darwin(v93);
  uint64_t v91 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v99 = (char *)&v78 - v5;
  uint64_t v89 = sub_100054B78(&qword_1005FE870) - 8;
  __chkstk_darwin(v89);
  uint64_t v88 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100054B78(&qword_1005FE878) - 8;
  uint64_t v7 = __chkstk_darwin(v90);
  uint64_t v97 = (uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v98 = (uint64_t)&v78 - v9;
  uint64_t v87 = sub_100054B78(&qword_1005FE6A0);
  uint64_t v100 = *(void *)(v87 - 8);
  uint64_t v10 = __chkstk_darwin(v87);
  uint64_t v96 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v101 = (char *)&v78 - v12;
  uint64_t v84 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v83 = v13;
  int v81 = v14;
  uint64_t v82 = v15;
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  char v18 = *(unsigned char *)(a1 + 56);
  char v19 = *(unsigned char *)(a1 + 57);
  char v20 = *(unsigned char *)(a1 + 58);
  uint64_t v21 = *(void *)(a1 + 64);
  int v22 = *(_DWORD *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 96);
  uint64_t v95 = a1;
  uint64_t v102 = v16;
  uint64_t v103 = v17;
  char v104 = v18;
  char v105 = v19;
  char v106 = v20;
  uint64_t v107 = v21;
  int v108 = v22;
  long long v109 = *(_OWORD *)(a1 + 80);
  uint64_t v110 = v23;
  id v86 = (void (*)(uint64_t, char *, uint64_t))sub_100054B78(&qword_1005FE6A8);
  State.projectedValue.getter();
  char v25 = v111;
  uint64_t v24 = v112;
  uint64_t v80 = v111;
  uint64_t v26 = v114;
  uint64_t v85 = v113;
  char v27 = v115;
  char v28 = v116;
  char v29 = v117;
  uint64_t v79 = v118;
  int v30 = v119;
  uint64_t v32 = v120;
  uint64_t v31 = v121;
  swift_getKeyPath();
  uint64_t v111 = v25;
  uint64_t v112 = v24;
  uint64_t v113 = v85;
  uint64_t v114 = v26;
  char v115 = v27;
  char v116 = v28;
  char v117 = v29;
  uint64_t v118 = v79;
  int v119 = v30;
  uint64_t v120 = v32;
  uint64_t v121 = v31;
  uint64_t v85 = sub_100054B78(&qword_1005FE770);
  Binding.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  Toggle<>.init(_:isOn:)();
  uint64_t v84 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v83 = v33;
  int v81 = v34;
  uint64_t v82 = v35;
  uint64_t v36 = *(void *)(v95 + 48);
  char v37 = *(unsigned char *)(v95 + 56);
  char v38 = *(unsigned char *)(v95 + 57);
  char v39 = *(unsigned char *)(v95 + 58);
  uint64_t v40 = *(void *)(v95 + 64);
  int v41 = *(_DWORD *)(v95 + 72);
  uint64_t v42 = *(void *)(v95 + 96);
  uint64_t v102 = *(void *)(v95 + 40);
  uint64_t v103 = v36;
  char v104 = v37;
  char v105 = v38;
  char v106 = v39;
  uint64_t v107 = v40;
  int v108 = v41;
  long long v109 = *(_OWORD *)(v95 + 80);
  uint64_t v110 = v42;
  State.projectedValue.getter();
  uint64_t v43 = v111;
  uint64_t v44 = v112;
  id v86 = (void (*)(uint64_t, char *, uint64_t))v111;
  uint64_t v45 = v114;
  uint64_t v80 = (void (*)(void, void, void))v113;
  char v46 = v115;
  char v47 = v116;
  LOBYTE(v30) = v117;
  uint64_t v48 = v118;
  LODWORD(v79) = v119;
  uint64_t v50 = v120;
  uint64_t v49 = v121;
  swift_getKeyPath();
  uint64_t v111 = v43;
  uint64_t v112 = v44;
  uint64_t v113 = (uint64_t)v80;
  uint64_t v114 = v45;
  char v115 = v46;
  char v116 = v47;
  char v117 = v30;
  uint64_t v118 = v48;
  int v119 = v79;
  uint64_t v120 = v50;
  uint64_t v121 = v49;
  Binding.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v51 = v96;
  Toggle<>.init(_:isOn:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v53 = swift_allocObject();
  *(unsigned char *)(v53 + 16) = 1;
  uint64_t v54 = v100;
  uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  uint64_t v56 = (uint64_t)v88;
  uint64_t v57 = v87;
  v55(v88, v51, v87);
  id v86 = (void (*)(uint64_t, char *, uint64_t))v55;
  uint64_t v58 = (uint64_t *)(v56 + *(int *)(v89 + 44));
  *uint64_t v58 = KeyPath;
  v58[1] = (uint64_t)sub_100297E24;
  v58[2] = v53;
  uint64_t v59 = *(void (**)(char *, uint64_t))(v54 + 8);
  uint64_t v100 = v54 + 8;
  uint64_t v89 = (uint64_t)v59;
  v59(v51, v57);
  uint64_t v60 = static Color.secondary.getter();
  uint64_t v61 = swift_getKeyPath();
  uint64_t v62 = v97;
  sub_100054BBC(v56, v97, &qword_1005FE870);
  long long v63 = (uint64_t *)(v62 + *(int *)(v90 + 44));
  uint64_t *v63 = v61;
  v63[1] = v60;
  sub_100054B1C(v56, &qword_1005FE870);
  uint64_t v64 = v62;
  uint64_t v65 = v98;
  sub_100297E44(v62, v98);
  sub_100292790();
  long long v66 = v99;
  Button<>.init(_:action:)();
  long long v67 = v51;
  v55(v51, v101, v57);
  sub_100054BBC(v65, v64, &qword_1005FE878);
  uint64_t v68 = v92;
  long long v69 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
  uint64_t v70 = v91;
  uint64_t v71 = v93;
  v69(v91, v66, v93);
  uint64_t v72 = v94;
  v86(v94, v67, v57);
  uint64_t v73 = sub_100054B78(&qword_1005FE880);
  uint64_t v74 = v97;
  sub_100054BBC(v97, v72 + *(int *)(v73 + 48), &qword_1005FE878);
  v69((char *)(v72 + *(int *)(v73 + 64)), v70, v71);
  uint64_t v75 = *(void (**)(char *, uint64_t))(v68 + 8);
  v75(v99, v71);
  sub_100054B1C(v98, &qword_1005FE878);
  int v76 = (uint64_t (*)(char *, uint64_t))v89;
  ((void (*)(char *, uint64_t))v89)(v101, v57);
  v75(v70, v71);
  sub_100054B1C(v74, &qword_1005FE878);
  return v76(v96, v57);
}

void sub_100293600()
{
}

uint64_t sub_100293618@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v3 = sub_100054B78(&qword_1005FE6A0);
  uint64_t v70 = *(void *)(v3 - 8);
  uint64_t v71 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  long long v69 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v58 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  long long v67 = (char *)&v58 - v9;
  __chkstk_darwin(v8);
  uint64_t v73 = (char *)&v58 - v10;
  uint64_t v64 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v63 = v11;
  int v61 = v12;
  uint64_t v62 = v13;
  uint64_t v14 = *(void *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 56);
  char v16 = *(unsigned char *)(a1 + 57);
  char v17 = *(unsigned char *)(a1 + 58);
  uint64_t v18 = *(void *)(a1 + 64);
  int v19 = *(_DWORD *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 96);
  uint64_t v74 = *(void *)(a1 + 40);
  uint64_t v75 = v14;
  char v76 = v15;
  char v77 = v16;
  char v78 = v17;
  uint64_t v79 = v18;
  int v80 = v19;
  long long v81 = *(_OWORD *)(a1 + 80);
  uint64_t v82 = v20;
  uint64_t v66 = sub_100054B78(&qword_1005FE6A8);
  State.projectedValue.getter();
  uint64_t v21 = v83;
  uint64_t v22 = v84;
  uint64_t v60 = v83;
  uint64_t v23 = v86;
  uint64_t v65 = v85;
  unsigned __int8 v24 = v87;
  char v25 = v88;
  char v26 = v89;
  uint64_t v59 = v90;
  int v27 = v91;
  uint64_t v28 = v93;
  uint64_t v58 = v92;
  swift_getKeyPath();
  uint64_t v83 = v21;
  uint64_t v84 = v22;
  uint64_t v85 = v65;
  uint64_t v86 = v23;
  unsigned __int8 v87 = v24;
  char v88 = v25;
  char v89 = v26;
  uint64_t v90 = v59;
  int v91 = v27;
  uint64_t v92 = v58;
  uint64_t v93 = v28;
  uint64_t v65 = sub_100054B78(&qword_1005FE770);
  Binding.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  Toggle<>.init(_:isOn:)();
  uint64_t v64 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v63 = v29;
  int v61 = v30;
  uint64_t v62 = v31;
  uint64_t v32 = *(void *)(a1 + 48);
  char v33 = *(unsigned char *)(a1 + 56);
  char v34 = *(unsigned char *)(a1 + 57);
  char v35 = *(unsigned char *)(a1 + 58);
  uint64_t v36 = *(void *)(a1 + 64);
  int v37 = *(_DWORD *)(a1 + 72);
  uint64_t v38 = *(void *)(a1 + 96);
  uint64_t v74 = *(void *)(a1 + 40);
  uint64_t v75 = v32;
  char v76 = v33;
  char v77 = v34;
  char v78 = v35;
  uint64_t v79 = v36;
  int v80 = v37;
  long long v81 = *(_OWORD *)(a1 + 80);
  uint64_t v82 = v38;
  State.projectedValue.getter();
  uint64_t v39 = v83;
  uint64_t v40 = v84;
  uint64_t v66 = v83;
  uint64_t v41 = v86;
  uint64_t v60 = v85;
  LODWORD(v59) = v87;
  char v42 = v88;
  LOBYTE(v23) = v89;
  uint64_t v43 = v90;
  int v44 = v91;
  uint64_t v45 = v92;
  uint64_t v46 = v93;
  swift_getKeyPath();
  uint64_t v83 = v39;
  uint64_t v84 = v40;
  uint64_t v85 = v60;
  uint64_t v86 = v41;
  unsigned __int8 v87 = v59;
  char v88 = v42;
  char v89 = v23;
  uint64_t v90 = v43;
  int v91 = v44;
  uint64_t v92 = v45;
  uint64_t v93 = v46;
  Binding.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  char v47 = v67;
  Toggle<>.init(_:isOn:)();
  uint64_t v49 = v70;
  uint64_t v48 = v71;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  uint64_t v51 = v68;
  uint64_t v52 = v73;
  v50(v68, v73, v71);
  uint64_t v53 = v69;
  v50(v69, v47, v48);
  uint64_t v54 = v72;
  v50(v72, v51, v48);
  uint64_t v55 = sub_100054B78(&qword_1005FE888);
  v50(&v54[*(int *)(v55 + 48)], v53, v48);
  uint64_t v56 = *(void (**)(char *, uint64_t))(v49 + 8);
  v56(v47, v48);
  v56(v52, v48);
  v56(v53, v48);
  return ((uint64_t (*)(char *, uint64_t))v56)(v51, v48);
}

uint64_t sub_100293B74()
{
  return Toggle<>.init(_:isOn:)();
}

uint64_t sub_100293D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v81 = sub_100054B78(&qword_1005FE6D8);
  uint64_t v79 = *(void *)(v81 - 8);
  uint64_t v3 = __chkstk_darwin(v81);
  int v80 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v75 = (char *)&v65 - v5;
  long long v69 = (void (*)(char *, char *, uint64_t))sub_100054B78(&qword_1005FE6E0);
  __chkstk_darwin(v69);
  uint64_t v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100054B78(&qword_1005FE6E8);
  uint64_t v77 = *(void *)(v8 - 8);
  uint64_t v78 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  int v12 = (char *)&v65 - v11;
  uint64_t v74 = sub_100054B78(&qword_1005FE6F0);
  uint64_t v76 = *(void *)(v74 - 8);
  uint64_t v13 = __chkstk_darwin(v74);
  uint64_t v73 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v16 = (char *)&v65 - v15;
  uint64_t v17 = sub_100054B78(&qword_1005FE6F8);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v72 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v71 = (uint64_t)&v65 - v20;
  sub_100292960((uint64_t)&v65 - v20);
  uint64_t v85 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v86 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v87 = v21;
  char v88 = v22 & 1;
  uint64_t v91 = v23;
  sub_100054B78(&qword_1005FE700);
  uint64_t v24 = sub_100044244(&qword_1005FE708);
  uint64_t v25 = type metadata accessor for InlinePickerStyle();
  uint64_t v26 = sub_100044200(&qword_1005FE710, &qword_1005FE708);
  v99[0] = v24;
  v99[1] = v25;
  v99[2] = v26;
  v99[3] = &protocol witness table for InlinePickerStyle;
  swift_getOpaqueTypeConformance2();
  int v27 = v16;
  uint64_t v68 = v16;
  Section<>.init(header:content:)();
  uint64_t v84 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v86 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v87 = v28;
  char v88 = v29 & 1;
  uint64_t v91 = v30;
  sub_1002951FC(a1, (uint64_t)v7);
  sub_100054B78(&qword_1005FE718);
  sub_100044200(&qword_1005FE720, &qword_1005FE718);
  sub_1002978B0();
  long long v67 = v12;
  Section<>.init(header:footer:content:)();
  uint64_t v83 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v95 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v96 = v31;
  char v97 = v32 & 1;
  uint64_t v98 = v33;
  uint64_t v34 = *(void *)(a1 + 48);
  char v35 = *(unsigned char *)(a1 + 56);
  char v36 = *(unsigned char *)(a1 + 57);
  char v37 = *(unsigned char *)(a1 + 58);
  uint64_t v38 = *(void *)(a1 + 64);
  int v39 = *(_DWORD *)(a1 + 72);
  uint64_t v40 = *(void *)(a1 + 96);
  uint64_t v86 = *(void *)(a1 + 40);
  uint64_t v87 = v34;
  char v88 = v35;
  char v89 = v36;
  char v90 = v37;
  uint64_t v91 = v38;
  int v92 = v39;
  long long v93 = *(_OWORD *)(a1 + 80);
  uint64_t v94 = v40;
  sub_100054B78(&qword_1005FE6A8);
  State.wrappedValue.getter();
  uint64_t v41 = sub_100296AF0();
  uint64_t v43 = v42;
  sub_100053884((uint64_t)v99);
  uint64_t v86 = v41;
  uint64_t v87 = v43;
  sub_1001AA530();
  uint64_t v86 = Text.init<A>(_:)();
  uint64_t v87 = v44;
  char v88 = v45 & 1;
  uint64_t v91 = v46;
  sub_100054B78(&qword_1005FE758);
  sub_100044200(&qword_1005FE760, &qword_1005FE758);
  char v47 = v75;
  Section<>.init(header:footer:content:)();
  uint64_t v48 = v72;
  sub_100054BBC(v71, v72, &qword_1005FE6F8);
  long long v69 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  uint64_t v50 = v73;
  uint64_t v49 = v74;
  v69(v73, v27, v74);
  uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v66(v82, v12, v78);
  uint64_t v51 = v80;
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  v52(v80, v47, v81);
  uint64_t v53 = v48;
  uint64_t v54 = v70;
  sub_100054BBC(v53, v70, &qword_1005FE6F8);
  uint64_t v55 = (int *)sub_100054B78(&qword_1005FE768);
  v69((char *)(v54 + v55[12]), v50, v49);
  uint64_t v56 = v54 + v55[16];
  uint64_t v57 = v54;
  uint64_t v58 = v78;
  v66((char *)v56, v82, v78);
  uint64_t v59 = v81;
  v52((char *)(v57 + v55[20]), v51, v81);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v79 + 8);
  v60(v75, v59);
  int v61 = *(void (**)(char *, uint64_t))(v77 + 8);
  v61(v67, v58);
  uint64_t v62 = *(void (**)(char *, uint64_t))(v76 + 8);
  uint64_t v63 = v74;
  v62(v68, v74);
  sub_100054B1C(v71, &qword_1005FE6F8);
  v60(v80, v59);
  v61(v82, v58);
  v62(v73, v63);
  return sub_100054B1C(v72, &qword_1005FE6F8);
}

uint64_t sub_100294550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v33 = type metadata accessor for InlinePickerStyle();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v30 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100054B78(&qword_1005FE708);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  char v29 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 57);
  char v8 = *(unsigned char *)(a1 + 58);
  uint64_t v9 = *(void *)(a1 + 64);
  int v10 = *(_DWORD *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v37 = *(void *)(a1 + 40);
  uint64_t v38 = v5;
  LOBYTE(v39) = v6;
  BYTE1(v39) = v7;
  BYTE2(v39) = v8;
  uint64_t v40 = v9;
  int v41 = v10;
  long long v42 = *(_OWORD *)(a1 + 80);
  uint64_t v43 = v11;
  sub_100054B78(&qword_1005FE6A8);
  State.projectedValue.getter();
  uint64_t v12 = v44;
  uint64_t v13 = v45;
  uint64_t v28 = v44;
  uint64_t v14 = v47;
  uint64_t v27 = v46;
  char v15 = v48;
  int v26 = v49;
  int v25 = v50;
  uint64_t v16 = v51;
  int v17 = v52;
  uint64_t v19 = v53;
  uint64_t v18 = v54;
  swift_getKeyPath();
  uint64_t v44 = v12;
  uint64_t v45 = v13;
  uint64_t v46 = v27;
  uint64_t v47 = v14;
  char v48 = v15;
  unsigned __int8 v49 = v26;
  unsigned __int8 v50 = v25;
  uint64_t v51 = v16;
  int v52 = v17;
  uint64_t v53 = v19;
  uint64_t v54 = v18;
  sub_100054B78(&qword_1005FE770);
  Binding.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v36 = a1;
  uint64_t v44 = v37;
  uint64_t v45 = v38;
  uint64_t v46 = v39;
  type metadata accessor for MTPodcastShowType(0);
  swift_retain();
  swift_retain();
  sub_100054B78(&qword_1005FE800);
  sub_100297BE4(&qword_1005FE550, type metadata accessor for MTPodcastShowType);
  sub_100297B78();
  uint64_t v20 = v29;
  Picker.init(selection:label:content:)();
  swift_release();
  swift_release();
  uint64_t v21 = v30;
  InlinePickerStyle.init()();
  sub_100044200(&qword_1005FE710, &qword_1005FE708);
  uint64_t v22 = v31;
  uint64_t v23 = v33;
  View.pickerStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v20, v22);
}

uint64_t sub_100294964()
{
  return ForEach<>.init(_:content:)();
}

uint64_t sub_100294AE0@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100294BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 57);
  char v8 = *(unsigned char *)(a1 + 58);
  uint64_t v9 = *(void *)(a1 + 64);
  unsigned int v10 = *(_DWORD *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)&long long v40 = v4;
  *((void *)&v40 + 1) = v5;
  LOBYTE(v41) = v6;
  BYTE1(v41) = v7;
  BYTE2(v41) = v8;
  *((void *)&v41 + 1) = v9;
  unsigned int v39 = v10;
  LODWORD(v42) = v10;
  uint64_t v37 = v12;
  uint64_t v38 = v11;
  *((void *)&v42 + 1) = v11;
  *(void *)&long long v43 = v12;
  uint64_t v36 = v13;
  *((void *)&v43 + 1) = v13;
  sub_100054B78(&qword_1005FE6A8);
  State.wrappedValue.getter();
  swift_bridgeObjectRelease();
  AppStorage.wrappedValue.getter();
  if (v54 > 2)
  {
    sub_100054B78(&qword_1005FE7E8);
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v33 = v15;
    uint64_t v34 = v14;
    char v32 = v16;
    uint64_t v35 = v17;
    uint64_t v18 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v29 = v19;
    uint64_t v30 = v18;
    char v28 = v20;
    uint64_t v31 = v21;
    uint64_t v50 = v4;
    uint64_t v51 = v5;
    LOBYTE(v52) = v6;
    BYTE1(v52) = v7;
    BYTE2(v52) = v8;
    uint64_t v53 = v9;
    unsigned int v54 = v39;
    uint64_t v55 = v38;
    uint64_t v56 = v37;
    uint64_t v57 = v36;
    State.projectedValue.getter();
    swift_getKeyPath();
    sub_100054B78(&qword_1005FE770);
    Binding.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    int v22 = v52;
    sub_100297790(a1, (uint64_t)&v40);
    uint64_t result = swift_allocObject();
    long long v24 = v47;
    *(_OWORD *)(result + 112) = v46;
    *(_OWORD *)(result + 128) = v24;
    *(_OWORD *)(result + 144) = v48;
    *(void *)(result + 160) = v49;
    long long v25 = v43;
    *(_OWORD *)(result + 48) = v42;
    *(_OWORD *)(result + 64) = v25;
    long long v26 = v45;
    *(_OWORD *)(result + 80) = v44;
    *(_OWORD *)(result + 96) = v26;
    long long v27 = v41;
    *(_OWORD *)(result + 16) = v40;
    *(_OWORD *)(result + 32) = v27;
    *(void *)a2 = v30;
    *(void *)(a2 + 8) = v29;
    *(unsigned char *)(a2 + 16) = v28 & 1;
    *(void *)(a2 + 24) = v31;
    *(void *)(a2 + 32) = v34;
    *(void *)(a2 + 40) = v33;
    *(unsigned char *)(a2 + 48) = v32 & 1;
    *(void *)(a2 + 56) = v35;
    *(void *)(a2 + 64) = v4;
    *(void *)(a2 + 72) = v5;
    *(_DWORD *)(a2 + 80) = v22;
    *(void *)(a2 + 88) = sub_100297B5C;
    *(void *)(a2 + 96) = result;
  }
  return result;
}

uint64_t sub_100294F20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 56);
  char v4 = *(unsigned char *)(a1 + 57);
  char v5 = *(unsigned char *)(a1 + 58);
  uint64_t v6 = *(void *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 96);
  *(void *)&long long v15 = *(void *)(a1 + 40);
  *((void *)&v15 + 1) = v2;
  LOBYTE(v16) = v3;
  BYTE1(v16) = v4;
  BYTE2(v16) = v5;
  *((void *)&v16 + 1) = v6;
  *(_DWORD *)uint64_t v17 = v7;
  *(_OWORD *)&v17[8] = *(_OWORD *)(a1 + 80);
  *(void *)&v17[24] = v8;
  sub_100054B78(&qword_1005FE6A8);
  State.wrappedValue.getter();
  swift_bridgeObjectRelease();
  long long v24 = &off_1005543A0;
  swift_getKeyPath();
  sub_100297790(a1, (uint64_t)&v15);
  uint64_t v9 = swift_allocObject();
  long long v10 = v21;
  *(_OWORD *)(v9 + 112) = v20;
  *(_OWORD *)(v9 + 128) = v10;
  *(_OWORD *)(v9 + 144) = v22;
  *(void *)(v9 + 160) = v23;
  long long v11 = *(_OWORD *)&v17[16];
  *(_OWORD *)(v9 + 48) = *(_OWORD *)v17;
  *(_OWORD *)(v9 + 64) = v11;
  long long v12 = v19;
  *(_OWORD *)(v9 + 80) = v18;
  *(_OWORD *)(v9 + 96) = v12;
  long long v13 = v16;
  *(_OWORD *)(v9 + 16) = v15;
  *(_OWORD *)(v9 + 32) = v13;
  sub_100054B78(&qword_1005FE7F0);
  sub_100044200(&qword_1005FE7F8, &qword_1005FE7F0);
  sub_100297BE4(&qword_1005FE558, type metadata accessor for MTPodcastHidesPlayedEpisodes);
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_1002950E4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  AppStorage.wrappedValue.getter();
  if (v3 == 2 || v3 == 1 || !v3)
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t result = Text.init(_:tableName:bundle:comment:)();
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(void *)(a2 + 24) = v7;
  }
  else
  {
    type metadata accessor for MTPodcastHidesPlayedEpisodes(0);
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1002951FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v42 = type metadata accessor for AccessibilityActionKind();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  unsigned int v39 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78(&qword_1005FE748);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v38 = type metadata accessor for OpenURLAction();
  uint64_t v36 = *(void *)(v38 - 8);
  uint64_t v8 = v36;
  __chkstk_darwin(v38);
  long long v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AttributedString();
  __chkstk_darwin(v11 - 8);
  long long v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100054B78(&qword_1005FE738);
  __chkstk_darwin(v37);
  long long v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 + 48);
  char v17 = *(unsigned char *)(a1 + 56);
  char v18 = *(unsigned char *)(a1 + 57);
  char v19 = *(unsigned char *)(a1 + 58);
  uint64_t v20 = *(void *)(a1 + 64);
  int v21 = *(_DWORD *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 96);
  uint64_t v43 = *(void *)(a1 + 40);
  uint64_t v44 = v16;
  char v45 = v17;
  char v46 = v18;
  char v47 = v19;
  uint64_t v48 = v20;
  int v49 = v21;
  long long v50 = *(_OWORD *)(a1 + 80);
  uint64_t v51 = v22;
  sub_100054B78(&qword_1005FE6A8);
  State.wrappedValue.getter();
  sub_1002955F4((uint64_t)v13);
  sub_100053884((uint64_t)v52);
  uint64_t v23 = Text.init(_:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  OpenURLAction.init(handler:)();
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v32 = v38;
  v31((char *)v7 + *(int *)(v5 + 36), v10, v38);
  uint64_t *v7 = KeyPath;
  sub_100054BBC((uint64_t)v7, (uint64_t)&v15[*(int *)(v37 + 36)], &qword_1005FE748);
  *(void *)long long v15 = v23;
  *((void *)v15 + 1) = v25;
  v15[16] = v29;
  *((void *)v15 + 3) = v27;
  sub_1001ACAB4(v23, v25, v29);
  swift_bridgeObjectRetain();
  sub_100054B1C((uint64_t)v7, &qword_1005FE748);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v32);
  sub_1001ACBD0(v23, v25, v29);
  swift_bridgeObjectRelease();
  uint64_t v33 = v39;
  static AccessibilityActionKind.default.getter();
  sub_10029795C();
  View.accessibilityAction(_:_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v42);
  return sub_100054B1C((uint64_t)v15, &qword_1005FE738);
}

uint64_t sub_1002955F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v1 = type metadata accessor for AttributedString.InterpolationOptions();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v28 = v1;
  uint64_t v29 = v2;
  __chkstk_darwin(v1);
  uint64_t v27 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v5 - 8);
  v21[4] = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString.FormattingOptions();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_100054B78(&qword_1005FE7A0);
  __chkstk_darwin(v8 - 8);
  long long v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for AttributedString();
  uint64_t v25 = *(void *)(v12 - 8);
  uint64_t v26 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v23 = type metadata accessor for Locale();
  uint64_t v15 = *(void *)(v23 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v24 = v15 + 56;
  v22(v10, 1, 1, v23);
  uint64_t v32 = _swiftEmptyArrayStorage;
  long long v21[2] = sub_100297BE4(&qword_1005FE7A8, (void (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions);
  v21[1] = sub_100054B78(&qword_1005FE7B0);
  v21[3] = sub_100044200(&qword_1005FE7B8, &qword_1005FE7B0);
  v21[0] = v7;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  AttributedString.init(localized:options:table:bundle:locale:comment:)();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  URL.init(string:)();
  sub_100297A64();
  AttributedString.subscript.setter();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._uint64_t countAndFlagsBits = 0xD000000000000050;
  v16._object = (void *)0x80000001004DA300;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_100297BE4(&qword_1005FE7C8, (void (*)(uint64_t))&type metadata accessor for AttributedString.InterpolationOptions);
  sub_100054B78(&qword_1005FE7D0);
  sub_100044200(&qword_1005FE7D8, &qword_1005FE7D0);
  char v18 = v27;
  uint64_t v17 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v17);
  v19._uint64_t countAndFlagsBits = 46;
  v19._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  String.LocalizationValue.init(stringInterpolation:)();
  v22(v10, 1, 1, v23);
  uint64_t v32 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  AttributedString.init(localized:options:table:bundle:locale:comment:)();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v14, v26);
}

uint64_t sub_100295BDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.openURL.setter();
}

uint64_t sub_100295CA4()
{
  id v0 = [self sharedApplication];
  [v0 openGlobalSettings];

  return static OpenURLAction.Result.handled.getter();
}

void sub_100295D0C()
{
  id v0 = [self sharedApplication];
  [v0 openGlobalSettings];
}

uint64_t sub_100295D6C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  int v80 = a2;
  uint64_t v88 = type metadata accessor for ShowAutoDownloadPickerLink();
  uint64_t v87 = *(void *)(v88 - 8);
  uint64_t v3 = __chkstk_darwin(v88);
  uint64_t v86 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  char v89 = (char *)&v67 - v5;
  uint64_t v6 = *(void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  char v8 = *(unsigned char *)(a1 + 57);
  LOBYTE(v5) = *(unsigned char *)(a1 + 58);
  uint64_t v9 = *(void *)(a1 + 64);
  int v10 = *(_DWORD *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v103 = *(void *)(a1 + 40);
  uint64_t v104 = v6;
  LOBYTE(v105) = v7;
  BYTE1(v105) = v8;
  BYTE2(v105) = v5;
  uint64_t v106 = v9;
  int v107 = v10;
  long long v108 = *(_OWORD *)(a1 + 80);
  uint64_t v109 = v11;
  uint64_t v85 = sub_100054B78(&qword_1005FE6A8);
  State.projectedValue.getter();
  unint64_t v13 = *((void *)&v90 + 1);
  unint64_t v12 = v90;
  uint64_t v84 = v90;
  uint64_t v14 = *((void *)&v91 + 1);
  uint64_t v83 = v91;
  char v15 = v92;
  char v16 = BYTE1(v92);
  char v17 = BYTE2(v92);
  uint64_t v18 = *((void *)&v92 + 1);
  LODWORD(v82) = v93;
  uint64_t v81 = *((void *)&v93 + 1);
  uint64_t v19 = v94;
  swift_getKeyPath();
  unsigned long long v90 = __PAIR128__(v13, v12);
  *(void *)&long long v91 = v83;
  *((void *)&v91 + 1) = v14;
  LOBYTE(v92) = v15;
  BYTE1(v92) = v16;
  BYTE2(v92) = v17;
  *((void *)&v92 + 1) = v18;
  LODWORD(v93) = v82;
  *((void *)&v93 + 1) = v81;
  *(void *)&long long v94 = v19;
  uint64_t v79 = sub_100054B78(&qword_1005FE770);
  Binding.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v81 = v100;
  uint64_t v78 = v101;
  uint64_t v77 = v102;
  uint64_t v82 = *(void *)(a1 + 136);
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v84 = *(void *)(a1 + 48);
  LOBYTE(v19) = *(unsigned char *)(a1 + 56);
  LODWORD(v83) = *(unsigned __int8 *)(a1 + 57);
  char v21 = *(unsigned char *)(a1 + 58);
  uint64_t v22 = *(void *)(a1 + 64);
  LODWORD(v12) = *(_DWORD *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 80);
  uint64_t v69 = *(void *)(a1 + 88);
  uint64_t v68 = *(void *)(a1 + 96);
  *(void *)&unsigned long long v90 = v20;
  *((void *)&v90 + 1) = v84;
  LOBYTE(v91) = v19;
  BYTE1(v91) = v83;
  BYTE2(v91) = v21;
  *((void *)&v91 + 1) = v22;
  LODWORD(v92) = v12;
  *((void *)&v92 + 1) = v23;
  *(void *)&long long v93 = v69;
  *((void *)&v93 + 1) = v68;
  swift_bridgeObjectRetain();
  State.wrappedValue.getter();
  swift_bridgeObjectRelease();
  ShowAutoDownloadPickerLink.init(autoDownloadOption:openGlobalSettingsBlock:uuid:isSerialShow:)();
  uint64_t v76 = v20;
  *(void *)&unsigned long long v90 = v20;
  *((void *)&v90 + 1) = v84;
  char v24 = v19;
  LOBYTE(v91) = v19;
  BYTE1(v91) = v83;
  char v25 = v21;
  BYTE2(v91) = v21;
  uint64_t v26 = v68;
  uint64_t v27 = v22;
  *((void *)&v91 + 1) = v22;
  LODWORD(v78) = v12;
  LODWORD(v92) = v12;
  uint64_t v77 = v23;
  *((void *)&v92 + 1) = v23;
  uint64_t v28 = v69;
  *(void *)&long long v93 = v69;
  *((void *)&v93 + 1) = v68;
  State.wrappedValue.getter();
  unint64_t v29 = *((void *)&v108 + 1);
  swift_bridgeObjectRelease();
  AppStorage.wrappedValue.getter();
  if (v29 < 2 || v29 == 0xFFFFFFFF)
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v30 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v74 = v30;
    uint64_t v32 = v31;
    uint64_t v73 = v31;
    uint64_t v72 = v33;
    char v35 = v34 & 1;
    int v70 = v34 & 1;
    uint64_t v75 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v82 = v36;
    int v71 = v37;
    uint64_t v81 = v38;
    uint64_t v103 = v76;
    uint64_t v104 = v84;
    LOBYTE(v105) = v24;
    BYTE1(v105) = v83;
    BYTE2(v105) = v25;
    uint64_t v106 = v27;
    int v107 = v78;
    *(void *)&long long v108 = v77;
    *((void *)&v108 + 1) = v28;
    uint64_t v109 = v26;
    sub_1001ACAB4(v30, v32, v35);
    swift_bridgeObjectRetain();
    State.projectedValue.getter();
    unint64_t v40 = *((void *)&v90 + 1);
    unint64_t v39 = v90;
    uint64_t v85 = v90;
    uint64_t v41 = *((void *)&v91 + 1);
    uint64_t v84 = v91;
    LODWORD(v83) = v92;
    char v42 = BYTE1(v92);
    char v43 = BYTE2(v92);
    uint64_t v44 = *((void *)&v92 + 1);
    LODWORD(v32) = v93;
    uint64_t v45 = *((void *)&v93 + 1);
    uint64_t v78 = v94;
    swift_getKeyPath();
    unsigned long long v90 = __PAIR128__(v40, v39);
    *(void *)&long long v91 = v84;
    *((void *)&v91 + 1) = v41;
    LOBYTE(v92) = v83;
    BYTE1(v92) = v42;
    BYTE2(v92) = v43;
    *((void *)&v92 + 1) = v44;
    LODWORD(v93) = v32;
    *((void *)&v93 + 1) = v45;
    *(void *)&long long v94 = v78;
    Binding.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v46 = v103;
    uint64_t v47 = v104;
    uint64_t v85 = v105;
    sub_100297790(a1, (uint64_t)&v90);
    uint64_t v48 = swift_allocObject();
    long long v49 = v97;
    *(_OWORD *)(v48 + 112) = v96;
    *(_OWORD *)(v48 + 128) = v49;
    *(_OWORD *)(v48 + 144) = v98;
    *(void *)(v48 + 160) = v99;
    long long v50 = v93;
    *(_OWORD *)(v48 + 48) = v92;
    *(_OWORD *)(v48 + 64) = v50;
    long long v51 = v95;
    *(_OWORD *)(v48 + 80) = v94;
    *(_OWORD *)(v48 + 96) = v51;
    long long v52 = v91;
    *(_OWORD *)(v48 + 16) = v90;
    *(_OWORD *)(v48 + 32) = v52;
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
    unsigned int v54 = v86;
    uint64_t v55 = v88;
    v53(v86, v89, v88);
    LOBYTE(v90) = v71 & 1;
    char v56 = v70;
    LOBYTE(v103) = v70;
    uint64_t v57 = v80;
    v53(v80, v54, v55);
    uint64_t v58 = &v57[*(int *)(sub_100054B78(&qword_1005FE780) + 48)];
    char v59 = v90;
    LOBYTE(v53) = v103;
    uint64_t v60 = v82;
    *(void *)uint64_t v58 = v75;
    *((void *)v58 + 1) = v60;
    v58[16] = v59;
    uint64_t v61 = v74;
    *((void *)v58 + 3) = v81;
    *((void *)v58 + 4) = v61;
    uint64_t v62 = v73;
    *((void *)v58 + 5) = v73;
    v58[48] = (char)v53;
    *((void *)v58 + 7) = v72;
    *((void *)v58 + 8) = v46;
    uint64_t v63 = v85;
    *((void *)v58 + 9) = v47;
    *((void *)v58 + 10) = v63;
    *((void *)v58 + 11) = sub_100297A08;
    *((void *)v58 + 12) = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001ACAB4(v61, v62, (char)v53);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001ACAB4(v61, v62, v56);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1001ACBD0(v61, v62, v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001ACBD0(v61, v62, v56);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v64 = *(void (**)(char *, uint64_t))(v87 + 8);
    uint64_t v65 = v88;
    v64(v89, v88);
    LOBYTE(v39) = v103;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001ACBD0(v61, v62, v39);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v64)(v86, v65);
  }
  else
  {
    sub_100054B78(&qword_1005FE778);
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  return result;
}

void sub_10029679C()
{
}

void sub_1002967B4(void (*a1)(void))
{
  id v2 = [self sharedApplication];
  a1();
}

uint64_t sub_10029681C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 56);
  char v4 = *(unsigned char *)(a1 + 57);
  char v5 = *(unsigned char *)(a1 + 58);
  uint64_t v6 = *(void *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 96);
  *(void *)&long long v15 = *(void *)(a1 + 40);
  *((void *)&v15 + 1) = v2;
  LOBYTE(v16) = v3;
  BYTE1(v16) = v4;
  BYTE2(v16) = v5;
  *((void *)&v16 + 1) = v6;
  *(_DWORD *)char v17 = v7;
  *(_OWORD *)&v17[8] = *(_OWORD *)(a1 + 80);
  *(void *)&v17[24] = v8;
  sub_100054B78(&qword_1005FE6A8);
  State.wrappedValue.getter();
  swift_bridgeObjectRelease();
  char v24 = &off_1005543D0;
  sub_100297790(a1, (uint64_t)&v15);
  uint64_t v9 = swift_allocObject();
  long long v10 = v21;
  *(_OWORD *)(v9 + 112) = v20;
  *(_OWORD *)(v9 + 128) = v10;
  *(_OWORD *)(v9 + 144) = v22;
  *(void *)(v9 + 160) = v23;
  long long v11 = *(_OWORD *)&v17[16];
  *(_OWORD *)(v9 + 48) = *(_OWORD *)v17;
  *(_OWORD *)(v9 + 64) = v11;
  long long v12 = v19;
  *(_OWORD *)(v9 + 80) = v18;
  *(_OWORD *)(v9 + 96) = v12;
  long long v13 = v16;
  *(_OWORD *)(v9 + 16) = v15;
  *(_OWORD *)(v9 + 32) = v13;
  sub_100054B78(&qword_1005FE788);
  type metadata accessor for MTPodcastDeletePlayed(0);
  sub_100044200(&qword_1005FE790, &qword_1005FE788);
  sub_100297BE4(&qword_1005FE798, type metadata accessor for MTPodcastDeletePlayed);
  return ForEach<>.init(_:content:)();
}

uint64_t sub_1002969D8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *a1;
  AppStorage.wrappedValue.getter();
  if (v3 <= 1 || v3 == 0xFFFFFFFF)
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t result = Text.init(_:tableName:bundle:comment:)();
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(void *)(a2 + 24) = v7;
  }
  else
  {
    type metadata accessor for MTPodcastDeletePlayed(0);
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100296AF0()
{
  if (MTPodcastEpisodeLimit.allowsAutomaticDownloads.getter())
  {
    if ((*(unsigned char *)(v0 + 16) & 1) != 0 && os_feature_enabled_serial_sort_auto_downloads())
    {
      id v1 = [self mainBundle];
      unint64_t v2 = 0xD000000000000025;
      unint64_t v9 = 0xE000000000000000;
      unint64_t v3 = "SERIAL_DOWNLOAD_FOOTER_ON_WITH_DEVICE";
    }
    else
    {
      id v1 = [self mainBundle];
      unint64_t v2 = 0xD00000000000001ELL;
      unint64_t v9 = 0xE000000000000000;
      unint64_t v3 = "DOWNLOAD_FOOTER_ON_WITH_DEVICE";
    }
    unint64_t v4 = (unint64_t)(v3 - 32) | 0x8000000000000000;
  }
  else
  {
    id v1 = [self mainBundle];
    unint64_t v9 = 0xE000000000000000;
    unint64_t v4 = 0x80000001004DA250;
    unint64_t v2 = 0xD000000000000013;
  }
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  uint64_t v6 = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, (NSBundle)v1, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100296C34()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100296C90()
{
  return sub_100297BE4(&qword_1005FE550, type metadata accessor for MTPodcastShowType);
}

uint64_t sub_100296CD8()
{
  return sub_100297BE4(&qword_1005FE558, type metadata accessor for MTPodcastHidesPlayedEpisodes);
}

uint64_t sub_100296D20()
{
  return sub_100297BE4(&qword_1005FE560, type metadata accessor for MTPodcastDeletePlayed);
}

uint64_t sub_100296D68()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ShowSettingsView_Previews.DummyController()
{
  return self;
}

uint64_t sub_100296DCC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100296E00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = MTPodcastEpisodeLimit.intValue.getter();
  uint64_t v5 = *(void *)(v3 + 40);
  char v6 = *(unsigned char *)(v3 + 48);
  *(void *)a1 = *(void *)(v3 + 32);
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 17) = 1;
  *(void *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = 0xFFFFFFFFLL;

  return swift_bridgeObjectRetain();
}

__n128 sub_100296E68@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001C761C(a1);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  return result;
}

uint64_t initializeWithCopy for ShowSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShowSettings(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for ShowSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowSettings(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowSettings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowSettings()
{
  return &type metadata for ShowSettings;
}

uint64_t destroy for ShowSettingsView(uint64_t a1)
{
  sub_10004D2D8(a1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShowSettingsView(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShowSettingsView(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ShowSettingsView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ShowSettingsView(uint64_t a1, uint64_t a2)
{
  sub_10004D2D8(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowSettingsView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowSettingsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowSettingsView()
{
  return &type metadata for ShowSettingsView;
}

uint64_t sub_1002974E4()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL sub_100297500(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) == 0
  }
        && ((*(unsigned __int8 *)(a1 + 17) ^ *(unsigned __int8 *)(a2 + 17)) & 1) == 0
        && ((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0
        && *(void *)(a1 + 24) == *(void *)(a2 + 24)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        && *(void *)(a1 + 48) == *(void *)(a2 + 48);
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) == 0
  }
        && ((*(unsigned __int8 *)(a1 + 17) ^ *(unsigned __int8 *)(a2 + 17)) & 1) == 0
        && ((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0
        && *(void *)(a1 + 24) == *(void *)(a2 + 24)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        && *(void *)(a1 + 48) == *(void *)(a2 + 48);
  return result;
}

uint64_t sub_1002975C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100292300(*(void *)(v1 + 16), a1);
}

unint64_t sub_1002975D0()
{
  unint64_t result = qword_1005FE660;
  if (!qword_1005FE660)
  {
    sub_100044244(&qword_1005FE658);
    sub_10029764C();
    sub_1002976E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE660);
  }
  return result;
}

unint64_t sub_10029764C()
{
  unint64_t result = qword_1005FE668;
  if (!qword_1005FE668)
  {
    sub_100044244(&qword_1005FE670);
    sub_100044200(&qword_1005FE678, &qword_1005FE680);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE668);
  }
  return result;
}

unint64_t sub_1002976E4()
{
  unint64_t result = qword_1005FE688;
  if (!qword_1005FE688)
  {
    sub_100044244(&qword_1005FE690);
    sub_100044200(&qword_1005FE698, &qword_1005FE6A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE688);
  }
  return result;
}

uint64_t sub_100297790(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002977CC(uint64_t a1)
{
  return sub_1002926AC(a1, v1 + 16);
}

unint64_t sub_1002977D4()
{
  unint64_t result = qword_1005FE6B0;
  if (!qword_1005FE6B0)
  {
    sub_100044244(&qword_1005FE648);
    sub_100044200(&qword_1005FE6B8, &qword_1005FE640);
    sub_100044200(&qword_1005FE6C0, &qword_1005FE6C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE6B0);
  }
  return result;
}

uint64_t sub_100297898()
{
  return sub_100293B74();
}

uint64_t sub_1002978A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100294550(*(void *)(v1 + 16), a1);
}

uint64_t sub_1002978A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100294BC8(*(void *)(v1 + 16), a1);
}

unint64_t sub_1002978B0()
{
  unint64_t result = qword_1005FE728;
  if (!qword_1005FE728)
  {
    sub_100044244(&qword_1005FE6E0);
    sub_10029795C();
    sub_100297BE4(&qword_1005FE750, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE728);
  }
  return result;
}

unint64_t sub_10029795C()
{
  unint64_t result = qword_1005FE730;
  if (!qword_1005FE730)
  {
    sub_100044244(&qword_1005FE738);
    sub_100044200(&qword_1005FE740, &qword_1005FE748);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE730);
  }
  return result;
}

uint64_t sub_1002979FC@<X0>(char *a1@<X8>)
{
  return sub_100295D6C(*(void *)(v1 + 16), a1);
}

uint64_t sub_100297A08()
{
  return sub_10029681C(v0 + 16);
}

uint64_t sub_100297A14@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002969D8(a1, a2);
}

uint64_t sub_100297A1C()
{
  return EnvironmentValues.openURL.getter();
}

void sub_100297A44()
{
}

unint64_t sub_100297A64()
{
  unint64_t result = qword_1005FE7C0;
  if (!qword_1005FE7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE7C0);
  }
  return result;
}

void sub_100297AB8()
{
}

uint64_t sub_100297AE0()
{
  return 8;
}

uint64_t sub_100297AEC()
{
  return swift_release();
}

uint64_t sub_100297AF4(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_100297B04()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_100297B4C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100297B5C()
{
  return sub_100294F20(v0 + 16);
}

uint64_t sub_100297B68@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002950E4(a1, a2);
}

uint64_t sub_100297B70()
{
  return sub_100294964();
}

unint64_t sub_100297B78()
{
  unint64_t result = qword_1005FE808;
  if (!qword_1005FE808)
  {
    sub_100044244(&qword_1005FE800);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE808);
  }
  return result;
}

uint64_t sub_100297BE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100297C2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100297C5C@<X0>(char *a1@<X8>)
{
  return sub_100293618(*(void *)(v1 + 16), a1);
}

unint64_t sub_100297C64()
{
  unint64_t result = qword_1005FE850;
  if (!qword_1005FE850)
  {
    sub_100044244(&qword_1005FE838);
    sub_100044200(&qword_1005FE858, &qword_1005FE860);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE850);
  }
  return result;
}

unint64_t sub_100297D10()
{
  unint64_t result = qword_1005FE868;
  if (!qword_1005FE868)
  {
    sub_100044244(&qword_1005FE828);
    sub_100044200(&qword_1005FE848, &qword_1005FE840);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE868);
  }
  return result;
}

uint64_t sub_100297DB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100292D98(*(void *)(v1 + 16), a1);
}

uint64_t sub_100297DBC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100297DEC()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_100297E14()
{
  return swift_deallocObject();
}

unsigned char *sub_100297E24(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_100297E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FE878);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100297EAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100297F58(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_100603370);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v53[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  long long v11 = &v53[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  long long v13 = &v53[-v12];
  static Logger.userActivity.getter();
  id v14 = a1;
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v57 = v6;
  uint64_t v58 = v2;
  uint64_t v56 = v7;
  uint64_t v63 = v8;
  if (v17)
  {
    long long v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    uint64_t v65 = v61;
    *(_DWORD *)long long v18 = 136315138;
    uint64_t v60 = (uint64_t)(v18 + 4);
    id v19 = [v14 activityType];
    long long v20 = v14;
    long long v21 = v11;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    uint64_t v25 = v22;
    long long v11 = v21;
    id v14 = v20;
    uint64_t v64 = sub_10004B974(v25, v24, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v7 = v56;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received request to handle '%s'", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v63;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v55 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v55(v13, v7);
  id v26 = [v14 itemIdentifier];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  id v31 = [v14 containerIdentifier];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v34 = 0;
  }
  [v14 currentTime];
  uint64_t v36 = v35;
  id v37 = [v14 storeTrackID];
  id v38 = v37;
  if (v37)
  {
    id v39 = v37;
    [v39 unsignedLongLongValue];
    uint64_t v59 = AdamID.init(rawValue:)();
  }
  else
  {
    uint64_t v59 = 0;
  }
  static Logger.userActivity.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  uint64_t v61 = v28;
  uint64_t v62 = v11;
  if (v42)
  {
    BOOL v54 = v38 != 0;
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 67109888;
    LODWORD(v65) = v30 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 8) = 1024;
    LODWORD(v65) = v34 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 14) = 2048;
    uint64_t v65 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 24) = 1024;
    LODWORD(v65) = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Activity has episodeGUID: %{BOOL}d, feedURL: '%{BOOL}d, currentTime: %f, storeTrackID: %{BOOL}d", (uint8_t *)v43, 0x1Eu);
    uint64_t v7 = v56;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v45 = (uint64_t)v57;
  uint64_t v44 = v58;
  v55(v62, v7);
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v14;
  uint64_t v47 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v45, 1, 1, v47);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = 0;
  *(void *)(v48 + 24) = 0;
  *(void *)(v48 + 32) = v61;
  *(void *)(v48 + 40) = v30;
  uint64_t v49 = v60;
  *(void *)(v48 + 48) = v44;
  *(void *)(v48 + 56) = v49;
  uint64_t v50 = v59;
  *(void *)(v48 + 64) = v34;
  *(void *)(v48 + 72) = v50;
  *(unsigned char *)(v48 + 80) = v38 == 0;
  *(void *)(v48 + 88) = v36;
  *(void *)(v48 + 96) = sub_10029FA50;
  *(void *)(v48 + 104) = v46;
  id v51 = v14;
  swift_retain();
  sub_10000D90C(v45, (uint64_t)&unk_1005FEA30, v48);
  return swift_release();
}

uint64_t sub_100298554(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_100603370);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10029EEA4(a1, (uint64_t)v13);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  long long v9 = v13[3];
  *(_OWORD *)(v8 + 64) = v13[2];
  *(_OWORD *)(v8 + 80) = v9;
  *(_OWORD *)(v8 + 96) = v13[4];
  *(unsigned char *)(v8 + 112) = v14;
  long long v10 = v13[1];
  *(_OWORD *)(v8 + 32) = v13[0];
  *(_OWORD *)(v8 + 48) = v10;
  *(void *)(v8 + 120) = v1;
  swift_retain();
  sub_10001201C((uint64_t)v6, (uint64_t)&unk_1005FEA70, v8);
  return swift_release();
}

uint64_t sub_10029888C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 184) = a5;
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v5 + 192) = v7;
  *(void *)(v5 + 200) = *(void *)(v7 - 8);
  *(void *)(v5 + 208) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ActionMetricsBehavior();
  *(void *)(v5 + 216) = v8;
  *(void *)(v5 + 224) = *(void *)(v8 - 8);
  *(void *)(v5 + 232) = swift_task_alloc();
  type metadata accessor for ActionMetrics();
  *(void *)(v5 + 240) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FlowDestinationPageHeader();
  *(void *)(v5 + 248) = v9;
  *(void *)(v5 + 256) = *(void *)(v9 - 8);
  *(void *)(v5 + 264) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for FlowPresentationContext();
  *(void *)(v5 + 272) = v10;
  *(void *)(v5 + 280) = *(void *)(v10 - 8);
  *(void *)(v5 + 288) = swift_task_alloc();
  *(void *)(v5 + 296) = swift_task_alloc();
  *(void *)(v5 + 304) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for FlowDestination();
  *(void *)(v5 + 312) = v11;
  *(void *)(v5 + 320) = *(void *)(v11 - 8);
  *(void *)(v5 + 328) = swift_task_alloc();
  *(void *)(v5 + 336) = swift_task_alloc();
  *(void *)(v5 + 344) = swift_task_alloc();
  sub_10029FEB0((long long *)(a4 + 48), v5 + 96);
  sub_10029FEB0((long long *)(v5 + 96), v5 + 56);
  if (*(unsigned char *)(v5 + 88))
  {
    uint64_t v12 = *(void *)(v5 + 64);
    if (*(unsigned char *)(v5 + 88) == 1)
    {
      *(void *)(v5 + 408) = *(void *)(v5 + 56);
      *(void *)(v5 + 416) = v12;
      long long v13 = sub_10029920C;
    }
    else
    {
      *(void *)(v5 + 448) = *(void *)(v5 + 56);
      *(void *)(v5 + 456) = v12;
      long long v13 = sub_10029986C;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v5 + 64);
    *(void *)(v5 + 352) = *(void *)(v5 + 56);
    *(void *)(v5 + 360) = v14;
    *(_OWORD *)(v5 + 368) = *(_OWORD *)(v5 + 72);
    long long v13 = sub_100298B9C;
  }
  return _swift_task_switch(v13, 0, 0);
}

uint64_t sub_100298B9C()
{
  long long v6 = *(_OWORD *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 384) = v3;
  *(_OWORD *)(v3 + 16) = v6;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100298CB0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 136, 0, 0, 0xD000000000000019, 0x80000001004DA760, sub_1002A0FF4, v3, &type metadata for String);
}

uint64_t sub_100298CB0()
{
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100298FC8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100298DCC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100298DCC()
{
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[38];
  uint64_t v4 = v0[34];
  uint64_t v5 = v0[35];
  uint64_t v6 = v0[18];
  *(void *)uint64_t v1 = v0[17];
  *(void *)(v1 + 8) = v6;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 56) = 1;
  (*(void (**)(void))(v2 + 104))();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, enum case for FlowPresentationContext.infer(_:), v4);
  LOBYTE(v5) = static Link.Presentation.textFollowsTintColor.getter();
  unsigned __int8 v7 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  Link.Presentation.init(rawValue:)();
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v5) {
    Link.Presentation.init(rawValue:)();
  }
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v7) {
    Link.Presentation.init(rawValue:)();
  }
  (*(void (**)(void, void, void))(v0[32] + 104))(v0[33], enum case for FlowDestinationPageHeader.standard(_:), v0[31]);
  static ActionMetrics.notInstrumented.getter();
  type metadata accessor for FlowAction();
  swift_allocObject();
  v0[61] = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)();
  type metadata accessor for MainActor();
  v0[62] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100299EB4, v9, v8);
}

uint64_t sub_100298FC8()
{
  swift_task_dealloc();
  static Logger.userActivity.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[22] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to handle spotlight activity %@", v3, 0xCu);
    sub_100054B78((uint64_t *)&unk_1005F9F00);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10029920C()
{
  uint64_t v2 = v0[51];
  uint64_t v1 = v0[52];
  uint64_t v3 = swift_task_alloc();
  v0[53] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[54] = v4;
  uint64_t v5 = type metadata accessor for StationDetail();
  *uint64_t v4 = v0;
  v4[1] = sub_10029930C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 21, 0, 0, 0xD000000000000013, 0x80000001004DA7C0, sub_10029FF18, v3, v5);
}

uint64_t sub_10029930C()
{
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100299628;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100299428;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100299428()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 280);
  **(void **)(v0 + 336) = *(void *)(v0 + 168);
  (*(void (**)(void))(v1 + 104))();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for FlowPresentationContext.infer(_:), v3);
  swift_retain();
  LOBYTE(v4) = static Link.Presentation.textFollowsTintColor.getter();
  unsigned __int8 v5 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  Link.Presentation.init(rawValue:)();
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v4) {
    Link.Presentation.init(rawValue:)();
  }
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v5) {
    Link.Presentation.init(rawValue:)();
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 104))(*(void *)(v0 + 264), enum case for FlowDestinationPageHeader.standard(_:), *(void *)(v0 + 248));
  static ActionMetrics.notInstrumented.getter();
  type metadata accessor for FlowAction();
  swift_allocObject();
  uint64_t v6 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)();
  swift_release();
  *(void *)(v0 + 488) = v6;
  type metadata accessor for MainActor();
  *(void *)(v0 + 496) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100299EB4, v8, v7);
}

uint64_t sub_100299628()
{
  swift_task_dealloc();
  static Logger.userActivity.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[22] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to handle spotlight activity %@", v3, 0xCu);
    sub_100054B78((uint64_t *)&unk_1005F9F00);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10029986C()
{
  uint64_t v2 = v0[56];
  uint64_t v1 = v0[57];
  uint64_t v3 = swift_task_alloc();
  v0[58] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[59] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100299970;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 19, 0, 0, 0x2874736163646F70, 0xED0000293A726F66, sub_10029FEC8, v3, &type metadata for String);
}

uint64_t sub_100299970()
{
  *(void *)(*(void *)v1 + 480) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100299C70;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100299A8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100299A8C()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = (void *)v0[41];
  uint64_t v4 = v0[35];
  uint64_t v3 = v0[36];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[20];
  *uint64_t v1 = v0[19];
  v1[1] = v6;
  (*(void (**)(void))(v2 + 104))();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for FlowPresentationContext.infer(_:), v5);
  LOBYTE(v4) = static Link.Presentation.textFollowsTintColor.getter();
  unsigned __int8 v7 = static Link.Presentation.hasDisclosureIndicatorCompactOnly.getter();
  Link.Presentation.init(rawValue:)();
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v4) {
    Link.Presentation.init(rawValue:)();
  }
  Link.Presentation.init(rawValue:)();
  if (Link.Presentation.init(rawValue:)() != v7) {
    Link.Presentation.init(rawValue:)();
  }
  (*(void (**)(void, void, void))(v0[32] + 104))(v0[33], enum case for FlowDestinationPageHeader.standard(_:), v0[31]);
  static ActionMetrics.notInstrumented.getter();
  type metadata accessor for FlowAction();
  swift_allocObject();
  v0[61] = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)();
  type metadata accessor for MainActor();
  v0[62] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100299EB4, v9, v8);
}

uint64_t sub_100299C70()
{
  swift_task_dealloc();
  static Logger.userActivity.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[22] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to handle spotlight activity %@", v3, 0xCu);
    sub_100054B78((uint64_t *)&unk_1005F9F00);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100299EB4()
{
  uint64_t v1 = v0[61];
  uint64_t v2 = v0[23];
  swift_release();
  sub_100054B78(&qword_100603DD0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10046D010;
  *(void *)(v3 + 56) = type metadata accessor for FlowAction();
  *(void *)(v3 + 64) = sub_10029FED0((unint64_t *)&unk_1005FEA80, (void (*)(uint64_t))&type metadata accessor for FlowAction);
  *(void *)(v3 + 32) = v1;
  swift_retain();
  Link.Presentation.init(rawValue:)();
  static ActionMetrics.notInstrumented.getter();
  uint64_t v4 = type metadata accessor for TabChangeAction();
  swift_allocObject();
  uint64_t v5 = TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)();
  if (*(void *)(v2 + 48))
  {
    uint64_t v7 = v0[28];
    uint64_t v6 = v0[29];
    uint64_t v8 = v0[27];
    swift_getObjectType();
    v0[5] = v4;
    uint64_t v9 = sub_10029FED0((unint64_t *)&unk_100600680, (void (*)(uint64_t))&type metadata accessor for TabChangeAction);
    v0[2] = v5;
    v0[6] = v9;
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for ActionMetricsBehavior.fromAction(_:), v8);
    swift_unknownObjectRetain();
    swift_retain();
    ActionRunner.perform(_:withMetrics:asPartOf:)();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_10004D2D8((uint64_t)(v0 + 2));
  }
  else
  {
    swift_release();
  }
  return _swift_task_switch(sub_10029A124, 0, 0);
}

uint64_t sub_10029A124()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10029A20C(uint64_t a1, uint64_t a2, void *a3)
{
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_10029A2C4;
  _OWORD v5[3] = &unk_10055D190;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [a3 getContinuationStreamsWithCompletionHandler:v4];
  _Block_release(v4);
}

void sub_10029A2C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(a2, a3, a4);
  swift_release();
}

uint64_t sub_10029A36C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 136) = v18;
  *(void *)(v9 + 144) = v19;
  *(double *)(v9 + 128) = a1;
  *(unsigned char *)(v9 + 400) = v17;
  *(void *)(v9 + 112) = a9;
  *(void *)(v9 + 120) = v16;
  *(void *)(v9 + 96) = a7;
  *(void *)(v9 + 104) = a8;
  *(void *)(v9 + 80) = a5;
  *(void *)(v9 + 88) = a6;
  uint64_t v10 = type metadata accessor for PlaybackController.QueueCommand();
  *(void *)(v9 + 152) = v10;
  *(void *)(v9 + 160) = *(void *)(v10 - 8);
  *(void *)(v9 + 168) = swift_task_alloc();
  sub_100054B78((uint64_t *)&unk_100600690);
  *(void *)(v9 + 176) = swift_task_alloc();
  sub_100054B78((uint64_t *)&unk_1005FEA40);
  *(void *)(v9 + 184) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for PlaybackIntent();
  *(void *)(v9 + 192) = v11;
  *(void *)(v9 + 200) = *(void *)(v11 - 8);
  *(void *)(v9 + 208) = swift_task_alloc();
  *(void *)(v9 + 216) = swift_task_alloc();
  *(void *)(v9 + 224) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for MediaIdentifier();
  *(void *)(v9 + 232) = v12;
  *(void *)(v9 + 240) = *(void *)(v12 - 8);
  *(void *)(v9 + 248) = swift_task_alloc();
  *(void *)(v9 + 256) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Logger();
  *(void *)(v9 + 264) = v13;
  *(void *)(v9 + 272) = *(void *)(v13 - 8);
  *(void *)(v9 + 280) = swift_task_alloc();
  *(void *)(v9 + 288) = swift_task_alloc();
  *(void *)(v9 + 296) = swift_task_alloc();
  *(void *)(v9 + 304) = swift_task_alloc();
  sub_100054B78(&qword_1005FEB40);
  *(void *)(v9 + 312) = swift_task_alloc();
  *(void *)(v9 + 320) = swift_task_alloc();
  *(void *)(v9 + 328) = swift_task_alloc();
  return _swift_task_switch(sub_10029A664, 0, 0);
}

uint64_t sub_10029A664()
{
  uint64_t v80 = v0;
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  *(void *)(v0 + 336) = v5;
  *(void *)(v0 + 344) = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 1, 1, v2);
  if (v4)
  {
    long long v76 = *(_OWORD *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = swift_task_alloc();
    *(void *)(v0 + 352) = v8;
    *(_OWORD *)(v8 + 16) = v76;
    *(void *)(v8 + 32) = v7;
    *(void *)(v8 + 40) = v6;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10029AFE4;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000019, 0x80000001004DA760, sub_10029FBC4, v8, &type metadata for String);
  }
  else
  {
    if ((*(unsigned char *)(v0 + 400) & 1) == 0)
    {
      static Logger.userActivity.getter();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Handling activity using adam id.", v12, 2u);
        swift_slowDealloc();
      }
      uint64_t v13 = *(void *)(v0 + 296);
      uint64_t v14 = *(void *)(v0 + 264);
      uint64_t v15 = *(void *)(v0 + 272);
      uint64_t v16 = *(void *)(v0 + 120);

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      sub_100054B78((uint64_t *)&unk_1005F8260);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_10046D010;
      *(void *)(v17 + 32) = v16;
      uint64_t v18 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v0 + 336);
      long long v20 = *(uint64_t **)(v0 + 320);
      uint64_t v19 = *(void *)(v0 + 328);
      uint64_t v21 = *(void *)(v0 + 232);
      uint64_t v22 = *(void *)(v0 + 240);
      sub_100054B1C(v19, &qword_1005FEB40);
      *long long v20 = v17;
      (*(void (**)(uint64_t *, void, uint64_t))(v22 + 104))(v20, enum case for MediaIdentifier.episodes(_:), v21);
      v18(v20, 0, 1, v21);
      sub_100053820((uint64_t)v20, v19, &qword_1005FEB40);
    }
    uint64_t v23 = *(void *)(v0 + 312);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 240);
    sub_100054BBC(*(void *)(v0 + 328), v23, &qword_1005FEB40);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
    {
      sub_100054B1C(*(void *)(v0 + 312), &qword_1005FEB40);
      static Logger.userActivity.getter();
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Episode not found in activity", v28, 2u);
        swift_slowDealloc();
      }

      uint64_t v29 = *(void *)(v0 + 328);
      (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 264));
      sub_100054B1C(v29, &qword_1005FEB40);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
      return v30();
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 248);
      uint64_t v32 = *(void *)(v0 + 256);
      uint64_t v34 = *(void *)(v0 + 232);
      uint64_t v33 = *(void *)(v0 + 240);
      os_log_t log = *(os_log_t *)(v0 + 224);
      uint64_t v74 = *(void *)(v0 + 216);
      uint64_t v77 = *(void *)(v0 + 200);
      uint64_t v35 = *(void *)(v0 + 184);
      uint64_t v72 = *(void *)(v0 + 192);
      uint64_t v36 = *(void *)(v0 + 176);
      uint64_t v37 = *(void *)(v0 + 128);
      (*(void (**)(uint64_t, void, uint64_t))(v33 + 32))(v32, *(void *)(v0 + 312), v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v31, v32, v34);
      uint64_t v38 = type metadata accessor for EpisodeListSettings();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v35, 1, 1, v38);
      uint64_t v39 = type metadata accessor for PodcastsMediaLibrary.MediaItem();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v36, 1, 1, v39);
      sub_100054B78(&qword_1005FEA50);
      uint64_t v40 = type metadata accessor for PlaybackIntent.Option();
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v42 = *(void *)(v41 + 72);
      unint64_t v43 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_10046D030;
      uint64_t v45 = (void *)(v44 + v43);
      *uint64_t v45 = v37;
      uint64_t v46 = *(void (**)(void *, void, uint64_t))(v41 + 104);
      v46(v45, enum case for PlaybackIntent.Option.initialItemPlayheadOverride(_:), v40);
      v46((void *)((char *)v45 + v42), enum case for PlaybackIntent.Option.startPlayback(_:), v40);
      sub_100172B6C(v44);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      PlaybackIntent.init(id:listSettings:initialItem:options:)();
      static Logger.userActivity.getter();
      uint64_t v47 = *(void (**)(uint64_t, os_log_t, uint64_t))(v77 + 16);
      v47(v74, log, v72);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      BOOL v50 = os_log_type_enabled(v48, v49);
      uint64_t v52 = *(void *)(v0 + 272);
      uint64_t v51 = *(void *)(v0 + 280);
      uint64_t v53 = *(void *)(v0 + 264);
      BOOL v54 = *(NSObject **)(v0 + 216);
      if (v50)
      {
        loga = v48;
        uint64_t v56 = *(void *)(v0 + 200);
        uint64_t v55 = *(void *)(v0 + 208);
        uint64_t v75 = v47;
        uint64_t v57 = *(void *)(v0 + 192);
        uint64_t v73 = *(void *)(v0 + 280);
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        uint64_t v79 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 136380675;
        v75(v55, v54, v57);
        uint64_t v59 = String.init<A>(describing:)();
        *(void *)(v0 + 72) = sub_10004B974(v59, v60, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v61 = *(void (**)(NSObject *, uint64_t))(v56 + 8);
        uint64_t v62 = v57;
        uint64_t v47 = v75;
        v61(v54, v62);
        _os_log_impl((void *)&_mh_execute_header, loga, v49, "Performing intent from playback continuity %{private}s", v58, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v73, v53);
      }
      else
      {
        uint64_t v61 = *(void (**)(NSObject *, uint64_t))(*(void *)(v0 + 200) + 8);
        v61(*(NSObject **)(v0 + 216), *(void *)(v0 + 192));

        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
      }
      *(void *)(v0 + 376) = v61;
      uint64_t v64 = *(void *)(v0 + 160);
      uint64_t v63 = *(void *)(v0 + 168);
      uint64_t v65 = *(void *)(v0 + 152);
      v47(v63, *(os_log_t *)(v0 + 224), *(void *)(v0 + 192));
      (*(void (**)(uint64_t, void, uint64_t))(v64 + 104))(v63, enum case for PlaybackController.QueueCommand.replace(_:), v65);
      *(void *)(v0 + 40) = v65;
      *(void *)(v0 + 48) = &protocol witness table for PlaybackController.QueueCommand;
      uint64_t v66 = sub_10004A244((uint64_t *)(v0 + 16));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v64 + 16))(v66, v63, v65);
      uint64_t v78 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
          + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
      uint64_t v67 = (void *)swift_task_alloc();
      *(void *)(v0 + 384) = v67;
      *uint64_t v67 = v0;
      v67[1] = sub_10029C1B8;
      v68.n128_u64[0] = 5.0;
      return ((uint64_t (*)(uint64_t, void, __n128))v78)(v0 + 16, 0, v68);
    }
  }
}

uint64_t sub_10029AFE4()
{
  *(void *)(*(void *)v1 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10029B94C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10029B100;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10029B100()
{
  int v70 = v0;
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  static Logger.userActivity.getter();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Handling activity using guid/feedURL.", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[38];
  uint64_t v7 = v0[33];
  uint64_t v8 = v0[34];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  sub_100054B78((uint64_t *)&unk_1005F83F0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10046D010;
  *(void *)(v9 + 32) = v1;
  *(void *)(v9 + 40) = v2;
  uint64_t v10 = (void (*)(uint64_t *, void, uint64_t, uint64_t))v0[42];
  uint64_t v12 = (uint64_t *)v0[40];
  uint64_t v11 = v0[41];
  uint64_t v13 = v0[29];
  uint64_t v14 = v0[30];
  sub_100054B1C(v11, &qword_1005FEB40);
  uint64_t *v12 = v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))(v12, enum case for MediaIdentifier.localEpisodes(_:), v13);
  v10(v12, 0, 1, v13);
  sub_100053820((uint64_t)v12, v11, &qword_1005FEB40);
  uint64_t v15 = v0[39];
  uint64_t v16 = v0[29];
  uint64_t v17 = v0[30];
  sub_100054BBC(v0[41], v15, &qword_1005FEB40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100054B1C(v0[39], &qword_1005FEB40);
    static Logger.userActivity.getter();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      long long v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Episode not found in activity", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v21 = v0[41];
    (*(void (**)(void, void))(v0[34] + 8))(v0[36], v0[33]);
    sub_100054B1C(v21, &qword_1005FEB40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  else
  {
    uint64_t v24 = v0[31];
    uint64_t v25 = v0[32];
    uint64_t v27 = v0[29];
    uint64_t v26 = v0[30];
    uint64_t v62 = v0[28];
    uint64_t v65 = v0[27];
    uint64_t v67 = v0[25];
    uint64_t v28 = v0[23];
    uint64_t v63 = v0[24];
    uint64_t v29 = v0[22];
    uint64_t v30 = v0[16];
    (*(void (**)(uint64_t, void, uint64_t))(v26 + 32))(v25, v0[39], v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v25, v27);
    uint64_t v31 = type metadata accessor for EpisodeListSettings();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v28, 1, 1, v31);
    uint64_t v32 = type metadata accessor for PodcastsMediaLibrary.MediaItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v29, 1, 1, v32);
    sub_100054B78(&qword_1005FEA50);
    uint64_t v33 = type metadata accessor for PlaybackIntent.Option();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(void *)(v34 + 72);
    unint64_t v36 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_10046D030;
    uint64_t v38 = (void *)(v37 + v36);
    *uint64_t v38 = v30;
    uint64_t v39 = *(void (**)(void *, void, uint64_t))(v34 + 104);
    v39(v38, enum case for PlaybackIntent.Option.initialItemPlayheadOverride(_:), v33);
    v39((void *)((char *)v38 + v35), enum case for PlaybackIntent.Option.startPlayback(_:), v33);
    sub_100172B6C(v37);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    PlaybackIntent.init(id:listSettings:initialItem:options:)();
    static Logger.userActivity.getter();
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16);
    v40(v65, v62, v63);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v45 = v0[34];
    uint64_t v44 = v0[35];
    uint64_t v46 = v0[33];
    uint64_t v47 = v0[27];
    if (v43)
    {
      uint64_t v66 = v40;
      uint64_t v49 = v0[25];
      uint64_t v48 = v0[26];
      uint64_t v50 = v0[24];
      uint64_t v64 = v0[35];
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136380675;
      v66(v48, v47, v50);
      uint64_t v52 = String.init<A>(describing:)();
      v0[9] = sub_10004B974(v52, v53, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      BOOL v54 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      uint64_t v55 = v50;
      uint64_t v40 = v66;
      v54(v47, v55);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Performing intent from playback continuity %{private}s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v64, v46);
    }
    else
    {
      BOOL v54 = *(void (**)(uint64_t, uint64_t))(v0[25] + 8);
      v54(v0[27], v0[24]);

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    }
    v0[47] = v54;
    uint64_t v57 = v0[20];
    uint64_t v56 = v0[21];
    uint64_t v58 = v0[19];
    v40(v56, v0[28], v0[24]);
    (*(void (**)(uint64_t, void, uint64_t))(v57 + 104))(v56, enum case for PlaybackController.QueueCommand.replace(_:), v58);
    v0[5] = v58;
    v0[6] = &protocol witness table for PlaybackController.QueueCommand;
    uint64_t v59 = sub_10004A244(v0 + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v57 + 16))(v59, v56, v58);
    __n128 v68 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
        + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
    unint64_t v60 = (void *)swift_task_alloc();
    v0[48] = v60;
    *unint64_t v60 = v0;
    v60[1] = sub_10029C1B8;
    v61.n128_u64[0] = 5.0;
    return ((uint64_t (*)(void *, void, __n128))v68)(v0 + 2, 0, v61);
  }
}

uint64_t sub_10029B94C()
{
  uint64_t v69 = v0;
  swift_errorRelease();
  swift_task_dealloc();
  if ((*(unsigned char *)(v0 + 400) & 1) == 0)
  {
    static Logger.userActivity.getter();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Handling activity using adam id.", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void *)(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 264);
    uint64_t v6 = *(void *)(v0 + 272);
    uint64_t v7 = *(void *)(v0 + 120);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    sub_100054B78((uint64_t *)&unk_1005F8260);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_10046D010;
    *(void *)(v8 + 32) = v7;
    uint64_t v9 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v0 + 336);
    uint64_t v11 = *(uint64_t **)(v0 + 320);
    uint64_t v10 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v13 = *(void *)(v0 + 240);
    sub_100054B1C(v10, &qword_1005FEB40);
    *uint64_t v11 = v8;
    (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))(v11, enum case for MediaIdentifier.episodes(_:), v12);
    v9(v11, 0, 1, v12);
    sub_100053820((uint64_t)v11, v10, &qword_1005FEB40);
  }
  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v15 = *(void *)(v0 + 232);
  uint64_t v16 = *(void *)(v0 + 240);
  sub_100054BBC(*(void *)(v0 + 328), v14, &qword_1005FEB40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100054B1C(*(void *)(v0 + 312), &qword_1005FEB40);
    static Logger.userActivity.getter();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Episode not found in activity", v19, 2u);
      swift_slowDealloc();
    }

    uint64_t v20 = *(void *)(v0 + 328);
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 264));
    sub_100054B1C(v20, &qword_1005FEB40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 248);
    uint64_t v24 = *(void *)(v0 + 256);
    uint64_t v26 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 240);
    uint64_t v61 = *(void *)(v0 + 224);
    uint64_t v64 = *(void *)(v0 + 216);
    uint64_t v66 = *(void *)(v0 + 200);
    uint64_t v27 = *(void *)(v0 + 184);
    uint64_t v62 = *(void *)(v0 + 192);
    uint64_t v28 = *(void *)(v0 + 176);
    uint64_t v29 = *(void *)(v0 + 128);
    (*(void (**)(uint64_t, void, uint64_t))(v25 + 32))(v24, *(void *)(v0 + 312), v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v24, v26);
    uint64_t v30 = type metadata accessor for EpisodeListSettings();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v27, 1, 1, v30);
    uint64_t v31 = type metadata accessor for PodcastsMediaLibrary.MediaItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v28, 1, 1, v31);
    sub_100054B78(&qword_1005FEA50);
    uint64_t v32 = type metadata accessor for PlaybackIntent.Option();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(void *)(v33 + 72);
    unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_10046D030;
    uint64_t v37 = (void *)(v36 + v35);
    *uint64_t v37 = v29;
    uint64_t v38 = *(void (**)(void *, void, uint64_t))(v33 + 104);
    v38(v37, enum case for PlaybackIntent.Option.initialItemPlayheadOverride(_:), v32);
    v38((void *)((char *)v37 + v34), enum case for PlaybackIntent.Option.startPlayback(_:), v32);
    sub_100172B6C(v36);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    PlaybackIntent.init(id:listSettings:initialItem:options:)();
    static Logger.userActivity.getter();
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
    v39(v64, v61, v62);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    BOOL v42 = os_log_type_enabled(v40, v41);
    uint64_t v44 = *(void *)(v0 + 272);
    uint64_t v43 = *(void *)(v0 + 280);
    uint64_t v45 = *(void *)(v0 + 264);
    uint64_t v46 = *(void *)(v0 + 216);
    if (v42)
    {
      uint64_t v65 = v39;
      uint64_t v48 = *(void *)(v0 + 200);
      uint64_t v47 = *(void *)(v0 + 208);
      uint64_t v49 = *(void *)(v0 + 192);
      uint64_t v63 = *(void *)(v0 + 280);
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136380675;
      v65(v47, v46, v49);
      uint64_t v51 = String.init<A>(describing:)();
      *(void *)(v0 + 72) = sub_10004B974(v51, v52, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      uint64_t v54 = v49;
      uint64_t v39 = v65;
      v53(v46, v54);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Performing intent from playback continuity %{private}s", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v63, v45);
    }
    else
    {
      unint64_t v53 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 200) + 8);
      v53(*(void *)(v0 + 216), *(void *)(v0 + 192));

      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    }
    *(void *)(v0 + 376) = v53;
    uint64_t v56 = *(void *)(v0 + 160);
    uint64_t v55 = *(void *)(v0 + 168);
    uint64_t v57 = *(void *)(v0 + 152);
    v39(v55, *(void *)(v0 + 224), *(void *)(v0 + 192));
    (*(void (**)(uint64_t, void, uint64_t))(v56 + 104))(v55, enum case for PlaybackController.QueueCommand.replace(_:), v57);
    *(void *)(v0 + 40) = v57;
    *(void *)(v0 + 48) = &protocol witness table for PlaybackController.QueueCommand;
    uint64_t v58 = sub_10004A244((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v56 + 16))(v58, v55, v57);
    uint64_t v67 = (char *)&async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:)
        + async function pointer to dispatch thunk of PlaybackController.performWhenAvailable(_:options:timeout:);
    uint64_t v59 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v59;
    *uint64_t v59 = v0;
    v59[1] = sub_10029C1B8;
    v60.n128_u64[0] = 5.0;
    return ((uint64_t (*)(uint64_t, void, __n128))v67)(v0 + 16, 0, v60);
  }
}

uint64_t sub_10029C1B8(void *a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 392) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10029C4A4;
  }
  else
  {

    sub_10004D2D8(v4 + 16);
    uint64_t v5 = sub_10029C2E8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10029C2E8()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 152);
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), void))(v0 + 136))(sub_10029C64C, 0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  uint64_t v7 = *(void *)(v0 + 328);
  (*(void (**)(void, void))(*(void *)(v0 + 240) + 8))(*(void *)(v0 + 256), *(void *)(v0 + 232));
  sub_100054B1C(v7, &qword_1005FEB40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10029C4A4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[47];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[28];
  uint64_t v7 = v0[24];
  (*(void (**)(void))(v0[20] + 8))();
  v1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_100054B1C(v2, &qword_1005FEB40);
  sub_10004D2D8((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10029C64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_errorRetain();
    static Logger.userActivity.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      v15[0] = v4;
      uint64_t v12 = (uint8_t *)v11;
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      swift_errorRetain();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      v15[1] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v13 = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received error when opening NSUserActivity stream: %@", v12, 0xCu);
      sub_100054B78((uint64_t *)&unk_1005F9F00);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v15[0];
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_10029C878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[27] = a4;
  v5[28] = a5;
  uint64_t v6 = type metadata accessor for Logger();
  v5[29] = v6;
  v5[30] = *(void *)(v6 - 8);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  v5[33] = type metadata accessor for MainActor();
  v5[34] = static MainActor.shared.getter();
  return _swift_task_switch(sub_10029C960, 0, 0);
}

uint64_t sub_10029C960()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = swift_task_alloc();
  v0[35] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[36] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10029CA5C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000012, 0x80000001004DA740, sub_10029DFA8, v2, &type metadata for EpisodeUserActivityData);
}

uint64_t sub_10029CA5C()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10029CE84;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10029CB78;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10029CB78()
{
  long long v1 = v0[9];
  v0[3] = v0[8];
  v0[4] = v1;
  v0[5] = v0[10];
  long long v2 = v0[7];
  v0[1] = v0[6];
  v0[2] = v2;
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10029CC08, v4, v3);
}

uint64_t sub_10029CC08()
{
  uint64_t v1 = v0[27];
  swift_release();
  id v2 = sub_10029D1BC();
  sub_10029EC44((uint64_t)(v0 + 2));
  [v2 setDelegate:*(void *)(v1 + 40)];
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v2;
  id v4 = v2;

  if (dispatch thunk of PlaybackController.isPlaying.getter())
  {
    uint64_t v5 = (void *)v0[28];
    static Logger.userActivity.getter();
    id v6 = v5;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    os_log_type_t v10 = (void *)v0[28];
    if (v9)
    {
      os_log_type_t type = v8;
      uint64_t v11 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 141558275;
      v0[25] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2113;
      v0[26] = v10;
      id v22 = v4;
      id v12 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v10;

      id v4 = v22;
      _os_log_impl((void *)&_mh_execute_header, v7, type, "Marking activity for %{private,mask.hash}@ as current", (uint8_t *)v11, 0x16u);
      sub_100054B78((uint64_t *)&unk_1005F9F00);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v7 = v0[28];
    }
    uint64_t v13 = v0[32];
    uint64_t v15 = v0[29];
    uint64_t v14 = v0[30];

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    uint64_t v16 = *(void **)(v1 + 32);
    if (v16)
    {
      id v17 = v16;
      [v17 becomeCurrent];

      id v4 = v17;
    }
  }

  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10029CE84()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10029CF08, v1, v0);
}

uint64_t sub_10029CF08()
{
  uint64_t v1 = v0[27];
  swift_release();
  id v2 = *(void **)(v1 + 32);
  if (v2)
  {
    [v2 invalidate];
    uint64_t v3 = *(void **)(v1 + 32);
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = (void *)v0[28];
  *(void *)(v1 + 32) = 0;

  static Logger.userActivity.getter();
  id v5 = v4;
  swift_errorRetain();
  id v6 = v5;
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  os_log_type_t v10 = (void *)v0[28];
  if (v9)
  {
    os_log_t log = v7;
    uint64_t v11 = swift_slowAlloc();
    id v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    v0[22] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2113;
    v0[23] = v10;
    id v13 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v10;

    *(_WORD *)(v11 + 22) = 2112;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[24] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[1] = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Unable to create activity for episode: %{private,mask.hash}@, error: %@", (uint8_t *)v11, 0x20u);
    sub_100054B78((uint64_t *)&unk_1005F9F00);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

id sub_10029D1BC()
{
  id v1 = objc_allocWithZone((Class)NSUserActivity);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithActivityType:v2];

  sub_100053820(v0 + 48, (uint64_t)v15, &qword_1005F93A0);
  sub_100053820((uint64_t)v15, (uint64_t)v17, &qword_1005F93A0);
  if (v17[1]) {
    NSString v4 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v4 = 0;
  }
  [v3 setTitle:v4];

  sub_100053820((uint64_t)v15, (uint64_t)v16, &qword_1005F93A0);
  if (v16[1]) {
    NSString v5 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v5 = 0;
  }
  [v3 setItemTitle:v5];

  sub_100053820(v0 + 64, (uint64_t)v14, &qword_1005F93A0);
  sub_100053820((uint64_t)v14, (uint64_t)v18, &qword_1005F93A0);
  if (v18[1]) {
    NSString v6 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v6 = 0;
  }
  [v3 setContainerTitle:v6];

  sub_100053820(v0, (uint64_t)v13, &qword_1005F93A0);
  sub_100053820((uint64_t)v13, (uint64_t)v19, &qword_1005F93A0);
  if (v19[1]) {
    NSString v7 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v7 = 0;
  }
  [v3 setItemIdentifier:v7];

  sub_100053820(v0 + 16, (uint64_t)v12, &qword_1005F93A0);
  sub_100053820((uint64_t)v12, (uint64_t)v20, &qword_1005F93A0);
  if (v20[1]) {
    NSString v8 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v8 = 0;
  }
  [v3 setContainerIdentifier:v8];

  sub_100053820(v0 + 32, (uint64_t)v11, &qword_1005FCD70);
  sub_100053820((uint64_t)v11, (uint64_t)&v21, &qword_1005FCD70);
  if (v22) {
    id v9 = 0;
  }
  else {
    id v9 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v21];
  }
  [v3 setStoreTrackID:v9];

  [v3 setSupportsContinuationStreams:1];
  return v3;
}

void sub_10029D478(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FEA18);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  id v7 = [self sharedInstance];
  id v8 = [v7 playbackContext];

  uint64_t v9 = MPModelObject.uuid.getter();
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = v8;
    *((void *)v14 + 3) = v11;
    *((void *)v14 + 4) = v12;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v14[v13], (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    aBlock[4] = sub_10029F7E4;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003B424;
    void aBlock[3] = &unk_10055D0C8;
    uint64_t v15 = _Block_copy(aBlock);
    id v16 = v8;
    swift_release();
    [v16 performBlock:v15];

    _Block_release(v15);
  }
  else
  {
    sub_10029F6BC(a2, (uint64_t)aBlock);
    CheckedContinuation.resume(returning:)();
  }
}

void sub_10029D6B4(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 episodeForUuid:v2];

  if (v3)
  {
    id v4 = v3;
    sub_10029F858(v4, (uint64_t)v6);
    sub_100054B78(&qword_1005FEA18);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    sub_10029F804();
    swift_allocError();
    *uint64_t v5 = 0;
    sub_100054B78(&qword_1005FEA18);
    CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_10029D78C()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10029D948(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = PlaybackController.currentTime.getter();
    char v9 = v8;
    uint64_t result = swift_release();
    if ((v9 & 1) == 0)
    {
      [a1 setCurrentTime:*(double *)&v7];
      static Logger.userActivity.getter();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 134217984;
        v13[1] = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Current playback time updated on activity before handoff: %f", v12, 0xCu);
        swift_slowDealloc();
      }

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10029DB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_10029DB88, 0, 0);
}

uint64_t sub_10029DB88()
{
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 32) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10029DC3C;
  }
  else
  {
    __break(1u);
  }
  return PlaybackController.pause()();
}

uint64_t sub_10029DC3C()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v2 = sub_1002A0FFC;
  }
  else
  {
    uint64_t v2 = sub_10029DD74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10029DD74()
{
  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 48) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10029DE5C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaybackContinuityActivityDelegate();
  [super dealloc];
}

uint64_t sub_10029DEA0()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10029DEE8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000B8F0;
  return sub_10029C878(a1, v4, v5, v7, v6);
}

void sub_10029DFA8(uint64_t a1)
{
  sub_10029D478(a1, *(void **)(v1 + 16));
}

void sub_10029DFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a4;
  uint64_t v9 = sub_100054B78((uint64_t *)&unk_1005FEA58);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  id v12 = [self sharedInstance];
  id v13 = [v12 privateQueueContext];

  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = (char *)swift_allocObject();
  *((void *)v15 + 2) = a2;
  *((void *)v15 + 3) = a3;
  *((void *)v15 + 4) = v19;
  *((void *)v15 + 5) = a5;
  *((void *)v15 + 6) = v13;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_10029FCB0;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055D168;
  id v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = v13;
  swift_release();
  [v17 performBlock:v16];
  _Block_release(v16);
}

void sub_10029E1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    uint64_t v6 = self;
    NSString v7 = String._bridgeToObjectiveC()();
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v6 predicateForEpisodeGuid:v7 onFeedURL:v8];
  }
  else
  {
    uint64_t v10 = self;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v10 predicateForEpisodeGuid:v8];
  }

  id v11 = [a5 objectsInEntity:kMTEpisodeEntityName predicate:v9 sortDescriptors:0];
  if (!v11) {
    goto LABEL_20;
  }
  id v12 = v11;
  sub_10004D29C(0, (unint64_t *)&qword_1005F7130);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_7;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    self;
    id v16 = (void *)swift_dynamicCastObjCClass();
    if (v16)
    {
      id v17 = [v16 uuid];
      if (v17)
      {
        uint64_t v18 = v17;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100054B78((uint64_t *)&unk_1005FEA58);
        CheckedContinuation.resume(returning:)();

LABEL_17:
        return;
      }
    }

LABEL_16:
    sub_10029F804();
    swift_allocError();
    *uint64_t v20 = 0;
    sub_100054B78((uint64_t *)&unk_1005FEA58);
    CheckedContinuation.resume(throwing:)();
    goto LABEL_17;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v14 = *(id *)(v13 + 32);
    goto LABEL_10;
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

void sub_10029E470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100054B78((uint64_t *)&unk_1005FEA90);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = [self sharedInstance];
  id v10 = [v9 privateQueueContext];

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  id v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = a3;
  *((void *)v12 + 4) = v10;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_10029FFF8;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055D208;
  unint64_t v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v14 = v10;
  swift_release();
  [v14 performBlock:v13];
  _Block_release(v13);
}

void sub_10029E684(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = self;
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 predicateForVisiblePlaylistWithUUID:v5];

  id v7 = [a3 objectsInEntity:kMTPlaylistEntityName predicate:v6 sortDescriptors:0];
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v8 = v7;
  sub_10004D29C(0, (unint64_t *)&qword_1005F7130);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
    id v11 = v10;
    swift_bridgeObjectRelease();
    self;
    uint64_t v12 = swift_dynamicCastObjCClass();
    if (v12)
    {
      unint64_t v13 = (void *)v12;
      type metadata accessor for StationDetail();
      id v11 = v11;
      sub_10004BE90(v13, 0, 0, 0);
      if (v14)
      {
        swift_retain();
        sub_100054B78((uint64_t *)&unk_1005FEA90);
        CheckedContinuation.resume(returning:)();
        swift_release();

LABEL_14:
        return;
      }
    }

LABEL_13:
    sub_10029F804();
    swift_allocError();
    *id v16 = 1;
    sub_100054B78((uint64_t *)&unk_1005FEA90);
    CheckedContinuation.resume(throwing:)();
    goto LABEL_14;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v10 = *(id *)(v9 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_17:
  __break(1u);
}

void sub_10029E8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100054B78((uint64_t *)&unk_1005FEA58);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = [self sharedInstance];
  id v10 = [v9 privateQueueContext];

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = v10;
  *((void *)v12 + 3) = a2;
  *((void *)v12 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1002A00F4;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055D258;
  unint64_t v13 = _Block_copy(aBlock);
  id v14 = v10;
  swift_bridgeObjectRetain();
  swift_release();
  [v14 performBlock:v13];
  _Block_release(v13);
}

void sub_10029EADC(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 podcastForFeedUrl:v2];

  if (v3)
  {
    id v4 = [v3 uuid];
    if (v4)
    {
      NSString v5 = v4;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100054B78((uint64_t *)&unk_1005FEA58);
      CheckedContinuation.resume(returning:)();

      return;
    }
  }
  sub_10029F804();
  swift_allocError();
  unsigned char *v6 = 2;
  sub_100054B78((uint64_t *)&unk_1005FEA58);
  CheckedContinuation.resume(throwing:)();
}

BOOL sub_10029EBE8(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  uint64_t v8[2] = a1[2];
  void v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  long long v9[2] = a2[2];
  uint64_t v9[3] = v5;
  void v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_10029EC9C((uint64_t)v8, (uint64_t)v9);
}

uint64_t sub_10029EC44(uint64_t a1)
{
  return a1;
}

BOOL sub_10029EC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *(void *)a1 == *(void *)a2 && v4 == v5;
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a2 + 24);
    if (v9)
    {
      if (!v10) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v9 != v10)
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v11 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v10)
    {
      return 0;
    }
    char v12 = *(unsigned char *)(a2 + 40);
    if (*(unsigned char *)(a1 + 40))
    {
      if (!*(unsigned char *)(a2 + 40)) {
        return 0;
      }
    }
    else
    {
      if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
        char v12 = 1;
      }
      if (v12) {
        return 0;
      }
    }
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(a2 + 56);
    if (v13)
    {
      if (!v14) {
        return 0;
      }
      if (*(void *)(a1 + 48) != *(void *)(a2 + 48) || v13 != v14)
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v15 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v14)
    {
      return 0;
    }
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a2 + 72);
    if (v16) {
      return v17
    }
          && (*(void *)(a1 + 64) == *(void *)(a2 + 64) && v16 == v17
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
    return !v17;
  }
  return result;
}

unint64_t sub_10029EDF4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  BOOL result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    BOOL result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t sub_10029EEA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 userInfo];
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v38 + 1) = v7;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v6 + 16) && (unint64_t v8 = sub_100226C5C((uint64_t)v36), (v9 & 1) != 0))
    {
      sub_10004D328(*(void *)(v6 + 56) + 32 * v8, (uint64_t)&v38);
    }
    else
    {
      long long v38 = 0u;
      long long v39 = 0u;
    }
    sub_100172F18((uint64_t)v36);
    swift_bridgeObjectRelease();
    if (*((void *)&v39 + 1))
    {
      sub_10004D384(&v38, &v40);
      goto LABEL_17;
    }
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
  }
  id v10 = [a1 userInfo];
  if (v10)
  {
    char v11 = v10;
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v12 + 16) && (unint64_t v13 = sub_100226C5C((uint64_t)v36), (v14 & 1) != 0))
    {
      sub_10004D328(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v40);
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }
    sub_100172F18((uint64_t)v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  sub_100054B1C((uint64_t)&v38, &qword_1005F5D30);
LABEL_17:
  sub_100054BBC((uint64_t)&v40, (uint64_t)v36, &qword_1005F5D30);
  if (!v37)
  {
    sub_100054B1C((uint64_t)v36, &qword_1005F5D30);
    goto LABEL_25;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_25:
    char v28 = 0;
LABEL_26:
    sub_1002A018C();
    swift_allocError();
    *uint64_t v29 = v28;
    swift_willThrow();

    return sub_100054B1C((uint64_t)&v40, &qword_1005F5D30);
  }
  long long v15 = v38;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1003920E0(v15, *((unint64_t *)&v15 + 1));
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  unint64_t v20 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005544A8, v19);
  swift_bridgeObjectRelease();
  if (v20 >= 3)
  {
    swift_bridgeObjectRelease();
    char v28 = 1;
    goto LABEL_26;
  }
  unint64_t v42 = v20;
  unint64_t v35 = v20 & 7;
  swift_bridgeObjectRetain();
  sub_10029EDF4(1uLL, v15, *((unint64_t *)&v15 + 1));
  swift_bridgeObjectRelease();
  uint64_t v34 = static String._fromSubstring(_:)();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v23 = [a1 containerIdentifier];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;
  }
  else
  {

    uint64_t v25 = 0;
    uint64_t v27 = 0;
  }
  uint64_t result = sub_100054B1C((uint64_t)&v40, &qword_1005F5D30);
  char v31 = v42;
  if (v35)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v32 = v25;
    uint64_t v33 = v27;
  }
  *(_OWORD *)a2 = v15;
  *(void *)(a2 + 16) = v34;
  *(void *)(a2 + 24) = v22;
  *(void *)(a2 + 32) = v25;
  *(void *)(a2 + 40) = v27;
  *(void *)(a2 + 48) = v34;
  *(void *)(a2 + 56) = v22;
  *(void *)(a2 + 64) = v32;
  *(void *)(a2 + 72) = v33;
  *(unsigned char *)(a2 + 80) = v31;
  return result;
}

uint64_t sub_10029F298(void *a1)
{
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  char v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v11 = (char *)v30 - v10;
  id v12 = [a1 userInfo];
  if (!v12)
  {
    long long v32 = 0u;
    long long v33 = 0u;
LABEL_12:
    char v28 = &qword_1005F5D30;
    uint64_t v29 = (char *)&v32;
LABEL_13:
    sub_100054B1C((uint64_t)v29, v28);
    return 0;
  }
  unint64_t v13 = v12;
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v30[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  void v30[2] = v15;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v14 + 16) && (unint64_t v16 = sub_100226C5C((uint64_t)&v31), (v17 & 1) != 0))
  {
    sub_10004D328(*(void *)(v14 + 56) + 32 * v16, (uint64_t)&v32);
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  sub_100172F18((uint64_t)&v31);
  swift_bridgeObjectRelease();
  if (!*((void *)&v33 + 1)) {
    goto LABEL_12;
  }
  if (swift_dynamicCast())
  {
    uint64_t v18 = self;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v20 = [v18 searchUrlForSearchText:v19];

    if (v20)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v21(v4, v9, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v21(v11, v4, v5);
        id v22 = [self sharedApplication];
        URL._bridgeToObjectiveC()(v23);
        uint64_t v25 = v24;
        sub_10016E9B0((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for OpenExternalURLOptionsKey(0);
        sub_10029FED0(&qword_1005F66F0, type metadata accessor for OpenExternalURLOptionsKey);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v22 openURL:v25 options:isa completionHandler:0];

        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        return 1;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    }
    char v28 = (uint64_t *)&unk_1005F7750;
    uint64_t v29 = v4;
    goto LABEL_13;
  }
  return 0;
}

double sub_10029F6BC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MPModelObject.adamID.getter();
  char v6 = v5;
  id v7 = [a1 title];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  id v12 = [a1 podcast];
  unint64_t v13 = v12;
  if (!v12)
  {

LABEL_9:
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  id v14 = [v12 title];

  if (!v14)
  {

    unint64_t v13 = 0;
    goto LABEL_9;
  }
  unint64_t v13 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

LABEL_10:
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 40) = v6 & 1;
  *(void *)(a2 + 48) = v9;
  *(void *)(a2 + 56) = v11;
  *(void *)(a2 + 64) = v13;
  *(void *)(a2 + 72) = v16;
  return result;
}

uint64_t sub_10029F7D8()
{
  return sub_1002A0024(&qword_1005FEA18);
}

uint64_t sub_10029F7E4()
{
  return sub_1002A0114(&qword_1005FEA18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))sub_10029D6B4);
}

unint64_t sub_10029F804()
{
  unint64_t result = qword_1005FEA20;
  if (!qword_1005FEA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005FEA20);
  }
  return result;
}

void sub_10029F858(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 guid];
  if (v4)
  {
    char v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v7;
    uint64_t v27 = v6;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v27 = 0;
  }
  id v8 = [a1 podcast:v25, v27];
  if (v8 && (uint64_t v9 = v8, v10 = [v8 feedURL], v9, v10))
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  [a1 storeTrackId];
  uint64_t v14 = AdamID.init(rawValue:)();
  id v15 = [a1 title];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  id v20 = [a1 podcast];
  uint64_t v21 = v20;
  if (v20)
  {
    id v22 = [v20 title];

    if (v22)
    {
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v24;
    }
    else
    {

      uint64_t v23 = 0;
      uint64_t v21 = 0;
    }
  }
  else
  {

    uint64_t v23 = 0;
  }
  *(void *)a2 = v28;
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v14;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v23;
  *(void *)(a2 + 72) = v21;
}

uint64_t sub_10029FA18()
{
  return swift_deallocObject();
}

void sub_10029FA50(uint64_t a1, uint64_t a2)
{
  sub_10029A20C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10029FA58()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10029FAB0(uint64_t a1)
{
  uint64_t v12 = *((void *)v1 + 3);
  uint64_t v13 = *((void *)v1 + 2);
  uint64_t v4 = *((void *)v1 + 5);
  uint64_t v11 = *((void *)v1 + 4);
  uint64_t v5 = *((void *)v1 + 6);
  uint64_t v6 = *((void *)v1 + 7);
  uint64_t v7 = *((void *)v1 + 8);
  double v8 = v1[11];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000B8F0;
  return sub_10029A36C(v8, a1, v13, v12, v11, v4, v5, v6, v7);
}

void sub_10029FBC4(uint64_t a1)
{
  sub_10029DFB0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10029FBD0()
{
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_1005FEA58);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_10029FCB0()
{
  sub_100054B78((uint64_t *)&unk_1005FEA58);
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = (void *)v0[6];

  sub_10029E1DC(v1, v2, v3, v4, v5);
}

uint64_t sub_10029FD20()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10029FD88(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10029FD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 >= 2)
  {
    if (a5) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10029FDEC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = v1[15];
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10005B794;
  return sub_10029888C(a1, v4, v5, v6, v7);
}

uint64_t sub_10029FEB0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_10029FEC8(uint64_t a1)
{
  sub_10029E8C8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10029FED0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10029FF18(uint64_t a1)
{
  sub_10029E470(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10029FF20()
{
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_1005FEA90);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10029FFF8()
{
  return sub_1002A0114((uint64_t *)&unk_1005FEA90, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))sub_10029E684);
}

uint64_t sub_1002A0018()
{
  return sub_1002A0024((uint64_t *)&unk_1005FEA58);
}

uint64_t sub_1002A0024(uint64_t *a1)
{
  uint64_t v2 = sub_100054B78(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);

  return swift_deallocObject();
}

uint64_t sub_1002A00F4()
{
  return sub_1002A0114((uint64_t *)&unk_1005FEA58, (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))sub_10029EADC);
}

uint64_t sub_1002A0114(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v3 = *(void *)(sub_100054B78(a1) - 8);
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = (char *)v2 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5, v6, v7);
}

unint64_t sub_1002A018C()
{
  unint64_t result = qword_1005FEAA0;
  if (!qword_1005FEAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005FEAA0);
  }
  return result;
}

id sub_1002A01E0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_100603370);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.userActivity.getter();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received request to pause playback (receiver has confirmed handoff)", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
  id v15 = (void *)swift_allocObject();
  void v15[2] = 0;
  void v15[3] = 0;
  v15[4] = v2;
  id v16 = v2;
  sub_10038E470((uint64_t)v6, (uint64_t)&unk_1005FEAB0, (uint64_t)v15);
  swift_release();
  return [a1 close];
}

uint64_t sub_1002A040C()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002A044C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  _OWORD v5[2] = a1;
  _OWORD v5[3] = v4;
  v5[1] = sub_10005B794;
  return _swift_task_switch(sub_10029DB88, 0, 0);
}

unsigned char *storeEnumTagSinglePayload for CoreSpotlightItemIdentifier.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A05C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreSpotlightItemIdentifier.Error()
{
  return &type metadata for CoreSpotlightItemIdentifier.Error;
}

uint64_t sub_1002A0600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 >= 2)
  {
    if (a5) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1)
{
  return sub_10029FD88(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1002A0600(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1002A0600(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_10029FD88(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_10029FD88(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreSpotlightItemIdentifier.IdentifierType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreSpotlightItemIdentifier.IdentifierType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1002A0824(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1002A082C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CoreSpotlightItemIdentifier.IdentifierType()
{
  return &type metadata for CoreSpotlightItemIdentifier.IdentifierType;
}

unsigned char *storeEnumTagSinglePayload for UserActivityController.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A0910);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserActivityController.Error()
{
  return &type metadata for UserActivityController.Error;
}

uint64_t destroy for EpisodeUserActivityData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EpisodeUserActivityData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EpisodeUserActivityData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for EpisodeUserActivityData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for EpisodeUserActivityData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EpisodeUserActivityData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EpisodeUserActivityData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EpisodeUserActivityData()
{
  return &type metadata for EpisodeUserActivityData;
}

unint64_t sub_1002A0C38()
{
  unint64_t result = qword_1005FEAB8;
  if (!qword_1005FEAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FEAB8);
  }
  return result;
}

unint64_t sub_1002A0C90()
{
  unint64_t result = qword_1005FEAC0;
  if (!qword_1005FEAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FEAC0);
  }
  return result;
}

uint64_t destroy for CoreSpotlightItemIdentifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 80);

  return sub_10029FD88(v2, v3, v4, v5, v6);
}

uint64_t initializeWithCopy for CoreSpotlightItemIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1002A0600(v6, v7, v8, v9, v10);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = v10;
  return a1;
}

uint64_t assignWithCopy for CoreSpotlightItemIdentifier(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v2[4];
  *(void *)(a1 + 40) = v2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[6];
  uint64_t v5 = v2[7];
  uint64_t v6 = v2[8];
  uint64_t v7 = v2[9];
  LOBYTE(v2) = *((unsigned char *)v2 + 80);
  sub_1002A0600(v4, v5, v6, v7, v2);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(a1 + 80) = (_BYTE)v2;
  sub_10029FD88(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for CoreSpotlightItemIdentifier(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CoreSpotlightItemIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  char v7 = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  long long v12 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v12;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(a1 + 80) = v7;
  sub_10029FD88(v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreSpotlightItemIdentifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreSpotlightItemIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreSpotlightItemIdentifier()
{
  return &type metadata for CoreSpotlightItemIdentifier;
}

uint64_t LegacyEnqueueEpisodeForPlaybackIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2)
{
  char v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005FEAD8 + dword_1005FEAD8);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1002A10BC;
  return v7(a1, a2);
}

uint64_t sub_1002A10BC(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(v4 + 8);
    return v7(a1 & 1);
  }
}

void sub_1002A11EC(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8 = sub_100054B78((uint64_t *)&unk_1005FEB30);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v13 = (v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v12, v11, v8);
  *(void *)(v14 + v13) = a3;
  *(_DWORD *)(v14 + ((v13 + 11) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = sub_1002A5410;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002A1A44;
  void aBlock[3] = &unk_10055D648;
  id v15 = _Block_copy(aBlock);
  swift_release();
  [a2 resolveActivePlayerPathWithCompletion:v15];
  _Block_release(v15);
}

void sub_1002A13C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v23 = a5;
  uint64_t v22 = a4;
  uint64_t v8 = sub_100054B78((uint64_t *)&unk_1005FEB30);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    id v15 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8);
    unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v17 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    aBlock[4] = sub_1002A5560;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002A19F0;
    void aBlock[3] = &unk_10055D698;
    uint64_t v18 = _Block_copy(aBlock);
    swift_release();
    MRMediaRemoteInsertSystemAppPlaybackQueueForPlayer();
    _Block_release(v18);
  }
  else
  {
    uint64_t v19 = type metadata accessor for RemoteQueueOperationError();
    sub_1002A5688(&qword_1005FEB18, (void (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError);
    uint64_t v20 = swift_allocError();
    void *v21 = a2;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for RemoteQueueOperationError.pathResolutionError(_:), v19);
    aBlock[0] = v20;
    swift_errorRetain();
    CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_1002A1724(int a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.playback.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      v18[1] = a2;
      uint64_t v11 = (uint8_t *)v10;
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      v18[0] = v11 + 4;
      LODWORD(v19) = a1;
      type metadata accessor for MRMediaRemoteError(0);
      uint64_t v12 = String.init<A>(describing:)();
      uint64_t v19 = sub_10004B974(v12, v13, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to resolve active player path with error: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v14 = type metadata accessor for RemoteQueueOperationError();
    sub_1002A5688(&qword_1005FEB18, (void (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError);
    uint64_t v15 = swift_allocError();
    *unint64_t v16 = a1;
    (*(void (**)(_DWORD *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, enum case for RemoteQueueOperationError.mediaRemoteError(_:), v14);
    uint64_t v20 = v15;
    sub_100054B78((uint64_t *)&unk_1005FEB30);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100054B78((uint64_t *)&unk_1005FEB30);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1002A19F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_1002A1A44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1002A1AC0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a2;
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    sub_1001BA838(0, v4, 0);
    id v6 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        sub_1001BA838(v10 > 1, v9 + 1, 1);
      }
      v6 += 2;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v11 = &_swiftEmptyArrayStorage[3 * v9];
      v11[4] = v7;
      v11[5] = v8;
      *((unsigned char *)v11 + 48) = 2;
      --v4;
    }
    while (v4);
    uint64_t v2 = v21;
    uint64_t v3 = a2;
  }
  uint64_t v12 = NSManagedObjectContext.episodes(for:sortDescriptors:limit:)();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v14 = v12;
  swift_bridgeObjectRelease();
  if (!(v14 >> 62))
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = _swiftEmptyArrayStorage;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v15) {
    goto LABEL_20;
  }
LABEL_11:
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v15 & 0x8000000000000000) == 0)
  {
    sub_10004D29C(0, (unint64_t *)&qword_1005FD2C0);
    if ((v14 & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = v16 + 1;
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        IMPlayerItem.init(episode:)();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v16 = v17;
      }
      while (v15 != v17);
    }
    else
    {
      uint64_t v18 = (void **)(v14 + 32);
      do
      {
        uint64_t v19 = *v18++;
        id v20 = v19;
        IMPlayerItem.init(episode:)();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v15;
      }
      while (v15);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002A1D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005FEAD8 + dword_1005FEAD8);
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  void *v6 = v3;
  v6[1] = sub_1002A1E0C;
  return v8(a2, a3);
}

uint64_t sub_1002A1E0C(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(unsigned char **)(v4 + 16) = a1 & 1;
  }
  id v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_1002A1F20()
{
  uint64_t v0 = type metadata accessor for PlaybackController.QueueCommand.Location();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (id *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  EnqueueEpisodeForPlaybackIntent.location.getter();
  int v4 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v3, v0);
  if (v4 == enum case for PlaybackController.QueueCommand.Location.before(_:)
    || v4 == enum case for PlaybackController.QueueCommand.Location.after(_:))
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v3, v0);

    uint64_t v5 = type metadata accessor for RemoteQueueOperationError();
    sub_1002A5688(&qword_1005FEB18, (void (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for RemoteQueueOperationError.unsupportedQueuePosition(_:), v5);
    return swift_willThrow();
  }
  else if (v4 == enum case for PlaybackController.QueueCommand.Location.queueHead(_:))
  {
    return 0;
  }
  else
  {
    if (v4 != enum case for PlaybackController.QueueCommand.Location.queueTail(_:)) {
      (*(void (**)(id *, uint64_t))(v1 + 8))(v3, v0);
    }
    return 1;
  }
}

uint64_t sub_1002A212C(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  uint64_t v3 = type metadata accessor for EpisodeOffer();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  uint64_t EpisodeOffersIntent = type metadata accessor for FetchEpisodeOffersIntent();
  v2[14] = EpisodeOffersIntent;
  v2[15] = *(void *)(EpisodeOffersIntent - 8);
  v2[16] = swift_task_alloc();
  uint64_t v5 = sub_100054B78((uint64_t *)&unk_1005FEB60);
  uint64_t v6 = (void *)swift_task_alloc();
  v2[17] = v6;
  void *v6 = v2;
  v6[1] = sub_1002A22AC;
  return BaseObjectGraph.inject<A>(_:)(v2 + 7, v5, v5);
}

uint64_t sub_1002A22AC()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002A2AF8;
  }
  else {
    uint64_t v2 = sub_1002A23C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A23C0()
{
  v0[19] = v0[7];
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_100609320);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[20] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002A2488;
  return BaseObjectGraph.inject<A>(_:)(v0 + 2, v1, v1);
}

uint64_t sub_1002A2488()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002A2B68;
  }
  else {
    uint64_t v2 = sub_1002A259C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A259C()
{
  if ([*(id *)(v0 + 152) isReachable])
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    sub_100041A98((void *)(v0 + 16), v1);
    swift_bridgeObjectRetain();
    FetchEpisodeOffersIntent.init(adamIDs:)();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v3;
    uint64_t v4 = sub_1002A5688(&qword_100601800, (void (*)(uint64_t))&type metadata accessor for FetchEpisodeOffersIntent);
    *uint64_t v3 = v0;
    v3[1] = sub_1002A27E4;
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 80);
    return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 64, v5, v7, v6, v4, v1, v2);
  }
  else
  {
    uint64_t v8 = type metadata accessor for PlaybackController.PlayerError();
    sub_1002A5688((unint64_t *)&unk_1005FEB70, (void (*)(uint64_t))&type metadata accessor for PlaybackController.PlayerError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for PlaybackController.PlayerError.noInternet(_:), v8);
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_10004D2D8(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_1002A27E4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[14]);
  if (v0) {
    uint64_t v3 = sub_1002A2BE0;
  }
  else {
    uint64_t v3 = sub_1002A294C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002A294C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[12];
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v8 = *(void *)(v4 + 56);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v9 = v0[13];
      uint64_t v10 = v0[11];
      v5(v9, v7, v10);
      id v11 = sub_1002C5634();
      (*(void (**)(uint64_t, uint64_t))(v4 - 8))(v9, v10);
      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += v8;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_10004D2D8((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void *))v0[1];
  return v12(_swiftEmptyArrayStorage);
}

uint64_t sub_1002A2AF8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A2B68()
{
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A2BE0()
{
  swift_unknownObjectRelease();
  sub_10004D2D8(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A2C64(uint64_t a1)
{
  v1[4] = a1;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TaskPriority();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005FEBE0);
  uint64_t v5 = (void *)swift_task_alloc();
  v1[11] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1002A2DE4;
  return BaseObjectGraph.inject<A>(_:)(v1 + 2, v4, v4);
}

uint64_t sub_1002A2DE4()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002A34A0;
  }
  else {
    uint64_t v2 = sub_1002A2EF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A2EF8()
{
  v0[13] = v0[2];
  uint64_t ObjectType = swift_getObjectType();
  static Task<>.currentPriority.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[14] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002A2FC0;
  uint64_t v3 = v0[10];
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v3, ObjectType);
}

uint64_t sub_1002A2FC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 72);
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 120) = a1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_1002A313C, 0, 0);
}

uint64_t sub_1002A313C()
{
  uint64_t v1 = (void *)v0[15];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = swift_allocObject();
  v0[16] = v6;
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v5;
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v4);
  id v7 = v1;
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[17] = v8;
  uint64_t v9 = sub_100054B78(&qword_1005F7F10);
  void *v8 = v0;
  v8[1] = sub_1002A3280;
  uint64_t v10 = v0[7];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 3, v10, sub_1002A5710, v6, v9);
}

uint64_t sub_1002A3280()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_1002A3510;
  }
  else {
    uint64_t v5 = sub_1002A3414;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002A3414()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1002A34A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A3510()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A3588(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  sub_100054B78(&qword_1005FEB40);
  v2[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MediaIdentifier();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_1002A3688, 0, 0);
}

uint64_t sub_1002A3688()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  EnqueueEpisodeForPlaybackIntent.episodeID.getter();
  MediaIdentifier.init(episodeID:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_1002A55D4(v0[10]);
    sub_1002A5634();
    swift_allocError();
    swift_willThrow();
    goto LABEL_5;
  }
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[12];
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 32))(v5, v0[10], v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v5, v6);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v4, v6);
  if (v8 == enum case for MediaIdentifier.podcast(_:))
  {
LABEL_4:
    uint64_t v9 = v0[14];
    uint64_t v10 = v0[11];
    uint64_t v11 = v0[12];
    uint64_t v12 = type metadata accessor for RemoteQueueOperationError();
    sub_1002A5688(&qword_1005FEB18, (void (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for RemoteQueueOperationError.podcastsNotSupported(_:), v12);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    goto LABEL_5;
  }
  int v16 = v8;
  if (v8 == enum case for MediaIdentifier.episodes(_:))
  {
    uint64_t v17 = (uint64_t *)v0[13];
    (*(void (**)(uint64_t *, void))(v0[12] + 96))(v17, v0[11]);
    uint64_t v18 = *v17;
    v0[15] = v18;
    uint64_t v19 = (void *)swift_task_alloc();
    v0[16] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1002A3C64;
    uint64_t v20 = v0[9];
    return sub_1002A212C(v18, v20);
  }
  else
  {
    if (v8 != enum case for MediaIdentifier.localEpisodes(_:))
    {
      if (v8 != enum case for MediaIdentifier.localPodcast(_:))
      {
        if (v8 == enum case for MediaIdentifier.station(_:))
        {
          uint64_t v24 = v0[14];
          uint64_t v25 = v0[11];
          uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0[12] + 8);
          v26(v0[13], v25);
          uint64_t v27 = type metadata accessor for RemoteQueueOperationError();
          sub_1002A5688(&qword_1005FEB18, (void (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError);
          swift_allocError();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104))(v28, enum case for RemoteQueueOperationError.stationsNotSupported(_:), v27);
          swift_willThrow();
          v26(v24, v25);
        }
        else
        {
          uint64_t v29 = v0[12];
          int v30 = enum case for MediaIdentifier.library(_:);
          uint64_t v31 = type metadata accessor for RemoteQueueOperationError();
          sub_1002A5688(&qword_1005FEB18, (void (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError);
          swift_allocError();
          long long v33 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104);
          uint64_t v34 = (void (**)(uint64_t, uint64_t))(v29 + 8);
          uint64_t v35 = v0[14];
          if (v16 == v30)
          {
            uint64_t v36 = v0[11];
            v33(v32, enum case for RemoteQueueOperationError.libraryNotSupported(_:), v31);
            swift_willThrow();
            (*v34)(v35, v36);
          }
          else
          {
            uint64_t v37 = v0[13];
            uint64_t v38 = v0[11];
            v33(v32, enum case for RemoteQueueOperationError.unknownRequest(_:), v31);
            swift_willThrow();
            long long v39 = *v34;
            (*v34)(v35, v38);
            v39(v37, v38);
          }
        }
LABEL_5:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v14 = (uint64_t (*)(void))v0[1];
        return v14();
      }
      (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
      goto LABEL_4;
    }
    uint64_t v21 = (uint64_t *)v0[13];
    (*(void (**)(uint64_t *, void))(v0[12] + 96))(v21, v0[11]);
    uint64_t v22 = *v21;
    v0[18] = v22;
    int v23 = (void *)swift_task_alloc();
    v0[19] = v23;
    *int v23 = v0;
    v23[1] = sub_1002A3ED8;
    return sub_1002A2C64(v22);
  }
}

uint64_t sub_1002A3C64(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v3[17] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_1002A3E40;
  }
  else {
    uint64_t v4 = sub_1002A3D9C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002A3D9C()
{
  uint64_t v1 = v0[3];
  (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_1002A3E40()
{
  (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002A3ED8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  v3[20] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_1002A40B4;
  }
  else {
    uint64_t v4 = sub_1002A4010;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002A4010()
{
  uint64_t v1 = v0[6];
  (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_1002A40B4()
{
  (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002A414C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a4;
  *(_DWORD *)(v4 + 64) = a3;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_1002A4174, 0, 0);
}

uint64_t sub_1002A4174()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v3 = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for PlaybackController.FairPlayKeyServerError();
    sub_1002A5688(&qword_1005FEB28, (void (*)(uint64_t))&type metadata accessor for PlaybackController.FairPlayKeyServerError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v11, enum case for PlaybackController.FairPlayKeyServerError.notEntitled(_:), v10);
    swift_willThrow();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = *(void *)(v0 + 16);
  if (!v2) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v4 = 0;
  unint64_t v5 = v1 & 0xC000000000000001;
  uint64_t v6 = v3 + 32;
  while (1)
  {
    if (v5) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v6 + 8 * v4);
    }
    unint64_t v1 = (unint64_t)v7;
    uint64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    unsigned __int8 v9 = [v7 isEntitled];

    if (v9) {
      break;
    }
    ++v4;
    if (v8 == v2) {
      goto LABEL_10;
    }
  }
  __int32 v14 = *(_DWORD *)(v0 + 64);
  int8x16_t v17 = *(int8x16_t *)(v0 + 24);
  swift_bridgeObjectRelease();
  uint64_t v15 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 40) = v15;
  v15[1] = vextq_s8(v17, v17, 8uLL);
  v15[2].i32[0] = v14;
  int v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v16;
  *int v16 = v0;
  v16[1] = sub_1002A4430;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v16, 0, 0, 0xD000000000000022, 0x80000001004DA810, sub_1002A535C, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_1002A4430()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002A4564;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1002A454C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A454C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A4564()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A45C8(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = sub_10004D29C(0, &qword_1005F7028);
  uint64_t v4 = (void *)swift_task_alloc();
  v2[6] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1002A4698;
  return BaseObjectGraph.inject<A>(_:)(v2 + 2, v3, v3);
}

uint64_t sub_1002A4698()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002A515C;
  }
  else {
    uint64_t v2 = sub_1002A47AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A47AC()
{
  v0[8] = v0[2];
  uint64_t v1 = sub_10004D29C(0, &qword_1005FEB00);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002A4880;
  return BaseObjectGraph.inject<A>(_:)(v0 + 3, v1, v1);
}

uint64_t sub_1002A4880()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002A5174;
  }
  else {
    uint64_t v2 = sub_1002A4994;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A4994()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void **)(v0 + 24);
  *(void *)(v0 + 88) = v2;
  *(_DWORD *)(v0 + 144) = sub_1002A1F20();
  if (v1)
  {
    uint64_t v3 = *(void **)(v0 + 64);

    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v6;
    void *v6 = v0;
    v6[1] = sub_1002A4A8C;
    uint64_t v8 = *(void *)(v0 + 32);
    uint64_t v7 = *(void *)(v0 + 40);
    return sub_1002A3588(v8, v7);
  }
}

uint64_t sub_1002A4A8C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1002A4EF0;
  }
  else {
    uint64_t v4 = sub_1002A4BA0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002A4BA0()
{
  unint64_t v1 = *(void *)(v0 + 104);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      goto LABEL_16;
    }
  }
  uint64_t v3 = type metadata accessor for RestrictionsController();
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(v0 + 104) + 32;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v7 + 8 * v6);
    }
    uint64_t v9 = v8;
    if (((static RestrictionsController.isExplicitContentAllowed.getter() & 1) != 0
       || ([v9 isExplicit] & 1) == 0)
      && ([v9 isEntitled] & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    ++v6;
  }
  while (v2 != v6);
LABEL_16:
  uint64_t v10 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 120) = _swiftEmptyArrayStorage;
  sub_10004D29C(0, (unint64_t *)&qword_1005FD2C0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v12 = [v10 playbackQueueWithAccountInfoForPlayerItems:isa];

  if (v12)
  {
    uint64_t v13 = swift_task_alloc();
    *(void *)(v0 + 128) = v13;
    *(void *)uint64_t v13 = v0;
    *(void *)(v13 + 8) = sub_1002A4F5C;
    int v14 = *(_DWORD *)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 64);
    *(void *)(v13 + 24) = v12;
    *(void *)(v13 + 32) = v15;
    *(_DWORD *)(v13 + 64) = v14;
    *(void *)(v13 + 16) = _swiftEmptyArrayStorage;
    uint64_t v3 = (uint64_t)sub_1002A4174;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  int v16 = *(void **)(v0 + 88);
  int8x16_t v17 = *(void **)(v0 + 64);
  swift_release();
  uint64_t v18 = type metadata accessor for RemoteQueueOperationError();
  sub_1002A5688(&qword_1005FEB18, (void (*)(uint64_t))&type metadata accessor for RemoteQueueOperationError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, enum case for RemoteQueueOperationError.unableToIdentifyQueue(_:), v18);
  swift_willThrow();

  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_1002A4EF0()
{
  unint64_t v1 = *(void **)(v0 + 64);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002A4F5C()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002A50E8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1002A5078;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A5078()
{
  uint64_t v1 = *(void **)(v0 + 64);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1002A50E8()
{
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = (void *)v0[8];
  swift_release();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002A515C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A5174()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_1002A51DC()
{
  unint64_t result = qword_1005FEAE0;
  if (!qword_1005FEAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FEAE0);
  }
  return result;
}

uint64_t sub_1002A5230()
{
  return sub_1002A5688(qword_1005FEAE8, (void (*)(uint64_t))&type metadata accessor for EnqueueEpisodeForPlaybackIntent);
}

ValueMetadata *type metadata accessor for LegacyEnqueueEpisodeForPlaybackIntentImplementation()
{
  return &type metadata for LegacyEnqueueEpisodeForPlaybackIntentImplementation;
}

unsigned char *storeEnumTagSinglePayload for LegacyEnqueueEpisodeForPlaybackIntentImplementation.EnqueueEpisodeError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002A5324);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyEnqueueEpisodeForPlaybackIntentImplementation.EnqueueEpisodeError()
{
  return &type metadata for LegacyEnqueueEpisodeForPlaybackIntentImplementation.EnqueueEpisodeError;
}

void sub_1002A535C(uint64_t a1)
{
  sub_1002A11EC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(_DWORD *)(v1 + 32));
}

uint64_t sub_1002A5368()
{
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_1005FEB30);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

void sub_1002A5410(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_100054B78((uint64_t *)&unk_1005FEB30) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + v7);
  int v9 = *(_DWORD *)(v2 + ((v7 + 11) & 0xFFFFFFFFFFFFFFF8));

  sub_1002A13C0(a1, a2, v2 + v6, v8, v9);
}

uint64_t sub_1002A54CC()
{
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_1005FEB30);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1002A5560(int a1)
{
  uint64_t v3 = *(void *)(sub_100054B78((uint64_t *)&unk_1005FEB30) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1002A1724(a1, v4);
}

uint64_t sub_1002A55D4(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FEB40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002A5634()
{
  unint64_t result = qword_1005FEB48;
  if (!qword_1005FEB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005FEB48);
  }
  return result;
}

uint64_t sub_1002A5688(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002A56D0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002A5710@<X0>(void *a1@<X8>)
{
  return sub_1002A1AC0(*(void *)(v1 + 24), a1);
}

uint64_t sub_1002A572C(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

uint64_t sub_1002A5818(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    sub_100054B78(&qword_1005FECE0);
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_1002A5B5C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return [super dealloc];
}

uint64_t sub_1002A5BD0(uint64_t a1)
{
  uint64_t v74 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10004D29C(0, &qword_1005FECE8);
    sub_10002F7C8(&qword_1005FECF0, &qword_1005FECE8);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a1 = v80;
    uint64_t v66 = v81;
    uint64_t v6 = v82;
    uint64_t v7 = v83;
    unint64_t v8 = v84;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v66 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & v10;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
  }
  uint64_t v64 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v65 = (unint64_t)(v6 + 64) >> 6;
  uint64_t v73 = (void (**)(char *, uint64_t))(v2 + 8);
  UIApplicationOpenURLOptionsKey v70 = UIApplicationOpenURLOptionsAnnotationKey;
  UIApplicationOpenURLOptionsKey v71 = UIApplicationOpenURLOptionsSourceApplicationKey;
  UIApplicationOpenURLOptionsKey v69 = UIApplicationOpenURLOptionsOpenInPlaceKey;
  long long v68 = xmmword_10046D010;
  uint64_t v62 = (char *)&type metadata for Any + 8;
  uint64_t v63 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v72 = v6;
  uint64_t v67 = a1;
  while (a1 < 0)
  {
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16) {
      return sub_10004E644();
    }
    *(void *)&v77[0] = v16;
    sub_10004D29C(0, &qword_1005FECE8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v17 = (id)v78;
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v17) {
      return sub_10004E644();
    }
LABEL_31:
    unint64_t v75 = v13;
    static os_log_type_t.default.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v21 = (void *)static OS_os_log.launch.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = v68;
    id v23 = [v17 URL:v62, v63, v64];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v24 = URL.absoluteString.getter();
    uint64_t v26 = v25;
    uint64_t v27 = *v73;
    (*v73)(v4, v74);
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_10004DA4C();
    *(void *)(v22 + 32) = v24;
    *(void *)(v22 + 40) = v26;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    uint64_t v28 = v71;
    id v29 = [v17 options];
    id v30 = [v29 sourceApplication];

    if (v30)
    {
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      *((void *)&v79 + 1) = &type metadata for String;
      *(void *)&long long v78 = v31;
      *((void *)&v78 + 1) = v33;
      sub_10004D384(&v78, v77);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      long long v76 = &_swiftEmptyDictionarySingleton;
      sub_10027FA94(v77, v28, isUniquelyReferenced_nonNull_native);
      uint64_t v35 = v76;

      swift_bridgeObjectRelease();
      uint64_t v36 = &selRef__reportUpNextChangeType_forPlayerItems_withData_;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v37 = sub_100226C58(v28);
      char v39 = v38;
      swift_bridgeObjectRelease();
      if (v39)
      {
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v77[0] = &_swiftEmptyDictionarySingleton;
        uint64_t v35 = &_swiftEmptyDictionarySingleton;
        if ((v40 & 1) == 0)
        {
          sub_1002816F4();
          uint64_t v35 = *(void **)&v77[0];
        }

        sub_10004D384((_OWORD *)(v35[7] + 32 * v37), &v78);
        sub_10027E5B4(v37, (uint64_t)v35);
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v78 = 0u;
        long long v79 = 0u;
        uint64_t v35 = &_swiftEmptyDictionarySingleton;
      }
      uint64_t v36 = &selRef__reportUpNextChangeType_forPlayerItems_withData_;

      sub_100172424((uint64_t)&v78);
    }
    long long v41 = v70;
    id v42 = [v17 options];
    id v43 = [v42 annotation];

    if (v43)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10004D384(&v78, v77);
      char v44 = swift_isUniquelyReferenced_nonNull_native();
      long long v76 = v35;
      sub_10027FA94(v77, v41, v44);
      uint64_t v35 = v76;

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v45 = sub_100226C58(v41);
      char v47 = v46;
      swift_bridgeObjectRelease();
      if (v47)
      {
        char v48 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v77[0] = v35;
        if ((v48 & 1) == 0)
        {
          sub_1002816F4();
          uint64_t v35 = *(void **)&v77[0];
        }

        sub_10004D384((_OWORD *)(v35[7] + 32 * v45), &v78);
        sub_10027E5B4(v45, (uint64_t)v35);
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v78 = 0u;
        long long v79 = 0u;
      }

      sub_100172424((uint64_t)&v78);
    }
    uint64_t v49 = v69;
    id v50 = [v17 options];
    unsigned __int8 v51 = [v50 openInPlace];

    *((void *)&v79 + 1) = &type metadata for Bool;
    LOBYTE(v78) = v51;
    sub_10004D384(&v78, v77);
    char v52 = swift_isUniquelyReferenced_nonNull_native();
    long long v76 = v35;
    sub_10027FA94(v77, v49, v52);

    swift_bridgeObjectRelease();
    unint64_t v53 = self;
    id v54 = [v53 sharedApplication];
    id v55 = [v54 delegate];

    if (v55)
    {
      if ([v55 respondsToSelector:v36[349]])
      {
        id v56 = [v53 sharedApplication];
        id v57 = [v17 URL];
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        URL._bridgeToObjectiveC()(v58);
        __n128 v60 = v59;
        type metadata accessor for OpenURLOptionsKey(0);
        sub_1002A6BCC();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        [v55 v36[349]:v56:v60:isa];
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v4, v74);
      }
      else
      {

        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
      }
    }
    else
    {

      uint64_t result = swift_bridgeObjectRelease();
    }
    uint64_t v7 = v15;
    unint64_t v8 = v75;
    a1 = v67;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v15 = v7;
LABEL_30:
    id v17 = *(id *)(*(void *)(a1 + 48) + 8 * v14);
    if (!v17) {
      return sub_10004E644();
    }
    goto LABEL_31;
  }
  int64_t v18 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v18 >= v65) {
      return sub_10004E644();
    }
    unint64_t v19 = *(void *)(v66 + 8 * v18);
    uint64_t v15 = v7 + 1;
    if (!v19)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v65) {
        return sub_10004E644();
      }
      unint64_t v19 = *(void *)(v66 + 8 * v15);
      if (!v19)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v65) {
          return sub_10004E644();
        }
        unint64_t v19 = *(void *)(v66 + 8 * v15);
        if (!v19)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v65) {
            return sub_10004E644();
          }
          unint64_t v19 = *(void *)(v66 + 8 * v15);
          if (!v19)
          {
            uint64_t v20 = v7 + 5;
            while (v65 != v20)
            {
              unint64_t v19 = *(void *)(v66 + 8 * v20++);
              if (v19)
              {
                uint64_t v15 = v20 - 1;
                goto LABEL_29;
              }
            }
            return sub_10004E644();
          }
        }
      }
    }
LABEL_29:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void sub_1002A64F0(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v4 = (void *)static OS_os_log.launch.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10046D010;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10004DA4C();
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  uint64_t v6 = self;
  id v7 = [v6 sharedApplication];
  id v8 = [v7 delegate];

  if (v8)
  {
    if ([v8 respondsToSelector:"application:willContinueUserActivityWithType:"])
    {
      id v9 = [v6 sharedApplication];
      id v10 = String._bridgeToObjectiveC()();
      [v8 application:v9 willContinueUserActivityWithType:v10];
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void sub_1002A66D8(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v4 = (void *)static OS_os_log.launch.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10046D030;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v6 = sub_10004DA4C();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  swift_getErrorValue();
  swift_bridgeObjectRetain();
  uint64_t v7 = Error.localizedDescription.getter();
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v6;
  *(void *)(v5 + 72) = v7;
  *(void *)(v5 + 80) = v8;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  id v9 = self;
  id v10 = [v9 sharedApplication];
  id v11 = [v10 delegate];

  if (v11)
  {
    if ([v11 respondsToSelector:"application:didFailToContinueUserActivityWithType:error:"])
    {
      id v12 = [v9 sharedApplication];
      NSString v13 = String._bridgeToObjectiveC()();
      unint64_t v14 = (void *)_convertErrorToNSError(_:)();
      [v11 application:v12 didFailToContinueUserActivityWithType:v13 error:v14];

      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1002A68D4(void *a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  _Block_copy(a2);
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v5 = (void *)static OS_os_log.launch.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10046D010;
  id v7 = [a1 type];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10004DA4C();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  id v11 = self;
  id v12 = [v11 sharedApplication];
  id v13 = [v12 delegate];

  if (v13)
  {
    if ([v13 respondsToSelector:"application:performActionForShortcutItem:completionHandler:"])
    {
      swift_unknownObjectRetain();
      id v14 = [v11 sharedApplication];
      v17[4] = sub_1002691C0;
      uint64_t v17[5] = v4;
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 1107296256;
      void v17[2] = sub_100226350;
      v17[3] = &unk_10055D738;
      uint64_t v15 = _Block_copy(v17);
      swift_retain();
      [v13 application:v14 performActionForShortcutItem:a1 completionHandler:v15];
      _Block_release(v15);
      swift_release();
      swift_unknownObjectRelease_n();

      return swift_release();
    }
    swift_unknownObjectRelease();
  }
  a2[2](a2, 0);

  return swift_release();
}

uint64_t sub_1002A6B94()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

unint64_t sub_1002A6BCC()
{
  unint64_t result = qword_1005F66E0;
  if (!qword_1005F66E0)
  {
    type metadata accessor for OpenURLOptionsKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F66E0);
  }
  return result;
}

void *sub_1002A6C3C(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FEE88);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for MediaLibraryPid();
  uint64_t v5 = *(void *)(v48 - 8);
  uint64_t v6 = __chkstk_darwin(v48);
  long long v41 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v37 = (char *)&v36 - v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10004D29C(0, (unint64_t *)&unk_100608000);
    sub_1002AA518();
    unint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    a1 = v50;
    uint64_t v46 = v51;
    uint64_t v10 = v52;
    uint64_t v11 = v53;
    uint64_t v12 = v54;
  }
  else
  {
    uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v46 = a1 + 56;
    uint64_t v10 = ~v13;
    uint64_t v15 = -v13;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    uint64_t v12 = v16 & v14;
    unint64_t result = (void *)swift_bridgeObjectRetain();
    uint64_t v11 = 0;
  }
  uint64_t v38 = v5;
  uint64_t v39 = v10;
  uint64_t v44 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v45 = (unint64_t)(v10 + 64) >> 6;
  id v17 = (void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
  int64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  char v40 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  id v42 = _swiftEmptyArrayStorage;
  id v43 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v47 = a1;
LABEL_8:
  uint64_t v19 = v11;
  unint64_t v20 = v12;
  if (a1 < 0)
  {
    do
    {
      uint64_t v22 = __CocoaSet.Iterator.next()();
      if (!v22) {
        goto LABEL_39;
      }
      uint64_t v49 = v22;
      sub_10004D29C(0, (unint64_t *)&unk_100608000);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v23 = v55;
      swift_unknownObjectRelease();
      uint64_t v11 = v19;
      uint64_t v12 = v20;
      if (!v23) {
        goto LABEL_39;
      }
LABEL_31:
      [v23 persistentID];
      MediaLibraryPid.init(uint64Value:)();
      uint64_t v27 = v48;
      (*v17)(v4, 0, 1, v48);

      if ((*v18)(v4, 1, v27) != 1)
      {
        uint64_t v28 = *v40;
        id v29 = v37;
        uint64_t v30 = v48;
        (*v40)(v37, v4, v48);
        v28(v41, v29, v30);
        uint64_t v31 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v42 = (void *)sub_1002EFE28(0, v42[2] + 1, 1, (unint64_t)v42);
        }
        unint64_t v33 = v42[2];
        unint64_t v32 = v42[3];
        if (v33 >= v32 >> 1) {
          id v42 = (void *)sub_1002EFE28(v32 > 1, v33 + 1, 1, (unint64_t)v42);
        }
        uint64_t v34 = v41;
        uint64_t v35 = v42;
        _OWORD v42[2] = v33 + 1;
        unint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v31)((char *)v35+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v33, v34, v48);
        a1 = v47;
        goto LABEL_8;
      }
      unint64_t result = (void *)sub_100054B1C((uint64_t)v4, &qword_1005FEE88);
      uint64_t v19 = v11;
      unint64_t v20 = v12;
      a1 = v47;
    }
    while (v47 < 0);
  }
  if (v20)
  {
    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v21 = __clz(__rbit64(v20)) | (v19 << 6);
    uint64_t v11 = v19;
    goto LABEL_30;
  }
  int64_t v24 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
    if (v24 < v45)
    {
      unint64_t v25 = *(void *)(v46 + 8 * v24);
      uint64_t v11 = v19 + 1;
      if (v25) {
        goto LABEL_29;
      }
      uint64_t v11 = v19 + 2;
      if (v19 + 2 >= v45) {
        goto LABEL_39;
      }
      unint64_t v25 = *(void *)(v46 + 8 * v11);
      if (v25) {
        goto LABEL_29;
      }
      uint64_t v11 = v19 + 3;
      if (v19 + 3 >= v45) {
        goto LABEL_39;
      }
      unint64_t v25 = *(void *)(v46 + 8 * v11);
      if (v25) {
        goto LABEL_29;
      }
      uint64_t v11 = v19 + 4;
      if (v19 + 4 >= v45) {
        goto LABEL_39;
      }
      unint64_t v25 = *(void *)(v46 + 8 * v11);
      if (v25)
      {
LABEL_29:
        uint64_t v12 = (v25 - 1) & v25;
        unint64_t v21 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_30:
        id v23 = *(id *)(*(void *)(a1 + 48) + 8 * v21);
        if (v23) {
          goto LABEL_31;
        }
        goto LABEL_39;
      }
      uint64_t v11 = v19 + 5;
      if (v19 + 5 < v45)
      {
        unint64_t v25 = *(void *)(v46 + 8 * v11);
        if (!v25)
        {
          uint64_t v26 = v19 + 6;
          while (v45 != v26)
          {
            unint64_t v25 = *(void *)(v46 + 8 * v26++);
            if (v25)
            {
              uint64_t v11 = v26 - 1;
              a1 = v47;
              goto LABEL_29;
            }
          }
          goto LABEL_39;
        }
        goto LABEL_29;
      }
    }
LABEL_39:
    sub_10004E644();
    return v42;
  }
  __break(1u);
  return result;
}

void sub_1002A716C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10004D29C(0, (unint64_t *)&unk_100608000);
    sub_1002AA518();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v2 = v21;
    uint64_t v3 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v17 = (unint64_t)(v2 + 64) >> 6;
  uint64_t v8 = MPMediaEntityPropertyKeepLocal;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v18 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v18 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v18 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v18 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v17) {
              goto LABEL_32;
            }
            unint64_t v14 = *(void *)(v18 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v17 != v15)
              {
                unint64_t v14 = *(void *)(v18 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10004E644();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      [v12 setValue:isa forProperty:v8];

      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10004D29C(0, (unint64_t *)&unk_100608000);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v24;
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v4;
        if (v24) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void *sub_1002A7460(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      goto LABEL_10;
    }
LABEL_13:
    sub_1003CD27C(a1);
    return (void *)v2;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4 <= __CocoaSet.count.getter() / 8) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  Swift::Int v7 = sub_1003CB584(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v2 = v7;
LABEL_10:

  return sub_1003CDD84(a1, v2);
}

uint64_t sub_1002A7568()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1002A7598@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  sub_1002AACA4(v1 + 88, (uint64_t)&v5);
  if (v6) {
    return sub_100042FC4(&v5, a1);
  }
  uint64_t v4 = sub_100054B1C((uint64_t)&v5, &qword_1005FEED0);
  (*(void (**)(uint64_t))(v1 + 72))(v4);
  sub_100056D54(a1, (uint64_t)&v5);
  swift_beginAccess();
  sub_1002AAD0C((uint64_t)&v5, v1 + 88);
  return swift_endAccess();
}

uint64_t sub_1002A7658(void *a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v39 = a2;
  uint64_t v5 = sub_100054B78(&qword_1005F6C70);
  __chkstk_darwin(v5);
  Swift::Int v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for URL();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v11 = *(void *)(v38 + 64);
  uint64_t v12 = __chkstk_darwin(v37);
  int64_t v13 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v36 = (char *)&v35 - v14;
  id v15 = [a1 mediaLibraryDictionary];
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = sub_100276E8C(v16);
  swift_bridgeObjectRelease();
  id v18 = sub_1002AA004(v17);
  swift_bridgeObjectRelease();
  if (v18)
  {
    id v19 = [a1 itemFilePath:v5];
    if (v19)
    {
      uint64_t v20 = v19;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = v38;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      uint64_t v23 = v37;
      v22(v10, v13, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v10, 0, 1, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, v23) != 1)
      {
        int64_t v24 = v36;
        v22(v36, v10, v23);
        sub_1002A7598((uint64_t)v44);
        id v35 = *(id *)(v3 + 168);
        sub_100056D54(v3 + 128, (uint64_t)v43);
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v13, v24, v23);
        sub_100056D54((uint64_t)v44, (uint64_t)v42);
        unint64_t v25 = (*(unsigned __int8 *)(v21 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        uint64_t v26 = (char *)swift_allocObject();
        *((void *)v26 + 2) = v3;
        *((void *)v26 + 3) = v18;
        uint64_t v27 = v40;
        *((void *)v26 + 4) = v39;
        *((void *)v26 + 5) = v27;
        sub_100042FC4(v43, (uint64_t)(v26 + 48));
        v22(&v26[v25], v13, v23);
        sub_100042FC4(v42, (uint64_t)&v26[(v11 + v25 + 7) & 0xFFFFFFFFFFFFFFF8]);
        aBlock[4] = sub_1002AAA40;
        aBlock[5] = v26;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1002A8608;
        void aBlock[3] = &unk_10055D968;
        uint64_t v28 = _Block_copy(aBlock);
        swift_retain();
        id v29 = v18;
        swift_retain();
        swift_release();
        [v35 requestMediaLibraryWriteTransaction:v28];
        _Block_release(v28);

        sub_10004D2D8((uint64_t)v44);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v36, v23);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v10, 1, 1, v37);
    }
    sub_100054B1C((uint64_t)v10, (uint64_t *)&unk_1005F7750);
    sub_1002AA5CC();
    uint64_t v33 = swift_allocError();
    *uint64_t v34 = 3;
    uint64_t *v7 = v33;
    swift_storeEnumTagMultiPayload();
    v39(v7);
  }
  else
  {
    sub_1002AA5CC();
    uint64_t v31 = swift_allocError();
    *unint64_t v32 = 0;
    uint64_t *v7 = v31;
    swift_storeEnumTagMultiPayload();
    v39(v7);
  }
  return sub_100054B1C((uint64_t)v7, &qword_1005F6C70);
}

uint64_t sub_1002A7BD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a4;
  uint64_t v26 = a3;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = a2 + 4;
  uint64_t v17 = a2[7];
  uint64_t v18 = a2[8];
  unint64_t v25 = sub_100041A98(v16, v17);
  sub_100056D54(a6, (uint64_t)v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a7, v13);
  sub_100056D54(a8, (uint64_t)v27);
  unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v24;
  *(void *)(v20 + 24) = a5;
  sub_100042FC4(v28, v20 + 32);
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v20 + v19, (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  sub_100042FC4(v27, v20 + ((v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(), void, uint64_t (*)(char, uint64_t, uint64_t, unint64_t), uint64_t, uint64_t, uint64_t))(v18 + 8);
  swift_retain();
  v21(v26, 6, UInt64.int64Representation.getter, 0, sub_1002AABD8, v20, v17, v18);
  swift_release();
  return 1;
}

uint64_t sub_1002A7DD0(char a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *), uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v74 = a8;
  unint64_t v75 = a7;
  uint64_t v15 = sub_100054B78(&qword_1005FEE88);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for MediaLibraryPid();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v77 = v18;
  uint64_t v78 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  long long v76 = (char *)&v69 - v23;
  uint64_t v24 = sub_100054B78(&qword_1005F6C70);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (uint64_t *)((char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  uint64_t v30 = (uint64_t *)((char *)&v69 - v29);
  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      uint64_t v33 = a2;
    }
    else
    {
      sub_1002AA5CC();
      uint64_t v33 = swift_allocError();
      *uint64_t v38 = 1;
    }
    *uint64_t v27 = v33;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a5(v27);
    uint64_t v37 = (uint64_t)v27;
    return sub_100054B1C(v37, &qword_1005F6C70);
  }
  uint64_t v73 = v28;
  if (a4 >> 60 == 15)
  {
    sub_1002AA5CC();
    uint64_t v31 = swift_allocError();
    *unint64_t v32 = 2;
    *uint64_t v30 = v31;
    swift_storeEnumTagMultiPayload();
    a5(v30);
LABEL_8:
    uint64_t v37 = (uint64_t)v30;
    return sub_100054B1C(v37, &qword_1005F6C70);
  }
  sub_10004D29C(0, &qword_1005FEEA0);
  sub_100054B78(&qword_1005FEEA8);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_10046D030;
  *(void *)(v34 + 32) = sub_10004D29C(0, &qword_1005FEEB0);
  *(void *)(v34 + 40) = sub_10004D29C(0, (unint64_t *)&unk_1005F9460);
  sub_10023FCA8(a3, a4);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
  swift_bridgeObjectRelease();
  if (!v82)
  {
    sub_100054B1C((uint64_t)v81, &qword_1005F5D30);
    goto LABEL_7;
  }
  sub_100054B78(&qword_1005F7308);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    sub_1002AA5CC();
    uint64_t v35 = swift_allocError();
    unsigned char *v36 = 2;
    *uint64_t v30 = v35;
    swift_storeEnumTagMultiPayload();
    a5(v30);
    sub_10021A3FC(a3, a4);
    goto LABEL_8;
  }
  int64_t v40 = *(void *)(v79 + 16);
  if (v40)
  {
    uint64_t v69 = a3;
    unint64_t v70 = a4;
    uint64_t v71 = a6;
    uint64_t v72 = a5;
    v81[0] = _swiftEmptyArrayStorage;
    sub_1001BA868(0, v40, 0);
    uint64_t v41 = 0;
    id v42 = (void *)v81[0];
    do
    {
      MediaLibraryPid.init(_:)();
      v81[0] = v42;
      unint64_t v44 = v42[2];
      unint64_t v43 = v42[3];
      if (v44 >= v43 >> 1)
      {
        sub_1001BA868(v43 > 1, v44 + 1, 1);
        id v42 = (void *)v81[0];
      }
      ++v41;
      long long v42[2] = v44 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v78 + 32))((unint64_t)v42+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(void *)(v78 + 72) * v44, v22, v77);
    }
    while (v40 != v41);
    swift_bridgeObjectRelease();
    a5 = v72;
    a3 = v69;
    a4 = v70;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v42 = _swiftEmptyArrayStorage;
  }
  uint64_t v45 = v77;
  uint64_t v46 = v78;
  if (v42[2])
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v78 + 16))(v17, (unint64_t)v42+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80)), v77);
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v17, v47, 1, v45);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v17, 1, v45) == 1)
  {
    sub_100054B1C((uint64_t)v17, &qword_1005FEE88);
    goto LABEL_7;
  }
  uint64_t v48 = v76;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v76, v17, v45);
  uint64_t v49 = v46;
  uint64_t v50 = v75[3];
  uint64_t v51 = v75[4];
  sub_100041A98(v75, v50);
  (*(void (**)(long long *__return_ptr, char *, uint64_t))(*(void *)(v51 + 8) + 8))(&v79, v48, v50);
  if (v80)
  {
    uint64_t v52 = a3;
    sub_100042FC4(&v79, (uint64_t)v81);
    uint64_t v53 = URL.path.getter();
    uint64_t v55 = v54;
    uint64_t v56 = v82;
    uint64_t v57 = v83;
    sub_100041A98(v81, v82);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v57 + 8))(v53, v55, 0, v56, v57);
    swift_bridgeObjectRelease();
    uint64_t v58 = a9[3];
    uint64_t v59 = a9[4];
    sub_100041A98(a9, v58);
    __n128 v60 = v76;
    uint64_t v61 = MediaLibraryPid.uint64Value.getter();
    uint64_t v62 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 8))(v61, 1, v58, v59);

    if (v62)
    {
      uint64_t v63 = v77;
      uint64_t v64 = v78;
      (*(void (**)(uint64_t *, char *, uint64_t))(v78 + 16))(v30, v60, v77);
      swift_storeEnumTagMultiPayload();
      a5(v30);
      sub_10021A3FC(v52, a4);
      sub_100054B1C((uint64_t)v30, &qword_1005F6C70);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v60, v63);
    }
    else
    {
      sub_1002AA5CC();
      uint64_t v67 = swift_allocError();
      *long long v68 = 4;
      *uint64_t v30 = v67;
      swift_storeEnumTagMultiPayload();
      a5(v30);
      sub_10021A3FC(v52, a4);
      sub_100054B1C((uint64_t)v30, &qword_1005F6C70);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v60, v77);
    }
    return sub_10004D2D8((uint64_t)v81);
  }
  else
  {
    sub_100054B1C((uint64_t)&v79, &qword_1005FEE98);
    sub_1002AA5CC();
    uint64_t v65 = swift_allocError();
    *uint64_t v66 = 4;
    *uint64_t v30 = v65;
    swift_storeEnumTagMultiPayload();
    a5(v30);
    sub_10021A3FC(a3, a4);
    sub_100054B1C((uint64_t)v30, &qword_1005F6C70);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v76, v77);
  }
}

uint64_t sub_1002A8608(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t sub_1002A8660(void *a1, uint64_t a2, void (*a3)(void))
{
  unsigned __int8 v10 = 1;
  sub_1002A8794(a2, a1, &v10);
  if (v10)
  {
    ((void (*)(void, void))a3)(0, 0);
    return 1;
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v8 = (void *)static OS_os_log.mediaLibrary.getter();
    os_log(_:dso:log:_:_:)();

    sub_1002AA5CC();
    swift_allocError();
    *uint64_t v9 = 7;
    a3();
    swift_errorRelease();
    return v10;
  }
}

void sub_1002A8794(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  id v4 = a2;
  unint64_t v5 = (unint64_t)sub_1002AA238(a1, v4);

  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v6 = (void *)static OS_os_log.mediaLibrary.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10046D030;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(v7 + 56) = &type metadata for Int;
  *(void *)(v7 + 64) = &protocol witness table for Int;
  *(void *)(v7 + 32) = v8;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v7 + 96) = &type metadata for Int;
  *(void *)(v7 + 104) = &protocol witness table for Int;
  *(void *)(v7 + 72) = v9;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  sub_1001B80F0(v5);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unsigned __int8 v11 = [v4 deleteItems:isa];

  *a3 = v11;
}

void sub_1002A8944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v5 = type metadata accessor for MediaLibraryPid();
  uint64_t v19 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  unsigned __int8 v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = *(id *)(v4 + 168);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v20, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v5);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v14 = (v10 + *(unsigned __int8 *)(v6 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v13, v11, v8);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v14, (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  uint64_t v16 = (void *)(v15 + ((v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v17 = v24;
  *uint64_t v16 = v23;
  v16[1] = v17;
  aBlock[4] = sub_1002AA838;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002A8608;
  void aBlock[3] = &unk_10055D918;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v22 requestMediaLibraryWriteTransaction:v18];
  _Block_release(v18);
}

uint64_t sub_1002A8C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void))
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = Strong;
    uint64_t v9 = Strong + 16;
    uint64_t v10 = Strong[19];
    uint64_t v11 = Strong[20];
    sub_100041A98(Strong + 16, v10);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)(v11 + 8) + 8))(&v38, a4, v10);
    if (v39)
    {
      sub_100042FC4(&v38, (uint64_t)v40);
      uint64_t v12 = v41;
      uint64_t v13 = v42;
      sub_100041A98(v40, v41);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
      if (v15)
      {
        uint64_t v16 = v14;
        uint64_t v17 = v15;
        uint64_t v18 = v8[19];
        uint64_t v19 = v8[20];
        sub_100041A98(v9, v18);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 32))(v16, v17, v18, v19);
        swift_bridgeObjectRelease();
        uint64_t v22 = Data.init(contentsOf:options:)();
        unint64_t v24 = v23;
        uint64_t v25 = v41;
        uint64_t v26 = v42;
        sub_100041A98(v40, v41);
        uint64_t v27 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v26 + 16);
        sub_10023FCA8(v22, v24);
        char v28 = v27(v22, v24, v25, v26);
        sub_10021A410(v22, v24);
        if (v28)
        {
          sub_10021A410(v22, v24);
          sub_10004D2D8((uint64_t)v40);
          swift_release();
          goto LABEL_12;
        }
        sub_1002AA5CC();
        swift_allocError();
        *uint64_t v29 = 5;
        swift_willThrow();
        sub_10021A410(v22, v24);
      }
      else
      {
        sub_1002AA5CC();
        swift_allocError();
        unsigned char *v21 = 6;
        swift_willThrow();
      }
      sub_10004D2D8((uint64_t)v40);
    }
    else
    {
      sub_100054B1C((uint64_t)&v38, &qword_1005FEE98);
      sub_1002AA5CC();
      swift_allocError();
      *uint64_t v20 = 4;
      swift_willThrow();
    }
    swift_release();
    static os_log_type_t.error.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v30 = (void *)static OS_os_log.mediaLibrary.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_10046D010;
    unint64_t v32 = (void *)_convertErrorToNSError(_:)();
    id v33 = [v32 description];

    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = sub_10004DA4C();
    *(void *)(v31 + 32) = v34;
    *(void *)(v31 + 40) = v36;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
LABEL_12:
  a5(0, 0);
  return 1;
}

void sub_1002A8FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v6 = (void *)static OS_os_log.mediaLibrary.getter();
  os_log(_:dso:log:_:_:)();

  uint64_t v7 = *(void **)(v3 + 168);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  v10[4] = sub_1002AA658;
  v10[5] = v8;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1002A8608;
  v10[3] = &unk_10055D828;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  [v7 requestMediaLibraryWriteTransaction:v9];
  _Block_release(v9);
}

id sub_1002A9108(void *a1, void (*a2)(void))
{
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v3 = (void *)static OS_os_log.mediaLibrary.getter();
  os_log(_:dso:log:_:_:)();

  id v4 = [self downloadCandidateMediaItems];
  sub_10004D29C(0, (unint64_t *)&unk_100608000);
  sub_1002AA518();
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  static os_log_type_t.default.getter();
  uint64_t v6 = (void *)static OS_os_log.mediaLibrary.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10046D010;
  uint64_t v34 = a2;
  if ((v5 & 0xC000000000000001) != 0) {
    uint64_t v8 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v8 = *(void *)(v5 + 16);
  }
  *(void *)(v7 + 56) = &type metadata for Int;
  *(void *)(v7 + 64) = &protocol witness table for Int;
  *(void *)(v7 + 32) = v8;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  static Date.timeIntervalSinceReferenceDate.getter();
  double v10 = v9;
  uint64_t v11 = swift_bridgeObjectRetain();
  Swift::Int v12 = sub_1002A982C(v11, v10, 2592000.0);
  id v33 = sub_1002A6C3C(v12);
  swift_bridgeObjectRetain();
  uint64_t v13 = (uint64_t)sub_1002A7460(v12, v5);
  static os_log_type_t.default.getter();
  uint64_t v14 = (void *)static OS_os_log.mediaLibrary.getter();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10046D050;
  if ((v5 & 0xC000000000000001) != 0) {
    uint64_t v16 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v16 = *(void *)(v5 + 16);
  }
  swift_bridgeObjectRelease();
  *(void *)(v15 + 56) = &type metadata for Int;
  *(void *)(v15 + 64) = &protocol witness table for Int;
  *(void *)(v15 + 32) = v16;
  unint64_t v17 = v12 & 0xC000000000000001;
  if ((v12 & 0xC000000000000001) != 0) {
    uint64_t v18 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v18 = *(void *)(v12 + 16);
  }
  *(void *)(v15 + 96) = &type metadata for Int;
  *(void *)(v15 + 104) = &protocol witness table for Int;
  *(void *)(v15 + 72) = v18;
  if ((v13 & 0xC000000000000001) != 0) {
    uint64_t v19 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v19 = *(void *)(v13 + 16);
  }
  *(void *)(v15 + 136) = &type metadata for Int;
  *(void *)(v15 + 144) = &protocol witness table for Int;
  *(void *)(v15 + 112) = v19;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  sub_1002A716C(v13);
  swift_bridgeObjectRelease();
  uint64_t v20 = swift_retain();
  uint64_t v21 = sub_10025C4DC(v20);
  swift_release();
  sub_1001B80F0((unint64_t)v21);
  swift_release();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v23 = [a1 deleteItems:isa];

  if (v23)
  {
    static os_log_type_t.default.getter();
    unint64_t v24 = (void *)static OS_os_log.mediaLibrary.getter();
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_10046D010;
    if (v17) {
      uint64_t v26 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v26 = *(void *)(v12 + 16);
    }
    swift_release();
    *(void *)(v25 + 56) = &type metadata for Int;
    *(void *)(v25 + 64) = &protocol witness table for Int;
    *(void *)(v25 + 32) = v26;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    ((void (*)(void *, void))v34)(v33, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    uint64_t v27 = (void *)static OS_os_log.mediaLibrary.getter();
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_10046D010;
    if (v17) {
      uint64_t v29 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v29 = *(void *)(v12 + 16);
    }
    swift_release();
    *(void *)(v28 + 56) = &type metadata for Int;
    *(void *)(v28 + 64) = &protocol witness table for Int;
    *(void *)(v28 + 32) = v29;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    sub_1002AA5CC();
    swift_allocError();
    *uint64_t v30 = 7;
    v34();
    swift_errorRelease();
  }
  return v23;
}

uint64_t sub_1002A9654()
{
  swift_bridgeObjectRelease();
  sub_10004D2D8(v0 + 32);
  swift_release();
  sub_100054B1C(v0 + 88, &qword_1005FEED0);
  sub_10004D2D8(v0 + 128);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002A96BC(void *a1, void (*a2)(uint64_t *), uint64_t a3)
{
  return sub_1002A7658(a1, a2, a3);
}

void sub_1002A96E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void **)(*(void *)v3 + 168);
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v8[2] = a1;
  void v8[3] = a2;
  v8[4] = a3;
  v10[4] = sub_1002AA5C0;
  v10[5] = v8;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1002A8608;
  v10[3] = &unk_10055D7D8;
  double v9 = _Block_copy(v10);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v7 requestMediaLibraryWriteTransaction:v9];
  _Block_release(v9);
}

void sub_1002A97E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002A9804(uint64_t a1, uint64_t a2)
{
}

Swift::Int sub_1002A982C(uint64_t a1, double a2, double a3)
{
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  double v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(double *)(v10 + 16) = a2;
  *(double *)(v10 + 24) = a3;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v30[1] = v10;
    uint64_t v11 = &_swiftEmptySetSingleton;
    uint64_t v34 = &_swiftEmptySetSingleton;
    __CocoaSet.makeIterator()();
    uint64_t v12 = __CocoaSet.Iterator.next()();
    if (v12)
    {
      uint64_t v13 = v12;
      v30[0] = v3;
      sub_10004D29C(0, (unint64_t *)&unk_100608000);
      do
      {
        uint64_t v32 = v13;
        swift_dynamicCast();
        id v14 = [v33 dateAdded];
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Date.timeIntervalSinceReferenceDate.getter();
        double v16 = v15;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v31);
        id v17 = v33;
        if (a2 - v16 >= a3)
        {
        }
        else
        {
          uint64_t v18 = v34;
          unint64_t v19 = v34[2];
          if (v34[3] <= v19)
          {
            sub_1003F628C(v19 + 1);
            uint64_t v18 = v34;
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(v18[5]);
          uint64_t v21 = v18 + 7;
          uint64_t v22 = -1 << *((unsigned char *)v18 + 32);
          unint64_t v23 = result & ~v22;
          unint64_t v24 = v23 >> 6;
          if (((-1 << v23) & ~v18[(v23 >> 6) + 7]) != 0)
          {
            unint64_t v25 = __clz(__rbit64((-1 << v23) & ~v18[(v23 >> 6) + 7])) | v23 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v26 = 0;
            unint64_t v27 = (unint64_t)(63 - v22) >> 6;
            do
            {
              if (++v24 == v27 && (v26 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v28 = v24 == v27;
              if (v24 == v27) {
                unint64_t v24 = 0;
              }
              v26 |= v28;
              uint64_t v29 = v21[v24];
            }
            while (v29 == -1);
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          }
          *(void *)((char *)v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
          *(void *)(v18[6] + 8 * v25) = v17;
          ++v18[2];
        }
        uint64_t v13 = __CocoaSet.Iterator.next()();
      }
      while (v13);
      uint64_t v11 = v34;
    }
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v11 = (void *)sub_1002A9B60(a1, a2, a3);
    swift_release();
  }
  return (Swift::Int)v11;
}

uint64_t sub_1002A9B60(uint64_t a1, double a2, double a3)
{
  uint64_t isStackAllocationSafe = swift_allocObject();
  *(double *)(isStackAllocationSafe + 16) = a2;
  *(double *)(isStackAllocationSafe + 24) = a3;
  char v8 = *(unsigned char *)(a1 + 32);
  unint64_t v9 = (unint64_t)((1 << v8) + 63) >> 6;
  size_t v10 = 8 * v9;
  if ((v8 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    sub_1002A9D24((unint64_t *)((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    uint64_t v12 = v11;
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    sub_1002A9D24((unint64_t *)v13, v9, a1, a2, a3);
    uint64_t v12 = v14;
    swift_release();
    swift_slowDealloc();
    swift_release();
  }
  return v12;
}

void sub_1002A9D24(unint64_t *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  int64_t v13 = 0;
  uint64_t v14 = *(void *)(a3 + 56);
  uint64_t v32 = 0;
  uint64_t v33 = a3 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  *(double *)(v12 + 16) = a4;
  *(double *)(v12 + 24) = a5;
  v29[1] = v12;
  unint64_t v17 = v16 & v14;
  int64_t v34 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v18 = (void (**)(char *, uint64_t))(v9 + 8);
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v25 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v34) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v33 + 8 * v25);
    ++v13;
    if (!v26)
    {
      int64_t v13 = v25 + 1;
      if (v25 + 1 >= v34) {
        goto LABEL_24;
      }
      unint64_t v26 = *(void *)(v33 + 8 * v13);
      if (!v26)
      {
        int64_t v13 = v25 + 2;
        if (v25 + 2 >= v34) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v33 + 8 * v13);
        if (!v26) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v20 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_5:
    id v21 = *(id *)(*(void *)(a3 + 48) + 8 * v20);
    id v22 = [v21 dateAdded];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Date.timeIntervalSinceReferenceDate.getter();
    double v24 = v23;
    (*v18)(v11, v8);

    if (a4 - v24 < a5)
    {
      *(unint64_t *)((char *)v31 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (__OFADD__(v32++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_1003D0038(v31, v30, v32, a3);
        swift_release();
        return;
      }
    }
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v34) {
    goto LABEL_24;
  }
  unint64_t v26 = *(void *)(v33 + 8 * v27);
  if (v26)
  {
    int64_t v13 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v13 >= v34) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v33 + 8 * v13);
    ++v27;
    if (v26) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

id sub_1002AA004(uint64_t a1)
{
  sub_100054B78(&qword_1005FEEB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D010;
  *(void *)(inited + 32) = 0x74695F6B63617274;
  *(void *)(inited + 40) = 0xEB00000000736D65;
  sub_100054B78(&qword_1005FEEC0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10046D010;
  *(void *)(v3 + 32) = a1;
  *(void *)(inited + 48) = v3;
  swift_bridgeObjectRetain();
  sub_10016E9A4(inited);
  id v4 = self;
  sub_100054B78(&qword_1005FEEC8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = 0;
  id v6 = [v4 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v16];

  id v7 = v16;
  if (v6)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    uint64_t v11 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v8 = 0;
    unint64_t v10 = 0xF000000000000000;
  }
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v10 >> 60 == 15)
  {
    Class v13 = 0;
  }
  else
  {
    Class v13 = Data._bridgeToObjectiveC()().super.isa;
    sub_10021A3FC(v8, v10);
  }
  id v14 = [objc_allocWithZone((Class)ML3DatabaseImport) initWithLibraryPath:v12 trackData:v13 playlistData:0];

  return v14;
}

void *sub_1002AA238(uint64_t a1, void *a2)
{
  Swift::Int result = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(type metadata accessor for MediaLibraryPid() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      if ([a2 itemWithPersistentID:MediaLibraryPid.uint64Value.getter() verifyExistence:0])
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1002AA39C()
{
  id v0 = [self postRestoreCandidateMediaItems];
  sub_10004D29C(0, (unint64_t *)&unk_100608000);
  sub_1002AA518();
  uint64_t v1 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v2 = sub_1002A6C3C(v1);
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v3 = (void *)static OS_os_log.mediaLibrary.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10046D030;
  if ((v1 & 0xC000000000000001) != 0) {
    uint64_t v5 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v5 = *(void *)(v1 + 16);
  }
  swift_bridgeObjectRelease();
  *(void *)(v4 + 56) = &type metadata for Int;
  *(void *)(v4 + 64) = &protocol witness table for Int;
  *(void *)(v4 + 32) = v5;
  uint64_t v6 = v2[2];
  *(void *)(v4 + 96) = &type metadata for Int;
  *(void *)(v4 + 104) = &protocol witness table for Int;
  *(void *)(v4 + 72) = v6;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_1002AA518()
{
  unint64_t result = qword_1005FD2B0;
  if (!qword_1005FD2B0)
  {
    sub_10004D29C(255, (unint64_t *)&unk_100608000);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FD2B0);
  }
  return result;
}

uint64_t sub_1002AA580()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002AA5C0(void *a1)
{
  return sub_1002A8660(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

unint64_t sub_1002AA5CC()
{
  unint64_t result = qword_1005FEE90;
  if (!qword_1005FEE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FEE90);
  }
  return result;
}

uint64_t sub_1002AA620()
{
  swift_release();

  return swift_deallocObject();
}

id sub_1002AA658(void *a1)
{
  return sub_1002A9108(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_1002AA660()
{
  return swift_deallocObject();
}

uint64_t sub_1002AA670()
{
  return swift_deallocObject();
}

uint64_t sub_1002AA680()
{
  return swift_deallocObject();
}

uint64_t sub_1002AA690()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002AA6C8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for MediaLibraryPid();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002AA838(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for MediaLibraryPid() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v1 + 16);
  unint64_t v9 = *(void (**)(void, void))(v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1002A8C10(a1, v8, v1 + v4, v1 + v7, v9);
}

uint64_t sub_1002AA940()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_release();
  sub_10004D2D8(v0 + 48);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_10004D2D8(v0 + v4);

  return swift_deallocObject();
}

uint64_t sub_1002AAA40(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (void *)v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);

  return sub_1002A7BD8(a1, v5, v6, v7, v8, (uint64_t)(v1 + 6), (uint64_t)v1 + v4, v9);
}

uint64_t sub_1002AAAE8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10004D2D8(v0 + 32);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_10004D2D8(v0 + v4);

  return swift_deallocObject();
}

uint64_t sub_1002AABD8(char a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_1002A7DD0(a1, a2, a3, a4, *(void (**)(uint64_t *))(v4 + 16), *(void *)(v4 + 24), (void *)(v4 + 32), v4 + v10, (void *)(v4 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1002AACA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FEED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002AAD0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FEED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for MediaLibraryError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MediaLibraryError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002AAED0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaLibraryError()
{
  return &type metadata for MediaLibraryError;
}

unint64_t sub_1002AAF10()
{
  unint64_t result = qword_1005FEED8;
  if (!qword_1005FEED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FEED8);
  }
  return result;
}

uint64_t sub_1002AAF74(uint64_t a1, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) == 1) {
      return v2 == 1;
    }
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    if (*(_OWORD *)a1 == 0)
    {
      uint64_t v6 = v4 | v5;
      return v2 == 2 && v6 == 0;
    }
    if (*(void *)a1 ^ 1 | *(void *)(a1 + 8))
    {
      if (v2 != 2 || v5 != 2) {
        return 0;
      }
    }
    else if (v2 != 2 || v5 != 1)
    {
      return 0;
    }
    if (v4) {
      return 0;
    }
  }
  else if (*((unsigned char *)a2 + 16))
  {
    return 0;
  }
  return 1;
}

void sub_1002AAFFC(char a1)
{
  sub_100041A98(v1 + 2, v1[5]);
  dispatch thunk of MediaLibraryClientProtocol.mostRecentRestoreToken.getter();
  if (v3)
  {
    if ((a1 & 1) == 0)
    {
      uint64_t v4 = (void *)v1[10];
      NSString v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v6 = String._bridgeToObjectiveC()();
      [v4 setValue:v5 forKey:v6];

      return;
    }
    swift_bridgeObjectRelease();
    unint64_t v10 = (void *)v1[10];
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 valueForKey:v11];

    if (v12)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v15, 0, sizeof(v15));
    }
    sub_100004C04((uint64_t)v15, (uint64_t)v16);
    if (v17)
    {
      if (swift_dynamicCast())
      {
        NSString v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v14 = String._bridgeToObjectiveC()();
        [v10 setValue:v13 forKey:v14];

        return;
      }
    }
    else
    {
      sub_100054B1C((uint64_t)v16, &qword_1005F5D30);
    }
    sub_10005C4DC();
    swift_allocError();
    char v9 = 0;
    *(void *)uint64_t v7 = 0xD000000000000050;
    unint64_t v8 = 0x80000001004DB170;
  }
  else
  {
    sub_10005C4DC();
    swift_allocError();
    unint64_t v8 = 0;
    char v9 = 2;
    *(void *)uint64_t v7 = 2;
  }
  *(void *)(v7 + 8) = v8;
  *(unsigned char *)(v7 + 16) = v9;
  swift_willThrow();
}

uint64_t sub_1002AB264()
{
  uint64_t v1 = *(void **)(v0 + 80);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 valueForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100004C04((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast()) {
      return v5;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100054B1C((uint64_t)v7, &qword_1005F5D30);
    return 0;
  }
}

void sub_1002AB38C(char a1, void (*a2)(uint64_t, uint64_t, void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1002ADECC(a5, a1 & 1);
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  char v9 = (void *)static OS_os_log.restore.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10046D010;
  *(void *)(v10 + 56) = &type metadata for Int;
  *(void *)(v10 + 64) = &protocol witness table for Int;
  *(void *)(v10 + 32) = a5;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  if (a1) {
    sub_1002AC8E0(1, a2, a3);
  }
  else {
    sub_1002AB600(a2, a3);
  }
}

uint64_t sub_1002AB4D8(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t, uint64_t))
{
  static os_log_type_t.error.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v4 = (void *)static OS_os_log.restore.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10046D010;
  swift_getErrorValue();
  uint64_t v6 = Error.localizedDescription.getter();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10004DA4C();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  return a2(a1, 0, 1, 1);
}

void sub_1002AB600(void (*a1)(uint64_t, uint64_t, void), uint64_t a2)
{
  uint64_t v5 = sub_10005B948(1);
  if ((v7 & 0x100) != 0)
  {
    uint64_t v109 = v5;
    uint64_t v110 = v6;
    char v111 = v7;
    if (a1) {
      a1(v5, v6, v7 | 0x100u);
    }
    sub_100059530(v109, v110, v111, 1);
  }
  else
  {
    uint64_t v8 = (objc_class *)sub_100054B78(&qword_1005FF058);
    char v9 = (char *)objc_allocWithZone(v8);
    uint64_t v10 = &v9[*(void *)((swift_isaMask & *(void *)v9) + 0x180)];
    *(void *)uint64_t v10 = 0;
    v10[8] = 2;
    NSString v11 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v9[*(void *)((swift_isaMask & *(void *)v9) + 0x188)];
    *NSString v11 = sub_1002AE1D4;
    v11[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v2;
    v132.receiver = v9;
    v132.super_class = v8;
    swift_retain();
    id v12 = (char *)objc_msgSendSuper2(&v132, "init");
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(v2 + 64);
    NSString v14 = (objc_class *)sub_100054B78(&qword_1005FF060);
    uint64_t v15 = (char *)objc_allocWithZone(v14);
    id v16 = &v15[*(void *)((swift_isaMask & *(void *)v15) + 0x180)];
    *(void *)id v16 = 0;
    v16[8] = 2;
    uint64_t v17 = (void (**)(uint64_t *, uint64_t, uint64_t))&v15[*(void *)((swift_isaMask & *(void *)v15) + 0x188)];
    *uint64_t v17 = sub_1002AE26C;
    v17[1] = (void (*)(uint64_t *, uint64_t, uint64_t))v13;
    v131.receiver = v15;
    v131.super_class = v14;
    swift_unknownObjectRetain();
    uint64_t v18 = (char *)[super init];
    uint64_t v19 = *(void *)(v2 + 56);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    id v21 = (objc_class *)sub_100054B78(&qword_1005FF068);
    id v22 = (char *)objc_allocWithZone(v21);
    double v23 = &v22[*(void *)((swift_isaMask & *(void *)v22) + 0x180)];
    *(void *)double v23 = 0;
    v23[8] = 2;
    double v24 = &v22[*(void *)((swift_isaMask & *(void *)v22) + 0x188)];
    *(void *)double v24 = sub_1002AE2AC;
    *((void *)v24 + 1) = v20;
    v130.receiver = v22;
    v130.super_class = v21;
    swift_unknownObjectRetain();
    [super init];
    int64_t v25 = (objc_class *)sub_100054B78((uint64_t *)&unk_1005FF070);
    unint64_t v26 = (char *)objc_allocWithZone(v25);
    int64_t v27 = &v26[*(void *)((swift_isaMask & *(void *)v26) + 0x180)];
    *(void *)int64_t v27 = 0;
    v27[8] = 2;
    BOOL v28 = v18;
    uint64_t v29 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v26[*(void *)((swift_isaMask & *(void *)v26) + 0x188)];
    *uint64_t v29 = sub_1002AE2B4;
    v29[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2;
    v129.receiver = v26;
    v129.super_class = v25;
    swift_retain();
    id v114 = [super init];
    uint64_t v30 = swift_allocObject();
    swift_weakInit();
    uint64_t v31 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
    *((void *)v31 + 2) = v30;
    *((void *)v31 + 3) = a1;
    *((void *)v31 + 4) = a2;
    uint64_t v32 = (objc_class *)sub_100054B78((uint64_t *)&unk_1005FF010);
    uint64_t v33 = objc_allocWithZone(v32);
    int64_t v34 = (char *)v33 + *(void *)((swift_isaMask & *v33) + 0x180);
    *(void *)int64_t v34 = 0;
    v34[8] = 2;
    uint64_t v35 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v33 + *(void *)((swift_isaMask & *v33) + 0x188));
    *uint64_t v35 = sub_1002AE304;
    v35[1] = v31;
    uint64_t v112 = (uint64_t)a1;
    uint64_t v113 = a2;
    sub_10004ACDC((uint64_t)a1);
    v128.receiver = v33;
    v128.super_class = v32;
    id v122 = [super init];
    uint64_t v36 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v37 = (uint64_t (**)(uint64_t))&v12[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    uint64_t v38 = *(void *)&v12[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    *uint64_t v37 = sub_1002AE324;
    v37[1] = (uint64_t (*)(uint64_t))v36;
    sub_1000536BC(v38);
    self;
    uint64_t v118 = v12;
    uint64_t v39 = swift_dynamicCastObjCClass();
    if (v39)
    {
      uint64_t v40 = v39;
      swift_getObjectType();
      uint64_t v41 = swift_conformsToProtocol2();
      uint64_t v42 = v41 ? v41 : 0;
      if (v41 ? v40 : 0)
      {
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v44 = swift_allocObject();
        *(void *)(v44 + 24) = v42;
        swift_unknownObjectWeakInit();
        uint64_t v45 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v46 = swift_allocObject();
        *(void *)(v46 + 16) = v45;
        *(void *)(v46 + 24) = v44;
        uint64_t v47 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v42 + 72);
        id v48 = (id)swift_unknownObjectRetain();
        swift_retain();
        swift_retain();
        v47(sub_10004AF2C, v46, ObjectType, v42);
        swift_release();
        swift_release();
        swift_release();
        v123.receiver = v28;
        v123.super_class = (Class)type metadata accessor for BaseOperation();
        [super addDependency:v40];
      }
    }
    uint64_t v49 = swift_allocObject();
    uint64_t v50 = v119;
    swift_unknownObjectWeakInit();
    uint64_t v51 = (uint64_t (**)(uint64_t))&v28[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    uint64_t v52 = *(void *)&v28[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    *uint64_t v51 = sub_1002AE32C;
    v51[1] = (uint64_t (*)(uint64_t))v49;
    uint64_t v53 = v28;
    sub_1000536BC(v52);
    self;
    uint64_t v54 = swift_dynamicCastObjCClass();
    char v117 = v53;
    if (v54)
    {
      uint64_t v55 = v54;
      swift_getObjectType();
      uint64_t v56 = swift_conformsToProtocol2();
      uint64_t v57 = v56 ? v56 : 0;
      if (v56 ? v55 : 0)
      {
        uint64_t v59 = swift_getObjectType();
        uint64_t v60 = swift_allocObject();
        *(void *)(v60 + 24) = v57;
        swift_unknownObjectWeakInit();
        uint64_t v61 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v62 = swift_allocObject();
        *(void *)(v62 + 16) = v61;
        *(void *)(v62 + 24) = v60;
        uint64_t v63 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v57 + 72);
        swift_unknownObjectRetain();
        uint64_t v64 = v53;
        swift_retain();
        swift_retain();
        v63(sub_10004AF2C, v62, v59, v57);
        uint64_t v50 = v119;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v65 = (objc_class *)type metadata accessor for BaseOperation();
        v124.receiver = v119;
        v124.super_class = v65;
        [super addDependency:v55];

        uint64_t v53 = v117;
      }
    }
    uint64_t v66 = v50;

    uint64_t v67 = swift_allocObject();
    long long v68 = v114;
    swift_unknownObjectWeakInit();
    uint64_t v69 = (uint64_t (**)(uint64_t))&v66[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    uint64_t v70 = *(void *)&v66[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    *uint64_t v69 = sub_1002AE324;
    v69[1] = (uint64_t (*)(uint64_t))v67;
    sub_1000536BC(v70);
    self;
    uint64_t v71 = swift_dynamicCastObjCClass();
    if (v71)
    {
      uint64_t v72 = v71;
      swift_getObjectType();
      uint64_t v73 = swift_conformsToProtocol2();
      uint64_t v74 = v73 ? v73 : 0;
      if (v73 ? v72 : 0)
      {
        uint64_t v120 = swift_getObjectType();
        uint64_t v76 = swift_allocObject();
        *(void *)(v76 + 24) = v74;
        swift_unknownObjectWeakInit();
        uint64_t v77 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v78 = swift_allocObject();
        *(void *)(v78 + 16) = v77;
        *(void *)(v78 + 24) = v76;
        long long v79 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v74 + 72);
        swift_unknownObjectRetain();
        uint64_t v80 = v66;
        swift_retain();
        swift_retain();
        v79(sub_10004AF2C, v78, v120, v74);
        long long v68 = v114;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v81 = (objc_class *)type metadata accessor for BaseOperation();
        v125.receiver = v114;
        v125.super_class = v81;
        [super addDependency:v72];
      }
    }
    uint64_t v82 = v68;

    uint64_t v83 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unint64_t v84 = (uint64_t (**)(uint64_t))&v82[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    uint64_t v85 = *(void *)&v82[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    *unint64_t v84 = sub_10018A578;
    v84[1] = (uint64_t (*)(uint64_t))v83;
    sub_1000536BC(v85);
    self;
    uint64_t v86 = swift_dynamicCastObjCClass();
    if (v86)
    {
      uint64_t v87 = v86;
      swift_getObjectType();
      uint64_t v88 = swift_conformsToProtocol2();
      if (v88) {
        uint64_t v89 = v88;
      }
      else {
        uint64_t v89 = 0;
      }
      if (v88) {
        uint64_t v90 = v87;
      }
      else {
        uint64_t v90 = 0;
      }
      if (v90)
      {
        uint64_t v115 = swift_getObjectType();
        uint64_t v91 = swift_allocObject();
        *(void *)(v91 + 24) = v89;
        swift_unknownObjectWeakInit();
        uint64_t v92 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v121 = v66;
        uint64_t v93 = swift_allocObject();
        *(void *)(v93 + 16) = v92;
        *(void *)(v93 + 24) = v91;
        long long v94 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v89 + 72);
        swift_unknownObjectRetain();
        long long v95 = v82;
        swift_retain();
        swift_retain();
        v94(sub_10004AF2C, v93, v115, v89);
        swift_release();
        swift_release();
        uint64_t v66 = v121;
        swift_release();
        long long v96 = (objc_class *)type metadata accessor for BaseOperation();
        v126.receiver = v122;
        v126.super_class = v96;
        [super addDependency:v87];
      }
    }
    long long v97 = (char *)v122;

    uint64_t v98 = swift_allocObject();
    *(void *)(v98 + 16) = v112;
    *(void *)(v98 + 24) = v113;
    uint64_t v99 = (uint64_t (**)(uint64_t))&v97[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
    uint64_t v100 = *(void *)&v97[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
    *uint64_t v99 = sub_1002AE338;
    v99[1] = (uint64_t (*)(uint64_t))v98;
    sub_10004ACDC(v112);
    sub_1000536BC(v100);

    id v101 = sub_100010AA0();
    sub_100054B78((uint64_t *)&unk_1005FA7F0);
    uint64_t v102 = swift_allocObject();
    *(_OWORD *)(v102 + 16) = xmmword_100472D30;
    *(void *)(v102 + 32) = v118;
    *(void *)(v102 + 40) = v117;
    *(void *)(v102 + 48) = v66;
    *(void *)(v102 + 56) = v82;
    *(void *)(v102 + 64) = v97;
    uint64_t v127 = v102;
    specialized Array._endMutation()();
    sub_10004D29C(0, (unint64_t *)&unk_1005FF020);
    id v103 = v118;
    uint64_t v104 = v117;
    uint64_t v105 = v66;
    uint64_t v106 = v82;
    int v107 = v97;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v101 addOperations:isa waitUntilFinished:0];
  }
}

void sub_1002AC290(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10005CADC;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = *(uint64_t (**)(uint64_t))(a4 + 16);
  swift_retain();
  uint64_t v11 = swift_retain();
  id v12 = (void *)v10(v11);
  swift_release();
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = v7;
  v13[3] = v12;
  void v13[4] = sub_1002AE37C;
  _OWORD v13[5] = v9;
  v16[4] = sub_1002AE3D0;
  void v16[5] = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_10003B424;
  v16[3] = &unk_10055DEE8;
  NSString v14 = _Block_copy(v16);
  swift_bridgeObjectRetain();
  id v15 = v12;
  swift_retain();
  swift_release();
  [v15 performBlock:v14];
  _Block_release(v14);
  swift_release();
}

uint64_t sub_1002AC420(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(a1, 0);
  }
  sub_10024369C();
  uint64_t v6 = swift_allocError();
  uint64_t *v7 = a1;
  swift_errorRetain();
  a3(v6, 1);

  return swift_errorRelease();
}

void sub_1002AC4C4(uint64_t a1, void (*a2)(void **), uint64_t a3, void *a4)
{
  uint64_t v5 = *(void *)a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(*(void *)a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(*(void *)a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v8)
    {
      v8 &= v8 - 1;
      goto LABEL_5;
    }
    int64_t v12 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    if (v12 >= v9) {
      goto LABEL_25;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v10;
    if (!v13)
    {
      int64_t v10 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_25;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v10);
      if (!v13)
      {
        int64_t v10 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_25;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v10);
        if (!v13)
        {
          int64_t v10 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_25;
          }
          uint64_t v13 = *(void *)(v5 + 8 * v10);
          if (!v13)
          {
            int64_t v10 = v12 + 4;
            if (v12 + 4 >= v9) {
              goto LABEL_25;
            }
            uint64_t v13 = *(void *)(v5 + 8 * v10);
            if (!v13) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    uint64_t v8 = (v13 - 1) & v13;
LABEL_5:
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [a4 cancelDownloadsForEpisodeUuid:v11 userInitiated:1];
  }
  int64_t v14 = v12 + 5;
  if (v14 < v9)
  {
    uint64_t v13 = *(void *)(v5 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v10 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_29;
        }
        if (v10 >= v9) {
          goto LABEL_25;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v10);
        ++v14;
        if (v13) {
          goto LABEL_24;
        }
      }
    }
    int64_t v10 = v14;
    goto LABEL_24;
  }
LABEL_25:
  swift_release();
  uint64_t v15 = swift_bridgeObjectRetain();
  id v16 = sub_10025C5D8(v15);
  swift_bridgeObjectRelease();
  uint64_t v18 = v16;
  char v19 = 0;
  a2(&v18);

  swift_release();
}

uint64_t sub_1002AC6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  sub_100041A98((void *)(a4 + 16), *(void *)(a4 + 40));
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10005CADC;
  *(void *)(v8 + 24) = v7;
  swift_retain();
  dispatch thunk of MediaLibraryClientProtocol.deleteEpisodes(identifiers:completion:)();

  return swift_release();
}

uint64_t sub_1002AC7B0(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(0, 0);
  }
  swift_errorRetain();
  a3(a1, 1);

  return sub_10018ACD8(a1, 1);
}

uint64_t sub_1002AC830@<X0>(uint64_t (*a1)(void, void, void)@<X2>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result || (sub_1002AAFFC(1), uint64_t result = swift_release(), !v2))
  {
    if (a1) {
      uint64_t result = a1(0, 0, 0);
    }
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

void sub_1002AC8E0(char a1, void (*a2)(uint64_t, uint64_t, void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10005B948(a1);
  uint64_t v86 = a3;
  if ((v10 & 0x100) != 0)
  {
    uint64_t v66 = v8;
    uint64_t v67 = v9;
    unsigned __int8 v68 = v10;
    static os_log_type_t.error.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v69 = (void *)static OS_os_log.restore.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v70 = swift_allocObject();
    *(_OWORD *)(v70 + 16) = xmmword_10046D030;
    unint64_t v71 = sub_10004DA4C();
    unint64_t v72 = v71;
    uint64_t v73 = 28526;
    if (a1) {
      uint64_t v73 = 7562617;
    }
    unint64_t v74 = 0xE200000000000000;
    if (a1) {
      unint64_t v74 = 0xE300000000000000;
    }
    *(void *)(v70 + 56) = &type metadata for String;
    *(void *)(v70 + 64) = v71;
    *(void *)(v70 + 32) = v73;
    *(void *)(v70 + 40) = v74;
    v91[0] = v66;
    v91[1] = v67;
    unsigned __int8 v92 = v68;
    sub_10005C4DC();
    uint64_t v75 = Error.localizedDescription.getter();
    *(void *)(v70 + 96) = &type metadata for String;
    *(void *)(v70 + 104) = v72;
    *(void *)(v70 + 72) = v75;
    *(void *)(v70 + 80) = v76;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    if (a2)
    {
      sub_100058170(v66, v67, v68);
      a2(v66, v67, v68 | 0x100u);
      sub_100059530(v66, v67, v68, 1);
    }
    sub_100059530(v66, v67, v68, 1);
  }
  else
  {
    uint64_t v11 = swift_allocObject();
    char v12 = a1 & 1;
    *(unsigned char *)(v11 + 16) = v12;
    *(void *)(v11 + 24) = v3;
    uint64_t v13 = (objc_class *)sub_100054B78(&qword_1005FF008);
    int64_t v14 = (char *)objc_allocWithZone(v13);
    uint64_t v15 = &v14[*(void *)((swift_isaMask & *(void *)v14) + 0x180)];
    *(void *)uint64_t v15 = 0;
    v15[8] = 2;
    id v16 = (uint64_t (**)(uint64_t, void (*)(uint64_t *), uint64_t))&v14[*(void *)((swift_isaMask & *(void *)v14) + 0x188)];
    *id v16 = sub_1002ADD20;
    v16[1] = (uint64_t (*)(uint64_t, void (*)(uint64_t *), uint64_t))v11;
    v93.receiver = v14;
    v93.super_class = v13;
    swift_retain();
    uint64_t v17 = (char *)[super init];
    uint64_t v18 = *(void *)(v4 + 56);
    long long v84 = *(_OWORD *)(v4 + 64);
    sub_100056D54(v4 + 16, (uint64_t)v91);
    char v19 = (objc_class *)type metadata accessor for RestoreDownloadedEpisodesOperation();
    uint64_t v20 = (char *)objc_allocWithZone(v19);
    id v21 = &v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_input];
    *(void *)id v21 = 0;
    v21[8] = 2;
    *(void *)&v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation____lazy_storage___serialQueue] = 0;
    sub_100056D54((uint64_t)v91, (uint64_t)&v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_mediaLibrary]);
    *(_OWORD *)&v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_episodeStorage] = v84;
    *(void *)&v20[OBJC_IVAR____TtC8Podcasts34RestoreDownloadedEpisodesOperation_downloadsManager] = v18;
    v90.receiver = v20;
    v90.super_class = v19;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    id v22 = [super init];
    sub_10004D2D8((uint64_t)v91);
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v23;
    *(unsigned char *)(v24 + 24) = v12;
    *(void *)(v24 + 32) = a2;
    *(void *)(v24 + 40) = a3;
    int64_t v25 = (objc_class *)sub_100054B78((uint64_t *)&unk_1005FF010);
    unint64_t v26 = objc_allocWithZone(v25);
    int64_t v27 = (char *)v26 + *(void *)((swift_isaMask & *v26) + 0x180);
    *(void *)int64_t v27 = 0;
    v27[8] = 2;
    BOOL v28 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v26 + *(void *)((swift_isaMask & *v26) + 0x188));
    *BOOL v28 = sub_1002ADDAC;
    v28[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v24;
    uint64_t v83 = (uint64_t)a2;
    sub_10004ACDC((uint64_t)a2);
    v89.receiver = v26;
    v89.super_class = v25;
    id v29 = [super init];
    uint64_t v30 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v31 = (uint64_t (**)(uint64_t))&v17[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    uint64_t v32 = *(void *)&v17[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    *uint64_t v31 = sub_1002ADE08;
    v31[1] = (uint64_t (*)(uint64_t))v30;
    sub_1000536BC(v32);
    self;
    uint64_t v85 = v17;
    uint64_t v33 = swift_dynamicCastObjCClass();
    if (v33)
    {
      uint64_t v34 = v33;
      swift_getObjectType();
      uint64_t v35 = swift_conformsToProtocol2();
      uint64_t v36 = v35 ? v35 : 0;
      if (v35 ? v34 : 0)
      {
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v38 = swift_allocObject();
        *(void *)(v38 + 24) = v36;
        swift_unknownObjectWeakInit();
        uint64_t v39 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v81 = v29;
        uint64_t v40 = swift_allocObject();
        *(void *)(v40 + 16) = v39;
        *(void *)(v40 + 24) = v38;
        uint64_t v41 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v36 + 72);
        id v77 = (id)swift_unknownObjectRetain();
        swift_retain();
        swift_retain();
        v41(sub_10004AF2C, v40, ObjectType, v36);
        swift_release();
        swift_release();
        id v29 = v81;
        swift_release();
        v87.receiver = v22;
        v87.super_class = (Class)type metadata accessor for BaseOperation();
        [super addDependency:v34];
      }
    }
    uint64_t v42 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unint64_t v43 = (uint64_t (**)(uint64_t))&v22[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    uint64_t v44 = *(void *)&v22[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
    char *v43 = sub_10018A578;
    v43[1] = (uint64_t (*)(uint64_t))v42;
    uint64_t v45 = v22;
    sub_1000536BC(v44);
    self;
    uint64_t v46 = swift_dynamicCastObjCClass();
    if (v46)
    {
      uint64_t v47 = v46;
      swift_getObjectType();
      uint64_t v48 = swift_conformsToProtocol2();
      if (v48) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 0;
      }
      if (v48) {
        uint64_t v50 = v47;
      }
      else {
        uint64_t v50 = 0;
      }
      if (v50)
      {
        uint64_t v80 = swift_getObjectType();
        uint64_t v51 = swift_allocObject();
        *(void *)(v51 + 24) = v49;
        swift_unknownObjectWeakInit();
        uint64_t v52 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v82 = v29;
        uint64_t v53 = swift_allocObject();
        *(void *)(v53 + 16) = v52;
        *(void *)(v53 + 24) = v51;
        uint64_t v54 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v49 + 72);
        swift_unknownObjectRetain();
        uint64_t v78 = v45;
        swift_retain();
        swift_retain();
        v54(sub_10004A488, v53, v80, v49);
        swift_release();
        swift_release();
        id v29 = v82;
        swift_release();
        uint64_t v55 = (objc_class *)type metadata accessor for BaseOperation();
        v88.receiver = v82;
        v88.super_class = v55;
        [super addDependency:v47];
      }
    }
    uint64_t v56 = (char *)v29;

    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v83;
    *(void *)(v57 + 24) = v86;
    uint64_t v58 = (uint64_t (**)(uint64_t))&v56[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
    uint64_t v59 = *(void *)&v56[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
    *uint64_t v58 = sub_1002ADE14;
    v58[1] = (uint64_t (*)(uint64_t))v57;
    sub_10004ACDC(v83);
    sub_1000536BC(v59);

    id v60 = sub_100010AA0();
    sub_100054B78((uint64_t *)&unk_1005FA7F0);
    uint64_t v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_10046D070;
    *(void *)(v61 + 32) = v85;
    *(void *)(v61 + 40) = v45;
    *(void *)(v61 + 48) = v56;
    v91[0] = v61;
    specialized Array._endMutation()();
    sub_10004D29C(0, (unint64_t *)&unk_1005FF020);
    id v62 = v85;
    uint64_t v63 = v45;
    uint64_t v64 = v56;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v60 addOperations:isa waitUntilFinished:0];
  }
}

uint64_t sub_1002AD19C(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  swift_retain();
  if (a4)
  {
    swift_release();
    sub_100041A98((void *)(a5 + 16), *(void *)(a5 + 40));
    uint64_t v10 = dispatch thunk of MediaLibraryClientProtocol.postRestoreCandidates()();
    static os_log_type_t.default.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v11 = (void *)static OS_os_log.restore.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10046D010;
    uint64_t v13 = *(void *)(v10 + 16);
    *(void *)(v12 + 56) = &type metadata for Int;
    *(void *)(v12 + 64) = &protocol witness table for Int;
    *(void *)(v12 + 32) = v13;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    uint64_t v17 = v10;
    char v18 = 0;
    a2(&v17);
    return swift_bridgeObjectRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v15 = (void *)static OS_os_log.restore.getter();
    os_log(_:dso:log:_:_:)();

    sub_100041A98((void *)(a5 + 16), *(void *)(a5 + 40));
    id v16 = (void *)swift_allocObject();
    void v16[2] = sub_10005CAE4;
    v16[3] = v9;
    v16[4] = a5;
    swift_retain();
    dispatch thunk of MediaLibraryClientProtocol.reconcileMostRecentlyDownloadedEpisodes(completion:)();
    return swift_release();
  }
}

uint64_t sub_1002AD3FC(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v9 = (void *)static OS_os_log.restore.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_10046D010;
    swift_getErrorValue();
    uint64_t v11 = Error.localizedDescription.getter();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_10004DA4C();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    swift_errorRetain();
    a3(a1, 1);
    sub_1002AE1C8(a1, 1);
    return sub_1002AE1C8(a1, 1);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    static os_log_type_t.default.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v6 = (void *)static OS_os_log.restore.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_10046D010;
    *(void *)(v7 + 56) = &type metadata for Int;
    *(void *)(v7 + 64) = &protocol witness table for Int;
    *(void *)(v7 + 32) = v5;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    sub_1002AE034(v5);
    return ((uint64_t (*)(uint64_t, void))a3)(a1, 0);
  }
}

uint64_t sub_1002AD60C@<X0>(char a1@<W2>, uint64_t (*a2)(void, void, void)@<X3>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong() || (sub_1002AAFFC(a1 & 1), uint64_t result = swift_release(), !v3))
  {
    static os_log_type_t.default.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v8 = (void *)static OS_os_log.restore.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10046D010;
    unint64_t v10 = sub_10004DA4C();
    uint64_t v11 = 0x6563655274736F6DLL;
    if (a1) {
      uint64_t v11 = 0x7473655274736F70;
    }
    unint64_t v12 = 0xEA0000000000746ELL;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = v10;
    if (a1) {
      unint64_t v12 = 0xEB0000000065726FLL;
    }
    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v12;
    os_log(_:dso:log:_:_:)();

    uint64_t result = swift_bridgeObjectRelease();
    if (a2) {
      uint64_t result = a2(0, 0, 0);
    }
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t sub_1002AD7A4(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  static os_log_type_t.error.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v4 = (void *)static OS_os_log.restore.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10046D010;
  swift_getErrorValue();
  uint64_t v6 = Error.localizedDescription.getter();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10004DA4C();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();

  uint64_t result = swift_bridgeObjectRelease();
  if (a2) {
    return a2(a1, 0, 257);
  }
  return result;
}

uint64_t sub_1002AD8D8(uint64_t a1)
{
  uint64_t v2 = &_swiftEmptyDictionarySingleton;
  uint64_t v41 = &_swiftEmptyDictionarySingleton;
  uint64_t v31 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v30 = (unint64_t)(63 - v3) >> 6;
  uint64_t v42 = &v35;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_25;
    }
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v30) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v31 + 8 * v11);
    int64_t v13 = v7 + 1;
    if (!v12)
    {
      int64_t v13 = v7 + 2;
      if (v7 + 2 >= v30) {
        goto LABEL_40;
      }
      unint64_t v12 = *(void *)(v31 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v7 + 3;
        if (v7 + 3 >= v30) {
          goto LABEL_40;
        }
        unint64_t v12 = *(void *)(v31 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v7 + 4;
          if (v7 + 4 >= v30) {
            goto LABEL_40;
          }
          unint64_t v12 = *(void *)(v31 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v7 = v13;
LABEL_25:
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_10026994C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v40);
    *(void *)&long long v39 = v17;
    *((void *)&v39 + 1) = v16;
    long long v37 = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    sub_10026994C((uint64_t)v38, (uint64_t)&v32);
    if (v33)
    {
      sub_10004D384(&v32, v36);
      long long v18 = v37;
      v34[2] = v37;
      sub_100004C04((uint64_t)v38, (uint64_t)v42);
      sub_10004D384(v36, v34);
      unint64_t v19 = v2[2];
      if (v2[3] <= v19)
      {
        uint64_t v20 = v19 + 1;
        swift_bridgeObjectRetain();
        sub_100279B60(v20, 1);
        uint64_t v2 = v41;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      id v21 = (char *)(v2 + 8);
      uint64_t v22 = -1 << *((unsigned char *)v2 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~v2[(v23 >> 6) + 8]) != 0)
      {
        unint64_t v25 = __clz(__rbit64((-1 << v23) & ~v2[(v23 >> 6) + 8])) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)&v21[8 * v24];
        }
        while (v29 == -1);
        unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      }
      *(void *)&v21[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
      *(_OWORD *)(v2[6] + 16 * v25) = v18;
      sub_10004D384(v34, (_OWORD *)(v2[7] + 32 * v25));
      ++v2[2];
      uint64_t v8 = (long long *)v42;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_100054B1C((uint64_t)&v37, &qword_1005FF050);
      uint64_t v8 = &v32;
    }
    uint64_t result = sub_100054B1C((uint64_t)v8, &qword_1005F5D30);
  }
  int64_t v14 = v7 + 5;
  if (v7 + 5 >= v30)
  {
LABEL_40:
    sub_10004E644();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v31 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v7 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v30) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v31 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1002ADC90()
{
  sub_10004D2D8(v0 + 16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002ADCE8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002ADD20(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  return sub_1002AD19C(a1, a2, a3, *(unsigned char *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1002ADD2C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002ADD64()
{
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1002ADDAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1002AD60C(*(unsigned char *)(v1 + 24), *(uint64_t (**)(void, void, void))(v1 + 32), a1);
}

uint64_t sub_1002ADDD0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002ADE08(uint64_t a1)
{
  return sub_1003CB548(a1, v1);
}

uint64_t sub_1002ADE14(uint64_t a1)
{
  return sub_1002AD7A4(a1, *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16));
}

uint64_t sub_1002ADE3C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002ADE7C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002ADEBC(uint64_t a1, char a2)
{
  return sub_1002AD3FC(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_1002ADECC(uint64_t a1, char a2)
{
  sub_100054B78((uint64_t *)&unk_1005FF030);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D030;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v6;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(unsigned char *)(inited + 96) = a2;
  unint64_t v7 = sub_10016F450(inited);
  uint64_t v8 = sub_1002AD8D8(v7);
  swift_bridgeObjectRelease();
  sub_10004D29C(0, (unint64_t *)&unk_1005FF040);
  id v9 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  sub_10027726C(v8);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 reportWithType:6 userInfo:isa location:@"rstr" reason:0];
}

void sub_1002AE034(uint64_t a1)
{
  sub_100054B78((uint64_t *)&unk_1005FF030);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D030;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v4;
  id v5 = [objc_allocWithZone((Class)NSNumber) initWithBool:1];
  *(void *)(inited + 120) = sub_10004D29C(0, (unint64_t *)&unk_1005F9460);
  *(void *)(inited + 96) = v5;
  unint64_t v6 = sub_10016F450(inited);
  uint64_t v7 = sub_1002AD8D8(v6);
  swift_bridgeObjectRelease();
  sub_10004D29C(0, (unint64_t *)&unk_1005FF040);
  id v8 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  sub_10027726C(v7);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 reportWithType:6 userInfo:isa location:@"rstr" reason:0];
}

uint64_t sub_1002AE1C8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002AE1D4@<X0>(uint64_t a1@<X8>)
{
  sub_100041A98((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t result = dispatch thunk of MediaLibraryClientProtocol.postRestoreCandidates()();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1002AE234()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void sub_1002AE26C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1002AC290(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1002AE274()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void sub_1002AE2AC(uint64_t a1, void (*a2)(void **), uint64_t a3)
{
  sub_1002AC4C4(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_1002AE2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AC6C8(a1, a2, a3, v3);
}

uint64_t sub_1002AE2BC()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1002AE304@<X0>(uint64_t a1@<X8>)
{
  return sub_1002AC830(*(uint64_t (**)(void, void, void))(v1 + 24), a1);
}

uint64_t sub_1002AE324(uint64_t a1)
{
  return sub_1003CB4E0(a1, v1);
}

uint64_t sub_1002AE32C(uint64_t a1)
{
  return sub_1003CB514(a1, v1);
}

uint64_t sub_1002AE338(uint64_t a1)
{
  return sub_1002AD7A4(a1, *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16));
}

uint64_t sub_1002AE370(uint64_t a1, char a2)
{
  return sub_1002AC7B0(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1002AE37C(uint64_t a1, char a2)
{
  return sub_1002AC420(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1002AE388()
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

void sub_1002AE3D0()
{
  sub_10040EECC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(id, uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1002AE3DC()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002AE41C(uint64_t a1)
{
  return sub_1002AB4D8(a1, *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_1002AE424()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1002AE45C(char a1, void (*a2)(uint64_t, uint64_t, void), uint64_t a3)
{
  sub_1002AB38C(a1 & 1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t assignWithCopy for RestoreRunnerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100058170(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10005C4BC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RestoreRunnerError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10005C4BC(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for RestoreRunnerError()
{
  return &type metadata for RestoreRunnerError;
}

unsigned char *storeEnumTagSinglePayload for PostRestoreProceedOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002AE5E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostRestoreProceedOption()
{
  return &type metadata for PostRestoreProceedOption;
}

unint64_t sub_1002AE620()
{
  unint64_t result = qword_1005FF080;
  if (!qword_1005FF080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF080);
  }
  return result;
}

uint64_t static Result<>.success.getter()
{
  type metadata accessor for Result();

  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.zip<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __chkstk_darwin(a1);
  id v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, v11, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a4, v9, *(void *)(a2 + 24));
    swift_getTupleTypeMetadata2();
  }
  else
  {
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v13 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a4, v9, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v13, a1, a3);
  }
  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1002AE910()
{
  uint64_t v0 = sub_100054B78((uint64_t *)&unk_1005F7750);
  sub_10018A30C(v0, qword_1005FF090);
  sub_10018A370(v0, (uint64_t)qword_1005FF090);
  return URL.init(string:)();
}

void sub_1002AE978()
{
  uint64_t v0 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = [self defaultWorkspace];
  if (v3)
  {
    unsigned int v4 = v3;
    if (qword_1005F5A98 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_10018A370(v0, (uint64_t)qword_1005FF090);
    sub_10003B19C(v5, (uint64_t)v2);
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    id v9 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v2, 1, v6) != 1)
    {
      URL._bridgeToObjectiveC()(v8);
      id v9 = v10;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v2, v6);
    }
    sub_10016E9D8((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 openSensitiveURL:v9 withOptions:isa];
  }
  else
  {
    __break(1u);
  }
}

id _sSo13UIApplicationC8PodcastsE18openGlobalSettings19deepLinkDestinationy0B2UI0de4DeepG5StateC0H0O_tF_0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v16 - v8;
  static URL.iOSAutomaticallyDownloadPreferences.getter();
  sub_10003B19C((uint64_t)v9, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
  {
    sub_100222D54((uint64_t)v9);
    return (id)sub_100222D54((uint64_t)v7);
  }
  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
  id result = [self defaultWorkspace];
  if (result)
  {
    uint64_t v12 = result;
    URL._bridgeToObjectiveC()(v11);
    int64_t v14 = v13;
    sub_10016E9D8((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 openSensitiveURL:v14 withOptions:isa];

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v7 = v9;
    return (id)sub_100222D54((uint64_t)v7);
  }
  __break(1u);
  return result;
}

void _sSo13UIApplicationC8PodcastsE18openGlobalSettingsyyF_0()
{
  uint64_t v0 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = [self defaultWorkspace];
  if (v3)
  {
    uint64_t v4 = v3;
    static URL.iOSGlobalPreferences.getter();
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v8 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) != 1)
    {
      URL._bridgeToObjectiveC()(v7);
      uint64_t v8 = v9;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v2, v5);
    }
    sub_10016E9D8((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 openSensitiveURL:v8 withOptions:isa];
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MTLibrary.cleanUpNeutralInterests()()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.database.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = Logger.logObject.getter();
  if (os_log_type_enabled(v5, v4))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "Deleting all neutral interests", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v7 = [self sharedInstance];
  id v8 = [v7 importContext];

  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v8;
  aBlock[4] = sub_1002AF1C0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055E0F8;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v8;
  swift_release();
  [v12 performBlock:v11];
  _Block_release(v11);
}

uint64_t sub_1002AF184()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_1002AF1C0()
{
  sub_1002AF504(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(uint64_t))sub_1002AF9FC);
}

Swift::Void __swiftcall MTLibrary.deleteAllInterestsBlockingCaller()()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.database.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = Logger.logObject.getter();
  if (os_log_type_enabled(v5, v4))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "Immediately deleting all interests", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v7 = [self sharedInstance];
  id v8 = [v7 importContext];

  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v8;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1002AF6C8;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_10004A010;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  void aBlock[3] = &unk_10055E170;
  id v12 = _Block_copy(aBlock);
  id v13 = v8;
  swift_retain();
  swift_release();
  [v13 performBlockAndWait:v12];

  _Block_release(v12);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v13) {
    __break(1u);
  }
}

void sub_1002AF504(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    a3(a2);
  }
}

uint64_t sub_1002AF5B8(id *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [*a1 lastUpdatedDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  char v7 = static Date.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

void sub_1002AF6C8()
{
  sub_1002AF504(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(uint64_t))sub_1002B01B8);
}

uint64_t sub_1002AF6F8()
{
  return swift_deallocObject();
}

id sub_1002AF708(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  __chkstk_darwin(v4);
  id v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.database.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  id v12 = a1;
  id v13 = Logger.logObject.getter();
  if (os_log_type_enabled(v13, v11))
  {
    int64_t v14 = (_DWORD *)swift_slowAlloc();
    uint64_t v22 = v7;
    uint64_t v15 = v14;
    *int64_t v14 = 134218496;
    id v26 = [v12 adamID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v23 = a2;
    *((_WORD *)v15 + 6) = 2048;
    [v12 interestValue];
    id v26 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v15 + 11) = 2048;
    id v17 = [v12 lastUpdatedDate];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Date.timeIntervalSinceReferenceDate.getter();
    unint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v25);
    id v26 = v19;
    a2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v13, v11, "Deleting interest as part of interest cleanup. AdamID: %llu, interestValue: %f, lastUpdatedDate: %f", (uint8_t *)v15, 0x20u);
    uint64_t v7 = v22;
    swift_slowDealloc();
  }
  else
  {

    id v13 = v12;
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return [a2 deleteObject:v12];
}

uint64_t sub_1002AF9FC(void *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  uint64_t v53 = v3;
  __chkstk_darwin(v2);
  uint64_t v55 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v54 = (char *)&v51 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  int64_t v14 = (char *)&v51 - v13;
  __chkstk_darwin(v12);
  unint64_t v16 = (unint64_t)&v51 - v15;
  kMTInterestEntityName.getter();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  type metadata accessor for MTInterest();
  long long v18 = (void *)static MTInterest.predicateForNeutralInterests()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v20 = [a1 objectsInEntity:v17 predicate:v18 sortDescriptors:isa];

  if (v20
    && (sub_1001F42B4(),
        unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v20,
        uint64_t v22 = sub_1003E4CFC(v21),
        swift_bridgeObjectRelease(),
        v22))
  {
    unint64_t v58 = (unint64_t)v22;
    static Logger.database.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    uint64_t v24 = Logger.logObject.getter();
    if (!os_log_type_enabled((os_log_t)v24, v23)) {
      goto LABEL_7;
    }
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 134217984;
    swift_beginAccess();
    if (v58 >> 62) {
      goto LABEL_35;
    }
    uint64_t v26 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      uint64_t v57 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v24, v23, "Starting to delete %ld neutral interests.", v25, 0xCu);
      swift_slowDealloc();
LABEL_7:

      BOOL v28 = *(void (**)(char *, uint64_t))(v6 + 8);
      v6 += 8;
      unint64_t v27 = v28;
      v28((char *)v16, v5);
      type metadata accessor for SyncKeysRepository();
      uint64_t v29 = (void *)static SyncKeysRepository.shared.getter();
      SyncKeysRepository.interestLastSyncTimestamp.getter();
      char v31 = v30;

      long long v32 = v55;
      if (v31) {
        static Date.distantFuture.getter();
      }
      else {
        Date.init(timeIntervalSinceReferenceDate:)();
      }
      uint64_t v37 = swift_beginAccess();
      unint64_t v38 = v58;
      __chkstk_darwin(v37);
      *(&v51 - 2) = (uint64_t)v32;
      swift_bridgeObjectRetain();
      unint64_t v39 = (unint64_t)sub_1002F8574(sub_1002B06EC, &v51 - 4, v38);
      unint64_t v58 = v39;
      swift_bridgeObjectRelease();
      static Logger.database.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v40 = Logger.logObject.getter();
      if (os_log_type_enabled(v40, v23))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 134217984;
        if (v39 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v42 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        uint64_t v56 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v23, "Proceeding to delete %ld interests.", v41, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v27(v14, v5);
      unint64_t v16 = v58;
      uint64_t v25 = (uint8_t *)(v58 >> 62);
      if (v58 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
        if (!v24) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v24 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v24) {
          goto LABEL_27;
        }
      }
      if (v24 >= 1) {
        break;
      }
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    for (uint64_t i = 0; i != v24; ++i)
    {
      if ((v16 & 0xC000000000000001) != 0) {
        id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v44 = *(id *)(v16 + 8 * i + 32);
      }
      uint64_t v45 = v44;
      sub_1002AF708(v44, a1);
    }
LABEL_27:
    swift_bridgeObjectRelease();
    static Logger.database.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 134217984;
      if (v25)
      {
        swift_bridgeObjectRetain();
        uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v49 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v50 = v52;
      swift_bridgeObjectRelease();
      uint64_t v56 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Finished deleting %ld interests.", v48, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v50 = v52;
    }
    v27(v54, v5);
    [a1 saveInCurrentBlock];
    (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v50);
    return swift_bridgeObjectRelease();
  }
  else
  {
    static Logger.database.getter();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unable to fetch interests when attempting to cleanup. Cannot delete any interests.", v35, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

id sub_1002B01B8(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v36 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t)&v36 - v10;
  kMTInterestEntityName.getter();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [self truePredicate];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v15 = [a1 objectsInEntity:v12 predicate:v13 sortDescriptors:isa];

  if (v15
    && (sub_1001F42B4(),
        unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v15,
        unint64_t v17 = (unint64_t)sub_1003E4CFC(v16),
        swift_bridgeObjectRelease(),
        v17))
  {
    static Logger.database.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    swift_bridgeObjectRetain_n();
    unint64_t v19 = Logger.logObject.getter();
    BOOL v20 = os_log_type_enabled(v19, v18);
    unint64_t v21 = (uint8_t *)(v17 >> 62);
    uint64_t v36 = (uint8_t *)(v17 >> 62);
    if (!v20)
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_11;
    }
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v21 = 134217984;
    if (v17 >> 62) {
      goto LABEL_29;
    }
    uint64_t v22 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v18, "Starting to delete all %ld interests.", v21, 0xCu);
      swift_slowDealloc();

      unint64_t v21 = v36;
LABEL_11:
      BOOL v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v3 += 8;
      unint64_t v27 = v28;
      v28((char *)v11, v2);
      if (v21)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        if (!v11) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v11) {
          goto LABEL_20;
        }
      }
      if (v11 >= 1) {
        break;
      }
      __break(1u);
LABEL_29:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    for (uint64_t i = 0; i != v11; ++i)
    {
      if ((v17 & 0xC000000000000001) != 0) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v30 = *(id *)(v17 + 8 * i + 32);
      }
      char v31 = v30;
      sub_1002AF708(v30, a1);
    }
LABEL_20:
    swift_bridgeObjectRelease();
    static Logger.database.getter();
    swift_bridgeObjectRetain();
    long long v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v34 = 134217984;
      if (v36)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v37 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Finished deleting %ld interests.", v34, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v27(v9, v2);
    return [a1 saveInCurrentBlock];
  }
  else
  {
    static Logger.database.getter();
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to fetch interests when attempting to cleanup. Cannot delete any interests.", v25, 2u);
      swift_slowDealloc();
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_1002B06EC(id *a1)
{
  return sub_1002AF5B8(a1) & 1;
}

uint64_t PlayNextChapterIntentImplementation.init(asPartOf:performing:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  uint64_t ChapterIntent = type metadata accessor for PlayNextChapterIntent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(ChapterIntent - 8) + 8))(a2, ChapterIntent);
  return v5;
}

uint64_t PlayNextChapterIntentImplementation.perform()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001D3DA8;
  return PlaybackController.seekToNextChapter()();
}

uint64_t sub_1002B0830@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  uint64_t ChapterIntent = type metadata accessor for PlayNextChapterIntent();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(ChapterIntent - 8) + 8))(a1, ChapterIntent);
  *a2 = v6;
  return result;
}

uint64_t sub_1002B08C4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1001D3FD4;
  return PlaybackController.seekToNextChapter()();
}

ValueMetadata *type metadata accessor for PlayNextChapterIntentImplementation()
{
  return &type metadata for PlayNextChapterIntentImplementation;
}

uint64_t sub_1002B096C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 56;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 56);
  if (*(void *)(v5 + 16))
  {
    sub_100056D54(v5 + 32, a1);
    uint64_t result = swift_beginAccess();
    if (*(void *)(*(void *)v3 + 16))
    {
      sub_100056D54(*(void *)v3 + 32, (uint64_t)v6);
      uint64_t result = sub_1002B0F90((uint64_t)v6);
      if (*(void *)(*(void *)v3 + 16))
      {
        sub_1001FB8E8(0, 1);
        return swift_endAccess();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1002B0A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  int64_t v12 = *(void *)(a5 + 16);
  if (v12)
  {
    id v30 = _swiftEmptyArrayStorage;
    sub_1001BA8A4(0, v12, 0);
    uint64_t v13 = a5 + 32;
    do
    {
      sub_10004D328(v13, (uint64_t)v29);
      sub_10004D328((uint64_t)v29, (uint64_t)v28);
      sub_100054B78((uint64_t *)&unk_1005F7F40);
      if (swift_dynamicCast())
      {
        sub_100042FC4(&v27, (uint64_t)v26);
        sub_100054B78((uint64_t *)&unk_1005F8340);
        int64_t v14 = (void *)swift_allocObject();
        *((_OWORD *)v14 + 1) = xmmword_10046D010;
        sub_100042FC4(v26, (uint64_t)(v14 + 4));
      }
      else
      {
        sub_100054B78(&qword_1005F8360);
        if (swift_dynamicCast()) {
          int64_t v14 = (void *)v27;
        }
        else {
          int64_t v14 = _swiftEmptyArrayStorage;
        }
      }
      sub_10004D2D8((uint64_t)v28);
      sub_10004D2D8((uint64_t)v29);
      id v15 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001BA8A4(0, v15[2] + 1, 1);
        id v15 = v30;
      }
      unint64_t v17 = v15[2];
      unint64_t v16 = v15[3];
      if (v17 >= v16 >> 1)
      {
        sub_1001BA8A4(v16 > 1, v17 + 1, 1);
        id v15 = v30;
      }
      _OWORD v15[2] = v17 + 1;
      v15[v17 + 4] = v14;
      v13 += 32;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v8 = a4;
    uint64_t v6 = v5;
    uint64_t v10 = a2;
    uint64_t v9 = a3;
    uint64_t v11 = a1;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v15 = _swiftEmptyArrayStorage;
  }
  *(void *)&long long v27 = _swiftEmptyArrayStorage;
  uint64_t v18 = v15[2];
  if (v18)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v18; ++i)
    {
      uint64_t v20 = swift_bridgeObjectRetain();
      sub_1001B2070(v20);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 136))(v11, v10, v9, v8, v27);
}

void sub_1002B0CE0()
{
  *(unsigned char *)(v0 + 64) = (*(unsigned char *)(v0 + 64) & 1) == 0;
}

uint64_t sub_1002B0CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 64) = 0;
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  *(void *)(v10 + 48) = a5;
  *(void *)(v10 + 56) = a5;
  swift_bridgeObjectRetain();
  return v10;
}

uint64_t MTToggleTestAction.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void sub_1002B0DB4()
{
  *(unsigned char *)(v0 + 64) = (*(unsigned char *)(v0 + 64) & 1) == 0;
  id v1 = [self _applePodcastsFoundationSharedUserDefaults];
  uint64_t v2 = *(unsigned __int8 *)(v0 + 64);
  id v3 = String._bridgeToObjectiveC()();
  [v1 setBool:v2 forKey:v3];
}

void sub_1002B0E54()
{
}

uint64_t sub_1002B0E84()
{
  return swift_bridgeObjectRelease();
}

uint64_t MTToggleUserDefaultTestAction.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MTToggleUserDefaultTestAction.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MTTestAction()
{
  return self;
}

uint64_t type metadata accessor for MTToggleTestAction()
{
  return self;
}

uint64_t type metadata accessor for MTToggleUserDefaultTestAction()
{
  return self;
}

uint64_t sub_1002B0F90(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FF3D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1002B0FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = String._bridgeToObjectiveC()();
  [v3 updatePlaylistWithUuid:v5 inContext:a3];
}

uint64_t sub_1002B104C(long long *a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  id v3 = [self mainBundle];
  v15._object = (void *)0x80000001004DB5C0;
  v4._object = (void *)0x80000001004DB5A0;
  v4._uint64_t countAndFlagsBits = 0xD000000000000013;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0xD000000000000013;
  Swift::String v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v15);

  *(Swift::String *)(v1 + 72) = v6;
  *(_OWORD *)(v1 + 88) = xmmword_10046F4B0;
  uint64_t v7 = v1 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_metricsLabel;
  uint64_t v8 = enum case for MetricsLabel.removeFromUpNext(_:);
  uint64_t v9 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  uint64_t v10 = v1 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_contextActionType;
  uint64_t v11 = enum case for ContextActionType.removeFromUpNext(_:);
  uint64_t v12 = type metadata accessor for ContextActionType();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  sub_100042FC4(a1, v1 + 32);
  return v1;
}

uint64_t sub_1002B1208()
{
  uint64_t v1 = type metadata accessor for InteractionContext.Page();
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InteractionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v14 - v9;
  if (os_feature_enabled_unfollowed_shows_in_up_next())
  {
    swift_beginAccess();
    uint64_t v11 = *(void *)(v0 + 16);
    if (v11)
    {
      swift_retain();
      dispatch thunk of ContextActionsConfiguration.context.getter();
      swift_release();
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v8, v4);
      InteractionContext.page.getter();
      char See = InteractionContext.Page.isUpNextSeeAll.getter();
      sub_1001B4BB0((uint64_t)v3);
      if ((See & 1) != 0
        || (InteractionContext.view.getter(), (static InteractionContext.View.== infix(_:_:)() & 1) != 0))
      {
        LOBYTE(v11) = 1;
      }
      else
      {
        InteractionContext.view.getter();
        LOBYTE(v11) = static InteractionContext.View.== infix(_:_:)();
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
  }
  else
  {
    LOBYTE(v11) = 0;
  }
  return v11 & 1;
}

uint64_t sub_1002B13EC()
{
  uint64_t v1 = v0[3];
  if (v1 && !*(unsigned char *)(v1 + 32))
  {
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v2 = *(void *)(v1 + 24);
    swift_retain();
    sub_1001DCD9C(v3, v2, 0);
    swift_bridgeObjectRelease();
    sub_100041A98(v0 + 4, v0[7]);
    dispatch thunk of LibraryActionControllerProtocol.removeFromUpNext(uuids:)();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002B14A0()
{
  swift_release();
  swift_release();
  sub_10004D2D8(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_metricsLabel;
  uint64_t v2 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1001DE9EC(v0 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_contextActionType);

  return swift_deallocClassInstance();
}

uint64_t sub_1002B1578()
{
  return type metadata accessor for RemoveFromUpNextEpisodeContextAction();
}

uint64_t type metadata accessor for RemoveFromUpNextEpisodeContextAction()
{
  uint64_t result = qword_1005FF408;
  if (!qword_1005FF408) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002B15CC()
{
  type metadata accessor for MetricsLabel();
  if (v0 <= 0x3F)
  {
    sub_1001DE3EC();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1002B16C0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1002B16F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_metricsLabel;
  uint64_t v4 = type metadata accessor for MetricsLabel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1002B1764@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DE984(v1 + OBJC_IVAR____TtC8Podcasts36RemoveFromUpNextEpisodeContextAction_contextActionType, a1);
}

uint64_t sub_1002B1780@<X0>(uint64_t a1@<X8>)
{
  id v3 = [self systemGrayColor];
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 80);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_10046F4B0;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v4;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002B17FC(uint64_t a1)
{
  uint64_t result = sub_1002B1884((unint64_t *)&unk_100608B30);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002B1840(uint64_t a1)
{
  uint64_t result = sub_1002B1884(&qword_1005FAAF0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002B1884(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RemoveFromUpNextEpisodeContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B18C8()
{
  uint64_t v1 = type metadata accessor for InteractionContext.Page();
  __chkstk_darwin(v1);
  id v3 = (unsigned __int8 *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InteractionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 16))
  {
    if (*(void *)(v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText))
    {
      swift_beginAccess();
      if (*(void *)(v0 + 24))
      {
        swift_retain();
        dispatch thunk of ContextActionsConfiguration.context.getter();
        InteractionContext.page.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (swift_getEnumCaseMultiPayload() == 5) {
          return *v3;
        }
        sub_1001B4BB0((uint64_t)v3);
      }
    }
  }
  return 0;
}

void sub_1002B1A64()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v33 - v13;
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v33 - v15;
  sub_1003B06E4();
  uint64_t v17 = swift_retain();
  id v18 = sub_1002B1E94(v17);
  swift_release();
  if (v18)
  {
    id v19 = [v18 shortURL];
    if (v19)
    {
      uint64_t v20 = v19;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v11, 0, 1, v21);
    }
    else
    {
      uint64_t v21 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v11, 1, 1, v21);
    }
    sub_100222DB4((uint64_t)v11, (uint64_t)v14);
    type metadata accessor for URL();
    uint64_t v24 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1, v21) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v16, v14, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v16, 0, 1, v21);
      goto LABEL_13;
    }
    id v25 = [v18 shareURL];
    if (v25)
    {
      uint64_t v26 = v25;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v8, v27, 1, v21);
    sub_100222DB4((uint64_t)v8, (uint64_t)v16);
  }
  else
  {
    uint64_t v22 = type metadata accessor for URL();
    os_log_type_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    v23(v14, 1, 1, v22);
    v23(v16, 1, 1, v22);
  }
  sub_100054B1C((uint64_t)v14, (uint64_t *)&unk_1005F7750);
LABEL_13:
  sub_100222DB4((uint64_t)v16, (uint64_t)v5);
  uint64_t v28 = v1 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink;
  swift_beginAccess();
  sub_100222E1C((uint64_t)v5, v28);
  swift_endAccess();
  swift_beginAccess();
  if (*(void *)(v1 + 24))
  {
    type metadata accessor for TranscriptSelectionContextActionConfiguration(0);
    uint64_t v29 = swift_dynamicCastClass();
    if (v29)
    {
      id v30 = *(void **)(v29 + qword_1005FAD68);
      id v31 = v30;
    }
    else
    {
      type metadata accessor for NowPlayingTranscriptSelectionContextActionConfiguration();
      id v30 = (void *)swift_dynamicCastClass();
      if (v30)
      {
        swift_retain();
        id v30 = (void *)NowPlayingTranscriptSelectionContextActionConfiguration.selectedText.getter();
        swift_release();
      }
    }
  }
  else
  {

    id v30 = 0;
  }
  long long v32 = *(void **)(v1 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText);
  *(void *)(v1 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText) = v30;
}

id sub_1002B1E94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EpisodeOffer();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return 0;
  }
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  switch(*(unsigned char *)(a1 + 32))
  {
    case 1:
      if (!*(void *)(v9 + 16)) {
        return 0;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v4);
      swift_bridgeObjectRetain();
      id v19 = sub_1002C5634();
      if (v19)
      {
        uint64_t v20 = v19;
        if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime + 8)) {
          double v21 = 0.0;
        }
        else {
          double v21 = *(double *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime);
        }
        if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime + 8)) {
          double v22 = 0.0;
        }
        else {
          double v22 = *(double *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime);
        }
        id v15 = [objc_allocWithZone((Class)MTShareUtilDataSource) initWithPlayerItem:v19 selectedReferenceTime:v21 selectedPlayerTime:v22 currentPlayerTime:0.0];
        sub_1001DCDF8(v9, v8, 1u);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
      else
      {
        sub_1001DCDF8(v9, v8, 1u);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return 0;
      }
      return v15;
    case 2:
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        os_log_type_t v23 = (void *)_CocoaArrayWrapper.endIndex.getter();
        if (v23) {
          goto LABEL_24;
        }
      }
      else
      {
        os_log_type_t v23 = *(void **)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v23)
        {
LABEL_24:
          if ((v9 & 0xC000000000000001) != 0)
          {
            id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_58;
            }
            id v24 = *(id *)(v9 + 32);
          }
          os_log_type_t v23 = v24;
        }
      }
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime + 8)) {
        double v25 = 0.0;
      }
      else {
        double v25 = *(double *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime);
      }
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime + 8)) {
        double v26 = 0.0;
      }
      else {
        double v26 = *(double *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime);
      }
      id v15 = [objc_allocWithZone((Class)MTShareUtilDataSource) initWithPlayerItem:v23 selectedReferenceTime:v25 selectedPlayerTime:v26 currentPlayerTime:0.0];

      uint64_t v16 = v9;
      uint64_t v17 = v8;
      unsigned __int8 v18 = 2;
      goto LABEL_54;
    case 3:
      unint64_t v27 = swift_bridgeObjectRetain();
      unint64_t v28 = (unint64_t)sub_100401778(v27);
      unint64_t v29 = v28;
      if (v28 >> 62)
      {
        if (_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_37;
        }
LABEL_46:
        id v31 = 0;
        goto LABEL_47;
      }
      if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_46;
      }
LABEL_37:
      if ((v29 & 0xC000000000000001) != 0)
      {
LABEL_58:
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x1002B2388);
        }
        id v30 = *(id *)(v29 + 32);
      }
      id v31 = v30;
LABEL_47:
      swift_bridgeObjectRelease();
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime + 8)) {
        double v32 = 0.0;
      }
      else {
        double v32 = *(double *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime);
      }
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime + 8)) {
        double v33 = 0.0;
      }
      else {
        double v33 = *(double *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime);
      }
      id v15 = [objc_allocWithZone((Class)MTShareUtilDataSource) initWithPlayerItem:v31 selectedReferenceTime:v32 selectedPlayerTime:v33 currentPlayerTime:0.0];

      uint64_t v16 = v9;
      uint64_t v17 = v8;
      unsigned __int8 v18 = 3;
LABEL_54:
      sub_1001DCDF8(v16, v17, v18);
      return v15;
    default:
      if (!*(void *)(v9 + 16)) {
        return 0;
      }
      uint64_t v10 = self;
      swift_bridgeObjectRetain();
      sub_1001DCD9C(v9, v8, 0);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [v10 mediaItemForEpisodeWithUUID:v11];

      if (!v12)
      {
        sub_1001DCDF8(v9, v8, 0);
        return 0;
      }
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime + 8)) {
        double v13 = 0.0;
      }
      else {
        double v13 = *(double *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_referenceTime);
      }
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime + 8)) {
        double v14 = 0.0;
      }
      else {
        double v14 = *(double *)(v2 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_playerTime);
      }
      id v15 = [objc_allocWithZone((Class)MTShareUtilDataSource) initWithPlayerItem:v12 selectedReferenceTime:v13 selectedPlayerTime:v14 currentPlayerTime:0.0];

      uint64_t v16 = v9;
      uint64_t v17 = v8;
      unsigned __int8 v18 = 0;
      goto LABEL_54;
  }
}

void sub_1002B2398()
{
  uint64_t v1 = type metadata accessor for ShowOffer();
  uint64_t v94 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v86 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EpisodeOffer();
  uint64_t v95 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  objc_super v93 = *(void **)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned __int8 v92 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  id v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  double v14 = (char *)&v86 - v13;
  uint64_t v15 = sub_100054B78(&qword_1005F5D20);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  unsigned __int8 v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v86 - v19;
  uint64_t v21 = *(void *)(v0 + 16);
  if (!v21) {
    return;
  }
  double v22 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_selectedText);
  if (!v22) {
    return;
  }
  uint64_t v88 = v7;
  objc_super v89 = v14;
  uint64_t v90 = v0;
  uint64_t v91 = v22;
  unint64_t v23 = *(void *)(v21 + 16);
  uint64_t v24 = *(void *)(v21 + 24);
  switch(*(unsigned char *)(v21 + 32))
  {
    case 1:
      uint64_t v38 = v90;
      if (*(void *)(v23 + 16))
      {
        unint64_t v39 = v23 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
        uint64_t v40 = v21;
        (*(void (**)(char *, unint64_t, uint64_t))(v95 + 16))(v6, v39, v4);
        uint64_t v41 = self;
        uint64_t v87 = v40;
        swift_retain();
        objc_super v93 = v91;
        unsigned __int8 v92 = (char *)[v41 generalPasteboard];
        uint64_t v42 = v38 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink;
        swift_beginAccess();
        sub_10003B19C(v42, (uint64_t)v12);
        uint64_t v91 = (void *)EpisodeOffer.title.getter();
        uint64_t v44 = v43;
        EpisodeOffer.showOffer.getter();
        uint64_t v45 = ShowOffer.title.getter();
        uint64_t v47 = v46;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v3, v1);
        if (EpisodeOffer.releaseDate.getter())
        {
          LazyDate.value.getter();
          swift_release();
        }
        else
        {
          uint64_t v66 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v18, 1, 1, v66);
        }
        uint64_t v67 = v93;
        sub_1002E0EEC(v93, (uint64_t)v91, v44, v45, v47, (uint64_t)v18, (uint64_t)v12, 200);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100054B1C((uint64_t)v18, &qword_1005F5D20);
        sub_100054B1C((uint64_t)v12, (uint64_t *)&unk_1005F7750);
        NSString v68 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v69 = v92;
        [v92 setString:v68];

        swift_release();
        (*(void (**)(char *, uint64_t))(v95 + 8))(v6, v4);
      }
      return;
    case 2:
      if (v23 >> 62)
      {
        swift_retain();
        id v83 = v91;
        sub_1001DCD9C(v23, v24, 2u);
        uint64_t v48 = (void *)_CocoaArrayWrapper.endIndex.getter();
        if (v48) {
          goto LABEL_13;
        }
LABEL_40:
        sub_1001DCDF8(v23, v24, 2u);
        swift_release();
        long long v84 = v91;

        return;
      }
      uint64_t v48 = *(void **)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      id v49 = v91;
      sub_1001DCD9C(v23, v24, 2u);
      if (!v48) {
        goto LABEL_40;
      }
LABEL_13:
      if ((v23 & 0xC000000000000001) != 0)
      {
        id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_50;
        }
        id v50 = *(id *)(v23 + 32);
      }
      uint64_t v51 = v50;
      sub_1001DCDF8(v23, v24, 2u);
      id v52 = [self generalPasteboard];
      uint64_t v53 = v90 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink;
      swift_beginAccess();
      uint64_t v54 = (uint64_t)v89;
      sub_10003B19C(v53, (uint64_t)v89);
      sub_1002E15EC(v91, v51, v54, 200);
      sub_100054B1C(v54, (uint64_t *)&unk_1005F7750);
      NSString v55 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v52 setString:v55];

      swift_release();
      return;
    case 3:
      swift_retain();
      uint64_t v48 = v91;
      sub_1001DCD9C(v23, v24, 3u);
      unint64_t v56 = (unint64_t)sub_100401778(v23);
      sub_1001DCDF8(v23, v24, 3u);
      if (v56 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v24 = (uint64_t)v89;
        uint64_t v4 = v90;
        if (v85) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v24 = (uint64_t)v89;
        uint64_t v4 = v90;
        if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_19:
          if ((v56 & 0xC000000000000001) != 0)
          {
LABEL_50:
            id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              JUMPOUT(0x1002B3030);
            }
            id v57 = *(id *)(v56 + 32);
          }
          unint64_t v58 = v57;
          swift_bridgeObjectRelease();
          id v59 = [self generalPasteboard];
          uint64_t v60 = v4 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink;
          swift_beginAccess();
          sub_10003B19C(v60, v24);
          sub_1002E15EC(v48, v58, v24, 200);
          sub_100054B1C(v24, (uint64_t *)&unk_1005F7750);
          NSString v61 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v59 setString:v61];

          swift_release();
          return;
        }
      }
      swift_release();

      goto LABEL_45;
    default:
      uint64_t v25 = v21;
      swift_retain();
      double v26 = v91;
      sub_1001DCD9C(v23, v24, 0);
      swift_bridgeObjectRelease();
      if (*(void *)(v23 + 16))
      {
        uint64_t v87 = v25;
        uint64_t v28 = *(void *)(v23 + 32);
        unint64_t v27 = *(void *)(v23 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        id v29 = [self sharedInstance];
        id v30 = [v29 mainQueueContext];

        NSString v31 = String._bridgeToObjectiveC()();
        id v32 = [v30 episodeForUuid:v31];

        if (v32)
        {
          swift_bridgeObjectRelease();
          id v33 = [v32 title];
          if (v33)
          {
            os_log_type_t v34 = v33;
            uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v37 = v36;
          }
          else
          {
            uint64_t v35 = 0;
            uint64_t v37 = 0xE000000000000000;
          }
          uint64_t v70 = v90;
          id v71 = [v32 podcast];
          if (v71)
          {
            unint64_t v72 = v71;
            id v73 = [v71 title];

            if (v73)
            {
              uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v76 = v75;
            }
            else
            {
              uint64_t v74 = 0;
              uint64_t v76 = 0xE000000000000000;
            }
            uint64_t v70 = v90;
          }
          else
          {
            uint64_t v74 = 0;
            uint64_t v76 = 0xE000000000000000;
          }
          [v32 pubDate];
          Date.init(timeIntervalSinceReferenceDate:)();
          uint64_t v77 = type metadata accessor for Date();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v20, 0, 1, v77);
          uint64_t v78 = v70 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink;
          swift_beginAccess();
          uint64_t v79 = v78;
          uint64_t v80 = (uint64_t)v89;
          sub_10003B19C(v79, (uint64_t)v89);
          sub_1002E0EEC(v26, v35, v37, v74, v76, (uint64_t)v20, v80, 200);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100054B1C(v80, (uint64_t *)&unk_1005F7750);
          sub_100054B1C((uint64_t)v20, &qword_1005F5D20);
          id v81 = [self generalPasteboard];
          NSString v82 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v81 setString:v82];

          swift_release();
        }
        else
        {
          id v62 = v92;
          static Logger.transcripts.getter();
          swift_bridgeObjectRetain();
          uint64_t v63 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v63, v64))
          {
            uint64_t v65 = (uint8_t *)swift_slowAlloc();
            v97[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v65 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v96 = sub_10004B974(v28, v27, v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed to fetch local episode with uuid %s to copy selection from transcript", v65, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }

          swift_release();
          (*((void (**)(char *, uint64_t))v93 + 1))(v62, v88);
        }
      }
      else
      {
        swift_release();

LABEL_45:
        swift_bridgeObjectRelease();
      }
      return;
  }
}

uint64_t sub_1002B3040()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_metricsLabel;
  uint64_t v2 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100054B1C(v0 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_shareLink, (uint64_t *)&unk_1005F7750);

  return swift_deallocClassInstance();
}

uint64_t sub_1002B3128()
{
  return type metadata accessor for CopyTranscriptSelectionContextAction();
}

uint64_t type metadata accessor for CopyTranscriptSelectionContextAction()
{
  uint64_t result = qword_1005FF4E8;
  if (!qword_1005FF4E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002B317C()
{
  type metadata accessor for MetricsLabel();
  if (v0 <= 0x3F)
  {
    sub_10000927C();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1002B3280()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1002B32B0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1002B32E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts36CopyTranscriptSelectionContextAction_metricsLabel;
  uint64_t v4 = type metadata accessor for MetricsLabel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1002B3354@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ContextActionType.copyTranscriptSelection(_:);
  uint64_t v3 = type metadata accessor for ContextActionType();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t sub_1002B3438(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100267180(a1, a2, WitnessTable);
}

void *sub_1002B3498(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266A1C(a1, a2, WitnessTable);
}

uint64_t sub_1002B34F8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266B78(a1, a2, WitnessTable);
}

id sub_1002B3558(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266E10(a1, a2, WitnessTable);
}

uint64_t sub_1002B35B8(uint64_t a1)
{
  uint64_t result = sub_1002B3684(&qword_1005FF698);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002B35FC(uint64_t a1)
{
  uint64_t result = sub_1002B3684(&qword_1005FF6A0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002B3640(uint64_t a1)
{
  uint64_t result = sub_1002B3684(&qword_1005FF6A8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002B3684(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CopyTranscriptSelectionContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void MTWelcomeViewController.deferUntilAcknowledged(_:)(uint64_t a1, uint64_t a2)
{
  v4[4] = a1;
  v4[5] = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_10003B424;
  v4[3] = &unk_10055E350;
  uint64_t v3 = _Block_copy(v4);
  swift_retain();
  swift_release();
  [v2 addAcknowledgementCompletionBlock:v3];
  _Block_release(v3);
}

void sub_1002B377C(uint64_t a1, uint64_t a2)
{
  v4[4] = a1;
  v4[5] = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_10003B424;
  v4[3] = &unk_10055E378;
  uint64_t v3 = _Block_copy(v4);
  swift_retain();
  swift_release();
  [v2 addAcknowledgementCompletionBlock:v3];
  _Block_release(v3);
}

uint64_t sub_1002B3830@<X0>(void *a1@<X8>)
{
  return sub_10000D4B4(&qword_1005F74B0, a1);
}

id sub_1002B3850@<X0>(void *a1@<X8>)
{
  if (qword_1005F5AE0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = (void *)static PodcastsStateCoordinator.shared;
  *a1 = static PodcastsStateCoordinator.shared;

  return v2;
}

id sub_1002B38DC@<X0>(void *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  uint64_t v2 = static BaseObjectGraph.current.getter();
  id v3 = objc_allocWithZone((Class)type metadata accessor for ClassKitManager());
  id result = sub_10038A3B8(v2);
  *a1 = result;
  return result;
}

id sub_1002B3930@<X0>(void *a1@<X8>)
{
  return sub_100013D3C(&qword_1005FEB00, (SEL *)&selRef_sharedInstance, a1);
}

uint64_t sub_1002B394C@<X0>(void *a1@<X8>)
{
  return sub_100013D88((unint64_t *)&unk_1005FE480, a1);
}

id sub_1002B3964@<X0>(void *a1@<X8>)
{
  return sub_10000B550((SEL *)&selRef_defaultInstance, a1);
}

unint64_t sub_1002B3978@<X0>(void *a1@<X8>)
{
  id v2 = [self sharedApplication];
  a1[3] = &type metadata for UIAppSettingsBridge;
  unint64_t result = sub_1002B67B8();
  a1[4] = result;
  *a1 = v2;
  return result;
}

uint64_t sub_1002B39D4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  uint64_t v2 = type metadata accessor for LibraryRemovalController();
  swift_allocObject();
  uint64_t result = LibraryRemovalController.init(asPartOf:)();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for LibraryRemovalController;
  *a1 = result;
  return result;
}

uint64_t sub_1002B3A48@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000194CC((void (*)(void))&type metadata accessor for RecommendationsMetadataProvider, (uint64_t (*)(uint64_t))&RecommendationsMetadataProvider.init(asPartOf:), a1);
}

uint64_t sub_1002B3A74@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  type metadata accessor for HomePageProvider();
  swift_allocObject();
  uint64_t result = HomePageProvider.init(asPartOf:platformContext:)();
  *a1 = result;
  return result;
}

uint64_t sub_1002B3AD4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000194CC((void (*)(void))&type metadata accessor for EpisodeUpsellBannerDataProvider, (uint64_t (*)(uint64_t))&EpisodeUpsellBannerDataProvider.init(asPartOf:), a1);
}

uint64_t sub_1002B3B00@<X0>(void *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  uint64_t v2 = static BaseObjectGraph.current.getter();
  uint64_t v3 = type metadata accessor for PodcastsContextActionProvider();
  swift_allocObject();
  uint64_t v4 = sub_1000233A4(v2);
  swift_release();
  a1[3] = v3;
  uint64_t result = sub_1002B4798(&qword_1005FF7F0, (void (*)(uint64_t))type metadata accessor for PodcastsContextActionProvider);
  a1[4] = result;
  *a1 = v4;
  return result;
}

uint64_t sub_1002B3BAC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  uint64_t v2 = static BaseObjectGraph.current.getter();
  uint64_t v3 = type metadata accessor for TranscriptsContextActionsProviderImplementation();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  sub_100054B78((uint64_t *)&unk_1006033C0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  sub_100054B78(&qword_1005F7050);
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  *(void *)(v4 + 64) = v6;
  a1[3] = v3;
  uint64_t result = sub_1002B4798(&qword_1005FF7E8, (void (*)(uint64_t))type metadata accessor for TranscriptsContextActionsProviderImplementation);
  a1[4] = result;
  *a1 = v4;
  return result;
}

void sub_1002B3CAC(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v29 - v10;
  id v12 = [self _applePodcastsFoundationSharedUserDefaults];
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 stringForKey:v13];

  if (!v14)
  {
LABEL_9:
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = [v12 stringForKey:v20];

    if (v21)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v22 = String._bridgeToObjectiveC()();
      id v23 = [v12 stringForKey:v22];

      if (v23)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v24 = String._bridgeToObjectiveC()();
        unsigned __int8 v25 = [v12 BOOLForKey:v24];

        if ((v25 & 1) == 0)
        {
          id v26 = [self mainBundle];
          a1[3] = type metadata accessor for BundleAssetTranscriptProvider();
          a1[4] = (uint64_t)&protocol witness table for BundleAssetTranscriptProvider;
          sub_10004A244(a1);
          BundleAssetTranscriptProvider.init(ttmlFileName:signatureFileName:bundle:)();
          goto LABEL_16;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    a1[3] = type metadata accessor for TimeBombedTranscriptProvider();
    a1[4] = (uint64_t)&protocol witness table for TimeBombedTranscriptProvider;
    sub_10004A244(a1);
    static TimeBombedTranscriptProvider.foreground.getter();
LABEL_16:

    return;
  }
  id v30 = a1;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v12 URLForKey:v15];

  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_7;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v17(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    sub_100054B1C((uint64_t)v4, (uint64_t *)&unk_1005F7750);
    goto LABEL_8;
  }
  v17(v11, v4, v5);
  NSString v18 = String._bridgeToObjectiveC()();
  unsigned __int8 v19 = [v12 BOOLForKey:v18];

  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    swift_bridgeObjectRelease();
LABEL_8:
    a1 = v30;
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  uint64_t v27 = type metadata accessor for KCUTranscriptProvider();
  uint64_t v28 = v30;
  void v30[3] = v27;
  v28[4] = (uint64_t)&protocol witness table for KCUTranscriptProvider;
  sub_10004A244(v28);
  KCUTranscriptProvider.init(bearerToken:basePath:kcuTranscriptPath:kcuSignaturePath:)();

  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_1002B4210@<X0>(uint64_t *a1@<X8>)
{
  return sub_100004D60((void (*)(void))&type metadata accessor for NowPlayingAlignmentCoordinator, (uint64_t (*)(uint64_t))&NowPlayingAlignmentCoordinator.__allocating_init(asPartOf:), a1);
}

uint64_t sub_1002B423C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for PageContextTracker();
  uint64_t result = static PageContextTracker.shared.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002B4270@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AMSOAuthEndpointSubscriber();
  __chkstk_darwin(v2 - 8);
  AMSOAuthEndpointSubscriber.init()();
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  type metadata accessor for OAuthHUDViewHandler();
  swift_allocObject();
  OAuthHUDViewHandler.init(asPartOf:)();
  sub_1002B4798((unint64_t *)&unk_1005FF7D8, (void (*)(uint64_t))&type metadata accessor for OAuthHUDViewHandler);
  type metadata accessor for OAuthController();
  swift_allocObject();
  uint64_t result = OAuthController.init(endpointSubscriber:hudViewHandler:)();
  *a1 = result;
  return result;
}

id sub_1002B4394@<X0>(void **a1@<X8>)
{
  return sub_1002B43DC(&qword_1005F5B08, (void **)&static DebouncedAutoDownloadProcessor.sharedInstance, a1);
}

id sub_1002B43B8@<X0>(void **a1@<X8>)
{
  return sub_1002B43DC(&qword_1005F5A30, (void **)&static DebouncedAssetRemovalProcessor.sharedInstance, a1);
}

id sub_1002B43DC@<X0>(void *a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = *a2;
  *a3 = *a2;

  return v5;
}

uint64_t sub_1002B4430@<X0>(uint64_t *a1@<X8>)
{
  sub_100054B78(&qword_1005FF7A8);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1004733C0;
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  uint64_t v3 = type metadata accessor for RestorePurgedEpisodesTipProvider();
  swift_allocObject();
  uint64_t v4 = RestorePurgedEpisodesTipProvider.init(asPartOf:)();
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = &protocol witness table for RestorePurgedEpisodesTipProvider;
  *(void *)(v2 + 32) = v4;
  uint64_t v5 = type metadata accessor for RemoveOlderDownloadsTipProvider();
  static BaseObjectGraph.current.getter();
  uint64_t v6 = RemoveOlderDownloadsTipProvider.__allocating_init(asPartOf:)();
  *(void *)(v2 + 96) = v5;
  *(void *)(v2 + 104) = &protocol witness table for RemoveOlderDownloadsTipProvider;
  *(void *)(v2 + 72) = v6;
  static BaseObjectGraph.current.getter();
  uint64_t v7 = type metadata accessor for RemoveAbandonedDownloadsTipProvider();
  swift_allocObject();
  uint64_t v8 = RemoveAbandonedDownloadsTipProvider.init(asPartOf:)();
  *(void *)(v2 + 136) = v7;
  *(void *)(v2 + 144) = &protocol witness table for RemoveAbandonedDownloadsTipProvider;
  *(void *)(v2 + 112) = v8;
  static BaseObjectGraph.current.getter();
  uint64_t v9 = type metadata accessor for AddFavoriteCategoriesSearchTipProvider();
  swift_allocObject();
  uint64_t v10 = AddFavoriteCategoriesSearchTipProvider.init(asPartOf:)();
  *(void *)(v2 + 176) = v9;
  *(void *)(v2 + 184) = sub_1002B4798(&qword_1005FF7B0, (void (*)(uint64_t))&type metadata accessor for AddFavoriteCategoriesSearchTipProvider);
  *(void *)(v2 + 152) = v10;
  static BaseObjectGraph.current.getter();
  uint64_t v11 = type metadata accessor for CategoriesSavedTipProvider();
  swift_allocObject();
  uint64_t v12 = CategoriesSavedTipProvider.init(asPartOf:)();
  *(void *)(v2 + 216) = v11;
  *(void *)(v2 + 224) = sub_1002B4798(&qword_1005FF7B8, (void (*)(uint64_t))&type metadata accessor for CategoriesSavedTipProvider);
  *(void *)(v2 + 192) = v12;
  static BaseObjectGraph.current.getter();
  uint64_t v13 = type metadata accessor for NotFindingAnythingTipProvider();
  swift_allocObject();
  uint64_t v14 = NotFindingAnythingTipProvider.init(asPartOf:)();
  *(void *)(v2 + 256) = v13;
  *(void *)(v2 + 264) = sub_1002B4798(&qword_1005FF7C0, (void (*)(uint64_t))&type metadata accessor for NotFindingAnythingTipProvider);
  *(void *)(v2 + 232) = v14;
  static BaseObjectGraph.current.getter();
  uint64_t v15 = type metadata accessor for AddFavoriteCategoriesButtonTipProvider();
  swift_allocObject();
  uint64_t v16 = AddFavoriteCategoriesButtonTipProvider.init(asPartOf:)();
  *(void *)(v2 + 296) = v15;
  *(void *)(v2 + 304) = &protocol witness table for AddFavoriteCategoriesButtonTipProvider;
  *(void *)(v2 + 272) = v16;
  static BaseObjectGraph.current.getter();
  uint64_t v17 = type metadata accessor for StayUpToDateTipProvider();
  swift_allocObject();
  uint64_t v18 = StayUpToDateTipProvider.init(asPartOf:)();
  *(void *)(v2 + 336) = v17;
  *(void *)(v2 + 344) = &protocol witness table for StayUpToDateTipProvider;
  *(void *)(v2 + 312) = v18;
  a1[3] = sub_100054B78(&qword_1005FF7C8);
  a1[4] = sub_100044200(&qword_1005FF7D0, &qword_1005FF7C8);
  sub_10004A244(a1);
  return OrderedTipProvider<>.init(providers:)();
}

ValueMetadata *type metadata accessor for Dependencies()
{
  return &type metadata for Dependencies;
}

uint64_t sub_1002B4798(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B47E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v179 = a1;
  uint64_t v177 = sub_100054B78(&qword_1005FF818);
  id v178 = *(char **)(v177 - 8);
  __chkstk_darwin(v177);
  unint64_t v176 = (char *)&v131 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = sub_100054B78(&qword_1005FF820);
  uint64_t v175 = *(char **)(v174 - 8);
  __chkstk_darwin(v174);
  id v173 = (char *)&v131 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = sub_100054B78(&qword_1005FF828);
  double v172 = *(char **)(v171 - 8);
  __chkstk_darwin(v171);
  id v170 = (char *)&v131 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_100054B78(&qword_1005FF830);
  unint64_t v169 = *(char **)(v168 - 8);
  __chkstk_darwin(v168);
  int v167 = (char *)&v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_100054B78(&qword_1005FF838);
  uint64_t v166 = *(char **)(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v164 = (char *)&v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = type metadata accessor for TabChangeActionOpenStoreURLActionImplementation();
  uint64_t v162 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  Swift::String v160 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_100054B78(&qword_1005FF840);
  uint64_t v159 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  id v157 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_100054B78(&qword_1005FF848);
  uint64_t v156 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  unint64_t v154 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_100054B78(&qword_1005FF850);
  uint64_t v153 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  id v151 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for IgnorePurgedEpisodesActionImplementation();
  Swift::String v181 = *(void (***)(char *, uint64_t))(v150 - 8);
  __chkstk_darwin(v150);
  id v149 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for RestorePurgedEpisodesActionImplementation();
  uint64_t v148 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  int v146 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for IgnoreAbandonedDownloadsActionImplementation();
  uint64_t v145 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  unint64_t v143 = (char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for RemoveAbandonedDownloadsActionImplementation();
  uint64_t v142 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v140 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for DeclineEpisodeLimitRecommendationActionImplementation();
  uint64_t v139 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  id v137 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for AcceptEpisodeLimitRecommendationActionImplementation();
  uint64_t v136 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  unint64_t v134 = (char *)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t refreshed = type metadata accessor for RequestTipProviderRefreshActionImplementation();
  uint64_t v133 = *(void *)(refreshed - 8);
  __chkstk_darwin(refreshed);
  uint64_t v17 = (char *)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100054B78((uint64_t *)&unk_1005FF740);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v163 = (char *)&v131 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v184 = (char *)&v131 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v183 = (char *)&v131 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v194 = (char *)&v131 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v192 = (char *)&v131 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  Swift::String v190 = (char *)&v131 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  Swift::String v189 = (char *)&v131 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  Swift::String v188 = (char *)&v131 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  char v191 = (char *)&v131 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v193 = (char *)&v131 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  id v195 = (char *)&v131 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v196 = (char *)&v131 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v197 = (char *)&v131 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  UIMenuElementSize v198 = (char *)&v131 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  id v199 = (char *)&v131 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  id v52 = (char *)&v131 - v51;
  uint64_t v53 = __chkstk_darwin(v50);
  NSString v55 = (char *)&v131 - v54;
  __chkstk_darwin(v53);
  id v57 = (char *)&v131 - v56;
  RequestTipProviderRefreshActionImplementation.init()();
  uint64_t v58 = type metadata accessor for BaseObjectGraph();
  ActionDispatcher.init()();
  uint64_t v200 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  id v187 = v57;
  v200(v57, v55, v18);
  sub_1002B4798(&qword_1005FF858, (void (*)(uint64_t))&type metadata accessor for RequestTipProviderRefreshActionImplementation);
  uint64_t v59 = refreshed;
  ActionDispatcher.add<A>(_:)();
  id v201 = *(void (**)(char *, uint64_t))(v19 + 8);
  v201(v55, v18);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v17, v59);
  uint64_t v60 = v134;
  AcceptEpisodeLimitRecommendationActionImplementation.init()();
  ActionDispatcher.init()();
  uint64_t v186 = v55;
  NSString v61 = v200;
  v200(v55, v52, v18);
  sub_1002B4798(&qword_1005FF860, (void (*)(uint64_t))&type metadata accessor for AcceptEpisodeLimitRecommendationActionImplementation);
  uint64_t v62 = v135;
  ActionDispatcher.add<A>(_:)();
  v201(v52, v18);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v60, v62);
  uint64_t v63 = v137;
  DeclineEpisodeLimitRecommendationActionImplementation.init()();
  os_log_type_t v64 = v199;
  ActionDispatcher.init()();
  unint64_t v185 = v52;
  v61(v52, v64, v18);
  sub_1002B4798(&qword_1005FF868, (void (*)(uint64_t))&type metadata accessor for DeclineEpisodeLimitRecommendationActionImplementation);
  uint64_t v65 = v138;
  ActionDispatcher.add<A>(_:)();
  uint64_t v66 = v64;
  uint64_t v67 = v201;
  v201(v64, v18);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v63, v65);
  NSString v68 = v140;
  RemoveAbandonedDownloadsActionImplementation.init()();
  id v69 = v198;
  ActionDispatcher.init()();
  v61(v66, v69, v18);
  sub_1002B4798(&qword_1005FF870, (void (*)(uint64_t))&type metadata accessor for RemoveAbandonedDownloadsActionImplementation);
  uint64_t v70 = v141;
  ActionDispatcher.add<A>(_:)();
  id v71 = v69;
  v67(v69, v18);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v68, v70);
  unint64_t v72 = v143;
  IgnoreAbandonedDownloadsActionImplementation.init()();
  id v73 = v197;
  ActionDispatcher.init()();
  v61(v71, v73, v18);
  sub_1002B4798(&qword_1005FF878, (void (*)(uint64_t))&type metadata accessor for IgnoreAbandonedDownloadsActionImplementation);
  uint64_t v74 = v144;
  ActionDispatcher.add<A>(_:)();
  uint64_t v75 = v73;
  v67(v73, v18);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v72, v74);
  uint64_t v76 = v146;
  RestorePurgedEpisodesActionImplementation.init()();
  uint64_t v77 = v196;
  ActionDispatcher.init()();
  v61(v75, v77, v18);
  sub_1002B4798(&qword_1005FF880, (void (*)(uint64_t))&type metadata accessor for RestorePurgedEpisodesActionImplementation);
  uint64_t v78 = v147;
  ActionDispatcher.add<A>(_:)();
  v67(v77, v18);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v76, v78);
  uint64_t v79 = v149;
  IgnorePurgedEpisodesActionImplementation.init()();
  uint64_t v80 = v195;
  uint64_t v202 = v58;
  ActionDispatcher.init()();
  v61(v77, v80, v18);
  sub_1002B4798(&qword_1005FF888, (void (*)(uint64_t))&type metadata accessor for IgnorePurgedEpisodesActionImplementation);
  uint64_t v81 = v150;
  ActionDispatcher.add<A>(_:)();
  v67(v80, v18);
  v181[1](v79, v81);
  type metadata accessor for RemoveDownloadedEpisodesAction();
  sub_1002B4798(&qword_1005FF890, (void (*)(uint64_t))&type metadata accessor for RemoveDownloadedEpisodesAction);
  sub_1002B4798(&qword_1005FF898, (void (*)(uint64_t))&type metadata accessor for RemoveDownloadedEpisodesAction);
  NSString v82 = v151;
  IntentDelegatingActionImplementation.init()();
  id v83 = v193;
  ActionDispatcher.init()();
  long long v84 = v83;
  v61(v80, v83, v18);
  Swift::String v181 = (void (**)(char *, uint64_t))&protocol conformance descriptor for IntentDelegatingActionImplementation<A>;
  sub_100044200(&qword_1005FF8A0, &qword_1005FF850);
  uint64_t v85 = v152;
  ActionDispatcher.add<A>(_:)();
  uint64_t v86 = v201;
  v201(v84, v18);
  (*(void (**)(char *, uint64_t))(v153 + 8))(v82, v85);
  type metadata accessor for DownloadEpisodesAction();
  sub_1002B4798(&qword_1005FF8A8, (void (*)(uint64_t))&type metadata accessor for DownloadEpisodesAction);
  sub_1002B4798(&qword_1005FF8B0, (void (*)(uint64_t))&type metadata accessor for DownloadEpisodesAction);
  uint64_t v87 = v154;
  IntentDelegatingActionImplementation.init()();
  uint64_t v88 = v191;
  ActionDispatcher.init()();
  objc_super v89 = v84;
  uint64_t v90 = v88;
  v200(v89, v88, v18);
  sub_100044200(&qword_1005FF8B8, &qword_1005FF848);
  uint64_t v91 = v155;
  ActionDispatcher.add<A>(_:)();
  v86(v90, v18);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v87, v91);
  type metadata accessor for UpdateEpisodeDownloadBehaviorAction();
  sub_1002B4798(&qword_1005FF8C0, (void (*)(uint64_t))&type metadata accessor for UpdateEpisodeDownloadBehaviorAction);
  sub_1002B4798(&qword_1005FF8C8, (void (*)(uint64_t))&type metadata accessor for UpdateEpisodeDownloadBehaviorAction);
  unsigned __int8 v92 = v157;
  IntentDelegatingActionImplementation.init()();
  objc_super v93 = v188;
  ActionDispatcher.init()();
  uint64_t v94 = v93;
  uint64_t v95 = v200;
  v200(v90, v93, v18);
  sub_100044200(&qword_1005FF8D0, &qword_1005FF840);
  uint64_t v96 = v158;
  ActionDispatcher.add<A>(_:)();
  long long v97 = v201;
  v201(v94, v18);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v92, v96);
  uint64_t v98 = v189;
  ActionDispatcher.init()();
  v95(v94, v98, v18);
  sub_1002B680C();
  ActionDispatcher.add<A>(_:)();
  v97(v98, v18);
  uint64_t v99 = v160;
  TabChangeActionOpenStoreURLActionImplementation.init()();
  uint64_t v100 = v190;
  ActionDispatcher.init()();
  id v101 = v100;
  v95(v98, v100, v18);
  sub_1002B4798((unint64_t *)&unk_1005FF8E0, (void (*)(uint64_t))&type metadata accessor for TabChangeActionOpenStoreURLActionImplementation);
  uint64_t v102 = v161;
  ActionDispatcher.add<A>(_:)();
  v97(v101, v18);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v99, v102);
  type metadata accessor for SearchAction();
  sub_1002B4798(&qword_1005FE308, (void (*)(uint64_t))&type metadata accessor for SearchAction);
  id v103 = v164;
  ActionRunnerDelegatingActionImplementation.init()();
  uint64_t v104 = v192;
  ActionDispatcher.init()();
  v95(v101, v104, v18);
  uint64_t v180 = v19 + 16;
  Swift::String v181 = (void (**)(char *, uint64_t))&protocol conformance descriptor for ActionRunnerDelegatingActionImplementation<A>;
  sub_100044200((unint64_t *)&unk_1005FF8F0, &qword_1005FF838);
  uint64_t v105 = v165;
  ActionDispatcher.add<A>(_:)();
  uint64_t v182 = v19 + 8;
  v97(v104, v18);
  (*((void (**)(char *, uint64_t))v166 + 1))(v103, v105);
  type metadata accessor for FlowAction();
  sub_1002B4798((unint64_t *)&unk_1005FEA80, (void (*)(uint64_t))&type metadata accessor for FlowAction);
  uint64_t v106 = v167;
  ActionRunnerDelegatingActionImplementation.init()();
  int v107 = v194;
  ActionDispatcher.init()();
  v200(v104, v107, v18);
  sub_100044200(&qword_1005FF900, &qword_1005FF830);
  uint64_t v108 = v168;
  ActionDispatcher.add<A>(_:)();
  v97(v107, v18);
  (*((void (**)(char *, uint64_t))v169 + 1))(v106, v108);
  v203[3] = type metadata accessor for SyncTaskScheduler();
  v203[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_10004A244(v203);
  SyncTaskScheduler.init()();
  uint64_t v109 = v170;
  ClosureActionImplementation.init(scheduler:)();
  uint64_t v110 = v183;
  ActionDispatcher.init()();
  char v111 = v110;
  uint64_t v112 = (void (*)(void))v200;
  v200(v107, v110, v18);
  sub_100044200(&qword_1005FF908, &qword_1005FF828);
  uint64_t v113 = v171;
  ActionDispatcher.add<A>(_:)();
  id v114 = v111;
  uint64_t v115 = v111;
  uint64_t v116 = v182;
  v97(v115, v18);
  (*((void (**)(char *, uint64_t))v172 + 1))(v109, v113);
  char v117 = v173;
  CompoundActionImplementation.init()();
  uint64_t v118 = v184;
  ActionDispatcher.init()();
  id v119 = v118;
  ((void (*)(char *, char *, uint64_t))v112)(v114, v118, v18);
  sub_100044200(&qword_1005FF910, &qword_1005FF820);
  uint64_t v120 = v174;
  ActionDispatcher.add<A>(_:)();
  v97(v119, v18);
  (*((void (**)(char *, uint64_t))v175 + 1))(v117, v120);
  uint64_t v121 = v176;
  EmptyActionImplementation.init()();
  id v122 = v163;
  ActionDispatcher.init()();
  ((void (*)(char *, char *, uint64_t))v112)(v119, v122, v18);
  sub_100044200(&qword_1005FF918, &qword_1005FF818);
  uint64_t v123 = v177;
  ActionDispatcher.add<A>(_:)();
  v97(v122, v18);
  (*((void (**)(char *, uint64_t))v178 + 1))(v121, v123);
  sub_100054B78(&qword_1005FF920);
  uint64_t v124 = *(void *)(v116 + 64);
  unint64_t v125 = (*(unsigned __int8 *)(v116 + 72) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 72);
  Swift::String v181 = (void (**)(char *, uint64_t))swift_allocObject();
  objc_super v126 = (char *)v181 + v125;
  ((void (*)(char *, char *, uint64_t))v112)((char *)v181 + v125, v187, v18);
  id v178 = &v126[v124];
  v112();
  uint64_t v177 = (uint64_t)&v126[2 * v124];
  v112();
  unint64_t v176 = &v126[3 * v124];
  v112();
  uint64_t v175 = &v126[4 * v124];
  v112();
  uint64_t v174 = (uint64_t)&v126[5 * v124];
  v112();
  id v173 = &v126[6 * v124];
  v112();
  double v172 = &v126[7 * v124];
  v112();
  uint64_t v171 = (uint64_t)&v126[8 * v124];
  v112();
  id v170 = &v126[9 * v124];
  v112();
  unint64_t v169 = &v126[10 * v124];
  v112();
  uint64_t v168 = (uint64_t)&v126[11 * v124];
  v112();
  int v167 = &v126[12 * v124];
  v112();
  uint64_t v166 = &v126[13 * v124];
  v112();
  ((void (*)(char *, char *, uint64_t))v112)(&v126[14 * v124], v194, v18);
  uint64_t v127 = v183;
  ((void (*)(char *, char *, uint64_t))v112)(&v126[15 * v124], v183, v18);
  objc_super v128 = v184;
  ((void (*)(char *, char *, uint64_t))v112)(&v126[16 * v124], v184, v18);
  ActionDispatcher.init()();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  ActionDispatcher.add(contentsOf:)();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  objc_super v129 = v201;
  v201(v128, v18);
  v129(v127, v18);
  v129(v194, v18);
  v129(v192, v18);
  v129(v190, v18);
  v129(v189, v18);
  v129(v188, v18);
  v129(v191, v18);
  v129(v193, v18);
  v129(v195, v18);
  v129(v196, v18);
  v129(v197, v18);
  v129(v198, v18);
  v129(v199, v18);
  v129(v185, v18);
  v129(v186, v18);
  return ((uint64_t (*)(char *, uint64_t))v129)(v187, v18);
}

unint64_t sub_1002B67B8()
{
  unint64_t result = qword_1005FF810;
  if (!qword_1005FF810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF810);
  }
  return result;
}

unint64_t sub_1002B680C()
{
  unint64_t result = qword_1005FF8D8;
  if (!qword_1005FF8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF8D8);
  }
  return result;
}

unint64_t sub_1002B6860()
{
  unint64_t result = qword_1005FFA10;
  if (!qword_1005FFA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FFA10);
  }
  return result;
}

unint64_t sub_1002B68B4()
{
  unint64_t result = qword_1005FFA18;
  if (!qword_1005FFA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FFA18);
  }
  return result;
}

unint64_t sub_1002B6908()
{
  unint64_t result = qword_1005FFA20;
  if (!qword_1005FFA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FFA20);
  }
  return result;
}

uint64_t sub_1002B695C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for InteractionContext();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v40 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BookmarksControllerEpisodeData();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (void *)((char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v11 = (void *)((char *)v32 - v10);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 16))
  {
    uint64_t v37 = result;
    uint64_t v38 = v3;
    uint64_t v36 = v2;
    swift_retain();
    static Logger.podcastsStatesCoordination.getter();
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    int v19 = v18;
    BOOL v20 = os_log_type_enabled(v17, v18);
    uint64_t v39 = v6;
    if (v20)
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v35 = v5;
      uint64_t v22 = v21;
      uint64_t v34 = swift_slowAlloc();
      v42[0] = v34;
      *(_DWORD *)uint64_t v22 = 136315394;
      int v33 = v19;
      sub_1004011E8(v11);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v41 = sub_10004B974(v23, v24, v42);
      v32[1] = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      v32[0] = v22 + 14;
      id v25 = [self callStackSymbols];
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = Array.description.getter();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v41 = sub_10004B974(v26, v28, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v33, "RemoveEpisodeFromBookmarksContextAction.handler() - Unbookmarking episode %s %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v5 = v35;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v37);
    uint64_t v29 = v38;
    sub_1004011E8(v9);
    swift_beginAccess();
    if (*(void *)(v1 + 24))
    {
      swift_retain();
      uint64_t v30 = v40;
      dispatch thunk of ContextActionsConfiguration.context.getter();
      swift_release();
      char v31 = InteractionContext.view.getter();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v36);
      if ((v31 - 5) > 2u) {
        InteractionContext.EpisodeCellType.showsEpisodeControls.getter();
      }
    }
    BookmarksController.removeEpisodesFromBookmarks(with:showHUDConfirmation:)();
    swift_release();
    return (*(uint64_t (**)(unint64_t *, uint64_t))(v39 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1002B6E18()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_metricsLabel;
  uint64_t v2 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1001DE9EC(v0 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_contextActionType);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1002B6EF8()
{
  return type metadata accessor for RemoveEpisodeFromBookmarksContextAction();
}

uint64_t type metadata accessor for RemoveEpisodeFromBookmarksContextAction()
{
  uint64_t result = qword_1005FFAB0;
  if (!qword_1005FFAB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002B6F4C()
{
  type metadata accessor for MetricsLabel();
  if (v0 <= 0x3F)
  {
    sub_1001DE3EC();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1002B7050()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_1002B7058@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_metricsLabel;
  uint64_t v4 = type metadata accessor for MetricsLabel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1002B70CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DE984(v1 + OBJC_IVAR____TtC8Podcasts39RemoveEpisodeFromBookmarksContextAction_contextActionType, a1);
}

uint64_t sub_1002B70E0()
{
  uint64_t v1 = type metadata accessor for BookmarksControllerEpisodeData();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (unint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    sub_1004011E8(v4);
    char v5 = BookmarksController.containsBookmarkedEpisodes(in:)();
    swift_release();
    (*(void (**)(unint64_t *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

double sub_1002B71F0@<D0>(uint64_t a1@<X8>)
{
  sub_1002B747C((uint64_t)v5);
  uint64_t v2 = v6;
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1002B7230(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100267180(a1, a2, WitnessTable);
}

void *sub_1002B7290(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266A1C(a1, a2, WitnessTable);
}

uint64_t sub_1002B72F0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266B78(a1, a2, WitnessTable);
}

id sub_1002B7350(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266E10(a1, a2, WitnessTable);
}

uint64_t sub_1002B73B0(uint64_t a1)
{
  uint64_t result = sub_1002B7438(&qword_1005FFC20);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002B73F4(uint64_t a1)
{
  uint64_t result = sub_1002B7438(&qword_1005FFC28);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002B7438(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RemoveEpisodeFromBookmarksContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_1002B747C@<D0>(uint64_t a1@<X8>)
{
  id v2 = [self systemOrangeColor];
  id v3 = [self mainBundle];
  v8._object = (void *)0xE600000000000000;
  v4._object = (void *)0x80000001004DB750;
  v4._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0x657661736E55;
  Swift::String v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v8);

  *(void *)a1 = v2;
  double result = 3.77673152e209;
  *(_OWORD *)(a1 + 8) = xmmword_1004734D0;
  *(Swift::String *)(a1 + 24) = v6;
  return result;
}

void *sub_1002B7560(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  int64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    sub_10005986C(0, v4, 0);
    uint64_t v7 = *(void *)(a3(0) - 8);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    do
    {
      uint64_t v10 = a4();
      uint64_t v12 = v11;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10005986C(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      void v15[5] = v12;
      v8 += v9;
      --v4;
    }
    while (v4);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t EntitledFirstTimeAvailableMigrator.failSilently.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

uint64_t EntitledFirstTimeAvailableMigrator.failSilently.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*EntitledFirstTimeAvailableMigrator.failSilently.modify())()
{
  return UInt64.int64Representation.getter;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UberArtworkResetMigrator.performMigrationStep()()
{
}

void sub_1002B76F0(void *a1)
{
  uint64_t v36 = a1;
  uint64_t v1 = sub_100054B78(&qword_1005F76A0);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005F82B0);
  __chkstk_darwin(v4 - 8);
  Swift::String v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ArtworkRequest();
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v15 = [v13 initWithEntityName:v14];

  sub_10025719C();
  unint64_t v16 = v45;
  unint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
  if (v16)
  {

    return;
  }
  unint64_t v18 = v17;
  uint64_t v37 = v12;
  uint64_t v38 = v10;
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v19 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  BOOL v20 = v36;
  uint64_t v21 = v38;
  if (!v19)
  {

    swift_bridgeObjectRelease();
    uint64_t v23 = _swiftEmptyArrayStorage;
LABEL_24:
    swift_bridgeObjectRelease();
    *BOOL v20 = v23;
    swift_bridgeObjectRelease();
    return;
  }
  if (v19 >= 1)
  {
    id v34 = v15;
    uint64_t v35 = 0;
    uint64_t v22 = 0;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56);
    unint64_t v44 = v18 & 0xC000000000000001;
    uint64_t v41 = (void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    uint64_t v23 = _swiftEmptyArrayStorage;
    unint64_t v45 = v18;
    uint64_t v40 = v19;
    do
    {
      if (v44) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(v18 + 8 * v22 + 32);
      }
      id v25 = v24;
      MTPodcast.uberBackgroundArtworkModel.getter();
      uint64_t v26 = type metadata accessor for ArtworkModel();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v3, 1, v26) == 1)
      {
        sub_100054B1C((uint64_t)v3, &qword_1005F76A0);
        uint64_t v27 = 1;
      }
      else
      {
        ArtworkModel.preferredRequest.getter();
        sub_10022D86C((uint64_t)v3);
        uint64_t v27 = 0;
      }
      (*v43)(v6, v27, 1, v7);

      if ((*v42)(v6, 1, v7) == 1)
      {
        sub_100054B1C((uint64_t)v6, (uint64_t *)&unk_1005F82B0);
      }
      else
      {
        unint64_t v28 = *v41;
        uint64_t v29 = v37;
        (*v41)(v37, v6, v7);
        v28(v21, v29, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v23 = (void *)sub_1002EFE5C(0, v23[2] + 1, 1, (unint64_t)v23);
        }
        unint64_t v31 = v23[2];
        unint64_t v30 = v23[3];
        if (v31 >= v30 >> 1) {
          uint64_t v23 = (void *)sub_1002EFE5C(v30 > 1, v31 + 1, 1, (unint64_t)v23);
        }
        id v23[2] = v31 + 1;
        unint64_t v32 = (unint64_t)v23
            + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
            + *(void *)(v39 + 72) * v31;
        uint64_t v21 = v38;
        v28((char *)v32, v38, v7);
      }
      ++v22;
      unint64_t v18 = v45;
    }
    while (v40 != v22);

    swift_bridgeObjectRelease();
    BOOL v20 = v36;
    goto LABEL_24;
  }
  __break(1u);
}

id sub_1002B7BB4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self defaultManager];
  NSString v5 = String._bridgeToObjectiveC()();
  id v19 = 0;
  unsigned int v6 = [v4 removeItemAtPath:v5 error:&v19];

  if (v6) {
    return v19;
  }
  id v8 = v19;
  uint64_t v9 = _convertNSErrorToError(_:)();

  swift_willThrow();
  static Logger.artwork.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    id v13 = (void *)swift_slowAlloc();
    uint64_t v17 = v1;
    uint64_t v18 = v9;
    id v19 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v16[1] = v12 + 4;
    swift_errorRetain();
    sub_100054B78(&qword_100603F70);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v18 = sub_10004B974(v14, v15, (uint64_t *)&v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to remove uber artwork: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v3, v0);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    return (id)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

uint64_t sub_1002B7EEC()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_1002B7EF4()
{
  return *(void *)v0;
}

uint64_t sub_1002B7F00(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = a2;
    unint64_t v4 = 0;
    uint64_t v30 = result + 32;
    uint64_t v33 = a2 + 56;
    uint64_t v29 = _swiftEmptyArrayStorage;
    unint64_t v31 = *(void *)(result + 16);
    while (1)
    {
      uint64_t v5 = v4 <= v2 ? v2 : v4;
      uint64_t v32 = v5;
      while (1)
      {
        if (v4 == v32)
        {
          __break(1u);
          return result;
        }
        unsigned int v6 = (uint64_t *)(v30 + 16 * v4);
        uint64_t v7 = *v6;
        uint64_t v8 = v6[1];
        ++v4;
        swift_bridgeObjectRetain();
        uint64_t v9 = static ArtworkRequest.comparablePrefix(from:)();
        uint64_t v11 = v10;
        uint64_t v12 = v3;
        if (*(void *)(v3 + 16))
        {
          uint64_t v13 = v9;
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v14 = Hasher._finalize()();
          uint64_t v15 = -1 << *(unsigned char *)(v3 + 32);
          unint64_t v16 = v14 & ~v15;
          if ((*(void *)(v33 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16)) {
            break;
          }
        }
LABEL_7:
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        uint64_t v3 = v12;
        if (v4 == v31) {
          return (uint64_t)v29;
        }
      }
      uint64_t v17 = *(void *)(v3 + 48);
      uint64_t v18 = (void *)(v17 + 16 * v16);
      BOOL v19 = *v18 == v13 && v18[1] == v11;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_24:
      swift_bridgeObjectRelease();
      id v25 = v29;
      double result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        double result = sub_10005986C(0, v29[2] + 1, 1);
        id v25 = v29;
      }
      unint64_t v27 = v25[2];
      unint64_t v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        double result = sub_10005986C(v26 > 1, v27 + 1, 1);
        id v25 = v29;
      }
      long long v25[2] = v27 + 1;
      uint64_t v29 = v25;
      unint64_t v28 = &v25[2 * v27];
      v28[4] = v7;
      v28[5] = v8;
      unint64_t v2 = v31;
      uint64_t v3 = v12;
      if (v4 == v31) {
        return (uint64_t)v29;
      }
    }
    uint64_t v20 = ~v15;
    for (unint64_t i = v16 + 1; ; unint64_t i = v22 + 1)
    {
      uint64_t v22 = i & v20;
      if (((*(void *)(v33 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0) {
        break;
      }
      uint64_t v23 = (void *)(v17 + 16 * v22);
      BOOL v24 = *v23 == v13 && v23[1] == v11;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_24;
      }
    }
    goto LABEL_7;
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_1002B8164()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v0 - 8);
  uint64_t v60 = v0;
  __chkstk_darwin(v0);
  uint64_t v58 = (char *)&v56 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100054B78(&qword_1005FC218);
  uint64_t v2 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  unint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100054B78(&qword_1005FC220);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AssetCaches();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v65 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  id v57 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v63 = (char *)&v56 - v17;
  __chkstk_darwin(v16);
  BOOL v19 = (char *)&v56 - v18;
  static AssetCaches.shared.getter();
  AssetCaches.artwork.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  CacheDomain.disk.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v20 = v61;
  CacheDomain.DiskCaches.directory.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v20);
  uint64_t v21 = self;
  id v22 = [v21 defaultManager];
  v23._uint64_t countAndFlagsBits = URL.path.getter();
  LOBYTE(v12) = NSFileManager.fileExists(at:isDirectory:)(v23, 1);

  swift_bridgeObjectRelease();
  if (v12)
  {
    id v24 = [self sharedInstance];
    id v25 = [v24 privateQueueContext];

    id v69 = _swiftEmptyArrayStorage;
    __chkstk_darwin(v26);
    *(&v56 - 2) = (uint64_t)&v69;
    *(&v56 - 1) = (uint64_t)v25;
    unint64_t v27 = v62;
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (v27)
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v19, v65);
    }
    else
    {
      uint64_t v33 = swift_bridgeObjectRetain();
      id v34 = sub_1002B7560(v33, (uint64_t)v68, (uint64_t (*)(void))&type metadata accessor for ArtworkRequest, (uint64_t (*)(void))&ArtworkRequest.stableFilePrefix.getter);
      swift_bridgeObjectRelease();
      uint64_t v35 = sub_1000505EC((uint64_t)v34);
      swift_bridgeObjectRelease();
      id v36 = [v21 defaultManager];
      URL.path.getter();
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v66[0] = 0;
      id v38 = [v36 subpathsOfDirectoryAtPath:v37 error:v66];

      id v39 = v66[0];
      if (v38)
      {
        uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        id v41 = v39;

        uint64_t v42 = sub_1002B7F00(v40, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v64;
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v63, v19, v65);
        int64_t v44 = *(void *)(v42 + 16);
        if (v44)
        {
          uint64_t v61 = 0;
          uint64_t v62 = v19;
          v66[0] = _swiftEmptyArrayStorage;
          sub_1001BA8D4(0, v44, 0);
          unint64_t v45 = v66[0];
          uint64_t v60 = v42;
          uint64_t v46 = v42 + 40;
          uint64_t v47 = v57;
          do
          {
            swift_bridgeObjectRetain();
            URL.appendingPathComponent(_:)();
            swift_bridgeObjectRelease();
            v66[0] = v45;
            unint64_t v49 = v45[2];
            unint64_t v48 = v45[3];
            if (v49 >= v48 >> 1)
            {
              sub_1001BA8D4(v48 > 1, v49 + 1, 1);
              unint64_t v45 = v66[0];
            }
            v46 += 16;
            void v45[2] = v49 + 1;
            uint64_t v43 = v64;
            (*(void (**)(unint64_t, char *, uint64_t))(v64 + 32))((unint64_t)v45+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v64 + 72) * v49, v47, v65);
            --v44;
          }
          while (v44);
          swift_bridgeObjectRelease();
          BOOL v19 = v62;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v45 = _swiftEmptyArrayStorage;
        }
        uint64_t v51 = *(void (**)(char *, uint64_t))(v43 + 8);
        v51(v63, v65);
        id v52 = sub_1002B7560((uint64_t)v45, (uint64_t)v67, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&URL.path.getter);
        swift_bridgeObjectRelease();
        uint64_t v53 = v52[2];
        if (v53)
        {
          swift_bridgeObjectRetain();
          uint64_t v54 = (void **)(v52 + 5);
          do
          {
            NSString v55 = *v54;
            v66[0] = *(v54 - 1);
            v66[1] = v55;
            sub_1002B7BB4();
            v54 += 2;
            --v53;
          }
          while (v53);

          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v51(v19, v65);
      }
      else
      {
        id v50 = v66[0];
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v19, v65);
      }
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v28 = v58;
    static Logger.artwork.getter();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Uber migration unnecessary, artwork cache never created", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v28, v60);
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v19, v65);
  }
}

__n128 initializeBufferWithCopyOfBuffer for UberArtworkResetMigrator(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for UberArtworkResetMigrator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UberArtworkResetMigrator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UberArtworkResetMigrator()
{
  return &type metadata for UberArtworkResetMigrator;
}

void sub_1002B8AE8()
{
  sub_1002B76F0(*(void **)(v0 + 16));
}

ValueMetadata *type metadata accessor for FetchShowLatestLocalEpisodesIntentImplementation()
{
  return &type metadata for FetchShowLatestLocalEpisodesIntentImplementation;
}

unint64_t sub_1002B8B14@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for EpisodeEntity();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v21 - v8;
  sub_10004D29C(0, (unint64_t *)&qword_100603220);
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v1) {
    return result;
  }
  unint64_t v11 = result;
  uint64_t v23 = v3;
  if (!(result >> 62))
  {
    uint64_t v12 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_4;
    }
LABEL_17:
    unint64_t result = swift_bridgeObjectRelease();
    *a1 = _swiftEmptyArrayStorage;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_17;
  }
LABEL_4:
  id v24 = _swiftEmptyArrayStorage;
  unint64_t result = sub_1001BA910(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
  {
    __break(1u);
  }
  else
  {
    v21[1] = 0;
    id v22 = a1;
    uint64_t v13 = v24;
    if ((v11 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        EpisodeEntity.init(model:)();
        id v24 = v13;
        unint64_t v16 = v13[2];
        unint64_t v15 = v13[3];
        if (v16 >= v15 >> 1)
        {
          sub_1001BA910(v15 > 1, v16 + 1, 1);
          uint64_t v13 = v24;
        }
        void v13[2] = v16 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v16, v9, v23);
      }
    }
    else
    {
      for (uint64_t j = 0; j != v12; ++j)
      {
        id v18 = *(id *)(v11 + 8 * j + 32);
        EpisodeEntity.init(model:)();
        id v24 = v13;
        unint64_t v20 = v13[2];
        unint64_t v19 = v13[3];
        if (v20 >= v19 >> 1)
        {
          sub_1001BA910(v19 > 1, v20 + 1, 1);
          uint64_t v13 = v24;
        }
        void v13[2] = v20 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v20, v7, v23);
      }
    }
    unint64_t result = swift_bridgeObjectRelease();
    *id v22 = v13;
  }
  return result;
}

uint64_t sub_1002B8E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005FFC60 + dword_1005FFC60);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  void *v6 = v3;
  v6[1] = sub_1001D3FD4;
  return v8(a2, a3);
}

uint64_t sub_1002B8EC0(uint64_t a1)
{
  v1[4] = a1;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TaskPriority();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005FEBE0);
  uint64_t v5 = (void *)swift_task_alloc();
  v1[11] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1002B9040;
  return BaseObjectGraph.inject<A>(_:)(v1 + 2, v4, v4);
}

uint64_t sub_1002B9040()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002A34A0;
  }
  else {
    uint64_t v2 = sub_1002B9154;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002B9154()
{
  v0[13] = v0[2];
  uint64_t ObjectType = swift_getObjectType();
  j___sScTss5NeverORszABRs_rlE15currentPriorityScPvgZ();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[14] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002B921C;
  uint64_t v3 = v0[10];
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v3, ObjectType);
}

uint64_t sub_1002B921C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 72);
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 120) = a1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_1002B937C, 0, 0);
}

uint64_t sub_1002B937C()
{
  uint64_t v1 = v0[4];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithEntityName:v3];
  v0[16] = v4;

  [v4 setFetchLimit:*(void *)(v1 + *(int *)(type metadata accessor for FetchShowLatestLocalEpisodesIntent() + 20))];
  Class isa = (Class)[self sortDescriptorsForFirstAvailableAscending:0];
  if (!isa)
  {
    sub_10004D29C(0, (unint64_t *)&qword_1005F8120);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)v0[15];
  uint64_t v7 = v0[6];
  uint64_t v22 = v0[7];
  uint64_t v8 = v0[5];
  [v4 setSortDescriptors:isa];

  sub_10004D29C(0, (unint64_t *)&qword_100603220);
  uint64_t v9 = (void *)ShowEntity.preferredIdentifier()();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v14 = (void *)static MTEpisode.predicateForAllEpisodes(forPodcast:)();
  sub_1001EE720(v9, v11, v13);
  [v4 setPredicate:v14];

  uint64_t v15 = swift_allocObject();
  v0[17] = v15;
  *(void *)(v15 + 16) = v6;
  *(void *)(v15 + 24) = v4;
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v22, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v8);
  id v16 = v6;
  id v17 = v4;
  id v18 = (void *)swift_task_alloc();
  v0[18] = v18;
  uint64_t v19 = sub_100054B78((uint64_t *)&unk_1005FFC70);
  void *v18 = v0;
  v18[1] = sub_1002B962C;
  uint64_t v20 = v0[7];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 3, v20, sub_1002B9924, v15, v19);
}

uint64_t sub_1002B962C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_1002B985C;
  }
  else {
    uint64_t v5 = sub_1002B97C0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002B97C0()
{
  uint64_t v1 = *(void **)(v0 + 128);

  swift_unknownObjectRelease();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1002B985C()
{
  uint64_t v1 = *(void **)(v0 + 128);

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002B98E4()
{
  return swift_deallocObject();
}

unint64_t sub_1002B9924@<X0>(void *a1@<X8>)
{
  return sub_1002B8B14(a1);
}

uint64_t sub_1002B9A2C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncabilityController;
  swift_beginAccess();
  sub_100054BBC(v1, (uint64_t)v6, &qword_1005FFD90);
  if (!v7) {
    return sub_100054B1C((uint64_t)v6, &qword_1005FFD90);
  }
  sub_100056D54((uint64_t)v6, (uint64_t)v5);
  sub_100054B1C((uint64_t)v6, &qword_1005FFD90);
  uint64_t v2 = v5[4];
  sub_100041A98(v5, v5[3]);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t))(v2 + 16))(v3);
  swift_bridgeObjectRelease();
  return sub_10004D2D8((uint64_t)v5);
}

id sub_1002B9B94()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformContentController();
  [super dealloc];
}

uint64_t sub_1002B9C28()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002B9C60(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v33 = a3;
  id v34 = a4;
  uint64_t v32 = *v4;
  uint64_t v37 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  id v36 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  unint64_t v31 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  char v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v4[5];
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v14;
  *(void *)(v18 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v15, v13, v10);
  uint64_t v19 = v32;
  uint64_t v20 = v33;
  *(void *)(v18 + v16) = v33;
  uint64_t v21 = v34;
  *(void *)(v18 + v17) = v34;
  *(void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8)) = v19;
  aBlock[4] = sub_1002BE4E8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055E640;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  id v23 = a1;
  id v24 = v20;
  id v25 = v21;
  uint64_t v26 = v31;
  static DispatchQoS.unspecified.getter();
  id v41 = _swiftEmptyArrayStorage;
  sub_10004AD7C((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  unint64_t v28 = v36;
  uint64_t v27 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v39);
  swift_release();
  return swift_release();
}

uint64_t sub_1002BA07C(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v23 = a2;
  uint64_t v8 = *v4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v4[5];
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  unint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v15;
  v16[3] = a1;
  v16[4] = a3;
  void v16[5] = a4;
  void v16[6] = v23;
  v16[7] = v8;
  aBlock[4] = sub_1002BE214;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  void aBlock[3] = &unk_10055E5F0;
  unint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  id v18 = a1;
  id v19 = a3;
  id v20 = a4;
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_10004AD7C((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  swift_release();
  return swift_release();
}

uint64_t sub_1002BA3B0(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v69 = a5;
  uint64_t v70 = a4;
  uint64_t v75 = a3;
  uint64_t v6 = sub_100054B78(&qword_1005FDDC0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v73 = (uint64_t)v58 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v58 - v12;
  uint64_t v14 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  uint64_t v76 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v16 = (void *)((char *)v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v20 = (char *)v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v71 = *(void *)(v21 - 8);
  uint64_t v72 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v74 = result;
  if (result)
  {
    static Logger.downloads.getter();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    uint64_t v66 = v18;
    uint64_t v67 = v18 + 16;
    NSString v68 = v25;
    v25((uint64_t)v20, v75, v17);
    id v26 = a2;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    int v65 = v28;
    uint64_t v29 = v17;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v64 = v17;
      uint64_t v31 = v30;
      uint64_t v60 = swift_slowAlloc();
      v78[0] = v60;
      *(_DWORD *)uint64_t v31 = 136316163;
      os_log_t v59 = v27;
      uint64_t v77 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, v78);
      uint64_t v61 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 12) = 2160;
      uint64_t v77 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 22) = 2081;
      v58[1] = v31 + 24;
      id v32 = [v26 description];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v63 = v9;
      uint64_t v34 = v33;
      uint64_t v62 = v16;
      unint64_t v36 = v35;

      uint64_t v77 = sub_10004B974(v34, v36, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      unint64_t v16 = v62;
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 32) = 2160;
      uint64_t v77 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 42) = 2081;
      Swift::String v37 = URL.path(percentEncoded:)(1);
      uint64_t v77 = sub_10004B974(v37._countAndFlagsBits, (unint64_t)v37._object, v78);
      uint64_t v13 = v61;
      uint64_t v9 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v38 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v20, v64);
      uint64_t v27 = v59;
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v65, "%s didFinishDownloading %{private,mask.hash}s to %{private,mask.hash}s.", (uint8_t *)v31, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v29 = v64;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v38 = v66;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v20, v29);
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v23, v72);
    uint64_t v39 = v74;
    swift_beginAccess();
    uint64_t v40 = *(void *)(v39 + 32);
    if (*(void *)(v40 + 16))
    {
      unint64_t v41 = sub_100226F74((uint64_t)v26);
      if (v42)
      {
        uint64_t v43 = *(void *)(v40 + 56);
        uint64_t v44 = v76;
        sub_1002BE2A4(v43 + *(void *)(v76 + 72) * v41, (uint64_t)v13);
        unint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
        v45(v13, 0, 1, v14);
      }
      else
      {
        unint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
        v45(v13, 1, 1, v14);
      }
    }
    else
    {
      unint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
      v45(v13, 1, 1, v14);
      id v46 = v26;
    }
    uint64_t v47 = v73;
    sub_1002BE224((uint64_t)v13, v73);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v47, 1, v14) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))((char *)v16 + *(int *)(v14 + 24), 1, 1, v29);
      unint64_t v48 = v70;
      id v49 = v26;
      uint64_t v50 = v47;
      uint64_t v51 = v69;
      *unint64_t v16 = v70;
      v16[1] = v51;
      id v52 = (char *)v16 + *(int *)(v14 + 28);
      *(void *)id v52 = 0;
      v52[8] = -1;
      id v53 = v48;
      id v54 = v51;
      uint64_t v55 = v50;
      id v26 = v49;
      sub_100054B1C(v55, &qword_1005FDDC0);
    }
    else
    {
      sub_1002BE364(v47, (uint64_t)v16);
    }

    swift_endAccess();
    uint64_t v56 = (uint64_t)v16 + *(int *)(v14 + 24);
    sub_100054B1C(v56, (uint64_t *)&unk_1005F7750);
    v68(v56, v75, v29);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v56, 0, 1, v29);
    sub_1002BE2A4((uint64_t)v16, (uint64_t)v9);
    v45(v9, 0, 1, v14);
    swift_beginAccess();
    id v57 = v26;
    sub_100276BF8((uint64_t)v9, v57);
    swift_endAccess();
    sub_1002BAB60(v57);
    swift_release();
    return sub_1002BE308((uint64_t)v16);
  }
  return result;
}

uint64_t sub_1002BAB60(void *a1)
{
  uint64_t v126 = sub_100054B78(&qword_1005F6D08);
  uint64_t v3 = __chkstk_darwin(v126);
  uint64_t v124 = (uint64_t *)((char *)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v117 - v5;
  uint64_t v7 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v7 - 8);
  uint64_t v130 = (uint64_t)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v128 = v9;
  uint64_t v129 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v120 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v127 = (char *)&v117 - v13;
  uint64_t v14 = sub_100054B78(&qword_1005FDDC0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  unint64_t v125 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v133 = (uint64_t)&v117 - v17;
  unint64_t v134 = (void *)type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  uint64_t v18 = *(v134 - 1);
  __chkstk_darwin(v134);
  uint64_t v131 = (uint64_t *)((char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v139 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v136 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  id v122 = (char *)&v117 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v121 = (char *)&v117 - v26;
  __chkstk_darwin(v25);
  os_log_type_t v28 = (char *)&v117 - v27;
  uint64_t v29 = type metadata accessor for DispatchPredicate();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  id v32 = (uint64_t *)((char *)&v117 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v135 = v1;
  uint64_t v33 = *(void **)(v1 + 40);
  *id v32 = v33;
  (*(void (**)(void *, void, uint64_t))(v30 + 104))(v32, enum case for DispatchPredicate.onQueue(_:), v29);
  id v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v30 + 8))(v32, v29);
  if ((v33 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v137 = v20;
  uint64_t v123 = (uint64_t *)v6;
  static Logger.downloads.getter();
  unint64_t v36 = v28;
  id v37 = a1;
  objc_super v132 = v36;
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  id v138 = v37;
  if (v40)
  {
    uint64_t v41 = swift_slowAlloc();
    v141[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136315651;
    uint64_t v140 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 12) = 2160;
    uint64_t v140 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 22) = 2081;
    uint64_t v119 = v41 + 24;
    id v42 = [v37 description];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    uint64_t v46 = v43;
    id v37 = v138;
    uint64_t v140 = sub_10004B974(v46, v45, v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s Validating download status for %{private,mask.hash}s.", (uint8_t *)v41, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = *(void (**)(char *, uint64_t))(v139 + 8);
  uint64_t v48 = v137;
  v47(v132, v137);
  uint64_t v50 = v134;
  uint64_t v49 = v135;
  swift_beginAccess();
  uint64_t v51 = *(void *)(v49 + 32);
  if (!*(void *)(v51 + 16))
  {
    uint64_t v55 = v133;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v18 + 56))(v133, 1, 1, v50);
LABEL_11:
    sub_100054B1C(v55, &qword_1005FDDC0);
    swift_endAccess();
LABEL_12:
    os_log_t v59 = v138;
    goto LABEL_13;
  }
  id v52 = v37;
  unint64_t v53 = sub_100226F74((uint64_t)v52);
  if (v54)
  {
    uint64_t v55 = v133;
    sub_1002BE2A4(*(void *)(v51 + 56) + *(void *)(v18 + 72) * v53, v133);
    uint64_t v56 = 0;
    uint64_t v58 = v130;
    id v57 = v131;
  }
  else
  {
    uint64_t v56 = 1;
    uint64_t v58 = v130;
    id v57 = v131;
    uint64_t v55 = v133;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v18 + 56))(v55, v56, 1, v50);

  if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v18 + 48))(v55, 1, v50) == 1) {
    goto LABEL_11;
  }
  sub_1002BE364(v55, (uint64_t)v57);
  swift_endAccess();
  id v69 = (char *)v57 + *((int *)v50 + 7);
  uint64_t v70 = v50;
  int v71 = v69[8];
  if (v71 == 255)
  {
    sub_1002BE308((uint64_t)v57);
    goto LABEL_12;
  }
  unint64_t v134 = v47;
  uint64_t v72 = *(void *)v69;
  sub_100054BBC((uint64_t)v57 + *((int *)v70 + 6), v58, (uint64_t *)&unk_1005F7750);
  int v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v58, 1, v128);
  os_log_t v59 = v138;
  if (v73 == 1)
  {
    sub_1002BE308((uint64_t)v57);
    sub_100054B1C(v58, (uint64_t *)&unk_1005F7750);
    uint64_t v47 = (void (*)(char *, uint64_t))v134;
LABEL_13:
    uint64_t v60 = v136;
    static Logger.downloads.getter();
    id v61 = v59;
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc();
      v141[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136315651;
      uint64_t v140 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, v141);
      unint64_t v134 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v64 + 12) = 2160;
      uint64_t v140 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v64 + 22) = 2081;
      id v65 = [v61 description];
      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v68 = v67;

      uint64_t v140 = sub_10004B974(v66, v68, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s Incomplete download data for %{private,mask.hash}s.", (uint8_t *)v64, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return ((uint64_t (*)(char *, uint64_t))v134)(v136, v137);
    }
    else
    {

      return ((uint64_t (*)(char *, uint64_t))v47)(v60, v48);
    }
  }
  uint64_t v74 = *(char **)(v129 + 32);
  id v138 = (id)(v129 + 32);
  uint64_t v136 = v74;
  ((void (*)(char *, uint64_t, uint64_t))v74)(v127, v58, v128);
  objc_super v132 = (char *)(v49 + 32);
  uint64_t v119 = (uint64_t)v52;
  LODWORD(v133) = v71;
  uint64_t v130 = v72;
  if (v71)
  {
    sub_10018ACCC(v72, 1);
    sub_10018ACCC(v72, 1);
    uint64_t v87 = v122;
    static Logger.downloads.getter();
    id v88 = v52;
    sub_1002BE3C8(v72, v71);
    id v89 = v88;
    sub_1002BE3C8(v72, v71);
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    int v92 = v91;
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v93 = swift_slowAlloc();
      unint64_t v134 = (void *)swift_slowAlloc();
      v141[0] = (uint64_t)v134;
      *(_DWORD *)uint64_t v93 = 136316163;
      LODWORD(v121) = v92;
      uint64_t v140 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v93 + 12) = 2160;
      uint64_t v140 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v93 + 22) = 2081;
      id v94 = [v89 description];
      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_t v118 = v90;
      uint64_t v96 = v72;
      long long v97 = v89;
      uint64_t v98 = v95;
      unsigned __int8 v99 = v71;
      unint64_t v101 = v100;

      uint64_t v102 = v98;
      id v89 = v97;
      uint64_t v140 = sub_10004B974(v102, v101, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v93 + 32) = 2160;
      uint64_t v140 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v93 + 42) = 2081;
      swift_getErrorValue();
      uint64_t v103 = Error.localizedDescription.getter();
      uint64_t v140 = sub_10004B974(v103, v104, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002BE28C(v96, v71);
      sub_1002BE28C(v96, v71);
      os_log_t v105 = v118;
      _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v121, "%s Download for %{private,mask.hash}s failed with %{private,mask.hash}s.", (uint8_t *)v93, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v139 + 8))(v122, v137);
      uint64_t v106 = v123;
      uint64_t v107 = (uint64_t)v125;
    }
    else
    {

      sub_1002BE28C(v72, v71);
      sub_1002BE28C(v72, v71);

      ((void (*)(char *, uint64_t))v134)(v87, v48);
      uint64_t v106 = v123;
      unsigned __int8 v99 = v71;
      uint64_t v107 = (uint64_t)v125;
      uint64_t v96 = v72;
    }
    uint64_t v108 = v124;
    *uint64_t v106 = v96;
    swift_storeEnumTagMultiPayload();
    sub_10018ACCC(v96, 1);
    sub_1002BC5B0(v89, v127);
    sub_1002BE28C(v96, v99);
  }
  else
  {
    sub_10018ACCC(v72, 0);
    uint64_t v75 = v121;
    static Logger.downloads.getter();
    id v76 = v52;
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = swift_slowAlloc();
      v141[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 136315651;
      uint64_t v140 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v79 + 12) = 2160;
      uint64_t v140 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v79 + 22) = 2081;
      id v122 = (char *)(v79 + 24);
      uint64_t v80 = v48;
      id v81 = [v76 description];
      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v84 = v83;

      uint64_t v140 = sub_10004B974(v82, v84, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "%s Download for %{private,mask.hash}s successfully completed.", (uint8_t *)v79, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v85 = v121;
      uint64_t v86 = v80;
    }
    else
    {

      uint64_t v85 = v75;
      uint64_t v86 = v48;
    }
    ((void (*)(char *, uint64_t))v134)(v85, v86);
    uint64_t v106 = v123;
    uint64_t v107 = (uint64_t)v125;
    uint64_t v108 = v124;
    (*(void (**)(uint64_t *, char *, uint64_t))(v129 + 16))(v123, v127, v128);
    swift_storeEnumTagMultiPayload();
  }
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v110 = (void *)*v131;
    uint64_t v109 = (void *)v131[1];
    sub_100054BBC((uint64_t)v106, (uint64_t)v108, &qword_1005F6D08);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v111 = *v108;
      id v112 = v110;
      sub_10028EDA4(v109, v111);
      swift_errorRelease();
    }
    else
    {
      uint64_t v113 = (uint64_t)v120;
      id v114 = v108;
      uint64_t v115 = v128;
      ((void (*)(char *, uint64_t *, uint64_t))v136)(v120, v114, v128);
      id v116 = v110;
      sub_10028E84C(v109, v113);
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v113, v115);
    }

    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  sub_10027D7B4(v119, v107);
  swift_endAccess();
  sub_1002BE28C(v130, v133);
  sub_100054B1C(v107, &qword_1005FDDC0);
  sub_100054B1C((uint64_t)v106, &qword_1005F6D08);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v127, v128);
  return sub_1002BE308((uint64_t)v131);
}

uint64_t sub_1002BBCB0(uint64_t a1, char *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v75 = *(void *)(v9 - 8);
  uint64_t v76 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v74 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v68 - v12;
  uint64_t v14 = sub_100054B78(&qword_1005FDDC0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v77 = (uint64_t)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)v68 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)v68 - v20;
  uint64_t v22 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  uint64_t v78 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v24 = (void *)((char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v26 = result;
    uint64_t v72 = result + 32;
    swift_beginAccess();
    uint64_t v73 = v26;
    uint64_t v27 = *(void *)(v26 + 32);
    if (*(void *)(v27 + 16))
    {
      unint64_t v28 = sub_100226F74((uint64_t)a2);
      if (v29)
      {
        uint64_t v30 = *(void *)(v27 + 56);
        uint64_t v31 = v78;
        sub_1002BE2A4(v30 + *(void *)(v78 + 72) * v28, (uint64_t)v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v21, 0, 1, v22);
      }
      else
      {
        uint64_t v31 = v78;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v21, 1, 1, v22);
      }
    }
    else
    {
      uint64_t v31 = v78;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v21, 1, 1, v22);
      id v32 = a2;
    }
    sub_1002BE224((uint64_t)v21, (uint64_t)v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v19, 1, v22) == 1)
    {
      uint64_t v33 = (char *)v24 + *(int *)(v22 + 24);
      uint64_t v34 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
      *uint64_t v24 = a3;
      v24[1] = a4;
      unint64_t v35 = (char *)v24 + *(int *)(v22 + 28);
      *(void *)unint64_t v35 = 0;
      v35[8] = -1;
      id v36 = a3;
      id v37 = a4;
      sub_100054B1C((uint64_t)v19, &qword_1005FDDC0);
    }
    else
    {
      sub_1002BE364((uint64_t)v19, (uint64_t)v24);
    }

    swift_endAccess();
    if (a5)
    {
      swift_errorRetain();
      uint64_t v38 = v74;
      static Logger.downloads.getter();
      os_log_type_t v39 = a2;
      swift_errorRetain();
      BOOL v40 = v39;
      swift_errorRetain();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      int v43 = v42;
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v44 = swift_slowAlloc();
        os_log_t v70 = v41;
        uint64_t v45 = v44;
        uint64_t v71 = swift_slowAlloc();
        v80[0] = v71;
        *(_DWORD *)uint64_t v45 = 136316163;
        LODWORD(v69) = v43;
        uint64_t v79 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 12) = 2160;
        uint64_t v79 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2081;
        v68[1] = v45 + 24;
        id v46 = [v40 description];
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = a2;
        unint64_t v50 = v49;

        uint64_t v79 = sub_10004B974(v47, v50, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a2 = v48;
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 32) = 2160;
        uint64_t v79 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 42) = 2081;
        swift_getErrorValue();
        uint64_t v51 = Error.localizedDescription.getter();
        uint64_t v79 = sub_10004B974(v51, v52, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v53 = v70;
        _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v69, "%s didCompleteDownload %{private,mask.hash}s with %{private,mask.hash}s.", (uint8_t *)v45, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v75 + 8))(v38, v76);
      }
      uint64_t v64 = (char *)v24 + *(int *)(v22 + 28);
      sub_1002BE28C(*(void *)v64, v64[8]);
      *(void *)uint64_t v64 = a5;
      v64[8] = 1;
    }
    else
    {
      static Logger.downloads.getter();
      char v54 = a2;
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      int v57 = v56;
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v58 = swift_slowAlloc();
        LODWORD(v70) = v57;
        uint64_t v59 = v58;
        uint64_t v71 = swift_slowAlloc();
        v80[0] = v71;
        *(_DWORD *)uint64_t v59 = 136315651;
        uint64_t v74 = a2;
        uint64_t v79 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 12) = 2160;
        uint64_t v79 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 22) = 2081;
        uint64_t v69 = v59 + 24;
        id v60 = [v54 description];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v63 = v62;

        uint64_t v79 = sub_10004B974(v61, v63, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a2 = v74;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v70, "%s didCompleteDownload %{private,mask.hash}s.", (uint8_t *)v59, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v75 + 8))(v13, v76);
      id v65 = (char *)v24 + *(int *)(v22 + 28);
      sub_1002BE28C(*(void *)v65, v65[8]);
      *(void *)id v65 = 0;
      v65[8] = 0;
    }
    uint64_t v66 = v77;
    sub_1002BE2A4((uint64_t)v24, v77);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v66, 0, 1, v22);
    swift_beginAccess();
    unint64_t v67 = a2;
    sub_100276BF8(v66, v67);
    swift_endAccess();
    sub_1002BAB60(v67);
    swift_release();
    return sub_1002BE308((uint64_t)v24);
  }
  return result;
}

uint64_t sub_1002BC5B0(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v128 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v117 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v119 = (char *)&v112 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  id v116 = (char *)&v112 - v11;
  __chkstk_darwin(v10);
  uint64_t v126 = (char *)&v112 - v12;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v127 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v120 = (char *)&v112 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v125 = (char *)&v112 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v112 - v21;
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char **)((char *)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = *(void **)(v2 + 40);
  *uint64_t v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0) {
    __break(1u);
  }
  static Logger.downloads.getter();
  char v29 = *(NSObject **)(v128 + 16);
  uint64_t v123 = v128 + 16;
  id v124 = a2;
  id v122 = v29;
  ((void (*)(char *, void *, uint64_t))v29)(v126, a2, v5);
  id v30 = a1;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  int v33 = v32;
  BOOL v34 = os_log_type_enabled(v31, v32);
  os_log_t v118 = v16;
  id v121 = v30;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc();
    int v114 = v33;
    uint64_t v36 = v35;
    uint64_t v115 = (void *)swift_slowAlloc();
    id v130 = v115;
    *(_DWORD *)uint64_t v36 = 136316163;
    os_log_t v113 = v31;
    uint64_t v129 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2160;
    uint64_t v129 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 22) = 2081;
    id v37 = [v30 description];
    id v112 = v22;
    uint64_t v38 = v13;
    id v39 = v37;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v42 = v41;

    uint64_t v13 = v38;
    uint64_t v129 = sub_10004B974(v40, v42, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v43 = v127;
    uint64_t v44 = v128;
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 32) = 2160;
    uint64_t v129 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 42) = 2081;
    uint64_t v45 = v126;
    Swift::String v46 = URL.path(percentEncoded:)(1);
    uint64_t v129 = sub_10004B974(v46._countAndFlagsBits, (unint64_t)v46._object, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = *(void (**)(char *, uint64_t))(v44 + 8);
    v47(v45, v5);
    os_log_t v48 = v113;
    _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v114, "%s Removing asset %{private,mask.hash}s at %{private,mask.hash}s.", (uint8_t *)v36, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
    v49(v112, v13);
  }
  else
  {

    uint64_t v47 = *(void (**)(char *, uint64_t))(v128 + 8);
    v47(v126, v5);

    unint64_t v49 = *(void (**)(char *, uint64_t))(v127 + 8);
    v49(v22, v13);
  }
  unint64_t v50 = v125;
  id v51 = [self defaultManager];
  id v52 = v124;
  URL.path(percentEncoded:)(0);
  NSString v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v54 = [v51 fileExistsAtPath:v53];

  if (!v54)
  {
    uint64_t v75 = v120;
    static Logger.downloads.getter();
    uint64_t v76 = v119;
    ((void (*)(char *, id, uint64_t))v122)(v119, v52, v5);
    id v77 = v121;
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.debug.getter();
    int v80 = v79;
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v81 = swift_slowAlloc();
      uint64_t v115 = v47;
      uint64_t v82 = v81;
      unint64_t v125 = (char *)swift_slowAlloc();
      uint64_t v126 = (char *)v13;
      id v130 = v125;
      *(_DWORD *)uint64_t v82 = 136316163;
      LODWORD(v122) = v80;
      uint64_t v129 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v82 + 12) = 2160;
      uint64_t v129 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v82 + 22) = 2081;
      id v83 = [v77 description];
      uint64_t v123 = v5;
      id v84 = v83;
      uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v86 = v127;
      uint64_t v87 = v85;
      id v124 = v51;
      unint64_t v89 = v88;

      uint64_t v129 = sub_10004B974(v87, v89, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v82 + 32) = 2160;
      uint64_t v129 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v82 + 42) = 2081;
      Swift::String v90 = URL.path(percentEncoded:)(1);
      uint64_t v129 = sub_10004B974(v90._countAndFlagsBits, (unint64_t)v90._object, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v115)(v76, v123);
      _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v122, "%s Unable to remove %{private,mask.hash}s at %{private,mask.hash}s since the file doesn't exist.", (uint8_t *)v82, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, char *))(v86 + 8))(v120, v126);
    }

    v47(v76, v5);
    uint64_t v110 = v75;
    goto LABEL_15;
  }
  URL._bridgeToObjectiveC()(v55);
  int v57 = v56;
  id v130 = 0;
  unsigned int v58 = [v51 removeItemAtURL:v56 error:&v130];

  if (v58)
  {
    uint64_t v115 = v47;
    id v59 = v130;
    static Logger.downloads.getter();
    id v60 = v116;
    ((void (*)(char *, id, uint64_t))v122)(v116, v52, v5);
    id v61 = v121;
    unint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.debug.getter();
    int v64 = v63;
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v65 = swift_slowAlloc();
      id v122 = swift_slowAlloc();
      id v130 = v122;
      *(_DWORD *)uint64_t v65 = 136316163;
      LODWORD(v121) = v64;
      uint64_t v129 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 12) = 2160;
      uint64_t v129 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 22) = 2081;
      id v66 = [v61 description];
      uint64_t v123 = v5;
      id v67 = v66;
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v124 = v51;
      uint64_t v69 = v127;
      uint64_t v70 = v68;
      uint64_t v126 = (char *)v13;
      unint64_t v72 = v71;

      uint64_t v129 = sub_10004B974(v70, v72, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 32) = 2160;
      uint64_t v129 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 42) = 2081;
      Swift::String v73 = URL.path(percentEncoded:)(1);
      uint64_t v129 = sub_10004B974(v73._countAndFlagsBits, (unint64_t)v73._object, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v115)(v60, v123);
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v121, "%s Removed asset %{private,mask.hash}s at %{private,mask.hash}s.", (uint8_t *)v65, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, char *))(v69 + 8))(v125, v126);
    }

    ((void (*)(char *, uint64_t))v115)(v60, v5);
    uint64_t v110 = v50;
LABEL_15:
    uint64_t v111 = (char *)v13;
    return ((uint64_t (*)(char *, char *))v49)(v110, v111);
  }
  uint64_t v126 = (char *)v13;
  id v91 = v130;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  int v92 = v118;
  static Logger.downloads.getter();
  uint64_t v93 = v117;
  ((void (*)(char *, id, uint64_t))v122)(v117, v52, v5);
  id v94 = v121;
  swift_errorRetain();
  id v95 = v94;
  swift_errorRetain();
  uint64_t v96 = Logger.logObject.getter();
  os_log_type_t v97 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v96, v97))
  {
    uint64_t v98 = swift_slowAlloc();
    uint64_t v115 = v47;
    uint64_t v99 = v98;
    unint64_t v125 = (char *)swift_slowAlloc();
    id v130 = v125;
    *(_DWORD *)uint64_t v99 = 136316419;
    id v122 = v96;
    uint64_t v129 = sub_10004B974(0xD00000000000001CLL, 0x80000001004DB950, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v99 + 12) = 2160;
    uint64_t v129 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v99 + 22) = 2081;
    id v100 = [v95 description];
    uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v123 = v5;
    id v124 = v51;
    uint64_t v102 = v101;
    os_log_type_t v103 = v97;
    unint64_t v105 = v104;

    uint64_t v129 = sub_10004B974(v102, v105, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v99 + 32) = 2160;
    uint64_t v129 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v99 + 42) = 2081;
    Swift::String v106 = URL.path(percentEncoded:)(1);
    uint64_t v129 = sub_10004B974(v106._countAndFlagsBits, (unint64_t)v106._object, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v115)(v93, v123);
    *(_WORD *)(v99 + 52) = 2080;
    swift_getErrorValue();
    uint64_t v107 = Error.localizedDescription.getter();
    uint64_t v129 = sub_10004B974(v107, v108, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v109 = v122;
    _os_log_impl((void *)&_mh_execute_header, v122, v103, "%s Unable to remove %{private,mask.hash}s at %{private,mask.hash}s with %s.", (uint8_t *)v99, 0x3Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    return (*(uint64_t (**)(char *, char *))(v127 + 8))(v118, v126);
  }

  swift_errorRelease();
  v47(v93, v5);
  swift_errorRelease();
  swift_errorRelease();

  uint64_t v111 = v126;
  uint64_t v110 = v92;
  return ((uint64_t (*)(char *, char *))v49)(v110, v111);
}

uint64_t sub_1002BD5B0()
{
  sub_10018DB70(v0 + 16);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

char *sub_1002BD5F8(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    *((void *)a1 + 1) = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    __dst = &a1[v9];
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    uint64_t v14 = v4;
    uint64_t v15 = v8;
    if (v13(v10, 1, v11))
    {
      uint64_t v16 = sub_100054B78((uint64_t *)&unk_1005F7750);
      memcpy(__dst, v10, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v17 = *(int *)(a3 + 28);
    uint64_t v18 = &v7[v17];
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    int v20 = *((unsigned __int8 *)v19 + 8);
    if (v20 == 255)
    {
      *(void *)uint64_t v18 = *v19;
      v18[8] = *((unsigned char *)v19 + 8);
    }
    else
    {
      char v21 = v20 & 1;
      uint64_t v22 = *v19;
      sub_10018ACCC(*v19, v20 & 1);
      *(void *)uint64_t v18 = v22;
      v18[8] = v21;
    }
  }
  return v7;
}

uint64_t sub_1002BD7D8(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (char *)a1 + *(int *)(a2 + 28);
  int v9 = v8[8];
  if (v9 != 255)
  {
    uint64_t v10 = *(void *)v8;
    return sub_10018ACD8(v10, v9 & 1);
  }
  return result;
}

void *sub_1002BD8D8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  __dst = (char *)a1 + v8;
  int v9 = (const void *)(a2 + v8);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v6;
  id v14 = v7;
  if (v12(v9, 1, v10))
  {
    uint64_t v15 = sub_100054B78((uint64_t *)&unk_1005F7750);
    memcpy(__dst, v9, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (uint64_t *)(a2 + v16);
  int v19 = *((unsigned __int8 *)v18 + 8);
  if (v19 == 255)
  {
    *(void *)uint64_t v17 = *v18;
    v17[8] = *((unsigned char *)v18 + 8);
  }
  else
  {
    char v20 = v19 & 1;
    uint64_t v21 = *v18;
    sub_10018ACCC(*v18, v19 & 1);
    *(void *)uint64_t v17 = v21;
    v17[8] = v20;
  }
  return a1;
}

uint64_t sub_1002BDA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  int v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  uint64_t v12 = *(int *)(a3 + 24);
  id v13 = (void *)(a1 + v12);
  id v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = sub_100054B78((uint64_t *)&unk_1005F7750);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = *(int *)(a3 + 28);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  int v24 = *(unsigned __int8 *)(a1 + v21 + 8);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 8);
  if (v24 == 255)
  {
    if (v25 == 255)
    {
      uint64_t v27 = *(void *)v23;
      *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
      *(void *)uint64_t v22 = v27;
    }
    else
    {
      char v32 = v25 & 1;
      uint64_t v33 = *(void *)v23;
      sub_10018ACCC(v33, v25 & 1);
      *(void *)uint64_t v22 = v33;
      *(unsigned char *)(v22 + 8) = v32;
    }
  }
  else if (v25 == 255)
  {
    sub_100054B1C(v22, &qword_1005FFE50);
    char v26 = *(unsigned char *)(v23 + 8);
    *(void *)uint64_t v22 = *(void *)v23;
    *(unsigned char *)(v22 + 8) = v26;
  }
  else
  {
    char v28 = v25 & 1;
    uint64_t v29 = *(void *)v23;
    sub_10018ACCC(v29, v25 & 1);
    uint64_t v30 = *(void *)v22;
    char v31 = *(unsigned char *)(v22 + 8);
    *(void *)uint64_t v22 = v29;
    *(unsigned char *)(v22 + 8) = v28;
    sub_10018ACD8(v30, v31);
  }
  return a1;
}

_OWORD *sub_1002BDCB8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100054B78((uint64_t *)&unk_1005F7750);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 28);
  id v13 = (char *)a1 + v12;
  id v14 = (char *)a2 + v12;
  *(void *)id v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

uint64_t sub_1002BDDF8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  id v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100054B78((uint64_t *)&unk_1005F7750);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 28);
  uint64_t v18 = a1 + v17;
  int v19 = (char *)a2 + v17;
  int v20 = *(unsigned __int8 *)(a1 + v17 + 8);
  if (v20 != 255)
  {
    int v21 = v19[8];
    if (v21 != 255)
    {
      uint64_t v22 = *(void *)v18;
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v21 & 1;
      sub_10018ACD8(v22, v20 & 1);
      return a1;
    }
    sub_100054B1C(v18, &qword_1005FFE50);
  }
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v19[8];
  return a1;
}

uint64_t sub_1002BDFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002BE010);
}

uint64_t sub_1002BE010(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100054B78((uint64_t *)&unk_1005F7750);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002BE0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002BE0D8);
}

void *sub_1002BE0D8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100054B78((uint64_t *)&unk_1005F7750);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1002BE184()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002BE1BC()
{
  swift_release();

  swift_errorRelease();

  return swift_deallocObject();
}

uint64_t sub_1002BE214()
{
  return sub_1002BBCB0(*(void *)(v0 + 16), *(char **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1002BE224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FDDC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BE28C(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10018ACD8(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1002BE2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BE308(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002BE364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BE3C8(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10018ACCC(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1002BE3E0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1002BE4E8()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + 24);
  uint64_t v6 = *(void **)(v0 + v3);
  uint64_t v7 = *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1002BA3B0(v4, v5, v0 + v2, v6, v7);
}

uint64_t sub_1002BE590()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[2];
  sub_100056D54((uint64_t)(v0 + 3), (uint64_t)v6);
  type metadata accessor for EpisodeDeletionActionProvider();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v0[12] = EpisodeDeletionActionProvider.init(asPartOf:episodeDownloadStateController:libraryActionController:)();
  uint64_t result = swift_release();
  uint64_t v4 = v0[9];
  if (v4)
  {
    type metadata accessor for EpisodeOfferStateCenter();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v2;
    v1[10] = v5;
    swift_retain();
    swift_retain();
    return swift_release();
  }
  return result;
}

BOOL sub_1002BE660()
{
  if (!*(void *)(v0 + 72) || !*(void *)(v0 + 80)) {
    return 0;
  }
  swift_retain();
  uint64_t v1 = sub_10020D508();
  uint64_t v2 = v1[2];
  if (v2)
  {
    unint64_t v3 = v1 + 6;
    while (1)
    {
      uint64_t v8 = *((void *)v3 - 2);
      uint64_t v7 = *((void *)v3 - 1);
      int v9 = *v3;
      if (!*v3) {
        goto LABEL_12;
      }
      if (v9 == 1) {
        break;
      }
LABEL_8:
      v3 += 24;
      if (!--v2) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRetain();
LABEL_12:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1001BA648(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    unint64_t v4 = _swiftEmptyArrayStorage[3];
    if (v5 >= v4 >> 1) {
      sub_1001BA648(v4 > 1, v5 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v5 + 1;
    uint64_t v6 = &_swiftEmptyArrayStorage[3 * v5];
    v6[4] = v8;
    v6[5] = v7;
    *((unsigned char *)v6 + 48) = v9;
    goto LABEL_8;
  }
LABEL_15:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v11 = _swiftEmptyArrayStorage[2];
  swift_release();
  return v11 != 0;
}

BOOL sub_1002BE7B0()
{
  if (!*(void *)(v0 + 80)) {
    return 0;
  }
  swift_retain();
  uint64_t v1 = sub_10020D508();
  uint64_t v2 = v1[2];
  if (v2)
  {
    unint64_t v3 = v1 + 6;
    while (1)
    {
      uint64_t v8 = *((void *)v3 - 2);
      uint64_t v7 = *((void *)v3 - 1);
      int v9 = *v3;
      if (!*v3) {
        goto LABEL_11;
      }
      if (v9 == 1) {
        break;
      }
LABEL_7:
      v3 += 24;
      if (!--v2) {
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRetain();
LABEL_11:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1001BA648(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    unint64_t v4 = _swiftEmptyArrayStorage[3];
    if (v5 >= v4 >> 1) {
      sub_1001BA648(v4 > 1, v5 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v5 + 1;
    uint64_t v6 = &_swiftEmptyArrayStorage[3 * v5];
    v6[4] = v8;
    v6[5] = v7;
    *((unsigned char *)v6 + 48) = v9;
    goto LABEL_7;
  }
LABEL_14:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v11 = _swiftEmptyArrayStorage[2];
  swift_release();
  return v11 != 0;
}

uint64_t sub_1002BE8F8()
{
  uint64_t v1 = type metadata accessor for EpisodeDeletionActionProvider.Context();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = __chkstk_darwin(v1);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + 72);
  if (v6 && !*(unsigned char *)(v6 + 32))
  {
    uint64_t v7 = *(void *)(v0 + 96);
    swift_bridgeObjectRetain();
    if (v7)
    {
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for EpisodeDeletionActionProvider.Context.action(_:), v1);
      swift_retain();
      uint64_t v8 = dispatch thunk of EpisodeDeletionActionProvider.deleteEpisodesOrProvideDeleteActions(episodeUuids:stationUuids:context:noConfirmation:)();
      unint64_t v10 = v9;
      unint64_t v12 = v11;
      swift_release();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      if (v10)
      {
        sub_1002BEAB8(v8, v10, v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1002BEAB8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_100054B78((uint64_t *)&unk_100605DC0);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v11 = 0;
  }
  id v40 = [self alertControllerWithTitle:v11 message:0 preferredStyle:0];

  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_8;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v13 = self;
  if (v12 < 1)
  {
    __break(1u);
    return;
  }
  int v14 = (void *)v13;
  uint64_t v38 = v3;
  id v39 = v9;
  uint64_t v15 = 0;
  do
  {
    if ((a3 & 0xC000000000000001) != 0)
    {
      uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v20 = *(void *)(a3 + 8 * v15 + 32);
      swift_retain();
    }
    swift_retain();
    Action.presentationStyle.getter();
    swift_release();
    unsigned __int8 v21 = static Link.Presentation.alertDestructive.getter();
    Link.Presentation.init(rawValue:)();
    BOOL v22 = Link.Presentation.init(rawValue:)() == v21;
    swift_retain();
    Action.title.getter();
    uint64_t v24 = v23;
    swift_release();
    swift_retain();
    if (v24)
    {
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v16 = 0;
    }
    ++v15;
    uint64_t v17 = 2 * v22;
    aBlock[4] = sub_1002BF7D8;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001F2B1C;
    void aBlock[3] = &unk_10055E708;
    uint64_t v18 = _Block_copy(aBlock);
    swift_release();
    id v19 = [v14 actionWithTitle:v16 style:v17 handler:v18];
    _Block_release(v18);

    [v40 addAction:v19];
    swift_release();
  }
  while (v12 != v15);
  swift_bridgeObjectRelease();
  uint64_t v3 = v38;
  unint64_t v9 = v39;
LABEL_20:
  id v25 = [v40 actions];
  sub_1002BF818();
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v27)
  {
    id v28 = [self mainBundle];
    v42._object = (void *)0xE000000000000000;
    v29._uint64_t countAndFlagsBits = 0x6C65636E6143;
    v29._object = (void *)0xE600000000000000;
    v30._uint64_t countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    v42._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v42);

    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v32 = [self actionWithTitle:v31 style:1 handler:0];

    [v40 addAction:v32];
    swift_beginAccess();
    if (*(void *)(v3 + 88))
    {
      swift_retain();
      dispatch thunk of ContextActionsConfiguration.presentationSource.getter();
      swift_release();
      uint64_t v33 = type metadata accessor for PresentationSource();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v9, 1, v33) != 1)
      {
        id v35 = v40;
        PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)();

        (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v33);
        return;
      }
    }
    else
    {
      uint64_t v36 = type metadata accessor for PresentationSource();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v9, 1, 1, v36);
    }

    sub_1001AC7B4((uint64_t)v9);
  }
  else
  {
  }
}

uint64_t sub_1002BF050()
{
  swift_release();
  sub_10004D2D8(v0 + 24);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts27RemoveDownloadContextAction_metricsLabel;
  uint64_t v2 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1002BF0EC()
{
  sub_1002BF050();

  return swift_deallocClassInstance();
}

uint64_t sub_1002BF144()
{
  return type metadata accessor for RemoveDownloadContextAction();
}

uint64_t type metadata accessor for RemoveDownloadContextAction()
{
  uint64_t result = qword_1005FFF18;
  if (!qword_1005FFF18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002BF198()
{
  uint64_t result = type metadata accessor for MetricsLabel();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002BF254()
{
  return swift_retain();
}

uint64_t sub_1002BF25C(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return swift_release();
}

uint64_t sub_1002BF26C()
{
  id v0 = [self mainBundle];
  v5._object = (void *)0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0x442065766F6D6552;
  v1._object = (void *)0xEF64616F6C6E776FLL;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1002BF314()
{
  return 0x6873617274;
}

uint64_t sub_1002BF328@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts27RemoveDownloadContextAction_metricsLabel;
  uint64_t v4 = type metadata accessor for MetricsLabel();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1002BF39C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ContextActionType.removeEpisode(_:);
  uint64_t v3 = type metadata accessor for ContextActionType();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

BOOL sub_1002BF474()
{
  return *(void *)(v0 + 72) && sub_1002BE7B0();
}

double sub_1002BF490@<D0>(uint64_t a1@<X8>)
{
  id v2 = [self systemRedColor];
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = [v3 mainBundle];
  v10._object = (void *)0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0x442065766F6D6552;
  v6._object = (void *)0xEF64616F6C6E776FLL;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  Swift::String v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  *(void *)a1 = v2;
  *(void *)&double result = 0x6873617274;
  *(_OWORD *)(a1 + 8) = xmmword_1004738B0;
  *(Swift::String *)(a1 + 24) = v8;
  return result;
}

uint64_t sub_1002BF58C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100267180(a1, a2, WitnessTable);
}

void *sub_1002BF5EC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266A1C(a1, a2, WitnessTable);
}

uint64_t sub_1002BF64C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266B78(a1, a2, WitnessTable);
}

id sub_1002BF6AC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266E10(a1, a2, WitnessTable);
}

uint64_t sub_1002BF70C(uint64_t a1)
{
  uint64_t result = sub_1002BF794(&qword_1006000B0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002BF750(uint64_t a1)
{
  uint64_t result = sub_1002BF794(&qword_1006000B8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002BF794(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RemoveDownloadContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002BF7D8()
{
  uint64_t v0 = (void (*)(void))ClosureAction.closure.getter();
  v0();

  return swift_release();
}

unint64_t sub_1002BF818()
{
  unint64_t result = qword_1006000C0;
  if (!qword_1006000C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1006000C0);
  }
  return result;
}

uint64_t sub_1002BF858()
{
  uint64_t v1 = sub_100054B78(&qword_1005FCBF0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  id v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  Swift::String v6 = (char *)&v20 - v5;
  uint64_t v7 = v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
  swift_beginAccess();
  sub_1002C184C(v7, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for EpisodePlayState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1) {
    goto LABEL_6;
  }
  sub_1002C184C((uint64_t)v6, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1001DD6C0((uint64_t)v4);
LABEL_6:
    Swift::String v10 = (objc_class *)[self mainBundle];
    unint64_t v19 = 0xEC00000065646F73;
    unint64_t v12 = 0x80000001004DBA10;
    unint64_t v11 = 0xD000000000000013;
    v13.super.Class isa = v10;
    uint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    uint64_t v16 = 0x6970452079616C50;
    goto LABEL_7;
  }
  int v9 = v4[16];
  Swift::String v10 = (objc_class *)[self mainBundle];
  if (v9 == 1)
  {
    unint64_t v11 = 0xD000000000000015;
    unint64_t v19 = 0xEE0065646F736970;
    unint64_t v12 = 0x80000001004DBA50;
    v13.super.Class isa = v10;
    uint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    uint64_t v16 = 0x4520656D75736552;
  }
  else
  {
    unint64_t v11 = 0xD000000000000014;
    unint64_t v19 = 0xED000065646F7369;
    unint64_t v12 = 0x80000001004DBA30;
    v13.super.Class isa = v10;
    uint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    uint64_t v16 = 0x7045206573756150;
  }
LABEL_7:
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v11, (Swift::String_optional)0, v13, *(Swift::String *)&v14, *(Swift::String *)&v16)._countAndFlagsBits;

  sub_100054B1C((uint64_t)v6, &qword_1005FCBF0);
  return countAndFlagsBits;
}

uint64_t sub_1002BFAFC()
{
  uint64_t v1 = sub_100054B78(&qword_1005FCBF0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  id v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  Swift::String v6 = (char *)&v11 - v5;
  uint64_t v7 = v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
  swift_beginAccess();
  sub_1002C184C(v7, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for EpisodePlayState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1) {
    goto LABEL_6;
  }
  sub_1002C184C((uint64_t)v6, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1001DD6C0((uint64_t)v4);
    goto LABEL_6;
  }
  if (v4[16])
  {
LABEL_6:
    uint64_t v9 = 2036427888;
    goto LABEL_7;
  }
  uint64_t v9 = 0x6573756170;
LABEL_7:
  sub_100054B1C((uint64_t)v6, &qword_1005FCBF0);
  return v9;
}

uint64_t sub_1002BFC6C()
{
  uint64_t v1 = sub_100054B78(&qword_1005FCBF0);
  uint64_t result = __chkstk_darwin(v1 - 8);
  id v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 16);
  if (v5)
  {
    swift_retain();
    if (sub_100401A34())
    {
      sub_1002BFD74(v5, (uint64_t)v4);
      swift_release();
      uint64_t v6 = v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
      swift_beginAccess();
      sub_1002C17E4((uint64_t)v4, v6);
      return swift_endAccess();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1002BFD74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100054B78((uint64_t *)&unk_1006005C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EpisodeOffer();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  switch(*(unsigned char *)(a1 + 32))
  {
    case 1:
      uint64_t v15 = sub_100401E68(1);
      if (*(void *)(v15 + 16))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, v15 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
      }
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        sub_100054B1C((uint64_t)v8, (uint64_t *)&unk_1006005C0);
        goto LABEL_66;
      }
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
      EpisodeOffer.contentId.getter();
      EpisodeStateController.stateMachine(for:)();
      dispatch thunk of EpisodeStateMachine.currentState.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v22 = type metadata accessor for EpisodePlayState();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a2, 0, 1, v22);
    case 2:
      unint64_t v47 = (unint64_t)_swiftEmptyArrayStorage;
      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        if (v16)
        {
LABEL_8:
          uint64_t v46 = v3;
          if (v16 < 1)
          {
            __break(1u);
            goto LABEL_68;
          }
          uint64_t v17 = 0;
          do
          {
            if ((v14 & 0xC000000000000001) != 0) {
              id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v18 = *(id *)(v14 + 8 * v17 + 32);
            }
            if (objc_msgSend(v18, "isExplicit", v46))
            {
              type metadata accessor for RestrictionsController();
              static RestrictionsController.isExplicitContentAllowed.getter();
            }
            ++v17;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v16 != v17);
          sub_1001DCDF8(v14, v13, 2u);
          unint64_t v21 = v47;
          if ((v47 & 0x8000000000000000) != 0) {
            goto LABEL_64;
          }
LABEL_46:
          if ((v21 & 0x4000000000000000) == 0)
          {
            if (!*(void *)(v21 + 16)) {
              goto LABEL_65;
            }
LABEL_48:
            if ((v21 & 0xC000000000000001) != 0) {
              goto LABEL_71;
            }
            if (!*(void *)(v21 + 16))
            {
              __break(1u);
              JUMPOUT(0x1002C04F4);
            }
            id v38 = *(id *)(v21 + 32);
            goto LABEL_51;
          }
LABEL_64:
          swift_bridgeObjectRetain();
          uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          if (!v44) {
            goto LABEL_65;
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v16) {
          goto LABEL_8;
        }
      }
      sub_1001DCDF8(v14, v13, 2u);
      unint64_t v21 = (unint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_64;
      }
      goto LABEL_46;
    case 3:
      unint64_t v47 = (unint64_t)_swiftEmptyArrayStorage;
      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        if (!v19) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v19 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v19) {
          goto LABEL_32;
        }
      }
      if (v19 < 1)
      {
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if ((v14 & 0xC000000000000001) != 0)
      {
        uint64_t v20 = 0;
        do
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          ++v20;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v19 != v20);
      }
      else
      {
        uint64_t v24 = (void **)(v14 + 32);
        do
        {
          id v25 = *v24++;
          id v26 = v25;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v19;
        }
        while (v19);
      }
LABEL_32:
      sub_1001DCDF8(v14, v13, 3u);
      unint64_t v27 = v47;
      if ((v47 & 0x8000000000000000) != 0 || (v47 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (v43)
        {
LABEL_35:
          if ((v27 & 0xC000000000000001) == 0)
          {
            if (!*(void *)(v27 + 16))
            {
              __break(1u);
LABEL_71:
              id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_51:
              Swift::String v29 = v38;
              swift_release();
              id v39 = [v29 episodeUuid];
              if (v39)
              {
                id v40 = v39;
                static String._unconditionallyBridgeFromObjectiveC(_:)();

                EpisodeStateController.stateMachine(for:)();
                goto LABEL_53;
              }
              [v29 episodeStoreId];
              AdamID.init(rawValue:)();
LABEL_55:
              EpisodeStateController.stateMachine(for:)();
              goto LABEL_56;
            }
            id v28 = *(id *)(v27 + 32);
LABEL_38:
            Swift::String v29 = v28;
            swift_release();
            uint64_t v30 = MPCPlayerResponseItem.podcastEpisode.getter();
            if (v30)
            {
              NSString v31 = (void *)v30;
              MPModelObject.uuid.getter();
              uint64_t v33 = v32;

              if (v33)
              {
                EpisodeStateController.stateMachine(for:)();
LABEL_53:
                swift_bridgeObjectRelease();
LABEL_56:
                dispatch thunk of EpisodeStateMachine.currentState.getter();
                swift_release();

                goto LABEL_57;
              }
            }
            uint64_t v34 = MPCPlayerResponseItem.podcastEpisode.getter();
            if (!v34
              || (id v35 = (void *)v34, MPModelObject.adamID.getter(), v37 = v36, v35, (v37 & 1) != 0))
            {

              goto LABEL_66;
            }
            goto LABEL_55;
          }
LABEL_69:
          id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_38;
        }
      }
      else if (*(void *)(v47 + 16))
      {
        goto LABEL_35;
      }
LABEL_65:
      swift_release();
LABEL_66:
      uint64_t v45 = type metadata accessor for EpisodePlayState();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(a2, 1, 1, v45);
    default:
      if (!sub_100401D38()[2])
      {
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      EpisodeStateController.stateMachine(for:)();
      swift_bridgeObjectRelease();
      dispatch thunk of EpisodeStateMachine.currentState.getter();
      swift_release();
LABEL_57:
      uint64_t v41 = type metadata accessor for EpisodePlayState();
      Swift::String v42 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
      return v42(a2, 0, 1, v41);
  }
}

uint64_t sub_1002C0504()
{
  uint64_t v1 = type metadata accessor for InteractionContext();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v0 + 16)) {
    goto LABEL_6;
  }
  swift_retain();
  if (!sub_100401A34() || (swift_beginAccess(), !*(void *)(v0 + 24)))
  {
    swift_release();
LABEL_6:
    char v5 = 0;
    return v5 & 1;
  }
  swift_retain();
  dispatch thunk of ContextActionsConfiguration.context.getter();
  swift_release();
  InteractionContext.view.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  char v5 = static InteractionContext.View.== infix(_:_:)();
  swift_release();
  return v5 & 1;
}

uint64_t sub_1002C0654()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1006005C0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EpisodeOffer();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100054B78((uint64_t *)&unk_1005FEA40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100054B78(&qword_1005FCBF0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v66 - v17;
  uint64_t result = __chkstk_darwin(v16);
  unint64_t v21 = (char *)&v66 - v20;
  uint64_t v22 = v1[2];
  if (v22)
  {
    uint64_t v69 = v11;
    uint64_t v23 = swift_retain();
    sub_1002BFD74(v23, (uint64_t)v21);
    uint64_t v24 = (uint64_t)v1 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state;
    swift_beginAccess();
    sub_1002C17E4((uint64_t)v21, v24);
    swift_endAccess();
    sub_1002C184C(v24, (uint64_t)v18);
    uint64_t v25 = type metadata accessor for EpisodePlayState();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v18, 1, v25) != 1)
    {
      sub_1002C184C((uint64_t)v18, (uint64_t)v15);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        int v26 = v15[16];
        sub_100041A98(v1 + 4, v1[7]);
        if (v26 == 1) {
          dispatch thunk of EpisodeControllerProtocol.playPlayer()();
        }
        else {
          dispatch thunk of EpisodeControllerProtocol.pausePlayer()();
        }
        swift_release();
        return sub_100054B1C((uint64_t)v18, &qword_1005FCBF0);
      }
      sub_1001DD6C0((uint64_t)v15);
    }
    unint64_t v27 = *(void *)(v22 + 16);
    switch(*(unsigned char *)(v22 + 32))
    {
      case 1:
        uint64_t v30 = v18;
        uint64_t v31 = 1;
        uint64_t v32 = sub_100401E68(1);
        if (*(void *)(v32 + 16))
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, v32 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
          uint64_t v31 = 0;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v31, 1, v5);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        {
          swift_release();
          uint64_t v33 = (uint64_t *)&unk_1006005C0;
          uint64_t v34 = v4;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
          sub_100041A98(v1 + 4, v1[7]);
          uint64_t v71 = type metadata accessor for PlayEpisodeContextAction();
          v70[0] = v1;
          swift_retain();
          dispatch thunk of EpisodeControllerProtocol.play(episodeOffer:sender:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          uint64_t v33 = &qword_1005F5D30;
          uint64_t v34 = (char *)v70;
        }
        sub_100054B1C((uint64_t)v34, v33);
        id v18 = v30;
        return sub_100054B1C((uint64_t)v18, &qword_1005FCBF0);
      case 2:
        uint64_t v68 = *(void *)(v22 + 24);
        v70[0] = _swiftEmptyArrayStorage;
        if (v27 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
          id v67 = v18;
          if (v35)
          {
LABEL_16:
            if (v35 < 1)
            {
              __break(1u);
              goto LABEL_75;
            }
            uint64_t v36 = 0;
            do
            {
              if ((v27 & 0xC000000000000001) != 0) {
                id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v37 = *(id *)(v27 + 8 * v36 + 32);
              }
              if ([v37 isExplicit])
              {
                type metadata accessor for RestrictionsController();
                static RestrictionsController.isExplicitContentAllowed.getter();
              }
              ++v36;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            while (v35 != v36);
            sub_1001DCDF8(v27, v68, 2u);
            unint64_t v40 = v70[0];
            id v18 = v67;
            if ((v70[0] & 0x8000000000000000) != 0) {
              goto LABEL_70;
            }
LABEL_57:
            if ((v40 & 0x4000000000000000) == 0)
            {
              if (!*(void *)(v40 + 16)) {
                goto LABEL_71;
              }
LABEL_59:
              if ((v40 & 0xC000000000000001) != 0) {
                goto LABEL_78;
              }
              if (!*(void *)(v40 + 16))
              {
                __break(1u);
                JUMPOUT(0x1002C123CLL);
              }
              id v58 = *(id *)(v40 + 32);
              goto LABEL_62;
            }
LABEL_70:
            swift_bridgeObjectRetain();
            uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            if (!v65) {
              goto LABEL_71;
            }
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v35 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          id v67 = v18;
          if (v35) {
            goto LABEL_16;
          }
        }
        sub_1001DCDF8(v27, v68, 2u);
        unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
        if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        goto LABEL_57;
      case 3:
        uint64_t v68 = *(void *)(v22 + 24);
        v70[0] = _swiftEmptyArrayStorage;
        if (v27 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
          if (!v38) {
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v38 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v38) {
            goto LABEL_40;
          }
        }
        if (v38 < 1)
        {
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
        if ((v27 & 0xC000000000000001) != 0)
        {
          uint64_t v39 = 0;
          do
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
            ++v39;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v38 != v39);
        }
        else
        {
          uint64_t v41 = (void **)(v27 + 32);
          do
          {
            Swift::String v42 = *v41++;
            id v43 = v42;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            --v38;
          }
          while (v38);
        }
LABEL_40:
        sub_1001DCDF8(v27, v68, 3u);
        uint64_t v44 = v70[0];
        if ((v70[0] & 0x8000000000000000) != 0 || (v70[0] & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          if (v64)
          {
LABEL_43:
            if ((v44 & 0xC000000000000001) == 0)
            {
              if (!*(void *)(v44 + 16))
              {
                __break(1u);
LABEL_78:
                id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_62:
                id v59 = v58;
                swift_release();
                id v60 = [v59 episodeUuid];
                if (v60)
                {
                  id v61 = v60;
                  static String._unconditionallyBridgeFromObjectiveC(_:)();

                  sub_100041A98(v1 + 4, v1[7]);
                  uint64_t v62 = type metadata accessor for EpisodeListSettings();
                  uint64_t v63 = (uint64_t)v69;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v69, 1, 1, v62);
                  uint64_t v71 = type metadata accessor for PlayEpisodeContextAction();
                  v70[0] = v1;
                  swift_retain();
                  EpisodeControllerProtocol.play(episodeUuid:settings:sender:isSmartPlayButton:preventQueueing:adamId:timestamp:waitForEngine:)();

                  swift_bridgeObjectRelease();
                  swift_release();
                  sub_100054B1C(v63, (uint64_t *)&unk_1005FEA40);
                }
                else
                {
                  [v59 episodeStoreId];
                  AdamID.init(rawValue:)();
                  sub_100041A98(v1 + 4, v1[7]);
                  uint64_t v71 = type metadata accessor for PlayEpisodeContextAction();
                  v70[0] = v1;
                  swift_retain();
                  dispatch thunk of EpisodeControllerProtocol.play(storeEpisodeId:timestamp:sender:)();
                  swift_release();
                }
                sub_100054B1C((uint64_t)v70, &qword_1005F5D30);
                id v18 = v67;
                return sub_100054B1C((uint64_t)v18, &qword_1005FCBF0);
              }
              id v45 = *(id *)(v44 + 32);
LABEL_46:
              uint64_t v46 = v45;
              swift_release();
              unint64_t v47 = v18;
              uint64_t v48 = MPCPlayerResponseItem.podcastEpisode.getter();
              if (v48 && (v49 = (void *)v48, MPModelObject.uuid.getter(), uint64_t v51 = v50, v49, v51))
              {
                sub_100041A98(v1 + 4, v1[7]);
                uint64_t v52 = type metadata accessor for EpisodeListSettings();
                uint64_t v53 = (uint64_t)v69;
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v69, 1, 1, v52);
                uint64_t v71 = type metadata accessor for PlayEpisodeContextAction();
                v70[0] = v1;
                swift_retain();
                EpisodeControllerProtocol.play(episodeUuid:settings:sender:isSmartPlayButton:preventQueueing:adamId:timestamp:waitForEngine:)();
                swift_bridgeObjectRelease();

                swift_release();
                sub_100054B1C(v53, (uint64_t *)&unk_1005FEA40);
              }
              else
              {
                uint64_t v54 = MPCPlayerResponseItem.podcastEpisode.getter();
                if (!v54
                  || (uint64_t v55 = (void *)v54, MPModelObject.adamID.getter(), v57 = v56, v55, (v57 & 1) != 0))
                {

                  swift_release();
                  goto LABEL_54;
                }
                sub_100041A98(v1 + 4, v1[7]);
                uint64_t v71 = type metadata accessor for PlayEpisodeContextAction();
                v70[0] = v1;
                swift_retain();
                dispatch thunk of EpisodeControllerProtocol.play(storeEpisodeId:timestamp:sender:)();
                swift_release();
              }
              sub_100054B1C((uint64_t)v70, &qword_1005F5D30);
LABEL_54:
              id v18 = v47;
              return sub_100054B1C((uint64_t)v18, &qword_1005FCBF0);
            }
LABEL_76:
            id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_46;
          }
        }
        else if (*(void *)(v70[0] + 16))
        {
          goto LABEL_43;
        }
LABEL_71:
        swift_release();
        swift_release();
        return sub_100054B1C((uint64_t)v18, &qword_1005FCBF0);
      default:
        if (sub_100401D38()[2])
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          sub_100041A98(v1 + 4, v1[7]);
          uint64_t v28 = type metadata accessor for EpisodeListSettings();
          uint64_t v29 = (uint64_t)v69;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v69, 1, 1, v28);
          uint64_t v71 = type metadata accessor for PlayEpisodeContextAction();
          v70[0] = v1;
          swift_retain();
          EpisodeControllerProtocol.play(episodeUuid:settings:sender:isSmartPlayButton:preventQueueing:adamId:timestamp:waitForEngine:)();
          swift_bridgeObjectRelease();
          swift_release();
          sub_100054B1C(v29, (uint64_t *)&unk_1005FEA40);
          sub_100054B1C((uint64_t)v70, &qword_1005F5D30);
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
        }
        return sub_100054B1C((uint64_t)v18, &qword_1005FCBF0);
    }
  }
  return result;
}

uint64_t sub_1002C124C()
{
  swift_release();
  swift_release();
  sub_10004D2D8(v0 + 32);
  swift_release();
  sub_100054B1C(v0 + OBJC_IVAR____TtC8Podcasts24PlayEpisodeContextAction_state, &qword_1005FCBF0);

  return swift_deallocClassInstance();
}

uint64_t sub_1002C12D8()
{
  return type metadata accessor for PlayEpisodeContextAction();
}

uint64_t type metadata accessor for PlayEpisodeContextAction()
{
  uint64_t result = qword_1006000F8;
  if (!qword_1006000F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002C132C()
{
  sub_1002C13E0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1002C13E0()
{
  if (!qword_1005FD728)
  {
    type metadata accessor for EpisodePlayState();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005FD728);
    }
  }
}

uint64_t sub_1002C1440@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsLabel.playEpisode(_:);
  uint64_t v3 = type metadata accessor for MetricsLabel();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_1002C14B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ContextActionType.playEpisode(_:);
  uint64_t v3 = type metadata accessor for ContextActionType();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  id v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t sub_1002C1598(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100267180(a1, a2, WitnessTable);
}

void *sub_1002C15F8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266A1C(a1, a2, WitnessTable);
}

uint64_t sub_1002C1658(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266B78(a1, a2, WitnessTable);
}

id sub_1002C16B8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100266E10(a1, a2, WitnessTable);
}

uint64_t sub_1002C1718(uint64_t a1)
{
  uint64_t result = sub_1002C17A0(&qword_100600230);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002C175C(uint64_t a1)
{
  uint64_t result = sub_1002C17A0(&qword_100600238);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002C17A0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PlayEpisodeContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002C17E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FCBF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C184C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FCBF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_1002C18B4()
{
  uint64_t v1 = type metadata accessor for InteractionContext.Page();
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InteractionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + 56);
  if (!v8) {
    return 0;
  }
  swift_beginAccess();
  if (*(void *)(v0 + 64))
  {
    swift_retain();
    swift_retain();
    dispatch thunk of ContextActionsConfiguration.context.getter();
    swift_release();
    InteractionContext.page.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v9 = InteractionContext.Page.isEpisodePage.getter();
    sub_1001B4BB0((uint64_t)v3);
    if (v9)
    {
      swift_release();
      return 0;
    }
  }
  else
  {
    swift_retain();
  }
  unint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  switch(*(unsigned char *)(v8 + 32))
  {
    case 1:
      sub_1001DCD9C(*(void *)(v8 + 16), *(void *)(v8 + 24), 1u);
      swift_release();
      uint64_t v13 = *(void *)(v11 + 16);
      sub_1001DCDF8(v11, v12, 1u);
      goto LABEL_10;
    case 2:
      if (!(v11 >> 62)) {
        goto LABEL_14;
      }
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      sub_1001DCDF8(v11, v12, 2u);
      goto LABEL_15;
    case 3:
      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        sub_1001DCDF8(v11, v12, 3u);
      }
      else
      {
LABEL_14:
        uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
LABEL_15:
      swift_release();
      BOOL v14 = v15 == 1;
      break;
    default:
      sub_1001DCD9C(*(void *)(v8 + 16), *(void *)(v8 + 24), 0);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(v11 + 16);
      swift_bridgeObjectRelease();
LABEL_10:
      BOOL v14 = v13 == 1;
      break;
  }
  return v14;
}

uint64_t sub_1002C1B68()
{
  uint64_t v1 = type metadata accessor for EpisodeOffer();
  uint64_t v78 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  os_log_type_t v79 = (char *)&v73 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  int v80 = (char *)&v73 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v73 - v12;
  uint64_t v14 = type metadata accessor for URL();
  id v83 = *(unsigned int (***)(void, void, void))(v14 - 8);
  uint64_t v84 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v76 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  id v77 = (char *)&v73 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v73 - v19;
  uint64_t v21 = type metadata accessor for PreviewingPresentationHint();
  uint64_t v82 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v81 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100054B78((uint64_t *)&unk_100605DC0);
  uint64_t result = __chkstk_darwin(v23 - 8);
  int v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = *(void *)(v0 + 56);
  if (!v85) {
    return result;
  }
  uint64_t result = swift_beginAccess();
  if (!*(void *)(v0 + 64)) {
    return result;
  }
  uint64_t v74 = v0;
  swift_retain();
  swift_retain();
  uint64_t v75 = ContextActionsConfiguration.objectGraph.getter();
  swift_release();
  if (!*(void *)(v0 + 64))
  {
    uint64_t v41 = type metadata accessor for PresentationSource();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v26, 1, 1, v41);
    goto LABEL_11;
  }
  uint64_t v73 = v21;
  swift_retain();
  dispatch thunk of ContextActionsConfiguration.presentationSource.getter();
  swift_release();
  uint64_t v27 = type metadata accessor for PresentationSource();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
LABEL_11:
    swift_release();
    swift_release();
    Swift::String v42 = (uint64_t *)&unk_100605DC0;
    uint64_t v43 = (uint64_t)v26;
    return sub_100054B1C(v43, v42);
  }
  uint64_t v29 = PresentationSource.viewController.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
  if (v29)
  {
    uint64_t v30 = (void *)v29;
    unint64_t v32 = *(void *)(v85 + 16);
    uint64_t v31 = *(void *)(v85 + 24);
    unsigned __int8 v33 = *(unsigned char *)(v85 + 32);
    uint64_t v34 = v73;
    switch(v33)
    {
      case 1u:
        if (*(void *)(v32 + 16))
        {
          uint64_t v44 = v78;
          (*(void (**)(char *, unint64_t, uint64_t))(v78 + 16))(v3, v32 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80)), v1);
          EpisodeOffer.storeUrl.getter();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v3, v1);
          uint64_t v46 = v83;
          uint64_t v45 = v84;
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v83)[6](v13, 1, v84) != 1)
          {
            ((unsigned int (**)(char *, char *, uint64_t))v46)[4](v20, v13, v45);
            sub_100056D54(v74 + 16, (uint64_t)v86);
            int v80 = v88;
            sub_100041A98(v86, v87);
            uint64_t v48 = v81;
            uint64_t v47 = v82;
            (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v85 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint, v34);
            dispatch thunk of EpisodeControllerProtocol.presentStorePage(asPartOf:for:from:presentationHint:suppressMetrics:)();
            swift_release();

            swift_release();
            (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v34);
            ((void (*)(char *, uint64_t))v46[1])(v20, v84);
            return sub_10004D2D8((uint64_t)v86);
          }
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v83[7])(v13, 1, 1, v84);
        }
        swift_release();

        swift_release();
        Swift::String v42 = (uint64_t *)&unk_1005F7750;
        uint64_t v43 = (uint64_t)v13;
        return sub_100054B1C(v43, v42);
      case 2u:
        uint64_t v49 = *(void *)(v85 + 24);
        uint64_t v7 = (char *)(v32 & 0xFFFFFFFFFFFFFF8);
        if (v32 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t v51 = (uint64_t)v79;
          uint64_t v50 = (uint64_t)v80;
          if (v31) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v31 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v51 = (uint64_t)v79;
          uint64_t v50 = (uint64_t)v80;
          if (v31)
          {
LABEL_20:
            if ((v32 & 0xC000000000000001) != 0)
            {
              id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v52 = v83;
              goto LABEL_23;
            }
            uint64_t v52 = v83;
            if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              id v53 = *(id *)(v32 + 32);
LABEL_23:
              sub_1001DCDF8(v32, v49, 2u);
              id v54 = [self episodeUrlForPodcastStoreId:[v53 podcastStoreId] episodeStoreId:[v53 episodeStoreId]];
              if (v54)
              {
                uint64_t v55 = v54;
                static URL._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v56 = 0;
              }
              else
              {
                uint64_t v56 = 1;
              }
              uint64_t v64 = v74;
              uint64_t v65 = v84;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v52[7])(v51, v56, 1, v84);
              sub_100222DB4(v51, v50);
              if (v52[6](v50, 1, v65) == 1)
              {
                swift_release();

                swift_release();
                Swift::String v42 = (uint64_t *)&unk_1005F7750;
                uint64_t v43 = v50;
                return sub_100054B1C(v43, v42);
              }
              uint64_t v66 = (void (*)(void))v52[4];
              id v83 = (unsigned int (**)(void, void, void))v53;
              id v67 = v77;
              v66();
              sub_100056D54(v64 + 16, (uint64_t)v86);
              int v80 = v88;
              sub_100041A98(v86, v87);
              uint64_t v69 = v81;
              uint64_t v68 = v82;
              (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v85 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint, v34);
              dispatch thunk of EpisodeControllerProtocol.presentStorePage(asPartOf:for:from:presentationHint:suppressMetrics:)();
              swift_release();

              swift_release();
              (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v34);
              ((void (*)(char *, uint64_t))v52[1])(v67, v84);
              return sub_10004D2D8((uint64_t)v86);
            }
            __break(1u);
LABEL_49:
            id v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            id v58 = v83;
            goto LABEL_30;
          }
        }
        uint64_t v70 = v32;
        uint64_t v71 = v49;
        unsigned __int8 v72 = 2;
        goto LABEL_44;
      case 3u:
        if (v32 >> 62)
        {
          swift_bridgeObjectRetain();
          if (_CocoaArrayWrapper.endIndex.getter()) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v57 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v57)
          {
LABEL_27:
            if ((v32 & 0xC000000000000001) != 0) {
              goto LABEL_49;
            }
            id v58 = v83;
            if (!*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              JUMPOUT(0x1002C2784);
            }
            id v59 = *(id *)(v32 + 32);
LABEL_30:
            sub_1001DCDF8(v32, v31, 3u);
            sub_1002C2E78();
            sub_1002C2794((uint64_t)v7);
            uint64_t v60 = v84;
            if (((unsigned int (**)(char *, uint64_t, uint64_t))v58)[6](v7, 1, v84) != 1)
            {
              id v61 = v76;
              ((unsigned int (**)(char *, char *, uint64_t))v58)[4](v76, v7, v60);
              sub_100056D54(v74 + 16, (uint64_t)v86);
              id v83 = (unsigned int (**)(void, void, void))v88;
              sub_100041A98(v86, v87);
              uint64_t v63 = v81;
              uint64_t v62 = v82;
              (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v85 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint, v34);
              dispatch thunk of EpisodeControllerProtocol.presentStorePage(asPartOf:for:from:presentationHint:suppressMetrics:)();
              swift_release();

              swift_release();
              (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v73);
              ((void (*)(char *, uint64_t))v58[1])(v61, v84);
              return sub_10004D2D8((uint64_t)v86);
            }
            swift_release();

            swift_release();
            Swift::String v42 = (uint64_t *)&unk_1005F7750;
            uint64_t v43 = (uint64_t)v7;
            return sub_100054B1C(v43, v42);
          }
        }
        uint64_t v70 = v32;
        uint64_t v71 = v31;
        unsigned __int8 v72 = 3;
LABEL_44:
        sub_1001DCDF8(v70, v71, v72);
LABEL_45:
        swift_release();

        return swift_release();
      default:
        sub_1001DCD9C(*(void *)(v85 + 16), *(void *)(v85 + 24), *(unsigned char *)(v85 + 32));
        uint64_t v35 = sub_10040241C((void *)v32, v31, v33);
        uint64_t v36 = v31;
        id v37 = (void *)v35;
        sub_1001DCDF8(v32, v36, v33);
        if (!v37) {
          goto LABEL_45;
        }
        id v38 = [v37 uuid];

        if (!v38) {
          goto LABEL_45;
        }
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100056D54(v74 + 16, (uint64_t)v86);
        sub_100041A98(v86, v87);
        unint64_t v40 = v81;
        uint64_t v39 = v82;
        (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v85 + OBJC_IVAR____TtC8Podcasts24EpisodeContextActionData_presentationHint, v34);
        dispatch thunk of EpisodeControllerProtocol.presentEpisodePage(asPartOf:for:from:presentationHint:suppressMetrics:)();
        swift_release();
        swift_bridgeObjectRelease();

        swift_release();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v34);
        return sub_10004D2D8((uint64_t)v86);
    }
  }
  swift_release();
  return swift_release();
}

void sub_1002C2794(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)MPCPlayerResponseItem.podcastEpisode.getter();
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [v5 podcast];

    if (v7)
    {
      uint64_t v8 = MPModelObject.adamID.getter();
      char v10 = v9;

      if ((v10 & 1) == 0)
      {
        if (v8 < 0)
        {
          __break(1u);
          goto LABEL_16;
        }
        uint64_t v11 = MPCPlayerResponseItem.podcastEpisode.getter();
        if (v11)
        {
          uint64_t v12 = (void *)v11;
          uint64_t v13 = MPModelObject.adamID.getter();
          char v15 = v14;

          if ((v15 & 1) == 0)
          {
            if ((v13 & 0x8000000000000000) == 0)
            {
              id v16 = [(id)swift_getObjCClassFromMetadata() episodeUrlForPodcastStoreId:v8 episodeStoreId:v13];
              if (v16)
              {
                uint64_t v17 = v16;
                static URL._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v18 = type metadata accessor for URL();
                (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 0, 1, v18);
              }
              else
              {
                uint64_t v21 = type metadata accessor for URL();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v4, 1, 1, v21);
              }
              sub_100222DB4((uint64_t)v4, a1);
              return;
            }
LABEL_16:
            __break(1u);
            return;
          }
        }
      }
    }
  }
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);

  v20(a1, 1, 1, v19);
}

uint64_t sub_1002C29BC()
{
  sub_10004D2D8(v0 + 16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_metricsLabel;
  uint64_t v2 = type metadata accessor for MetricsLabel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100054B1C(v0 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_contextActionType, &qword_1005F9A58);

  return swift_deallocClassInstance();
}

uint64_t sub_1002C2A9C()
{
  return type metadata accessor for GoToEpisodeContextAction();
}

uint64_t type metadata accessor for GoToEpisodeContextAction()
{
  uint64_t result = qword_100600268;
  if (!qword_100600268) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002C2AF0()
{
  type metadata accessor for MetricsLabel();
  if (v0 <= 0x3F)
  {
    sub_1001DE3EC();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1002C2BF0()
{
  return swift_retain();
}

uint64_t sub_1002C2BF8(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t sub_1002C2C08()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1002C2C38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_metricsLabel;
  uint64_t v4 = type metadata accessor for MetricsLabel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1002C2CAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DE984(v1 + OBJC_IVAR____TtC8Podcasts24GoToEpisodeContextAction_contextActionType, a1);
}

uint64_t sub_1002C2CCC()
{
  return swift_retain();
}

uint64_t sub_1002C2D04(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t (*sub_1002C2D4C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1002C2DAC(uint64_t a1)
{
  uint64_t result = sub_1002C2E34(&qword_100600328);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002C2DF0(uint64_t a1)
{
  uint64_t result = sub_1002C2E34(&qword_1005FAAF8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002C2E34(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for GoToEpisodeContextAction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002C2E78()
{
  unint64_t result = qword_100600330;
  if (!qword_100600330)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100600330);
  }
  return result;
}

uint64_t sub_1002C2EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100054B78(&qword_1006003A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for EpisodeDownloadState();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v20 = v3;
  uint64_t v15 = a1;
  id v16 = v8;
  uint64_t v17 = a2;
  uint64_t v18 = v3;
  uint64_t v19 = &v21;
  type metadata accessor for DownloadingEpisodeStateDataSource();
  sub_10001CB64(&qword_100600398, v10, (void (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource);
  SynchronizedEpisodeStateDataSource.performExpectedEpisodeStateUpdates(_:)();
  if (v21[2])
  {
    uint64_t v11 = *(void (**)(uint64_t))(v3
                                         + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates);
    if (v11)
    {
      sub_10004ACDC((uint64_t)v11);
      uint64_t v12 = swift_bridgeObjectRetain();
      v11(v12);
      sub_1000536BC((uint64_t)v11);
      swift_bridgeObjectRelease();
    }
  }
  sub_100054B1C((uint64_t)v8, &qword_1006003A0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002C3068(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void **a5)
{
  int v114 = a5;
  uint64_t v128 = a2;
  uint64_t v8 = sub_100054B78(&qword_1006003A8);
  __chkstk_darwin(v8);
  uint64_t v119 = (char *)v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for EpisodeDownloadState();
  uint64_t v122 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v108 = (char *)v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v120 = (char *)v107 - v13;
  uint64_t v14 = sub_100054B78(&qword_1006003A0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v17 = __chkstk_darwin(v16);
  os_log_t v113 = (char *)v107 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v107 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)v107 - v23;
  __chkstk_darwin(v22);
  int v26 = (char *)v107 - v25;
  uint64_t v27 = v8;
  uint64_t v111 = v28;
  uint64_t v118 = v29;
  switch(a1)
  {
    case 0:
    case 3:
    case 5:
      [a3 percentComplete];
      *(void *)int v26 = v30;
      v26[8] = 0;
      goto LABEL_5;
    case 1:
    case 2:
      uint64_t v31 = v128;
      sub_100054B1C(v128, &qword_1006003A0);
      uint64_t v32 = v122;
      uint64_t v126 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
      uint64_t v127 = v122 + 56;
      v126(v31, 1, 1, v10);
      goto LABEL_6;
    case 4:
      [a3 percentComplete];
      *(void *)int v26 = v33;
      v26[8] = 1;
LABEL_5:
      uint64_t v32 = v122;
      (*(void (**)(char *, void, uint64_t))(v122 + 104))(v26, enum case for EpisodeDownloadState.downloading(_:), v10);
      uint64_t v126 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
      uint64_t v127 = v32 + 56;
      v126((uint64_t)v26, 0, 1, v10);
      sub_1002C4158((uint64_t)v26, v128);
LABEL_6:
      swift_getObjectType();
      uint64_t v34 = sub_1002C3DDC();
      uint64_t v35 = *(void *)(v34 + 56);
      uint64_t v115 = v34 + 56;
      uint64_t v121 = v34;
      uint64_t v36 = 1 << *(unsigned char *)(v34 + 32);
      uint64_t v37 = -1;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      a1 = v37 & v35;
      id v38 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_expectedEpisodeStates);
      swift_beginAccess();
      int64_t v39 = 0;
      int64_t v116 = (unint64_t)(v36 + 63) >> 6;
      uint64_t v109 = v32 + 16;
      objc_super v132 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
      uint64_t v123 = (void (**)(char *, uint64_t, uint64_t))(v32 + 32);
      v107[1] = v32 + 40;
      uint64_t v110 = (void (**)(uint64_t, uint64_t))(v32 + 8);
      uint64_t v135 = v10;
      uint64_t v40 = (uint64_t)v21;
      uint64_t v41 = v38;
      uint64_t v117 = v40;
      id v124 = v38;
      unint64_t v125 = v24;
      uint64_t v42 = v27;
      uint64_t v112 = v27;
      break;
    default:
      goto LABEL_72;
  }
  while (1)
  {
    if (a1)
    {
      uint64_t v130 = (a1 - 1) & a1;
      int64_t v131 = v39;
      unint64_t v44 = __clz(__rbit64(a1)) | (v39 << 6);
      uint64_t v45 = v135;
      goto LABEL_28;
    }
    int64_t v46 = v39 + 1;
    uint64_t v45 = v135;
    if (__OFADD__(v39, 1)) {
      goto LABEL_68;
    }
    if (v46 >= v116) {
      return swift_release();
    }
    unint64_t v47 = *(void *)(v115 + 8 * v46);
    int64_t v48 = v39 + 1;
    if (!v47)
    {
      int64_t v48 = v39 + 2;
      if (v39 + 2 >= v116) {
        return swift_release();
      }
      unint64_t v47 = *(void *)(v115 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v39 + 3;
        if (v39 + 3 >= v116) {
          return swift_release();
        }
        unint64_t v47 = *(void *)(v115 + 8 * v48);
        if (!v47)
        {
          uint64_t v49 = v39 + 4;
          if (v39 + 4 >= v116) {
            return swift_release();
          }
          unint64_t v47 = *(void *)(v115 + 8 * v49);
          if (!v47)
          {
            while (1)
            {
              int64_t v48 = v49 + 1;
              if (__OFADD__(v49, 1)) {
                goto LABEL_70;
              }
              if (v48 >= v116) {
                return swift_release();
              }
              unint64_t v47 = *(void *)(v115 + 8 * v48);
              ++v49;
              if (v47) {
                goto LABEL_27;
              }
            }
          }
          int64_t v48 = v39 + 4;
        }
      }
    }
LABEL_27:
    uint64_t v130 = (v47 - 1) & v47;
    int64_t v131 = v48;
    unint64_t v44 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_28:
    uint64_t v50 = *(void *)(v121 + 48) + 24 * v44;
    uint64_t v51 = *(void *)v50;
    a1 = *(void *)(v50 + 8);
    LODWORD(v52) = *(unsigned __int8 *)(v50 + 16);
    uint64_t v53 = *v41;
    if (*(void *)(*v41 + 16))
    {
      sub_1001DD838(v51, a1, v52);
      sub_1001DD838(v51, a1, v52);
      swift_bridgeObjectRetain();
      unint64_t v54 = sub_100226EE8(v51, a1, v52);
      if (v55)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v122 + 16))(v24, *(void *)(v53 + 56) + *(void *)(v122 + 72) * v54, v45);
        uint64_t v56 = v24;
        uint64_t v57 = 0;
      }
      else
      {
        uint64_t v56 = v24;
        uint64_t v57 = 1;
      }
      v126((uint64_t)v56, v57, 1, v45);
      swift_bridgeObjectRelease();
    }
    else
    {
      v126((uint64_t)v24, 1, 1, v45);
      sub_1001DD838(v51, a1, v52);
      sub_1001DD838(v51, a1, v52);
    }
    uint64_t v58 = v128;
    sub_1002C40F0(v128, v40);
    swift_beginAccess();
    uint64_t v129 = *v132;
    int v59 = v129(v40, 1, v45);
    int v133 = v52;
    uint64_t v134 = a1;
    if (v59 != 1)
    {
      uint64_t v67 = v40;
      uint64_t v68 = v58;
      uint64_t v69 = *v123;
      (*v123)(v120, v67, v45);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v136 = (void *)*v41;
      uint64_t v71 = v136;
      uint64_t *v41 = 0x8000000000000000;
      unint64_t v73 = sub_100226EE8(v51, a1, v52);
      uint64_t v74 = v71[2];
      BOOL v75 = (v72 & 1) == 0;
      uint64_t v76 = v74 + v75;
      if (__OFADD__(v74, v75))
      {
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_72:
        type metadata accessor for LegacyDownloadPhase(0);
        uint64_t v137 = a1;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        JUMPOUT(0x1002C3DC4);
      }
      char v77 = v72;
      if (v71[3] < v76)
      {
        sub_10027B7B8(v76, isUniquelyReferenced_nonNull_native);
        unint64_t v78 = sub_100226EE8(v51, a1, v52);
        if ((v77 & 1) != (v79 & 1)) {
          goto LABEL_71;
        }
        unint64_t v73 = v78;
        int v80 = v136;
        if ((v77 & 1) == 0) {
          goto LABEL_50;
        }
LABEL_48:
        (*(void (**)(unint64_t, char *, uint64_t))(v122 + 40))(v80[7] + *(void *)(v122 + 72) * v73, v120, v135);
LABEL_52:
        uint64_t v41 = v124;
        *id v124 = (uint64_t)v136;
        swift_bridgeObjectRelease();
        sub_1001DD848(v51, a1, v52);
        uint64_t v84 = v42;
        uint64_t v83 = (uint64_t)v119;
        uint64_t v82 = v118;
        uint64_t v81 = v117;
        uint64_t v24 = v125;
        goto LABEL_53;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        int v80 = v136;
        if (v72) {
          goto LABEL_48;
        }
      }
      else
      {
        sub_100281B3C();
        int v80 = v136;
        if (v77) {
          goto LABEL_48;
        }
      }
LABEL_50:
      v80[(v73 >> 6) + 8] |= 1 << v73;
      uint64_t v85 = v80[6] + 24 * v73;
      *(void *)uint64_t v85 = v51;
      *(void *)(v85 + 8) = a1;
      *(unsigned char *)(v85 + 16) = v52;
      v69((char *)(v80[7] + *(void *)(v122 + 72) * v73), (uint64_t)v120, v135);
      uint64_t v86 = v80[2];
      BOOL v87 = __OFADD__(v86, 1);
      uint64_t v88 = v86 + 1;
      if (v87) {
        goto LABEL_69;
      }
      v80[2] = v88;
      sub_1001DD838(v51, a1, v52);
      goto LABEL_52;
    }
    sub_100054B1C(v40, &qword_1006003A0);
    swift_bridgeObjectRetain();
    unint64_t v60 = sub_100226EE8(v51, a1, v52);
    char v62 = v61;
    swift_bridgeObjectRelease();
    if (v62)
    {
      char v63 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v64 = *v41;
      uint64_t v136 = (void *)*v41;
      uint64_t *v41 = 0x8000000000000000;
      if ((v63 & 1) == 0)
      {
        sub_100281B3C();
        uint64_t v64 = (uint64_t)v136;
      }
      sub_1001DD848(*(void *)(*(void *)(v64 + 48) + 24 * v60), *(void *)(*(void *)(v64 + 48) + 24 * v60 + 8), *(unsigned char *)(*(void *)(v64 + 48) + 24 * v60 + 16));
      uint64_t v65 = v113;
      uint64_t v52 = v135;
      (*(void (**)(char *, unint64_t, uint64_t))(v122 + 32))(v113, *(void *)(v64 + 56) + *(void *)(v122 + 72) * v60, v135);
      sub_10027E994(v60, v64);
      uint64_t *v41 = v64;
      uint64_t v66 = (uint64_t)v65;
      swift_bridgeObjectRelease();
      v126((uint64_t)v65, 0, 1, v52);
      uint64_t v42 = v112;
      LOBYTE(v52) = v133;
    }
    else
    {
      uint64_t v66 = (uint64_t)v113;
      v126((uint64_t)v113, 1, 1, v135);
    }
    uint64_t v81 = v40;
    sub_1001DD848(v51, v134, v52);
    sub_100054B1C(v66, &qword_1006003A0);
    uint64_t v82 = v118;
    uint64_t v68 = v128;
    uint64_t v83 = (uint64_t)v119;
    uint64_t v84 = v42;
LABEL_53:
    swift_endAccess();
    sub_1002C40F0(v68, v82);
    uint64_t v42 = v84;
    uint64_t v89 = v83 + *(int *)(v84 + 48);
    sub_1002C40F0((uint64_t)v24, v83);
    sub_1002C40F0(v82, v89);
    uint64_t v90 = v135;
    id v91 = v129;
    if (v129(v83, 1, v135) == 1)
    {
      sub_100054B1C(v82, &qword_1006003A0);
      int v92 = v91(v89, 1, v90);
      uint64_t v40 = v81;
      uint64_t v93 = v134;
      if (v92 == 1)
      {
        sub_100054B1C(v83, &qword_1006003A0);
        char v43 = v133;
LABEL_10:
        uint64_t v24 = v125;
        sub_100054B1C((uint64_t)v125, &qword_1006003A0);
        sub_1001DD848(v51, v93, v43);
        goto LABEL_11;
      }
      goto LABEL_58;
    }
    uint64_t v94 = v111;
    sub_1002C40F0(v83, v111);
    if (v91(v89, 1, v90) == 1)
    {
      sub_100054B1C(v82, &qword_1006003A0);
      (*v110)(v94, v90);
      uint64_t v40 = v117;
      uint64_t v93 = v134;
LABEL_58:
      sub_100054B1C(v83, &qword_1006003A8);
      char v43 = v133;
      goto LABEL_59;
    }
    uint64_t v102 = v108;
    (*v123)(v108, v89, v90);
    sub_10001CB64(&qword_1006003B0, 255, (void (*)(uint64_t))&type metadata accessor for EpisodeDownloadState);
    char v103 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v104 = *v110;
    unint64_t v105 = v102;
    uint64_t v42 = v112;
    (*v110)((uint64_t)v105, v90);
    sub_100054B1C(v82, &qword_1006003A0);
    v104(v94, v90);
    sub_100054B1C(v83, &qword_1006003A0);
    uint64_t v40 = v117;
    uint64_t v41 = v124;
    char v43 = v133;
    uint64_t v93 = v134;
    if (v103) {
      goto LABEL_10;
    }
LABEL_59:
    id v95 = v114;
    uint64_t v96 = *v114;
    char v97 = swift_isUniquelyReferenced_nonNull_native();
    *id v95 = v96;
    uint64_t v98 = v42;
    if ((v97 & 1) == 0)
    {
      uint64_t v96 = sub_1002EFE90(0, v96[2] + 1, 1, v96);
      *int v114 = v96;
    }
    unint64_t v100 = v96[2];
    unint64_t v99 = v96[3];
    uint64_t v24 = v125;
    if (v100 >= v99 >> 1)
    {
      uint64_t v96 = sub_1002EFE90((void *)(v99 > 1), v100 + 1, 1, v96);
      *int v114 = v96;
    }
    v96[2] = v100 + 1;
    uint64_t v101 = &v96[3 * v100];
    v101[4] = v51;
    v101[5] = v93;
    *((unsigned char *)v101 + 48) = v43;
    sub_100054B1C((uint64_t)v24, &qword_1006003A0);
    uint64_t v42 = v98;
    uint64_t v41 = v124;
LABEL_11:
    a1 = v130;
    int64_t v39 = v131;
  }
}

uint64_t sub_1002C3DDC()
{
  id v1 = [v0 episodeUuid];
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v3 = [v0 storeItemId];
  if (v3)
  {
    id v4 = v3;
    [v4 unsignedLongLongValue];
    AdamID.init(rawValue:)();
  }
  uint64_t v5 = static EpisodeStateIdentifier.generateIdsFrom(uuid:contentId:)();
  swift_bridgeObjectRelease();
  return v5;
}

id sub_1002C3EEC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DownloadingEpisodeStateDataSource();
  return [super dealloc];
}

uint64_t sub_1002C3FA0(uint64_t a1, uint64_t a2)
{
  return sub_1002C2EB8(a1, a2);
}

uint64_t sub_1002C3FC4()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates);
  sub_10004ACDC(v1);
  return v1;
}

uint64_t (*sub_1002C4008(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *v1;
  a1[2] = *v1;
  id v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  *a1 = *v4;
  a1[1] = v6;
  sub_10004ACDC(v5);
  return sub_1002C4064;
}

uint64_t sub_1002C4064(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) == 0) {
    return sub_100013E00(*a1, v3);
  }
  sub_10004ACDC(*a1);
  sub_100013E00(v2, v3);

  return sub_1000536BC(v2);
}

uint64_t sub_1002C40E0()
{
  return sub_1002C3068(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void ***)(v0 + 48));
}

uint64_t sub_1002C40F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1006003A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C4158(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1006003A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id MTDebugActionTestCategory.__allocating_init(name:title:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  uint64_t v10 = &v9[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  uint64_t v11 = &v9[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title];
  *(void *)uint64_t v11 = a3;
  *((void *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return [super init];
}

id MTDebugActionTestCase.__allocating_init(category:name:title:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (char *)objc_allocWithZone(v7);
  uint64_t v16 = &v15[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_category];
  *((void *)v16 + 3) = type metadata accessor for MTDebugActionTestCategory();
  *((void *)v16 + 4) = sub_1002C4B40();
  *(void *)uint64_t v16 = a1;
  uint64_t v17 = &v15[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_name];
  *(void *)uint64_t v17 = a2;
  *((void *)v17 + 1) = a3;
  uint64_t v18 = &v15[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_title];
  *(void *)uint64_t v18 = a4;
  *((void *)v18 + 1) = a5;
  uint64_t v19 = &v15[OBJC_IVAR____TtC8Podcasts21MTDebugActionTestCase_handler];
  *(void *)uint64_t v19 = a6;
  *((void *)v19 + 1) = a7;
  v21.receiver = v15;
  v21.super_class = v7;
  return [super init];
}

uint64_t MTDebugActionTestCategory.name.getter()
{
  return sub_1002C4784(&OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name);
}

uint64_t MTDebugActionTestCategory.name.setter(uint64_t a1, uint64_t a2)
{
  return sub_1002C4994(a1, a2, &OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t (*MTDebugActionTestCategory.name.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t MTDebugActionTestCategory.title.getter()
{
  return sub_1002C4784(&OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title);
}

uint64_t MTDebugActionTestCategory.title.setter(uint64_t a1, uint64_t a2)
{
  return sub_1002C4994(a1, a2, &OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t (*MTDebugActionTestCategory.title.modify())()
{
  return j_j__swift_endAccess;
}

id MTDebugActionTestCategory.init(name:title:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = &v4[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_name];
  *(void *)uint64_t v5 = a1;
  *((void *)v5 + 1) = a2;
  uint64_t v6 = &v4[OBJC_IVAR____TtC8Podcasts25MTDebugActionTestCategory_title];
  *(void *)uint64_t v6 = a3;
  *((void *)v6 + 1) = a4;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for MTDebugActionTestCategory();
  return [super init];
}