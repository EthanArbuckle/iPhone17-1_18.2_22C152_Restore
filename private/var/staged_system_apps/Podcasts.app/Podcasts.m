uint64_t sub_100004C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100054B78(&qword_1005F5D30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100004D08()
{
  if (!qword_100603DA8)
  {
    type metadata accessor for PPTViewControllerProxy();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100603DA8);
    }
  }
}

uint64_t sub_100004D60@<X0>(void (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  a1(0);
  type metadata accessor for BaseObjectGraph();
  uint64_t v5 = static BaseObjectGraph.current.getter();
  uint64_t result = a2(v5);
  *a3 = result;
  return result;
}

id sub_100004DC0@<X0>(void *a1@<X8>)
{
  sub_10004D29C(0, &qword_1005FFA60);
  id result = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  *a1 = result;
  return result;
}

unint64_t sub_100004E64()
{
  unint64_t result = qword_1006092E0;
  if (!qword_1006092E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1006092E0);
  }
  return result;
}

uint64_t sub_100004F1C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    v6 = sub_1001B572C;
  }
  else
  {
    v6 = 0;
    uint64_t v5 = 0;
  }
  v7 = (uint64_t *)(*v2 + OBJC_IVAR____TtC8Podcasts19ChannelListObserver_didChange);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return sub_1000536BC(v8);
}

uint64_t type metadata accessor for ReviewController()
{
  return self;
}

id sub_100004FE4@<X0>(void *a1@<X8>)
{
  id result = [self sharedInstance];
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for HUDPresenter()
{
  return self;
}

uint64_t type metadata accessor for DownloadsAlertPresenter()
{
  return self;
}

unint64_t sub_100005070()
{
  unint64_t result = qword_1005FABE0;
  if (!qword_1005FABE0)
  {
    type metadata accessor for ReevaluateAutoDownloadsIntent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FABE0);
  }
  return result;
}

void sub_100005134(id a1)
{
  uint64_t v1 = +[NSUserDefaults standardUserDefaults];
  uint64_t v2 = kMTExternalCookiesHaveBeenPurged;
  unsigned __int8 v3 = [v1 BOOLForKey:kMTExternalCookiesHaveBeenPurged];

  if ((v3 & 1) == 0)
  {
    +[MTURLSessionManager purgeExternalCookies];
    id v4 = +[NSUserDefaults standardUserDefaults];
    [v4 setBool:1 forKey:v2];
  }
}

id sub_1000051E4@<X0>(void *a1@<X8>)
{
  if (qword_1005F5AE0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v3 = (id)static PodcastsStateCoordinator.shared;
  a1[3] = type metadata accessor for PodcastsStateCoordinator();
  a1[4] = sub_1002B4798((unint64_t *)&unk_1005F74D0, (void (*)(uint64_t))type metadata accessor for PodcastsStateCoordinator);
  *a1 = v3;

  return v3;
}

uint64_t sub_1000052BC(uint64_t a1)
{
  uint64_t v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:[*(id *)(a1 + 32) fairPlayMigrationBackgroundTask]];

  [*(id *)(a1 + 32) setFairPlayMigrationBackgroundTask:UIBackgroundTaskInvalid];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100005338(id a1)
{
  if (qword_10060A5F8 != -1) {
    dispatch_once(&qword_10060A5F8, &stru_10054D838);
  }
  id v1 = +[MTPurchaseControllerWrapper sharedInstance];
  [v1 fetchChannelUpdatesCheckingEntitlementsNotification];
}

id sub_1000053A8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) listenNowQueryObserver];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10005941C;
  v4[3] = &unk_100550320;
  v4[4] = *(void *)(a1 + 32);
  [v2 results:v4];

  return [*(id *)(a1 + 32) _endBackgroundTask];
}

unint64_t sub_100005594()
{
  sub_100054B78((uint64_t *)&unk_1005F9450);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D010;
  strcpy((char *)(inited + 32), "journal_mode");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  sub_10004D29C(0, &qword_1005F88B0);
  *(void *)(inited + 48) = NSString.init(stringLiteral:)();
  unint64_t result = sub_10005A1DC(inited);
  qword_1005F91E8 = result;
  return result;
}

uint64_t sub_100005640()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for LibraryViewControllerProvider()
{
  return self;
}

uint64_t type metadata accessor for MediaLibraryClient()
{
  return self;
}

uint64_t sub_100005754()
{
  uint64_t result = type metadata accessor for ShowEntity();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1000057EC(id a1)
{
  id v1 = +[SyncControllerFactory resolvedSyncController];
  [v1 applicationWillEnterForeground];
}

uint64_t sub_100005834(uint64_t a1, int *a2)
{
  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[1] = sub_10000947C;
  return v6(a1);
}

uint64_t sub_100005910()
{
  swift_release();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for ShowCountObserver()
{
  return self;
}

void sub_100005B5C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Podcasts();
  v10 = (void *)v5;
  uint64_t v11 = sub_10004AE54((unint64_t *)&qword_1005F79D0, (void (*)(uint64_t))&type metadata accessor for Podcasts);
  v6 = sub_10004A244(v9);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for Podcasts.batchFeedFetch(_:), v5);
  LOBYTE(v5) = isFeatureEnabled(_:)();
  sub_10004D2D8((uint64_t)v9);
  if ((v5 & 1) != 0 && !a3 && a1)
  {
    if ([a1 BOOLValue])
    {
      sub_10004D29C(0, (unint64_t *)&unk_1005F7500);
      id v7 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
      uint64_t v11 = (uint64_t)sub_10036B448;
      uint64_t v12 = 0;
      v9[0] = (uint64_t)_NSConcreteStackBlock;
      v9[1] = 1107296256;
      v9[2] = (uint64_t)sub_100022FC4;
      v10 = &unk_1005649F8;
      uint64_t v8 = _Block_copy(v9);
      [v7 updateAllMediaAPIPodcastsWithSource:24 started:v8];
      _Block_release(v8);
    }
  }
}

void sub_100005D08()
{
  sub_10005DFB4();
  if (v0 <= 0x3F)
  {
    type metadata accessor for OSSignpostID();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

unint64_t sub_100005E1C()
{
  unint64_t result = qword_1005FF0B0;
  if (!qword_1005FF0B0)
  {
    type metadata accessor for PlayNextChapterIntent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF0B0);
  }
  return result;
}

void sub_100005E74(id a1)
{
  id v1 = +[PFDownloadConsistency application];
  [v1 beginEnforcementWithCompletionHandler:&stru_10054D7B8];
}

uint64_t type metadata accessor for _DebugActionsProvider()
{
  return self;
}

void sub_100005F50(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10060A890;
  qword_10060A890 = v1;

  qword_10060A898 = objc_opt_new();

  _objc_release_x1();
}

uint64_t type metadata accessor for FeedIngesterProvider()
{
  return self;
}

id sub_100005FCC@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)MTAddPodcastOrStationController) init];
  *a1 = result;
  a1[1] = &off_10055BA88;
  return result;
}

id sub_100006010()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ForegroundSyncUtil()) init];
  static ForegroundSyncUtil.shared = (uint64_t)result;
  return result;
}

void sub_100006044(uint64_t a1)
{
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MTListenNowManagerListenNowContentDidChange" object:0];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained update];
}

void sub_1000060B8(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTLibrary;
  id v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  uint64_t v2 = (void *)qword_10060A618;
  qword_10060A618 = (uint64_t)v1;
}

uint64_t type metadata accessor for ChannelListObserver()
{
  return self;
}

id sub_100006130@<X0>(void *a1@<X8>)
{
  if (static Podcasts.isBlueMoonEnabled()())
  {
    type metadata accessor for BlueMoonStubPlayerController();
    id result = (id)swift_allocObject();
    objc_super v3 = &off_100568B08;
  }
  else
  {
    id result = [self defaultInstance];
    objc_super v3 = &off_1005660A0;
  }
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006200@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (objc_class *)type metadata accessor for LibraryViewControllerProvider();
  id v3 = [objc_allocWithZone(v2) init];
  a1[3] = v2;
  uint64_t result = sub_1002B4798(&qword_1005FF7F8, (void (*)(uint64_t))type metadata accessor for LibraryViewControllerProvider);
  a1[4] = result;
  *a1 = v3;
  return result;
}

id sub_100006288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v16 = type metadata accessor for PodcastsStateCoordinatorPersistentStore();
  *(void *)&a8[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_subscriptions] = _swiftEmptyArrayStorage;
  *(void *)&a8[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_downloadsGateway] = a1;
  v20[3] = v16;
  v20[4] = &protocol witness table for PodcastsStateCoordinatorPersistentStore;
  *(void *)&a8[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_podcastsStateTransitions] = a2;
  v20[0] = a5;
  *(void *)&a8[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_episodeStateRepository] = a3;
  *(void *)&a8[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_contextProvider] = a4;
  sub_100056D54((uint64_t)v20, (uint64_t)&a8[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_podcastsStateCoordinatorPersistentStore]);
  *(void *)&a8[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_syncController] = a6;
  *(void *)&a8[OBJC_IVAR____TtC8Podcasts24PodcastsStateCoordinator_library] = a7;
  v19.receiver = a8;
  v19.super_class = (Class)type metadata accessor for PodcastsStateCoordinator();
  id v17 = [super init];
  sub_10004D2D8((uint64_t)v20);
  return v17;
}

void sub_100006604(uint64_t a1)
{
  uint64_t v2 = kMTEpisodeEntityName;
  id v3 = *(void **)(a1 + 32);
  id v4 = +[NSPredicate predicateWithFormat:@"%K IN %@", kEpisodeUuid, *(void *)(a1 + 40)];
  id v5 = [v3 objectsInEntity:v2 predicate:v4 sortDescriptors:0 returnsObjectsAsFaults:0];

  [*(id *)(a1 + 48) _removeDownloadAssetsForEpisodes:v5 shouldKeep:*(void *)(a1 + 56) forced:0];
}

uint64_t sub_1000066B8()
{
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100005910, v1, v0);
}

uint64_t sub_100006818()
{
  uint64_t result = type metadata accessor for OpenTranscriptIntent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1000068C8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    a3();
  }
}

void sub_100006924(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clampsController];
  [v1 reset];
}

unint64_t sub_1000069A4@<X0>(void *a1@<X8>)
{
  sub_10004D29C(0, (unint64_t *)&unk_1005FBA00);
  id v2 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  unint64_t result = sub_100059A9C();
  *a1 = v2;
  a1[1] = result;
  return result;
}

uint64_t sub_100006A48()
{
  uint64_t result = type metadata accessor for StationListOptions();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_100006B48()
{
  if (!qword_1005F81C8)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005F81C8);
    }
  }
}

id sub_100006BA0()
{
  uint64_t v1 = OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor;
  if (*(void *)(v0 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor))
  {
    id v2 = *(id *)(v0 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor);
  }
  else
  {
    id v2 = sub_100028888(v0);
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id sub_100006C08@<X0>(void *a1@<X8>)
{
  if (static Podcasts.isBlueMoonEnabled()())
  {
    id v2 = [objc_allocWithZone((Class)type metadata accessor for BlueMoonStubPlayerAdapter()) init];
    id result = (id)sub_1002B4798(&qword_1005F7688, (void (*)(uint64_t))type metadata accessor for BlueMoonStubPlayerAdapter);
    *a1 = v2;
    a1[1] = result;
  }
  else
  {
    if (qword_1005F5AE8 != -1) {
      swift_once();
    }
    id v5 = (void *)qword_10061ACB0;
    uint64_t v4 = sub_1002B4798(&qword_1005F7680, (void (*)(uint64_t))type metadata accessor for PodcastsPlayerAdapter);
    *a1 = v5;
    a1[1] = v4;
    return v5;
  }
  return result;
}

uint64_t type metadata accessor for PodcastsContextActionProvider()
{
  return self;
}

uint64_t type metadata accessor for BlueMoonStubPlayerAdapter()
{
  uint64_t result = qword_100606BF8;
  if (!qword_100606BF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100006E34()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100006FB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_100054B78(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100007230(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    id v2 = (void *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 - 1;
    do
    {
      uint64_t v4 = v3;
      uint64_t v5 = v2[3];
      uint64_t v6 = v2[4];
      sub_100041A98(v2, v5);
      char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
      if (v7) {
        break;
      }
      uint64_t v3 = v4 - 1;
      v2 += 5;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

void sub_1000072E0(id a1, NSString *a2, id a3, id a4)
{
  id v5 = a4;
  if ([(NSString *)a2 isEqualToString:kMTShowSiriSuggestionsKey]) {
    sub_10001ECC4(kMTApplicationBundleIdentifier, (int)[v5 BOOLValue]);
  }
}

uint64_t sub_10000735C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    uint64_t v6 = sub_1002E3334;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *v2;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 32);
  *(void *)(v7 + 32) = v6;
  *(void *)(v7 + 40) = v5;
  return sub_1000536BC(v8);
}

uint64_t type metadata accessor for CoreDataDownloadJobStorage()
{
  return self;
}

uint64_t type metadata accessor for PodcastsStateTransitionsExternalEffects()
{
  return self;
}

uint64_t sub_10000743C()
{
  id v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_100348ABC, v4, v3);
  }
  else
  {
    v2[12] = v2[2];
    uint64_t v7 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CacheDeleteObserver.subscribeToObservation()
                           + async function pointer to dispatch thunk of CacheDeleteObserver.subscribeToObservation());
    uint64_t v5 = (void *)swift_task_alloc();
    v2[13] = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_1000066B8;
    return v7();
  }
}

uint64_t sub_1000075E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 48) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void sub_100007648(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000076EC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    uint64_t v6 = sub_1001B572C;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*v2 + OBJC_IVAR____TtC8Podcasts19StationListObserver_didChange);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t *v7 = (uint64_t)v6;
  v7[1] = v5;
  return sub_1000536BC(v8);
}

void sub_100007790(uint64_t a1)
{
  [*(id *)(a1 + 32) _updatePodcastsWithUUIDs:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) userInitiated:*(unsigned __int8 *)(a1 + 64) forced:*(unsigned __int8 *)(a1 + 65) useBackgroundFetch:*(unsigned __int8 *)(a1 + 66) source:*(void *)(a1 + 56) startedUpdatesCallback:*(void *)(a1 + 40)];
  if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count])
  {
    id v3 = +[NSUserDefaults standardUserDefaults];
    id v2 = +[NSDate date];
    [v2 timeIntervalSinceReferenceDate];
    [v3 setDouble:kMTAllPodcastsLastUpdatedDate forKey:];
  }
}

uint64_t sub_100007858()
{
  uint64_t result = type metadata accessor for ReevaluateAutoDownloadsIntent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1000078F4()
{
  unint64_t result = qword_1005F91B8;
  if (!qword_1005F91B8)
  {
    type metadata accessor for PlayPreviousChapterIntent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F91B8);
  }
  return result;
}

uint64_t type metadata accessor for CategoryIngester()
{
  return self;
}

void sub_1000079C4(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTReachability;
  id v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  id v2 = (void *)qword_10060A7E8;
  qword_10060A7E8 = (uint64_t)v1;
}

uint64_t sub_100007A18()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void sub_100007B30(uint64_t a1)
{
  int v2 = os_feature_enabled_disable_siri_plist_dumper();
  objc_super v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [v3 siriDonator];
    [v4 startDonation];
  }
  else
  {
    id v4 = [v3 siriDumper];
    [v4 dumpPlist];
  }
}

unint64_t sub_100007BA0()
{
  unint64_t result = qword_1005FC230;
  if (!qword_1005FC230)
  {
    type metadata accessor for UnownedImageIssueIdentifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FC230);
  }
  return result;
}

void sub_100007BF8()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Calendar();
    if (v1 <= 0x3F)
    {
      sub_100009318();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_100007D84()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100007E18()
{
  uint64_t v1 = *(void *)(type metadata accessor for AppEnterMetricsEvent.EnterKind() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for MetricsPipeline() - 8);
  return sub_1000220D4(v0 + v2, v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

void sub_100007EE8(uint64_t a1)
{
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v106 objects:v117 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v107;
    uint64_t v84 = kMTPodcastEntityName;
    uint64_t v78 = kPodcastUuid;
    uint64_t v83 = kMTEpisodeEntityName;
    uint64_t v77 = kEpisodePodcastUuid;
    *(void *)&long long v3 = 134349056;
    long long v70 = v3;
    uint64_t v71 = *(void *)v107;
    do
    {
      uint64_t v6 = 0;
      id v72 = v4;
      do
      {
        if (*(void *)v107 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v106 + 1) + 8 * (void)v6);
        uint64_t v9 = [v7 author];
        unsigned __int8 v10 = [v9 isEqualToString:@"MTPodcastDerivedPropertyObserver"];

        if ((v10 & 1) == 0)
        {
          v75 = v8;
          v76 = v6;
          v81 = +[NSMutableSet set];
          v80 = +[NSMutableSet set];
          v79 = +[NSMutableSet set];
          long long v102 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v105 = 0u;
          v74 = v7;
          int64_t v11 = [v7 changes];
          id v12 = [v11 countByEnumeratingWithState:&v102 objects:v116 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v103;
            do
            {
              for (i = 0; i != v13; i = (char *)i + 1)
              {
                if (*(void *)v103 != v14) {
                  objc_enumerationMutation(v11);
                }
                unint64_t v16 = *(void **)(*((void *)&v102 + 1) + 8 * i);
                uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8);
                if (*(unsigned char *)(v17 + 24))
                {
                  unsigned __int8 v18 = 1;
                }
                else
                {
                  unsigned __int8 v18 = [*(id *)(a1 + 40) _shouldUpdatePodcastsStatsForChange:*(void *)(*((void *)&v102 + 1) + 8 * i)];
                  uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8);
                }
                *(unsigned char *)(v17 + 24) = v18;
                if (objc_msgSend(*(id *)(a1 + 40), "_changeContainsRelevantEpisodeChanges:", v16, v70))
                {
                  unint64_t v19 = [v16 changedObjectID];
                  [v81 addObject:v19];
                }
                if ([*(id *)(a1 + 40) _changeContainsRelevantPodcastChanges:v16])
                {
                  int64_t v20 = [v16 changedObjectID];
                  [v80 addObject:v20];
                }
                if ([*(id *)(a1 + 40) _changeContainsRelevantChannelChanges:v16])
                {
                  Swift::Int v21 = [v16 changedObjectID];
                  [v79 addObject:v21];
                }
                id v22 = [v16 changedObjectID];
                uint64_t v23 = [v22 entity];
                unint64_t v24 = [v23 name];

                id v25 = [v16 changeType];
                if ([v24 isEqualToString:v84]) {
                  BOOL v26 = v25 == (id)2;
                }
                else {
                  BOOL v26 = 0;
                }
                if (v26)
                {
                  unint64_t v27 = [v16 tombstone];
                  BOOL v28 = [v27 objectForKey:v78];

                  if (v28) {
                    [*(id *)(a1 + 48) addObject:v28];
                  }
                }
                if ([v24 isEqualToString:v83] && v25 == (id)2)
                {
                  uint64_t v29 = [v16 tombstone];
                  v30 = [v29 objectForKey:v77];

                  if (v30) {
                    [*(id *)(a1 + 56) addObject:v30];
                  }
                }
              }
              id v13 = [v11 countByEnumeratingWithState:&v102 objects:v116 count:16];
            }
            while (v13);
          }

          long long v100 = 0u;
          long long v101 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          v31 = [v81 allObjects];
          id v32 = [v31 countByEnumeratingWithState:&v98 objects:v115 count:16];
          if (v32)
          {
            id v33 = v32;
            uint64_t v34 = *(void *)v99;
            do
            {
              for (j = 0; j != v33; j = (char *)j + 1)
              {
                if (*(void *)v99 != v34) {
                  objc_enumerationMutation(v31);
                }
                v36 = [*(id *)(a1 + 64) objectWithID:*(void *)(*((void *)&v98 + 1) + 8 * (void)j) v70];
                v37 = [v36 podcastUuid];

                if (v37)
                {
                  v38 = [v36 podcast];
                  unsigned int v39 = [v38 hidden];

                  if (v39) {
                    v40 = *(void **)(a1 + 48);
                  }
                  else {
                    v40 = *(void **)(a1 + 56);
                  }
                  v41 = [v36 podcastUuid];
                  [v40 addObject:v41];
                }
                else
                {
                  v41 = _MTLogCategoryDatabase();
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                  {
                    v42 = [v36 uuid];
                    *(_DWORD *)buf = 138543362;
                    id v114 = v42;
                    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Derived Property Observer has no podcast uuid for episode %{public}@", buf, 0xCu);
                  }
                }
              }
              id v33 = [v31 countByEnumeratingWithState:&v98 objects:v115 count:16];
            }
            while (v33);
          }

          long long v96 = 0u;
          long long v97 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          v43 = [v80 allObjects];
          id v44 = [v43 countByEnumeratingWithState:&v94 objects:v112 count:16];
          if (v44)
          {
            id v45 = v44;
            uint64_t v46 = *(void *)v95;
            do
            {
              for (k = 0; k != v45; k = (char *)k + 1)
              {
                if (*(void *)v95 != v46) {
                  objc_enumerationMutation(v43);
                }
                v48 = [*(id *)(a1 + 64) objectWithID:*(void *)(*((void *)&v94 + 1) + 8 * (void)k) v70];
                v49 = [v48 uuid];

                if (v49)
                {
                  if ([v48 hidden]) {
                    v50 = *(void **)(a1 + 48);
                  }
                  else {
                    v50 = *(void **)(a1 + 56);
                  }
                  v51 = [v48 uuid];
                  [v50 addObject:v51];
                }
              }
              id v45 = [v43 countByEnumeratingWithState:&v94 objects:v112 count:16];
            }
            while (v45);
          }

          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          id v82 = [v79 allObjects];
          id v52 = [v82 countByEnumeratingWithState:&v90 objects:v111 count:16];
          if (v52)
          {
            id v53 = v52;
            uint64_t v85 = *(void *)v91;
            do
            {
              for (m = 0; m != v53; m = (char *)m + 1)
              {
                if (*(void *)v91 != v85) {
                  objc_enumerationMutation(v82);
                }
                v55 = [*(id *)(a1 + 64) objectWithID:*(void *)(*((void *)&v90 + 1) + 8 * (void)m) v70];
                long long v86 = 0u;
                long long v87 = 0u;
                long long v88 = 0u;
                long long v89 = 0u;
                v56 = [v55 podcasts];
                id v57 = [v56 countByEnumeratingWithState:&v86 objects:v110 count:16];
                if (v57)
                {
                  id v58 = v57;
                  uint64_t v59 = *(void *)v87;
                  do
                  {
                    for (n = 0; n != v58; n = (char *)n + 1)
                    {
                      if (*(void *)v87 != v59) {
                        objc_enumerationMutation(v56);
                      }
                      v61 = *(void **)(*((void *)&v86 + 1) + 8 * (void)n);
                      v62 = [v61 uuid];

                      if (v62)
                      {
                        if ([v61 hidden]) {
                          v63 = *(void **)(a1 + 48);
                        }
                        else {
                          v63 = *(void **)(a1 + 56);
                        }
                        v64 = [v61 uuid];
                        [v63 addObject:v64];
                      }
                    }
                    id v58 = [v56 countByEnumeratingWithState:&v86 objects:v110 count:16];
                  }
                  while (v58);
                }
              }
              id v53 = [v82 countByEnumeratingWithState:&v90 objects:v111 count:16];
            }
            while (v53);
          }

          v65 = _MTLogCategoryDatabase();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
          {
            id v66 = [v74 transactionNumber];
            *(_DWORD *)buf = v70;
            id v114 = v66;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "Derived Property Observer processed transaction %{public}lld", buf, 0xCu);
          }

          uint64_t v67 = [v74 token];
          uint64_t v68 = *(void *)(*(void *)(a1 + 80) + 8);
          v69 = *(void **)(v68 + 40);
          *(void *)(v68 + 40) = v67;

          uint64_t v5 = v71;
          id v4 = v72;
          uint64_t v8 = v75;
          uint64_t v6 = v76;
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v6 != v4);
      id v4 = [obj countByEnumeratingWithState:&v106 objects:v117 count:16];
    }
    while (v4);
  }
}

uint64_t sub_100008768()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100054B78(&qword_100607F90);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    id v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *id v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t destroy for FeedManager.System()
{
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t type metadata accessor for ImplicitFollowsDecayCoordinator()
{
  return self;
}

uint64_t sub_100008A78()
{
  if (*((unsigned char *)v0 + 136) == 1)
  {
    uint64_t v2 = v0[14];
    uint64_t v1 = v0[15];
    uint64_t v3 = v0[12];
    uint64_t v13 = v0[13];
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[11];
    uint64_t v6 = (void *)v0[9];
    sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
    unint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    v0[6] = sub_10038F1B0;
    v0[7] = v7;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_10003B424;
    v0[5] = &unk_100566458;
    unint64_t v8 = _Block_copy(v0 + 2);
    id v9 = v6;
    static DispatchQoS.unspecified.getter();
    v0[8] = _swiftEmptyArrayStorage;
    sub_10002FC48();
    sub_100054B78((uint64_t *)&unk_1005FE4B0);
    sub_10002FBEC();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v8);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v13);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned __int8 v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

id sub_100008C78()
{
  uint64_t v1 = OBJC_IVAR___MTDebouncedAutoDownloadProcessor____lazy_storage___debouncedProcessor;
  if (*(void *)(v0 + OBJC_IVAR___MTDebouncedAutoDownloadProcessor____lazy_storage___debouncedProcessor))
  {
    id v2 = *(id *)(v0 + OBJC_IVAR___MTDebouncedAutoDownloadProcessor____lazy_storage___debouncedProcessor);
  }
  else
  {
    id v2 = sub_100028C9C(v0);
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void sub_100008CE0(uint64_t a1)
{
  id v2 = objc_alloc((Class)MTSiriPlistDumper);
  uint64_t v6 = objc_alloc_init(MTBackgroundTaskManager);
  id v3 = [v2 initWithBackgroundTaskManager:v6];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 48);
  *(void *)(v4 + 48) = v3;
}

unint64_t sub_100008D58()
{
  unint64_t result = qword_1005F7410;
  if (!qword_1005F7410)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005F7410);
  }
  return result;
}

uint64_t sub_100008D98(void *a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  static FeedManagerBagConfiguration.getConfigurationOrLocalDefault(completion:)();

  return swift_release();
}

uint64_t sub_100008E08()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100054B78(&qword_100609330);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000090C4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000B8F0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100606410 + dword_100606410);
  return v6(a1, v4);
}

uint64_t sub_10000917C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10005B794;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100606410 + dword_100606410);
  return v6(a1, v4);
}

uint64_t type metadata accessor for EpisodeDownloadStateControllerProvider()
{
  return self;
}

uint64_t type metadata accessor for NowPlayingBootstrap()
{
  return self;
}

void sub_10000927C()
{
  if (!qword_1005F6DC8)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005F6DC8);
    }
  }
}

void sub_100009318()
{
  if (!qword_1005F75A0)
  {
    type metadata accessor for OSSignpostID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005F75A0);
    }
  }
}

id sub_100009370()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for PodcastsPlayerAdapter(0)) init];
  qword_10061ACB0 = (uint64_t)result;
  return result;
}

uint64_t sub_10000947C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100009574()
{
  dispatch thunk of DownloadRemovalObserver.beginObserving()();
  swift_release();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10005D6A8, v1, v0);
}

uint64_t type metadata accessor for DebugActionsController()
{
  return self;
}

uint64_t type metadata accessor for ChannelLockupGenerator()
{
  return self;
}

uint64_t sub_1000096C0()
{
  uint64_t result = type metadata accessor for MediaRequest.ContentType();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000097F0@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  *(void *)(a1 + 24) = type metadata accessor for TranscriptReportConcernURLBuilder();
  *(void *)(a1 + 32) = &off_10055C678;
  BaseObjectGraph.inject<A>(_:)();

  return swift_release();
}

uint64_t sub_100009858()
{
  uint64_t result = type metadata accessor for EpisodeListSettings();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10000993C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  uint64_t v2 = static BaseObjectGraph.current.getter();
  uint64_t result = sub_100026B1C(v2);
  *a1 = result;
  return result;
}

void sub_100009974(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTSyncController;
  id v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  uint64_t v2 = (void *)qword_10060A850;
  qword_10060A850 = (uint64_t)v1;
}

uint64_t type metadata accessor for DebouncedAssetRemovalProcessor()
{
  return self;
}

unint64_t sub_1000099EC()
{
  unint64_t result = qword_1005F8120;
  if (!qword_1005F8120)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005F8120);
  }
  return result;
}

id sub_100009A2C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for FeedManager()) init];
  static FeedManager.shared = (uint64_t)result;
  return result;
}

uint64_t sub_100009AA8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
    uint64_t v6 = sub_100348A58;
  }
  else
  {
    *(void *)(v2 + 64) = *(void *)(v2 + 16);
    sub_10003ABC8(&qword_100603F78, (void (*)(uint64_t))&type metadata accessor for DownloadRemovalObserver);
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v7;
    uint64_t v6 = sub_100009574;
  }
  return _swift_task_switch(v6, v3, v5);
}

void sub_100009C30(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v2 executeRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

uint64_t sub_100009D8C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DebouncedAutoDownloadProcessor()
{
  return self;
}

uint64_t sub_100009FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncabilityController;
  swift_beginAccess();
  sub_100054BBC(v4, (uint64_t)v13, &qword_1005FFD90);
  if (v14)
  {
    sub_100056D54((uint64_t)v13, (uint64_t)v10);
    sub_100054B1C((uint64_t)v13, &qword_1005FFD90);
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    sub_100041A98(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    sub_10004D2D8((uint64_t)v10);
  }
  else
  {
    sub_100054B1C((uint64_t)v13, &qword_1005FFD90);
  }
  sub_100054BBC(a1 + OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncToAppController, (uint64_t)v13, &qword_1005FFD98);
  uint64_t v7 = v14;
  if (v14)
  {
    uint64_t v8 = v15;
    sub_100041A98(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    sub_10004D2D8((uint64_t)v13);
  }
  else
  {
    sub_100054B1C((uint64_t)v13, &qword_1005FFD98);
  }
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

id sub_10000A154@<X0>(void *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  uint64_t v2 = (void (*)(uint64_t, char *, uint64_t))static BaseObjectGraph.current.getter();
  sub_100054B78((uint64_t *)&unk_1005FEBE0);
  BaseObjectGraph.inject<A>(_:)();
  sub_10004D29C(0, &qword_1005F6F40);
  BaseObjectGraph.inject<A>(_:)();
  id v3 = objc_allocWithZone((Class)type metadata accessor for LibraryDataProvider(0));
  id result = LibraryDataProvider.init(contextProvider:downloadsNotifier:objectGraph:)(v6, v5, v2);
  *a1 = result;
  return result;
}

uint64_t sub_10000A204(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10000A344(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    int v5 = 134217984;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Found %ld podcasts requiring retry feed fetch.", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) _updatePodcastsWithUUIDs:*(void *)(a1 + 32) userInitiated:0 forced:1 useBackgroundFetch:1 source:4 startedUpdatesCallback:*(void *)(a1 + 48)];
}

void sub_10000A40C(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [self standardUserDefaults];
  char v5 = NSUserDefaults.debugGestureEnabled.getter();

  if (v5)
  {
    id v6 = [objc_allocWithZone((Class)UIScreenEdgePanGestureRecognizer) initWithTarget:v2 action:"handleDebugActivationFrom:"];
    [v6 setEdges:8];
    id v7 = [a1 view];
    if (v7)
    {
      id v8 = v7;
      [v7 addGestureRecognizer:v6];
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10000A510(id a1)
{
  uint64_t v1 = +[MTLegacyDownloadManagerProvider sharedInstance];
  id v4 = [v1 downloadManager];

  uint64_t v2 = [[MTFullDownloadsGateway alloc] initWithDownloadManager:v4];
  id v3 = (void *)qword_10060A930;
  qword_10060A930 = (uint64_t)v2;
}

uint64_t LibraryDataProvider.fetchChannelDetailBlocking(from:)@<X0>(NSURL *a1@<X8>)
{
  URL._bridgeToObjectiveC()(a1);
  uint64_t v2 = v1;
  if (objc_msgSend(self, "isNotEmpty:", objc_msgSend(v1, "pf_cleanUrlToChannelStoreId")))
  {
    type metadata accessor for CoreDataFetcher();
    sub_100054B78(&qword_1005F7210);
    static CoreDataFetcher.performAndWaitOnChannel<A>(for:block:)();

    return v4;
  }
  else
  {

    return 0;
  }
}

void sub_10000A9F8(uint64_t a1)
{
  uint64_t v2 = +[MTDB sharedInstance];
  id v3 = [v2 privateQueueContext];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100058E24;
  v6[3] = &unk_10054D9B0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  [v5 performBlockAndWaitWithSave:v6];
}

uint64_t type metadata accessor for BackgroundTaskManager()
{
  return self;
}

uint64_t type metadata accessor for LibraryActionController()
{
  return self;
}

void destroy for CoreDataDownloadLibrary(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t sub_10000AC60()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

id sub_10000AE50(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting all processors...", v4, 2u);
  }

  return [*(id *)(a1 + 32) startProcessors:-1];
}

uint64_t sub_10000AEC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t _s8Podcasts19LibraryDataProviderC26fetchPodcastDetailBlocking4from8ShelfKit0fG0CSg10Foundation3URLV_tF_0@<X0>(NSURL *a1@<X8>)
{
  URL._bridgeToObjectiveC()(a1);
  uint64_t v2 = v1;
  id v3 = [v1 pf_cleanUrlToStoreId];
  uint64_t v4 = self;
  if (![v4 isNotEmpty:v3]
    || !objc_msgSend(v4, "isEmpty:", objc_msgSend(v2, "pf_cleanUrlToStoreTrackId")))
  {
    goto LABEL_10;
  }
  id v5 = [v2 pf_cleanUrlToEpisodeGuid];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  v20[0] = v7;
  v20[1] = v9;
  sub_100054B78(&qword_1005F93A0);
  sub_1001AB688();
  char v10 = Optional<A>.isEmpty.getter();
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v11 = self;
    id v12 = [v11 predicateForPodcastStoreId:v3];
    uint64_t v13 = type metadata accessor for Podcasts();
    v20[3] = v13;
    v20[4] = sub_100042FDC((unint64_t *)&qword_1005F79D0, (void (*)(uint64_t))&type metadata accessor for Podcasts);
    uint64_t v14 = sub_10004A244(v20);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, enum case for Podcasts.renderImplicitFollowsAsLocalShows(_:), v13);
    id v15 = v12;
    LOBYTE(v13) = isFeatureEnabled(_:)();
    sub_10004D2D8((uint64_t)v20);
    int64_t v16 = &selRef_predicateForNotHiddenPodcasts;
    if ((v13 & 1) == 0) {
      int64_t v16 = &selRef_predicateForNotHiddenNotImplicitlyFollowedPodcasts;
    }
    id v17 = [v11 *v16];
    id v18 = [v15 AND:v17];

    type metadata accessor for CoreDataFetcher();
    sub_100054B78(&qword_1005F7278);
    static CoreDataFetcher.performAndWaitOnPodcast<A>(with:block:)();

    return v20[0];
  }
  else
  {
LABEL_10:

    return 0;
  }
}

id sub_10000B550@<X0>(SEL *a1@<X1>, void *a2@<X8>)
{
  id result = [self *a1];
  *a2 = result;
  return result;
}

uint64_t sub_10000B590@<X0>(void *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  uint64_t v2 = static BaseObjectGraph.current.getter();
  type metadata accessor for EpisodeController();
  swift_allocObject();
  id v3 = sub_10001A468(v2);
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10000B5FC()
{
  return swift_unknownObjectRelease();
}

void sub_10000B688(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = Strong;
    [Strong setIsPlaying:v1];
  }
}

id sub_10000B740@<X0>(void *a1@<X8>)
{
  id result = [self sharedInstance];
  if (result) {
    *a1 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000B78C()
{
  return RecommendationsMetadata.Shows.init(from:dislikedPodcasts:)();
}

void sub_10000B864(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

uint64_t sub_10000B8F0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

id sub_10000BA58()
{
  uint64_t v1 = qword_1005FB210;
  uint64_t v2 = v0;
  *(void *)&v0[v1] = Set.init()();

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for DownloadManagerObserver();
  return [super init];
}

uint64_t sub_10000BB14(void *a1)
{
  if (qword_1005F5AE8 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_10061ACB0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = a1;
  id v4 = a1;
  id v5 = v2;
  dispatch_to_main_queue(_:)();

  return swift_release();
}

id sub_10000BBC8()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___sessionDelegateQueue;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___sessionDelegateQueue);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___sessionDelegateQueue);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)NSOperationQueue) init];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_10000BCA4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100054B78(&qword_1005F6ED8);
    char v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    char v10 = (char *)&_swiftEmptyArrayStorage;
  }
  id v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000BE68(uint64_t a1, char a2)
{
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = a2;
  objc_sync_exit(v4);

  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v5();
}

void sub_10000BEE0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    uint64_t v4 = type metadata accessor for AsyncBlockOperation();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_1000499E0(a1, v4, WitnessTable, (uint64_t)&off_100569C20, (uint64_t)&off_100569C00);
  }
}

void *sub_10000C004(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10005988C(0, v1, 0);
    uint64_t v3 = *(void *)(type metadata accessor for TabMenu.Item() - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = TabMenu.Item.navigationTab.getter();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_10005988C(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      _swiftEmptyArrayStorage[v8 + 4] = v6;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10000C130()
{
  return RecommendationsMetadata.Categories.init(from:dislikedInterests:)();
}

BOOL sub_10000C1BC()
{
  uint64_t v0 = *(void *)(EpisodeStateChanges.updated.getter() + 16);
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t sub_10000C1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  unint64_t v8 = (void *)swift_task_alloc();
  uint8_t v4[16] = v8;
  *unint64_t v8 = v4;
  v8[1] = sub_10005E01C;
  v8[2] = a4;
  return _swift_task_switch(sub_100015D40, 0, 0);
}

uint64_t type metadata accessor for TranscriptReportConcernURLBuilder()
{
  return self;
}

void sub_10000C488(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((static Podcasts.isUIPSidebarEnabled.getter() & 1) == 0
    || (UITabBarController.canSelect(navigationTab:)() & 1) != 0)
  {
    UITabBarController.selectTabIfPossible(_:)();
    return;
  }
  uint64_t v4 = static TabConverter.translateNavigationTab(for:interface:)();
  char v5 = static NavigationTab.== infix(_:_:)();
  sub_10003649C(v4);
  if ((v5 & 1) == 0) {
    return;
  }
  uint64_t v6 = type metadata accessor for Podcasts();
  v40[3] = v6;
  v40[4] = sub_1000119D8((unint64_t *)&qword_1005F79D0, 255, (void (*)(uint64_t))&type metadata accessor for Podcasts);
  uint64_t v7 = sub_10004A244(v40);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, enum case for Podcasts.tabRewrite(_:), v6);
  LOBYTE(v6) = isFeatureEnabled(_:)();
  sub_10004D2D8((uint64_t)v40);
  if (v6)
  {
    type metadata accessor for LibraryTabGroupManager();
    BaseObjectGraph.inject<A>(_:)();
    unint64_t v8 = (void *)v40[0];
    int64_t v9 = (void *)dispatch thunk of LibraryTabGroupManager.tabGroup.getter();
    uint64_t v10 = (void *)UITab.tab(matching:)();

    if (v10)
    {
      self;
      size_t v11 = (void *)swift_dynamicCastObjCClass();
      if (v11)
      {
        id v12 = v11;
        id v13 = [v11 children];
        sub_10004D29C(0, &qword_1005F7EC0);
        unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100036488(a1);
        id v15 = sub_100395498(v14);
        sub_10003649C(a1);
        swift_bridgeObjectRelease();
        [v12 setSelectedChild:v15];
      }
      else
      {
      }
    }
    else
    {
    }
    return;
  }
  UITabBarController.selectTabIfPossible(_:)();
  int64_t v16 = (void *)UITabBarController.selectedNavigationController.getter();
  if (v16)
  {
    id v17 = v16;
    id v18 = [v16 viewControllers];

    sub_10004D29C(0, (unint64_t *)&qword_1005F7EB0);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v20)
      {
LABEL_14:
        if ((v19 & 0xC000000000000001) != 0)
        {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          id v21 = *(id *)(v19 + 32);
        }
        uint64_t v22 = v21;
        swift_bridgeObjectRelease();
        swift_getObjectType();
        if (swift_conformsToProtocol2()) {
          unint64_t v23 = v22;
        }
        else {
          unint64_t v23 = 0;
        }
        if (v23)
        {
          swift_getObjectType();
          uint64_t v24 = dispatch thunk of NavigationTabIdentifiable.navigationTabIdentifier.getter();
          if (v24 == 19)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v25 = v24;
            unint64_t v26 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache);
            swift_beginAccess();
            sub_100036488(v25);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v39 = *v26;
            *unint64_t v26 = 0x8000000000000000;
            sub_100280164(v19, v25, isUniquelyReferenced_nonNull_native);
            *unint64_t v26 = v39;
            swift_bridgeObjectRelease();
            sub_100349EF0(v25);
            swift_endAccess();
            sub_100349EF0(v25);
          }
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease_n();
  }
LABEL_30:
  uint64_t v28 = v2 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache;
  swift_beginAccess();
  if (*(void *)(*(void *)v28 + 16))
  {
    sub_100036488(a1);
    sub_100226D30(a1);
    if (v29)
    {
      swift_endAccess();
      swift_bridgeObjectRetain();
      sub_10003649C(a1);
      goto LABEL_35;
    }
    sub_10003649C(a1);
  }
  swift_endAccess();
LABEL_35:
  uint64_t v30 = UITabBarController.selectedNavigationController.getter();
  if (v30)
  {
    v31 = (void *)v30;
    sub_10004D29C(0, (unint64_t *)&qword_1005F7EB0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 setViewControllers:isa];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v33 = (void *)UITabBarController.selectedNavigationController.getter();
  if (v33)
  {
    uint64_t v34 = v33;
    id v35 = [v33 _uip_tabElement];

    if (v35)
    {
      self;
      uint64_t v36 = swift_dynamicCastObjCClass();
      if (v36)
      {
        v37 = (void *)v36;
        v38 = (void *)_UITab.tabElement(matching:)();
        [v37 _setSelectedElement:v38];
      }
      else
      {
      }
    }
  }
}

uint64_t type metadata accessor for UserActivityController()
{
  return self;
}

uint64_t type metadata accessor for MenuBarController()
{
  return self;
}

uint64_t sub_10000CC60(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100054B78((uint64_t *)&unk_1005F8270);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000CDCC(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  type metadata accessor for ShowCountObserver();
  swift_allocObject();
  sub_100021CD4(a1, v3);
  sub_100042FDC(&qword_1005F79F0, (void (*)(uint64_t))type metadata accessor for ShowCountObserver);
  Observer.eraseToAnyObserver()();
  swift_release();
  Promise.resolve(_:)();
  return swift_release();
}

uint64_t sub_10000CFD0()
{
  uint64_t v0 = self;
  id v1 = [v0 sharedApplication];
  unsigned __int8 v2 = [v1 launchedToTest];

  if (v2) {
    return 1;
  }
  id v3 = [v0 sharedApplication];
  id v4 = [self standardUserDefaults];
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 stringForKey:v5];

  if (v6)
  {

    return 1;
  }
  return 0;
}

uint64_t type metadata accessor for EpisodeController()
{
  return self;
}

void sub_10000D0FC(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_10000D364(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D38C()
{
  v0[3] = type metadata accessor for MainActor();
  v0[4] = static MainActor.shared.getter();
  uint64_t v1 = type metadata accessor for DownloadRemovalObserver();
  v0[5] = v1;
  unsigned __int8 v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  void *v2 = v0;
  v2[1] = sub_100009AA8;
  return BaseObjectGraph.inject<A>(_:)(v0 + 2, v1, v1);
}

id sub_10000D468@<X0>(void *a1@<X8>)
{
  id result = [self sharedInstance];
  if (result) {
    *a1 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000D4B4@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  type metadata accessor for LibraryDataProvider(0);
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  uint64_t result = sub_1002B4798(a1, (void (*)(uint64_t))type metadata accessor for LibraryDataProvider);
  *a2 = v5;
  a2[1] = result;
  return result;
}

void sub_10000D828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10000D83C(id a1)
{
  uint64_t v1 = +[MTPodcastDerivedPropertyObserver sharedInstance];
  [v1 startObserving];

  id v2 = +[SyncControllerFactory resolvedSyncController];
  [v2 start];
}

uint64_t sub_10000D90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100054B1C(a1, (uint64_t *)&unk_100603370);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

Swift::Void __swiftcall RestrictionsController.presentLaunchAlertIfNeeded()()
{
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_100603370);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  void v6[4] = v0;
  int v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  id v8 = v0;
  if (v7 == 1)
  {
    sub_100059EA8((uint64_t)v3);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if (v6[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_100606408;
  *(void *)(v12 + 24) = v6;
  if (v10 | v9)
  {
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v9;
    void v13[3] = v10;
  }
  swift_task_create();
  swift_release();
}

void sub_10000DEA4()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_overlayViewController;
  id v2 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_overlayViewController);
  static ViewControllerContainment.remove(_:)();

  id v3 = *(void **)(v0 + v1);
  *(void *)(v0 + v1) = 0;

  id v4 = *(id *)(v0 + v1);
  static ViewControllerContainment.add(_:to:frame:)();
}

id sub_10000E0F8(void *a1)
{
  uint64_t v9[3] = type metadata accessor for AppTraits_iOS();
  v9[4] = &off_1005639D8;
  v9[0] = swift_allocObject();
  id v2 = (objc_class *)type metadata accessor for AppController();
  id v3 = objc_allocWithZone(v2);
  v3[OBJC_IVAR____TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController_migrationPresentationCanceled] = 0;
  id v4 = &v3[OBJC_IVAR____TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController_onLibrarySelection];
  *id v4 = 0;
  v4[1] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController_appDelegate] = a1;
  sub_100056D54((uint64_t)v9, (uint64_t)&v3[OBJC_IVAR____TtC8PodcastsP33_9AAABDB1DF664191160F6CD588B99E9913AppController_appTraits]);
  v8.receiver = v3;
  v8.super_class = v2;
  id v5 = a1;
  swift_retain();
  id v6 = [super init];
  sub_10004D2D8((uint64_t)v9);
  swift_release();
  return v6;
}

uint64_t sub_10000E2B4()
{
  id v0 = [self defaultMediaLibrary];
  id v1 = [v0 valueForDatabaseProperty:MTMediaLibraryRestoreTokenProperty];

  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_100004C04((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100054B1C((uint64_t)v5, &qword_1005F5D30);
    return 0;
  }
}

void sub_10000E730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000E888(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) transactionClamps];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (v4)
    {
      id v2 = [v4 mutableCopy];

      id v3 = v2;
    }
    else
    {
      id v3 = objc_alloc_init((Class)NSMutableDictionary);
    }
    id v4 = v3;
    [*(id *)(a1 + 32) setTransactionClamps:];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10000E944(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (static Podcasts.isBlueMoonEnabled()())
  {
    type metadata accessor for UserActivityController();
    swift_retain();
    BaseObjectGraph.injectIfAvailable<A>(_:)();
    swift_release();
    if (v11[1])
    {
      if (sub_100025F70(a1))
      {
        id v6 = a1;
        switch(sub_100021EC8(v6))
        {
          case 1u:
            sub_100298554(v6);
            break;
          case 2u:
            sub_10029F298(v6);
            break;
          case 3u:
            break;
          default:
            sub_100297F58(v6);
            break;
        }
      }
      swift_release();
    }
    else
    {
      static Logger.userActivity.getter();
      int v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to find PlaybackContinuityController in graph", v9, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
  return 1;
}

uint64_t sub_10000EB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a2;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  int v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  uint64_t v17 = type metadata accessor for DownloadsAlertPresenter();
  id v18 = &off_10055BD58;
  *(void *)&long long v16 = a1;
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static DispatchQoS.unspecified.getter();
  id v15 = _swiftEmptyArrayStorage;
  sub_100042FDC((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v13);
  *(void *)(a3 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a3 + 64) = _swiftEmptyArrayStorage;
  *(void *)(a3 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController____lazy_storage___debouncer) = 0;
  *(unsigned char *)(a3 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController_active) = 1;
  sub_100042FC4(&v16, a3 + 16);
  uint64_t v10 = a3 + OBJC_IVAR____TtC8Podcasts24DownloadsAlertController_debounceInterval;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, v14, v11);
  return a3;
}

void sub_10000EE40()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned __int8 v2 = [v0 BOOLForKey:v1];

  byte_1005FFC80 = v2;
}

id ShowsSortType.sortDescriptors.getter(char a1)
{
  id result = [self sortDescriptorsForSortType:qword_100477B50[a1]];
  if (result)
  {
    unsigned __int8 v2 = result;
    sub_1000099EC();
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10000F088(void *a1, void *a2, uint64_t a3)
{
  id result = [a1 fetchedObjects];
  if (result)
  {
    uint64_t v6 = result;
    sub_100008D58();
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v8);
    v10[2] = a3;
    uint64_t v9 = sub_100027954((void (*)(uint64_t *__return_ptr, id *))sub_100027AF4, (uint64_t)v10, v7);
    swift_bridgeObjectRelease();
    *a2 = v9;
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

char *sub_10000F160()
{
  swift_beginAccess();
  id result = (char *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    NSString v1 = result;
    id v2 = *(id *)&result[OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver];

    id v9 = 0;
    LODWORD(v1) = [v2 performFetch:&v9];

    id v3 = v9;
    if (v1)
    {
      return (char *)v3;
    }
    else
    {
      id v4 = v9;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100054B78(&qword_1005F8130);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_10046D010;
      id v9 = 0;
      unint64_t v10 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      v6._object = (void *)0x80000001004E1810;
      v6._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v6);
      sub_100054B78(&qword_100603F70);
      _print_unlocked<A, B>(_:_:)();
      id v7 = v9;
      unint64_t v8 = v10;
      *(void *)(v5 + 56) = &type metadata for String;
      *(void *)(v5 + 32) = v7;
      *(void *)(v5 + 40) = v8;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      return (char *)swift_errorRelease();
    }
  }
  return result;
}

char *sub_10000F4C0()
{
  swift_beginAccess();
  id result = (char *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    NSString v1 = result;
    id v2 = *(id *)&result[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver];

    id v9 = 0;
    LODWORD(v1) = [v2 performFetch:&v9];

    id v3 = v9;
    if (v1)
    {
      return (char *)v3;
    }
    else
    {
      id v4 = v9;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100054B78(&qword_1005F8130);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_10046D010;
      id v9 = 0;
      unint64_t v10 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      v6._object = (void *)0x80000001004D44E0;
      v6._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v6);
      sub_100054B78(&qword_100603F70);
      _print_unlocked<A, B>(_:_:)();
      id v7 = v9;
      unint64_t v8 = v10;
      *(void *)(v5 + 56) = &type metadata for String;
      *(void *)(v5 + 32) = v7;
      *(void *)(v5 + 40) = v8;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      return (char *)swift_errorRelease();
    }
  }
  return result;
}

void sub_10000F6B0(void *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  type metadata accessor for LibraryDataProvider(0);
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  uint64_t v2 = *(void *)&v3[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_hudPresenter];
  swift_retain();

  *a1 = v2;
  a1[1] = &off_1005685F0;
}

uint64_t sub_10000F79C()
{
  if (qword_1005F5A40 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  defaultPodcastTransitionRules.getter();
  type metadata accessor for PodcastStateController();
  swift_allocObject();
  uint64_t result = PodcastStateController.init(dataSources:transitionRules:)();
  qword_10061AAC0 = result;
  return result;
}

uint64_t _s8Podcasts11FeedManagerC6SystemOwCP_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for PodcastsStateCoordinator()
{
  return self;
}

void sub_10000FA9C(id a1)
{
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  NSString v1 = +[NSArray arrayWithObjects:&v4 count:3];
  uint64_t v2 = +[NSSet setWithArray:](NSSet, "setWithArray:", v1, v4, v5);
  id v3 = (void *)qword_10060A6B8;
  qword_10060A6B8 = v2;
}

unint64_t sub_10000FB64()
{
  sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
  id v0 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v1 = [v0 activeAccount];

  if (v1)
  {
    id v2 = [v1 ams_altDSID];

    if (v2)
    {
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v5 = v4;

      v6._countAndFlagsBits = v3;
      v6._object = v5;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 46;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
    }
  }
  return 0xD000000000000037;
}

void sub_10000FC80(uint64_t a1)
{
  id v2 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MTAccountController: Setting active account: %@", (uint8_t *)&v4, 0xCu);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 56), *(id *)(a1 + 32));
}

void *initializeBufferWithCopyOfBuffer for CoreDataDownloadLibrary(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

void sub_10000FD84(void *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  type metadata accessor for LibraryDataProvider(0);
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  id v2 = *(id *)&v3[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateControllerProvider];

  *a1 = v2;
}

unint64_t sub_10000FE08()
{
  sub_100054B78((uint64_t *)&unk_1005F9450);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10046D030;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  sub_10004D29C(0, (unint64_t *)&unk_1005F9460);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 64) = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v3;
  unint64_t result = sub_10005A1DC(inited);
  qword_1005F91E0 = result;
  return result;
}

void sub_10000FEE0(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  if ([*(id *)(a1 + 32) subscriptionState] == 1)
  {
    objc_sync_exit(v2);

    id v2 = +[UIApplication sharedApplication];
    [v2 registerForRemoteNotifications];
  }
  else
  {
    NSString v3 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to complete APNS registration. Reason: interrupted.", v4, 2u);
    }

    objc_sync_exit(v2);
  }
}

void sub_10000FFA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100010040()
{
  return RecommendationsMetadata.Channels.init(from:favoritedChannels:dislikedChannels:)();
}

void sub_1000100E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_100603370);
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = static Podcasts.isBlueMoonEnabled()();
  id v10 = [self _applePodcastsFoundationSharedUserDefaults];
  id v22 = v10;
  if (v9)
  {
    unsigned __int8 v11 = [v10 BOOLForKey:kMTSuccessfullyMigratedLegacyPlaybackQueue];

    if ((v11 & 1) == 0)
    {
      static Logger.modernPlayback.getter();
      swift_retain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        id v15 = (void *)swift_slowAlloc();
        id v22 = v15;
        *(_DWORD *)uint64_t v14 = 136315138;
        id v21 = v14 + 4;
        uint64_t v23 = *v1;
        uint64_t v24 = v15;
        sub_100054B78(&qword_100609EE8);
        uint64_t v16 = String.init<A>(describing:)();
        uint64_t v23 = sub_10004B974(v16, v17, (uint64_t *)&v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%s] Performing legacy queue migration.", v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v19 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v4, 1, 1, v19);
      uint64_t v20 = (void *)swift_allocObject();
      v20[2] = 0;
      v20[3] = 0;
      v20[4] = v1;
      swift_retain();
      sub_10001201C((uint64_t)v4, (uint64_t)&unk_100609F30, (uint64_t)v20);
      swift_release();
    }
  }
  else
  {
    [v10 setBool:0 forKey:kMTSuccessfullyMigratedLegacyPlaybackQueue];
    id v18 = v22;
  }
}

uint64_t sub_100010524(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for DownloadingEpisodeStateDataSource();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1003CB77C(v7, result + 1);
    Swift::Int v30 = v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_1003F62B0(v27, &qword_100607FF0);
      Swift::Int v24 = v30;
    }
    else
    {
      Swift::Int v24 = v22;
      id v25 = v8;
    }
    sub_1003CB9E0(v8, v24);
    *uint64_t v3 = v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for DownloadingEpisodeStateDataSource();
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_10005990C((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_100607FF0, (void (*)(void))type metadata accessor for DownloadingEpisodeStateDataSource);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_10001084C()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  v0[8] = type metadata accessor for MainActor();
  v0[9] = static MainActor.shared.getter();
  uint64_t v2 = type metadata accessor for CacheDeleteObserver();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10000743C;
  return BaseObjectGraph.inject<A>(_:)(v0 + 2, v2, v2);
}

void *sub_100010984()
{
  uint64_t v0 = type metadata accessor for Podcasts();
  v7[3] = v0;
  v7[4] = sub_10004AE9C((unint64_t *)&qword_1005F79D0, (void (*)(uint64_t))&type metadata accessor for Podcasts);
  uint64_t v1 = sub_10004A244(v7);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v0 - 8) + 104))(v1, enum case for Podcasts.widgetNowPlayingArtwork(_:), v0);
  LOBYTE(v0) = isFeatureEnabled(_:)();
  uint64_t result = (void *)sub_10004D2D8((uint64_t)v7);
  if ((v0 & 1) != 0 && (uint64_t result = MTLCreateSystemDefaultDevice()) != 0)
  {
    uint64_t v3 = result;
    unsigned __int8 v4 = [result hasUnifiedMemory];
    unsigned __int8 v5 = [v3 supportsFamily:1004];
    uint64_t result = (void *)swift_unknownObjectRelease();
    char v6 = v4 & v5;
  }
  else
  {
    char v6 = 0;
  }
  byte_100605790 = v6;
  return result;
}

id sub_100010AA0()
{
  uint64_t v1 = *(void **)(v0 + 88);
  if (v1)
  {
    id v2 = *(id *)(v0 + 88);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)NSOperationQueue) init];
    [v3 setMaxConcurrentOperationCount:1];
    unsigned __int8 v4 = *(void **)(v0 + 88);
    *(void *)(v0 + 88) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_100010B20()
{
  uint64_t v1 = (uint64_t)&v0[OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncabilityController];
  uint64_t v2 = type metadata accessor for PlatformContentController_Null();
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 32) = 0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  unsigned __int8 v4 = (uint64_t *)&v0[OBJC_IVAR____TtC8Podcasts25PlatformContentController_platformImpl];
  v4[3] = v2;
  v4[4] = (uint64_t)&off_10055E570;
  *unsigned __int8 v4 = v3;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_beginAccess();
  id v5 = v0;
  sub_10005AE58((uint64_t)v9, v1);
  swift_endAccess();
  char v6 = &v5[OBJC_IVAR____TtC8Podcasts25PlatformContentController_syncToAppController];
  *(_OWORD *)char v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((void *)v6 + 4) = 0;

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for PlatformContentController();
  return [super init];
}

uint64_t sub_100010C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = _swiftEmptyArrayStorage;
  sub_100042FDC((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v10);
  *(void *)(a3 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a3 + 56) = UIBackgroundTaskInvalid;
  *(unsigned char *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 32) = v11;
  *(void *)(a3 + 40) = &off_10055DA48;
  *(void *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = &off_10055A510;
  return a3;
}

uint64_t sub_100010EA8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  [objc_allocWithZone((Class)MTSubscribeUtil) init];
  id v2 = objc_allocWithZone((Class)type metadata accessor for RemoteFollowCommandCenter());
  uint64_t result = RemoteFollowCommandCenter.init(asPartOf:subscriptionUtility:)();
  *a1 = result;
  return result;
}

id sub_100010F24()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 privateQueueContext];

  id v2 = (objc_class *)type metadata accessor for DebouncedAutoDownloadProcessor();
  uint64_t v3 = objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR___MTDebouncedAutoDownloadProcessor____lazy_storage___debouncedProcessor] = 0;
  *(void *)&v3[OBJC_IVAR___MTDebouncedAutoDownloadProcessor_debounceInterval] = 0x3FF0000000000000;
  v3[OBJC_IVAR___MTDebouncedAutoDownloadProcessor_isRunning] = 0;
  *(void *)&v3[OBJC_IVAR___MTDebouncedAutoDownloadProcessor_context] = v1;
  v5.receiver = v3;
  v5.super_class = v2;
  id result = [super init];
  static DebouncedAutoDownloadProcessor.sharedInstance = (uint64_t)result;
  return result;
}

uint64_t sub_1000110A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StationListOptions();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  id v6 = objc_allocWithZone((Class)type metadata accessor for StationListObserver());
  uint64_t v7 = (void *)sub_100030564((uint64_t)v4);
  uint64_t v11 = (uint64_t)v7;
  sub_100042FDC(&qword_1005F7A00, (void (*)(uint64_t))type metadata accessor for StationListObserver);
  uint64_t v8 = Observer.eraseToAnyObserver()();

  uint64_t v11 = v8;
  Promise.resolve(_:)();
  return swift_release();
}

void sub_10001139C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000113B0()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for ChannelListObserver()) init];
  sub_100042FDC(&qword_1005F79F8, (void (*)(uint64_t))type metadata accessor for ChannelListObserver);
  Observer.eraseToAnyObserver()();

  Promise.resolve(_:)();
  return swift_release();
}

uint64_t sub_100011468(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000114BC(void *a1)
{
  id v1 = (char *)a1 + *(void *)((swift_isaMask & *a1) + 0x180);
  uint64_t v2 = type metadata accessor for OperationResult();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_release();
}

uint64_t sub_100011590()
{
  uint64_t result = type metadata accessor for OperationResult();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100011630@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100043E5C(*a1, a1[1], a2);
}

uint64_t sub_10001165C(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *initializeWithCopy for DownloaderConfiguration(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  long long v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  return a1;
}

void sub_100011804(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  unint64_t v7 = a4;
  if (v7 | *(void *)(a1 + 32))
  {
    uint64_t v8 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v9;
      __int16 v21 = 2112;
      unint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "MTSyncController fetch of GetAll/PutAll bag value failed. Errors=%@ %@", buf, 0x16u);
    }

    dispatch_time_t v10 = dispatch_time(0, 60000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000F99B4;
    block[3] = &unk_10054D570;
    block[4] = *(void *)(a1 + 40);
    dispatch_after(v10, (dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100015618;
    v14[3] = &unk_10054E708;
    uint64_t v11 = *(NSObject **)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 40);
    id v15 = v12;
    uint64_t v16 = v13;
    id v17 = v6;
    dispatch_async(v11, v14);
  }
}

uint64_t sub_1000119D8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PodcastsFlowTabBarController()
{
  return self;
}

void sub_100011A44(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7 || ([v6 BOOLValue] & 1) == 0)
  {
    id v18 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Batch fetch bag value is off. Updating all podcasts through legacy path.", buf, 2u);
    }

    [*(id *)(a1 + 32) _unsafe_updateAllPodcastsUserInitiated:*(unsigned __int8 *)(a1 + 56) forced:*(unsigned __int8 *)(a1 + 57) useBackgroundFetch:*(unsigned __int8 *)(a1 + 58) source:*(void *)(a1 + 48) startedUpdatesCallback:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v8 = dispatch_group_create();
    *(void *)buf = 0;
    id v32 = buf;
    uint64_t v33 = 0x2020000000;
    uint64_t v34 = 0;
    dispatch_group_enter(v8);
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 48);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10011447C;
    v25[3] = &unk_100551EB0;
    char v29 = v10;
    __int16 v30 = *(_WORD *)(a1 + 57);
    uint64_t v27 = buf;
    uint64_t v28 = v11;
    v25[4] = v9;
    id v12 = v8;
    unint64_t v26 = v12;
    [v9 _updateAllMediaAPIPodcastsUserInitiated:v10 source:v11 completion:v25];
    dispatch_group_enter(v12);
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v15 = *(unsigned __int8 *)(a1 + 57);
    uint64_t v16 = *(void *)(a1 + 48);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10011461C;
    v22[3] = &unk_100551E88;
    Swift::Int v24 = buf;
    id v17 = v12;
    unint64_t v23 = v17;
    [v13 _updateAllNonMediaAPIPodcastsUserInitiated:v14 forced:v15 source:v16 started:v22];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100114638;
    block[3] = &unk_100551ED8;
    __int16 v21 = buf;
    id v20 = *(id *)(a1 + 40);
    dispatch_group_notify(v17, (dispatch_queue_t)&_dispatch_main_q, block);

    _Block_object_dispose(buf, 8);
  }
}

void sub_100011CD0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100011CE8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)ICCloudClient);
  uint64_t v3 = [*(id *)(a1 + 32) workQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000BE68;
  v6[3] = &unk_100552F38;
  long long v4 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  [v5 isAuthenticatedWithQueue:v3 completionHandler:v6];
}

void sub_100011DB8(unsigned __int8 *a1)
{
  uint64_t updated = type metadata accessor for FeedUpdateType();
  uint64_t v3 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  id v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v10 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v12 = (unsigned char *)Strong;
    if (v10)
    {
      if ((*(unsigned char *)(Strong + OBJC_IVAR___MTFeedManager__wasUpdating) & 1) == 0)
      {
        sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
        *uint64_t v9 = static OS_dispatch_queue.main.getter();
        (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
        char v13 = _dispatchPreconditionTest(_:)();
        (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
        if ((v13 & 1) == 0)
        {
          __break(1u);
          return;
        }
        (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for FeedUpdateType.batch(_:), updated);
        FeedUpdateType.beginInterval(for:)();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, updated);
      }
    }
    else if (*(unsigned char *)(Strong + OBJC_IVAR___MTFeedManager__wasUpdating))
    {
      sub_10030B4C0();
    }
    v12[OBJC_IVAR___MTFeedManager__wasUpdating] = v10;
  }
}

uint64_t sub_10001201C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100059EA8(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000124B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000126A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100054B78(&qword_100609330);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    __int16 v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      char v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      char v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *char v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100012998()
{
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 80);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for NowPlayingMediaPlayerController();
    swift_allocObject();
    swift_retain();
    uint64_t v1 = NowPlayingMediaPlayerController.init(asPartOf:)();
    *(void *)(v2 + 80) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_100012D1C(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  sub_100054B78((uint64_t *)&unk_1005FCE60);
  uint64_t v12 = Synchronized.init(wrappedValue:)();
  a6[2] = a1;
  a6[3] = a2;
  a6[6] = a4;
  a6[7] = v12;
  a6[4] = a3;
  a6[5] = a5;
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  swift_retain();
  id v16 = a5;
  a6[8] = sub_1000594BC();
  a6[9] = sub_1000594B0();
  return a6;
}

void sub_10001316C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000132F0()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 privateQueueContext];

  uint64_t v2 = (objc_class *)type metadata accessor for DebouncedAssetRemovalProcessor();
  uint64_t v3 = objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_debounceInterval] = 0x3FF0000000000000;
  v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_isRunning] = 0;
  uint64_t v4 = &v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___episodeStorage];
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((void *)v4 + 4) = 0;
  *(void *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___debouncedProcessor] = 0;
  *(void *)&v3[OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context] = v1;
  v6.receiver = v3;
  v6.super_class = v2;
  id result = [super init];
  static DebouncedAssetRemovalProcessor.sharedInstance = (uint64_t)result;
  return result;
}

id sub_1000133C8(void *a1, void *a2)
{
  id result = [a1 fetchedObjects];
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  sub_10004D29C(0, &qword_1005F7240);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_4:
      id result = (id)specialized ContiguousArray.reserveCapacity(_:)();
      if (v6 < 0)
      {
        __break(1u);
        return result;
      }
      type metadata accessor for LegacyChannelLockup();
      uint64_t v7 = 0;
      do
      {
        if ((v5 & 0xC000000000000001) != 0) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v8 = *(id *)(v5 + 8 * v7 + 32);
        }
        ++v7;
        id v9 = v8;
        static MetricsDataConfiguration.default.getter();
        sub_1003B2224(v9, 1, (uint64_t)v10);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v6 != v7);
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
LABEL_14:
  *a2 = _swiftEmptyArrayStorage;

  return (id)swift_bridgeObjectRelease();
}

void sub_10001376C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_10001379C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  v17[3] = type metadata accessor for ImplicitFollowsDecayCoordinator();
  v17[4] = &protocol witness table for ImplicitFollowsDecayCoordinator;
  v17[0] = a3;
  v16[3] = type metadata accessor for PodcastsStateTransitionsExternalEffects();
  v16[4] = &protocol witness table for PodcastsStateTransitionsExternalEffects;
  v16[0] = a4;
  sub_100056D54(a1, (uint64_t)(a5 + 2));
  a5[7] = a2;
  sub_100056D54((uint64_t)v17, (uint64_t)(a5 + 8));
  sub_100056D54((uint64_t)v16, (uint64_t)(a5 + 13));
  swift_beginAccess();
  uint64_t v10 = a5[11];
  uint64_t v11 = a5[12];
  sub_100055EF0((uint64_t)(a5 + 8), v10);
  uint64_t v12 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v11 + 24);
  id v13 = a2;
  uint64_t v14 = swift_retain();
  v12(v14, &off_100560490, v10, v11);
  swift_endAccess();
  sub_10004D2D8((uint64_t)v16);
  sub_10004D2D8((uint64_t)v17);
  sub_10004D2D8(a1);
  return a5;
}

uint64_t sub_1000138C8(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_10004D29C(0, &qword_1005F8440);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100013B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013C90(id a1)
{
  id v1 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[Foreground Sync] Application is Active! Starting all processors", v4, 2u);
  }

  uint64_t v2 = +[PFDeferredLaunchTaskCoordinator sharedInstance];
  [v2 deferWork:&stru_10054D778];

  uint64_t v3 = +[PFDeferredLaunchTaskCoordinator sharedInstance];
  [v3 deferWork:&stru_10054D7D8];
}

id sub_100013D3C@<X0>(unint64_t *a1@<X0>, SEL *a2@<X2>, void *a3@<X8>)
{
  sub_10004D29C(0, a1);
  id result = [(id)swift_getObjCClassFromMetadata() *a2];
  *a3 = result;
  return result;
}

uint64_t sub_100013D88@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  sub_10004D29C(0, a1);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_100013E00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (uint64_t *)&v2[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates];
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  sub_10004ACDC(v6);
  sub_10004ACDC(a1);
  sub_1000536BC(v6);
  if (!v6)
  {
    uint64_t v8 = *(void *)&v3[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadManagerObserver];
    swift_beginAccess();
    id v9 = v3;
    sub_100010524(&v14, v9);
    uint64_t v10 = v14;
    swift_endAccess();

    [*(id *)&v9[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadsNotifier] registerForUpdates:v8];
    uint64_t v11 = a1;
    return sub_1000536BC(v11);
  }
  if (!*v5)
  {
    uint64_t v12 = *(void *)&v3[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadManagerObserver];
    swift_beginAccess();
    id v13 = (void *)sub_1003CBE58(v3);
    swift_endAccess();

    [*(id *)&v3[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadsNotifier] unregisterForUpdates:v12];
    sub_1000536BC(a1);
    uint64_t v11 = v6;
    return sub_1000536BC(v11);
  }
  sub_1000536BC(a1);

  return sub_1000536BC(v6);
}

void sub_100013FC4(id a1)
{
  id v1 = +[MTProcessorManager sharedInstance];
  [v1 startAllProcessors];

  uint64_t v2 = +[MTBaseProcessor sharedInstance];
  [v2 startIfNeeded];

  id v3 = +[MTBaseProcessor sharedInstance];
  [v3 updateAllPlaylistsWithCompletion:&stru_10054D7F8];
}

void sub_1000140D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000140E8(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (a4)
  {
    type metadata accessor for LaunchOptionsKey(0);
    sub_10003ABC8(&qword_1005F66D0, type metadata accessor for LaunchOptionsKey);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  char v10 = a5();

  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_1000142D0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    sub_100014778();
  }
  sub_100054B78(&qword_100605980);
  FRPOutput.content.getter();
  uint64_t v2 = sub_10001D1CC(v7);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v3 = swift_unknownObjectWeakLoadStrong();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = sub_1000505EC((uint64_t)v2);
    swift_bridgeObjectRelease();
    sub_100025C6C(v5);
  }
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ForegroundSyncUtil.feedUpdateAllPodcastsOnForeground()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *(void *)&v0[OBJC_IVAR___MTForegroundSyncUtil_workQueue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_10005C964;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  aBlock[3] = &unk_100564840;
  char v10 = _Block_copy(aBlock);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  v12[1] = _swiftEmptyArrayStorage;
  sub_10004AE54((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
}

uint64_t sub_100014778()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [self sharedInstance];
  id v13 = [v12 privateQueueContext];

  LODWORD(v12) = [v13 hasChanges];
  if (v12)
  {
    unint64_t v23 = v7;
    unint64_t v24 = v4;
    uint64_t v25 = v5;
    static Logger.widget.getter();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Timeline has changed but it's not saved yet. Waiting for save notification", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v1;
    aBlock[4] = sub_100373250;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003B424;
    aBlock[3] = &unk_1005650C8;
    int64_t v18 = _Block_copy(aBlock);
    id v19 = v1;
    uint64_t v20 = v23;
    static DispatchQoS.unspecified.getter();
    uint64_t v28 = _swiftEmptyArrayStorage;
    sub_10004AE9C((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100054B78((uint64_t *)&unk_1005FE4B0);
    sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
    uint64_t v21 = v24;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v2);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v25);
    return swift_release();
  }
  else
  {
    return sub_100033908();
  }
}

void sub_100014BE0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v9 = a2;
  id v8 = a4;
  v7(a2, a3, a4);
  swift_release();
}

uint64_t sub_100014C74(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  __chkstk_darwin(v7);
  id v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FeedManagerBagConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v18[1] = *(void *)&a2[OBJC_IVAR___MTFeedManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v14 + v13, (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_10005D388;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  aBlock[3] = &unk_100560E78;
  os_log_type_t v15 = _Block_copy(aBlock);
  id v16 = a2;
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_10004ADC4((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);
  return swift_release();
}

void sub_100015000(id a1)
{
  uint64_t v1 = +[MZPreferences storeBookkeeperPreferences];
  uint64_t v2 = [v1 objectForKey:@"MZKeyValueStoreClamps" withDefaultValue:0];

  if (v2)
  {
    id v9 = 0;
    uint64_t v3 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v2 error:&v9];
    id v4 = v9;
    uint64_t v5 = (void *)qword_10060A6B0;
    qword_10060A6B0 = v3;
  }
  else
  {
    id v4 = 0;
  }
  if (qword_10060A6B0) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    uint64_t v7 = objc_alloc_init(MZKeyValueStoreClampsController);
    uint64_t v8 = (void *)qword_10060A6B0;
    qword_10060A6B0 = (uint64_t)v7;
  }
}

uint64_t sub_1000150EC@<X0>(void *a1@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  uint64_t v2 = static BaseObjectGraph.current.getter();
  type metadata accessor for UserActivityController();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = _swiftEmptyArrayStorage;
  v3[4] = 0;
  v3[6] = 0;
  v3[7] = 0;
  v3[8] = v2;
  type metadata accessor for PlaybackController();
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  v3[3] = v8;
  id v4 = (objc_class *)type metadata accessor for PlaybackContinuityActivityDelegate();
  id v5 = objc_allocWithZone(v4);
  swift_weakInit();
  swift_weakAssign();
  v7.receiver = v5;
  v7.super_class = v4;
  v3[5] = [super init];
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void sub_1000152D8(void *a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  *(void *)(v18 + 32) = a4;
  *(void *)(v18 + 40) = a5;
  *(void *)(v18 + 48) = a6;
  *(void *)(v18 + 56) = a7;
  *(void *)(v18 + 64) = a8;
  *(void *)(v18 + 72) = a9;
  v21[4] = sub_10005CA68;
  v21[5] = v18;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_1000138C8;
  v21[3] = &unk_1005689E0;
  uint64_t v19 = _Block_copy(v21);
  id v20 = a3;
  swift_retain();
  sub_10004ACDC(a6);
  swift_retain();
  swift_release();
  [a1 getAllTasksWithCompletionHandler:v19];
  _Block_release(v19);
}

void sub_100015550(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100015618(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting MTSyncController and the bag has loaded with GetAll=%@. ", buf, 0xCu);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001FF20;
  block[3] = &unk_10054E708;
  int8x16_t v5 = *(int8x16_t *)(a1 + 32);
  id v4 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  id v8 = *(id *)(a1 + 48);
  if (qword_10060A860 != -1) {
    dispatch_once(&qword_10060A860, block);
  }
}

uint64_t LibraryDataProvider.fetchShowCountObserver(listType:)(uint64_t a1, char a2)
{
  sub_100054B78(&qword_1005F7268);
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.libraryLoadingSignpost.getter();
  uint64_t v5 = Promise.init(signpost:log:metadata:logResult:)();
  id v6 = [*(id *)(v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) privateQueueContext];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = a2 & 1;
  *(void *)(v7 + 32) = v5;
  v10[4] = sub_10005C2D4;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10003B424;
  void v10[3] = &unk_100556BE0;
  id v8 = _Block_copy(v10);
  swift_retain();
  swift_release();
  [v6 performBlock:v8];
  _Block_release(v8);

  return v5;
}

void sub_1000158E0()
{
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  id v0 = (void *)static OS_os_log.restore.getter();
  os_log(_:dso:log:_:_:)();

  OS_dispatch_queue.sync<A>(execute:)();
  if (v4 == 1)
  {
    static os_log_type_t.default.getter();
    uint64_t v1 = (void *)static OS_os_log.restore.getter();
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    uint64_t v2 = swift_allocObject();
    swift_weakInit();
    uint64_t v3 = (void *)swift_allocObject();
    v3[2] = v2;
    v3[3] = UInt64.int64Representation.getter;
    v3[4] = 0;
    swift_retain();
    sub_10001CFD4((uint64_t)sub_10005DB04, (uint64_t)v3);
    swift_release();
    swift_release();
  }
}

uint64_t sub_100015A80()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)&v0[OBJC_IVAR___MTFeedManager_queue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_10005D49C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  aBlock[3] = &unk_100561030;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_10004ADC4((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_100015D40()
{
  id v1 = [self standardUserDefaults];
  sub_10000FB64();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 integerForKey:v2];

  if ((uint64_t)v3 > 0
    || (RestrictionsController.state.getter(),
        (RestrictionsController.ExplicitContentState.isExplicitContentAllowed.getter() & 1) != 0))
  {
    char v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4(0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 24) = v6;
    void *v6 = v0;
    v6[1] = sub_10038E67C;
    return RestrictionsController.isExplicitContentBannedInCurrentStorefront()();
  }
}

void sub_100016168(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000161B8(uint64_t a1)
{
  NSString v2 = _MTLogCategoryiTunesMigration();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[iTunesMigration] stop showing migration screen.", buf, 2u);
  }

  if (*(unsigned char *)(a1 + 40)) {
    [*(id *)(a1 + 32) switchToLibraryIfNowHasContent];
  }
  if ((os_feature_enabled_bluemoon() & 1) == 0)
  {
    id v3 = +[MTPlayerController defaultInstance];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10012E75C;
    v6[3] = &unk_100552788;
    void v6[4] = *(void *)(a1 + 32);
    [v3 setPlatformSyncPlayheadChangeObserverBlock:v6];
  }
  char v4 = _MTLogCategoryiTunesMigration();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[iTunesMigration] starting post migration stuff...", buf, 2u);
  }

  return [*(id *)(a1 + 32) setupAfterBecomingActive];
}

void sub_1000163E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t LibraryDataProvider.fetchChannelsObserver()()
{
  sub_100054B78(&qword_1005F7208);
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.libraryLoadingSignpost.getter();
  uint64_t v1 = Promise.init(signpost:log:metadata:logResult:)();
  id v2 = [*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) privateQueueContext];
  v5[4] = sub_10005C370;
  v5[5] = v1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10003B424;
  v5[3] = &unk_100556B90;
  id v3 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [v2 performBlock:v3];
  _Block_release(v3);

  return v1;
}

uint64_t sub_100016644()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[OBJC_IVAR___MTForegroundSyncUtil_needsSyncing] = 0;
  v13[0] = *(void *)&v0[OBJC_IVAR___MTForegroundSyncUtil_workQueue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_10005C95C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  aBlock[3] = &unk_100564980;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_10004AE54((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

id sub_1000168FC@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader__session;
  char v4 = *(void **)&a1[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader__session];
  if (v4)
  {
    id v5 = *(id *)&a1[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader__session];
  }
  else
  {
    uint64_t v7 = (char *)sub_100041A98(&a1[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config], *(void *)&a1[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config + 24]);
    id v8 = sub_10005693C(1, *v7);
    id v9 = sub_10000BBC8();
    uint64_t v10 = self;
    uint64_t v11 = a1;
    id v12 = [v10 sessionWithConfiguration:v8 assetDownloadDelegate:v11 delegateQueue:v9];

    unint64_t v13 = *(void **)&a1[v3];
    *(void *)&a1[v3] = v12;
    id v5 = v12;

    char v4 = 0;
  }
  *a2 = v5;
  return v4;
}

void sub_1000169F0(uint64_t a1)
{
  uint64_t v2 = +[NSUserDefaults standardUserDefaults];
  uint64_t v3 = [v2 objectForKey:@"DerivedPropertyObserverPersistentHistoryToken"];

  if (v3)
  {
    id v9 = 0;
    char v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v3 error:&v9];
    id v5 = v9;
    if (v5)
    {
      uint64_t v6 = _MTLogCategoryDatabase();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Derived Property Observer encountered error trying to fetch previous history token %@", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 32);
      id v8 = v4;
      uint64_t v6 = *(NSObject **)(v7 + 96);
      *(void *)(v7 + 96) = v8;
    }
  }
  else
  {
    id v5 = _MTLogCategoryDatabase();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Derived Property Observer has never processed persistent history data.", buf, 2u);
    }
  }
}

uint64_t sub_100016B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100054BBC(a1, a2, (uint64_t *)&unk_1005F82B0);
}

uint64_t sub_100016BA0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100016BE0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100016C38()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100016C84()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100016CD0()
{
  uint64_t v1 = type metadata accessor for SearchAction();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_100016D9C()
{
  sub_10004D2D8(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100016E0C()
{
  uint64_t v1 = type metadata accessor for PlayEpisodeIntent();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  sub_10004D2D8(v0 + 16);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100016EF4()
{
  uint64_t v1 = type metadata accessor for DownloadedAssetEffect();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for DownloadEnvironment();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v3, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))((char *)v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_10001705C(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);

  return swift_deallocObject();
}

uint64_t sub_100017130()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10001717C()
{
  uint64_t v1 = type metadata accessor for PerformanceTestCase();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_100017220()
{
  uint64_t v1 = sub_100054B78(&qword_100605FF0);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1000172B4()
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000173EC(uint64_t a1, void *a2, void *a3)
{
  sub_10000A204(&qword_1005F7EC8, (void (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController);
  type metadata accessor for ParentFlowController();
  swift_allocObject();
  swift_retain();
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ParentFlowController.init(asPartOf:splitViewController:tabBarController:interfaceMode:)();
  dispatch thunk of RootSplitViewController.setFlowController(_:)();
  ParentFlowController.initializePageContextForMetrics()();
  uint64_t v8 = static TabMenu.defaultTab.getter();
  type metadata accessor for BaseObjectGraph();
  BaseObjectGraph.__allocating_init(name:_:)();
  dispatch thunk of FlowController.change(tab:execute:popToRoot:preserveTransientView:userInitiated:suppressMetrics:objectGraph:)();
  swift_release();
  sub_10003649C(v8);
  return v7;
}

void sub_100017774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100017798@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (objc_class *)type metadata accessor for MenuBarController();
  id v5 = (char *)objc_allocWithZone(v4);
  id v6 = &v5[OBJC_IVAR____TtC8Podcasts17MenuBarController_menuBarPresenter];
  uint64_t v7 = (objc_class *)type metadata accessor for GlobalActionController();
  *(void *)id v6 = 0;
  *((void *)v6 + 1) = 0;
  objc_allocWithZone(v7);
  swift_retain_n();
  uint64_t v8 = v5;
  *(void *)&v8[OBJC_IVAR____TtC8Podcasts17MenuBarController_globalActionController] = sub_10002768C(a1);

  id v9 = [self mainSystem];
  [v9 setNeedsRebuild];

  v12.receiver = v8;
  v12.super_class = v4;
  id v10 = [super init];
  uint64_t result = swift_release();
  *a2 = v10;
  return result;
}

void sub_100017990(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MTAccountController: updating active account", v7, 2u);
  }

  unint64_t v3 = [*(id *)(a1 + 32) _activeAccountBlocking];
  unint64_t v4 = [v3 ams_DSID];
  uint64_t v5 = [v4 stringValue];

  unint64_t v6 = *(void *)(a1 + 40);
  if (v6 | v5 && ([(id)v6 isEqualToString:v5] & 1) == 0) {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_100550F98);
  }
  [*(id *)(a1 + 32) setActiveAccount:v3];
  [*(id *)(a1 + 32) setHasFetchedInitialAccount:1];
}

void sub_100017A7C(void *a1@<X8>)
{
  uint64_t v2 = (objc_class *)type metadata accessor for ChapterResultsController();
  unint64_t v3 = (char *)objc_allocWithZone(v2);
  uint64_t v4 = qword_1005FDF70;
  id v5 = objc_allocWithZone((Class)MTChapterResultsController);
  unint64_t v6 = v3;
  *(void *)&v3[v4] = [v5 init];

  uint64_t v7 = *(void **)&v3[v4];
  uint64_t v8 = &v6[qword_1005FDE80];
  *((void *)v8 + 4) = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *(void *)&v6[qword_1005FDE88] = v7;
  id v9 = v7;
  v11.receiver = v6;
  v11.super_class = (Class)sub_100054B78(&qword_1005FFA68);
  id v10 = [super init];
  [v9 setDelegate:v10];

  a1[3] = v2;
  a1[4] = &off_10055CA78;
  *a1 = v10;
}

void sub_100017B90()
{
  uint64_t v0 = self;
  id v1 = [v0 defaultManager];
  URL.path.getter();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v1 fileExistsAtPath:v2];

  if (v3)
  {
    static os_log_type_t.default.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    id v21 = (id)static OS_os_log.downloads.getter();
    os_log(_:dso:log:_:_:)();
  }
  else
  {
    id v4 = [v0 defaultManager];
    URL._bridgeToObjectiveC()(v5);
    uint64_t v7 = v6;
    sub_10016F790((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for FileAttributeKey(0);
    sub_100055C40(&qword_1005F66C0, type metadata accessor for FileAttributeKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v22 = 0;
    unsigned int v9 = [v4 createDirectoryAtURL:v7 withIntermediateDirectories:0 attributes:isa error:&v22];

    if (v9)
    {
      id v10 = v22;
      static os_log_type_t.default.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      objc_super v11 = (void *)static OS_os_log.downloads.getter();
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      id v12 = v22;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      uint64_t v15 = v14;
      static os_log_type_t.error.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      id v16 = (void *)static OS_os_log.downloads.getter();
      sub_100054B78(&qword_1005F7720);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_10046D030;
      *(void *)(v17 + 56) = &type metadata for String;
      unint64_t v18 = sub_10004DA4C();
      *(void *)(v17 + 64) = v18;
      *(void *)(v17 + 32) = v13;
      *(void *)(v17 + 40) = v15;
      uint64_t v19 = URL.path.getter();
      *(void *)(v17 + 96) = &type metadata for String;
      *(void *)(v17 + 104) = v18;
      *(void *)(v17 + 72) = v19;
      *(void *)(v17 + 80) = v20;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      sub_1003D19F0();
      swift_errorRelease();
    }
  }
}

void sub_100018018(uint64_t a1)
{
  NSString v2 = +[MTDB sharedInstance];
  unsigned int v3 = [v2 importContext];

  +[MTPodcast predicateForPodcastsNeedingRetry:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001DC20;
  v7[3] = &unk_10054D988;
  id v8 = v3;
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = v4;
  id v5 = v9;
  id v6 = v3;
  [v6 performBlock:v7];
}

uint64_t LibraryDataProvider.fetchStationsObserver(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for StationListOptions();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_100054B78(&qword_1005F7200);
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.libraryLoadingSignpost.getter();
  uint64_t v7 = Promise.init(signpost:log:metadata:logResult:)();
  id v8 = [*(id *)(v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) privateQueueContext];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(void *)(v10 + ((v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v7;
  aBlock[4] = sub_10005C2E4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  aBlock[3] = &unk_100556B68;
  id v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v8 performBlock:v11];
  _Block_release(v11);

  return v7;
}

void sub_100018440(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = [*(id *)(a1 + 32) URLForKey:kMTSyncPutAll];
  uint64_t v9 = *(void *)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100011804;
  v14[3] = &unk_100551500;
  id v15 = v7;
  int8x16_t v13 = *(int8x16_t *)(a1 + 40);
  id v10 = (id)v13.i64[0];
  int8x16_t v16 = vextq_s8(v13, v13, 8uLL);
  id v17 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 asyncValueOnQueue:v9 withCompletion:v14];
}

void sub_100018558(unint64_t a1, char a2, char *a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, _UNKNOWN **), uint64_t a9)
{
  if (a2)
  {
    uint64_t v15 = __chkstk_darwin(a1);
    __chkstk_darwin(v15);
    id v17 = v16 + 4;
    os_unfair_lock_lock(v16 + 4);
    sub_10005DEEC(aBlock);
    os_unfair_lock_unlock(v17);
    unint64_t v18 = (void *)aBlock[0];
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = a4;
    v19[3] = a5;
    v19[4] = a1;
    v19[5] = a3;
    v19[6] = a6;
    v19[7] = a7;
    v19[8] = a8;
    v19[9] = a9;
    aBlock[4] = sub_10005CA34;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000138C8;
    aBlock[3] = &unk_100568A30;
    uint64_t v20 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    id v21 = a3;
    sub_10004ACDC(a6);
    swift_retain();
    swift_release();
    [v18 getAllTasksWithCompletionHandler:v20];
    _Block_release(v20);
  }
  else
  {
    sub_100032BE8(a1);
    a4();
    swift_bridgeObjectRelease();
    id v22 = (uint64_t *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler];
    uint64_t v23 = *(void *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler];
    *id v22 = a6;
    v22[1] = a7;
    sub_10004ACDC(a6);
    sub_10004ACDC(a6);
    sub_1000536BC(v23);
    uint64_t v24 = *(void *)&a3[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v26 = *v22;
    uint64_t v27 = v22[1];
    uint64_t v28 = *(void *)(v24 + 8);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 16);
    sub_10004ACDC(*v22);
    v29(v26, v27, ObjectType, v28);
    sub_1000536BC(a6);
    a8(a3, &off_1005688F0);
  }
}

uint64_t sub_100018818(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100018970(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(void *)(v3 + 16) = a1;
  sub_100054B78((uint64_t *)&unk_1005FF700);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  *(_OWORD *)(v3 + 24) = v13;
  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  *(void *)(v3 + 40) = v13;
  *(void *)(v3 + 48) = a2;
  *(void *)(v3 + 56) = a3;
  sub_100054B78(&qword_1005FA1F8);
  swift_allocObject();
  id v7 = a2;
  id v8 = a3;
  *(void *)(v3 + 88) = RepublishingValueSubject.init(_:)();
  uint64_t v9 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v8) + 0x208);
  id v10 = v8;
  uint64_t v11 = swift_retain();
  v9(v11, &off_100558BB8);

  return v4;
}

uint64_t LibraryDataProvider.showsPaginatedPublisher(listType:sortBy:lockupStyle:pageSize:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a5;
  uint64_t v26 = a4;
  char v7 = a2 & 1;
  uint64_t v8 = type metadata accessor for ShowLockupStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100054B78(&qword_1005F71E8);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10005A078(a1, v7);
  uint64_t v27 = v17;
  uint64_t v28 = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25[4] = v19;
  void v25[5] = v18;
  v25[3] = sub_10001A940(a1, v7);
  v25[2] = ShowsSortType.sortDescriptors.getter(a3);
  id v20 = [*(id *)(v25[1] + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) privateQueueContext];
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
  unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v22 + v21, v11, v8);
  type metadata accessor for LibraryShowLockup();
  sub_10004D29C(0, (unint64_t *)&qword_1005F71F0);
  FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)();
  sub_100044200(&qword_1005F71F8, &qword_1005F71E8);
  uint64_t v23 = PaginatedPublisher.eraseToAnyPaginatedPublisher()();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v23;
}

id sub_100018DC4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  sub_10004D29C(0, a1);
  id result = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_100018E14(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) temporaryDirectory];
  uint64_t v3 = +[NSFileManager defaultManager];
  id v33 = 0;
  uint64_t v27 = (void *)v2;
  uint64_t v4 = [v3 contentsOfDirectoryAtPath:v2 error:&v33];
  id v5 = v33;

  if (v5)
  {
    id v6 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      char v7 = [v5 localizedDescription];
      *(_DWORD *)buf = 138412546;
      uint64_t v36 = v27;
      __int16 v37 = 2112;
      id v38 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to obtain list of files in directory:%@, error:%@", buf, 0x16u);
    }
  }
  uint64_t v26 = v5;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v29 objects:v34 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        if ([v13 containsString:@"_feed"])
        {
          uint64_t v14 = [*(id *)(a1 + 32) configuration];
          unsigned int v15 = [v14 keepsFeedFileInTempDirAfterDownload];

          if (!v15 || [*(id *)(a1 + 32) isFileExpired:v13 inDirectory:v27])
          {
            uint64_t v16 = [v27 stringByAppendingPathComponent:v13];
            uint64_t v17 = +[NSFileManager defaultManager];
            id v28 = 0;
            unsigned __int8 v18 = [v17 removeItemAtPath:v16 error:&v28];
            id v19 = v28;

            id v20 = _MTLogCategoryFeedUpdate();
            unint64_t v21 = v20;
            if (v18)
            {
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v36 = v16;
                uint64_t v22 = v21;
                os_log_type_t v23 = OS_LOG_TYPE_DEBUG;
                uint64_t v24 = "Temporary feed file has been removed:%@";
                uint32_t v25 = 12;
                goto LABEL_18;
              }
            }
            else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              uint64_t v36 = v16;
              __int16 v37 = 2112;
              id v38 = v19;
              uint64_t v22 = v21;
              os_log_type_t v23 = OS_LOG_TYPE_ERROR;
              uint64_t v24 = "Failed to remove temporary feed file at:%@, error:%@";
              uint32_t v25 = 22;
LABEL_18:
              _os_log_impl((void *)&_mh_execute_header, v22, v23, v24, buf, v25);
            }

            continue;
          }
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v29 objects:v34 count:16];
    }
    while (v10);
  }
}

void sub_10001933C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v16 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000194B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000194CC@<X0>(void (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  uint64_t v6 = static BaseObjectGraph.current.getter();
  a1(0);
  swift_allocObject();
  uint64_t result = a2(v6);
  *a3 = result;
  return result;
}

uint64_t sub_100019824@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RootFlowController();
  swift_allocObject();
  id v5 = a1;
  swift_retain();
  uint64_t v6 = RootFlowController.init(rootViewController:asPartOf:)();
  type metadata accessor for _DebugActionsProvider();
  uint64_t v7 = swift_allocObject();
  type metadata accessor for LibraryDataProvider(0);
  swift_retain();
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  *(void *)(v7 + 16) = v9;
  sub_10004D29C(0, (unint64_t *)&unk_1005FBA00);
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  *(void *)(v7 + 24) = v9;
  sub_10000A204((unint64_t *)&unk_1005F7EE0, (void (*)(uint64_t))type metadata accessor for _DebugActionsProvider);
  dispatch thunk of BaseFlowController.debugActionsProvider.setter();
  swift_release();
  swift_retain();
  uint64_t result = static RootFlowController.shared.setter();
  a2[3] = v4;
  a2[4] = (uint64_t)&protocol witness table for BaseFlowController;
  *a2 = v6;
  return result;
}

uint64_t sub_10001999C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v11 - 8);
  uint64_t v44 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v41 - v16;
  __chkstk_darwin(v15);
  id v19 = (char *)&v41 - v18;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v21 = Strong;
    if (a3)
    {
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      swift_errorRetain();
      static OS_os_log.feedUpdate.getter();
      swift_errorRetain();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint32_t v25 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 138412290;
        uint64_t v26 = _convertErrorToNSError(_:)();
        aBlock = (void **)v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint32_t v25 = v26;
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "[Foreground Sync] Failed to fetch feed update threshold from the bag with error: %@", v24, 0xCu);
        sub_100054B78((uint64_t *)&unk_1005F9F00);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v17, v44);
    }
    else if (a1 {
           && (aBlock = 0,
    }
               LOBYTE(v47) = 1,
               static Double._conditionallyBridgeFromObjectiveC(_:result:)(),
               (v47 & 1) == 0))
    {
      id v35 = aBlock;
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = v21;
      v50 = sub_10005C9DC;
      uint64_t v51 = v36;
      aBlock = _NSConcreteStackBlock;
      uint64_t v47 = 1107296256;
      v48 = sub_10003B424;
      v49 = &unk_1005648E0;
      __int16 v37 = _Block_copy(&aBlock);
      id v38 = v21;
      static DispatchQoS.unspecified.getter();
      id v45 = _swiftEmptyArrayStorage;
      sub_10004AE54((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100054B78((uint64_t *)&unk_1005FE4B0);
      sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v37);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v5);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v8);

      return swift_release();
    }
    else
    {
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      static OS_os_log.feedUpdate.getter();
      long long v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        id v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "[Foreground Sync] Unable to cast value for feed update threshold from the bag to a Double.", v33, 2u);
        swift_slowDealloc();
        uint64_t v34 = v21;
      }
      else
      {
        uint64_t v34 = v31;
        long long v31 = v21;
      }
      uint64_t v40 = v43;
      uint64_t v39 = v44;

      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v14, v39);
    }
  }
  else
  {
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    static OS_os_log.feedUpdate.getter();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      long long v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[Foreground Sync] Unable to unwrap self in ForegroundSyncUtil.", v29, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v44);
  }
}

void sub_10001A048()
{
  uint64_t v5 = sub_10003932C();
  id v0 = [self sharedApplication];
  id v1 = [v0 delegate];

  if (!v1) {
    goto LABEL_10;
  }
  if ([v1 respondsToSelector:"window"])
  {
    uint64_t v4 = (void **)[v1 window];
    swift_unknownObjectRelease();
    if (v4)
    {
      type metadata accessor for Window();
      uint64_t v2 = (void *)swift_dynamicCastClass();
      if (v2)
      {
        (*(void (**)(void **))((swift_isaMask & *v2) + 0xC0))(v5);

        uint64_t v3 = v4;
LABEL_11:

        return;
      }
    }
LABEL_10:
    uint64_t v3 = v5;
    goto LABEL_11;
  }

  swift_unknownObjectRelease();
}

uint64_t sub_10001A1A8()
{
  uint64_t v0 = sub_100054B78((uint64_t *)&unk_1006063D0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005FE9A0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of PlaybackController.$isPlaying.getter();
  sub_100044200(&qword_1005F9FE0, (uint64_t *)&unk_1006063D0);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100044200((unint64_t *)&unk_1005FE9F0, (uint64_t *)&unk_1005FE9A0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess();
  sub_100054B78((uint64_t *)&unk_1005F9ED0);
  sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

void *sub_10001A468(uint64_t a1)
{
  uint64_t v2 = v1;
  v2[3] = 0;
  swift_unknownObjectWeakInit();
  v2[17] = [self mapTableWithKeyOptions:5 valueOptions:0];
  v2[4] = a1;
  sub_100054B78((uint64_t *)&unk_1005F8B10);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v5, (uint64_t)(v2 + 5));
  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  v2[15] = *(void *)&v5[0];
  sub_100054B78((uint64_t *)&unk_1005F74E0);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v5, (uint64_t)(v2 + 10));
  v2[16] = [objc_allocWithZone((Class)PFCoreAnalyticsChannel) init];
  return v2;
}

uint64_t sub_10001A570(const char *a1, uint64_t a2, int a3)
{
  int v30 = a3;
  long long v31 = (char *)a1;
  uint64_t v3 = type metadata accessor for OSSignpostError();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  long long v29 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for OSSignposter();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSSignposter.bootstrap.getter();
  uint64_t v16 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v26 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v25 = v12;
  if ((v30 & 1) == 0)
  {
    if (!v31)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v31 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v31 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v31 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  long long v31 = &v32;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v19 = v27;
  uint64_t v18 = v28;
  if ((*(unsigned int (**)(char *, uint64_t))(v27 + 88))(v5, v28) == enum case for OSSignpostError.doubleEnd(_:))
  {
    id v20 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v18);
    id v20 = "";
  }
  unint64_t v21 = v29;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v29, v11, v6);
  uint64_t v22 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v22 = 0;
  os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, (os_signpost_type_t)v26, v23, v31, v20, v22, 2u);
  swift_slowDealloc();

  uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  v24(v11, v6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v25);
  return ((uint64_t (*)(char *, uint64_t))v24)(v21, v6);
}

id sub_10001A940(uint64_t a1, char a2)
{
  if (a2)
  {
    switch(a1)
    {
      case 1:
        uint64_t v5 = self;
        id v6 = [v5 predicateForNotSubscribedAndNotHiddenAndNotImplicitlyFollowed];
        id v7 = [v5 predicateForPodcastsWithLibraryEpisodes];
        id v8 = [v6 AND:v7];

        id result = v8;
        break;
      case 2:
        uint64_t v9 = self;
        id v10 = [v9 predicateForNotSubscribedAndNotHiddenAndNotImplicitlyFollowed];
        id v11 = [v9 predicateForPodcastsWithLibraryEpisodes];
        id v12 = [v10 AND:v11];

        id v13 = [v9 predicateForSubscribedAndNotHidden];
        id v14 = [v13 OR:v12];

        id result = v14;
        break;
      case 3:
        id v4 = [self predicateForPodcastsWithDownloadedEpisodes];
        goto LABEL_4;
      case 4:
        id v4 = [self predicateForPodcastsWithUnplayedDownloadedEpisodes];
        goto LABEL_4;
      case 5:
        id v4 = [self predicateForPodcastsWithBookmarkedEpisodes];
        goto LABEL_4;
      case 6:
        id v4 = [self predicateForPodcastsWithUnplayedBookmarkedEpisodes];
        goto LABEL_4;
      case 7:
        id v4 = [self predicateForRecentlyUnfollowed];
        goto LABEL_4;
      default:
        id v4 = [self predicateForSubscribedAndNotHidden];
        goto LABEL_4;
    }
  }
  else
  {
    id result = self;
    if (a1 < 0)
    {
      __break(1u);
    }
    else
    {
      id v4 = [result predicateForNotImplicitlyFollowedPodcastsWithChannelStoreId:a1];
LABEL_4:
      return v4;
    }
  }
  return result;
}

void sub_10001AD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001B060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B094()
{
  sub_100054B78(&qword_1005FB640);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10046D050;
  id v1 = [self sharedInstance];
  type metadata accessor for LibraryPodcastStateDataSource();
  swift_allocObject();
  *(void *)(v0 + 32) = LibraryPodcastStateDataSource.init(contextProvider:)();
  *(void *)(v0 + 40) = &protocol witness table for LibraryPodcastStateDataSource;
  sub_100004E64();
  id v2 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v3 = [v2 podcastStateDataSource];

  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = &protocol witness table for AddingPodcastStateDataSource;
  type metadata accessor for DefaultPodcastStateDataSource();
  swift_allocObject();
  uint64_t result = DefaultPodcastStateDataSource.init()();
  *(void *)(v0 + 64) = result;
  *(void *)(v0 + 72) = &protocol witness table for DefaultPodcastStateDataSource;
  qword_1005FB638 = v0;
  return result;
}

uint64_t sub_10001B3A4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001BDD4(uint64_t a1)
{
  id v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v5 = 134217984;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Initiated the update of %ld podcast feeds.", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001BE9C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100058408;
    v3[3] = &unk_1005510B8;
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
  }
}

uint64_t sub_10001BF34(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StationListOptions();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v17 = 0;
  id v7 = [a1 managedObjectContext];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = &v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10005C14C;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_10004A010;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  aBlock[3] = &unk_100567960;
  id v11 = _Block_copy(aBlock);
  id v12 = a1;
  swift_retain();
  swift_release();
  [v7 performBlockAndWait:v11];
  _Block_release(v11);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = v17;
    if (v17) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t v14 = _swiftEmptyArrayStorage;
    }

    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  return result;
}

id sub_10001C1A8()
{
  uint64_t v0 = self;
  sub_10004D29C(0, &qword_100609F38);
  [v0 registerManifestForRestoration:swift_getObjCClassFromMetadata()];
  sub_10004D29C(0, &qword_100609F40);
  [v0 registerManifestForRestoration:swift_getObjCClassFromMetadata()];
  sub_10004D29C(0, &qword_100609F48);
  [v0 registerManifestForRestoration:swift_getObjCClassFromMetadata()];
  sub_10004D29C(0, &qword_100609F50);
  [v0 registerManifestForRestoration:swift_getObjCClassFromMetadata()];
  type metadata accessor for EpisodeListManifest();
  [v0 registerManifestForRestoration:swift_getObjCClassFromMetadata()];
  type metadata accessor for NetworkMediaManifest();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();

  return [v0 registerManifestForRestoration:ObjCClassFromMetadata];
}

uint64_t LibraryDataProvider.categoriesRecommendationsMetadataPublisher()()
{
  uint64_t v0 = sub_100054B78(&qword_1005F7068);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78(&qword_1005F7070);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100054B78(&qword_1005F7078);
  uint64_t v18 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100054B78(&qword_1005F7080);
  uint64_t v19 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = InterestObserverProvider.favoritedInterestsCategoriesPublisher.getter();
  uint64_t v20 = InterestObserverProvider.dislikedInterestsCategoriesPublisher.getter();
  sub_100054B78(&qword_1005F7088);
  sub_100044200(&qword_1005F7090, &qword_1005F7088);
  Publishers.CombineLatest.init(_:_:)();
  type metadata accessor for RecommendationsMetadata.Categories();
  sub_100044200(&qword_1005F7098, &qword_1005F7068);
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100044200(&qword_1005F70A0, &qword_1005F7070);
  sub_100042FDC(&qword_1005F70A8, (void (*)(uint64_t))&type metadata accessor for RecommendationsMetadata.Categories);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100044200(&qword_1005F70B0, &qword_1005F7078);
  uint64_t v12 = v16;
  Publisher.first()();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v12);
  sub_100044200(&qword_1005F70B8, &qword_1005F7080);
  uint64_t v13 = v17;
  uint64_t v14 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v13);
  return v14;
}

id sub_10001C73C(void *a1)
{
  uint64_t v18 = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_expectedEpisodeStates] = &_swiftEmptyDictionarySingleton;
  uint64_t v8 = &v1[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_refreshControllerStates];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v17 = OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_accessQueue;
  unint64_t v16 = sub_1000566BC();
  sub_100054B78(&qword_1005FCE48);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10046D010;
  uint64_t v10 = v1;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v20 = v9;
  sub_10001CB64((unint64_t *)&qword_1005F5BE0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100059F08();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  *(void *)&v1[v17] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v11 = OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadManagerObserver;
  *(void *)&v10[v11] = [objc_allocWithZone((Class)sub_100054B78(&qword_1006003B8)) init];
  uint64_t v12 = v18;
  *(void *)&v10[OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_downloadsNotifier] = v18;
  id v13 = v12;

  uint64_t v14 = (objc_class *)type metadata accessor for DownloadingEpisodeStateDataSource();
  v19.receiver = v10;
  v19.super_class = v14;
  return [super init];
}

unint64_t sub_10001CB24()
{
  unint64_t result = qword_100607F40;
  if (!qword_100607F40)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100607F40);
  }
  return result;
}

uint64_t sub_10001CB64(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001CBAC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a3 & 1;
  uint64_t v6 = type metadata accessor for DownloadingEpisodeStateDataSource();
  uint64_t v8 = sub_10001CB64(&qword_100600398, v7, (void (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource);

  return SynchronizedEpisodeStateDataSource.state(for:)(a1, a2, v5, v6, v8);
}

uint64_t type metadata accessor for DownloadingEpisodeStateDataSource()
{
  return self;
}

void sub_10001CC70(uint64_t a1)
{
  uint64_t v2 = kMTPodcastEntityName;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = +[NSSortDescriptor sortDescriptorWithKey:kPodcastUpdatedDate ascending:1];
  uint64_t v24 = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:&v24 count:1];
  uint64_t v7 = kPodcastUuid;
  uint64_t v23 = kPodcastUuid;
  uint64_t v8 = +[NSArray arrayWithObjects:&v23 count:1];
  uint64_t v9 = [v3 objectDictionariesInEntity:v2 predicate:v4 sortDescriptors:v6 propertiesToFetch:v8 includeObjectId:0];

  uint64_t v10 = [v9 valueForKey:v7];
  uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  id v13 = [*(id *)(a1 + 48) workQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100007790;
  block[3] = &unk_100551E38;
  uint64_t v14 = *(void *)(a1 + 48);
  char v21 = *(unsigned char *)(a1 + 80);
  __int16 v22 = *(_WORD *)(a1 + 81);
  uint64_t v15 = *(void *)(a1 + 72);
  void block[4] = v14;
  uint64_t v20 = v15;
  long long v17 = *(_OWORD *)(a1 + 56);
  id v16 = (id)v17;
  long long v19 = v17;
  dispatch_async(v13, block);
}

void sub_10001CFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  *((void *)v5 + 2) = v2;
  *((void *)v5 + 3) = a1;
  *((void *)v5 + 4) = a2;
  uint64_t v6 = (objc_class *)sub_100054B78((uint64_t *)&unk_1005FF010);
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[*(void *)((swift_isaMask & *(void *)v7) + 0x180)];
  *(void *)uint64_t v8 = 0;
  v8[8] = 2;
  uint64_t v9 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v7[*(void *)((swift_isaMask & *(void *)v7) + 0x188)];
  *uint64_t v9 = sub_10005BB64;
  v9[1] = v5;
  v18.receiver = v7;
  v18.super_class = v6;
  swift_retain();
  swift_retain();
  uint64_t v10 = (char *)[super init];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = (uint64_t (**)(uint64_t))&v10[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  uint64_t v13 = *(void *)&v10[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  *uint64_t v12 = sub_1002AE41C;
  v12[1] = (uint64_t (*)(uint64_t))v11;
  swift_retain();
  sub_1000536BC(v13);
  id v14 = sub_100010AA0();
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10046D060;
  *(void *)(v15 + 32) = v10;
  specialized Array._endMutation()();
  sub_10004D29C(0, (unint64_t *)&unk_1005FF020);
  id v16 = v10;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v14 addOperations:isa waitUntilFinished:0];
}

void *sub_10001D1CC(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_10005986C(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    unint64_t v12 = v1 & 0xC000000000000001;
    unint64_t v5 = v1;
    while (v2 != v4)
    {
      if (v12) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v6 = LibraryEpisodeLockup.uuid.getter();
      uint64_t v8 = v7;
      swift_release();
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_10005986C(v9 > 1, v10 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      unint64_t v1 = v5;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_10001D4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_sync_exit(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10001D500()
{
  unint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_appHasBeenInBackground] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_subscriptions] = _swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_commandController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_widgetManager] = 0;
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_nowPlayingBootstrap] = 0;
  uint64_t v3 = OBJC_IVAR____TtC8Podcasts11AppDelegate_eventWatchdoge;
  type metadata accessor for AppEnterExitEventWatchdoge();
  uint64_t v4 = swift_allocObject();
  *(_WORD *)(v4 + 16) = 0;
  *(void *)&v1[v3] = v4;
  unint64_t v5 = &v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_urlActionRunner];
  *unint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = &v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_pptViewHierarchyProxy];
  uint64_t v7 = type metadata accessor for PPTViewControllerProxy();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = &v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_flowController];
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((void *)v8 + 4) = 0;
  unint64_t v9 = v1;
  *(void *)&v9[OBJC_IVAR____TtC8Podcasts11AppDelegate_objectGraph] = static Dependencies.allDependencies()();
  swift_retain();

  v19.receiver = v9;
  v19.super_class = ObjectType;
  id v10 = [super init];
  uint64_t v11 = self;
  id v12 = v10;
  id v13 = [v11 currentDevice];
  id v14 = [v13 userInterfaceIdiom];

  if (v14 == (id)1)
  {
    type metadata accessor for ClassKitManager();
    BaseObjectGraph.inject<A>(_:)();
    id v15 = [self shared];
    [v15 setDelegate:*(void *)&v18[OBJC_IVAR____TtC8Podcasts15ClassKitManager_dataStoreDelegate]];

    sub_10038B788();
  }
  type metadata accessor for ApplicationStateMonitor();
  id v16 = (void *)static ApplicationStateMonitor.shared.getter();
  ApplicationStateMonitor.beginListening()();
  swift_release();

  return v12;
}

uint64_t sub_10001D734()
{
  uint64_t v0 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v1);
  uint64_t v6 = (char *)&v22 - v5;
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - v7;
  type metadata accessor for CoreDataDownloadJobStorage();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v10 URLForResource:v11 withExtension:v12];

  if (v13)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 0, 1, v14);
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
  }
  sub_100053820((uint64_t)v6, (uint64_t)v8, (uint64_t *)&unk_1005F7750);
  sub_100054BBC((uint64_t)v8, (uint64_t)v3, (uint64_t *)&unk_1005F7750);
  type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v3, 1, v14);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    id v17 = objc_allocWithZone((Class)NSManagedObjectModel);
    URL._bridgeToObjectiveC()(v18);
    uint64_t v20 = v19;
    id v21 = [v17 initWithContentsOfURL:v19];

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v3, v14);
    if (v21)
    {
      sub_100054B1C((uint64_t)v8, (uint64_t *)&unk_1005F7750);
      return (uint64_t)v21;
    }
  }
  __break(1u);
  return result;
}

void sub_10001DA08(uint64_t a1)
{
  uint64_t v2 = +[UIApplication sharedApplication];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100061254;
  v15[3] = &unk_10054D570;
  v15[4] = *(void *)(a1 + 32);
  [*(id *)(a1 + 32) setFairPlayMigrationBackgroundTask:[v2 beginBackgroundTaskWithName:@"com.apple.podcasts.FairPlayMigration" expirationHandler:v15]];

  uint64_t v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  uint64_t v4 = +[PFFairPlayRolloutController sharedInstance];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100058C70;
  void v13[3] = &unk_10054D710;
  uint64_t v5 = v3;
  uint64_t v14 = v5;
  [v4 didRollbackStatusChangeWithCompletion:v13];

  dispatch_group_enter(v5);
  uint64_t v6 = +[PFFairPlayMigrationController sharedInstance];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100058D3C;
  v11[3] = &unk_10054D570;
  NSString v12 = v5;
  uint64_t v7 = v5;
  [v6 migrateIfNecessaryWithCompletion:v11];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000052BC;
  block[3] = &unk_10054D738;
  uint64_t v8 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v10 = v8;
  dispatch_group_notify(v7, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10001DC20(uint64_t a1)
{
  uint64_t v2 = kMTPodcastEntityName;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = +[NSSortDescriptor sortDescriptorWithKey:kPodcastUpdatedDate ascending:1];
  uint64_t v20 = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:&v20 count:1];
  uint64_t v7 = kPodcastUuid;
  uint64_t v19 = kPodcastUuid;
  uint64_t v8 = +[NSArray arrayWithObjects:&v19 count:1];
  unint64_t v9 = [v3 objectDictionariesInEntity:v2 predicate:v4 sortDescriptors:v6 propertiesToFetch:v8 includeObjectId:0];

  id v10 = [v9 valueForKey:v7];
  NSString v11 = [*(id *)(a1 + 48) workQueue];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10000A344;
  v15[3] = &unk_10054FFB0;
  uint64_t v12 = *(void *)(a1 + 48);
  id v13 = *(void **)(a1 + 56);
  id v16 = v10;
  uint64_t v17 = v12;
  id v18 = v13;
  id v14 = v10;
  dispatch_async(v11, v15);
}

uint64_t sub_10001E190()
{
  return Sequence.publisher.getter();
}

void sub_10001E214()
{
  uint64_t v0 = sub_100054B78(&qword_1005FA180);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78(&qword_1005FA188);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RepublishingValueSubject.value.getter();
  id v8 = v14;

  if (!v8 && os_feature_enabled_red_sun())
  {
    if ((static Podcasts.isUIPSidebarEnabled.getter() & 1) == 0
      && (dispatch thunk of RootSplitViewController.interfaceMode.getter() & 1) != 0)
    {
      UISplitViewController.mcui.getter();
      sub_100012998();
      type metadata accessor for NowPlayingMediaPlayerController();
      sub_10001E544(&qword_1005FA170, 255, (void (*)(uint64_t))&type metadata accessor for NowPlayingMediaPlayerController);
      id v10 = (void *)MCUINamespace<A>.installNowPlayingView<A>(controller:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      id v14 = v10;
      RepublishingValueSubject.send(_:)();
    }
    else
    {
      UITabBarController.mcui.getter();
      sub_100012998();
      type metadata accessor for NowPlayingMediaPlayerController();
      sub_10001E544(&qword_1005FA170, 255, (void (*)(uint64_t))&type metadata accessor for NowPlayingMediaPlayerController);
      unint64_t v9 = (void *)MCUINamespace<A>.installNowPlayingView<A>(controller:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      id v14 = v9;
      RepublishingValueSubject.send(_:)();
    }
    RepublishingValueSubject.value.getter();
    id v12 = v14;
    if (v14)
    {
      sub_10001E544(&qword_1005FA190, v11, (void (*)(uint64_t))type metadata accessor for NowPlayingBootstrap);
      swift_unknownObjectRetain();
      dispatch thunk of NowPlayingViewController.delegate.setter();
    }
    sub_10002C5E0();
  }
}

uint64_t sub_10001E544(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001E58C()
{
  uint64_t v0 = type metadata accessor for URL();
  __chkstk_darwin(v0 - 8);
  uint64_t v20 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100054B78(&qword_1005FC218);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v18 = v2;
  uint64_t v19 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_1005FC220);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AssetCaches();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054B78(&qword_1005FC228);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10046E5C0;
  *(void *)(v14 + 56) = type metadata accessor for AbandonedStreamIssueIdentifier();
  *(void *)(v14 + 64) = &protocol witness table for AbandonedStreamIssueIdentifier;
  sub_10004A244((uint64_t *)(v14 + 32));
  AbandonedStreamIssueIdentifier.init()();
  *(void *)(v14 + 96) = type metadata accessor for AVAssetsInLibraryIssueIdentifier();
  *(void *)(v14 + 104) = &protocol witness table for AVAssetsInLibraryIssueIdentifier;
  sub_10004A244((uint64_t *)(v14 + 72));
  AVAssetsInLibraryIssueIdentifier.init()();
  [objc_allocWithZone((Class)PFCoreAnalyticsChannel) init];
  *(void *)(v14 + 136) = type metadata accessor for CoreDataEpisodeAssetIssueIdentifier();
  *(void *)(v14 + 144) = &protocol witness table for CoreDataEpisodeAssetIssueIdentifier;
  sub_10004A244((uint64_t *)(v14 + 112));
  CoreDataEpisodeAssetIssueIdentifier.init(analyticsChannel:)();
  static AssetCaches.shared.getter();
  AssetCaches.artwork.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  CacheDomain.disk.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v15 = v18;
  CacheDomain.DiskCaches.directory.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v15);
  *(void *)(v14 + 176) = type metadata accessor for UnownedImageIssueIdentifier();
  *(void *)(v14 + 184) = sub_100007BA0();
  sub_10004A244((uint64_t *)(v14 + 152));
  uint64_t result = UnownedImageIssueIdentifier.init(directory:)();
  qword_1005FC200 = v14;
  return result;
}

uint64_t sub_10001E8FC@<X0>(uint64_t *a1@<X8>)
{
  int v26 = a1;
  uint64_t v1 = type metadata accessor for PageIntentInstrumentation();
  uint64_t v24 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  __chkstk_darwin(v1);
  uint64_t v23 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for IntentDispatchTimeout();
  uint64_t v21 = *(void *)(v3 - 8);
  uint64_t v22 = v3;
  __chkstk_darwin(v3);
  uint64_t v20 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NativeIntentDispatcher();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v20 - v10;
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  uint64_t v12 = type metadata accessor for LazyJSStack();
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  uint64_t v13 = v28[0];
  sub_100036C00((uint64_t)v9);
  uint64_t v29 = v12;
  int v30 = (void *)sub_1002B4798(&qword_1005FF928, (void (*)(uint64_t))&type metadata accessor for LazyJSStack);
  v28[0] = v13;
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v14(v11, v9, v5);
  sub_10005A420((uint64_t)v28, (uint64_t)v27);
  swift_retain();
  NativeIntentDispatcher.next.setter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  sub_100054B1C((uint64_t)v28, &qword_1005FF930);
  static BaseObjectGraph.current.getter();
  uint64_t v29 = v5;
  int v30 = &protocol witness table for NativeIntentDispatcher;
  id v16 = sub_10004A244(v28);
  v14((char *)v16, v11, v5);
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v20, enum case for IntentDispatchTimeout.none(_:), v22);
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v23, enum case for PageIntentInstrumentation.notInstrumented(_:), v25);
  uint64_t v17 = type metadata accessor for PodcastsIntentDispatcher();
  uint64_t v18 = v26;
  v26[3] = v17;
  v18[4] = sub_1002B4798(&qword_1005FF938, (void (*)(uint64_t))&type metadata accessor for PodcastsIntentDispatcher);
  sub_10004A244(v18);
  PodcastsIntentDispatcher.init(asPartOf:intentDispatcher:timeout:instrumentation:)();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v15)(v11, v5);
}

void sub_10001ECC4(void *a1, int a2)
{
  id v8 = a1;
  uint64_t v3 = (void *)CFPreferencesCopyAppValue(@"AppCanShowSiriSuggestionsBlacklist", @"com.apple.suggestions");
  uint64_t v4 = v3;
  if (v3) {
    id v5 = [v3 mutableCopy];
  }
  else {
    id v5 = (id)objc_opt_new();
  }
  uint64_t v6 = v5;
  if (a2)
  {
    [v5 removeObject:v8];
  }
  else if (([v5 containsObject:v8] & 1) == 0)
  {
    [v6 addObject:v8];
  }
  CFPreferencesSetAppValue(@"AppCanShowSiriSuggestionsBlacklist", v6, @"com.apple.suggestions");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.suggestions.settingsChanged", 0, 0, 1u);
}

uint64_t LibraryDataProvider.channelsRecommendationsMetadataPublisher()()
{
  uint64_t v16 = sub_100054B78(&qword_1005F70C0);
  uint64_t v1 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100054B78(&qword_1005F70C8);
  uint64_t v19 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100054B78(&qword_1005F70D0);
  uint64_t v21 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100054B78(&qword_1005F70D8);
  uint64_t v22 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100041A98((void *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_libraryObserverProvider), *(void *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_libraryObserverProvider + 24));
  uint64_t v25 = dispatch thunk of LibraryObserverProviderProtocol.librarySubscribedChannelsPublisher.getter();
  uint64_t v24 = InterestObserverProvider.favoritedInterestsChannelsPublisher.getter();
  uint64_t v23 = InterestObserverProvider.dislikedInterestsChannelsPublisher.getter();
  sub_100054B78(&qword_1005F70E0);
  sub_100054B78(&qword_1005F70E8);
  sub_100044200(&qword_1005F70F0, &qword_1005F70E0);
  sub_100044200(&qword_1005F70F8, &qword_1005F70E8);
  Publishers.CombineLatest3.init(_:_:_:)();
  type metadata accessor for RecommendationsMetadata.Channels();
  sub_100044200(&qword_1005F7100, &qword_1005F70C0);
  uint64_t v10 = v16;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v10);
  sub_100044200(&qword_1005F7108, &qword_1005F70C8);
  sub_100042FDC(&qword_1005F7110, (void (*)(uint64_t))&type metadata accessor for RecommendationsMetadata.Channels);
  uint64_t v11 = v17;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v11);
  sub_100044200(&qword_1005F7118, &qword_1005F70D0);
  uint64_t v12 = v18;
  Publisher.first()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v12);
  sub_100044200((unint64_t *)&unk_1005F7120, &qword_1005F70D8);
  uint64_t v13 = v20;
  uint64_t v14 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v13);
  return v14;
}

uint64_t start(int a1, char **a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class();
  setenv("JSC_numberOfGCMarkers", "3", 1);
  setenv("JSC_numberOfWorklistThreads", "2", 1);
  if (MKBDeviceUnlockedSinceBoot() != 1)
  {
    NSLog(@"Podcasts launched before first unlock since boot.");
    exit(0);
  }
  id v6 = [objc_alloc((Class)IMMetricsController) initWithTopic:@"xp_its_podcasts_main"];
  [v6 setShouldSuppressUserInfo:1];
  id v7 = [objc_alloc((Class)IMMetricsController) initWithTopic:@"xp_dzc_main"];
  [v7 setShouldSuppressUserInfo:1];
  [v7 setShouldIgnoreDNU:1];
  +[IMMetrics addMetricsController:v7];
  id v8 = [objc_alloc((Class)IMMetricsController) initWithTopic:@"xp_amp_podcasts_main"];
  [v8 setShouldSuppressUserInfo:1];
  [v8 setShouldIgnoreDNU:1];
  +[IMMetrics addMetricsController:v8];
  id v9 = [objc_alloc((Class)IMMetricsController) initWithTopic:@"xp_amp_podcasts_paf"];
  [v9 setShouldSuppressUserInfo:1];
  [v9 setShouldIgnoreDNU:1];
  +[IMMetrics addMetricsController:v9];
  +[IMMetrics setDefaultMetricsController:v6];
  +[IMMetrics enable];
  +[IMMetrics startTimer:@"app_launch"];
  +[MTLibraryMigrationUtil migrateDatabasePropertiesToSharedContainerIfNeeded];
  +[MTLibraryMigrator migrateDatabaseToSharedContainerIfNeeded];
  if (+[MTLibraryMigrator needsMigration]) {
    uint64_t v4 = (objc_class *)objc_opt_class();
  }

  uint64_t v10 = (objc_class *)objc_opt_class();
  NSStringFromClass(v10);
  uint64_t v11 = (NSString *)objc_claimAutoreleasedReturnValue();
  NSStringFromClass(v4);
  uint64_t v12 = (NSString *)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = UIApplicationMain(a1, a2, v11, v12);

  return v13;
}

unint64_t sub_10001F4D8(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v11 = 0;
  id v2 = [a1 managedObjectContext];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = &v11;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_10005C47C;
  *(void *)(v4 + 24) = v3;
  aBlock[4] = sub_10004A010;
  aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  aBlock[3] = &unk_1005577A8;
  id v5 = _Block_copy(aBlock);
  id v6 = v1;
  swift_retain();
  swift_release();
  [v2 performBlockAndWait:v5];
  _Block_release(v5);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v1)
  {
    __break(1u);
LABEL_9:
    type metadata accessor for LegacyLockup();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = _bridgeCocoaArray<A>(_:)();

    swift_bridgeObjectRelease_n();
    unint64_t v7 = v9;
    goto LABEL_7;
  }
  if (v11) {
    unint64_t v7 = (unint64_t)v11;
  }
  else {
    unint64_t v7 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v7 >> 62) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  type metadata accessor for LegacyLockup();
  swift_bridgeObjectRelease();

LABEL_7:
  swift_release();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_10001F6FC(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_3;
  }
  uint64_t v13 = Strong;
  uint64_t v14 = *(NSObject **)(Strong + 48);
  unint64_t v26 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v13;
  *(unsigned char *)(v16 + 24) = 1;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10005DB14;
  *(void *)(v17 + 24) = v16;
  char v32 = sub_10004A010;
  uint64_t v33 = v17;
  aBlock = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  int v30 = sub_100018818;
  long long v31 = &unk_1005632C0;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v18);
  _Block_release(v18);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  a3 = v15;
  a2 = v26;
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if (a4)
    {
      sub_100058170(a1, a2, a3);
      static os_log_type_t.error.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      uint64_t v21 = (void *)static OS_os_log.restore.getter();
      sub_100054B78(&qword_1005F7720);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_10046D010;
      aBlock = (void **)a1;
      uint64_t v29 = a2;
      LOBYTE(v30) = a3;
      sub_10005C4DC();
      uint64_t v23 = Error.localizedDescription.getter();
      uint64_t v25 = v24;
      *(void *)(v22 + 56) = &type metadata for String;
      *(void *)(v22 + 64) = sub_10004DA4C();
      *(void *)(v22 + 32) = v23;
      *(void *)(v22 + 40) = v25;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      a6(0);
      return sub_10005953C(a1, a2, a3, 1);
    }
    else
    {
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (result)
      {
        sub_10034B2FC(a1, a2);
        sub_10034A3A4(a1, a2, a3, a6, a7);
        sub_10005953C(a1, a2, a3, 0);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_10001FA3C()
{
  uint64_t v1 = v0;
  type metadata accessor for StoreReviewPromptController();
  static StoreReviewPromptController.shared.getter();
  dispatch thunk of StoreReviewPromptController.prepareToTrackBecomeActive()();
  swift_release();
  id v2 = [self sharedCoordinator];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  v8[4] = sub_10034A2C8;
  v8[5] = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10003B424;
  v8[3] = &unk_100563080;
  uint64_t v4 = _Block_copy(v8);
  id v5 = v1;
  swift_release();
  [v2 registerAppBootstrapHandler:v4];
  _Block_release(v4);

  id v6 = [self defaultCenter];
  [v6 addObserver:v5 selector:"activeSystemRouteDidChangeWithNotification:" name:MPAVRoutingControllerActiveSystemRouteDidChangeNotification object:0];

  static MetricsVisualizer.setupMetricsEventVisualizer()();
  return 1;
}

uint64_t sub_10001FD88()
{
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100470E80;
  sub_100054B78(&qword_1005FFC30);
  swift_allocObject();
  swift_retain();
  OnDemandLibraryEpisodeStateDataSource.init(episodeStateRepository:)();
  sub_100044200(&qword_1005FFC38, &qword_1005FFC30);
  uint64_t v1 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
  swift_release();
  *(void *)(v0 + 32) = v1;
  sub_100054B78(&qword_1005FFC40);
  swift_allocObject();
  DefaultEpisodeStateDataSource.init()();
  sub_100044200(&qword_1005FFC48, &qword_1005FFC40);
  uint64_t v2 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
  swift_release();
  *(void *)(v0 + 40) = v2;
  specialized Array._endMutation()();
  defaultEpisodeBookmarkTransitionRules.getter();
  sub_100054B78(&qword_1005F74B8);
  swift_allocObject();
  return EpisodeStateController.init(dataSources:transitionRules:)();
}

void sub_10001FF20(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting up MTSyncController. Will kick off initial syncs.", (uint8_t *)&v13, 2u);
  }

  [*(id *)(a1 + 32) _setupUPP];
  uint64_t v3 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v13 = 138412546;
    uint64_t v14 = v4;
    __int16 v15 = 2112;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "MTSyncController GET URL: %@, PUT URL: %@", (uint8_t *)&v13, 0x16u);
  }

  id v6 = [*(id *)(a1 + 32) cloudSyncController];

  if (v6)
  {
    unint64_t v7 = [*(id *)(a1 + 32) cloudSyncController];
    [v7 setDelegate:0];
  }
  id v8 = [MZKeyValueStoreController alloc];
  uint64_t v9 = [(MZKeyValueStoreController *)v8 initWithDomain:kMTPodcastsDomain baseURLForGETAll:*(void *)(a1 + 40) baseURLForPUTAll:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) setCloudSyncController:v9];

  uint64_t v10 = [*(id *)(a1 + 32) cloudSyncController];
  [v10 setDelegate:*(void *)(a1 + 32)];

  uint64_t v11 = [*(id *)(a1 + 32) cloudSyncController];
  [v11 reset];

  [*(id *)(a1 + 32) setIsRunning:1];
  [*(id *)(a1 + 32) syncEverything];
  uint64_t v12 = +[NSNotificationCenter defaultCenter];
  [v12 postNotificationName:@"MTSyncControllerDidStartRunningNotification" object:0];
}

Swift::Void __swiftcall ForegroundSyncUtil.updatePlaybackSettingIfNeeded()()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v66 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  unint64_t v7 = (char *)&v63 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v63 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  int v13 = (char *)&v63 - v12;
  __chkstk_darwin(v11);
  v65 = (char *)&v63 - v14;
  sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
  id v15 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  uint64_t v16 = [v15 activeAccount];

  uint64_t v17 = *(void **)(v0 + OBJC_IVAR___MTForegroundSyncUtil_defaults);
  static String.Account.lastSignedInDSIDKey.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v19 = v17;
  id v20 = [v17 stringForKey:v18];

  if (!v20)
  {
    uint64_t v21 = 0;
    uint64_t v23 = 0;
    if (!v16) {
      goto LABEL_13;
    }
LABEL_5:
    id v24 = [v16 ams_DSID];
    if (!v24) {
      goto LABEL_13;
    }
    uint64_t v25 = v24;
    uint64_t v64 = v1;
    id v26 = [v24 stringValue];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    type metadata accessor for AnalyticsIdentifierManager();
    uint64_t v27 = static AnalyticsIdentifierManager.hashDSIDWithSalt(_:)();
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (!v29)
    {
      swift_bridgeObjectRelease();
      static Logger.playback.getter();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "[Foreground Sync] Not setting Continuous Playback. Failed to hash DSID.", v43, 2u);
        swift_slowDealloc();
        uint64_t v44 = v16;
      }
      else
      {
        uint64_t v44 = v41;
        uint64_t v41 = v16;
      }
      uint64_t v48 = v64;
      uint64_t v49 = v66;

      (*(void (**)(char *, uint64_t))(v49 + 8))(v7, v48);
      return;
    }
    if (v23 && (v21 == v27 && v23 == v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      static Logger.playback.getter();
      int v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        char v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[Foreground Sync] User hasn't changed. Not updating Continuous Playback setting.", v32, 2u);
        swift_slowDealloc();
        uint64_t v33 = v16;
      }
      else
      {
        uint64_t v33 = v30;
        int v30 = v16;
      }
      uint64_t v50 = v64;
      uint64_t v51 = v66;

      (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v50);
      return;
    }
    id v45 = v16;
    id v46 = [v16 ams_accountFlagValueForAccountFlag:AMSAccountFlagUnderThirteen];
    uint64_t v47 = v64;
    if (v46)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v67, 0, sizeof(v67));
    }
    id v52 = v19;
    id v53 = v65;
    sub_100004C04((uint64_t)v67, (uint64_t)v68);
    uint64_t v63 = v27;
    if (v68[3])
    {
      if swift_dynamicCast() && (v67[0])
      {
        swift_bridgeObjectRelease();
        int v54 = 1;
        goto LABEL_36;
      }
    }
    else
    {
      sub_100172424((uint64_t)v68);
    }
    if (!v23)
    {
      static Logger.playback.getter();
      v55 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v55, v59))
      {
        id v53 = v13;
        goto LABEL_43;
      }
      v60 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v60 = 67109120;
      LODWORD(v68[0]) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v55, v59, "[Foreground Sync] User has changed but doesn't need setting reset. U13=%{BOOL}d", v60, 8u);
      id v53 = v13;
LABEL_41:
      swift_slowDealloc();
      uint64_t v47 = v64;
LABEL_43:
      uint64_t v58 = v66;
      goto LABEL_44;
    }
    swift_bridgeObjectRelease();
    int v54 = 0;
LABEL_36:
    [v52 setBool:v54 ^ 1u forKey:kMTContinuousPlaybackEnabledKey v63];
    static Logger.playback.getter();
    v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v55, v56))
    {
      uint64_t v58 = v66;
      id v45 = v16;
LABEL_44:

      (*(void (**)(char *, uint64_t))(v58 + 8))(v53, v47);
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      static String.Account.lastSignedInDSIDKey.getter();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v52 setObject:v61 forKey:v62];

      return;
    }
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 67109376;
    LODWORD(v68[0]) = v54 ^ 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v57 + 8) = 1024;
    LODWORD(v68[0]) = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "[Foreground Sync] Setting Continuous Playback to %{BOOL}d for user U13=%{BOOL}d.", (uint8_t *)v57, 0xEu);
    id v45 = v16;
    goto LABEL_41;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  if (v16) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v34 = v66;
  if (v23)
  {
    v68[0] = v21;
    v68[1] = v23;
    sub_1001AB688();
    char v35 = Collection.isNotEmpty.getter();
    swift_bridgeObjectRelease();
    if (v35)
    {
      static String.Account.lastSignedInDSIDKey.getter();
      NSString v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 setURL:0 forKey:v36];
    }
  }
  static Logger.playback.getter();
  __int16 v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "[Foreground Sync] Not setting Continuous Playback. No current signed in user.", v39, 2u);
    swift_slowDealloc();
    uint64_t v40 = v16;
  }
  else
  {
    uint64_t v40 = v37;
    __int16 v37 = v16;
  }

  (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v1);
}

id sub_10002090C(uint64_t a1)
{
  uint64_t v3 = &v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((void *)v3 + 4) = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_actionRunner];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_overlayViewController] = 0;
  uint64_t v5 = OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_libraryStackCache;
  uint64_t v6 = v1;
  *(void *)&v1[v5] = sub_10005A1E8((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)&v6[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_objectGraph] = a1;
  type metadata accessor for PodcastsTabBarPresenter();
  swift_allocObject();
  swift_retain_n();
  *(void *)&v6[OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_presenter] = PodcastsTabBarPresenter.init(asPartOf:)();

  swift_retain();
  id v7 = (id)NowPlayingTabController.init(asPartOf:)();
  id result = [v7 view];
  if (result)
  {
    uint64_t v9 = result;
    type metadata accessor for Theme();
    uint64_t v10 = (void *)static Theme.backgroundColor.getter();
    [v9 setBackgroundColor:v10];

    sub_1000119D8(&qword_100606530, v11, (void (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController);
    id v12 = v7;
    swift_retain();
    PodcastsTabBarPresenter.view.setter();
    swift_release();

    swift_release();
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100020AB0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    uint64_t v2 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController;
    id v3 = [*(id *)(Strong + OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController) request];
    id v4 = [*(id *)&v1[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator] playbackPlayerPath];
    [v3 setPlayerPath:v4];

    [*(id *)&v1[v2] setNeedsReloadForSignificantRequestChange];
  }
}

void sub_100020B7C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.feedUpdate.getter();
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Foreground Sync] Initiating feed updates on app foreground.", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v7 = [self sharedInstance];
  id v8 = [v7 integerForKey:kForegroundFeedUpdateThreshold];

  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_10005C9E8;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100014BE0;
  aBlock[3] = &unk_100564890;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [v8 asyncValueWithCompletion:v10];
  _Block_release(v10);
}

uint64_t sub_100020F50()
{
  uint64_t v0 = type metadata accessor for StorageAnalyticsResponder();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v6[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  sub_100054B78((uint64_t *)&unk_1005FF710);
  BaseObjectGraph.inject<A>(_:)();
  sub_10004D2D8((uint64_t)v6);
  BaseObjectGraph.inject<A>(_:)();
  StorageAnalyticsResponder.beginObserving()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  type metadata accessor for LibraryActionController();
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
  BaseObjectGraph.inject<A>(_:)();

  type metadata accessor for RecommendationsMetadataProvider();
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  sub_10004D29C(0, (unint64_t *)&unk_1005FBA00);
  BaseObjectGraph.inject<A>(_:)();

  sub_100054B78(&qword_1005FF770);
  BaseObjectGraph.inject<A>(_:)();
  return swift_unknownObjectRelease();
}

uint64_t LibraryDataProvider.showsRecommendationsMetadataPublisher()()
{
  uint64_t v0 = sub_100054B78(&qword_1005F7148);
  uint64_t v24 = *(void *)(v0 - 8);
  uint64_t v25 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100054B78(&qword_1005F7150);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v26 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_1005F7158);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v27 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100054B78(&qword_1005F7160);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RecommendationsMetadataProvider();
  uint64_t result = static RecommendationsMetadataProvider.metadataListLimit.getter();
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    id v23 = sub_1000231AC();
    id v29 = v23;
    swift_retain();
    uint64_t v28 = InterestObserverProvider.dislikedInterestsShowsPublisher.getter();
    sub_100054B78(&qword_1005F7168);
    uint64_t v21 = v9;
    sub_100054B78(&qword_1005F7170);
    uint64_t v22 = v10;
    uint64_t v20 = v6;
    sub_100044200(&qword_1005F7178, &qword_1005F7168);
    sub_100044200(&qword_1005F7180, &qword_1005F7170);
    Publishers.CombineLatest.init(_:_:)();
    type metadata accessor for RecommendationsMetadata.Shows();
    sub_100044200(&qword_1005F7188, &qword_1005F7148);
    uint64_t v14 = v25;
    id v15 = v26;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v2, v14);
    sub_100044200(&qword_1005F7190, &qword_1005F7150);
    sub_100042FDC(&qword_1005F7198, (void (*)(uint64_t))&type metadata accessor for RecommendationsMetadata.Shows);
    uint64_t v16 = v27;
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
    sub_100044200(&qword_1005F71A0, &qword_1005F7158);
    uint64_t v17 = v20;
    Publisher.first()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v17);
    sub_100044200(&qword_1005F71A8, &qword_1005F7160);
    uint64_t v18 = v21;
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v18);
    return v19;
  }
  return result;
}

void sub_10002168C(id a1)
{
  if (a1) {
    id v3 = [a1 horizontalSizeClass];
  }
  else {
    id v3 = 0;
  }
  id v4 = [v1 traitCollection];
  id v5 = [v4 horizontalSizeClass];

  if (!a1 || v3 != v5)
  {
    uint64_t v6 = (uint64_t)v1 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController;
    swift_beginAccess();
    sub_100054BBC(v6, (uint64_t)v8, &qword_100604710);
    if (v9)
    {
      sub_100054B78(&qword_1005F7E80);
      type metadata accessor for ParentFlowController();
      if (swift_dynamicCast())
      {
        id v7 = [v1 traitCollection];
        UITraitCollection.interfaceMode.getter();

        ParentFlowController.interfaceMode.setter();
        swift_release();
      }
    }
    else
    {
      sub_100054B1C((uint64_t)v8, &qword_100604710);
    }
  }
}

uint64_t LibraryDataProvider.episodesRecommendationsMetadataPublisher()()
{
  uint64_t v11 = type metadata accessor for EpisodeListSettings();
  uint64_t v1 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = 1;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v17 = 0;
  char v18 = 9;
  EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)();
  id v4 = [*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) privateQueueContext];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = (void *)EpisodeListSettings.predicate.getter();
  EpisodeListSettings.sort.getter();
  EpisodeSortType.descriptors.getter();
  type metadata accessor for RecommendationsMetadataProvider();
  static RecommendationsMetadataProvider.metadataListLimit.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  uint64_t v6 = (void *)static OS_dispatch_queue.main.getter();
  type metadata accessor for RecommendationsMetadata.Episodes();
  sub_10004D29C(0, (unint64_t *)&qword_1005F7130);
  uint64_t v7 = NSManagedObjectContext.fetchListAndPublish<A, B>(entityName:predicate:sortDescriptors:limit:receiveOn:transform:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v12 = v7;
  sub_100054B78(&qword_1005F7138);
  sub_100044200(&qword_1005F7140, &qword_1005F7138);
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v11);
  return v8;
}

void sub_100021CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100021CD4(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = sub_10001A940(a1, v4);
  id v6 = objc_allocWithZone((Class)MTUuidQueryObserver);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithEntityName:v7 predicate:v5];

  if (v8)
  {
    *(void *)(v2 + 16) = v8;
    [v8 startObserving];
    id v9 = [*(id *)(v2 + 16) uuids];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = *(void *)(v11 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 24) = v12;
      uint64_t v13 = *(void **)(v2 + 16);
      uint64_t v14 = swift_allocObject();
      swift_weakInit();
      v18[4] = sub_1002E331C;
      v18[5] = v14;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 1107296256;
      void v18[2] = sub_1002DEF64;
      v18[3] = &unk_10055F3B0;
      long long v15 = _Block_copy(v18);
      id v16 = v13;
      swift_release();
      id v17 = [v16 addResultsChangedHandler:v15];
      _Block_release(v15);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100021EC8(void *a1)
{
  if (qword_1005F5A90 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_10061AB38;
  swift_bridgeObjectRetain();
  id v3 = [a1 activityType];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  LOBYTE(v3) = sub_1000124B0(v4, v6, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {

    return 0;
  }
  id v8 = [a1 activityType];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {

    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {

    return 1;
  }
  id v16 = [a1 activityType];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
  {
    uint64_t v7 = 2;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v21) {
      return 2;
    }
    else {
      return 3;
    }
  }
  return v7;
}

uint64_t sub_1000220D4(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a2;
  uint64_t v32 = a1;
  uint64_t v3 = sub_100054B78(&qword_1005FBF60);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_100603EC0);
  uint64_t v7 = *(void *)(v6 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for MetricsFieldsContext();
  uint64_t v10 = *(void *)(v35 - 8);
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  id v16 = (char *)&v31 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = type metadata accessor for MetricsData();
  uint64_t result = __chkstk_darwin(v19);
  id v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v2;
  if (*(unsigned char *)(v2 + 16) != 1 || *(unsigned char *)(v37 + 17) == 1)
  {
    uint64_t v31 = result;
    uint64_t v32 = v21;
    static AppEnterMetricsEvent.makeData(enterKind:)();
    MetricsFieldsContext.init()();
    type metadata accessor for PageContextTracker();
    v38[0] = static PageContextTracker.shared.getter();
    static MetricsFieldsContext.Property<A>.pageContextTracker.getter();
    MetricsFieldsContext.addingValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v25 = v13;
    uint64_t v26 = v35;
    v24(v25, v35);
    type metadata accessor for MetricsActivity();
    uint64_t v27 = (void *)static MetricsActivity.shared.getter();
    uint64_t v28 = MetricsActivity.currentPageFields.getter();

    v38[0] = v28;
    static MetricsFieldsContext.Property<A>.pageFields.getter();
    sub_100054B78(&qword_1005F8378);
    MetricsFieldsContext.addingValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v34);
    swift_bridgeObjectRelease();
    v24(v16, v26);
    MetricsPipeline.process(_:using:)();
    unint64_t v29 = sub_1000566BC();
    swift_retain();
    uint64_t v30 = static OS_dispatch_queue.main.getter();
    v38[3] = v29;
    v38[4] = &protocol witness table for OS_dispatch_queue;
    v38[0] = v30;
    Promise.always(on:perform:)();
    swift_release();
    swift_release();
    sub_10004D2D8((uint64_t)v38);
    v24(v18, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v23, v31);
  }
  return result;
}

uint64_t sub_1000226DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

void sub_100022944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id LibraryDataProvider.imageStore.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_10004D29C(0, &qword_1005F6FE0);
  id result = [(id)swift_getObjCClassFromMetadata() defaultStore];
  a1[3] = v2;
  a1[4] = &protocol witness table for MTImageStore;
  *a1 = result;
  return result;
}

void sub_1000229D8(char *a1)
{
  uint64_t v2 = swift_isaMask & *(void *)a1;
  uint64_t v3 = &a1[*(void *)(v2 + 0x198)];
  uint64_t v4 = type metadata accessor for OperationResult();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  (*(void (**)(char *))(*(void *)(*(void *)(v2 + 384) - 8) + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1)
                                                                                                  + 0x1A0)]);
  swift_release();
  uint64_t v5 = *(void **)&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x1B0)];
}

uint64_t sub_100022B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Podcasts();
  v16[3] = v3;
  v16[4] = sub_100022EEC((unint64_t *)&qword_1005F79D0, (void (*)(uint64_t))&type metadata accessor for Podcasts);
  uint64_t v4 = sub_10004A244(v16);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v4, enum case for Podcasts.responsivePlayback(_:), v3);
  LOBYTE(v3) = isFeatureEnabled(_:)();
  sub_10004D2D8((uint64_t)v16);
  if (v3)
  {
    uint64_t v5 = self;
    swift_retain();
    swift_retain();
    id v6 = [v5 sharedInstance];
    type metadata accessor for PlayStateDataSource();
    swift_allocObject();
    v16[0] = PlayStateDataSource.init(playbackController:pendingPlaybackStore:episodeLookupUtil:)();
    sub_100022EEC(&qword_1005FCE40, (void (*)(uint64_t))&type metadata accessor for PlayStateDataSource);
    uint64_t v7 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
    swift_release();
  }
  else
  {
    id v8 = [self defaultInstance];
    id v9 = [self sharedInstance];
    uint64_t v10 = (char *)objc_allocWithZone((Class)type metadata accessor for PlayingEpisodePlayStateDataSource());
    uint64_t v11 = sub_1002587CC(v8, v9, v10);
    v16[0] = (uint64_t)v11;
    sub_100022EEC(&qword_1005FCBB0, (void (*)(uint64_t))type metadata accessor for PlayingEpisodePlayStateDataSource);
    uint64_t v7 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
  }
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10046D070;
  *(void *)(v12 + 32) = v7;
  *(void *)(v12 + 40) = a2;
  sub_100054B78(&qword_1005FCE30);
  swift_allocObject();
  swift_retain();
  swift_retain();
  v16[0] = DefaultEpisodeStateDataSource.init()();
  sub_100044200(&qword_1005FCE38, &qword_1005FCE30);
  uint64_t v13 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
  swift_release();
  *(void *)(v12 + 48) = v13;
  v16[0] = v12;
  specialized Array._endMutation()();
  uint64_t v14 = v16[0];
  swift_release();
  return v14;
}

uint64_t sub_100022E5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100022EA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100022EEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100022F34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100022F7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100022FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_100023018(uint64_t a1, const char *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.feedUpdate.getter();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    v12[1] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a2, v10, 0xCu);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_1000231AC()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) privateQueueContext];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = self;
  id v3 = [v2 predicateForNotHiddenNotImplicitlyFollowedPodcasts];
  id result = [v2 sortDescriptorsForLastDatePlayed];
  if (result)
  {
    uint64_t v5 = result;
    sub_10004D29C(0, (unint64_t *)&qword_1005F8120);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
    uint64_t v6 = (void *)static OS_dispatch_queue.main.getter();
    sub_100054B78(&qword_1005F7A20);
    sub_10004D29C(0, (unint64_t *)&qword_1005F71F0);
    NSManagedObjectContext.fetchListAndPublish<A, B>(entityName:predicate:sortDescriptors:limit:receiveOn:transform:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100054B78(&qword_1005F7A28);
    sub_100044200(&qword_1005F7A30, &qword_1005F7A28);
    uint64_t v7 = Publisher.eraseToAnyPublisher()();
    swift_release();
    return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1000233A4(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for HUDPresenter();
  v2[2] = swift_allocObject();
  v2[29] = 0;
  v2[30] = 0;
  v2[22] = a1;
  sub_100054B78((uint64_t *)&unk_1005F74C0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  v2[3] = *(void *)&v5[0];
  sub_100054B78(&qword_1005F7560);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v5, (uint64_t)(v2 + 4));
  type metadata accessor for PodcastStateController();
  BaseObjectGraph.inject<A>(_:)();
  v2[14] = *(void *)&v5[0];
  sub_100054B78((uint64_t *)&unk_1006033C0);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v5, (uint64_t)(v2 + 15));
  type metadata accessor for BookmarksController();
  BaseObjectGraph.inject<A>(_:)();
  v2[20] = *(void *)&v5[0];
  sub_100054B78(&qword_1005FF780);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v5, (uint64_t)(v2 + 9));
  sub_100054B78(&qword_1005F7050);
  BaseObjectGraph.inject<A>(_:)();
  v2[21] = *(void *)&v5[0];
  sub_100054B78((uint64_t *)&unk_1005F8B10);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v5, (uint64_t)(v2 + 23));
  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  v2[28] = *(void *)&v5[0];
  return v2;
}

void sub_1000237B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100023A04(void *a1)
{
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v2 = (void *)static OS_os_log.launch.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10046D010;
  id v4 = [a1 activityType];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10004DA4C();
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v7;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  id v8 = self;
  id v9 = [v8 sharedApplication];
  id v10 = [v9 delegate];

  if (v10)
  {
    if ([v10 respondsToSelector:"application:continueUserActivity:restorationHandler:"])
    {
      id v11 = [v8 sharedApplication];
      void v13[4] = UInt64.int64Representation.getter;
      v13[5] = 0;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 1107296256;
      void v13[2] = sub_1002A5818;
      void v13[3] = &unk_10055D6E8;
      uint64_t v12 = _Block_copy(v13);
      [v10 application:v11 continueUserActivity:a1 restorationHandler:v12];
      _Block_release(v12);
      swift_unknownObjectRelease();

      swift_release();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_100023C58()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100023C98(char *a1, double a2)
{
  uint64_t v58 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  os_log_type_t v56 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v57 = (char *)v49 - v8;
  __chkstk_darwin(v7);
  os_log_type_t v59 = (char *)v49 - v9;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int v54 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v49 - v14;
  uint64_t v51 = sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.feedUpdate.getter();
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = v4;
    uint64_t v19 = v11;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 134217984;
    *(double *)aBlock = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[Foreground Sync] threshold bag value: %f", v20, 0xCu);
    uint64_t v11 = v19;
    uint64_t v4 = v18;
    swift_slowDealloc();
  }

  id v52 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v53 = v11 + 8;
  v52(v15, v10);
  uint64_t v21 = v59;
  static Date.now.getter();
  uint64_t v22 = &v58[OBJC_IVAR___MTForegroundSyncUtil_lastExpectedFeedsUpdateDate];
  swift_beginAccess();
  id v23 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v24 = v56;
  v55 = v22;
  v23(v56, v22, v3);
  uint64_t v25 = v57;
  static Date.+ infix(_:_:)();
  uint64_t v26 = (char *)v10;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v4 + 8);
  v27(v24, v3);
  sub_10004AE54(&qword_1006053D0, (void (*)(uint64_t))&type metadata accessor for Date);
  LOBYTE(v24) = dispatch thunk of static Comparable.< infix(_:_:)();
  v27(v25, v3);
  v27(v21, v3);
  if (v24)
  {
    os_log_type_t v56 = (char *)v23;
    uint64_t v57 = v26;
    uint64_t v28 = v3;
    uint64_t v30 = v54;
    unint64_t v29 = v55;
    static OS_os_log.feedUpdate.getter();
    uint64_t v31 = v58;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    LODWORD(v58) = v33;
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = (uint64_t (*)(char *, char *))v52;
    if (v34)
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      aBlock[0] = v51;
      uint64_t v50 = v36;
      *(_DWORD *)uint64_t v36 = 136315138;
      v49[2] = v36 + 12;
      v49[1] = v36 + 4;
      id v37 = sub_10036B38C();
      os_log_type_t v38 = v59;
      ((void (*)(char *, char *, uint64_t))v56)(v59, v29, v28);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      v27(v38, v28);
      id v40 = [v37 stringFromDate:isa];

      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v43 = v42;

      uint64_t v60 = sub_10004B974(v41, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v58, "[Foreground Sync] Not updating feeds on app foreground because within feed update threshold. Last update occurred: %s", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return ((uint64_t (*)(char *, char *))v52)(v54, v57);
    }
    else
    {

      return v35(v30, v57);
    }
  }
  else
  {
    sub_10004D29C(0, (unint64_t *)&unk_1005F7500);
    id v45 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
    aBlock[4] = (uint64_t)sub_10005C9D0;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100022FC4;
    aBlock[3] = (uint64_t)&unk_100564908;
    id v46 = _Block_copy(aBlock);
    [v45 updateAllPodcastsUserInitiated:0 forced:0 source:24 started:v46];
    _Block_release(v46);

    uint64_t v47 = v59;
    static Date.now.getter();
    uint64_t v48 = v55;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v48, v47, v3);
    return swift_endAccess();
  }
}

uint64_t sub_100024554()
{
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_1006063D0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v22 = v1;
  uint64_t v23 = v2;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100054B78((uint64_t *)&unk_1005FE9A0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v24 = v5;
  uint64_t v25 = v6;
  __chkstk_darwin(v5);
  uint64_t v21 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100054B78(&qword_1005FA1B0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100054B78((uint64_t *)&unk_1005FE9B0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v0 + 24);
  dispatch thunk of PlaybackController.$nowPlayingItem.getter();
  sub_100044200(&qword_100603410, &qword_1005FA1B0);
  sub_100059B6C();
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100044200((unint64_t *)&unk_1005FE9E0, (uint64_t *)&unk_1005FE9B0);
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_beginAccess();
  sub_100054B78((uint64_t *)&unk_1005F9ED0);
  sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  dispatch thunk of PlaybackController.$isPlaying.getter();
  sub_100044200(&qword_1005F9FE0, (uint64_t *)&unk_1006063D0);
  os_log_type_t v17 = v21;
  uint64_t v16 = v22;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v16);
  sub_100044200((unint64_t *)&unk_1005FE9F0, (uint64_t *)&unk_1005FE9A0);
  swift_retain();
  uint64_t v18 = v24;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v18);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

id sub_100024C1C(void *a1, void *a2, uint64_t a3, char *a4)
{
  *(void *)&a4[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_downloadManager] = a1;
  id v7 = objc_allocWithZone((Class)type metadata accessor for DownloadingEpisodeStateDataSource());
  uint64_t v8 = a4;
  id v9 = a1;
  id v10 = sub_10001C73C(a2);
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10046D070;
  sub_100042FDC(&qword_1005F7A70, (void (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource);
  *(void *)(v11 + 32) = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
  sub_100054B78(&qword_1005F7A78);
  swift_allocObject();
  swift_retain();
  OnDemandLibraryEpisodeStateDataSource.init(episodeStateRepository:)();
  sub_100044200(&qword_1005F7A80, &qword_1005F7A78);
  uint64_t v12 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
  swift_release();
  *(void *)(v11 + 40) = v12;
  sub_100054B78(&qword_1005F7A88);
  swift_allocObject();
  DefaultEpisodeStateDataSource.init()();
  sub_100044200((unint64_t *)&unk_1005F7A90, &qword_1005F7A88);
  uint64_t v13 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
  swift_release();
  *(void *)(v11 + 48) = v13;
  uint64_t v17 = v11;
  specialized Array._endMutation()();
  defaultEpisodeDownloadTransitionRules.getter();
  sub_100054B78((uint64_t *)&unk_1005F74C0);
  swift_allocObject();
  *(void *)&v8[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_stateController] = EpisodeStateController.init(dataSources:transitionRules:)();
  *(void *)&v8[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_downloadsNotifier] = a2;
  *(void *)&v8[OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_downloadingStateDataSource] = v10;
  id v14 = a2;

  v16.receiver = v8;
  v16.super_class = (Class)type metadata accessor for EpisodeDownloadStateControllerProvider();
  return [super init];
}

uint64_t sub_100024E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100055B68((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  uint64_t v9 = v23[1];
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  *(void *)(v9 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_1005F5A20 != -1) {
    swift_once();
  }
  id v10 = (void *)qword_1005F91F0;
  id v11 = objc_allocWithZone((Class)NSPersistentContainer);
  id v12 = v10;
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v11 initWithName:v13 managedObjectModel:v12];

  uint64_t v15 = v26;
  sub_10005187C(v26, v24, v25, 0);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_10046D060;
  *(void *)(v18 + 32) = v17;
  uint64_t v27 = (void *)v18;
  specialized Array._endMutation()();
  sub_10004D29C(0, (unint64_t *)&unk_1005F9440);
  id v19 = v17;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v14 setPersistentStoreDescriptions:isa];

  uint64_t v21 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v15, v21);
  *(void *)(v9 + 24) = v14;
  return v9;
}

Swift::Void __swiftcall PodcastsStateCoordinator.startTrackingChangesInDownloads()()
{
  uint64_t v0 = type metadata accessor for EpisodeStateDomain();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78(&qword_100603860);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100054B78(&qword_100603868);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v20 = v8;
  uint64_t v21 = v9;
  __chkstk_darwin(v8);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100054B78(&qword_100603870);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v22 = v12;
  uint64_t v23 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  EpisodeStateRepository.startObservingChanges()();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for EpisodeStateDomain.downloadState(_:), v0);
  uint64_t v16 = EpisodeStateRepository.publisherForChanges(in:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v24 = v16;
  sub_100054B78(&qword_100603880);
  sub_100044200(&qword_100603888, &qword_100603880);
  Publisher.filter(_:)();
  swift_release();
  sub_100054B78(&qword_100603890);
  sub_100044200(&qword_100603898, &qword_100603860);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static Subscribers.Demand.unlimited.getter();
  sub_100054B78(&qword_1006038A0);
  sub_100044200(&qword_1006038A8, &qword_100603868);
  sub_100044200(&qword_1006038B0, &qword_1006038A0);
  uint64_t v17 = v20;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v17);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100044200(&qword_1006038B8, &qword_100603870);
  uint64_t v18 = v22;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v18);
  swift_beginAccess();
  sub_100054B78((uint64_t *)&unk_1005F9ED0);
  sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
}

void sub_100025BCC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pendingUserDefaultArchivedData];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2 == 0;

  id v3 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 32) requiringSecureCoding:1 error:0];
  [*(id *)(a1 + 32) setPendingUserDefaultArchivedData:v3];
}

uint64_t sub_100025C6C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_workQueue);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v11 = v2 + OBJC_IVAR____TtC8Podcasts13WidgetManager_seenEpisodeUUIDs;
  swift_beginAccess();
  if (*(void *)(*(void *)v11 + 16) <= *(void *)(a1 + 16) >> 3)
  {
    v29[0] = a1;
    swift_bridgeObjectRetain();
    uint64_t v14 = swift_bridgeObjectRetain();
    sub_100059D00(v14);
    swift_bridgeObjectRelease();
    uint64_t v13 = (unint64_t *)v29[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = sub_1003CE988(v12, a1);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v15 = swift_bridgeObjectRetain();
  sub_10005046C(v15);
  uint64_t result = swift_endAccess();
  int64_t v16 = 0;
  uint64_t v17 = v13 + 7;
  uint64_t v18 = 1 << *((unsigned char *)v13 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v13[7];
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v16 << 6);
      goto LABEL_9;
    }
    int64_t v26 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v21) {
      return swift_release();
    }
    unint64_t v27 = v17[v26];
    ++v16;
    if (!v27)
    {
      int64_t v16 = v26 + 1;
      if (v26 + 1 >= v21) {
        return swift_release();
      }
      unint64_t v27 = v17[v16];
      if (!v27)
      {
        int64_t v16 = v26 + 2;
        if (v26 + 2 >= v21) {
          return swift_release();
        }
        unint64_t v27 = v17[v16];
        if (!v27) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v23 = __clz(__rbit64(v27)) + (v16 << 6);
LABEL_9:
    uint64_t v24 = (void *)(v13[6] + 16 * v23);
    uint64_t v25 = v24[1];
    v29[0] = *v24;
    v29[1] = v25;
    swift_bridgeObjectRetain();
    PassthroughSubject.send(_:)();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v21) {
    return swift_release();
  }
  unint64_t v27 = v17[v28];
  if (v27)
  {
    int64_t v16 = v28;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v16 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v16 >= v21) {
      return swift_release();
    }
    unint64_t v27 = v17[v16];
    ++v28;
    if (v27) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

BOOL sub_100025F70(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = a1;
  int v7 = sub_100021EC8(v6);
  static Logger.userActivity.getter();
  id v8 = v6;
  swift_retain_n();
  id v9 = v8;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v3;
    uint64_t v13 = v12;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v26 = v22;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v14 = _typeName(_:qualified:)();
    int v24 = v7;
    uint64_t v25 = sub_10004B974(v14, v15, &v26);
    uint64_t v21 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    id v16 = [v9 activityType];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v25 = sub_10004B974(v17, v19, &v26);
    LOBYTE(v7) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 22) = 1024;
    LODWORD(v25) = v7 != 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Asking if %s supports '%s'. Returning %{BOOL}d", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v21);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v7 != 3;
}

void sub_100026490(id *a1)
{
  id v1 = a1[1];
  if (!*a1)
  {
    id v4 = [a1[1] view];
    if (v4)
    {
      id v5 = v4;
      UIView.removeAnnotation()();
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    return;
  }
  id v2 = *a1;
  id v3 = [v1 view];
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  id v5 = v3;
  UIView.annotate(with:)();

LABEL_6:
}

uint64_t sub_100026760(uint64_t *a1)
{
  id v3 = *(uint64_t (**)(uint64_t, unsigned char *, void))(v1 + 16);
  uint64_t v4 = *a1;
  sub_100053820((uint64_t)(a1 + 1), (uint64_t)v6, &qword_100605878);
  return v3(v4, v6, *((unsigned __int8 *)a1 + 64));
}

void sub_1000267BC(void *a1, uint64_t a2, char a3)
{
}

void sub_1000267C4(void *a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for WidgetNowPlayingInfo();
  __chkstk_darwin(v6 - 8);
  id v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_100054B78(&qword_100605858);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v28 - v13);
  if (a1)
  {
    sub_100053820(a2, (uint64_t)v29, &qword_100605878);
    if (v30 != 2)
    {
      v31[0] = v29[0];
      v31[1] = v29[1];
      v31[2] = v29[2];
      uint64_t v32 = v30;
      if ((a3 & 1) != 0 && (swift_beginAccess(), (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) != 0))
      {
        id v16 = (void *)Strong;
        uint64_t v17 = sub_100054B78(&qword_100605850);
        id v18 = a1;
        *uint64_t v14 = MPModelObject.uuid.getter();
        v14[1] = v19;
        Date.init()();
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 0, 1, v17);
        uint64_t v20 = (uint64_t)v16 + OBJC_IVAR____TtC8Podcasts13WidgetManager_lastPlayedInfo;
        swift_beginAccess();
        sub_100372F40((uint64_t)v14, v20);
        swift_endAccess();
      }
      else
      {
        id v21 = a1;
      }
      swift_beginAccess();
      uint64_t v22 = swift_unknownObjectWeakLoadStrong();
      if (v22)
      {
        uint64_t v23 = (void *)v22;
        swift_beginAccess();
        uint64_t v24 = swift_unknownObjectWeakLoadStrong();
        if (v24)
        {
          uint64_t v25 = (void *)v24;
          uint64_t v26 = v24 + OBJC_IVAR____TtC8Podcasts13WidgetManager_lastPlayedInfo;
          swift_beginAccess();
          sub_100054BBC(v26, (uint64_t)v12, &qword_100605858);
        }
        else
        {
          uint64_t v27 = sub_100054B78(&qword_100605850);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v12, 1, 1, v27);
        }
        sub_100370600(a3 & 1, a1, (uint64_t)v31, (uint64_t)v12, v8);
        sub_100370344((uint64_t)v8);
      }
    }
  }
}

uint64_t type metadata accessor for WidgetNowPlayingInfo()
{
  uint64_t result = qword_1005FDAF0;
  if (!qword_1005FDAF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100026B1C(uint64_t a1)
{
  sub_100054B78((uint64_t *)&unk_1005FF6E0);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v30 = v35[19];
  uint64_t v31 = v35[18];
  sub_100054B78((uint64_t *)&unk_1005F7540);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v28 = v35[17];
  uint64_t v29 = v35[16];
  sub_100054B78((uint64_t *)&unk_1006092F0);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v27 = v35[15];
  sub_100054B78((uint64_t *)&unk_1005F74F0);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v25 = v35[14];
  uint64_t v26 = v35[13];
  sub_100054B78((uint64_t *)&unk_100609300);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v23 = v35[12];
  uint64_t v24 = v35[11];
  sub_100054B78((uint64_t *)&unk_1005F7510);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v21 = v35[10];
  uint64_t v22 = v35[9];
  sub_100054B78((uint64_t *)&unk_1005F7550);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v3 = v35[7];
  uint64_t v2 = v35[8];
  sub_100054B78((uint64_t *)&unk_1005F7520);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v4 = v35[5];
  uint64_t v5 = v35[6];
  sub_100054B78((uint64_t *)&unk_100609310);
  BaseObjectGraph.inject<A>(_:)();
  sub_100054B78((uint64_t *)&unk_1005FF6F0);
  BaseObjectGraph.inject<A>(_:)();
  type metadata accessor for InterestRepository();
  BaseObjectGraph.inject<A>(_:)();
  sub_100054B78((uint64_t *)&unk_100609320);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v6 = sub_100055EF0((uint64_t)v34, v34[3]);
  __chkstk_darwin(v6);
  id v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = v33[5];
  uint64_t v11 = *v8;
  uint64_t v12 = type metadata accessor for TranscriptReportConcernURLBuilder();
  v32[3] = v12;
  v32[4] = &off_10055C678;
  v32[0] = v11;
  type metadata accessor for LibraryActionController();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = sub_100055EF0((uint64_t)v32, v12);
  __chkstk_darwin(v14);
  id v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = *v16;
  swift_retain();
  swift_retain();
  uint64_t v19 = sub_1003F92A0(v31, v30, v29, v28, v27, v26, v25, v24, v23, v22, v21, v3, v2, v4, v5, (uint64_t)v35, v18, v10, (uint64_t)v33,
          a1,
          v13);
  sub_10004D2D8((uint64_t)v32);
  swift_release();
  sub_10004D2D8((uint64_t)v34);
  type metadata accessor for PlaybackController();
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  *(void *)(v19 + 328) = v35[0];
  swift_release();
  swift_release();
  return v19;
}

id sub_100026F00()
{
  uint64_t v0 = type metadata accessor for DownloadEnvironment();
  __chkstk_darwin(v0 - 8);
  if (qword_1005F5A50 != -1) {
    swift_once();
  }
  v11[3] = type metadata accessor for CompoundDownloadedAssetIssueIdentifier();
  void v11[4] = (uint64_t)&protocol witness table for CompoundDownloadedAssetIssueIdentifier;
  sub_10004A244(v11);
  swift_bridgeObjectRetain();
  CompoundDownloadedAssetIssueIdentifier.init(identifiers:)();
  sub_100054B78(&qword_1005FC208);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10046D010;
  *(void *)(v1 + 56) = type metadata accessor for DeletionDownloadConsistencyIssueResolutionStrategy();
  *(void *)(v1 + 64) = &protocol witness table for DeletionDownloadConsistencyIssueResolutionStrategy;
  sub_10004A244((uint64_t *)(v1 + 32));
  DeletionDownloadConsistencyIssueResolutionStrategy.init()();
  void v10[3] = type metadata accessor for PrioritizedDownloadConsistencyResolutionStrategy();
  v10[4] = (uint64_t)&protocol witness table for PrioritizedDownloadConsistencyResolutionStrategy;
  sub_10004A244(v10);
  PrioritizedDownloadConsistencyResolutionStrategy.init(strategies:)();
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v3 = result;
    if (qword_1005F5AE0 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v4 = (void *)static PodcastsStateCoordinator.shared;
    uint64_t v5 = self;
    id v6 = v4;
    id v7 = v3;
    id v8 = [v5 sharedInstance];
    [v8 privateQueueContext];

    sub_10005AF00();
    static DownloadEnvironment.live.getter();
    id v9 = objc_allocWithZone((Class)type metadata accessor for DownloadConsistency());
    id result = (id)DownloadConsistency.init(issueIdentifier:resolutionStrategy:effectApplicator:downloadEnvironment:)();
    static DownloadConsistency.application = (uint64_t)result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100027184()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  uint64_t v17 = sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v5 = (void *)static OS_os_log.episodeStatesSignpost.getter();
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_signpostName);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_signpostName + 8);
  int v8 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_signpostName + 16);
  sub_100027470((uint64_t)v4);
  uint64_t v19 = v7;
  uint64_t v20 = v6;
  int v18 = v8;
  os_signpost(_:dso:log:name:signpostID:)();

  id v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(v4, v1);
  EpisodeStateRepository.startObservingChanges()();
  dispatch thunk of EpisodeStateController.startObservingChanges()();
  dispatch thunk of EpisodeStateController.startObservingChanges()();
  dispatch thunk of EpisodeStateController.startObservingChanges()();
  if (qword_1005F5AE0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = (void *)static PodcastsStateCoordinator.shared;
  uint64_t v22 = type metadata accessor for PodcastsStateCoordinator();
  uint64_t v23 = (void *)sub_100042FDC((unint64_t *)&unk_1005F74D0, (void (*)(uint64_t))type metadata accessor for PodcastsStateCoordinator);
  uint64_t v21 = (uint64_t)v10;
  uint64_t v11 = type metadata accessor for LocalLibraryPlaybackPositionTracker();
  swift_allocObject();
  id v12 = v10;
  uint64_t v13 = LocalLibraryPlaybackPositionTracker.init(stateCoordinator:)();
  uint64_t v22 = v11;
  uint64_t v23 = &protocol witness table for LocalLibraryPlaybackPositionTracker;
  uint64_t v21 = v13;
  dispatch thunk of PlaybackController.playbackPositionTracker.setter();
  id v14 = (id)static PodcastsStateCoordinator.shared;
  PodcastsStateCoordinator.startTrackingChangesInDownloads()();

  static os_signpost_type_t.end.getter();
  uint64_t v15 = (void *)static OS_os_log.episodeStatesSignpost.getter();
  sub_100027470((uint64_t)v4);
  os_signpost(_:dso:log:name:signpostID:)();

  return ((uint64_t (*)(char *, uint64_t))v9)(v4, v1);
}

uint64_t sub_100027470@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100054B78(&qword_1005F7678);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  id v9 = &v14[-v8];
  uint64_t v10 = v2 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___signpostID;
  swift_beginAccess();
  sub_100054BBC(v10, (uint64_t)v9, &qword_1005F7678);
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a1, v9, v11);
  }
  sub_100054B1C((uint64_t)v9, &qword_1005F7678);
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.episodeStatesSignpost.getter();
  swift_unknownObjectRetain();
  OSSignpostID.init(log:object:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
  swift_beginAccess();
  sub_100039D84((uint64_t)v7, v10, &qword_1005F7678);
  return swift_endAccess();
}

id sub_10002768C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_debugActionsController;
  id v6 = objc_allocWithZone((Class)type metadata accessor for DebugActionsController());
  uint64_t v7 = v2;
  *(void *)&v2[v5] = [v6 init];
  *(void *)&v7[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_objectGraph] = a1;
  sub_100054B78(&qword_1005FD620);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  *(_OWORD *)&v7[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_libraryDataProvider] = v21[0];
  sub_100054B78((uint64_t *)&unk_1006033C0);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(v21, (uint64_t)&v7[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_episodeController]);
  sub_100054B78(&qword_1005FF770);
  BaseObjectGraph.inject<A>(_:)();
  *(void *)&v7[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_syncController] = *(void *)&v21[0];
  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  *(void *)&v7[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playbackController] = *(void *)&v21[0];
  if (qword_1005F5AE8 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_10061ACB0;
  id v9 = &v7[OBJC_IVAR____TtC8PodcastsP33_1EBA7FB1085F92D3987B8EDF2EAB73D122GlobalActionController_playerControl];
  *((void *)v9 + 3) = type metadata accessor for PodcastsPlayerAdapter(0);
  *((void *)v9 + 4) = &protocol witness table for PodcastsPlayerAdapter;
  *(void *)id v9 = v8;
  id v10 = v8;

  v20.receiver = v7;
  v20.super_class = ObjectType;
  id v11 = [super init];
  uint64_t v12 = self;
  id v13 = v11;
  id v14 = [v12 defaultCenter];
  [v14 addObserver:v13 selector:"didChangeStoreAccount:" name:ACDAccountStoreDidChangeNotification object:0];
  id v15 = v13;
  NSString v16 = String._bridgeToObjectiveC()();
  [v14 addObserver:v15 selector:"mainWindowDidChangeKey:" name:v16 object:0];

  id v17 = v15;
  NSString v18 = String._bridgeToObjectiveC()();
  [v14 addObserver:v17 selector:"mainWindowDidChangeKey:" name:v18 object:0];

  swift_release();
  return v17;
}

void *sub_100027954(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v7 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * i);
      uint64_t v8 = v7;
      uint64_t v9 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v13 = v7;
      a1(&v12, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return (void *)swift_bridgeObjectRelease();
      }

      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        return (void *)v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_100027AF4(void **a1@<X0>, void *a2@<X8>)
{
}

void sub_100027B10(void **a1@<X0>, void *a2@<X8>)
{
  unint64_t v14 = a2;
  uint64_t v3 = type metadata accessor for StationListOptions();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = *a1;
  uint64_t v13 = type metadata accessor for StationDetail();
  id v8 = v7;
  static StationListOptions.excludeArtwork.getter();
  sub_100027CB4();
  char v9 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  id v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, v3);
  static StationListOptions.excludeEpisodes.getter();
  LOBYTE(v7) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v10(v6, v3);
  static StationListOptions.excludeShows.getter();
  char v11 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v10(v6, v3);
  sub_10004BE90(v8, v9 & 1, v7 & 1, v11 & 1);
  *unint64_t v14 = v12;
}

unint64_t sub_100027CB4()
{
  unint64_t result = qword_100607578;
  if (!qword_100607578)
  {
    type metadata accessor for StationListOptions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100607578);
  }
  return result;
}

void sub_100027D0C(void *a1, uint64_t a2, void *a3, SEL *a4)
{
  id v7 = self;
  id v8 = a3;
  id v12 = a1;
  id v9 = [v7 sharedApplication];
  id v10 = [v9 delegate];

  if (v10)
  {
    if ([v10 respondsToSelector:*a4])
    {
      id v11 = [v7 sharedApplication];
      [v10 *a4:v11];
    }
    else
    {
    }
    swift_unknownObjectRelease();
  }
  else
  {
  }
}

void sub_100027EE8(uint64_t a1)
{
  location[1] = 0;
  uint64_t v2 = +[NSBundle mainBundle];
  uint64_t v3 = [v2 bundleIdentifier];

  _CTServerConnectionCopyCellularUsagePolicy();
  CFRelease(*(CFTypeRef *)(a1 + 48));
  if (+[PSCellularDataSettingsDetail isEnabled]) {
    char v4 = MGGetBoolAnswer();
  }
  else {
    char v4 = 0;
  }
  objc_initWeak(location, *(id *)(a1 + 32));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100044A10;
  block[3] = &unk_100551120;
  objc_copyWeak(&v7, location);
  char v8 = 0;
  char v9 = v4;
  id v6 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v7);
  objc_destroyWeak(location);
}

void *ImplicitFollowsDecayCoordinator.init()()
{
  uint64_t v0 = sub_100054B78(&qword_1005F9F20);
  __chkstk_darwin(v0 - 8);
  uint64_t v29 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  __chkstk_darwin(v2);
  uint64_t v36 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100054B78(&qword_1005FBF78);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  os_log_type_t v33 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100054B78(&qword_1005FBF80);
  uint64_t v30 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  id v37 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static DispatchQoS.background.getter();
  uint64_t v41 = _swiftEmptyArrayStorage;
  sub_100059CA8();
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7);
  uint64_t v32 = v13;
  unint64_t v14 = v31;
  v14[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_100054B78(&qword_1005F5BF8);
  swift_allocObject();
  id v15 = (void *)PassthroughSubject.init()();
  v14[3] = v15;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    NSString v16 = (void *)sub_100172170((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    NSString v16 = &_swiftEmptySetSingleton;
  }
  uint64_t v18 = (uint64_t)v29;
  uint64_t v17 = v30;
  void v14[4] = v16;
  v14[6] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v41 = v15;
  sub_100044200(&qword_1005FBF88, &qword_1005F5BF8);
  swift_retain();
  uint64_t v19 = v33;
  Publisher.filter(_:)();
  swift_release();
  objc_super v20 = v36;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  uint64_t v41 = (void *)v14[2];
  id v21 = v41;
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v18, 1, 1, v22);
  sub_100044200(&qword_1005FBF90, &qword_1005FBF78);
  sub_100059BE0();
  id v23 = v21;
  uint64_t v24 = v37;
  uint64_t v25 = v35;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_100059C48(v18);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v25);
  swift_allocObject();
  swift_weakInit();
  sub_100044200(&qword_1005FBF98, &qword_1005FBF80);
  uint64_t v26 = v40;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v26);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return v14;
}

id sub_100028888(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context;
  uint64_t v8 = *(void **)(a1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context);
  sub_1000566BC();
  id v9 = v8;
  static OS_dispatch_queue.automaticAssetManagement.getter();
  uint64_t v10 = type metadata accessor for AssetRemovalProcessorDataSource();
  swift_allocObject();
  uint64_t v11 = AssetRemovalProcessorDataSource.init(managedObjectContext:receiverQueue:)();
  uint64_t v25 = v10;
  uint64_t v26 = &protocol witness table for AssetRemovalProcessorDataSource;
  uint64_t v24 = v11;
  sub_100028B40((uint64_t)v23);
  sub_100028B40((uint64_t)v21);
  uint64_t v12 = *(void **)(a1 + v7);
  uint64_t v13 = self;
  id v14 = v12;
  id result = [v13 sharedInstance];
  if (result)
  {
    id v16 = result;
    uint64_t v17 = static OS_dispatch_queue.automaticAssetManagement.getter();
    v20[3] = &type metadata for CoreDataDownloadLibrary;
    unint64_t v18 = sub_10005B72C();
    v20[0] = v14;
    v20[1] = v16;
    v20[4] = v18;
    void v20[2] = v17;
    static OS_dispatch_queue.automaticAssetManagement.getter();
    id v19 = [self managedAssetsDirectoryURL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    URL.standardized.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v22[3] = type metadata accessor for AssetRemovalProcessorDelegate();
    void v22[4] = (uint64_t)&protocol witness table for AssetRemovalProcessorDelegate;
    sub_10004A244(v22);
    AssetRemovalProcessorDelegate.init(episodeAndShowStorage:library:workQueue:managedAssetDirectory:)();
    type metadata accessor for DebouncedEpisodeAndShowProcessor();
    swift_allocObject();
    return (id)DebouncedEpisodeAndShowProcessor.init(interval:dataSource:storage:delegate:workQueue:inverseBatchSize:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100028B40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor____lazy_storage___episodeStorage;
  swift_beginAccess();
  sub_100028C34(v3, (uint64_t)&v10);
  if (!v11)
  {
    sub_10005E218((uint64_t)&v10);
    uint64_t v4 = *(void **)(v1 + OBJC_IVAR___MTDebouncedAssetRemovalProcessor_context);
    uint64_t v5 = type metadata accessor for CoreDataEpisodeAndShowStorage();
    swift_allocObject();
    id v6 = v4;
    uint64_t v7 = CoreDataEpisodeAndShowStorage.init(context:)();
    uint64_t v11 = v5;
    uint64_t v12 = &protocol witness table for CoreDataEpisodeAndShowStorage;
    *(void *)&long long v10 = v7;
    sub_100056D54((uint64_t)&v10, (uint64_t)v9);
    swift_beginAccess();
    sub_10005E278((uint64_t)v9, v3);
    swift_endAccess();
  }
  return sub_100042FC4(&v10, a1);
}

uint64_t sub_100028C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FA458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100028C9C(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___MTDebouncedAutoDownloadProcessor_context;
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR___MTDebouncedAutoDownloadProcessor_context);
  sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v5 = v3;
  id v6 = [ObjCClassFromMetadata sharedInstance];
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static OS_dispatch_queue.automaticAssetManagement.getter();
  type metadata accessor for DeviceCapacityMonitor();
  static DeviceCapacityMonitor.shared.getter();
  uint64_t v7 = type metadata accessor for AutoDownloadProcessorDataSource();
  swift_allocObject();
  v15[13] = v7;
  v15[14] = (uint64_t)&protocol witness table for AutoDownloadProcessorDataSource;
  v15[10] = AutoDownloadProcessorDataSource.init(context:accountDataSource:workQueue:capacityMonitor:)();
  uint64_t v8 = *(void **)(a1 + v2);
  uint64_t v9 = type metadata accessor for CoreDataEpisodeAndShowStorage();
  swift_allocObject();
  id v10 = v8;
  v15[8] = v9;
  v15[9] = (uint64_t)&protocol witness table for CoreDataEpisodeAndShowStorage;
  void v15[5] = CoreDataEpisodeAndShowStorage.init(context:)();
  id result = [self sharedInstance];
  if (result)
  {
    id v12 = *(id *)(a1 + v2);
    static DeviceCapacityMonitor.shared.getter();
    sub_10004D29C(0, &qword_1005F7060);
    id v13 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
    id v14 = [v13 downloadManager];

    [objc_allocWithZone((Class)PFCoreAnalyticsChannel) init];
    static OS_dispatch_queue.automaticAssetManagement.getter();
    v15[3] = type metadata accessor for AutoDownloadProcessorDownloader();
    void v15[4] = (uint64_t)&protocol witness table for AutoDownloadProcessorDownloader;
    sub_10004A244(v15);
    AutoDownloadProcessorDownloader.init(reachability:context:capacityMonitor:downloader:analyticsChannel:workQueue:)();
    type metadata accessor for DebouncedEpisodeAndShowProcessor();
    swift_allocObject();
    return (id)DebouncedEpisodeAndShowProcessor.init(interval:dataSource:storage:delegate:workQueue:inverseBatchSize:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100028F28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  static OS_os_log.cloudSync.getter();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[Foreground Sync] Syncing BookKeeper and UPP.", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [*(id *)(a1 + OBJC_IVAR___MTForegroundSyncUtil_syncController) syncEverything];
  sub_10004D29C(0, (unint64_t *)&unk_1005F7500);
  id v9 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  uint64_t v26 = (uint64_t)sub_10005C950;
  uint64_t v27 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_100022FC4;
  uint64_t v25 = &unk_1005649A8;
  id v10 = _Block_copy(&aBlock);
  [v9 updateAllPodcastsNeedingRetry:v10];
  _Block_release(v10);

  id v11 = [self sharedInstance];
  id v12 = [v11 batchFeedFetchIsEnabled];

  uint64_t v13 = *(void *)(a1 + OBJC_IVAR___MTForegroundSyncUtil_workQueue);
  uint64_t v26 = (uint64_t)sub_100005B5C;
  uint64_t v27 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_100014BE0;
  uint64_t v25 = &unk_1005649D0;
  id v14 = _Block_copy(&aBlock);
  [v12 asyncValueOnQueue:v13 withCompletion:v14];
  _Block_release(v14);

  uint64_t v15 = type metadata accessor for Podcasts();
  uint64_t v25 = (void *)v15;
  uint64_t v16 = sub_10004AE54((unint64_t *)&qword_1005F79D0, (void (*)(uint64_t))&type metadata accessor for Podcasts);
  uint64_t v26 = v16;
  uint64_t v17 = sub_10004A244((uint64_t *)&aBlock);
  unint64_t v18 = *(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104);
  v18(v17, enum case for Podcasts.ponderosa(_:), v15);
  LOBYTE(v14) = isFeatureEnabled(_:)();
  uint64_t result = sub_10004D2D8((uint64_t)&aBlock);
  if (v14)
  {
    uint64_t v25 = (void *)v15;
    uint64_t v26 = v16;
    objc_super v20 = sub_10004A244((uint64_t *)&aBlock);
    v18(v20, enum case for Podcasts.categoriesInLibrary(_:), v15);
    char v21 = isFeatureEnabled(_:)();
    uint64_t result = sub_10004D2D8((uint64_t)&aBlock);
    if (v21) {
      return CategoriesSyncUtil.syncCategories(forced:completionHandler:)();
    }
  }
  return result;
}

uint64_t sub_100029324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a2;
  uint64_t v5 = sub_100054B78(&qword_1005F9F20);
  __chkstk_darwin(v5 - 8);
  uint64_t v64 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100054B78(&qword_100602220);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  uint64_t v55 = v8;
  __chkstk_darwin(v7);
  uint64_t v50 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100054B78(&qword_100602228);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  uint64_t v57 = v11;
  __chkstk_darwin(v10);
  uint64_t v51 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100054B78(&qword_100602230);
  uint64_t v62 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  id v52 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100054B78(&qword_100602238);
  uint64_t v63 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v58 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100054B78(&qword_100602068);
  uint64_t v15 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100054B78(&qword_100602240);
  uint64_t v59 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  unint64_t v43 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100054B78(&qword_100602060);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100054B78(&qword_100602248);
  uint64_t v53 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  unint64_t v42 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  uint64_t v49 = a1;
  swift_unknownObjectRetain();
  uint64_t v48 = a3;
  swift_retain();
  dispatch thunk of URLBasedFeedUpdater.updatingFeedURLs.getter();
  swift_getKeyPath();
  sub_100044200(&qword_1006021B0, &qword_100602060);
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  dispatch thunk of StoreFeedUpdater.updatingStoreIDs.getter();
  swift_getKeyPath();
  sub_100044200(&qword_1006021B8, &qword_100602068);
  uint64_t v24 = v43;
  uint64_t v25 = v45;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v25);
  sub_100044200(&qword_100602250, &qword_100602248);
  sub_100044200(&qword_100602258, &qword_100602240);
  uint64_t v26 = v50;
  uint64_t v27 = v44;
  uint64_t v28 = v46;
  uint64_t v29 = v42;
  Publisher.combineLatest<A>(_:)();
  sub_100044200(&qword_100602260, &qword_100602220);
  uint64_t v30 = v51;
  uint64_t v31 = v54;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v26, v31);
  sub_100044200(&qword_100602268, &qword_100602228);
  uint64_t v32 = v52;
  uint64_t v33 = v56;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v30, v33);
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  id v65 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v34 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v35 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v64, 1, 1, v34);
  sub_100044200(&qword_100602270, &qword_100602230);
  sub_100059BE0();
  uint64_t v36 = v58;
  uint64_t v37 = v60;
  Publisher.receive<A>(on:options:)();
  sub_100054B1C(v35, &qword_1005F9F20);

  (*(void (**)(char *, uint64_t))(v62 + 8))(v32, v37);
  sub_100044200(&qword_100602278, &qword_100602238);
  uint64_t v38 = v61;
  uint64_t v39 = Publisher.eraseToAnyPublisher()();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v38);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v24, v28);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v27);
  return v39;
}

uint64_t sub_100029BE8()
{
  uint64_t v17 = sub_100054B78((uint64_t *)&unk_1006063D0);
  __chkstk_darwin(v17);
  uint64_t v16 = sub_100054B78(&qword_1006063C0);
  __chkstk_darwin(v16);
  uint64_t v0 = sub_100054B78(&qword_1005FA1B0);
  __chkstk_darwin(v0);
  uint64_t v1 = sub_100054B78(&qword_100605868);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of PlaybackController.$nowPlayingItem.getter();
  dispatch thunk of PlaybackController.$durationSnapshot.getter();
  dispatch thunk of PlaybackController.$isPlaying.getter();
  sub_100044200(&qword_100603410, &qword_1005FA1B0);
  sub_100044200((unint64_t *)&unk_1006063E0, &qword_1006063C0);
  sub_100044200(&qword_1005F9FE0, (uint64_t *)&unk_1006063D0);
  Publishers.CombineLatest3.init(_:_:_:)();
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v15[1];
  swift_unknownObjectWeakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1000267BC;
  *(void *)(v7 + 24) = v5;
  sub_100044200(&qword_100605870, &qword_100605868);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_beginAccess();
  sub_100054B78((uint64_t *)&unk_1005F9ED0);
  sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  id v8 = [self defaultCenter];
  uint64_t v9 = MTApplicationWillResignActiveNotification;
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_100373220;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000AEC8;
  aBlock[3] = &unk_100565078;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  id v12 = [v8 addObserverForName:v9 object:0 queue:0 usingBlock:v11];
  _Block_release(v11);

  uint64_t v13 = (void *)(v6 + OBJC_IVAR____TtC8Podcasts13WidgetManager_observerTokens);
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

void sub_10002A0F0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)aBlock - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)aBlock - v8;
  id v10 = [self sharedApplication];
  id v11 = [v10 delegate];

  if (v11)
  {
    if (([v11 respondsToSelector:"window"] & 1) != 0
      && (id v12 = [v11 window]) != 0)
    {
      uint64_t v13 = v12;
      id v14 = [v12 rootViewController];
      if (v14)
      {
        uint64_t v15 = v14;
        type metadata accessor for MetricsController();
        swift_allocObject();
        swift_retain();
        uint64_t v16 = MetricsController.init(asPartOf:)();
        sub_10004D29C(0, (unint64_t *)&qword_100603DE0);
        if (static UITraitCollection.interfaceIdiomIsMac.getter())
        {
          sub_100347F6C(v15, v16);
          swift_unknownObjectRelease();

          swift_release();
        }
        else
        {
          uint64_t v26 = (objc_class *)type metadata accessor for WelcomeViewControllerMetricsSender();
          uint64_t v27 = (char *)objc_allocWithZone(v26);
          *(void *)&v27[OBJC_IVAR___MTWelcomeViewControllerMetricsSender_metricsController] = v16;
          v36.receiver = v27;
          v36.super_class = v26;
          swift_retain();
          id v28 = [super init];
          uint64_t v29 = self;
          uint64_t v30 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v31 = swift_allocObject();
          *(void *)(v31 + 16) = v30;
          *(void *)(v31 + 24) = v16;
          aBlock[4] = sub_10034A018;
          aBlock[5] = v31;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100059A98;
          aBlock[3] = &unk_100562EA0;
          uint64_t v32 = _Block_copy(aBlock);
          swift_retain();
          id v33 = v15;
          id v34 = v28;
          swift_release();
          [v29 presentWelcomeIfNeededFromViewController:v33 metricsSender:v34 acknowledgementCompletionBlock:v32];
          _Block_release(v32);
          swift_unknownObjectRelease();

          swift_release();
        }
      }
      else
      {
        static Logger.navigation.getter();
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v25 = 0;
          swift_slowDealloc();
          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v1 + 8))(v9, v0);
      }
    }
    else
    {
      static Logger.navigation.getter();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        swift_slowDealloc();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
    }
  }
  else
  {
    static Logger.navigation.getter();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
}

id PodcastsPlayerAdapter.controller(_:defersResponseReplacement:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 request];
  self;
  uint64_t v7 = (void *)swift_dynamicCastObjCClass();
  if (v7)
  {
    id result = [v7 playerPath];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v9 = result;
    dispatch thunk of PlayerPathCoordinator.didReceiveResponse(for:)();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
  }
  id v10 = (void *)swift_allocObject();
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = v3;
  swift_retain();
  id v11 = v3;
  dispatch_to_main_queue(_:)();

  return (id)swift_release();
}

void sub_10002A850()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v19 - v7;
  uint64_t v9 = OBJC_IVAR___MTBackgroundTaskManager_task;
  if (*(void *)&v1[OBJC_IVAR___MTBackgroundTaskManager_task] == UIBackgroundTaskInvalid)
  {
    static Logger.backgroundTaskManager.getter();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Tried to end background task but there is no ongoing background task.", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    static Logger.backgroundTaskManager.getter();
    uint64_t v13 = v1;
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = v13;
      uint64_t v17 = v16;
      *(_DWORD *)uint64_t v16 = 134217984;
      v19[1] = v16 + 4;
      uint64_t v21 = Int.hashValue.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ending background task with identifier hash: %ld.", v17, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      id v14 = v13;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    id v18 = [self sharedApplication];
    [v18 endBackgroundTask:*(void *)&v1[v9]];

    *(void *)&v1[v9] = UIBackgroundTaskInvalid;
  }
}

void sub_10002AD54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002AD74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - v7;
  static Logger.lifecycle.getter();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "willFinishLaunching. Preparing for background execution", v11, 2u);
    swift_slowDealloc();
  }

  id v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC8Podcasts11AppDelegate_objectGraph);
  type metadata accessor for AppDependencyManager();
  swift_retain();
  static AppDependencyManager.shared.getter();
  char v24 = 1;
  sub_10005E33C();
  AnyHashable.init<A>(_:)();
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  AppDependencyManager.add<A>(key:dependency:)();
  swift_release();
  swift_release();
  sub_100054B1C((uint64_t)v25, &qword_1005F7E70);
  sub_10002E6EC(v13);
  static Logger.lifecycle.getter();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v22 = v12;
    id v18 = (void *)v17;
    uint64_t v23 = v2;
    *(_DWORD *)uint64_t v16 = 138412290;
    sub_10004D29C(0, (unint64_t *)&unk_100603F38);
    id v19 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
    v25[0] = v19;
    uint64_t v2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v18 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting spotlight controller: %@", v16, 0xCu);
    sub_100054B78((uint64_t *)&unk_1005F9F00);
    swift_arrayDestroy();
    id v12 = v22;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v12(v6, v2);
  sub_10004D29C(0, &qword_100603F30);
  id v20 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  [v20 setup];

  swift_release();
  return 1;
}

uint64_t sub_10002B300()
{
  uint64_t v1 = v0;
  if (static Podcasts.isBlueMoonEnabled()())
  {
    uint64_t v2 = &selRef__reportUpNextChangeType_forPlayerItems_withData_;
    sub_100029BE8();
  }
  else
  {
    sub_100054B78(&qword_100605860);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100477D50;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v4;
    *(void *)(inited + 48) = sub_100370EEC;
    *(void *)(inited + 56) = 0;
    *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 72) = v5;
    *(void *)(inited + 80) = sub_100370F28;
    *(void *)(inited + 88) = 0;
    *(void *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 104) = v6;
    *(void *)(inited + 112) = sub_100370F64;
    *(void *)(inited + 120) = 0;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v7;
    *(void *)(inited + 144) = sub_100370FA0;
    *(void *)(inited + 152) = 0;
    *(void *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 168) = v8;
    *(void *)(inited + 176) = sub_100370FDC;
    *(void *)(inited + 184) = 0;
    *(void *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 200) = v9;
    *(void *)(inited + 208) = sub_100371018;
    *(void *)(inited + 216) = 0;
    *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 232) = v10;
    *(void *)(inited + 240) = sub_100371054;
    *(void *)(inited + 248) = 0;
    unint64_t v11 = sub_10016EC34(inited);
    uint64_t v12 = __chkstk_darwin(v11);
    uint64_t v13 = sub_100372CD0(v12, (void (*)(uint64_t, uint64_t, uint64_t (*(*)(uint64_t))(), uint64_t))sub_100372FE0);
    swift_bridgeObjectRelease();
    id v14 = (void *)(v1 + OBJC_IVAR____TtC8Podcasts13WidgetManager_observerTokens);
    swift_beginAccess();
    *id v14 = v13;
    swift_bridgeObjectRelease();
    id v15 = [self defaultCenter];
    uint64_t v16 = (void *)IMAVPlayerNotification_PeriodicUpdate;
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v39 = sub_100373020;
    uint64_t v40 = v17;
    uint64_t v35 = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    uint64_t v37 = sub_10000AEC8;
    uint64_t v38 = &unk_100564C90;
    id v18 = _Block_copy(&v35);
    id v19 = v16;
    swift_release();
    uint64_t v2 = &selRef__reportUpNextChangeType_forPlayerItems_withData_;
    id v20 = [v15 addObserverForName:v19 object:0 queue:0 usingBlock:v18];
    _Block_release(v18);

    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  uint64_t v21 = self;
  id v22 = [v21 defaultCenter];
  uint64_t v23 = MTApplicationWillTerminateNotification;
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v39 = sub_100373028;
  uint64_t v40 = v24;
  uint64_t v35 = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256;
  uint64_t v37 = sub_10000AEC8;
  uint64_t v38 = &unk_100564CB8;
  uint64_t v25 = _Block_copy(&v35);
  swift_release();
  id v26 = [v22 v2[249] v23 0 0 v25];
  _Block_release(v25);

  uint64_t v27 = (void *)(v1 + OBJC_IVAR____TtC8Podcasts13WidgetManager_observerTokens);
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  id v28 = [v21 defaultCenter];
  id v29 = [self sharedInstance];
  id v30 = [v29 privateQueueContext];

  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v39 = sub_10005CE94;
  uint64_t v40 = v31;
  uint64_t v35 = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256;
  uint64_t v37 = sub_10000AEC8;
  uint64_t v38 = &unk_100564CE0;
  uint64_t v32 = _Block_copy(&v35);
  swift_release();
  id v33 = [v28 v2[249] NSManagedObjectContextDidSaveNotification v30 0 v32];
  _Block_release(v32);

  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t sub_10002B990@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  uint64_t v8 = sub_100054B78(&qword_1005FA240);
  uint64_t result = v5(v6, v7, (char *)a1 + *(int *)(v8 + 64));
  *a2 = result;
  return result;
}

uint64_t sub_10002B9FC(void *a1, int a2, uint64_t a3)
{
  uint64_t v41 = a3;
  int v42 = a2;
  uint64_t v4 = type metadata accessor for NowPlayingViewModel.PlayerStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = type metadata accessor for AppEntityVisualState();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return 0;
  }
  uint64_t v37 = v11;
  id v40 = a1;
  uint64_t v16 = (void *)MPModelPodcastEpisode.contentId.getter();
  uint64_t v19 = v17;
  if (v18 <= 1u)
  {
    uint64_t v39 = v16;
    int v38 = v18;
    if ((_BYTE)v18)
    {
      uint64_t v36 = v17;
      uint64_t v24 = v16;
      id v25 = [v16 URIRepresentation];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = URL.absoluteString.getter();
      uint64_t v35 = v27;
      id v28 = v24;
      uint64_t v19 = v36;
      sub_1001EE70C(v28, v36, 1);
      uint64_t v29 = v12;
      id v20 = (void *)v26;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v29);
      uint64_t v22 = v35;
    }
    else
    {
      unint64_t v43 = v16;
      sub_1001A5874();
      id v20 = (void *)BinaryInteger.description.getter();
      uint64_t v22 = v21;
    }
LABEL_9:
    char v30 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v41, v4);
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      id v31 = v40;
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for NowPlayingViewModel.PlayerStyle.fullScreen(_:), v4);
      char v32 = static NowPlayingViewModel.PlayerStyle.== infix(_:_:)();
      id v33 = *(void (**)(char *, uint64_t))(v5 + 8);
      v33(v8, v4);
      v33(v10, v4);
      id v31 = v40;
      if ((v32 & 1) == 0)
      {
        unint64_t v43 = _swiftEmptyArrayStorage;
        sub_10001E544(&qword_1005FA248, 255, (void (*)(uint64_t))&type metadata accessor for AppEntityVisualState);
        sub_100054B78(&qword_1005FA250);
        sub_100044200(&qword_1005FA258, &qword_1005FA250);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        goto LABEL_15;
      }
    }
    static AppEntityVisualState.primary.getter();
LABEL_15:
    type metadata accessor for EpisodeEntity();
    unint64_t v43 = v20;
    uint64_t v44 = v22;
    objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation());
    sub_10001E544(&qword_1005FA260, 255, (void (*)(uint64_t))&type metadata accessor for EpisodeEntity);
    uint64_t v23 = AppEntityViewAnnotation.init<A>(entityType:identifier:state:)();

    sub_1001EE70C(v39, v19, v38);
    return v23;
  }
  if (v18 == 2)
  {
    int v38 = v18;
    id v20 = v16;
    swift_bridgeObjectRetain();
    uint64_t v39 = v20;
    uint64_t v22 = v19;
    goto LABEL_9;
  }

  return 0;
}

void sub_10002C57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  _Block_object_dispose((const void *)(v31 - 256), 8);
  _Block_object_dispose((const void *)(v31 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002C5E0()
{
  uint64_t v74 = *v0;
  uint64_t v58 = sub_100054B78(&qword_1005FA198);
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v56 = (char *)&v55 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100054B78(&qword_1005FA1A0);
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v59 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100054B78(&qword_1005F9F20);
  __chkstk_darwin(v3 - 8);
  v81 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100054B78(&qword_1005FA1A8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v79 = v5;
  uint64_t v80 = v6;
  __chkstk_darwin(v5);
  v73 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100054B78((uint64_t *)&unk_1006063D0);
  uint64_t v66 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100054B78(&qword_1005FA1B0);
  uint64_t v64 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100054B78(&qword_1005FA1B8);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v67 = v13;
  uint64_t v68 = v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100054B78(&qword_1005FA1C0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v70 = v17;
  uint64_t v71 = v18;
  __chkstk_darwin(v17);
  uint64_t v63 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100054B78(&qword_1005FA1C8);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v75 = v20;
  uint64_t v76 = v21;
  __chkstk_darwin(v20);
  v69 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100054B78(&qword_1005FA1D0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v77 = v23;
  uint64_t v78 = v24;
  __chkstk_darwin(v23);
  id v72 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v0;
  dispatch thunk of PlaybackController.$nowPlayingItem.getter();
  dispatch thunk of PlaybackController.$isPlaying.getter();
  uint64_t v26 = sub_100012998();
  swift_beginAccess();
  uint64_t v27 = *(void **)(v26 + 192);
  swift_retain();
  swift_release();
  id v82 = v27;
  sub_100054B78(&qword_1005FA1D8);
  sub_100044200(&qword_100603410, &qword_1005FA1B0);
  sub_100044200(&qword_1005F9FE0, (uint64_t *)&unk_1006063D0);
  sub_100044200(&qword_1005FA1E0, &qword_1005FA1D8);
  uint64_t v28 = v10;
  uint64_t v29 = v65;
  Publisher.combineLatest<A, B>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v29);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v12, v28);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v74;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_10002B9F8;
  *(void *)(v31 + 24) = v30;
  sub_100054B78(&qword_1005FA1E8);
  sub_100044200(&qword_1005FA1F0, &qword_1005FA1B8);
  char v32 = v63;
  uint64_t v33 = v67;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v16, v33);
  id v34 = v62;
  id v82 = (id)v62[11];
  uint64_t v35 = (void *)sub_100054B78(&qword_1005FA1F8);
  uint64_t v36 = sub_100054B78(&qword_1005FA200);
  uint64_t v37 = sub_100044200(&qword_1005FA208, &qword_1005FA1F8);
  int v38 = v73;
  Publisher.nonNilValues<A>()();
  sub_100044200(&qword_1005FA210, &qword_1005FA1C0);
  id v82 = v35;
  uint64_t v83 = v36;
  uint64_t v39 = v34;
  uint64_t v84 = v37;
  swift_getOpaqueTypeConformance2();
  uint64_t v41 = v69;
  uint64_t v40 = v70;
  uint64_t v42 = v79;
  Publisher.combineLatest<A>(_:)();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v38, v42);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v32, v40);
  sub_1000566BC();
  id v82 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v43 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v44 = (uint64_t)v81;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v81, 1, 1, v43);
  sub_100044200(&qword_1005FA218, &qword_1005FA1C8);
  sub_10001E544((unint64_t *)&qword_1005F8B80, 255, (void (*)(uint64_t))sub_1000566BC);
  uint64_t v45 = v72;
  uint64_t v46 = v75;
  Publisher.receive<A>(on:options:)();
  sub_100054B1C(v44, &qword_1005F9F20);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v41, v46);
  sub_100044200(&qword_1005FA220, &qword_1005FA1D0);
  uint64_t v47 = v77;
  uint64_t v48 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v45, v47);
  v39[9] = v48;
  swift_release();
  uint64_t result = static Podcasts.isUIPSidebarEnabled.getter();
  if ((result & 1) == 0)
  {
    uint64_t v50 = v56;
    dispatch thunk of RootSplitViewController.$interfaceMode.getter();
    sub_100044200(&qword_1005FA228, &qword_1005FA198);
    sub_1001EE678();
    uint64_t v51 = v59;
    uint64_t v52 = v58;
    Publisher<>.removeDuplicates()();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v50, v52);
    swift_allocObject();
    swift_weakInit();
    sub_100044200(&qword_1005FA238, &qword_1005FA1A0);
    uint64_t v53 = v61;
    uint64_t v54 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v51, v53);
    v39[8] = v54;
    return swift_release();
  }
  return result;
}

id sub_10002D174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t updated = type metadata accessor for FeedUpdateRequest();
  uint64_t v54 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v58 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FeedManagerBagConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68[3] = type metadata accessor for FeedIngesterProvider();
  void v68[4] = sub_10004ADC4(&qword_100602208, (void (*)(uint64_t))type metadata accessor for FeedIngesterProvider);
  v68[0] = a2;
  uint64_t v14 = self;
  swift_retain();
  id v15 = [v14 sharedInstance];
  id v16 = [v15 importContext];

  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  sub_100056D54((uint64_t)v68, (uint64_t)v67);
  type metadata accessor for StoreFeedUpdater();
  swift_allocObject();
  id v17 = v16;
  uint64_t v18 = StoreFeedUpdater.init(bagConfiguration:ctx:ingesterProvider:)();
  id result = [objc_allocWithZone((Class)MTExternalFeedDownloader) initWithDelegate:0];
  if (result)
  {
    uint64_t v20 = result;
    sub_100056D54((uint64_t)v68, (uint64_t)v67);
    Class v60 = (Class)type metadata accessor for RSSFeedUpdater();
    id v21 = objc_allocWithZone(v60);
    uint64_t v22 = v17;
    id v23 = v20;
    uint64_t v56 = v22;
    id v55 = v23;
    uint64_t v24 = (void *)RSSFeedUpdater.init(ctx:ingesterProvider:externalFeedDownloader:)();
    uint64_t v25 = (void *)(a3 + OBJC_IVAR___MTFeedManager__system);
    uint64_t v26 = *(void *)(a3 + OBJC_IVAR___MTFeedManager__system);
    *uint64_t v25 = v24;
    v25[1] = &protocol witness table for RSSFeedUpdater;
    v25[2] = v18;
    uint64_t v27 = a3;
    id v28 = v24;
    swift_retain_n();
    id v29 = v28;
    sub_10003B4E8(v26);
    id v63 = v29;
    sub_100043024((uint64_t)v29, (uint64_t)&protocol witness table for RSSFeedUpdater, v18);
    uint64_t v57 = v27;
    uint64_t v30 = (uint64_t *)(v27 + OBJC_IVAR___MTFeedManager__pendingRequests);
    swift_beginAccess();
    uint64_t v31 = *v30;
    uint64_t *v30 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32)
    {
      uint64_t v53 = v8;
      id v61 = self;
      uint64_t v33 = v54 + 16;
      id v34 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
      unint64_t v35 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v54 = v31;
      uint64_t v36 = v31 + v35;
      uint64_t v37 = *(void *)(v33 + 56);
      int v38 = (void (**)(char *, uint64_t))(v33 - 8);
      v34(v7, v36, updated);
      while (1)
      {
        id v40 = v63;
        swift_retain();
        if ([v61 isEmpty:FeedUpdateRequest.podcastStoreId.getter()]) {
          dispatch thunk of URLBasedFeedUpdater.updateFeed(request:)();
        }
        else {
          dispatch thunk of StoreFeedUpdater.updateFeed(request:)();
        }

        swift_release();
        uint64_t v39 = updated;
        (*v38)(v7, updated);
        v36 += v37;
        if (!--v32) {
          break;
        }
        v34(v7, v36, v39);
      }
      swift_bridgeObjectRelease();
      uint64_t v8 = v53;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v41 = (uint64_t *)(v57 + OBJC_IVAR___MTFeedManager__pendingBlocks);
    swift_beginAccess();
    uint64_t v42 = *v41;
    uint64_t *v41 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v43 = *(void *)(v42 + 16);
    id v44 = v63;
    if (v43)
    {
      uint64_t v45 = v42 + 40;
      do
      {
        uint64_t v46 = *(void (**)(id *))(v45 - 8);
        id v64 = v44;
        uint64_t v65 = &protocol witness table for RSSFeedUpdater;
        uint64_t v66 = v18;
        swift_retain();
        v46(&v64);
        swift_release();
        v45 += 16;
        --v43;
      }
      while (v43);
    }
    swift_bridgeObjectRelease();
    id v64 = v44;
    uint64_t v65 = &protocol witness table for RSSFeedUpdater;
    uint64_t v66 = v18;
    sub_100054B78((uint64_t *)&unk_100602020);
    UninitializedCurrentValueSubject.send(_:)();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v47 = v58;
    static OS_os_log.feedUpdate.getter();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "System setup complete", v50, 2u);
      swift_slowDealloc();

      swift_release_n();
      id v51 = v44;
    }
    else
    {

      swift_release_n();
      uint64_t v48 = v56;
      id v51 = v55;
    }
    uint64_t v52 = v59;

    (*(void (**)(char *, uint64_t))(v8 + 8))(v47, v52);
    return (id)sub_10004D2D8((uint64_t)v68);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10002D838()
{
  uint64_t v0 = type metadata accessor for Podcasts();
  uint64_t v40 = v0;
  uint64_t v41 = (char **)sub_10005E4F8((unint64_t *)&qword_1005F79D0, (void (*)(uint64_t))&type metadata accessor for Podcasts);
  uint64_t v1 = sub_10004A244(v39);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v0 - 8) + 104))(v1, enum case for Podcasts.simplifiedSyncDirtyHandling(_:), v0);
  char v2 = isFeatureEnabled(_:)();
  sub_10004D2D8((uint64_t)v39);
  uint64_t EpisodesStates = type metadata accessor for FetchEpisodesStates();
  uint64_t v4 = swift_allocObject();
  uint64_t v40 = EpisodesStates;
  uint64_t v41 = &off_100564488;
  v39[0] = v4;
  if (v2)
  {
    uint64_t v5 = type metadata accessor for SimplifiedPodcastsStateTransitionsFinder();
    uint64_t v6 = (void *)swift_allocObject();
    uint64_t v7 = sub_100055EF0((uint64_t)v39, EpisodesStates);
    __chkstk_darwin(v7);
    uint64_t v9 = (uint64_t *)&v38[-v8];
    (*(void (**)(unsigned char *))(v10 + 16))(&v38[-v8]);
    uint64_t v11 = *v9;
    id v6[5] = EpisodesStates;
    v6[6] = &off_100564488;
    v6[2] = v11;
    sub_10004D2D8((uint64_t)v39);
    uint64_t v12 = &off_100566DC8;
  }
  else
  {
    uint64_t v5 = type metadata accessor for OriginBasedPodcastsStateTransitionsFinder();
    uint64_t v6 = (void *)swift_allocObject();
    uint64_t v13 = sub_100055EF0((uint64_t)v39, EpisodesStates);
    __chkstk_darwin(v13);
    id v15 = (uint64_t *)&v38[-v14];
    (*(void (**)(unsigned char *))(v16 + 16))(&v38[-v14]);
    uint64_t v17 = *v15;
    id v6[5] = EpisodesStates;
    v6[6] = &off_100564488;
    v6[2] = v17;
    sub_10004D2D8((uint64_t)v39);
    uint64_t v12 = (char **)&off_10055A170;
  }
  uint64_t v40 = v5;
  uint64_t v41 = v12;
  v39[0] = (uint64_t)v6;
  type metadata accessor for SyncKeysRepository();
  uint64_t v18 = (void *)static SyncKeysRepository.shared.getter();
  id v19 = [self sharedInstance];
  id v20 = [self shared];
  sub_100056D54((uint64_t)v39, (uint64_t)v38);
  type metadata accessor for ImplicitFollowsDecayCoordinator();
  swift_allocObject();
  id v21 = ImplicitFollowsDecayCoordinator.init()();
  uint64_t v22 = self;
  id result = [v22 sharedInstance];
  if (result)
  {
    id v24 = result;
    sub_10004D29C(0, (unint64_t *)&unk_1005F7500);
    id v25 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
    type metadata accessor for PodcastsStateTransitionsExternalEffects();
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = v24;
    v26[3] = v25;
    v26[4] = v19;
    type metadata accessor for PodcastsStateTransitions();
    uint64_t v27 = (void *)swift_allocObject();
    id v28 = v19;
    id v29 = v18;
    uint64_t v30 = sub_10001379C((uint64_t)v38, v29, (uint64_t)v21, (uint64_t)v26, v27);

    type metadata accessor for EpisodeStateRepository();
    uint64_t v31 = static EpisodeStateRepository.shared.getter();
    id v32 = [self sharedInstance];
    type metadata accessor for PodcastsStateCoordinatorPersistentStore();
    swift_allocObject();
    id v33 = v29;
    uint64_t v34 = PodcastsStateCoordinatorPersistentStore.init(syncKeysRepository:)();
    id result = [v22 sharedInstance];
    if (result)
    {
      uint64_t v35 = (uint64_t)result;
      uint64_t v36 = (char *)objc_allocWithZone((Class)type metadata accessor for PodcastsStateCoordinator());
      id v37 = sub_100006288((uint64_t)v20, (uint64_t)v30, v31, (uint64_t)v32, v34, (uint64_t)v28, v35, v36);

      sub_10004D2D8((uint64_t)v39);
      return v37;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002DD9C(void *a1)
{
  char v2 = v1;
  uint64_t v56 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(uint64_t (***)(uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v66 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for DispatchQoS();
  uint64_t v65 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MetricsPipeline();
  uint64_t v71 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v59 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = v10;
  __chkstk_darwin(v9);
  uint64_t v70 = (char *)v55 - v11;
  uint64_t v12 = type metadata accessor for AppEnterMetricsEvent.EnterKind();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v55 - v17;
  type metadata accessor for AnalyticsIdentifierManager();
  id v19 = (void *)static AnalyticsIdentifierManager.sharedInstance.getter();
  dispatch thunk of AnalyticsIdentifierManager.resetIfNeeded()();

  type metadata accessor for MetricsActivity();
  id v20 = (void *)static MetricsActivity.shared.getter();
  char active = MetricsActivity.hasActiveCrossfireReferral.getter();

  uint64_t v67 = v4;
  uint64_t v68 = v3;
  id v64 = v7;
  if (active)
  {
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v18, enum case for AppEnterMetricsEvent.EnterKind.link(_:), v12);
  }
  else
  {
    if (v2[OBJC_IVAR____TtC8Podcasts11AppDelegate_appHasBeenInBackground] == 1) {
      uint64_t v22 = (unsigned int *)&enum case for AppEnterMetricsEvent.EnterKind.taskSwitch(_:);
    }
    else {
      uint64_t v22 = (unsigned int *)&enum case for AppEnterMetricsEvent.EnterKind.launch(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v18, *v22, v12);
  }
  uint64_t v58 = OBJC_IVAR____TtC8Podcasts11AppDelegate_objectGraph;
  swift_retain();
  id v23 = v70;
  uint64_t v24 = v72;
  BaseObjectGraph.inject<A>(_:)();
  swift_release();
  type metadata accessor for LegacyPlaybackQueueMigrator();
  uint64_t v25 = swift_allocObject();
  type metadata accessor for PlaybackController();
  swift_retain();
  BaseObjectGraph.inject<A>(_:)();
  *(void *)(v25 + 16) = aBlock;
  sub_10001C1A8();
  swift_release();
  uint64_t v60 = v25;
  sub_1000100E4();
  v55[2] = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  uint64_t v57 = (uint64_t (*)(uint64_t))static OS_dispatch_queue.metricsProcessingQueue.getter();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  id v61 = v18;
  v26(v16, v18, v12);
  uint64_t v27 = v13;
  uint64_t v28 = v12;
  uint64_t v29 = v71;
  uint64_t v30 = v59;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v59, v23, v24);
  unint64_t v31 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v32 = (v62 + *(unsigned __int8 *)(v29 + 80) + v31) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v2;
  uint64_t v62 = v27;
  uint64_t v63 = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v33 + v31, v16, v28);
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v33 + v32, v30, v24);
  uint64_t v78 = sub_100007E18;
  uint64_t v79 = v33;
  aBlock = _NSConcreteStackBlock;
  uint64_t v75 = 1107296256;
  uint64_t v76 = sub_10003B424;
  uint64_t v77 = &unk_100562FB8;
  uint64_t v34 = _Block_copy(&aBlock);
  uint64_t v35 = v2;
  uint64_t v36 = v64;
  static DispatchQoS.unspecified.getter();
  v73 = &_swiftEmptyArrayStorage;
  uint64_t v37 = sub_10003ABC8((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v38 = sub_100054B78((uint64_t *)&unk_1005FE4B0);
  uint64_t v39 = sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  uint64_t v40 = v66;
  v55[1] = v38;
  v55[0] = v39;
  uint64_t v41 = v68;
  uint64_t v59 = (char *)v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v42 = v57;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v34);

  uint64_t v57 = v67[1];
  ((void (*)(char *, uint64_t))v57)(v40, v41);
  uint64_t v65 = *(void *)(v65 + 8);
  ((void (*)(char *, uint64_t))v65)(v36, v69);
  swift_release();
  swift_retain();
  sub_100020F50();
  swift_release();
  uint64_t v43 = self;
  uint64_t v78 = sub_10000BB14;
  uint64_t v79 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v75 = 1107296256;
  uint64_t v67 = &v76;
  uint64_t v76 = (uint64_t (*)(uint64_t))sub_100059A98;
  uint64_t v77 = &unk_100562FE0;
  id v44 = _Block_copy(&aBlock);
  [v43 getActiveRouteWithTimeout:v44 completion:1.0];
  _Block_release(v44);
  id v45 = [self standardUserDefaults];
  NSString v46 = String._bridgeToObjectiveC()();
  id v47 = [v45 stringForKey:v46];

  if (v47)
  {

    uint64_t v48 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v49 = swift_allocObject();
    uint64_t v50 = v56;
    *(void *)(v49 + 16) = v35;
    *(void *)(v49 + 24) = v50;
    uint64_t v78 = sub_10034A2A0;
    uint64_t v79 = v49;
    aBlock = _NSConcreteStackBlock;
    uint64_t v75 = 1107296256;
    uint64_t v76 = sub_10003B424;
    uint64_t v77 = &unk_100563030;
    id v51 = _Block_copy(&aBlock);
    uint64_t v52 = v35;
    id v53 = v50;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock = (void **)&_swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v51);
    swift_release();

    ((void (*)(char *, uint64_t))v57)(v40, v41);
    ((void (*)(char *, uint64_t))v65)(v36, v69);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v61, v63);
}

uint64_t sub_10002E6EC(uint64_t a1)
{
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_100603370);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MediaCacheDeleteRemovalProcessor();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MediaCacheDeleteProcessor();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  id v13 = v28;
  uint64_t v14 = (objc_class *)type metadata accessor for SharedPlaybackController();
  uint64_t v15 = objc_allocWithZone(v14);
  v15[OBJC_IVAR___MTSharedPlaybackController_isPlaying] = 0;
  *(void *)&v15[OBJC_IVAR___MTSharedPlaybackController_subscriptions] = _swiftEmptyArrayStorage;
  *(void *)&v15[OBJC_IVAR___MTSharedPlaybackController_playbackController] = v13;
  v27.receiver = v15;
  v27.super_class = v14;
  swift_retain();
  id v16 = [super init];
  sub_10001A1A8();

  swift_release();
  uint64_t v17 = (void *)qword_10061AC90;
  qword_10061AC90 = (uint64_t)v16;

  if (static Podcasts.isBlueMoonEnabled()())
  {
    type metadata accessor for UserActivityController();
    BaseObjectGraph.inject<A>(_:)();
    sub_100024554();
    swift_release();
    type metadata accessor for RemoteFollowCommandCenter();
    BaseObjectGraph.inject<A>(_:)();
    id v18 = v28;
    dispatch thunk of RemoteFollowCommandCenter.beginObservingPlaybackQueue()();

    type metadata accessor for NowPlayingItemPlayheadSynchronizer();
    BaseObjectGraph.inject<A>(_:)();
    dispatch thunk of NowPlayingItemPlayheadSynchronizer.beginObserving()();
    swift_release();
  }
  sub_10004D29C(0, &qword_1005FF720);
  BaseObjectGraph.inject<A>(_:)();

  BaseObjectGraph.inject<A>(_:)();
  MediaCacheDeleteProcessor.start()();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  BaseObjectGraph.inject<A>(_:)();
  MediaCacheDeleteRemovalProcessor.start()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static TaskPriority.utility.getter();
  uint64_t v19 = type metadata accessor for TaskPriority();
  id v20 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  v20(v4, 0, 1, v19);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v21 = static MainActor.shared.getter();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v21;
  v22[3] = &protocol witness table for MainActor;
  void v22[4] = a1;
  sub_10000D90C((uint64_t)v4, (uint64_t)&unk_100603F50, (uint64_t)v22);
  swift_release();
  sub_100054B78((uint64_t *)&unk_1005FF730);
  BaseObjectGraph.inject<A>(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for SiriIntentDonator();
  BaseObjectGraph.inject<A>(_:)();
  SiriIntentDonator.beginObserving()();
  swift_release();
  static TaskPriority.userInitiated.getter();
  v20(v4, 0, 1, v19);
  swift_retain();
  uint64_t v23 = static MainActor.shared.getter();
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = v23;
  v24[3] = &protocol witness table for MainActor;
  v24[4] = a1;
  sub_10001201C((uint64_t)v4, (uint64_t)&unk_100603F68, (uint64_t)v24);
  return swift_release();
}

void sub_10002EE4C(void *a1, void *a2)
{
  uint64_t v4 = self;
  id v5 = [v4 sharedApplication];
  id v6 = [v5 delegate];

  if (v6)
  {
    uint64_t v72 = &OBJC_PROTOCOL___MTAppDelegateProtocol;
    uint64_t v7 = swift_dynamicCastObjCProtocolConditional();
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      self;
      uint64_t v9 = swift_dynamicCastObjCClass();
      if (v9)
      {
        uint64_t v10 = v9;
        if ([v8 respondsToSelector:"createWindowWithScene:"])
        {
          id v11 = a1;
          id v12 = [v8 createWindowWithScene:v10];
          if (!v12)
          {
            swift_unknownObjectRelease();

            return;
          }
          id v13 = v12;
          uint64_t v62 = v11;
          id v14 = [v12 traitCollection];
          id v15 = [v14 userInterfaceIdiom];

          if (!v15)
          {
            id v16 = self;
            id v17 = v13;
            id v18 = [v16 traitCollectionWithHorizontalSizeClass:1];
            [v17 _setLocalOverrideTraitCollection:v18];
          }
          [v8 setWindow:v13];
          if ([v8 respondsToSelector:"willConnectScene"]) {
            [v8 willConnectScene];
          }
          [v13 makeKeyAndVisible];
          id v19 = [a2 shortcutItem];
          id v20 = (void *)&unk_10046C000;
          uint64_t v65 = v4;
          id v61 = v13;
          if (v19)
          {
            uint64_t v21 = v19;
            static os_log_type_t.default.getter();
            sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
            uint64_t v22 = (void *)static OS_os_log.launch.getter();
            sub_100054B78(&qword_1005F7720);
            uint64_t v23 = swift_allocObject();
            *(_OWORD *)(v23 + 16) = xmmword_10046D010;
            id v24 = [v21 type];
            uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v27 = v26;

            *(void *)(v23 + 56) = &type metadata for String;
            *(void *)(v23 + 64) = sub_10004DA4C();
            *(void *)(v23 + 32) = v25;
            *(void *)(v23 + 40) = v27;
            os_log(_:dso:log:_:_:)();

            swift_bridgeObjectRelease();
            id v28 = [v65 sharedApplication];
            id v29 = [v28 delegate];

            if (v29)
            {
              id v20 = &unk_10046C000;
              if ([v29 respondsToSelector:"application:performActionForShortcutItem:completionHandler:"])
              {
                swift_unknownObjectRetain();
                id v30 = [v65 sharedApplication];
                uint64_t v70 = UInt64.int64Representation.getter;
                uint64_t v71 = 0;
                aBlock = _NSConcreteStackBlock;
                uint64_t v67 = 1107296256;
                uint64_t v68 = sub_100226350;
                uint64_t v69 = &unk_10055D788;
                unint64_t v31 = _Block_copy(&aBlock);
                [v29 application:v30 performActionForShortcutItem:v21 completionHandler:v31];
                _Block_release(v31);

                swift_unknownObjectRelease_n();
                swift_release();
              }
              else
              {

                swift_unknownObjectRelease();
              }
            }
            else
            {

              id v20 = (void *)&unk_10046C000;
            }
          }
          id v32 = [a2 URLContexts];
          sub_10004D29C(0, &qword_1005FECE8);
          sub_10002F7C8(&qword_1005FECF0, &qword_1005FECE8);
          uint64_t v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          if ((v33 & 0xC000000000000001) != 0)
          {
            if (__CocoaSet.count.getter() < 1)
            {
LABEL_22:
              swift_bridgeObjectRelease();
              id v34 = [a2 userActivities];
              sub_10004D29C(0, &qword_1005FECF8);
              sub_10002F7C8((unint64_t *)&unk_1005FED00, &qword_1005FECF8);
              uint64_t v35 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

              if ((v35 & 0xC000000000000001) != 0)
              {
                __CocoaSet.makeIterator()();
                Set.Iterator.init(_cocoa:)();
                uint64_t v35 = v73;
                uint64_t v64 = v74;
                uint64_t v36 = v75;
                uint64_t v37 = v76;
                unint64_t v38 = v77;
              }
              else
              {
                uint64_t v37 = 0;
                uint64_t v39 = -1 << *(unsigned char *)(v35 + 32);
                uint64_t v64 = v35 + 56;
                uint64_t v40 = ~v39;
                uint64_t v41 = -v39;
                if (v41 < 64) {
                  uint64_t v42 = ~(-1 << v41);
                }
                else {
                  uint64_t v42 = -1;
                }
                unint64_t v38 = v42 & *(void *)(v35 + 56);
                uint64_t v36 = v40;
              }
              int64_t v63 = (unint64_t)(v36 + 64) >> 6;
              uint64_t v43 = v20[508];
              while (1)
              {
                if (v35 < 0)
                {
                  if (!__CocoaSet.Iterator.next()()) {
                    goto LABEL_58;
                  }
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  id v47 = aBlock;
                  swift_unknownObjectRelease();
                  uint64_t v46 = v37;
                  uint64_t v44 = v38;
                }
                else
                {
                  if (v38)
                  {
                    uint64_t v44 = (v38 - 1) & v38;
                    unint64_t v45 = __clz(__rbit64(v38)) | (v37 << 6);
                    uint64_t v46 = v37;
                  }
                  else
                  {
                    int64_t v48 = v37 + 1;
                    if (__OFADD__(v37, 1))
                    {
                      __break(1u);
                      return;
                    }
                    if (v48 >= v63) {
                      goto LABEL_58;
                    }
                    unint64_t v49 = *(void *)(v64 + 8 * v48);
                    uint64_t v46 = v37 + 1;
                    if (!v49)
                    {
                      uint64_t v46 = v37 + 2;
                      if (v37 + 2 >= v63) {
                        goto LABEL_58;
                      }
                      unint64_t v49 = *(void *)(v64 + 8 * v46);
                      if (!v49)
                      {
                        uint64_t v46 = v37 + 3;
                        if (v37 + 3 >= v63) {
                          goto LABEL_58;
                        }
                        unint64_t v49 = *(void *)(v64 + 8 * v46);
                        if (!v49)
                        {
                          uint64_t v46 = v37 + 4;
                          if (v37 + 4 >= v63) {
                            goto LABEL_58;
                          }
                          unint64_t v49 = *(void *)(v64 + 8 * v46);
                          if (!v49)
                          {
                            uint64_t v50 = v37 + 5;
                            while (v63 != v50)
                            {
                              unint64_t v49 = *(void *)(v64 + 8 * v50++);
                              if (v49)
                              {
                                uint64_t v46 = v50 - 1;
                                goto LABEL_51;
                              }
                            }
LABEL_58:
                            sub_10004E644();
                            swift_unknownObjectRelease();

                            return;
                          }
                        }
                      }
                    }
LABEL_51:
                    uint64_t v44 = (v49 - 1) & v49;
                    unint64_t v45 = __clz(__rbit64(v49)) + (v46 << 6);
                  }
                  id v47 = (void **)*(id *)(*(void *)(v35 + 48) + 8 * v45);
                }
                if (!v47) {
                  goto LABEL_58;
                }
                static os_log_type_t.default.getter();
                sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
                id v51 = (void *)static OS_os_log.launch.getter();
                sub_100054B78(&qword_1005F7720);
                uint64_t v52 = swift_allocObject();
                *(_OWORD *)(v52 + 16) = xmmword_10046D010;
                id v53 = [v47 activityType];
                uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v56 = v55;

                *(void *)(v52 + 56) = &type metadata for String;
                *(void *)(v52 + 64) = sub_10004DA4C();
                *(void *)(v52 + 32) = v54;
                *(void *)(v52 + 40) = v56;
                os_log(_:dso:log:_:_:)();

                swift_bridgeObjectRelease();
                id v57 = [v65 sharedApplication];
                id v58 = [v57 delegate];

                if (v58)
                {
                  if ([v58 respondsToSelector:"application:continueUserActivity:restorationHandler:"])
                  {
                    id v59 = [v65 sharedApplication];
                    uint64_t v70 = UInt64.int64Representation.getter;
                    uint64_t v71 = 0;
                    aBlock = _NSConcreteStackBlock;
                    uint64_t v67 = v43;
                    uint64_t v68 = sub_1002A5818;
                    uint64_t v69 = &unk_10055D760;
                    uint64_t v60 = _Block_copy(&aBlock);
                    [v58 application:v59 continueUserActivity:v47 restorationHandler:v60];
                    _Block_release(v60);

                    swift_unknownObjectRelease();
                    swift_release();
                  }
                  else
                  {

                    swift_unknownObjectRelease();
                  }
                }
                else
                {
                }
                uint64_t v37 = v46;
                unint64_t v38 = v44;
              }
            }
          }
          else if (*(uint64_t *)(v33 + 16) < 1)
          {
            goto LABEL_22;
          }
          sub_1002A5BD0(v33);
          goto LABEL_22;
        }
      }
    }
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10002F7C8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004D29C(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002F818(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v11 = (void *)result;
    id v19 = [*(id *)(result + OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator) metadataPlayerPath];
    id v12 = [v19 route];
    uint64_t v20 = v6;
    if (v12)
    {
      id v13 = v12;
      if (([v12 isDeviceRoute] & 1) == 0)
      {
        id v15 = [self sharedController];
        id v14 = [objc_allocWithZone((Class)MPVolumeControllerRouteDataSource) initWithGroupRoute:v13 outputDeviceRoute:0];
        [v15 setActiveDataSource:v14];

        goto LABEL_7;
      }
    }
    id v14 = [self sharedController];
    [v14 setActiveDataSource:0];
LABEL_7:

    sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
    id v16 = (void *)static OS_dispatch_queue.main.getter();
    aBlock[4] = sub_10003BEEC;
    aBlock[5] = a1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003B424;
    aBlock[3] = &unk_1005637E8;
    id v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100352950((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100054B78((uint64_t *)&unk_1005FE4B0);
    sub_10002FBEC();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v20);
  }
  return result;
}

unint64_t sub_10002FBEC()
{
  unint64_t result = qword_1005FA640;
  if (!qword_1005FA640)
  {
    sub_100044244((uint64_t *)&unk_1005FE4B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FA640);
  }
  return result;
}

unint64_t sub_10002FC48()
{
  unint64_t result = qword_1005FA630;
  if (!qword_1005FA630)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FA630);
  }
  return result;
}

id sub_10002FCA0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v51 = *(void *)(v1 - 8);
  uint64_t v52 = v1;
  __chkstk_darwin(v1);
  uint64_t v50 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OSSignposter();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for OSSignpostID();
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v42 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LibraryImageProvider();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  uint64_t v56 = v7;
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v48 = *(void *)(v10 - 8);
  uint64_t v49 = v10;
  __chkstk_darwin(v10);
  id v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = v0;
  UninitializedCurrentValueSubject.init()();
  uint64_t v53 = OBJC_IVAR___MTFeedManager_queue;
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v13);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10004ADC4((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v17[v53] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v18 = &v17[OBJC_IVAR___MTFeedManager__system];
  *uint64_t v18 = 0;
  v18[1] = 0;
  void v18[2] = 0;
  *(void *)&v17[OBJC_IVAR___MTFeedManager__pendingRequests] = _swiftEmptyArrayStorage;
  *(void *)&v17[OBJC_IVAR___MTFeedManager__pendingBlocks] = _swiftEmptyArrayStorage;
  *(void *)&v17[OBJC_IVAR___MTFeedManager__subscriptions] = _swiftEmptyArrayStorage;
  v17[OBJC_IVAR___MTFeedManager__wasUpdating] = 0;
  *(void *)&v17[OBJC_IVAR___MTFeedManager_downloadManager] = 0;
  id v19 = v54;
  static LibraryImageProvider.background.getter();
  type metadata accessor for CategoryIngester();
  uint64_t v20 = (uint64_t *)swift_allocObject();
  uint64_t v21 = v55;
  void v20[5] = v55;
  v20[6] = (uint64_t)&protocol witness table for LibraryImageProvider;
  uint64_t v22 = sub_10004A244(v20 + 2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v56 + 32))(v22, v19, v21);
  id v23 = [self sharedInstance];
  id v24 = [v23 importContext];

  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v26 = result;
    id v27 = [self sharedInstance];
    id result = [self sharedInstance];
    if (result)
    {
      id v28 = result;
      type metadata accessor for FeedIngesterProvider();
      id v29 = (void *)swift_allocObject();
      swift_retain();
      id v30 = sub_100012D1C(v24, v26, v27, (uint64_t)v20, v28, v29);

      swift_release();
      *(void *)&v17[OBJC_IVAR___MTFeedManager__feedIngesterProvider] = v30;
      unint64_t v31 = v43;
      static OSSignposter.feedUpdate.getter();
      OSSignposter.logHandle.getter();
      id v32 = v42;
      OSSignpostID.init(log:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v47);
      (*(void (**)(unsigned char *, char *, uint64_t))(v44 + 32))(&v17[OBJC_IVAR___MTFeedManager_signpostID], v32, v45);

      uint64_t v33 = (objc_class *)type metadata accessor for FeedManager();
      v59.receiver = v17;
      v59.super_class = v33;
      [super init];
      uint64_t v35 = swift_allocObject();
      *(void *)(v35 + 16) = v34;
      aBlock[4] = sub_10005D420;
      aBlock[5] = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003B424;
      aBlock[3] = &unk_100560E00;
      uint64_t v36 = _Block_copy(aBlock);
      id v37 = v34;
      unint64_t v38 = v12;
      static DispatchQoS.unspecified.getter();
      id v57 = _swiftEmptyArrayStorage;
      sub_10004ADC4((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100054B78((uint64_t *)&unk_1005FE4B0);
      sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
      uint64_t v39 = v50;
      uint64_t v40 = v52;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v36);
      swift_release();

      (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v40);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v49);
      swift_release();
      return v37;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100030564(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue] = _swiftEmptyArrayStorage;
  uint64_t v3 = &v1[OBJC_IVAR____TtC8Podcasts19StationListObserver_didChange];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = OBJC_IVAR____TtC8Podcasts19StationListObserver_managedContextProvider;
  uint64_t v5 = self;
  uint64_t v6 = v1;
  *(void *)&v1[v4] = [v5 sharedInstance];
  uint64_t v7 = &v6[OBJC_IVAR____TtC8Podcasts19StationListObserver_options];
  uint64_t v8 = type metadata accessor for StationListOptions();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  uint64_t v38 = a1;
  (*(void (**)(char *, uint64_t))(v9 + 16))(v7, a1);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v10 initWithEntityName:v11];

  uint64_t v13 = self;
  id v14 = [v13 topLevelPlaylistsExcludingFoldersPredicate];
  [v12 setPredicate:v14];

  id v15 = [v13 sortDescriptors];
  [v12 setSortDescriptors:v15];

  id v16 = [*(id *)&v1[v4] privateQueueContext];
  id v17 = [objc_allocWithZone((Class)MTFetchedResultsController) initWithFetchRequest:v12 managedObjectContext:v16 sectionNameKeyPath:0 cacheName:0];
  uint64_t v18 = OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver;
  *(void *)&v6[OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver] = v17;
  sub_100054B78((uint64_t *)&unk_1005F83F0);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_10046D020;
  *(void *)(v19 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v19 + 40) = v20;
  *(void *)(v19 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v19 + 56) = v21;
  *(void *)(v19 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v19 + 72) = v22;
  *(void *)(v19 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v19 + 88) = v23;
  *(void *)(v19 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v19 + 104) = v24;
  id v25 = *(id *)&v6[v18];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 setPropertyKeys:isa];

  v40.receiver = v6;
  v40.super_class = (Class)type metadata accessor for StationListObserver();
  id v27 = (char *)objc_msgSendSuper2(&v40, "init");
  uint64_t v28 = OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver;
  id v29 = *(void **)&v27[OBJC_IVAR____TtC8Podcasts19StationListObserver_stationsObserver];
  id v30 = v27;
  [v29 setDelegate:v30];
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_10005C144;
  *(void *)(v32 + 24) = v31;
  aBlock[4] = sub_100018840;
  aBlock[5] = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  aBlock[3] = &unk_1005679D8;
  uint64_t v33 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v16 performBlockAndWait:v33];
  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v33)
  {
    __break(1u);
  }
  else
  {
    objc_sync_enter(v30);
    id v35 = *(id *)&v27[v28];
    uint64_t v36 = sub_10001BF34(v35, v38);

    *(void *)&v30[OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue] = v36;
    swift_bridgeObjectRelease();
    objc_sync_exit(v30);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v38, v37);
    swift_release();
    return (uint64_t)v30;
  }
  return result;
}

uint64_t LibraryDataProvider.episodeListPublisher(settings:pageSize:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v31 = a3;
  uint64_t v32 = a2;
  uint64_t v6 = sub_100054B78((uint64_t *)&unk_1005F7340);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v33 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for EpisodeListSettings();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  id v12 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v14 = (char *)v29 - v13;
  int v15 = os_feature_enabled_prototype_up_next();
  id v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v30(v14, a1, v8);
  uint64_t v35 = v6;
  if (v15)
  {
    EpisodeListSettings.listType.getter();
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    v39[9] = 2;
    uint64_t v43 = 0;
    char v44 = 9;
    char v16 = static EpisodeListType.== infix(_:_:)();
    sub_1000536CC((uint64_t)v38, (void (*)(void, void, void, void, void, void, void, void, char))sub_100053720);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    uint64_t v17 = v4;
    if (v16) {
      sub_1001F4490(2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    uint64_t v17 = v4;
  }
  v39[0] = 0;
  v39[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  unint64_t v36 = 0xD000000000000015;
  unint64_t v37 = 0x80000001004D39A0;
  EpisodeListSettings.listType.getter();
  uint64_t v18 = EpisodeListType.description.getter();
  uint64_t v20 = v19;
  sub_1000536CC((uint64_t)v39, (void (*)(void, void, void, void, void, void, void, void, char))sub_100053720);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  _OWORD v29[3] = v36;
  v29[2] = v37;
  v29[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  EpisodeListSettings.predicate.getter();
  EpisodeListSettings.sort.getter();
  EpisodeSortType.descriptors.getter();
  id v22 = [*(id *)(v17 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) privateQueueContext];
  v30(v12, a1, v8);
  unint64_t v23 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v24 + v23, v12, v8);
  type metadata accessor for LibraryEpisodeLockup();
  sub_10004D29C(0, (unint64_t *)&qword_100603220);
  v31;
  id v25 = v33;
  FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)();
  sub_100044200(&qword_1005F7350, (uint64_t *)&unk_1005F7340);
  uint64_t v26 = v35;
  uint64_t v27 = PaginatedPublisher.eraseToAnyPaginatedPublisher()();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v26);
  return v27;
}

id sub_10003177C(uint64_t a1)
{
  uint64_t v47 = a1;
  uint64_t v1 = type metadata accessor for OSSignposter();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v42 - v6;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)&v42 - v13;
  static OSSignposter.bootstrap.getter();
  OSSignposter.logHandle.getter();
  uint64_t v49 = v14;
  OSSignpostID.init(log:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v46 = v1;
  v45(v7, v1);
  static OSSignposter.bootstrap.getter();
  int v15 = OSSignposter.logHandle.getter();
  os_signpost_type_t v16 = static os_signpost_type_t.begin.getter();
  char v17 = OS_os_log.signpostsEnabled.getter();
  uint64_t v48 = v9;
  if (v17)
  {
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v18(v12, v49, v8);
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    os_signpost_id_t v20 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, v16, v20, "ViewControllerBootstrap", "", v19, 2u);
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v8);
  }
  else
  {

    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  }
  uint64_t v43 = v8;
  v18(v12, v49, v8);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v44 = OSSignpostIntervalState.init(id:isOpen:)();
  v45(v5, v46);
  id v21 = objc_allocWithZone((Class)type metadata accessor for PodcastsFlowTabBarController());
  uint64_t v22 = swift_retain();
  id v23 = sub_10002090C(v22);
  [v23 _uip_setPreferredSidebarMode:2];
  type metadata accessor for MiniPlayerHostViewController();
  id v24 = objc_allocWithZone((Class)UINavigationController);
  swift_retain();
  [v24 init];
  static MiniPlayerFactory.createMiniPlayer(asPartOf:)();
  MiniPlayerHostViewController.__allocating_init(asPartOf:wrapping:miniPlayerController:)();
  id v25 = (objc_class *)type metadata accessor for RootSplitViewController();
  memset(v51, 0, sizeof(v51));
  uint64_t v52 = 0;
  objc_allocWithZone(v25);
  swift_retain();
  id v26 = v23;
  uint64_t v27 = (void *)RootSplitViewController.init(hostingViewController:tabBarController:searchSuggestionsController:asPartOf:)();
  if (static Podcasts.isUIPSidebarEnabled.getter()) {
    uint64_t v28 = v26;
  }
  else {
    uint64_t v28 = v27;
  }
  id v29 = v28;
  sub_100054B78(&qword_1005F7E60);
  type metadata accessor for RootActionRunner();
  swift_allocObject();
  id v30 = v29;
  uint64_t v31 = RootActionRunner.init(target:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  char v50 = 2;
  sub_10005E33C();
  AnyHashable.init<A>(_:)();
  swift_retain();
  AppDependencyManager.add<A>(key:dependency:)();
  swift_release();
  swift_release();
  sub_1000598AC((uint64_t)v51);
  uint64_t v32 = sub_10000A204(&qword_1005F7E78, (void (*)(uint64_t))&type metadata accessor for RootActionRunner);
  *(void *)&v51[0] = v31;
  *((void *)&v51[0] + 1) = v32;
  BaseObjectGraph.satisfying<A>(_:with:)();
  swift_release();
  sub_100054B78(&qword_1005F7E80);
  *(void *)(swift_allocObject() + 16) = v30;
  id v33 = v30;
  BaseObjectGraph.satisfying<A>(_:with:)();
  swift_release();
  swift_release();
  type metadata accessor for MenuBarController();
  BaseObjectGraph.satisfying<A>(_:with:)();
  swift_release();
  sub_100054B78(&qword_1005F7E88);
  BaseObjectGraph.satisfying<A>(_:with:)();
  swift_release();
  sub_10004D29C(0, &qword_1005F7E90);
  *(void *)&v51[0] = v26;
  uint64_t v34 = BaseObjectGraph.satisfying<A>(_:with:)();
  swift_release();
  uint64_t v35 = self;
  swift_retain();
  id result = [v35 _currentTraitCollection];
  if (result)
  {
    unint64_t v37 = result;
    UITraitCollection.interfaceMode.getter();

    uint64_t v38 = (void *)dispatch thunk of RootSplitViewController.createMenuBarController(asPartOf:)();
    uint64_t v39 = sub_1000173EC(v34, v27, v26);

    sub_100054B78(&qword_1005F7E98);
    swift_retain();
    BaseObjectGraph.satisfying<A>(_:with:)();
    swift_release();
    swift_release();
    sub_100054B78((uint64_t *)&unk_1005F7EA0);
    uint64_t v40 = BaseObjectGraph.satisfying<A>(_:with:)();
    swift_release();
    swift_release();
    swift_retain();
    sub_1001B3A54((char *)v26, (uint64_t)v27, v39, v40);
    *(void *)&v51[0] = v26;
    BaseObjectGraph.satisfying<A>(_:with:)();
    swift_release();
    *(void *)&v51[0] = v27;
    uint64_t v41 = BaseObjectGraph.satisfying<A>(_:with:)();

    swift_release();
    swift_release();
    swift_release();
    sub_10001A570("ViewControllerBootstrap", 23, 2);
    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v43);
    return (id)v41;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100031F40()
{
  uint64_t v1 = v0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue] = _swiftEmptyArrayStorage;
  uint64_t v2 = &v0[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_didChange];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_mangedContextProvider;
  uint64_t v44 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_mangedContextProvider;
  uint64_t v4 = self;
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 sharedInstance];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithEntityName:v7];

  sub_10004D29C(0, (unint64_t *)&unk_1005F8100);
  sub_100054B78(&qword_1005F7720);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10046D030;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10004DA4C();
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 72) = v14;
  *(void *)(v9 + 80) = v15;
  os_signpost_type_t v16 = NSPredicate.init(format:_:)();
  [v8 setPredicate:v16];

  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_10046D060;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v18 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [v18 initWithKey:v19 ascending:1];

  *(void *)(v17 + 32) = v20;
  aBlock[0] = v17;
  specialized Array._endMutation()();
  sub_10004D29C(0, (unint64_t *)&qword_1005F8120);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v8 setSortDescriptors:isa];

  id v22 = [*(id *)&v1[v44] privateQueueContext];
  id v23 = [objc_allocWithZone((Class)MTFetchedResultsController) initWithFetchRequest:v8 managedObjectContext:v22 sectionNameKeyPath:0 cacheName:0];
  uint64_t v24 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver;
  *(void *)&v5[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver] = v23;
  sub_100054B78((uint64_t *)&unk_1005F83F0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_10046DD10;
  *(void *)(v25 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v25 + 40) = v26;
  *(void *)(v25 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v25 + 56) = v27;
  *(void *)(v25 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v25 + 72) = v28;
  *(void *)(v25 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v25 + 88) = v29;
  *(void *)(v25 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v25 + 104) = v30;
  *(void *)(v25 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v25 + 120) = v31;
  id v32 = *(id *)&v5[v24];
  Class v33 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v32 setPropertyKeys:v33];

  v46.receiver = v5;
  v46.super_class = (Class)type metadata accessor for ChannelListObserver();
  uint64_t v34 = (char *)[super init];
  uint64_t v35 = OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver;
  unint64_t v36 = *(void **)&v34[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_channelObserver];
  unint64_t v37 = v34;
  [v36 setDelegate:v37];
  uint64_t v38 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = sub_10005C434;
  *(void *)(v39 + 24) = v38;
  aBlock[4] = sub_100018840;
  aBlock[5] = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  aBlock[3] = &unk_100557820;
  uint64_t v40 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v22 performBlockAndWait:v40];
  _Block_release(v40);
  LOBYTE(v40) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v40)
  {
    __break(1u);
  }
  else
  {
    objc_sync_enter(v37);
    id v42 = *(id *)&v34[v35];
    unint64_t v43 = sub_10001F4D8(v42);

    *(void *)&v37[OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue] = v43;
    swift_bridgeObjectRelease();
    objc_sync_exit(v37);
    swift_release();

    return (uint64_t)v37;
  }
  return result;
}

uint64_t sub_100032540(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v13 = OBJC_IVAR___MTBackgroundTaskManager_task;
  if (*(void *)&v3[OBJC_IVAR___MTBackgroundTaskManager_task] == UIBackgroundTaskInvalid)
  {
    uint64_t v38 = v7;
    id v14 = [self sharedApplication];
    NSString v15 = String._bridgeToObjectiveC()();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v3;
    aBlock[4] = (uint64_t)sub_10040C50C;
    aBlock[5] = v16;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10003B424;
    aBlock[3] = (uint64_t)&unk_10056A220;
    uint64_t v17 = _Block_copy(aBlock);
    id v18 = v3;
    uint64_t v37 = a1;
    NSString v19 = v18;
    swift_release();
    id v20 = [v14 beginBackgroundTaskWithName:v15 expirationHandler:v17];
    _Block_release(v17);

    *(void *)&v3[v13] = v20;
    static Logger.backgroundTaskManager.getter();
    id v21 = v19;
    swift_bridgeObjectRetain_n();
    id v22 = v21;
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 134218242;
      uint64_t v36 = v6;
      uint64_t v26 = Int.hashValue.getter();

      uint64_t v40 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_10004B974(v37, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Started background task with identifier hash: %ld with name: %s.", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v12, v36);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v12, v6);
    }
  }
  else
  {
    static Logger.backgroundTaskManager.getter();
    uint64_t v28 = v3;
    swift_bridgeObjectRetain_n();
    uint64_t v29 = v28;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v38 = v7;
      uint64_t v33 = v32;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v37 = a1;
      aBlock[0] = v34;
      *(_DWORD *)uint64_t v33 = 134218242;
      uint64_t v36 = v6;
      uint64_t v35 = Int.hashValue.getter();

      uint64_t v40 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_10004B974(v37, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Tried to start background task but there is already an ongoing background task in progress with identifier hash: %ld. Not starting background task with name: %s.", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v36);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
}

uint64_t sub_100032A98(unint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, _UNKNOWN **))
{
  uint64_t v13 = sub_100032BE8(a4);
  uint64_t v14 = sub_100032BE8(a1);
  a2(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v15 = (uint64_t *)(a5 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler);
  uint64_t v16 = *(void *)(a5 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler);
  *NSString v15 = a6;
  v15[1] = a7;
  sub_10004ACDC(a6);
  sub_10004ACDC(a6);
  sub_1000536BC(v16);
  uint64_t v17 = *(void *)(a5 + OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v19 = *v15;
  uint64_t v20 = v15[1];
  uint64_t v21 = *(void *)(v17 + 8);
  id v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16);
  sub_10004ACDC(v19);
  v22(v19, v20, ObjectType, v21);
  sub_1000536BC(a6);
  return a8(a5, &off_1005688F0);
}

uint64_t sub_100032BE8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001BAA24(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v17 = v3;
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1001BAA24(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }
        ++v5;
        uint64_t v15 = sub_10004D29C(0, &qword_1005F8440);
        uint64_t v16 = &off_10055AB50;
        *(void *)&long long v14 = v6;
        v3[2] = v8 + 1;
        sub_100042FC4(&v14, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      uint64_t v9 = (void **)(a1 + 32);
      do
      {
        uint64_t v10 = *v9;
        uint64_t v17 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1001BAA24(v11 > 1, v12 + 1, 1);
          uint64_t v3 = v17;
        }
        uint64_t v15 = sub_10004D29C(0, &qword_1005F8440);
        uint64_t v16 = &off_10055AB50;
        *(void *)&long long v14 = v13;
        v3[2] = v12 + 1;
        sub_100042FC4(&v14, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_100032DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  unint64_t v7 = (uint64_t *)(v6 + *a5);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t *v7 = a1;
  v7[1] = a2;
  return a6(v8, v9);
}

uint64_t sub_100032DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100032DDC(a1, a2, a3, a4, &OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1000536BC);
}

uint64_t sub_100032E1C(uint64_t a1, uint64_t a2)
{
  return sub_100032E2C(a1, a2, *(void *)(v2 + 16), (void *)(v2 + 24), *(uint64_t (**)(void, void))(v2 + 64), *(void *)(v2 + 72));
}

uint64_t sub_100032E2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void, void), uint64_t a6)
{
  v25[1] = a6;
  uint64_t v26 = a5;
  v25[0] = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v25[0] - 8);
  __chkstk_darwin(v25[0]);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v12 = (void *)Strong;
    uint64_t v13 = 0xD000000000000033;
    unint64_t v14 = 0x80000001004D1B10;
    switch(*(unsigned char *)sub_100041A98(a4, a4[3]))
    {
      case 1:
        uint64_t v15 = "com.apple.podcasts.downloads.episodes.restore";
        goto LABEL_5;
      case 2:
        uint64_t v15 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_5:
        unint64_t v14 = (unint64_t)(v15 - 32) | 0x8000000000000000;
        uint64_t v13 = 0xD00000000000002DLL;
        break;
      case 3:
        uint64_t v13 = 0xD00000000000002FLL;
        unint64_t v14 = 0x80000001004D1BB0;
        break;
      default:
        break;
    }
    uint64_t v16 = swift_unknownObjectRetain();
    sub_1000331C8(v16, a2, v13, v14);
  }
  static Logger.downloads.getter();
  sub_100056D54((uint64_t)a4, (uint64_t)v29);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136446210;
    uint64_t v20 = 0xD000000000000033;
    uint64_t v21 = (void *)0x80000001004D1B10;
    switch(*(unsigned char *)sub_100041A98(v29, v29[3]))
    {
      case 1:
        id v22 = "com.apple.podcasts.downloads.episodes.restore";
        goto LABEL_13;
      case 2:
        id v22 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_13:
        uint64_t v21 = (void *)((unint64_t)(v22 - 32) | 0x8000000000000000);
        uint64_t v20 = 0xD00000000000002DLL;
        break;
      case 3:
        uint64_t v20 = 0xD00000000000002FLL;
        uint64_t v21 = (void *)0x80000001004D1BB0;
        break;
      default:
        break;
    }
    strcpy((char *)v27, "ConfigType: ");
    BYTE5(v27[1]) = 0;
    HIWORD(v27[1]) = -5120;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v20;
    v23._object = v21;
    String.append(_:)(v23);
    swift_bridgeObjectRelease_n();
    v27[0] = sub_10004B974(v27[0], v27[1], &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004D2D8((uint64_t)v29);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Created downloader for %{public}s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10004D2D8((uint64_t)v29);
  }

  (*(void (**)(char *, void))(v8 + 8))(v10, v25[0]);
  return v26(0, 0);
}

uint64_t sub_1000331C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(NSObject **)&v4[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_accessQueue];
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v4;
  void v10[3] = a3;
  v10[4] = a4;
  uint64_t v10[5] = a1;
  void v10[6] = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10004F7D0;
  *(void *)(v11 + 24) = v10;
  v16[4] = sub_10004A010;
  uint64_t v16[5] = v11;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100018818;
  v16[3] = &unk_100568208;
  unint64_t v12 = _Block_copy(v16);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v13 = v4;
  swift_release();
  dispatch_sync(v9, v12);
  swift_unknownObjectRelease();
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void sub_10003334C()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
    *uint64_t v3 = static OS_dispatch_queue.main.getter();
    (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
    char v6 = _dispatchPreconditionTest(_:)();
    (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
    if (v6)
    {
      id v7 = [self defaultCenter];
      [v7 postNotificationName:@"MTFeedUpdateDidMakeProgress" object:v5];
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000334E4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.widget.getter();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    char v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received new widget artwork, refreshing", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    sub_100033908();
  }
}

uint64_t sub_100033658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)&v3[OBJC_IVAR____TtC8Podcasts13WidgetManager_refreshQueue];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  aBlock[3] = a3;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v3;
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_10004AE9C((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_100033908()
{
  return sub_100033658((uint64_t)&unk_100564BD8, (uint64_t)sub_10003B99C, (uint64_t)&unk_100564BF0);
}

void sub_100033A10(void (*a1)(void), uint64_t a2, void *a3)
{
  a1();
  id v4 = sub_1000340A8();
  Class isa = (Class)[v4 playbackRateCommand];

  if (isa)
  {
    swift_unknownObjectRelease();
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v7 = self;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_100352900;
    *(void *)(v8 + 24) = v6;
    aBlock[4] = sub_100352940;
    aBlock[5] = v8;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100350074;
    aBlock[3] = &unk_100563838;
    uint64_t v9 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v10 = [v7 elementWithUncachedProvider:v9];
    _Block_release(v9);
    sub_10004D29C(0, (unint64_t *)&unk_100600650);
    sub_100054B78((uint64_t *)&unk_1005FA7F0);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_10046D060;
    *(void *)(v11 + 32) = v10;
    aBlock[0] = v11;
    specialized Array._endMutation()();
    UIMenuElementSize preferredElementSize = aBlock[0];
    id v13 = v10;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v54.value.super.Class isa = 0;
    v54.is_nil = 0;
    Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v14, (Swift::String_optional)0, v54, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v52).super.super.isa;

    swift_release();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  aBlock[0] = isa;
  uint64_t v15 = a3;
  static Published.subscript.setter();
  id v16 = [*(id *)&v15[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController] response];
  if (v16)
  {
    uint64_t v17 = v16;
    id v18 = [v16 state];

    int v19 = v18 == (id)2;
  }
  else
  {
    int v19 = 0;
  }
  uint64_t v20 = &v15[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_isTargetPlaying];
  swift_beginAccess();
  int v21 = *v20;
  *uint64_t v20 = v19;
  if (v19 != v21)
  {
    id v22 = [self defaultCenter];
    PlayerNotification_PlaystateDidChange.getter();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 postNotificationName:v23 object:v15];
  }
  id v24 = sub_1000340A8();
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = [v24 seekCommand];

    if (v26)
    {
      id v27 = [v26 preferredForwardJumpIntervals];
      swift_unknownObjectRelease();
      sub_10004D29C(0, (unint64_t *)&unk_1005F9460);
      unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v28 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v50) {
          goto LABEL_12;
        }
      }
      else if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_12:
        if ((v28 & 0xC000000000000001) != 0)
        {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_37;
          }
          id v29 = *(id *)(v28 + 32);
        }
        uint64_t v30 = v29;
        swift_bridgeObjectRelease();
        [v30 doubleValue];
        double v32 = v31;
        uint64_t v33 = (double *)&v15[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpForwardsAmount];
        swift_beginAccess();
        double v34 = *v33;
        *uint64_t v33 = v32;
        if (v34 == v32)
        {

          id v35 = sub_1000340A8();
          if (!v35) {
            return;
          }
          goto LABEL_20;
        }
        id v36 = [self defaultCenter];
        PlayerNotification_JumpDurationDidChange.getter();
        NSString v37 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v36 postNotificationName:v37 object:v15];

        goto LABEL_19;
      }
      swift_bridgeObjectRelease();
      id v35 = sub_1000340A8();
      if (!v35) {
        return;
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  id v35 = sub_1000340A8();
  if (!v35) {
    return;
  }
LABEL_20:
  uint64_t v38 = v35;
  id v39 = [v35 seekCommand];

  if (!v39) {
    return;
  }
  id v40 = [v39 preferredBackwardJumpIntervals];
  swift_unknownObjectRelease();
  sub_10004D29C(0, (unint64_t *)&unk_1005F9460);
  unint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v41 >> 62))
  {
    if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_23;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v51) {
    goto LABEL_33;
  }
LABEL_23:
  if ((v41 & 0xC000000000000001) == 0)
  {
    if (!*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v42 = *(id *)(v41 + 32);
    goto LABEL_26;
  }
LABEL_37:
  id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_26:
  unint64_t v43 = v42;
  swift_bridgeObjectRelease();
  [v43 doubleValue];
  double v45 = v44;
  objc_super v46 = (double *)&v15[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpBackwardsAmount];
  swift_beginAccess();
  double v47 = *v46;
  *objc_super v46 = v45;
  if (v47 == v45)
  {
  }
  else
  {
    id v48 = [self defaultCenter];
    PlayerNotification_JumpDurationDidChange.getter();
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v48 postNotificationName:v49 object:v15];
  }
}

id sub_1000340A8()
{
  uint64_t v1 = sub_100054B78((uint64_t *)&unk_1005FCBD0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  id v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [*(id *)(v0 + OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController) response];
  if (v11
    && (uint64_t v12 = v11, v13 = [v11 tracklist], v12, v13))
  {
    id v14 = [v13 playingItemIndexPath];
    if (v14)
    {
      uint64_t v15 = v14;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
    }
    sub_100034370((uint64_t)v4, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      id v18 = [v13 items];
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v16 = [v18 itemAtIndexPath:isa];

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return v16;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_100054B1C((uint64_t)v6, (uint64_t *)&unk_1005FCBD0);
  return 0;
}

uint64_t sub_100034370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005FCBD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000343D8()
{
  return sub_1000343F0(*(void *)(v0 + 16));
}

uint64_t sub_1000343E0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1000343F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

char *sub_1000343FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v119 = a4;
  uint64_t v121 = a3;
  uint64_t v84 = a2;
  uint64_t v120 = a1;
  uint64_t ObjectType = (void *)swift_getObjectType();
  uint64_t v116 = type metadata accessor for Logger();
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  id v114 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_100054B78(&qword_100605880);
  uint64_t v108 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  long long v106 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v103 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  long long v100 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100054B78(&qword_1005F9F20);
  __chkstk_darwin(v11 - 8);
  long long v91 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v87 = sub_100054B78(&qword_100605888);
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v85 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100054B78(&qword_100605890);
  uint64_t v89 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  long long v88 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_100054B78(&qword_100605898);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  long long v92 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100054B78(&qword_1006058A0);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  long long v96 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100054B78(&qword_1006058A8);
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  long long v99 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100054B78(&qword_1006058B0);
  uint64_t v107 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  long long v104 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for EpisodeListSettings();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  v81 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v20);
  uint64_t v79 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v21 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  NSString v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v24 - 8);
  uint64_t v75 = OBJC_IVAR____TtC8Podcasts13WidgetManager_playerController;
  uint64_t v117 = (uint64_t)v5;
  *(void *)&v5[OBJC_IVAR____TtC8Podcasts13WidgetManager_playerController] = 0;
  uint64_t v118 = OBJC_IVAR____TtC8Podcasts13WidgetManager_workQueue;
  uint64_t v25 = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  id v26 = v5;
  static DispatchQoS.userInitiated.getter();
  unsigned int v77 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  id v27 = *(char **)(v21 + 104);
  uint64_t v78 = v21 + 104;
  uint64_t v80 = v27;
  ((void (*)(char *))v27)(v23);
  *(void *)&long long v124 = _swiftEmptyArrayStorage;
  sub_10004AE9C((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v117 + v118) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v76 = OBJC_IVAR____TtC8Podcasts13WidgetManager_refreshQueue;
  static DispatchQoS.userInitiated.getter();
  ((void (*)(char *, void, uint64_t))v80)(v23, v77, v79);
  *(void *)&long long v124 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v28 = v84;
  uint64_t v118 = v25;
  *(void *)&v26[v76] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_waitToReloadUntilSave] = 0;
  *(void *)&v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_seenEpisodeUUIDs] = &_swiftEmptySetSingleton;
  *(void *)&v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_subscriptions] = _swiftEmptyArrayStorage;
  uint64_t v29 = OBJC_IVAR____TtC8Podcasts13WidgetManager_artworkPrefetchReceiver;
  sub_100054B78(&qword_1006058B8);
  swift_allocObject();
  *(void *)&v26[v29] = PassthroughSubject.init()();
  *(void *)&v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_artworkPrefetchPipeline] = 0;
  *(void *)&v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_observerTokens] = _swiftEmptyArrayStorage;
  *(void *)&v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_playerSubscriptions] = _swiftEmptyArrayStorage;
  uint64_t v30 = &v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_lastPlayedInfo];
  uint64_t v31 = sub_100054B78(&qword_100605850);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  double v32 = &v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_libraryDataProvider];
  uint64_t v33 = v121;
  *(void *)double v32 = v120;
  *((void *)v32 + 1) = v28;
  sub_100056D54(v33, (uint64_t)&v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_imageProvider]);
  *(double *)&v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_imageUpdateThrottleInterval] = a5;
  *(void *)&v26[OBJC_IVAR____TtC8Podcasts13WidgetManager_playbackController] = v119;
  swift_unknownObjectRetain();
  swift_retain();
  double v34 = v26;
  if ((static Podcasts.isBlueMoonEnabled()() & 1) == 0)
  {
    id v35 = [self defaultInstance];
    double v34 = *(char **)(v117 + v75);
    *(void *)(v117 + v75) = v35;
  }
  id v36 = (objc_class *)type metadata accessor for WidgetManager();
  v123.receiver = v26;
  v123.super_class = v36;
  [super init];
  swift_getObjectType();
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  char v128 = 5;
  uint64_t v38 = (char *)v37;
  id v39 = v81;
  EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)();
  uint64_t v40 = OBJC_IVAR____TtC8Podcasts13WidgetManager_workQueue;
  uint64_t v117 = OBJC_IVAR____TtC8Podcasts13WidgetManager_workQueue;
  uint64_t v41 = dispatch thunk of LibraryDataProviderProtocol.episodeListPublisher(settings:pageSize:queue:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v39, v83);
  *(void *)&long long v122 = v41;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100054B78(&qword_1005F77F8);
  sub_100044200(&qword_1006058C0, &qword_1005F77F8);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_100054B78((uint64_t *)&unk_1005F9ED0);
  sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v42 = *(void *)&v38[OBJC_IVAR____TtC8Podcasts13WidgetManager_artworkPrefetchReceiver];
  uint64_t v80 = v38;
  *(void *)&long long v122 = v42;
  sub_100044200(&qword_1006058C8, &qword_1006058B8);
  swift_retain();
  unint64_t v43 = v85;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  *(void *)(swift_allocObject() + 16) = ObjectType;
  static Subscribers.Demand.unlimited.getter();
  sub_100054B78(&qword_1006058D0);
  sub_100044200(&qword_1006058D8, &qword_100605888);
  sub_100044200(&qword_1006058E0, &qword_1006058D0);
  double v44 = v88;
  unint64_t v45 = v87;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, unint64_t))(v86 + 8))(v43, v45);
  *(void *)&long long v122 = *(void *)&v38[v40];
  objc_super v46 = (void *)v122;
  uint64_t v47 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v48 = (uint64_t)v91;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v91, 1, 1, v47);
  uint64_t ObjectType = &protocol conformance descriptor for Publishers.FlatMap<A, B>;
  sub_100044200(&qword_1006058E8, &qword_100605890);
  unint64_t v87 = sub_100059BE0();
  id v49 = v46;
  uint64_t v50 = v92;
  uint64_t v51 = v90;
  Publisher.receive<A>(on:options:)();
  sub_100054B1C(v48, &qword_1005F9F20);

  (*(void (**)(char *, uint64_t))(v89 + 8))(v44, v51);
  uint64_t v52 = v103;
  uint64_t v53 = v100;
  uint64_t v54 = v105;
  (*(void (**)(char *, void, uint64_t))(v103 + 104))(v100, enum case for Publishers.PrefetchStrategy.keepFull(_:), v105);
  uint64_t v55 = v108;
  uint64_t v56 = v106;
  uint64_t v57 = v110;
  (*(void (**)(char *, void, uint64_t))(v108 + 104))(v106, enum case for Publishers.BufferingStrategy.dropOldest<A>(_:), v110);
  sub_100044200(&qword_1006058F0, &qword_100605898);
  id v58 = v96;
  uint64_t v59 = v95;
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
  uint64_t v60 = v50;
  id v61 = v80;
  (*(void (**)(char *, uint64_t))(v94 + 8))(v60, v59);
  sub_100056D54(v121, (uint64_t)&v122);
  uint64_t v62 = swift_allocObject();
  sub_100042FC4(&v122, v62 + 16);
  sub_10004D29C(0, (unint64_t *)&unk_1006061A0);
  sub_100054B78(&qword_1006058F8);
  sub_100044200(&qword_100605900, &qword_1006058A0);
  sub_100044200(&qword_100605908, &qword_1006058F8);
  int64_t v63 = v99;
  uint64_t v64 = v98;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v58, v64);
  uint64_t v65 = v111;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  *(void *)&long long v122 = *(void *)&v61[v117];
  sub_100044200(&qword_100605910, &qword_1006058A8);
  uint64_t v66 = v104;
  uint64_t v67 = v102;
  Publisher.throttle<A>(for:scheduler:latest:)();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v65, v113);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v63, v67);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100044200(&qword_100605918, &qword_1006058B0);
  uint64_t v68 = v109;
  uint64_t v69 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v66, v68);
  *(void *)&v61[OBJC_IVAR____TtC8Podcasts13WidgetManager_artworkPrefetchPipeline] = v69;
  swift_release();
  sub_10002B300();
  sub_100033908();
  uint64_t v70 = v114;
  static Logger.widget.getter();
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v73 = 0;
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "WidgetManager initialized", v73, 2u);
    swift_slowDealloc();
  }
  swift_release();

  swift_unknownObjectRelease();
  sub_10004D2D8(v121);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v70, v116);
  return v61;
}

uint64_t sub_1000358B0(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  static Logger.widget.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = v2;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_10004B974(v7, v6, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Responding to artwork fetch for episode: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v14);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_100035AC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    if (![WeakRetained isStopping])
    {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      goto LABEL_10;
    }
    uint64_t v4 = _MTLogCategoryDefault();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v7 = 0;
      uint64_t v5 = "Attempting to execute work after the processor has stopped.";
      unint64_t v6 = (uint8_t *)&v7;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
    }
  }
  else
  {
    uint64_t v4 = _MTLogCategoryDefault();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v5 = "Attempting to execute work after the processor has been deallocated.";
      unint64_t v6 = buf;
      goto LABEL_7;
    }
  }

LABEL_10:
}

void sub_100035B94(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 createQueryObserver];
  [v2 setQueryObserver:v3];

  uint64_t v4 = [v2 queryObserver];
  [v4 startObserving];

  [v2 updatePredicateDuration];
  double v6 = v5;
  if (fabs(v5) > 2.22044605e-16)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v8 = [WeakRetained workQueue];
    dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v8);
    [v2 setTimer:v9];

    dispatch_time_t v10 = dispatch_walltime(0, 0);
    uint64_t v11 = [v2 timer];
    dispatch_source_set_timer(v11, v10, (unint64_t)(v6 * 1000000000.0), 0);

    uint64_t v12 = [v2 timer];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000E02A0;
    handler[3] = &unk_10054E8E0;
    objc_copyWeak(&v26, (id *)(a1 + 40));
    dispatch_source_set_event_handler(v12, handler);

    uint64_t v13 = [v2 timer];
    dispatch_resume(v13);

    objc_destroyWeak(&v26);
  }
  uint64_t v14 = [v2 defaultPropertiesThatAffectPredicate];
  if ([v14 count])
  {
    uint64_t v15 = [MTDefaultsChangeNotifier alloc];
    uint64_t v16 = +[NSUserDefaults _applePodcastsFoundationSettingsUserDefaults];
    uint64_t v17 = [(MTDefaultsChangeNotifier *)v15 initWithProperties:v14 defaults:v16];
    [v2 setDefaultsNotifier:v17];

    uint64_t v18 = [v2 defaultsNotifier];
    uint64_t v20 = _NSConcreteStackBlock;
    uint64_t v21 = 3221225472;
    uint64_t v22 = sub_1000E02E0;
    NSString v23 = &unk_10054E908;
    objc_copyWeak(&v24, (id *)(a1 + 40));
    [v18 addCallback:&v20];

    uint64_t v19 = [v2 defaultsNotifier:v20, v21, v22, v23];
    [v19 start];

    objc_destroyWeak(&v24);
  }
}

void sub_100035E60(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10003603C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *sub_1000360CC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v37 = a1;
  uint64_t v3 = a2 & 1;
  uint64_t v4 = sub_100054B78(&qword_100606518);
  __chkstk_darwin(v4 - 8);
  double v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = TabMenu.Group.items(for:)();
  uint64_t v8 = sub_10000C004(v7);
  swift_bridgeObjectRelease();
  dispatch_source_t v9 = _swiftEmptyArrayStorage;
  unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v10 = v8[2];
  if (v10)
  {
    uint64_t v31 = v6;
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    long long v34 = xmmword_10046D060;
    unsigned int v38 = v3;
    uint64_t v35 = v10;
    id v36 = v8;
    while (1)
    {
      uint64_t v12 = v8[v11 + 4];
      sub_100036488(v12);
      uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))ParentFlowController.viewControllerGenerator.getter();
      if (v13)
      {
        uint64_t v14 = (uint64_t)v13;
        uint64_t v15 = v13(v12, v3);
        if (v15)
        {
          uint64_t v16 = (void *)v15;
          type metadata accessor for FlowNavigationController();
          swift_retain();
          uint64_t v17 = (void *)FlowNavigationController.__allocating_init(asPartOf:)();
          if (static Podcasts.isUIPSidebarEnabled.getter())
          {
            id v33 = v17;
            uint64_t v18 = (uint64_t)v31;
            static TabMenu.item(for:interfaceMode:)();
            uint64_t v19 = type metadata accessor for TabMenu.Item();
            uint64_t v20 = *(void *)(v19 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
            {
              sub_100054B1C(v18, &qword_100606518);
              uint64_t v21 = 0;
            }
            else
            {
              uint64_t v21 = (void *)TabMenu.Item.tabBarElement(asPartOf:interfaceMode:)();
              (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
            }
            id v22 = v33;
            [v33 _uip_setTabElement:v21];
          }
          id v23 = v17;
          id v24 = [v16 tabBarItem];
          [v23 setTabBarItem:v24];

          sub_100054B78((uint64_t *)&unk_1005FA7F0);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = v34;
          *(void *)(v25 + 32) = v16;
          uint64_t v39 = v25;
          specialized Array._endMutation()();
          sub_10004D29C(0, (unint64_t *)&qword_1005F7EB0);
          id v26 = v23;
          id v27 = v16;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v26 setViewControllers:isa];

          sub_1000536BC(v14);
          sub_10003649C(v12);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v3 = v38;
          uint64_t v10 = v35;
          uint64_t v8 = v36;
          goto LABEL_5;
        }
        sub_1000536BC(v14);
      }
      sub_10003649C(v12);
LABEL_5:
      if (v10 == ++v11)
      {
        swift_bridgeObjectRelease();
        dispatch_source_t v9 = (void *)v40;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_100036488(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0x12) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10003649C(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0x12) {
    return swift_release();
  }
  return result;
}

void sub_1000364B0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) feedManager];
  unsigned int v3 = [v2 abortUpdatesIfNetworkUnreachable:*(unsigned __int8 *)(a1 + 64)];

  if (v3)
  {
    uint64_t v4 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Skipping feed update due to network not being reachable", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    *(void *)buf = 0;
    id v27 = buf;
    uint64_t v28 = 0x2020000000;
    uint64_t v29 = 0;
    uint64_t v5 = dispatch_group_create();
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id obj = *(id *)(a1 + 40);
    id v6 = [obj countByEnumeratingWithState:&v22 objects:v30 count:16];
    if (v6)
    {
      uint64_t v15 = *(void *)v23;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v23 != v15) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v7);
          dispatch_group_enter(v5);
          dispatch_source_t v9 = *(void **)(a1 + 32);
          uint64_t v10 = *(unsigned __int8 *)(a1 + 64);
          uint64_t v11 = *(unsigned __int8 *)(a1 + 65);
          uint64_t v12 = *(unsigned __int8 *)(a1 + 66);
          uint64_t v13 = *(void *)(a1 + 56);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          void v19[2] = sub_100044718;
          v19[3] = &unk_100551F50;
          v19[4] = v9;
          uint64_t v21 = buf;
          uint64_t v20 = v5;
          [v9 _updatePodcastWithUUID:v8 userInitiated:v10 forced:v11 useBackgroundFetch:v12 source:v13 startedUpdateCallback:v19];

          uint64_t v7 = (char *)v7 + 1;
        }
        while (v6 != v7);
        id v6 = [obj countByEnumeratingWithState:&v22 objects:v30 count:16];
      }
      while (v6);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001BDD4;
    block[3] = &unk_100551ED8;
    uint64_t v18 = buf;
    id v17 = *(id *)(a1 + 48);
    dispatch_group_notify(v5, (dispatch_queue_t)&_dispatch_main_q, block);

    _Block_object_dispose(buf, 8);
  }
}

void sub_10003678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t _s8Podcasts11FeedManagerC32abortUpdatesIfNetworkUnreachable13userInitiatedS2b_tF_0(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  dispatch_source_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)[self sharedInstance];
  if (result)
  {
    uint64_t v11 = (void *)result;
    unsigned int v12 = [(id)result isReachable];

    uint64_t result = v12 ^ 1;
    if (v12 & 1) == 0 && (a1)
    {
      sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
      uint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
      aBlock[4] = sub_10030BA28;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003B424;
      aBlock[3] = &unk_100560FE0;
      uint64_t v14 = _Block_copy(aBlock);
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10004ADC4((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      uint64_t v16 = v6;
      sub_100054B78((uint64_t *)&unk_1005FE4B0);
      sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v14);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v16);
      return 1;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100036B60@<X0>(uint64_t (*a1)(void)@<X0>, unint64_t *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.current.getter();
  *(void *)(a4 + 24) = a1(0);
  *(void *)(a4 + 32) = sub_1002B4798(a2, a3);
  BaseObjectGraph.inject<A>(_:)();

  return swift_release();
}

uint64_t sub_100036C00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v204 = a1;
  uint64_t v157 = type metadata accessor for PlayEpisodeIntentImplementation();
  uint64_t v156 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  v155 = (char *)&v151 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for EnqueueEpisodeForPlaybackIntentImplementation();
  uint64_t v153 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  v152 = (char *)&v151 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = type metadata accessor for DebugLibraryStorageTipSuggestedLimitIntentImplementation();
  uint64_t v203 = *(void *)(v202 - 8);
  __chkstk_darwin(v202);
  v201 = (char *)&v151 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PodcastForEpisodeIntentImplementation = type metadata accessor for FetchPodcastForEpisodeIntentImplementation();
  uint64_t v200 = *(void *)(PodcastForEpisodeIntentImplementation - 8);
  __chkstk_darwin(PodcastForEpisodeIntentImplementation);
  v198 = (char *)&v151 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = sub_100054B78(&qword_1005FF940);
  v197 = *(char **)(v196 - 8);
  __chkstk_darwin(v196);
  v195 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = sub_100054B78(&qword_1005FF948);
  v194 = *(char **)(v193 - 8);
  __chkstk_darwin(v193);
  v192 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = sub_100054B78(&qword_1005FF950);
  v191 = *(char **)(v190 - 8);
  __chkstk_darwin(v190);
  v189 = (char *)&v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ShowLatestCatalogEpisodesIntentImplementation = type metadata accessor for FetchShowLatestCatalogEpisodesIntentImplementation();
  v188 = *(char **)(ShowLatestCatalogEpisodesIntentImplementation - 8);
  __chkstk_darwin(ShowLatestCatalogEpisodesIntentImplementation);
  v186 = (char *)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ShowEpisodesIntentImplementation = type metadata accessor for FindShowEpisodesIntentImplementation();
  uint64_t v185 = *(void *)(ShowEpisodesIntentImplementation - 8);
  __chkstk_darwin(ShowEpisodesIntentImplementation);
  v183 = (char *)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = type metadata accessor for FollowFeedIntentImplementation();
  uint64_t v182 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  v180 = (char *)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = type metadata accessor for UnfollowShowIntentImplementation();
  uint64_t v179 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  v177 = (char *)&v151 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = type metadata accessor for RemoveEpisodesDownloadIntentImplementation();
  uint64_t v176 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  v174 = (char *)&v151 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for DownloadEpisodesIntentImplementation();
  uint64_t v173 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  v171 = (char *)&v151 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for UnbookmarkEpisodeIntentImplementation();
  uint64_t v170 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  v168 = (char *)&v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for BookmarkEpisodeIntentImplementation();
  uint64_t v167 = *(void *)(v166 - 8);
  __chkstk_darwin(v166);
  v165 = (char *)&v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t EpisodeOfferContentIDsIntentsIntentImplementation = type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation();
  uint64_t v164 = *(void *)(EpisodeOfferContentIDsIntentsIntentImplementation - 8);
  __chkstk_darwin(EpisodeOfferContentIDsIntentsIntentImplementation);
  v162 = (char *)&v151 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t LocalEpisodeContentIDsIntentImplementation = type metadata accessor for FindOrCreateLocalEpisodeContentIDsIntentImplementation();
  v212 = *(void (***)(char *, uint64_t))(LocalEpisodeContentIDsIntentImplementation - 8);
  __chkstk_darwin(LocalEpisodeContentIDsIntentImplementation);
  v160 = (char *)&v151 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t UpNextEpisodesIntentImplementation = type metadata accessor for FetchUpNextEpisodesIntentImplementation();
  v211 = *(void (***)(char *, uint64_t))(UpNextEpisodesIntentImplementation - 8);
  __chkstk_darwin(UpNextEpisodesIntentImplementation);
  v158 = (char *)&v151 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for NativeIntentDispatcher();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  v151 = (char *)&v151 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  v205 = (char *)&v151 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v206 = (char *)&v151 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v213 = (char *)&v151 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v214 = (char *)&v151 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v235 = (char *)&v151 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v234 = (char *)&v151 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v233 = (char *)&v151 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v232 = (char *)&v151 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v231 = (char *)&v151 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v230 = (char *)&v151 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v229 = (char *)&v151 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v228 = (char *)&v151 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v227 = (char *)&v151 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v226 = (char *)&v151 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v225 = (char *)&v151 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v224 = (char *)&v151 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v223 = (char *)&v151 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v222 = (char *)&v151 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v221 = (char *)&v151 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v220 = (char *)&v151 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v219 = (char *)&v151 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v218 = (char *)&v151 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v217 = (char *)&v151 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  uint64_t v71 = (void (**)(char *, uint64_t))((char *)&v151 - v70);
  uint64_t v72 = __chkstk_darwin(v69);
  uint64_t v74 = (void (**)(char *, uint64_t))((char *)&v151 - v73);
  uint64_t v75 = __chkstk_darwin(v72);
  unsigned int v77 = (char *)&v151 - v76;
  uint64_t v78 = __chkstk_darwin(v75);
  uint64_t v80 = (char *)&v151 - v79;
  uint64_t v81 = __chkstk_darwin(v78);
  uint64_t v83 = (char *)&v151 - v82;
  __chkstk_darwin(v81);
  uint64_t v85 = (char *)&v151 - v84;
  NativeIntentDispatcher.init()();
  sub_10005A708();
  v208 = v85;
  NativeIntentDispatcher.registering<A>(_:)();
  v207 = (char *)v20;
  uint64_t v86 = *(void (**)(char *, uint64_t))(v20 + 8);
  v86(v83, v19);
  type metadata accessor for OpenTranscriptIntentImplementation();
  sub_1002B4798(&qword_1005FF960, (void (*)(uint64_t))type metadata accessor for OpenTranscriptIntentImplementation);
  v209 = v80;
  static NativeIntentDispatcher.Builder.buildExpression<A>(_:)();
  unint64_t v87 = v158;
  FetchUpNextEpisodesIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF968, (void (*)(uint64_t))&type metadata accessor for FetchUpNextEpisodesIntentImplementation);
  v210 = v77;
  uint64_t v88 = UpNextEpisodesIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  v211[1](v87, v88);
  uint64_t v89 = v160;
  FindOrCreateLocalEpisodeContentIDsIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF970, (void (*)(uint64_t))&type metadata accessor for FindOrCreateLocalEpisodeContentIDsIntentImplementation);
  v211 = v74;
  uint64_t v90 = LocalEpisodeContentIDsIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  v212[1](v89, v90);
  long long v91 = v162;
  FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF978, (void (*)(uint64_t))&type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation);
  v212 = v71;
  uint64_t v92 = EpisodeOfferContentIDsIntentsIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v164 + 8))(v91, v92);
  long long v93 = v165;
  BookmarkEpisodeIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF980, (void (*)(uint64_t))&type metadata accessor for BookmarkEpisodeIntentImplementation);
  uint64_t v94 = v166;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v167 + 8))(v93, v94);
  uint64_t v95 = v168;
  UnbookmarkEpisodeIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF988, (void (*)(uint64_t))&type metadata accessor for UnbookmarkEpisodeIntentImplementation);
  uint64_t v96 = v169;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v170 + 8))(v95, v96);
  uint64_t v97 = v171;
  DownloadEpisodesIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF990, (void (*)(uint64_t))&type metadata accessor for DownloadEpisodesIntentImplementation);
  uint64_t v98 = v172;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v173 + 8))(v97, v98);
  long long v99 = v174;
  RemoveEpisodesDownloadIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF998, (void (*)(uint64_t))&type metadata accessor for RemoveEpisodesDownloadIntentImplementation);
  uint64_t v100 = v175;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v99, v100);
  type metadata accessor for UpdateEpisodeDownloadBehaviorImplementation();
  sub_1002B4798(&qword_1005FF9A0, (void (*)(uint64_t))&type metadata accessor for UpdateEpisodeDownloadBehaviorImplementation);
  static NativeIntentDispatcher.Builder.buildExpression<A>(_:)();
  type metadata accessor for ReevaluateAutoDownloadsIntentImplementation();
  sub_1002B4798(&qword_1005FF9A8, (void (*)(uint64_t))type metadata accessor for ReevaluateAutoDownloadsIntentImplementation);
  static NativeIntentDispatcher.Builder.buildExpression<A>(_:)();
  NativeIntentDispatcher.init()();
  sub_10005A5CC();
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  NativeIntentDispatcher.init()();
  sub_10005A488();
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  NativeIntentDispatcher.init()();
  sub_10005A530();
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  uint64_t v101 = v177;
  UnfollowShowIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF9C8, (void (*)(uint64_t))&type metadata accessor for UnfollowShowIntentImplementation);
  uint64_t v102 = v178;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v179 + 8))(v101, v102);
  uint64_t v103 = v180;
  FollowFeedIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF9D0, (void (*)(uint64_t))&type metadata accessor for FollowFeedIntentImplementation);
  uint64_t v104 = v181;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v182 + 8))(v103, v104);
  uint64_t v105 = v183;
  FindShowEpisodesIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF9D8, (void (*)(uint64_t))&type metadata accessor for FindShowEpisodesIntentImplementation);
  uint64_t v106 = ShowEpisodesIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v185 + 8))(v105, v106);
  uint64_t v107 = v186;
  FetchShowLatestCatalogEpisodesIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FF9E0, (void (*)(uint64_t))&type metadata accessor for FetchShowLatestCatalogEpisodesIntentImplementation);
  uint64_t v108 = ShowLatestCatalogEpisodesIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*((void (**)(char *, uint64_t))v188 + 1))(v107, v108);
  type metadata accessor for ServerChannel();
  uint64_t v109 = v189;
  FetchMAPIRepresentableIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_100044200(&qword_1005FF9E8, &qword_1005FF950);
  uint64_t v110 = v190;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*((void (**)(char *, uint64_t))v191 + 1))(v109, v110);
  type metadata accessor for ServerPodcast();
  v111 = v192;
  FetchMAPIRepresentableIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_100044200(&qword_1005FF9F0, &qword_1005FF948);
  uint64_t v112 = v193;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*((void (**)(char *, uint64_t))v194 + 1))(v111, v112);
  type metadata accessor for ServerPodcastEpisode();
  uint64_t v113 = v195;
  FetchMAPIRepresentableIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_100044200(&qword_1005FF9F8, &qword_1005FF940);
  uint64_t v114 = v196;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*((void (**)(char *, uint64_t))v197 + 1))(v113, v114);
  uint64_t v115 = v198;
  FetchPodcastForEpisodeIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FFA00, (void (*)(uint64_t))&type metadata accessor for FetchPodcastForEpisodeIntentImplementation);
  uint64_t v116 = PodcastForEpisodeIntentImplementation;
  NativeIntentDispatcher.registering<A>(_:)();
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v115, v116);
  uint64_t v117 = v201;
  DebugLibraryStorageTipSuggestedLimitIntentImplementation.init()();
  NativeIntentDispatcher.init()();
  sub_1002B4798(&qword_1005FFA08, (void (*)(uint64_t))&type metadata accessor for DebugLibraryStorageTipSuggestedLimitIntentImplementation);
  uint64_t v118 = v202;
  NativeIntentDispatcher.registering<A>(_:)();
  v215 = v86;
  uint64_t v216 = v20 + 8;
  v86(v83, v19);
  (*(void (**)(char *, uint64_t))(v203 + 8))(v117, v118);
  if (static Podcasts.isBlueMoonEnabled()())
  {
    uint64_t v119 = v152;
    EnqueueEpisodeForPlaybackIntentImplementation.init()();
    uint64_t v120 = v214;
    NativeIntentDispatcher.init()();
    sub_1002B4798(&qword_1005FFA38, (void (*)(uint64_t))&type metadata accessor for EnqueueEpisodeForPlaybackIntentImplementation);
    uint64_t v121 = v154;
    NativeIntentDispatcher.registering<A>(_:)();
    long long v122 = v215;
    v215(v120, v19);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v119, v121);
    objc_super v123 = v155;
    PlayEpisodeIntentImplementation.init()();
    long long v124 = v213;
    NativeIntentDispatcher.init()();
    sub_1002B4798(&qword_1005FFA40, (void (*)(uint64_t))&type metadata accessor for PlayEpisodeIntentImplementation);
    uint64_t v125 = v157;
    NativeIntentDispatcher.registering<A>(_:)();
    v122(v124, v19);
    (*(void (**)(char *, uint64_t))(v156 + 8))(v123, v125);
    long long v126 = v206;
    NativeIntentDispatcher.init()();
    sub_10005AC20();
    NativeIntentDispatcher.registering<A>(_:)();
    v122(v126, v19);
    sub_10005A7A4();
    static NativeIntentDispatcher.Builder.buildExpression<A>(_:)();
    sub_10005A668();
    static NativeIntentDispatcher.Builder.buildExpression<A>(_:)();
    sub_100054B78(&qword_1005FFA28);
    uint64_t v127 = *((void *)v207 + 9);
    uint64_t v128 = v207[80];
    v129 = v207;
    uint64_t v130 = (v128 + 32) & ~v128;
    uint64_t v131 = 4 * v127;
    uint64_t PodcastForEpisodeIntentImplementation = 5 * v127;
    uint64_t v202 = v128 | 7;
    v198 = (char *)swift_allocObject();
    uint64_t v203 = v130;
    v132 = &v198[v130];
    v133 = (void (*)(void))*((void *)v129 + 2);
    ((void (*)(char *, char *, uint64_t))v133)(&v198[v130], v83, v19);
    v197 = &v132[v127];
    v133();
    uint64_t v196 = (uint64_t)&v132[2 * v127];
    v133();
    v201 = (char *)(2 * v127);
    uint64_t v200 = 3 * v127;
    v195 = &v132[3 * v127];
    v133();
    ((void (*)(char *, char *, uint64_t))v133)(&v132[4 * v127], v205, v19);
    v134 = v151;
    NativeIntentDispatcher.init()();
    NativeIntentDispatcher.register(contentsOf:)();
    NativeIntentDispatcher.register(contentsOf:)();
    NativeIntentDispatcher.register(contentsOf:)();
    NativeIntentDispatcher.register(contentsOf:)();
    NativeIntentDispatcher.register(contentsOf:)();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v135 = v134;
    uint64_t v136 = PodcastForEpisodeIntentImplementation;
    (*((void (**)(char *, char *, uint64_t))v207 + 4))(v235, v135, v19);
    v137 = v215;
    v215(v205, v19);
    v137(v206, v19);
    v137(v213, v19);
    v137(v214, v19);
    v137(v83, v19);
  }
  else
  {
    v138 = v214;
    NativeIntentDispatcher.init()();
    sub_1002B6860();
    NativeIntentDispatcher.registering<A>(_:)();
    v139 = v215;
    v215(v138, v19);
    v140 = v213;
    NativeIntentDispatcher.init()();
    sub_1002B68B4();
    NativeIntentDispatcher.registering<A>(_:)();
    v139(v140, v19);
    v141 = v206;
    NativeIntentDispatcher.init()();
    sub_1002B6908();
    NativeIntentDispatcher.registering<A>(_:)();
    v139(v141, v19);
    sub_100054B78(&qword_1005FFA28);
    uint64_t v127 = *((void *)v207 + 9);
    uint64_t v142 = v207[80];
    v143 = v207;
    uint64_t v144 = (v142 + 32) & ~v142;
    uint64_t v200 = 3 * v127;
    uint64_t v202 = v142 | 7;
    v205 = (char *)swift_allocObject();
    uint64_t v203 = v144;
    v145 = &v205[v144];
    v133 = (void (*)(void))*((void *)v143 + 2);
    ((void (*)(char *, char *, uint64_t))v133)(v145, v83, v19);
    uint64_t PodcastForEpisodeIntentImplementation = (uint64_t)&v145[v127];
    v133();
    v201 = (char *)(2 * v127);
    ((void (*)(char *, char *, uint64_t))v133)(&v145[2 * v127], v213, v19);
    NativeIntentDispatcher.init()();
    NativeIntentDispatcher.register(contentsOf:)();
    NativeIntentDispatcher.register(contentsOf:)();
    NativeIntentDispatcher.register(contentsOf:)();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*((void (**)(char *, char *, uint64_t))v207 + 4))(v235, v141, v19);
    v146 = v215;
    v215(v213, v19);
    v146(v214, v19);
    v146(v83, v19);
    uint64_t v131 = 4 * v127;
    uint64_t v136 = 5 * v127;
  }
  type metadata accessor for CategoryPageFromYourShowsShelfIntentImplementation();
  sub_1002B4798(&qword_1005FFA30, (void (*)(uint64_t))&type metadata accessor for CategoryPageFromYourShowsShelfIntentImplementation);
  static NativeIntentDispatcher.Builder.buildExpression<A>(_:)();
  sub_100054B78(&qword_1005FFA28);
  uint64_t v147 = v203;
  v214 = (char *)swift_allocObject();
  v148 = &v214[v147];
  ((void (*)(char *, char *, uint64_t))v133)(&v214[v147], v208, v19);
  v213 = &v148[v127];
  v133();
  v207 = &v201[(void)v148];
  v133();
  v206 = &v148[v200];
  v133();
  v205 = &v148[v131];
  v133();
  uint64_t v203 = (uint64_t)&v148[v136];
  v133();
  uint64_t v202 = (uint64_t)&v148[6 * v127];
  v133();
  v201 = &v148[7 * v127];
  v133();
  uint64_t v200 = (uint64_t)&v148[8 * v127];
  v133();
  uint64_t PodcastForEpisodeIntentImplementation = (uint64_t)&v148[9 * v127];
  v133();
  v198 = &v148[10 * v127];
  v133();
  v197 = &v148[11 * v127];
  v133();
  uint64_t v196 = (uint64_t)&v148[12 * v127];
  v133();
  v195 = &v148[13 * v127];
  v133();
  v194 = &v148[14 * v127];
  v133();
  uint64_t v193 = (uint64_t)&v148[15 * v127];
  v133();
  v192 = &v148[16 * v127];
  v133();
  v191 = &v148[17 * v127];
  v133();
  uint64_t v190 = (uint64_t)&v148[18 * v127];
  v133();
  v189 = &v148[19 * v127];
  v133();
  v188 = &v148[20 * v127];
  v133();
  uint64_t ShowLatestCatalogEpisodesIntentImplementation = (uint64_t)&v148[21 * v127];
  v133();
  v186 = &v148[22 * v127];
  v133();
  ((void (*)(char *, char *, uint64_t))v133)(&v148[23 * v127], v235, v19);
  ((void (*)(char *, char *, uint64_t))v133)(&v148[24 * v127], v83, v19);
  NativeIntentDispatcher.init()();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  NativeIntentDispatcher.register(contentsOf:)();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v149 = v215;
  v215(v83, v19);
  v149(v235, v19);
  v149(v234, v19);
  v149(v233, v19);
  v149(v232, v19);
  v149(v231, v19);
  v149(v230, v19);
  v149(v229, v19);
  v149(v228, v19);
  v149(v227, v19);
  v149(v226, v19);
  v149(v225, v19);
  v149(v224, v19);
  v149(v223, v19);
  v149(v222, v19);
  v149(v221, v19);
  v149(v220, v19);
  v149(v219, v19);
  v149(v218, v19);
  v149(v217, v19);
  v149((char *)v212, v19);
  v149((char *)v211, v19);
  v149(v210, v19);
  v149(v209, v19);
  return ((uint64_t (*)(char *, uint64_t))v149)(v208, v19);
}

void **sub_10003932C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v63 = *(void *)(v2 - 8);
  uint64_t v64 = v2;
  __chkstk_darwin(v2);
  uint64_t v59 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v57 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100054B78(&qword_100601E18);
  __chkstk_darwin(v5 - 8);
  uint64_t v55 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)&v0[OBJC_IVAR____TtC8Podcasts11AppDelegate_objectGraph];
  sub_10004D29C(0, (unint64_t *)&qword_100603DE0);
  swift_retain();
  if (static UITraitCollection.interfaceIdiomIsMac.getter())
  {
    type metadata accessor for ArtworkLoader();
    BaseObjectGraph.injectIfAvailable<A>(_:)();
    if (aBlock)
    {
      sub_10004D29C(0, &qword_1005F6FE0);
      [(id)swift_getObjCClassFromMetadata() defaultMaxImageDimensionInPixels];
      uint64_t v9 = v8;
      uint64_t v10 = (void *)swift_allocObject();
      v10[2] = sub_10039BD64;
      void v10[3] = 0;
      v10[4] = v9;
      ArtworkLoader.alternativeSize.setter();
      swift_release();
    }
  }
  sub_10005D92C();
  type metadata accessor for HomePageProvider();
  BaseObjectGraph.inject<A>(_:)();
  HomePageProvider.loadPageContent()();
  swift_release();
  id v11 = sub_10003177C(v7);
  sub_100054B78(&qword_1005F7E60);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v13 = aBlock;
  uint64_t v12 = v68;
  sub_100054B78(&qword_1005F7E80);
  BaseObjectGraph.inject<A>(_:)();
  type metadata accessor for PodcastsFlowTabBarController();
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v14 = aBlock;
  type metadata accessor for RootSplitViewController();
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v15 = aBlock;
  type metadata accessor for MenuBarController();
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v16 = *(void **)&v0[OBJC_IVAR____TtC8Podcasts11AppDelegate_commandController];
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts11AppDelegate_commandController] = aBlock;

  sub_100056D54((uint64_t)v75, (uint64_t)&aBlock);
  uint64_t v17 = (uint64_t)&v0[OBJC_IVAR____TtC8Podcasts11AppDelegate_flowController];
  swift_beginAccess();
  sub_100039D84((uint64_t)&aBlock, v17, &qword_100604710);
  swift_endAccess();
  uint64_t v18 = (void ***)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_urlActionRunner];
  *uint64_t v18 = v13;
  v18[1] = (void **)v12;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  aBlock = v13;
  uint64_t v68 = v12;
  uint64_t v61 = v7;
  BaseObjectGraph.satisfying<A>(_:with:)();
  uint64_t v19 = BaseObjectGraph.satisfying<A>(_:with:)();
  swift_release();
  type metadata accessor for NowPlayingBootstrap();
  swift_allocObject();
  swift_retain();
  uint64_t v20 = v15;
  uint64_t v21 = v14;
  uint64_t v22 = sub_100018970(v19, v20, v21);
  uint64_t v56 = v20;

  sub_10001E214();
  *(void *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_nowPlayingBootstrap] = v22;
  uint64_t v65 = (void **)v22;
  swift_retain();
  swift_release();
  type metadata accessor for UserActivityController();
  BaseObjectGraph.injectIfAvailable<A>(_:)();
  uint64_t v23 = aBlock;
  if (aBlock)
  {
    void aBlock[6] = v13;
    v23[7] = (void *)v12;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
  }
  aBlock = v65;
  uint64_t v24 = BaseObjectGraph.satisfying<A>(_:with:)();
  swift_release_n();
  uint64_t v25 = sub_10003ABC8(&qword_100603DE8, (void (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController);
  type metadata accessor for EpisodeController();
  uint64_t v26 = v21;
  swift_retain();
  BaseObjectGraph.injectIfAvailable<A>(_:)();
  if (aBlock)
  {
    aBlock[3] = (void *)v25;
    swift_unknownObjectWeakAssign();

    swift_release();
  }
  else
  {
  }
  sub_10005D7C0();
  type metadata accessor for PurchaseControllerWrapper();
  uint64_t v27 = (void *)static PurchaseControllerWrapper.sharedInstance.getter();
  uint64_t v28 = (void *)PurchaseControllerWrapper.purchaseController.getter();

  uint64_t v29 = type metadata accessor for SubscriptionConfirmationSheetHandler();
  swift_allocObject();
  swift_retain();
  uint64_t v30 = SubscriptionConfirmationSheetHandler.init(asPartOf:)();
  uint64_t v70 = (void *)v29;
  uint64_t v71 = sub_10003ABC8((unint64_t *)&unk_100603DF0, (void (*)(uint64_t))&type metadata accessor for SubscriptionConfirmationSheetHandler);
  aBlock = (void **)v30;
  dispatch thunk of PurchaseController.subscriptionConfirmatonHandler.setter();

  uint64_t v31 = OBJC_IVAR____TtC8Podcasts11AppDelegate_widgetManager;
  if (!*(void *)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_widgetManager])
  {
    sub_100054B78(&qword_1005FD620);
    swift_retain();
    BaseObjectGraph.inject<A>(_:)();
    uint64_t v32 = v73;
    uint64_t v33 = v74;
    sub_100054B78((uint64_t *)&unk_1005FBBF0);
    BaseObjectGraph.inject<A>(_:)();
    type metadata accessor for PlaybackController();
    BaseObjectGraph.inject<A>(_:)();
    uint64_t v34 = v66;
    id v35 = objc_allocWithZone((Class)type metadata accessor for WidgetManager());
    uint64_t v36 = sub_1000343FC(v32, v33, (uint64_t)&aBlock, v34, 1.0);
    swift_release();
    uint64_t v37 = *(void **)&v1[v31];
    *(void *)&v1[v31] = v36;
  }
  uint64_t v58 = v13;
  if (sub_10000CFD0())
  {
    uint64_t v38 = v26;
    uint64_t v39 = (uint64_t)v55;
    PPTViewControllerProxy.init(tabBarController:)();
    uint64_t v40 = type metadata accessor for PPTViewControllerProxy();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
    uint64_t v41 = (uint64_t)&v1[OBJC_IVAR____TtC8Podcasts11AppDelegate_pptViewHierarchyProxy];
    swift_beginAccess();
    sub_100039D84(v39, v41, &qword_100601E18);
    swift_endAccess();
  }
  sub_10000A40C(v26);
  sub_100039DE8();
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  uint64_t v42 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v1;
  *(void *)(v43 + 24) = v24;
  uint64_t v71 = (uint64_t)sub_10005D904;
  uint64_t v72 = v43;
  aBlock = _NSConcreteStackBlock;
  uint64_t v68 = 1107296256;
  uint64_t v69 = sub_10003B424;
  uint64_t v70 = &unk_100562DD8;
  uint64_t v44 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v45 = v1;
  swift_release();
  uint64_t v46 = v57;
  static DispatchQoS.unspecified.getter();
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_10003ABC8((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  uint64_t v47 = v59;
  uint64_t v48 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v44);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v47, v48);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v62);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  LOBYTE(v73) = 0;
  sub_10005E33C();
  AnyHashable.init<A>(_:)();
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = v24;
  *(void *)(v49 + 24) = v11;
  type metadata accessor for BaseObjectGraph();
  swift_retain();
  AppDependencyManager.add<A>(key:dependency:)();
  swift_release();
  swift_release();
  sub_100054B1C((uint64_t)&aBlock, &qword_1005F7E70);
  char v50 = static Podcasts.isUIPSidebarEnabled.getter();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_10004D2D8((uint64_t)v75);
  if (v50) {
    uint64_t v51 = v56;
  }
  else {
    uint64_t v51 = v26;
  }
  if (v50) {
    uint64_t v52 = v26;
  }
  else {
    uint64_t v52 = v56;
  }

  return v52;
}

uint64_t sub_100039D84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100054B78(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100039DE8()
{
  uint64_t v64 = sub_100054B78(&qword_100603E00);
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v61 = (char *)v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100054B78(&qword_100603E08);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v63 = (char *)v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100054B78(&qword_100603E10);
  uint64_t v68 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v66 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100054B78((uint64_t *)&unk_100603E18);
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v55 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_1005F9F20);
  __chkstk_darwin(v6 - 8);
  uint64_t v54 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v52);
  uint64_t v53 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  uint64_t v51 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100054B78(&qword_100603E28);
  uint64_t v46 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100054B78(&qword_100603E30);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v21 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100054B78(&qword_100603E38);
  uint64_t v59 = *(void *)(v22 - 8);
  uint64_t v60 = v22;
  __chkstk_darwin(v22);
  uint64_t v58 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v0;
  uint64_t v25 = v0 + OBJC_IVAR____TtC8Podcasts11AppDelegate_flowController;
  swift_beginAccess();
  sub_100054BBC(v25, (uint64_t)v70, &qword_100604710);
  if (!v70[3]) {
    return sub_100054B1C((uint64_t)v70, &qword_100604710);
  }
  sub_100054B78(&qword_1005F7E80);
  type metadata accessor for BaseFlowController();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    v44[3] = v69;
    id v27 = [self defaultCenter];
    uint64_t v28 = @"MTSyncControllerSubscriptionSyncCompleted";
    uint64_t v45 = v3;
    uint64_t v29 = v28;
    NSNotificationCenter.publisher(for:object:)();

    sub_10003ABC8(&qword_100603E40, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
    Publisher.first()();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v44[2] = v24;
    type metadata accessor for LibraryDataProvider(0);
    swift_retain();
    BaseObjectGraph.inject<A>(_:)();
    swift_release();
    id v30 = v70[0];
    *(void *)(swift_allocObject() + 16) = v30;
    static Subscribers.Demand.unlimited.getter();
    sub_100054B78(&qword_100603E48);
    v44[1] = &protocol conformance descriptor for Publishers.First<A>;
    sub_100044200(&qword_100603E50, &qword_100603E28);
    sub_100044200((unint64_t *)&unk_100603E58, &qword_100603E48);
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v17);
    sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
    (*(void (**)(char *, void, uint64_t))(v47 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v48);
    static DispatchQoS.unspecified.getter();
    v70[0] = _swiftEmptyArrayStorage;
    sub_10003ABC8((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_100054B78((uint64_t *)&unk_1005F7A60);
    sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v70[0] = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v32 = (uint64_t)v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v54, 1, 1, v31);
    sub_100044200((unint64_t *)&unk_100603E68, &qword_100603E30);
    sub_100059BE0();
    uint64_t v33 = v58;
    uint64_t v34 = v50;
    Publisher.receive<A>(on:options:)();
    sub_100054B1C(v32, &qword_1005F9F20);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v34);
    sub_100044200(&qword_100603E78, &qword_100603E38);
    id v35 = v55;
    uint64_t v36 = v60;
    Publisher.first()();
    sub_100044200(&qword_100603E80, (uint64_t *)&unk_100603E18);
    swift_retain();
    uint64_t v37 = v57;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v37);
    swift_beginAccess();
    sub_100054B78((uint64_t *)&unk_1005F9ED0);
    sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
    AnyCancellable.store<A>(in:)();
    swift_endAccess();
    swift_release();
    sub_100054B78(&qword_100603E88);
    uint64_t v38 = v61;
    Publisher.map<A>(_:)();
    v70[0] = 0;
    v70[1] = 0;
    sub_100054B78(&qword_100603E90);
    sub_100044200(&qword_100603E98, &qword_100603E00);
    uint64_t v40 = v63;
    uint64_t v39 = v64;
    Publisher.scan<A>(_:_:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v39);
    sub_100054B78(&qword_100603EA0);
    sub_100044200(&qword_100603EA8, &qword_100603E08);
    uint64_t v42 = v66;
    uint64_t v41 = v67;
    Publisher.compactMap<A>(_:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v40, v41);
    sub_100044200((unint64_t *)&unk_100603EB0, &qword_100603E10);
    swift_retain();
    uint64_t v43 = v45;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v42, v43);
    swift_beginAccess();
    AnyCancellable.store<A>(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v33, v36);
  }
  return result;
}

uint64_t sub_10003ABC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10003AC10(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v3 = +[MTFeedManager sharedInstance];
  LOBYTE(v2) = *(unsigned char *)(a1 + 90);
  [v3 updateFeedForFeedUrl:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) cloudSyncFeedUrl:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) podcastStoreId:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) triggerBy:*(void *)(a1 + 32) userInitiated:*(unsigned __int8 *)(a1 + 88) forceBootstrap:*(unsigned __int8 *)(a1 + 89) useBackgroundFetch:v2 source:*(void *)(a1 + 80) completion:*(void *)(a1 + 48)];
}

void FeedManager.updateFeed(forFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, char a6, char a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v30[0] = a3;
  uint64_t v16 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (NSURL *)((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (char *)((char *)v30 - (char *)v18);
  URL._bridgeToObjectiveC()(v18);
  uint64_t v21 = v20;
  sub_10003B19C(a2, (uint64_t)v19);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, v22) != 1)
  {
    URL._bridgeToObjectiveC()(v24);
    uint64_t v25 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v22);
  }
  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  if (a10)
  {
    aBlock[4] = a10;
    aBlock[5] = a11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10018FFEC;
    aBlock[3] = &unk_100560B58;
    id v27 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    id v27 = 0;
  }
  LOBYTE(v29) = 0;
  LOBYTE(v28) = a8 & 1;
  [(id)v30[1] updateFeedForFeedUrl:v21 cloudSyncFeedUrl:v25 podcastStoreId:v30[0] triggerBy:a5 userInitiated:a6 & 1 forceBootstrap:a7 & 1 useBackgroundFetch:v28 source:a9 isSubscribing:v29 feedDownloadedHook:0 preProcessFeedHook:0 postProcessFeedHook:0 completion:v27];
  _Block_release(v27);
}

uint64_t sub_10003B19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_1005F7750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003B238()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)&v0[OBJC_IVAR____TtC8Podcasts13BaseOperation_lock] lock];
  int v2 = v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state];
  [*(id *)&v0[v1] unlock];
  if (v2) {
    return 0;
  }
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for BaseOperation();
  if (objc_msgSendSuper2(&v4, "isReady")) {
    return 1;
  }
  else {
    return (uint64_t)[v0 isCancelled];
  }
}

uint64_t type metadata accessor for BaseOperation()
{
  return self;
}

BOOL sub_10003B330()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock) lock];
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__state);
  [*(id *)(v0 + v1) unlock];
  return v2 == 2;
}

BOOL sub_10003B3C4()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock) lock];
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__state);
  [*(id *)(v0 + v1) unlock];
  return v2 == 1;
}

uint64_t sub_10003B424(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10003B468(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5);
}

uint64_t sub_10003B4E8(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10003B528()
{
  return sub_10003B468((uint64_t (*)(void))&type metadata accessor for FeedUpdateRequest, sub_10003B554);
}

uint64_t sub_10003B554(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for FeedUpdateRequest();
  uint64_t v5 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR___MTFeedManager__system);
  if (v8)
  {
    uint64_t v9 = self;
    sub_10003B7D4(v8);
    swift_unknownObjectRetain();
    swift_retain();
    if ([v9 isEmpty:FeedUpdateRequest.podcastStoreId.getter()])
    {
      swift_getObjectType();
      dispatch thunk of URLBasedFeedUpdater.updateFeed(request:)();
    }
    else
    {
      dispatch thunk of StoreFeedUpdater.updateFeed(request:)();
    }
    swift_unknownObjectRelease();
    swift_release();
    return sub_10003B4E8(v8);
  }
  else
  {
    FeedUpdateRequest.beginQueueing()();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, updated);
    uint64_t v10 = (unint64_t *)(a1 + OBJC_IVAR___MTFeedManager__pendingRequests);
    swift_beginAccess();
    unint64_t v11 = *v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t *v10 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v11 = sub_1002F0030(0, *(void *)(v11 + 16) + 1, 1, v11);
      unint64_t *v10 = v11;
    }
    unint64_t v14 = *(void *)(v11 + 16);
    unint64_t v13 = *(void *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      unint64_t v11 = sub_1002F0030(v13 > 1, v14 + 1, 1, v11);
      unint64_t *v10 = v11;
    }
    *(void *)(v11 + 16) = v14 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v14, v7, updated);
    return swift_endAccess();
  }
}

uint64_t sub_10003B7D4(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10003B814(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_10003B830()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.widget.getter();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reloading Timeline", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  type metadata accessor for WidgetCenter();
  static WidgetCenter.shared.getter();
  dispatch thunk of WidgetCenter.reloadTimelines(ofKind:)();
  return swift_release();
}

uint64_t sub_10003B9A0()
{
  return sub_10003B814((uint64_t (*)(void, void, void, void, void, void, void))sub_10003B9B8);
}

uint64_t sub_10003B9B8(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v45 = a7;
  uint64_t v46 = a6;
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v40 = a1;
  uint64_t v9 = type metadata accessor for DownloadJob(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100054B78((uint64_t *)&unk_1005F9368);
  __chkstk_darwin(v44);
  unint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v16 = String._bridgeToObjectiveC()();
  id v43 = [v15 initWithEntityName:v16];

  sub_100054B78(&qword_1005F7720);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_10046E5C0;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v18 = sub_10004DA4C();
  *(void *)(v17 + 64) = v18;
  *(void *)(v17 + 32) = 0xD000000000000011;
  *(void *)(v17 + 40) = 0x80000001004D52A0;
  if (a3) {
    uint64_t v19 = 1936484398;
  }
  else {
    uint64_t v19 = 0x7261646E6174732ELL;
  }
  if (a3) {
    uint64_t v20 = (void *)0xE400000000000000;
  }
  else {
    uint64_t v20 = (void *)0xE900000000000064;
  }
  sub_10004D29C(0, (unint64_t *)&unk_1005F8100);
  uint64_t v47 = v40;
  uint64_t v48 = a2;
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = v47;
  uint64_t v23 = v48;
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 104) = v18;
  *(void *)(v17 + 72) = v22;
  *(void *)(v17 + 80) = v23;
  *(void *)(v17 + 136) = &type metadata for String;
  *(void *)(v17 + 144) = v18;
  strcpy((char *)(v17 + 112), "taskIdentifier");
  *(unsigned char *)(v17 + 127) = -18;
  *(void *)(v17 + 176) = sub_100054B78(&qword_1005F9378);
  *(void *)(v17 + 184) = sub_100044200((unint64_t *)&unk_1005F9380, &qword_1005F9378);
  *(void *)(v17 + 152) = v41;
  swift_bridgeObjectRetain();
  uint64_t v24 = v43;
  uint64_t v25 = NSPredicate.init(format:_:)();
  [v24 setPredicate:v25];

  type metadata accessor for CDDownloadJob();
  unint64_t v26 = NSManagedObjectContext.fetch<A>(_:)();
  unint64_t v27 = v26;
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v29 = v46;
  uint64_t v39 = v14;
  if (!v28)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_20:
    uint64_t v36 = v39;
    *uint64_t v39 = v32;
    uint64_t v37 = (uint64_t)v36;
    swift_storeEnumTagMultiPayload();
    v29(v37);

    return sub_100054B1C(v37, (uint64_t *)&unk_1005F9368);
  }
  uint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001BA6F8(0, v28 & ~(v28 >> 63), 0);
  if ((v28 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v47;
    do
    {
      if ((v27 & 0xC000000000000001) != 0) {
        id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v33 = *(id *)(v27 + 8 * v31 + 32);
      }
      sub_1001D73B0(v33, (uint64_t)v12);
      uint64_t v47 = v32;
      unint64_t v35 = v32[2];
      unint64_t v34 = v32[3];
      if (v35 >= v34 >> 1)
      {
        sub_1001BA6F8(v34 > 1, v35 + 1, 1);
        uint64_t v32 = v47;
      }
      ++v31;
      v32[2] = v35 + 1;
      sub_1001D8788((uint64_t)v12, (uint64_t)v32+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v35, type metadata accessor for DownloadJob);
    }
    while (v28 != v31);
    swift_bridgeObjectRelease();
    uint64_t v29 = v46;
    uint64_t v24 = v43;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003BEB0()
{
  return sub_10003B814((uint64_t (*)(void, void, void, void, void, void, void))sub_10004B1CC);
}

uint64_t type metadata accessor for CDDownloadJob()
{
  return self;
}

void sub_10003BEEC()
{
}

void sub_10003BEF4()
{
  id v0 = [self defaultCenter];
  PlayerNotification_PlayerPathDidChange.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  [v0 postNotificationName:v1 object:Strong];
}

void sub_10003BFA4(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_10003BFC0(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100054B78(&qword_1005F76A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100054B78((uint64_t *)&unk_1005F82B0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v56 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v64 = (uint64_t)&v56 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v60 = (uint64_t)&v56 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  Swift::String v21 = (char *)&v56 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v62 = (uint64_t)&v56 - v23;
  __chkstk_darwin(v22);
  uint64_t v61 = (char *)&v56 - v24;
  NSString v25 = String._bridgeToObjectiveC()();
  unint64_t v26 = [a1 episodeForUuid:v25];

  if (v26)
  {
    id v27 = [v26 podcast];
    if (v27)
    {
      id v56 = v27;
      id v57 = v26;
      MTPodcast.artworkModel.getter();
      uint64_t v28 = type metadata accessor for ArtworkModel();
      int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v6, 1, v28);
      uint64_t v58 = a2;
      if (v29 == 1)
      {
        sub_100054B1C((uint64_t)v6, &qword_1005F76A0);
        uint64_t v30 = type metadata accessor for ArtworkRequest();
        uint64_t v31 = (uint64_t)v61;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v61, 1, 1, v30);
      }
      else
      {
        uint64_t v31 = (uint64_t)v61;
        ArtworkModel.preferredRequest.getter();
        sub_10003CC7C((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for ArtworkModel);
        uint64_t v32 = type metadata accessor for ArtworkRequest();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 0, 1, v32);
      }
      sub_100054B78(&qword_1005F82A8);
      uint64_t v33 = *(void *)(v8 + 72);
      unint64_t v34 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_10046D010;
      unint64_t v63 = v34;
      sub_100054BBC(v31, v35 + v34, (uint64_t *)&unk_1005F82B0);
      if (qword_1005F5B20 != -1) {
        swift_once();
      }
      uint64_t v36 = v62;
      if (byte_100605790 == 1)
      {
        uint64_t v59 = v35;
        sub_100054BBC(v31, (uint64_t)v21, (uint64_t *)&unk_1005F82B0);
        uint64_t v37 = type metadata accessor for ArtworkRequest();
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v21, 1, v37) == 1)
        {
          sub_100054B1C((uint64_t)v21, (uint64_t *)&unk_1005F82B0);
          uint64_t v39 = 1;
        }
        else
        {
          ArtworkRequest.replacingEffects(_:)();
          uint64_t v36 = v62;
          (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v37);
          uint64_t v39 = 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v36, v39, 1, v37);
        uint64_t v40 = v60;
        sub_100054BBC(v36, v60, (uint64_t *)&unk_1005F82B0);
        uint64_t v35 = v59;
        unint64_t v42 = *(void *)(v59 + 16);
        unint64_t v41 = *(void *)(v59 + 24);
        if (v42 >= v41 >> 1) {
          uint64_t v35 = sub_10003CA0C(v41 > 1, v42 + 1, 1, v59);
        }
        *(void *)(v35 + 16) = v42 + 1;
        sub_100053820(v40, v35 + v63 + v42 * v33, (uint64_t *)&unk_1005F82B0);
        sub_100054B1C(v62, (uint64_t *)&unk_1005F82B0);
      }
      int64_t v43 = *(void *)(v35 + 16);
      if (v43)
      {
        uint64_t v65 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_10003C7A4(0, v43, 0);
        uint64_t v59 = v35;
        uint64_t v44 = v35 + v63;
        uint64_t v45 = (uint64_t *)&unk_1005F82B0;
        do
        {
          sub_100054BBC(v44, (uint64_t)v14, v45);
          sub_100054BBC((uint64_t)v14, (uint64_t)v11, v45);
          uint64_t v46 = type metadata accessor for ArtworkRequest();
          uint64_t v47 = *(void *)(v46 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v11, 1, v46) == 1)
          {
            sub_100054B1C((uint64_t)v11, v45);
            uint64_t v48 = 1;
            uint64_t v49 = v64;
          }
          else
          {
            uint64_t v62 = v43;
            uint64_t v50 = v45;
            uint64_t v51 = v14;
            uint64_t v52 = v33;
            uint64_t v53 = v64;
            ArtworkRequest.resized(to:displayScale:)();
            uint64_t v49 = v53;
            uint64_t v33 = v52;
            unint64_t v14 = v51;
            uint64_t v45 = v50;
            int64_t v43 = v62;
            (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v46);
            uint64_t v48 = 0;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v49, v48, 1, v46);
          sub_100054B1C((uint64_t)v14, v45);
          unint64_t v26 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10003C7A4(0, v26[2] + 1, 1);
            unint64_t v26 = v65;
          }
          unint64_t v55 = v26[2];
          unint64_t v54 = v26[3];
          if (v55 >= v54 >> 1)
          {
            sub_10003C7A4(v54 > 1, v55 + 1, 1);
            unint64_t v26 = v65;
          }
          v26[2] = v55 + 1;
          sub_100053820(v64, (uint64_t)v26 + v63 + v55 * v33, v45);
          v44 += v33;
          --v43;
        }
        while (v43);
        swift_bridgeObjectRelease_n();

        uint64_t v31 = (uint64_t)v61;
      }
      else
      {
        swift_bridgeObjectRelease();

        unint64_t v26 = _swiftEmptyArrayStorage;
      }
      sub_100054B1C(v31, (uint64_t *)&unk_1005F82B0);
      a2 = v58;
    }
    else
    {

      unint64_t v26 = 0;
    }
  }
  *a2 = v26;
}

uint64_t sub_10003C7A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003C7C4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003C7C4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100054B78(&qword_1005F82A8);
  uint64_t v10 = *(void *)(sub_100054B78((uint64_t *)&unk_1005F82B0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100054B78((uint64_t *)&unk_1005F82B0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  Swift::String v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003CA0C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100054B78(&qword_1005F82A8);
  uint64_t v10 = *(void *)(sub_100054B78((uint64_t *)&unk_1005F82B0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100054B78((uint64_t *)&unk_1005F82B0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1002F0B18(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_10003CC7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10003CCDC(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        self;
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v1 + 32;
      while (1)
      {
        uint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        uint64_t v8 = *(void **)(v6 + 8 * v5);
        self;
        uint64_t v9 = swift_dynamicCastObjCClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v1 = v9;
        id v10 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v5;
        if (v7 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

uint64_t static Dependencies.allDependencies()()
{
  uint64_t v0 = type metadata accessor for Dependency();
  uint64_t v223 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0);
  v208 = (char *)v177 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __chkstk_darwin(v1);
  v209 = (char *)v177 - v4;
  uint64_t v5 = __chkstk_darwin(v3);
  v221 = (char *)v177 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v272 = (char *)v177 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v271 = (char *)v177 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v270 = (char *)v177 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v269 = (char *)v177 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v268 = (char *)v177 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v267 = (char *)v177 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v266 = (char *)v177 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v265 = (char *)v177 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v264 = (char *)v177 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v263 = (char *)v177 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v262 = (char *)v177 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v261 = (char *)v177 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v260 = (char *)v177 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v259 = (char *)v177 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v258 = (char *)v177 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v257 = (char *)v177 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v222 = (char *)v177 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v211 = (char *)v177 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v210 = (char *)v177 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v273 = (char *)v177 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v224 = (char *)v177 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v256 = (char *)v177 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v255 = (char *)v177 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v254 = (char *)v177 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v253 = (char *)v177 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v252 = (char *)v177 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v251 = (char *)v177 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v250 = (char *)v177 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v249 = (char *)v177 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v248 = (char *)v177 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v247 = (char *)v177 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v246 = (char *)v177 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v245 = (char *)v177 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  v244 = (char *)v177 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  v243 = (char *)v177 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v242 = (char *)v177 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v241 = (char *)v177 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  v240 = (char *)v177 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  v239 = (char *)v177 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v238 = (char *)v177 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v237 = (char *)v177 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  v236 = (char *)v177 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  v235 = (char *)v177 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  v234 = (char *)v177 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  v233 = (char *)v177 - v96;
  uint64_t v97 = __chkstk_darwin(v95);
  v232 = (char *)v177 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  v231 = (char *)v177 - v100;
  uint64_t v101 = __chkstk_darwin(v99);
  v230 = (char *)v177 - v102;
  uint64_t v103 = __chkstk_darwin(v101);
  v229 = (char *)v177 - v104;
  uint64_t v105 = __chkstk_darwin(v103);
  v228 = (char *)v177 - v106;
  uint64_t v107 = __chkstk_darwin(v105);
  v227 = (char *)v177 - v108;
  uint64_t v109 = __chkstk_darwin(v107);
  v226 = (char *)v177 - v110;
  uint64_t v111 = __chkstk_darwin(v109);
  v225 = (char *)v177 - v112;
  uint64_t v113 = __chkstk_darwin(v111);
  uint64_t v115 = (char *)v177 - v114;
  uint64_t v116 = __chkstk_darwin(v113);
  uint64_t v118 = (char *)v177 - v117;
  uint64_t v119 = __chkstk_darwin(v116);
  uint64_t v121 = (char *)v177 - v120;
  uint64_t v122 = __chkstk_darwin(v119);
  long long v124 = (char *)v177 - v123;
  uint64_t v125 = __chkstk_darwin(v122);
  uint64_t v127 = (char *)v177 - v126;
  uint64_t v128 = __chkstk_darwin(v125);
  uint64_t v130 = (char *)v177 - v129;
  __chkstk_darwin(v128);
  v132 = (char *)v177 - v131;
  uint64_t v133 = static Dependencies.allDependencies()();
  sub_100054B78(&qword_1005FF6B0);
  uint64_t v213 = v133;
  swift_retain();
  v214 = v132;
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for PlaybackController();
  v215 = v130;
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF6B8);
  uint64_t v216 = v127;
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005FF6C0);
  v217 = v124;
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for PodcastsStateCoordinator();
  v218 = v121;
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_100609310);
  v219 = v118;
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for LibraryDataProvider(0);
  v220 = v115;
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FD620);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005F74B8);
  swift_getKeyPath();
  Dependency.init<A, B>(aliasing:with:)();
  sub_100054B78((uint64_t *)&unk_1005F74C0);
  swift_getKeyPath();
  Dependency.init<A, B>(aliasing:with:)();
  sub_100054B78(&qword_1005F7050);
  swift_getKeyPath();
  Dependency.init<A, B>(aliasing:with:)();
  type metadata accessor for PodcastStateController();
  swift_getKeyPath();
  Dependency.init<A, B>(aliasing:with:)();
  sub_100054B78((uint64_t *)&unk_1005FF6D0);
  swift_getKeyPath();
  Dependency.init<A, B>(aliasing:with:)();
  sub_100054B78((uint64_t *)&unk_1005F74E0);
  swift_getKeyPath();
  Dependency.init<A, B>(aliasing:with:)();
  sub_100054B78((uint64_t *)&unk_1005F74F0);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1006092F0);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005FF6E0);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_100609300);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005F7510);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005F7520);
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for TranscriptReportConcernURLBuilder();
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005FF6F0);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005F7540);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005FF700);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005F7550);
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for LibraryActionController();
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005F7560);
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for ClassKitManager();
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for EpisodeController();
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1006033C0);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005FF710);
  Dependency.init<A>(satisfying:with:)();
  sub_10004D29C(0, &qword_1005FEB00);
  Dependency.init<A>(satisfying:with:)();
  sub_10004D29C(0, &qword_1005FF720);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005FEB60);
  Dependency.init<A>(satisfying:with:)();
  sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF728);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005FF730);
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for SiriIntentDonator();
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_100609320);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78((uint64_t *)&unk_1005FF740);
  Dependency.init<A>(satisfying:with:)();
  if (static Podcasts.isBlueMoonEnabled()())
  {
    type metadata accessor for UserActivityController();
    v134 = v273;
    Dependency.init<A>(satisfying:with:)();
    type metadata accessor for NowPlayingItemPlayheadSynchronizer();
    v135 = v210;
    Dependency.init<A>(satisfying:with:)();
    type metadata accessor for RemoteFollowCommandCenter();
    uint64_t v136 = v211;
    Dependency.init<A>(satisfying:with:)();
    type metadata accessor for BaseObjectGraph();
    sub_100054B78(&qword_1005FF750);
    uint64_t v137 = v223;
    unint64_t v138 = (*(unsigned __int8 *)(v223 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80);
    uint64_t v139 = swift_allocObject();
    *(_OWORD *)(v139 + 16) = xmmword_10046D010;
    (*(void (**)(unint64_t, char *, uint64_t))(v137 + 16))(v139 + v138, v134, v0);
    BaseObjectGraph.__allocating_init(name:_:)();
    dispatch thunk of BaseObjectGraph.adding(dependency:)();
    uint64_t v212 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
    swift_release();
    swift_release();
    v140 = *(void (**)(char *, uint64_t))(v137 + 8);
    v140(v136, v0);
    v140(v135, v0);
    v140(v134, v0);
  }
  else
  {
    sub_10004D29C(0, &qword_1005F7028);
    v141 = v273;
    Dependency.init<A>(satisfying:with:)();
    type metadata accessor for BaseObjectGraph();
    sub_100054B78(&qword_1005FF750);
    uint64_t v142 = v223;
    unint64_t v143 = (*(unsigned __int8 *)(v223 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v223 + 80);
    uint64_t v144 = swift_allocObject();
    *(_OWORD *)(v144 + 16) = xmmword_10046D010;
    (*(void (**)(unint64_t, char *, uint64_t))(v142 + 16))(v144 + v143, v141, v0);
    uint64_t v212 = BaseObjectGraph.__allocating_init(name:_:)();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v141, v0);
  }
  sub_100054B78(&qword_1005FF758);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF760);
  Dependency.init<A>(satisfying:with:)();
  sub_10004D29C(0, &qword_1005F6FE0);
  Dependency.init<A>(satisfying:with:)();
  sub_10004D29C(0, (unint64_t *)&unk_1005FBA00);
  Dependency.init<A>(satisfying:with:)();
  Dependency.init<A>(satisfying:with:)();
  sub_10004D29C(0, (unint64_t *)&qword_1005FF768);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF770);
  Dependency.init<A>(satisfying:with:)();
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for BookmarksController();
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF778);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF780);
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for RecommendationsMetadataProvider();
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for HomePageProvider();
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for EpisodeUpsellBannerDataProvider();
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF788);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF790);
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF798);
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for NowPlayingAlignmentCoordinator();
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for PageContextTracker();
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for OAuthController();
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for DebouncedAutoDownloadProcessor();
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for DebouncedAssetRemovalProcessor();
  v145 = v209;
  Dependency.init<A>(satisfying:with:)();
  sub_100054B78(&qword_1005FF7A0);
  v146 = v208;
  Dependency.init<A>(satisfying:with:)();
  swift_retain();
  uint64_t v207 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v147 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v206 = v147;
  swift_retain();
  uint64_t v205 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v148 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v204 = v148;
  swift_retain();
  uint64_t v203 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v149 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v202 = v149;
  swift_retain();
  uint64_t v201 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v150 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v200 = v150;
  swift_retain();
  uint64_t v199 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v151 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v198 = v151;
  swift_retain();
  uint64_t v197 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v152 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v196 = v152;
  swift_retain();
  uint64_t v195 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v153 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v194 = v153;
  swift_retain();
  uint64_t v193 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v154 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v192 = v154;
  swift_retain();
  uint64_t v191 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v155 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v190 = v155;
  swift_retain();
  uint64_t v189 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v156 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v188 = v156;
  swift_retain();
  uint64_t v187 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v157 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v186 = v157;
  swift_retain();
  uint64_t v185 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v158 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v184 = v158;
  swift_retain();
  uint64_t v183 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v159 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v182 = v159;
  swift_retain();
  uint64_t v181 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v160 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  uint64_t v180 = v160;
  swift_retain();
  uint64_t v179 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v161 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[28] = v161;
  swift_retain();
  v177[27] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v162 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[26] = v162;
  swift_retain();
  v177[25] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v163 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[24] = v163;
  swift_retain();
  v177[23] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v164 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[22] = v164;
  swift_retain();
  v177[21] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v165 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[20] = v165;
  swift_retain();
  v177[19] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v166 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[18] = v166;
  swift_retain();
  v177[17] = dispatch thunk of BaseObjectGraph.adding(allDependenciesOf:)();
  swift_release();
  swift_retain();
  uint64_t v167 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[16] = v167;
  swift_retain();
  v177[15] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v168 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[14] = v168;
  swift_retain();
  v177[13] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v169 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[12] = v169;
  swift_retain();
  v177[11] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v170 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[10] = v170;
  swift_retain();
  v177[9] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v171 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[8] = v171;
  swift_retain();
  v177[7] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v172 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[6] = v172;
  swift_retain();
  v177[5] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v173 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[4] = v173;
  swift_retain();
  v177[3] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v174 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  v177[2] = v174;
  swift_retain();
  v177[1] = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_retain();
  uint64_t v178 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  swift_release_n();
  uint64_t v175 = *(void (**)(char *, uint64_t))(v223 + 8);
  v175(v146, v0);
  v175(v145, v0);
  v175(v221, v0);
  v175(v272, v0);
  v175(v271, v0);
  v175(v270, v0);
  v175(v269, v0);
  v175(v268, v0);
  v175(v267, v0);
  v175(v266, v0);
  v175(v265, v0);
  v175(v264, v0);
  v175(v263, v0);
  v175(v262, v0);
  v175(v261, v0);
  v175(v260, v0);
  v175(v259, v0);
  v175(v258, v0);
  v175(v257, v0);
  v175(v222, v0);
  v175(v211, v0);
  v175(v210, v0);
  v175(v273, v0);
  v175(v224, v0);
  v175(v256, v0);
  v175(v255, v0);
  v175(v254, v0);
  v175(v253, v0);
  v175(v252, v0);
  v175(v251, v0);
  v175(v250, v0);
  v175(v249, v0);
  v175(v248, v0);
  v175(v247, v0);
  v175(v246, v0);
  v175(v245, v0);
  v175(v244, v0);
  v175(v243, v0);
  v175(v242, v0);
  v175(v241, v0);
  v175(v240, v0);
  v175(v239, v0);
  v175(v238, v0);
  v175(v237, v0);
  v175(v236, v0);
  v175(v235, v0);
  v175(v234, v0);
  v175(v233, v0);
  v175(v232, v0);
  v175(v231, v0);
  v175(v230, v0);
  v175(v229, v0);
  v175(v228, v0);
  v175(v227, v0);
  v175(v226, v0);
  v175(v225, v0);
  v175(v220, v0);
  v175(v219, v0);
  v175(v218, v0);
  v175(v217, v0);
  v175(v216, v0);
  v175(v215, v0);
  v175(v214, v0);
  return v178;
}

{
  return static Dependencies.allDependencies()();
}

void sub_10003F86C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v18 objects:v24 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v19;
      *(void *)&long long v6 = 138412290;
      long long v17 = v6;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v4);
          }
          uint64_t v10 = [*(id *)(*((void *)&v18 + 1) + 8 * i) originalRequest:v17 v18];
          uint64_t v11 = [v10 URL];

          if (v11)
          {
            uint64_t v12 = _MTLogCategoryFeedUpdate();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v17;
              uint64_t v23 = v11;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Found existing task for feed-update for %@.", buf, 0xCu);
            }

            uint64_t v13 = [*(id *)(a1 + 32) delegate];
            [v13 didRestoreFeedUrlTask:v11];
          }
        }
        id v7 = [v4 countByEnumeratingWithState:&v18 objects:v24 count:16];
      }
      while (v7);
    }
  }
  else
  {
    uint64_t v4 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No existing tasks found on background-session.", buf, 2u);
    }
  }

  uint64_t v14 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = [*(id *)(a1 + 32) workQueue];
    *(_DWORD *)buf = 138412290;
    uint64_t v23 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Rebuild pending network tasks - RESUMING workQueue: %@.", buf, 0xCu);
  }
  uint64_t v16 = [*(id *)(a1 + 32) workQueue];
  dispatch_resume(v16);
}

void sub_10003FC90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

char *sub_100040008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, char *a14)
{
  uint64_t v95 = a8;
  uint64_t v92 = a7;
  uint64_t v91 = a6;
  uint64_t v108 = a5;
  uint64_t v103 = a4;
  uint64_t v89 = a3;
  uint64_t v105 = a2;
  uint64_t v104 = a1;
  int v101 = a13;
  uint64_t v97 = a10;
  uint64_t v107 = a9;
  uint64_t v85 = a14;
  uint64_t v98 = a11;
  uint64_t v96 = type metadata accessor for URL();
  uint64_t v106 = *(void *)(v96 - 8);
  uint64_t v100 = *(void *)(v106 + 64);
  __chkstk_darwin(v96);
  uint64_t v99 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for DispatchTimeInterval();
  uint64_t v90 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v88 = (uint64_t *)((char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v109 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v84 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v17);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v18 - 8);
  v120[3] = sub_10004D29C(0, &qword_1005F6FE0);
  v120[4] = &off_100564540;
  v120[0] = a12;
  uint64_t v118 = &type metadata for AccounStoreDsidProvider;
  uint64_t v119 = &off_100567CD0;
  *(void *)&a14[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___serialQueue] = 0;
  uint64_t v86 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_delegateQueue;
  uint64_t v102 = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  aBlock = 0;
  unint64_t v111 = 0xE000000000000000;
  long long v19 = a14;
  _StringGuts.grow(_:)(16);
  uint64_t v93 = (objc_class *)type metadata accessor for EpisodeDownloadsManager();
  sub_100054B78(&qword_1005F5D38);
  uint64_t v20 = _typeName(_:qualified:)();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  aBlock = (void *)v20;
  unint64_t v111 = v22;
  v23._countAndFlagsBits = 0x746167656C65642ELL;
  v23._object = (void *)0xEE00657565755165;
  String.append(_:)(v23);
  uint64_t v80 = aBlock;
  unint64_t v79 = v111;
  static DispatchQoS.unspecified.getter();
  aBlock = _swiftEmptyArrayStorage;
  uint64_t v82 = sub_100042FDC((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v81 = sub_100054B78((uint64_t *)&unk_1005F7A60);
  uint64_t v83 = sub_100044200((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v24 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 104);
  v109 += 104;
  uint64_t v78 = v25;
  uint64_t v26 = v84;
  uint64_t v27 = v87;
  v25(v84, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v87);
  *(void *)&v85[v86] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v86 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_accessQueue;
  aBlock = (void *)_typeName(_:qualified:)();
  unint64_t v111 = v28;
  v29._countAndFlagsBits = 0x517373656363612ELL;
  v29._object = (void *)0xEC00000065756575;
  String.append(_:)(v29);
  static DispatchQoS.unspecified.getter();
  aBlock = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v78(v26, v24, v27);
  *(void *)&v19[v86] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v30 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders;
  *(void *)&v19[v30] = sub_10005A2F4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v31 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_inMemoryStorage;
  type metadata accessor for JobPipelineInMemoryStorage();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = [objc_allocWithZone((Class)NSRecursiveLock) init];
  *(void *)(v32 + 24) = _swiftEmptyArrayStorage;
  *(void *)&v19[v31] = v32;
  *(void *)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_expectedDownloaderTypes] = &_swiftEmptySetSingleton;
  *(void *)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___restoreQueue] = 0;
  uint64_t v33 = &v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_finalCheckBeforStart];
  *(void *)uint64_t v33 = 0;
  *((void *)v33 + 1) = 0;
  *(void *)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___preflightURLSession] = 0;
  sub_10001165C((uint64_t)v107, (uint64_t)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_downloaderConfiguration]);
  *(void *)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_episodeRemover] = v103;
  uint64_t v34 = &v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userEpisodeStorage];
  *(void *)uint64_t v34 = v104;
  *((void *)v34 + 1) = &off_10056A248;
  uint64_t v35 = &v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_systemEpisodeStorage];
  *(void *)uint64_t v35 = v105;
  *((void *)v35 + 1) = &off_10056A248;
  sub_100056D54((uint64_t)v117, (uint64_t)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_dsidProvider]);
  uint64_t v36 = &v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_jobStorage];
  *(void *)uint64_t v36 = v89;
  *((void *)v36 + 1) = &off_100558210;
  sub_100054BBC(v108, (uint64_t)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_mediaLibraryClient], (uint64_t *)&unk_1005F6FD0);
  uint64_t v37 = v91;
  *(void *)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_limitsHolder] = v91;
  uint64_t v38 = v92;
  *(void *)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_notifier] = v92;
  uint64_t v39 = type metadata accessor for DownloadsAlertPresenter();
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 24) = 0u;
  *(_OWORD *)(v40 + 40) = 0u;
  *(void *)(v40 + 56) = 0;
  *(unsigned char *)(v40 + 64) = -1;
  *(void *)(v40 + 16) = v95;
  uint64_t v41 = (uint64_t)v88;
  *uint64_t v88 = 500;
  uint64_t v42 = enum case for DispatchTimeInterval.milliseconds(_:);
  uint64_t v109 = *(void *)(v90 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v43 = v37;
  id v44 = v38;
  swift_unknownObjectRetain();
  ((void (*)(uint64_t, uint64_t, uint64_t))v109)(v41, v42, v94);
  uint64_t v113 = (void *)v39;
  uint64_t v114 = (void (*)())&off_10055BD58;
  aBlock = (void *)v40;
  uint64_t v45 = type metadata accessor for DownloadsAlertController();
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = sub_100055EF0((uint64_t)&aBlock, v39);
  __chkstk_darwin(v47);
  uint64_t v49 = (uint64_t *)((char *)&v77 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v50 + 16))(v49);
  uint64_t v51 = *v49;
  swift_retain();
  uint64_t v52 = sub_10000EB38(v51, v41, v46);
  sub_10004D2D8((uint64_t)&aBlock);
  swift_release();
  uint64_t v113 = (void *)v45;
  uint64_t v114 = (void (*)())&off_1005592C0;
  aBlock = (void *)v52;
  sub_100053820((uint64_t)&aBlock, (uint64_t)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_userAlertsPresenter], (uint64_t *)&unk_1005F7AA0);
  *(void *)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_reachability] = v97;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 16);
  uint64_t v54 = v98;
  uint64_t v55 = v96;
  v53(&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_assetsFolder], v98, v96);
  sub_100056D54((uint64_t)v120, (uint64_t)&v19[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_artworkStorage]);
  swift_unknownObjectRetain();

  v116.receiver = v19;
  v116.super_class = v93;
  uint64_t v56 = (char *)[super init];
  uint64_t v57 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v58 = (uint64_t (**)())&v56[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_finalCheckBeforStart];
  uint64_t v59 = *(void *)&v56[OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_finalCheckBeforStart];
  *uint64_t v58 = sub_1001AB790;
  v58[1] = (uint64_t (*)())v57;
  uint64_t v60 = v56;
  sub_1000536BC(v59);
  id v61 = sub_100041274();
  uint64_t v62 = v99;
  uint64_t v63 = v54;
  v53(v99, v54, v55);
  uint64_t v64 = v106;
  unint64_t v65 = (*(unsigned __int8 *)(v106 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
  uint64_t v66 = swift_allocObject();
  uint64_t v67 = v55;
  (*(void (**)(unint64_t, char *, uint64_t))(v64 + 32))(v66 + v65, v62, v55);
  uint64_t v114 = sub_10005B644;
  uint64_t v115 = v66;
  aBlock = _NSConcreteStackBlock;
  unint64_t v111 = 1107296256;
  uint64_t v112 = sub_10003B424;
  uint64_t v113 = &unk_100557388;
  uint64_t v68 = _Block_copy(&aBlock);
  swift_release();
  [v61 addOperationWithBlock:v68];
  _Block_release(v68);

  id v69 = sub_100041274();
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_10046D070;
  uint64_t v71 = v107;
  uint64_t v72 = (char *)sub_100041A98(v107, v107[3]);
  LOBYTE(v68) = v101;
  *(void *)(v70 + 32) = sub_100040CE8(*v72, v101);
  uint64_t v73 = (char *)sub_100041A98(v71 + 5, v71[8]);
  *(void *)(v70 + 40) = sub_100040CE8(*v73, (char)v68);
  uint64_t v74 = (char *)sub_100041A98(v71 + 10, v71[13]);
  *(void *)(v70 + 48) = sub_100040CE8(*v74, (char)v68);
  aBlock = (void *)v70;
  specialized Array._endMutation()();
  sub_10004D29C(0, (unint64_t *)&unk_1005FF020);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v69 addOperations:isa waitUntilFinished:0];

  sub_10004D2D8((uint64_t)v120);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v67);
  sub_100011468((uint64_t)v71);
  sub_10004D2D8((uint64_t)v117);
  sub_100054B1C(v108, (uint64_t *)&unk_1005F6FD0);
  return v60;
}

id sub_100040CE8(char a1, char a2)
{
  v17[3] = &type metadata for PodcastsDownloader;
  v17[4] = &off_100555110;
  LOBYTE(v17[0]) = a1;
  Swift::Int v3 = 0xD000000000000033;
  Swift::Int v4 = 0x80000001004D1B10;
  switch(*(unsigned char *)sub_100041A98(v17, (uint64_t)&type metadata for PodcastsDownloader))
  {
    case 1:
      id v5 = "com.apple.podcasts.downloads.episodes.restore";
      goto LABEL_4;
    case 2:
      id v5 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_4:
      Swift::Int v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      Swift::Int v3 = 0xD00000000000002DLL;
      break;
    case 3:
      Swift::Int v3 = 0xD00000000000002FLL;
      Swift::Int v4 = 0x80000001004D1BB0;
      break;
    default:
      break;
  }
  swift_beginAccess();
  sub_100040F08(&v16, v3, v4);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100056D54((uint64_t)v17, (uint64_t)v15);
  uint64_t v7 = swift_allocObject();
  sub_100042FC4(v15, v7 + 16);
  *(unsigned char *)(v7 + 56) = a2 & 1;
  *(void *)(v7 + 64) = v6;
  uint64_t v8 = (objc_class *)sub_100054B78(&qword_1005F7AB0);
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  uint64_t v10 = &v9[*(void *)((swift_isaMask & *(void *)v9) + 0x180)];
  *(void *)uint64_t v10 = 0;
  v10[8] = 2;
  uint64_t v11 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v9[*(void *)((swift_isaMask & *(void *)v9) + 0x188)];
  *uint64_t v11 = sub_1000414EC;
  v11[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7;
  v14.receiver = v9;
  v14.super_class = v8;
  id v12 = [super init];
  sub_10004D2D8((uint64_t)v17);
  return v12;
}

uint64_t sub_100040F08(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    id v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      objc_super v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *Swift::Int v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000410C8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *Swift::Int v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_1000410C8(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  id v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000126A8();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1003F74F4();
      goto LABEL_22;
    }
    sub_100008E08();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    Swift::Int v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

id sub_100041274()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___serialQueue;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___serialQueue);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___serialQueue);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)NSOperationQueue) init];
    [v4 setQualityOfService:-1];
    [v4 setMaxConcurrentOperationCount:1];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_100041310()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = (void *)(swift_isaMask & *v0);
  uint64_t v3 = v2[46];
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(ObjectType);
  id v6 = (char *)&v12 - v5;
  uint64_t v7 = *(void (**)(char *, void (*)(uint64_t), void *))((char *)v0 + v2[49]);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_10004A2A8(ObjectType, WitnessTable, (uint64_t)v6);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v10 = (void *)swift_allocObject();
  v10[2] = v3;
  void v10[3] = v2[47];
  v10[4] = v9;
  swift_retain();
  v7(v6, sub_10005C49C, v10);
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return swift_release();
}

uint64_t sub_1000414EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000414FC(a1, a2, a3, (void *)(v3 + 16), *(unsigned __int8 *)(v3 + 56), *(void *)(v3 + 64));
}

uint64_t sub_1000414FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t a6)
{
  LODWORD(v7) = a5;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  uint64_t v37 = v15;
  swift_retain();
  static Logger.downloads.getter();
  sub_100056D54((uint64_t)a4, (uint64_t)&v40);
  BOOL v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v34 = a6 + 16;
    uint64_t v35 = a6;
    int v36 = v7;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v39[0] = v32;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v19 = *(unsigned __int8 *)sub_100041A98(&v40, v41);
    uint64_t v7 = 0xD000000000000033;
    uint64_t v20 = (void *)0x80000001004D1B10;
    uint64_t v33 = v11;
    switch(v19)
    {
      case 1:
        uint64_t v21 = "com.apple.podcasts.downloads.episodes.restore";
        goto LABEL_6;
      case 2:
        uint64_t v21 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_6:
        uint64_t v20 = (void *)((unint64_t)(v21 - 32) | 0x8000000000000000);
        uint64_t v7 = 0xD00000000000002DLL;
        break;
      case 3:
        uint64_t v7 = 0xD00000000000002FLL;
        uint64_t v20 = (void *)0x80000001004D1BB0;
        break;
      default:
        break;
    }
    strcpy((char *)v38, "ConfigType: ");
    BYTE13(v38[0]) = 0;
    HIWORD(v38[0]) = -5120;
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = v7;
    v22._object = v20;
    String.append(_:)(v22);
    swift_bridgeObjectRelease_n();
    *(void *)&v38[0] = sub_10004B974(*(uint64_t *)&v38[0], *((unint64_t *)&v38[0] + 1), v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004D2D8((uint64_t)&v40);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Create downloader for %{public}s.", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v33);
    LOBYTE(v7) = v36;
    a6 = v35;
  }
  else
  {
    sub_10004D2D8((uint64_t)&v40);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  sub_100056D54((uint64_t)a4, (uint64_t)&v40);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a6;
  sub_100042FC4(&v40, v23 + 24);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v25 = (void *)Strong;
    uint64_t v26 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();

    uint64_t v27 = sub_1003D343C;
  }
  else
  {
    swift_retain();
    uint64_t v27 = 0;
    uint64_t v26 = 0;
  }
  sub_100056D54((uint64_t)a4, (uint64_t)v38);
  unint64_t v28 = (void *)swift_allocObject();
  v28[2] = a6;
  sub_100042FC4(v38, (uint64_t)(v28 + 3));
  uint64_t v29 = v37;
  v28[8] = sub_10005CADC;
  v28[9] = v29;
  char v30 = *(unsigned char *)sub_100041A98(a4, a4[3]);
  swift_retain();
  sub_10005553C(v30, v7 & 1, (uint64_t)sub_10005B638, v23, (uint64_t)v27, v26, (uint64_t)sub_100032E1C, (uint64_t)v28);
  sub_1000536BC((uint64_t)v27);
  swift_release();
  return swift_release();
}

uint64_t sub_100041994(uint64_t a1, void *a2)
{
  sub_100041A98(a2, a2[3]);
  uint64_t v4 = dispatch thunk of ImageProvider.load(artwork:)();
  ArtworkRequest.trace.getter();
  sub_100054B78((uint64_t *)&unk_100605E80);
  sub_100044200((unint64_t *)&unk_1006054B0, (uint64_t *)&unk_100605E80);
  static EmitLifecycle.defaultVerbosity.getter();
  Publisher.emitLifecycle(for:name:definesInterval:context:verbose:)();
  sub_100054B1C((uint64_t)v3, &qword_100605920);
  return swift_release();
}

void *sub_100041A98(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

id LibraryDataProvider.init(contextProvider:downloadsNotifier:objectGraph:)(void (*a1)(uint64_t, char *, uint64_t), char *a2, void (*a3)(uint64_t, char *, uint64_t))
{
  uint64_t v147 = a3;
  v134 = a2;
  uint64_t v144 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v145 = v4;
  uint64_t v146 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (char *)v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v141 = (char *)v127 - v8;
  uint64_t v9 = type metadata accessor for Calendar.Identifier();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Calendar();
  unint64_t v143 = *(void (***)(uint64_t, char *, uint64_t))(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v3[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___actionController] = 0;
  BOOL v16 = &v3[OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___libraryActionController];
  *(_OWORD *)BOOL v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((void *)v16 + 4) = 0;
  uint64_t v17 = OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_podcastStateController;
  uint64_t v18 = qword_1005F5A48;
  uint64_t v19 = v3;
  if (v18 != -1) {
    swift_once();
  }
  *(void *)&v3[v17] = qword_10061AAC0;
  uint64_t v20 = (uint64_t *)((char *)v19 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_reviewController);
  type metadata accessor for ReviewController();
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = sub_100042FDC(&qword_1005F5BB0, (void (*)(uint64_t))type metadata accessor for ReviewController);
  *uint64_t v20 = v21;
  v20[1] = v22;
  uint64_t v23 = OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_hudPresenter;
  type metadata accessor for HUDPresenter();
  *(void (**)(uint64_t, char *, uint64_t))((char *)v19 + v23) = (void (*)(uint64_t, char *, uint64_t))swift_allocObject();
  *(void (**)(uint64_t, char *, uint64_t))((char *)v19
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_jobStorageFactory) = 0;
  *((unsigned char *)v19 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_isObservingLibrary) = 0;
  uint64_t v24 = (char *)v19 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider____lazy_storage___signpostID;
  uint64_t v25 = type metadata accessor for OSSignpostID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = (char *)v19 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_signpostName;
  *(void *)uint64_t v26 = "LibraryDataProvider.startObservingEpisodesIfNeeded()";
  *((void *)v26 + 1) = 52;
  v26[16] = 2;
  *(void (**)(uint64_t, char *, uint64_t))((char *)v19
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_objectGraph) = v147;
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for Calendar.Identifier.gregorian(_:), v9);
  sub_100042FDC(&qword_1005F6F80, (void (*)(uint64_t))&type metadata accessor for Calendar);
  swift_retain();
  swift_retain();
  BaseObjectGraph.inject<A>(_:named:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v143[4]((uint64_t)v19 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_metricsCalendar, v15, v13);
  uint64_t v27 = (objc_class *)type metadata accessor for UIPurchaseDelegate();
  id v28 = [objc_allocWithZone(v27) init];
  type metadata accessor for PurchaseControllerWrapper();
  uint64_t v29 = (void *)static PurchaseControllerWrapper.sharedInstance.getter();
  char v30 = (void *)PurchaseControllerWrapper.purchaseController.getter();

  type metadata accessor for PlaybackController();
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v131 = OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_playbackController;
  *(void (**)(uint64_t, char *, uint64_t))((char *)v19
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_playbackController) = (void (*)(uint64_t, char *, uint64_t))v161;
  uint64_t v163 = v27;
  uint64_t v164 = (_UNKNOWN **)sub_100042FDC(&qword_1005F6F90, (void (*)(uint64_t))&type metadata accessor for UIPurchaseDelegate);
  *(void *)&long long v161 = v28;
  id v138 = v28;
  dispatch thunk of PurchaseController.uiDelegate.setter();
  uint64_t v31 = (void (**)(uint64_t, char *, uint64_t))((char *)v19
                                                       + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_purchaseController);
  _OWORD v31[3] = sub_100054B78(&qword_1005F6F98);
  v31[4] = sub_100044200(&qword_1005F6FA0, &qword_1005F6F98);
  void *v31 = v30;
  uint64_t v32 = self;
  id v137 = v30;
  id v33 = [v32 managedAssetsDirectoryURL];
  uint64_t v34 = (uint64_t)v141;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v143 = v19;
  uint64_t v35 = (void (**)(uint64_t, char *, uint64_t))((char *)v19
                                                       + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_assetsFolder);
  uint64_t v36 = v145;
  uint64_t v37 = v146;
  uint64_t v38 = *(void (**)(void))(v146 + 32);
  uint64_t v133 = v35;
  v38();
  id v39 = [v32 documentsDirectory];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  long long v40 = v142;
  URL.appendingPathComponent(_:)();
  v135 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  uint64_t v136 = v37 + 8;
  v135(v34, v36);
  if (qword_1005F5A10 != -1) {
    swift_once();
  }
  uint64_t v41 = qword_1005F91E0;
  uint64_t v42 = qword_1005F5A18;
  swift_bridgeObjectRetain();
  if (v42 != -1) {
    swift_once();
  }
  uint64_t v43 = qword_1005F91E8;
  uint64_t v45 = *(void (**)(char *, void *, uint64_t))(v37 + 16);
  uint64_t v44 = v37 + 16;
  v132 = v45;
  v45((char *)v34, v40, v36);
  type metadata accessor for CoreDataDownloadJobStorageFactory();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_100024E98(v34, v41, v43);
  uint64_t v47 = *(void **)(v46 + 24);
  uint64_t v164 = (_UNKNOWN **)sub_10005AB58;
  uint64_t v165 = 0;
  *(void *)&long long v161 = _NSConcreteStackBlock;
  *((void *)&v161 + 1) = 1107296256;
  uint64_t v162 = sub_10000B864;
  uint64_t v163 = &unk_100556AA0;
  uint64_t v48 = _Block_copy(&v161);
  [v47 loadPersistentStoresWithCompletionHandler:v48];
  _Block_release(v48);
  id v49 = *(id *)(v46 + 24);
  swift_release();
  type metadata accessor for CoreDataDownloadJobStorage();
  uint64_t v140 = swift_allocObject();
  *(void *)(v140 + 16) = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v167 = 0;
  memset(v166, 0, sizeof(v166));
  uint64_t v50 = self;
  id result = [v50 autoupdatingSharedLibraryPath];
  if (!result)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v52 = result;
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  id result = [self sharedMediaLibraryService];
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v56 = result;
  uint64_t v146 = v44;
  uint64_t v163 = (void *)sub_10004D29C(0, &qword_1005F6FB0);
  uint64_t v164 = &off_100565488;
  *(void *)&long long v161 = v56;
  sub_10004D29C(0, &qword_1005F6FB8);
  id v57 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id result = [v50 autoupdatingSharedLibrary];
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v58 = result;
  uint64_t v150 = (ValueMetadata *)sub_10004D29C(0, &qword_1005F6FC0);
  uint64_t v151 = &off_1005654E8;
  *(void *)&long long v149 = v58;
  uint64_t v59 = type metadata accessor for MediaLibraryClient();
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 88) = 0u;
  *(_OWORD *)(v60 + 104) = 0u;
  *(void *)(v60 + 120) = 0;
  *(void *)(v60 + 16) = v53;
  *(void *)(v60 + 24) = v55;
  sub_100042FC4(&v161, v60 + 32);
  *(void *)(v60 + 72) = sub_100191038;
  *(void *)(v60 + 80) = 0;
  sub_100042FC4(&v149, v60 + 128);
  *(void *)(v60 + 168) = v57;
  uint64_t v163 = (void *)v59;
  uint64_t v164 = (_UNKNOWN **)sub_100042FDC(&qword_1005F6FC8, (void (*)(uint64_t))type metadata accessor for MediaLibraryClient);
  *(void *)&long long v161 = v60;
  sub_100054B1C((uint64_t)v166, (uint64_t *)&unk_1005F6FD0);
  sub_100053820((uint64_t)&v161, (uint64_t)v166, (uint64_t *)&unk_1005F6FD0);
  uint64_t v61 = swift_allocObject();
  uint64_t v62 = v144;
  *(void *)(v61 + 16) = v144;
  uint64_t v63 = self;
  swift_unknownObjectRetain();
  id v64 = [v63 sharedInstance];
  uint64_t v65 = sub_10004D29C(0, (unint64_t *)&qword_100607F40);
  uint64_t v163 = (void *)v65;
  uint64_t v164 = (_UNKNOWN **)&protocol witness table for PFAutoBugCaptureBugReporter;
  *(void *)&long long v161 = v64;
  type metadata accessor for CoreDataEpisodeStorage();
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = sub_1001A467C;
  *(void *)(v66 + 24) = v61;
  sub_100042FC4(&v161, v66 + 32);
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v62;
  swift_unknownObjectRetain();
  id v68 = [v63 sharedInstance];
  uint64_t v163 = (void *)v65;
  uint64_t v164 = (_UNKNOWN **)&protocol witness table for PFAutoBugCaptureBugReporter;
  *(void *)&long long v161 = v68;
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = sub_1001A46B4;
  *(void *)(v69 + 24) = v67;
  sub_100042FC4(&v161, v69 + 32);
  uint64_t v150 = &type metadata for PodcastsDownloader;
  uint64_t v151 = &off_100555110;
  LOBYTE(v149) = 0;
  uint64_t v159 = &type metadata for PodcastsDownloader;
  uint64_t v160 = &off_100555110;
  LOBYTE(v158) = 3;
  uint64_t v156 = &type metadata for PodcastsDownloader;
  uint64_t v157 = &off_100555110;
  LOBYTE(v155) = 1;
  uint64_t v153 = &type metadata for PodcastsDownloader;
  uint64_t v154 = &off_100555110;
  v152[0] = 2;
  sub_100056C64((uint64_t)&v149, (uint64_t)&v158, (uint64_t)&v155, (uint64_t)v152, (uint64_t)&v161);
  type metadata accessor for DownloadRemovalObserver();
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v70 = v149;
  sub_100054BBC((uint64_t)v166, (uint64_t)&v158, (uint64_t *)&unk_1005F6FD0);
  id v130 = [self sharedInstance];
  id v129 = [objc_allocWithZone((Class)MTEpisodeDownloadsAlertsPresenter) init];
  sub_10001165C((uint64_t)&v161, (uint64_t)&v149);
  id result = [self sharedInstance];
  id v128 = result;
  if (!result)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v71 = v141;
  v132(v141, v133, v145);
  sub_10004D29C(0, &qword_1005F6FE0);
  id v72 = [(id)swift_getObjCClassFromMetadata() defaultStore];
  uint64_t v156 = &type metadata for AccounStoreDsidProvider;
  uint64_t v157 = &off_100567CD0;
  uint64_t v73 = (char *)objc_allocWithZone((Class)type metadata accessor for EpisodeDownloadsManager());
  uint64_t v74 = sub_100055EF0((uint64_t)&v155, (uint64_t)v156);
  uint64_t v133 = v127;
  __chkstk_darwin(v74);
  (*(void (**)(void))(v75 + 16))();
  swift_retain();
  swift_retain();
  uint64_t v76 = v140;
  swift_retain();
  swift_retain();
  uint64_t v77 = v134;
  uint64_t v78 = v134;
  id v79 = v72;
  uint64_t v126 = v73;
  uint64_t v125 = (uint64_t)v71;
  uint64_t v80 = v128;
  uint64_t v81 = v130;
  uint64_t v82 = v77;
  id v83 = v129;
  v134 = sub_100040008(v69, v66, v76, v70, (uint64_t)&v158, v130, v82, (uint64_t)v129, &v149, (uint64_t)v128, v125, (uint64_t)v79, 1u, v126);
  uint64_t v146 = v69;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  v141 = v78;
  sub_10004D2D8((uint64_t)&v155);

  sub_100054BBC((uint64_t)v166, (uint64_t)&v158, (uint64_t *)&unk_1005F6FD0);
  uint64_t v84 = v66;
  v127[1] = v70;
  if (v159)
  {
    sub_100042FC4(&v158, (uint64_t)&v149);
    sub_100056D54((uint64_t)&v149, (uint64_t)&v158);
    type metadata accessor for PostRestorePromptPresenter();
    uint64_t v85 = swift_allocObject();
    uint64_t v86 = self;
    uint64_t v87 = v134;
    uint64_t v88 = v134;
    swift_retain();
    uint64_t v89 = v88;
    id v90 = [v86 standardUserDefaults];
    sub_100056D54((uint64_t)&v158, (uint64_t)&v155);
    type metadata accessor for DownloadsRestoreRunner();
    uint64_t v91 = (void *)swift_allocObject();
    v91[11] = 0;
    sub_100042FC4(&v155, (uint64_t)(v91 + 2));
    v91[7] = v89;
    v91[8] = v84;
    v91[9] = &off_10056A248;
    v91[10] = v90;
    type metadata accessor for PodcastsDownloadsRestoreController();
    uint64_t v92 = swift_allocObject();
    uint64_t v93 = sub_100010C08((uint64_t)v91, v85, v92);
    sub_10004D2D8((uint64_t)&v158);
    sub_10004D2D8((uint64_t)&v149);
    uint64_t v94 = v143;
    uint64_t v95 = (uint64_t *)((char *)v143 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_downloadsRestoreController);
    *uint64_t v95 = v93;
    v95[1] = (uint64_t)&off_1005630F8;
  }
  else
  {
    uint64_t v87 = v134;
    uint64_t v96 = v134;
    sub_100054B1C((uint64_t)&v158, (uint64_t *)&unk_1005F6FD0);
    uint64_t v94 = v143;
    uint64_t v97 = (void (**)(uint64_t, char *, uint64_t))((char *)v143
                                                         + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_downloadsRestoreController);
    *uint64_t v97 = 0;
    v97[1] = 0;
  }
  *(void (**)(uint64_t, char *, uint64_t))((char *)v94
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_managedContextProvider) = v144;
  type metadata accessor for EpisodeStateRepository();
  swift_unknownObjectRetain();
  uint64_t v98 = static EpisodeStateRepository.shared.getter();
  v134 = (char *)OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeStateRepository;
  *(void (**)(uint64_t, char *, uint64_t))((char *)v94
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeStateRepository) = (void (*)(uint64_t, char *, uint64_t))v98;
  uint64_t v99 = (char *)objc_allocWithZone((Class)type metadata accessor for EpisodeDownloadStateControllerProvider());
  uint64_t v100 = v141;
  int v101 = v87;
  swift_retain();
  uint64_t v102 = (void (*)(uint64_t, char *, uint64_t))sub_100024C1C(v101, v100, v98, v99);

  v141 = v100;
  swift_release();
  *(void (**)(uint64_t, char *, uint64_t))((char *)v94
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateControllerProvider) = v102;
  type metadata accessor for InterestObserverProvider();
  BaseObjectGraph.inject<A>(_:)();
  *(void (**)(uint64_t, char *, uint64_t))((char *)v94
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_interestsObserverProvider) = (void (*)(uint64_t, char *, uint64_t))v149;
  sub_100054B78(&qword_1005F7010);
  BaseObjectGraph.inject<A>(_:)();
  sub_100042FC4(&v149, (uint64_t)v94 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_libraryObserverProvider);
  *(void (**)(uint64_t, char *, uint64_t))((char *)v94
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeDownloadStateController) = *(void (**)(uint64_t, char *, uint64_t))((char *)v102 + OBJC_IVAR____TtC8Podcasts38EpisodeDownloadStateControllerProvider_stateController);
  uint64_t v103 = sub_100054B78(&qword_1005F7020);
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v104 = OnDemandLibraryEpisodeStateDataSource.init(episodeStateRepository:)();
  char v105 = static Podcasts.isBlueMoonEnabled()();
  v127[2] = v84;
  if (v105)
  {
    uint64_t v150 = (ValueMetadata *)type metadata accessor for DummyLegacyPlayerController();
    uint64_t v151 = (_UNKNOWN **)&protocol witness table for DummyLegacyPlayerController;
    sub_10004A244((uint64_t *)&v149);
    DummyLegacyPlayerController.init()();
  }
  else
  {
    id v106 = [self defaultInstance];
    uint64_t v150 = (ValueMetadata *)sub_10004D29C(0, &qword_1005F7028);
    uint64_t v151 = (_UNKNOWN **)sub_1001A5458(&qword_1005F7030, &qword_1005F7028);
    *(void *)&long long v149 = v106;
  }
  uint64_t v107 = v131;
  type metadata accessor for PendingPlaybackStore();
  swift_allocObject();
  PendingPlaybackStore.init()();
  uint64_t v108 = *(uint64_t *)((char *)v94 + v107);
  uint64_t v159 = (ValueMetadata *)v103;
  uint64_t v160 = (_UNKNOWN **)sub_100044200(&qword_1005F7038, &qword_1005F7020);
  *(void *)&long long v158 = v104;
  sub_100056D54((uint64_t)&v149, (uint64_t)&v155);
  uint64_t v109 = type metadata accessor for PendingPlaybackController();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v110 = PendingPlaybackController.init(pendingPlaybackStore:playbackController:playStateEstimationProvider:legacyPlayerController:)();
  unint64_t v111 = (uint64_t *)((char *)v143 + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_pendingPlaybackController);
  *(void (**)(uint64_t, char *, uint64_t))((char *)v143
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_pendingPlaybackController
                                                  + 24) = (void (*)(uint64_t, char *, uint64_t))v109;
  uint64_t v112 = v143;
  v111[4] = sub_100042FDC(&qword_1005F7040, (void (*)(uint64_t))&type metadata accessor for PendingPlaybackController);
  uint64_t *v111 = v110;
  *(void *)&long long v158 = v104;
  sub_100044200(&qword_1005F7048, &qword_1005F7020);
  swift_retain();
  uint64_t v113 = EpisodeStateDataSourceProtocol.eraseToAnyEpisodeStateDataSource()();
  sub_100022B2C(v108, v113);
  defaultEpisodePlayTransitionRules.getter();
  sub_100054B78(&qword_1005F7050);
  swift_allocObject();
  uint64_t v114 = EpisodeStateController.init(dataSources:transitionRules:)();
  swift_release();
  swift_release();
  *(void (**)(uint64_t, char *, uint64_t))((char *)v112
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodePlayStateController) = (void (*)(uint64_t, char *, uint64_t))v114;
  swift_retain();
  uint64_t v115 = sub_10001FD88();
  swift_release();
  *(void (**)(uint64_t, char *, uint64_t))((char *)v112
                                                  + OBJC_IVAR____TtC8Podcasts19LibraryDataProvider_episodeBookmarkStateController) = (void (*)(uint64_t, char *, uint64_t))v115;

  sub_10004D29C(0, &qword_1005F7058);
  id v116 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  [v116 setDownloadManager:v101];

  if (qword_1005F5AB8 != -1) {
    swift_once();
  }
  *(void *)(static FeedManager.shared + OBJC_IVAR___MTFeedManager_downloadManager) = v101;
  uint64_t v117 = v101;
  swift_unknownObjectRelease();
  sub_100015A80();

  uint64_t v118 = v117;
  uint64_t v119 = v137;
  dispatch thunk of PurchaseController.downloadManager.setter();
  v148.receiver = v112;
  v148.super_class = ObjectType;
  id v120 = [super init];
  sub_10004D29C(0, &qword_1005F7060);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v122 = v120;
  id v123 = [ObjCClassFromMetadata sharedInstance];
  long long v124 = v141;
  [v123 setupWith:v118 downloadsNotifier:v141];

  sub_100027184();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  sub_100011468((uint64_t)&v161);
  sub_100054B1C((uint64_t)v166, (uint64_t *)&unk_1005F6FD0);
  v135((uint64_t)v142, v145);
  sub_10004D2D8((uint64_t)&v149);
  return v122;
}

uint64_t sub_100042FC4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100042FDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100043024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = a3;
  uint64_t v68 = a2;
  uint64_t v66 = a1;
  uint64_t v3 = sub_100054B78(&qword_100602168);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v79 = v3;
  uint64_t v80 = v4;
  __chkstk_darwin(v3);
  uint64_t v77 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100054B78(&qword_100602170);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v81 = v6;
  uint64_t v82 = v7;
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100054B78(&qword_100602178);
  uint64_t v75 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v70 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100054B78(&qword_100602180);
  uint64_t v76 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v71 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100054B78(&qword_100602068);
  uint64_t v64 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v60 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100054B78(&qword_100602188);
  uint64_t v72 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v59 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100054B78(&qword_100602060);
  uint64_t v58 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v48 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100054B78((uint64_t *)&unk_100602190);
  uint64_t v69 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  id v49 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100054B78(&qword_1005F9F20);
  __chkstk_darwin(v15 - 8);
  id v83 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100054B78(&qword_100602010);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100054B78(&qword_1006021A0);
  uint64_t v55 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v53 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Subscribers.Demand.unlimited.getter();
  sub_100054B78((uint64_t *)&unk_100602020);
  sub_100054B78((uint64_t *)&unk_1005FCA40);
  sub_100044200((unint64_t *)&unk_100602030, (uint64_t *)&unk_100602020);
  uint64_t v61 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_100044200(&qword_100603460, (uint64_t *)&unk_1005FCA40);
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  sub_100044200((unint64_t *)&unk_100602040, &qword_100602010);
  uint64_t v22 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v85 = v22;
  v47[0] = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  id v86 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v51 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v23 = *(void *)(v51 - 8);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  uint64_t v52 = v23 + 56;
  uint64_t v24 = (uint64_t)v83;
  v50(v83, 1, 1, v51);
  unint64_t v56 = sub_100059BE0();
  uint64_t v25 = v53;
  Publisher.receive<A>(on:options:)();
  sub_100054B1C(v24, &qword_1005F9F20);

  swift_release();
  swift_allocObject();
  uint64_t v26 = v84;
  swift_unknownObjectWeakInit();
  v47[1] = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_100044200(&qword_1006021A8, &qword_1006021A0);
  uint64_t v27 = v54;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v27);
  uint64_t v53 = (char *)(v26 + OBJC_IVAR___MTFeedManager__subscriptions);
  swift_beginAccess();
  uint64_t v55 = sub_100054B78((uint64_t *)&unk_1005F9ED0);
  uint64_t v54 = sub_100044200(qword_1005F8BB0, (uint64_t *)&unk_1005F9ED0);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_retain();
  id v28 = v48;
  dispatch thunk of URLBasedFeedUpdater.updatingFeedURLs.getter();
  swift_getKeyPath();
  sub_100044200(&qword_1006021B0, &qword_100602060);
  uint64_t v29 = v49;
  uint64_t v30 = v57;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v28, v30);
  uint64_t v31 = v60;
  dispatch thunk of StoreFeedUpdater.updatingStoreIDs.getter();
  swift_getKeyPath();
  sub_100044200(&qword_1006021B8, &qword_100602068);
  uint64_t v32 = v59;
  uint64_t v33 = v63;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v31, v33);
  sub_100044200(&qword_1006021C0, (uint64_t *)&unk_100602190);
  sub_100044200(&qword_1006021C8, &qword_100602188);
  uint64_t v34 = v70;
  uint64_t v35 = v62;
  uint64_t v36 = v65;
  Publisher.combineLatest<A>(_:)();
  sub_100044200(&qword_1006021D0, &qword_100602178);
  uint64_t v37 = v71;
  uint64_t v38 = v73;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v34, v38);
  sub_100044200(&qword_1006021D8, &qword_100602180);
  uint64_t v39 = v74;
  uint64_t v40 = Publisher.eraseToAnyPublisher()();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v37, v39);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v32, v36);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v29, v35);
  uint64_t v85 = v40;
  swift_retain();
  id v86 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v41 = (uint64_t)v83;
  v50(v83, 1, 1, v51);
  sub_100054B78(&qword_1006021E0);
  sub_100044200(&qword_1006021E8, &qword_1006021E0);
  uint64_t v42 = v77;
  Publisher.receive<A>(on:options:)();
  sub_100054B1C(v41, &qword_1005F9F20);

  swift_release();
  sub_100044200(&qword_1006021F0, &qword_100602168);
  uint64_t v44 = v78;
  uint64_t v43 = v79;
  Publisher.drop(while:)();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v43);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100044200((unint64_t *)&unk_1006021F8, &qword_100602170);
  uint64_t v45 = v81;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v45);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  return swift_release();
}

uint64_t sub_100043E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v5 = sub_100054B78(&qword_100605928);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100054B78(&qword_100605930);
  uint64_t v9 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [self sharedInstance];
  id v13 = [v12 privateQueueContext];

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  swift_bridgeObjectRetain();
  sub_100054B78(&qword_100605938);
  uint64_t v15 = NSManagedObjectContext.performAndPublish<A>(_:)();

  swift_release();
  uint64_t v21 = v15;
  sub_100054B78(&qword_100605940);
  sub_100054B78(&qword_100605948);
  sub_100044200(&qword_100605950, &qword_100605940);
  Publisher.compactMap<A>(_:)();
  swift_release();
  static Subscribers.Demand.unlimited.getter();
  sub_100054B78(&qword_100605958);
  sub_100044200(&qword_100605960, &qword_100605928);
  sub_100044200(&qword_100605968, &qword_100605958);
  Publisher.flatMap<A>(maxPublishers:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  type metadata accessor for ArtworkRequest();
  sub_100044200(&qword_100605970, &qword_100605930);
  uint64_t v16 = v19;
  Publisher.compactMap<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v16);
}

uint64_t sub_100044200(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100044244(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100044244(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void sub_10004428C(uint64_t a1)
{
  long long v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [*(id *)(a1 + 48) isPodcastUpdatable:v2 userInitiated:*(unsigned __int8 *)(a1 + 128) forced:*(unsigned __int8 *)(a1 + 129)];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)) {
    goto LABEL_14;
  }
  uint64_t v3 = [v2 bestFeedURLExcludingRedirectURL:*(unsigned char *)(a1 + 130) == 0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 96) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = [v2 storeCollectionId];
  uint64_t v6 = [v2 feedURL];
  if (v6) {
    id v7 = [objc_alloc((Class)NSURL) initWithString:v6];
  }
  else {
    id v7 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40), v7);
  if (v6) {

  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)) {
    goto LABEL_14;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
  {
    uint64_t v8 = +[PodcastsApplicationStateMonitor shared];
    id v9 = [v8 isActive];

    uint64_t v29 = +[MTFeedUpdateMetricsDataKey userInitiated];
    v42[0] = v29;
    id v28 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 128)];
    v43[0] = v28;
    uint64_t v27 = +[MTFeedUpdateMetricsDataKey foreground];
    v42[1] = v27;
    uint64_t v10 = +[NSNumber numberWithBool:v9];
    v43[1] = v10;
    uint64_t v11 = +[MTFeedUpdateMetricsDataKey backgroundFetch];
    v42[2] = v11;
    id v12 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 131)];
    v43[2] = v12;
    id v13 = +[MTFeedUpdateMetricsDataKey podcastStoreId];
    v42[3] = v13;
    uint64_t v14 = +[NSNumber numberWithLongLong:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24)];
    v43[3] = v14;
    uint64_t v15 = +[MTFeedUpdateMetricsDataKey source];
    v42[4] = v15;
    uint64_t v16 = +[NSNumber numberWithInteger:*(void *)(a1 + 120)];
    v43[4] = v16;
    uint64_t v17 = +[NSDictionary dictionaryWithObjects:v43 forKeys:v42 count:5];

    uint64_t v18 = +[MTFeedUpdateMetricsAction podcastDataSource];
    +[IMMetrics recordEvent:v18 dataSource:v2 data:v17];

    uint64_t v19 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v41 = v17;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Updating podcast %@", buf, 0xCu);
    }

    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
    {
LABEL_14:
      uint64_t v26 = +[FeedUpdaterObjcError notYetUpdatable];
LABEL_15:
      uint64_t v25 = (void *)v26;
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
      goto LABEL_16;
    }
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
  {
    uint64_t v26 = +[FeedUpdaterObjcError feedURLIsEmpty];
    goto LABEL_15;
  }
  uint64_t v20 = [*(id *)(a1 + 48) workQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003AC10;
  block[3] = &unk_100551FC8;
  id v21 = *(id *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 96);
  id v32 = v21;
  uint64_t v34 = v22;
  int8x16_t v35 = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  id v23 = *(id *)(a1 + 56);
  char v37 = *(unsigned char *)(a1 + 128);
  char v38 = *(unsigned char *)(a1 + 132);
  char v39 = *(unsigned char *)(a1 + 131);
  uint64_t v24 = *(void *)(a1 + 120);
  id v31 = v23;
  uint64_t v36 = v24;
  id v33 = *(id *)(a1 + 80);
  dispatch_async(v20, block);

  uint64_t v25 = v32;
LABEL_16:
}

void sub_100044718(uint64_t a1, char a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) workQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100057FB4;
  block[3] = &unk_100551F28;
  char v9 = a2;
  long long v6 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v6;
  long long v8 = v6;
  dispatch_async(v4, block);
}

void sub_1000448AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (*(void *)(a1 + 40))
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    _OWORD v4[2] = sub_100114748;
    v4[3] = &unk_10054E398;
    id v6 = *(id *)(a1 + 40);
    id v5 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
  }
}

void sub_100044974(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100057F9C;
    v3[3] = &unk_10054F268;
    id v4 = *(id *)(a1 + 32);
    char v5 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
  }
}

uint64_t sub_100044A10(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    BOOL v2 = *(unsigned char *)(a1 + 49) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setGlobalCellularEnabled:v2];

  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    char v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

void sub_100044B2C(id a1, UNNotificationSettings *a2)
{
  BOOL v2 = a2;
  BOOL v3 = [(UNNotificationSettings *)v2 authorizationStatus] != UNAuthorizationStatusNotDetermined;
  id v4 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v4 setBool:v3 forKey:kMTDidPromptForNotificationsPermissionsKey];

  id v5 = [(UNNotificationSettings *)v2 authorizationStatus];
  id v6 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v6 setBool:v5 == (id)2 forKey:kMTNotificationStatusIsAuthorizedKey];
}

void sub_100045138(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100045DD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000461B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000462F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100046518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

uint64_t sub_1000467F8()
{
  if (([v0 isCancelled] & 1) != 0
    || (uint64_t v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock,
        [*(id *)((char *)v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock) lock],
        uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error),
        [*(id *)((char *)v0 + v1) unlock],
        v2))
  {
    BOOL v3 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x128);
  }
  else
  {
    sub_10004690C();
    BOOL v3 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x120);
  }
  return v3();
}

void sub_10004690C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 willChangeValueForKey:v1];

  uint64_t v2 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)&v0[OBJC_IVAR____TtC8Podcasts13BaseOperation_lock] lock];
  if (v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] != 2) {
    v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] = 1;
  }
  [*(id *)&v0[v2] unlock];
  id v3 = String._bridgeToObjectiveC()();
  [v0 didChangeValueForKey:v3];
}

uint64_t sub_1000469FC(uint64_t a1)
{
  uint64_t v2 = *(void *)((swift_isaMask & *v1) + 0x170);
  uint64_t v24 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  id v4 = (char *)&v20 - v3;
  id v6 = *(void **)((char *)v1 + v5[54]);
  id v7 = (void *)((char *)v1 + v5[53]);
  long long v8 = (void (*)(char *, char *, uint64_t (*)(uint64_t), void *))*v7;
  uint64_t v22 = v7[1];
  id v23 = v8;
  uint64_t v9 = v5[52];
  uint64_t v10 = v5[47];
  uint64_t v11 = v5[48];
  uint64_t v12 = v5[49];
  uint64_t v13 = v5[50];
  uint64_t v25 = v2;
  uint64_t v26 = v10;
  id v21 = (char *)v1 + v9;
  uint64_t v27 = v11;
  uint64_t v28 = v12;
  uint64_t v29 = v13;
  uint64_t v14 = type metadata accessor for StorageOperation();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_10004A2A8(v14, WitnessTable, (uint64_t)v4);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v2;
  v17[3] = v10;
  v17[4] = v11;
  void v17[5] = v12;
  v17[6] = v13;
  v17[7] = v6;
  v17[8] = v16;
  id v18 = v6;
  swift_retain();
  v23(v21, v4, sub_10004BE7C, v17);
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  return swift_release();
}

uint64_t sub_100046C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v54 = a4;
  uint64_t v55 = a6;
  uint64_t v59 = a2;
  uint64_t v53 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OperationResult();
  uint64_t v56 = *(void *)(v14 - 8);
  uint64_t v57 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v52 = (uint64_t *)((char *)&v50 - v19);
  uint64_t v58 = *(void *)(a7 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v51 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v23 = (char *)&v50 - v22;
  uint64_t v24 = type metadata accessor for Result();
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v50 - v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v50 - v25, a1, v24);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v53 = *(void *)(v58 + 32);
    ((void (*)(char *, char *, uint64_t))v53)(v23, v26, a7);
    static os_log_type_t.error.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_10046D010;
    uint64_t v29 = Error.localizedDescription.getter();
    uint64_t v31 = v30;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_10004DA4C();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v31;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v33 = (void *)Strong;
      uint64_t v34 = v58;
      int8x16_t v35 = v51;
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v51, v23, a7);
      uint64_t v36 = _getErrorEmbeddedNSError<A>(_:)();
      if (v36)
      {
        uint64_t v37 = v36;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, a7);
      }
      else
      {
        uint64_t v37 = swift_allocError();
        ((void (*)(uint64_t, char *, uint64_t))v53)(v45, v35, a7);
      }
      uint64_t v46 = (uint64_t)v52;
      *uint64_t v52 = v37;
      uint64_t v47 = v57;
      swift_storeEnumTagMultiPayload();
      uint64_t v60 = v54;
      uint64_t v61 = a5;
      uint64_t v62 = v55;
      uint64_t v63 = a7;
      uint64_t v64 = a8;
      uint64_t v48 = type metadata accessor for StorageOperation();
      uint64_t WitnessTable = swift_getWitnessTable();
      sub_1000499E0(v46, v48, WitnessTable, (uint64_t)&off_100569C20, (uint64_t)&off_100569C00);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v46, v47);
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v23, a7);
    }
    else
    {
      return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v23, a7);
    }
  }
  else
  {
    uint64_t v38 = v53;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v13, v26, a5);
    static os_log_type_t.debug.getter();
    os_log(_:dso:log:_:_:)();
    swift_beginAccess();
    uint64_t v39 = swift_unknownObjectWeakLoadStrong();
    if (v39)
    {
      uint64_t v40 = (void *)v39;
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v17, v13, a5);
      uint64_t v41 = v57;
      swift_storeEnumTagMultiPayload();
      uint64_t v60 = v54;
      uint64_t v61 = a5;
      uint64_t v62 = v55;
      uint64_t v63 = a7;
      uint64_t v64 = a8;
      uint64_t v42 = type metadata accessor for StorageOperation();
      uint64_t v43 = swift_getWitnessTable();
      sub_1000499E0((uint64_t)v17, v42, v43, (uint64_t)&off_100569C20, (uint64_t)&off_100569C00);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v41);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v13, a5);
  }
}

uint64_t type metadata accessor for StorageOperation()
{
  return swift_getGenericMetadata();
}

void sub_1000472BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000472C4(a1, a2, a3, a4, *(void **)(v4 + 16));
}

void sub_1000472C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *a1;
  os_log_type_t v9 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v10 = static OS_os_log.downloads.getter();
  id v11 = a5;
  p_vtable = _TtC8Podcasts31ImplicitFollowsDecayCoordinator.vtable;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v35 = v8;
    uint64_t v13 = (char *)v11;
    uint64_t v36 = a4;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v15 = *(void *)&v13[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    uint64_t v16 = *(void **)&v13[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    int v17 = v13[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    uint64_t v38 = v34;
    uint64_t aBlock = 0x496E6F6973736553;
    unint64_t v40 = 0xEB00000000203A44;
    if (v17) {
      uint64_t v18 = 1936484398;
    }
    else {
      uint64_t v18 = 0x7261646E6174732ELL;
    }
    if (v17) {
      uint64_t v19 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v19 = (void *)0xE900000000000064;
    }
    uint64_t v37 = v15;
    swift_bridgeObjectRetain_n();
    v20._countAndFlagsBits = v18;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = v37;
    v21._object = v16;
    String.append(_:)(v21);
    p_vtable = (void **)(_TtC8Podcasts31ImplicitFollowsDecayCoordinator + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t aBlock = sub_10004B974(aBlock, v40, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2050;
    uint64_t v22 = *(void *)(*(void *)&v13[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks] + 16);

    uint64_t aBlock = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v8 = v35;
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Delete not running jobs from storage for session %{public}s. Number of running downloads %{public}ld", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v36;
    swift_slowDealloc();
  }
  else
  {
  }
  id v23 = v11;
  uint64_t v24 = swift_bridgeObjectRetain();
  uint64_t v25 = sub_100047694(v24, v23);
  swift_bridgeObjectRelease();

  uint64_t v26 = (char *)p_vtable[229] + (void)v23;
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  char v29 = v26[16];
  id v30 = [*(id *)(v8 + 16) newBackgroundContext];
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v28;
  *(void *)(v31 + 24) = v27;
  *(unsigned char *)(v31 + 32) = v29;
  *(void *)(v31 + 40) = v25;
  *(void *)(v31 + 48) = v30;
  *(void *)(v31 + 56) = a3;
  *(void *)(v31 + 64) = a4;
  uint64_t v43 = sub_10003BEB0;
  uint64_t v44 = v31;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v40 = 1107296256;
  uint64_t v41 = sub_10003B424;
  uint64_t v42 = &unk_10055B628;
  id v32 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v33 = v30;
  swift_retain();
  swift_release();
  [v33 performBlock:v32];
  _Block_release(v32);
  swift_bridgeObjectRelease();
}

void *sub_100047694(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  id v5 = (void *)(a1 + 32);
  swift_bridgeObjectRetain();
  id v6 = _swiftEmptyArrayStorage;
  do
  {
    sub_1002439D4(v5, a2, (uint64_t)&v11);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    if ((v12 & 1) == 0)
    {
      uint64_t v7 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v6 = sub_1002EFB88(0, v6[2] + 1, 1, v6);
      }
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1) {
        id v6 = sub_1002EFB88((void *)(v8 > 1), v9 + 1, 1, v6);
      }
      v6[2] = v9 + 1;
      v6[v9 + 4] = v7;
    }
    v5 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

void sub_1000477CC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1000477D4(a1, a2, a3, a4, *(void **)(v4 + 16));
}

void sub_1000477D4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = (void *)0xE900000000000064;
  uint64_t v58 = *a1;
  uint64_t v7 = *a2;
  os_log_type_t v8 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  unint64_t v9 = static OS_os_log.downloads.getter();
  BOOL v10 = os_log_type_enabled(v9, v8);
  uint64_t v61 = a5;
  if (v7 < 1)
  {
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v19 = a5;
    Swift::String v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)Swift::String v20 = 136446210;
    uint64_t v22 = *(void *)&v19[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    id v23 = *(void **)&v19[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    int v24 = v19[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    uint64_t v65 = v21;
    uint64_t aBlock = 0x496E6F6973736553;
    unint64_t v67 = 0xEB00000000203A44;
    if (v24) {
      uint64_t v25 = 1936484398;
    }
    else {
      uint64_t v25 = 0x7261646E6174732ELL;
    }
    if (v24) {
      uint64_t v26 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v26 = (void *)0xE900000000000064;
    }
    uint64_t v63 = v22;
    swift_bridgeObjectRetain_n();
    v27._countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = v63;
    v28._object = v23;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t aBlock = sub_10004B974(aBlock, v67, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "No jobs have been deleted from storage for session %{public}s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  else
  {
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v11 = a5;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    uint64_t aBlock = v7;
    *(_DWORD *)uint64_t v12 = 134349314;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v13 = *(void *)&v11[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    uint64_t v14 = *(void **)&v11[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    int v15 = v11[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    uint64_t aBlock = 0x496E6F6973736553;
    unint64_t v67 = 0xEB00000000203A44;
    if (v15) {
      uint64_t v16 = 1936484398;
    }
    else {
      uint64_t v16 = 0x7261646E6174732ELL;
    }
    if (v15) {
      id v6 = (void *)0xE400000000000000;
    }
    uint64_t v62 = v13;
    swift_bridgeObjectRetain_n();
    v17._countAndFlagsBits = v16;
    v17._object = v6;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = v62;
    v18._object = v14;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t aBlock = sub_10004B974(aBlock, v67, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v8, "Deleted %{public}ld jobs from storage for session %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  swift_slowDealloc();
LABEL_18:

  os_log_type_t v29 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  id v30 = static OS_os_log.downloads.getter();
  os_log_type_t v31 = v29;
  if (os_log_type_enabled(v30, v29))
  {
    id v32 = v61;
    id v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)id v33 = 136446210;
    uint64_t v35 = *(void *)&v32[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
    uint64_t v36 = *(void **)&v32[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
    int v37 = v32[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
    uint64_t v65 = v34;
    uint64_t aBlock = 0x496E6F6973736553;
    unint64_t v67 = 0xEB00000000203A44;
    if (v37) {
      uint64_t v38 = 1936484398;
    }
    else {
      uint64_t v38 = 0x7261646E6174732ELL;
    }
    if (v37) {
      uint64_t v39 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v39 = (void *)0xE900000000000064;
    }
    uint64_t v64 = v35;
    swift_bridgeObjectRetain_n();
    v40._countAndFlagsBits = v38;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = v64;
    v41._object = v36;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    uint64_t v42 = v61;
    swift_bridgeObjectRelease();
    uint64_t aBlock = sub_10004B974(aBlock, v67, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Fetch running jobs from storage for session%{public}s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v42 = v61;
  }
  uint64_t v43 = *(void *)&v42[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks];
  int64_t v44 = *(void *)(v43 + 16);
  if (v44)
  {
    swift_bridgeObjectRetain();
    sub_1001BA7F0(0, v44, 0);
    uint64_t v45 = v43 + 32;
    do
    {
      sub_100056D54(v45, (uint64_t)&aBlock);
      uint64_t v46 = v69;
      uint64_t v47 = v70;
      sub_100041A98(&aBlock, (uint64_t)v69);
      uint64_t v48 = (*((uint64_t (**)(void *, uint64_t (*)()))v47 + 3))(v46, v47);
      sub_10004D2D8((uint64_t)&aBlock);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1001BA7F0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v50 = _swiftEmptyArrayStorage[2];
      unint64_t v49 = _swiftEmptyArrayStorage[3];
      if (v50 >= v49 >> 1) {
        sub_1001BA7F0(v49 > 1, v50 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v50 + 1;
      _swiftEmptyArrayStorage[v50 + 4] = v48;
      v45 += 40;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
  }
  uint64_t v52 = *(void *)&v42[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
  uint64_t v51 = *(void *)&v42[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 8];
  char v53 = v42[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier + 16];
  id v54 = [*(id *)(v58 + 16) newBackgroundContext];
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = v52;
  *(void *)(v55 + 24) = v51;
  *(unsigned char *)(v55 + 32) = v53;
  *(void *)(v55 + 40) = _swiftEmptyArrayStorage;
  *(void *)(v55 + 48) = v54;
  *(void *)(v55 + 56) = a3;
  *(void *)(v55 + 64) = a4;
  uint64_t v70 = sub_10003B9A0;
  uint64_t v71 = v55;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v67 = 1107296256;
  uint64_t v68 = sub_10003B424;
  uint64_t v69 = &unk_10055B5D8;
  uint64_t v56 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v57 = v54;
  swift_retain();
  swift_release();
  [v57 performBlock:v56];
  _Block_release(v56);
  swift_bridgeObjectRelease();
}

uint64_t sub_100047F98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    os_log_type_t v8 = (void *)Strong;
    unint64_t v9 = (char *)sub_100041A98(a4, a4[3]);
    unint64_t v10 = sub_100049584(0, *v9);
    sub_100048090(v10, v12, v11 & 1, a1);

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v14 = (void *)result;
    int v15 = (char *)sub_100041A98(a4, a4[3]);
    unint64_t v16 = sub_100049584(1, *v15);
    sub_100048090(v16, v18, v17 & 1, a2);

    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100048090(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  char v8 = a3 & 1;
  uint64_t v9 = *(void *)(a4 + 16);
  if (v9)
  {
    uint64_t v10 = a4 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1003BC7C4(v10, a1, a2, v8);
      v10 += 40;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager_jobStorage;
  uint64_t v12 = (objc_class *)type metadata accessor for SyncDownloadJobsOperation();
  long long v51 = *(_OWORD *)&v4[v11];
  uint64_t v13 = (char *)objc_allocWithZone(v12);
  unint64_t v49 = v4;
  uint64_t v14 = OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_operationQueue;
  id v15 = objc_allocWithZone((Class)NSOperationQueue);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  unint64_t v16 = v13;
  *(void *)&v13[v14] = [v15 init];
  *(_OWORD *)&v16[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_jobStorage] = v51;
  uint64_t v52 = a4;
  *(void *)&v16[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks] = a4;
  char v17 = &v16[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_sessionIdentifier];
  *(void *)char v17 = a1;
  *((void *)v17 + 1) = a2;
  v17[16] = v8;
  swift_unknownObjectRetain();

  v56.receiver = v16;
  v56.super_class = v12;
  Swift::String v18 = [v56 init];
  swift_unknownObjectRelease();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v49;
  Swift::String v20 = (objc_class *)sub_100054B78(&qword_100607FC0);
  uint64_t v21 = (char *)objc_allocWithZone(v20);
  uint64_t v22 = &v21[*(void *)((swift_isaMask & *(void *)v21) + 0x180)];
  *(void *)uint64_t v22 = 0;
  v22[8] = 2;
  id v23 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))&v21[*(void *)((swift_isaMask & *(void *)v21)
                                                                                   + 0x188)];
  *id v23 = sub_10004FAF4;
  v23[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v19;
  v55.receiver = v21;
  v55.super_class = v20;
  v49;
  int v24 = (char *)[super init];
  uint64_t v25 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v26 = (uint64_t (**)(uint64_t))&v18[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v27 = *(void *)&v18[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *uint64_t v26 = sub_100050380;
  v26[1] = (uint64_t (*)(uint64_t))v25;
  sub_1000536BC(v27);
  self;
  uint64_t v28 = swift_dynamicCastObjCClass();
  if (v28)
  {
    uint64_t v29 = v28;
    swift_getObjectType();
    uint64_t v30 = swift_conformsToProtocol2();
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v30) {
      uint64_t v32 = v29;
    }
    else {
      uint64_t v32 = 0;
    }
    if (v32)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v46 = v29;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 24) = v31;
      swift_unknownObjectWeakInit();
      uint64_t v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v50 = v24;
      uint64_t v35 = v18;
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = v34;
      *(void *)(v36 + 24) = v33;
      uint64_t v45 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v31 + 72);
      swift_unknownObjectRetain();
      uint64_t v47 = v35;
      swift_retain();
      swift_retain();
      v45(sub_10004AF2C, v36, ObjectType, v31);
      swift_release();
      swift_release();
      Swift::String v18 = v35;
      int v24 = v50;
      swift_release();
      v53.receiver = v50;
      v53.super_class = (Class)type metadata accessor for BaseOperation();
      [super addDependency:v46];
    }
  }
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a1;
  *(void *)(v37 + 24) = a2;
  *(unsigned char *)(v37 + 32) = v8;
  *(void *)(v37 + 40) = v52;
  uint64_t v38 = (void (**)(uint64_t))&v24[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  uint64_t v39 = *(void *)&v24[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  void *v38 = sub_1003D2F4C;
  v38[1] = (void (*)(uint64_t))v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000536BC(v39);
  id v40 = sub_1000494FC();
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_100470E80;
  *(void *)(v41 + 32) = v18;
  *(void *)(v41 + 40) = v24;
  uint64_t v54 = v41;
  specialized Array._endMutation()();
  sub_10004D29C(0, (unint64_t *)&unk_1005FF020);
  uint64_t v42 = v18;
  uint64_t v43 = v24;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v40 addOperations:isa waitUntilFinished:1];
}

uint64_t type metadata accessor for SyncDownloadJobsOperation()
{
  return self;
}

void sub_1000485C0()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_tasks];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain_n();
    do
    {
      sub_100056D54(v3, (uint64_t)v109);
      sub_1002436F4((uint64_t)v109);
      sub_10004D2D8((uint64_t)v109);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_jobStorage];
  uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_jobStorage + 8];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v0;
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  swift_unknownObjectRetain();
  uint64_t v7 = v0;
  uint64_t v8 = static OS_os_log.downloads.getter();
  uint64_t v9 = (objc_class *)sub_100054B78(&qword_1005FC778);
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[*(void *)((swift_isaMask & *(void *)v10) + 0x198)];
  *(void *)uint64_t v11 = 0;
  v11[8] = 2;
  uint64_t v12 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))&v10[*(void *)((swift_isaMask & *(void *)v10)
                                                                                   + 0x1A8)];
  *uint64_t v12 = sub_1000472BC;
  v12[1] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v6;
  uint64_t v13 = &v10[*(void *)((swift_isaMask & *(void *)v10) + 0x1A0)];
  *(void *)uint64_t v13 = v4;
  *((void *)v13 + 1) = v5;
  *(void *)&v10[*(void *)((swift_isaMask & *(void *)v10) + 0x1B0)] = v8;
  v108.receiver = v10;
  v108.super_class = v9;
  uint64_t v14 = (char *)[super init];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v7;
  swift_unknownObjectRetain();
  unint64_t v16 = v7;
  uint64_t v17 = static OS_os_log.downloads.getter();
  Swift::String v18 = (objc_class *)sub_100054B78(&qword_1005FC780);
  uint64_t v19 = (char *)objc_allocWithZone(v18);
  Swift::String v20 = &v19[*(void *)((swift_isaMask & *(void *)v19) + 0x198)];
  *(void *)Swift::String v20 = 0;
  v20[8] = 2;
  uint64_t v21 = (void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))&v19[*(void *)((swift_isaMask & *(void *)v19)
                                                                                     + 0x1A8)];
  *uint64_t v21 = sub_1000477CC;
  v21[1] = (void (*)(uint64_t *, uint64_t *, uint64_t, uint64_t))v15;
  uint64_t v22 = &v19[*(void *)((swift_isaMask & *(void *)v19) + 0x1A0)];
  *(void *)uint64_t v22 = v4;
  *((void *)v22 + 1) = v5;
  *(void *)&v19[*(void *)((swift_isaMask & *(void *)v19) + 0x1B0)] = v17;
  v107.receiver = v19;
  v107.super_class = v18;
  id v23 = [(char *)[super init]];
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v16;
  uint64_t v25 = (objc_class *)sub_100054B78(&qword_1005FC788);
  uint64_t v26 = (char *)objc_allocWithZone(v25);
  uint64_t v27 = &v26[*(void *)((swift_isaMask & *(void *)v26) + 0x180)];
  *(void *)uint64_t v27 = 0;
  v27[8] = 2;
  uint64_t v28 = (void (**)(uint64_t *@<X0>, uint64_t@<X8>))&v26[*(void *)((swift_isaMask & *(void *)v26) + 0x188)];
  *uint64_t v28 = sub_10004F0A8;
  v28[1] = (void (*)(uint64_t *@<X0>, uint64_t@<X8>))v24;
  v106.receiver = v26;
  v106.super_class = v25;
  uint64_t v29 = v16;
  id v30 = [super init];
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v29;
  uint64_t v32 = (objc_class *)sub_100054B78(&qword_1005FC790);
  uint64_t v33 = (char *)objc_allocWithZone(v32);
  uint64_t v34 = &v33[*(void *)((swift_isaMask & *(void *)v33) + 0x180)];
  *(void *)uint64_t v34 = 0;
  v34[8] = 2;
  uint64_t v35 = v23;
  uint64_t v36 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))&v33[*(void *)((swift_isaMask & *(void *)v33)
                                                                                   + 0x188)];
  void *v36 = sub_10004F08C;
  v36[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v31;
  v105.receiver = v33;
  v105.super_class = v32;
  uint64_t v99 = v29;
  id v37 = [super init];
  uint64_t v38 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v39 = (uint64_t (**)(uint64_t))&v14[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v40 = *(void *)&v14[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *uint64_t v39 = sub_1000501B8;
  v39[1] = (uint64_t (*)(uint64_t))v38;
  sub_1000536BC(v40);
  self;
  int v101 = v14;
  uint64_t v41 = swift_dynamicCastObjCClass();
  uint64_t v100 = v37;
  if (v41)
  {
    uint64_t v42 = v41;
    swift_getObjectType();
    uint64_t v43 = swift_conformsToProtocol2();
    uint64_t v44 = v43 ? v43 : 0;
    if (v43 ? v42 : 0)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 24) = v44;
      swift_unknownObjectWeakInit();
      uint64_t v47 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v48 = swift_allocObject();
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 24) = v46;
      id v49 = v30;
      unint64_t v50 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v44 + 72);
      id v51 = (id)swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      v50(sub_10004AF2C, v48, ObjectType, v44);
      id v30 = v49;
      swift_release();
      id v37 = v100;
      swift_release();
      swift_release();
      v102.receiver = v35;
      v102.super_class = (Class)type metadata accessor for BaseOperation();
      [super addDependency:v42];
    }
  }
  uint64_t v52 = swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_super v53 = (uint64_t (**)(uint64_t))&v35[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v54 = *(void *)&v35[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *objc_super v53 = sub_10004B0CC;
  v53[1] = (uint64_t (*)(uint64_t))v52;
  objc_super v55 = v35;
  sub_1000536BC(v54);
  self;
  uint64_t v56 = swift_dynamicCastObjCClass();
  if (v56)
  {
    uint64_t v57 = v56;
    swift_getObjectType();
    uint64_t v58 = swift_conformsToProtocol2();
    uint64_t v59 = v58 ? v58 : 0;
    if (v58 ? v57 : 0)
    {
      uint64_t v96 = swift_getObjectType();
      uint64_t v61 = v55;
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 24) = v59;
      swift_unknownObjectWeakInit();
      uint64_t v63 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v64 = swift_allocObject();
      *(void *)(v64 + 16) = v63;
      *(void *)(v64 + 24) = v62;
      uint64_t v65 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v59 + 72);
      swift_unknownObjectRetain();
      uint64_t v66 = v61;
      swift_retain();
      swift_retain();
      v65(sub_10004AF2C, v64, v96, v59);
      objc_super v55 = v61;
      swift_release();
      swift_release();
      id v37 = v100;
      swift_release();
      unint64_t v67 = (objc_class *)type metadata accessor for BaseOperation();
      v103.receiver = v30;
      v103.super_class = v67;
      [super addDependency:v57];
    }
  }
  uint64_t v68 = (char *)v30;

  uint64_t v69 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v70 = (uint64_t (**)(uint64_t))&v68[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v71 = *(void *)&v68[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *uint64_t v70 = sub_10004B0CC;
  v70[1] = (uint64_t (*)(uint64_t))v69;
  sub_1000536BC(v71);
  self;
  uint64_t v72 = swift_dynamicCastObjCClass();
  if (v72)
  {
    uint64_t v73 = v72;
    swift_getObjectType();
    uint64_t v74 = swift_conformsToProtocol2();
    if (v74) {
      uint64_t v75 = v74;
    }
    else {
      uint64_t v75 = 0;
    }
    if (v74) {
      uint64_t v76 = v73;
    }
    else {
      uint64_t v76 = 0;
    }
    if (v76)
    {
      uint64_t v97 = swift_getObjectType();
      uint64_t v98 = v55;
      uint64_t v77 = swift_allocObject();
      *(void *)(v77 + 24) = v75;
      swift_unknownObjectWeakInit();
      uint64_t v78 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = v78;
      *(void *)(v79 + 24) = v77;
      uint64_t v80 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v75 + 72);
      swift_unknownObjectRetain();
      uint64_t v81 = v68;
      swift_retain();
      swift_retain();
      v80(sub_10004A488, v79, v97, v75);
      objc_super v55 = v98;
      swift_release();
      swift_release();
      id v37 = v100;
      swift_release();
      uint64_t v82 = (objc_class *)type metadata accessor for BaseOperation();
      v104.receiver = v100;
      v104.super_class = v82;
      [super addDependency:v73];
    }
  }
  id v83 = (char *)v37;

  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = v99;
  uint64_t v85 = (uint64_t (**)(uint64_t))&v83[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  uint64_t v86 = *(void *)&v83[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  *uint64_t v85 = sub_1002445F4;
  v85[1] = (uint64_t (*)(uint64_t))v84;
  uint64_t v87 = v99;
  sub_1000536BC(v86);

  uint64_t v88 = *(void **)&v87[OBJC_IVAR____TtC8Podcasts25SyncDownloadJobsOperation_operationQueue];
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_10046ECF0;
  *(void *)(v89 + 32) = v101;
  *(void *)(v89 + 40) = v55;
  *(void *)(v89 + 48) = v68;
  *(void *)(v89 + 56) = v83;
  v109[0] = v89;
  specialized Array._endMutation()();
  sub_10004D29C(0, (unint64_t *)&unk_1005FF020);
  id v90 = v101;
  uint64_t v91 = v55;
  uint64_t v92 = v68;
  uint64_t v93 = v83;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v88 addOperations:isa waitUntilFinished:0];
}

id sub_1000490A4()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  id v2 = objc_allocWithZone((Class)NSRecursiveLock);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = [v2 init];
  *(void *)&v3[OBJC_IVAR____TtC8Podcasts13BaseOperation__error] = 0;
  v3[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] = 0;
  *(void *)&v3[OBJC_IVAR____TtC8Podcasts13BaseOperation__onFinishBlocks] = _swiftEmptyArrayStorage;
  uint64_t v4 = &v3[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = &v3[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;

  v7.receiver = v3;
  v7.super_class = (Class)type metadata accessor for BaseOperation();
  return [super init];
}

id sub_100049174(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)(v2 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock) lock];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  objc_super v7 = (void **)(v2 + OBJC_IVAR____TtC8Podcasts13BaseOperation__onFinishBlocks);
  swift_beginAccess();
  uint64_t v8 = *v7;
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char *v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = sub_1000493E0(0, v8[2] + 1, 1, v8);
    char *v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = sub_1000493E0((void *)(v10 > 1), v11 + 1, 1, v8);
    char *v7 = v8;
  }
  v8[2] = v11 + 1;
  uint64_t v12 = &v8[2 * v11];
  v12[4] = sub_10004A010;
  v12[5] = v6;
  swift_endAccess();
  swift_release();
  return [*(id *)(v2 + v5) unlock];
}

void *sub_1000492C4(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100054B78(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      void v13[2] = v11;
      void v13[3] = 2 * (v15 >> 4);
      unint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      unint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000493F4(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_1000493E0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000492C4(a1, a2, a3, a4, &qword_100601540, &qword_100601548);
}

uint64_t sub_1000493F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_100054B78(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_1000494FC()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___restoreQueue;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___restoreQueue);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager____lazy_storage___restoreQueue);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)NSOperationQueue) init];
    [v4 setMaxConcurrentOperationCount:1];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

unint64_t sub_100049584(uint64_t a1, char a2)
{
  unint64_t v2 = 0xD000000000000033;
  switch(a2)
  {
    case 1:
    case 2:
      unint64_t v2 = 0xD00000000000002DLL;
      break;
    case 3:
      unint64_t v2 = 0xD00000000000002FLL;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t sub_100049610(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)((swift_isaMask & *a1) + 0x180);
  uint64_t v2 = type metadata accessor for OperationResult();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_release();
}

uint64_t sub_1000496E4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = swift_isaMask & *v0;
  uint64_t v16 = *(void *)(v3 + 368);
  uint64_t v4 = *(void *)(v16 - 8);
  __chkstk_darwin(ObjectType);
  id v6 = (char *)&v15 - v5;
  uint64_t v17 = type metadata accessor for OperationResult();
  uint64_t v7 = *(void *)(v17 - 8);
  uint64_t v8 = __chkstk_darwin(v17);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void (**)(char *))((char *)v1 + *(void *)(v3 + 392));
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_10004A2A8(ObjectType, WitnessTable, (uint64_t)v6);
  v11(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v16);
  uint64_t v13 = swift_getWitnessTable();
  sub_1000499E0((uint64_t)v10, ObjectType, v13, (uint64_t)&off_100569C20, (uint64_t)&off_100569C00);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v17);
}

uint64_t sub_1000499E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for OperationResult();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v22 - v12);
  int64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 8);
  uint64_t v23 = v5;
  uint64_t v15 = v14(a2, a5);
  if (v15)
  {
    uint64_t v16 = (void (*)(uint64_t *))v15;
    v24[3] = v10;
    uint64_t v17 = sub_10004A244(v24);
    Swift::String v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
    v18(v17, a1, v10);
    v16(v24);
    sub_1000536BC((uint64_t)v16);
    sub_10004D2D8((uint64_t)v24);
  }
  else
  {
    Swift::String v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
  }
  v18(v13, a1, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v13;
    Swift::String v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 88);
    swift_errorRetain();
    v20(v19, a2, a4);
    swift_errorRelease();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a2, a4);
}

uint64_t sub_100049BF0()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for OperationResult()
{
  return sub_100049BF0();
}

unsigned __int8 *sub_100049C38(unsigned __int8 *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = result[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *result;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)result;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return (unsigned __int8 *)swift_errorRelease();
  }
  if (!v3) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  return result;
}

unsigned char *sub_100049D2C(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *(void *)a2;
    swift_errorRetain();
    *(void *)__dst = v10;
    __dst[v4] = 1;
  }
  else if (v5)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst);
    __dst[v4] = 0;
  }
  return __dst;
}

void sub_100049E74()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock) lock];
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error);
  uint64_t v4 = *(void **)(v1 + v2);
  swift_errorRetain();
  [v4 unlock];
  if (v3)
  {
    unsigned int v5 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtC8Podcasts13BaseOperation_onError);
    if (v5)
    {
      swift_retain();
      v5(v3);
      sub_1000536BC((uint64_t)v5);
    }
    swift_errorRelease();
  }
  sub_100049F38();

  sub_10004A068();
}

uint64_t sub_100049F38()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock) lock];
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__onFinishBlocks);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = *(void **)(v0 + v1);
  swift_bridgeObjectRetain();
  [v4 unlock];
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = v3 + 40;
    do
    {
      uint64_t v7 = *(void (**)(uint64_t))(v6 - 8);
      uint64_t v8 = swift_retain();
      v7(v8);
      swift_release();
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004A010()
{
  return sub_10004A040(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10004A018()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10004A040(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10004A068()
{
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 willChangeValueForKey:v1];

  NSString v2 = String._bridgeToObjectiveC()();
  [v0 willChangeValueForKey:v2];

  uint64_t v3 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)&v0[OBJC_IVAR____TtC8Podcasts13BaseOperation_lock] lock];
  if (v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] != 2) {
    v0[OBJC_IVAR____TtC8Podcasts13BaseOperation__state] = 2;
  }
  [*(id *)&v0[v3] unlock];
  NSString v4 = String._bridgeToObjectiveC()();
  [v0 didChangeValueForKey:v4];

  id v5 = String._bridgeToObjectiveC()();
  [v0 didChangeValueForKey:v5];
}

uint64_t sub_10004A1C8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x128))();
}

uint64_t sub_10004A204()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  sub_10004ACDC(v1);
  return v1;
}

uint64_t *sub_10004A244(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10004A2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for OperationResult();
  __chkstk_darwin(v7);
  int v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    return (*(uint64_t (**)(uint64_t, char *, void *))(*(AssociatedTypeWitness - 1) + 32))(a3, v9, AssociatedTypeWitness);
  }
  if (EnumCaseMultiPayload == 2 && AssociatedTypeWitness == (void *)((char *)&type metadata for () + 8)) {
    return swift_dynamicCast();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10004A488()
{
  sub_10004A490(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10004A490(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    NSString v4 = (char *)Strong;
    swift_beginAccess();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v5 = *(void *)(a2 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 80))(ObjectType, v5);
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v8 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
    [*(id *)&v4[OBJC_IVAR____TtC8Podcasts13BaseOperation_lock] lock];
    *(void *)&v4[OBJC_IVAR____TtC8Podcasts13BaseOperation__error] = v7;
    swift_errorRetain();
    swift_errorRelease();
    [*(id *)&v4[v8] unlock];
    swift_errorRelease();
  }
}

uint64_t sub_10004A59C()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts13BaseOperation_lock;
  [*(id *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation_lock) lock];
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8Podcasts13BaseOperation__error);
  uint64_t v3 = *(void **)(v0 + v1);
  swift_errorRetain();
  [v3 unlock];
  return v2;
}

uint64_t sub_10004A608@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((swift_isaMask & *v1) + 0x180);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for OperationResult();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FeedManager.updateFeed(forFeedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:isSubscribing:feedDownloadedHook:preProcessFeedHook:postProcessFeedHook:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v61 = a7;
  int v62 = a8;
  int v60 = a6;
  uint64_t v53 = a5;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v52 = a2;
  uint64_t v51 = a1;
  uint64_t v57 = a9;
  int v56 = a10;
  uint64_t v54 = a17;
  uint64_t v50 = a18;
  uint64_t v47 = a15;
  uint64_t v65 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v68 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v64 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v66 = *(void *)(v19 - 8);
  uint64_t v67 = v19;
  __chkstk_darwin(v19);
  objc_super v55 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[1] = v23;
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[2] = v27;
  uint64_t updated = type metadata accessor for FeedUpdateRequest();
  uint64_t v48 = *(void *)(updated - 8);
  uint64_t v28 = *(void *)(v48 + 64);
  uint64_t v29 = __chkstk_darwin(updated);
  uint64_t v46 = (char *)v44 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v45 = (char *)v44 - v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v51, v24);
  sub_10003B19C(v52, (uint64_t)v23);
  swift_bridgeObjectRetain();
  sub_10004ACDC(a11);
  sub_10004ACDC(a13);
  sub_10004ACDC(v47);
  sub_10004ACDC(v54);
  uint64_t v31 = v45;
  FeedUpdateRequest.init(feedUrl:cloudSyncFeedUrl:podcastStoreId:triggerBy:userInitiated:forceBootstrap:useBackgroundFetch:source:isSubscribing:feedDownloadedHook:preProcessFeedHook:postProcessFeedHook:completion:)();
  uint64_t v32 = v63;
  uint64_t v33 = v48;
  uint64_t v34 = v46;
  uint64_t v35 = updated;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v46, v31, updated);
  unint64_t v36 = (*(unsigned __int8 *)(v33 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v32;
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v37 + v36, v34, v35);
  aBlock[4] = sub_10003B528;
  aBlock[5] = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  aBlock[3] = &unk_100560BA8;
  uint64_t v38 = _Block_copy(aBlock);
  id v39 = v32;
  uint64_t v40 = v55;
  static DispatchQoS.unspecified.getter();
  uint64_t v69 = _swiftEmptyArrayStorage;
  sub_10004ADC4((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_100044200((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  uint64_t v41 = v64;
  uint64_t v42 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v41, v42);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v40, v67);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v35);
  return swift_release();
}

uint64_t sub_10004ACDC(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10004ACEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004AD34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004AD7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004ADC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004AE0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004AE54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004AE9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004AEE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004AF30(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t))
{
  sub_10004D328(a1, (uint64_t)v17);
  sub_100054B78(a3);
  swift_dynamicCast();
  uint64_t v8 = v19;
  if (v19 >= 2u)
  {
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v11 = Strong;
      [Strong cancel];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = v18;
    swift_beginAccess();
    uint64_t v10 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = (char *)v10 + *(void *)((swift_isaMask & *v10) + 0x180);
      swift_beginAccess();
      uint64_t v13 = *(void *)v12;
      *(void *)uint64_t v12 = v9;
      uint64_t v14 = v12[8];
      v12[8] = v8;
      a4(v9, v8);
      a5(v13, v14);
LABEL_6:
    }
  }
  return ((uint64_t (*)(uint64_t, void))a5)(v18, v19);
}

uint64_t sub_10004B094(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_errorRelease();
  }
  if (!a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10004B0B0(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_errorRetain();
  }
  if (!a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10004B0CC(uint64_t a1)
{
  return sub_10004B0D4(a1, v1);
}

uint64_t sub_10004B0D4(uint64_t a1, uint64_t a2)
{
  return sub_10004AF30(a1, a2, &qword_100608028, (void (*)(uint64_t, uint64_t))sub_10004B0B0, (void (*)(uint64_t, uint64_t))sub_10004B094);
}

uint64_t sub_10004B10C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((swift_isaMask & *v1) + 0x198);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for OperationResult();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10004B1CC(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v62 = a7;
  uint64_t v63 = a6;
  id v60 = a5;
  uint64_t v61 = sub_100054B78(&qword_1005F9390);
  uint64_t v11 = __chkstk_darwin(v61);
  uint64_t v57 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v58 = (uint64_t *)&v51[-v13];
  id v14 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v15 = String._bridgeToObjectiveC()();
  id v59 = [v14 initWithEntityName:v15];

  sub_100054B78(&qword_1005F7720);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10046E5C0;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v17 = sub_10004DA4C();
  *(void *)(v16 + 64) = v17;
  *(void *)(v16 + 32) = 0xD000000000000011;
  *(void *)(v16 + 40) = 0x80000001004D52A0;
  if (a3) {
    uint64_t v18 = 1936484398;
  }
  else {
    uint64_t v18 = 0x7261646E6174732ELL;
  }
  if (a3) {
    unsigned __int8 v19 = (void *)0xE400000000000000;
  }
  else {
    unsigned __int8 v19 = (void *)0xE900000000000064;
  }
  sub_10004D29C(0, (unint64_t *)&unk_1005F8100);
  uint64_t v55 = a1;
  int v56 = a2;
  *(void *)&long long v66 = a1;
  *((void *)&v66 + 1) = a2;
  swift_bridgeObjectRetain();
  v54._uint64_t countAndFlagsBits = v18;
  v20._uint64_t countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  v54._object = v19;
  swift_bridgeObjectRelease();
  long long v21 = v66;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v17;
  *(_OWORD *)(v16 + 72) = v21;
  *(void *)(v16 + 136) = &type metadata for String;
  *(void *)(v16 + 144) = v17;
  strcpy((char *)(v16 + 112), "taskIdentifier");
  *(unsigned char *)(v16 + 127) = -18;
  *(void *)(v16 + 176) = sub_100054B78(&qword_1005F9378);
  *(void *)(v16 + 184) = sub_100044200((unint64_t *)&unk_1005F9380, &qword_1005F9378);
  *(void *)(v16 + 152) = a4;
  swift_bridgeObjectRetain();
  uint64_t v22 = v59;
  uint64_t v23 = NSPredicate.init(format:_:)();
  [v22 setPredicate:v23];

  id v24 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v22];
  [v24 setResultType:2];
  *(void *)&long long v66 = 0;
  id v25 = [v60 executeRequest:v24 error:&v66];
  uint64_t v26 = (void *)v66;
  if (!v25)
  {
    id v30 = (id)v66;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v32 = (uint64_t)v57;
    *uint64_t v57 = v31;
    type metadata accessor for JobStorageError();
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v63(v32);

    swift_errorRelease();
    goto LABEL_26;
  }
  uint64_t v27 = v25;
  self;
  uint64_t v28 = (void *)swift_dynamicCastObjCClass();
  if (v28)
  {
    id v29 = v26;
    if ([v28 result])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(&v64, 0, 32);
    }
    sub_100053820((uint64_t)&v64, (uint64_t)&v66, &qword_1005F5D30);
    if (*((void *)&v67 + 1))
    {
      int v34 = swift_dynamicCast();
      if (v34) {
        uint64_t countAndFlagsBits = v64._countAndFlagsBits;
      }
      else {
        uint64_t countAndFlagsBits = 0;
      }
      int v36 = v34 ^ 1;
      goto LABEL_20;
    }
  }
  else
  {
    id v33 = v26;

    long long v66 = 0u;
    long long v67 = 0u;
  }
  sub_100054B1C((uint64_t)&v66, &qword_1005F5D30);
  uint64_t countAndFlagsBits = 0;
  int v36 = 1;
LABEL_20:
  os_log_type_t v37 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v38 = static OS_os_log.downloads.getter();
  if (os_log_type_enabled(v38, v37))
  {
    id v39 = v56;
    swift_bridgeObjectRetain_n();
    LODWORD(v60) = v36;
    swift_bridgeObjectRetain_n();
    uint64_t v40 = swift_slowAlloc();
    int v52 = v37;
    uint64_t v41 = v40;
    uint64_t v53 = swift_slowAlloc();
    uint64_t v65 = v53;
    *(void *)&long long v66 = countAndFlagsBits;
    *(_DWORD *)uint64_t v41 = 136315650;
    BYTE8(v66) = (_BYTE)v60;
    sub_100054B78(&qword_1005F9398);
    uint64_t v42 = String.init<A>(describing:)();
    uint64_t v57 = (void *)countAndFlagsBits;
    *(void *)&long long v66 = sub_10004B974(v42, v43, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2082;
    *(void *)&long long v66 = 0x496E6F6973736553;
    *((void *)&v66 + 1) = 0xEB00000000203A44;
    v64._uint64_t countAndFlagsBits = v55;
    v64._object = v39;
    swift_bridgeObjectRetain_n();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v66 = sub_10004B974(v66, *((unint64_t *)&v66 + 1), &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v44 = Array.description.getter();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v47 = v44;
    uint64_t countAndFlagsBits = (uint64_t)v57;
    *(void *)&long long v66 = sub_10004B974(v47, v46, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int v36 = (int)v60;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v52, "Deleted %s not-running jobs from session identifier %{public}s thats not in tasks %{public}s", (uint8_t *)v41, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v48 = v63;
  uint64_t v32 = (uint64_t)v58;
  if (v36) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = countAndFlagsBits;
  }
  *uint64_t v58 = v49;
  swift_storeEnumTagMultiPayload();
  v48(v32);

  uint64_t v22 = v28;
LABEL_26:

  return sub_100054B1C(v32, &qword_1005F9390);
}

uint64_t sub_10004B974(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10004BA48(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10004D328((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10004D328((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10004D2D8((uint64_t)v12);
  return v7;
}

uint64_t sub_10004BA48(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10004BC04(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10004BC04(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10004BC9C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10000BCA4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10000BCA4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10004BC9C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10004BE14(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10004BE14(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100054B78(&qword_1005F6ED8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  _OWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10004BE7C(uint64_t a1)
{
  return sub_100046C74(a1, v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_10004BE90(void *a1, char a2, char a3, int a4)
{
  LODWORD(v121) = a4;
  uint64_t v118 = type metadata accessor for Date();
  uint64_t v120 = *(void *)(v118 - 8);
  uint64_t v7 = __chkstk_darwin(v118);
  uint64_t v119 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v128 = (char *)&v109 - v9;
  uint64_t v129 = type metadata accessor for StationType();
  uint64_t v127 = *(void *)(v129 - 8);
  uint64_t v10 = __chkstk_darwin(v129);
  uint64_t v125 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v126 = (char *)&v109 - v12;
  uint64_t v13 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unsigned __int8 v19 = (char *)&v109 - v18;
  uint64_t v20 = sub_100054B78(&qword_1005F77A0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for StationSortOrder();
  uint64_t v130 = *(void *)(v132 - 8);
  uint64_t v23 = __chkstk_darwin(v132);
  long long v124 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v131 = (char *)&v109 - v25;
  uint64_t v26 = sub_100054B78(&qword_1005F76A0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v123 = (uint64_t)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v109 - v30;
  __chkstk_darwin(v29);
  uint64_t v133 = (uint64_t)&v109 - v32;
  id v33 = [a1 uuid];
  if (!v33) {
    goto LABEL_8;
  }
  int v34 = v33;
  uint64_t v116 = v14;
  uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  id v37 = [a1 title];
  if (!v37)
  {
    swift_bridgeObjectRelease();
LABEL_8:

    return;
  }
  uint64_t v38 = v37;
  uint64_t v122 = v36;
  uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v114 = v39;

  uint64_t v40 = type metadata accessor for ArtworkModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v133, 1, 1, v40);
  if ((a2 & 1) == 0)
  {
    MTPlaylist.artworkModel.getter();
    uint64_t v41 = v133;
    sub_100054B1C(v133, &qword_1005F76A0);
    sub_100360D04((uint64_t)v31, v41);
  }
  sub_10004EF24([a1 containerOrder], (uint64_t)v22);
  uint64_t v42 = v130;
  uint64_t v43 = v132;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v22, 1, v132) == 1)
  {
    static StationSortOrder.default.getter();
    sub_100054B1C((uint64_t)v22, &qword_1005F77A0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v131, v22, v43);
  }
  unsigned int v44 = [a1 isUngroupedList];
  id v45 = [a1 defaultSettings];
  if (v45)
  {
    unint64_t v46 = v45;
    unsigned int v47 = [v45 showPlayedEpisodes];

    int v112 = v47 ^ 1;
    if (a3) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a3)
    {
      int v112 = 1;
      goto LABEL_18;
    }
    int v112 = 1;
  }
  id v48 = [a1 episodes];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = v122;
    swift_bridgeObjectRetain();
    unint64_t v111 = sub_100360D6C(v49, v117, v50);

    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
LABEL_18:
  unint64_t v111 = 0;
LABEL_19:
  uint64_t v142 = &_swiftEmptySetSingleton;
  unint64_t v141 = (unint64_t)_swiftEmptyArrayStorage;
  id v51 = [a1 settings];
  v134 = a1;
  unsigned int v113 = v44;
  if (v121)
  {
    if (v51)
    {
      id v52 = v51;
      NSOrderedSet.makeIterator()();
      id v110 = v52;

      sub_10004D51C();
      dispatch thunk of IteratorProtocol.next()();
      if (v139)
      {
        uint64_t v53 = (char *)_swiftEmptyArrayStorage;
        Swift::String v54 = &qword_1005F7738;
        uint64_t v55 = MTPodcastPlaylistSettings_ptr;
        do
        {
          sub_10004D384(&v138, &v137);
          sub_10004D328((uint64_t)&v137, (uint64_t)v135);
          sub_10004D29C(0, v54);
          if (swift_dynamicCast()
            && (id v56 = (id)v140,
                id v57 = [(id)v140 podcast],
                v56,
                v57))
          {
            uint64_t v58 = v13;
            id v59 = v17;
            id v60 = v55;
            uint64_t v61 = v54;
            id v62 = [v57 uuid];

            if (v62)
            {
              uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v121 = v64;

              sub_10004D2D8((uint64_t)&v137);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v53 = sub_10004CEAC(0, *((void *)v53 + 2) + 1, 1, v53);
              }
              unint64_t v66 = *((void *)v53 + 2);
              unint64_t v65 = *((void *)v53 + 3);
              if (v66 >= v65 >> 1) {
                uint64_t v53 = sub_10004CEAC((char *)(v65 > 1), v66 + 1, 1, v53);
              }
              *((void *)v53 + 2) = v66 + 1;
              long long v67 = &v53[16 * v66];
              unint64_t v68 = v121;
              *((void *)v67 + 4) = v63;
              *((void *)v67 + 5) = v68;
              a1 = v134;
            }
            else
            {
              sub_10004D2D8((uint64_t)&v137);
            }
            Swift::String v54 = v61;
            uint64_t v55 = v60;
            unint64_t v17 = v59;
            uint64_t v13 = v58;
          }
          else
          {
            sub_10004D2D8((uint64_t)&v137);
          }
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v139);
      }
      else
      {
        uint64_t v53 = (char *)_swiftEmptyArrayStorage;
      }
      (*(void (**)(char *, uint64_t))(v116 + 8))(v17, v13);

      swift_bridgeObjectRelease();
      uint64_t v98 = sub_1000505EC((uint64_t)v53);
      swift_bridgeObjectRelease();
LABEL_73:
      unint64_t v121 = *(void *)(v98 + 16);
      swift_bridgeObjectRelease();
      uint64_t v70 = v118;
      uint64_t v71 = v130;
      goto LABEL_74;
    }
  }
  else if (v51)
  {
    unint64_t v140 = (unint64_t)_swiftEmptyArrayStorage;
    id v69 = v51;
    NSOrderedSet.makeIterator()();

    sub_10004D51C();
    dispatch thunk of IteratorProtocol.next()();
    while (v139)
    {
      sub_10004D384(&v138, &v137);
      sub_10004D328((uint64_t)&v137, (uint64_t)v135);
      sub_10004D29C(0, &qword_1005F7738);
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v136 = 0;
      }
      sub_10004D2D8((uint64_t)&v137);
      if (v136)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        a1 = v134;
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    (*(void (**)(char *, uint64_t))(v116 + 8))(v19, v13);
    unint64_t v72 = v140;

    if (v72 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v73 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v74 = v122;
    if (v73)
    {
      if (v73 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v75 = 0;
      unint64_t v76 = v72 & 0xC000000000000001;
      unint64_t v121 = v72 & 0xC000000000000001;
      uint64_t v116 = v73;
      do
      {
        if (v76) {
          id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v77 = *(id *)(v72 + 8 * v75 + 32);
        }
        uint64_t v78 = v77;
        id v79 = [v77 podcast];
        if (v79
          && (uint64_t v80 = v79, v81 = [v79 uuid], v80, v81))
        {
          uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v84 = v83;

          uint64_t v85 = (uint64_t)v142;
          swift_bridgeObjectRetain();
          char v86 = sub_10030A84C(v82, v84, v85);
          swift_bridgeObjectRelease();
          if (v86)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
            id v87 = v78;
            uint64_t v88 = v74;
            id v89 = v87;
            id v90 = [v87 uuid];
            if (v90)
            {
              uint64_t v91 = v90;
              uint64_t v92 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

              id v93 = [v89 podcast];
              if (v93)
              {
                uint64_t v94 = v93;
                id v110 = v92;
                type metadata accessor for PodcastDetail();
                id v95 = v94;
                if (sub_10022B704(v95, 0, 0, 0, 1))
                {
                  type metadata accessor for StationShow();
                  swift_retain();
                  [v89 episodeCount];
                  dispatch thunk of StationShow.__allocating_init(uuid:stationUuid:podcast:episodeCount:)();
                  swift_release();

                  swift_retain();
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                  sub_100050684((Swift::Int *)&v138, v82, v84);

                  swift_release();
                  swift_bridgeObjectRelease();
                  a1 = v134;
                  uint64_t v74 = v122;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  uint64_t v97 = v122;
                  swift_bridgeObjectRelease();

                  uint64_t v74 = v97;
                  a1 = v134;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v96 = v122;
                swift_bridgeObjectRelease();

                uint64_t v74 = v96;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              uint64_t v74 = v88;
            }
          }
          unint64_t v76 = v121;
          uint64_t v73 = v116;
        }
        else
        {
        }
        ++v75;
      }
      while (v73 != v75);
    }
    swift_bridgeObjectRelease();
    uint64_t v98 = (uint64_t)v142;
    goto LABEL_73;
  }
  unint64_t v121 = 0;
  uint64_t v70 = v118;
  uint64_t v71 = v130;
LABEL_74:
  LODWORD(v134) = v113 ^ 1;
  unsigned int v99 = [a1 isItunesPlaylist];
  uint64_t v100 = (unsigned int *)&enum case for StationType.manual(_:);
  if (!v99) {
    uint64_t v100 = (unsigned int *)&enum case for StationType.dynamic(_:);
  }
  uint64_t v101 = v127;
  objc_super v102 = v126;
  uint64_t v103 = v129;
  (*(void (**)(char *, void, uint64_t))(v127 + 104))(v126, *v100, v129);
  [a1 unplayedCount];
  [a1 generatedDate];
  Date.init(timeIntervalSinceReferenceDate:)();
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v125, v102, v103);
  sub_1000503CC(v133, v123);
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v124, v131, v132);
  id v104 = [a1 episodes];
  if (v104)
  {
    objc_super v106 = v104;
    [v104 count];
  }
  MTPlaylist.unsafePredicateForAllEpisodesMatchingSettings()(v105);
  [a1 objectID];
  uint64_t v107 = v120;
  objc_super v108 = v128;
  (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v119, v128, v70);
  dispatch thunk of StationDetail.__allocating_init(uuid:type:title:artwork:sortOrder:grouped:hidePlayedEpisodes:episodeCount:showCount:unplayedCount:episodes:shows:predicateForEpisodes:objectID:dateCreated:)();

  (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v70);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v126, v129);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v132);
  sub_100054B1C(v133, &qword_1005F76A0);
}

char *sub_10004CEAC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100054B78((uint64_t *)&unk_1005F83F0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10004D590(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

id sub_10004CFC0()
{
  uint64_t v1 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [v0 settings];
  if (!result) {
    return result;
  }
  uint64_t v15 = v2;
  id v16 = v0;
  unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
  id v6 = result;
  NSOrderedSet.makeIterator()();

  sub_10004D51C();
  dispatch thunk of IteratorProtocol.next()();
  while (v21)
  {
    sub_10004D384(&v20, v19);
    sub_10004D328((uint64_t)v19, (uint64_t)v17);
    sub_10004D29C(0, &qword_1005F7738);
    if ((swift_dynamicCast() & 1) == 0) {
      uint64_t v18 = 0;
    }
    sub_10004D2D8((uint64_t)v19);
    if (v18)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    dispatch thunk of IteratorProtocol.next()();
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v4, v1);
  unint64_t v7 = v22;

  id v8 = v16;
  id v9 = [v16 defaultSettings];
  if (!v9)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = v9;
  if (([v8 includesAllPodcasts] & 1) == 0)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  id v11 = v10;
  unint64_t v12 = (unint64_t)sub_100055330(v7, v11);
  swift_bridgeObjectRelease();

  if (v12 >> 62) {
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();

  return (id)(v13 == 0);
}

uint64_t sub_10004D29C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10004D2D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10004D328(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_10004D384(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void *sub_10004D394(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      uint64_t v14 = *(void *)a2;
      swift_errorRetain();
      *uint64_t v3 = v14;
      *((unsigned char *)v3 + v5) = 1;
    }
    else if (v9)
    {
      memcpy(__dst, a2, v5 + 1);
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(__dst);
      *((unsigned char *)v3 + v5) = 0;
    }
  }
  return v3;
}

unint64_t sub_10004D51C()
{
  unint64_t result = qword_100602630;
  if (!qword_100602630)
  {
    type metadata accessor for NSFastEnumerationIterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100602630);
  }
  return result;
}

uint64_t sub_10004D590(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void __swiftcall MTPlaylist.unsafePredicateForAllEpisodesMatchingSettings()(NSPredicate_optional *__return_ptr retstr)
{
  if (sub_10004CFC0()) {
    id v1 = sub_10004D73C();
  }
  else {
    sub_10021F83C();
  }
  id v2 = v1;
  id v3 = sub_10004DAA0();
  id v4 = [v2 AND:v3];

  id v5 = v4;
  id v6 = sub_10004DD70();
  id v7 = [v5 AND:v6];
}

id sub_10004D73C()
{
  if (sub_10004CFC0())
  {
    id v1 = [self predicateForStationEligibleEpisodes];
    id v2 = [v0 defaultSettings];
    id v3 = v1;
    if (v2)
    {
      id v4 = v2;
      uint64_t v5 = (uint64_t)[v2 integerForEpisodesToShow];

      id v3 = v1;
      if (v5 >= 1)
      {
        sub_10004D29C(0, (unint64_t *)&unk_1005F8100);
        sub_100054B78(&qword_1005F7720);
        uint64_t v6 = swift_allocObject();
        *(_OWORD *)(v6 + 16) = xmmword_10046D030;
        uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v9 = v8;
        *(void *)(v6 + 56) = &type metadata for String;
        unint64_t v10 = sub_10004DA4C();
        *(void *)(v6 + 32) = v7;
        *(void *)(v6 + 40) = v9;
        *(void *)(v6 + 96) = &type metadata for Int;
        *(void *)(v6 + 104) = &protocol witness table for Int;
        *(void *)(v6 + 64) = v10;
        *(void *)(v6 + 72) = v5;
        uint64_t v11 = NSPredicate.init(format:_:)();
        id v3 = [v1 AND:v11];
      }
    }

    type metadata accessor for RestrictionsController();
    if (static RestrictionsController.isExplicitContentAllowed.getter())
    {
      return v3;
    }
    else
    {
      sub_10004D29C(0, (unint64_t *)&unk_1005F8100);
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v14._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._object = (void *)0x80000001004D7670;
      v15._uint64_t countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v15);
      sub_100054B78(&qword_1005F7720);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_10046D030;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;
      *(void *)(v16 + 56) = &type metadata for String;
      unint64_t v20 = sub_10004DA4C();
      *(void *)(v16 + 32) = v17;
      *(void *)(v16 + 40) = v19;
      *(void *)(v16 + 96) = &type metadata for Int;
      *(void *)(v16 + 104) = &protocol witness table for Int;
      *(void *)(v16 + 64) = v20;
      *(void *)(v16 + 72) = 256;
      uint64_t v21 = NSPredicate.init(format:_:)();
      swift_bridgeObjectRelease();

      return (id)v21;
    }
  }
  else
  {
    id v13 = [self falsePredicate];
    return v13;
  }
}

unint64_t sub_10004DA4C()
{
  unint64_t result = qword_1005F8110;
  if (!qword_1005F8110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F8110);
  }
  return result;
}

id sub_10004DAA0()
{
  id v1 = [v0 defaultSettings];
  if (v1)
  {
    id v2 = v1;
    id v3 = self;
    id v4 = [v3 predicateForExternalType:0];
    id v5 = [v3 predicateForStationEligibleEpisodes];
    id v6 = [v4 AND:v5];

    id v7 = v6;
    id v8 = v7;
    if (([v2 showPlayedEpisodes] & 1) == 0)
    {
      id v9 = [v3 predicateForVisuallyPlayed:0];
      id v8 = [v7 AND:v9];
    }
    type metadata accessor for RestrictionsController();
    if ((static RestrictionsController.isExplicitContentAllowed.getter() & 1) == 0)
    {
      id v10 = [v3 predicateForExplicit:0];
      id v11 = [v8 AND:v10];

      id v8 = v11;
    }
    if ([v2 mediaType])
    {
      [v2 mediaType];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
      sub_10004D29C(0, (unint64_t *)&unk_1005F8100);
      sub_100054B78(&qword_1005F7720);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_10046D010;
      *(void *)(v15 + 56) = &type metadata for String;
      *(void *)(v15 + 64) = sub_10004DA4C();
      *(void *)(v15 + 32) = v12;
      *(void *)(v15 + 40) = v14;
      uint64_t v16 = NSPredicate.init(format:_:)();
      id v17 = [v8 AND:v16];

      return v17;
    }
    else
    {

      return v8;
    }
  }
  else
  {
    id v19 = [self falsePredicate];
    return v19;
  }
}

id sub_10004DD70()
{
  id v1 = [v0 deletedEpisodes];
  if (v1
    && (id v2 = v1,
        uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
        v2,
        uint64_t v4 = sub_10004DF38(v3),
        swift_bridgeObjectRelease(),
        v4))
  {
    sub_10004E2D4(v4);
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    uint64_t v14 = v6;
    swift_bridgeObjectRetain();
    sub_10004E64C(&v14);
    swift_bridgeObjectRelease();
    uint64_t v7 = v14;
    sub_10004D29C(0, (unint64_t *)&unk_1005F8100);
    sub_100054B78(&qword_1005F7720);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_10046D030;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10004DA4C();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    *(void *)(v8 + 96) = sub_100054B78((uint64_t *)&unk_100603260);
    *(void *)(v8 + 104) = sub_10004E278();
    *(void *)(v8 + 72) = v7;
    return (id)NSPredicate.init(format:_:)();
  }
  else
  {
    id v13 = [self truePredicate];
    return v13;
  }
}

uint64_t sub_10004DF38(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100054B78(&qword_100602370);
    id v2 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    id v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v27 = a1 + 56;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v8 << 6);
      int64_t v12 = v8;
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v13 >= v26) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v12 = v8 + 1;
    if (!v14)
    {
      int64_t v12 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_39;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_39;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v12);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_28:
    sub_100172EBC(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v28);
    v16.Class isa = AnyHashable._bridgeToObjectiveC()().isa;
    sub_100172F18((uint64_t)v28);
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (!v17)
    {
      swift_release_n();

      sub_10004E644();
      return 0;
    }
    uint64_t v18 = v17;
    uint64_t result = NSObject._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(void *)(v2[6] + 8 * v9) = v18;
    ++v2[2];
    int64_t v8 = v12;
    unint64_t v5 = v10;
  }
  int64_t v15 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    sub_10004E644();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    int64_t v12 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

unint64_t sub_10004E278()
{
  unint64_t result = qword_1005FB060;
  if (!qword_1005FB060)
  {
    sub_100044244((uint64_t *)&unk_100603260);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FB060);
  }
  return result;
}

void sub_10004E2D4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10004D29C(0, (unint64_t *)&qword_100603220);
    sub_1001BED60();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    uint64_t v26 = v28;
    uint64_t v3 = v29;
    uint64_t v2 = v30;
    unint64_t v4 = v31;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  uint64_t v23 = v3;
  int64_t v25 = (unint64_t)(v3 + 64) >> 6;
  BOOL v24 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v8 = v2;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    sub_10004D29C(0, (unint64_t *)&qword_100603220);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v32;
    swift_unknownObjectRelease();
    if (!v32) {
      goto LABEL_38;
    }
LABEL_31:
    id v15 = [v11 uuid];
    if (v15)
    {
      NSObject v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v24 = sub_10004CEAC(0, *((void *)v24 + 2) + 1, 1, v24);
      }
      unint64_t v21 = *((void *)v24 + 2);
      unint64_t v20 = *((void *)v24 + 3);
      if (v21 >= v20 >> 1) {
        BOOL v24 = sub_10004CEAC((char *)(v20 > 1), v21 + 1, 1, v24);
      }
      *((void *)v24 + 2) = v21 + 1;
      char v22 = &v24[16 * v21];
      *((void *)v22 + 4) = v17;
      *((void *)v22 + 5) = v19;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v2 << 6);
LABEL_30:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  int64_t v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v25) {
      goto LABEL_38;
    }
    unint64_t v13 = *(void *)(v26 + 8 * v12);
    ++v2;
    if (!v13)
    {
      uint64_t v2 = v8 + 2;
      if (v8 + 2 >= v25) {
        goto LABEL_38;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v2);
      if (!v13)
      {
        uint64_t v2 = v8 + 3;
        if (v8 + 3 >= v25) {
          goto LABEL_38;
        }
        unint64_t v13 = *(void *)(v26 + 8 * v2);
        if (!v13)
        {
          uint64_t v2 = v8 + 4;
          if (v8 + 4 >= v25) {
            goto LABEL_38;
          }
          unint64_t v13 = *(void *)(v26 + 8 * v2);
          if (!v13)
          {
            uint64_t v2 = v8 + 5;
            if (v8 + 5 >= v25) {
              goto LABEL_38;
            }
            unint64_t v13 = *(void *)(v26 + 8 * v2);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v25 != v14)
              {
                unint64_t v13 = *(void *)(v26 + 8 * v14++);
                if (v13)
                {
                  uint64_t v2 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              sub_10004E644();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_10004E644()
{
  return swift_release();
}

Swift::Int sub_10004E64C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10004E6B8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10004E838(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10004E6B8(uint64_t a1)
{
  return sub_10004E6CC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10004E6CC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100054B78((uint64_t *)&unk_1005F83F0);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_10004E838(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_100220488(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  objc_super v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      int64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      uint64_t v94 = v11;
      id v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_100220558((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_10025CC4C((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    id v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    id v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  int64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    unint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v11 = sub_10025C908(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      int64_t v11 = sub_10025C908((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          id v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            id v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        id v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        unint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        char v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        id v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_100220558((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)char v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        int64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      id v33 = (void *)(v10 + 16 * v9);
      do
      {
        int v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004EF24@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for StationSortOrder();
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >= 6)
  {
    int64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v11(a2, 1, 1, v4);
  }
  else
  {
    uint64_t v8 = *(unsigned int *)*(&off_100564AE8 + (int)a1);
    Swift::Int v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
    uint64_t v13 = v5;
    v9(v7, v8, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v7, v4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v4);
  }
}

uint64_t sub_10004F08C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004F2B8(a1, *(void *)(v2 + 16), a2);
}

void sub_10004F0A8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10004F0C4(a1, *(void **)(v2 + 16), a2);
}

void sub_10004F0C4(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  id v5 = a2;
  uint64_t v6 = sub_10004F130(v4, (uint64_t)v5);

  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = 0;
}

void *sub_10004F130(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a2;
  uint64_t v5 = type metadata accessor for DownloadJob(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    int v19 = _swiftEmptyArrayStorage;
    sub_1001BA6F8(0, v9, 0);
    uint64_t v10 = v19;
    unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = *(void *)(v6 + 72);
    while (1)
    {
      sub_100243D68(v12, v18, (uint64_t)v8);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      int v19 = v10;
      unint64_t v15 = v10[2];
      unint64_t v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001BA6F8(v14 > 1, v15 + 1, 1);
        uint64_t v10 = v19;
      }
      v10[2] = v15 + 1;
      sub_100244640((uint64_t)v8, (uint64_t)v10 + v11 + v15 * v13);
      v12 += v13;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

uint64_t sub_10004F2B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *a1;
  os_log_type_t v8 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  int64_t v9 = static OS_os_log.downloads.getter();
  swift_bridgeObjectRetain();
  uint64_t v28 = a3;
  if (os_log_type_enabled(v9, v8))
  {
    swift_bridgeObjectRetain();
    os_log_type_t type = v8;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134349314;
    uint64_t v32 = *(void *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2082;
    type metadata accessor for DownloadJob(0);
    swift_bridgeObjectRetain();
    uint64_t v11 = Array.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_10004B974(v11, v13, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, type, "%{public}ld jobs retreived from storage %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  unint64_t v14 = &_swiftEmptyDictionarySingleton;
  uint64_t v29 = &_swiftEmptyDictionarySingleton;
  uint64_t v15 = *(void *)(v7 + 16);
  if (v15)
  {
    uint64_t v16 = *(void *)(type metadata accessor for DownloadJob(0) - 8);
    uint64_t v17 = v7 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v18 = *(void *)(v16 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10024415C((uint64_t)&v29, v17, a2);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      v17 += v18;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        unint64_t v14 = v29;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
LABEL_9:
    os_log_type_t v19 = static os_log_type_t.default.getter();
    Swift::Int v20 = static OS_os_log.downloads.getter();
    swift_bridgeObjectRetain();
    if (os_log_type_enabled(v20, v19))
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134349314;
      uint64_t v32 = v14[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2082;
      type metadata accessor for DownloadJob(0);
      swift_bridgeObjectRetain();
      sub_100054B78(&qword_1005F8450);
      sub_100050160();
      uint64_t v22 = Dictionary.description.getter();
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      uint64_t v32 = sub_10004B974(v22, v24, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v19, "Sync completed. Number of jobs running: %{public}ld. %{public}s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v25 = *(void (**)(void **))(a2 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
    if (v25)
    {
      uint64_t v31 = sub_100054B78(&qword_1005FC798);
      uint64_t v29 = v14;
      char v30 = 0;
      swift_bridgeObjectRetain();
      sub_10004ACDC((uint64_t)v25);
      v25(&v29);
      sub_1000536BC((uint64_t)v25);
      sub_10004D2D8((uint64_t)&v29);
    }
    sub_100049E74();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v28 = 0;
    *(unsigned char *)(v28 + 8) = 0;
  }
  return result;
}

uint64_t sub_10004F778(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for DownloadJob(uint64_t a1)
{
  return sub_10004F778(a1, qword_1005FC178);
}

uint64_t sub_10004F7D0()
{
  return sub_100050148(sub_10004F7E8);
}

uint64_t sub_10004F7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Podcasts23EpisodeDownloadsManager__downloaders);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  if (a4)
  {
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v9;
    *int64_t v9 = 0x8000000000000000;
    sub_10004F8E4(a4, a5, a2, a3, isUniquelyReferenced_nonNull_native);
    *int64_t v9 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10027DA58(a2, a3);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_endAccess();
}

uint64_t sub_10004F8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10004FA6C(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100282858();
LABEL_7:
    Swift::Int v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_unknownObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100059554(v17, a5 & 1);
  unint64_t v23 = sub_10004FA6C(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  Swift::Int v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  uint64_t v26 = (void *)(v20[7] + 16 * v14);
  *uint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v29;

  return swift_bridgeObjectRetain();
}

unint64_t sub_10004FA6C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100051D94(a1, a2, v4);
}

uint64_t sub_10004FAF4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004FB10(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_10004FB10@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v7 = sub_10004FCBC(v5, (void (*)(uint64_t, uint64_t))sub_1003D2F60, v6);
  swift_release();
  id v8 = a2;
  unint64_t v9 = (unint64_t)sub_100050014((uint64_t)v7, (uint64_t)v8);
  swift_bridgeObjectRelease();

  swift_unknownObjectWeakInit();
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_unknownObjectWeakDestroy();
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v10 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v13 = *(void *)(v9 + 8 * v12 + 32);
        swift_retain();
      }
      ++v12;
      uint64_t v14 = v13;
      sub_1003BDBBC(&v14, (uint64_t)v15);
      swift_release();
    }
    while (v10 != v12);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void *sub_10004FCBC(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  unint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v39 = sub_100054B78(&qword_100607FC8);
  uint64_t v5 = __chkstk_darwin(v39);
  uint64_t v38 = (uint64_t)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v37 = (uint64_t)v31 - v8;
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)v31 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v10)
  {
    v31[1] = v3;
    unint64_t v44 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = (void *)sub_1003D08C8(a1);
    uint64_t v13 = (uint64_t)result;
    uint64_t v14 = 0;
    uint64_t v15 = a1 + 64;
    uint64_t v32 = a1 + 80;
    uint64_t v33 = v10;
    uint64_t v34 = v12;
    uint64_t v35 = a1 + 64;
    uint64_t v16 = v39;
    uint64_t v17 = (uint64_t)v36;
    while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v19 = (unint64_t)v13 >> 6;
      if ((*(void *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v12) {
        goto LABEL_23;
      }
      uint64_t v42 = v14;
      uint64_t v43 = 1 << v13;
      uint64_t v20 = v17 + *(int *)(v16 + 48);
      uint64_t v21 = *(void *)(a1 + 48);
      uint64_t v22 = type metadata accessor for DownloadJob(0);
      sub_1003D34F0(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v13, v17, type metadata accessor for DownloadJob);
      sub_100056D54(*(void *)(a1 + 56) + 40 * v13, v20);
      uint64_t v23 = v37;
      sub_1003D34F0(v17, v37, type metadata accessor for DownloadJob);
      sub_100056D54(v20, v23 + *(int *)(v16 + 48));
      uint64_t v24 = v23;
      uint64_t v25 = v38;
      sub_100053820(v24, v38, &qword_100607FC8);
      sub_100054B1C(v17, &qword_100607FC8);
      v40(v25, v25 + *(int *)(v16 + 48));
      sub_100054B1C(v25, &qword_100607FC8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v18 = 1 << *(unsigned char *)(a1 + 32);
      if (v13 >= v18) {
        goto LABEL_24;
      }
      uint64_t v15 = v35;
      uint64_t v26 = *(void *)(v35 + 8 * v19);
      if ((v26 & v43) == 0) {
        goto LABEL_25;
      }
      LODWORD(v12) = v34;
      if (*(_DWORD *)(a1 + 36) != v34) {
        goto LABEL_26;
      }
      unint64_t v27 = v26 & (-2 << (v13 & 0x3F));
      if (v27)
      {
        int64_t v18 = __clz(__rbit64(v27)) | v13 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = v19 + 1;
        unint64_t v29 = (unint64_t)(v18 + 63) >> 6;
        if (v19 + 1 < v29)
        {
          unint64_t v30 = *(void *)(v35 + 8 * v28);
          if (v30)
          {
LABEL_18:
            int64_t v18 = __clz(__rbit64(v30)) + (v28 << 6);
          }
          else
          {
            while (v29 - 2 != v19)
            {
              unint64_t v30 = *(void *)(v32 + 8 * v19++);
              if (v30)
              {
                unint64_t v28 = v19 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v14 = v42 + 1;
      uint64_t v13 = v18;
      if (v42 + 1 == v33) {
        return v44;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void *sub_100050014(uint64_t a1, uint64_t a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v9 = *(void *)(a1 + 8 * i + 32);
      swift_retain();
      sub_1003BD474(&v9, a2, &v8);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return (void *)swift_bridgeObjectRelease();
      }
      swift_release();
      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return (void *)v10;
  }
  return result;
}

uint64_t sub_100050148(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t sub_100050160()
{
  unint64_t result = qword_1005FC7A0;
  if (!qword_1005FC7A0)
  {
    type metadata accessor for DownloadJob(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FC7A0);
  }
  return result;
}

uint64_t sub_1000501B8(uint64_t a1)
{
  return sub_1000501C0(a1, v1);
}

uint64_t sub_1000501C0(uint64_t a1, uint64_t a2)
{
  return sub_1000501F4(a1, a2, (uint64_t *)&unk_100608030, (void (*)(uint64_t, uint64_t))sub_10005036C, (void (*)(uint64_t, uint64_t))sub_100050358);
}

uint64_t sub_1000501F4(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t))
{
  sub_10004D328(a1, (uint64_t)v17);
  sub_100054B78(a3);
  swift_dynamicCast();
  uint64_t v8 = v19;
  if (v19 >= 2u)
  {
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v11 = Strong;
      [Strong cancel];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = v18;
    swift_beginAccess();
    unint64_t v10 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = (char *)v10 + *(void *)((swift_isaMask & *v10) + 0x198);
      swift_beginAccess();
      uint64_t v13 = *(void *)v12;
      *(void *)uint64_t v12 = v9;
      uint64_t v14 = v12[8];
      v12[8] = v8;
      a4(v9, v8);
      a5(v13, v14);
LABEL_6:
    }
  }
  return ((uint64_t (*)(uint64_t, void))a5)(v18, v19);
}

uint64_t sub_100050358(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10005036C(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_100050380(uint64_t a1)
{
  return sub_10004AF30(a1, v1, &qword_1005FC798, (void (*)(uint64_t, uint64_t))sub_10004B0B0, (void (*)(uint64_t, uint64_t))sub_10004B094);
}

uint64_t sub_1000503CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005F76A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005046C(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    unint64_t v10 = (Swift::Int *)(*(void *)(v1 + 48) + 16 * v9);
    Swift::Int v11 = *v10;
    Swift::Int v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_100050684(&v16, v11, v12);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 4;
  if (v15 < v7)
  {
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v2 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v15;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_1000505EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100050684(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100050684(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    Swift::Int v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100050834(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_100050834(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000509D0();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1003F76A8();
      goto LABEL_22;
    }
    sub_100008768();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    Swift::Int v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1000509D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100054B78(&qword_100607F90);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

char *sub_100050CB0()
{
  uint64_t v1 = sub_100054B78(&qword_100604210);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = &v0[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter__playbackSpeedMenu];
  uint64_t v87 = 0;
  uint64_t v6 = v0;
  sub_100054B78(&qword_100604200);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  uint64_t v7 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = objc_allocWithZone((Class)type metadata accessor for PlayerPathCoordinator());
  *(void *)&v6[v7] = PlayerPathCoordinator.init(playerID:bundleID:)();
  uint64_t v9 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController;
  *(void *)&v6[v9] = [objc_allocWithZone((Class)MPRequestResponseController) init];
  unint64_t v10 = (uint64_t *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerID];
  uint64_t *v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10[1] = v11;
  v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_isTargetPlaying] = 0;
  *(void *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpForwardsAmount] = 0x403E000000000000;
  *(void *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_jumpBackwardsAmount] = 0x402E000000000000;
  *(void *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_bindings] = _swiftEmptyArrayStorage;
  type metadata accessor for ExplicitContentPresenter();
  swift_allocObject();
  *(void *)&v6[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_explicitContentPresenter] = ExplicitContentPresenter.init()();

  unint64_t v12 = (objc_class *)type metadata accessor for PodcastsPlayerAdapter(0);
  v88.receiver = v6;
  v88.super_class = v12;
  id v13 = [super init];
  id v14 = objc_allocWithZone((Class)MPCPlayerRequest);
  uint64_t v85 = (char *)v13;
  id v15 = [v14 init];
  NSString v16 = String._bridgeToObjectiveC()();
  [v15 setLabel:v16];

  sub_100054B78((uint64_t *)&unk_1006043F0);
  uint64_t inited = swift_initStackObject();
  long long v86 = xmmword_10046D010;
  *(_OWORD *)(inited + 16) = xmmword_10046D010;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v18;
  sub_100054B78((uint64_t *)&unk_1005F83F0);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v86;
  *(void *)(v19 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v19 + 40) = v20;
  sub_100051870((uint64_t)_swiftEmptyArrayStorage);
  id v21 = objc_allocWithZone((Class)MPPropertySet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10004D29C(0, &qword_100604400);
  Class v23 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = [v21 initWithProperties:isa relationships:v23];

  *(void *)(inited + 48) = v24;
  sub_100051870(inited);
  id v25 = objc_allocWithZone((Class)MPPropertySet);
  Class v26 = Array._bridgeToObjectiveC()().super.isa;
  Class v27 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = [v25 initWithProperties:v26 relationships:v27];

  id v29 = v28;
  [v15 setPlayingItemProperties:v29];
  [v15 setQueueItemProperties:v29];
  id v83 = v29;

  uint64_t v30 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController;
  uint64_t v31 = v85;
  uint64_t v32 = *(void **)&v85[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerRequestController];
  id v84 = v15;
  [v32 setRequest:v15];
  [v32 setDelegate:v31];
  id v33 = [v32 request];
  uint64_t v34 = OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator;
  id v35 = [*(id *)&v31[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_playerPathCoordinator] playbackPlayerPath];
  [v33 setPlayerPath:v35];

  [*(id *)&v31[v30] beginAutomaticResponseLoading];
  sub_100054B78(&qword_100604408);
  uint64_t v36 = swift_initStackObject();
  *(_OWORD *)(v36 + 16) = v86;
  uint64_t v37 = *(void **)&v31[v34];
  *(void *)(v36 + 32) = v37;
  *(void *)(v36 + 40) = 0xD000000000000012;
  *(void *)(v36 + 48) = 0x80000001004DEDC0;
  *(unsigned char *)(v36 + 56) = 0;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for DeprecatedBinding();
  swift_allocObject();
  id v38 = v37;
  DeprecatedBinding.init(_:configurationBlock:)();
  uint64_t v39 = &v31[OBJC_IVAR____TtC8Podcasts21PodcastsPlayerAdapter_bindings];
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v39 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  uint64_t v40 = swift_initStackObject();
  *(_OWORD *)(v40 + 16) = v86;
  uint64_t v41 = *(void **)&v31[v34];
  *(void *)(v40 + 32) = v41;
  *(void *)(v40 + 40) = 0xD000000000000012;
  *(void *)(v40 + 48) = 0x80000001004DECC0;
  *(unsigned char *)(v40 + 56) = 0;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_allocObject();
  id v42 = v41;
  DeprecatedBinding.init(_:configurationBlock:)();
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v43 = v31;
  if (*(void *)((*(void *)v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v39 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  if (static Podcasts.isBlueMoonEnabled()())
  {
    id v44 = v84;
    id v45 = v83;
  }
  else
  {
    uint64_t v46 = self;
    id v47 = [v46 defaultCenter];
    char v48 = (void *)IMAVPlayerNotification_PeriodicUpdate;
    uint64_t v49 = self;
    uint64_t v50 = v31;
    id v51 = v48;
    id v52 = [v49 defaultInstance];
    id v53 = [v52 player];

    [v47 addObserver:v50 selector:"periodicUpdate" name:v51 object:v53];
    id v54 = [v46 defaultCenter];
    BOOL v55 = (void *)IMAVPlayerNotification_AutoStopModeDidChange;
    unint64_t v56 = v50;
    id v57 = v55;
    id v58 = [v49 defaultInstance];
    id v59 = [v58 player];

    [v54 addObserver:v56 selector:"autoStopModeDidChange" name:v57 object:v59];
    id v60 = [v46 defaultCenter];
    uint64_t v61 = (void *)IMAVPlayerNotification_CurrentChapterDidChange;
    id v62 = v56;
    id v63 = v61;
    id v64 = [v49 defaultInstance];
    id v65 = [v64 player];

    [v60 addObserver:v62 selector:"currentChapterDidChange" name:v63 object:v65];
    id v66 = [v46 defaultCenter];
    char v67 = (void *)IMAVPlayerNotification_LoadedDurationDidChange;
    unint64_t v68 = v62;
    id v69 = v67;
    id v70 = [v49 defaultInstance];
    id v71 = [v70 player];

    [v66 addObserver:v68 selector:"loadedDurationDidChange" name:v69 object:v71];
    id v72 = [v46 defaultCenter];
    uint64_t v73 = (void *)IMAVPlayerNotification_PlayerVolumeDidChange;
    uint64_t v74 = v68;
    id v75 = v73;
    id v76 = [v49 defaultInstance];
    id v77 = [v76 player];

    [v72 addObserver:v74 selector:"playerVolumeDidChange" name:v75 object:v77];
    id v45 = [v46 defaultCenter];
    uint64_t v78 = v74;
    id v79 = [v49 defaultInstance];
    id v80 = [v79 player];

    id v44 = [v80 player];
    uint64_t v43 = v85;
    [v45 addObserver:v78 selector:"playerRateDidChange" name:AVPlayerRateDidChangeNotification object:v44];
  }
  return v43;
}

unint64_t sub_100051870(uint64_t a1)
{
  return sub_100051C7C(a1, &qword_1005F64A0);
}

void sub_10005187C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v7 = objc_allocWithZone((Class)NSPersistentStoreDescription);
  URL._bridgeToObjectiveC()(v8);
  unint64_t v10 = v9;
  id v11 = [v7 initWithURL:v9];

  [v11 setShouldAddStoreAsynchronously:a4 & 1];
  uint64_t v12 = a2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(a2 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_27;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v22 >= v16) {
      goto LABEL_30;
    }
    unint64_t v23 = *(void *)(v12 + 8 * v22);
    ++v17;
    if (!v23)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_30;
      }
      unint64_t v23 = *(void *)(v12 + 8 * v17);
      if (!v23)
      {
        int64_t v17 = v22 + 2;
        if (v22 + 2 >= v16) {
          goto LABEL_30;
        }
        unint64_t v23 = *(void *)(v12 + 8 * v17);
        if (!v23)
        {
          int64_t v17 = v22 + 3;
          if (v22 + 3 >= v16) {
            goto LABEL_30;
          }
          unint64_t v23 = *(void *)(v12 + 8 * v17);
          if (!v23)
          {
            int64_t v17 = v22 + 4;
            if (v22 + 4 >= v16) {
              goto LABEL_30;
            }
            unint64_t v23 = *(void *)(v12 + 8 * v17);
            if (!v23) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v15 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_27:
    id v25 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v21);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    id v18 = *(id *)(a2 + 16);
    swift_bridgeObjectRetain();
    if (v18)
    {
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_100051E78(v27, v26);
      if (v29) {
        id v18 = *(id *)(*(void *)(a2 + 56) + 8 * v28);
      }
      else {
        id v18 = 0;
      }
      swift_bridgeObjectRelease();
    }
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 setOption:v18 forKey:v19];
  }
  int64_t v24 = v22 + 5;
  if (v24 >= v16)
  {
LABEL_30:
    swift_release();
    uint64_t v30 = a3 + 64;
    uint64_t v31 = 1 << *(unsigned char *)(a3 + 32);
    uint64_t v32 = -1;
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    unint64_t v33 = v32 & *(void *)(a3 + 64);
    int64_t v34 = (unint64_t)(v31 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v35 = 0;
    while (1)
    {
      if (v33)
      {
        unint64_t v38 = __clz(__rbit64(v33));
        v33 &= v33 - 1;
        unint64_t v39 = v38 | (v35 << 6);
      }
      else
      {
        int64_t v40 = v35 + 1;
        if (__OFADD__(v35, 1)) {
          goto LABEL_61;
        }
        if (v40 >= v34)
        {
LABEL_59:
          swift_release();
          return;
        }
        unint64_t v41 = *(void *)(v30 + 8 * v40);
        ++v35;
        if (!v41)
        {
          int64_t v35 = v40 + 1;
          if (v40 + 1 >= v34) {
            goto LABEL_59;
          }
          unint64_t v41 = *(void *)(v30 + 8 * v35);
          if (!v41)
          {
            int64_t v35 = v40 + 2;
            if (v40 + 2 >= v34) {
              goto LABEL_59;
            }
            unint64_t v41 = *(void *)(v30 + 8 * v35);
            if (!v41)
            {
              int64_t v35 = v40 + 3;
              if (v40 + 3 >= v34) {
                goto LABEL_59;
              }
              unint64_t v41 = *(void *)(v30 + 8 * v35);
              if (!v41)
              {
                int64_t v35 = v40 + 4;
                if (v40 + 4 >= v34) {
                  goto LABEL_59;
                }
                unint64_t v41 = *(void *)(v30 + 8 * v35);
                if (!v41)
                {
                  int64_t v42 = v40 + 5;
                  if (v42 >= v34) {
                    goto LABEL_59;
                  }
                  unint64_t v41 = *(void *)(v30 + 8 * v42);
                  if (!v41)
                  {
                    while (1)
                    {
                      int64_t v35 = v42 + 1;
                      if (__OFADD__(v42, 1)) {
                        goto LABEL_63;
                      }
                      if (v35 >= v34) {
                        goto LABEL_59;
                      }
                      unint64_t v41 = *(void *)(v30 + 8 * v35);
                      ++v42;
                      if (v41) {
                        goto LABEL_55;
                      }
                    }
                  }
                  int64_t v35 = v42;
                }
              }
            }
          }
        }
LABEL_55:
        unint64_t v33 = (v41 - 1) & v41;
        unint64_t v39 = __clz(__rbit64(v41)) + (v35 << 6);
      }
      uint64_t v43 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v39);
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      id v36 = *(id *)(a3 + 16);
      swift_bridgeObjectRetain();
      if (v36)
      {
        swift_bridgeObjectRetain();
        unint64_t v46 = sub_100051E78(v45, v44);
        if (v47) {
          id v36 = *(id *)(*(void *)(a3 + 56) + 8 * v46);
        }
        else {
          id v36 = 0;
        }
        swift_bridgeObjectRelease();
      }
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v11 setValue:v36 forPragmaNamed:v37];
    }
  }
  unint64_t v23 = *(void *)(v12 + 8 * v24);
  if (v23)
  {
    int64_t v17 = v24;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v17 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v17 >= v16) {
      goto LABEL_30;
    }
    unint64_t v23 = *(void *)(v12 + 8 * v17);
    ++v24;
    if (v23) {
      goto LABEL_26;
    }
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
}

unint64_t sub_100051C7C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    id v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_100051E78(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100051D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100051E78(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100051D94(a1, a2, v4);
}

void sub_100052650(_Unwind_Exception *a1)
{
}

int64_t sub_100052E54(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  Swift::Int v4 = a3;
  uint64_t v5 = [(MTPodcastPlaylistSettings *)a2 podcast];
  id v6 = [v5 sortOrder];

  uint64_t v7 = [(MTPodcastPlaylistSettings *)v4 podcast];

  id v8 = [v7 sortOrder];
  if ((uint64_t)v6 > (uint64_t)v8) {
    return -1;
  }
  else {
    return (uint64_t)v6 < (uint64_t)v8;
  }
}

uint64_t sub_1000533CC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100054B78((uint64_t *)&unk_1005F7770);
  __chkstk_darwin(v6 - 8);
  id v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100054B78((uint64_t *)&unk_1005FEA40);
  __chkstk_darwin(v9 - 8);
  BOOL v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  EpisodeListSettings.listType.getter();
  uint64_t v12 = EpisodeListType.stationUUID.getter();
  uint64_t v14 = v13;
  sub_1000536CC((uint64_t)v21, (void (*)(void, void, void, void, void, void, void, void, char))sub_100053720);
  if (!v14)
  {
    type metadata accessor for Episode();
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    id v19 = a1;
    EpisodeListSettings.listType.getter();
    char v20 = EpisodeListType.wantsListenNowReason.getter();
    sub_1000536CC((uint64_t)v22, (void (*)(void, void, void, void, void, void, void, void, char))sub_100053720);
    uint64_t result = Episode.init(from:clickAction:wantsListenNowReason:)(v19, (uint64_t)&v23, v20 & 1);
    if (result) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v18 = 0;
    goto LABEL_6;
  }
  type metadata accessor for StationEpisode();
  uint64_t result = (uint64_t)sub_1002E2390(a1, v12, v14);
  if (!result) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v16 = type metadata accessor for EpisodeListSettings();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v11, a2, v16);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
  swift_retain();
  EpisodeListSettings.sectionContext.getter();
  static MetricsDataConfiguration.default.getter();
  uint64_t v18 = dispatch thunk of Episode.defaultLockup(for:sectionContext:configuration:)();
  sub_100053820((uint64_t)&v23, (uint64_t)v28, (uint64_t *)&unk_1005F76D0);
  sub_100053884((uint64_t)v28);
  uint64_t v27 = v24;
  sub_1000537F4((uint64_t)&v27);
  uint64_t v26 = *((void *)&v24 + 1);
  sub_1000537F4((uint64_t)&v26);
  sub_1000536BC(v25);
  swift_release();
  sub_100054B1C((uint64_t)v8, (uint64_t *)&unk_1005F7770);
  sub_100054B1C((uint64_t)v11, (uint64_t *)&unk_1005FEA40);
  uint64_t result = swift_release();
LABEL_6:
  *a3 = v18;
  return result;
}

uint64_t sub_1000536BC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000536CC(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 64);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v4);
  return a1;
}

void sub_100053720(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 8:
      goto LABEL_2;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      break;
    case 7:
      swift_bridgeObjectRelease();
      sub_1001A5A58(a3, a4);
      break;
    default:
      return;
  }
}

uint64_t sub_1000537F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053820(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100054B78(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100053884(uint64_t a1)
{
  return a1;
}

void sub_100053C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t Episode.init(from:clickAction:wantsListenNowReason:)(void *a1, uint64_t a2, BOOL a3)
{
  uint64_t v4 = v3;
  uint64_t v154 = a2;
  uint64_t v7 = sub_100054B78((uint64_t *)&unk_1005FE890);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = &v110[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v110[-v11];
  uint64_t v13 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = &v110[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v151 = &v110[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = &v110[-v20];
  __chkstk_darwin(v19);
  uint64_t v152 = &v110[-v22];
  uint64_t v23 = sub_100054B78(&qword_1005F5D20);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v150 = &v110[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  uint64_t v27 = &v110[-v26];
  uint64_t v28 = sub_100054B78(&qword_1005F76A0);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  long long v149 = &v110[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = __chkstk_darwin(v29);
  unint64_t v33 = &v110[-v32];
  uint64_t v34 = __chkstk_darwin(v31);
  objc_super v148 = &v110[-v35];
  __chkstk_darwin(v34);
  uint64_t v153 = &v110[-v36];
  id v37 = [a1 uuid];
  if (!v37)
  {

LABEL_10:
    sub_100054B1C(v154, (uint64_t *)&unk_1005F89E0);
    return 0;
  }
  unint64_t v38 = v37;
  uint64_t v146 = v16;
  uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  id v41 = [a1 podcast];
  if (!v41)
  {

LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  int64_t v42 = v41;
  uint64_t v147 = v27;
  id v43 = [a1 podcastUuid];
  if (!v43)
  {

    goto LABEL_9;
  }
  uint64_t v44 = v43;
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v139 = v46;
  uint64_t v140 = v45;

  uint64_t v138 = MTEpisode.contentId.getter();
  LODWORD(v123) = v47;
  id v48 = [a1 bestTitle];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v136 = v51;
    uint64_t v137 = v50;
  }
  else
  {
    unint64_t v136 = 0xE000000000000000;
    uint64_t v137 = 0;
  }
  id v53 = [a1 numberedTitle];
  if (v53)
  {
    id v54 = v53;
    uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v134 = v55;
  }
  else
  {
    uint64_t v135 = 0;
    unint64_t v134 = 0xE000000000000000;
  }
  id v56 = [a1 podcast];
  uint64_t v142 = v40;
  BOOL v141 = a3;
  if (v56)
  {
    id v57 = v56;
    MTPodcast.artworkModel.getter();
  }
  else
  {
    uint64_t v58 = type metadata accessor for ArtworkModel();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v153, 1, 1, v58);
  }
  unint64_t v143 = v10;
  uint64_t v144 = v4;
  id v59 = [a1 bestSummary];
  id v60 = v42;
  if (v59)
  {
    uint64_t v61 = v59;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v62 = (objc_class *)type metadata accessor for LanguageAwareString();
    static LanguageAwareString.alwaysGenerateAttributedString.getter();
    id v63 = objc_allocWithZone(v62);
    uint64_t v133 = LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)();
  }
  else
  {
    uint64_t v133 = 0;
  }
  uint64_t v64 = (uint64_t)v147;
  [a1 pubDate];
  if (v65 <= 0.0)
  {
    uint64_t v67 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v64, 1, 1, v67);
  }
  else
  {
    [a1 pubDate];
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v66 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v64, 0, 1, v66);
  }
  id v68 = [a1 assetURL];
  if (v68)
  {
    id v69 = v68;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v70 = type metadata accessor for URL();
    uint64_t v71 = *(void *)(v70 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v71 + 48))(v21, 1, v70) != 1)
    {
      uint64_t v73 = v152;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v71 + 32))(v152, v21, v70);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v71 + 56))(v73, 0, 1, v70);
      int64_t v42 = v60;
      goto LABEL_29;
    }
    sub_100054B1C((uint64_t)v21, (uint64_t *)&unk_1005F7750);
    int64_t v42 = v60;
  }
  uint64_t v72 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v152, 1, 1, v72);
LABEL_29:
  unsigned __int8 v74 = [a1 isVideo];
  BOOL v75 = v141;
  if (v74)
  {
    int v76 = 1;
  }
  else if ([a1 isExternalType])
  {
    int v76 = 2;
  }
  else
  {
    int v76 = 0;
  }
  int v132 = v76;
  unsigned int v131 = [a1 isExplicit];
  [a1 duration];
  id v130 = [a1 episodeNumber];
  id v129 = [a1 seasonNumber];
  id v77 = [a1 podcast];
  if (v77)
  {
    uint64_t v78 = v77;
    unsigned int v128 = [v77 isSerialShowTypeInFeed];
  }
  else
  {
    unsigned int v128 = 0;
  }
  id v79 = [v42 title];
  if (v79)
  {
    id v80 = v79;
    uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v126 = v81;
  }
  else
  {
    uint64_t v127 = 0;
    uint64_t v126 = 0;
  }
  id v125 = [a1 entitlementState];
  id v82 = [a1 podcast];
  if (v82
    && (id v83 = v82, v84 = [v82 channel], v83, v84)
    && (id v85 = [v84 subscriptionName], v84, v85))
  {
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v117 = v86;
  }
  else
  {
    uint64_t v118 = 0;
    uint64_t v117 = 0;
  }
  id v87 = [a1 podcast];
  if (v87
    && (objc_super v88 = v87, v89 = [v87 channel], v88, v89)
    && (id v90 = [v89 name], v89, v90))
  {
    uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v115 = v91;
  }
  else
  {
    uint64_t v116 = 0;
    uint64_t v115 = 0;
  }
  id v92 = [a1 podcast];
  if (v92 && (unint64_t v93 = v92, v94 = [v92 title], v93, v94))
  {
    uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v113 = v95;
  }
  else
  {
    uint64_t v114 = 0;
    uint64_t v113 = 0;
  }
  id v96 = [v42 displayType];
  if (v96)
  {
    uint64_t v97 = v96;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  int v98 = DisplayType.init(rawValue:)();
  id v99 = [a1 podcast];
  int v124 = v98;
  if (v99
    && (uint64_t v100 = v99, v101 = [v99 channel], v100, v101))
  {
    [v101 storeId];

    uint64_t v112 = AdamID.init(rawValue:)();
    int v111 = 0;
  }
  else
  {
    uint64_t v112 = 0;
    int v111 = 1;
  }
  char v102 = v123;
  id v103 = [a1 podcast];
  id v104 = v103;
  if (v103)
  {
    [v103 storeCollectionId];

    uint64_t v123 = AdamID.init(rawValue:)();
  }
  else
  {
    uint64_t v123 = 0;
  }
  uint64_t v105 = (uint64_t)v146;
  LODWORD(v146) = v102 & 1;
  if ([a1 isTrailer]) {
    unsigned int v106 = 2;
  }
  else {
    unsigned int v106 = [a1 isBonus] ^ 1;
  }
  unsigned int v122 = v106;
  if (v75)
  {
    MTEpisode.listenNowReason.getter((uint64_t)v12);
  }
  else
  {
    uint64_t v107 = type metadata accessor for EpisodeListenNowReason();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v12, 1, 1, v107);
  }
  uint64_t v120 = v12;
  BOOL v141 = v104 == 0;
  id v119 = [a1 storeTrackId];
  sub_100054BBC((uint64_t)v153, (uint64_t)v148, &qword_1005F76A0);
  MTPodcast.uberBackgroundArtworkModel.getter();
  unint64_t v121 = v33;
  MTEpisode.artworkModel.getter();
  sub_100054BBC((uint64_t)v147, (uint64_t)v150, &qword_1005F5D20);
  uint64_t v108 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v151, 1, 1, v108);
  sub_100054BBC((uint64_t)v152, v105, (uint64_t *)&unk_1005F7750);
  [v42 showTypeSetting];
  sub_100054BBC((uint64_t)v12, (uint64_t)v143, (uint64_t *)&unk_1005FE890);
  [a1 hasFreeVersion];
  [a1 upNextScore];
  uint64_t v52 = dispatch thunk of Episode.__allocating_init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:adamId:channelAdamId:channelName:artwork:showUberArtwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showDisplayType:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)();

  sub_100054B1C(v154, (uint64_t *)&unk_1005F89E0);
  sub_100054B1C((uint64_t)v120, (uint64_t *)&unk_1005FE890);
  sub_100054B1C((uint64_t)v152, (uint64_t *)&unk_1005F7750);
  sub_100054B1C((uint64_t)v147, &qword_1005F5D20);
  sub_100054B1C((uint64_t)v153, &qword_1005F76A0);
  return v52;
}

uint64_t sub_100054B1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100054B78(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100054B78(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100054BBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100054B78(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL sub_100054C20()
{
  if (+[MTApplication localLibraryUpdatesDisabled]
    || (+[PFClientUtil isRunningOnHomepod] & 1) != 0)
  {
    return 1;
  }
  if (qword_10060A8A0 != -1) {
    dispatch_once(&qword_10060A8A0, &stru_100552010);
  }
  return byte_10060A8A8 != 0;
}

void MTEpisode.listenNowReason.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([v2 listenNowEpisode])
  {
    id v8 = [v2 podcast];
    if (v8)
    {
      uint64_t v9 = v8;
      if ([v2 isVisuallyPlayed])
      {

        uint64_t v10 = (unsigned int *)&enum case for EpisodeListenNowReason.playAgain(_:);
LABEL_10:
        uint64_t v16 = *v10;
        uint64_t v17 = type metadata accessor for EpisodeListenNowReason();
        uint64_t v42 = *(void *)(v17 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 104))(a1, v16, v17);
        uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
        uint64_t v14 = a1;
        uint64_t v15 = 0;
        uint64_t v13 = v17;
        goto LABEL_11;
      }
      if (([v2 isPartiallyPlayed] & 1) != 0
        || ([v2 isPartiallyPlayedBackCatalogItem] & 1) != 0
        || [v2 isPlayheadPartiallyPlayed])
      {

        uint64_t v10 = (unsigned int *)&enum case for EpisodeListenNowReason.resume(_:);
        goto LABEL_10;
      }
      Date.init()();
      Date.timeIntervalSinceReferenceDate.getter();
      double v19 = v18;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (([v9 subscribed] & 1) != 0
        || ![v2 isBookmarked]
        || ([v2 lastBookmarkedDate], double v21 = v20, objc_msgSend(v9, "lastDatePlayed"), v22 >= v21))
      {
        [v9 lastDatePlayed];
        if (v23 > 0.0)
        {
          if ([v2 episodeLevel])
          {
          }
          else
          {
            [v2 pubDate];
            double v35 = v34;

            if (v19 < v35 + 5184000.0)
            {
              uint64_t v36 = (unsigned int *)&enum case for EpisodeListenNowReason.new(_:);
LABEL_29:
              uint64_t v37 = *v36;
              uint64_t v38 = type metadata accessor for EpisodeListenNowReason();
              uint64_t v39 = *(void *)(v38 - 8);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 104))(a1, v37, v38);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(a1, 0, 1, v38);
              return;
            }
          }
          uint64_t v36 = (unsigned int *)&enum case for EpisodeListenNowReason.next(_:);
          goto LABEL_29;
        }
        if ([v9 subscribed])
        {
          [v9 addedDate];
          double v25 = v24;

          uint64_t v26 = type metadata accessor for EpisodeListenNowReason();
          uint64_t v27 = *(void *)(v26 - 8);
          uint64_t v28 = *(void (**)(uint64_t, void, uint64_t))(v27 + 104);
          uint64_t v29 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56);
          if (v19 >= v25 + 5184000.0) {
            uint64_t v30 = (unsigned int *)&enum case for EpisodeListenNowReason.followed(_:);
          }
          else {
            uint64_t v30 = (unsigned int *)&enum case for EpisodeListenNowReason.recentlyFollowed(_:);
          }
LABEL_32:
          v28(a1, *v30, v26);
          (*v29)(a1, 0, 1, v26);
          return;
        }
        if (![v2 isBookmarked])
        {
          uint64_t v40 = type metadata accessor for EpisodeListenNowReason();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(a1, 1, 1, v40);

          return;
        }
      }
      [v2 lastBookmarkedDate];
      double v32 = v31;

      uint64_t v26 = type metadata accessor for EpisodeListenNowReason();
      uint64_t v33 = *(void *)(v26 - 8);
      uint64_t v28 = *(void (**)(uint64_t, void, uint64_t))(v33 + 104);
      uint64_t v29 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56);
      if (v19 >= v32 + 5184000.0) {
        uint64_t v30 = (unsigned int *)&enum case for EpisodeListenNowReason.saved(_:);
      }
      else {
        uint64_t v30 = (unsigned int *)&enum case for EpisodeListenNowReason.recentlySaved(_:);
      }
      goto LABEL_32;
    }
  }
  uint64_t v11 = type metadata accessor for EpisodeListenNowReason();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  uint64_t v13 = v11;
  uint64_t v14 = a1;
  uint64_t v15 = 1;
LABEL_11:

  v12(v14, v15, 1, v13);
}

uint64_t sub_1000552AC@<X0>(uint64_t *a1@<X3>, unint64_t *a2@<X4>, unsigned char *a3@<X8>)
{
  sub_100054B78(a1);
  sub_100044200(a2, a1);
  uint64_t result = Collection.isNotEmpty.getter();
  *a3 = result & 1;
  return result;
}

void *sub_100055330(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v7 = v6;
        unint64_t v8 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_15;
        }
        id v9 = [v6 integerForEpisodesToShow];
        if (v9 == [a2 integerForEpisodesToShow])
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        ++v4;
        if (v8 == v3) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v4 < *(void *)(v5 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v6 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10005553C(char a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a8;
  uint64_t v49 = a7;
  uint64_t v48 = a6;
  uint64_t v47 = a3;
  int v46 = a2;
  uint64_t v52 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v55 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  unint64_t v51 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  double v18 = &v45[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v64 = &type metadata for PodcastsDownloader;
  double v65 = &off_100555110;
  LOBYTE(v63[0]) = a1;
  sub_100056D54((uint64_t)v63, (uint64_t)aBlock);
  uint64_t v19 = sub_100055EF0((uint64_t)aBlock, (uint64_t)v57);
  __chkstk_darwin(v19);
  double v21 = &v45[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *))(v22 + 16))(v21);
  char v23 = *v21;
  uint64_t v61 = &type metadata for PodcastsDownloader;
  id v62 = &off_100555110;
  LOBYTE(v60[0]) = v23;
  double v24 = (char *)objc_allocWithZone((Class)type metadata accessor for AssetsDownloader());
  uint64_t v25 = sub_100055EF0((uint64_t)v60, (uint64_t)v61);
  __chkstk_darwin(v25);
  uint64_t v27 = &v45[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *))(v28 + 16))(v27);
  uint64_t v29 = (char *)sub_100055C88(*v27, v24);
  sub_10004D2D8((uint64_t)v60);
  sub_10004D2D8((uint64_t)aBlock);
  uint64_t v30 = (char *)sub_100041A98(v63, (uint64_t)v64);
  id v31 = sub_10005693C(0, *v30);
  id v32 = [self sessionWithConfiguration:v31 delegate:v29 delegateQueue:0];

  uint64_t v33 = *(void **)&v29[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_urlSession];
  *(void *)&v29[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_urlSession] = v32;
  id v34 = v32;

  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  (*(void (**)(unsigned char *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchQoS.QoSClass.default(_:), v15);
  double v35 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v34;
  *(unsigned char *)(v36 + 24) = v46;
  uint64_t v37 = v47;
  *(void *)(v36 + 32) = v29;
  *(void *)(v36 + 40) = v37;
  *(void *)(v36 + 48) = a4;
  *(void *)(v36 + 56) = a5;
  uint64_t v38 = v49;
  *(void *)(v36 + 64) = v48;
  *(void *)(v36 + 72) = v38;
  *(void *)(v36 + 80) = v50;
  uint64_t v58 = sub_10005CAA0;
  uint64_t v59 = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003B424;
  id v57 = &unk_1005685C8;
  uint64_t v39 = _Block_copy(aBlock);
  id v40 = v34;
  uint64_t v41 = v29;
  swift_retain();
  sub_10004ACDC(a5);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v60[0] = _swiftEmptyArrayStorage;
  sub_100055C40((unint64_t *)&qword_1005FA630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100054B78((uint64_t *)&unk_1005FE4B0);
  sub_10005666C((unint64_t *)&qword_1005FA640, (uint64_t *)&unk_1005FE4B0);
  id v43 = v51;
  uint64_t v42 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v39);

  (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v43, v42);
  (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v14, v54);
  swift_release();
  return sub_10004D2D8((uint64_t)v63);
}

uint64_t sub_100055B68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100055BB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100055BF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100055C40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100055C88(char a1, char *a2)
{
  uint64_t v29 = &type metadata for PodcastsDownloader;
  uint64_t v30 = &off_100555110;
  v28[0] = a1;
  *(void *)&a2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_urlSession] = 0;
  uint64_t v3 = &a2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_backgroundCompletionHandler];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  unint64_t v4 = &a2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_statusUpdateHandler];
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  sub_100056D54((uint64_t)v28, (uint64_t)&a2[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_config]);
  sub_100056D54((uint64_t)v28, (uint64_t)v26);
  uint64_t v5 = sub_100055EF0((uint64_t)v26, v27);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  char v9 = *v7;
  double v24 = &type metadata for PodcastsDownloader;
  uint64_t v25 = &off_100555110;
  v23[0] = v9;
  uint64_t v10 = (char *)objc_allocWithZone((Class)type metadata accessor for FairPlayAssetsDownloader());
  uint64_t v11 = sub_100055EF0((uint64_t)v23, (uint64_t)v24);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned char *))(v14 + 16))(v13);
  LOBYTE(v7) = *v13;
  uint64_t v15 = a2;
  uint64_t v16 = sub_100055F88((char)v7, v10);
  sub_10004D2D8((uint64_t)v23);
  sub_10004D2D8((uint64_t)v26);
  uint64_t v17 = (char **)&v15[OBJC_IVAR____TtC8Podcasts16AssetsDownloader_fairPlayAssetsDownloader];
  *uint64_t v17 = v16;
  v17[1] = (char *)&off_10055CC80;

  double v18 = (objc_class *)type metadata accessor for AssetsDownloader();
  v22.receiver = v15;
  v22.super_class = v18;
  [super init];
  sub_10004D2D8((uint64_t)v28);
  return v19;
}

uint64_t sub_100055EF0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t type metadata accessor for AssetsDownloader()
{
  return self;
}

uint64_t type metadata accessor for FairPlayAssetsDownloader()
{
  return self;
}

char *sub_100055F88(char a1, char *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  double v35 = &type metadata for PodcastsDownloader;
  uint64_t v36 = &off_100555110;
  v34[0] = a1;
  char v9 = &a2[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_statusUpdateHandler];
  *(void *)char v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v10 = &a2[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_backgroundCompletionHandler];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  uint64_t v11 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_urlProtocolDelegate;
  id v12 = objc_allocWithZone((Class)type metadata accessor for UIStoreResponseDelegate());
  uint64_t v13 = a2;
  *(void *)&a2[v11] = [v12 init];
  uint64_t v14 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_fairPlayDownloadsObserver;
  type metadata accessor for FairPlayDownloadsObserver();
  swift_allocObject();
  *(void *)&v13[v14] = sub_10005640C();
  uint64_t v15 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_sessionLock;
  sub_100054B78(&qword_1006080B0);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = 0;
  *(void *)&v13[v15] = v16;
  uint64_t v17 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_taskToKeyAdamIDMap;
  sub_100054B78(&qword_1006080B8);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  *(void *)(v18 + 16) = &_swiftEmptyDictionarySingleton;
  *(void *)&v13[v17] = v18;
  uint64_t v19 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_taskToKeyLoaderMap;
  sub_100054B78(&qword_1006080C0);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 24) = 0;
  *(void *)(v20 + 16) = &_swiftEmptyDictionarySingleton;
  *(void *)&v13[v19] = v20;
  uint64_t v21 = OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_internalQueue;
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static DispatchQoS.userInteractive.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_100055C40((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_10005666C((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v30);
  *(void *)&v13[v21] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v13[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___sessionDelegateQueue] = 0;
  objc_super v22 = &v13[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader____lazy_storage___logPrefix];
  *(void *)objc_super v22 = 0;
  *((void *)v22 + 1) = 0;
  *(void *)&v13[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader__session] = 0;
  sub_100056D54((uint64_t)v34, (uint64_t)&v13[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_config]);
  type metadata accessor for FairPlayKeyLoader();
  char v23 = (void *)FairPlayKeyLoader.__allocating_init()();
  id v24 = *(id *)&v13[v21];
  uint64_t v25 = FairPlayKeyLoading.receive(on:)();

  *(void *)&v13[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_fairPlayKeyLoader] = v25;
  v32.receiver = v13;
  v32.super_class = ObjectType;
  uint64_t v26 = (char *)objc_msgSendSuper2(&v32, "init");
  sub_10004D2D8((uint64_t)v34);
  *(void *)(*(void *)&v26[OBJC_IVAR____TtC8Podcasts24FairPlayAssetsDownloader_fairPlayDownloadsObserver] + 24) = &off_10055CC20;
  swift_unknownObjectWeakAssign();
  return v26;
}

uint64_t type metadata accessor for FairPlayDownloadsObserver()
{
  return self;
}

void *sub_10005640C()
{
  v7[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v7[0] - 8);
  __chkstk_darwin(v7[0]);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  v0[3] = 0;
  swift_unknownObjectWeakInit();
  v0[4] = sub_1000566FC((uint64_t)_swiftEmptyArrayStorage);
  sub_1000566BC();
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_10004AD7C((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_10005666C((unint64_t *)&qword_1005F5BF0, (uint64_t *)&unk_1005F7A60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7[0]);
  v0[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t sub_10005666C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100044244(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000566BC()
{
  unint64_t result = qword_1005F8B70;
  if (!qword_1005F8B70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005F8B70);
  }
  return result;
}

unint64_t sub_1000566FC(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005F6538);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6540);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100054BBC(v12, (uint64_t)v5, &qword_1005F6538);
    uint64_t v14 = *v5;
    unint64_t result = sub_100226F74(*v5);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v7[6] + 8 * result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = type metadata accessor for FairPlayDownloadsObserver.DownloadState();
    unint64_t result = sub_100172F6C(v9, v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, (uint64_t (*)(void))type metadata accessor for FairPlayDownloadsObserver.DownloadState);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    void v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t destroy for DownloaderConfiguration(uint64_t a1)
{
  sub_10004D2D8(a1);
  sub_10004D2D8(a1 + 40);
  sub_10004D2D8(a1 + 80);

  return sub_10004D2D8(a1 + 120);
}

id sub_10005693C(char a1, char a2)
{
  unint64_t v2 = 0xD000000000000033;
  unint64_t v3 = 0x80000001004D1B10;
  switch(a2)
  {
    case 1:
      uint64_t v5 = "com.apple.podcasts.downloads.episodes.restore";
      goto LABEL_4;
    case 2:
      uint64_t v5 = "com.apple.podcasts.downloads.episodes.headers";
LABEL_4:
      unint64_t v3 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD00000000000002DLL;
      break;
    case 3:
      unint64_t v2 = 0xD00000000000002FLL;
      unint64_t v3 = 0x80000001004D1BB0;
      break;
    default:
      break;
  }
  if (a1) {
    uint64_t v6 = 1936484398;
  }
  else {
    uint64_t v6 = 0x7261646E6174732ELL;
  }
  if (a1) {
    uint64_t v7 = (void *)0xE400000000000000;
  }
  else {
    uint64_t v7 = (void *)0xE900000000000064;
  }
  unint64_t v21 = v2;
  unint64_t v22 = v3;
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  switch(a2)
  {
    case 1:
      unint64_t v17 = self;
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v19 = [v17 backgroundSessionConfigurationWithIdentifier:v18, v21, v22];

      id v12 = v19;
      [v12 setHTTPCookieAcceptPolicy:1];
      [v12 setHTTPShouldSetCookies:0];
      [v12 setAllowsCellularAccess:0];
      goto LABEL_17;
    case 2:
      swift_bridgeObjectRelease();
      id v12 = [self ephemeralSessionConfiguration:v21, v3];
      [v12 setHTTPCookieAcceptPolicy:1];
      [v12 setHTTPShouldSetCookies:0];
      uint64_t v13 = &selRef_setWaitsForConnectivity_;
      break;
    case 3:
      uint64_t v14 = self;
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v16 = [v14 backgroundSessionConfigurationWithIdentifier:v15, v21, v22];

      id v12 = v16;
      [v12 setHTTPCookieAcceptPolicy:1];
      [v12 setHTTPShouldSetCookies:0];
LABEL_17:
      uint64_t v13 = &selRef_set_allowsConstrainedNetworkAccess_;
      break;
    default:
      uint64_t v9 = self;
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v11 = [v9 backgroundSessionConfigurationWithIdentifier:v10, v21, v22];

      id v12 = v11;
      [v12 setHTTPCookieAcceptPolicy:1];
      uint64_t v13 = &selRef_setHTTPShouldSetCookies_;
      break;
  }
  [v12 *v13];

  return v12;
}

uint64_t sub_100056C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_100056D54(a1, a5);
  sub_100056D54(a2, a5 + 40);
  sub_100056D54(a3, a5 + 80);
  sub_100056D54(a4, a5 + 120);
  sub_100056D54(a1, (uint64_t)&v11);
  sub_100056D54(a2, (uint64_t)&v12);
  sub_100056D54(a3, (uint64_t)&v13);
  sub_100056D54(a4, (uint64_t)&v14);
  sub_100054B78(&qword_1005F6828);
  swift_arrayDestroy();
  sub_10004D2D8(a4);
  sub_10004D2D8(a3);
  sub_10004D2D8(a2);
  return sub_10004D2D8(a1);
}

uint64_t sub_100056D54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unsigned char *initializeBufferWithCopyOfBuffer for SessionConfigFlavor(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t sub_100056E40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056E50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056E60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056E70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056E80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056E90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056EA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056EB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056EC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056ED0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056EE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056EF0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

id sub_100056F00(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_100056F2C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056F3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056F4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056F5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056F6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056F7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056F8C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056F9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056FAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056FBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056FCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056FDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056FEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100056FFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005700C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005701C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005702C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005703C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005704C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005705C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005706C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005707C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005708C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005709C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000570AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000570BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000570CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000570DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000570EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000570FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005710C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005711C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005712C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005713C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10005714C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

id sub_10005715C(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_100057188(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100057198(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000571A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000571B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000571C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000571D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000571E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000571F8(uint64_t a1)
{
}

void sub_100057200(uint64_t a1)
{
}

void sub_100057208(uint64_t a1)
{
}

void sub_100057210(uint64_t a1)
{
}

void sub_100057218(uint64_t a1)
{
}

void sub_100057220(uint64_t a1)
{
}

void sub_100057228(uint64_t a1)
{
}

void sub_100057230(uint64_t a1)
{
}

void sub_100057238(uint64_t a1)
{
}

void sub_100057240(uint64_t a1)
{
}

void sub_100057248(uint64_t a1)
{
}

void sub_100057250(uint64_t a1)
{
}

void sub_100057258(uint64_t a1)
{
}

void sub_100057260(uint64_t a1)
{
}

void sub_100057268(uint64_t a1)
{
}

void sub_100057270(uint64_t a1)
{
}

void sub_100057278(uint64_t a1)
{
}

void sub_100057280(uint64_t a1)
{
}

void sub_100057288(uint64_t a1)
{
}

void sub_100057290(uint64_t a1)
{
}

void sub_100057298(uint64_t a1)
{
}

void sub_1000572A0(uint64_t a1)
{
}

void sub_1000572A8(uint64_t a1)
{
}

void sub_1000572B0(uint64_t a1)
{
}

void sub_1000572B8(uint64_t a1)
{
}

void sub_1000572C0(uint64_t a1)
{
}

void sub_1000572C8(uint64_t a1)
{
}

void sub_1000572D0(uint64_t a1)
{
}

void sub_1000572D8(uint64_t a1)
{
}

void sub_1000572E0(uint64_t a1)
{
}

void sub_1000572E8(uint64_t a1)
{
}

void sub_1000572F0(uint64_t a1)
{
}

void sub_1000572F8(uint64_t a1)
{
}

void sub_100057300(uint64_t a1)
{
}

void sub_100057308(uint64_t a1)
{
}

void sub_100057310(uint64_t a1)
{
}

void sub_100057318(uint64_t a1)
{
}

void sub_100057320(uint64_t a1)
{
}

void sub_100057328(uint64_t a1)
{
}

void sub_100057330(uint64_t a1)
{
}

void sub_100057338(uint64_t a1)
{
}

void sub_100057340(uint64_t a1)
{
}

void sub_100057348(uint64_t a1)
{
}

void sub_100057350(uint64_t a1)
{
}

void sub_100057358(uint64_t a1)
{
}

void sub_100057360(uint64_t a1)
{
}

void sub_100057368(uint64_t a1)
{
}

void sub_100057370(uint64_t a1)
{
}

void sub_100057378(uint64_t a1)
{
}

void sub_100057380(uint64_t a1)
{
}

void sub_100057388(uint64_t a1)
{
}

void sub_100057390(uint64_t a1)
{
}

void sub_100057398(uint64_t a1)
{
}

void sub_1000573A0(uint64_t a1)
{
}

void sub_1000573A8(uint64_t a1)
{
}

void sub_1000573B0(uint64_t a1)
{
}

uint64_t sub_1000573B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000573C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000573D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000573E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000573F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057408(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057418(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057428(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057448(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057458(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057478(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057488(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057498(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000574A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000574B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000574C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000574D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000574E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000574F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057508(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057518(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057528(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057538(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057548(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057558(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057568(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057578(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057588(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057598(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000575A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000575B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000575C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000575D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000575E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000575F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057608(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057618(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057628(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057638(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057648(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057658(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057668(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057678(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057688(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057698(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000576A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000576B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000576C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000576D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000576E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000576F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057708(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057718(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057728(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057738(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057748(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057758(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057768(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057778(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057788(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057798(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000577A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000577B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000577C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000577D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000577E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000577F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057808(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057818(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057828(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057838(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057848(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057858(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057868(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057878(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057888(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057898(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000578A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000578B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000578C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000578D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000578E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000578F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057918(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057928(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057938(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057948(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057958(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057968(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057978(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057988(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057998(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000579A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000579B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000579C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000579D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000579E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000579F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057B08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057B18()
{
  return swift_release();
}

uint64_t sub_100057B20()
{
  return swift_release();
}

uint64_t sub_100057B28()
{
  return swift_release();
}

uint64_t sub_100057B30()
{
  return swift_release();
}

uint64_t sub_100057B38()
{
  return swift_release();
}

uint64_t sub_100057B40()
{
  return swift_release();
}

uint64_t sub_100057B48()
{
  return swift_release();
}

uint64_t sub_100057B50()
{
  return swift_release();
}

uint64_t sub_100057B58()
{
  return swift_release();
}

uint64_t sub_100057B60()
{
  return swift_release();
}

uint64_t sub_100057B68()
{
  return swift_release();
}

uint64_t sub_100057B70()
{
  return swift_release();
}

uint64_t sub_100057B78()
{
  return swift_release();
}

uint64_t sub_100057B80()
{
  return swift_release();
}

uint64_t sub_100057B88()
{
  return swift_release();
}

uint64_t sub_100057B90()
{
  return swift_release();
}

uint64_t sub_100057B98()
{
  return swift_release();
}

uint64_t sub_100057BA0()
{
  return swift_release();
}

uint64_t sub_100057BA8()
{
  return swift_release();
}

uint64_t sub_100057BB0()
{
  return swift_release();
}

uint64_t sub_100057BB8()
{
  return swift_release();
}

uint64_t sub_100057BC0()
{
  return swift_release();
}

uint64_t sub_100057BC8()
{
  return swift_release();
}

uint64_t sub_100057BD0()
{
  return swift_release();
}

uint64_t sub_100057BD8()
{
  return swift_release();
}

uint64_t sub_100057BE0()
{
  return swift_release();
}

uint64_t sub_100057BE8()
{
  return swift_release();
}

uint64_t sub_100057BF0()
{
  return swift_release();
}

uint64_t sub_100057BF8()
{
  return swift_release();
}

uint64_t sub_100057C00()
{
  return swift_release();
}

uint64_t sub_100057C08()
{
  return swift_release();
}

uint64_t sub_100057C10()
{
  return swift_release();
}

uint64_t sub_100057C18()
{
  return swift_release();
}

uint64_t sub_100057C20()
{
  return swift_release();
}

uint64_t sub_100057C28()
{
  return swift_release();
}

uint64_t sub_100057C30()
{
  return swift_release();
}

uint64_t sub_100057C38()
{
  return swift_release();
}

uint64_t sub_100057C40()
{
  return swift_release();
}

uint64_t sub_100057C48()
{
  return swift_release();
}

uint64_t sub_100057C50()
{
  return swift_release();
}

uint64_t sub_100057C58()
{
  return swift_release();
}

uint64_t sub_100057C60()
{
  return swift_release();
}

uint64_t sub_100057C68()
{
  return swift_release();
}

uint64_t sub_100057C70()
{
  return swift_release();
}

uint64_t sub_100057C78()
{
  return swift_release();
}

uint64_t sub_100057C80()
{
  return swift_release();
}

uint64_t sub_100057C88()
{
  return swift_release();
}

uint64_t sub_100057C90()
{
  return swift_release();
}

uint64_t sub_100057C98()
{
  return swift_release();
}

uint64_t sub_100057CA0()
{
  return swift_release();
}

uint64_t sub_100057CA8()
{
  return swift_release();
}

uint64_t sub_100057CB0()
{
  return swift_release();
}

uint64_t sub_100057CB8()
{
  return swift_release();
}

uint64_t sub_100057CC0()
{
  return swift_release();
}

uint64_t sub_100057CC8()
{
  return swift_release();
}

uint64_t sub_100057CD0()
{
  return swift_release();
}

uint64_t sub_100057CD8()
{
  return swift_release();
}

uint64_t sub_100057CE0()
{
  return swift_release();
}

uint64_t sub_100057CE8()
{
  return swift_release();
}

uint64_t sub_100057CF0()
{
  return swift_release();
}

uint64_t sub_100057CF8()
{
  return swift_release();
}

uint64_t sub_100057D00()
{
  return swift_release();
}

uint64_t sub_100057D08()
{
  return swift_release();
}

uint64_t sub_100057D10()
{
  return swift_release();
}

uint64_t sub_100057D18()
{
  return swift_release();
}

uint64_t sub_100057D20()
{
  return swift_release();
}

uint64_t sub_100057D28()
{
  return swift_release();
}

uint64_t sub_100057D30()
{
  return swift_release();
}

uint64_t sub_100057D38()
{
  return swift_release();
}

uint64_t sub_100057D40()
{
  return swift_release();
}

uint64_t sub_100057D48()
{
  return swift_release();
}

uint64_t sub_100057D50()
{
  return swift_release();
}

uint64_t sub_100057D58()
{
  return swift_release();
}

uint64_t sub_100057D60()
{
  return swift_release();
}

uint64_t sub_100057D68()
{
  return swift_release();
}

uint64_t sub_100057D70()
{
  return swift_release();
}

uint64_t sub_100057D78()
{
  return swift_release();
}

uint64_t sub_100057D80()
{
  return swift_release();
}

uint64_t sub_100057D88()
{
  return swift_release();
}

uint64_t sub_100057D90()
{
  return swift_release();
}

uint64_t sub_100057D98()
{
  return swift_release();
}

uint64_t sub_100057DA0()
{
  return swift_release();
}

uint64_t sub_100057DA8()
{
  return swift_release();
}

uint64_t sub_100057DB0()
{
  return swift_release();
}

uint64_t sub_100057DB8()
{
  return swift_release();
}

uint64_t sub_100057DC0()
{
  return swift_release();
}

uint64_t sub_100057DC8()
{
  return swift_release();
}

uint64_t sub_100057DD0()
{
  return swift_release();
}

uint64_t sub_100057DD8()
{
  return swift_release();
}

uint64_t sub_100057DE0()
{
  return swift_release();
}

uint64_t sub_100057DE8()
{
  return swift_release();
}

uint64_t sub_100057DF0()
{
  return swift_release();
}

uint64_t sub_100057DF8()
{
  return swift_release();
}

uint64_t sub_100057E00()
{
  return swift_release();
}

uint64_t sub_100057E08()
{
  return swift_release();
}

uint64_t sub_100057E10()
{
  return swift_release();
}

uint64_t sub_100057E18()
{
  return swift_release();
}

uint64_t sub_100057E20()
{
  return swift_release();
}

uint64_t sub_100057E28()
{
  return swift_release();
}

uint64_t sub_100057E30()
{
  return swift_release();
}

uint64_t sub_100057E38()
{
  return swift_release();
}

uint64_t sub_100057E40()
{
  return swift_release();
}

uint64_t sub_100057E48()
{
  return swift_release();
}

uint64_t sub_100057E50()
{
  return swift_release();
}

uint64_t sub_100057E58()
{
  return swift_release();
}

uint64_t sub_100057E60()
{
  return swift_release();
}

uint64_t sub_100057E68()
{
  return swift_release();
}

uint64_t sub_100057E70()
{
  return swift_release();
}

uint64_t sub_100057E78()
{
  return swift_release();
}

uint64_t sub_100057E80()
{
  return swift_release();
}

uint64_t sub_100057E88()
{
  return swift_release();
}

uint64_t sub_100057E90()
{
  return swift_release();
}

uint64_t sub_100057E98()
{
  return swift_release();
}

uint64_t sub_100057EA0()
{
  return swift_release();
}

uint64_t sub_100057EA8()
{
  return swift_release();
}

uint64_t sub_100057EB0()
{
  return swift_release();
}

uint64_t sub_100057EB8()
{
  return swift_release();
}

uint64_t sub_100057EC0()
{
  return swift_release();
}

uint64_t sub_100057EC8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t sub_100057F60(uint64_t a1)
{
  return sub_100057EC8(a1, (uint64_t (*)(void))&type metadata accessor for EpisodeListSettings, (uint64_t (*)(uint64_t, uint64_t))sub_1000533CC);
}

id sub_100057F8C(id a1, MTEpisode *a2)
{
  return [(MTEpisode *)a2 uuid];
}

id sub_100057F94(id a1, MTEpisode *a2)
{
  return [(MTEpisode *)a2 uuid];
}

uint64_t sub_100057F9C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100057FB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t getEnumTagSinglePayload for CoreDataDownloadLibrary(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void sub_100058040(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 32);
  if (!v2) {
    uint64_t v2 = *(void **)(v1 + 56);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v2);
}

uint64_t sub_100058070(uint64_t a1)
{
  return sub_100041994(a1, (void *)(v1 + 16));
}

id sub_1000580A8()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC8Podcasts33DownloadingEpisodeStateDataSource_accessQueue);
}

void *sub_1000580C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  if (__OFADD__(*result, v2)) {
    __break(1u);
  }
  else {
    *a2 = *result + v2;
  }
  return result;
}

unsigned char *sub_1000580E0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = (*result | result[1]) & 1;
  return result;
}

uint64_t type metadata accessor for LibraryDataProvider(uint64_t a1)
{
  return sub_10004F778(a1, (uint64_t *)&unk_1005F7590);
}

uint64_t sub_100058118@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t _s8Podcasts18RestoreRunnerErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100058170(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_100058170(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_errorRetain();
  }
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_100058190()
{
}

id sub_1000583A0(uint64_t a1, void *a2)
{
  id v3 = [a2 iTunesMatchEnabled];
  id result = [*(id *)(a1 + 32) iTunesMatchEnabled];
  if (v3 != result)
  {
    [*(id *)(a1 + 32) setITunesMatchEnabled:v3];
    char v5 = *(void **)(a1 + 32);
    return _[v5 updateiTunesPlaylistForiTunesMatchState];
  }
  return result;
}

uint64_t sub_100058408(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void type metadata accessor for MPCPlayerItemDurationSnapshot(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for DownloaderSessionConfigurationType()
{
  return &type metadata for DownloaderSessionConfigurationType;
}

ValueMetadata *type metadata accessor for ImplicitFollowsDecayEvent()
{
  return &type metadata for ImplicitFollowsDecayEvent;
}

uint64_t storeEnumTagSinglePayload for CoreDataDownloadLibrary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for BaseResultsController()
{
  return sub_100049BF0();
}

void sub_1000584C4()
{
}

ValueMetadata *type metadata accessor for FeedManager.System()
{
  return &type metadata for FeedManager.System;
}

uint64_t type metadata accessor for PodcastsPlayerAdapter(uint64_t a1)
{
  return sub_10004F778(a1, (uint64_t *)&unk_1006042D0);
}

void sub_1000584FC()
{
  sub_100033A10(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100058508()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100058550(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80)), v2);

  return swift_deallocObject();
}

uint64_t sub_1000585E8()
{
  uint64_t v1 = type metadata accessor for PerformanceTestCase();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_100058678(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return swift_deallocObject();
}

__n128 initializeWithTake for PrototypeUpNextController(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 initializeWithTake for DownloaderSessionIdentifier(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

void sub_100058890(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_10060A8A8 = [v1 BOOLForKey:@"MTFeatureDisabled_FeedUpdate"];
}

void sub_1000588E8(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_10060A870 = [v1 BOOLForKey:@"MTFeatureDisabled_CloudSync"];
}

void sub_100058940(uint64_t a1)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) |= +[MTPlaylistQueryManager updatePlaylist:v7 inContext:*(void *)(a1 + 40)];
        if (*(void *)(a1 + 48))
        {
          Swift::String v8 = [*(id *)(a1 + 40) playlistForUuid:v7];
          (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v4);
  }

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    [*(id *)(a1 + 40) saveInCurrentBlock];
    uint64_t v9 = *(void **)(a1 + 40);
    uint64_t v10 = kMTPlaylistEntityName;
    uint64_t v11 = +[NSPredicate truePredicate];
    uint64_t v12 = [v9 objectsInEntity:v10 predicate:v11 sortDescriptors:0];

    [v12 mt_compactMap:&stru_1005519F0];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100109A8C;
    block[3] = &unk_10054D570;
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    id v13 = v15;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id sub_100058B70(uint64_t a1)
{
  [*(id *)(a1 + 32) _effectiveAutorefreshRate];
  id result = [*(id *)(a1 + 32) setAutorefreshRate:];
  if (*(unsigned char *)(a1 + 40))
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 _onQueueStartNewTimer];
  }
  return result;
}

uint64_t sub_100058BC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100058BE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) endBackgroundTask];
}

id sub_100058BE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) beginBackgroundTask:@"com.apple.podcasts.MTPodcastDerivedPropertyObserver.processPersistentHistoryTransactions"];
}

id sub_100058BF8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAllPodcastsUserInitiated:*(unsigned __int8 *)(a1 + 56) forced:*(unsigned __int8 *)(a1 + 57) useBackgroundFetch:0 source:*(void *)(a1 + 48) startedUpdatesCallback:*(void *)(a1 + 40)];
}

id sub_100058C14(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isActive];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return _[v3 _onQueueScheduleTimer];
  }
  return result;
}

uint64_t sub_100058C60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100058C70(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = +[PFFairPlayMigrationController sharedInstance];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    uint64_t v5[2] = sub_1000612C0;
    v5[3] = &unk_10054D570;
    id v6 = *(id *)(a1 + 32);
    [v3 rollbackIfNecessaryWithCompletion:v5];
  }
  else
  {
    id v4 = *(NSObject **)(a1 + 32);
    dispatch_group_leave(v4);
  }
}

void sub_100058D3C(uint64_t a1)
{
}

void sub_100058D44(id a1, NSNotification *a2)
{
  id v2 = +[UNUserNotificationCenter currentNotificationCenter];
  [v2 getNotificationSettingsWithCompletionHandler:&stru_10054DAD0];
}

void sub_100058D94(id a1)
{
  id v1 = +[MTListenNowManager sharedInstance];
  [v1 startObservingChanges];
}

void sub_100058DDC(id a1)
{
  id v1 = +[BGTaskScheduler sharedScheduler];
  [v1 cancelAllTaskRequests];
}

void sub_100058E24(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPlaylistEntityName;
  id v4 = +[NSPredicate truePredicate];
  uint64_t v5 = [v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0];

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        [v11 setNeedsUpdate:1];
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        uint64_t v12 = [v11 settings];
        id v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = *(void *)v21;
          do
          {
            for (j = 0; j != v14; j = (char *)j + 1)
            {
              if (*(void *)v21 != v15) {
                objc_enumerationMutation(v12);
              }
              [*(id *)(*((void *)&v20 + 1) + 8 * (void)j) setNeedsUpdate:1];
            }
            id v14 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
          }
          while (v14);
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v8);
  }

  long long v17 = [v6 valueForKey:kPodcastUuid];
  long long v18 = *(void **)(a1 + 40);
  long long v19 = +[NSSet setWithArray:v17];
  [v18 updatePlaylistsWithUuids:v19];
}

id sub_100059050(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _submitForegroundAnalytics];
}

id sub_100059058(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeTempFiles];
}

void sub_100059060(id a1)
{
  qword_10060A928 = objc_alloc_init(MTMediaContentSourceiOSMusicLibrary);

  _objc_release_x1();
}

void sub_10005909C(id a1)
{
  qword_10060A878 = objc_alloc_init(MTPodcastDerivedPropertyObserver);

  _objc_release_x1();
}

void sub_1000590D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 removeAllObjects];
  [v3 setValuesForKeysWithDictionary:*(void *)(a1 + 32)];
}

id sub_100059130(uint64_t a1)
{
  return [*(id *)(a1 + 32) _verifyFairPlayMigrationWithCompletionHandler:&stru_10054D698];
}

void sub_100059140(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1000161B8;
  v1[3] = &unk_10054D960;
  char v2 = *(unsigned char *)(a1 + 40);
  v1[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v1);
}

void sub_1000591C0(id a1)
{
  id v1 = +[MTPurchaseControllerWrapper sharedInstance];
  [v1 forceFetchLatestChannelUpdates];
}

uint64_t sub_100059208(uint64_t a1)
{
  [*(id *)(a1 + 32) mt_compactMap:&stru_100551A90];

  return _objc_release_x1();
}

id sub_10005925C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateReachability];
}

void sub_100059264(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) listenNowQueryObserver];
  [v1 startObserving];
}

void sub_1000592A8(id a1)
{
  qword_10060A788 = objc_alloc_init(MZPreferences);

  _objc_release_x1();
}

void sub_1000592E4(id a1, NSMutableDictionary *a2)
{
}

void sub_1000592EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _processLatestPersistentHistoryTransactions];
}

void sub_10005932C(id a1)
{
  id v1 = +[AMSProcessInfo currentProcess];
}

uint64_t sub_100059354(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [a2 mt_compactMap:&stru_100550B10];

  return _objc_release_x1();
}

uint64_t sub_1000593A8(uint64_t a1)
{
  qword_10060A980 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_1000593E0(id a1)
{
  qword_10060A7D8 = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);

  _objc_release_x1();
}

id sub_10005941C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) processListenNowEpisodes:a2];
}

void sub_100059428(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isObserving] & 1) == 0)
  {
    [*(id *)(a1 + 32) setObserving:1];
    id v2 = +[MTDB sharedInstance];
    [v2 addChangeNotifier:*(void *)(a1 + 32)];
  }
}

id sub_1000594A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateReachability];
}

id sub_1000594B0()
{
  return +[MTImageStore defaultStore];
}

MTImageDownloader *sub_1000594BC()
{
  return +[MTImageDownloader sharedInstance];
}

BOOL sub_1000594C8()
{
  if (+[MTApplication localLibraryUpdatesDisabled]) {
    return 1;
  }
  if (qword_10060A868 != -1) {
    dispatch_once(&qword_10060A868, &stru_1005515F8);
  }
  return byte_10060A870 != 0;
}

uint64_t sub_100059530(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a4) {
    return sub_10005C4BC(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10005953C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a4) {
    return sub_10005C4BC(a1, a2, a3);
  }
  else {
    return sub_10034B3A0(a1, a2);
  }
}

void *sub_100059548(unint64_t a1)
{
  return sub_10003CCDC(a1);
}

uint64_t sub_100059554(uint64_t a1, char a2)
{
  id v3 = v2;
  uint64_t v5 = *v2;
  sub_100054B78(&qword_1005F6508);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    double v35 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v23 = v35[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              id v3 = v2;
              if (a2)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *double v35 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v23 = v35[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = 16 * v21;
      uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + v29);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      long long v36 = *(_OWORD *)(*(void *)(v5 + 56) + v29);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 16 * v17;
      long long v19 = (void *)(*(void *)(v7 + 48) + v18);
      *long long v19 = v32;
      v19[1] = v31;
      *(_OWORD *)(*(void *)(v7 + 56) + v18) = v36;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

uint64_t sub_10005986C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004E6CC(a1, a2, a3, *v3);
  *id v3 = (char *)result;
  return result;
}

uint64_t sub_10005988C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000CC60(a1, a2, a3, *v3);
  *id v3 = (char *)result;
  return result;
}

uint64_t sub_1000598AC(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005F7E70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10005990C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1003F62B0(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1003F7A34(a4);
      goto LABEL_14;
    }
    sub_100006FB8(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    a5(0);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

unint64_t sub_100059A9C()
{
  unint64_t result = qword_1005F7530;
  if (!qword_1005F7530)
  {
    sub_10004D29C(255, (unint64_t *)&unk_1005FBA00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F7530);
  }
  return result;
}

unint64_t sub_100059B04()
{
  unint64_t result = qword_1005FE9D0;
  if (!qword_1005FE9D0)
  {
    sub_10004D29C(255, (unint64_t *)&unk_1005FCE50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE9D0);
  }
  return result;
}

unint64_t sub_100059B6C()
{
  unint64_t result = qword_1005FE9C0;
  if (!qword_1005FE9C0)
  {
    sub_100044244(&qword_1005FE9C8);
    sub_100059B04();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FE9C0);
  }
  return result;
}

unint64_t sub_100059BE0()
{
  unint64_t result = qword_1005F8B80;
  if (!qword_1005F8B80)
  {
    sub_10004D29C(255, (unint64_t *)&qword_1005F8B70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F8B80);
  }
  return result;
}

uint64_t sub_100059C48(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005F9F20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100059CA8()
{
  unint64_t result = qword_1005F5BE0;
  if (!qword_1005F5BE0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F5BE0);
  }
  return result;
}

uint64_t sub_100059D00(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_1003CC300(v12, v13);
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t sub_100059EA8(uint64_t a1)
{
  uint64_t v2 = sub_100054B78((uint64_t *)&unk_100603370);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100059F08()
{
  unint64_t result = qword_1005F5BF0;
  if (!qword_1005F5BF0)
  {
    sub_100044244((uint64_t *)&unk_1005F7A60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F5BF0);
  }
  return result;
}

unint64_t sub_100059F64()
{
  unint64_t result = qword_100607560;
  if (!qword_100607560)
  {
    sub_100044244((uint64_t *)&unk_100607568);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100607560);
  }
  return result;
}

unint64_t sub_100059FC0()
{
  unint64_t result = qword_1005F80F8;
  if (!qword_1005F80F8)
  {
    sub_100044244(&qword_1005F76C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F80F8);
  }
  return result;
}

void sub_10005A01C()
{
  if (!qword_100605848)
  {
    sub_100044244(&qword_100605850);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100605848);
    }
  }
}

uint64_t sub_10005A078(uint64_t a1, char a2)
{
  if (a2)
  {
    uint64_t result = 0x6465776F6C6C6F66;
    switch(a1)
    {
      case 1:
        uint64_t result = 0x776F6C6C6F666E75;
        break;
      case 2:
        uint64_t result = 7105633;
        break;
      case 3:
        uint64_t result = 0x64616F6C6E776F64;
        break;
      case 4:
      case 6:
        uint64_t result = 0xD000000000000011;
        break;
      case 5:
        uint64_t result = 0x6B72616D6B6F6F62;
        break;
      case 7:
        uint64_t result = 0xD000000000000012;
        break;
      default:
        return result;
    }
  }
  else
  {
    sub_1001A5874();
    v3._uint64_t countAndFlagsBits = BinaryInteger.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return 0x286C656E6E616863;
  }
  return result;
}

unint64_t sub_10005A1DC(uint64_t a1)
{
  return sub_100051C7C(a1, &qword_1005F6438);
}

unint64_t sub_10005A1E8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6480);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  Swift::String v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *(v4 - 1);
    uint64_t v5 = *v4;
    sub_100036488(v6);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100226D30(v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005A2F4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6508);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  Swift::String v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_10004FA6C(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005A420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FF930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005A488()
{
  unint64_t result = qword_1005FF9B8;
  if (!qword_1005FF9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF9B8);
  }
  return result;
}

uint64_t type metadata accessor for ReevaluateAutoDownloadsIntentImplementation()
{
  uint64_t result = qword_1005FABA0;
  if (!qword_1005FABA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10005A530()
{
  unint64_t result = qword_1005FF9C0;
  if (!qword_1005FF9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF9C0);
  }
  return result;
}

uint64_t sub_10005A584()
{
  return sub_10005E390((unint64_t *)&unk_1006086A8, (void (*)(uint64_t))&type metadata accessor for FetchShowLatestEpisodesIntent);
}

unint64_t sub_10005A5CC()
{
  unint64_t result = qword_1005FF9B0;
  if (!qword_1005FF9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF9B0);
  }
  return result;
}

uint64_t sub_10005A620()
{
  return sub_10005E3D8((unint64_t *)&unk_100605FD0, (void (*)(uint64_t))&type metadata accessor for UpdateEpisodePlayStateIntent);
}

unint64_t sub_10005A668()
{
  unint64_t result = qword_1005FFA58;
  if (!qword_1005FFA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FFA58);
  }
  return result;
}

uint64_t sub_10005A6C0()
{
  return sub_10005E4B0((unint64_t *)&unk_1006025F0, (void (*)(uint64_t))&type metadata accessor for PlayStationIntent);
}

unint64_t sub_10005A708()
{
  unint64_t result = qword_1005FF958;
  if (!qword_1005FF958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF958);
  }
  return result;
}

uint64_t sub_10005A75C()
{
  return sub_10005E420((unint64_t *)&unk_100608C98, (void (*)(uint64_t))&type metadata accessor for FetchShowEntitiesIntent);
}

unint64_t sub_10005A7A4()
{
  unint64_t result = qword_1005FFA50;
  if (!qword_1005FFA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FFA50);
  }
  return result;
}

uint64_t type metadata accessor for WelcomeViewControllerMetricsSender()
{
  return self;
}

uint64_t type metadata accessor for PlaybackContinuityActivityDelegate()
{
  return self;
}

uint64_t type metadata accessor for OpenTranscriptIntentImplementation()
{
  uint64_t result = qword_100609978;
  if (!qword_100609978) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005A8A0()
{
  return sub_10005E468((unint64_t *)&unk_1006099C0, (void (*)(uint64_t))&type metadata accessor for OpenTranscriptIntent);
}

uint64_t type metadata accessor for FetchShowLatestLocalEpisodesIntent()
{
  uint64_t result = qword_1005FE1D8;
  if (!qword_1005FE1D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10005A934()
{
  unint64_t result = qword_1005FFC50;
  if (!qword_1005FFC50)
  {
    type metadata accessor for FetchShowLatestLocalEpisodesIntent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FFC50);
  }
  return result;
}

void sub_10005A98C(void *a1@<X8>)
{
  *a1 = 0xD00000000000002CLL;
  a1[1] = 0x80000001004D9960;
}

unint64_t sub_10005A9B0()
{
  unint64_t result = qword_1005F6820;
  if (!qword_1005F6820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F6820);
  }
  return result;
}

uint64_t sub_10005AA04(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10001CB64(&qword_100600390, a2, (void (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10005AA5C(uint64_t a1, uint64_t a2)
{
  return sub_10001CB64(&qword_1005F7A70, a2, (void (*)(uint64_t))type metadata accessor for DownloadingEpisodeStateDataSource);
}

uint64_t sub_10005AAA4(uint64_t a1, uint64_t a2)
{
  return sub_100013E00(a1, a2);
}

uint64_t sub_10005AAC8()
{
  return sub_10001CB64(&qword_100600388, 255, (void (*)(uint64_t))&type metadata accessor for EpisodeDownloadState);
}

uint64_t type metadata accessor for CoreDataDownloadJobStorageFactory()
{
  return self;
}

uint64_t sub_10005AB38()
{
  uint64_t result = sub_10001D734();
  qword_1005F91F0 = result;
  return result;
}

void sub_10005AB58(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v2._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

unint64_t sub_10005AC20()
{
  unint64_t result = qword_1005FFA48;
  if (!qword_1005FFA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FFA48);
  }
  return result;
}

uint64_t type metadata accessor for AppCoreSpotlightEntityAnnotator()
{
  return self;
}

uint64_t type metadata accessor for PlatformContentController_Null()
{
  return self;
}

uint64_t sub_10005ACFC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 16) = a1;
  return swift_unknownObjectRelease();
}

uint64_t sub_10005AE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FFD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005AF00()
{
  unint64_t result = qword_1005FC210;
  if (!qword_1005FC210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FC210);
  }
  return result;
}

uint64_t type metadata accessor for BlueMoonStubPlayerController()
{
  return self;
}

uint64_t sub_10005AF78()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LegacyPlaybackQueueMigrator()
{
  return self;
}

uint64_t type metadata accessor for PostRestorePromptPresenter()
{
  return self;
}

uint64_t type metadata accessor for JobPipelineInMemoryStorage()
{
  return self;
}

uint64_t type metadata accessor for AppEnterExitEventWatchdoge()
{
  return self;
}

void sub_10005B040()
{
  *(_WORD *)(v0 + 16) = 1;
}

uint64_t type metadata accessor for PlatformContentController()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ImplicitFollowsDecayEvent(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_10005B138()
{
  sub_10000927C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for FairPlayDownloadsObserver.DownloadState()
{
  uint64_t result = qword_1005FFEB0;
  if (!qword_1005FFEB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_10005B24C()
{
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter____lazy_storage___playerPathCoordinator] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_route] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isHandoffEnabled] = 1;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isTargetPlaying] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isLocal] = 1;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localPlaybackRequested] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localHasChapters] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localChapterIndex] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localChapterCount] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localLoadedDuration] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_localTotalDuration] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemDescriptionHasHTML] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemPlainEpisodeNotes];
  *uint64_t v1 = 0;
  v1[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemEpisodeNotes] = 0;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItemIsLocal] = 1;
  *(_DWORD *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_volume] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_currentItem] = 0;
  Swift::String v2 = &v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_explicitCharacter];
  void *v2 = 0;
  v2[1] = 0xE000000000000000;
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isLocalVideo] = 0;
  int v3 = &v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_presentationSize];
  *(void *)int v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_playbackSpeedMenu] = 0;
  *(void *)&v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopTimeRemaining] = 0;
  unsigned int v4 = &v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_autoStopMode];
  uint64_t v5 = enum case for PlayerAutoStopMode.off(_:);
  uint64_t v6 = type metadata accessor for PlayerAutoStopMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  v0[OBJC_IVAR____TtC8Podcasts25BlueMoonStubPlayerAdapter_isPlayingVideoFullScreen] = 0;
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for BlueMoonStubPlayerAdapter();
  return [super init];
}

uint64_t type metadata accessor for SharedPlaybackController()
{
  return self;
}

void sub_10005B448(unsigned __int8 *a1)
{
}

id sub_10005B450@<X0>(void *a1@<X8>)
{
  return sub_1000168FC(*(char **)(v1 + 16), a1);
}

uint64_t type metadata accessor for DownloadsAlertController()
{
  uint64_t result = qword_1005FA898;
  if (!qword_1005FA898) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005B4B8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ChapterResultsController()
{
  uint64_t result = qword_1005FDFA0;
  if (!qword_1005FDFA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005B54C@<X0>(void *a1@<X8>)
{
  type metadata accessor for MenuBarController();
  BaseObjectGraph.inject<A>(_:)();
  uint64_t result = sub_10000A204((unint64_t *)&unk_1005F7ED0, (void (*)(uint64_t))type metadata accessor for MenuBarController);
  *a1 = v3;
  a1[1] = result;
  return result;
}

uint64_t sub_10005B5D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100019824(*(void **)(v1 + 16), a1);
}

uint64_t type metadata accessor for EpisodeDownloadsManager()
{
  uint64_t result = qword_100607E68;
  if (!qword_100607E68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005B638(uint64_t a1, uint64_t a2)
{
  return sub_100047F98(a1, a2, *(void *)(v2 + 16), (void *)(v2 + 24));
}

void sub_10005B644()
{
  type metadata accessor for URL();

  sub_100017B90();
}

uint64_t sub_10005B6A4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DownloadManagerObserver()
{
  return sub_100049BF0();
}

id sub_10005B708()
{
  return sub_10000BA58();
}

unint64_t sub_10005B72C()
{
  unint64_t result = qword_1005FA460;
  if (!qword_1005FA460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FA460);
  }
  return result;
}

void sub_10005B780()
{
  qword_10061AB38 = (uint64_t)&off_100554408;
}

uint64_t sub_10005B798(void **a1)
{
  return sub_10005B7A0(a1, v1);
}

uint64_t sub_10005B7A0(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78((uint64_t *)&unk_100603370);
  uint64_t result = __chkstk_darwin(v4 - 8);
  int64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_super v8 = *a1;
  if (*a1)
  {
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
    type metadata accessor for MainActor();
    id v10 = v8;
    swift_retain();
    uint64_t v11 = static MainActor.shared.getter();
    uint64_t v12 = (void *)swift_allocObject();
    void v12[2] = v11;
    uint64_t v12[3] = &protocol witness table for MainActor;
    v12[4] = a2;
    v12[5] = v10;
    sub_10001201C((uint64_t)v7, (uint64_t)&unk_1005FEA08, (uint64_t)v12);

    return swift_release();
  }
  return result;
}

unsigned char *sub_10005B8DC(unsigned char *result)
{
  if (*result == 1)
  {
    uint64_t result = *(unsigned char **)(v1 + 32);
    if (result) {
      return [result becomeCurrent];
    }
  }
  return result;
}

uint64_t type metadata accessor for GlobalActionController()
{
  return self;
}

uint64_t type metadata accessor for DownloadsRestoreRunner()
{
  return self;
}

uint64_t sub_10005B948(char a1)
{
  sub_100041A98((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t v3 = dispatch thunk of MediaLibraryClientProtocol.mostRecentRestoreToken.getter();
  if (!v4) {
    return 2;
  }
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  uint64_t v7 = sub_1002AB264();
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  if ((a1 & 1) == 0)
  {
    if (v8)
    {
      if (v5 == v7 && v6 == v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0) {
          return 0;
        }
      }
      return 0xD000000000000023;
    }
    goto LABEL_19;
  }
  if (!v8)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      goto LABEL_18;
    }
  }
  uint64_t v16 = sub_1002AB264();
  if (!v17)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v9 == v16 && v10 == v17)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18) {
    return 0;
  }
  return 0;
}

uint64_t sub_10005BB64@<X0>(uint64_t a1@<X8>)
{
  return sub_10005BB84(*(void *)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 24), a1);
}

uint64_t sub_10005BB84@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10005B948(1);
  if ((v8 & 0x100) != 0)
  {
    uint64_t v15 = v6;
    uint64_t v16 = v7;
    char v17 = v8;
    if (v8 == 2)
    {
      if (!(v6 | v7))
      {
        static os_log_type_t.default.getter();
        sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
        uint64_t v11 = (void *)static OS_os_log.restore.getter();
LABEL_11:
        os_log(_:dso:log:_:_:)();

        uint64_t v19 = 0;
        goto LABEL_12;
      }
      if (!(v6 ^ 1 | v7))
      {
        static os_log_type_t.error.getter();
        sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
        char v18 = (void *)static OS_os_log.restore.getter();
        os_log(_:dso:log:_:_:)();

        uint64_t v19 = 1;
LABEL_12:
        uint64_t result = a2(0, v19, 0, 0);
        goto LABEL_13;
      }
    }
    a2(v6, v7, v8, 1);
    uint64_t result = sub_100059530(v15, v16, v17, 1);
    goto LABEL_13;
  }
  static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v9 = (void *)static OS_os_log.restore.getter();
  os_log(_:dso:log:_:_:)();

  sub_100041A98((void *)(a1 + 16), *(void *)(a1 + 40));
  uint64_t v10 = *(void *)(dispatch thunk of MediaLibraryClientProtocol.postRestoreCandidates()() + 16);
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v11 = (void *)static OS_os_log.restore.getter();
  if (!v10) {
    goto LABEL_11;
  }
  sub_100054B78(&qword_1005F7720);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10046D010;
  *(void *)(v12 + 56) = &type metadata for Int;
  *(void *)(v12 + 64) = &protocol witness table for Int;
  *(void *)(v12 + 32) = v10;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = v10;
  swift_retain();
  a2(v10, (uint64_t)sub_1002AE45C, v13, 0);
  uint64_t result = swift_release();
LABEL_13:
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for CoreDataEpisodeStorage()
{
  return self;
}

uint64_t sub_10005BF30()
{
  return swift_initClassMetadata2();
}

void sub_10005BF80()
{
  sub_100006B48();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10005C030(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 24);
}

void *sub_10005C040()
{
  return &protocol witness table for UInt;
}

uint64_t type metadata accessor for NetworkMediaManifest()
{
  uint64_t result = qword_1005FAFF8;
  if (!qword_1005FAFF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for StationListObserver()
{
  uint64_t result = qword_100607550;
  if (!qword_100607550) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005C128@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(*v1 + OBJC_IVAR____TtC8Podcasts19StationListObserver_currentValue);
  return swift_bridgeObjectRetain();
}

char *sub_10005C144()
{
  return sub_10000F160();
}

id sub_10005C14C()
{
  uint64_t v1 = *(void *)(type metadata accessor for StationListOptions() - 8);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10000F088(v2, v3, v4);
}

uint64_t sub_10005C1C0(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  return LibraryDataProvider.showsPaginatedPublisher(listType:sortBy:lockupStyle:pageSize:)(a1, a2 & 1, a3, a4, a5);
}

uint64_t sub_10005C1C8(uint64_t a1, char a2)
{
  return LibraryDataProvider.fetchShowCountObserver(listType:)(a1, a2 & 1);
}

uint64_t sub_10005C1D8()
{
  return sub_100042FDC(&qword_1005F74B0, (void (*)(uint64_t))type metadata accessor for LibraryDataProvider);
}

uint64_t sub_10005C220(unint64_t a1)
{
  uint64_t v1 = sub_100059548(a1);
  if (!v1) {
    uint64_t v1 = _swiftEmptyArrayStorage;
  }

  return RecommendationsMetadata.Episodes.init(from:)(v1);
}

uint64_t sub_10005C2D4()
{
  return sub_10000CDCC(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10005C2E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for StationListOptions() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000110A8(v2);
}

uint64_t sub_10005C370()
{
  return sub_1000113B0();
}

uint64_t sub_10005C378@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for FetchEpisodesStates()
{
  return self;
}

uint64_t type metadata accessor for EpisodeListManifest()
{
  uint64_t result = qword_100601D60;
  if (!qword_100601D60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_10005C434()
{
  return sub_10000F4C0();
}

uint64_t sub_10005C460@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(*v1 + OBJC_IVAR____TtC8Podcasts19ChannelListObserver_currentValue);
  return swift_bridgeObjectRetain();
}

id sub_10005C47C()
{
  return sub_1000133C8(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t type metadata accessor for AsyncBlockOperation()
{
  return sub_100049BF0();
}

void sub_10005C49C(uint64_t a1)
{
}

uint64_t destroy for RestoreRunnerError(uint64_t a1)
{
  return sub_10005C4BC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_10005C4BC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_errorRelease();
  }
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10005C4DC()
{
  unint64_t result = qword_1005FF000;
  if (!qword_1005FF000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005FF000);
  }
  return result;
}

unint64_t sub_10005C530(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v9 = 0xD000000000000020;
    v6._uint64_t countAndFlagsBits = a1;
    v6._object = (void *)a2;
    String.append(_:)(v6);
    return v9;
  }
  if (a3 == 1)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    unint64_t v9 = 0xD000000000000010;
    swift_getErrorValue();
    v5._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    sub_10005C4BC(a1, a2, 1);
    return v9;
  }
  unint64_t v8 = 0xD00000000000003BLL;
  if (!(a1 ^ 1 | a2)) {
    unint64_t v8 = 0xD000000000000038;
  }
  if (a1 | a2) {
    return v8;
  }
  else {
    return 0xD000000000000037;
  }
}

unint64_t sub_10005C6B8()
{
  return sub_10005C530(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t type metadata accessor for ForegroundSyncUtil()
{
  uint64_t result = qword_1006053C0;
  if (!qword_1006053C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005C718()
{
  return type metadata accessor for ForegroundSyncUtil();
}

Swift::Void __swiftcall ForegroundSyncUtil.syncEverythingIfNeeded()()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + OBJC_IVAR___MTForegroundSyncUtil_needsSyncing))
  {
    sub_100016644();
  }
  else
  {
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    static OS_os_log.cloudSync.getter();
    Swift::String v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[Foreground Sync] Not syncing. Already synced.", v7, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t sub_10005C950(uint64_t a1)
{
  return sub_100023018(a1, "[Foreground Sync] Started updating %ld podcasts needing retry.");
}

uint64_t sub_10005C95C()
{
  return sub_100028F28(*(void *)(v0 + 16));
}

void sub_10005C964()
{
}

uint64_t sub_10005C9D0(uint64_t a1)
{
  return sub_100023018(a1, "[Foreground Sync] Started updating %ld podcasts on app foreground.");
}

uint64_t sub_10005C9DC()
{
  return sub_100023C98(*(char **)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_10005C9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001999C(a1, a2, a3);
}

uint64_t sub_10005CA34(unint64_t a1)
{
  return sub_100032A98(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(uint64_t (**)(uint64_t, _UNKNOWN **))(v1 + 64));
}

void sub_10005CA68(unint64_t a1)
{
  sub_100018558(a1, *(unsigned char *)(v1 + 16), *(char **)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void (**)(char *, _UNKNOWN **))(v1 + 64), *(void *)(v1 + 72));
}

void sub_10005CAA0()
{
  sub_1000152D8(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_10005CADC(uint64_t a1, char a2)
{
  return sub_10005CB20(a1, a2, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_10005CAE4(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2;
  return v3(&v5);
}

uint64_t sub_10005CB20(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = a2;
  return a3(&v4);
}

uint64_t sub_10005CB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for ClassKitManager()
{
  return self;
}

uint64_t sub_10005CB88(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t type metadata accessor for BlockOperation()
{
  return sub_100049BF0();
}

void sub_10005CBB8()
{
  sub_10005A01C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for WidgetManager()
{
  uint64_t result = qword_100605838;
  if (!qword_100605838) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005CCFC()
{
  return sub_1000142D0();
}

uint64_t sub_10005CD04()
{
  return sub_10005CD0C(*(void *)(v0 + 16));
}

uint64_t sub_10005CD0C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC8Podcasts13WidgetManager_waitToReloadUntilSave;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC8Podcasts13WidgetManager_waitToReloadUntilSave) == 1)
  {
    static Logger.widget.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received save notification after Timeline change", v10, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(unsigned char *)(a1 + v7) = 0;
    return sub_100033908();
  }
  return result;
}

uint64_t sub_10005CE6C()
{
  return sub_100033658((uint64_t)&unk_100564C28, (uint64_t)sub_10005CD04, (uint64_t)&unk_100564C40);
}

void sub_10005CE94(uint64_t a1)
{
  sub_1000068C8(a1, v1, (void (*)(void))sub_10005CE6C);
}

uint64_t type metadata accessor for SceneDelegate()
{
  return self;
}

uint64_t type metadata accessor for AppTraits_iOS()
{
  return self;
}

uint64_t type metadata accessor for AppController()
{
  return self;
}

id sub_10005CF98@<X0>(void *a1@<X8>)
{
  return sub_100013D3C((unint64_t *)&unk_1005FBA00, (SEL *)&selRef_sharedInstance, a1);
}

id sub_10005CFB4@<X0>(void *a1@<X8>)
{
  return sub_100013D3C((unint64_t *)&unk_1005FE480, (SEL *)&selRef_sharedInstance, a1);
}

id sub_10005CFD0@<X0>(void *a1@<X8>)
{
  return sub_10000B550((SEL *)&selRef_sharedInstance, a1);
}

id sub_10005CFE4@<X0>(void *a1@<X8>)
{
  return sub_100013D3C(&qword_1005F6FE0, (SEL *)&selRef_defaultStore, a1);
}

uint64_t sub_10005D004@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for TranscriptReportConcernURLBuilder();
  uint64_t result = swift_allocObject();
  *a1 = result;
  return result;
}

id sub_10005D03C@<X0>(void *a1@<X8>)
{
  return sub_100018DC4((unint64_t *)&unk_1005FF040, (uint64_t)&off_100564BB8, a1);
}

id sub_10005D058@<X0>(void *a1@<X8>)
{
  return sub_100018DC4(&qword_1005FFA70, (uint64_t)&off_10055E1C0, a1);
}

id sub_10005D074@<X0>(void *a1@<X8>)
{
  return sub_100018DC4((unint64_t *)&unk_1005F7500, (uint64_t)&off_100561E28, a1);
}

uint64_t sub_10005D090@<X0>(uint64_t a1@<X8>)
{
  return sub_100036B60((uint64_t (*)(void))type metadata accessor for LibraryActionController, &qword_1005F6EF0, (void (*)(uint64_t))type metadata accessor for LibraryActionController, a1);
}

uint64_t sub_10005D0D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ChannelLockupGenerator();
  uint64_t v3 = swift_allocObject();
  a1[3] = v2;
  uint64_t result = sub_1002B4798(&qword_1005FFA78, (void (*)(uint64_t))type metadata accessor for ChannelLockupGenerator);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_10005D160@<X0>(void *a1@<X8>)
{
  return sub_10000D4B4(&qword_1005F77F0, a1);
}

uint64_t sub_10005D180@<X0>(uint64_t a1@<X8>)
{
  return sub_100036B60((uint64_t (*)(void))type metadata accessor for EpisodeController, (unint64_t *)&unk_1005FF800, (void (*)(uint64_t))type metadata accessor for EpisodeController, a1);
}

uint64_t sub_10005D1C8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000194CC((void (*)(void))&type metadata accessor for BookmarksController, (uint64_t (*)(uint64_t))&BookmarksController.init(asPartOf:), a1);
}

uint64_t sub_10005D1F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000194CC((void (*)(void))&type metadata accessor for NowPlayingItemPlayheadSynchronizer, (uint64_t (*)(uint64_t))&NowPlayingItemPlayheadSynchronizer.init(asPartOf:), a1);
}

uint64_t sub_10005D220@<X0>(uint64_t *a1@<X8>)
{
  return sub_100004D60((void (*)(void))&type metadata accessor for PlaybackController, (uint64_t (*)(uint64_t))&PlaybackController.__allocating_init(asPartOf:), a1);
}

uint64_t sub_10005D24C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000194CC((void (*)(void))&type metadata accessor for SiriIntentDonator, (uint64_t (*)(uint64_t))&SiriIntentDonator.init(asPartOf:), a1);
}

uint64_t sub_10005D278@<X0>(void *a1@<X8>)
{
  return sub_100013D88((unint64_t *)&qword_1005FF768, a1);
}

uint64_t sub_10005D28C@<X0>(void *a1@<X8>)
{
  return sub_100013D88(&qword_1005FF720, a1);
}

double sub_10005D2A0()
{
  sub_100054B78(&qword_100604DF8);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_10046D030;
  *(void *)(v0 + 56) = &type metadata for UberArtworkResetMigrator;
  *(void *)(v0 + 64) = &protocol witness table for UberArtworkResetMigrator;
  *(void *)(v0 + 32) = "com.apple.podcasts.artwork.uber-migration.rdar120006144";
  *(void *)(v0 + 40) = 55;
  *(_WORD *)(v0 + 48) = 258;
  *(void *)(v0 + 96) = &type metadata for EntitledFirstTimeAvailableMigrator;
  *(void *)(v0 + 104) = &protocol witness table for EntitledFirstTimeAvailableMigrator;
  *(void *)(v0 + 72) = "com.apple.podcasts.db.firstAvailabilityDate-migration.rdar138352221";
  *(void *)(v0 + 80) = 67;
  *(_WORD *)(v0 + 88) = 258;
  off_100604DC8 = (_UNKNOWN *)v0;
  return result;
}

uint64_t type metadata accessor for FeedManager()
{
  uint64_t result = qword_1006020F0;
  if (!qword_1006020F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005D380()
{
  return type metadata accessor for FeedManager();
}

uint64_t sub_10005D388()
{
  return sub_10003B468((uint64_t (*)(void))&type metadata accessor for FeedManagerBagConfiguration, sub_10005D3B4);
}

uint64_t sub_10005D3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR___MTFeedManager__feedIngesterProvider);
  swift_retain();
  sub_10002D174(a2, v4, a1);

  return swift_release();
}

uint64_t sub_10005D418(uint64_t a1)
{
  return sub_100014C74(a1, *(char **)(v1 + 16));
}

uint64_t sub_10005D420()
{
  return sub_100008D98(*(void **)(v0 + 16));
}

void sub_10005D450(unsigned __int8 *a1)
{
}

BOOL sub_10005D458(void *a1)
{
  return *a1 == 0;
}

uint64_t sub_10005D468@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100029324(*a1, a1[1], a1[2]);
  *a2 = result;
  return result;
}

uint64_t sub_10005D49C()
{
  return sub_10000B5FC();
}

void sub_10005D4A4()
{
  sub_100004D08();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for AppDelegate()
{
  uint64_t result = qword_100603D98;
  if (!qword_100603D98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005D5C8()
{
  return type metadata accessor for AppDelegate();
}

uint64_t sub_10005D5F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000B8F0;
  return sub_10001084C();
}

uint64_t sub_10005D6A8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005D70C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000B8F0;
  return sub_10000D38C();
}

uint64_t sub_10005D7C0()
{
  uint64_t result = os_feature_enabled_bluemoon();
  if ((result & 1) == 0)
  {
    sub_100054B78(&qword_100603F10);
    BaseObjectGraph.injectIfAvailable<A>(_:)();
    if (v7[0])
    {
      id v1 = [self defaultInstance];
      [v1 setHighlightsProvider:v7[0]];
      swift_unknownObjectRelease();
    }
    sub_100054B78(&qword_100603F18);
    BaseObjectGraph.injectIfAvailable<A>(_:)();
    if (v6)
    {
      sub_100042FC4(&v5, (uint64_t)v7);
      sub_100056D54((uint64_t)v7, (uint64_t)&v5);
      id v2 = objc_allocWithZone((Class)type metadata accessor for NowPlayingArtworkProviderObjCWrapper());
      uint64_t v3 = (void *)NowPlayingArtworkProviderObjCWrapper.init(artworkProvider:)();
      id v4 = [self defaultInstance];
      [v4 setArtworkProvider:v3];

      return sub_10004D2D8((uint64_t)v7);
    }
    else
    {
      return sub_100054B1C((uint64_t)&v5, (uint64_t *)&unk_100603F20);
    }
  }
  return result;
}

void sub_10005D904()
{
}

void sub_10005D92C()
{
  sub_10004D29C(0, (unint64_t *)&qword_100603DE0);
  if (static UITraitCollection.interfaceIdiomIsMac.getter())
  {
    sub_10004D29C(0, &qword_1005F6FE0);
    BaseObjectGraph.injectIfAvailable<A>(_:)();
    uint64_t v0 = (void *)v3[0];
    if (v3[0])
    {
      void v3[4] = sub_10039BD64;
      v3[5] = 0;
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 1107296256;
      v3[2] = sub_100348764;
      v3[3] = &unk_100562F68;
      id v1 = _Block_copy(v3);
      id v2 = v0;
      swift_release();
      [v2 setAlternativeSize:v1];
      _Block_release(v1);
    }
  }
}

void sub_10005DA4C()
{
  sub_10005DA54(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10005DA54(uint64_t a1, void *a2)
{
  id v2 = a2;
  dispatch thunk of PlayerPathCoordinator.updatePlayerPaths(with:)();
}

uint64_t type metadata accessor for PodcastsDownloadsRestoreController()
{
  return self;
}

uint64_t sub_10005DB04(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  return sub_10001F6FC(a1, a2, a3, a4 & 1, *(void *)(v4 + 16), *(void (**)(uint64_t))(v4 + 24), *(void *)(v4 + 32));
}

void sub_10005DB14()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 64) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10005DB24@<X0>(unsigned char *a1@<X8>)
{
  return sub_10034A318(v1, a1);
}

void sub_10005DB40(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 64);
}

uint64_t sub_10005DB50(uint64_t a1, uint64_t a2)
{
  return sub_1000119D8(&qword_100606500, a2, (void (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController);
}

uint64_t sub_10005DB98(uint64_t a1, uint64_t a2)
{
  return sub_1000119D8(&qword_100606508, a2, (void (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController);
}

uint64_t sub_10005DBE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC8Podcasts28PodcastsFlowTabBarController_flowController;
  swift_beginAccess();
  return sub_100054BBC(v3, a1, &qword_100604710);
}

uint64_t sub_10005DC3C(uint64_t a1, uint64_t a2)
{
  return sub_1000119D8(&qword_100603DE8, a2, (void (*)(uint64_t))type metadata accessor for PodcastsFlowTabBarController);
}

uint64_t type metadata accessor for PodcastsStateTransitions()
{
  return self;
}

id sub_10005DD20()
{
  id result = sub_10002D838();
  static PodcastsStateCoordinator.shared = (uint64_t)result;
  return result;
}

void sub_10005DD40()
{
  sub_10005DE78();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10005DE20()
{
  return sub_10002F818(v0);
}

void sub_10005DE28()
{
}

uint64_t type metadata accessor for OriginBasedPodcastsStateTransitionsFinder()
{
  return self;
}

void sub_10005DE78()
{
  if (!qword_1006042E0)
  {
    sub_100044244(&qword_100604200);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1006042E0);
    }
  }
}

void *sub_10005DED4@<X0>(void *a1@<X8>)
{
  return sub_100290B9C(a1);
}

void *sub_10005DEEC@<X0>(void *a1@<X8>)
{
  return sub_10005DF08(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

void *sub_10005DF08@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, void *a2@<X8>)
{
  id result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10005DF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_100604710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10005DFB4()
{
  if (!qword_100602100)
  {
    unint64_t v0 = type metadata accessor for UninitializedCurrentValueSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100602100);
    }
  }
}

uint64_t sub_10005E01C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100008A78, 0, 0);
}

uint64_t sub_10005E11C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000B8F0;
  return sub_10000C1F0(a1, v4, v5, v6);
}

void sub_10005E1D0(id a1, SEL a2)
{
  id v2 = a1;
  RestrictionsController.presentLaunchAlertIfNeeded()();
}

uint64_t sub_10005E218(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005FA458);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005E278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100054B78(&qword_1005FA458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_10005E2E0(id a1, SEL a2)
{
  if (qword_1005F5A58 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static DownloadConsistency.application;

  return v2;
}

unint64_t sub_10005E33C()
{
  unint64_t result = qword_1005F7E68;
  if (!qword_1005F7E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F7E68);
  }
  return result;
}

uint64_t sub_10005E390(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005E3D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005E420(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005E468(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005E4B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005E4F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10005FB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005FB34(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained textSettingChanged:*(void *)(a1 + 32) value:v4];
}

id sub_1000600A0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addSubview:a2];
}

void sub_100060178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100060190(uint64_t a1, void *a2)
{
  [a2 sizeThatFits:*(double *)(a1 + 40), *(double *)(a1 + 48)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  double result = v3 + 30.0 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

void sub_1000602AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGFloat sub_1000602C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 frame];
  [*(id *)(a1 + 32) bounds];
  [v3 sizeThatFits:v4, v5];
  CGFloat v7 = v6 + 30.0;
  [*(id *)(a1 + 32) bounds];
  double Height = CGRectGetHeight(v13);
  double v9 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  [v3 setFrame:v9, 0.0, v7, Height];

  v14.origin.y = 0.0;
  v14.origin.x = v9;
  v14.size.width = v7;
  v14.size.height = Height;
  CGFloat MaxX = CGRectGetMaxX(v14);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  CGFloat result = MaxX + *(double *)(v11 + 24);
  *(CGFloat *)(v11 + 24) = result;
  return result;
}

void sub_100060560(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100060590(uint64_t a1, void *a2, void *a3)
{
  double v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  CGFloat v7 = [v6 availableActions];

  [WeakRetained showActionSheetWithActions:v7 fromButton:v5];
}

BOOL sub_100060620(id a1, IMActionController *a2)
{
  return 1;
}

id sub_100060628(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [(id)objc_opt_class() moreIcon];

  uint64_t v3 = +[MTTouchInsetsButton buttonWithType:0];
  [v3 setImage:v2 forState:0];
  [v3 setTouchInsets:-8.0, -12.0, -8.0, -12.0];
  [v3 sizeToFit];

  return v3;
}

void sub_100060714(id a1)
{
  uint64_t v1 = +[UIImage imageNamed:@"more"];
  uint64_t v2 = +[UIColor clearColor];
  +[UIImage image:inRect:withBacking:opaque:scale:](UIImage, "image:inRect:withBacking:opaque:scale:", v1, v2, 0, 0.0, 0.0, 24.0, 28.0, 0.0);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v3 = [v5 imageWithRenderingMode:2];
  double v4 = (void *)qword_10060A5E0;
  qword_10060A5E0 = v3;
}

void sub_100060B70(uint64_t a1)
{
  id v2 = +[MTApplication appController];
  [v2 handleiTMSUrlScheme:*(void *)(a1 + 32)];
}

void sub_100060BC8(uint64_t a1)
{
  id v2 = +[MTApplication appController];
  [v2 handlePodcastsUrlScheme:*(void *)(a1 + 32)];
}

void sub_100060C20(uint64_t a1)
{
  id v2 = objc_alloc_init(MTAddPodcastOrStationController);
  [(MTAddPodcastOrStationController *)v2 presentAddPodcastUIWithUrl:*(void *)(a1 + 32)];
}

void sub_100060C74(id a1)
{
  id v1 = +[IMAVPlayer sharedPlayer];
  [v1 registerAVSessionCategoryAndMode];
}

void sub_100060EF0(id a1)
{
  id v1 = +[SyncControllerFactory resolvedSyncController];
  [v1 applicationDidEnterBackground];
}

uint64_t sub_100061178(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  id v2 = [*(id *)(a1 + 32) processNotification:*(void *)(a1 + 40)];
  uint64_t v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);

  return v3(v1, v2);
}

id sub_100061230(uint64_t a1)
{
  return [*(id *)(a1 + 32) _validateFairPlayEpisodesWithCompletionHandler:&stru_10054D678];
}

uint64_t sub_100061244(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100061254(uint64_t a1)
{
  id v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:[*(id *)(a1 + 32) fairPlayMigrationBackgroundTask]];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 setFairPlayMigrationBackgroundTask:UIBackgroundTaskInvalid];
}

void sub_1000612C0(uint64_t a1)
{
  id v2 = _MTLogCategoryDRM();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MTAppDelegate_Shared]: Processing pending key invalidations.", v5, 2u);
  }

  uint64_t v3 = +[ICUserIdentity activeAccount];
  double v4 = +[MPCloudController controllerWithUserIdentity:v3];
  [v4 processPendingKeyInvalidations];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100061378(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = _MTLogCategoryDatabase();
  double v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138412290;
      uint64_t v10 = v2;
      id v5 = "Encountered error enforcing database consistency: %@";
      id v6 = v4;
      os_log_type_t v7 = OS_LOG_TYPE_ERROR;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v9, v8);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    LOWORD(v9) = 0;
    id v5 = "Finished checking database consistency";
    id v6 = v4;
    os_log_type_t v7 = OS_LOG_TYPE_INFO;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
}

void sub_100061460(id a1)
{
  uint64_t v1 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)double v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Enqueuing hidden podcasts deletion operation", v4, 2u);
  }

  id v2 = +[MTLibrary sharedInstance];
  [v2 cleanUpOldHiddenPodcasts];

  uint64_t v3 = +[MTLibrary sharedInstance];
  [v3 cleanUpNeutralInterests];
}

void sub_10006150C(id a1)
{
  uint64_t v1 = +[MTForegroundSyncUtil sharedInstance];
  [v1 updatePlaybackSettingIfNeeded];

  id v2 = +[SyncControllerFactory resolvedSyncController];
  [v2 syncEverything];

  uint64_t v3 = +[AnalyticsIdentifierManager sharedInstance];
  [v3 updateIdentifiers];

  +[MTMusicSubscriptionInfoLoader deleteMusicSubscriptionInfoIfNeeded];
  id v4 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v4 setInteger:0 forKey:kMTUserAppSessionsUserDefaultKey];
}

id sub_1000616D0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSOperationQueue);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v2;

  [*(id *)(*(void *)(a1 + 32) + 24) setMaxConcurrentOperationCount:1];
  id v5 = *(void **)(*(void *)(a1 + 32) + 24);

  return [v5 setName:@"com.apple.podcasts.libraryupdate"];
}

MTSiriPlistDumper *__cdecl sub_100061AC0(MTAppDelegate_Shared *self, SEL a2)
{
  return self->_siriDumper;
}

_TtC18PodcastsFoundation11SiriDonator *__cdecl sub_100061AC8(MTAppDelegate_Shared *self, SEL a2)
{
  return self->_siriDonator;
}

MTSecureDownloadRenewalManager *__cdecl sub_100061AD0(MTAppDelegate_Shared *self, SEL a2)
{
  return self->_secureDownloadRenewalManager;
}

PFFairPlayValidationManager *__cdecl sub_100061AD8(MTAppDelegate_Shared *self, SEL a2)
{
  return self->_fairPlayValidationManager;
}

void sub_100062088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000620A0(uint64_t a1)
{
  id v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

void sub_100062100(uint64_t a1)
{
  id v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 134217984;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%lld Feed Update Notification: Processed.", (uint8_t *)&v5, 0xCu);
  }

  id v4 = +[UIApplication sharedApplication];
  [v4 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

void sub_100062494(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) propertiesToFetch:&__NSArray0__struct limit:1];
  uint64_t v3 = [v2 firstObject];

  if (v3)
  {
    [v3 setFeedUpdateNeedsRetry:1];
    id v4 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      int v10 = 134217984;
      uint64_t v11 = v5;
      uint64_t v6 = "Retry flag set for podcast with store id %lld";
      os_log_type_t v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
      uint32_t v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v10, v9);
    }
  }
  else
  {
    id v4 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      uint64_t v6 = "Failed trying to set retry flag for a nil podcast";
      os_log_type_t v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_ERROR;
      uint32_t v9 = 2;
      goto LABEL_6;
    }
  }
}

void sub_1000626C4(uint64_t a1)
{
  id v2 = objc_alloc((Class)_TtC18PodcastsFoundation11SiriDonator);
  uint64_t v6 = objc_alloc_init(MTBackgroundTaskManager);
  id v3 = [v2 initWithBackgroundTaskManager:v6];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = v3;
}

void sub_1000628A0(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) playlistForUuid:kPlaylistITunesPlaylistUuid];
  unsigned int v2 = [v4 hidden];
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != v2)
  {
    [v4 setHidden:v3 != 0];
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_100062A28(uint64_t a1)
{
  uint64_t v2 = kMTEpisodeEntityName;
  int v3 = *(void **)(a1 + 32);
  id v4 = +[NSPredicate predicateWithFormat:@"%K IN %@", kEpisodeStoreTrackId, *(void *)(a1 + 40)];
  id v5 = [v3 objectsInEntity:v2 predicate:v4 sortDescriptors:0 returnsObjectsAsFaults:0];

  [*(id *)(a1 + 48) _removeDownloadAssetsForEpisodes:v5 shouldKeep:*(void *)(a1 + 56) forced:0];
}

void sub_100062BD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTEpisodeEntityName;
  id v4 = +[MTEpisode predicateForHLSDownloadedExcludeHidden:0];
  id v5 = [v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0];

  [*(id *)(a1 + 40) _removeDownloadAssetsForEpisodes:v5 shouldKeep:0 forced:1];
  [*(id *)(a1 + 32) saveInCurrentBlock];
}

uint64_t sub_100062C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && !*(unsigned char *)(a1 + 40)) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1000630E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000630F8(uint64_t a1)
{
  uint64_t v2 = +[MTPodcast predicateForPodcastUUID:*(void *)(a1 + 32)];
  id v3 = +[MTPodcast predicateForSubscribedAndNotHidden];
  id v4 = [v2 AND:v3];

  if ([*(id *)(a1 + 40) countOfObjectsInEntity:kMTPodcastEntityName predicate:v4]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_10006337C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100063394(uint64_t a1)
{
  uint64_t v2 = +[MTPodcast predicateForSubscribedAndNotHidden];
  id v3 = +[MTPodcast predicateForIdentifer:*(void *)(a1 + 32)];
  id v5 = [v2 AND:v3];

  id v4 = [*(id *)(a1 + 40) objectsInEntity:kMTPodcastEntityName predicate:v5 sortDescriptors:0];
  if ([v4 count]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_100063650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100063674(uint64_t a1)
{
  id v8 = +[MTPodcast predicateForPodcastWithFeedUrl:*(void *)(a1 + 32)];
  uint64_t v2 = [*(id *)(a1 + 40) objectsInEntity:kMTPodcastEntityName predicate:nil sortDescriptors:nil];
  id v3 = [v2 firstObject];
  id v4 = [v3 uuid];
  id v5 = [v4 length];

  if (v5)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    if ([v3 subscribed])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      uint64_t v6 = +[PodcastsStateCoordinator shared];
      os_log_type_t v7 = [v3 uuid];
      [v6 enableSubscriptionOnPodcastUUID:v7 from:3];
    }
  }
}

void sub_100063794(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  [v2 setUrl:*(void *)(a1 + 32)];
  [v2 setLocation:@"pssf"];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _OWORD v4[2] = sub_100063870;
  v4[3] = &unk_10054DA50;
  id v5 = *(id *)(a1 + 40);
  [v2 setCompletion:v4];
  id v3 = +[MTSubscriptionManager sharedInstance];
  [v3 subscribeToPodcastWithParams:v2];
}

uint64_t sub_100063870(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100063990(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100063C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100063C58(uint64_t a1)
{
  id v8 = +[MTPodcast predicateForIdentifer:*(void *)(a1 + 32)];
  uint64_t v2 = [*(id *)(a1 + 40) objectsInEntity:kMTPodcastEntityName predicate:nil sortDescriptors:nil];
  id v3 = [v2 firstObject];
  id v4 = [v3 uuid];
  id v5 = [v4 length];

  if (v5)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    if ([v3 subscribed])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      uint64_t v6 = +[PodcastsStateCoordinator shared];
      os_log_type_t v7 = [v3 uuid];
      [v6 enableSubscriptionOnPodcastUUID:v7 from:3];
    }
  }
}

void sub_100063D78(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  id v3 = [*(id *)(a1 + 32) feedUrl];
  [v2 setUrl:v3];

  [v2 setLocation:@"pssf"];
  id v4 = [*(id *)(a1 + 32) storeIdentifier];
  [v2 setStoreCollectionId:[v4 longLongValue]];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100063E98;
  v6[3] = &unk_10054DA50;
  id v7 = *(id *)(a1 + 40);
  [v2 setCompletion:v6];
  id v5 = +[MTSubscriptionManager sharedInstance];
  [v5 subscribeToPodcastWithParams:v2];
}

uint64_t sub_100063E98(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100063F94(uint64_t a1)
{
  id v8 = +[MTPodcast predicateForIdentifer:*(void *)(a1 + 32)];
  uint64_t v2 = [*(id *)(a1 + 40) objectsInEntity:kMTPodcastEntityName predicate:nil sortDescriptors:nil];
  id v3 = [v2 firstObject];
  id v4 = [v3 uuid];
  id v5 = [v4 length];

  if (v5)
  {
    uint64_t v6 = +[PodcastsStateCoordinator shared];
    id v7 = [v3 uuid];
    [v6 disableSubscriptionOnPodcastUUID:v7 from:3];
  }
}

void sub_1000648CC(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  id v4 = a3;
  id v5 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = [(NSError *)v4 domain];
    v10[0] = 67109890;
    v10[1] = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    __int16 v13 = 1024;
    unsigned int v14 = [(NSError *)v4 code];
    __int16 v15 = 2112;
    uint64_t v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User notifications request granted %x with error %@ - %d - %@", (uint8_t *)v10, 0x22u);
  }
  id v7 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v7 setBool:1 forKey:kMTDidPromptForNotificationsPermissionsKey];

  id v8 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v8 setBool:v3 forKey:kMTNotificationStatusIsAuthorizedKey];

  if (v3)
  {
    uint32_t v9 = +[MTNotificationBadgeMigrationController sharedInstance];
    [v9 performMigrationIfNecessary];
  }
}

void sub_100064C28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MTLogCategoryNotifications();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Showing the User the notifications pre-warming sheet.", buf, 2u);
    }

    id v4 = [*(id *)(a1 + 32) preWarmSheetMetricsOverlayDictionary];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100064D50;
    v6[3] = &unk_10054DB98;
    id v7 = v3;
    [v4 addFinishBlock:v6];
  }
  else if (v5)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to receive a AMSUserNotificationAuthorizationResult.", buf, 2u);
  }
}

void sub_100064D50(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = a2;
    BOOL v5 = [v3 request];
    [v5 setMetricsOverlay:v4];
  }
  id v6 = objc_alloc_init((Class)NSDate);
  id v7 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v7 setObject:v6 forKey:kMTNotificationsPreWarmSheetShownDateKey];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100064E58;
  block[3] = &unk_10054D570;
  id v9 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_100064E58(uint64_t a1)
{
  id v7 = +[AMSUIDynamicViewController createBagForSubProfile];
  uint64_t v2 = +[UIViewController mt_rootViewController];
  id v3 = objc_alloc((Class)AMSUIEngagementTask);
  id v4 = [*(id *)(a1 + 32) request];
  id v5 = [v3 initWithRequest:v4 bag:v7 presentingViewController:v2];

  id v6 = [v5 presentEngagement];
  [v6 addFinishBlock:&stru_10054DB50];
}

void sub_100064F28(id a1, AMSEngagementResult *a2, NSError *a3)
{
  id v3 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v3 setBool:1 forKey:kMTDidPromptForNotificationsPermissionsKey];

  id v4 = +[UNUserNotificationCenter currentNotificationCenter];
  [v4 getNotificationSettingsWithCompletionHandler:&stru_10054DB70];
}

void sub_100064FAC(id a1, UNNotificationSettings *a2)
{
  BOOL v2 = (id)[(UNNotificationSettings *)a2 authorizationStatus] == (id)2;
  id v3 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v3 setBool:v2 forKey:kMTNotificationStatusIsAuthorizedKey];
}

void sub_1000651B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [v5 userId];
    id v8 = (void *)v7;
    if (v7) {
      id v9 = (__CFString *)v7;
    }
    else {
      id v9 = &stru_10056A8A0;
    }
    int v10 = v9;

    uint64_t v11 = [v5 clientId];
    uint64_t v12 = (void *)v11;
    if (v11) {
      __int16 v13 = (__CFString *)v11;
    }
    else {
      __int16 v13 = &stru_10056A8A0;
    }
    unsigned int v14 = v13;

    [*(id *)(a1 + 32) setValue:v10 forKey:@"userId"];
    [*(id *)(a1 + 32) setValue:v14 forKey:@"clientId"];
  }
  else
  {
    __int16 v15 = _MTLogCategoryMetrics();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = [v6 description];
      int v17 = 138412290;
      char v18 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to fetch AnalyticsUserIdentifier from AMS for notification manager with error %@", (uint8_t *)&v17, 0xCu);
    }
  }
  [*(id *)(a1 + 40) finishWithResult:*(void *)(a1 + 32)];
}

void sub_1000654C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 authorizationStatus] == (id)2)
  {
    (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v3 hasEnabledSettings]);
  }
  else
  {
    id v4 = _MTLogCategoryNotifications();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "canSendNotifications is NO (reason: not authorized)", v5, 2u);
    }

    (*(void (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0);
  }
}

void sub_1000658D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v18 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100065910(uint64_t a1)
{
  BOOL v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = UIBackgroundTaskInvalid;
}

void sub_100065970(void *a1)
{
  BOOL v2 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    int v9 = 138412290;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[DONE] processing notifications for '%@'", (uint8_t *)&v9, 0xCu);
  }

  uint64_t v4 = a1[5];
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
  id v5 = +[UIApplication sharedApplication];
  [v5 endBackgroundTask:*(void *)(*(void *)(a1[6] + 8) + 24)];

  *(void *)(*(void *)(a1[6] + 8) + 24) = UIBackgroundTaskInvalid;
  id v6 = _MTLogCategoryNotifications();
  uint64_t v7 = v6;
  os_signpost_id_t v8 = a1[7];
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    LOWORD(v9) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, v8, "ProcessNotifications", "", (uint8_t *)&v9, 2u);
  }
}

void sub_100065ACC(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (WeakRetained && (a2 & 1) != 0)
  {
    id v6 = [WeakRetained workQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100065BB0;
    block[3] = &unk_10054DC88;
    uint64_t v7 = *(void *)(a1 + 48);
    void block[4] = v5;
    uint64_t v10 = v7;
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v6, block);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100065BB0(uint64_t a1)
{
  BOOL v2 = [*(id *)(a1 + 32) computeNotificationsWithSchedulingOptions:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) markEpisodesAsNotified:v2];
  uint64_t v3 = dispatch_get_global_queue(21, 0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100065C9C;
  v6[3] = &unk_10054DC60;
  uint64_t v4 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v2;
  uint64_t v9 = *(void *)(a1 + 48);
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

id sub_100065C9C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) scheduleLocalNotifications:*(void *)(a1 + 40) schedulingOptions:*(void *)(a1 + 56) completion:*(void *)(a1 + 48)];
}

void sub_100065E10(uint64_t a1)
{
  BOOL v2 = +[NSMutableArray array];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = a1;
  uint64_t v3 = [*(id *)(a1 + 32) podcasts];
  id v4 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v22 + 1) + 8 * i) episodes];
        uint64_t v9 = NSStringFromSelector("uuid");
        uint64_t v10 = [v8 valueForKey:v9];

        if (v10) {
          [v2 addObjectsFromArray:v10];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v5);
  }

  if ([v2 count])
  {
    uint64_t v11 = +[NSPredicate predicateWithFormat:@"%K in %@", kEpisodeUuid, v2];
    uint64_t v12 = [*(id *)(v17 + 40) objectsInEntity:kMTEpisodeEntityName predicate:v11 sortDescriptors:0];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v13 = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v19;
      do
      {
        for (j = 0; j != v14; j = (char *)j + 1)
        {
          if (*(void *)v19 != v15) {
            objc_enumerationMutation(v12);
          }
          [*(id *)(*((void *)&v18 + 1) + 8 * (void)j) setSentNotification:1];
        }
        id v14 = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
      }
      while (v14);
    }
    [*(id *)(v17 + 40) saveInCurrentBlock];
  }
}

NSString *__cdecl sub_1000666D4(id a1, MTNotificationEpisode *a2)
{
  return [(MTNotificationEpisode *)a2 podcastUuid];
}

void sub_100066990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1000669B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    *(unsigned char *)(v1 + 24) = 1;
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      [*(id *)(a1 + 32) removeObserver:];
      uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
      id v4 = *(void **)(v3 + 40);
      *(void *)(v3 + 40) = 0;
    }
    id v5 = +[UIApplication sharedApplication];
    [v5 endIgnoringInteractionEvents];

    id v6 = +[MTNotificationSettingsPresentationController shared];
    [v6 presentModalWithHighlightedPodcastUuid:*(void *)(a1 + 40)];
  }
}

uint64_t sub_100066A7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100066FC8(uint64_t a1)
{
  id v2 = +[LSApplicationWorkspace defaultWorkspace];
  [v2 openURL:*(void *)(a1 + 32) withOptions:0];
}

void sub_100067400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100067420(uint64_t a1)
{
  id v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

void sub_100067480(uint64_t a1)
{
  id v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

void sub_1000678CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000678EC(id a1, NSNumber *a2)
{
  return +[NSString stringWithFormat:@"%@", a2];
}

void sub_100067920(uint64_t a1)
{
  id v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

void sub_100067980(uint64_t a1)
{
  id v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

void sub_100068318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_10006838C(uint64_t a1)
{
  uint64_t v2 = kMTEpisodeEntityName;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = +[MTEpisode sortDescriptorsForPubDateAscending:1];
  id v6 = [v3 objectDictionariesInEntity:v2 predicate:v4 sortDescriptors:v5 propertiesToFetch:*(void *)(a1 + 48) includeObjectId:0];

  id v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", *(void *)(a1 + 56), *(void *)(a1 + 64), 0);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000684C4;
  uint64_t v12[3] = &unk_10054DDD0;
  id v13 = *(id *)(a1 + 32);
  id v14 = v7;
  id v8 = v7;
  uint64_t v9 = [v6 mt_compactMap:v12];
  uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

id sub_1000684C4(uint64_t a1, void *a2)
{
  uint64_t v3 = kEpisodeUuid;
  id v4 = a2;
  id v5 = [v4 objectForKeyedSubscript:v3];
  id v6 = [*(id *)(a1 + 32) objectDictionaryForUuid:v5 entityName:kMTEpisodeEntityName byAddingComputedProperties:*(void *)(a1 + 40) toFetchedObjectDictionary:v4];

  return v6;
}

void sub_100068780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

uint64_t sub_1000687B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000687C8(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained
    && a2
    && ([*(id *)(a1 + 32) podcasts],
        id v4 = objc_claimAutoreleasedReturnValue(),
        id v5 = [v4 count],
        v4,
        v5))
  {
    id v6 = dispatch_group_create();
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id obj = [*(id *)(a1 + 32) podcasts];
    id v7 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v21;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v20 + 1) + 8 * (void)v10);
          dispatch_group_enter(v6);
          uint64_t v12 = *(void *)(a1 + 56);
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472;
          void v18[2] = sub_100068A28;
          v18[3] = &unk_10054D570;
          long long v19 = v6;
          [WeakRetained scheduleLocalNotificationForPodcast:v11 schedulingOptions:v12 completion:v18];

          uint64_t v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v8);
    }

    id v13 = dispatch_get_global_queue(21, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100068A30;
    block[3] = &unk_10054D6E8;
    id v17 = *(id *)(a1 + 40);
    dispatch_group_notify(v6, v13, block);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100068A28(uint64_t a1)
{
}

uint64_t sub_100068A30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100068BE4(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = +[NSUUID UUID];
    uint64_t v5 = [v4 UUIDString];

    id v6 = NSTemporaryDirectory();
    v47[0] = v6;
    v47[1] = v5;
    uint64_t v41 = (void *)v5;
    id v7 = +[NSArray arrayWithObjects:v47 count:2];
    id v8 = +[NSURL fileURLWithPathComponents:v7];
    uint64_t v9 = [v3 pathExtension];
    uint64_t v10 = [v8 URLByAppendingPathExtension:v9];

    uint64_t v11 = +[NSFileManager defaultManager];
    id v44 = 0;
    LODWORD(v7) = [v11 copyItemAtURL:v3 toURL:v10 error:&v44];

    id v12 = v44;
    if (v7)
    {
      if (v12)
      {
        id v13 = _MTLogCategoryNotifications();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v46 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to copy image to URL for notification with error: %@", buf, 0xCu);
        }
      }
      id v14 = +[UNNotificationContent mt_imageAttachmentForCacheKey:*(void *)(a1 + 32) imageURL:v10];
      if (v14) {
        [*(id *)(a1 + 40) addObject:v14];
      }
    }
    uint64_t v39 = v12;
    id v40 = (void *)v10;
    id v15 = objc_alloc_init((Class)UNMutableNotificationContent);
    uint64_t v16 = [*(id *)(a1 + 48) title];
    [v15 setTitle:v16];

    id v17 = [*(id *)(a1 + 48) author];
    long long v18 = [*(id *)(a1 + 48) album];
    long long v19 = +[NSString stringWithFormat:@"%@ — %@", v17, v18];
    [v15 setSubtitle:v19];

    [v15 setAttachments:*(void *)(a1 + 40)];
    long long v20 = [MTNotificationEpisode alloc];
    long long v21 = [*(id *)(a1 + 48) episodeUuid];
    id v22 = [*(id *)(a1 + 48) episodeStoreId];
    long long v23 = [*(id *)(a1 + 48) title];
    long long v24 = [*(id *)(a1 + 48) pubDate];
    [*(id *)(a1 + 48) duration];
    double v26 = v25;
    unsigned __int8 v27 = [*(id *)(a1 + 48) isVideo];
    uint64_t v28 = [*(id *)(a1 + 48) podcastUuid];
    uint64_t v29 = [*(id *)(a1 + 48) author];
    LOBYTE(v38) = v27;
    uint64_t v30 = -[MTNotificationEpisode initWithUuid:storeTrackId:bestTitle:bestSummary:pubDate:duration:byteSize:isVideo:sortPropertyValues:podcastUuid:podcastTitle:podcastStoreCollectionId:](v20, "initWithUuid:storeTrackId:bestTitle:bestSummary:pubDate:duration:byteSize:isVideo:sortPropertyValues:podcastUuid:podcastTitle:podcastStoreCollectionId:", v21, v22, v23, 0, v24, 0, v26, v38, &__NSDictionary0__struct, v28, v29, [*(id *)(a1 + 48) podcastStoreId]);

    [v15 mt_setUserInfoEpisode:v30];
    uint64_t v31 = [*(id *)(a1 + 48) instanceIdentifier];
    uint64_t v32 = [v31 UUIDString];
    uint64_t v33 = +[UNNotificationRequest mt_uniqueRequestIdentifierForPlayerItem:v32];

    int64_t v34 = +[UNNotificationRequest requestWithIdentifier:v33 content:v15 trigger:0];
    double v35 = _MTLogCategoryNotifications();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      long long v36 = [*(id *)(a1 + 48) title];
      *(_DWORD *)buf = 138412290;
      id v46 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Requesting to post player item notification for: %@", buf, 0xCu);
    }
    uint64_t v37 = +[UNUserNotificationCenter currentNotificationCenter];
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_1000690C8;
    v42[3] = &unk_10054DE48;
    id v43 = *(id *)(a1 + 48);
    [v37 addNotificationRequest:v34 withCompletionHandler:v42];
  }
}

void sub_1000690C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [*(id *)(a1 + 32) title];
    id v6 = [v3 domain];
    int v7 = 138413058;
    id v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    __int16 v11 = 1024;
    unsigned int v12 = [v3 code];
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notification request for player item '%@'with error: %@ - %d - %@", (uint8_t *)&v7, 0x26u);
  }
}

void sub_10006960C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    int v7 = +[NSUUID UUID];
    id v8 = [v7 UUIDString];

    __int16 v9 = NSTemporaryDirectory();
    v50[0] = v9;
    v50[1] = v8;
    uint64_t v10 = +[NSArray arrayWithObjects:v50 count:2];
    __int16 v11 = +[NSURL fileURLWithPathComponents:v10];
    unsigned int v12 = [v5 pathExtension];
    __int16 v13 = [v11 URLByAppendingPathExtension:v12];

    id v14 = +[NSFileManager defaultManager];
    id v47 = 0;
    LODWORD(v11) = [v14 copyItemAtURL:v5 toURL:v13 error:&v47];
    id v15 = v47;

    if (!v11)
    {
      long long v24 = _MTLogCategoryNotifications();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v49 = v15;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to copy image to URL for notification with error: %@", buf, 0xCu);
      }

      double v25 = _MTLogCategoryNotifications();
      uint64_t v16 = v25;
      os_signpost_id_t v26 = *(void *)(a1 + 96);
      if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_END, v26, "LOAD_NOTIFICATION_ARTWORK", "FAILED_COPY", buf, 2u);
      }
      goto LABEL_22;
    }
    uint64_t v16 = +[UNNotificationContent mt_imageAttachmentForCacheKey:*(void *)(a1 + 32) imageURL:v13];
    if (v16)
    {
      [*(id *)(a1 + 40) addObject:v16];
      id v17 = _MTLogCategoryNotifications();
      long long v18 = v17;
      os_signpost_id_t v19 = *(void *)(a1 + 96);
      if (v19 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v17)) {
        goto LABEL_21;
      }
      *(_WORD *)buf = 0;
      long long v20 = "SUCCESS";
    }
    else
    {
      unsigned __int8 v27 = _MTLogCategoryNotifications();
      long long v18 = v27;
      os_signpost_id_t v19 = *(void *)(a1 + 96);
      if (v19 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v27)) {
        goto LABEL_21;
      }
      *(_WORD *)buf = 0;
      long long v20 = "FAILED_ATTACHMENT";
    }
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v19, "LOAD_NOTIFICATION_ARTWORK", v20, buf, 2u);
LABEL_21:

LABEL_22:
    goto LABEL_23;
  }
  long long v21 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v49 = v6;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Failed to load artwork for notification: %@", buf, 0xCu);
  }

  id v22 = _MTLogCategoryNotifications();
  id v8 = v22;
  os_signpost_id_t v23 = *(void *)(a1 + 96);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v23, "LOAD_NOTIFICATION_ARTWORK", "FAILED_LOAD", buf, 2u);
  }
LABEL_23:

  id v28 = objc_alloc_init((Class)UNMutableNotificationContent);
  uint64_t v29 = [*(id *)(a1 + 48) identifier];
  [v28 setCategoryIdentifier:v29];

  uint64_t v30 = [*(id *)(a1 + 48) identifier];
  [v28 setThreadIdentifier:v30];

  [v28 setTitle:*(void *)(a1 + 56)];
  [v28 setBody:*(void *)(a1 + 64)];
  if ([*(id *)(a1 + 40) count]) {
    uint64_t v31 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v31 = 0;
  }
  [v28 setAttachments:v31];
  [v28 setSummaryArgument:*(void *)(a1 + 72)];
  [v28 setSummaryArgumentCount:*(void *)(a1 + 104)];
  uint64_t v32 = [*(id *)(a1 + 80) uuid];
  uint64_t v33 = [*(id *)(a1 + 80) episodes];
  [v28 mt_setUserInfoPodcastUuid:v32 episodes:v33];

  int64_t v34 = [*(id *)(a1 + 80) uuid];
  double v35 = +[UNNotificationRequest mt_uniqueRequestIdentifierForPodcastUuid:v34];

  long long v36 = +[UNNotificationRequest requestWithIdentifier:v35 content:v28 trigger:0];
  [v36 mt_setSchedulingOptions:*(void *)(a1 + 112)];
  uint64_t v37 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v38 = [*(id *)(a1 + 80) descriptionForNotificationLogging];
    *(_DWORD *)buf = 138412290;
    id v49 = v38;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Requesting to post notification for: %@", buf, 0xCu);
  }
  uint64_t v39 = +[UNUserNotificationCenter currentNotificationCenter];
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_100069C10;
  v42[3] = &unk_10054DE98;
  id v40 = *(id *)(a1 + 72);
  uint64_t v41 = *(void *)(a1 + 104);
  id v43 = v40;
  uint64_t v46 = v41;
  id v44 = *(id *)(a1 + 80);
  id v45 = *(id *)(a1 + 88);
  [v39 addNotificationRequest:v36 withCompletionHandler:v42];
}

void sub_100069C10(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 56);
    int v7 = [v3 domain];
    *(_DWORD *)buf = 138413314;
    uint64_t v18 = v5;
    __int16 v19 = 2048;
    uint64_t v20 = v6;
    __int16 v21 = 2112;
    id v22 = v7;
    __int16 v23 = 1024;
    unsigned int v24 = [v3 code];
    __int16 v25 = 2112;
    id v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notification request for podcast '%@' with %lu episodes sent with error: %@ - %d - %@", buf, 0x30u);
  }
  id v8 = +[MTFeedUpdateMetricsAction notificationScheduled];
  __int16 v9 = +[MTFeedUpdateMetricsDataKey podcastUuid];
  uint64_t v10 = [*(id *)(a1 + 40) uuid];
  v16[0] = v10;
  __int16 v11 = +[MTFeedUpdateMetricsDataKey episodeCount];
  v15[1] = v11;
  unsigned int v12 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
  v16[1] = v12;
  __int16 v13 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];
  +[IMMetrics recordUserAction:v8 dataSource:0 withData:v13];

  uint64_t v14 = *(void *)(a1 + 48);
  if (v14) {
    (*(void (**)(void))(v14 + 16))();
  }
}

void sub_100069EB4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTEpisodeEntityName;
  id v4 = +[MTEpisode predicateForSentNotification:1];
  uint64_t v5 = [v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * (void)v10) setSentNotification:0 v11];
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }

  [*(id *)(a1 + 32) saveInCurrentBlock];
}

NSString *__cdecl sub_10006A49C(id a1, MTNotificationEpisode *a2)
{
  return [(MTNotificationEpisode *)a2 uuid];
}

id sub_10006A51C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0;
  long long v12 = &v11;
  uint64_t v13 = 0x3032000000;
  long long v14 = sub_100056E40;
  id v15 = sub_1000571F8;
  id v16 = 0;
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10006A648;
  v8[3] = &unk_10054DF08;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v11;
  [v4 performBlockAndWait:v8];
  id v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);

  return v6;
}

void sub_10006A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006A648(uint64_t a1)
{
  id v8 = (id)objc_opt_new();
  uint64_t v2 = [*(id *)(a1 + 32) uuid];
  [v8 setUuid:v2];

  [v8 setStoreTrackId:[*(id *)(a1 + 32) storeTrackId]];
  id v3 = [*(id *)(a1 + 32) podcastTitle];
  [v8 setPodcastTitle:v3];

  id v4 = +[MTEpisodeLookupUtil sharedInstance];
  id v5 = [v4 findEpisodeWithRequest:v8];
  id v6 = [v5 uuid];

  if (v6)
  {
    id v7 = +[MTBaseEpisodeListManifest mediaItemForEpisodeWithUUID:v6];
  }
  else
  {
    id v7 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v7);
  if (v6) {
}
  }

id sub_10006A76C(id a1, MTNotificationEpisode *a2)
{
  int64_t v2 = [(MTNotificationEpisode *)a2 storeTrackId];
  if (+[MTStoreIdentifier isEmpty:v2])
  {
    id v3 = 0;
  }
  else
  {
    id v3 = +[NSNumber numberWithLongLong:v2];
  }

  return v3;
}

void sub_10006AA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10006AA48(uint64_t a1, uint64_t a2)
{
  int v3 = a2 == 0;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v6 = [WeakRetained isDeviceStorageSpaceAvailableForPersistence];

  if (v3 != v6)
  {
    id v7 = objc_loadWeakRetained(v4);
    [v7 setIsDeviceStorageSpaceAvailableForPersistence:a2 == 0];

    id v8 = objc_loadWeakRetained(v4);
    [v8 _reCheck];
  }
}

void sub_10006AE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10006AEA0(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 currentEpisodeLimitAllowsAutomaticDownloads];
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v3 episodeLimitResolvedValue];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v3 deletePlayedEpisodesResolvedValue];
  int v2 = os_feature_enabled_serial_sort_auto_downloads();
  if (v2) {
    LOBYTE(v2) = [v3 currentEpisodeLimitIsNextNEpisodes];
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v2;
}

void sub_10006B2B0(id *a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = a1[4];
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        id v8 = [a1[5] episodeForUuid:v7];
        id v9 = [v8 podcast];
        unsigned __int8 v10 = [v9 isDark];

        if ((v10 & 1) == 0)
        {
          uint64_t v11 = [v8 podcast];
          unsigned __int8 v12 = [v11 hidden];

          if ((v12 & 1) == 0)
          {
            uint64_t v13 = [(id)objc_opt_class() _freeSpace];
            if ((unint64_t)(v13 - (unsigned char *)[v8 byteSize]) >= 0xC800001) {
              [a1[7] addObject:v7];
            }
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_10006B60C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006B630(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [v1 episodeUuids];
  [v1 autodownloadEpisodesChanged:v2];
}

void sub_10006B764(id a1)
{
  qword_10060A628 = objc_opt_new();

  _objc_release_x1();
}

id sub_10006B8F0(uint64_t a1)
{
  uint64_t v2 = kMTPodcastEntityName;
  id v3 = *(void **)(a1 + 32);
  id v4 = +[NSPredicate predicateWithFormat:@"%K in %@", kPodcastUuid, *(void *)(a1 + 40)];
  uint64_t v5 = [v3 objectsInEntity:v2 predicate:v4 sortDescriptors:0];

  id v6 = objc_alloc_init((Class)NSMutableSet);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
  uint64_t v9 = kPlaylistUuid;
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v31;
    do
    {
      unsigned __int8 v12 = 0;
      do
      {
        if (*(void *)v31 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = [*(id *)(*((void *)&v30 + 1) + 8 * (void)v12) playlists];
        long long v14 = [v13 valueForKey:v9];
        [v6 unionSet:v14];

        unsigned __int8 v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v7 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v10);
  }

  long long v15 = *(void **)(a1 + 32);
  uint64_t v16 = kMTPlaylistEntityName;
  long long v17 = +[NSPredicate predicateWithFormat:@"%K in %@", v9, v6];
  uint64_t v18 = [v15 objectsInEntity:v16 predicate:v17 sortDescriptors:0];

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v19 = v18;
  id v20 = [v19 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v27;
    do
    {
      __int16 v23 = 0;
      do
      {
        if (*(void *)v27 != v22) {
          objc_enumerationMutation(v19);
        }
        [*(id *)(*((void *)&v26 + 1) + 8 * (void)v23) setNeedsUpdate:1];
        __int16 v23 = (char *)v23 + 1;
      }
      while (v21 != v23);
      id v21 = [v19 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v21);
  }

  return [*(id *)(a1 + 32) saveInCurrentBlock];
}

void sub_10006BC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006BCB0(uint64_t a1)
{
  uint64_t v2 = +[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate];
  id v3 = [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:v2 sortDescriptors:0];
  if ([v3 count])
  {
    id v4 = [v3 valueForKey:kPlaylistUuid];
    uint64_t v5 = +[NSSet setWithArray:v4];

    id v6 = +[NSSet setWithArray:*(void *)(a1 + 40)];
    if ([v5 isEqualToSet:v6])
    {
      long long v17 = v6;
      uint64_t v18 = v5;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v7 = v3;
      id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v20;
        do
        {
          for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v20 != v10) {
              objc_enumerationMutation(v7);
            }
            unsigned __int8 v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
            uint64_t v13 = [v12 uuid:v17, v18, v19];
            long long v14 = (char *)[*(id *)(a1 + 40) count];
            long long v15 = &v14[~(unint64_t)[*(id *)(a1 + 40) indexOfObject:v13]];
            if (v15 != [v12 sortOrder]) {
              [v12 setSortOrder:v15];
            }
          }
          id v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
        }
        while (v9);
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) saveInCurrentBlock];
      uint64_t v16 = +[SyncKeysRepository shared];
      [v16 setIsPlaylistSyncDirty:1];

      id v6 = v17;
      uint64_t v5 = v18;
    }
  }
}

void sub_10006BFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006C010(uint64_t a1)
{
  uint64_t v2 = +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts];
  id v3 = [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:v2 sortDescriptors:0];
  if ([v3 count])
  {
    long long v22 = v2;
    id v4 = +[NSMutableSet set];
    __int16 v23 = +[NSMutableArray array];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          uint64_t v11 = [v10 uuid];
          unint64_t v12 = (unint64_t)[*(id *)(a1 + 40) indexOfObject:v11];
          if (v12 != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v13 = (char *)[v5 count] + ~v12;
            if (v13 != [v10 sortOrder])
            {
              [v10 setSortOrder:v13];
              [v23 addObject:v11];
              long long v14 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v10 syncType]);
              [v4 addObject:v14];
            }
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v28 objects:v33 count:16];
      }
      while (v7);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) saveInCurrentBlock];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v15 = v4;
    id v16 = [v15 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v25;
      do
      {
        for (j = 0; j != v17; j = (char *)j + 1)
        {
          if (*(void *)v25 != v18) {
            objc_enumerationMutation(v15);
          }
          id v20 = [*(id *)(*((void *)&v24 + 1) + 8 * (void)j) integerValue];
          long long v21 = +[SyncKeysRepository shared];
          [v21 markSubscriptionSyncDirty:1 for:v20];
        }
        id v17 = [v15 countByEnumeratingWithState:&v24 objects:v32 count:16];
      }
      while (v17);
    }

    [*(id *)(a1 + 48) _markPlaylistsForUpdateForPodcastUuids:v23];
    uint64_t v2 = v22;
  }
}

void sub_10006C42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006C444(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 mutableOrderedSetValueForKey:kPlaylistEpisodes];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10006C560;
    v6[3] = &unk_10054E058;
    id v7 = *(id *)(a1 + 48);
    [v4 sortUsingComparator:v6];
    [v3 setContainerOrder:2];
    [v3 setNeedsUpdate:1];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) saveInCurrentBlock];
    id v5 = +[SyncKeysRepository shared];
    [v5 setIsPlaylistSyncDirty:1];
  }
}

id sub_10006C560(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = [v5 uuid];
  if ([v7 containsObject:v8])
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = [v5 uuid];
    uint64_t v11 = (uint64_t)[v9 indexOfObject:v10];
  }
  else
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }

  unint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = [v6 uuid];
  if ([v12 containsObject:v13])
  {
    long long v14 = *(void **)(a1 + 32);
    id v15 = [v6 uuid];
    uint64_t v16 = (uint64_t)[v14 indexOfObject:v15];
  }
  else
  {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }

  id v17 = +[NSNumber numberWithUnsignedInteger:v11];
  uint64_t v18 = +[NSNumber numberWithUnsignedInteger:v16];
  id v19 = [v17 compare:v18];

  return v19;
}

void sub_10006C7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006C7EC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 mutableOrderedSetValueForKey:kPlaylistSettings];
    id v5 = [v4 valueForKey:kPlaylistSettingUuid];
    id v6 = [v5 set];

    id v7 = +[NSSet setWithArray:*(void *)(a1 + 48)];
    if ([v6 isEqualToSet:v7])
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      _OWORD v9[2] = sub_10006C968;
      uint64_t v9[3] = &unk_10054E0A8;
      id v10 = *(id *)(a1 + 48);
      [v4 sortUsingComparator:v9];
      [v3 setContainerOrder:2];
      [v3 setNeedsUpdate:1];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) saveInCurrentBlock];
      uint64_t v8 = +[SyncKeysRepository shared];
      [v8 setIsPlaylistSyncDirty:1];
    }
  }
}

id sub_10006C968(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = [a2 uuid];
  id v8 = [v5 indexOfObject:v7];

  id v9 = *(void **)(a1 + 32);
  id v10 = [v6 uuid];

  id v11 = [v9 indexOfObject:v10];
  unint64_t v12 = +[NSNumber numberWithUnsignedInteger:v8];
  uint64_t v13 = +[NSNumber numberWithUnsignedInteger:v11];
  id v14 = [v12 compare:v13];

  return v14;
}

id sub_10006CBD0(uint64_t a1, void *a2)
{
  return _[a2 isAllowedForController:*(void *)(a1 + 32)];
}

void sub_10006CD84(id a1, id a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector())
  {
    [v2 updateActionSheet];
  }
  else if (objc_opt_respondsToSelector())
  {
    [v2 updatePopover];
  }
}

uint64_t sub_10006CDF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10006CEB8(id a1, id a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector())
  {
    [v2 dismissActionSheet];
  }
  else if (objc_opt_respondsToSelector())
  {
    [v2 dismissPopover];
  }
}

uint64_t sub_10006CF28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10006CFF8(uint64_t a1, void *a2)
{
  return [a2 setController:*(void *)(a1 + 32)];
}

void sub_10006D0E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10006D104(uint64_t a1, void *a2, void *a3)
{
  id v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  id v7 = [v6 availableActions];

  [WeakRetained showActionSheetWithActions:v7 fromButton:v5];
}

BOOL sub_10006D194(id a1, IMActionController *a2)
{
  return 1;
}

void sub_10006DE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006DE98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = v3;
  if (*(unsigned char *)(a1 + 40))
  {
    [v3 setIgnoreSystemFilterPredicates:1];
    id v3 = v8;
  }
  id v4 = [v3 items];
  if ([v4 count])
  {
    uint64_t v5 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) arrayByAddingObjectsFromArray:v4];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
}

BOOL sub_10006DF38(id a1, MPMediaItem *a2)
{
  return !+[MTMediaLibraryUtil isDeletingPersistentId:[(MPMediaItem *)a2 persistentID]];
}

void sub_10006EA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006EA2C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v8 = WeakRetained;
  if (!v5)
  {
    id v9 = _MTLogCategoryDRM();
    BOOL v11 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (!v11) {
        goto LABEL_9;
      }
      unint64_t v12 = [a1[5] URL];
      id v13 = [a1[4] episodeStoreId];
      id v14 = [v6 localizedDescription];
      int v16 = 138412802;
      id v17 = v12;
      __int16 v18 = 2048;
      id v19 = v13;
      __int16 v20 = 2114;
      long long v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DRM/MTPlayerItem: Failed to create content key session for asset: %@, adamID: %lld with error: %{public}@.", (uint8_t *)&v16, 0x20u);
    }
    else
    {
      if (!v11) {
        goto LABEL_9;
      }
      unint64_t v12 = [a1[5] URL];
      id v15 = [a1[4] episodeStoreId];
      int v16 = 138412546;
      id v17 = v12;
      __int16 v18 = 2048;
      id v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DRM/MTPlayerItem: No session or error returned for asset: %@, adamID: %lld.", (uint8_t *)&v16, 0x16u);
    }

    goto LABEL_9;
  }
  [WeakRetained setFairPlayKeySession:v5];
  id v9 = [v8 fairPlayKeyLoader];
  id v10 = [a1[4] fairPlayKeySession];
  [v9 startKeyRequestWithSession:v10 completion:0];

LABEL_9:
}

void sub_10006F33C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v10 = 0;
    unsigned __int8 v2 = [v1 completeAndReturnError:&v10];
    id v3 = v10;
    id v4 = _MTLogCategoryPlayback();
    id v5 = v4;
    if (v2)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        id v6 = "Stream written to disk";
        id v7 = v5;
        os_log_type_t v8 = OS_LOG_TYPE_DEBUG;
        uint32_t v9 = 2;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, buf, v9);
      }
    }
    else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v3;
      id v6 = "Error completing cache: %@";
      id v7 = v5;
      os_log_type_t v8 = OS_LOG_TYPE_ERROR;
      uint32_t v9 = 12;
      goto LABEL_7;
    }
  }
}

void sub_10006F5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F5D0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) episodeForPlayerItem:*(void *)(a1 + 40)];

  return _objc_release_x1();
}

void sub_10006FA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006FA84(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) episode];
  unsigned __int8 v2 = [v6 podcast];
  uint64_t v3 = [v2 bestAvailableStoreCleanURL];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10006FFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006FFCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48) && ([*(id *)(a1 + 32) isDownloaded] & 1) == 0)
  {
    uint64_t v2 = [*(id *)(a1 + 32) enclosureURL];
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    id v5 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "invalidate asset is local but missing downloads. Switched to streaming URL %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) assetURL];
    _objc_release_x1();
  }
}

void sub_1000703FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100070430(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) channelForStoreId:*(void *)(a1 + 48)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 subscriptionActive];
}

void sub_100070490(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) episodeUuid];
  id v7 = [v2 episodeForUuid:v3];

  uint64_t v4 = [v7 bestUrl];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10007065C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100070700;
  v5[3] = &unk_10054E348;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  long long v7 = *(_OWORD *)(a1 + 40);
  id v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
}

void sub_100070700(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100070790;
  v3[3] = &unk_10054E320;
  id v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  [v2 retrieveArtwork:v3 withSize:*(double *)(a1 + 48), *(double *)(a1 + 56)];
}

void sub_100070790(uint64_t a1, UIImage *image)
{
  uint64_t v2 = *(void *)(a1 + 32);
  UIImagePNGRepresentation(image);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, 0);
}

void sub_100070A58(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100070B04;
  v6[3] = &unk_10054E398;
  id v4 = *(id *)(a1 + 32);
  id v7 = v3;
  id v8 = v4;
  id v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
}

uint64_t sub_100070B04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100070B18(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100070BC4;
  v6[3] = &unk_10054E398;
  id v4 = *(id *)(a1 + 32);
  id v7 = v3;
  id v8 = v4;
  id v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
}

uint64_t sub_100070BC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100070BD8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  [a2 imageWithSize:*(double *)(a1 + 40), *(double *)(a1 + 48)];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100070F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100070FC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) episodeUuid];
  uint64_t v15 = [v2 episodeForUuid:v3];

  if (v15)
  {
    uint64_t v4 = [v15 bestSummary];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v7 = [v15 valueForKey:kEpisodePubDate];
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    uint32_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    if ([v15 isExplicit])
    {
      uint64_t v10 = +[NSBundle mainBundle];
      uint64_t v11 = [v10 localizedStringForKey:@"ATV_EXPLICIT" value:&stru_10056A8A0 table:0];
      uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }
  }

  return _objc_release_x1();
}

void sub_100071698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000716BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) podcast];
  uint64_t v3 = [v2 title];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v9 = [*(id *)(a1 + 32) valueForKey:kEpisodePubDate];
  uint64_t v6 = [v9 verboseDisplayString];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100071F14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [[MTEpisodeManifest alloc] initWithEpisodeUuid:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007277C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v6);
  _Unwind_Resume(a1);
}

Class sub_1000727E4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10060A640)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_100072928;
    void v3[4] = &unk_10054D910;
    v3[5] = v3;
    long long v4 = off_10054E480;
    uint64_t v5 = 0;
    qword_10060A640 = _sl_dlopen();
    if (!qword_10060A640)
    {
      abort_report_np();
LABEL_8:
      sub_10041FB38();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("AFAnalytics");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_8;
  }
  qword_10060A638 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100072928()
{
  uint64_t result = _sl_dlopen();
  qword_10060A640 = result;
  return result;
}

void sub_100073E28(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  unsigned __int8 v2 = [v3 deletePlayedEpisodesResolvedValue];
  [v3 setDeletePlayedEpisodes:*(void *)(a1 + 48)];
  if ([v3 deletePlayedEpisodesResolvedValue] && (v2 & 1) == 0) {
    [v3 setShowPlacardForRemovePlayedEpisodes:0];
  }
}

void sub_100074094(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000740AC(uint64_t a1)
{
  unsigned __int8 v2 = +[NSThread currentThread];
  id v3 = [v2 threadDictionary];

  long long v4 = [v3 objectForKeyedSubscript:@"kMTUnplayedRssEpisodesRecursionCount"];
  uint64_t v5 = (char *)[v4 integerValue];

  if ((uint64_t)v5 <= 0)
  {
    uint64_t v7 = +[NSNumber numberWithInteger:v5 + 1];
    [v3 setObject:v7 forKeyedSubscript:@"kMTUnplayedRssEpisodesRecursionCount"];

    uint64_t v8 = +[MTEpisode predicateForRSSEpisodes];
    id v9 = [*(id *)(a1 + 32) uuid];
    uint64_t v10 = +[MTEpisode predicateForEpisodesOnPodcastUuid:v9 deletePlayedEpisodes:1];
    uint64_t v11 = [v8 AND:v10];

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 40) countOfObjectsInEntity:kMTEpisodeEntityName predicate:v11];
  }
  else
  {
    uint64_t v6 = _MTLogCategoryDatabase();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Hit recursion guard for -[MTPodcast countOfUnplayedRssEpisodes]. Short circuiting.", v12, 2u);
    }
  }
  [v3 setObject:&off_100579200 forKeyedSubscript:@"kMTUnplayedRssEpisodesRecursionCount"];
}

void sub_1000743B4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 conformsToProtocol:&OBJC_PROTOCOL___MTColorThemeable])
  {
    id v3 = [*(id *)(a1 + 32) colorTheme];
    [v4 setColorTheme:v3];
  }
}

id sub_1000745C4(uint64_t a1)
{
  unsigned __int8 v2 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting processors needed for Feed Updates...", v4, 2u);
  }

  return [*(id *)(a1 + 32) startProcessors:209];
}

id sub_1000746C4(uint64_t a1)
{
  unsigned __int8 v2 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting processors needed for Playback...", v4, 2u);
  }

  return [*(id *)(a1 + 32) startProcessors:60];
}

id sub_1000747C4(uint64_t a1)
{
  unsigned __int8 v2 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting processors needed for CarPlay...", v4, 2u);
  }

  return [*(id *)(a1 + 32) startProcessorsForFeedUpdates];
}

uint64_t sub_1000748EC(uint64_t a1)
{
  qword_10060A668 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

id sub_100074AC0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateDatabaseFromMediaLibrary];
}

void sub_100075338(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

NSNumber *__cdecl sub_100075398(id a1, MPMediaItem *a2)
{
  MPMediaEntityPersistentID v2 = [(MPMediaItem *)a2 persistentID];

  return +[NSNumber numberWithUnsignedLongLong:v2];
}

uint64_t sub_1000753DC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

int64_t sub_100075400(id a1, MPMediaItem *a2, MPMediaItem *a3)
{
  id v4 = a2;
  uint64_t v5 = [(MPMediaItem *)a3 podcastTitle];
  uint64_t v6 = [v5 stringByRemovingInsignificantPrefix];
  uint64_t v7 = [(MPMediaItem *)v4 podcastTitle];

  uint64_t v8 = [v7 stringByRemovingInsignificantPrefix];
  id v9 = [v6 compare:v8];

  return (int64_t)v9;
}

void sub_10007549C(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = kMTPlaylistEntityName;
  uint64_t v5 = kPlaylistMediaLibraryId;
  uint64_t v6 = +[NSPredicate predicateWithFormat:@"%K != 0", kPlaylistMediaLibraryId];
  uint64_t v7 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v5, 0);
  uint64_t v8 = [v3 objectDictionariesInEntity:v4 predicate:v6 sortDescriptors:0 propertiesToFetch:v7 includeObjectId:1];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_100075584(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v73 = v1;
  id v75 = [obj countByEnumeratingWithState:&v82 objects:v95 count:16];
  if (v75)
  {
    uint64_t v74 = *(void *)v83;
    do
    {
      for (uint64_t i = 0; i != v75; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v83 != v74) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v82 + 1) + 8 * i);
        id v5 = [*(id *)(v1 + 40) containsObject:v3];
        uint64_t v6 = [v3 valueForProperty:MPMediaEntityPropertyPersistentID];
        uint64_t v7 = +[MTMLMediaItem itemWithMPMediaItem:v3 isRestoreDownloadCandidate:v5];
        uint64_t v8 = _MTLogCategoryMediaLibrary();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          id v87 = v7;
          __int16 v88 = 1024;
          LODWORD(v89) = v5;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "update-from-MusicLibrary processing item '%@', isRestoreDownloadCandidate = %d", buf, 0x12u);
        }

        uint64_t v9 = [v7 assetUrl];
        if (!v9)
        {
          if (!v5) {
            goto LABEL_33;
          }
LABEL_12:
          if ([v3 isITunesU])
          {
            uint64_t v12 = [v7 feedUrl];
            if (([v12 containsStringInsensitive:@"LZDirectory.woa"] & 1) == 0)
            {
              uint64_t v13 = [v7 feedUrl];
              unsigned __int8 v14 = [v13 containsStringInsensitive:@"LZStudent.woa"];

              if (v14) {
                goto LABEL_33;
              }
              goto LABEL_15;
            }
          }
          else
          {
LABEL_15:
            uint64_t v15 = [*(id *)(v1 + 48) objectForKey:v6];

            if (v15) {
              goto LABEL_33;
            }
            [*(id *)(v1 + 48) setObject:v7 forKey:v6];
            uint64_t v16 = [*(id *)(v1 + 56) _findOrAddPodcastForMediaItem:v7 updaterCache:*(void *)(v1 + 64)];
            uint64_t v12 = v16;
            if (v16)
            {
              uint64_t v17 = [v16 uuid];

              if (v17)
              {
                uint64_t v71 = [v3 valueForProperty:MPMediaItemPropertyArtwork];
                [v71 bounds];
                double v19 = v18;
                double v21 = v20;
                double v23 = v22;
                double v25 = v24;
                uint64_t v26 = [v12 uuid];
                long long v27 = (void *)v26;
                if (v26) {
                  CFStringRef v28 = (const __CFString *)v26;
                }
                else {
                  CFStringRef v28 = @"undefined";
                }
                uint64_t v29 = +[MTPodcast importedShowArtworkURLFor:v28];

                long long v30 = +[PUIObjCArtworkProvider shared];
                long long v31 = [v12 uuid];
                id v69 = v30;
                uint64_t v70 = (void *)v29;
                LODWORD(v30) = [v30 hasArtworkForShow:v31 withDimensions:v29 fromSource:v19 v21 v23 v25];

                if (v30)
                {
                  long long v32 = [v71 imageWithSize:v23, v25];
                  if (v32)
                  {
                    long long v33 = [v12 uuid];
                    [v69 cacheArtwork:v32 withDimension:v33 forShow:v29 fromSource:v19, v21, v23, v25];
                  }
                }
                int64_t v34 = *(void **)(v1 + 56);
                uint64_t v35 = *(void *)(v1 + 72);
                uint64_t v36 = *(void *)(v1 + 80);
                uint64_t v37 = [v12 uuid];
                uint64_t v38 = *(unsigned __int8 *)(v73 + 112);
                id v81 = 0;
                [v34 _addEpisodeInCtx:v35 mediaItem:v7 episodeCache:v36 podcastUuid:v37 isRestoreDownloadCandidate:v5 canSendNotifications:v38 outEpisodeUUID:&v81];
                id v39 = v81;

                uint64_t v1 = v73;
                id v40 = [*(id *)(v73 + 88) objectForKey:v39];
                if (v40)
                {
                  uint64_t v41 = _MTLogCategoryMediaLibrary();
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v42 = [v7 title];
                    *(_DWORD *)buf = 138543618;
                    id v87 = v40;
                    __int16 v88 = 2112;
                    id v89 = v42;
                    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Found duplicate medialibrary episode %{public}@ - %@", buf, 0x16u);

                    uint64_t v1 = v73;
                  }

                  [*(id *)(v1 + 96) addObject:v40];
                }
                if (v39)
                {
                  id v43 = *(void **)(v1 + 88);
                  id v44 = [v7 persistentId];
                  [v43 setObject:v44 forKey:v39];

                  uint64_t v1 = v73;
                }
              }
            }
          }

          goto LABEL_33;
        }
        uint64_t v10 = (void *)v9;
        unsigned int v11 = [v7 isMissingAsset];

        if ((v11 ^ 1 | v5)) {
          goto LABEL_12;
        }
LABEL_33:
      }
      id v75 = [obj countByEnumeratingWithState:&v82 objects:v95 count:16];
    }
    while (v75);
  }

  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  id v76 = [*(id *)(v1 + 80) unvisitedEpisodes];
  id v45 = [v76 countByEnumeratingWithState:&v77 objects:v94 count:16];
  if (v45)
  {
    id v46 = v45;
    uint64_t v47 = *(void *)v78;
    do
    {
      for (j = 0; j != v46; j = (char *)j + 1)
      {
        if (*(void *)v78 != v47) {
          objc_enumerationMutation(v76);
        }
        id v49 = *(void **)(*((void *)&v77 + 1) + 8 * (void)j);
        id v51 = [v49 persistentID];
        if (v51)
        {
          uint64_t v52 = *(void **)(v73 + 104);
          uint64_t v53 = +[NSNumber numberWithLongLong:v51];
          unsigned int v54 = [v52 containsObject:v53];
        }
        else
        {
          unsigned int v54 = 0;
        }
        uint64_t v55 = _MTLogCategoryMediaLibrary();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          id v56 = +[NSNumber numberWithLongLong:v51];
          id v57 = [v49 uuid];
          *(_DWORD *)buf = 138412802;
          id v87 = v56;
          __int16 v88 = 2112;
          id v89 = v57;
          __int16 v90 = 1024;
          unsigned int v91 = v54;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "update-from-MusicLibrary found unvisited episode with pid %@ with UUID %@ - isRestoreDownloadCandidate %x", buf, 0x1Cu);
        }
        uint64_t v58 = +[NSDate now];
        [v58 timeIntervalSinceReferenceDate];
        double v60 = v59;
        [v49 downloadDate];
        double v62 = v60 - v61;

        id v63 = _MTLogCategoryMediaLibrary();
        BOOL v64 = os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
        if (v62 <= 500.0)
        {
          if (v64)
          {
            uint64_t v67 = +[NSNumber numberWithLongLong:v51];
            id v68 = [v49 uuid];
            *(_DWORD *)buf = 138413058;
            id v87 = v67;
            __int16 v88 = 2112;
            id v89 = v68;
            __int16 v90 = 1024;
            unsigned int v91 = v54;
            __int16 v92 = 2048;
            double v93 = v62;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "update-from-MusicLibrary skip resetting assetURL of unvisited episode with pid %@ with UUID %@ - isRestoreDownloadCandidate %x. Downloaded %f milliseconds ago.", buf, 0x26u);
          }
        }
        else
        {
          if (v64)
          {
            double v65 = +[NSNumber numberWithLongLong:v51];
            uint64_t v66 = [v49 uuid];
            *(_DWORD *)buf = 138413058;
            id v87 = v65;
            __int16 v88 = 2112;
            id v89 = v66;
            __int16 v90 = 1024;
            unsigned int v91 = v54;
            __int16 v92 = 2048;
            double v93 = v62;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "update-from-MusicLibrary reset assetURL of unvisited episode with pid %@ with UUID %@ - isRestoreDownloadCandidate %x. Downloaded seconds ago %f", buf, 0x26u);
          }
          [v49 setAssetURL:0];
          if (v54) {
            [v49 setPersistentID:v51];
          }
        }
      }
      id v46 = [v76 countByEnumeratingWithState:&v77 objects:v94 count:16];
    }
    while (v46);
  }
}

void sub_100075E00(id a1, id a2)
{
}

void sub_100075EB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100075F54(uint64_t a1)
{
  MPMediaEntityPersistentID v2 = [*(id *)(a1 + 32) noteObserver];

  if (!v2)
  {
    id v3 = [*(id *)(a1 + 32) observerLock];
    objc_sync_enter(v3);
    uint64_t v4 = [*(id *)(a1 + 32) noteObserver];

    if (!v4)
    {
      objc_initWeak(&location, *(id *)(a1 + 32));
      id v5 = +[NSNotificationCenter defaultCenter];
      uint64_t v6 = +[NSOperationQueue mainQueue];
      uint64_t v8 = _NSConcreteStackBlock;
      uint64_t v9 = 3221225472;
      uint64_t v10 = sub_1000760EC;
      unsigned int v11 = &unk_10054E628;
      objc_copyWeak(&v12, &location);
      uint64_t v7 = [v5 addObserverForName:MPMediaLibraryDidChangeNotification object:0 queue:v6 usingBlock:&v8];
      [*(id *)(a1 + 32) setNoteObserver:v7, v8, v9, v10, v11];

      objc_destroyWeak(&v12);
      objc_destroyWeak(&location);
    }
    objc_sync_exit(v3);
  }
}

void sub_1000760B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_1000760EC(uint64_t a1, void *a2)
{
  MPMediaEntityPersistentID v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained updateMediaLibraryFromNotification:v3];
}

void sub_1000761D8(uint64_t a1)
{
  id obj = [*(id *)(a1 + 32) observerLock];
  objc_sync_enter(obj);
  MPMediaEntityPersistentID v2 = [*(id *)(a1 + 32) noteObserver];

  if (v2)
  {
    id v3 = +[NSNotificationCenter defaultCenter];
    uint64_t v4 = [*(id *)(a1 + 32) noteObserver];
    [v3 removeObserver:v4];

    [*(id *)(a1 + 32) setNoteObserver:0];
  }
  objc_sync_exit(obj);
}

void sub_100076294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000767EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t sub_100076824(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 assetURL];
  uint64_t v7 = [v5 assetURL];

  id v8 = [*(id *)(a1 + 32) indexOfObject:v6];
  id v9 = [*(id *)(a1 + 32) indexOfObject:v7];
  if ((uint64_t)v8 < (uint64_t)v9) {
    uint64_t v10 = -1;
  }
  else {
    uint64_t v10 = (uint64_t)v8 > (uint64_t)v9;
  }

  return v10;
}

void sub_1000768B0(uint64_t a1)
{
  id v2 = +[MTPlaylist aggregateOperation:@"max:" attribute:kPlaylistSortOrder predicate:0 managedObjectContext:*(void *)(a1 + 32)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 longLongValue];
}

void sub_10007692C(uint64_t a1)
{
  id v3 = +[MTPlaylist insertNewPlaylistInManagedObjectContext:*(void *)(a1 + 32)];
  uint64_t v4 = [*(id *)(a1 + 40) name];
  [v3 setTitle:v4];

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = kMTEpisodeEntityName;
  uint64_t v7 = +[NSPredicate predicateWithFormat:@"%K in %@", kEpisodeAssetURL, *(void *)(a1 + 48)];
  id v8 = [v5 objectsInEntity:v6 predicate:v7 sortDescriptors:0];

  id v9 = [v8 sortedArrayUsingComparator:*(void *)(a1 + 56)];
  uint64_t v10 = [*(id *)(a1 + 40) mediaLibraryId];
  [v3 setMediaLibraryId:[v10 unsignedLongLongValue]];

  [v3 setIsItunesPlaylist:1];
  unsigned int v11 = [*(id *)(a1 + 40) parentMediaLibraryId];
  [v3 setParentMediaLibraryId:[v11 longLongValue]];

  [v3 setIsItunesSmartPlaylist:[*(id *)(a1 + 40) isSmart]];
  if ([*(id *)(a1 + 40) isFolder])
  {
    [v3 setIsFolder:1];
    [v3 setUnplayedCount:0];
  }
  else
  {
    id v12 = [*(id *)(a1 + 48) count];
    if (v12 != [v9 count])
    {
      uint64_t v13 = _MTLogCategoryMediaLibrary();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "******** items not found in database ***********", buf, 2u);
      }
    }
    unsigned __int8 v14 = +[NSOrderedSet orderedSetWithArray:v9];
    [v3 setEpisodes:v14];

    [v3 updateUnplayedCount];
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) += [v9 count];
  }
  ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  [v3 setSortOrder:];
}

void sub_100076B84(uint64_t a1)
{
  uint64_t v3 = kMTPlaylistEntityName;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = +[NSPredicate predicateWithFormat:@"%K = %@", kPlaylistMediaLibraryId, *(void *)(a1 + 40)];
  uint64_t v6 = [v4 objectsInEntity:v3 predicate:v5 sortDescriptors:0];
  uint64_t v7 = [v6 lastObject];

  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = kMTEpisodeEntityName;
  uint64_t v10 = kEpisodeAssetURL;
  unsigned int v11 = [*(id *)(a1 + 48) array];
  id v12 = +[NSPredicate predicateWithFormat:@"%K in %@", v10, v11];
  uint64_t v13 = [v8 objectsInEntity:v9 predicate:v12 sortDescriptors:0];

  unsigned __int8 v14 = [v13 sortedArrayUsingComparator:*(void *)(a1 + 64)];
  uint64_t v15 = +[NSOrderedSet orderedSetWithArray:v14];

  uint64_t v16 = _MTLogCategoryMediaLibrary();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = [v7 title];
    [v7 uuid];
    long long v30 = v13;
    double v19 = v18 = v2;
    double v20 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v15 count]);
    double v21 = [v7 episodes];
    double v22 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v21 count]);
    *(_DWORD *)buf = 138413058;
    long long v32 = v17;
    __int16 v33 = 2112;
    int64_t v34 = v19;
    __int16 v35 = 2112;
    uint64_t v36 = v20;
    __int16 v37 = 2112;
    uint64_t v38 = v22;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%@ %@ [%@ sorted] [%@ existing]", buf, 0x2Au);

    id v2 = v18;
    uint64_t v13 = v30;
  }
  double v23 = [v7 title];
  double v24 = [*(id *)(a1 + 56) name];
  unsigned __int8 v25 = [v23 isEqualToString:v24];

  if ((v25 & 1) == 0)
  {
    uint64_t v26 = [*(id *)(a1 + 56) name];
    [v7 setTitle:v26];
  }
  if ([*(id *)(a1 + 56) isFolder])
  {
    [v7 setIsFolder:1];
    [v7 setUnplayedCount:0];
  }
  else
  {
    long long v27 = [v7 episodes];
    unsigned __int8 v28 = [v15 isEqualToOrderedSet:v27];

    if ((v28 & 1) == 0) {
      [v7 setEpisodes:v15];
    }
    [v7 updateUnplayedCount];
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += [v15 count];
  }
  uint64_t v29 = [*(id *)(a1 + 56) parentMediaLibraryId];
  [v7 setParentMediaLibraryId:[v29 longLongValue]];
}

void sub_1000772DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_100077328(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) playlistForUuid:kPlaylistITunesPlaylistUuid];
  [v2 setUnplayedCount:0];
  [v2 setHidden:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 0];
  uint64_t v3 = kMTPlaylistEntityName;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = +[NSPredicate predicateWithFormat:@"%K in %@", kPlaylistMediaLibraryId, *(void *)(a1 + 40)];
  uint64_t v6 = [v4 objectsInEntity:v3 predicate:v5 sortDescriptors:0];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100077468;
  v7[3] = &unk_10054E6A0;
  id v8 = *(id *)(a1 + 32);
  [v6 enumerateObjectsUsingBlock:v7];
}

id sub_100077468(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deletePlaylist:a2];
}

void sub_1000778B8(id a1, NSString *a2, id a3, BOOL *a4)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _MTLogCategoryMediaLibrary();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    id v8 = [v6 description];
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@ - %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_100078D30(id *a1)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = [a1[4] insertedAndUpdatedObjectIDs];
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v18;
    *(void *)&long long v4 = 138412290;
    long long v16 = v4;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = [a1[5] existingObjectWithID:*(void *)(*((void *)&v17 + 1) + 8 * (void)v7) error:0 v16];
        if (v8)
        {
          unsigned int v9 = [a1[6] haveMediaLibraryPropertiesChangedForEpisode:v8];
          uint64_t v10 = _MTLogCategoryMediaLibrary();
          BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
          if (v9)
          {
            if (v11)
            {
              id v12 = [v8 title];
              *(_DWORD *)buf = v16;
              double v22 = v12;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "updating media library item for episode %@", buf, 0xCu);
            }
            id v13 = [v8 persistentID];
            [v8 playhead];
            [MTMediaLibraryUtil updateMediaLibraryItem:v13 playhead:[v8 playState] playCount:[v8 playCount] playState:v14];
          }
          else
          {
            if (v11)
            {
              uint64_t v15 = [v8 title];
              *(_DWORD *)buf = v16;
              double v22 = v15;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "no changes to ML play state for episode %@", buf, 0xCu);
            }
          }
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v17 objects:v23 count:16];
    }
    while (v5);
  }
}

id sub_10007A250(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateCellShadows:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10007AA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007AA58(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = [a2 indexOfObject:*(void *)(a1 + 32)];
  if (v7 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v8 = +[NSIndexPath indexPathForRow:v7 inSection:a3];
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    *a4 = 1;
  }
}

void sub_10007ACC8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = [a2 indexOfObject:*(void *)(a1 + 32)];
  if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v6 = *(void **)(a1 + 40);
    id v7 = +[NSIndexPath indexPathForRow:v5 inSection:a3];
    [v6 addObject:v7];
  }
}

void sub_10007BEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007BF0C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  uint64_t v2 = [v5 dictionaryRepresentation];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10007C0F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [v5 userId];
    uint64_t v8 = (void *)v7;
    if (v7) {
      uint64_t v9 = (__CFString *)v7;
    }
    else {
      uint64_t v9 = &stru_10056A8A0;
    }
    uint64_t v10 = v9;

    uint64_t v11 = [v5 clientId];
    id v12 = (void *)v11;
    if (v11) {
      id v13 = (__CFString *)v11;
    }
    else {
      id v13 = &stru_10056A8A0;
    }
    float v14 = v13;

    uint64_t v15 = *(void **)(a1 + 32);
    v20[0] = @"userId";
    v20[1] = @"clientId";
    v21[0] = v10;
    v21[1] = v14;
    long long v16 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
    [v15 im_addPropertiesWithDictionary:v16];
  }
  else
  {
    uint64_t v10 = _MTLogCategoryMetrics();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v17 = [v6 description];
      int v18 = 138412290;
      long long v19 = v17;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch AnalyticsUserIdentifier from AMS for store reporting with error %@", (uint8_t *)&v18, 0xCu);
    }
  }

  +[IMMetrics recordEvent:*(void *)(a1 + 32) topic:@"xp_dzc_main"];
}

void sub_10007C510(id a1)
{
  id v1 = [[MTFeedUpdateIdleCoordinator alloc] _initShared];
  uint64_t v2 = qword_10060A688;
  qword_10060A688 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10007C858(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007C8F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007CB3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) uuid];
  id v4 = [v2 podcastForUuid:v3];

  [*(id *)(a1 + 40) setIsSerialPodcast:[v4 isSerialShowTypeInFeed]];
}

void sub_10007CD40(uint64_t a1)
{
  [*(id *)(a1 + 32) addPodcastInfoViewHeader];
  id v2 = [*(id *)(a1 + 32) tableView];
  [v2 reloadData];
}

void sub_10007D9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  objc_destroyWeak(location);
  _Block_object_dispose((const void *)(v11 - 232), 8);
  objc_destroyWeak((id *)(v11 - 184));
  _Unwind_Resume(a1);
}

void sub_10007DA4C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) uuid];
  id v7 = [v2 podcastForUuid:v3];

  uint64_t v4 = [v7 title];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10007DAD8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007DB68;
  block[3] = &unk_10054E8E0;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_10007DB68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained refreshSettings];
}

id sub_10007DBA8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateSubscription:a2];
}

id sub_10007DBB4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateNotifications:a2];
}

id sub_10007DBC0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateEpisodeOrderSetting:a2];
}

id sub_10007DBCC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateHidePlayedEpisodes:a2];
}

id sub_10007DBD8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateRemovePlayedDownloads:a2];
}

id sub_10007DBE4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateEpisodeLimit:a2];
}

void sub_10007E230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 216), 8);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  _Block_object_dispose((const void *)(v36 - 152), 8);
  _Block_object_dispose((const void *)(v36 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10007E2A4(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = [*(id *)(a1 + 40) uuid];
  uint64_t v5 = [v3 podcastForUuid:v4];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 subscribed];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 notifications];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v5 playbackNewestToOldest];
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v5 deletePlayedEpisodes];
  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v5 episodeLimit];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [v5 sortAscending];
  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = [v5 showTypeSetting];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = [v5 hidesPlayedEpisodes];
}

NSString *__cdecl sub_10007EB68(id a1, unint64_t a2)
{
  id v2 = +[NSBundle mainBundle];
  uint64_t v3 = [v2 localizedStringForKey:@"LIMIT_HEADER" value:&stru_10056A8A0 table:0];

  return (NSString *)v3;
}

NSString *__cdecl sub_10007F3E0(id a1, unint64_t a2)
{
  id v2 = +[NSBundle mainBundle];
  uint64_t v3 = [v2 localizedStringForKey:@"LIMIT_HEADER" value:&stru_10056A8A0 table:0];

  return (NSString *)v3;
}

id sub_10007F704(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc((Class)NSAttributedString);
  uint64_t v5 = [*(id *)(a1 + 32) deletePlayedText:a2];
  id v6 = [v4 initWithString:v5];

  return v6;
}

void sub_10007FCC0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) uuid];
  id v4 = [v2 podcastForUuid:v3];

  [v4 setEpisodeLimit:*(void *)(a1 + 48)];
}

void sub_10007FF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007FFA8(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) uuid];
  uint64_t v5 = [v3 podcastForUuid:v4];

  [v5 markPlaylistsForUpdate];
  uint64_t v6 = [v5 dictionaryRepresentation];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100080178(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) uuid];
  id v4 = [v2 podcastForUuid:v3];

  [v4 setNotifications:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100080334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100080358(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) uuid];
  id v4 = [v2 podcastForUuid:v3];

  if (v4 && [v4 showTypeSetting] != *(id *)(a1 + 64))
  {
    uint64_t v5 = _MTLogCategoryDatabase();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 64);
      uint64_t v7 = [v4 title];
      uint64_t v8 = [v4 uuid];
      int v9 = 134349826;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      id v12 = v7;
      __int16 v13 = 2114;
      float v14 = v8;
      __int16 v15 = 2050;
      id v16 = [v4 storeCollectionId];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MTShowSettingsViewController updateEpisodeOrderSetting about to switch show type setting to %{public}lu, show %{public}@, %{public}@, %{public}lld", (uint8_t *)&v9, 0x2Au);
    }
    [v4 setShowTypeSetting:*(void *)(a1 + 64)];
    [*(id *)(a1 + 32) saveInCurrentBlock];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v4 showTypeSetting];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
}

void sub_1000805A0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) uuid];
  id v4 = [v2 podcastForUuid:v3];

  [v4 setHidesPlayedEpisodes:*(unsigned int *)(a1 + 48)];
}

void sub_100080E84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100080E98(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cleanUpOldHiddenPodcasts];
}

void sub_100080FA0(uint64_t a1)
{
  id v2 = +[MTPodcast predicateForNotHiddenPodcasts];
  uint64_t v3 = [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:v2 sortDescriptors:0];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 40) _markAsHiddenPodcast:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7) inContext:*(void *)(a1 + 32)];
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_100081504(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0];
  uint64_t v3 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v15 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %lu podcasts to delete from Recently Unfollowed.", buf, 0xCu);
  }

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      long long v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v8) setLastUnfollowedDate:0.0 v9];
        long long v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }

  [*(id *)(a1 + 32) saveInCurrentBlock];
}

void sub_100081760(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0];
  uint64_t v3 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v15 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %lu podcasts to delete.", buf, 0xCu);
  }

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      long long v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(a1 + 48) _unsafeDeletePodcast:ctx:*(void *)(*((void *)&v9 + 1) + 8 * (void)v8) *(void *)(a1 + 32) (void)v9];
        long long v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

uint64_t sub_100081E8C(uint64_t a1, uint64_t a2)
{
  id v3 = +[MTCoreSpotlightUtil uniqueIdentifierForObject:a2];
  id v4 = v3;
  if (v3)
  {
    id v6 = v3;
    id v3 = [*(id *)(a1 + 32) addObject:v3];
    id v4 = v6;
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000820B0(uint64_t a1)
{
  id v2 = +[NSMutableSet set];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v3);
        }
        long long v8 = [*(id *)(a1 + 40) podcastForUuid:*(void *)(*((void *)&v22 + 1) + 8 * i)];
        long long v9 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v8 syncType]);
        [v2 addObject:v9];

        [*(id *)(a1 + 48) _markAsHiddenPodcast:v8 inContext:*(void *)(a1 + 40)];
      }
      id v5 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v5);
  }

  [*(id *)(a1 + 40) saveInCurrentBlock];
  if (*(unsigned char *)(a1 + 56) && [v2 count])
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v10 = v2;
    id v11 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        for (j = 0; j != v12; j = (char *)j + 1)
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = [*(id *)(*((void *)&v18 + 1) + 8 * (void)j) integerValue:v18];
          id v16 = +[SyncKeysRepository shared];
          [v16 markSubscriptionSyncDirty:1 for:v15];
        }
        id v12 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
      }
      while (v12);
    }

    long long v17 = +[SyncKeysRepository shared];
    [v17 setIsPlaylistSyncDirty:1];
  }
}

id sub_1000833B8(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000837B4;
  v3[3] = &unk_10054EAD0;
  void v3[4] = a1;
  id v1 = sub_10008371C(v3);

  return v1;
}

id sub_10008371C(void *a1)
{
  id v1 = a1;
  id v2 = (void (**)(void, void, void))v1;
  if (qword_10060A690 == -1)
  {
    if (v1)
    {
LABEL_3:
      id v3 = v2[2](v2, qword_10060A698, qword_10060A6A0);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&qword_10060A690, &stru_10054EAF0);
    if (v2) {
      goto LABEL_3;
    }
  }
  id v3 = 0;
LABEL_6:

  return v3;
}

id sub_1000837B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSNumber numberWithInteger:*(void *)(a1 + 32)];
  id v5 = [v3 objectForKeyedSubscript:v4];
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = v5;
  }
  else
  {
    id v7 = [v3 objectForKeyedSubscript:&off_100579458];
  }
  long long v8 = v7;

  return v8;
}

void sub_100083854(id a1)
{
  v15[0] = &off_100579458;
  id v1 = +[NSString stringWithFormat:@"%@%d", @"podcastAction-", 0];
  v16[0] = v1;
  v15[1] = &off_100579470;
  id v2 = +[NSString stringWithFormat:@"%@%d", @"podcastAction-", 1];
  v16[1] = v2;
  void v15[2] = &off_100579488;
  id v3 = +[NSString stringWithFormat:@"%@%d", @"podcastAction-", 2];
  void v16[2] = v3;
  v15[3] = &off_1005794A0;
  id v4 = +[NSString stringWithFormat:@"%@%d", @"podcastAction-", 3];
  v16[3] = v4;
  void v15[4] = &off_1005794B8;
  id v5 = +[NSString stringWithFormat:@"%@%d", @"podcastAction-", 4];
  v16[4] = v5;
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:5];
  id v7 = (void *)qword_10060A698;
  qword_10060A698 = v6;

  long long v8 = +[NSMutableDictionary dictionary];
  long long v9 = (void *)qword_10060A698;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100083A7C;
  void v13[3] = &unk_10054EB18;
  id v14 = v8;
  id v10 = v8;
  [v9 enumerateKeysAndObjectsUsingBlock:v13];
  id v11 = [v10 copy];
  id v12 = (void *)qword_10060A6A0;
  qword_10060A6A0 = (uint64_t)v11;
}

id sub_100083A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:a3];
}

id sub_100083A8C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 objectForKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_10008433C(uint64_t a1)
{
  if (*(void *)(a1 + 40) == 2)
  {
    id v3 = +[UIColor cellEmpahsisSwitchBorderColor];
  }
  else
  {
    id v3 = 0;
  }
  id v2 = [*(id *)(a1 + 32) toggle];
  [v2 setTintColor:v3];
}

void sub_100084A10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100084A38(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      [WeakRetained _asyncFetchArtworkDidLoadImage:v6 forArtworkKey:*(void *)(a1 + 32)];
    }
    else
    {
      id v5 = +[UIImage defaultPodcastArtwork];
      [v4 _asyncFetchArtworkDidLoadImage:v5 forArtworkKey:*(void *)(a1 + 32)];
    }
  }
}

void sub_100084ADC(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      [WeakRetained _asyncFetchArtworkDidLoadImage:v6 forArtworkKey:*(void *)(a1 + 32)];
    }
    else
    {
      id v5 = +[UIImage defaultPodcastArtwork];
      [v4 _asyncFetchArtworkDidLoadImage:v5 forArtworkKey:*(void *)(a1 + 32)];
    }
  }
}

void sub_100084C4C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) artworkKey];
  unsigned int v3 = [v2 isEqual:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) imageView];
    [v4 setImage:*(void *)(a1 + 48)];

    id v5 = *(void **)(a1 + 32);
    [v5 setNeedsLayout];
  }
}

void sub_100084F88(uint64_t a1)
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000;
  long long v8 = sub_100056EB0;
  long long v9 = sub_100057230;
  id v10 = 0;
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _OWORD v4[2] = sub_1000850B4;
  v4[3] = &unk_10054E2A8;
  void v4[4] = *(void *)(a1 + 32);
  void v4[5] = &v5;
  dispatch_sync(v2, v4);

  unsigned int v3 = +[MZPreferences storeBookkeeperPreferences];
  [v3 setObject:v6[5] forKey:@"MZKeyValueStoreClamps"];

  _Block_object_dispose(&v5, 8);
}

void sub_10008509C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000850B4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pendingUserDefaultArchivedData];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void **)(a1 + 32);

  return [v5 setPendingUserDefaultArchivedData:0];
}

void sub_100085398(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSDate date];
  [v3 setValue:v4 forKey:*(void *)(a1 + 32)];
}

id sub_1000854B0(uint64_t a1, void *a2)
{
  return [a2 setValue:0 forKey:*(void *)(a1 + 32)];
}

void sub_100085AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100085AE8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 valueForKey:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return _objc_release_x1(v3, v5);
}

void sub_1000863E0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _fetchShortcutItems];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100086484;
  v5[3] = &unk_10054D9B0;
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = v2;
  uint64_t v7 = v3;
  id v4 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
}

id sub_100086484(uint64_t a1)
{
  uint64_t v2 = +[UIApplication sharedApplication];
  [v2 setShortcutItems:*(void *)(a1 + 32)];

  uint64_t v3 = *(void **)(a1 + 40);

  return [v3 _endBackgroundTask];
}

uint64_t sub_100086924(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2 > 0);
}

uint64_t sub_10008693C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    return (uint64_t)_[v3 scrollToTopMyPodcastsTabAnimated:1];
  }
  return result;
}

uint64_t sub_100086994(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    return (uint64_t)_[v3 scrollToTopUnplayedTabAnimated:1];
  }
  return result;
}

uint64_t sub_100086BD4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 1);
  }
  return result;
}

uint64_t sub_100086BF4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 1);
  }
  return result;
}

void sub_100086CFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100086D10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _endBackgroundTask:1];
}

void sub_100086E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100086F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086F68(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPlaylistEntityName;
  id v4 = +[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate];
  uint64_t v5 = +[MTPlaylist sortDescriptors];
  id v9 = [v2 objectsInEntity:v3 predicate:v4 sortDescriptors:v5 returnsObjectsAsFaults:0 limit:0];

  uint64_t v6 = [v9 mt_compactMap:&stru_10054ECF8];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_10008703C(id a1, MTPlaylist *a2)
{
  return +[UIApplicationShortcutItem mt_shortcutItemForStation:a2];
}

void sub_100087C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100087C74(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc((Class)NSFetchRequest);
    id v3 = [v2 initWithEntityName:kMTPodcastEntityName];
    [v3 setPredicate:*(void *)(a1 + 32)];
    [v3 setResultType:0];
    [v3 setSortDescriptors:*(void *)(a1 + 40)];
    [v3 setFetchLimit:[*(id *)(a1 + 48) fetchLimit]];
    uint64_t v33 = kPodcastChannel;
    id v4 = +[NSArray arrayWithObjects:&v33 count:1];
    [v3 setRelationshipKeyPathsForPrefetching:v4];

    [v3 setReturnsObjectsAsFaults:0];
    uint64_t v5 = *(void **)(a1 + 56);
    id v31 = 0;
    uint64_t v6 = [v5 executeFetchRequest:v3 error:&v31];
    id v7 = v31;
    uint64_t v8 = *(void *)(*(void *)(a1 + 96) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v6;

    id v10 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
    if (!v10)
    {
      [v7 logAndThrow:1];
      id v10 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
    }
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v11 = v10;
    id v12 = [v11 countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v28;
      do
      {
        id v15 = 0;
        do
        {
          if (*(void *)v28 != v14) {
            objc_enumerationMutation(v11);
          }
          id v16 = [*(id *)(*((void *)&v27 + 1) + 8 * (void)v15) channel:(void)v27];
          long long v17 = v16;
          if (v16
            && (uint64_t)[v16 showCount] >= 2
            && ([*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) containsObject:v17] & 1) == 0)
          {
            [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) addObject:v17];
          }

          id v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        id v13 = [v11 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }
      while (v13);
    }
  }
  uint64_t v18 = *(void *)(a1 + 64);
  if (v18)
  {
    uint64_t v19 = [*(id *)(a1 + 56) objectsInEntity:kMTEpisodeEntityName predicate:v18 sortDescriptors:*(void *)(a1 + 72) returnsObjectsAsFaults:0 limit:[*(id *)(a1 + 48) fetchLimit]];
    uint64_t v20 = *(void *)(*(void *)(a1 + 112) + 8);
    long long v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;
  }
  uint64_t v22 = *(void *)(a1 + 80);
  if (v22)
  {
    long long v23 = *(void **)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
    long long v24 = [*(id *)(a1 + 56) objectsInEntity:kMTChannelEntityName predicate:v22 sortDescriptors:*(void *)(a1 + 88) returnsObjectsAsFaults:0 limit:[*(id *)(a1 + 48) fetchLimit]];
    [v23 addObjectsFromArray:v24];
  }
  [*(id *)(a1 + 48) setPodcastResults:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) v27];
  [*(id *)(a1 + 48) setEpisodeResults:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
  long long v25 = *(void **)(a1 + 48);
  id v26 = [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) copy];
  [v25 setChannelResults:v26];
}

void sub_1000889E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000889FC(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  uint64_t v2 = [v5 title];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100088C08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)NSURLQueryItem);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  id v6 = [v4 initWithName:v3 value:v5];

  return v6;
}

id sub_100088E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)NSURLQueryItem);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  id v6 = [v4 initWithName:v3 value:v5];

  return v6;
}

void sub_100088F80(id a1)
{
  v3[0] = @"playPodcast";
  v3[1] = @"playPodcasts";
  v3[2] = @"playStation";
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:3];
  uint64_t v2 = (void *)qword_10060A6C8;
  qword_10060A6C8 = v1;
}

void sub_100089708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100089720(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  uint64_t v2 = [v6 podcast];
  uint64_t v3 = [v2 uuid];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10008A0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10008A0D8(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = [v2 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  id v6 = [v5 firstObject];
  uint64_t v7 = [v6 uuid];
  uint64_t v8 = *(void *)(a1[7] + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_10008B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_10008B140(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  id v6 = [v9 instanceIdentifier];
  uint64_t v7 = [v6 UUIDString];
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_10008B1E8(uint64_t a1, void *a2)
{
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = a2;
  uint64_t v19 = a1;
  id v22 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
  char v3 = 0;
  if (v22)
  {
    uint64_t v21 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v22; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v21) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        unsigned __int8 v6 = [v5 isExplicit];
        uint64_t v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%lld", [v5 episodeStoreId]);
        unsigned int v8 = [*(id *)(a1 + 32) objectForKey:v7];
        if (v8)
        {
          id v9 = +[NSURL URLWithString:v8];
          uint64_t v10 = [v9 pf_queryAsDictionary];
          id v11 = [v10 objectForKeyedSubscript:@"contentItemId"];
          if ([v11 length])
          {
            id v12 = [objc_alloc((Class)NSUUID) initWithUUIDString:v11];
            [v5 setInstanceIdentifier:v12];

            a1 = v19;
          }
          [*(id *)(a1 + 40) setObject:v5 forKey:v8];
        }
        v3 |= v6;
      }
      id v22 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
    }
    while (v22);
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v13 = [*(id *)(a1 + 40) objectsForKeys:*(void *)(a1 + 48) notFoundMarker:*(void *)(a1 + 56)];
    id v14 = [v13 mutableCopy];

    [v14 removeObject:*(void *)(a1 + 56)];
    uint64_t v15 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v14 count];
      id v17 = [*(id *)(v19 + 48) count];
      uint64_t v18 = [*(id *)(v19 + 40) description];
      *(_DWORD *)buf = 134218498;
      id v28 = v16;
      __int16 v29 = 2048;
      id v30 = v17;
      __int16 v31 = 2112;
      long long v32 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Fetched %lu player items for %lu identifiers. %@", buf, 0x20u);
    }
    if (v3) {
      +[PFRestrictionsController isExplicitContentAllowed];
    }
    (*(void (**)(void))(*(void *)(v19 + 64) + 16))();
  }
}

void sub_10008B950(id a1)
{
  v3[0] = @"playPodcasts";
  v3[1] = @"playPodcast";
  v4[0] = &off_1005794E8;
  v4[1] = &off_100579500;
  v3[2] = @"playStation";
  _OWORD v4[2] = &off_100579518;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
  uint64_t v2 = (void *)qword_10060A6E0;
  qword_10060A6E0 = v1;
}

void sub_10008C704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak((id *)(v17 - 56));
  _Unwind_Resume(a1);
}

void sub_10008C738(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char v3 = [WeakRetained podcastUuid];
  uint64_t v4 = [v2 podcastForUuid:v3];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4 != 0;
}

void sub_10008C924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak((id *)(v17 - 56));
  _Unwind_Resume(a1);
}

void sub_10008C958(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  char v3 = [WeakRetained episodeUuid];
  uint64_t v4 = [v2 episodeForUuid:v3];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4 != 0;
}

void sub_10008D0EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_10008D12C(id a1, MPRemoteCommandCenter *a2)
{
  uint64_t v2 = a2;
  char v3 = [(MPRemoteCommandCenter *)v2 playCommand];
  [v3 setEnabled:1];

  uint64_t v4 = [(MPRemoteCommandCenter *)v2 setPlaybackQueueCommand];
  [v4 setEnabled:1];

  id v5 = [(MPRemoteCommandCenter *)v2 setPlaybackQueueCommand];
  [v5 registerSupportedQueueType:5];

  unsigned __int8 v6 = [(MPRemoteCommandCenter *)v2 setPlaybackSessionCommand];
  [v6 setEnabled:1];

  CFStringRef v12 = @"com.apple.podcasts.MTPlaybackQueueController.GenericQueue";
  uint64_t v7 = +[NSArray arrayWithObjects:&v12 count:1];
  unsigned int v8 = [(MPRemoteCommandCenter *)v2 setPlaybackSessionCommand];
  [v8 setExportableSessionTypes:v7];

  CFStringRef v11 = @"com.apple.podcasts.MTPlaybackQueueController.GenericQueue";
  id v9 = +[NSArray arrayWithObjects:&v11 count:1];
  uint64_t v10 = [(MPRemoteCommandCenter *)v2 setPlaybackSessionCommand];

  [v10 setSupportedSessionTypes:v9];
}

void sub_10008D290(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 isEqualToString:kMTRemoteSkipInsteadOfNextTrackDefaultKey];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = WeakRetained;
  if (v3) {
    [WeakRetained updateRemoteSkipPreferenceFromDefaults:v5];
  }
  else {
    [WeakRetained updatePreferredSkipDurationsFromUserDefaults:v5 forCommandCenter:*(void *)(a1 + 40)];
  }
}

void sub_10008D42C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _MTLogCategoryMediaRemote();
  unsigned int v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Got homeUserId: %@", buf, 0xCu);
    }

    id v9 = [objc_alloc((Class)NSUUID) initWithUUIDString:v5];
    uint64_t v10 = +[ACAccountStore ic_sharedAccountStore];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10008D610;
    uint64_t v12[3] = &unk_10054EEE8;
    id v13 = v9;
    id v14 = *(id *)(a1 + 32);
    id v11 = v9;
    [v10 ic_storeAccountForHomeUserIdentifier:v11 completion:v12];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to get homeUserId with error %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_10008D610(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138412290;
      id v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to decode requesterUserId with error %@", (uint8_t *)&v14, 0xCu);
    }
  }
  if (!v5)
  {
    unsigned int v8 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to locate store account for homeUserId", (uint8_t *)&v14, 2u);
    }
  }
  id v9 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412290;
    id v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Found account %@ from requesterUserId", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v10 = [v5 ic_privateListeningEnabledForHomeUsers];
  id v11 = [v10 objectForKey:*(void *)(a1 + 32)];
  unsigned int v12 = [v11 BOOLValue];

  id v13 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 67109120;
    LODWORD(v15) = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Private listening enabled for account: %d", (uint8_t *)&v14, 8u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10008DD04(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (!v6)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_9;
  }
  if (![*(id *)(a1 + 32) insertionPosition])
  {
    unsigned int v3 = [*(id *)(a1 + 40) playerController];
    uint64_t v4 = [v3 upNextController];
    [v4 addPlayerItemsToPlayNext:v6];
    goto LABEL_7;
  }
  if ([*(id *)(a1 + 32) insertionPosition] == (id)1)
  {
    unsigned int v3 = [*(id *)(a1 + 40) playerController];
    uint64_t v4 = [v3 upNextController];
    [v4 addPlayerItemsToUpNext:v6];
LABEL_7:
  }
  id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_9:
  v5();
}

void sub_10008EFB0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_10008EFFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 40) playerController];
  uint64_t v4 = [*(id *)(a1 + 48) siriAssetInfo];
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 88);
  char v8 = *(unsigned char *)(a1 + 89);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10008F12C;
  void v10[3] = &unk_10054EF60;
  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  BYTE1(v9) = v8;
  LOBYTE(v9) = 1;
  +[MTSetPlaybackQueueUtil setPlaybackQueueForRequest:playerController:siriAssetInfo:enqueuer:savePlayHistory:startPlayback:forceLocal:isMagicMoment:completion:](MTSetPlaybackQueueUtil, "setPlaybackQueueForRequest:playerController:siriAssetInfo:enqueuer:savePlayHistory:startPlayback:forceLocal:isMagicMoment:completion:", v2, v3, v4, v5, v6, v7, v9, v10);
}

void sub_10008F12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v9 = 138412802;
    uint64_t v10 = v7;
    __int16 v11 = 2048;
    uint64_t v12 = a2;
    __int16 v13 = 2048;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SetPlaybackQueue %@ has status %li and queueType %li", (uint8_t *)&v9, 0x20u);
  }

  if (*(void *)(a1 + 40))
  {
    char v8 = +[MTSetPlaybackQueueUtil queueCommandCustomStatusForRequestStatus:a2 queueType:a3];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10008F234(uint64_t a1, void *a2, char a3)
{
  id v6 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  if ([*(id *)(a1 + 32) length] && objc_msgSend(*(id *)(a1 + 40), "length"))
  {
    unsigned int v7 = [*(id *)(a1 + 32) isEqualToString:*(void *)(a1 + 40)];
    BOOL v8 = 0;
    if (v6 && v7 && (a3 & 1) == 0) {
      BOOL v8 = *(unsigned char *)(a1 + 72) == 0;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v8;
  int v9 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    v11[0] = 67109120;
    v11[1] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Saving play history for request: %d", (uint8_t *)v11, 8u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10008F374(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 40) siriAssetInfo];
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10008F444;
  v5[3] = &unk_10054EFD8;
  id v6 = *(id *)(a1 + 48);
  +[MTSetPlaybackQueueUtil subscribeWithCommandURL:v2 siriAssetInfo:v3 requester:v4 completion:v5];
}

void sub_10008F444(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = @"FAILED";
    if (a2) {
      CFStringRef v7 = @"SUCCEEDED";
    }
    int v12 = 138412546;
    CFStringRef v13 = v7;
    __int16 v14 = 2048;
    uint64_t v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Siri Subscribed: command %@ with MTSubscribeErrorCode %li", (uint8_t *)&v12, 0x16u);
  }

  if (a2)
  {
    BOOL v8 = +[SyncControllerFactory resolvedSyncController];
    [v8 syncSubscriptions];
  }
  if (*(void *)(a1 + 32))
  {
    int64_t v9 = +[MTSetPlaybackQueueUtil subscribeCommandStatusForErrorCode:a3];
    uint64_t v10 = *(void *)(a1 + 32);
    __int16 v11 = +[MPRemoteCommandStatus statusWithCode:v9];
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);
  }
}

void sub_10008F588(void *a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    uint64_t v5 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to lookup requesterUserId. This is fatal", v8, 2u);
    }

    uint64_t v6 = a1[4];
    CFStringRef v7 = +[MPRemoteCommandStatus statusWithCode:1401];
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void sub_10008F66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = [*(id *)(a1 + 32) trackIdentifiers];
    int v9 = 138412802;
    uint64_t v10 = v7;
    __int16 v11 = 2048;
    uint64_t v12 = a2;
    __int16 v13 = 2048;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "RemoteSetPlaybackQueue %@ has status %li and queueType %li", (uint8_t *)&v9, 0x20u);
  }
  if (*(void *)(a1 + 40))
  {
    BOOL v8 = +[MTSetPlaybackQueueUtil queueCommandCustomStatusForRequestStatus:a2 queueType:a3];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10008F78C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[MPRemoteCommandStatus statusWithCode:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10008FB5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    CFStringRef v7 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "SetPlaybackSession: Failed to lookup account DSID %@ with error %@", buf, 0x16u);
    }
  }
  int v9 = [*(id *)(a1 + 40) playerController];
  uint64_t v10 = *(void **)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10008FD04;
  void v13[3] = &unk_10054F050;
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 40);
  id v14 = v11;
  uint64_t v15 = v12;
  id v16 = *(id *)(a1 + 56);
  +[MTRemoteSetPlaybackQueueUtil decodeAndSetPlaybackQueueForController:v9 fromIdentifiers:v11 enqueuer:v5 accountLookupFailed:v6 != 0 startPlayback:0 upNextQueueIntent:2 completion:v13];
}

void sub_10008FD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [*(id *)(a1 + 32) count];
    int v10 = 134218496;
    id v11 = v7;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    __int16 v14 = 2048;
    uint64_t v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SetPlaybackSession set %lu identifiers and has status %li and queueType %li", (uint8_t *)&v10, 0x20u);
  }

  if (a2 == 1)
  {
    uint64_t v8 = [*(id *)(a1 + 40) playerController];
    int v9 = [v8 player];
    [v9 setPlaybackSpeed:0];
  }
  if (*(void *)(a1 + 48))
  {
    +[MTSetPlaybackQueueUtil queueCommandStatusForRequestStatus:a2 queueType:a3];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100090078(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) player];
  unsigned int v3 = [v2 manifest];
  id v4 = [v3 currentItem];

  if (v4)
  {
    [*(id *)(a1 + 40) _donateCurrentPlayerItem];
    [*(id *)(a1 + 32) playWithReason:7 interruptEvent:*(unsigned __int8 *)(a1 + 56)];
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      id v6 = *(void (**)(void))(v5 + 16);
      v6();
    }
  }
  else
  {
    id v7 = [*(id *)(a1 + 40) playerController];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _OWORD v9[2] = sub_1000901D4;
    uint64_t v9[3] = &unk_10054F0A0;
    id v8 = *(id *)(a1 + 48);
    void v9[4] = *(void *)(a1 + 40);
    id v10 = v8;
    +[MTSetPlaybackQueueUtil setAutoResumePlaybackQueueAndStartPlayback:1 playerController:v7 forceLocal:0 reason:7 interactive:0 completion:v9];
  }
}

id sub_1000901D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (a2 == 1) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 200;
    }
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);

  return [v5 _donateCurrentPlayerItem];
}

uint64_t sub_10009031C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) player];
    unsigned int v4 = [v3 isPlaybackRequested];

    if (v4) {
      [*(id *)(a1 + 32) _donateCurrentPlayerItem];
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v6 = *(uint64_t (**)(void))(result + 16);
    return v6();
  }
  return result;
}

id *sub_100091664(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] setValue:a2 forKey:@"MTShareImage" shareModes:7];
  }
  return result;
}

void sub_100091964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100091980(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100091ACC;
    v8[3] = &unk_10054F1F0;
    objc_copyWeak(&v10, (id *)(a1 + 32));
    id v9 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

    objc_destroyWeak(&v10);
  }
  else
  {
    id v7 = _MTLogCategoryArtworkDownload();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to load artwork for sharing: %@", buf, 0xCu);
    }
  }
}

void sub_100091ACC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained setValue:*(void *)(a1 + 32) forKey:@"MTShareImage" shareModes:1];
    id WeakRetained = v3;
  }
}

id sub_100091EC8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _setImageIgnoringSmallerSize:a2 forKey:@"MTShareImage" shareMode:1];
}

void sub_100091FC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    id v7 = _MTLogCategoryArtworkDownload();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to fetch artwork for sharing: '%@'", buf, 0xCu);
    }
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10009210C;
  void v10[3] = &unk_10054E398;
  id v8 = *(id *)(a1 + 32);
  id v11 = v5;
  id v12 = v8;
  id v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);
}

uint64_t sub_10009210C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_100092C10(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

id sub_1000936B8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) == 0 && *(unsigned char *)(a1 + 56))
  {
    id v3 = [*(id *)(a1 + 32) delegate];
    [v3 openURL:*(void *)(a1 + 40)];

    a2 = 1;
  }
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);

  return _[v4 completeOpenURLWithSuccess:a2 completionHandler:v5];
}

uint64_t sub_1000937CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100094560(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) presentingViewController];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) presentingViewController];
    [v3 dismissViewControllerAnimated:0 completion:0];
  }
}

void sub_100094948(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) controller];
  id v2 = [*(id *)(a1 + 32) actionBlock];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) actionBlock];
    ((void (**)(void, id, void))v3)[2](v3, v7, *(void *)(a1 + 40));
  }
  unsigned int v4 = [v7 delegate];
  char v5 = objc_opt_respondsToSelector();

  if (v5)
  {
    id v6 = [v7 delegate];
    [v6 didPerformActionInSheet:*(void *)(a1 + 32)];
  }
}

void sub_100094B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100094B80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v2 = [WeakRetained actions];
    id v3 = [v4 presentingButton];
    [v4 showActionSheetWithActions:v2 fromButton:v3];

    id WeakRetained = v4;
  }
}

id sub_1000975C4(uint64_t a1)
{
  id v2 = _MTLogCategoryAsyncTask();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MZAsynchronousTask] WARNING: task timed out: %@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) _invalidateTaskTimer];
  return [*(id *)(a1 + 32) setCancelType:2];
}

id sub_100097680(uint64_t a1)
{
  id v2 = _MTLogCategoryAsyncTask();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MZAsynchronousTask] WARNING: background-task assertion HOLD timed out: %@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) _invalidateTaskAssertionForced:1];
  return [*(id *)(a1 + 32) _invalidateAssertionTimer];
}

void sub_100097880(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) taskTimeoutTimer];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) taskTimeoutTimer];
    dispatch_source_cancel(v3);

    id v4 = *(void **)(a1 + 32);
    _[v4 setTaskTimeoutTimer:0];
  }
}

void sub_100097968(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) assertionTimeoutTimer];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) assertionTimeoutTimer];
    dispatch_source_cancel(v3);

    id v4 = *(void **)(a1 + 32);
    _[v4 setAssertionTimeoutTimer:0];
  }
}

void sub_100097B18(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2 != *(void **)(*(void *)(a1 + 32) + 16))
  {
    id v3 = [v2 copy];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    uint64_t v6 = _MTLogCategoryAsyncTask();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v7 = objc_retainBlock(*(id *)(a1 + 40));
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      id v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "set expirationHandler %@ for task: %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

uint64_t sub_100097CFC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100097DE0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2 != *(void **)(*(void *)(a1 + 32) + 24))
  {
    id v3 = [v2 copy];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;

    uint64_t v6 = _MTLogCategoryAsyncTask();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id v7 = objc_retainBlock(*(id *)(a1 + 40));
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      id v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "set finishedHandler %@ for task: %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

uint64_t sub_100097FC4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

uint64_t sub_1000980D0(uint64_t a1)
{
  id v2 = _MTLogCategoryAsyncTask();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 48);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Invoking expiration handler for %@, with cancelType = %d", (uint8_t *)&v6, 0x12u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

_DWORD *sub_100098210(_DWORD *result)
{
  int v1 = result[10];
  uint64_t v2 = *((void *)result + 4);
  if (v1 != *(_DWORD *)(v2 + 12))
  {
    *(_DWORD *)(v2 + 12) = v1;
    uint64_t result = (_DWORD *)*((void *)result + 4);
    if (result[3]) {
      return _[result _onQueueFireExpirationHandlerIfNecesary];
    }
  }
  return result;
}

uint64_t sub_1000982E8(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 12);
  return result;
}

void sub_100098394(uint64_t a1)
{
}

uint64_t sub_100098490(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000984A0(uint64_t a1)
{
}

void sub_1000984A8(uint64_t a1)
{
}

void sub_100098554(uint64_t a1)
{
}

void sub_100098650(uint64_t a1)
{
}

id sub_1000987E4(uint64_t a1)
{
  [*(id *)(a1 + 32) _invalidateAssertionTimer];
  [*(id *)(a1 + 32) _invalidateTaskTimer];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setCancelType:1];
}

void sub_10009882C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) taskTimeoutTimer];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) taskTimeoutTimer];
    dispatch_suspend(v3);

    int v4 = [*(id *)(a1 + 32) taskTimeoutTimer];
    [*(id *)(a1 + 32) taskTimeout];
    dispatch_time_t v6 = dispatch_time(0, (unint64_t)(v5 * 1000000000.0));
    dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, 0);

    uint64_t v7 = [*(id *)(a1 + 32) taskTimeoutTimer];
    dispatch_resume(v7);
  }
  __int16 v8 = [*(id *)(a1 + 32) assertionTimeoutTimer];

  if (v8)
  {
    int v9 = [*(id *)(a1 + 32) assertionTimeoutTimer];
    dispatch_suspend(v9);

    id v10 = [*(id *)(a1 + 32) assertionTimeoutTimer];
    [*(id *)(a1 + 32) assertionTimeout];
    dispatch_time_t v12 = dispatch_time(0, (unint64_t)(v11 * 1000000000.0));
    dispatch_source_set_timer(v10, v12, 0xFFFFFFFFFFFFFFFFLL, 0);

    uint64_t v13 = [*(id *)(a1 + 32) assertionTimeoutTimer];
    dispatch_resume(v13);
  }
}

void sub_100098A88(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) finishedHandler];
  if (v2)
  {
    uint64_t v3 = _MTLogCategoryAsyncTask();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      int v7 = 138412802;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invoking completion handler for %@, uint64_t result = %@, error = %@", (uint8_t *)&v7, 0x20u);
    }

    v2[2](v2);
  }
  [*(id *)(a1 + 32) invalidate];
}

void sub_100098D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100098D54(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) taskInvalidationDisabled];
  if (!result || *(unsigned char *)(a1 + 48))
  {
    [*(id *)(a1 + 32) setTaskInvalidationDisabled:0];
    uint64_t v3 = [*(id *)(a1 + 32) taskAssertion];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    uint64_t v6 = *(void **)(a1 + 32);
    return [v6 setTaskAssertion:0];
  }
  return result;
}

void sub_1000990EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_100099104(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) taskInvalidationDisabled];
  if ((result & 1) == 0)
  {
    id result = [*(id *)(a1 + 32) setTaskInvalidationDisabled:1];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

void sub_10009914C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  uint64_t v4 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009925C;
  block[3] = &unk_10054F308;
  id v11 = *(id *)(a1 + 56);
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_10009925C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  uint64_t v2 = *(NSObject **)(a1 + 56);

  dispatch_group_leave(v2);
}

id *sub_1000992A8(id *result)
{
  if (*(unsigned char *)(*((void *)result[5] + 1) + 24)) {
    return (id *)[result[4] _invalidateTaskAssertionForced:1];
  }
  return result;
}

id sub_100099624(double a1)
{
  if (qword_10060A6F8 != -1) {
    dispatch_once(&qword_10060A6F8, &stru_10054F3C0);
  }
  uint64_t v2 = (void *)qword_10060A6F0;
  id v3 = +[NSDate dateWithTimeIntervalSinceReferenceDate:a1];
  uint64_t v4 = [v2 stringFromDate:v3];

  return v4;
}

id sub_100099BD4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v3 count]);
  uint64_t v6 = +[NSSet setWithArray:v3];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _OWORD v9[2] = sub_10009AC3C;
  uint64_t v9[3] = &unk_10054F3A0;
  id v7 = v5;
  id v10 = v7;
  [v4 enumerateValuesForProperties:v6 usingBlock:v9];

  return v7;
}

id sub_100099CD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100099BD4(*(void **)(a1 + 32), v3);
  id v5 = +[NSMutableString string];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (!v7) {
    goto LABEL_16;
  }
  id v8 = v7;
  uint64_t v9 = *(void *)v17;
  while (2)
  {
    for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v17 != v9) {
        objc_enumerationMutation(v6);
      }
      id v11 = [v4 objectForKey:*(void *)(*((void *)&v16 + 1) + 8 * i)];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v12 = [v11 absoluteString];
LABEL_11:
        uint64_t v13 = (void *)v12;

        id v11 = v13;
        goto LABEL_12;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass() & 1) == 0 && (objc_opt_respondsToSelector())
      {
        uint64_t v12 = [v11 stringValue];
        goto LABEL_11;
      }
LABEL_12:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || ![v11 length])
      {

        goto LABEL_19;
      }
      [v5 appendString:v11];
    }
    id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v8) {
      continue;
    }
    break;
  }
LABEL_16:

  if ([v5 length])
  {
    id v14 = +[NSData MZStringByMD5HashingString:v5];
  }
  else
  {
LABEL_19:
    id v14 = 0;
  }

  return v14;
}

id *sub_10009A378(id *result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (id *)[result[4] setObject:a3 forKey:a2];
  }
  return result;
}

void sub_10009ABE0(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  uint64_t v2 = (void *)qword_10060A6F0;
  qword_10060A6F0 = (uint64_t)v1;

  [(id)qword_10060A6F0 setTimeStyle:3];
  id v3 = (void *)qword_10060A6F0;

  [v3 setDateStyle:1];
}

id *sub_10009AC3C(id *result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (id *)[result[4] setObject:a3 forKey:a2];
  }
  return result;
}

id sub_10009B074(uint64_t a1)
{
  [*(id *)(a1 + 32) setTitle:*(void *)(a1 + 40) forState:0];
  [*(id *)(a1 + 32) sizeToFit];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 layoutBelowIfNeeded];
}

_UNKNOWN **sub_10009B468()
{
  unint64_t v0 = (_UNKNOWN **)qword_10060A700;
  if (!qword_10060A700)
  {
    qword_10060A700 = (uint64_t)&off_10057AE88;

    unint64_t v0 = &off_10057AE88;
  }

  return v0;
}

void sub_10009B4B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateAutorefreshRateSettingAndRestartTimer:1];
}

id sub_10009B73C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isActive];
  if ((result & 1) == 0)
  {
    [*(id *)(a1 + 32) setIsActive:1];
    id v3 = *(void **)(a1 + 32);
    return [v3 _onQueueUpdateTimerForActiveChanges];
  }
  return result;
}

id sub_10009B808(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isActive];
  if (result)
  {
    [*(id *)(a1 + 32) setIsActive:0];
    [*(id *)(a1 + 32) _onQueueUpdateTimerForActiveChanges];
    id result = [*(id *)(a1 + 32) hasLocalChangesToSync];
    if (result)
    {
      id result = [*(id *)(a1 + 32) _automaticallySynchronizeLocalChangesOnResignActive];
      if (result)
      {
        id v3 = _MTLogCategoryCloudSync();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "starting synchronizing changes for resignActive", v4, 2u);
        }

        return [*(id *)(a1 + 32) _onQueueSynchronizeWithAutosynchronizeMask:2 withCompletionBlock:&stru_10054F460];
      }
    }
  }
  return result;
}

void sub_10009B8C0(id a1)
{
  id v1 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "finished synchronizing changes for resignActive", v2, 2u);
  }
}

id sub_10009B9BC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueSetHasLocalChangesToSync:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10009BB3C(uint64_t a1)
{
  kdebug_trace();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10009BBE4;
  void v3[3] = &unk_10054D6E8;
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  [v2 _onQueueSynchronizeImmediatelyWithCompletionBlock:v3];
}

uint64_t sub_10009BBE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }

  return kdebug_trace();
}

void sub_10009BCDC(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10009BD64;
  v2[3] = &unk_10054F488;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _onQueueLoadBagContextWithCompletionHandler:v2];
}

uint64_t sub_10009BD64(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    unsigned int v5 = [a2 UPPDisabled] ^ 1;
    if (a3) {
      a2 = 0;
    }
    else {
      a2 = (void *)v5;
    }
  }
  id v6 = *(uint64_t (**)(uint64_t, void *))(v3 + 16);

  return v6(v3, a2);
}

void sub_10009C154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10009C1A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10009C1B8(uint64_t a1)
{
  kdebug_trace();
  uint64_t v2 = _MTLogCategoryUPPSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v7[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "_onQueueSync - UPP synchronizeTask did expire", (uint8_t *)v7, 2u);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v5 = [WeakRetained[4] cancelType];
    id v6 = v4[6];
    if (v5 == 2) {
      [v6 timeout];
    }
    else {
      [v6 cancel];
    }
    [v4[4] finishTaskOperationWithResult:&__kCFBooleanFalse error:0];
  }
}

void sub_10009C28C(uint64_t a1)
{
  kdebug_trace();
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    unsigned int v5 = _MTLogCategoryUPPSync();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [WeakRetained[4] error];
      if (v6)
      {
        uint64_t v1 = [WeakRetained[4] error];
        uint64_t v2 = [v1 localizedFailureReason];
        +[NSString stringWithFormat:@" ERROR = '%@'.", v2];
        id v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v7 = &stru_10056A8A0;
      }
      *(_DWORD *)buf = 138412290;
      id v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "_onQueueSync - UPP synchronize completed. %@", buf, 0xCu);
      if (v6)
      {
      }
    }

    [WeakRetained[4] invokeTaskCompletionBlocksWithBlock:&stru_10054F4C8];
    id v8 = [WeakRetained[4] result];
    unsigned __int8 v9 = [v8 BOOLValue];

    char v10 = v9 ^ 1;
    if (!*((unsigned char *)WeakRetained + 8)) {
      char v10 = 0;
    }
    *((unsigned char *)WeakRetained + 8) = v10;
    id v11 = WeakRetained[6];
    WeakRetained[6] = 0;

    id v12 = WeakRetained[4];
    WeakRetained[4] = 0;

    [WeakRetained _onQueueStartNewTimer];
  }
}

void sub_10009C444(id a1, id a2)
{
}

void sub_10009C450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    +[NSDate timeIntervalSinceReferenceDate];
    double v10 = v9;
    id v11 = [*((id *)WeakRetained + 4) metrics];
    [v11 setBagLookupEndTime:v10];

    id v12 = *((void *)WeakRetained + 9);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009C57C;
    block[3] = &unk_10054F518;
    objc_copyWeak(&v16, v7);
    id v14 = v6;
    id v15 = v5;
    dispatch_async(v12, block);

    objc_destroyWeak(&v16);
  }
}

void sub_10009C57C(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = *(id *)(a1 + 32);
    if (v4)
    {
LABEL_3:
      id v5 = (void *)*((void *)WeakRetained + 4);
      id v6 = +[NSNumber numberWithBool:0];
      [v5 finishTaskOperationWithResult:v6 error:v4];

      goto LABEL_4;
    }
    id v7 = *(void **)(a1 + 40);
    if (!v7)
    {
      uint64_t v13 = sub_10009C7BC(*(void **)(a1 + 32));
      id v4 = +[NSError errorWithDomain:@"MZKeyValueStoreErrorDomain" code:-2008 userInfo:v13];

      if (v4) {
        goto LABEL_3;
      }
      id v7 = *(void **)(a1 + 40);
    }
    if ([v7 UPPDisabled])
    {
      id v8 = sub_10009C7BC(*(void **)(a1 + 32));
      id v4 = +[NSError errorWithDomain:@"MZKeyValueStoreErrorDomain" code:-2007 userInfo:v8];

      if (v4) {
        goto LABEL_3;
      }
    }
    [*((id *)WeakRetained + 4) beginTaskOperation];
    double v9 = [[MZUniversalPlaybackPositionSyncHandler alloc] initWithDataSource:*((void *)WeakRetained + 2) bagContext:*(void *)(a1 + 40) andTask:*((void *)WeakRetained + 4)];
    double v10 = (void *)*((void *)WeakRetained + 6);
    *((void *)WeakRetained + 6) = v9;

    [*((id *)WeakRetained + 6) setCanRequestStoreSignIn:WeakRetained[9]];
    id v11 = _MTLogCategoryUPPSync();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "_onQueueSync - UPP synchronize operation beginning...", buf, 2u);
    }

    id v12 = (void *)*((void *)WeakRetained + 6);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10009C854;
    v14[3] = &unk_10054F4F0;
    objc_copyWeak(&v15, v2);
    [v12 synchronizeWithCompletionHandler:v14];
    objc_destroyWeak(&v15);
  }
LABEL_4:
}

void sub_10009C7A8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_10009C7BC(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = [0 objectForKey:NSUnderlyingErrorKey];

    id v3 = 0;
    if (!v2)
    {
      id v3 = objc_alloc_init((Class)NSMutableDictionary);
      [v3 setObject:v1 forKey:NSUnderlyingErrorKey];
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_10009C854(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    id v8 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009C920;
    block[3] = &unk_10054EA08;
    double v10 = WeakRetained;
    char v12 = a2;
    id v11 = v5;
    dispatch_async(v8, block);
  }
}

void sub_10009C920(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  id v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  [v2 finishTaskOperationWithResult:v3 error:*(void *)(a1 + 40)];
}

id sub_10009CA78(uint64_t a1)
{
  [*(id *)(a1 + 40) pollingInterval];
  [*(id *)(a1 + 32) setBagSpecifiedPollingInterval:];
  [*(id *)(a1 + 32) _effectiveAutorefreshRate];
  double v3 = v2;
  if ([*(id *)(a1 + 32) initialAutosyncNeeded])
  {
    BOOL v4 = 0;
  }
  else
  {
    [*(id *)(a1 + 32) autorefreshRate];
    BOOL v4 = v3 != v5;
  }
  id v6 = *(void **)(a1 + 32);

  return [v6 _updateAutorefreshRateSettingAndRestartTimer:v4];
}

void sub_10009CEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10009CEEC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) _updateSettingsFromLoadedBagContext:v7];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

uint64_t sub_10009CF68(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_10009CF80(uint64_t a1)
{
  double v2 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "_onQueueLoadBag - UPP bagLookupTask did expire", (uint8_t *)v5, 2u);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained[5] finishTaskOperationWithResult:0 error:0];
  }
}

void sub_10009D010(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    BOOL v4 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [WeakRetained[5] error];
      if (v5)
      {
        id v1 = [WeakRetained[5] error];
        double v2 = [v1 localizedFailureReason];
        +[NSString stringWithFormat:@" ERROR = '%@'.", v2];
        uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v6 = &stru_10056A8A0;
      }
      *(_DWORD *)buf = 138412290;
      double v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "_onQueueLoadBag - UPP load bag completed.%@", buf, 0xCu);
      if (v5)
      {
      }
    }

    [WeakRetained[5] invokeTaskCompletionBlocksWithBlock:&stru_10054F588];
    id v7 = WeakRetained[5];
    WeakRetained[5] = 0;
  }
}

void sub_10009D164(id a1, id a2)
{
}

void sub_10009D17C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  double v9 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      double v10 = _MTLogCategoryCloudSync();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "_onQueueLoadBag - load bag operation beginning...", buf, 2u);
      }

      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      _DWORD v11[2] = sub_10009D2CC;
      v11[3] = &unk_10054F540;
      objc_copyWeak(&v12, v7);
      +[MZUPPBagContext loadBagContextFromIMURLBag:v5 completionBlock:v11];
      objc_destroyWeak(&v12);
    }
    else
    {
      [WeakRetained[5] finishTaskOperationWithResult:0 error:v6];
    }
  }
}

void sub_10009D2B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10009D2CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  double v9 = WeakRetained;
  if (WeakRetained)
  {
    double v10 = WeakRetained[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009D3C4;
    block[3] = &unk_10054F518;
    objc_copyWeak(&v14, v7);
    id v12 = v5;
    id v13 = v6;
    dispatch_async(v10, block);

    objc_destroyWeak(&v14);
  }
}

void sub_10009D3C4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    double v3 = WeakRetained;
    [WeakRetained[5] finishTaskOperationWithResult:*(void *)(a1 + 32) error:*(void *)(a1 + 40)];
    id WeakRetained = v3;
  }
}

void sub_10009D4B4(uint64_t a1)
{
  double v2 = +[IMURLBag sharedInstance];
  if (v2)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
    double v3 = +[NSString stringWithFormat:@"Could not load bag context due to bag failure to load."];
    id v7 = v3;
    BOOL v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    id v5 = +[NSError errorWithDomain:NSCocoaErrorDomain code:100 userInfo:v4];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_10009D6BC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueResumeTimer];
}

id sub_10009D6C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onQueueSuspendTimer];
}

id sub_10009D740(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onQueueSynchronizeWithAutosynchronizeMask:1 withCompletionBlock:0];
}

void sub_10009D754(uint64_t a1)
{
  double v2 = *(double *)(a1 + 40);
  double v3 = _MTLogCategoryCloudSync();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2 >= 0.0)
  {
    if (v4)
    {
      id v5 = +[NSDate dateWithTimeIntervalSinceNow:*(double *)(a1 + 40)];
      NSErrorUserInfoKey v6 = +[NSDate date];
      [v5 timeIntervalSinceNow];
      double v8 = v7;
      [v6 timeIntervalSinceNow];
      double v10 = v8 - v9;
      if (v10 <= 60.0) {
        +[NSString stringWithFormat:@"%.2f seconds", *(void *)&v10, v14];
      }
      else {
      id v11 = +[NSString stringWithFormat:@"%ld minutes, %ld seconds", (uint64_t)v10 / 60, (uint64_t)v10 % 60];
      }
      id v12 = +[NSString stringWithFormat:@"%@ (%@ from now)", v5, v11];

      *(_DWORD *)buf = 138412290;
      id v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "scheduling next timer update at %@", buf, 0xCu);
    }
    id v13 = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"_timerFired:" selector:0 userInfo:0 repeats:*(double *)(a1 + 40)];
    [*(id *)(a1 + 32) setTimer:v13];
  }
  else
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "scheduled timer date already passed.  Firing immediately", buf, 2u);
    }

    [*(id *)(a1 + 32) _timerFired:0];
  }
}

void sub_10009F608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

id sub_10009F720(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) syncInProgress];
  double v2 = *(void **)(a1 + 32);

  return _[v2 setSyncInProgress:1];
}

void sub_10009F76C(uint64_t a1, void *a2)
{
  double v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v5 = +[MZUniversalPlaybackPositionMetadata metadataWithValuesFromDataSourceItem:v3];

  NSErrorUserInfoKey v6 = [v5 itemIdentifier];
  id v7 = [v6 length];

  if (v7)
  {
    double v8 = [WeakRetained transactionProcessor];
    double v9 = [v8 metadataItemsFromDataSource];
    double v10 = [v5 itemIdentifier];
    [v9 setObject:v5 forKey:v10];
  }
  else
  {
    double v8 = _MTLogCategoryUPPSync();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 138543362;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Will skip syncing item with no sync metadataIdentifier: %{public}@", (uint8_t *)&v11, 0xCu);
    }
  }
}

id sub_10009F8C0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) nextObject];
}

void sub_10009F9A4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0];
  if ([v1 count])
  {
    double v2 = _MTLogCategoryUPPSync();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v21 = COERCE_DOUBLE([v1 count]);
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Found %{public}ld local episodes with nil metadataIdentifier. Proceeding to populate the metadataIdentifiers", buf, 0xCu);
    }

    +[NSDate timeIntervalSinceReferenceDate];
    double v4 = v3;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = v1;
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v16;
      double v9 = v4;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          int v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          [v11 updateUPPIdentifierIfNeeded];
          [v11 metadataTimestamp];
          if (v12 < v9 && v12 > 0.0) {
            double v9 = v12;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);
    }
    else
    {
      double v9 = v4;
    }

    if (v9 != v4)
    {
      uint64_t v14 = _MTLogCategoryUPPSync();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        double v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Changing UppLastSyncTime to the oldest timestamp of updated episodes to force pushing their changes to server: %f", buf, 0xCu);
      }

      +[MTUniversalPlaybackPositionDataSource setUppLastSyncTime:v9];
    }
  }
}

void sub_10009FC7C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) canceled])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    double v2 = [*(id *)(a1 + 32) fatalSyncError];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2 != 0;
  }
}

void sub_1000A002C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_1000A0044(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) syncInProgress];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1000A0078(uint64_t a1)
{
  kdebug_trace();
  double v2 = [*(id *)(a1 + 32) dataSource];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _OWORD v4[2] = sub_1000A0138;
  void v4[3] = &unk_10054D738;
  double v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 performBlockAndWait:v4];
}

void sub_1000A0138(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v4 = 0;
  [v2 _synchronize:&v4];
  id v3 = v4;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A0F20(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) playlistUuid];
  id v5 = [v2 playlistForUuid:v3];

  id v4 = [v5 title];
  [*(id *)(a1 + 40) setTitle:v4];
}

void sub_1000A10E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A10F8(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) playlistUuid];
  id v7 = [v2 playlistForUuid:v3];

  uint64_t v4 = +[MTCoreSpotlightUtil uniqueIdentifierForObject:v7];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000A129C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 length])
  {
    id v3 = [[MTPlaylistManifest alloc] initWithPlaylistUuid:*(void *)(a1 + 32) initialEpisodeUuid:v4];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000A1568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A1580(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) playlistUuid];
  uint64_t v5 = [v3 playlistForUuid:v4];

  if (v5)
  {
    id v6 = [v5 episodes];
    id v7 = [v6 valueForKey:kEpisodeUuid];
    uint64_t v8 = [v7 array];
    id v9 = [v8 copy];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    int v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
}

void sub_1000A19F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1000A1A34(uint64_t a1)
{
  uint64_t v2 = kMTEpisodeEntityName;
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) persistentId];
  uint64_t v5 = +[MTEpisode predicateForPersistentId:v4];
  id v10 = [v3 objectsInEntity:v2 predicate:v5 sortDescriptors:0];

  id v6 = [v10 firstObject];
  uint64_t v7 = [v6 uuid];
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1000A2F74(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A3000;
    block[3] = &unk_10054D570;
    id v3 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_1000A3000(uint64_t a1)
{
  uint64_t v2 = +[MTDB sharedInstance];
  id v3 = [v2 mainQueueContext];

  id v4 = [*(id *)(a1 + 32) containerIdentifier];
  uint64_t v5 = [v3 podcastForFeedUrl:v4];

  id v6 = *(void **)(a1 + 32);
  if (v5)
  {
    uint64_t v7 = [v6 itemTitle];
    uint64_t v8 = +[NSBundle mainBundle];
    id v9 = [v8 localizedStringForKey:@"HANDOFF_MESSAGE_EPIOSDE_UNAVAILABLE" value:&stru_10056A8A0 table:0];
    id v10 = [v5 title];
    int v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, v7, v10);

    double v12 = +[NSBundle mainBundle];
    id v13 = [v12 localizedStringForKey:@"HANDOFF_MESSAGE_EPIOSDE_UNAVAILABLE_TITLE" value:&stru_10056A8A0 table:0];
    CFStringRef v14 = @"episode_unavailable";
  }
  else
  {
    uint64_t v7 = [v6 containerTitle];
    long long v15 = +[NSBundle mainBundle];
    long long v16 = [v15 localizedStringForKey:@"HANDOFF_MESSAGE_NOT_FOLLOWING" value:&stru_10056A8A0 table:0];
    int v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v16, v7);

    double v12 = +[NSBundle mainBundle];
    id v13 = [v12 localizedStringForKey:@"HANDOFF_MESSAGE_NOT_FOLLOWING_TITLE" value:&stru_10056A8A0 table:0];
    CFStringRef v14 = @"not_subscribed";
  }

  CFStringRef v24 = @"reason";
  CFStringRef v25 = v14;
  long long v17 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  +[IMMetrics recordUserAction:@"handoff_failed" dataSource:0 withData:v17];

  long long v18 = +[UIAlertController alertControllerWithTitle:v13 message:v11 preferredStyle:1];
  long long v19 = +[NSBundle mainBundle];
  id v20 = [v19 localizedStringForKey:@"OK" value:&stru_10056A8A0 table:0];
  double v21 = +[UIAlertAction actionWithTitle:v20 style:0 handler:0];
  [v18 addAction:v21];

  id v22 = +[MTApplication appController];
  long long v23 = [v22 rootViewController];
  [v23 presentViewController:v18 animated:1 completion:0];
}

void sub_1000A399C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) presentingViewController];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) presentingViewController];
    [v3 dismissViewControllerAnimated:0 completion:0];
  }
}

void sub_1000A3B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A3BB4(id *a1)
{
  [a1[4] presentViewController:a1[5] animated:0 completion:0];
  id v3 = [a1[5] popoverPresentationController];
  [v3 setPermittedArrowDirections:3];
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  [v3 setDelegate:WeakRetained];
}

BOOL sub_1000A3D24(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  id v3 = v2;
  BOOL v4 = v2
    && ([v2 isExternalType] & 1) == 0
    && ![v3 isRestricted];

  return v4;
}

void sub_1000A3D80(id a1, MTEpisodeActionController *a2, id a3)
{
  id v3 = [(IMActionController *)a2 actionObject];
  BOOL v4 = [v3 uuid];
  id v6 = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:&v6 count:1];
  +[MTRemoteSetPlaybackQueueUtil insertEpisodeUuids:v5 intoPlaybackQueueAtPosition:0];
}

BOOL sub_1000A3F10(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  id v3 = v2;
  BOOL v4 = v2
    && ([v2 isExternalType] & 1) == 0
    && ![v3 isRestricted];

  return v4;
}

void sub_1000A3F6C(id a1, MTEpisodeActionController *a2, id a3)
{
  id v3 = [(IMActionController *)a2 actionObject];
  BOOL v4 = [v3 uuid];
  id v6 = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:&v6 count:1];
  +[MTRemoteSetPlaybackQueueUtil insertEpisodeUuids:v5 intoPlaybackQueueAtPosition:1];
}

BOOL sub_1000A40FC(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  id v3 = v2;
  if (!v2
    || ([v2 isExternalType] & 1) != 0
    || ([v3 isCurrentPlayerItem] & 1) != 0)
  {
    unsigned __int8 v4 = 0;
  }
  else
  {
    id v6 = +[MTPlayerController defaultInstance];
    uint64_t v7 = [v6 upNextController];
    uint64_t v8 = [v3 uuid];
    unsigned __int8 v4 = [v7 containsEpisodeUuid:v8];
  }
  return v4;
}

void sub_1000A41B0(id a1, MTEpisodeActionController *a2, id a3)
{
  id v3 = a2;
  id v7 = +[MTPlayerController defaultInstance];
  unsigned __int8 v4 = [v7 upNextController];
  uint64_t v5 = [(IMActionController *)v3 actionObject];

  id v6 = [v5 uuid];
  [v4 removeEpisodesForUuid:v6];
}

NSString *__cdecl sub_1000A42C4(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  unsigned int v3 = [v2 isVideo];
  unsigned __int8 v4 = +[NSBundle mainBundle];
  uint64_t v5 = v4;
  if (v3) {
    CFStringRef v6 = @"MARK_UNPLAYED_SINGLE_VIDEO";
  }
  else {
    CFStringRef v6 = @"MARK_UNPLAYED_SINGLE_AUDIO";
  }
  id v7 = [v4 localizedStringForKey:v6 value:&stru_10056A8A0 table:0];

  return (NSString *)v7;
}

BOOL sub_1000A4360(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  unsigned __int8 v3 = [v2 isVisuallyPlayed];

  return v3;
}

void sub_1000A439C(id a1, MTEpisodeActionController *a2, id a3)
{
  id v5 = [(IMActionController *)a2 actionObject];
  unsigned __int8 v3 = +[MTLibrary sharedInstance];
  unsigned __int8 v4 = [v5 uuid];
  [v3 setPlayed:0 manually:1 forUserActionOnEpisodeUuid:v4];
}

NSString *__cdecl sub_1000A4490(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  unsigned int v3 = [v2 isVideo];
  unsigned __int8 v4 = +[NSBundle mainBundle];
  id v5 = v4;
  if (v3) {
    CFStringRef v6 = @"MARK_PLAYED_SINGLE_VIDEO";
  }
  else {
    CFStringRef v6 = @"MARK_PLAYED_SINGLE_AUDIO";
  }
  id v7 = [v4 localizedStringForKey:v6 value:&stru_10056A8A0 table:0];

  return (NSString *)v7;
}

BOOL sub_1000A452C(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  char v3 = [v2 isVisuallyPlayed] ^ 1;

  return v3;
}

void sub_1000A4568(id a1, MTEpisodeActionController *a2, id a3)
{
  id v5 = [(IMActionController *)a2 actionObject];
  char v3 = +[MTLibrary sharedInstance];
  unsigned __int8 v4 = [v5 uuid];
  [v3 setPlayed:1 manually:0 forUserActionOnEpisodeUuid:v4];
}

BOOL sub_1000A46A8(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  unsigned __int8 v3 = [v2 isExternalType];

  return v3;
}

void sub_1000A46E4(id a1, MTEpisodeActionController *a2, id a3)
{
  id v5 = [(IMActionController *)a2 actionObject];
  unsigned __int8 v3 = [v5 bestUrl];
  unsigned __int8 v4 = +[UIApplication sharedApplication];
  [v4 openURL:v3 options:&__NSDictionary0__struct completionHandler:0];
}

void sub_1000A48A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_1000A48C0(id a1, MTEpisodeActionController *a2)
{
  uint64_t v2 = [(IMActionController *)a2 actionObject];
  unsigned __int8 v3 = [v2 isShareable];

  return v3;
}

UIBarButtonItem *__cdecl sub_1000A48FC(id a1)
{
  id v1 = [objc_alloc((Class)UIBarButtonItem) initWithBarButtonSystemItem:9 target:0 action:0];

  return (UIBarButtonItem *)v1;
}

void sub_1000A493C(uint64_t a1, void *a2, void *a3)
{
  unsigned __int8 v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  id v7 = [v6 actionObject];

  uint64_t v8 = +[MTShareUtil shareViewControllerWithEpisode:v7 applicationActivities:0 selectedReferenceTime:0.0 selectedPlayerTime:0.0 currentPlayerTime:0.0];
  [WeakRetained showViewController:v8 inPopoverFromButton:v5];
}

void sub_1000A4F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_1000A4F70(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A5088;
  block[3] = &unk_10054F928;
  id v18 = v8;
  id v19 = v7;
  uint64_t v11 = *(void *)(a1 + 56);
  id v20 = v9;
  uint64_t v22 = v11;
  long long v16 = *(_OWORD *)(a1 + 40);
  id v12 = (id)v16;
  long long v21 = v16;
  id v13 = v9;
  id v14 = v7;
  id v15 = v8;
  dispatch_async(v10, block);
}

void sub_1000A5088(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    [*(id *)(*(void *)(a1[8] + 8) + 40) setValue:v2 forKey:a1[5]];
  }
  unsigned __int8 v3 = (void *)a1[6];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1[9] + 8);
    uint64_t v6 = *(void *)(v4 + 40);
    id v5 = (id *)(v4 + 40);
    if (!v6) {
      objc_storeStrong(v5, v3);
    }
  }
  id v7 = a1[7];

  dispatch_group_leave(v7);
}

void sub_1000A50F4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  uint64_t v11 = v9[2](v9, *(void *)(a1 + 40), v8);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1000A5238;
  v16[3] = &unk_10054F9A0;
  id v17 = v10;
  uint64_t v12 = *(void *)(a1 + 48);
  id v20 = *(id *)(a1 + 56);
  id v21 = v9;
  id v18 = v8;
  id v19 = *(id *)(a1 + 40);
  id v13 = v9;
  id v14 = v8;
  id v15 = v10;
  [v11 asyncValueOnQueue:v12 withCompletion:v16];
}

void sub_1000A5238(uint64_t a1, uint64_t a2)
{
  if (a2 || !*(void *)(a1 + 32))
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v4();
  }
  else
  {
    unsigned __int8 v3 = (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    uint64_t v5[2] = sub_1000A5344;
    v5[3] = &unk_10054F978;
    id v7 = *(id *)(a1 + 56);
    id v6 = *(id *)(a1 + 40);
    [v3 valueWithCompletion:v5];
  }
}

uint64_t sub_1000A5344(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

AMSBagValue *__cdecl sub_1000A535C(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)[(IMURLBag *)a2 URLForKey:a3];
}

AMSBagValue *__cdecl sub_1000A5364(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)[(IMURLBag *)a2 BOOLForKey:a3];
}

AMSBagValue *__cdecl sub_1000A536C(id a1, IMURLBag *a2, NSString *a3)
{
  return (AMSBagValue *)[(IMURLBag *)a2 doubleForKey:a3];
}

uint64_t sub_1000A5374(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 56) + 8);
    unsigned __int8 v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v4();
}

BOOL sub_1000A5EA4(id a1, MPMediaItem *a2, BOOL *a3)
{
  unsigned __int8 v3 = [(MPMediaItem *)a2 dateAdded];
  BOOL v4 = v3 != 0;

  return v4;
}

void sub_1000A620C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSNumber *__cdecl sub_1000A6228(id a1, MPMediaItem *a2)
{
  MPMediaEntityPersistentID v2 = [(MPMediaItem *)a2 persistentID];

  return +[NSNumber numberWithUnsignedLongLong:v2];
}

void sub_1000A626C(uint64_t a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A632C;
  v6[3] = &unk_10054FAF8;
  MPMediaEntityPersistentID v2 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  uint64_t v3 = [v2 filter:v6 compactMap:&stru_10054FB38];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_1000A632C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) episodeForUuid:a2];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(a1 + 40);
    id v6 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 persistentID]);
    uint64_t v7 = [v5 containsObject:v6] ^ 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id sub_1000A63B8(id a1, NSString *a2)
{
  MPMediaEntityPersistentID v2 = a2;

  return v2;
}

void sub_1000A6DE8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEnabled])
  {
    MPMediaEntityPersistentID v2 = *(void **)(a1 + 32);
    [v2 _processPendingTransactions];
  }
  else
  {
    uint64_t v3 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = [*(id *)(a1 + 32) currentTransaction];
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%@ Domain is disabled. Cancelling all pending transactions", (uint8_t *)&v7, 0xCu);
    }
    id v5 = *(void **)(a1 + 32);
    id v6 = +[MZKeyValueStoreError keyValueStoreDisabledErrorWithTransaction:0 underlyingError:0];
    [v5 _cancelAllPendingTransactions:v6];
  }
}

void sub_1000A6FAC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) clampsController];
  [v1 clearNetworkingBlocked];
}

id sub_1000A7324(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _scheduleTransaction:*(void *)(a1 + 40)];
}

void sub_1000A73C4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:v2 underlyingError:0];
  [v1 _cancelTransaction:v2 error:v3];
}

void sub_1000A7498(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:0 underlyingError:0];
  [v2 _cancelAllPendingTransactions:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  id v7 = [v4 currentTransaction];
  id v5 = [*(id *)(a1 + 32) currentTransaction];
  id v6 = +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:v5 underlyingError:0];
  [v4 _cancelTransaction:v7 error:v6];
}

void sub_1000A75D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:0 code:*(void *)(a1 + 40) underlyingError:0];
  [v2 _cancelAllPendingTransactions:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  id v7 = [v4 currentTransaction];
  id v5 = [*(id *)(a1 + 32) currentTransaction];
  id v6 = +[MZKeyValueStoreError transactionCancelledErrorWithTransaction:v5 code:*(void *)(a1 + 40) underlyingError:0];
  [v4 _cancelTransaction:v7 error:v6];
}

id sub_1000A7768(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resolveError:*(void *)(a1 + 40) transaction:*(void *)(a1 + 48) resolution:*(unsigned int *)(a1 + 56)];
}

void sub_1000A7804(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A7A34(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A7C08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  if (v2) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_1000A7C30(void *a1)
{
}

void sub_1000A7D20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A81D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A8720(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000A8848(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _delegateTransactionDidFail:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 48);
    id v5 = *(void **)(a1 + 32);
    return [v5 resolveError:v3 transaction:v4 resolution:0];
  }
  return result;
}

id sub_1000A89AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _delegateTransactionDidCancel:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
}

void sub_1000A92CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000A92E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A93E4;
  v6[3] = &unk_10054F518;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  id v5 = v3;
  id v7 = v5;
  id v8 = *(id *)(a1 + 32);
  [WeakRetained performBlock:v6];

  objc_destroyWeak(&v9);
}

void sub_1000A93D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000A93E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _processOperationOutput:*(void *)(a1 + 32) forRequest:*(void *)(a1 + 40)];
}

void sub_1000A9A54(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 keyValueStoreController:*(void *)(a1 + 32) transactionDidFinish:*(void *)(a1 + 40)];
}

void sub_1000A9C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v8);
  objc_destroyWeak((id *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_1000A9C74(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    id v3 = [WeakRetained backgroundTaskAssertion];
    unsigned int v4 = [v3 isEqual:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];

    id WeakRetained = v5;
    if (v4)
    {
      [v5 _endBackgroundTask];
      id WeakRetained = v5;
    }
  }
}

id sub_1000A9DA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_1000A9E88(uint64_t a1)
{
  id v2 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    id v3 = [*(id *)(a1 + 32) currentTransaction];
    int v8 = 138412290;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%@ Did receive kill switch response. Cancelling all pending transactions", (uint8_t *)&v8, 0xCu);
  }
  unsigned int v4 = [*(id *)(a1 + 32) clampsController];
  [v4 setNetworkingBlocked];

  id v5 = *(void **)(a1 + 32);
  id v6 = +[MZKeyValueStoreError killSwitchErrorWithTransaction:0 underlyingError:0];
  [v5 _cancelAllPendingTransactions:v6];

  return [*(id *)(a1 + 32) setEnabled:0];
}

void sub_1000AA074(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clampsController];
  [v2 setUserCancelledSignIn];

  id v3 = [*(id *)(a1 + 32) authenticationController];
  unsigned int v4 = [v3 shouldAuthenticate];

  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) clampsController];
    [v5 setAuthenticationRequest];
  }
  if (*(void *)(a1 + 40))
  {
    id v6 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = [*(id *)(a1 + 32) currentTransaction];
      uint64_t v8 = *(void *)(a1 + 48);
      int v9 = 138412546;
      id v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%@ AMSURLSession authentication error - %@", (uint8_t *)&v9, 0x16u);
    }
    [*(id *)(a1 + 32) _transactionDidFail:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
  }
}

id sub_1000AABB4(uint64_t a1, int a2)
{
  [*(id *)(a1 + 32) setIsDirty:(*(id *)(a1 + 32) isDirty) | a2];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);

  return _[v3 finishedDeserializationForKey:v4];
}

void sub_1000AB0B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ABC04(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) sortDescriptors:&__NSArray0__struct];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000ABCBC;
  void v3[3] = &unk_10054FE30;
  id v4 = *(id *)(a1 + 48);
  [v2 enumerateObjectsUsingBlock:v3];
}

void sub_1000ABCBC(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = +[NSMutableDictionary dictionary];
  if (+[MTStoreIdentifier isNotEmpty:](MTStoreIdentifier, "isNotEmpty:", [v9 storeTrackId]))
  {
    id v4 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v9 storeTrackId]);
  }
  else
  {
    id v4 = 0;
  }
  [v3 setObject:v4 forKeyedSubscript:@"episodeAdamId"];
  id v5 = [v9 podcast];
  id v6 = [v5 feedURL];
  [v3 setObject:v6 forKeyedSubscript:@"feedURL"];

  id v7 = [v9 guid];
  [v3 setObject:v7 forKeyedSubscript:@"guid"];

  [v9 lastBookmarkedDate];
  uint64_t v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v3 setObject:v8 forKeyedSubscript:@"createdDate"];

  [*(id *)(a1 + 32) addObject:v3];
}

void sub_1000AC5F0(uint64_t a1)
{
  __int16 v35 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [*(id *)(a1 + 32) count]);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v36 = *(void *)v40;
    do
    {
      id v4 = 0;
      id v33 = v3;
      do
      {
        if (*(void *)v40 != v36) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v39 + 1) + 8 * (void)v4);
        id v6 = [v5 objectForKeyedSubscript:@"episodeAdamId"];
        id v7 = [v6 longLongValue];

        uint64_t v8 = [v5 objectForKeyedSubscript:@"feedURL"];
        id v9 = [v5 objectForKeyedSubscript:@"guid"];
        id v10 = [v5 objectForKeyedSubscript:@"createdDate"];
        [v10 doubleValue];
        double v12 = v11;

        if (!+[MTStoreIdentifier isEmpty:v7]
          || (v9 ? (BOOL v13 = v8 == 0) : (BOOL v13 = 1), !v13))
        {
          if (+[MTStoreIdentifier isNotEmpty:v7])
          {
            id v14 = [*(id *)(a1 + 40) findEpisodeByStoreID:v7 inContext:*(void *)(a1 + 48)];
            if (v14)
            {
LABEL_18:
              if (v14)
              {
                id v15 = [*(id *)(a1 + 40) storageProvider];
                [v15 unsafeBookmarkEpisode:v14 onTimestamp:v12];

                long long v16 = _MTLogCategoryCloudSync();
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  id v17 = [*(id *)(a1 + 40) logPrefix];
                  id v18 = [v14 storeTrackId];
                  *(_DWORD *)buf = 138412546;
                  id v44 = v17;
                  __int16 v45 = 2048;
                  id v46 = v18;
                  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%@ Step 1: bookmark local episode: %lld", buf, 0x16u);
                }
                id v19 = [v14 uuid];
                [v35 addObject:v19];
              }
              else
              {
                id v14 = +[MTPodcast insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:title:author:provider:imageUrl:description:](MTPodcast, "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:title:author:provider:imageUrl:description:", *(void *)(a1 + 48), 0, v8, +[MTPodcast defaultShowType], @"Untitled", 0, 0, 0, 0);
                [v14 setImporting:1];
                id v19 = [v14 uuid];
                id v20 = +[MTEpisode insertNewEpisodeInManagedObjectContext:*(void *)(a1 + 48) canSendNotifications:*(unsigned __int8 *)(a1 + 64)];
                [v20 setIsHidden:1];
                [v20 setPodcast:v14];
                [v20 setGuid:v9];
                [v20 setStoreTrackId:v7];
                id v21 = [*(id *)(a1 + 40) storageProvider];
                [v21 unsafeBookmarkEpisode:v20 onTimestamp:v12];

                uint64_t v22 = _MTLogCategoryCloudSync();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  long long v23 = [*(id *)(a1 + 40) logPrefix];
                  *(_DWORD *)buf = 138412546;
                  id v44 = v23;
                  __int16 v45 = 2112;
                  id v46 = v19;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@ Step 1: create podcast for bookmarking: %@", buf, 0x16u);
                }
                CFStringRef v24 = _MTLogCategoryCloudSync();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                {
                  CFStringRef v25 = [*(id *)(a1 + 40) logPrefix];
                  id v26 = [v20 storeTrackId];
                  *(_DWORD *)buf = 138412546;
                  id v44 = v25;
                  __int16 v45 = 2048;
                  id v46 = v26;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@ Step 1: bookmark episode: %lld", buf, 0x16u);
                }
                long long v27 = [v20 uuid];
                [v35 addObject:v27];

                if ((+[MTStoreIdentifier isEmpty:v7] & 1) == 0)
                {
                  id v28 = +[PodcastRequestManager sharedInstance];
                  __int16 v29 = +[NSNumber numberWithLongLong:v7];
                  v37[0] = _NSConcreteStackBlock;
                  v37[1] = 3221225472;
                  v37[2] = sub_1000ACC1C;
                  v37[3] = &unk_10054FE80;
                  v37[4] = *(void *)(a1 + 40);
                  id v38 = v19;
                  [v28 updatePodcastWithEpisodeAdamId:v29 completion:v37];
                }
                id v3 = v33;
              }

              goto LABEL_30;
            }
          }
          else
          {
            id v14 = 0;
          }
          if (v9 && v8)
          {
            id v14 = [*(id *)(a1 + 40) findEpisodeByFeedURL:v8 guid:v9 inContext:*(void *)(a1 + 48)];
          }
          goto LABEL_18;
        }
LABEL_30:

        id v4 = (char *)v4 + 1;
      }
      while (v3 != v4);
      id v3 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
    }
    while (v3);
  }

  id v30 = [*(id *)(a1 + 40) predicateForBookmarksOnlyInLocalAndBeforeLastSyncWithRemoteBookmarksUUIDs:v35];
  __int16 v31 = [*(id *)(a1 + 48) objectsInEntity:kMTEpisodeEntityName predicate:v30 sortDescriptors:&__NSArray0__struct];
  objc_msgSend(*(id *)(a1 + 40), "checkPotentialLibraryDeletionIssueForRemoteBookmarksCount:episodesToUnbookmarkCount:newVersion:", objc_msgSend(*(id *)(a1 + 32), "count"), objc_msgSend(v31, "count"), *(void *)(a1 + 56));
  long long v32 = [*(id *)(a1 + 40) storageProvider];
  [v32 unsafeRemoveFromBookmarksEpisodes:v31 context:*(void *)(a1 + 48)];
}

void sub_1000ACC1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = dispatch_get_global_queue(21, 0);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_1000ACD0C;
  v11[3] = &unk_10054DFE8;
  id v12 = v5;
  id v13 = v6;
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = v8;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, v11);
}

void sub_1000ACD0C(id *a1)
{
  if (a1[4] && a1[5])
  {
    id v2 = [a1[6] storageProvider];
    id v3 = [v2 importContext];

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000ACE44;
    v8[3] = &unk_10054FE58;
    id v9 = v3;
    id v10 = a1[7];
    id v11 = a1[5];
    id v4 = a1[4];
    id v5 = a1[6];
    id v12 = v4;
    id v13 = v5;
    id v6 = v3;
    [v6 performBlockAndWaitWithSave:v8];
  }
  id v7 = +[MTFeedUpdateManager sharedInstance];
  [v7 updatePodcastWithUUID:a1[7] userInitiated:0 forced:1 forceBootstrap:0 source:11 completion:0];
}

void sub_1000ACE44(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  [v2 setDisplayType:*(void *)(a1 + 48)];
  [v2 setStoreCollectionId:[*(id *)(a1 + 56) longLongValue]];
  id v3 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 64) logPrefix];
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    int v7 = 138412802;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@ Step 1.5: update bookmark show displayType: %@ , store collection id: %@", (uint8_t *)&v7, 0x20u);
  }
}

id sub_1000ADD54(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v4
    && ([v3 objectForKey:NSUnderlyingErrorKey],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        v5,
        !v5))
  {
    if (v3) {
      id v7 = [v3 mutableCopy];
    }
    else {
      id v7 = objc_alloc_init((Class)NSMutableDictionary);
    }
    id v6 = v7;
    [v7 setObject:v4 forKey:NSUnderlyingErrorKey];
  }
  else
  {
    id v6 = v3;
  }

  return v6;
}

id sub_1000ADF88(uint64_t a1)
{
  if (a1 > -1010)
  {
    switch(a1)
    {
      case -1009:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorClientClamp"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966287;
        break;
      case -1008:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorValidation"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966288;
        break;
      case -1007:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorGeneric"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966289;
        break;
      case -1006:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorStoreAccountUserEnteredWrongCredentials"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966290;
        break;
      case -1005:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorStoreAccountUserCancelledSignedIn"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966291;
        break;
      case -1004:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorStoreAccountSessionExpired"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966292;
        break;
      case -1003:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorStoreAccountMismatch"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966293;
        break;
      case -1002:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorStoreAccountLoggedOut"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966294;
        break;
      case -1001:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorNoStoreAccount"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294966295;
        break;
      default:
        if (a1 != -1) {
          goto LABEL_18;
        }
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorUnknown"];
        id v2 = (void *)v1;
        uint64_t v3 = 0xFFFFFFFFLL;
        break;
    }
  }
  else if (a1 <= -3003)
  {
    switch(a1)
    {
      case -4003:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorTimeout"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294963293;
        break;
      case -4002:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorDelegateCancelled"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294963294;
        break;
      case -4001:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorCancelled"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294963295;
        break;
      default:
LABEL_18:
        id v4 = +[NSString stringWithFormat:@"Error Code = %ld", a1];
        goto LABEL_36;
    }
  }
  else
  {
    switch(a1)
    {
      case -2008:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorKeyBagLoadFailure"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294965288;
        break;
      case -2007:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorKeyBagKillSwitch"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294965289;
        break;
      case -2006:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorDisabled"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294965290;
        break;
      case -2005:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorKillSwitch"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294965291;
        break;
      case -2004:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorNetworkingBlocked"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294965292;
        break;
      case -2003:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorUserClamp"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294965293;
        break;
      case -2002:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorServerClamp"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294965294;
        break;
      case -2001:
        uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorAuthenticationClamp"];
        id v2 = (void *)v1;
        uint64_t v3 = 4294965295;
        break;
      default:
        if (a1 == -3002)
        {
          uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorMissingDomain"];
          id v2 = (void *)v1;
          uint64_t v3 = 4294964294;
        }
        else
        {
          if (a1 != -3001) {
            goto LABEL_18;
          }
          uint64_t v1 = +[NSString stringWithUTF8String:"MZKeyValueStoreErrorMissingURL"];
          id v2 = (void *)v1;
          uint64_t v3 = 4294964295;
        }
        break;
    }
  }
  id v4 = +[NSString stringWithFormat:@"Error Code = %@ (%d)", v1, v3];

LABEL_36:

  return v4;
}

void sub_1000AFAF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MTLogCategoryBackgroundFetching();
  uint64_t v5 = (char *)os_signpost_id_generate(v4);

  id v6 = _MTLogCategoryBackgroundFetching();
  id v7 = v6;
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v23 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "PodcastsBackgroundTask", "%{name=taskIdentifier}@", buf, 0xCu);
  }

  objc_initWeak(&location, v3);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000AFD78;
  v17[3] = &unk_10054FEF0;
  long long v18 = *(_OWORD *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 48);
  objc_copyWeak(v20, &location);
  v20[1] = v5;
  [v3 setExpirationHandler:v17];
  __int16 v9 = _MTLogCategoryBackgroundFetching();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Executing task named %@", buf, 0xCu);
  }

  __int16 v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1000AFEB4;
  void v13[3] = &unk_10054FF18;
  long long v14 = *(_OWORD *)(a1 + 32);
  id v12 = v3;
  id v15 = v12;
  long long v16 = v5;
  [v11 performWithCompletion:v13];

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
}

void sub_1000AFD4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_1000AFD78(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryBackgroundFetching();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Task named %@ expired and was cancelled", (uint8_t *)&v8, 0xCu);
  }

  [*(id *)(a1 + 40) rescheduleTasksWithIdentifier:*(void *)(a1 + 32) completion:0];
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) cancel];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained setTaskCompletedWithSuccess:0];

  uint64_t v5 = _MTLogCategoryBackgroundFetching();
  id v6 = v5;
  os_signpost_id_t v7 = *(void *)(a1 + 64);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    LOWORD(v8) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "PodcastsBackgroundTask", "CANCELLED", (uint8_t *)&v8, 2u);
  }
}

void sub_1000AFEB4(uint64_t a1, uint64_t a2)
{
  id v4 = _MTLogCategoryBackgroundFetching();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Task named %@ completed with success: %d", (uint8_t *)&v9, 0x12u);
  }

  [*(id *)(a1 + 40) rescheduleTasksWithIdentifier:*(void *)(a1 + 32) completion:0];
  [*(id *)(a1 + 48) setTaskCompletedWithSuccess:a2];
  id v6 = _MTLogCategoryBackgroundFetching();
  os_signpost_id_t v7 = v6;
  os_signpost_id_t v8 = *(void *)(a1 + 56);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    int v9 = 67109120;
    LODWORD(v10) = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, v8, "PodcastsBackgroundTask", "COMPLETE (%d)", (uint8_t *)&v9, 8u);
  }
}

void sub_1000B0420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
}

void sub_1000B0464(id *a1)
{
  uint64_t v2 = +[UIApplication sharedApplication];
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  [v2 endBackgroundTask:[WeakRetained backgroundTaskId]];

  id v4 = objc_loadWeakRetained(a1);
  [v4 setBackgroundTaskId:UIBackgroundTaskInvalid];

  uint64_t v5 = _MTLogCategoryBackgroundFetching();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error: timed out scheduling background tasks.", v6, 2u);
  }
}

void sub_1000B0538(uint64_t a1)
{
}

id sub_1000B0540(uint64_t a1)
{
  uint64_t v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:[*(id *)(a1 + 32) backgroundTaskId]];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 setBackgroundTaskId:UIBackgroundTaskInvalid];
}

void sub_1000B0670(uint64_t a1)
{
  uint64_t v2 = +[BGTaskScheduler sharedScheduler];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000B0728;
  v6[3] = &unk_10054FF88;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void **)(a1 + 48);
  id v7 = v3;
  uint64_t v8 = v4;
  id v9 = v5;
  [v2 getPendingTaskRequestsWithCompletionHandler:v6];
}

void sub_1000B0728(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (!v4) {
    goto LABEL_11;
  }
  id v5 = v4;
  char v6 = 0;
  uint64_t v7 = *(void *)v13;
  do
  {
    for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v13 != v7) {
        objc_enumerationMutation(v3);
      }
      id v9 = [*(id *)(*((void *)&v12 + 1) + 8 * i) identifier];
      unsigned __int8 v10 = [v9 isEqualToString:*(void *)(a1 + 32)];

      v6 |= v10;
    }
    id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  }
  while (v5);
  if (v6)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(void))(v11 + 16))();
    }
  }
  else
  {
LABEL_11:
    [*(id *)(a1 + 40) rescheduleTasksWithIdentifier:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
  }
}

uint64_t sub_1000B0944(uint64_t a1)
{
  uint64_t v2 = +[BGTaskScheduler sharedScheduler];
  [v2 cancelTaskRequestWithIdentifier:*(void *)(a1 + 32)];

  if ([*(id *)(a1 + 48) isEnabled])
  {
    id v3 = [objc_alloc((Class)BGAppRefreshTaskRequest) initWithIdentifier:*(void *)(a1 + 32)];
    [*(id *)(a1 + 48) earliestBeginTime];
    id v4 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:");
    [v3 setEarliestBeginDate:v4];

    id v5 = _MTLogCategoryBackgroundFetching();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      char v6 = *(void **)(a1 + 32);
      [*(id *)(a1 + 48) earliestBeginTime];
      *(_DWORD *)buf = 138412546;
      id v15 = v6;
      __int16 v16 = 2048;
      uint64_t v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Scheduling task named %@ with earliest begin time %f", buf, 0x16u);
    }

    uint64_t v8 = +[BGTaskScheduler sharedScheduler];
    id v13 = 0;
    [v8 submitTaskRequest:v3 error:&v13];
    id v9 = v13;

    if (v9)
    {
      unsigned __int8 v10 = _MTLogCategoryBackgroundFetching();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to schedule background task with error %@", buf, 0xCu);
      }
    }
  }
  else
  {
    id v3 = _MTLogCategoryBackgroundFetching();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      id v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scheduling disabled for %@", buf, 0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000B58D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    id v4 = _MTLogCategoryFeedUpdateIngester();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to re-download episodes after subscription changed %@", (uint8_t *)&v7, 0xCu);
    }
  }
  id v5 = _MTLogCategoryFeedUpdateIngester();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    char v6 = [*(id *)(a1 + 32) uuid];
    int v7 = 138412290;
    id v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Re-downloaded episdes on priceType change for episode uuid: %@", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1000B60C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) descriptionCache];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1000B611C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) episodeCache];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1000B6294(id a1)
{
  v3[0] = kEpisodeUuid;
  v3[1] = kEpisodeDescription;
  v3[2] = kEpisodePubDate;
  void v3[3] = kEpisodeDuration;
  void v3[4] = kEpisodePlayhead;
  void v3[5] = kEpisodePlayState;
  void v3[6] = kEpisodeVideo;
  v3[7] = kEpisodeAudio;
  v3[8] = kEpisodeExternalType;
  v3[9] = kEpisodeUti;
  v3[10] = kEpisodeByteSize;
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:11];
  id v2 = (void *)qword_10060A710;
  qword_10060A710 = v1;
}

char *sub_1000B6D0C(uint64_t a1, uint64_t a2, char *a3)
{
  [*(id *)(a1 + 32) appendAttributedString:a2];
  uint64_t result = (char *)[*(id *)(a1 + 40) count];
  if (result - 1 == a3)
  {
    if (!*(unsigned char *)(a1 + 72)) {
      return result;
    }
    char v6 = (uint64_t *)(a1 + 64);
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 48);
    [*(id *)(a1 + 32) appendAttributedString:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) appendAttributedString:*(void *)(a1 + 56)];
  }
  int v7 = *(void **)(a1 + 32);
  uint64_t v8 = *v6;

  return (char *)[v7 appendAttributedString:v8];
}

void sub_1000B76A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3 && (*(unsigned char *)(a1 + 56) || [*(id *)(a1 + 32) length]))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    NSAttributedStringKey v10 = NSParagraphStyleAttributeName;
    uint64_t v11 = v7;
    char v6 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  }
  else
  {
    char v6 = 0;
  }
  if (*(unsigned char *)(a1 + 56) || a3 || *(unsigned char *)(a1 + 57))
  {
    uint64_t v8 = [@"\n" stringByAppendingString:v5];

    id v5 = (id)v8;
  }
  id v9 = [objc_alloc((Class)NSAttributedString) initWithString:v5 attributes:v6];
  [*(id *)(a1 + 48) appendAttributedString:v9];
}

char *sub_1000B7EF8(uint64_t a1, uint64_t a2, char *a3)
{
  [*(id *)(a1 + 32) appendAttributedString:a2];
  uint64_t result = (char *)[*(id *)(a1 + 40) count];
  if (result - 1 == a3)
  {
    if (!*(unsigned char *)(a1 + 72)) {
      return result;
    }
    char v6 = (uint64_t *)(a1 + 64);
  }
  else
  {
    char v6 = (uint64_t *)(a1 + 48);
    [*(id *)(a1 + 32) appendAttributedString:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) appendAttributedString:*(void *)(a1 + 56)];
  }
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *v6;

  return (char *)[v7 appendAttributedString:v8];
}

id sub_1000B8120(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) allObjects];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B81F0;
  v8[3] = &unk_100550098;
  id v9 = v3;
  id v5 = v3;
  char v6 = [v4 mt_compactMap:v8];

  return v6;
}

id sub_1000B81F0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) playlistForUuid:a2];
}

void sub_1000B8314(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000B833C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B83CC;
  block[3] = &unk_10054E8E0;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_1000B83CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _performDeferredIndexAll];
}

void sub_1000B8574(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasBeenIndexed])
  {
    id v2 = _MTLogCategorySpotlight();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[IndexAll] bailing.  already indexed...", (uint8_t *)&v15, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    return;
  }
  uint64_t v3 = [*(id *)(a1 + 32) indexAllBatchGenerator];
  if (!v3
    || (id v4 = (void *)v3,
        [*(id *)(a1 + 32) indexAllBatchGenerator],
        id v5 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v6 = [v5 finished],
        v5,
        v4,
        (v6 & 1) != 0))
  {
    uint64_t v7 = [*(id *)(a1 + 32) savedPartialUploadStateIndexPath];
    uint64_t v8 = [[MTCoreSpotlightIndexBatchGenerator alloc] initWithStartingIndexPath:v7];
    [*(id *)(a1 + 32) setIndexAllBatchGenerator:v8];
    id v9 = [*(id *)(a1 + 32) indexAllBatchGenerator];
    NSAttributedStringKey v10 = [v9 indexAllCompletions];
    id v11 = objc_retainBlock(*(id *)(a1 + 40));
    [v10 addObject:v11];

    long long v12 = _MTLogCategorySpotlight();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      __int16 v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Indexing] *** scheduling indexAll in batches [%@] ***", (uint8_t *)&v15, 0xCu);
    }

    [*(id *)(a1 + 32) _onIndexingQueueHandleNextBatchOrUpdateRequest];
    goto LABEL_14;
  }
  id v13 = _MTLogCategorySpotlight();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[IndexAll] bailing.  already running...", (uint8_t *)&v15, 2u);
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = [*(id *)(a1 + 32) indexAllBatchGenerator];
    uint64_t v8 = [v7 indexAllCompletions];
    id v14 = objc_retainBlock(*(id *)(a1 + 40));
    [(MTCoreSpotlightIndexBatchGenerator *)v8 addObject:v14];

LABEL_14:
  }
}

void sub_1000B88F8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasDeferredIndexAll])
  {
    _MTLogCategorySpotlight();
    id v2 = (MTCSUpdateIndexRequest *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v2->super, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(MTCSUpdateIndexRequest **)(a1 + 40);
      int v6 = 138412290;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, &v2->super, OS_LOG_TYPE_DEFAULT, "[Update] Dropping index request (reason '%@') since we haven't yet received the initial indexAllData", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    id v2 = [[MTCSUpdateIndexRequest alloc] initWithReason:*(void *)(a1 + 40) entityLoadingBlock:*(void *)(a1 + 56) searchableIndex:*(void *)(a1 + 48) completion:*(void *)(a1 + 64)];
    id v4 = [*(id *)(a1 + 32) updateIndexRequests];
    [v4 addObject:v2];

    id v5 = _MTLogCategorySpotlight();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Indexing] *** scheduling update [%@] ***", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(a1 + 32) _onIndexingQueueHandleNextBatchOrUpdateRequest];
  }
}

void sub_1000B8C7C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000B8D04;
  v2[3] = &unk_100550130;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 enumerateObjectsUsingBlock:v2];
}

uint64_t sub_1000B8D04(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(a1 + 32));
}

void sub_1000B8F24(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) entityLoadingBlock];
  id v3 = v2[2](v2, *(void *)(a1 + 40));

  id v4 = _MTLogCategorySpotlight();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Indexing] *** handling update [BEGIN] [%@] ***", buf, 0xCu);
  }

  int v6 = [*(id *)(a1 + 48) indexAllBatchGenerator];

  if (v6)
  {
    uint64_t v7 = [v3 mt_compactMap:&stru_100550170];
    uint64_t v8 = [*(id *)(a1 + 48) indexAllBatchGenerator];
    [v8 markUpdateUnnecessaryForObjectIDs:v7];
  }
  id v9 = [*(id *)(a1 + 48) annotator];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_1000B90FC;
  v11[3] = &unk_100550198;
  NSAttributedStringKey v10 = *(void **)(a1 + 56);
  void v11[4] = *(void *)(a1 + 48);
  id v12 = v10;
  id v13 = *(id *)(a1 + 32);
  +[MTCoreSpotlightUtil prepareSearchableItemsForObjectInArray:v3 annotator:v9 completion:v11];
}

NSManagedObjectID *__cdecl sub_1000B90F4(id a1, NSManagedObject *a2)
{
  return [(NSManagedObject *)a2 objectID];
}

void sub_1000B90FC(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1000B9288;
  void v10[3] = &unk_10054DE48;
  id v11 = *(id *)(a1 + 48);
  [v4 searchableIndex:v5 indexSearchableItems:a2 completionHandler:v10];
  int v6 = _MTLogCategorySpotlight();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[Indexing] *** handling update [DONE] [%@] ***", buf, 0xCu);
  }

  uint64_t v8 = [*(id *)(a1 + 32) indexingQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _OWORD v9[2] = sub_1000B9308;
  uint64_t v9[3] = &unk_10054D570;
  void v9[4] = *(void *)(a1 + 32);
  dispatch_async(v8, v9);
}

void sub_1000B9288(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) completion];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) completion];
    v3[2]();
  }
}

id sub_1000B9308(uint64_t a1)
{
  [*(id *)(a1 + 32) setHasIndexingOperationInProgress:0];
  id v2 = *(void **)(a1 + 32);

  return [v2 _onIndexingQueueHandleNextBatchOrUpdateRequest];
}

id sub_1000B9420(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startProcessNextBatchInGenerator:*(void *)(a1 + 40) searchableIndex:*(void *)(a1 + 48)];
}

void sub_1000B94EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  int v6 = [v4 annotator];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _OWORD v9[2] = sub_1000B95CC;
  uint64_t v9[3] = &unk_100550198;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v10 = v7;
  uint64_t v11 = v8;
  id v12 = *(id *)(a1 + 48);
  +[MTCoreSpotlightUtil prepareSearchableItemsForObjectInArray:v5 annotator:v6 completion:v9];
}

void sub_1000B95CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count] && !objc_msgSend(*(id *)(a1 + 32), "finished"))
  {
    id v5 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1000B96B8;
    v7[3] = &unk_1005501C0;
    void v7[4] = v5;
    id v8 = *(id *)(a1 + 32);
    [v5 searchableIndex:v6 indexSearchableItems:v3 completionHandler:v7];
  }
  else
  {
    if ([*(id *)(a1 + 32) canceled]) {
      uint64_t v4 = 2;
    }
    else {
      uint64_t v4 = 4;
    }
    [*(id *)(a1 + 40) _didCompleteBatchProcessingBatchGenerator:*(void *)(a1 + 32) state:v4 error:0];
  }
}

void sub_1000B96B8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    [v3 _didCompleteBatchProcessingBatchGenerator:v4 state:3 error:a2];
  }
  else
  {
    id v5 = [v3 indexingQueue];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000B978C;
    v8[3] = &unk_10054D9B0;
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    id v9 = v6;
    uint64_t v10 = v7;
    dispatch_async(v5, v8);
  }
}

void sub_1000B978C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) nextIndexPath];
  [*(id *)(a1 + 40) savePartialUploadStateIndexPath:v2];
  [*(id *)(a1 + 40) setHasIndexingOperationInProgress:0];
  [*(id *)(a1 + 40) _onIndexingQueueHandleNextBatchOrUpdateRequest];
}

id sub_1000B98F8(uint64_t a1)
{
  id v2 = _MTLogCategorySpotlight();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = *(void *)(a1 + 56) - 1;
    if (v3 > 3) {
      CFStringRef v4 = @"inactive";
    }
    else {
      CFStringRef v4 = *(&off_100550368 + v3);
    }
    uint64_t v5 = *(void *)(a1 + 32);
    int v9 = 138412546;
    CFStringRef v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Indexing] *** completed indexAll (%@) in batches [%@] ***", (uint8_t *)&v9, 0x16u);
  }

  id v6 = [*(id *)(a1 + 40) indexAllBatchGenerator];
  uint64_t v7 = *(void **)(a1 + 32);

  if (v6 == v7) {
    [*(id *)(a1 + 40) setIndexAllBatchGenerator:0];
  }
  [*(id *)(a1 + 40) _onQueuePerformCompletionsForGenerator:*(void *)(a1 + 32) error:*(void *)(a1 + 48)];
  [*(id *)(a1 + 40) setHasIndexingOperationInProgress:0];
  return [*(id *)(a1 + 40) _onIndexingQueueHandleNextBatchOrUpdateRequest];
}

void sub_1000B9BA8(uint64_t a1, void *a2)
{
  unint64_t v3 = *(NSObject **)(a1 + 32);
  id v4 = a2;
  dispatch_group_enter(v3);
  uint64_t v5 = +[MTImageStore defaultStore];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000B9C70;
  v6[3] = &unk_100550238;
  id v7 = *(id *)(a1 + 32);
  [v5 performWhenURLAvailableForImageForKey:v4 block:v6];
}

void sub_1000B9C70(uint64_t a1)
{
}

void sub_1000B9C78(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) allObjects];
  unint64_t v3 = [v2 componentsJoinedByString:@", "];
  id v4 = +[NSString stringWithFormat:@"Artwork Change (%@)", v3];

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = [v5 searchableIndex];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000B9D84;
  v7[3] = &unk_1005500C0;
  id v8 = *(id *)(a1 + 32);
  [v5 updateSearchableIndexWithReason:v4 searchableIndex:v6 entityLoadingBlock:v7 completion:0];
}

id sub_1000B9D84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableSet set];
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  uint64_t v15 = sub_1000B9F2C;
  __int16 v16 = &unk_100550288;
  id v17 = v3;
  id v6 = v4;
  id v18 = v6;
  id v7 = v3;
  [v5 enumerateObjectsUsingBlock:&v13];
  id v8 = _MTLogCategorySpotlight();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = [v6 count:v13, v14, v15, v16, v17, v18];
    CFStringRef v10 = [v6 valueForKey:@"uuid"];
    *(_DWORD *)buf = 67109378;
    unsigned int v20 = v9;
    __int16 v21 = 2112;
    uint64_t v22 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "update searchable index.  will update %d items (uuids = %@)", buf, 0x12u);
  }
  __int16 v11 = [v6 allObjects];

  return v11;
}

uint64_t sub_1000B9F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) podcastForUuid:a2];
  uint64_t v4 = v3;
  if (v3)
  {
    id v8 = (void *)v3;
    [*(id *)(a1 + 40) addObject:v3];
    uint64_t v5 = *(void **)(a1 + 40);
    id v6 = [v8 episodes];
    [v5 unionSet:v6];

    uint64_t v4 = (uint64_t)v8;
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000BA0D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    uint64_t v5[2] = sub_1000BA194;
    v5[3] = &unk_1005502D0;
    id v6 = *(id *)(a1 + 48);
    [v2 indexSearchableItems:v3 completionHandler:v5];
  }
  else
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v4();
  }
}

uint64_t sub_1000BA194(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BA278(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = [*(id *)(a1 + 32) searchableIndex];
    uint64_t v3 = [*(id *)(a1 + 40) allObjects];
    [v4 deleteSearchableItemsWithIdentifiers:v3 completionHandler:0];
  }
}

void sub_1000BA4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BA518(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) changesForEntityName:kMTPodcastEntityName];
  uint64_t v3 = [v2 updatedObjectIDs];
  id v4 = +[NSMutableSet setWithSet:v3];

  uint64_t v5 = [*(id *)(a1 + 32) changesForEntityName:kMTEpisodeEntityName];
  id v6 = [v5 updatedObjectIDs];
  [v4 unionSet:v6];

  id v7 = [*(id *)(a1 + 32) changesForEntityName:kMTPlaylistEntityName];
  id v8 = [v7 updatedObjectIDs];
  [v4 unionSet:v8];

  unsigned int v9 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v4 count]);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v10 = v4;
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) existingObjectWithID:*(void *)(*((void *)&v19 + 1) + 8 * (void)v14) error:0];
        if (v15) {
          [v9 addObject:v15];
        }

        uint64_t v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }

  __int16 v16 = [v9 allObjects];
  id v17 = [*(id *)(a1 + 40) annotator];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_1000BA7B4;
  v18[3] = &unk_100550320;
  void v18[4] = *(void *)(a1 + 40);
  +[MTCoreSpotlightUtil prepareSearchableItemsForObjectInArray:v16 annotator:v17 completion:v18];
}

void sub_1000BA7B4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 searchableIndex];
  [v2 searchableIndex:v4 indexSearchableItems:v3 completionHandler:0];
}

void sub_1000BA8F8(uint64_t a1)
{
  id v2 = _MTLogCategorySpotlight();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Indexing] *** received indexAll request ***", buf, 2u);
  }

  [*(id *)(a1 + 32) _onQueueCancelCurrentReindexAll];
  [*(id *)(a1 + 32) clearHasBeenIndexed];
  [*(id *)(a1 + 32) clearPartialUploadState];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1000BA9F0;
  v5[3] = &unk_1005502D0;
  id v6 = *(id *)(a1 + 48);
  [v3 indexAllDataWithSearchableIndex:v4 completionHandler:v5];
}

uint64_t sub_1000BA9F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BAB04(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  id v3 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v20 = a1;
  id v21 = objc_alloc_init((Class)NSMutableSet);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v4);
        }
        unsigned int v9 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        if ((unint64_t)objc_msgSend(v9, "length", v20) >= 2)
        {
          id v10 = [v9 substringFromIndex:1];
          unsigned __int8 v11 = [v9 hasPrefix:@"p"];
          id v12 = v2;
          if ((v11 & 1) != 0
            || (v13 = [v9 hasPrefix:@"e"], id v12 = v3, (v13 & 1) != 0)
            || (v14 = [v9 hasPrefix:@"s"], id v12 = v21, v14))
          {
            [v12 addObject:v10];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v6);
  }

  uint64_t v15 = *(void **)(v20 + 40);
  uint64_t v16 = *(void *)(v20 + 48);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1000BADB0;
  v24[3] = &unk_100550348;
  id v25 = v2;
  id v26 = v3;
  id v27 = v21;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000BB048;
  v22[3] = &unk_10054D6E8;
  id v23 = *(id *)(v20 + 56);
  id v17 = v21;
  id v18 = v3;
  id v19 = v2;
  [v15 updateSearchableIndexWithReason:@"System Re-index request" searchableIndex:v16 entityLoadingBlock:v24 completion:v22];
}

id sub_1000BADB0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSPredicate predicateWithFormat:@"%K IN %@", kPodcastFeedUrl, a1[4]];
  id v5 = +[MTCoreSpotlightUtil fetchRequestForIndexType:0 additionalPredicate:v4];
  v28[0] = v5;
  id v6 = +[NSPredicate predicateWithFormat:@"%K IN %@", kEpisodeGuid, a1[5]];
  uint64_t v7 = +[MTCoreSpotlightUtil fetchRequestForIndexType:1 additionalPredicate:v6];
  v28[1] = v7;
  id v8 = +[NSPredicate predicateWithFormat:@"%K IN %@", kPlaylistUuid, a1[6]];
  unsigned int v9 = +[MTCoreSpotlightUtil fetchRequestForIndexType:2 additionalPredicate:v8];
  v28[2] = v9;
  id v10 = +[NSArray arrayWithObjects:v28 count:3];

  unsigned __int8 v11 = +[NSMutableArray array];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v12 = v10;
  id v13 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        id v22 = 0;
        id v18 = [v3 executeFetchRequest:v17 error:&v22];
        id v19 = v22;
        uint64_t v20 = v19;
        if (v19) {
          [v19 logAndThrow:1];
        }
        if (v18) {
          [v11 addObjectsFromArray:v18];
        }
      }
      id v14 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v14);
  }

  return v11;
}

uint64_t sub_1000BB048(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000BB99C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000BBA50;
  v6[3] = &unk_100550400;
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  char v8 = *(unsigned char *)(a1 + 64);
  [v2 prepareIntentForEpisodeUuid:v3 stationUuid:v4 includeImage:1 includeStorePlatformData:1 completion:v6];
}

void sub_1000BBA50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [objc_alloc((Class)INPlayMediaIntentResponse) initWithCode:4 userActivity:0];
    id v5 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 32), "interactionClass")), "initWithIntent:response:", v3, v4);
    id v6 = [v3 mediaContainer];
    id v7 = [v6 identifier];
    [v5 setGroupIdentifier:v7];

    [v5 _setDonatedBySiri:*(unsigned __int8 *)(a1 + 48)];
    char v8 = _MTLogCategorySiri();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Start to donate INInteraction: %@", buf, 0xCu);
    }

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_1000BBC20;
    v11[3] = &unk_1005503D8;
    id v12 = v5;
    id v13 = *(id *)(a1 + 40);
    id v9 = v5;
    [v9 donateInteractionWithCompletion:v11];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
}

void sub_1000BBC20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MTLogCategorySiri();
  id v5 = v4;
  if (v3)
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    int v11 = 138412290;
    id v12 = v3;
    id v6 = "Failed to donate Siri Action with error %@";
    id v7 = v5;
    os_log_type_t v8 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    id v9 = *(void **)(a1 + 32);
    int v11 = 138412290;
    id v12 = v9;
    id v6 = "Success donating INInteraction: %@";
    id v7 = v5;
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v11, 0xCu);
LABEL_7:

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, BOOL))(v10 + 16))(v10, v3 == 0);
  }
}

void sub_1000BC448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC474(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_1000BC4C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) podcastUuid];
  uint64_t v4 = [v2 podcastForUuid:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = *(void **)(a1 + 32);
  id v11 = [*(id *)(a1 + 48) episodeUuid];
  uint64_t v8 = [v7 episodeForUuid:v11];
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_1000BCBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose(&STACK[0x2C8], 8);
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Block_object_dispose(&STACK[0x318], 8);
  _Block_object_dispose((const void *)(v68 - 232), 8);
  _Block_object_dispose((const void *)(v68 - 200), 8);
  _Block_object_dispose((const void *)(v68 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1000BCC88(uint64_t a1)
{
  id v35 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  uint64_t v2 = [v35 uuid];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = [v35 guid];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v35 storeTrackId];
  uint64_t v8 = [v35 title];
  uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = [v35 podcast];
  uint64_t v12 = [v11 uuid];
  uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  id v15 = [v35 podcast];
  uint64_t v16 = [v15 feedURL];
  uint64_t v17 = *(void *)(*(void *)(a1 + 88) + 8);
  id v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  id v19 = [v35 podcast];
  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = [v19 storeCollectionId];

  uint64_t v20 = [v35 podcast];
  uint64_t v21 = [v20 title];
  uint64_t v22 = *(void *)(*(void *)(a1 + 104) + 8);
  long long v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v21;

  long long v24 = [v35 podcast];
  uint64_t v25 = [v24 author];
  uint64_t v26 = *(void *)(*(void *)(a1 + 112) + 8);
  id v27 = *(void **)(v26 + 40);
  *(void *)(v26 + 40) = v25;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = [v35 isPlayheadResumable];
  long long v28 = [*(id *)(a1 + 32) playlistForUuid:*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40)];
  uint64_t v29 = [v28 uuid];
  uint64_t v30 = *(void *)(*(void *)(a1 + 128) + 8);
  long long v31 = *(void **)(v30 + 40);
  *(void *)(v30 + 40) = v29;

  uint64_t v32 = [v28 title];
  uint64_t v33 = *(void *)(*(void *)(a1 + 136) + 8);
  uint64_t v34 = *(void **)(v33 + 40);
  *(void *)(v33 + 40) = v32;
}

void sub_1000BCE9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) length];
  id v11 = [*(id *)(a1 + 32) identifierComposer];
  uint64_t v12 = v11;
  id v35 = v9;
  if (v10)
  {
    uint64_t v13 = [v11 universalPlaybackQueueIdentifierForStationUuid:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) episodeUuid:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) episodeGuid:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) episodeStoreId:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) podcastFeedUrl:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];

    id v14 = [objc_alloc((Class)INMediaItem) initWithIdentifier:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) title:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) type:8 artwork:v7 artist:0 topics:0 namedEntities:0 privateMediaItemValueData:0];
    if (v14)
    {
LABEL_3:
      id v33 = v8;
      id v15 = [*(id *)(a1 + 32) peopleScoresFromMediaData:v9 keyedOnQid:0];
      uint64_t v16 = [*(id *)(a1 + 32) peopleScoresFromMediaData:v9 keyedOnQid:1];
      id v17 = v7;
      id v18 = [objc_alloc((Class)INMediaItem) initWithIdentifier:v13 title:*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40) type:7 artwork:v7 artist:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) topics:v16 namedEntities:v15 privateMediaItemValueData:0];
      id v19 = v18;
      uint64_t v20 = v13;
      if (v18)
      {
        id v36 = v18;
        uint64_t v21 = +[NSArray arrayWithObjects:&v36 count:1];
      }
      else
      {
        uint64_t v21 = &__NSArray0__struct;
      }
      id v30 = objc_alloc((Class)INPlayMediaIntent);
      long long v31 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 136) + 8) + 24)];
      id v29 = [v30 initWithMediaItems:v21 mediaContainer:v14 playShuffled:&__kCFBooleanFalse playbackRepeatMode:1 resumePlayback:v31 playbackQueueLocation:3 playbackSpeed:&off_10057AF50 mediaSearch:0];

      id v8 = v33;
      id v9 = v35;
      uint64_t v13 = v20;
      id v7 = v17;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v34 = [v11 universalPlaybackQueueIdentifierForPodcastUuid:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) podcastFeedUrl:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) podcastStoreId:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) episodeUuid:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) episodeGuid:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) episodeStoreId:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) sampPlaybackOrder:0];

    uint64_t v22 = [*(id *)(a1 + 32) identifierComposer];
    long long v23 = [v22 universalPlaybackQueueIdentifierForPodcastUuid:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) podcastFeedUrl:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) podcastStoreId:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24)];

    long long v24 = [*(id *)(a1 + 32) peopleScoresFromMediaData:v8 keyedOnQid:0];
    uint64_t v25 = [*(id *)(a1 + 32) peopleScoresFromMediaData:v8 keyedOnQid:1];
    uint64_t v26 = [*(id *)(a1 + 32) topicScoresFromMediaData:v8];
    id v27 = v8;
    id v28 = [v26 mutableCopy];

    [v28 addEntriesFromDictionary:v25];
    id v14 = [objc_alloc((Class)INMediaItem) initWithIdentifier:v23 title:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) type:6 artwork:v7 artist:*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) topics:v28 namedEntities:v24 privateMediaItemValueData:0];

    id v8 = v27;
    uint64_t v13 = (void *)v34;
    id v9 = v35;

    if (v14) {
      goto LABEL_3;
    }
  }
  id v29 = 0;
LABEL_9:
  uint64_t v32 = *(void *)(a1 + 40);
  if (v32) {
    (*(void (**)(uint64_t, id))(v32 + 16))(v32, v29);
  }
}

void sub_1000BD29C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1000BD398;
    v7[3] = &unk_1005504C8;
    uint64_t v6 = *(void **)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    id v8 = v3;
    [v6 fetchMediaDataForEpisodeStoreId:v4 podcastStoreId:v5 completion:v7];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_1000BD398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2, a3);
}

void sub_1000BD3B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) donationQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000BD47C;
  v6[3] = &unk_10054D738;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1000BD47C(uint64_t a1)
{
  id v2 = +[INImage imageWithImageData:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000BD5D0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = +[NSData dataWithContentsOfURL:a2];
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v3 = [*(id *)(a1 + 32) defaultPodcastArtworkData];
    uint64_t v4 = *(void (**)(void))(v5 + 16);
  }
  id v6 = (id)v3;
  v4();
}

void sub_1000BD7FC(void *a1, void *a2)
{
  id v9 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && ([v9 objectForKeyedSubscript:a1[4]],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        objc_opt_class(),
        char isKindOfClass = objc_opt_isKindOfClass(),
        v3,
        (isKindOfClass & 1) != 0))
  {
    uint64_t v5 = [v9 objectForKeyedSubscript:a1[4]];
  }
  else
  {
    uint64_t v5 = &__NSDictionary0__struct;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && ([v9 objectForKeyedSubscript:a1[5]],
        id v6 = objc_claimAutoreleasedReturnValue(),
        objc_opt_class(),
        char v7 = objc_opt_isKindOfClass(),
        v6,
        (v7 & 1) != 0))
  {
    id v8 = [v9 objectForKeyedSubscript:a1[5]];
  }
  else
  {
    id v8 = &__NSDictionary0__struct;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1000BDEB0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create(0, 0);
  uint64_t v2 = qword_10060A728;
  qword_10060A728 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000BDEEC(uint64_t a1)
{
  if (!qword_10060A738)
  {
    uint64_t v2 = +[UIImage defaultPodcastArtwork];
    uint64_t v3 = UIImageJPEGRepresentation(v2, 0.0);
    uint64_t v4 = (void *)qword_10060A738;
    qword_10060A738 = v3;
  }
  if ((byte_10060A730 & 1) == 0)
  {
    byte_10060A730 = 1;
    dispatch_time_t v5 = dispatch_time(0, 1000000000);
    dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, &stru_1005505A8);
  }
  id v6 = (void *)qword_10060A738;
  char v7 = (id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  objc_storeStrong(v7, v6);
}

void sub_1000BDFA8(id a1)
{
}

void sub_1000BDFBC(id a1)
{
  byte_10060A730 = 0;
  dispatch_queue_t v1 = (void *)qword_10060A738;
  qword_10060A738 = 0;
}

id sub_1000BE214(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = [[MTNotificationEpisode alloc] initWithDictionaryRepresentation:v2];

  return v3;
}

id sub_1000BE488(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000BE70C(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v2 = qword_10060A740;
  qword_10060A740 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000BE7EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE87C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BFE94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C00E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C00F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C01D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C0294(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C0358(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C0414(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C073C(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    id v4 = [*(id *)(a1 + 32) metadataItemsToCommitToKVSStorage];
    dispatch_time_t v5 = *(void **)(a1 + 48);
    goto LABEL_5;
  }
  if (a2 == 2)
  {
    id v4 = [*(id *)(a1 + 32) metadataItemsToCommitToDataSource];
    dispatch_time_t v5 = *(void **)(a1 + 40);
LABEL_5:
    id v6 = [v5 itemIdentifier];
    [v4 setObject:v5 forKey:v6];
  }
  char v7 = [*(id *)(a1 + 32) storageProvider];
  id v8 = [*(id *)(a1 + 32) metadataItemsToCommitToDataSource];
  [v7 setNumMetadataItemsToCommitToDataSource:[v8 count]];

  id v9 = [*(id *)(a1 + 32) storageProvider];
  id v10 = [*(id *)(a1 + 32) metadataItemsToCommitToKVSStorage];
  [v9 setNumMetadataItemsToCommitToKVSStorage:[v10 count]];

  return a2;
}

id sub_1000C18D8(uint64_t a1)
{
  [*(id *)(a1 + 32) artworkHeightForStyle:*(void *)(a1 + 40) sizeType:1];
  qword_1005F4AA0 = v2;
  id result = [*(id *)(a1 + 32) artworkHeightForStyle:*(void *)(a1 + 40) sizeType:2];
  qword_10060A760 = v4;
  return result;
}

id sub_1000C1924(uint64_t a1)
{
  [*(id *)(a1 + 32) artworkHeightForStyle:*(void *)(a1 + 40) sizeType:1];
  qword_1005F4AA8 = v2;
  id result = [*(id *)(a1 + 32) artworkHeightForStyle:*(void *)(a1 + 40) sizeType:2];
  qword_10060A770 = v4;
  return result;
}

void sub_1000C29D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C29F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  id v8 = [WeakRetained episode];
  [v6 setActionObject:v8];

  id v11 = objc_loadWeakRetained(v4);
  id v9 = [v11 moreAction];
  id v10 = [v6 availableActions];

  [v9 showActionSheetWithActions:v10 fromButton:v5];
}

void sub_1000C35C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (([WeakRetained updateDisabledReason] & 1) == 0
    && [WeakRetained disabledReason] == (id)2)
  {
    id v1 = [WeakRetained episode];

    if (v1) {
      [WeakRetained updateIcons];
    }
  }
}

void sub_1000C3BF8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector())
  {
    [v2 updateActionSheet];
  }
  else if (objc_opt_respondsToSelector())
  {
    [v2 updatePopover];
  }
}

void sub_1000C3CD0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector())
  {
    [v2 dismissActionSheet];
  }
  else if (objc_opt_respondsToSelector())
  {
    [v2 dismissPopover];
  }
}

void sub_1000C4554(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  double v2 = *(double *)(a1 + 48);
  double v3 = *(double *)(a1 + 56);
  double v4 = *(double *)(a1 + 64);
  id v5 = [*(id *)(a1 + 32) moreButton];
  [v5 setFrame:v1, v2, v3, v4];
}

void sub_1000C45C0(uint64_t a1)
{
  double v1 = *(double *)(a1 + 40);
  double v2 = *(double *)(a1 + 48);
  double v3 = *(double *)(a1 + 56);
  double v4 = *(double *)(a1 + 64);
  id v5 = [*(id *)(a1 + 32) descriptionButton];
  [v5 setFrame:v1, v2, v3, v4];
}

void sub_1000C7AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C7AF4(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (v13)
  {
    id v6 = (id *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained(v6);
    id v8 = [WeakRetained episode];
    id v9 = [v8 podcastUuid];
    unsigned int v10 = [v5 isEqualToString:v9];

    if (v10)
    {
      id v11 = objc_loadWeakRetained(v6);
      uint64_t v12 = [v11 artworkView];
      [v12 setArtwork:v13];
    }
  }
}

void sub_1000C9188(id a1)
{
  double v1 = +[UIScreen mainScreen];
  [v1 scale];
  uint64_t v3 = v2;

  qword_1005F4AB0 = v3;
}

id sub_1000C99FC(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)double v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Migration assertion expired while operation is in progress!", v4, 2u);
  }

  return [*(id *)(a1 + 32) endBackgroundTask:[*(id *)(a1 + 40) processAssertion]];
}

void sub_1000C9A7C(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Start CoreData migration.", buf, 2u);
  }

  BOOL v3 = +[MTLibraryMigrator runCoreDataMigration];
  double v4 = _MTLogCategoryDatabase();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CoreData migration completed successfully.", buf, 2u);
    }

    id v6 = _MTLogCategoryDatabase();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Start data migration.", buf, 2u);
    }

    unsigned int v7 = +[MTLibraryMigrator runDataMigration];
    id v8 = _MTLogCategoryDatabase();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        *(_WORD *)buf = 0;
        unsigned int v10 = "Data migration has been completed.";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
      }
    }
    else if (v9)
    {
      *(_WORD *)buf = 0;
      unsigned int v10 = "No need to run data migration.";
      goto LABEL_16;
    }

    +[MTLibraryMigrator runImageStoreMigration];
    id v11 = block;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    uint64_t v12 = sub_1000C9F8C;
    goto LABEL_18;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CoreData migration failed.", buf, 2u);
  }

  id v11 = v31;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  uint64_t v12 = sub_1000C9F94;
LABEL_18:
  _DWORD v11[2] = v12;
  v11[3] = &unk_10054D570;
  void v11[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);
  __uint64_t v13 = (clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(void *)(a1 + 40)) / 0x3B9ACA00;
  id v14 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  id v15 = [v14 integerForKey:@"migrationAttemptCount"];

  uint64_t v16 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v16 removeObjectForKey:@"migrationAttemptCount"];

  id v29 = objc_alloc((Class)PFAnalyticsEvent);
  uint64_t v28 = PFAnalyticsEventNameMigration;
  v34[0] = @"oldLibraryDataVersion";
  id v30 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
  v35[0] = v30;
  v34[1] = @"newLibraryDataVersion";
  id v17 = +[NSNumber numberWithInteger:*(void *)(a1 + 56)];
  v35[1] = v17;
  v34[2] = @"oldCoreDataVersion";
  id v18 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
  v35[2] = v18;
  v34[3] = @"newCoreDataVersion";
  id v19 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
  v35[3] = v19;
  v34[4] = @"durationSeconds";
  uint64_t v20 = +[NSNumber numberWithUnsignedLongLong:v13];
  v35[4] = v20;
  uint64_t v34[5] = @"success";
  uint64_t v21 = +[NSNumber numberWithBool:v3];
  v35[5] = v21;
  v34[6] = @"didBecomeActiveWhileMigrating";
  uint64_t v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) didBecomeActiveWhileMigrating]);
  v35[6] = v22;
  v34[7] = @"migrationAttempts";
  long long v23 = +[NSNumber numberWithInteger:v15];
  v35[7] = v23;
  v34[8] = @"hadCorruptDB";
  long long v24 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
  v35[8] = v24;
  uint64_t v25 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:9];
  id v26 = [v29 initWithName:v28 payload:v25];

  id v27 = objc_alloc_init((Class)PFCoreAnalyticsChannel);
  [v27 sendEvent:v26];

  +[IMMetrics endTimer:@"migration"];
}

id sub_1000C9F8C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) finishMigration];
}

id sub_1000C9F94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) showIncompatibleDBDialog];
}

id sub_1000CA27C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performIncompatibleDBDialogAction];
}

void sub_1000CA5A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CA744(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CAEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000CAF18(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) uuid];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  double v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v8 = [*(id *)(a1 + 32) podcasts];
  uint64_t v5 = [v8 valueForKey:kPodcastUuid];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  unsigned int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

id sub_1000CB708(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateUpNext];
}

id sub_1000CBEFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) configureBarButtonItems];
}

void sub_1000CD3D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CE1C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CE25C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000CE764(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = +[NSSet setWithArray:v2];
  double v4 = +[MTDB sharedInstance];
  uint64_t v5 = [v4 mainOrPrivateContext];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _OWORD v9[2] = sub_1000CE864;
  uint64_t v9[3] = &unk_10054E708;
  id v10 = v5;
  id v11 = v3;
  uint64_t v12 = v2;
  uint64_t v6 = v2;
  id v7 = v3;
  id v8 = v5;
  [v8 performBlockAndWaitWithSave:v9];
}

void sub_1000CE864(uint64_t a1)
{
  uint64_t v12 = +[MTPlaylist predicateForFlag:4 isTrue:1];
  uint64_t v2 = [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:nil sortDescriptors:nil];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        id v8 = *(void **)(a1 + 40);
        uint64_t v9 = [v7 podcasts];
        id v10 = [v9 set];
        LOBYTE(v8) = [v8 isEqual:v10];

        if ((v8 & 1) == 0)
        {
          id v11 = +[NSOrderedSet orderedSetWithArray:*(void *)(a1 + 48)];
          [v7 setPodcasts:v11];

          [v7 setNeedsUpdate:1];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }
}

id sub_1000CEA0C(uint64_t a1, void *a2)
{
  CFPreferencesSynchronize(@"com.apple.storebookkeeper", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);

  return _[a2 _preferencesDidChange];
}

void sub_1000CEF00(id a1, RBSAssertion *a2, NSError *a3)
{
  id v3 = a3;
  id v4 = _MTLogCategoryAsyncTask();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v9 = 138412290;
      id v10 = v3;
      uint64_t v6 = "Background assertion failed to acquire with error %@. App may sleep if it's in the background.";
      id v7 = v4;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
    }
  }
  else if (v5)
  {
    LOWORD(v9) = 0;
    uint64_t v6 = "Background assertion was automatically invalidated. App may sleep if it's in the background.";
    id v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
}

id sub_1000CF1CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_1000CF578(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performExpirationHandler];
}

id sub_1000CF754(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_1000CF8A8(id a1)
{
  dword_10060A798 = 0;
}

uint64_t sub_1000CFB40(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    return 1;
  }
  else {
    return [a2 isExplicit] ^ 1;
  }
}

uint64_t sub_1000CFDE0(uint64_t a1, void *a2)
{
  id v3 = [a2 itemWithPersistentID:*(void *)(a1 + 32)];
  id v4 = +[MTMediaLibraryTransactionManager sharedInstance];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000CFEB8;
  v7[3] = &unk_1005508A8;
  id v8 = v3;
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a1 + 48);
  id v5 = v3;
  [v4 requestMediaLibraryWriteTransaction:v7];

  return 1;
}

uint64_t sub_1000CFEB8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyBookmarkTime];
  [v2 doubleValue];
  double v4 = v3;

  if (*(double *)(a1 + 40) != v4)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v5 setValue:v6 forProperty:MPMediaItemPropertyBookmarkTime];
  }
  uint64_t v7 = MPMediaItemPropertyHasBeenPlayed;
  id v8 = [*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyHasBeenPlayed];
  unsigned int v9 = [v8 BOOLValue];

  BOOL v10 = +[MTLibraryLegacyUtil hasBeenPlayedForPlayState:*(void *)(a1 + 48)];
  if (v9 != v10)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = +[NSNumber numberWithBool:v10];
    [v11 setValue:v12 forProperty:v7];
  }
  int64_t v13 = +[MTLibraryLegacyUtil legacyPlayCountForPlayState:*(void *)(a1 + 48) playCount:*(void *)(a1 + 56)];
  long long v14 = [*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyPlayCount];
  id v15 = [v14 longLongValue];

  long long v16 = [*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyLastPlayedDate];
  [v16 timeIntervalSinceNow];
  if ((id)v13 != v15 && (!v16 || fabs(v17) > 5.0))
  {
    id v18 = *(void **)(a1 + 32);
    id v19 = +[NSDate date];
    [v18 setValue:v19 forProperty:MPMediaItemPropertyLastPlayedDate];

    uint64_t v20 = *(void **)(a1 + 32);
    uint64_t v21 = +[NSNumber numberWithLongLong:v13];
    [v20 setValue:v21 forProperty:MPMediaItemPropertyPlayCount];

    if (!v13)
    {
      long long v31 = *(void **)(a1 + 32);
      id v27 = +[NSNumber numberWithLongLong:0];
      uint64_t v30 = MPMediaItemPropertyPlayCountSinceSync;
      uint64_t v28 = v31;
      id v29 = v27;
      goto LABEL_12;
    }
    int64_t v22 = v13 - (void)v15;
    if (v13 > (uint64_t)v15)
    {
      uint64_t v23 = MPMediaItemPropertyPlayCountSinceSync;
      long long v24 = [*(id *)(a1 + 32) valueForProperty:MPMediaItemPropertyPlayCountSinceSync];
      uint64_t v25 = (char *)[v24 unsignedIntegerValue];

      id v26 = *(void **)(a1 + 32);
      id v27 = +[NSNumber numberWithLongLong:&v25[v22]];
      uint64_t v28 = v26;
      id v29 = v27;
      uint64_t v30 = v23;
LABEL_12:
      [v28 setValue:v29 forProperty:v30];
    }
  }

  return 1;
}

void sub_1000D0198(id a1)
{
  uint64_t v1 = +[NSMutableSet set];
  uint64_t v2 = qword_10060A7A8;
  qword_10060A7A8 = v1;

  _objc_release_x1(v1, v2);
}

void sub_1000D02F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D041C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D0544(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D0778(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = objc_opt_new();
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      unsigned int v9 = 0;
      do
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        BOOL v10 = [v3 itemWithPersistentID:[*(id *)(*((void *)&v16 + 1) + 8 * (void)v9) unsignedLongLongValue]];
        if (v10) {
          [v4 addObject:v10];
        }

        unsigned int v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v7);
  }

  if ([v4 count])
  {
    id v11 = +[MTMediaLibraryTransactionManager sharedInstance];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000D0968;
    v14[3] = &unk_100550910;
    id v15 = v4;
    [v11 requestMediaLibraryWriteTransaction:v14 completion:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0);
    }
  }

  return 1;
}

uint64_t sub_1000D0968(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = +[MPMediaLibrary defaultMediaLibrary];
    [v2 removeItems:*(void *)(a1 + 32)];

    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          +[MTMediaLibraryUtil didDeletePersistentId:](MTMediaLibraryUtil, "didDeletePersistentId:", [*(id *)(*((void *)&v9 + 1) + 8 * (void)v7) persistentID v9]);
          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v5);
    }
  }
  return 1;
}

void sub_1000D0D04(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0];
  if (![v1 count]) {
    goto LABEL_32;
  }
  uint64_t v2 = _MTLogCategoryUPPSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    id v38 = [v1 count];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Syncing %{public}ld local episodes", buf, 0xCu);
  }

  id v3 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v1 count]);
  id v30 = objc_alloc_init((Class)NSMutableSet);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v26 = v1;
  id obj = v1;
  id v27 = v3;
  id v32 = [obj countByEnumeratingWithState:&v33 objects:v45 count:16];
  char v4 = 0;
  if (!v32) {
    goto LABEL_23;
  }
  uint64_t v31 = *(void *)v34;
  while (2)
  {
    for (uint64_t i = 0; i != v32; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v34 != v31) {
        objc_enumerationMutation(obj);
      }
      uint64_t v6 = *(void **)(*((void *)&v33 + 1) + 8 * i);
      [v6 updateUPPIdentifierIfNeeded];
      id v7 = objc_alloc_init(MTUniversalPlaybackPositionMediaItem);
      [(MTUniversalPlaybackPositionMediaItem *)v7 setEpisode:v6];
      uint64_t v8 = [v6 metadataIdentifier];
      if (v8)
      {
        [v3 setObject:v7 forKey:v8];
        buf[0] = 0;
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        if (buf[0])
        {

          goto LABEL_23;
        }
      }
      long long v9 = [v6 podcast];
      long long v10 = [v9 feedURL];
      id v11 = [v10 length];

      if (v11)
      {
        long long v12 = [v6 podcast];
        int64_t v13 = [v12 feedURL];
        [v30 addObject:v13];
      }
      else
      {
        long long v12 = _MTLogCategoryUPPSync();
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          goto LABEL_16;
        }
        int64_t v13 = [v6 title];
        long long v14 = [v6 uuid];
        id v15 = [v6 storeTrackId];
        long long v16 = [v6 metadataIdentifier];
        *(_DWORD *)buf = 138478595;
        id v38 = v13;
        __int16 v39 = 2114;
        long long v40 = v14;
        __int16 v41 = 2049;
        id v42 = v15;
        __int16 v43 = 2114;
        id v44 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Skipping playState:<feedURL> sync for episode without a feedURL: %{private}@, %{public}@, %{private}lld, %{public}@", buf, 0x2Au);

        id v3 = v27;
      }

LABEL_16:
      long long v17 = [v6 podcast];
      if (v17)
      {
        long long v18 = [v6 podcast];
        unsigned int v19 = [v18 subscribed] ^ 1;
      }
      else
      {
        LOBYTE(v19) = 0;
      }

      v4 |= v19;
    }
    id v32 = [obj countByEnumeratingWithState:&v33 objects:v45 count:16];
    if (v32) {
      continue;
    }
    break;
  }
LABEL_23:

  uint64_t v20 = _MTLogCategoryUPPSync();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = [v3 count];
    *(_DWORD *)buf = 134349314;
    id v38 = v21;
    __int16 v39 = 2114;
    long long v40 = v3;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}lu Media Items to Sync: %{public}@", buf, 0x16u);
  }

  [*(id *)(a1 + 48) setMediaItems:v3];
  int64_t v22 = _MTLogCategoryUPPSync();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    id v38 = v30;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Schedule an Episode Bookkeeper sync so we get our additional state for feedURLs: %{private}@", buf, 0xCu);
  }

  uint64_t v23 = +[SyncControllerFactory resolvedSyncController];
  [v23 scheduleEpisodeStatePutWithFeedUrls:v30];

  if (v4)
  {
    long long v24 = _MTLogCategoryUPPSync();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Schedule an NonFollowedShows Bookkeeper sync so we Set our updated lastDatePlayed values.", buf, 2u);
    }

    uint64_t v25 = +[SyncControllerFactory resolvedSyncController];
    [v25 syncNonFollowedShowsIfSyncDirty];
  }
  uint64_t v1 = v26;
LABEL_32:
}

void sub_1000D126C(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateComponentsFormatter);
  uint64_t v2 = (void *)qword_10060A7B8;
  qword_10060A7B8 = (uint64_t)v1;

  [(id)qword_10060A7B8 setAllowedUnits:240];
  id v3 = (void *)qword_10060A7B8;

  _[v3 setUnitsStyle:1];
}

void sub_1000D1654(uint64_t a1)
{
  uint64_t v1 = kMTEpisodeEntityName;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSPredicate predicateWithFormat:@"%K IN %@", kEpisodeMetadataIdentifier, *(void *)(a1 + 40)];
  char v4 = [v2 objectsInEntity:v1 predicate:v3 sortDescriptors:0];

  id v5 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:[v4 count]];
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v127 objects:v149 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v128;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v128 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v127 + 1) + 8 * i);
        long long v12 = [v11 metadataIdentifier];

        if (v12)
        {
          int64_t v13 = [v11 metadataIdentifier];
          [v5 setValue:v11 forKey:v13];
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v127 objects:v149 count:16];
    }
    while (v8);
  }
  id v101 = v5;
  uint64_t v97 = v6;

  uint64_t v100 = +[NSMutableSet set];
  id v99 = objc_alloc_init((Class)NSMutableSet);
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  id obj = *(id *)(a1 + 48);
  id v106 = [obj countByEnumeratingWithState:&v123 objects:v148 count:16];
  if (v106)
  {
    int v14 = 0;
    uint64_t v105 = *(void *)v124;
    uint64_t v102 = PFAnalyticsEventNameUPPMetadataInsert;
    do
    {
      id v15 = 0;
      int v98 = v14;
      int v16 = v14;
      do
      {
        if (*(void *)v124 != v105) {
          objc_enumerationMutation(obj);
        }
        long long v17 = *(void **)(*((void *)&v123 + 1) + 8 * (void)v15);
        uint64_t v109 = +[MTUPPMetadata createOrUpdateUPPMetadataFromUPPRecord:v17 inCtx:*(void *)(a1 + 32)];
        unsigned int v19 = [*(id *)(a1 + 56) mediaItems];
        uint64_t v20 = [v17 itemIdentifier];
        id v21 = [v19 objectForKey:v20];

        if (v21)
        {
          int64_t v22 = [v21 episode];
          uint64_t v23 = _MTLogCategoryUPPSync();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            long long v24 = [v22 title];
            uint64_t v25 = [v22 uuid];
            id v26 = [v22 storeTrackId];
            *(_DWORD *)buf = 138478851;
            id v136 = v24;
            __int16 v137 = 2114;
            uint64_t v138 = v25;
            __int16 v139 = 2049;
            double v140 = *(double *)&v26;
            __int16 v141 = 2114;
            uint64_t v142 = v17;
            __int16 v143 = 2114;
            double v144 = *(double *)&v21;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld, Metadata: %{public}@, extracted from media item: %{public}@", buf, 0x34u);
          }
        }
        else
        {
          id v27 = [v17 itemIdentifier];
          int64_t v22 = [v101 objectForKey:v27];

          uint64_t v23 = _MTLogCategoryUPPSync();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v28 = [v22 title];
            id v29 = [v22 uuid];
            id v30 = [v22 storeTrackId];
            *(_DWORD *)buf = 138478595;
            id v136 = v28;
            __int16 v137 = 2114;
            uint64_t v138 = v29;
            __int16 v139 = 2049;
            double v140 = *(double *)&v30;
            __int16 v141 = 2114;
            uint64_t v142 = v17;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld, Metadata: %{public}@, extracted from local episode dictionary", buf, 0x2Au);
          }
        }
        ++v16;

        if (!v22)
        {
          long long v40 = _MTLogCategoryUPPSync();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            id v136 = v17;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Episode Not Found, Skip: %{public}@", buf, 0xCu);
          }
          goto LABEL_42;
        }
        [v22 metadataTimestamp];
        double v32 = v31;
        [v17 timestamp];
        if (v32 < v33)
        {
          int v104 = v16;
          [(id)objc_opt_class() updateEpisode:v22 withUPPMetadata:v109];
          long long v34 = [v22 playlists];
          [v100 unionSet:v34];

          long long v35 = [v22 podcast];
          long long v36 = [v35 feedURL];
          id v37 = [v36 length];

          if (v37)
          {
            id v38 = [v22 podcast];
            __int16 v39 = [v38 feedURL];
            [v99 addObject:v39];
            goto LABEL_31;
          }
          id v38 = _MTLogCategoryUPPSync();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v39 = [v22 title];
            *(_DWORD *)buf = 138477827;
            id v136 = v39;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Skipping bookkeeper sync for episode without a feedURL: %{private}@", buf, 0xCu);
LABEL_31:
          }
          int v16 = v104;

          if ((os_feature_enabled_bluemoon() & 1) == 0)
          {
            uint64_t v47 = +[MTPlayerController defaultInstance];
            uint64_t v48 = [v22 uuid];
            [v22 playhead];
            [v47 updateUPPEpisodeUuid:v48 bookmarkTime:v49];
          }
          long long v121 = 0u;
          long long v122 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          long long v40 = [*(id *)(a1 + 64) episodeObservers];
          id v50 = [v40 countByEnumeratingWithState:&v119 objects:v147 count:16];
          if (v50)
          {
            id v51 = v50;
            uint64_t v52 = *(void *)v120;
            do
            {
              for (j = 0; j != v51; j = (char *)j + 1)
              {
                if (*(void *)v120 != v52) {
                  objc_enumerationMutation(v40);
                }
                unsigned int v54 = [*(id *)(*((void *)&v119 + 1) + 8 * (void)j) block];
                uint64_t v55 = [v22 uuid];
                [v22 playhead];
                ((void (**)(void, void *, double))v54)[2](v54, v55, v56);
              }
              id v51 = [v40 countByEnumeratingWithState:&v119 objects:v147 count:16];
            }
            while (v51);
            int v16 = v104;
          }
LABEL_42:

          if (*(unsigned char *)(a1 + 80))
          {
            [v109 timestamp];
            double v58 = v57;
            double v59 = *(double *)(a1 + 72);
            [v109 bookmarkTime];
            if (v60 != 0.0
              || [v109 playCount]
              || ([v109 hasBeenPlayed] & 1) != 0)
            {
              uint64_t v108 = v21;
              int v61 = v16;
              double v62 = v59 - v58;
              id v63 = _MTLogCategoryMetrics();
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
              {
                BOOL v64 = [v109 metadataIdentifier];
                double v65 = *(void **)(a1 + 72);
                uint64_t v66 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v58];
                uint64_t v67 = [*(id *)(a1 + 64) _metricsDateFormatter];
                uint64_t v68 = [v67 stringFromTimeInterval:v62];
                *(_DWORD *)buf = 138413570;
                id v136 = v64;
                __int16 v137 = 2048;
                uint64_t v138 = v65;
                __int16 v139 = 2048;
                double v140 = v58;
                __int16 v141 = 2112;
                uint64_t v142 = v66;
                __int16 v143 = 2048;
                double v144 = v62;
                __int16 v145 = 2112;
                uint64_t v146 = v68;
                _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Metrics event for %@ - current time %f - creation date %f - %@ - insert delta %f - %@", buf, 0x3Eu);
              }
              id v69 = objc_alloc_init((Class)PFCoreAnalyticsChannel);
              id v70 = objc_alloc((Class)PFAnalyticsEvent);
              CFStringRef v133 = @"metadataInsertDelta";
              uint64_t v71 = +[NSNumber numberWithDouble:v62];
              unint64_t v134 = v71;
              uint64_t v72 = +[NSDictionary dictionaryWithObjects:&v134 forKeys:&v133 count:1];
              id v73 = [v70 initWithName:v102 payload:v72];
              [v69 sendEvent:v73];

              int v16 = v61;
              id v21 = v108;
            }
            else
            {
              id v69 = _MTLogCategoryMetrics();
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              {
                id v75 = [v109 metadataIdentifier];
                *(_DWORD *)buf = 138412290;
                id v136 = v75;
                _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Metrics event for %@ skipped. Empty update.", buf, 0xCu);
              }
            }
          }
          HIDWORD(v74) = -1030792151 * v16 + 85899344;
          LODWORD(v74) = HIDWORD(v74);
          if ((v74 >> 3) >= 0x147AE15) {
            [*(id *)(a1 + 32) saveInCurrentBlock];
          }
          goto LABEL_52;
        }
        __int16 v41 = _MTLogCategoryUPPSync();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          id v42 = [v22 title];
          [v22 uuid];
          v43 = uint64_t v107 = v21;
          int v44 = v16;
          id v45 = [v22 storeTrackId];
          [v22 metadataTimestamp];
          *(_DWORD *)buf = 138478851;
          id v136 = v42;
          __int16 v137 = 2114;
          uint64_t v138 = v43;
          __int16 v139 = 2049;
          double v140 = *(double *)&v45;
          int v16 = v44;
          __int16 v141 = 2050;
          uint64_t v142 = v46;
          __int16 v143 = 2114;
          double v144 = *(double *)&v17;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Not updating episode because local T is newer: Episode: %{private}@, UUID: %{public}@, adamID: %{private}lld, episode.metadataTimestamp: %{public}f, remoteMetadata: %{public}@", buf, 0x34u);

          id v21 = v107;
        }

LABEL_52:
        id v15 = (char *)v15 + 1;
      }
      while (v15 != v106);
      int v14 = v98 + v106;
      id v76 = [obj countByEnumeratingWithState:&v123 objects:v148 count:16];
      id v106 = v76;
    }
    while (v76);
  }

  long long v77 = _MTLogCategoryUPPSync();
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    id v136 = v99;
    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Schedule an Episode Bookkeeper sync so we get our additional state for feedURLs: %{private}@", buf, 0xCu);
  }

  long long v78 = +[SyncControllerFactory resolvedSyncController];
  [v78 scheduleEpisodeStateGetWithFeedUrls:v99];

  long long v79 = _MTLogCategoryUPPSync();
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v136 = v100;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Updating unplayed count for playlists: %{public}@", buf, 0xCu);
  }

  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  id v80 = v100;
  id v81 = [v80 countByEnumeratingWithState:&v115 objects:v132 count:16];
  if (v81)
  {
    id v82 = v81;
    uint64_t v83 = *(void *)v116;
    do
    {
      for (k = 0; k != v82; k = (char *)k + 1)
      {
        if (*(void *)v116 != v83) {
          objc_enumerationMutation(v80);
        }
        [*(id *)(*((void *)&v115 + 1) + 8 * (void)k) updateUnplayedCount];
      }
      id v82 = [v80 countByEnumeratingWithState:&v115 objects:v132 count:16];
    }
    while (v82);
  }

  long long v85 = _MTLogCategoryUPPSync();
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v86 = [*(id *)(a1 + 56) mediaItems];
    id v87 = [v86 allValues];
    *(_DWORD *)buf = 138543362;
    id v136 = v87;
    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "Consolidating all remote media items to UPP database, so we never lose UPP data for episodes still not fetched from feed: %{public}@", buf, 0xCu);
  }
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  __int16 v88 = [*(id *)(a1 + 56) mediaItems];
  id v89 = [v88 allValues];

  id v90 = [v89 countByEnumeratingWithState:&v111 objects:v131 count:16];
  if (v90)
  {
    id v91 = v90;
    int v92 = 0;
    uint64_t v93 = *(void *)v112;
    do
    {
      for (m = 0; m != v91; m = (char *)m + 1)
      {
        if (*(void *)v112 != v93) {
          objc_enumerationMutation(v89);
        }
        id v95 = +[MTUPPMetadata createOrUpdateUPPMetadataFromUPPMediaItem:*(void *)(*((void *)&v111 + 1) + 8 * (void)m) inCtx:*(void *)(a1 + 32)];
        HIDWORD(v96) = 85899344 - 1030792151 * (v92 + 1 + m);
        LODWORD(v96) = HIDWORD(v96);
        if ((v96 >> 3) <= 0x147AE14) {
          [*(id *)(a1 + 32) saveInCurrentBlock];
        }
      }
      v92 += (int)v91;
      id v91 = [v89 countByEnumeratingWithState:&v111 objects:v131 count:16];
    }
    while (v91);
  }
}

void sub_1000D2434(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTEpisodeEntityName;
  char v4 = +[MTEpisode predicateForMetadataFirstSyncEligible:1];
  id v5 = [v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0];

  if ([v5 count])
  {
    id v6 = _MTLogCategoryUPPSync();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      id v19 = [v5 count];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Marking %lu episodes as metadataFirstSyncEligible = NO", buf, 0xCu);
    }

    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v14;
      do
      {
        id v11 = 0;
        do
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v7);
          }
          long long v12 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v11);
          +[NSDate timeIntervalSinceReferenceDate];
          [v12 setMetadataTimestamp:];
          [v12 setMetadataFirstSyncEligible:0];
          id v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v9);
    }

    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_1000D2CBC(uint64_t a1)
{
  id v26 = [*(id *)(a1 + 32) episode];
  uint64_t v1 = [v26 podcast];
  uint64_t v2 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v1 storeCollectionId]);
  id v19 = v1;
  uint64_t v25 = [v1 currentFeedURL];
  long long v24 = [v26 guid];
  uint64_t v23 = [v26 title];
  uint64_t v3 = [v26 author];
  char v4 = v26;
  if (!v3) {
    char v4 = v1;
  }
  id v21 = [v4 author];

  int64_t v22 = [v1 title];
  id v5 = [NSNumber numberWithLongLong:+[MTLibraryLegacyUtil legacyPlayCountForPlayState:[v26 playState] playCount:[v26 playCount]]];
  long long v18 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[MTLibraryLegacyUtil hasBeenPlayedForPlayState:](MTLibraryLegacyUtil, "hasBeenPlayedForPlayState:", [v26 playState]));
  [v26 playhead];
  id v7 = +[NSNumber numberWithDouble:v6];
  [v26 metadataTimestamp];
  id v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  id v9 = +[NSNumber numberWithInt:3];
  [v26 importDate];
  double v11 = v10;
  +[MTUniversalPlaybackPositionDataSource uppLastSyncTime];
  long long v17 = +[NSNumber numberWithBool:v11 > v12];
  [v26 lastUserMarkedAsPlayedDate];
  long long v16 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v26 lastDatePlayed];
  long long v15 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  long long v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v26 playStateManuallySet]);
  id v13 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:12];
  [v13 setValue:v2 forKey:@"storeItemAdamID"];
  [v13 setValue:v25 forKey:@"podcastURL"];
  [v13 setValue:v24 forKey:@"podcastGUID"];
  [v13 setValue:v23 forKey:@"title"];
  [v13 setValue:v21 forKey:@"artist"];
  [v13 setValue:v22 forKey:@"albumTitle"];
  [v13 setValue:v5 forKey:@"playCount"];
  [v13 setValue:v18 forKey:@"hasBeenPalyed"];
  [v13 setValue:v7 forKey:@"bookmarkTime"];
  [v13 setValue:v8 forKey:@"bookmarkMetadataTimestamp"];
  [v13 setValue:v9 forKey:@"mediaEntityType"];
  [v13 setValue:v17 forKey:@"isNew"];
  [v13 setValue:v16 forKey:@"lastUserMarkedAsPlayedDate"];
  [v13 setValue:v15 forKey:@"lastDatePlayed"];
  [v13 setValue:v14 forKey:@"playStateManuallySet"];
  [*(id *)(a1 + 32) setMediaItemDictionary:v13];
}

void sub_1000D3574(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  id v5 = a3;
  float v6 = [v20 object];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v8 = [v20 object];
    id v9 = [v8 objectForKey:@"data"];
    if (!v9)
    {
      double v10 = [v8 objectForKey:@"results"];
      objc_opt_class();
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        double v11 = [v10 objectForKey:@"podcast-episodes"];
        double v12 = v11;
        if (v11)
        {
          id v13 = v11;
        }
        else
        {
          id v13 = [v10 objectForKey:@"podcast"];
        }
        long long v15 = v13;
      }
      else
      {
        long long v15 = 0;
      }
      objc_opt_class();
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v16 = [v15 firstObject];
      }
      else
      {
        long long v16 = 0;
      }
      objc_opt_class();
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v17 = [v16 objectForKey:@"data"];
      }
      else
      {
        long long v17 = 0;
      }
      objc_opt_class();
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        long long v18 = v17;
      }
      else {
        long long v18 = 0;
      }
      id v9 = v18;
    }
    uint64_t v19 = *(void *)(a1 + 32);
    if (v19) {
      (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v9, 0);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (v14) {
      (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0, v5);
    }
  }
}

void sub_1000D3D54(uint64_t a1, void *a2)
{
  id v3 = [*(id *)(a1 + 32) shareModeForShareFromMode:[a2 selectedOptionIndex]];
  char v4 = [*(id *)(a1 + 32) dataSource];
  [v4 setCurrentShareMode:v3];

  id v5 = [*(id *)(a1 + 32) dataSource];
  id v8 = +[MTShareUtil shareActivityItems:v5];

  float v6 = *(void **)(a1 + 32);
  id v7 = [v6 applicationActivities];
  [v6 _updateActivityItems:v8 applicationActivities:v7];
}

id sub_1000D44CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) presentAddPodcastUI];
}

id sub_1000D44D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) presentAddStationUI];
}

void sub_1000D44DC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) popoverPresentationController];
  [v1 setPassthroughViews:0];
}

void sub_1000D489C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1000D48B4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v5 = a2;
  char v4 = [*(id *)(a1 + 32) absoluteString];
  [v5 setText:v4];

  [v5 setKeyboardType:3];
}

void sub_1000D4938(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1000D49B0;
  v1[3] = &unk_10054E2A8;
  long long v2 = *(_OWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v1);
}

void sub_1000D49B0(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) resignFirstResponder];
  dispatch_time_t v2 = dispatch_time(0, 1000000000);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000D4A54;
  void v3[3] = &unk_10054DF08;
  long long v4 = *(_OWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v3);
}

void sub_1000D4A54(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) text];
  [v1 performSubscribe:v2];
}

void sub_1000D4AB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) presentingViewController];
  [v2 presentViewController:*(void *)(a1 + 40) animated:1 completion:0];
}

void sub_1000D4EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1000D4F0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setPlaceholder:*(void *)(a1 + 32)];
  [v3 setAutocapitalizationType:2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000D4F68(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) text];
  id v3 = [v2 length];

  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    id v5 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) text];
    [v4 presentStationWithTitle:v5];
  }
}

void sub_1000D500C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) presentingViewController];
  [v2 presentViewController:*(void *)(a1 + 40) animated:1 completion:0];
}

void sub_1000D52AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000D52D0(void *a1)
{
  uint64_t v2 = +[MTPlaylist insertNewPlaylistInManagedObjectContext:a1[4]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  [*(id *)(*(void *)(a1[6] + 8) + 40) setTitle:a1[5]];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setIncludesAllPodcasts:0];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setNeedsUpdate:0];
  +[NSDate timeIntervalSinceReferenceDate];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setGeneratedDate:];
  id v5 = (void *)a1[4];
  uint64_t v10 = *(void *)(*(void *)(a1[6] + 8) + 40);
  float v6 = +[NSArray arrayWithObjects:&v10 count:1];
  [v5 obtainPermanentIDsForObjects:v6 error:0];

  uint64_t v7 = [*(id *)(*(void *)(a1[6] + 8) + 40) uuid];
  uint64_t v8 = *(void *)(a1[7] + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

id sub_1000D8860(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addEntityToCache:a2];
}

id sub_1000D8BF8()
{
  unint64_t v0 = objc_opt_new();
  id v1 = [v0 _disclosureChevronImage:0];

  return v1;
}

id sub_1000DA13C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reloadData];
}

void sub_1000DA84C(uint64_t a1, int a2, id a3)
{
  id v4 = objc_retainBlock(a3);
  (*((void (**)(id, void, void))v4 + 2))(v4, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1000DADB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = a2;
  id v5 = a3;
  if (MPMediaPlaylistPropertyName == v7)
  {
    [*(id *)(a1 + 32) setName:v5];
  }
  else if (MPMediaEntityPropertyPersistentID == v7)
  {
    [*(id *)(a1 + 32) setMediaLibraryId:v5];
  }
  else if ((NSString *)MPMediaPlaylistPropertyParentPersistentID == v7)
  {
    [*(id *)(a1 + 32) setParentMediaLibraryId:v5];
  }
  else if ((NSString *)MPMediaPlaylistPropertyIsFolder == v7)
  {
    [*(id *)(a1 + 32) setIsFolder:[v5 BOOLValue]];
  }
  else if (MPMediaPlaylistPropertyPlaylistAttributes == v7)
  {
    unint64_t v6 = (unint64_t)[v5 integerValue];
    [*(id *)(a1 + 32) setIsGenius:(v6 >> 2) & 1];
    [*(id *)(a1 + 32) setIsOnTheGo:v6 & 1];
    [*(id *)(a1 + 32) setIsSmart:(v6 >> 1) & 1];
  }
  else if ((NSString *)MPMediaPlaylistPropertyIsHidden == v7)
  {
    [*(id *)(a1 + 32) setIsHidden:[v5 BOOLValue]];
  }
}

void sub_1000DB824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1000DB858(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  uint64_t v3 = [*(id *)(a1 + 32) currentFetchRequest];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = [v2 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 count] == 0;
  uint64_t v6 = [v5 mt_compactMap:*(void *)(a1 + 40)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = [*(id *)(a1 + 32) _entitiesByRemovingAlreadyProcessedFrom:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
  double v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

id sub_1000DBB04(id a1, NSManagedObject *a2)
{
  uint64_t v2 = a2;

  return v2;
}

uint64_t sub_1000DBB2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8) - 1;
    if (0x8F5C28F5C28F5C29 * v3 + 0x51EB851EB851EB8 <= 0xA3D70A3D70A3D70)
    {
      uint64_t v4 = _MTLogCategorySpotlight();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = +[NSNumber numberWithInteger:v3];
        uint64_t v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 40) count]);
        uint64_t v7 = *(void *)(a1 + 32);
        int v8 = 138412802;
        uint64_t v9 = v5;
        __int16 v10 = 2112;
        double v11 = v6;
        __int16 v12 = 2112;
        uint64_t v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Indexing] *** batch processing - continuing batch #%@ with %@ entities [%@]", (uint8_t *)&v8, 0x20u);
      }
      uint64_t result = *(void *)(a1 + 56);
    }
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 48), *(void *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1000DBED8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 externallyProcessedMOIDs];
  id v5 = [v3 objectID];

  uint64_t v6 = [v4 containsObject:v5] ^ 1;
  return v6;
}

void sub_1000DC010(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create(0, 0);
  uint64_t v2 = qword_10060A7D0;
  qword_10060A7D0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000DC04C(uint64_t result)
{
  uint64_t v1 = qword_1005F5000;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = qword_1005F5000;
  qword_1005F5000 = v1 + 1;
  return result;
}

void sub_1000DC260(uint64_t a1, void *a2, void *a3)
{
  uint64_t v9 = a2;
  id v5 = a3;
  if (MPMediaItemPropertyArtist == v9)
  {
    [*(id *)(a1 + 32) setArtist:v5];
  }
  else if ((NSString *)MPMediaItemPropertyPodcastURL == v9)
  {
    [*(id *)(a1 + 32) setFeedUrl:v5];
  }
  else if (MPMediaItemPropertyPodcastTitle == v9)
  {
    [*(id *)(a1 + 32) setPodcastTitle:v5];
  }
  else if (MPMediaItemPropertyPodcastPersistentID == v9)
  {
    [*(id *)(a1 + 32) setPodcastPersistentId:v5];
  }
  else if (MPMediaItemPropertyAssetURL == v9)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = [v5 absoluteString];
    [v6 setAssetUrl:v7];
  }
  else if ((NSString *)MPMediaItemPropertyIsITunesU == v9)
  {
    [*(id *)(a1 + 32) setIsItunesU:[v5 BOOLValue]];
  }
  else if (MPMediaItemPropertyPersistentID == v9)
  {
    [*(id *)(a1 + 32) setPersistentId:v5];
  }
  else if ((NSString *)MPMediaItemPropertyFileSize == v9)
  {
    [*(id *)(a1 + 32) setByteSize:v5];
  }
  else if (MPMediaItemPropertyGenre == v9)
  {
    [*(id *)(a1 + 32) setCategory:v5];
  }
  else if (MPMediaItemPropertyPlaybackDuration == v9)
  {
    [*(id *)(a1 + 32) setDuration:v5];
  }
  else if (MPMediaItemPropertyTitle == v9)
  {
    [*(id *)(a1 + 32) setTitle:v5];
  }
  else if (MPMediaItemPropertyMediaType == v9)
  {
    int v8 = &kUTTypeMovie;
    if ([v5 integerValue] != (id)1024 && objc_msgSend(v5, "integerValue") != (id)4096) {
      int v8 = &kUTTypeAudio;
    }
    [*(id *)(a1 + 32) setUti:*v8];
  }
  else if ((NSString *)MPMediaItemPropertyPodcastGUID == v9)
  {
    [*(id *)(a1 + 32) setGuid:v5];
  }
  else if (MPMediaItemPropertyReleaseDate == v9)
  {
    [*(id *)(a1 + 32) setPubDate:v5];
  }
  else if (MPMediaItemPropertyBookmarkTime == v9)
  {
    [*(id *)(a1 + 32) setPlayhead:v5];
  }
  else if ((NSString *)MPMediaItemPropertyHasBeenPlayed == v9)
  {
    [*(id *)(a1 + 32) setHasBeenPlayed:[v5 BOOLValue]];
  }
  else if (MPMediaItemPropertyPlayCount == v9)
  {
    [*(id *)(a1 + 32) setPlayCount:v5];
  }
  else if ((NSString *)MPMediaItemPropertyDownloadIdentifier == v9)
  {
    [*(id *)(a1 + 32) setDownloadIdentifier:v5];
  }
  else if ((NSString *)MPMediaItemPropertyRestricted == v9)
  {
    [*(id *)(a1 + 32) setIsExplicit:[v5 BOOLValue]];
  }
  else if ((NSString *)MPMediaItemPropertyStoreID == v9)
  {
    [*(id *)(a1 + 32) setStoreTrackId:v5];
  }
  else if ((NSString *)MPMediaItemPropertyStorePlaylistID == v9)
  {
    [*(id *)(a1 + 32) setStoreCollectionId:v5];
  }
  else if (MPMediaItemPropertyLastPlayedDate == v9)
  {
    [*(id *)(a1 + 32) setLastPlayedDate:v5];
  }
}

BOOL sub_1000DC644(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v3 itemWithPersistentID:[v2 persistentID]];

  BOOL v5 = +[MTMLMediaItem isMissingAssetForItem:v4];
  if (v5)
  {
    CFStringRef v9 = @"persistantID";
    uint64_t v6 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v4 persistentID]);
    __int16 v10 = v6;
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    +[IMMetrics recordUserAction:@"medialibrary_missing_asset" dataSource:0 withData:v7];

    [v4 populateLocationPropertiesWithPath:0];
  }

  return v5;
}

void sub_1000DCEC8(uint64_t a1)
{
  [*(id *)(a1 + 32) setHidden:1];
  [*(id *)(a1 + 40) _deleteSpotlightIdentifierForPlaylist:*(void *)(a1 + 32)];
  uint64_t v2 = [*(id *)(a1 + 32) managedObjectContext];
  [v2 deletePlaylist:*(void *)(a1 + 32)];

  id v3 = +[SyncKeysRepository shared];
  [v3 setIsPlaylistSyncDirty:1];
}

void sub_1000DD0A4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) deletePlaylist:v2];
}

void sub_1000DD1FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPlaylistEntityName;
  uint64_t v4 = +[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate];
  BOOL v5 = [v2 objectsInEntity:v3 predicate:v4 sortDescriptors:0];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      __int16 v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        [*(id *)(a1 + 40) deletePlaylist:*(void *)(*((void *)&v11 + 1) + 8 * (void)v10) v11];
        __int16 v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

void sub_1000DDC7C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 136));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DDCD4(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000DDDE4;
  v8[3] = &unk_100550C60;
  objc_copyWeak(&v10, &location);
  char v11 = a3;
  id v9 = *(id *)(a1 + 40);
  v7.receiver = v6;
  v7.super_class = (Class)MTStoreManifest;
  [super load:v8];

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_1000DDDC8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000DDDE4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateLoadStatus:*(unsigned __int8 *)(a1 + 48)];

  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1000DDE48(id *a1, void *a2)
{
  id v3 = a2;
  [a1[4] timeIntervalSinceNow];
  uint64_t v5 = v4;
  id v6 = _MTLogCategoryNetwork();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "StorePlatform lookup took: %f", buf, 0xCu);
  }

  buf[0] = 0;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  BOOL v8 = [WeakRetained playbackOrder] == (id)2;

  id v9 = objc_loadWeakRetained(a1 + 7);
  id v10 = [v9 podcastAdamId];
  char v11 = [v10 stringValue];
  long long v12 = [v3 objectForKeyedSubscript:v11];

  id v13 = objc_loadWeakRetained(a1 + 7);
  long long v14 = [objc_opt_class() playerItemsFromPodcastStorePlatformDictionary:v12 oldestEpisode:v8 restricted:buf initiatedByAnotherUser:[a1[5] initiatedByAnotherUser]];
  id v15 = objc_loadWeakRetained(a1 + 7);
  [v15 setItems:v14];

  id v16 = a1[5];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_1000DE0A8;
  v18[3] = &unk_100550C60;
  objc_copyWeak(&v20, a1 + 7);
  uint8_t v21 = buf[0];
  id v19 = a1[6];
  v17.receiver = v16;
  v17.super_class = (Class)MTStoreManifest;
  [super load:v18];

  objc_destroyWeak(&v20);
}

void sub_1000DE08C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DE0A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateLoadStatus:*(unsigned __int8 *)(a1 + 48)];

  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

uint64_t sub_1000DE10C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateLoadStatus:0];

  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1000DE5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  objc_destroyWeak(v18);
  _Block_object_dispose(&a18, 8);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1000DE620(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1000DE72C;
  void v10[3] = &unk_100550D00;
  objc_copyWeak(v13, (id *)(a1 + 48));
  id v6 = v5;
  objc_super v7 = *(void **)(a1 + 56);
  id v11 = v6;
  v13[1] = v7;
  long long v9 = *(_OWORD *)(a1 + 32);
  id v8 = (id)v9;
  long long v12 = v9;
  char v14 = a3;
  +[IMAVPlayer performOnMainQueue:v10];

  objc_destroyWeak(v13);
}

void sub_1000DE718(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DE72C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id *)(a1 + 56);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained setItems:v2];

  unint64_t v5 = *(void *)(a1 + 64);
  if (v5 >= (unint64_t)[*(id *)(a1 + 32) count])
  {
    if (![*(id *)(a1 + 32) count])
    {
      uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_12;
    }
    uint64_t v6 = 0;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_12;
    }
  }
  uint64_t v7 = v6;
  id v8 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v6];
  long long v9 = v8;
  if (v8)
  {
    double v10 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v10 != 0.0)
    {
      [v8 duration];
      if (v10 < v11) {
        [v9 setPlayhead:*(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
      }
    }
  }

LABEL_12:
  id v12 = objc_loadWeakRetained(v3);
  [v12 setCurrentIndex:v7];

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    char v14 = *(uint64_t (**)(void))(result + 16);
    return v14();
  }
  return result;
}

uint64_t sub_1000DEEF8(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = a2;
    objc_opt_class();
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 1;
  }
  return isKindOfClass & 1;
}

void sub_1000DF268(uint64_t a1)
{
  [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) propertiesToFetch:*(void *)(a1 + 48) batchSize:0];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v1 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = *(void *)v17;
    uint64_t v4 = kEpisodeUuid;
    uint64_t v13 = kEpisodeAssetURL;
    do
    {
      for (uint64_t i = 0; i != v2; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v7 = [v6 enclosureURL];
        if ([v7 length])
        {
          id v8 = [v6 uuid];
          long long v9 = [v6 assetURL];
          double v10 = +[NSMutableDictionary dictionaryWithObject:v8 forKey:v4];
          if ([v9 length]) {
            [v10 setObject:v9 forKey:v13];
          }
          double v11 = *(void **)(a1 + 56);
          id v12 = [v10 copy];
          [v11 setObject:v12 forKey:v7];
        }
      }
      id v2 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v2);
  }
}

id sub_1000DFE54(id a1, NSNumber *a2)
{
  return [(NSNumber *)a2 stringValue];
}

void sub_1000DFE5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v3 count]];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v17 = a1;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v6)
  {
    id v7 = v6;
    unsigned __int8 v8 = 0;
    uint64_t v9 = *(void *)v20;
    double v10 = kMTPreferredArtworkSize;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v5);
        }
        id v12 = [v3 objectForKeyedSubscript:*(void *)(*((void *)&v19 + 1) + 8 * i) v17];
        if (v12)
        {
          char v18 = 0;
          uint64_t v13 = +[MTStorePlatformUtil storeMediaDictionaryFromStorePlatformDictionary:v12 artworkSize:&v18 restricted:v10];
          if (v13) {
            [v4 addObject:v13];
          }
          v8 |= v18 != 0;
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v7);
  }
  else
  {
    unsigned __int8 v8 = 0;
  }

  char v14 = [*(id *)(v17 + 48) storeMediaDictionariesToPlayerItems:v4 initiatedByAnotherUser:*(unsigned __int8 *)(v17 + 56)];
  id v15 = v14;
  uint64_t v16 = *(void *)(v17 + 40);
  if (v16) {
    (*(void (**)(uint64_t, void *, void))(v16 + 16))(v16, v14, ([v14 count] == 0) & v8);
  }
}

void sub_1000E02A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updatePredicate];
}

void sub_1000E02E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  double v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000E03D4;
  uint64_t v12[3] = &unk_10054E8E0;
  objc_copyWeak(&v13, v10);
  [WeakRetained enqueueWorkBlock:v12];

  objc_destroyWeak(&v13);
}

void sub_1000E03C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000E03D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updatePredicate];
}

void sub_1000E04E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  double v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1000E0610;
  v15[3] = &unk_100550DE0;
  objc_copyWeak(&v19, v10);
  id v12 = v7;
  id v16 = v12;
  id v13 = v8;
  id v17 = v13;
  id v14 = v9;
  id v18 = v14;
  [WeakRetained enqueueWorkBlock:v15];

  objc_destroyWeak(&v19);
}

void sub_1000E05FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000E0610(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained resultsChangedWithDeletedIds:*(void *)(a1 + 32) insertIds:*(void *)(a1 + 40) updatedIds:*(void *)(a1 + 48)];
}

void sub_1000E0D1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    uint64_t v5[2] = sub_1000E0DD0;
    v5[3] = &unk_10054D9B0;
    id v4 = *(NSObject **)(a1 + 32);
    id v6 = *(id *)(a1 + 40);
    id v7 = v3;
    dispatch_sync(v4, v5);
  }
}

id sub_1000E0DD0(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
}

void sub_1000E0DDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000E0EC0;
  v6[3] = &unk_100550E58;
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  +[MTCoreSpotlightUtil prepareSearchableItemForObject:v3 annotator:v5 completion:v6];
}

void sub_1000E0EC0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(NSObject **)(a1 + 32);

  dispatch_group_leave(v2);
}

uint64_t sub_1000E0F04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000E14F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000E150C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v3();
  }
  else
  {
    id v4 = +[MTImageStore defaultStore];
    uint64_t v5 = kMTLibraryDefaultImageKey;
    double v6 = *(double *)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1000E1614;
    v7[3] = &unk_100550ED0;
    id v8 = *(id *)(a1 + 32);
    [v4 asyncImageURLForKey:v5 squareDimension:0 cacheKeyModifier:v7 completionHandler:v6];
  }
}

uint64_t sub_1000E1614(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000E1CAC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 attributeSet];
  [v5 setThumbnailURL:v4];

  double v6 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v6();
}

uint64_t sub_1000E22D4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 attributeSet];
  [v5 setThumbnailURL:v4];

  double v6 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v6();
}

uint64_t sub_1000E2740(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 attributeSet];
  [v5 setThumbnailURL:v4];

  double v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v6();
}

void sub_1000E2AE4(uint64_t a1)
{
  if (([*(id *)(a1 + 32) hasFetchedInitialAccount] & 1) == 0) {
    [*(id *)(a1 + 32) _updateActiveAccount];
  }
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000E2B98;
    block[3] = &unk_10054D6E8;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_1000E2B98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000E2D8C(id a1)
{
  id v1 = +[MTLibrary sharedInstance];
  [v1 removeAllHLSDownloadAssets];
}

void sub_1000E2DD4(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"AccountDSIDChangedNotification" object:0];
}

void sub_1000E3088(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    goto LABEL_2;
  }
  id v14 = [*(id *)(a1 + 32) inFlightAuthRequests];
  if ([v14 containsObject:*(void *)(a1 + 40)])
  {
  }
  else
  {
    id v12 = [*(id *)(a1 + 32) declinedAuthRequests];
    unsigned __int8 v13 = [v12 containsObject:*(void *)(a1 + 40)];

    if ((v13 & 1) == 0)
    {
LABEL_2:
      id v2 = [*(id *)(a1 + 32) inFlightAuthRequests];
      [v2 addObject:*(void *)(a1 + 40)];

      id v3 = [*(id *)(a1 + 32) activeAccount];
      id v4 = [objc_alloc((Class)AMSAuthenticateOptions) initWithOptionsDictionary:0];
      [v4 setAuthenticationType:0];
      [v4 setAllowServerDialogs:1];
      [v4 setDebugReason:*(void *)(a1 + 40)];
      id v5 = +[NSBundle mainBundle];
      double v6 = [v5 localizedStringForKey:@"SIGN_IN_PODCASTS" value:&stru_10056A8A0 table:0];
      [v4 setPromptTitle:v6];

      id v7 = +[UIViewController mt_rootViewController];
      id v8 = [v7 mt_topViewController];

      id v9 = [objc_alloc((Class)AMSUIAuthenticateTask) initWithAccount:v3 presentingViewController:v8 options:v4];
      double v10 = [v9 performAuthentication];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_1000E32B8;
      v15[3] = &unk_100550FE8;
      double v11 = *(void **)(a1 + 40);
      void v15[4] = *(void *)(a1 + 32);
      id v16 = v11;
      [v10 addFinishBlock:v15];
    }
  }
}

void sub_1000E32B8(uint64_t a1, uint64_t a2, void *a3)
{
  v11[0] = 0;
  v11[1] = v11;
  _DWORD v11[2] = 0x3032000000;
  v11[3] = sub_100056FEC;
  void v11[4] = sub_1000572C0;
  id v4 = a3;
  id v12 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000E33CC;
  v7[3] = &unk_100550FC0;
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  double v10 = v11;
  id v8 = v5;
  id v9 = v4;
  id v6 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

  _Block_object_dispose(v11, 8);
}

void sub_1000E33CC(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateActiveAccount];
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v2)
  {
    id v3 = [v2 ams_underlyingError];

    if (v3)
    {
      uint64_t v4 = AKAppleIDAuthenticationErrorDomain;
      while (1)
      {
        uint64_t v5 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) ams_underlyingError];
        uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
        id v7 = *(void **)(v6 + 40);
        *(void *)(v6 + 40) = v5;

        id v8 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) domain];
        if (![v8 isEqualToString:v4]) {
          goto LABEL_7;
        }
        id v9 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) code];

        if (v9 == (id)-7003) {
          break;
        }
LABEL_8:
        double v10 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) ams_underlyingError];

        if (!v10) {
          goto LABEL_9;
        }
      }
      id v8 = [*(id *)(a1 + 32) declinedAuthRequests];
      [v8 addObject:*(void *)(a1 + 40)];
LABEL_7:

      goto LABEL_8;
    }
LABEL_9:
    double v11 = _MTLogCategoryDefault();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      int v14 = 138412290;
      uint64_t v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to authenticate user with error: %@", (uint8_t *)&v14, 0xCu);
    }
  }
  unsigned __int8 v13 = [*(id *)(a1 + 32) inFlightAuthRequests];
  [v13 removeObject:*(void *)(a1 + 40)];
}

void sub_1000E3604(id a1, BOOL a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    uint64_t v4 = _MTLogCategoryDefault();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to sign out user with error: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1000E3C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t sub_1000E3C28(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = WeakRetained;
    id WeakRetained = [WeakRetained isCancelled];
    id v2 = v4;
    if ((WeakRetained & 1) == 0)
    {
      [v4 setIsSleepingOnStartDelay:0];
      id WeakRetained = [v4 main];
      id v2 = v4;
    }
  }

  return _objc_release_x1(WeakRetained, v2);
}

void sub_1000E3E64(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [*(id *)(a1 + 32) deferredEpisodeUuids];
  [WeakRetained _setSuggestedEpisodeUuidsImmediately:v3];

  [*(id *)(a1 + 32) setPendingDeferredUpdate:0];
  objc_sync_exit(obj);
}

void sub_1000E3EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000E4040(uint64_t a1)
{
  kdebug_trace();
  id v2 = *(id *)(a1 + 32);
  uint64_t v15 = a1;
  if ((unint64_t)[*(id *)(a1 + 32) count] >= 0xB)
  {
    uint64_t v3 = [*(id *)(a1 + 32) subarrayWithRange:0, 10];

    id v2 = (id)v3;
  }
  dispatch_semaphore_t v16 = dispatch_semaphore_create(0);
  uint64_t v4 = +[MTDB sharedInstance];
  id v18 = [v4 mainOrPrivateContext];

  int v14 = objc_opt_new();
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id obj = v2;
  id v5 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (v5)
  {
    uint64_t v17 = *(void *)v39;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v39 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v38 + 1) + 8 * (void)v6);
        uint64_t v32 = 0;
        double v33 = &v32;
        uint64_t v34 = 0x3032000000;
        long long v35 = sub_100056FFC;
        long long v36 = sub_1000572C8;
        id v37 = 0;
        v30[0] = 0;
        v30[1] = v30;
        void v30[2] = 0x2020000000;
        char v31 = 0;
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        void v25[2] = sub_1000E449C;
        v25[3] = &unk_10054DA28;
        id v26 = v18;
        uint64_t v27 = v7;
        uint64_t v28 = &v32;
        id v29 = v30;
        [v26 performBlockAndWait:v25];
        if ([(id)v33[5] length])
        {
          id v8 = +[MTIntentDonationUtil sharedInstance];
          uint64_t v9 = v33[5];
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          void v21[2] = sub_1000E451C;
          long long v21[3] = &unk_100551048;
          v21[4] = *(void *)(v15 + 40);
          id v22 = v14;
          long long v24 = &v32;
          double v10 = v16;
          uint64_t v23 = v10;
          [v8 prepareIntentForEpisodeUuid:v9 stationUuid:0 includeImage:1 includeStorePlatformData:0 completion:v21];

          dispatch_semaphore_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
        }

        _Block_object_dispose(v30, 8);
        _Block_object_dispose(&v32, 8);

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v5 != v6);
      id v5 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
    }
    while (v5);
  }

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  _OWORD v19[2] = sub_1000E45B8;
  v19[3] = &unk_100550098;
  id v20 = v14;
  id v11 = v14;
  uint64_t v12 = [obj mt_compactMap:v19];
  [*(id *)(v15 + 40) setEpisodeIntents:v12];

  kdebug_trace();
}

void sub_1000E4470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1000E449C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  uint64_t v2 = [v5 uuid];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v5 isPlayheadResumable];
}

void sub_1000E451C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  if (v4) {
    [*(id *)(a1 + 40) setObject:v4 forKey:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
  objc_sync_exit(v3);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000E45A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000E45B8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) objectForKey:a2];
}

void sub_1000E4664(uint64_t a1)
{
  kdebug_trace();
  id v2 = *(id *)(a1 + 32);
  uint64_t v16 = a1;
  if ((unint64_t)[*(id *)(a1 + 32) count] >= 0xB)
  {
    uint64_t v3 = [*(id *)(a1 + 32) subarrayWithRange:0, 10];

    id v2 = (id)v3;
  }
  dispatch_semaphore_t v17 = dispatch_semaphore_create(1);
  id v4 = +[MTDB sharedInstance];
  id v19 = [v4 mainOrPrivateContext];

  uint64_t v15 = objc_opt_new();
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = v2;
  id v5 = [obj countByEnumeratingWithState:&v46 objects:v50 count:16];
  if (v5)
  {
    uint64_t v18 = *(void *)v47;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v47 != v18) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v46 + 1) + 8 * (void)v6);
        uint64_t v40 = 0;
        long long v41 = &v40;
        uint64_t v42 = 0x3032000000;
        __int16 v43 = sub_100056FFC;
        int v44 = sub_1000572C8;
        id v45 = 0;
        uint64_t v34 = 0;
        long long v35 = &v34;
        uint64_t v36 = 0x3032000000;
        id v37 = sub_100056FFC;
        long long v38 = sub_1000572C8;
        id v39 = 0;
        v32[0] = 0;
        v32[1] = v32;
        v32[2] = 0x2020000000;
        char v33 = 0;
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_1000E4B30;
        v26[3] = &unk_10054E410;
        id v27 = v19;
        uint64_t v28 = v7;
        id v29 = &v40;
        id v30 = &v34;
        char v31 = v32;
        [v27 performBlockAndWait:v26];
        if ([(id)v41[5] length])
        {
          id v8 = +[MTIntentDonationUtil sharedInstance];
          uint64_t v9 = v35[5];
          uint64_t v10 = v41[5];
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          v22[2] = sub_1000E4BFC;
          v22[3] = &unk_100551048;
          void v22[4] = *(void *)(v16 + 40);
          id v23 = v15;
          uint64_t v25 = &v40;
          id v11 = v17;
          long long v24 = v11;
          [v8 prepareIntentForEpisodeUuid:v9 stationUuid:v10 includeImage:1 includeStorePlatformData:0 completion:v22];

          dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
        }

        _Block_object_dispose(v32, 8);
        _Block_object_dispose(&v34, 8);

        _Block_object_dispose(&v40, 8);
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v5 != v6);
      id v5 = [obj countByEnumeratingWithState:&v46 objects:v50 count:16];
    }
    while (v5);
  }

  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  id v20[2] = sub_1000E4C98;
  v20[3] = &unk_100550098;
  id v21 = v15;
  id v12 = v15;
  unsigned __int8 v13 = [obj mt_compactMap:v20];
  [*(id *)(v16 + 40) setStationIntents:v13];

  kdebug_trace();
}

void sub_1000E4AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1000E4B30(uint64_t a1)
{
  id v10 = [*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)];
  id v2 = [v10 episodes];
  uint64_t v3 = [v2 firstObject];

  uint64_t v4 = [v10 uuid];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = [v3 uuid];
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v3 isPlayheadResumable];
}

void sub_1000E4BFC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  if (v4) {
    [*(id *)(a1 + 40) setObject:v4 forKey:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
  objc_sync_exit(v3);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000E4C84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000E4C98(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) objectForKey:a2];
}

void sub_1000E4D98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E4E9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E5174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_1000E51B4(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = _MTLogCategorySiri();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      uint64_t v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to set relevant shortcuts with error: %@.", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t sub_1000E63AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1000E63CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000E63E0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1000E6D9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000E6DB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000E7C24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E82D4(uint64_t a1)
{
  id v2 = +[LSApplicationWorkspace defaultWorkspace];
  [v2 openSensitiveURL:*(void *)(a1 + 32) withOptions:0];

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

uint64_t sub_1000E8344(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000E8478(id a1)
{
  id v1 = (void *)qword_10060A7F8;
  qword_10060A7F8 = (uint64_t)&off_10057AE10;
}

void sub_1000E856C(id a1)
{
  v19[0] = &off_1005796B0;
  uint64_t v18 = +[UIImage imageNamed:@"StateVideo"];
  dispatch_semaphore_t v17 = [v18 imageWithRenderingMode:2];
  uint64_t v16 = [v17 _imageThatSuppressesAccessibilityHairlineThickening];
  v20[0] = v16;
  v19[1] = &off_100579698;
  uint64_t v15 = +[UIImage imageNamed:@"StateExplicit"];
  v20[1] = v15;
  _OWORD v19[2] = &off_100579740;
  int v14 = +[UIImage imageNamed:@"StateCloud"];
  unsigned __int8 v13 = [v14 imageWithRenderingMode:2];
  id v20[2] = v13;
  v19[3] = &off_100579758;
  id v1 = +[UIImage imageNamed:@"StateDocument"];
  id v2 = [v1 imageWithRenderingMode:2];
  v20[3] = v2;
  void v19[4] = &off_100579770;
  id v3 = +[UIImage imageNamed:@"StateError"];
  int v4 = [v3 imageWithRenderingMode:2];
  void v20[4] = v4;
  void v19[5] = &off_100579788;
  uint64_t v5 = +[UIImage imageNamed:@"StateAirplane"];
  uint64_t v6 = [v5 imageFlippedForRightToLeftLayoutDirection];
  uint64_t v7 = [v6 imageWithRenderingMode:2];
  void v20[5] = v7;
  v19[6] = &off_1005796E0;
  uint64_t v8 = +[UIImage halfPlayedIcon];
  v20[6] = v8;
  v19[7] = &off_1005796F8;
  uint64_t v9 = +[UIImage unplayedIcon];
  v20[7] = v9;
  v19[8] = &off_1005796C8;
  id v10 = +[UIImage nowPlayingIcon];
  v20[8] = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:9];
  id v12 = (void *)qword_10060A808;
  qword_10060A808 = v11;
}

void sub_1000E932C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = a3;
  uint64_t v5 = +[MTEpisodeStateView imageForIconKey:a2 theme:v4];
  [v6 setImage:v5];

  [v6 sizeToFit];
}

void sub_1000EA084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EA0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAllPodcastsTo:a3];
}

void sub_1000EA234(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = kMTPodcastEntityName;
    uint64_t v5 = +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts];
    id v6 = [v3 objectsInEntity:v4 predicate:v5 sortDescriptors:0];

    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v8 = objc_opt_new();
    [v7 setPodcastUuids:v8];

    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v9 = v6;
    id v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v17;
      do
      {
        unsigned __int8 v13 = 0;
        do
        {
          if (*(void *)v17 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(a1 + 40);
          uint64_t v15 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v13) uuid:(void)v16];
          [v14 togglePodcastUuid:v15];

          unsigned __int8 v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v11);
    }
  }
}

void sub_1000EC1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1000EC218(uint64_t a1)
{
  if (+[MTPlayerController hasDefaultInstance])
  {
    id v3 = +[MTPlayerController defaultInstance];
    uint64_t v4 = [v3 upNextController];
    [v4 beginUpdates];
  }
  uint64_t v5 = 0;
  uint64_t v6 = kMTEpisodeEntityName;
  *(void *)&long long v2 = 134218242;
  long long v31 = v2;
  do
  {
    uint64_t v8 = +[NSFetchRequest fetchRequestWithEntityName:v6];
    [v8 setPredicate:*(void *)(a1 + 32)];
    [v8 setReturnsObjectsAsFaults:0];
    [v8 setFetchLimit:200];
    id v9 = [*(id *)(a1 + 40) config];
    unsigned __int8 v10 = [v9 supportsPlayback];

    if ((v10 & 1) == 0)
    {
      id v11 = +[MTEpisode sortDescriptorsForPubDateAscending:1];
      [v8 setSortDescriptors:v11];

      [v8 setFetchOffset:200 * v5];
    }
    uint64_t v12 = *(void **)(a1 + 48);
    id v32 = 0;
    unsigned __int8 v13 = [v12 executeFetchRequest:v8 error:&v32 v31];
    id v14 = v32;
    uint64_t v15 = _MTLogCategoryDatabase();
    long long v16 = v15;
    if (v14)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        long long v17 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        id v34 = v17;
        __int16 v35 = 2112;
        id v36 = v14;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Error deleting episodes for predicate %@ - %@", buf, 0x16u);
      }

      int v18 = 3;
    }
    else
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        id v19 = [v13 count];
        id v20 = *(void **)(a1 + 32);
        *(_DWORD *)buf = v31;
        id v34 = v19;
        __int16 v35 = 2112;
        id v36 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Deleting %lu episodes for predicate %@", buf, 0x16u);
      }

      id v21 = [*(id *)(a1 + 40) config];
      unsigned int v22 = [v21 supportsLocalMedia];

      if (v22) {
        [*(id *)(a1 + 40) _removeDownloadAssetsForEpisodes:v13 shouldKeep:0 forced:*(unsigned __int8 *)(a1 + 64)];
      }
      id v23 = [*(id *)(a1 + 40) config];
      unsigned int v24 = [v23 supportsPlayback];

      if (v24)
      {
        uint64_t v25 = [*(id *)(a1 + 40) _updateUpNextDeleting:v13 inContext:*(void *)(a1 + 48) forced:*(unsigned __int8 *)(a1 + 64) podcastUuids:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
        id v26 = +[MTIntentDonationUtil sharedInstance];
        [v26 removeDonationsForEpisodeUuids:v25];
      }
      [*(id *)(a1 + 48) saveInCurrentBlock];
      ++v5;
      if ((unint64_t)[v13 count] >= 0xC8) {
        int v18 = 0;
      }
      else {
        int v18 = 3;
      }
    }
  }
  while (!v18);
  id v27 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v34 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Finished deleting episodes for predicate %@", buf, 0xCu);
  }

  if (+[MTPlayerController hasDefaultInstance])
  {
    id v29 = +[MTPlayerController defaultInstance];
    id v30 = [v29 upNextController];
    [v30 endUpdates];
  }
}

void sub_1000ECAB0(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPodcastEntityName;
  uint64_t v4 = +[NSPredicate truePredicate];
  uint64_t v5 = kPodcastUuid;
  uint64_t v19 = kPodcastUuid;
  uint64_t v6 = +[NSArray arrayWithObjects:&v19 count:1];
  uint64_t v7 = [v2 objectDictionariesInEntity:v3 predicate:v4 sortDescriptors:0 propertiesToFetch:v6 includeObjectId:0];

  uint64_t v8 = [v7 valueForKey:v5];
  id v9 = +[NSPredicate predicateWithFormat:@"NOT (%K IN %@)", kEpisodePodcastUuid, v8];
  unsigned __int8 v10 = *(void **)(a1 + 32);
  uint64_t v11 = kMTEpisodeEntityName;
  uint64_t v12 = kEpisodeUuid;
  uint64_t v18 = kEpisodeUuid;
  unsigned __int8 v13 = +[NSArray arrayWithObjects:&v18 count:1];
  id v14 = [v10 objectDictionariesInEntity:v11 predicate:v9 sortDescriptors:0 propertiesToFetch:v13 includeObjectId:0];

  if ([v14 count])
  {
    uint64_t v15 = [v14 valueForKey:v12];
    long long v16 = +[NSSet setWithArray:v15];

    long long v17 = +[IMLogger sharedLogger];
    objc_msgSend(v17, "logFile:lineNumber:format:", "/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/MTLibrary+MTEpisodeDeletion.m", 194, @"Deleting %ld orphaned episodes...", objc_msgSend(v16, "count"));

    [*(id *)(a1 + 40) _deleteEpisodeUuids:v16 forced:1];
  }
  else
  {
    long long v16 = +[IMLogger sharedLogger];
    [v16 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/MTLibrary+MTEpisodeDeletion.m" lineNumber:199 format:@"No orphaned episodes"];
  }
}

void sub_1000ECEC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    [*(id *)(a1 + 32) finishWithStatus:0];
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
    }
    uint64_t v8 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to resolve active player path with error: %@", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v8 = objc_alloc_init((Class)MPCAssistantCommand);
    id v9 = [[MTMPCAssistantGenericPlaybackQueue alloc] initWithPlaybackQueueRef:*(void *)(a1 + 48)];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1000ED080;
    uint64_t v12[3] = &unk_100551208;
    id v14 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    id v13 = v10;
    uint64_t v15 = v11;
    char v16 = *(unsigned char *)(a1 + 64);
    [v8 sendPlaybackQueue:v9 toDestination:v5 withOptions:0 completion:v12];
  }
}

void sub_1000ED080(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 containsObject:&off_1005797D0])
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      uint64_t v8 = *(void (**)(void))(v7 + 16);
LABEL_4:
      v8();
    }
  }
  else
  {
    if (!v5)
    {
      if ([v6 count])
      {
        uint64_t v11 = [v6 objectAtIndex:0];
        id v12 = [v11 intValue];

        unint64_t v13 = (unint64_t)[*(id *)(a1 + 48) requestStatusForMediaRemoteStatus:v12];
        unint64_t v14 = v13;
        if (v13 <= 5 && ((1 << v13) & 0x39) != 0)
        {
          uint64_t v15 = *(void **)(a1 + 48);
          uint64_t v16 = *(void *)(a1 + 32);
          if (*(unsigned char *)(a1 + 56)) {
            [v15 promptBeforePerformingRequestAsBufferedAirPlay:v16 queueStatus:1];
          }
          else {
            [v15 performRequestAsBufferedAirPlay:v16];
          }
          goto LABEL_11;
        }
        id v18 = *(void **)(a1 + 32);
      }
      else
      {
        long long v17 = _MTLogCategoryMediaRemote();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v20) = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "No status codes returned after setting remote playback queue", (uint8_t *)&v20, 2u);
        }

        id v18 = *(void **)(a1 + 32);
        unint64_t v14 = 0;
      }
      [v18 finishWithStatus:v14];
      uint64_t v19 = *(void *)(a1 + 40);
      if (!v19) {
        goto LABEL_11;
      }
      uint64_t v8 = *(void (**)(void))(v19 + 16);
      goto LABEL_4;
    }
    [*(id *)(a1 + 32) finishWithStatus:0];
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
    }
    id v10 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v20 = 138412290;
      id v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to send item into playback queue with error: %@", (uint8_t *)&v20, 0xCu);
    }
  }
LABEL_11:
}

void sub_1000ED414(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = [a3 firstObject];
  id v5 = [v4 unsignedIntValue];
  id v6 = [*(id *)(a1 + 40) requestStatusForMediaRemoteStatus:v5];
  if (v5 && v5 != 3)
  {
    uint64_t v7 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9[0] = 67109120;
      v9[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "MediaRemote command failed to fallback to Airplay with status %u", (uint8_t *)v9, 8u);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, id, uint64_t))(v8 + 16))(v8, v6, 6);
  }
}

id sub_1000ED68C(uint64_t a1, int a2)
{
  if (a2) {
    return [*(id *)(a1 + 40) performRequestAsBufferedAirPlay:*(void *)(a1 + 32)];
  }
  else {
    return [*(id *)(a1 + 32) finishWithStatus:2];
  }
}

uint64_t sub_1000ED7F0(uint64_t a1, uint64_t a2)
{
  if (a2 == 1 && *(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = +[MTPlayerController defaultInstance];
    [v3 playWithReason:*(void *)(a1 + 40)];
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

void sub_1000ED890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a2)
  {
    [v3 finishWithStatus:0];
  }
  else
  {
    [v3 setStartPlayback:0];
    [*(id *)(a1 + 32) setPlaybackDestination:0];
    id v4 = +[MTPlayerController defaultInstance];
    [v4 setPlaybackQueue:*(void *)(a1 + 32)];
  }
}

uint64_t sub_1000EDAA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (!v4) {
      goto LABEL_8;
    }
    id v9 = v3;
    uint64_t v4 = (*(uint64_t (**)(void))(v4 + 16))();
  }
  else
  {
    id v9 = 0;
    id v5 = +[MPAVRoutingController systemRoute];
    id v6 = +[MTPlayerController defaultInstance];
    [v6 setPlayerRoute:v5];

    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
    }
  }
  id v3 = v9;
LABEL_8:

  return _objc_release_x1(v4, v3);
}

void sub_1000EDEB0(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  if (![v7 count] || a3)
  {
    id v10 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v11 = @"Found 0 player items";
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      if (a3) {
        CFStringRef v11 = @"Target player item not found";
      }
      CFStringRef v29 = v11;
      __int16 v30 = 1024;
      int v31 = a4;
      __int16 v32 = 2112;
      uint64_t v33 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%@ with restricted (%x) request for identifiers %@", buf, 0x1Cu);
    }

    uint64_t v13 = *(void *)(a1 + 56);
    if (v13)
    {
      uint64_t v14 = 3;
      if (!a3) {
        uint64_t v14 = 0;
      }
      if (a4) {
        uint64_t v15 = 4;
      }
      else {
        uint64_t v15 = v14;
      }
      (*(void (**)(uint64_t, uint64_t, void))(v13 + 16))(v13, v15, *(void *)(a1 + 64));
    }
  }
  else
  {
    uint64_t v8 = [[MTItemListManifest alloc] initWithItems:v7];
    id v9 = v8;
    if (*(void *)(a1 + 40))
    {
      -[MTItemListManifest setIdentifier:](v8, "setIdentifier:");
    }
    else
    {
      uint64_t v16 = +[NSUUID UUID];
      long long v17 = [v16 UUIDString];
      [(MTItemListManifest *)v9 setIdentifier:v17];
    }
    [(MTPlayerManifest *)v9 setNetworkUPPEnabled:+[PFClientUtil isRunningOnHomepod]];
    id v18 = objc_alloc_init(MTPlaybackContext);
    [(MTPlaybackContext *)v18 setSource:12];
    [(MTPlaybackContext *)v18 setInteractive:0];
    [(MTPlaybackContext *)v18 setUpNextQueueIntent:*(void *)(a1 + 72)];
    uint64_t v19 = +[MTSetPlaybackQueueRequest requestWithContext:v18];
    [v19 setStartPlayback:*(unsigned __int8 *)(a1 + 80)];
    [v19 setPlaybackDestination:0];
    [v19 setManifest:v9];
    unsigned int v22 = _NSConcreteStackBlock;
    uint64_t v23 = 3221225472;
    unsigned int v24 = sub_1000EE14C;
    uint64_t v25 = &unk_1005512D0;
    id v20 = *(id *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    id v26 = v20;
    uint64_t v27 = v21;
    [v19 setCompletion:&v22];
    [*(id *)(a1 + 48) setPlaybackQueue:v19, v22, v23, v24, v25];
  }
}

uint64_t sub_1000EE14C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, *(void *)(a1 + 40));
  }
  return result;
}

void sub_1000EE3AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a2)
  {
    id v5 = dispatch_get_global_queue(0, 0);
    MRMediaRemoteInsertSystemAppPlaybackQueueForPlayer();
  }
  else
  {
    id v6 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to resolve active player path with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_1000EE4B8(id a1, unsigned int a2)
{
  if (a2)
  {
    id v3 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to insert item into playback queue with error: %d", (uint8_t *)v4, 8u);
    }
  }
}

uint64_t sub_1000EE69C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
    }
  }
  else if (v5)
  {
    id v6 = objc_alloc((Class)MPCAssistantMutableRemoteControlDestination);
    id v7 = [v6 initWithAppBundleID:kMTApplicationBundleIdentifier playerID:kPodcastsPlayerID origin:MRNowPlayingPlayerPathGetOrigin()];
    [v7 setSingleGroup:1];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }

  return _objc_release_x2();
}

void sub_1000EE9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000EE9F4(void *a1)
{
  long long v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v2 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000EEFA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EF014(id a1)
{
  id v1 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en"];
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(&off_10057AE28, "count"));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = [&off_10057AE28 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(&off_10057AE28);
        }
        uint64_t v7 = *(void *)(*((void *)&v11 + 1) + 8 * (void)v6);
        id v8 = objc_alloc_init((Class)NSDateFormatter);
        [v8 setDateFormat:v7];
        [v8 setLocale:v1];
        [v2 addObject:v8];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [&off_10057AE28 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }
  id v9 = [v2 copy];
  uint64_t v10 = (void *)qword_10060A818;
  qword_10060A818 = (uint64_t)v9;
}

void sub_1000EF9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000EFF5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1000EFE50);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EFFC8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) absoluteString];
  id v5 = [v2 podcastForFeedUrl:v3];

  id v4 = v5;
  if (v5)
  {
    [v5 setAuthenticatedDark:1];
    [*(id *)(a1 + 32) saveInCurrentBlock];
    id v4 = v5;
  }
}

void sub_1000F0050(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) absoluteString];
  id v4 = [v2 podcastForFeedUrl:v3];

  if (v4)
  {
    id v5 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = [*(id *)(a1 + 40) absoluteString];
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = 138412546;
      id v9 = v6;
      __int16 v10 = 2048;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to fetch episodes for podcast using external feed url (%@) with status %ld. Incrementing consecutiveFeedFetchErrors count", (uint8_t *)&v8, 0x16u);
    }
    [v4 setConsecutiveFeedFetchErrors:((char *)[v4 consecutiveFeedFetchErrors]) + 1];
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_1000F016C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) absoluteString];
  id v7 = [v2 podcastForFeedUrl:v3];

  uint64_t v4 = [v7 uuid];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000F01F8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) absoluteString];
  uint64_t v4 = [v2 podcastForFeedUrl:v3];

  uint64_t v5 = +[MTFeedUpdateMetricsAction error];
  uint64_t v6 = +[MTFeedUpdateMetricsDataKey statusCode];
  v15[0] = v6;
  id v7 = +[NSNumber numberWithInteger:*(void *)(a1 + 56)];
  v16[0] = v7;
  int v8 = +[MTFeedUpdateMetricsDataKey error];
  v15[1] = v8;
  uint64_t v9 = [*(id *)(a1 + 48) metricsAdditionalData];
  __int16 v10 = (void *)v9;
  CFStringRef v11 = &stru_10056A8A0;
  if (v9) {
    CFStringRef v11 = (const __CFString *)v9;
  }
  v16[1] = v11;
  long long v12 = +[MTFeedUpdateMetricsDataKey pcrFallback];
  void v15[2] = v12;
  long long v13 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
  void v16[2] = v13;
  long long v14 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:3];
  +[IMMetrics recordEvent:v5 dataSource:v4 data:v14];
}

void sub_1000F1DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1E0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = [*(id *)(a1 + 32) identifier];
    uint64_t v9 = [*(id *)(a1 + 32) title];
    int v12 = 138543618;
    long long v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[InfoCenter] Finished fetching artwork for content item %{public}@ - %@", (uint8_t *)&v12, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

  __int16 v10 = [*(id *)(a1 + 40) artworkRequests];
  [v10 removeObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];

  return kdebug_trace();
}

uint64_t sub_1000F204C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) identifier];
    id v6 = [*(id *)(a1 + 32) title];
    int v8 = 138543618;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    CFStringRef v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[InfoCenter] Did fetch artwork for content item %{public}@ - %@", (uint8_t *)&v8, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

  return kdebug_trace();
}

void sub_1000F2358(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) episodeUuid];
  uint64_t v4 = [v2 episodeForUuid:v3];

  id v5 = [v4 itemDescriptionWithoutHTML];
  id v6 = _MTLogCategoryMediaRemote();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [*(id *)(a1 + 48) identifier];
    uint64_t v8 = [*(id *)(a1 + 48) title];
    uint64_t v9 = (void *)v8;
    CFStringRef v10 = &stru_10056A8A0;
    int v11 = 138543874;
    int v12 = v7;
    __int16 v13 = 2112;
    if (!v5) {
      CFStringRef v10 = @" - NO DESCRIPTION";
    }
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    CFStringRef v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[InfoCenter] Did fetch info for content item %{public}@ - %@%@", (uint8_t *)&v11, 0x20u);
  }
  (*(void (**)(void, void *))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v5);
}

void sub_1000F2B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1000F2B3C(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  id v6 = [v9 instanceIdentifier];
  id v7 = [v6 UUIDString];
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_1000F2BE4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v4 = a2;
  uint64_t v5 = [v4 title];
  id v6 = (void *)v5;
  if (v5) {
    CFStringRef v7 = (const __CFString *)v5;
  }
  else {
    CFStringRef v7 = &stru_10056A8A0;
  }
  unsigned int v8 = [v3 stringByAppendingString:v7];
  uint64_t v9 = [v8 stringByAppendingString:@":"];
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  int v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  int v12 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v20 = [v4 instanceIdentifier];

  uint64_t v13 = [v20 UUIDString];
  uint64_t v14 = (void *)v13;
  if (v13) {
    CFStringRef v15 = (const __CFString *)v13;
  }
  else {
    CFStringRef v15 = &stru_10056A8A0;
  }
  CFStringRef v16 = [v12 stringByAppendingString:v15];
  uint64_t v17 = [v16 stringByAppendingString:@","];
  uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v17;
}

void sub_1000F4CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F4D18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000F4E04;
  v8[3] = &unk_10054F1F0;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  id v7 = v5;
  id v9 = v7;
  +[NSThread mainThread:v8];

  objc_destroyWeak(&v10);
}

void sub_1000F4DF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F4E04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (*(void *)(a1 + 32))
  {
    id v5 = WeakRetained;
    id WeakRetained = [WeakRetained isPlaceholder];
    id v3 = v5;
    if (WeakRetained)
    {
      id WeakRetained = [v5 setImage:*(void *)(a1 + 32)];
      id v3 = v5;
    }
  }

  return _objc_release_x1(WeakRetained, v3);
}

void sub_1000F4FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F4FC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1000F50D8;
  uint64_t v12[3] = &unk_10054F518;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  id v10 = v8;
  id v13 = v10;
  id v11 = v7;
  id v14 = v11;
  +[NSThread mainThread:v12];

  objc_destroyWeak(&v15);
}

void sub_1000F50C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F50D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(void *)(a1 + 32))
    {
      id v5 = WeakRetained;
      id WeakRetained = [*(id *)(a1 + 40) isEqualToString:*((void *)WeakRetained + 3)];
      id v3 = v5;
      if (WeakRetained)
      {
        id WeakRetained = [v5 setImage:*(void *)(a1 + 32)];
        id v3 = v5;
      }
    }
  }

  return _objc_release_x1(WeakRetained, v3);
}

id sub_1000F6980(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

uint64_t sub_1000F83BC(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t result = (uint64_t)[v1 hasPerformedLegacyBadgeMigration];
  if ((result & 1) == 0)
  {
    id v3 = [objc_alloc((Class)v1) _initShared];
    uint64_t v4 = qword_10060A848;
    qword_10060A848 = (uint64_t)v3;
    return _objc_release_x1(v3, v4);
  }
  return result;
}

void sub_1000F859C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F85C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained performMigrationIfNecessary];
}

void sub_1000F87E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F87FC(uint64_t a1)
{
  uint64_t result = (uint64_t)[(id)objc_opt_class() hasPerformedLegacyBadgeMigration];
  if (result)
  {
    BOOL v3 = 1;
  }
  else
  {
    uint64_t result = (uint64_t)[*(id *)(a1 + 32) state];
    BOOL v3 = result < 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    return (uint64_t)[v4 setState:1];
  }
  return result;
}

void sub_1000F8914(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    BOOL v3 = _MTLogCategoryNotifications();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Legacy badge clearing deferred until no remaining notifications", v5, 2u);
    }

    [*(id *)(a1 + 32) setState:0];
  }
  else
  {
    uint64_t v4 = +[UNUserNotificationCenter currentNotificationCenter];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000F8A08;
    v6[3] = &unk_1005514A8;
    void v6[4] = *(void *)(a1 + 32);
    [v4 getBadgeNumberWithCompletionHandler:v6];
  }
}

void sub_1000F8A08(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setState:2];
  [*(id *)(a1 + 32) stopObservingApplicationState];
  [(id)objc_opt_class() commitHasPerformedLegacyBadgeMigration];
  if (a2)
  {
    uint64_t v4 = _MTLogCategoryNotifications();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Legacy badge clearing complete", v6, 2u);
    }

    id v5 = +[UNUserNotificationCenter currentNotificationCenter];
    [v5 setBadgeNumber:0 withCompletionHandler:0];
  }
}

void sub_1000F8B34(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appActivateObserver];

  if (v2)
  {
    BOOL v3 = +[NSNotificationCenter defaultCenter];
    uint64_t v4 = [*(id *)(a1 + 32) appActivateObserver];
    [v3 removeObserver:v4];

    id v5 = *(void **)(a1 + 32);
    _[v5 setAppActivateObserver:0];
  }
}

id sub_1000F9010(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = [*(id *)(a1 + 40) episodeForUuid:*(void *)(*((void *)&v9 + 1) + 8 * (void)v6) v9];
        [v7 setIsNew:0];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }

  return [*(id *)(a1 + 40) saveInCurrentBlock];
}

id sub_1000F99B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

void sub_1000F9D5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9D80(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"MTSyncControllerOperationCompleted" object:0];
}

void sub_1000F9FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_1000FA044(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained endBackgroundTask];
}

void sub_1000FA440(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000FA7A4(uint64_t a1)
{
  id v2 = +[UIApplication sharedApplication];
  [v2 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = UIBackgroundTaskInvalid;
}

void sub_1000FA804(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned int v8 = [v5 BOOLValue];
  long long v9 = _MTLogCategoryCloudSync();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8 && WeakRetained)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "performUniversalPlaybackPositionSync", buf, 2u);
    }

    long long v11 = +[MTBaseProcessor sharedInstance];
    [v11 disable];

    long long v12 = objc_opt_new();
    [v12 setOperationType:5];
    [v12 setStartDelay:0.0];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000FAA20;
    v14[3] = &unk_10054E8E0;
    objc_copyWeak(&v15, (id *)(a1 + 40));
    [v12 setMainBlock:v14];
    [WeakRetained addOperation:v12];
    WeakRetained[33] = 0;
    id v13 = +[UIApplication sharedApplication];
    [v13 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];

    objc_destroyWeak(&v15);
  }
  else
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "UPPEnabled bag value is false. Will not sync UPP.", buf, 2u);
    }

    long long v12 = +[UIApplication sharedApplication];
    [v12 endBackgroundTask:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
  }
}

void sub_1000FAA08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000FAA20(uint64_t a1)
{
  id v2 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "UPP Sync Started", v5, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = [WeakRetained UPPStore];
  [v4 synchronizeImmediatelyWithCompletionBlock:0];
}

AMSPromise *__cdecl sub_1000FAB84(id a1, NSString *a2)
{
  if ([(NSString *)a2 BOOLValue]) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = +[MTApplication localLibraryUpdatesDisabled] ^ 1;
  }
  id v3 = +[NSNumber numberWithBool:v2];
  id v4 = +[AMSPromise promiseWithResult:v3];

  return (AMSPromise *)v4;
}

id sub_1000FACA4(uint64_t a1)
{
  [*(id *)(a1 + 32) syncCriticalBookkeeperKeysShouldSyncCleanKeys:0];
  id result = [*(id *)(a1 + 32) uppSyncDirtyFlag];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 performUniversalPlaybackPositionSync];
  }
  return result;
}

void sub_1000FAE50(uint64_t a1)
{
  uint64_t v2 = [MTTermsVersionSyncProcessor alloc];
  id v3 = objc_opt_new();
  id v4 = [(MTTermsVersionSyncProcessor *)v2 initWithStorage:v3];

  if (+[MTPrivacyUtil cloudSyncIsDirty])
  {
    id v5 = [*(id *)(a1 + 32) cloudSyncController];
    uint64_t v10 = kMTTermsVersionKey;
    id v6 = +[NSArray arrayWithObjects:&v10 count:1];
    id v7 = [v5 scheduleSetTransactionWithKeys:v6 processor:v4];
LABEL_5:

    goto LABEL_6;
  }
  if (!+[MTPrivacyUtil allowReporting])
  {
    id v5 = [*(id *)(a1 + 32) cloudSyncController];
    uint64_t v9 = kMTTermsVersionKey;
    id v6 = +[NSArray arrayWithObjects:&v9 count:1];
    id v8 = [v5 scheduleGetTransactionWithKeys:v6 processor:v4];
    goto LABEL_5;
  }
LABEL_6:
}

void sub_1000FB104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000FB12C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(_TtC8Podcasts29NonFollowedShowsSyncProcessor);
  id v3 = +[SyncKeysRepository shared];
  unsigned int v4 = [v3 isNonFollowedShowsSyncDirty];

  id v5 = _MTLogCategoryCloudSync();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)long long v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[NonFollowedShows] SET Implicit Sync Started", v12, 2u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v8 = [WeakRetained cloudSyncController];
    uint64_t v14 = kMTNonFollowedShowsSyncKey;
    uint64_t v9 = +[NSArray arrayWithObjects:&v14 count:1];
    id v10 = [v8 scheduleSetTransactionWithKeys:v9 processor:v2];
  }
  else
  {
    if (v6)
    {
      *(_WORD *)long long v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[NonFollowedShows] GET Implicit Sync Started", v12, 2u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v8 = [WeakRetained cloudSyncController];
    uint64_t v13 = kMTNonFollowedShowsSyncKey;
    uint64_t v9 = +[NSArray arrayWithObjects:&v13 count:1];
    id v11 = [v8 scheduleGetTransactionWithKeys:v9 processor:v2];
  }
}

void sub_1000FB7D8(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Episode SET Started", v10, 2u);
  }

  id v3 = [*(id *)(a1 + 32) expandFeedUrls:*(void *)(a1 + 40)];
  unsigned int v4 = [MTEpisodeSyncProcessor alloc];
  id v5 = [*(id *)(a1 + 32) episodeSyncStorage];
  BOOL v6 = [(MTEpisodeSyncProcessor *)v4 initWithStorageProvider:v5];

  id v7 = [*(id *)(a1 + 32) cloudSyncController];
  id v8 = [v3 allObjects];
  id v9 = [v7 scheduleSetTransactionWithKeys:v8 processor:v6];
}

void sub_1000FBA28(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Episode GET Started for FeedURLs: %@", (uint8_t *)&v11, 0xCu);
  }

  unsigned int v4 = [*(id *)(a1 + 40) expandFeedUrls:*(void *)(a1 + 32)];
  id v5 = [MTEpisodeSyncProcessor alloc];
  BOOL v6 = [*(id *)(a1 + 40) episodeSyncStorage];
  id v7 = [(MTEpisodeSyncProcessor *)v5 initWithStorageProvider:v6];

  id v8 = [*(id *)(a1 + 40) cloudSyncController];
  id v9 = [v4 allObjects];
  id v10 = [v8 scheduleGetTransactionWithKeys:v9 processor:v7];
}

void sub_1000FBF1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000FBF44(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cleanKeys];
  id v3 = [v2 count];
  id WeakRetained = _MTLogCategoryCloudSync();
  BOOL v5 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      BOOL v6 = [v2 description];
      int v9 = 138412290;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "[MultiKey] GET Operation for keys: %@", (uint8_t *)&v9, 0xCu);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v7 = [WeakRetained cloudSyncController];
    id v8 = [v7 scheduleGetTransactionWithKeys:v2 processor:*(void *)(a1 + 32)];
  }
  else if (v5)
  {
    LOWORD(v9) = 0;
    _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "[MultiKey] No clean keys found -> No need to schedule MultiKey GET Operation.", (uint8_t *)&v9, 2u);
  }
}

void sub_1000FC088(id *a1)
{
  [a1[4] dirtyKeys];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [obj countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v2; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        BOOL v6 = objc_alloc_init(MTTimedOperation);
        id v7 = [a1[4] processorForKey:v5];
        if (![v7 hasLocalChanges])
        {

          goto LABEL_11;
        }
        -[MTTimedOperation setOperationType:](v6, "setOperationType:", [v7 operationTypeForSET]);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        _DWORD v10[2] = sub_1000FC2AC;
        void v10[3] = &unk_1005515D8;
        void v10[4] = v5;
        objc_copyWeak(&v12, a1 + 6);
        id v8 = v7;
        id v11 = v8;
        [(MTTimedOperation *)v6 setMainBlock:v10];
        [a1[5] addOperation:v6];

        objc_destroyWeak(&v12);
      }
      id v2 = [obj countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000FC28C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000FC2AC(uint64_t a1)
{
  id v2 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) description];
    *(_DWORD *)buf = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MultiKey] SET Operation for key: %@", buf, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = [WeakRetained cloudSyncController];
  uint64_t v8 = *(void *)(a1 + 32);
  BOOL v6 = +[NSArray arrayWithObjects:&v8 count:1];
  id v7 = [v5 scheduleSetTransactionWithKeys:v6 processor:*(void *)(a1 + 40)];
}

id sub_1000FC544(uint64_t a1)
{
  [*(id *)(a1 + 32) _synchronousResetToInitialStateDatabase];
  [*(id *)(a1 + 32) _synchronousResetToInitialStateMetadata];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 _finaliseResetToInitial:v3];
}

void sub_1000FC640(uint64_t a1)
{
  int IsAudioAccessory = MSVDeviceIsAudioAccessory();
  uint64_t v3 = &OBJC_IVAR___MZUPPMetrics__bagLookupEndTime;
  if (([*(id *)(a1 + 32) hasPodcastSyncVersion] & 1) != 0
    || [*(id *)(a1 + 32) hasPodcastSyncV3Version])
  {
    uint64_t v5 = *(void **)(a1 + 40);
    uint64_t v6 = kMTPodcastEntityName;
    id v7 = +[MTPodcast predicateForNotHiddenPodcasts];
    uint64_t v8 = [v5 objectsInEntity:v6 predicate:v7 sortDescriptors:0];

    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v49 objects:v55 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v40 = v4;
      char v12 = 0;
      uint64_t v13 = *(void *)v50;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v50 != v13) {
            objc_enumerationMutation(v9);
          }
          long long v15 = *(void **)(*((void *)&v49 + 1) + 8 * i);
          if ((IsAudioAccessory & 1) == 0
            && [*(id *)(*((void *)&v49 + 1) + 8 * i) hasBeenSynced]
            && ([v15 isImplicitlyFollowed] & 1) == 0)
          {
            [v15 setHasBeenSynced:0];
            char v12 = 1;
          }
          long long v16 = [*(id *)(a1 + 32) episodeSyncStorage];
          uint64_t v17 = [v15 feedURL];
          [v16 resetVersionForFeedUrl:v17];

          uint64_t v18 = [*(id *)(a1 + 32) episodeSyncStorage];
          uint64_t v19 = [v15 updatedFeedURL];
          [v18 resetVersionForFeedUrl:v19];
        }
        id v11 = [v9 countByEnumeratingWithState:&v49 objects:v55 count:16];
      }
      while (v11);

      unsigned int v4 = v40;
      if (v12) {
        [*(id *)(a1 + 40) saveInCurrentBlock];
      }
    }
    else
    {
    }
    uint64_t v3 = &OBJC_IVAR___MZUPPMetrics__bagLookupEndTime;
    if (IsAudioAccessory)
    {
      id v20 = +[MTLibrary sharedInstance];
      [v20 synchronouslyMarkAsHiddenAllPodcastsWithoutResettingSyncVersions];
    }
    [(id)objc_opt_class() resetAllSubscriptionSyncVersion];
    [(id)objc_opt_class() resetPlaylistSyncVersion];
  }
  if ([*(id *)(a1 + 32) hasPlaylistSyncVersion])
  {
    if (IsAudioAccessory)
    {
      unsigned int v22 = [v3 + 442 sharedInstance];
      [v22 deleteAllTopLevelStationsExcludingFolders];
    }
    else
    {
      unsigned int v22 = +[MTPlaylist topLevelPlaylistsExcludingFoldersPredicate];
      uint64_t v23 = [*(id *)(a1 + 40) objectsInEntity:kMTPlaylistEntityName predicate:v22 sortDescriptors:0];
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v24 = [v23 countByEnumeratingWithState:&v45 objects:v54 count:16];
      if (v24)
      {
        id v25 = v24;
        uint64_t v26 = *(void *)v46;
        do
        {
          for (j = 0; j != v25; j = (char *)j + 1)
          {
            if (*(void *)v46 != v26) {
              objc_enumerationMutation(v23);
            }
            uint64_t v28 = *(void **)(*((void *)&v45 + 1) + 8 * (void)j);
            if ([v28 hasBeenSynced]) {
              [v28 setHasBeenSynced:0];
            }
          }
          id v25 = [v23 countByEnumeratingWithState:&v45 objects:v54 count:16];
        }
        while (v25);
      }
      [*(id *)(a1 + 40) saveInCurrentBlock];
    }
    [(id)objc_opt_class() resetPlaylistSyncVersion];
  }
  if (+[MTBookmarksSyncStorage hasBookmarksSync])
  {
    __int16 v30 = +[MTEpisode predicateForBookmarkedEpisodes];
    int v31 = [*(id *)(a1 + 40) objectsInEntity:kMTEpisodeEntityName predicate:v30 sortDescriptors:0];
    if ([v31 count])
    {
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id v32 = v31;
      id v33 = [v32 countByEnumeratingWithState:&v41 objects:v53 count:16];
      if (v33)
      {
        id v34 = v33;
        uint64_t v35 = *(void *)v42;
        do
        {
          for (k = 0; k != v34; k = (char *)k + 1)
          {
            if (*(void *)v42 != v35) {
              objc_enumerationMutation(v32);
            }
            [*(id *)(*((void *)&v41 + 1) + 8 * (void)k) markAsUnbookmarked];
          }
          id v34 = [v32 countByEnumeratingWithState:&v41 objects:v53 count:16];
        }
        while (v34);
      }

      [*(id *)(a1 + 40) saveInCurrentBlock];
    }

    +[MTBookmarksSyncStorage resetBookmarksSync];
  }
  [*(id *)(a1 + 40) deleteAllUPPMetadata];
  if ([*(id *)(a1 + 32) hasInterestSyncVersion])
  {
    long long v38 = [v3 + 442 sharedInstance];
    [v38 deleteAllInterestsBlockingCaller];

    +[InterestSyncStorage resetInterestSync];
  }
  id v39 = [v3 + 442 sharedInstance];
  [v39 immediatelyDeleteAllHiddenPodcasts];
}

void sub_1000FCD94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FCDAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
  }
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  if ([(id)objc_opt_class() isUserLoggedIn])
  {
    unsigned int v4 = +[MTPushNotificationController sharedInstance];
    [v4 registerPushNotifications];
  }
  if ([*(id *)(a1 + 32) isSyncing])
  {
    uint64_t v5 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Syncing content for new account when current sync finishes", buf, 2u);
    }

    [*(id *)(a1 + 32) setResyncWhenDone:1];
  }
  else if ([*(id *)(a1 + 32) isUserLoggedIn])
  {
    uint64_t v6 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Syncing Content for New Account", v8, 2u);
    }

    id v7 = +[MTSyncController sharedInstance];
    [v7 syncEverything];
  }
  objc_sync_exit(v3);
}

void sub_1000FCF08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FD364(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FD4E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FD5FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FE024(id a1, MTBaseQueryObserver *a2, unint64_t a3, BOOL *a4)
{
}

void sub_1000FE1E8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000FE204(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    [WeakRetained removeEpisodeObserverForPodcasts:*(void *)(a1 + 32)];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v4 = *(id *)(a1 + 40);
    id v5 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v19;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v4);
          }
          [WeakRetained updateEpisodeObserverForPodcast:*(void *)(*((void *)&v18 + 1) + 8 * (void)v8)];
          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v6);
    }

    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v9 = *(id *)(a1 + 48);
    id v10 = [v9 countByEnumeratingWithState:&v14 objects:v22 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v9);
          }
          [WeakRetained addEpisodeObserverForPodcast:*(void *)(*((void *)&v14 + 1) + 8 * (void)v13) v14];
          uint64_t v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v14 objects:v22 count:16];
      }
      while (v11);
    }
  }
}

void sub_1000FE4DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FE660(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FE8D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FEA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1000FEA98(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1000FEBE0;
  void v10[3] = &unk_1005516B0;
  objc_copyWeak(&v14, a1 + 6);
  objc_copyWeak(&v15, a1 + 5);
  id v11 = a1[4];
  id v8 = v5;
  id v12 = v8;
  id v9 = v6;
  id v13 = v9;
  [WeakRetained enqueueWorkBlock:v10];

  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);
}

void sub_1000FEBC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000FEBE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v2 = objc_loadWeakRetained((id *)(a1 + 64));
  [v2 episodeUuidObserver:WeakRetained resultsChangedForPodcast:*(void *)(a1 + 32) withDeletedIds:*(void *)(a1 + 40) andInsertIds:*(void *)(a1 + 48)];
}

void sub_1000FED70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FEE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FEE84(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 valueForKey:kPodcastUuid];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return _objc_release_x1(v3, v5);
}

void sub_1000FF010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FF038(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v4 = [a3 uuids];
  [v3 unionSet:v4];
}

void sub_1000FF560(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 managedObjectContext];
  [v4 deleteObject:v3];
}

void sub_1000FF5C0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 managedObjectContext];
  id v6 = +[MTPodcastPlaylistSettings insertNewSettingsInManagedObjectContext:v5];

  [v6 setPodcast:v4];
  [v6 setPlaylist:*(void *)(a1 + 32)];
  [v6 setEpisodesToShow:[*(id *)(a1 + 40) episodesToShow]];
  [v6 setMediaType:[*(id *)(a1 + 40) mediaType]];
  [v6 setShowPlayedEpisodes:[*(id *)(a1 + 40) showPlayedEpisodes]];
  [v6 setTracksDefault:1];
  [v6 setEpisodesToShow:6];
}

void sub_1000FFF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FFFA8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  uint64_t v7 = [v9 podcast];
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    *a4 = 1;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
}

void sub_10010012C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableOrderedSetValueForKey:kPlaylistEpisodes];
  id v3 = objc_opt_new();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v10 = [v9 podcast];
        id v11 = *(void **)(a1 + 40);

        if (v10 == v11) {
          [v3 addObject:v9];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v6);
  }

  if ([v3 count])
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v12 = v3;
    id v13 = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v19;
      do
      {
        for (j = 0; j != v14; j = (char *)j + 1)
        {
          if (*(void *)v19 != v15) {
            objc_enumerationMutation(v12);
          }
          long long v17 = *(void **)(*((void *)&v18 + 1) + 8 * (void)j);
          [v17 removePlaylistsObject:*(void *)(a1 + 32)];
          [*(id *)(a1 + 32) addDeletedEpisodesObject:v17];
          [v4 removeObject:v17];
        }
        id v14 = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
      }
      while (v14);
    }

    [*(id *)(a1 + 32) recalculateEpisodeCounts];
  }
  [*(id *)(a1 + 32) setNeedsUpdate:1 v18];
  if (*(unsigned char *)(a1 + 56)) {
    [*(id *)(a1 + 48) saveInCurrentBlock];
  }
}

id sub_1001004E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) saveInCurrentBlock];
}

void sub_1001005E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mutableOrderedSetValueForKey:kPlaylistEpisodes];
  [v2 removeObject:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) recalculateEpisodeCounts];
  [*(id *)(a1 + 40) removePlaylistsObject:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) addDeletedEpisodesObject:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setNeedsUpdate:1];
  if (!*(unsigned char *)(a1 + 56)) {
    [*(id *)(a1 + 48) saveInCurrentBlock];
  }
}

void sub_1001008D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001008EC(uint64_t a1)
{
  +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", @"%K = %lld", kPlaylistParentMediaLibraryId, [*(id *)(a1 + 32) mediaLibraryId]);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = kMTPlaylistEntityName;
  id v4 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", kPlaylistMediaLibraryId, 0);
  id v5 = [v2 objectDictionariesInEntity:v3 predicate:v6 sortDescriptors:0 propertiesToFetch:v4 includeObjectId:1];

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 count];
}

void sub_100100ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100100AD4(uint64_t a1)
{
  uint64_t v2 = kPlaylistMediaLibraryId;
  +[NSPredicate predicateWithFormat:@"%K != 0 AND %K = 0", kPlaylistMediaLibraryId, kPlaylistParentMediaLibraryId];
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = kMTPlaylistEntityName;
  id v5 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v2, 0);
  id v6 = [v3 objectDictionariesInEntity:v4 predicate:v7 sortDescriptors:0 propertiesToFetch:v5 includeObjectId:1];

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v6 count];
}

void sub_100101F4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100101FF4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  if ([*(id *)(a1 + 32) subscriptionState] == 4)
  {
    uint64_t v3 = +[UIApplication sharedApplication];
    [v3 unregisterForRemoteNotifications];

    [*(id *)(a1 + 32) setSubscriptionState:0];
    uint64_t v4 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = 0;
      id v5 = "Unregistered from APNS.";
      id v6 = (uint8_t *)&v9;
      id v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v5, v6, 2u);
    }
  }
  else
  {
    uint64_t v4 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      id v5 = "Failed to complete APNS unregistration: Reason: interrupted.";
      id v6 = buf;
      id v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_ERROR;
      goto LABEL_6;
    }
  }

  objc_sync_exit(v2);
}

void sub_1001020F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001023A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100102498(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001024AC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  __int16 v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = WeakRetained;
    objc_sync_enter(v10);
    id v11 = objc_loadWeakRetained((id *)(a1 + 40));
    unsigned int v12 = [v11 subscriptionState];

    objc_sync_exit(v10);
    if (v12 == 1)
    {
      id v13 = _MTLogCategoryCloudSync();
      id v14 = v13;
      if (v6)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = [*(id *)(a1 + 32) base64EncodedStringWithOptions:0];
          int v16 = 138412290;
          long long v17 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Starting APNS registration transaction for token = \"%@\"", (uint8_t *)&v16, 0xCu);
        }
        id v14 = objc_loadWeakRetained((id *)(a1 + 40));
        [v14 executeAction:kPodcastsPushNotificationRegisterValue using:v6 andToken:*(void *)(a1 + 32)];
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to complete APNS registration. Reason: Failed to load valid subscription URL from bag.", (uint8_t *)&v16, 2u);
      }
    }
  }
}

void sub_100102658(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100102760(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100102DA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100102FE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100103914(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateUI];
}

id sub_1001042CC(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 valueForKey:@"uuid"];
  uint64_t v4 = +[NSMutableSet setWithArray:v3];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 8);
  *(void *)(v5 + 8) = v4;

  uint64_t v7 = objc_opt_new();
  uint64_t v8 = *(void *)(a1 + 32);
  __int16 v9 = *(void **)(v8 + 16);
  *(void *)(v8 + 16) = v7;

  uint64_t v10 = objc_opt_new();
  uint64_t v11 = *(void *)(a1 + 32);
  unsigned int v12 = *(void **)(v11 + 24);
  *(void *)(v11 + 24) = v10;

  id v13 = *(void **)(a1 + 32);

  return [v13 notifyObservers];
}

void sub_100104560(void *a1, int a2, id a3)
{
  id v4 = objc_retainBlock(a3);
  (*((void (**)(id, void, void, void))v4 + 2))(v4, a1[4], a1[5], a1[6]);
}

id sub_1001049EC(void *a1)
{
  CFDataRef v1 = [a1 MZDataByInflatingWithGZip];
  id v2 = (void *)CFPropertyListCreateWithData(0, v1, 0, 0, 0);
  if (!v2)
  {
    v7[0] = objc_opt_class();
    v7[1] = objc_opt_class();
    void v7[2] = objc_opt_class();
    v7[3] = objc_opt_class();
    void v7[4] = objc_opt_class();
    void v7[5] = objc_opt_class();
    v7[6] = objc_opt_class();
    uint64_t v3 = +[NSArray arrayWithObjects:v7 count:7];
    id v4 = +[NSSet setWithArray:v3];

    uint64_t v6 = 0;
    id v2 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v4 fromData:v1 error:&v6];
  }

  return v2;
}

id sub_100104B70(void *a1)
{
  id v1 = a1;
  id v2 = objc_opt_new();
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          sub_100104D30(v8);
          id v9 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            sub_100104B70(v8);
            id v9 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              sub_1001049EC(v8);
              id v9 = (id)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              id v9 = v8;
            }
          }
        }
        uint64_t v10 = v9;
        [v2 addObject:v9];
      }
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  return v2;
}

id sub_100104D30(void *a1)
{
  id v1 = a1;
  id v2 = objc_opt_new();
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  [v1 allKeys];
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        id v9 = [v1 objectForKeyedSubscript:v8];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v10 = sub_100104D30(v9);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v10 = sub_100104B70(v9);
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_13;
            }
            uint64_t v10 = sub_1001049EC(v9);
          }
        }
        uint64_t v11 = (void *)v10;

        id v9 = v11;
LABEL_13:
        [v2 setObject:v9 forKeyedSubscript:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }

  return v2;
}

void sub_1001051F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001052A4(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 32))
  {
    id v2 = _MTLogCategoryDatabase();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MTPodcastDerivedPropertyObserver did pause processing.", v3, 2u);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 32) = 1;
  }
}

void *sub_1001053C0(void *result)
{
  if (*(unsigned char *)(result[4] + 32))
  {
    id v1 = result;
    id v2 = _MTLogCategoryDatabase();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MTPodcastDerivedPropertyObserver did resume processing.", v3, 2u);
    }

    *(unsigned char *)(v1[4] + 32) = 0;
    return [(id)v1[4] processLatestPersistentHistoryTransactions];
  }
  return result;
}

void sub_100105710(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v11 = 0;
  id v3 = [v2 executeRequest:v1 error:&v11];
  id v4 = v11;
  id v5 = _MTLogCategoryDatabase();
  uint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v4;
      uint64_t v7 = "Derived Property Observer encountered error deleting history %@";
      uint64_t v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
      uint32_t v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, buf, v10);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v13) = 14;
    uint64_t v7 = "Derived Property Observer deleted persistent history older than %d days ago";
    uint64_t v8 = v6;
    os_log_type_t v9 = OS_LOG_TYPE_INFO;
    uint32_t v10 = 8;
    goto LABEL_6;
  }
}

id sub_100105954(uint64_t a1)
{
  return _[*(id *)(a1 + 32) beginBackgroundTask:@"com.apple.podcasts.MTPodcastDerivedPropertyObserver.updateDerivedProperties"];
}

void sub_100105964(id *a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = a1[4];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        [a1[5] episodeResultsChangedForPodcastUuid:*(void *)(*((void *)&v10 + 1) + 8 * (void)v6)];
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  dispatch_time_t v7 = dispatch_time(0, 5000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100105ADC;
  block[3] = &unk_10054D570;
  id v9 = a1[6];
  dispatch_after(v7, (dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_100105ADC(uint64_t a1)
{
  return [*(id *)(a1 + 32) endBackgroundTask];
}

void sub_1001061FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPodcastEntityName;
  id v4 = +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts];
  uint64_t v5 = kPodcastUuid;
  uint64_t v49 = kPodcastUuid;
  uint64_t v6 = +[NSArray arrayWithObjects:&v49 count:1];
  dispatch_time_t v7 = [v2 objectsInEntity:v3 predicate:v4 propertiesToFetch:v6 batchSize:0];

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v41;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v41 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        long long v14 = [v13 uuid];

        if (v14)
        {
          long long v15 = *(void **)(a1 + 40);
          long long v16 = [v13 uuid];
          [v15 addObject:v16];
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v40 objects:v48 count:16];
    }
    while (v10);
  }

  long long v17 = *(void **)(a1 + 32);
  long long v18 = +[MTPodcast predicateForHiddenOrImplicitlyFollowedPodcasts];
  uint64_t v47 = v5;
  long long v19 = +[NSArray arrayWithObjects:&v47 count:1];
  long long v20 = [v17 objectsInEntity:v3 predicate:v18 propertiesToFetch:v19 batchSize:0];

  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v21 = v20;
  id v22 = [v21 countByEnumeratingWithState:&v36 objects:v46 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v37;
    do
    {
      for (j = 0; j != v23; j = (char *)j + 1)
      {
        if (*(void *)v37 != v24) {
          objc_enumerationMutation(v21);
        }
        uint64_t v26 = *(void **)(*((void *)&v36 + 1) + 8 * (void)j);
        uint64_t v27 = [v26 uuid];

        if (v27)
        {
          uint64_t v28 = *(void **)(a1 + 48);
          CFStringRef v29 = [v26 uuid];
          [v28 addObject:v29];
        }
      }
      id v23 = [v21 countByEnumeratingWithState:&v36 objects:v46 count:16];
    }
    while (v23);
  }

  __int16 v30 = [*(id *)(a1 + 32) persistentStoreCoordinator];
  uint64_t v31 = [v30 currentPersistentHistoryTokenFromStores:0];
  uint64_t v32 = *(void *)(*(void *)(a1 + 56) + 8);
  id v33 = *(void **)(v32 + 40);
  *(void *)(v32 + 40) = v31;

  id v34 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v45 = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Derived Property Observer fetched latest token %@", buf, 0xCu);
  }
}

void sub_10010655C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v10;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v10 != v5) {
            objc_enumerationMutation(v3);
          }
          uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8 * (void)v6);
          id v8 = WeakRetained[5];
          objc_sync_enter(v8);
          [WeakRetained[5] removeObjectForKey:v7];
          objc_sync_exit(v8);

          [WeakRetained notifyObserversForPodcast:v7];
          uint64_t v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v4);
    }
  }
}

void sub_100106698(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001066B4(uint64_t a1)
{
  id v2 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Derived Property Observer will update stats for podcasts", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained reportStatsForPodcasts];
}

void sub_100106734(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _setLastProcessedPersistentHistoryToken:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_100106B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_100106BC8(uint64_t a1)
{
  id v2 = +[MTEpisode predicateForIsFromiTunesSync:1];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) countOfObjectsInEntity:kMTEpisodeEntityName predicate:v2];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = kMTPodcastEntityName;
  uint64_t v5 = +[MTPodcast predicateForNotHiddenNotImplicitlyFollowedPodcasts];
  uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 88) allObjects];
  uint64_t v7 = [v3 objectsInEntity:v4 predicate:v5 propertiesToFetch:v6 batchSize:0];

  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v7 count];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v13, "subscribed", (void)v14)) {
          ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        }
        if ([v13 isAuthenticatedDark]) {
          ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
        }
        if ([v13 isPastAutodownloadOrEpisodeLimitDark]) {
          ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
        }
        if ([v13 notifications]) {
          ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v10);
  }
}

void sub_100106FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100107020(uint64_t a1)
{
  kdebug_trace();
  id v19 = +[MTEpisode predicateForUserEpisodesOnPodcastUuid:*(void *)(a1 + 32) ctx:*(void *)(a1 + 40)];
  id v2 = +[MTEpisode predicateForEpisodesOnUnplayedTabOnPodcastUuid:*(void *)(a1 + 32) ctx:*(void *)(a1 + 40)];
  kdebug_trace();
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = kMTEpisodeEntityName;
  uint64_t v5 = +[MTEpisode predicateForIsNew:1];
  uint64_t v6 = +[MTEpisode predicateForAllEpisodesOnPodcastUuid:*(void *)(a1 + 32)];
  uint64_t v7 = [v5 AND:v6];
  uint64_t v8 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 countOfObjectsInEntity:v4 predicate:v7]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = *(void **)(a1 + 40);
  long long v12 = +[MTEpisode predicateForPlayed:0];
  long long v13 = [v2 AND:v12];
  long long v14 = +[MTEpisode predicateForAllEpisodesOnPodcastUuid:*(void *)(a1 + 32)];
  long long v15 = [v13 AND:v14];
  uint64_t v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v11 countOfObjectsInEntity:v4 predicate:v15]);
  uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8);
  long long v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  [*(id *)(a1 + 48) updateFlagsForPodcastUuid:*(void *)(a1 + 32) predicateForUnplayedTab:v2 predicateForUserEpisodes:v19];
}

void sub_1001077F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 168));
  _Unwind_Resume(a1);
}

void sub_10010782C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  kdebug_trace();
  uint64_t v35 = kMTEpisodeEntityName;
  id v2 = [*(id *)(a1 + 32) objectsInEntity:*[a1 + 32] predicate:*[a1 + 32] propertiesToFetch:*[a1 + 32] batchSize:*[a1 + 32]];
  kdebug_trace();
  kdebug_trace();
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id obj = v2;
  id v3 = (char *)[obj countByEnumeratingWithState:&v43 objects:v56 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = 0;
    char v6 = 0;
    uint64_t v7 = *(void *)v44;
    do
    {
      uint64_t v8 = 0;
      id v36 = v5;
      uint64_t v9 = v5 + 1;
      do
      {
        if (*(void *)v44 != v7) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v43 + 1) + 8 * (void)v8);
        id v12 = [*(id *)(a1 + 48) evaluateWithObject:v10];
        if (v12 != [v10 unplayedTab]
          && ([*(id *)(a1 + 56) _shouldSkipSettingPropertiesForWatchPPT] & 1) == 0)
        {
          [v10 setUnplayedTab:v12];
          char v6 = 1;
        }
        id v13 = [*(id *)(a1 + 64) evaluateWithObject:v10];
        if (v13 != [v10 userEpisode]
          && ([*(id *)(a1 + 56) _shouldSkipSettingPropertiesForWatchPPT] & 1) == 0)
        {
          [v10 setUserEpisode:v13];
          char v6 = 1;
        }
        if ((([v10 isNew] ^ 1 | v13) & 1) == 0
          && ([*(id *)(a1 + 56) _shouldSkipSettingPropertiesForWatchPPT] & 1) == 0)
        {
          [v10 setIsNew:0];
          char v6 = 1;
        }
        if (!((unint64_t)v9 % 0xC8) && (v6 & 1) != 0)
        {
          [*(id *)(a1 + 32) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
          [*(id *)(a1 + 32) saveInCurrentBlock];
          [*(id *)(a1 + 32) setTransactionAuthor:0];
          char v6 = 0;
        }
        ++v8;
        ++v9;
      }
      while (v4 != v8);
      uint64_t v5 = &v4[(void)v36];
      uint64_t v4 = (char *)[obj countByEnumeratingWithState:&v43 objects:v56 count:16];
    }
    while (v4);
  }

  [*(id *)(a1 + 32) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
  [*(id *)(a1 + 32) saveInCurrentBlock];
  [*(id *)(a1 + 32) setTransactionAuthor:0];
  kdebug_trace();
  kdebug_trace();
  long long v14 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 72)];
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v32 = v14;
  uint64_t v16 = [v14 channel];
  uint64_t v17 = +[MTEpisode predicateForEpisodesWhichNeedEntitlementStateUpdateForShowUUID:subscriptionState:](MTEpisode, "predicateForEpisodesWhichNeedEntitlementStateUpdateForShowUUID:subscriptionState:", v15, [v16 subscriptionActive]);

  uint64_t v31 = (void *)v17;
  long long v18 = [*(id *)(a1 + 32) objectsInEntity:v35 predicate:v17 propertiesToFetch:0 batchSize:200];
  [*(id *)(a1 + 32) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v37 = v18;
  id v19 = (char *)[v37 countByEnumeratingWithState:&v39 objects:v55 count:16];
  if (v19)
  {
    long long v20 = v19;
    id v21 = 0;
    uint64_t v22 = *(void *)v40;
    do
    {
      uint64_t v23 = 0;
      id v34 = v21;
      uint64_t v24 = v21 + 1;
      do
      {
        if (*(void *)v40 != v22) {
          objc_enumerationMutation(v37);
        }
        long long v25 = *(void **)(*((void *)&v39 + 1) + 8 * v23);
        id v26 = [v25 entitlementState];
        [v25 updateEntitlementState];
        uint64_t v27 = _MTLogCategoryFeedUpdate();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = [v25 uuid];
          CFStringRef v29 = [v25 title];
          id v30 = [v25 entitlementState];
          *(_DWORD *)buf = 138544130;
          long long v48 = v28;
          __int16 v49 = 2112;
          long long v50 = v29;
          __int16 v51 = 2048;
          id v52 = v26;
          __int16 v53 = 2048;
          id v54 = v30;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}@ - %@ updated entitlement state for episode from %lld to %lld from updateFlagForEpisodes", buf, 0x2Au);
        }
        if (__ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * (void)&v24[v23], 3) <= 0x147AE147AE147AEuLL) {
          [*(id *)(a1 + 32) saveInCurrentBlock];
        }
        ++v23;
      }
      while (v20 != (char *)v23);
      id v21 = &v20[(void)v34];
      long long v20 = (char *)[v37 countByEnumeratingWithState:&v39 objects:v55 count:16];
    }
    while (v20);
  }

  [*(id *)(a1 + 32) saveInCurrentBlock];
  [*(id *)(a1 + 32) setTransactionAuthor:0];
  kdebug_trace();
}

uint64_t sub_100107DD0(uint64_t a1)
{
  kdebug_trace();
  +[MTRecencyUtil unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:*(void *)(a1 + 32) upNextResult:*(void *)(a1 + 40) ctx:*(void *)(a1 + 48)];
  if (os_feature_enabled_serial_sort_auto_downloads()) {
    [*(id *)(*(void *)(a1 + 56) + 104) unsafeUpdateEpisodeShowTypeSpecificLevelsWithShowUUID:*(void *)(a1 + 32) on:*(void *)(a1 + 48)];
  }
  [*(id *)(a1 + 48) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
  [*(id *)(a1 + 48) saveInCurrentBlock];
  [*(id *)(a1 + 48) setTransactionAuthor:0];

  return kdebug_trace();
}

void sub_100107E88(uint64_t a1)
{
  id v19 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  long long v18 = +[MTEpisode predicateForLibraryEpisodesOnPodcastUuid:*(void *)(a1 + 40)];
  uint64_t v2 = kMTEpisodeEntityName;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = +[MTEpisode predicateForBookmarkedEpisodesOnPodcastUuid:*(void *)(a1 + 40)];
  id v5 = [v3 countOfObjectsInEntity:v2 predicate:v4];

  char v6 = *(void **)(a1 + 32);
  uint64_t v7 = +[MTEpisode predicateForDownloadedEpisodesOnPodcastUuid:*(void *)(a1 + 40)];
  id v8 = [v6 countOfObjectsInEntity:v2 predicate:v7];

  id v9 = [*(id *)(a1 + 32) countOfObjectsInEntity:v2 predicate:v18];
  id v10 = +[MTEpisode predicateForBookmarkedEpisodesOnPodcastUuid:*(void *)(a1 + 40)];
  uint64_t v11 = +[MTEpisode predicateForVisuallyPlayed:0];
  id v12 = [v10 AND:v11];

  id v13 = [*(id *)(a1 + 32) countOfObjectsInEntity:v2 predicate:v12];
  long long v14 = +[MTEpisode predicateForDownloadedEpisodesOnPodcastUuid:*(void *)(a1 + 40)];
  uint64_t v15 = +[MTEpisode predicateForVisuallyPlayed:0];
  uint64_t v16 = [v14 AND:v15];

  id v17 = [*(id *)(a1 + 32) countOfObjectsInEntity:v2 predicate:v16];
  [v19 setSavedEpisodesCount:v5];
  [v19 setDownloadedEpisodesCount:v8];
  [v19 setLibraryEpisodesCount:v9];
  [v19 setSavedUnplayedEpisodesCount:v13];
  [v19 setDownloadedUnplayedEpisodesCount:v17];
  [v19 calculateNewEpisodeCountIn:*(void *)(a1 + 32) serialShowsUseExperimentalRules:os_feature_enabled_experimental_serial_episode_count()];
  [*(id *)(a1 + 32) setTransactionAuthor:@"MTPodcastDerivedPropertyObserver"];
  [*(id *)(a1 + 32) saveInCurrentBlock];
  [*(id *)(a1 + 32) setTransactionAuthor:0];
}

void sub_100108408(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001084C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001085C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001087E4(uint64_t a1, int a2, id a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001088AC;
  block[3] = &unk_10054D658;
  id v8 = objc_retainBlock(a3);
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_1001088AC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100108920(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100108B6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100108BF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100109228(uint64_t a1)
{
  return [*(id *)(a1 + 32) updatePlaylistsWithUuids:*(void *)(a1 + 40)];
}

int64_t sub_10010924C(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  id v4 = a3;
  [(MTPodcastPlaylistSettings *)a2 latestEpisodeDate];
  double v6 = v5;
  [(MTPodcastPlaylistSettings *)v4 latestEpisodeDate];
  double v8 = v7;

  if (v6 > v8) {
    return -1;
  }
  else {
    return v6 < v8;
  }
}

int64_t sub_1001092A4(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  id v4 = a3;
  [(MTPodcastPlaylistSettings *)a2 oldestEpisodeDate];
  double v6 = v5;
  [(MTPodcastPlaylistSettings *)v4 oldestEpisodeDate];
  double v8 = v7;

  if (v6 >= v8) {
    int64_t v9 = 0;
  }
  else {
    int64_t v9 = -1;
  }
  if (v6 > v8) {
    return 1;
  }
  else {
    return v9;
  }
}

int64_t sub_1001092FC(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  id v4 = a3;
  double v5 = [(MTPodcastPlaylistSettings *)a2 podcast];
  double v6 = [v5 title];
  double v7 = [(MTPodcastPlaylistSettings *)v4 podcast];

  double v8 = [v7 title];
  id v9 = [v6 caseInsensitiveCompare:v8];

  return (int64_t)v9;
}

int64_t sub_100109398(id a1, MTPodcastPlaylistSettings *a2, MTPodcastPlaylistSettings *a3)
{
  id v4 = a2;
  double v5 = [(MTPodcastPlaylistSettings *)a3 podcast];
  double v6 = [v5 title];
  double v7 = [(MTPodcastPlaylistSettings *)v4 podcast];

  double v8 = [v7 title];
  id v9 = [v6 caseInsensitiveCompare:v8];

  return (int64_t)v9;
}

int64_t sub_10010956C(id a1, MTEpisode *a2, MTEpisode *a3)
{
  id v4 = a2;
  double v5 = a3;
  double v6 = [(MTEpisode *)v4 podcast];
  id v7 = [v6 sortOrder];
  double v8 = [(MTEpisode *)v5 podcast];
  id v9 = [v8 sortOrder];

  if ((uint64_t)v7 <= (uint64_t)v9)
  {
    uint64_t v11 = [(MTEpisode *)v4 podcast];
    id v12 = [v11 sortOrder];
    id v13 = [(MTEpisode *)v5 podcast];
    int64_t v10 = (uint64_t)v12 < (uint64_t)[v13 sortOrder];
  }
  else
  {
    int64_t v10 = -1;
  }

  return v10;
}

int64_t sub_10010963C(id a1, MTEpisode *a2, MTEpisode *a3)
{
  id v4 = a2;
  double v5 = a3;
  [(MTEpisode *)v4 pubDate];
  double v7 = v6;
  [(MTEpisode *)v5 pubDate];
  if (v7 <= v8)
  {
    [(MTEpisode *)v4 pubDate];
    double v11 = v10;
    [(MTEpisode *)v5 pubDate];
    int64_t v9 = v11 < v12;
  }
  else
  {
    int64_t v9 = -1;
  }

  return v9;
}

int64_t sub_1001096C8(id a1, MTEpisode *a2, MTEpisode *a3)
{
  id v4 = a2;
  double v5 = a3;
  [(MTEpisode *)v4 pubDate];
  double v7 = v6;
  [(MTEpisode *)v5 pubDate];
  if (v7 <= v8)
  {
    [(MTEpisode *)v4 pubDate];
    double v11 = v10;
    [(MTEpisode *)v5 pubDate];
    if (v11 >= v12) {
      int64_t v9 = 0;
    }
    else {
      int64_t v9 = -1;
    }
  }
  else
  {
    int64_t v9 = 1;
  }

  return v9;
}

int64_t sub_100109754(id a1, MTEpisode *a2, MTEpisode *a3)
{
  id v4 = a2;
  double v5 = a3;
  double v6 = [(MTEpisode *)v4 podcast];
  double v7 = [v6 title];
  double v8 = [(MTEpisode *)v5 podcast];
  int64_t v9 = [v8 title];
  id v10 = [v7 caseInsensitiveCompare:v9];

  if (!v10)
  {
    double v11 = [(MTEpisode *)v4 title];
    double v12 = [(MTEpisode *)v5 title];
    id v10 = [v11 caseInsensitiveCompare:v12];
  }
  return (int64_t)v10;
}

void sub_100109A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100109A84(id a1, MTPlaylist *a2)
{
  return [(MTPlaylist *)a2 uuid];
}

void sub_100109A8C(uint64_t a1)
{
  id v2 = +[MTUpcomingMediaController sharedInstance];
  [v2 setSuggestedStationUuids:*(void *)(a1 + 32)];
}

void sub_100109B90(uint64_t a1)
{
  uint64_t v2 = kPlaylistITunesPlaylistUuid;
  id v5 = [*(id *)(a1 + 32) playlistForUuid:kPlaylistITunesPlaylistUuid];
  id v3 = +[NSBundle mainBundle];
  id v4 = [v3 localizedStringForKey:@"iTunes Playlists" value:&stru_10056A8A0 table:0];

  if (!v5)
  {
    id v5 = +[MTPlaylist insertNewPlaylistInManagedObjectContext:*(void *)(a1 + 32)];
    [v5 setTitle:v4];
    [v5 setMediaLibraryId:0];
    [v5 setIsFolder:1];
    [v5 setIsBuiltIn:1];
    [v5 setSortOrder:1023];
    [v5 setUuid:v2];
    [v5 setHidden:1];
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_100109E00(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) downloadedQueryObserver];

  if (!v2)
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    id v3 = +[MTEpisode predicateForDownloaded:1 excludeHidden:0];
    id v4 = +[MTEpisode sortDescriptorsForPubDateAscending:0];
    id v5 = objc_alloc((Class)MTPropertyChangeQueryObserver);
    id v6 = [v5 initWithEntityName:kMTEpisodeEntityName predicate:v3 sortDescriptors:v4];
    [*(id *)(a1 + 32) setDownloadedQueryObserver:v6];

    v18[0] = kEpisodeAssetURL;
    v18[1] = kEpisodeByteSize;
    void v18[2] = kEpisodeDuration;
    double v7 = +[NSArray arrayWithObjects:v18 count:3];
    double v8 = [*(id *)(a1 + 32) downloadedQueryObserver];
    [v8 setPropertyKeys:v7];

    int64_t v9 = [*(id *)(a1 + 32) downloadedQueryObserver];
    double v12 = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472;
    long long v14 = sub_10010A044;
    uint64_t v15 = &unk_100551A40;
    objc_copyWeak(&v16, &location);
    id v10 = [v9 addResultsChangedHandler:&v12];

    double v11 = [*(id *)(a1 + 32) downloadedQueryObserver:v12, v13, v14, v15];
    [v11 startObserving];

    objc_destroyWeak(&v16);
    objc_destroyWeak(&location);
  }
}

void sub_10010A004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010A044(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained updatePodcastSizeEstimation];
    id WeakRetained = v2;
  }
}

id sub_10010A104(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) downloadedQueryObserver];
  [v2 stop];

  id v3 = *(void **)(a1 + 32);

  return [v3 setDownloadedQueryObserver:0];
}

void sub_10010A1D0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) updatePodcastSizeEstimationWorkController];

  if (!v2)
  {
    id v3 = objc_alloc((Class)MTCoalescableWorkController);
    id v4 = [*(id *)(a1 + 32) workQueue];
    id v5 = [v3 initWithWorkQueue:v4 identifier:@"MTNMSDefaultsUpdater.updatePodcastSizeEstimation"];
    [*(id *)(a1 + 32) setUpdatePodcastSizeEstimationWorkController:v5];
  }
  id v6 = [*(id *)(a1 + 32) existingDownloadedEpisodes];

  double v7 = *(void **)(a1 + 32);
  if (v6)
  {
    double v8 = [v7 updatePodcastSizeEstimationWorkController];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10010A308;
    uint64_t v9[3] = &unk_10054D570;
    void v9[4] = *(void *)(a1 + 32);
    [v8 schedule:v9];
  }
  else
  {
    _[v7 _onWorkQueueUpdatePodcastSizeEstimation];
  }
}

id sub_10010A308(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onWorkQueueUpdatePodcastSizeEstimation];
}

void sub_10010A3AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) existingDownloadedEpisodes];

  if (!v4)
  {
    +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v3 count]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10010A5C0;
    v14[3] = &unk_10054FE30;
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    id v5 = v15;
    [v3 enumerateObjectsUsingBlock:v14];
    [*(id *)(a1 + 32) setExistingDownloadedEpisodes:v5];
  }
  id v6 = objc_alloc_init((Class)NMSPodcastSizeEstimation);
  id v7 = [v3 copy];
  if (([v6 isEmpty] & 1) == 0)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_10010A6B4;
    void v13[3] = &unk_100551A68;
    void v13[4] = *(void *)(a1 + 32);
    double v8 = +[NSPredicate predicateWithBlock:v13];
    uint64_t v9 = [v7 filteredArrayUsingPredicate:v8];

    id v7 = (id)v9;
  }
  if ([v7 count])
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_10010A724;
    v11[3] = &unk_10054FE30;
    id v10 = v6;
    id v12 = v10;
    [v7 enumerateObjectsUsingBlock:v11];
    [v10 synchronize];
  }
}

void sub_10010A5C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 uuid];

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = [v3 uuid];
    [v5 addObject:v6];
  }
  else
  {
    id v7 = _MTLogCategoryDefault();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Encountered episode with nil uuid when updating size estimation: %@", (uint8_t *)&v8, 0xCu);
    }
  }
}

uint64_t sub_10010A6B4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 existingDownloadedEpisodes];
  id v5 = [v3 uuid];

  uint64_t v6 = [v4 containsObject:v5] ^ 1;
  return v6;
}

void sub_10010A724(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 byteSize];
  [v3 duration];
  double v6 = v5;
  id v8 = [v3 podcast];

  id v7 = [v8 feedURL];
  [v2 incrementSize:v4 duration:v7 forFeedURL:v6];
}

id sub_10010A9C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) stop];
}

void sub_10010AA68(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) listenNowQueryObserver];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10010AB08;
  void v3[3] = &unk_100551AB8;
  id v4 = *(id *)(a1 + 40);
  [v2 results:v3];
}

uint64_t sub_10010AB08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10010AB18(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _endBackgroundTask:1];
}

void sub_10010B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10010BA1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = [v2 feedURL];
    uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8);
    double v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    if (*(unsigned char *)(a1 + 96))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      id v7 = *(void **)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      id v10 = [*(id *)(a1 + 64) absoluteString];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v7 updatePodcastWithUuid:v8 withFeed:v9 originalFeedUrl:v10 source:*(void *)(a1 + 88)];

      double v11 = _MTLogCategoryFeedUpdate();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = [*(id *)(a1 + 56) resolvedFeedURL];
        uint64_t v13 = [*(id *)(a1 + 64) absoluteString];
        int v14 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
        int v19 = 138413058;
        long long v20 = v12;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        __int16 v23 = 1024;
        int v24 = v14;
        __int16 v25 = 2048;
        id v26 = [v3 storeCollectionId];
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Feed URL %@, requestURL %@, updatedFeedURL %d, for show adam ID %lld", (uint8_t *)&v19, 0x26u);
      }
    }
    id v15 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];

    +[NSDate timeIntervalSinceReferenceDate];
    [v15 setUpdatedDate:];
    [v15 setImporting:0];
    [v15 setAuthenticatedDark:0];
    [v15 setFeedUpdateNeedsRetry:0];
    [v15 setConsecutiveFeedFetchErrors:0];
    if (+[MTStoreIdentifier isEmpty:](MTStoreIdentifier, "isEmpty:", [v15 storeCollectionId]))
    {
      uint64_t v16 = +[MTStoreInfoUpdater sharedInstance];
      id v17 = [v15 uuid];
      [v16 updateStoreInfoForPodcast:v17];
    }
    long long v18 = +[PUIFeedManagerArtworkBridge shared];
    [v18 updateArtworkForShow:v15 useBackgroundFetch:*(unsigned __int8 *)(a1 + 97) fetchUberImage:1];
  }
}

id sub_10010E598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _compareServerEpisode:a2 toServerEpisode:a3];
}

void sub_10010EF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010EF90(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = *(void **)(a1 + 56);
    id v10 = v2;
    uint64_t v4 = [v2 redirectURL];
    uint64_t v5 = [v4 absoluteString];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 isUpdatingFeedUrl:v5];

    id v2 = v10;
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      double v6 = *(void **)(a1 + 56);
      id v7 = [v10 updatedFeedURL];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 isUpdatingFeedUrl:v7];

      id v2 = v10;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
      {
        uint64_t v8 = *(void **)(a1 + 56);
        uint64_t v9 = [v10 feedURL];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v8 isUpdatingFeedUrl:v9];

        id v2 = v10;
      }
    }
  }
}

void sub_10010F124(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10010F184(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10010F2DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10010F2F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v3 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    if (!v3)
    {
      double v11 = _MTLogCategoryFeedUpdate();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Data hash could not be created. Returning early.", v26, 2u);
      }

      id v12 = [*(id *)(a1 + 32) absoluteString];
      [WeakRetained _didFinishUpdatingFeedUrl:v12 withError:0];

      goto LABEL_23;
    }
    *(void *)id v26 = 0;
    uint64_t v27 = v26;
    uint64_t v28 = 0x3032000000;
    CFStringRef v29 = sub_10005708C;
    id v30 = sub_100057310;
    id v31 = 0;
    [WeakRetained importContext];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10010F7B4;
    v22[3] = &unk_10054DA00;
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    id v23 = v4;
    id v24 = *(id *)(a1 + 32);
    __int16 v25 = v26;
    [v4 performBlockAndWait:v22];
    id v5 = (id)qword_10060A898;
    objc_sync_enter(v5);
    double v6 = [(id)qword_10060A898 objectForKey:*((void *)v27 + 5)];
    unsigned int v7 = [v3 isEqualToString:v6];

    objc_sync_exit(v5);
    uint64_t v8 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = [*(id *)(a1 + 32) absoluteString];
      *(_DWORD *)buf = 138412546;
      id v33 = v9;
      __int16 v34 = 1024;
      int v35 = v7 ^ 1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "feedHasChangedSinceLastUpdate: %@ %d", buf, 0x12u);
    }
    if (v7)
    {
      id v10 = 0;
    }
    else
    {
      id v10 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    int v14 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [*(id *)(a1 + 32) absoluteString];
      *(_DWORD *)buf = 138412546;
      id v33 = v15;
      __int16 v34 = 1024;
      int v35 = v7 ^ 1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "feedShouldUpdate: %@ %d", buf, 0x12u);
    }
    uint64_t v16 = [WeakRetained preProcessFeedHook:v10 requestUrl:*(void *)(a1 + 32) needsUpdate:v7 ^ 1];
    id v17 = [v16 createdPodcastUUID];
    if (v17 || (id v17 = *((id *)v27 + 5)) != 0)
    {
      if ([v16 shouldContinue])
      {
        [WeakRetained processFeed:v10 podcastUUID:v17 requestUrl:*(void *)(a1 + 32) useBackgroundFetch:*(unsigned __int8 *)(a1 + 72) needsUpdate:v7 ^ 1 source:*(void *)(a1 + 64)];
        int v18 = 0;
        int v19 = 0;
LABEL_20:
        if (((v7 | v18) & 1) == 0)
        {
          id v20 = (id)qword_10060A898;
          objc_sync_enter(v20);
          [(id)qword_10060A898 setObject:v3 forKey:v17];
          [(id)objc_opt_class() saveSubscriptionMetadata];
          objc_sync_exit(v20);
        }
        __int16 v21 = [*(id *)(a1 + 32) absoluteString];
        [WeakRetained _didFinishUpdatingFeedUrl:v21 withError:v19];

        _Block_object_dispose(v26, 8);
LABEL_23:

        goto LABEL_24;
      }
      int v18 = 0;
    }
    else
    {
      int v18 = 1;
    }
    int v19 = +[FeedUpdaterObjcError preProcessHookDeniedUpdate];
    goto LABEL_20;
  }
LABEL_24:
}

void sub_10010F758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010F7B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) absoluteString];
  id v7 = [v2 podcastForFeedUrl:v3];

  uint64_t v4 = [v7 uuid];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  double v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

id sub_10010FAA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) uniquenessHash];
}

id sub_10010FAA8(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  id v3 = [v2 parseWithData:*(void *)(a1 + 32)];
  uint64_t v4 = [v2 parseError];

  if (v4)
  {
    uint64_t v5 = _MTLogCategoryFeedUpdate();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

      id v8 = 0;
      goto LABEL_8;
    }
    double v6 = [v2 parseError];
    int v12 = 138412290;
    uint64_t v13 = v6;
    id v7 = "Feed parse error: %@";
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v12, 0xCu);

    goto LABEL_5;
  }
  uint64_t v9 = [v3 items];
  id v10 = [v9 count];

  if (!v10)
  {
    uint64_t v5 = _MTLogCategoryFeedUpdate();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    double v6 = [v3 title];
    int v12 = 138412290;
    uint64_t v13 = v6;
    id v7 = "Feed has zero items, skipping update to %@";
    goto LABEL_4;
  }
  id v8 = v3;
LABEL_8:

  return v8;
}

void sub_10010FCE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10010FD84(id a1)
{
  id v1 = +[MTReachability sharedInstance];
  [v1 showInternetUnreachableDialog];
}

void sub_100110180(uint64_t a1)
{
  uint64_t v2 = objc_opt_class();
  id v3 = [*(id *)(a1 + 40) absoluteString];
  LODWORD(v2) = [v2 isUpdatingFeedUrl:v3];

  if (v2)
  {
    uint64_t v4 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = [*(id *)(a1 + 40) absoluteString];
      *(_DWORD *)buf = 138412290;
      __int16 v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NOT STARTING feed update, as Feed %@ is ALREADY updating.", buf, 0xCu);
    }
  }
  else
  {
    double v6 = +[MTDB sharedInstance];
    id v7 = [v6 importContext];

    uint64_t v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    id v15 = sub_10011037C;
    uint64_t v16 = &unk_10054D8F0;
    id v17 = v7;
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 64);
    id v18 = v8;
    uint64_t v19 = v9;
    uint64_t v4 = v7;
    [v4 performBlock:&v13];
    id v10 = objc_opt_class();
    double v11 = [*(id *)(a1 + 40) absoluteString];
    int v12 = [*(id *)(a1 + 48) absoluteString];
    [v10 didStartUpdatingFeedUrl:v11 cloudSyncUrl:v12];

    [*(id *)(a1 + 32) _startDownloadForFeedUrl:*(void *)(a1 + 40) cloudSyncFeedUrl:*(void *)(a1 + 48) podcastStoreId:*(void *)(a1 + 64) triggerBy:*(void *)(a1 + 56) userInitiated:*(unsigned __int8 *)(a1 + 80) useBackgroundFetch:*(unsigned __int8 *)(a1 + 81) source:v13, v14, v15, v16];
  }
}

id sub_10011037C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) absoluteString];
  uint64_t v4 = [v2 podcastForFeedUrl:v3];

  if (v4
    || (+[NSNumber numberWithLongLong:*(void *)(a1 + 48)],
        double v6 = objc_claimAutoreleasedReturnValue(),
        v7 = +[MTStoreIdentifier isNotEmptyNumber:](MTStoreIdentifier, "isNotEmptyNumber:", v6), v6, v7)&& ([*(id *)(a1 + 32) podcastForStoreId:*(void *)(a1 + 48)], (uint64_t v4 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v5 = +[NSDate now];
    [v5 timeIntervalSinceReferenceDate];
    [v4 setLastFetchedDate:];
  }
  id v8 = *(void **)(a1 + 32);

  return [v8 saveInCurrentBlock];
}

void sub_1001105A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      double v11 = [v9 localizedDescription];
      int v12 = [v9 userInfo];
      uint64_t v13 = [v12 objectForKey:NSUnderlyingErrorKey];
      *(_DWORD *)buf = 138412546;
      uint64_t v22 = v11;
      __int16 v23 = 2112;
      id v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%@: Underlying error %@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) feedDownloadedWithError:v9 task:0 requestedUrl:*(void *)(a1 + 40)];
    uint64_t v14 = *(void **)(a1 + 32);
    id v15 = [*(id *)(a1 + 40) absoluteString];
    [v14 _didFinishUpdatingFeedUrl:v15 withError:v9];
  }
  else
  {
    uint64_t v16 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    _OWORD v19[2] = sub_1001107D4;
    v19[3] = &unk_100551BC0;
    id v20 = v8;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1001107DC;
    v17[3] = &unk_100551BE8;
    id v18 = v7;
    [v16 preprocessFeedWithDataHashingBlock:v19 feedCreationBlock:v17 url:*(void *)(a1 + 40) useBackgroundFetch:*(unsigned __int8 *)(a1 + 56) source:*(void *)(a1 + 48)];

    id v15 = v20;
  }
}

id sub_1001107D4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001107DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) toFeed];
}

void sub_1001108BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001109E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100110AC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40);
  id v3 = objc_retainBlock(*(id *)(a1 + 40));
  [v2 addObject:v3];

  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 _queue_processNextPendingFeedIfPossible];
}

id sub_100110BB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queue_processNextPendingFeedIfPossible];
}

void sub_100110EF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100111218(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001113AC(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:*(void *)(a1 + 32) object:objc_opt_class() userInfo:*(void *)(a1 + 40)];
}

id sub_100112234(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAllPodcastsUserInitiated:0 forced:0 useBackgroundFetch:1 source:*(void *)(a1 + 48) startedUpdatesCallback:*(void *)(a1 + 40)];
}

void sub_100112320(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  id v3 = +[MTPodcast predicateForAreMediaAPI:1];
  uint64_t v4 = +[MTPodcast predicateForNotImplicitlyFollowedPodcasts];
  uint64_t v5 = [v3 AND:v4];

  double v6 = *(void **)(a1 + 32);
  uint64_t v7 = kMTPodcastEntityName;
  id v8 = +[NSSortDescriptor sortDescriptorWithKey:kPodcastLastFetchedDate ascending:1];
  __int16 v21 = v8;
  id v9 = +[NSArray arrayWithObjects:&v21 count:1];
  v20[0] = kPodcastUuid;
  v20[1] = kPodcastUpdateAvg;
  id v20[2] = kPodcastFeedChangedDate;
  v20[3] = kPodcastStoreCollectionId;
  void v20[4] = kPodcastTitle;
  id v10 = +[NSArray arrayWithObjects:v20 count:5];
  double v11 = [v6 objectDictionariesInEntity:v7 predicate:v5 sortDescriptors:v9 propertiesToFetch:v10 includeObjectId:0];

  id v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472;
  id v17 = sub_100112560;
  id v18 = &unk_100551CA8;
  id v19 = v2;
  id v12 = v2;
  [v11 enumerateObjectsUsingBlock:&v15];
  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = [v12 copy:v15, v16, v17, v18];
  (*(void (**)(uint64_t, id))(v13 + 16))(v13, v14);
}

void sub_100112560(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 valueForKey:kPodcastFeedChangedDate];
  if (v4)
  {
    uint64_t v5 = [v3 valueForKey:kPodcastUpdateAvg];
    uint64_t v6 = (uint64_t)[v5 longLongValue];

    double v7 = (double)v6 * 3.0;
    if (v7 < 1209600.0) {
      double v7 = 1209600.0;
    }
    id v8 = [v4 dateByAddingTimeInterval:v7];
    [v8 timeIntervalSinceReferenceDate];
    double v10 = v9;
    double v11 = +[NSDate now];
    [v11 timeIntervalSinceReferenceDate];
    double v13 = v12;

    if (v10 >= v13)
    {
      if (v6 >= 14401)
      {
        if ((unint64_t)v6 >= 0x2A301)
        {
          int v26 = (int)v6 / 86400;
          if ((int)v6 / 86400 >= 7) {
            int v26 = 7;
          }
          double v25 = (double)(86400 * v26);
        }
        else
        {
          double v25 = 86400.0;
        }
      }
      else
      {
        double v25 = 3600.0;
      }
      id v14 = [v4 dateByAddingTimeInterval:v25];
      uint64_t v27 = +[NSDate now];
      id v28 = [v27 compare:v14];

      if (v28 != (id)-1)
      {
        CFStringRef v29 = _MTLogCategoryFeedUpdate();
        BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        uint64_t v31 = kPodcastUuid;
        if (v30)
        {
          uint64_t v32 = [v3 valueForKey:kPodcastUuid];
          id v33 = [v3 valueForKey:kPodcastTitle];
          __int16 v34 = [v3 valueForKey:kPodcastStoreCollectionId];
          *(_DWORD *)buf = 138544642;
          long long v38 = v32;
          __int16 v39 = 2112;
          long long v40 = v33;
          __int16 v41 = 2112;
          long long v42 = v34;
          __int16 v43 = 2112;
          long long v44 = v4;
          __int16 v45 = 1024;
          int v46 = (int)v25 / 86400;
          __int16 v47 = 1024;
          int v48 = (int)(v25 - (double)(86400 * v46)) / 3600;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "MAPI Expected Shows - 🟢 Updating expected show %{public}@ - %@ storeId: %@, feed last changed date: %@, update average: %dd %dh", buf, 0x36u);
        }
        int v35 = *(void **)(a1 + 32);
        id v36 = [v3 valueForKey:v31];
        [v35 addObject:v36];
      }
    }
    else
    {
      id v14 = _MTLogCategoryFeedUpdate();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = [v3 valueForKey:kPodcastUuid];
        uint64_t v16 = [v3 valueForKey:kPodcastTitle];
        id v17 = [v3 valueForKey:kPodcastStoreCollectionId];
        *(_DWORD *)buf = 138544130;
        long long v38 = v15;
        __int16 v39 = 2112;
        long long v40 = v16;
        __int16 v41 = 2112;
        long long v42 = v17;
        __int16 v43 = 2112;
        long long v44 = v4;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "MAPI Expected Shows - 💤 Skipping dormant show %{public}@ - %@ storeId: %@, feed last changed date: %@. Not including in expected to update feeds.", buf, 0x2Au);
      }
    }
  }
  else
  {
    id v18 = _MTLogCategoryFeedUpdate();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    uint64_t v20 = kPodcastUuid;
    if (v19)
    {
      __int16 v21 = [v3 valueForKey:kPodcastUuid];
      uint64_t v22 = [v3 valueForKey:kPodcastTitle];
      __int16 v23 = [v3 valueForKey:kPodcastStoreCollectionId];
      *(_DWORD *)buf = 138544130;
      long long v38 = v21;
      __int16 v39 = 2112;
      long long v40 = v22;
      __int16 v41 = 2112;
      long long v42 = v23;
      __int16 v43 = 2112;
      long long v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "MAPI Expected Shows - 🟡 Updating show with no change date %{public}@ - %@ storeId: %@, feed last changed date: %@", buf, 0x2Au);
    }
    id v24 = *(void **)(a1 + 32);
    id v14 = [v3 valueForKey:v20];
    [v24 addObject:v14];
  }
}

void sub_100112B24(void *a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100112BBC;
  v5[3] = &unk_100551CF8;
  id v3 = (void *)a1[4];
  id v2 = (void *)a1[5];
  uint64_t v7 = a1[6];
  id v4 = v2;
  void v5[4] = a1[4];
  id v6 = v4;
  [v3 _fetchMediaAPIShowsExpectedToUpdate:v5];
}

void sub_100112BBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((unint64_t)[v3 count] > *(void *)(a1 + 48))
  {
    uint64_t v4 = [v3 subarrayWithRange:0];

    id v3 = (id)v4;
  }
  uint64_t v23 = 0;
  id v24 = &v23;
  uint64_t v25 = 0x3032000000;
  int v26 = sub_10005709C;
  uint64_t v27 = sub_100057318;
  id v28 = &__NSArray0__struct;
  uint64_t v5 = +[MTDB sharedInstance];
  id v6 = [v5 importContext];

  uint64_t v7 = +[NSFetchRequest fetchRequestWithEntityName:kMTPodcastEntityName];
  id v8 = +[NSSet setWithArray:v3];
  double v9 = +[MTPodcast predicateForPodcastUuids:v8];
  [v7 setPredicate:v9];

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  _OWORD v19[2] = sub_100112E48;
  v19[3] = &unk_10054E280;
  uint64_t v22 = &v23;
  id v10 = v6;
  id v20 = v10;
  id v11 = v7;
  id v21 = v11;
  [v10 performBlockAndWait:v19];
  uint64_t v12 = v24[5];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100112E98;
  void v16[3] = &unk_100551CD0;
  id v13 = *(id *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  id v18 = v13;
  void v16[4] = v14;
  id v15 = v3;
  id v17 = v15;
  +[BatchFeedRequestController fetchOutOfDateShowUUIDsWith:v12 completionHandler:v16];

  _Block_object_dispose(&v23, 8);
}

void sub_100112E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100112E48(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) executeFetchRequest:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100112E98(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    id v6 = [a1[4] workQueue];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100112F94;
    uint64_t v9[3] = &unk_10054D988;
    id v7 = a1[5];
    id v8 = a1[4];
    id v10 = v7;
    id v11 = v8;
    id v12 = v5;
    id v13 = a1[6];
    dispatch_async(v6, v9);
  }
}

id sub_100112F94(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    int v5 = 134217984;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Found %ld podcasts expected to update.", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) _updatePodcastsWithUUIDs:*(void *)(a1 + 48) userInitiated:0 forced:1 useBackgroundFetch:1 source:6 startedUpdatesCallback:*(void *)(a1 + 56)];
}

void sub_100113110(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1001131A0;
  v2[3] = &unk_100551D20;
  void v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 _fetchMediaAPIShowsExpectedToUpdate:v2];
}

void sub_1001131A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) workQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100113268;
  block[3] = &unk_10054FFB0;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_100113268(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    *(_DWORD *)buf = 134217984;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Found %ld podcasts expected to update.", buf, 0xCu);
  }

  uint64_t v4 = +[MTFeedUpdateMetricsAction fetchFeedsExpectedToUpdate];
  uint64_t v5 = +[MTFeedUpdateMetricsDataKey podcastCount];
  id v6 = [NSNumber numberWithUnsignedInteger:[*(id *)(a1 + 32) count]];
  id v11 = v6;
  id v7 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  +[IMMetrics recordUserAction:v4 dataSource:0 withData:v7];

  id v8 = *(void **)(a1 + 40);
  id v9 = +[NSSet setWithArray:*(void *)(a1 + 32)];
  [v8 _updatePodcastsWithUUIDs:v9 userInitiated:0 forced:1 useBackgroundFetch:1 source:6 startedUpdatesCallback:*(void *)(a1 + 48)];
}

void sub_1001134B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) workQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001135B0;
    block[3] = &unk_100551D48;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    id v11 = v7;
    uint64_t v12 = v8;
    char v15 = *(unsigned char *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 48);
    id v13 = v9;
    dispatch_async(v6, block);
  }
}

void sub_1001135B0(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    *(_DWORD *)buf = 134217984;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Found %ld out of date store shows.", buf, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 64);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001136EC;
  v8[3] = &unk_10054ECB8;
  uint64_t v7 = *(void *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  [v4 _updatePodcastsWithUUIDs:v5 userInitiated:v6 forced:1 useBackgroundFetch:1 source:v7 startedUpdatesCallback:v8];
}

uint64_t sub_1001136EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001137A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001138AC(uint64_t a1)
{
  uint64_t v2 = +[MTPodcast predicateForAreMediaAPI:0];
  id v3 = +[MTPodcast predicateForNotHiddenPodcasts];
  uint64_t v4 = [v2 AND:v3];

  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t v5 = +[MTPodcast predicateForNotImplicitlyFollowedPodcasts];
    uint64_t v6 = [v4 AND:v5];

    uint64_t v4 = (void *)v6;
  }
  uint64_t v7 = +[NSFetchRequest fetchRequestWithEntityName:kMTPodcastEntityName];
  [v7 setPredicate:v4];
  uint64_t v30 = kPodcastUuid;
  uint64_t v8 = +[NSArray arrayWithObjects:&v30 count:1];
  [v7 setPropertiesToFetch:v8];

  id v9 = +[NSMutableSet set];
  uint64_t v10 = [*(id *)(a1 + 32) executeFetchRequest:v7];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v13) {
          objc_enumerationMutation(v10);
        }
        char v15 = [*(id *)(*((void *)&v25 + 1) + 8 * i) uuid];
        [v9 addObject:v15];
      }
      id v12 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v12);
  }
  uint64_t v16 = [*(id *)(a1 + 40) workQueue];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  id v20[2] = sub_100113B60;
  v20[3] = &unk_10054F0C8;
  uint64_t v17 = *(void *)(a1 + 40);
  id v18 = *(void **)(a1 + 48);
  id v21 = v9;
  uint64_t v22 = v17;
  char v24 = *(unsigned char *)(a1 + 57);
  id v23 = v18;
  id v19 = v9;
  dispatch_async(v16, v20);
}

id sub_100113B60(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    int v5 = 134217984;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Found %ld non-store shows.", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) _updatePodcastsWithUUIDs:*(void *)(a1 + 32) userInitiated:0 forced:*(unsigned __int8 *)(a1 + 56) useBackgroundFetch:1 source:5 startedUpdatesCallback:*(void *)(a1 + 48)];
}

id sub_100113D28(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updatePodcastsWithUUIDs:*(void *)(a1 + 40) userInitiated:*(unsigned __int8 *)(a1 + 64) useBackgroundFetch:0 source:*(void *)(a1 + 56) startedUpdatesCallback:*(void *)(a1 + 48)];
}

void sub_100113EE4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) feedManager];
  unsigned int v3 = [v2 abortUpdatesIfNetworkUnreachable:*(unsigned __int8 *)(a1 + 72)];

  if (v3)
  {
    uint64_t v4 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Skipping feed update due to network not being reachable", buf, 2u);
    }

    if (*(void *)(a1 + 56))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100114024;
      block[3] = &unk_10054D6E8;
      id v6 = *(id *)(a1 + 56);
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _updatePodcastWithUUID:*(void *)(a1 + 40) triggerBy:*(void *)(a1 + 48) userInitiated:*(void *)(a1 + 64) forced:*(void *)(a1 + 56)];
  }
}

void sub_100114024(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[FeedUpdaterObjcError internetNotReachable];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_1001141C0(uint64_t a1)
{
  id v2 = +[MTPodcast predicateForPodcastStoreId:*(void *)(a1 + 56)];
  unsigned int v3 = [*(id *)(a1 + 32) objectInEntity:kMTPodcastEntityName predicate:v2];
  uint64_t v4 = [v3 uuid];
  int v5 = _MTLogCategoryCloudSync();
  id v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sync feed update from push notification for podcast %{public}@", buf, 0xCu);
    }

    uint64_t v7 = +[MTFeedUpdateManager sharedInstance];
    [v7 _updatePodcastWithUUID:v4 triggerBy:*(void *)(a1 + 40) userInitiated:*(unsigned __int8 *)(a1 + 72) forced:*(unsigned __int8 *)(a1 + 73) forceBootstrap:0 source:*(void *)(a1 + 64) completion:*(void *)(a1 + 48)];
    goto LABEL_9;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 134217984;
    id v11 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Can't find podcast UUID from store ID %lld", buf, 0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    uint64_t v7 = +[FeedUpdaterObjcError localShowMissing];
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v7);
LABEL_9:
  }
}

void sub_1001143D0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100114468;
    void v3[3] = &unk_1005510B8;
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
  }
}

uint64_t sub_100114468(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_10011447C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Batch fetch failed. Updating all podcasts through legacy path. Error - %@", buf, 0xCu);
    }

    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 65);
    uint64_t v10 = *(unsigned __int8 *)(a1 + 66);
    uint64_t v11 = *(void *)(a1 + 56);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100114600;
    v14[3] = &unk_100551E88;
    long long v13 = *(_OWORD *)(a1 + 40);
    id v12 = (id)v13;
    long long v15 = v13;
    [v7 _unsafe_updateAllPodcastsUserInitiated:v8 forced:v9 useBackgroundFetch:v10 source:v11 startedUpdatesCallback:v14];
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += a2;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void sub_100114600(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10011461C(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100114638(uint64_t a1)
{
  id v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v5 = 134217984;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Initiated the update of %ld podcast feeds.", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100114748(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100114A94(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) tableView];
  [v1 reloadData];
}

void sub_100115910(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) setInitialFeedUpdateCount:a2];
    uint64_t v3 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 32) initialFeedUpdateCount];
      int v8 = 134217984;
      id v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Did begin updating %lld feeds for background task", (uint8_t *)&v8, 0xCu);
    }

    +[NSDate timeIntervalSinceReferenceDate];
    [*(id *)(a1 + 32) setFeedUpdateBeginTime:];
    [*(id *)(a1 + 32) setPendingCompletion:*(void *)(a1 + 40)];
    int v5 = +[NSNotificationCenter defaultCenter];
    [v5 addObserver:*(void *)(a1 + 32) selector:"didFinishUpdatingAllFeedsNotification:" name:@"MTFeedUpdateDidEndUpdatingAllFeeds" object:0];
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6)
    {
      uint64_t v7 = *(void (**)(void))(v6 + 16);
      v7();
    }
  }
}

void sub_10011736C()
{
}

void sub_100117378(void *a1)
{
  uint64_t v1 = qword_10060A8B0;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_10060A8B0, &stru_100552068);
  }
  [(id)qword_10060A8B8 start];
  [(id)qword_10060A8B8 runBlockWhenReady:v2];
}

void sub_1001173F8(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = qword_10060A8B8;
  qword_10060A8B8 = v1;

  _objc_release_x1(v1, v2);
}

id sub_10011764C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performPendingBlocksIfReady];
}

void sub_1001176CC(id a1, id a2)
{
}

id sub_100118C08(id a1, NSDictionary *a2)
{
  v8[0] = @"box-height";
  uint64_t v2 = a2;
  uint64_t v3 = [(NSDictionary *)v2 objectForKeyedSubscript:@"height"];
  v9[0] = v3;
  v8[1] = @"box-width";
  id v4 = [(NSDictionary *)v2 objectForKeyedSubscript:@"width"];
  v9[1] = v4;
  v8[2] = @"url";
  int v5 = -[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:");

  _DWORD v9[2] = v5;
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:3];

  return v6;
}

void sub_1001195D4(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v3 = [*(id *)(a1 + 32) upNextManifest];
  unsigned __int8 v4 = [v3 isLoaded];

  if ((v4 & 1) == 0)
  {
    int v5 = [*(id *)(a1 + 32) upNextManifest];
    [v5 setIsLoaded:1];

    dispatch_group_enter(v2);
    uint64_t v6 = [*(id *)(a1 + 32) upNextManifest];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1001197F8;
    v17[3] = &unk_10054D570;
    id v18 = v2;
    [v6 _load:v17];
  }
  uint64_t v7 = [*(id *)(a1 + 32) userManifest];
  unsigned __int8 v8 = [v7 isLoaded];

  if ((v8 & 1) == 0)
  {
    id v9 = [*(id *)(a1 + 32) userManifest];
    [v9 setIsLoaded:1];

    dispatch_group_enter(v2);
    uint64_t v10 = [*(id *)(a1 + 32) userManifest];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_100119800;
    void v15[3] = &unk_10054D570;
    uint64_t v16 = v2;
    [v10 _load:v15];
  }
  uint64_t v11 = [*(id *)(a1 + 32) loadQueue];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_100119808;
  void v13[3] = &unk_10054D738;
  id v12 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v12;
  dispatch_group_notify(v2, v11, v13);
}

void sub_1001197F8(uint64_t a1)
{
}

void sub_100119800(uint64_t a1)
{
}

uint64_t sub_100119808(uint64_t a1)
{
  [*(id *)(a1 + 32) _setupManifestDefaults];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_100119E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100119E50(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *a3;
  return result;
}

NSString *__cdecl sub_10011B4C4(id a1, NSSortDescriptor *a2)
{
  return [(NSSortDescriptor *)a2 key];
}

void sub_10011BBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011BC00(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) uuid];
  uint64_t v3 = +[MTRecencyUtil upNextForPodcastUuid:v2 excludeExplicit:0 ctx:*(void *)(a1 + 40)];

  unsigned __int8 v4 = [v3 episodeUuid];
  int v5 = [*(id *)(a1 + 32) nextEpisodeUuid];
  uint64_t v6 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = [*(id *)(a1 + 32) uuid];
    unsigned __int8 v8 = [v3 episodeUuid];
    [v3 modifiedDate];
    int v14 = 138543874;
    long long v15 = v7;
    __int16 v16 = 2114;
    id v17 = v8;
    __int16 v18 = 2050;
    uint64_t v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "UpNext result from update cursor position for podcast %{public}@: episodeUuid: %{public}@ at %{public}f", (uint8_t *)&v14, 0x20u);
  }
  uint64_t v10 = _MTLogCategoryDefault();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = [v3 episodeUuid];
    int v14 = 138543618;
    long long v15 = v5;
    __int16 v16 = 2114;
    id v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "UpNext result updating podcast nextEpisodeUuid from %{public}@ to %{public}@", (uint8_t *)&v14, 0x16u);
  }
  if (v5 != v4 && ([v5 isEqualToString:v4] & 1) == 0)
  {
    id v12 = [*(id *)(a1 + 40) episodeForUuid:v4];
    long long v13 = [*(id *)(a1 + 40) episodeForUuid:v5];
    if ([v13 listenNowEpisode])
    {
      [v13 setListenNowEpisode:0];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
    if (v12 && ([v12 listenNowEpisode] & 1) == 0)
    {
      [v12 setListenNowEpisode:1];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      [v3 modifiedDate];
      [*(id *)(a1 + 32) setModifiedDate:];
    }
  }
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 40) saveInCurrentBlock];
  }
}

void sub_10011BFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011C008(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) podcastForFeedUrl:*(void *)(a1 + 40)];
  uint64_t v2 = [v5 uuid];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  unsigned __int8 v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10011C43C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10011C454(uint64_t a1)
{
  uint64_t v2 = +[NSFetchRequest fetchRequestWithEntityName:kMTEpisodeEntityName];
  uint64_t v3 = [*(id *)(a1 + 32) uuid];
  unsigned __int8 v4 = +[MTEpisode predicateForEpisodesWithSeasonNumbersOnPodcastUuid:v3];
  [v2 setPredicate:v4];

  [v2 setFetchLimit:1];
  id v5 = *(void **)(a1 + 40);
  id v8 = 0;
  uint64_t v6 = [v5 executeFetchRequest:v2 error:&v8];
  id v7 = v8;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 count] != 0;

  [v7 logAndThrow:0];
}

void sub_10011C6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011C6C4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _fetchRequestForDistinctSeasons];
  uint64_t v3 = *(void **)(a1 + 40);
  id v9 = 0;
  unsigned __int8 v4 = [v3 executeFetchRequest:v2 error:&v9];
  id v5 = v9;
  [v5 logAndThrow:0];
  uint64_t v6 = [v4 valueForKey:kEpisodeSeasonNumber];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_10011C8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011C8E4(uint64_t a1)
{
  id v10 = [*(id *)(a1 + 32) predicateForPodcast:*(void *)(a1 + 40)];
  uint64_t v2 = +[MTEpisode predicateForEpisodeType:1];
  uint64_t v3 = +[MTEpisode predicateForSeasonNumberWithNoEpisodeNumber:*(void *)(a1 + 64)];
  unsigned __int8 v4 = [v10 AND:v2];
  id v5 = [v4 AND:v3];

  uint64_t v6 = +[MTEpisode sortDescriptorsForPubDateAscending:0];
  uint64_t v7 = [*(id *)(a1 + 48) objectsInEntity:kMTEpisodeEntityName predicate:v5 sortDescriptors:v6 returnsObjectsAsFaults:0 limit:1];
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_10011D724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011D750(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleShowNotificationsDebugMenuAction];
}

void sub_10011DA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10011DAA0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isAudio];
  if (result)
  {
    uint64_t v3 = 1;
  }
  else
  {
    id result = [*(id *)(a1 + 32) isVideo];
    if (result)
    {
      uint64_t v3 = 2;
    }
    else
    {
      id result = [*(id *)(a1 + 32) isExternalType];
      if (!result) {
        return result;
      }
      uint64_t v3 = 3;
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

void sub_10011DBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10011DBF8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isDownloaded];
  if (result)
  {
    uint64_t v3 = 2;
  }
  else
  {
    if (!*(void *)(a1 + 32)) {
      return result;
    }
    uint64_t v3 = 1;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  return result;
}

BOOL sub_10011F39C(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = [a2 episodeUuid];
  if ([v5 isEqualToString:*(void *)(a1 + 32)]) {
    BOOL v6 = (unint64_t)[*(id *)(a1 + 40) count] > a3;
  }
  else {
    BOOL v6 = 0;
  }

  return v6;
}

BOOL sub_10011F810(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return (unint64_t)[*(id *)(a1 + 32) upNextOffset] <= a3
      && (unint64_t)[*(id *)(a1 + 32) count] > a3;
}

void sub_10011FB84(uint64_t a1)
{
  id v4 = +[NSString stringWithFormat:@"up_next_%@", *(void *)(a1 + 32)];
  id v2 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:*(void *)(a1 + 40)];
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 48) count]);
  [v2 setValue:v3 forKey:@"count"];

  +[IMMetrics recordUserAction:v4 dataSource:*(void *)(a1 + 56) withData:v2];
}

void sub_10011FD5C(uint64_t a1)
{
  id v5 = +[NSString stringWithFormat:@"up_next_%@", *(void *)(a1 + 32)];
  id v2 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:*(void *)(a1 + 40)];
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 48) count]);
  [v2 setValue:v3 forKey:@"count"];

  id v4 = [[MTPlayerItemList alloc] initWithPlayerItems:*(void *)(a1 + 56)];
  +[IMMetrics recordUserAction:v5 dataSource:v4 withData:v2];
}

void sub_10012001C(id a1)
{
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  uint64_t v1 = +[NSArray arrayWithObjects:v4 count:2];
  uint64_t v2 = +[NSSet setWithArray:v1];
  uint64_t v3 = (void *)qword_10060A8D8;
  qword_10060A8D8 = v2;
}

void sub_10012018C(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _encodedUpNext];
  uint64_t v1 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:0];
  uint64_t v2 = [(id)objc_opt_class() _filePath];
  [v1 writeToFile:v2 atomically:1];
}

void sub_1001204A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001204B8(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  [*(id *)(a1 + 32) setPlayerItems:v3];

  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v13 = a1;
  id v4 = [*(id *)(a1 + 32) playerItems];
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v5)
  {
    id v6 = v5;
    int v7 = 0;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v4);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        [v10 setEditingStyleFlags:3];
        uint64_t v11 = _MTLogCategoryPlayback();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id v12 = [v10 title];
          *(_DWORD *)buf = 67109378;
          int v19 = v7 + i;
          __int16 v20 = 2112;
          id v21 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Up Next Controller item at index %d: %@", buf, 0x12u);
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v14 objects:v22 count:16];
      v7 += (int)i;
    }
    while (v6);
  }

  if (*(unsigned char *)(*(void *)(*(void *)(v13 + 40) + 8) + 24)) {
    [*(id *)(v13 + 32) _upNextDidChange];
  }
}

void sub_100120CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100120CF8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 48) setPlayed:*(unsigned __int8 *)(a1 + 64) manually:*(unsigned __int8 *)(a1 + 65) forUserActionOnEpisode:v2 saveChanges:1];
}

void sub_100120EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100120EBC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 48) setPlayState:*(void *)(a1 + 64) manually:*(unsigned __int8 *)(a1 + 72) forUserActionOnEpisode:v2 saveChanges:1];
}

void sub_100122540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void sub_100122580(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) playlistUuid];
  uint64_t v3 = [v2 playlistForUuid:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1001225F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained dismissViewControllerAnimated:1 completion:0];
  }
}

void sub_100122ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100122AF8(id *a1)
{
  id v1 = a1[4];
  id v2 = [a1[5] playlistUuid];
  double v57 = [v1 playlistForUuid:v2];

  float v56 = [v57 defaultSettings];
  uint64_t v3 = [v57 title];
  uint64_t v4 = +[NSBundle mainBundle];
  id v5 = [v4 localizedStringForKey:@"TITLE_PLACEHOLDER" value:&stru_10056A8A0 table:0];
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  v75[2] = sub_1001236AC;
  v75[3] = &unk_100552398;
  objc_copyWeak(&v76, a1 + 7);
  id v54 = +[MTSetting textSettingWithInitialValue:v3 placeholder:v5 identifier:@"title" changeHandler:v75];

  id v6 = +[MTPlaylist containerOrderOptionArray:0];
  int v7 = +[MTPlaylist containerOrderOptionArray:1];
  uint64_t v8 = +[MTPlaylist containerOrderOptionValues];
  id v9 = +[MTOptionsDescription optionsWithLongTitles:v6 shortTitles:v7 valueList:v8];

  id v10 = +[NSBundle mainBundle];
  uint64_t v11 = [v10 localizedStringForKey:@"Play Order" value:&stru_10056A8A0 table:0];
  id v12 = +[NSBundle mainBundle];
  uint64_t v13 = [v12 localizedStringForKey:@"PLAY_ORDER_HEADER" value:&stru_10056A8A0 table:0];
  LODWORD(v8) = [v57 containerOrder];
  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472;
  v73[2] = sub_100123708;
  v73[3] = &unk_1005523C0;
  objc_copyWeak(&v74, a1 + 7);
  long long v14 = +[MTSetting optionSettingWithTitle:v11 headerTitle:v13 footerText:0 initialValue:(int)v8 optionDescription:v9 identifier:@"order" changeHandler:v73];

  long long v15 = +[NSBundle mainBundle];
  long long v16 = [v15 localizedStringForKey:@"Group by Show" value:&stru_10056A8A0 table:0];
  LODWORD(v8) = [v57 isUngroupedList];
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v71[2] = sub_100123758;
  v71[3] = &unk_1005523E8;
  objc_copyWeak(&v72, a1 + 7);
  long long v17 = +[MTSetting switchSettingWithTitle:v16 initialValue:v8 ^ 1 identifier:@"groupBy" changeHandler:v71];

  __int16 v18 = +[NSBundle mainBundle];
  int v19 = [v18 localizedStringForKey:@"Station" value:&stru_10056A8A0 table:0];
  v78[0] = v54;
  v78[1] = v14;
  v78[2] = v17;
  __int16 v20 = +[NSArray arrayWithObjects:v78 count:3];
  id v21 = +[MTSettingsGroup groupWithTitle:v19 footerText:0 settings:v20];

  [a1[6] setObject:v21 forKey:@"station"];
  objc_destroyWeak(&v72);

  objc_destroyWeak(&v74);
  objc_destroyWeak(&v76);
  uint64_t v22 = +[MTPodcastPlaylistSettings episodesOptionArray:0 defaultValue:0];
  uint64_t v55 = [v22 subarrayWithRange:1, (char *)[v22 count] - 1];

  id v23 = +[MTPodcastPlaylistSettings episodesOptionArray:1 defaultValue:0];
  __int16 v53 = [v23 subarrayWithRange:1, (char *)[v23 count] - 1];

  char v24 = +[MTPodcastPlaylistSettings episodesOptionValues];
  id v52 = +[NSOrderedSet orderedSetWithOrderedSet:range:copyItems:](NSOrderedSet, "orderedSetWithOrderedSet:range:copyItems:", v24, 1, (char *)[v24 count] - 1, 0);

  __int16 v51 = +[MTOptionsDescription optionsWithLongTitles:v55 shortTitles:v53 valueList:v52];
  long long v25 = +[NSBundle mainBundle];
  long long v26 = [v25 localizedStringForKey:@"Episodes Header" value:&stru_10056A8A0 table:0];
  id v27 = [v56 episodesToShow];
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = sub_1001237A8;
  v69[3] = &unk_1005523C0;
  objc_copyWeak(&v70, a1 + 7);
  long long v28 = +[MTSetting optionSettingWithTitle:v26 footerText:0 initialValue:v27 optionDescription:v51 identifier:@"episodes" changeHandler:v69];

  CFStringRef v29 = +[MTPodcastPlaylistSettings mediaOptionArray:0];
  uint64_t v30 = +[MTPodcastPlaylistSettings mediaOptionArray:1];
  uint64_t v31 = +[MTPodcastPlaylistSettings mediaOptionValues];
  uint64_t v32 = +[MTOptionsDescription optionsWithLongTitles:v29 shortTitles:v30 valueList:v31];

  id v33 = +[NSBundle mainBundle];
  __int16 v34 = [v33 localizedStringForKey:@"Media Type" value:&stru_10056A8A0 table:0];
  LODWORD(v31) = [v56 mediaType];
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  _OWORD v67[2] = sub_100123828;
  v67[3] = &unk_1005523C0;
  objc_copyWeak(&v68, a1 + 7);
  int v35 = +[MTSetting optionSettingWithTitle:v34 footerText:0 initialValue:v31 optionDescription:v32 identifier:@"type" changeHandler:v67];

  id v36 = +[NSBundle mainBundle];
  id v37 = [v36 localizedStringForKey:@"Hide Played Episodes" value:&stru_10056A8A0 table:0];
  LODWORD(v31) = [v56 showPlayedEpisodes];
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472;
  v65[2] = sub_1001238A8;
  v65[3] = &unk_1005523E8;
  objc_copyWeak(&v66, a1 + 7);
  long long v38 = +[MTSetting switchSettingWithTitle:v37 initialValue:v31 ^ 1 identifier:@"played" changeHandler:v65];

  __int16 v39 = +[NSBundle mainBundle];
  long long v40 = [v39 localizedStringForKey:@"Include" value:&stru_10056A8A0 table:0];
  v77[0] = v28;
  v77[1] = v35;
  v77[2] = v38;
  __int16 v41 = +[NSArray arrayWithObjects:v77 count:3];
  long long v42 = +[MTSettingsGroup groupWithTitle:v40 footerText:0 settings:v41];

  [a1[6] setObject:v42 forKey:@"include"];
  objc_destroyWeak(&v66);

  objc_destroyWeak(&v68);
  objc_destroyWeak(&v70);

  __int16 v43 = +[NSBundle mainBundle];
  long long v44 = [v43 localizedStringForKey:@"Add Podcasts" value:&stru_10056A8A0 table:0];
  __int16 v45 = [a1[5] titleForCurrentPodcasts];
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472;
  v63[2] = sub_100123928;
  void v63[3] = &unk_10054E8E0;
  objc_copyWeak(&v64, a1 + 7);
  int v46 = +[MTSetting buttonSettingWithTitle:v44 detailText:v45 identifier:@"add" changeHandler:v63];

  __int16 v47 = +[NSBundle mainBundle];
  int v48 = [v47 localizedStringForKey:@"PODCASTS_HEADER" value:&stru_10056A8A0 table:0];
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_100123968;
  v59[3] = &unk_100552480;
  id v60 = a1[4];
  objc_copyWeak(&v62, a1 + 7);
  id v49 = v46;
  id v61 = v49;
  long long v50 = +[MTSettingsGroup groupWithTitle:v48 footerText:0 settingsHandler:v59];

  [a1[6] setObject:v50 forKey:@"podcasts"];
  objc_destroyWeak(&v62);

  objc_destroyWeak(&v64);
}

void sub_1001235D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_1001236AC(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained updateTitle:v3];
}

void sub_100123708(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateContainerOrder:a2];
}

void sub_100123758(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateUngroupedListSetting:a2];
}

void sub_1001237A8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = kPlaylistSettingEpisodesToShow;
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:a2];
  [WeakRetained updateSetting:v3 value:v4];
}

void sub_100123828(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = kPlaylistSettingMediaType;
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:a2];
  [WeakRetained updateSetting:v3 value:v4];
}

void sub_1001238A8(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = kPlaylistSettingShowPlayedEpisodes;
  uint64_t v4 = +[NSNumber numberWithInt:a2 ^ 1u];
  [WeakRetained updateSetting:v3 value:v4];
}

void sub_100123928(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained showAddPodcastsSheet];
}

id sub_100123968(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  uint64_t v3 = *(void **)(a1 + 32);
  int v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  id v9 = sub_100123A90;
  id v10 = &unk_100552458;
  id v11 = v3;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  id v4 = v2;
  id v12 = v4;
  id v13 = *(id *)(a1 + 40);
  [v11 performBlockAndWait:&v7];
  id v5 = [v4 copy:v7, v8, v9, v10];

  objc_destroyWeak(&v14);

  return v5;
}

void sub_100123A78(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100123A90(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  from = (id *)(a1 + 56);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = [WeakRetained playlistUuid];
  long long v25 = [v1 playlistForUuid:v3];

  id v4 = [v25 podcasts];
  id v27 = [v25 defaultSettings];
  [*(id *)(a1 + 40) addObject:*(void *)(a1 + 48)];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = v4;
  id v26 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v26)
  {
    uint64_t v23 = *(void *)v33;
    uint64_t v21 = kPlaylistSettingPlaylist;
    uint64_t v22 = kPlaylistSettingPodcast;
    uint64_t v20 = kMTPodcastPlaylistSettingsEntityName;
    do
    {
      for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v23) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        int v7 = +[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:](MTPodcastPlaylistSettings, "episodesOptionArray:defaultValue:", 0, [v27 episodesToShow]);
        uint64_t v8 = +[MTPodcastPlaylistSettings episodesOptionArray:defaultValue:](MTPodcastPlaylistSettings, "episodesOptionArray:defaultValue:", 1, [v27 episodesToShow]);
        id v9 = +[MTPodcastPlaylistSettings episodesOptionValues];
        id v10 = +[MTOptionsDescription optionsWithLongTitles:v7 shortTitles:v8 valueList:v9 footerTextCallback:0 headerTextCallback:&stru_100552408];

        id v11 = +[NSPredicate predicateWithFormat:@"%K = %@ AND %K = %@", v22, v6, v21, v25];
        id v12 = [*(id *)(a1 + 32) objectsInEntity:v20 predicate:v11 sortDescriptors:0 returnsObjectsAsFaults:1];
        id v13 = [v12 lastObject];
        if ([v13 tracksDefault]) {
          uint64_t v14 = 6;
        }
        else {
          uint64_t v14 = (uint64_t)[v13 episodesToShow];
        }
        long long v15 = [v6 title];
        long long v16 = [v6 uuid];
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_100123EF0;
        _OWORD v29[3] = &unk_100552430;
        objc_copyWeak(&v31, from);
        id v17 = v13;
        id v30 = v17;
        __int16 v18 = +[MTSetting optionSettingWithTitle:v15 footerText:0 initialValue:v14 optionDescription:v10 identifier:v16 changeHandler:v29];

        [*(id *)(a1 + 40) addObject:v18];
        objc_destroyWeak(&v31);
      }
      id v26 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
    }
    while (v26);
  }
}

void sub_100123E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id *location)
{
}

NSString *__cdecl sub_100123E88(id a1, unint64_t a2)
{
  id v2 = +[NSBundle mainBundle];
  uint64_t v3 = [v2 localizedStringForKey:@"Include" value:&stru_10056A8A0 table:0];

  return (NSString *)v3;
}

void sub_100123EF0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = [*(id *)(a1 + 32) uuid];
  [WeakRetained updateShowSetting:a2 forSettings:v4];
}

void sub_1001241A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001241D4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) playlistUuid];
  id v5 = [v2 playlistForUuid:v3];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v5 includesAllPodcasts];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    id v4 = [v5 podcasts];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v4 count];

    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [*(id *)(a1 + 32) countOfPodcasts];
  }
}

void sub_1001245C0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) playlistUuid];
  id v6 = [v2 playlistForUuid:v3];

  [v6 setIncludesAllPodcasts:0];
  id v4 = [v6 podcasts];
  id v5 = [v4 objectAtIndex:*(void *)(a1 + 48)];
  [v6 removePodcast:v5];
}

void sub_100124790(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) podcastPlaylistSettingsForUuid:*(void *)(a1 + 40)];
  id v5 = v2;
  if (*(void *)(a1 + 48) == 6)
  {
    uint64_t v3 = [v2 playlist];
    id v4 = [v3 defaultSettings];

    [v5 setTracksDefault:1];
    [v5 takeValuesFromDefaultSettings:v4];
  }
  else
  {
    [v2 setTracksDefault:0];
  }
  [v5 setEpisodesToShow:*(void *)(a1 + 48)];
  [v5 setNeedsUpdate:1];
}

void sub_100124990(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) playlistUuid];
  id v4 = [v2 playlistForUuid:v3];

  id v5 = [v4 defaultSettings];
  [v5 setValue:*(void *)(a1 + 48) forKey:*(void *)(a1 + 56)];
  [v5 setNeedsUpdate:1];
  id v6 = [v4 settings];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100124A8C;
  void v8[3] = &unk_1005524D0;
  id v9 = v5;
  id v7 = v5;
  [v6 enumerateObjectsUsingBlock:v8];
}

id sub_100124A8C(uint64_t a1, void *a2)
{
  return [a2 takeValuesFromDefaultSettings:*(void *)(a1 + 32)];
}

void sub_100124B9C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) playlistUuid];
  id v4 = [v2 playlistForUuid:v3];

  [v4 setContainerOrder:*(unsigned int *)(a1 + 48)];
  [v4 setNeedsUpdate:1];
}

void sub_100124ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100124F04(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) playlistUuid];
  id v4 = [v2 playlistForUuid:v3];

  uint64_t v5 = [v4 title];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v4 includesAllPodcasts];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v8 = [v4 podcasts];
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(a1 + 48);
        uint64_t v14 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)v12) uuid];
        [v13 addObject:v14];

        uint64_t v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v10);
  }
}

void sub_10012516C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100125188(id *a1)
{
  id v2 = a1[4];
  uint64_t v3 = [a1[5] playlistUuid];
  id v4 = [v2 playlistForUuid:v3];

  uint64_t v5 = kPodcastUuid;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v7 = [WeakRetained addPodcastsViewController];
  uint64_t v8 = [v7 podcastUuids];
  id v9 = +[NSPredicate predicateWithFormat:@"%K in %@", v5, v8];

  id v10 = a1[4];
  uint64_t v11 = kMTPodcastEntityName;
  uint64_t v12 = +[MTPodcast sortDescriptorsForAllPodcasts];
  uint64_t v13 = [v10 objectsInEntity:v11 predicate:v9 sortDescriptors:v12];

  uint64_t v14 = +[NSOrderedSet orderedSetWithArray:v13];
  long long v15 = [v4 podcasts];
  id v16 = [v15 mutableCopy];

  [v16 minusOrderedSet:v14];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100125414;
  v22[3] = &unk_1005524F8;
  id v23 = v4;
  id v17 = v4;
  [v16 enumerateObjectsUsingBlock:v22];
  [v17 setPodcasts:v14];
  id v18 = objc_loadWeakRetained(a1 + 6);
  uint64_t v19 = [v18 addPodcastsViewController];
  [v17 setIncludesAllPodcasts:[v19 allPodcastsSelected]];

  [v17 setNeedsUpdate:1];
  [a1[4] saveInCurrentBlock];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100125420;
  block[3] = &unk_10054E8E0;
  objc_copyWeak(&v21, a1 + 6);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v21);
}

id sub_100125414(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removePodcast:a2];
}

void sub_100125420(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = +[SyncKeysRepository shared];
  [v1 setIsPlaylistSyncDirty:1];

  id v2 = [WeakRetained settingsController];
  [v2 reloadGroupWithIdentifier:@"podcasts"];

  [WeakRetained updatePodcastCount];
  uint64_t v3 = [WeakRetained delegate];
  [v3 playlistSettingsDidChangeSetting:WeakRetained];
}

void sub_100125604(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) playlistUuid];
  id v4 = [v2 playlistForUuid:v3];

  [v4 setIsUngroupedList:*(unsigned char *)(a1 + 48) == 0];
  if (*(unsigned char *)(a1 + 48) && [v4 containerOrder] == 2) {
    [v4 setContainerOrder:1];
  }
  [v4 setNeedsUpdate:1];
}

void sub_1001258B4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) playlistUuid];
  id v4 = [v2 playlistForUuid:v3];

  [v4 setTitle:*(void *)(a1 + 48)];
}

void sub_100125E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100126988(uint64_t a1)
{
  id v2 = _MTLogCategoryFeedUpdate();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    int v5 = 134217984;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Needs feed update for %lu podcasts", (uint8_t *)&v5, 0xCu);
  }

  id v4 = +[MTFeedUpdateManager sharedInstance];
  [v4 _updatePodcastsWithUUIDs:*(void *)(a1 + 32) userInitiated:0 useBackgroundFetch:1 source:13 startedUpdatesCallback:0];
}

id sub_100126BD4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100126C44;
  void v3[3] = &unk_100550320;
  void v3[4] = v1;
  return [v1 results:v3];
}

void sub_100126C44(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 valueForKey:kEpisodeUuid];
  [v2 checkAutoDownloadsForUuids:v3];
}

void sub_100126D1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (a4) {
      unsigned __int8 v8 = 0;
    }
    else {
      unsigned __int8 v8 = [v6 BOOLValue];
    }
    WeakRetained[56] = v8;
    id v9 = _MTLogCategoryFeedUpdate();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = WeakRetained[56];
      v11[0] = 67109120;
      v11[1] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MTFeedUpdateProcessor did get new batch fetch enabled value %x will refresh", (uint8_t *)v11, 8u);
    }

    [WeakRetained updatePredicate];
    [WeakRetained _reCheck];
  }
}

void sub_100126F34(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100126F48(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = +[MPMediaLibrary defaultMediaLibrary];
  uint64_t v4 = (uint64_t)[*(id *)(a1 + 32) counterForGeneratingLibraryChangeNotifications];
  if (v4 >= 1) {
    [WeakRetained _endGeneratingLibraryChangeNotifications];
  }
  unsigned __int8 v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472;
  int v10 = sub_100127064;
  uint64_t v11 = &unk_100552548;
  id v13 = *(id *)(a1 + 40);
  id v5 = v3;
  id v12 = v5;
  id v6 = [v5 performTransactionWithBlock:&v8];
  if (v4 >= 1) {
    [WeakRetained _beginGeneratingLibraryChangeNotifications:v8, v9, v10, v11];
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v6);
  }
}

uint64_t sub_100127064(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100127124(uint64_t a1)
{
  id v2 = +[MPMediaLibrary defaultMediaLibrary];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1001274F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id v3 = *(void **)(a1 + 32);

  return [v3 _beginGeneratingLibraryChangeNotifications];
}

uint64_t sub_1001275F4(uint64_t a1)
{
  if ((uint64_t)[*(id *)(a1 + 32) counterForGeneratingLibraryChangeNotifications] >= 1) {
    [*(id *)(a1 + 32) _endGeneratingLibraryChangeNotifications];
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_100128080(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 BOOLValue];
  uint64_t v4 = *(uint64_t (**)(uint64_t, id))(v2 + 16);

  return v4(v2, v3);
}

uint64_t sub_1001281FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100128314(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10012842C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100128858(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 unsignedIntegerValue];
  uint64_t v4 = *(uint64_t (**)(uint64_t, id))(v2 + 16);

  return v4(v2, v3);
}

void sub_100128E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
}

void sub_100128E2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setValue:*(void *)(a1 + 32)];
  uint64_t v2 = [WeakRetained changeHandler];

  if (v2)
  {
    id v3 = [WeakRetained changeHandler];
    v3[2](v3, *(void *)(a1 + 32));
  }
  uint64_t v4 = [WeakRetained reloadHandler];

  if (v4)
  {
    id v5 = [WeakRetained reloadHandler];
    v5[2]();
  }
}

void sub_100129C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100129CAC(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v10 = a2;
  unsigned __int8 v8 = [v10 identifier];
  unsigned int v9 = [v8 isEqualToString:a1[4]];

  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    *(void *)(*(void *)(a1[6] + 8) + 24) = a3;
    *a4 = 1;
  }
}

id sub_10012A844(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setCellEmphasis:*(void *)(a1 + 40)];
}

id sub_10012ABFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v5 = [v3 group];
  id v6 = [v4 isEqual:v5];

  return v6;
}

void sub_10012B27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10012B2E0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained switchSettingChanged:*(void *)(a1 + 32) value:a2];
}

void sub_10012C158(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) optionSettingChanged:*(void *)(a1 + 40) value:[*(id *)(a1 + 48) valueForIndex:a2]];
  id v3 = [*(id *)(a1 + 32) tableView];
  uint64_t v5 = *(void *)(a1 + 56);
  id v4 = +[NSArray arrayWithObjects:&v5 count:1];
  [v3 reloadRowsAtIndexPaths:v4 withRowAnimation:5];
}

void sub_10012D574(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create(0, 0);
  uint64_t v2 = (void *)qword_10060A8F0;
  qword_10060A8F0 = (uint64_t)v1;

  uint64_t v3 = +[NSMutableDictionary dictionary];
  uint64_t v4 = qword_10060A8F8;
  qword_10060A8F8 = v3;

  _objc_release_x1(v3, v4);
}

uint64_t sub_10012D5D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10012D6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012D6EC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v8 = [v3 identifier];
  uint64_t v5 = [v4 objectForKeyedSubscript:v8];

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10012D7F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  id v6 = +[NSNumber numberWithUnsignedInteger:v3];
  uint64_t v5 = [*(id *)(a1 + 32) identifier];
  [v4 setObject:v6 forKeyedSubscript:v5];
}

void sub_10012DE30(uint64_t a1, void *a2)
{
  id v3 = a2;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = sub_1000570EC;
  void v17[4] = sub_100057340;
  id v18 = 0;
  id v4 = +[MTDB sharedInstance];
  uint64_t v5 = [v4 mainOrPrivateContext];

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10012DFE8;
  uint64_t v12[3] = &unk_10054E080;
  id v6 = v3;
  id v13 = v6;
  id v7 = v5;
  uint64_t v8 = *(void *)(a1 + 32);
  id v14 = v7;
  uint64_t v15 = v8;
  id v16 = v17;
  [v7 performBlockAndWait:v12];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10012E3DC;
  void v9[3] = &unk_100551ED8;
  uint64_t v11 = v17;
  id v10 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

  _Block_object_dispose(v17, 8);
}

void sub_10012DFD0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10012DFE8(uint64_t a1)
{
  uint64_t v2 = _MTLogCategoryPlayback();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    int64_t v34 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is %@", buf, 0xCu);
  }

  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = [*(id *)(a1 + 48) initialEpisodeUuid];
  id v6 = [v4 episodeForUuid:v5];

  long long v32 = v6;
  id v7 = [v6 podcast];
  uint64_t v8 = [*(id *)(a1 + 32) firstObject];
  unsigned int v9 = [v8 podcast];
  id v10 = [v9 uuid];
  id v31 = v7;
  uint64_t v11 = [v7 uuid];
  unsigned int v12 = [v10 isEqual:v11];

  if (v12)
  {
    if ((unint64_t)[*(id *)(a1 + 32) count] < 2)
    {
      id v13 = 0;
    }
    else
    {
      id v13 = [*(id *)(a1 + 32) objectAtIndexedSubscript:1];
    }

    uint64_t v15 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v13 title];
      id v17 = [v13 uuid];
      *(_DWORD *)buf = 138412546;
      int64_t v34 = (int64_t)v16;
      __int16 v35 = 2112;
      *(void *)id v36 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is the original episode. Pick the 2nd episode instead. %@ %@", buf, 0x16u);
    }
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
    id v13 = v8;
  }
  int64_t v18 = +[MTEpisodeUnavailableUtil unavailableReasonForEpisode:v13];
  if (v13 && v18)
  {
    unint64_t v19 = v14 + 1;
    do
    {
      if ((unint64_t)[*(id *)(a1 + 32) count] <= v19)
      {
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v19];
      }

      int64_t v21 = +[MTEpisodeUnavailableUtil unavailableReasonForEpisode:v20];
      uint64_t v22 = _MTLogCategoryPlayback();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = [v20 title];
        char v24 = [v20 uuid];
        *(_DWORD *)buf = 134218754;
        int64_t v34 = v21;
        __int16 v35 = 1024;
        *(_DWORD *)id v36 = v19;
        *(_WORD *)&v36[4] = 2112;
        *(void *)&v36[6] = v23;
        __int16 v37 = 2112;
        long long v38 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is not available (Unavailable reason: %lu). Pick the %d next episode instead. %@ %@", buf, 0x26u);
      }
      if (!v20) {
        break;
      }
      ++v19;
      id v13 = v20;
    }
    while (v21);
  }
  else
  {
    uint64_t v20 = v13;
  }
  uint64_t v25 = [v20 uuid];
  uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8);
  id v27 = *(void **)(v26 + 40);
  *(void *)(v26 + 40) = v25;

  long long v28 = _MTLogCategoryPlayback();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v29 = [v20 title];
    id v30 = [v20 uuid];
    *(_DWORD *)buf = 138412546;
    int64_t v34 = (int64_t)v29;
    __int16 v35 = 2112;
    *(void *)id v36 = v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "nextEpisodeToPlay is %@ %@", buf, 0x16u);
  }
}

void sub_10012E3DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v2)
  {
    id v4 = +[MTPlaybackQueueFactory playEpisodeUuid:v2 context:6];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    int64_t v3 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v3();
  }
}

void sub_10012E578(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 length])
  {
    int64_t v3 = -[MTPodcastManifest initWithInitialEpisodeUuid:sectionType:]([MTListenNowManifest alloc], "initWithInitialEpisodeUuid:sectionType:", v4, [*(id *)(a1 + 32) unsignedIntegerValue]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_10012E75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(*(void *)(a1 + 32) + 88) syncablePlayheadDidChangeForEpisodeUuid:a2 isSignificant:a3];
}

void sub_10012ED58(uint64_t a1)
{
  uint64_t v2 = +[MTNMSDefaultsUpdater sharedInstance];
  [v2 startObservingDownloadedPodcastsChanges];

  [*(id *)(a1 + 32) startLibraryUpdate];
  id v3 = +[MTCoreSpotlightController sharedInstance];
  [v3 scheduleIndexAllIfNecessary];
}

void sub_10012F148(id a1)
{
  uint64_t v1 = _MTLogCategoryMediaLibrary();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "library updater running", buf, 2u);
  }

  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = +[MTMediaLibraryUpdater sharedInstance];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10012F248;
  v5[3] = &unk_10054D570;
  dispatch_semaphore_t v6 = v2;
  id v4 = v2;
  [v3 forceUpdateDatabaseFromMediaLibraryWithCompletion:v5];

  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
}

intptr_t sub_10012F248(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10012F250(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) libraryDataProvider];
  [v1 restorePreviouslyDownloadedEpisodes];
}

void sub_10012F400(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10012F49C;
    void v3[3] = &unk_10054F268;
    id v4 = *(id *)(a1 + 32);
    char v5 = a2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
  }
}

uint64_t sub_10012F49C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10012FBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

uint64_t sub_10012FC24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) canDeletePlaylistUUIDBlock];

  if (v4)
  {
    char v5 = [*(id *)(a1 + 32) canDeletePlaylistUUIDBlock];
    uint64_t v6 = ((uint64_t (**)(void, id))v5)[2](v5, v3);
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

id sub_10012FCA4(uint64_t a1, int a2)
{
  dispatch_semaphore_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 performBlockAndWaitWithSave:];
  }
  else {
    return [v2 performBlockAndWait:];
  }
}

void sub_10012FCB4(uint64_t a1)
{
  dispatch_semaphore_t v2 = [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:0 sortDescriptors:0];
  id v3 = objc_opt_class();
  uint64_t v4 = kPlaylistUuid;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10012FF08;
  v22[3] = &unk_100552898;
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 88);
  id v23 = v6;
  uint64_t v27 = v7;
  id v24 = *(id *)(a1 + 64);
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v8 = (id)v11.i64[0];
  int8x16_t v25 = vextq_s8(v11, v11, 8uLL);
  id v26 = *(id *)(a1 + 72);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100130488;
  void v16[3] = &unk_1005528C0;
  id v17 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v18 = v9;
  uint64_t v19 = v10;
  id v20 = *(id *)(a1 + 64);
  id v21 = *(id *)(a1 + 72);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10013086C;
  uint64_t v12[3] = &unk_1005528E8;
  id v15 = *(id *)(a1 + 80);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 32);
  [v3 mergeArray:v2 fromArray:v5 lookupKey:v4 updateBlock:v22 insertBlock:v16 deleteBlock:v12];
}

void sub_10012FF08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = kPlaylistUuid;
    id v9 = v7;
    uint64_t v10 = [v6 valueForKey:v8];
    int8x16_t v11 = [v6 valueForKey:kPlaylistTitle];
    *(_DWORD *)buf = 138543618;
    id v49 = v10;
    __int16 v50 = 2112;
    __int16 v51 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updating playlist (uuid=%{public}@ - title='%@')", buf, 0x16u);
  }
  id v12 = v5;
  id v13 = v6;
  id v14 = [v13 objectForKey:@"syncOrderOnly"];
  unsigned int v15 = [v14 BOOLValue];

  if (v15)
  {
    id v16 = [v13 objectForKey:kPlaylistSortOrder];
    [v12 setSortOrder:[v16 longLongValue]];

    id v17 = [v13 objectForKey:kPlaylistUngroupedList];
    [v12 setIsUngroupedList:[v17 BOOLValue]];
  }
  else
  {
    uint64_t v18 = kPlaylistTitle;
    uint64_t v19 = [v13 objectForKey:kPlaylistTitle];
    id v20 = [v12 title];
    unsigned __int8 v21 = [v19 isEqualToString:v20];

    if ((v21 & 1) == 0)
    {
      uint64_t v22 = [v13 objectForKey:v18];
      [v12 setTitle:v22];

      id v23 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      id v24 = [v12 uuid];
      [v23 addObject:v24];
    }
    int8x16_t v25 = [v13 objectForKey:kPlaylistIncludesAllPodcasts];
    [v12 setIncludesAllPodcasts:[v25 BOOLValue]];

    [v12 setNeedsUpdate:1];
    id v26 = [v13 objectForKey:kPlaylistSortOrder];
    [v12 setSortOrder:[v26 longLongValue]];

    uint64_t v27 = [v13 objectForKey:kPlaylistContainerOrder];
    [v12 setContainerOrder:[v27 intValue]];

    long long v28 = [v13 objectForKey:kPlaylistUngroupedList];
    [v12 setIsUngroupedList:[v28 BOOLValue]];

    CFStringRef v29 = *(void **)(a1 + 40);
    id v30 = [v12 uuid];
    [v29 addObject:v30];

    id v31 = *(void **)(a1 + 48);
    long long v32 = [v12 defaultSettings];
    long long v33 = [v13 objectForKey:kPlaylistDefaultSettings];
    [v31 _mergeSetting:v32 syncObj:v33];

    int64_t v34 = objc_opt_class();
    __int16 v35 = [v12 settings];
    id v36 = [v35 array];
    __int16 v37 = [v13 objectForKey:kPlaylistSettings];
    uint64_t v38 = kPlaylistSettingUuid;
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_100130458;
    v46[3] = &unk_100552820;
    uint64_t v47 = *(void *)(a1 + 48);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_100130468;
    v43[3] = &unk_100552848;
    v43[4] = v47;
    id v44 = *(id *)(a1 + 56);
    id v45 = v12;
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_10013047C;
    v41[3] = &unk_100552870;
    id v42 = *(id *)(a1 + 56);
    [v34 mergeArray:v36 fromArray:v37 lookupKey:v38 updateBlock:v46 insertBlock:v43 deleteBlock:v41];
  }
  __int16 v39 = *(void **)(a1 + 64);
  long long v40 = [v12 uuid];
  [v39 setObject:v13 forKeyedSubscript:v40];
}

id sub_100130458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _mergeSetting:a2 syncObj:a3];
}

id sub_100130468(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _addSetting:*(void *)(a1 + 40) syncObj:a2 playlist:*(void *)(a1 + 48)];
}

id sub_10013047C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) deleteObject:a2];
}

void sub_100130488(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 objectForKey:@"syncOrderOnly"];
  unsigned __int8 v5 = [v4 BOOLValue];

  if ((v5 & 1) == 0)
  {
    id v6 = *(NSObject **)(a1 + 32);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    uint64_t v8 = kPlaylistUuid;
    if (v7)
    {
      id v9 = v6;
      uint64_t v10 = [v3 valueForKey:v8];
      uint64_t v11 = kPlaylistTitle;
      id v12 = [v3 valueForKey:kPlaylistTitle];
      *(_DWORD *)buf = 138543618;
      __int16 v39 = v10;
      __int16 v40 = 2112;
      __int16 v41 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "inserting playlist (uuid=%{public}@ - title='%@')", buf, 0x16u);
    }
    else
    {
      uint64_t v11 = kPlaylistTitle;
    }
    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = [v3 objectForKey:v8];
    unsigned int v15 = +[MTPlaylist insertNewPlaylistInManagedObjectContext:v13 uuid:v14 defaultSettings:0];

    id v16 = [v3 objectForKey:v11];
    [v15 setTitle:v16];

    [v15 setHasBeenSynced:[*(id *)(a1 + 48) syncMergeIsFromCloud]];
    id v17 = [v3 objectForKey:kPlaylistIncludesAllPodcasts];
    [v15 setIncludesAllPodcasts:[v17 BOOLValue]];

    [v15 setNeedsUpdate:1];
    uint64_t v18 = [v3 objectForKey:kPlaylistSortOrder];
    [v15 setSortOrder:[v18 longLongValue]];

    uint64_t v19 = [v3 objectForKey:kPlaylistContainerOrder];
    [v15 setContainerOrder:[v19 intValue]];

    id v20 = [v3 objectForKey:kPlaylistUngroupedList];
    [v15 setIsUngroupedList:[v20 BOOLValue]];

    unsigned __int8 v21 = *(void **)(a1 + 48);
    uint64_t v22 = [v15 defaultSettings];
    id v23 = [v3 objectForKey:kPlaylistDefaultSettings];
    [v21 _mergeSetting:v22 syncObj:v23];

    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v24 = [v3 objectForKey:kPlaylistSettings];
    id v25 = [v24 countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v34;
      do
      {
        for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v34 != v27) {
            objc_enumerationMutation(v24);
          }
          [*(id *)(a1 + 48) _addSetting:*(void *)(a1 + 40) syncObj:*(void *)(*((void *)&v33 + 1) + 8 * i) playlist:v15];
        }
        id v26 = [v24 countByEnumeratingWithState:&v33 objects:v37 count:16];
      }
      while (v26);
    }

    CFStringRef v29 = *(void **)(a1 + 56);
    id v30 = [v3 objectForKey:v8];
    [v29 addObject:v30];

    id v31 = *(void **)(a1 + 64);
    long long v32 = [v15 uuid];
    [v31 setObject:v3 forKeyedSubscript:v32];
  }
}

void sub_10013086C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 hasBeenSynced])
  {
    if (([v3 isItunesPlaylist] & 1) == 0
      && ([v3 isBuiltIn] & 1) == 0)
    {
      uint64_t v4 = *(void *)(a1 + 48);
      unsigned __int8 v5 = [v3 uuid];
      LOBYTE(v4) = (*(uint64_t (**)(uint64_t, void *))(v4 + 16))(v4, v5);

      if ((v4 & 1) == 0)
      {
        id v6 = *(NSObject **)(a1 + 32);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = kPlaylistUuid;
          uint64_t v8 = v6;
          id v9 = [v3 valueForKey:v7];
          int v10 = 138543362;
          uint64_t v11 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "deleting playlist (uuid=%{public}@)", (uint8_t *)&v10, 0xCu);
        }
        [*(id *)(a1 + 40) deletePlaylist:v3];
      }
    }
  }
}

id sub_1001309B4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _applyOrderingInSyncDictionary:*(void *)(a1 + 40) playlist:a2];
}

void sub_100130F50(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v9 = +[NSNumber numberWithUnsignedInteger:a3];
  id v6 = *(void **)(a1 + 32);
  id v7 = [v5 persistentID];

  uint64_t v8 = +[NSNumber numberWithLongLong:v7];
  [v6 setObject:v9 forKeyedSubscript:v8];
}

uint64_t sub_100131004(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 persistentID]);
  uint64_t v9 = [v7 objectForKeyedSubscript:v8];

  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v6 persistentID]);
  uint64_t v12 = [v10 objectForKeyedSubscript:v11];

  if (v9) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v12 == 0;
  }
  if (v13)
  {
    if (!v9 || v12)
    {
      if (!(v9 | v12))
      {
        unsigned int v15 = *(void **)(a1 + 40);
        id v16 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 persistentID]);
        uint64_t v9 = [v15 objectForKeyedSubscript:v16];

        id v17 = *(void **)(a1 + 40);
        uint64_t v18 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v6 persistentID]);
        uint64_t v12 = [v17 objectForKeyedSubscript:v18];
      }
      uint64_t v14 = (uint64_t)[(id)v9 compare:v12];
    }
    else
    {
      uint64_t v14 = 1;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v14 = -1;
  }

  return v14;
}

uint64_t sub_100131994(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100131DE8(id a1, NSLayoutConstraint *a2, unint64_t a3, BOOL *a4)
{
  id v6 = a2;
  uint64_t v4 = [(NSLayoutConstraint *)v6 mt_dynamicTypeConstant];
  id v5 = v4;
  if (v4)
  {
    [v4 currentConstant];
    -[NSLayoutConstraint setConstant:](v6, "setConstant:");
  }
}

void sub_100131FE4(uint64_t a1)
{
  dispatch_semaphore_t v2 = *(void **)(a1 + 32);
  id v3 = [v2 player];
  uint64_t v4 = [v3 videoViewController];
  [v4 setDelegate:v2];

  id v5 = +[MPVolumeHUDController sharedInstance];
  [v5 addVolumeDisplay:*(void *)(a1 + 32)];
}

void sub_100132074(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MPVolumeController);
  [*(id *)(a1 + 32) setVolumeController:v2];
}

uint64_t sub_1001325DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100133C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100133CAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained didTapStartButton];
}

id sub_100134004(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performAcknowledgementCompletionBlocks];
}

void sub_10013411C(id a1, id a2)
{
}

void sub_100134E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100134E9C(uint64_t a1)
{
  id v15 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  id v2 = [v15 podcast];
  uint64_t v3 = [v2 uuid];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = [v2 title];
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = [v2 sortDescriptorsForPlayOrder];
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  uint64_t v12 = +[MTPodcastDetailDataSource predicateForPodcast:v2 sectionType:*(void *)(a1 + 80)];
  uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;
}

void sub_10013511C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 length])
  {
    uint64_t v3 = -[MTPodcastManifest initWithInitialEpisodeUuid:sectionType:]([MTPodcastManifest alloc], "initWithInitialEpisodeUuid:sectionType:", v4, [*(id *)(a1 + 32) unsignedIntegerValue]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10013531C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100135334(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) podcastUuid];
  id v7 = [v2 podcastForUuid:v3];

  uint64_t v4 = [v7 sortDescriptorsForPlayOrder];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10013617C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose((const void *)(v59 - 240), 8);
  _Block_object_dispose((const void *)(v59 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100136214(uint64_t a1)
{
  id v15 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v15 != 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v2 != 0;
  if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)
    && +[MTStoreIdentifier isNotEmpty:](MTStoreIdentifier, "isNotEmpty:", [v2 storeCollectionId]))
  {
    uint64_t v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%lld", [v2 storeCollectionId]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) length] != 0;
  if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)
    && +[MTStoreIdentifier isNotEmpty:](MTStoreIdentifier, "isNotEmpty:", [v15 storeTrackId]))
  {
    uint64_t v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%lld", [v15 storeTrackId]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 96) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = [*(id *)(a1 + 48) podcastFeedUrl];
    uint64_t v11 = [v9 podcastForFeedUrl:v10];
    uint64_t v12 = [v11 uuid];
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) length] != 0;
  }
}

void sub_100136434(uint64_t a1, uint64_t a2)
{
  id v6 = [*(id *)(a1 + 32) currentItem];
  uint64_t v4 = [*(id *)(a1 + 40) playbackQueueController];
  [v4 setMagicMomentPlayerItem:v6];

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, void))(v5 + 16))(v5, a2, *(void *)(a1 + 56));
  }
}

void sub_1001364C4(uint64_t a1, uint64_t a2)
{
  id v6 = [*(id *)(a1 + 32) currentItem];
  uint64_t v4 = [*(id *)(a1 + 40) playbackQueueController];
  [v4 setMagicMomentPlayerItem:v6];

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, a2, 4);
  }
}

void sub_100136870(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v11 = 138412290;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Siri following a show failed with error: %@", (uint8_t *)&v11, 0xCu);
    }

    if (*(void *)(a1 + 32))
    {
      uint64_t v5 = [v3 domain];
      id v6 = +[MTSubscriptionController subscriptionControllerErrorDomain];
      if ([v5 isEqualToString:v6])
      {
        id v7 = [v3 code];
        id v8 = +[MTSubscriptionController alreadySubscribedErrorCode];

        if (v7 == v8)
        {
          uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_12:
          v9();
          goto LABEL_13;
        }
      }
      else
      {
      }
      uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10)
    {
      uint64_t v9 = *(void (**)(void))(v10 + 16);
      goto LABEL_12;
    }
  }
LABEL_13:
}

uint64_t sub_1001369EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100136C88(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) currentItem];
  id v3 = _MTLogCategoryPlayback();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67109120;
      int v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Restored manifest and there is a current item. startPlayback: %d", buf, 8u);
    }

    if (*(unsigned char *)(a1 + 72))
    {
      if ([v2 needsNetworkToPlayButNoNetwork])
      {
        id v6 = _MTLogCategoryPlayback();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "The current item is not downloaded, and we are not connected to the internet. Cannot start playback.", buf, 2u);
        }

        uint64_t v7 = *(void *)(a1 + 40);
        if (v7)
        {
          id v8 = *(void (**)(void))(v7 + 16);
LABEL_16:
          v8();
          goto LABEL_17;
        }
      }
      [*(id *)(a1 + 32) playWithReason:9];
    }
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11)
    {
      id v8 = *(void (**)(void))(v11 + 16);
      goto LABEL_16;
    }
  }
  else
  {
    if (v4)
    {
      int v9 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67109120;
      int v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No manifest to restore. Creating a new play queue and starting playback: %d", buf, 8u);
    }

    uint64_t v10 = +[MTPlaybackQueueFactory playMyPodcastsWithOrder:*(void *)(a1 + 48)];
    LOBYTE(v12) = *(unsigned char *)(a1 + 74);
    [*(id *)(a1 + 56) _setManifest:v10 playerController:*(void *)(a1 + 32) queueType:1 startPlayback:*(unsigned __int8 *)(a1 + 72) forceLocal:*(unsigned __int8 *)(a1 + 73) reason:*(void *)(a1 + 64) interactive:v12 completion:*(void *)(a1 + 40)];
  }
LABEL_17:
}

uint64_t sub_100136F8C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, *(void *)(a1 + 40));
  }
  return result;
}

void sub_1001373F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001374DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)MTBaseEpisodeListManifest;
  return [super enumerateObjectsUsingBlock:v1];
}

void sub_100137698(void *a1)
{
  objc_super v3 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v8 = kEpisodeUuid;
  BOOL v4 = +[NSArray arrayWithObjects:&v8 count:1];
  int v5 = [v3 objectsInEntity:kMTEpisodeEntityName predicate:v2 propertiesToFetch:v4 limit:1];

  id v6 = [v5 firstObject];
  uint64_t v7 = [v6 uuid];

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10013778C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    (*(void (**)(void))(*(void *)(v2 + 48) + 16))();

    objc_end_catch();
    JUMPOUT(0x10013775CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_100137940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100137958(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  uint64_t v2 = [*(id *)(a1 + 56) _mediaItemForEpisode:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  BOOL v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100137B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100137B3C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) existingEpisodeWithID:*(void *)(a1 + 40)];
  uint64_t v2 = [*(id *)(a1 + 56) _mediaItemForEpisode:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  BOOL v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10013AEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10013AEF0(uint64_t a1)
{
  uint64_t v2 = +[MTDB sharedInstance];
  uint64_t v3 = [v2 playbackContext];

  v10[0] = 0;
  v10[1] = v10;
  _DWORD v10[2] = 0x3032000000;
  void v10[3] = sub_10005713C;
  void v10[4] = sub_100057368;
  id v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10013B04C;
  v5[3] = &unk_100552B18;
  uint64_t v8 = v10;
  id v6 = *(id *)(a1 + 32);
  id v4 = v3;
  id v7 = v4;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  [v4 performBlock:v5];
  objc_destroyWeak(&v9);

  _Block_object_dispose(v10, 8);
}

void sub_10013B02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_10013B04C(uint64_t a1)
{
  uint64_t v2 = +[PFSecureDownloadRenewalManager inContextKeyDataFor:ctx:](PFSecureDownloadRenewalManager, "inContextKeyDataFor:ctx:", [*(id *)(a1 + 32) episodeStoreId], *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = [WeakRetained dataAccessQueue];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10013B148;
    void v8[3] = &unk_10054E2A8;
    uint64_t v10 = *(void *)(a1 + 48);
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v7, v8);
  }
}

void sub_10013B148(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v2)
  {
    [v2 expirationDate];
    uint64_t v3 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
    if ([v3 isLessThanDaysOld:30])
    {
      id v4 = _MTLogCategoryPlayback();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v5 = [*(id *)(a1 + 32) episodeUuid];
        *(_DWORD *)buf = 138412546;
        uint64_t v12 = v5;
        __int16 v13 = 2112;
        int v14 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Playback license expired error for episode ADAM ID %@ with renewal date %@", buf, 0x16u);
      }
      id v6 = +[MTLibrary sharedInstance];
      id v7 = [*(id *)(a1 + 32) episodeUuid];
      uint64_t v10 = v7;
      uint64_t v8 = +[NSArray arrayWithObjects:&v10 count:1];
      id v9 = +[NSSet setWithArray:v8];
      [v6 removeDownloadAssetsForEpisodeUuids:v9];
    }
  }
}

void sub_10013B524(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10013B558(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v3)
  {
    id v5 = _MTLogCategoryDRM();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = [v3 localizedDescription];
      int v8 = 138412290;
      id v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[MTPlayerController]: Unable to remove all FairPlay keys with error %@.", (uint8_t *)&v8, 0xCu);
    }
  }
  id v7 = [WeakRetained validationManager];
  [v7 validateDownloadedEpisodesWithCompletion:0];
}

void sub_10013B654(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ((a2 & 1) == 0)
  {
    id v4 = _MTLogCategoryDRM();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[MTPlayerController]: Unable to remove all legacy FairPlay keys with error.", v6, 2u);
    }
  }
  id v5 = [WeakRetained secureDownloadRenewalManager];
  [v5 updateDRMKeysForDownloadsWithUrlProtocolDelegate:0 completionHandler:0];
}

void sub_10013BE20(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_10013BE4C(uint64_t a1)
{
  if (isTV())
  {
    uint64_t v2 = [*(id *)(a1 + 32) currentItem];
    unsigned int v3 = [v2 isVideo];

    if (v3)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      [WeakRetained dismissNowPlayingAnimated:1];
    }
  }
}

void sub_10013C374(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 40) episodeUuid];
  id v4 = [v2 episodeForUuid:v3];

  if (v4)
  {
    [v4 incremementPlayCount];
    [*(id *)(a1 + 48) updateEpisode:v4 andPlayerItem:*(void *)(a1 + 40) withElapsedTime:1 andDuration:*(double *)(a1 + 56) onMediaItemWillChange:*(double *)(a1 + 64)];
    [MTMediaLibraryUtil updateMediaLibraryItem:[v4 persistentID] playhead:[v4 playState] playState:[v4 playCount] playCount:0.0];
    id v5 = [v4 playlists];
    id v6 = [v5 copy];

    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          [v12 setNeedsUpdate:1, v13];
          [v12 updateUnplayedCount];
        }
        id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v9);
    }
  }
}

void sub_10013C524(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 40) podcastUuid];
  id v4 = [v2 podcastForUuid:v3];

  [v4 resetGoDarkWithReason:4];
  [*(id *)(a1 + 32) saveInCurrentBlock];
}

id sub_10013C5A4(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10013C620;
  void v3[3] = &unk_100552BB8;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  __int16 v4 = *(_WORD *)(a1 + 48);
  return [v1 nextManifest:v3];
}

uint64_t sub_10013C620(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v7 = v3;
    id v3 = [*(id *)(a1 + 32) setManifest:v3 startPlayback:*(unsigned __int8 *)(a1 + 40) forceLocal:1 reason:14 interactive:0 completion:0];
  }
  else
  {
    if (!*(unsigned char *)(a1 + 41)) {
      goto LABEL_8;
    }
    id v7 = 0;
    id v5 = +[MTPlaybackQueueFactory playMyPodcastsWithOrder:0];
    if (v5) {
      [*(id *)(a1 + 32) setManifest:v5 startPlayback:0 forceLocal:1 reason:1 interactive:0 completion:0];
    }
  }
  id v4 = v7;
LABEL_8:

  return _objc_release_x1(v3, v4);
}

void sub_10013CD90(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Network UPP completed update failed with error %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_10013CE40(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unint64_t v7 = a3;
  unint64_t v8 = a4;
  if (v7 | v8)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_10013CFB8;
    void v13[3] = &unk_100552C28;
    uint64_t v18 = a2;
    long long v14 = *(id *)(a1 + 32);
    id v15 = (id)v7;
    id v11 = (id)v8;
    uint64_t v12 = *(void *)(a1 + 40);
    id v16 = v11;
    uint64_t v17 = v12;
    +[IMAVPlayer performOnMainQueue:v13];

    id v9 = v14;
  }
  else
  {
    id v9 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) episodeStoreId];
      *(_DWORD *)buf = 134349056;
      id v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[PodcastsStatesCoordination] Episode not inserted for episodeStoreId = %{public}lld. Skipping.", buf, 0xCu);
    }
  }
}

void sub_10013CFB8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 64);
  id v3 = [*(id *)(a1 + 32) episodeStoreId];
  int v4 = _MTLogCategoryPlayback();
  id v5 = v4;
  if (v2 == v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [*(id *)(a1 + 32) episodeStoreId];
      unint64_t v7 = *(void **)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      int v11 = 134349570;
      id v12 = v6;
      __int16 v13 = 2112;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[PodcastsStatesCoordination] Updating playerItem with episodeStoreId = %{public}lld with new inserted Implicit Follow, episodeUUID: %@, podcastUUID: %@.", (uint8_t *)&v11, 0x20u);
    }

    [*(id *)(a1 + 32) upgradeToLocalEpisodeBackedItemWithEpisodeUUID:*(void *)(a1 + 40) podcastUUID:*(void *)(a1 + 48)];
    [*(id *)(a1 + 56) beginObservingTranscriptIdentifierChangesForCurrentItem:*(void *)(a1 + 32)];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(a1 + 64);
      id v10 = [*(id *)(a1 + 32) episodeStoreId];
      int v11 = 134283777;
      id v12 = v9;
      __int16 v13 = 2049;
      id v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[PodcastsStatesCoordination] Skipping update of playerItem: PodcastsStateCoordinator just inserted an implicitly followed show for episode with adamID = %{private}lld, but the current playerItem holds an episodeStoreId = %{private}lld.", (uint8_t *)&v11, 0x16u);
    }
  }
}

void sub_10013D114(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = _MTLogCategoryPlayback();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v10 = 138412290;
      id v11 = v3;
      id v6 = "Network UPP update failed with error %@";
      unint64_t v7 = v5;
      os_log_type_t v8 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v10, 0xCu);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = [*(id *)(a1 + 32) episodeStoreId];
    int v10 = 134283521;
    id v11 = v9;
    id v6 = "Sent playback position to MAPI for episode: %{private}lld";
    unint64_t v7 = v5;
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_6;
  }
}

void sub_10013D3DC(uint64_t a1, void *a2)
{
  id v3 = [a2 firstObject];
  if (v3)
  {
    int v4 = [*(id *)(a1 + 32) transcriptIdentifier];
    uint64_t v5 = [v3 transcriptIdentifier];
    if (v4 == (void *)v5)
    {

LABEL_8:
      goto LABEL_9;
    }
    id v6 = (void *)v5;
    unint64_t v7 = [v3 transcriptIdentifier];
    unsigned int v8 = [v7 isNotEmpty];

    if (v8)
    {
      id v9 = _MTLogCategoryPlayback();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = [v3 title];
        id v11 = [v3 transcriptIdentifier];
        int v14 = 138412546;
        __int16 v15 = v10;
        __int16 v16 = 2112;
        uint64_t v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updating currentItem for episode entitled %@ with transcriptIdentifier %@", (uint8_t *)&v14, 0x16u);
      }
      id v12 = *(void **)(a1 + 32);
      int v4 = [v3 transcriptIdentifier];
      __int16 v13 = [v3 transcriptProvider];
      [v12 updateTranscriptInformation:v4 transcriptSource:v13];

      goto LABEL_8;
    }
  }
LABEL_9:
}

void sub_10013DA48(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) player];
  id v2 = [v4 manifest];
  id v3 = [v2 activity];
  [*(id *)(a1 + 32) setCurrentActivity:v3];
}

void sub_10013DEC4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 80);
  id v3 = [*(id *)(a1 + 32) episodeForPlayerItem:*(void *)(a1 + 40)];
  if (*(unsigned char *)(a1 + 81))
  {
    id v4 = *(void **)(a1 + 48);
    uint64_t v5 = [*(id *)(a1 + 56) previousPlayingEpisodeUuid];
    LOBYTE(v4) = [v4 isEqual:v5];

    BOOL v6 = v2 != 0;
    if ((v4 & 1) == 0)
    {
      [*(id *)(a1 + 56) setPreviousPlayingEpisodeUuid:*(void *)(a1 + 48)];
      +[NSDate timeIntervalSinceReferenceDate];
      [v3 setLastDatePlayed:];
      unint64_t v7 = [v3 assetURL];

      if (!v7)
      {
        unsigned int v8 = +[MTStoreReportingController sharedInstance];
        id v9 = [v3 dictionaryRepresentation];
        int v10 = [*(id *)(a1 + 56) userManifest];
        [v8 reportWithType:2 userInfo:v9 location:@"epst" reason:[v10 playReason]];
      }
      BOOL v6 = 1;
    }
  }
  else
  {
    BOOL v6 = v2 != 0;
  }
  unsigned int v11 = v6 | [*(id *)(a1 + 56) updateEpisode:v3 andPlayerItem:*(void *)(a1 + 40) withElapsedTime:0 andDuration:*(double *)(a1 + 64) onMediaItemWillChange:*(double *)(a1 + 72)];
  if (*(double *)(a1 + 72) > 0.0)
  {
    [v3 duration];
    if (v12 != *(double *)(a1 + 72))
    {
      [v3 setDuration:];
      [*(id *)(a1 + 40) setDuration:*(double *)(a1 + 72)];
      unsigned int v11 = 1;
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  [*(id *)(a1 + 56) lastPlaybackSaveTime];
  if (Current - v14 > 15.0 || v11 != 0)
  {
    __int16 v16 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "updateEpisodeForPlayerUpdateForceSave saving", v17, 2u);
    }

    [*(id *)(a1 + 32) saveInCurrentBlock];
    [*(id *)(a1 + 56) setLastPlaybackSaveTime:CFAbsoluteTimeGetCurrent()];
  }
}

void sub_10013E46C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) episodeUuid];
  id v4 = [v2 episodeForUuid:v3];

  if (v4) {
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_10013E4E8(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) episodeUuid];
  id v6 = [v2 episodeForUuid:v3];

  id v4 = [v6 podcast];
  uint64_t v5 = v4;
  if (v4)
  {
    [v4 resetGoDarkWithReason:4];
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
}

void sub_10013E664(uint64_t a1)
{
  id v3 = +[UIApplication sharedApplication];
  int v2 = [*(id *)(a1 + 32) bestUrl];
  [v3 openURL:v2 options:&__NSDictionary0__struct completionHandler:0];
}

uint64_t sub_10013E8F0(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _performAfterPlay:*(void *)(a1 + 40) playbackStarted:a2 == 0];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

id sub_10013EB60(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) isInteractive];

  return [v1 presentNowPlayingAnimated:v2];
}

void sub_10013F2BC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  id v5 = [a2 mediaRemotePlayerPath];
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v5, v7);
  }
}

void sub_10013F8B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) manifest];
  id v3 = [*(id *)(a1 + 40) _validatePlaybackRequest:*(void *)(a1 + 32)];
  if (v3 == (id)11)
  {
    id v4 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to setPlaybackQueue because we need an internet connection.", v16, 2u);
    }

    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = 11;
  }
  else
  {
    uint64_t v7 = (uint64_t)v3;
    unsigned int v8 = [*(id *)(a1 + 32) dryRun];
    id v5 = *(void **)(a1 + 32);
    if (!v8)
    {
      id v9 = [v5 context];
      unsigned int v10 = [v9 playbackIsUserRequested];

      if (v10)
      {
        unsigned int v11 = +[MTIntentDonationUtil sharedInstance];
        double v12 = [*(id *)(a1 + 32) context];
        [v11 donateManifestCurrentItem:v2 playReason:[v12 source]];
      }
      if (v7 == 1)
      {
        __int16 v13 = *(void **)(a1 + 40);
        double v14 = [*(id *)(a1 + 32) manifest];
        LODWORD(v13) = [v13 _openExternalItemIfNeededForManifest:v14];

        if (!v13)
        {
          if (os_feature_enabled_red_sun())
          {
            __int16 v15 = [*(id *)(a1 + 32) context];
            [v15 setUpNextQueueIntent:1];
          }
          else if ([*(id *)(a1 + 40) _promptToClearUpNextIfNeededForRequest:*(void *)(a1 + 32)])
          {
            goto LABEL_14;
          }
          [*(id *)(a1 + 40) _setPlaybackQueue:*(void *)(a1 + 32)];
          goto LABEL_14;
        }
        uint64_t v7 = 7;
      }
      id v5 = *(void **)(a1 + 32);
    }
    uint64_t v6 = v7;
  }
  [v5 finishWithStatus:v6];
LABEL_14:
}

void sub_10013FD78(uint64_t a1, int a2)
{
  if (a2)
  {
    id v7 = [*(id *)(a1 + 32) context];
    if ([v7 isInteractive])
    {
      id v3 = [*(id *)(a1 + 32) context];
      id v4 = [v3 upNextQueueIntent];

      if (!v4)
      {
        uint64_t v6 = *(void *)(a1 + 32);
        id v5 = *(void **)(a1 + 40);
        _[v5 _showGenericPromptToClearUpNextWithRequest:v6];
      }
    }
    else
    {
    }
  }
}

void sub_1001400DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

uint64_t sub_10014011C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) suppressMetrics] & 1) == 0)
  {
    v16[0] = @"interactive";
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 48) isInteractive]);
    v17[0] = v3;
    v16[1] = @"shouldStart";
    id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
    v17[1] = v4;
    void v16[2] = @"play_source";
    id v5 = +[MTStoreReportingController reportingStringForPlayReason:*(void *)(a1 + 72)];
    v17[2] = v5;
    uint64_t v6 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:3];
    +[IMMetrics recordUserAction:@"play_manifest" dataSource:v2 withData:v6];
  }
  id v7 = [*(id *)(a1 + 32) context];
  BOOL v8 = [v7 upNextQueueIntent] == (id)2;

  if (v8)
  {
    id v9 = [*(id *)(a1 + 56) upNextController];
    [v9 clear];
  }
  if (*(unsigned char *)(a1 + 80))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1001403C0;
    uint64_t v12[3] = &unk_10054F518;
    objc_copyWeak(&v15, (id *)(a1 + 64));
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 32);
    +[IMAVPlayer performOnMainQueue:v12];

    objc_destroyWeak(&v15);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_sync_enter(WeakRetained);
    [*(id *)(a1 + 32) finishWithStatus:1];
    objc_sync_exit(WeakRetained);
  }
  return kdebug_trace();
}

void sub_100140394(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001403C0(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1001404A0;
  v5[3] = &unk_100552CC8;
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_copyWeak(&v7, v2);
  [WeakRetained playWithContext:v4 completion:v5];

  objc_destroyWeak(&v7);
}

void sub_10014048C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001404A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Playback request failed because playback failed to start", buf, 2u);
    }

    [*(id *)(a1 + 32) finishWithStatus:5];
  }
  else
  {
    id obj = objc_loadWeakRetained((id *)(a1 + 40));
    objc_sync_enter(obj);
    [*(id *)(a1 + 32) finishWithStatus:1];
    objc_sync_exit(obj);
  }
}

void sub_100140564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100140724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100140744(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100140D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100140DCC(id a1)
{
  id v1 = +[MTEpisodeUnavailableUtil sharedInstance];
  [v1 showDialogForReason:1 podcastTitle:0 completion:0];
}

void sub_100140E20(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) reasonForNotPlayable];
  id v5 = [*(id *)(a1 + 32) podcast];
  uint64_t v2 = [v5 title];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100140E9C(uint64_t a1)
{
  id v2 = +[MTEpisodeUnavailableUtil sharedInstance];
  [v2 showDialogForReason:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) podcastTitle:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) completion:0];
}

void sub_100141044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10014105C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isExternalType];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1001412E4(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _alertControllerForClearingOrKeepingUpNextWithRequest:*(void *)(a1 + 40)];
  [v3 setTitle:*(void *)(a1 + 48)];
  [v3 setMessage:*(void *)(a1 + 56)];
  id v2 = +[UIViewController mt_rootViewController];
  [v2 presentViewController:v3 animated:1 completion:0];
}

void sub_1001414F4(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _alertControllerForClearingOrKeepingUpNextWithRequest:*(void *)(a1 + 40)];
  [v3 setTitle:*(void *)(a1 + 48)];
  [v3 setMessage:*(void *)(a1 + 56)];
  id v2 = +[UIViewController mt_rootViewController];
  [v2 presentViewController:v3 animated:1 completion:0];
}

void sub_100141848(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  [v2 setUpNextQueueIntent:1];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100141908;
  v5[3] = &unk_10054D9B0;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  id v3 = (id)v4.i64[0];
  int8x16_t v6 = vextq_s8(v4, v4, 8uLL);
  +[IMAVPlayer performOnMainQueue:v5];
}

id sub_100141908(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setPlaybackQueue:*(void *)(a1 + 40)];
}

void sub_100141914(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  [v2 setUpNextQueueIntent:2];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1001419D4;
  v5[3] = &unk_10054D9B0;
  int8x16_t v4 = *(int8x16_t *)(a1 + 32);
  id v3 = (id)v4.i64[0];
  int8x16_t v6 = vextq_s8(v4, v4, 8uLL);
  +[IMAVPlayer performOnMainQueue:v5];
}

id sub_1001419D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setPlaybackQueue:*(void *)(a1 + 40)];
}

id sub_1001419E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) finishWithStatus:2];
}

uint64_t sub_100141AB4(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldFindSomethingToPlay:1];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

id sub_100141BD4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueRestorePlayerManifestWithCompletion:*(void *)(a1 + 40)];
}

void sub_100141DA8(uint64_t a1)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_100141F58;
  void v15[3] = &unk_10054D570;
  void v15[4] = *(void *)(a1 + 32);
  id v2 = objc_retainBlock(v15);
  id v3 = [*(id *)(a1 + 32) player];
  int8x16_t v4 = [v3 manifest];

  if (v4)
  {
    ((void (*)(void *))v2[2])(v2);
  }
  else
  {
    id v5 = *(void **)(a1 + 40);
    if (v5)
    {
      int8x16_t v6 = *(void **)(a1 + 32);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      _DWORD v10[2] = sub_100141F98;
      void v10[3] = &unk_100552D60;
      id v7 = v5;
      uint64_t v8 = *(void *)(a1 + 32);
      id v11 = v7;
      uint64_t v12 = v8;
      id v13 = v2;
      [v6 restoreFromUserActivity:v7 startPlayback:0 reason:1 interactive:0 completion:v10];
    }
    else
    {
      id v9 = _MTLogCategoryPlayback();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Restoration: No user activity found on disk", buf, 2u);
      }

      [*(id *)(a1 + 32) _restoreDefaultManifestIfNeededWithCompletion:v2];
    }
  }
}

id sub_100141F58(uint64_t a1)
{
  [*(id *)(a1 + 32) setPlayerManifestRestored:1];
  id v2 = *(void **)(a1 + 32);

  return [v2 _invokeRestorationCompletions];
}

void sub_100141F98(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKey:@"MTCompositeManifestIsPlayingFromUpNext"];

  if ([v3 BOOLValue])
  {
    int8x16_t v4 = [*(id *)(a1 + 40) upNextController];
    id v5 = [v4 count];

    if (v5)
    {
      int8x16_t v6 = [*(id *)(a1 + 40) compositeManifest];
      [v6 next];
    }
  }
  id v7 = [*(id *)(a1 + 40) player];
  uint64_t v8 = [v7 manifest];

  id v9 = _MTLogCategoryPlayback();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      __int16 v13 = 0;
      id v11 = "Restoration: Restored manifest from user activity";
      uint64_t v12 = (uint8_t *)&v13;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
    }
  }
  else if (v10)
  {
    *(_WORD *)buf = 0;
    id v11 = "Restoration: No manifest restored from user activity data";
    uint64_t v12 = buf;
    goto LABEL_9;
  }

  [*(id *)(a1 + 40) _restoreDefaultManifestIfNeededWithCompletion:*(void *)(a1 + 48)];
}

void sub_100142154(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) restorationCompletions];
  id v3 = _MTLogCategoryPlayback();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    id v9 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Finished restoring manifest. Will call %lu completions", buf, 0xCu);
  }

  int8x16_t v4 = objc_opt_new();
  [*(id *)(a1 + 32) setRestorationCompletions:v4];

  [*(id *)(a1 + 32) setIsManifestRestorationOngoing:0];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001422B4;
  v6[3] = &unk_10054D570;
  id v7 = v2;
  id v5 = v2;
  +[IMAVPlayer performOnMainQueue:v6];
}

void sub_1001422B4(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v8 + 1) + 8 * (void)v5) + 16))();
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }

  int8x16_t v6 = _MTLogCategoryPlayback();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "All completions called", v7, 2u);
  }
}

uint64_t sub_100142538(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100142674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  if (a2 == 1)
  {
    id v22 = objc_begin_catch(a1);
    if (v18) {
      (*(void (**)(uint64_t, void))(v18 + 16))(v18, 0);
    }

    objc_end_catch();
    JUMPOUT(0x100142650);
  }
  _Unwind_Resume(a1);
}

void sub_1001426DC(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 48);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained restoreFromUserActivity:*(void *)(a1 + 32) withManifest:v4 startPlayback:*(unsigned __int8 *)(a1 + 64) reason:*(void *)(a1 + 56) interactive:*(unsigned __int8 *)(a1 + 65) completion:*(void *)(a1 + 40)];
}

void sub_1001428A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001428BC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (*(void *)(a1 + 64) == 2)
    {
      +[IMMetrics recordUserAction:dataSource:](IMMetrics, "recordUserAction:dataSource:", @"handoff_restore_activity");
      [*(id *)(a1 + 40) getContinuationStreamsWithCompletionHandler:&stru_100552DC8];
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 73);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100142A5C;
    void v9[3] = &unk_100552DF0;
    objc_copyWeak(&v12, (id *)(a1 + 56));
    char v13 = *(unsigned char *)(a1 + 72);
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    [WeakRetained setManifest:v3 startPlayback:v4 forceLocal:1 reason:v5 interactive:v6 completion:v9];

    objc_destroyWeak(&v12);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7)
    {
      long long v8 = *(void (**)(void))(v7 + 16);
      v8();
    }
  }
}

void sub_100142A44(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100142A5C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (a2 == 1 && *(unsigned char *)(a1 + 56))
  {
    [*(id *)(a1 + 32) currentTime];
    double v5 = v4;
    uint64_t v6 = [WeakRetained player];
    [v6 setCurrentTime:v5];
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, a2 == 1);
  }
}

void sub_100142E18(uint64_t a1)
{
  id v2 = +[NSFileManager defaultManager];
  uint64_t v3 = [(id)objc_opt_class() _activityRestorationPath];
  [v2 removeItemAtURL:v3 error:0];

  uint64_t v4 = *(void *)(a1 + 40);
  id v9 = 0;
  double v5 = +[NSKeyedArchiver archivedDataWithRootObject:v4 requiringSecureCoding:1 error:&v9];
  id v6 = v9;
  if (v6)
  {
    uint64_t v7 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to archive activity with error %@", buf, 0xCu);
    }
  }
  long long v8 = [(id)objc_opt_class() _activityRestorationPath];
  [v5 writeToURL:v8 atomically:1];
}

void sub_1001434F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error resolving remote playerPath: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _sendMediaRemoteCommand:*(unsigned int *)(a1 + 48) toPlayer:a2 options:*(void *)(a1 + 40)];
  }
}

void sub_1001436E4(id a1, unsigned int a2, __CFArray *a3)
{
  if (a2)
  {
    uint64_t v4 = _MTLogCategoryMediaRemote();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error sending MediaRemote command to player: %d", (uint8_t *)v5, 8u);
    }
  }
}

void sub_100143EC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [v5 userId];
    id v8 = (void *)v7;
    if (v7) {
      CFStringRef v9 = (const __CFString *)v7;
    }
    else {
      CFStringRef v9 = &stru_10056A8A0;
    }
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"userId"];

    uint64_t v10 = [v5 clientId];
    id v11 = v10;
    if (v10) {
      CFStringRef v12 = (const __CFString *)v10;
    }
    else {
      CFStringRef v12 = &stru_10056A8A0;
    }
    [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"clientId"];
  }
  else
  {
    id v11 = _MTLogCategoryMetrics();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      char v13 = [v6 description];
      int v14 = 138412290;
      id v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to fetch AnalyticsUserIdentifier from AMS for play event with error %@", (uint8_t *)&v14, 0xCu);
    }
  }

  +[IMMetrics recordEvent:@"play" dataSource:*(void *)(a1 + 40) data:*(void *)(a1 + 32) topic:@"xp_amp_podcasts_paf"];
}

void sub_1001441D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001441E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accessLog];
  uint64_t v3 = [*(id *)(a1 + 32) errorLog];
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = [*(id *)(a1 + 48) episodeUuid];
  id v6 = [v4 episodeForUuid:v5];

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v7 = [v2 events];
  id v8 = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(a1 + 56) recordMetricsEventForAccessLog:*(void *)(*((void *)&v21 + 1) + 8 * (void)v11) playerItem:*(void *)(a1 + 48)];
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v9);
  }

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  CFStringRef v12 = [v3 events];
  id v13 = [v12 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v18;
    do
    {
      __int16 v16 = 0;
      do
      {
        if (*(void *)v18 != v15) {
          objc_enumerationMutation(v12);
        }
        [*(id *)(a1 + 56) recordMetricsEventForErrorLog:*(void *)(*((void *)&v17 + 1) + 8 * (void)v16) withEpisode:v6];
        __int16 v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      id v14 = [v12 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v14);
  }
}

void sub_1001444F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001448CC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) episodeUuid];
  id v9 = [v2 episodeForUuid:v3];

  uint64_t v4 = [*(id *)(a1 + 48) compositeManifest];
  id v5 = [v4 metricsAdditionalData];
  id v6 = [v5 mutableCopy];

  uint64_t v7 = [*(id *)(a1 + 48) player];
  id v8 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v7 isPlaybackRequested]);
  [v6 setObject:v8 forKeyedSubscript:@"isPlaying"];

  [v6 setObject:*(void *)(a1 + 56) forKeyedSubscript:@"manifest"];
  +[IMMetrics recordUserAction:@"change_track" dataSource:v9 withData:v6];
}

void sub_100145F20(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = +[NSNull null];
  unsigned __int8 v7 = [v5 isEqual:v6];

  if ((v7 & 1) == 0) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v8];
  }
}

id sub_100146430(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refetch:0];
}

void sub_1001464E8(uint64_t a1)
{
  id v2 = +[MTDB sharedInstance];
  id v8 = [v2 playbackContext];

  id v3 = objc_alloc((Class)NSFetchedResultsController);
  uint64_t v4 = [*(id *)(a1 + 32) fetchRequest];
  id v5 = [v3 initWithFetchRequest:v4 managedObjectContext:v8 sectionNameKeyPath:0 cacheName:0];
  [*(id *)(a1 + 32) setFrc:v5];

  id v6 = *(void **)(a1 + 32);
  unsigned __int8 v7 = [v6 frc];
  [v7 setDelegate:v6];

  [*(id *)(a1 + 32) _refetch:*(void *)(a1 + 40)];
}

void sub_1001466E4(uint64_t a1)
{
  kdebug_trace();
  id v2 = [*(id *)(a1 + 32) predicate];

  if (v2)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 predicate];
    id v5 = [v3 _augmentPredicate:v4];
    id v6 = [*(id *)(a1 + 32) fetchRequest];
    [v6 setPredicate:v5];
  }
  unsigned __int8 v7 = [*(id *)(a1 + 32) frc];
  [v7 performFetch:0];

  id v8 = [*(id *)(a1 + 32) frc];
  id v9 = [v8 fetchedObjects];

  [*(id *)(a1 + 32) _processResults:v9];
  uint64_t v10 = [v9 valueForKey:kEpisodeUuid];
  id v11 = [v9 valueForKey:kObjectID];
  CFStringRef v12 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10];

  kdebug_trace();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100146900;
  void v16[3] = &unk_10054D988;
  id v13 = *(void **)(a1 + 40);
  void v16[4] = *(void *)(a1 + 32);
  id v17 = v10;
  id v18 = v12;
  id v19 = v13;
  id v14 = v12;
  id v15 = v10;
  +[IMAVPlayer performOnMainQueue:v16];
}

uint64_t sub_100146900(uint64_t a1)
{
  [*(id *)(a1 + 32) _frcDidChangeResults:*(void *)(a1 + 40) uuidToManagedObjectIDMap:*(void *)(a1 + 48)];
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1001473B4(uint64_t a1)
{
  id v2 = [objc_alloc((Class)MTAllPropertyChangesQueryObserver) initWithEntityName:*(void *)(a1 + 40) predicate:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) setAllPropertyChangeObserver:v2];

  objc_initWeak(&location, *(id *)(a1 + 32));
  id v3 = [*(id *)(a1 + 32) allPropertyChangeObserver];
  [v3 startObserving];

  uint64_t v4 = [*(id *)(a1 + 32) allPropertyChangeObserver];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001474D8;
  v6[3] = &unk_100551A40;
  objc_copyWeak(&v7, &location);
  id v5 = [v4 addResultsChangedHandler:v6];

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void sub_1001474B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1001474D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _propertyDidChange];
}

id sub_1001477D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _frcDidChangeResults:*(void *)(a1 + 40) uuidToManagedObjectIDMap:*(void *)(a1 + 48)];
}

void sub_100147C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_100147C9C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 valueForKey:kEpisodeUuid];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return _objc_release_x1(v3, v5);
}

id sub_100147FEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) processResults];
}

void sub_100148530(id a1)
{
  uint64_t v1 = sub_1000D8BF8();
  uint64_t v2 = qword_10060A910;
  qword_10060A910 = v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_100148ED4(uint64_t a1, int a2, int a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, (a3 | a2) == 0);
  }
  return result;
}

void sub_1001490F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100149120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 | a2)
  {
    id v6 = *(id *)(a1 + 32);
    objc_sync_enter(v6);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v7 + 16))(v7, a2, a3, 0);
      id v8 = *(void **)(a1 + 32);
      id v9 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
      [v8 removeObject:v9];
    }
    objc_sync_exit(v6);
  }
  dispatch_time_t v10 = dispatch_time(0, 250000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10014924C;
  block[3] = &unk_10054D570;
  void block[4] = *(void *)(a1 + 40);
  dispatch_after(v10, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_100149238(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014924C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) magicMomentCompletionHandlers];
  objc_sync_enter(v2);
  uint64_t v3 = [*(id *)(a1 + 32) magicMomentCompletionHandlers];
  id v4 = [v3 count];

  objc_sync_exit(v2);
  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    [v5 _getNowPlayingInfoAndCallPendingCompletions];
  }
}

void sub_1001492D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149440(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100149464(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = [WeakRetained magicMomentCompletionHandlers];

  objc_sync_enter(v6);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = objc_loadWeakRetained(v4);
  [v7 magicMomentCompletionHandlers];

  id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v15;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v8);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v14 + 1) + 8 * (void)v11) + 16))();
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v9);
  }

  id v12 = objc_loadWeakRetained(v4);
  id v13 = [v12 magicMomentCompletionHandlers];
  [v13 removeAllObjects];

  MRMediaRemoteSetWantsNowPlayingNotifications();
  objc_sync_exit(v6);
}

void sub_1001495F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100149758(uint64_t a1)
{
  MRPlaybackQueueGetContentItemAtOffset();
  uint64_t v2 = MRContentItemCopyNowPlayingInfo();
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = v2;
    uint64_t v3 = (*(uint64_t (**)(void))(v3 + 16))();
    uint64_t v2 = v5;
  }

  return _objc_release_x1(v3, v2);
}

void sub_100149AB0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v5 = _MTLogCategoryPlayback();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v10 = 134217984;
      uint64_t v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to set playback queue: MediaRemote command failed with MRSendCommandError: %ld", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, 2, a2);
    }
  }
  else
  {
    id v7 = [a3 firstObject];
    unsigned int v8 = [v7 unsignedIntValue];
    if (v8)
    {
      id v9 = _MTLogCategoryPlayback();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = 134217984;
        uint64_t v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to set playback queue: MediaRemote command failed with MRMediaRemoteCommandHandlerStatus: %ld", (uint8_t *)&v10, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100149FCC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) visible])
  {
    uint64_t v2 = [*(id *)(a1 + 32) vc];
    uint64_t v3 = [v2 view];

    id v4 = [objc_alloc((Class)UIActivityIndicatorView) initWithActivityIndicatorStyle:101];
    [*(id *)(a1 + 32) setSpinner:v4];

    uint64_t v5 = [*(id *)(a1 + 32) spinner];
    [v5 startAnimating];

    id v6 = [objc_alloc((Class)UILabel) initWithFrame:CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height];
    [*(id *)(a1 + 32) setLabel:v6];

    id v7 = [*(id *)(a1 + 32) label];
    unsigned int v8 = +[UIFont systemFontOfSize:16.0];
    [v7 setFont:v8];

    id v9 = [*(id *)(a1 + 32) label];
    int v10 = +[UIColor secondaryLabelColor];
    [v9 setTextColor:v10];

    uint64_t v11 = [*(id *)(a1 + 32) label];
    [v11 setTextAlignment:1];

    id v12 = [*(id *)(a1 + 32) label];
    [v12 setNumberOfLines:0];

    id v13 = [*(id *)(a1 + 32) label];
    long long v14 = +[UIColor clearColor];
    [v13 setBackgroundColor:v14];

    long long v15 = [*(id *)(a1 + 32) label];
    long long v16 = +[NSBundle mainBundle];
    long long v17 = [v16 localizedStringForKey:@"UPDATING_LIBRARY" value:&stru_10056A8A0 table:0];
    [v15 setText:v17];

    id v18 = [*(id *)(a1 + 32) spinner];
    [v3 addSubview:v18];

    id v19 = [*(id *)(a1 + 32) label];
    [v3 addSubview:v19];

    long long v20 = [*(id *)(a1 + 32) view];
    [v20 setNeedsLayout];

    long long v21 = [*(id *)(a1 + 32) view];
    [v21 layoutIfNeeded];

    long long v22 = [*(id *)(a1 + 32) spinner];
    [v22 setAlpha:0.0];

    long long v23 = [*(id *)(a1 + 32) label];
    [v23 setAlpha:0.0];

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10014A2F0;
    v24[3] = &unk_10054D570;
    void v24[4] = *(void *)(a1 + 32);
    +[UIView animateWithDuration:v24 animations:0.2];
  }
}

void sub_10014A2F0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) spinner];
  [v2 setAlpha:1.0];

  id v3 = [*(id *)(a1 + 32) label];
  [v3 setAlpha:1.0];
}

void sub_10014B2B0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) tableView];
  [v1 setAdjustContentOffsetForRefreshControlAsNeeded:0];
}

void sub_10014B2F8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) refreshControl];
  unsigned __int8 v3 = [v2 isRefreshing];

  if ((v3 & 1) == 0)
  {
    id v4 = [*(id *)(a1 + 32) refreshControl];
    [v4 beginRefreshing];

    id v5 = [*(id *)(a1 + 32) refreshControl];
    [v5 endRefreshing];
  }
}

void sub_10014BCA4(uint64_t a1)
{
  uint64_t v2 = +[NSUserDefaults standardUserDefaults];
  unsigned __int8 v3 = [(id)objc_opt_class() defaultsKey];
  id v7 = [v2 objectForKey:v3];

  id v4 = [*(id *)(a1 + 32) selectedUuid];
  if (v7 == v4)
  {
  }
  else
  {
    id v5 = [*(id *)(a1 + 32) selectedUuid];
    unsigned __int8 v6 = [v7 isEqualToString:v5];

    if ((v6 & 1) == 0) {
      [*(id *)(a1 + 32) restoreSelection];
    }
  }
}

void sub_10014C460(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 description];
  [v4 setValue:v6 forKey:v5];
}

CGFloat sub_10014D0C4(int a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  return sub_10014D0E8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0.0);
}

CGFloat sub_10014D0E8(int a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  if (((a2 & 0xFFFFFFFFFFFFFFFDLL) != 1) != ((a3 & 0xFFFFFFFFFFFFFFFDLL) == 1))
  {
    switch(a3)
    {
      case 0:
        v31.origin.x = a8;
        v31.origin.y = a9;
        v31.size.width = a10;
        v31.size.height = a11;
        double MinY = CGRectGetMinY(v31);
        goto LABEL_12;
      case 1:
        if (a1) {
          goto LABEL_8;
        }
        goto LABEL_11;
      case 2:
        v33.origin.x = a8;
        v33.origin.y = a9;
        v33.size.width = a10;
        v33.size.height = a11;
        double MinY = CGRectGetMaxY(v33);
        goto LABEL_12;
      case 3:
        if (a1)
        {
LABEL_11:
          v34.origin.x = a8;
          v34.origin.y = a9;
          v34.size.width = a10;
          v34.size.height = a11;
          double MinY = CGRectGetMinX(v34);
        }
        else
        {
LABEL_8:
          v32.origin.x = a8;
          v32.origin.y = a9;
          v32.size.width = a10;
          v32.size.height = a11;
          double MinY = CGRectGetMaxX(v32);
        }
LABEL_12:
        double v17 = MinY;
        break;
      default:
        break;
    }
    v35.origin.x = a4;
    v35.origin.y = a5;
    v35.size.width = a6;
    v35.size.height = a7;
    CGRectGetMinY(v35);
    v36.origin.x = a4;
    v36.origin.y = a5;
    v36.size.width = a6;
    v36.size.height = a7;
    double MinX = CGRectGetMinX(v36);
    v37.origin.x = a4;
    v37.origin.y = a5;
    v37.size.width = a6;
    v37.size.height = a7;
    double Width = CGRectGetWidth(v37);
    v38.origin.x = a4;
    v38.origin.y = a5;
    v38.size.width = a6;
    v38.size.height = a7;
    CGRectGetHeight(v38);
    switch(a2)
    {
      case 1:
        double v28 = 0.0;
        if (a1) {
          double v28 = Width;
        }
        goto LABEL_19;
      case 3:
        double v28 = 0.0;
        if (!a1) {
          double v28 = Width;
        }
LABEL_19:
        double MinX = v17 + a12 - v28;
        break;
      default:
        return MinX;
    }
  }
  else
  {
    id v25 = _MTLogCategoryDefault();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Incompatible Edges", v30, 2u);
    }

    return a4;
  }
  return MinX;
}

void sub_10014D80C(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  uint64_t v2 = (void *)qword_10060A948;
  qword_10060A948 = (uint64_t)v1;

  [(id)qword_10060A948 setDateStyle:0];
  unsigned __int8 v3 = (void *)qword_10060A948;

  [v3 setTimeStyle:1];
}

void sub_10014DA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) _responseForMediaRemoteStatus:a2 error:a3];
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

uint64_t sub_10014DC3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v12 = [a4 mutableCopy];
  id v7 = [*(id *)(a1 + 32) _intentWantsPlaybackQueueIncludedInNowPlayingInfo:*(void *)(a1 + 40)];
  if (v7)
  {
    +[MTExtensionPlaybackController playbackQueueForIdentifier:*(void *)(a1 + 48) startPlayback:1 assetInfo:0];
    unsigned int v8 = MRSystemAppPlaybackQueueCreateExternalRepresentation();
    if (v8) {
      [v12 setObject:v8 forKey:kMRMediaRemoteOptionSystemAppPlaybackQueueData];
    }
    MRSystemAppPlaybackQueueDestroy();
  }
  id v9 = v12;
  if (*(void *)(a1 + 56))
  {
    int v10 = [*(id *)(a1 + 32) _responseForMediaRemoteStatus:a2 error:a3];
    [v10 setNowPlayingInfo:v12];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

    id v9 = v12;
  }

  return _objc_release_x1(v7, v9);
}

void sub_10014EA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014EA20(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = kMTEpisodeEntityName;
  id v4 = +[MTEpisode predicateForListenNow];
  id v9 = [v2 objectsInEntity:v3 predicate:v4 sortDescriptors:a1[5] returnsObjectsAsFaults:0 limit:1];

  id v5 = [v9 firstObject];
  uint64_t v6 = [v5 uuid];
  uint64_t v7 = *(void *)(a1[6] + 8);
  unsigned int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_10014ED6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014ED8C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v6 = v2;
    uint64_t v4 = (uint64_t)[v2 hidden];
    uint64_t v3 = v6;
  }
  else
  {
    uint64_t v4 = 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v4;

  return _objc_release_x1(v4, v3);
}

void sub_10014F020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014F038(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) playlistForUuid:*(void *)(a1 + 40)];
  uint64_t v2 = [v6 nextEpisode];
  uint64_t v3 = [v2 uuid];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10014F6C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10014F734(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  uint64_t v2 = [v5 podcastUuid];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10014F7A0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) episodeForUuid:*(void *)(a1 + 40)];
  switch(*(void *)(a1 + 56))
  {
    case 1:
    case 4:
      uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v4 = 6;
      goto LABEL_4;
    case 5:
      uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v4 = 9;
LABEL_4:
      *(void *)(v3 + 24) = v4;
      break;
    case 6:
      id v10 = v2;
      id v5 = [v2 podcast];
      unsigned int v6 = [v5 playbackNewestToOldest];

      if (v6) {
        uint64_t v7 = 11;
      }
      else {
        uint64_t v7 = 12;
      }
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v7;
      uint64_t v2 = v10;
      break;
    default:
      id v11 = v2;
      BOOL v8 = [v2 isInUserEpisodes] == 0;
      uint64_t v2 = v11;
      uint64_t v9 = 6;
      if (!v8) {
        uint64_t v9 = 9;
      }
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v9;
      break;
  }
}

void sub_10014FBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014FC08(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  if ([v4 hidden])
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
  }
}

void sub_10014FDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014FE10(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 56);
  id v8 = v2;
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(unsigned char *)(a1 + 65)) {
      [v2 newestUserEpisodeExcludingExplicit:v3];
    }
    else {
      [v2 oldestUserEpisodeExcludingExplicit:v3];
    }
  }
  else if (*(unsigned char *)(a1 + 65))
  {
    [v2 newestEpisodeExcludingUuid:0 excludeExplicit:v3];
  }
  else
  {
    [v2 oldestEpisodeExcludingExplicit:v3];
  id v4 = };
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id v6 = v4;
  uint64_t v7 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v6;
}

void sub_10014FFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015000C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) uuid];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_10015043C(id a1)
{
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v1 = +[NSArray arrayWithObjects:&v4 count:5];
  uint64_t v2 = +[NSSet setWithArray:](NSSet, "setWithArray:", v1, v4, v5, v6, v7);
  uint64_t v3 = (void *)qword_10060A960;
  qword_10060A960 = v2;
}

void sub_1001521F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setBool:a2 forKey:kMTImageProviderMigrationHasOccurred];
  uint64_t v6 = _MTLogCategoryArtworkDownload();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "ImageProvider Migration Complete", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 40) _removeImageStoreContent];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to complete library artwork migration to image provider: %@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1001525B0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = kMTPodcastPlaylistSettingsEntityName;
  uint64_t v3 = +[NSPredicate truePredicate];
  uint64_t v4 = [v1 objectsInEntity:v2 predicate:v3 sortDescriptors:0];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        [v10 latestEpisodeDate];
        [v10 setLatestEpisodeAvailabilityDate:];
        [v10 oldestEpisodeDate];
        [v10 setEarliestEpisodeAvailabilityDate];
      }
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v7);
  }
}

void sub_1001527A8(uint64_t a1)
{
  v13[0] = @"PlaylistOnTheGo";
  v13[1] = @"PlaylistMostRecent";
  id v13[2] = @"PlaylistAllUnplayed";
  +[NSArray arrayWithObjects:v13 count:3];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = [*(id *)(a1 + 32) playlistForUuid:*(void *)(*((void *)&v8 + 1) + 8 * (void)v6) v8];
        [v7 setIsUngroupedList:1];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_1001529EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) playlistForUuid:@"PlaylistOnTheGo"];
  if ((os_feature_enabled_bluemoon() & 1) == 0)
  {
    id v3 = +[MTPlayerController defaultInstance];
    id v4 = [v3 upNextController];
    [v4 beginUpdates];

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v5 = [v2 episodes];
    id v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v24;
      do
      {
        long long v9 = 0;
        do
        {
          if (*(void *)v24 != v8) {
            objc_enumerationMutation(v5);
          }
          long long v10 = *(void **)(*((void *)&v23 + 1) + 8 * (void)v9);
          long long v11 = +[MTPlayerController defaultInstance];
          long long v12 = [v11 upNextController];
          long long v13 = [v10 uuid];
          [v12 addEpisodeUuidToUpNext:v13];

          long long v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v7);
    }

    long long v14 = +[MTPlayerController defaultInstance];
    long long v15 = [v14 upNextController];
    [v15 endUpdates];
  }
  long long v16 = +[MTLibrary sharedInstance];
  [v16 deletePlaylist:v2];

  double v17 = +[NSBundle mainBundle];
  id v18 = [v17 localizedStringForKey:@"All Unplayed" value:&stru_10056A8A0 table:0];

  id v19 = [*(id *)(a1 + 32) playlistForUuid:@"PlaylistAllUnplayed"];
  [*(id *)(a1 + 40) deleteOrUpdatePlaylist:v19 ifIsDefault:[*(id *)(a1 + 40) isDefaultSettingsForPlaylist:v19 title:v18 episodesToShow:0 showPlayedEpisodes:0 includeAllPodcasts:1]];
  long long v20 = +[NSBundle mainBundle];
  long long v21 = [v20 localizedStringForKey:@"MOST_RECENT_PLURAL" value:&stru_10056A8A0 table:0];

  long long v22 = [*(id *)(a1 + 32) playlistForUuid:@"PlaylistMostRecent"];
  [*(id *)(a1 + 40) deleteOrUpdatePlaylist:v22 ifIsDefault:[*(id *)(a1 + 40) isDefaultSettingsForPlaylist:v22 title:v21 episodesToShow:1 showPlayedEpisodes:1 includeAllPodcasts:1]];
}

void sub_100153528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100153540(uint64_t a1)
{
  id v2 = +[MTEpisode predicateForPodcastIsSubscribed:0];
  id v3 = +[MTEpisode predicateForBookmarkedEpisodes];
  id v4 = +[MTEpisode predicateForDownloaded:1 excludeHidden:0];
  uint64_t v5 = [v3 OR:v4];
  id v6 = [v2 AND:v5];

  id v7 = objc_alloc((Class)NSFetchRequest);
  id v8 = [v7 initWithEntityName:kMTEpisodeEntityName];
  [v8 setPredicate:v6];
  id v9 = [*(id *)(a1 + 32) countForFetchRequest:v8 error:0];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (uint64_t)v9 > 0;
  long long v10 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v12 = 134218240;
    id v13 = v9;
    __int16 v14 = 1024;
    int v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) migrateShowListToggle: There are %li library episodes, setting flag to %i", (uint8_t *)&v12, 0x12u);
  }
}

void sub_1001538B0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[MTPodcast predicateForNotHiddenPodcasts];
  id v4 = [v2 objectsInEntity:kMTPodcastEntityName predicate:v3 sortDescriptors:0 returnsObjectsAsFaults:0];

  uint64_t v5 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Running migration on podcasts.", buf, 2u);
  }

  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id obj = v4;
  id v38 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
  if (v38)
  {
    uint64_t v37 = *(void *)v48;
    uint64_t v34 = kMTEpisodeEntityName;
    uint64_t v35 = kEpisodePubDate;
    uint64_t v41 = kEpisodePodcast;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v48 != v37)
        {
          uint64_t v7 = v6;
          objc_enumerationMutation(obj);
          uint64_t v6 = v7;
        }
        uint64_t v39 = v6;
        id v42 = *(void **)(*((void *)&v47 + 1) + 8 * v6);
        id v8 = _MTLogCategoryDatabase();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          id v9 = [v42 uuid];
          uint64_t v10 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138543618;
          id v54 = v9;
          __int16 v55 = 2048;
          uint64_t v56 = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Running migration on podcast with uuid %{public}@ and version %ld.", buf, 0x16u);
        }
        if ([*(id *)(a1 + 48) runMigrationForPodcast:v42 version:*(void *)(a1 + 40)])
        {
          int v11 = _MTLogCategoryDatabase();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            int v12 = [v42 uuid];
            *(_DWORD *)buf = 138543362;
            id v54 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[Migration] (Data) Skipping migration for podcast with uuid %{public}@ because it was deleted.", buf, 0xCu);
          }
        }
        else if (*(uint64_t *)(a1 + 40) < 32)
        {
          __int16 v14 = *(void **)(a1 + 32);
          int v15 = [v42 uuid];
          long long v16 = +[MTEpisode predicateForAllEpisodesOnPodcastUuid:v15];
          double v17 = +[NSSortDescriptor sortDescriptorWithKey:v35 ascending:0];
          id v52 = v17;
          id v18 = +[NSArray arrayWithObjects:&v52 count:1];
          id v19 = [v14 objectsInEntity:v34 predicate:v16 sortDescriptors:v18 returnsObjectsAsFaults:0];

          long long v20 = _MTLogCategoryDatabase();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            long long v21 = [v42 uuid];
            *(_DWORD *)buf = 138543362;
            id v54 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Running migration on episodes for podcast with uuid: %{public}@", buf, 0xCu);
          }
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          int v11 = v19;
          id v22 = [v11 countByEnumeratingWithState:&v43 objects:v51 count:16];
          if (v22)
          {
            uint64_t v40 = 0;
            uint64_t v23 = *(void *)v44;
            do
            {
              for (uint64_t i = 0; i != v22; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v44 != v23) {
                  objc_enumerationMutation(v11);
                }
                long long v25 = *(void **)(*((void *)&v43 + 1) + 8 * i);
                long long v26 = [v25 podcastUuid];
                uint64_t v27 = [v25 podcast];
                double v28 = [v27 uuid];
                unsigned __int8 v29 = [v26 isEqualToString:v28];

                if ((v29 & 1) == 0)
                {
                  [v25 setPrimitiveValue:0 forKey:v41];
                  [v25 setPodcast:v42];
                }
                switch(*(void *)(a1 + 40))
                {
                  case 0:
                    [*(id *)(a1 + 48) episodeMigrationForVersion0to1:v25];
                    goto LABEL_27;
                  case 1:
                  case 2:
LABEL_27:
                    [v25 setEpisodeLevel:v40++];
                    goto LABEL_28;
                  case 3:
                  case 4:
                  case 5:
                  case 6:
LABEL_28:
                    [*(id *)(a1 + 48) episodeMigrationForVersion6to7:v25];
                    goto LABEL_29;
                  case 7:
                  case 8:
                  case 9:
                  case 0xALL:
                  case 0xBLL:
                  case 0xCLL:
                  case 0xDLL:
LABEL_29:
                    [*(id *)(a1 + 48) episodeMigrationForVersion13to14:v25];
                    goto LABEL_30;
                  case 0xELL:
                  case 0xFLL:
                  case 0x10:
LABEL_30:
                    [*(id *)(a1 + 48) episodeMigrationForVersion16to17:v25];
                    goto LABEL_31;
                  case 0x11:
LABEL_31:
                    [*(id *)(a1 + 48) episodeMigrationForVersion17to18:v25];
                    goto LABEL_32;
                  case 0x12:
                  case 0x13:
                  case 0x14:
                  case 0x15:
LABEL_32:
                    [*(id *)(a1 + 48) episodeMigrationForVersion21to22:v25];
                    goto LABEL_33;
                  case 0x16:
                  case 0x17:
LABEL_33:
                    [*(id *)(a1 + 48) episodeMigrationForVersion23to24:v25];
                    goto LABEL_34;
                  case 0x18:
LABEL_34:
                    [*(id *)(a1 + 48) episodeMigrationForVersion24to25:v25];
                    goto LABEL_35;
                  case 0x19:
                  case 0x1ALL:
                  case 0x1BLL:
                  case 0x1CLL:
                  case 0x1DLL:
LABEL_35:
                    [*(id *)(a1 + 48) episodeMigrationForVersion29to30:v25];
                    break;
                  default:
                    break;
                }
              }
              id v22 = [v11 countByEnumeratingWithState:&v43 objects:v51 count:16];
            }
            while (v22);
          }

          CGRect v31 = _MTLogCategoryDatabase();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            CGRect v32 = [v42 uuid];
            *(_DWORD *)buf = 138543362;
            id v54 = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Finished migration for episodes for podcast with uuid: %{public}@", buf, 0xCu);
          }
        }
        else
        {
          int v11 = _MTLogCategoryDatabase();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            id v13 = [v42 uuid];
            *(_DWORD *)buf = 138543362;
            id v54 = v13;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[Migration] (Data) Version is >= 32, skipping episodes migration for podcast with uuid %{public}@", buf, 0xCu);
          }
        }

        uint64_t v6 = v39 + 1;
      }
      while ((id)(v39 + 1) != v38);
      id v38 = [obj countByEnumeratingWithState:&v47 objects:v57 count:16];
    }
    while (v38);
  }

  CGRect v33 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) Finished migration for podcasts.", buf, 2u);
  }
}

void sub_100153FE8(_Unwind_Exception *a1)
{
}

void sub_100154238(uint64_t a1)
{
  [*(id *)(a1 + 32) executeFetchRequest:*(void *)(a1 + 40)];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = (char *)[v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v13;
    do
    {
      unint64_t v7 = 0;
      int v11 = v5;
      id v8 = v5 + 1;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v2);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8 * v7);
        [v9 setStoreTrackId:+[MTStoreIdentifier serpentIdFromAdamId:](MTStoreIdentifier, "serpentIdFromAdamId:", [v9 storeTrackId])];
        if (!((unint64_t)&v8[v7] % (unint64_t)[*(id *)(a1 + 40) fetchBatchSize])) {
          [*(id *)(a1 + 32) saveInCurrentBlock];
        }
        ++v7;
      }
      while (v4 != (char *)v7);
      uint64_t v5 = &v4[(void)v11];
      id v4 = (char *)[v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
}

void sub_100154E58(id *a1)
{
  id v2 = [a1[4] executeFetchRequest:a1[5]];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v10;
    do
    {
      unint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v7) resolveAvailabilityDate];
        if (!(((unint64_t)v7 + v5 + 1) % (unint64_t)[a1[5] fetchBatchSize])) {
          [a1[4] saveInCurrentBlock];
        }
        unint64_t v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      v5 += (uint64_t)v4;
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  id v8 = [a1[6] newestEpisodeByAvailabiltyTime];
  [v8 firstTimeAvailable];
  [a1[6] setLatestEpisodeAvailabilityTime:];
}

void sub_10015505C(uint64_t a1)
{
  id v3 = objc_alloc_init((Class)MTEpisodeLevelCalculator);
  id v2 = [*(id *)(a1 + 32) uuid];
  [v3 unsafeUpdateEpisodeShowTypeSpecificLevelsWithShowUUID:v2 on:*(void *)(a1 + 40)];
}

id *sub_100156490(id *result)
{
  uint64_t v1 = result;
  switch((unint64_t)result[5])
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
      [result[6] allEpisodesMigrationForVersion40to41In:result[4]];
      goto LABEL_3;
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
LABEL_3:
      [v1[6] allEpisodesMigrationForVersion43to44In:v1[4]];
      goto LABEL_4;
    case 0x2CuLL:
    case 0x2DuLL:
LABEL_4:
      [v1[6] allEpisodesMigrationForVersion45to46In:v1[4]];
      goto LABEL_5;
    case 0x2EuLL:
LABEL_5:
      [v1[6] allEpisodesMigrationForVersion46to47In:v1[4]];
      goto LABEL_6;
    case 0x2FuLL:
LABEL_6:
      [v1[6] allEpisodesMigrationForVersion47to48In:v1[4]];
      goto LABEL_7;
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
LABEL_7:
      [v1[6] allEpisodesMigrationForVersion51to52In:v1[4]];
      goto LABEL_8;
    case 0x35uLL:
    case 0x36uLL:
LABEL_8:
      [v1[6] allEpisodesMigrationForVersion53to54In:v1[4]];
      goto LABEL_9;
    case 0x37uLL:
LABEL_9:
      [v1[6] allEpisodesMigrationForVersion54to55In:v1[4]];
      goto LABEL_10;
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
LABEL_10:
      [v1[6] allEpisodesMigrationForVersion59to60In:v1[4]];
      goto LABEL_11;
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
    case 0x40uLL:
    case 0x41uLL:
LABEL_11:
      [v1[6] allEpisodesMigrationForVersion65to66In:v1[4]];
      goto LABEL_12;
    case 0x42uLL:
    case 0x43uLL:
    case 0x44uLL:
LABEL_12:
      id v2 = v1[6];
      id v3 = v1[4];
      uint64_t result = (id *)_[v2 allEpisodesMigrationForVersion68to69In:v3];
      break;
    default:
      return result;
  }
  return result;
}

void sub_1001569E0(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        unint64_t v7 = [v6 podcast:v8];
        [v7 modifiedDate];
        +[MTRecencyUtil scoreFromModifiedDate:](MTRecencyUtil, "scoreFromModifiedDate:");
        [v6 setModifiedDateScore:];
      }
      id v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
}

void sub_10015792C(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        [*(id *)(*((void *)&v6 + 1) + 8 * (void)v5) setDownloadBehavior:4 v6];
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_10015848C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001584A4(uint64_t a1)
{
  id v2 = +[NSSortDescriptor sortDescriptorWithKey:kEpisodeLastDatePlayed ascending:0];
  v20[0] = v2;
  id v3 = +[NSSortDescriptor sortDescriptorWithKey:kEpisodePersistentID ascending:0];
  v20[1] = v3;
  uint64_t v4 = +[NSSortDescriptor sortDescriptorWithKey:kEpisodeAssetURL ascending:0];
  id v20[2] = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:v20 count:3];

  uint64_t v6 = kMTEpisodeEntityName;
  long long v7 = +[MTEpisode predicateForAudio:0];
  uint64_t v19 = kEpisodePodcastUuid;
  long long v8 = +[NSArray arrayWithObjects:&v19 count:1];
  v18[0] = kEpisodeGuid;
  v18[1] = kEpisodeEnclosureUrl;
  long long v9 = +[NSArray arrayWithObjects:v18 count:2];
  uint64_t v10 = kEpisodeUuid;
  uint64_t v17 = kEpisodeUuid;
  long long v11 = +[NSArray arrayWithObjects:&v17 count:1];
  long long v12 = +[PFCoreDataUtils findDuplicateItemsWithEntity:v6 itemsToLookAtFilter:v7 keysThatMustMatchToBeConsideredADuplicate:v8 keysThatShouldNotBeDuplicated:v9 keyValuesOfDuplicatedItemsToReturn:v11 sortDescriptors:v5];

  long long v13 = [v12 objectForKeyedSubscript:v10];
  uint64_t v14 = +[NSSet setWithArray:v13];
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;
}

void sub_100158898(uint64_t a1)
{
  [*(id *)(a1 + 32) executeFetchRequest:*(void *)(a1 + 40)];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v30 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v30)
  {
    uint64_t v29 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v30; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v34 != v29) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        uint64_t v4 = [v3 assetURL];
        uint64_t v5 = +[NSURL URLWithString:v4];
        uint64_t v6 = [v5 path];

        long long v7 = +[MTConstants managedAssetsDirectoryURL];
        long long v8 = [v3 uuid];
        long long v9 = [v7 URLByAppendingPathComponent:v8 isDirectory:0];
        uint64_t v10 = [v6 pathExtension];
        long long v11 = [v9 URLByAppendingPathExtension:v10];
        long long v12 = [v11 path];

        if ([v6 isEqualToString:v12])
        {
          long long v13 = _MTLogCategoryDatabase();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = [v3 uuid];
            *(_DWORD *)buf = 138543618;
            id v38 = v6;
            __int16 v39 = 2114;
            uint64_t v40 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) (Watch) No need to remove existing file with same old and new path %{public}@ for episode %{public}@", buf, 0x16u);
          }
        }
        else
        {
          if ([*(id *)(a1 + 48) fileExistsAtPath:v12])
          {
            uint64_t v15 = _MTLogCategoryDatabase();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              long long v16 = [v3 uuid];
              *(_DWORD *)buf = 138543618;
              id v38 = v12;
              __int16 v39 = 2114;
              uint64_t v40 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) (Watch) Will remove existing file at path %{public}@ for episode %{public}@", buf, 0x16u);
            }
            uint64_t v17 = *(void **)(a1 + 48);
            id v32 = 0;
            unsigned __int8 v18 = [v17 removeItemAtPath:v12 error:&v32];
            uint64_t v19 = v32;
            if ((v18 & 1) == 0)
            {
              long long v20 = _MTLogCategoryDatabase();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                long long v21 = [v3 uuid];
                *(_DWORD *)buf = 138543618;
                id v38 = v21;
                __int16 v39 = 2112;
                uint64_t v40 = v19;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[Migration] (Data) (Watch) Failed to remove existing file for episode %{public}@ - %@", buf, 0x16u);
              }
            }
          }
          id v22 = *(void **)(a1 + 48);
          id v31 = 0;
          unsigned __int8 v23 = [v22 moveItemAtPath:v6 toPath:v12 error:&v31];
          long long v13 = v31;
          if ((v23 & 1) == 0)
          {
            long long v24 = _MTLogCategoryDatabase();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              long long v25 = [v3 uuid];
              *(_DWORD *)buf = 138543618;
              id v38 = v25;
              __int16 v39 = 2112;
              uint64_t v40 = v13;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[Migration] (Data) (Watch) Failed to move asset for episode %{public}@ - %@", buf, 0x16u);
            }
            long long v12 = 0;
          }
          long long v26 = _MTLogCategoryDatabase();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = [v3 uuid];
            *(_DWORD *)buf = 138543618;
            id v38 = v27;
            __int16 v39 = 2114;
            uint64_t v40 = v12;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[Migration] (Data) (Watch) Updated asset url for episode %{public}@ to %{public}@", buf, 0x16u);
          }
          [v3 setAssetURL:v12];
        }
      }
      id v30 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v30);
  }
}

uint64_t sub_100158F18(uint64_t a1)
{
  id v2 = +[MPMediaQuery mt_allItemsForPodcastsApp];
  [*(id *)(a1 + 32) deleteItems:v2];

  return 1;
}

void sub_100158F60(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v11 = 0;
  id v3 = [v2 executeRequest:v1 error:&v11];
  id v4 = v11;
  uint64_t v5 = _MTLogCategoryDatabase();
  uint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v4;
      long long v7 = "[Migration] (Data) (Watch) Batch update for medialibrary episode removal failed %@";
      long long v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
      uint32_t v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, buf, v10);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    long long v7 = "[Migration] (Data) (Watch) Set all persistent IDs to 0";
    long long v8 = v6;
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    uint32_t v10 = 2;
    goto LABEL_6;
  }
}

void sub_1001591F0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v14 = 0;
  id v4 = [v2 executeRequest:v3 error:&v14];
  id v5 = v14;
  uint64_t v6 = _MTLogCategoryDatabase();
  long long v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109378;
      int v16 = v8;
      __int16 v17 = 2112;
      id v18 = v5;
      os_log_type_t v9 = "[Migration] (Data) Failed to prune persistent history older than %d days old - %@";
      uint32_t v10 = v7;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 18;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109120;
    int v16 = v13;
    os_log_type_t v9 = "[Migration] (Data) Did prune persistent history older than %d days old";
    uint32_t v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    uint32_t v12 = 8;
    goto LABEL_6;
  }
}

void sub_100159438(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:0 sortDescriptors:0];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001594EC;
  void v3[3] = &unk_1005531C8;
  id v4 = *(id *)(a1 + 32);
  [v2 enumerateObjectsUsingBlock:v3];
}

void sub_1001594EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isItunesPlaylist] & 1) == 0
    && ([v3 isItunesSmartPlaylist] & 1) == 0)
  {
    id v4 = [v3 uuid];
    if ([v4 isEqualToString:kPlaylistITunesPlaylistUuid])
    {
LABEL_13:

      goto LABEL_14;
    }
    id v5 = [v3 uuid];
    unsigned __int8 v6 = [v5 isEqualToString:@"PlaylistOnTheGo"];

    if ((v6 & 1) == 0)
    {
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v7 = [v3 settings];
      id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v14;
        do
        {
          os_log_type_t v11 = 0;
          do
          {
            if (*(void *)v14 != v10) {
              objc_enumerationMutation(v7);
            }
            [*(id *)(*((void *)&v13 + 1) + 8 * (void)v11) setNeedsUpdate:1];
            os_log_type_t v11 = (char *)v11 + 1;
          }
          while (v9 != v11);
          id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v9);
      }

      id v4 = +[MTBaseProcessor sharedInstance];
      uint32_t v12 = [v3 uuid];
      [v4 updatePlaylistWithUuid:v12 inContext:*(void *)(a1 + 32)];

      goto LABEL_13;
    }
  }
LABEL_14:
}

void sub_10015A600(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v16 = 0;
  id v15 = 0;
  [v3 getResourceValue:&v16 forKey:NSURLContentTypeKey error:&v15];
  id v4 = v16;
  id v5 = v15;
  unsigned __int8 v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && ([v4 conformsToType:UTTypeImage] & 1) != 0)
  {
    id v8 = +[MTImageStoreConstants fileExtension];
    id v9 = [v3 URLByDeletingPathExtension];
    uint64_t v10 = [v9 URLByAppendingPathExtension:v8];

    if ((![v4 isEqual:*(void *)(a1 + 32)]
       || ([v3 isEqual:v10] & 1) == 0)
      && (os_log_type_t v11 = *(void **)(a1 + 40),
          [v4 identifier],
          uint32_t v12 = objc_claimAutoreleasedReturnValue(),
          LODWORD(v11) = [v11 copyImageFromSourceUrl:v3 sourceFileType:v12 to:v10 discardTransparency:0 enforceSquare:0 maxDimensionInPixels:1.79769313e308], v12, !v11)|| (objc_msgSend(v3, "isEqual:", v10) & 1) == 0)
    {
      long long v13 = +[NSFileManager defaultManager];
      [v13 removeItemAtURL:v3 error:0];
    }
  }
  else
  {
    long long v14 = +[IMLogger sharedLogger];
    [v14 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/Migration/MTLibraryMigrator.m", 2857, @"Cannot convert the file of type %@ at URL %@. Ignoring. Error %@", v4, v3, v6 lineNumber format];

    id v8 = +[NSFileManager defaultManager];
    [v8 removeItemAtURL:v3 error:0];
  }
}

void sub_10015AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10015AB1C(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 48) _fetchRequestForMostRecentlyPlayedEpisode];
  id v2 = [*(id *)(a1 + 32) executeFetchRequest:v7];
  id v3 = [v2 firstObject];

  uint64_t v4 = [v3 objectForKey:kPodcastLastDatePlayed];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned __int8 v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10015B768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10015B798(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = v2;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 deletePlayedEpisodesResolvedValue];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v3 episodeLimitResolvedValue];
    id v2 = v3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
}

void sub_10015BAC8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [v1 episodeUuids];
  [v1 _removeDownloadAssetsForEpisodeUuids:v2 reason:@"removal process became enabled"];
}

BOOL sub_10015BC90(id a1, MTEpisode *a2)
{
  id v2 = a2;
  id v3 = [(MTEpisode *)v2 assetURL];
  if (v3)
  {
    uint64_t v4 = +[NSURL URLWithString:v3];
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      unsigned __int8 v6 = +[MTConstants managedAssetsDirectoryURL];
      id v7 = [v6 URLByStandardizingPath];

      if (!v7)
      {
        uint64_t v11 = _MTLogCategoryDownload();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v20) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Uh oh, no managedAssetsDirectoryURL found", (uint8_t *)&v20, 2u);
        }

        uint32_t v12 = _MTLogCategoryDefault();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v20) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Uh oh, no managedAssetsDirectoryURL found", (uint8_t *)&v20, 2u);
        }
        BOOL v10 = 1;
        goto LABEL_20;
      }
      id v8 = [v5 URLByStandardizingPath];

      id v9 = [v8 scheme];
      if ([v9 isEqualToString:@"ipod-library"])
      {
      }
      else
      {
        uint64_t v13 = [v8 path];
        long long v14 = [v7 path];
        unsigned __int8 v15 = [v13 hasPrefix:v14];

        if ((v15 & 1) == 0)
        {
          uint32_t v12 = _MTLogCategoryDownload();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = [(MTEpisode *)v2 title];
            id v18 = [v8 absoluteString];
            int v20 = 138543618;
            long long v21 = v17;
            __int16 v22 = 2114;
            unsigned __int8 v23 = v18;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Skipping asset auto-deletion (asset not in managed folder) of episode '%{public}@' url %{public}@", (uint8_t *)&v20, 0x16u);
          }
          BOOL v10 = 1;
          goto LABEL_19;
        }
      }
      uint32_t v12 = _MTLogCategoryDownload();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = [(MTEpisode *)v2 title];
        int v20 = 138543362;
        long long v21 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Allowing asset auto-deletion (in managed folder) of episode '%{public}@'", (uint8_t *)&v20, 0xCu);
      }
      BOOL v10 = 0;
LABEL_19:
      uint64_t v5 = v8;
LABEL_20:

      goto LABEL_21;
    }
  }
  BOOL v10 = 0;
LABEL_21:

  return v10;
}

void sub_10015C2AC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!v4) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  id v3 = [[MTUnplayedManifest alloc] initWithInitialEpisodeUuid:v4];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10015C4E4(id a1)
{
  v3[0] = kPodcastFeedUrl;
  v3[1] = kPodcastSubscribed;
  v3[2] = kPodcastTitle;
  void v3[3] = kPodcastUpdatedDate;
  void v3[4] = kPodcastAddedDate;
  void v3[5] = kPodcastStoreCollectionId;
  void v3[6] = kPodcastPlaybackNewestToOldest;
  v3[7] = kPodcastDarkCount;
  v3[8] = kPodcastLastTouchDate;
  v3[9] = kPodcastUuid;
  v3[10] = kPodcastSortAscending;
  void v3[11] = kPodcastShowTypeSetting;
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:12];
  id v2 = (void *)qword_10060A970;
  qword_10060A970 = v1;
}

void sub_10015D710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

id sub_10015D740(uint64_t a1)
{
  id v2 = +[NSMutableSet set];
  [*(id *)(a1 + 32) setAddedSubscriptions:v2];

  [*(id *)(a1 + 32) markAllShowsAsSynced];
  id v3 = [*(id *)(a1 + 32) storageProvider];
  [v3 immediatelyDeleteAllHiddenPodcasts];

  id result = [*(id *)(a1 + 32) mergeLocalAndRemoteData:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48) version:*(void *)(a1 + 56) mismatch:*(unsigned __int8 *)(a1 + 72)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10015DF70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10015DFA0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) podcastCacheInContext:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) importRemotePodcastDicts:*(void *)(a1 + 48) inContext:*(void *)(a1 + 40) visitingPodcastsInCache:v2 updatingPodcastsToAdd:*(void *)(a1 + 56) updatingPodcastsToUnsubscribe:*(void *)(a1 + 64) mismatch:*(unsigned __int8 *)(a1 + 88) version:*(void *)(a1 + 72)];
  id v3 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) logPrefix];
    uint64_t v5 = [*(id *)(a1 + 32) addedSubscriptions];
    *(_DWORD *)buf = 138543619;
    id v8 = v4;
    __int16 v9 = 2113;
    BOOL v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ Podcasts added since last sync: %{private}@", buf, 0x16u);
  }
  unsigned __int8 v6 = [*(id *)(a1 + 32) unvisitedPodcastsToUnsubscribeIn:v2 mismatch:*(void *)(*(void *)(a1 + 80) + 8) + 24 version:*(void *)(a1 + 72)];
  [*(id *)(a1 + 64) unionSet:v6];
}

BOOL sub_10015E244(id a1, NSString *a2, id a3)
{
  id v4 = a3;
  BOOL v5 = ![(NSString *)a2 isEqualToString:kPodcastStoreCollectionId]
    || [v4 integerValue];

  return v5;
}

void sub_10015EDE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) podcastForUuid:v3];
  BOOL v5 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v6 = [*(id *)(a1 + 40) logPrefix];
    id v7 = [v4 title];
    id v8 = [v4 feedURL];
    id v9 = [v4 storeCollectionId];
    BOOL v10 = [v4 uuid];
    *(_DWORD *)buf = 138544387;
    __int16 v39 = v6;
    __int16 v40 = 2113;
    uint64_t v41 = v7;
    __int16 v42 = 2113;
    long long v43 = v8;
    __int16 v44 = 2049;
    id v45 = v9;
    __int16 v46 = 2114;
    long long v47 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ Unvisited local podcast: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x34u);
  }
  uint64_t v11 = [*(id *)(a1 + 40) addedSubscriptions];
  unsigned __int8 v12 = [v11 containsObject:v3];

  if (v12)
  {
    uint64_t v13 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      long long v14 = [*(id *)(a1 + 40) logPrefix];
      unsigned __int8 v15 = [v4 title];
      uint64_t v16 = [v4 feedURL];
      id v17 = [v4 storeCollectionId];
      id v18 = [v4 uuid];
      *(_DWORD *)buf = 138544387;
      __int16 v39 = v14;
      __int16 v40 = 2113;
      uint64_t v41 = v15;
      __int16 v42 = 2113;
      long long v43 = v16;
      __int16 v44 = 2049;
      id v45 = v17;
      __int16 v46 = 2114;
      long long v47 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ Marking mismatch = YES. Reason: unvisited local podcast is marked as dirty (not synced yet), i.e. it's new and it's not in cloud yet, we must push it in a subsequent SET transaction: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x34u);
    }
    **(unsigned char **)(a1 + 64) = 1;
  }
  else if ([v4 subscribed])
  {
    uint64_t v19 = [*(id *)(a1 + 40) config];
    unsigned int v20 = [v19 supportsMetrics];

    if (v20)
    {
      long long v21 = [*(id *)(a1 + 40) storageProvider];
      __int16 v22 = +[NSNumber numberWithBool:**(unsigned __int8 **)(a1 + 64), @"version", @"mismatch", *(void *)(a1 + 48)];
      v37[1] = v22;
      unsigned __int8 v23 = +[NSDictionary dictionaryWithObjects:v37 forKeys:&v36 count:2];
      [v21 recordUserAction:@"cloud_sync_delete_podcast" dataSource:v4 withData:v23];
    }
    long long v24 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      long long v25 = [*(id *)(a1 + 40) logPrefix];
      long long v26 = [v4 title];
      uint64_t v27 = [v4 feedURL];
      id v28 = [v4 storeCollectionId];
      uint64_t v29 = [v4 uuid];
      *(_DWORD *)buf = 138544387;
      __int16 v39 = v25;
      __int16 v40 = 2113;
      uint64_t v41 = v26;
      __int16 v42 = 2113;
      long long v43 = v27;
      __int16 v44 = 2049;
      id v45 = v28;
      __int16 v46 = 2114;
      long long v47 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@ Marking podcast for unsubscription [reason: it's an old subscription (i.e. is marked as already synced) which is not present in cloud, so it must have been unsubscribed remotely]: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x34u);
    }
    [*(id *)(a1 + 56) addObject:v3];
  }
  else
  {
    id v30 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      id v31 = [*(id *)(a1 + 40) logPrefix];
      id v32 = [v4 title];
      long long v33 = [v4 feedURL];
      id v34 = [v4 storeCollectionId];
      long long v35 = [v4 uuid];
      *(_DWORD *)buf = 138544387;
      __int16 v39 = v31;
      __int16 v40 = 2113;
      uint64_t v41 = v32;
      __int16 v42 = 2113;
      long long v43 = v33;
      __int16 v44 = 2049;
      id v45 = v34;
      __int16 v46 = 2114;
      long long v47 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}@ Ignoring local unvisited podcast [reason: not subscribed locally]: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x34u);
    }
  }
}

void sub_10015F9E8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = kMTPodcastEntityName;
  id v4 = +[MTPodcast sortDescriptorsForManualOrder];
  BOOL v5 = [v2 objectsInEntity:v3 predicate:0 sortDescriptors:v4];

  id v6 = [v5 mutableCopy];
  id v7 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v28 = a1;
  id v8 = *(void **)(a1 + 40);
  id v9 = +[NSPredicate predicateWithFormat:@"subscribed == 1"];
  BOOL v10 = [v8 filteredArrayUsingPredicate:v9];
  uint64_t v11 = [v10 valueForKey:@"feedURL"];
  id v12 = [v11 mutableCopy];

  if ([v12 count])
  {
    while (1)
    {
      while (![v6 count])
      {
LABEL_6:
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_10015FE00;
        v34[3] = &unk_100553340;
        id v14 = v12;
        id v35 = v14;
        id v15 = [v5 indexOfObjectPassingTest:v34];
        if (v15 != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v16 = [v5 objectAtIndexedSubscript:v15];
          [v7 addObject:v16];
        }
        [v14 removeObjectAtIndex:0];

        if (![v14 count]) {
          goto LABEL_9;
        }
      }
      uint64_t v13 = [v6 objectAtIndexedSubscript:0];
      [v6 removeObjectAtIndex:0];
      if ([v13 subscribed])
      {

        goto LABEL_6;
      }
      [v7 addObject:v13];
    }
  }
LABEL_9:
  uint64_t v27 = v5;
  [v7 addObjectsFromArray:v6, v12];
  uint64_t v29 = (uint64_t)[v7 count];
  if (v29 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v29;
    do
    {
      uint64_t v19 = [v7 objectAtIndexedSubscript:v17];
      unsigned int v20 = _MTLogCategoryCloudSync();
      uint64_t v21 = v18;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        long long v33 = [*(id *)(v28 + 48) logPrefix];
        id v31 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v19 sortOrder]);
        __int16 v22 = +[NSNumber numberWithInteger:v18];
        id v32 = [v19 title];
        unsigned __int8 v23 = [v19 feedURL];
        id v30 = [v19 storeCollectionId];
        uint64_t v24 = [v19 uuid];
        *(_DWORD *)buf = 138544899;
        uint64_t v37 = v33;
        __int16 v38 = 2112;
        __int16 v39 = v31;
        __int16 v40 = 2112;
        uint64_t v41 = v22;
        __int16 v42 = 2113;
        long long v43 = v32;
        __int16 v44 = 2113;
        id v45 = v23;
        __int16 v46 = 2049;
        id v47 = v30;
        __int16 v48 = 2114;
        uint64_t v49 = v24;
        long long v25 = (void *)v24;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}@ Reordering local podcast to match remote order: from %@ to %@. Podcast: \"%{private}@\", %{private}@, %{private}lld, %{public}@", buf, 0x48u);

        uint64_t v21 = v29 - v17;
      }

      [v19 setSortOrder:v21];
      ++v17;
      --v18;
    }
    while (v18);
  }
}

id sub_10015FE00(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 feedURL];
  id v4 = [*(id *)(a1 + 32) objectAtIndexedSubscript:0];
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_100160084(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10016013C;
  void v4[3] = &unk_100551750;
  uint64_t v3 = *(void **)(a1 + 56);
  void v4[4] = *(void *)(a1 + 48);
  id v5 = v3;
  [v2 enumerateObjectsUsingBlock:v4];
}

void sub_10016013C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) logPrefix];
    id v6 = [v3 title];
    id v7 = [v3 feedURL];
    id v8 = [v3 storeCollectionId];
    id v9 = [v3 uuid];
    int v12 = 138544387;
    uint64_t v13 = v5;
    __int16 v14 = 2113;
    id v15 = v6;
    __int16 v16 = 2113;
    uint64_t v17 = v7;
    __int16 v18 = 2049;
    id v19 = v8;
    __int16 v20 = 2114;
    uint64_t v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ New locally added subscription detected: \"%{private}@\", %{private}@, %{private}lld, %{public}@", (uint8_t *)&v12, 0x34u);
  }
  BOOL v10 = *(void **)(a1 + 40);
  uint64_t v11 = [v3 uuid];
  [v10 addObject:v11];
}

void sub_100160458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100160470(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) countOfObjectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_100160790(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:*(void *)(a1 + 40) sortDescriptors:0];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        [*(id *)(*((void *)&v6 + 1) + 8 * (void)v5) setHasBeenSynced:1];
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100160A08(uint64_t a1)
{
  uint64_t v2 = kMTPodcastEntityName;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = [*(id *)(a1 + 40) storageProvider];
  id v5 = +[MTPodcast predicateForSyncablePodcastsForSyncType:](MTPodcast, "predicateForSyncablePodcastsForSyncType:", [v4 syncType]);
  long long v6 = +[MTPodcast sortDescriptorsForManualOrder];
  long long v7 = [v3 objectsInEntity:v2 predicate:v5 sortDescriptors:v6];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_100160B20;
  void v9[3] = &unk_100551750;
  long long v8 = *(void **)(a1 + 48);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v8;
  [v7 enumerateObjectsUsingBlock:v9];
}

void sub_100160B20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_new();
  id v5 = [v3 feedURL];
  if (v5)
  {

LABEL_3:
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v6 = [objc_opt_class() subscriptionSyncProcessorSyncKeys];
    id v7 = [v6 countByEnumeratingWithState:&v25 objects:v43 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          int v12 = [v3 valueForKey:v11];
          if (v12) {
            [v4 setObject:v12 forKey:v11];
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v25 objects:v43 count:16];
      }
      while (v8);
    }

    uint64_t v13 = [v3 valueForKey:kPodcastStoreCollectionId];
    if (v13) {
      [v4 setObject:v13 forKey:kPodcastPID];
    }
    __int16 v14 = _MTLogCategoryCloudSync();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [*(id *)(a1 + 32) logPrefix];
      __int16 v16 = [v4 description];
      *(_DWORD *)buf = 138543619;
      id v30 = v15;
      __int16 v31 = 2113;
      id v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ Adding local podcast: %{private}@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) addObject:v4];
    goto LABEL_17;
  }
  if ([v3 syncType] == (id)1)
  {
    uint64_t v17 = [v3 valueForKey:kPodcastStoreCollectionId];

    if (v17) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = _MTLogCategoryCloudSync();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v18 = [*(id *)(a1 + 32) logPrefix];
    id v19 = [v3 title];
    __int16 v20 = [v3 feedURL];
    id v21 = [v3 storeCollectionId];
    __int16 v22 = [v3 uuid];
    if ([v3 subscribed]) {
      CFStringRef v23 = @"YES";
    }
    else {
      CFStringRef v23 = @"NO";
    }
    uint64_t v24 = [v3 description];
    *(_DWORD *)buf = 138544899;
    id v30 = v18;
    __int16 v31 = 2113;
    id v32 = v19;
    __int16 v33 = 2113;
    id v34 = v20;
    __int16 v35 = 2049;
    id v36 = v21;
    __int16 v37 = 2114;
    __int16 v38 = v22;
    __int16 v39 = 2114;
    CFStringRef v40 = v23;
    __int16 v41 = 2113;
    __int16 v42 = v24;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ Skipping local podcast: \"%{private}@\", %{private}@, %{private}lld, %{public}@, subscribed: %{public}@, description: %{private}@", buf, 0x48u);
  }
LABEL_17:
}

void sub_100160F90(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id obj = *(id *)(a1 + 32);
  id v38 = [obj countByEnumeratingWithState:&v45 objects:v57 count:16];
  if (v38)
  {
    uint64_t v40 = kPodcastTitle;
    uint64_t v36 = kPodcastFeedUrl;
    uint64_t v37 = *(void *)v46;
    uint64_t v35 = kPodcastStoreCollectionId;
    uint64_t v34 = v1;
    do
    {
      for (uint64_t i = 0; i != v38; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v46 != v37) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v45 + 1) + 8 * i);
        uint64_t v4 = [v3 objectForKeyedSubscript:v40];
        id v5 = [v3 objectForKeyedSubscript:v36];
        long long v6 = [v3 objectForKeyedSubscript:v35];
        id v7 = [v6 unsignedLongLongValue];

        id v8 = _MTLogCategoryCloudSync();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = [*(id *)(v1 + 40) logPrefix];
          *(_DWORD *)buf = 138544131;
          long long v50 = v9;
          __int16 v51 = 2113;
          id v52 = v4;
          __int16 v53 = 2113;
          id v54 = v5;
          __int16 v55 = 2049;
          id v56 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Subscribing from cloud to remote podcast: \"%{private}@\", %{private}@, %{private}lld", buf, 0x2Au);
        }
        id v10 = +[NSURL URLWithString:v5];
        if (!v10)
        {
          int v12 = _MTLogCategoryCloudSync();
          if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          __int16 v14 = [*(id *)(v1 + 40) logPrefix];
          *(_DWORD *)buf = 138543362;
          long long v50 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@ Attempting to add a podcast with a nil URL", buf, 0xCu);
          goto LABEL_22;
        }
        uint64_t v11 = [*(id *)(v1 + 48) podcastForFeedUrl:v5];
        int v12 = v11;
        if (v11)
        {
          if ([v11 hidden])
          {
            [v12 lastUnfollowedDate];
            if (v13 > *(double *)(v1 + 56))
            {
              __int16 v14 = _MTLogCategoryCloudSync();
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                id v15 = [*(id *)(v1 + 40) logPrefix];
                __int16 v16 = [v12 uuid];
                [v12 lastUnfollowedDate];
                uint64_t v17 = *(void **)(v1 + 56);
                *(_DWORD *)buf = 138544130;
                long long v50 = v15;
                __int16 v51 = 2114;
                id v52 = v16;
                __int16 v53 = 2048;
                id v54 = v18;
                __int16 v55 = 2048;
                id v56 = v17;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@ skipping re-subscribe to a hidden podcast with uuid %{public}@, lastUnfollowedDate = %f, lastSyncTimestamp = %f", buf, 0x2Au);
              }
LABEL_22:

              goto LABEL_28;
            }
          }
        }
        __int16 v39 = v10;
        id v19 = v4;
        __int16 v20 = _MTLogCategoryCloudSync();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = [*(id *)(v1 + 40) logPrefix];
          __int16 v22 = [v3 description];
          *(_DWORD *)buf = 138543875;
          long long v50 = v21;
          __int16 v51 = 2113;
          id v52 = v19;
          __int16 v53 = 2112;
          id v54 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}@ Adding Podcast from Sync with title: %{private}@, PodcastDict: %{Private}@", buf, 0x20u);
        }
        uint64_t v23 = *(void *)(v1 + 48);
        id v24 = +[MTPodcast defaultShowType];
        long long v25 = [v3 objectForKey:v40];
        long long v26 = +[MTPodcast insertNewPodcastInManagedObjectContext:v23 subscribed:1 feedUrl:v5 showType:v24 showTypeInFeed:0 title:v25 author:0 provider:0 imageUrl:0 description:0 displayType:0 showSpecificUpsellCopy:0];

        if (v26)
        {
          [v26 setHasBeenSynced:1];
          [v26 setStoreCollectionId:v7];
          [v26 setImporting:1];
          long long v27 = [v26 displayType];
          uint64_t v4 = v19;
          if (v27)
          {

            uint64_t v1 = v34;
            id v10 = v39;
LABEL_19:
            [*(id *)(v1 + 40) updateSettingsForLocalPodcast:v26 remotePodcast:v3 ctx:*(void *)(v1 + 48)];
            int v12 = v26;
            goto LABEL_28;
          }
          uint64_t v1 = v34;
          id v10 = v39;
          if ((uint64_t)[v26 storeCollectionId] < 1) {
            goto LABEL_19;
          }
          id v30 = +[PodcastRequestManager sharedInstance];
          id v31 = [v26 storeCollectionId];
          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472;
          v41[2] = sub_10016161C;
          v41[3] = &unk_100553368;
          id v32 = *(void **)(v34 + 48);
          void v41[4] = *(void *)(v34 + 40);
          __int16 v42 = v26;
          long long v43 = v3;
          id v44 = v32;
          int v12 = v26;
          [v30 updatePodcastWithStoreId:v31 completion:v41];

          uint64_t v1 = v34;
        }
        else
        {
          int v12 = _MTLogCategoryCloudSync();
          uint64_t v4 = v19;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            long long v28 = [*(id *)(v34 + 40) logPrefix];
            uint64_t v29 = [v3 description];
            *(_DWORD *)buf = 138543619;
            long long v50 = v28;
            __int16 v51 = 2113;
            id v52 = v29;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@ We can't subscribe from cloud to podcast because the podcast was not found in local DB and a new one was impossible to insert for some reason. Remote podcast: %{private}@", buf, 0x16u);
          }
          uint64_t v1 = v34;
          id v10 = v39;
        }
LABEL_28:
      }
      id v38 = [obj countByEnumeratingWithState:&v45 objects:v57 count:16];
    }
    while (v38);
  }
}

void sub_10016161C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) context];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001616FC;
  void v8[3] = &unk_10054FE58;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  uint64_t v5 = *(void *)(a1 + 48);
  long long v6 = *(void **)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = v5;
  id v13 = v6;
  id v7 = v3;
  [v4 performBlock:v8];
}

void sub_1001616FC(uint64_t a1)
{
  [*(id *)(a1 + 32) setDisplayType:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) updateSettingsForLocalPodcast:*(void *)(a1 + 32) remotePodcast:*(void *)(a1 + 56) ctx:*(void *)(a1 + 64)];
  uint64_t v2 = [*(id *)(a1 + 48) context];
  [v2 saveInCurrentBlock];

  id v3 = [*(id *)(a1 + 48) workQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001617D0;
  block[3] = &unk_10054D570;
  id v5 = *(id *)(a1 + 32);
  dispatch_async(v3, block);
}

void sub_1001617D0(uint64_t a1)
{
  id v3 = +[MTFeedUpdateManager sharedInstance];
  uint64_t v2 = [*(id *)(a1 + 32) uuid];
  [v3 updatePodcastWithUUID:v2 userInitiated:0 forced:1 forceBootstrap:0 source:12 completion:0];
}

void sub_100162610(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v12 = v3;
  if (v3)
  {
    uint64_t v4 = [v3 objectForKeyedSubscript:@"action"];
    if (!v4) {
      goto LABEL_5;
    }
    id v5 = (void *)v4;
    long long v6 = [v12 objectForKeyedSubscript:@"action"];
    id v7 = [v6 objectForKeyedSubscript:@"url"];

    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = [v12 objectForKeyedSubscript:@"action"];
      id v10 = [v9 objectForKeyedSubscript:@"url"];
      uint64_t v11 = +[NSURL URLWithString:v10];
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v11);
    }
    else
    {
LABEL_5:
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
}

void sub_1001628C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && (uint64_t v5 = (uint64_t)objc_msgSend(v3, "pf_cleanUrlToStoreId"), v5 >= 1))
  {
    uint64_t v6 = v5;
    id v7 = +[MTDB sharedInstance];
    uint64_t v8 = [v7 importContext];

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100162A2C;
    uint64_t v12[3] = &unk_100550210;
    id v13 = v8;
    id v14 = *(id *)(a1 + 32);
    uint64_t v16 = v6;
    id v15 = v4;
    id v9 = v8;
    [v9 performBlockAndWait:v12];
  }
  else if ((unint64_t)[*(id *)(a1 + 40) count] >= 2)
  {
    id v10 = [*(id *)(a1 + 40) subarrayWithRange:1, [*(id *)(a1 + 40) count] - 1];
    uint64_t v11 = objc_alloc_init(MTLibraryLinkService);
    [(MTLibraryLinkService *)v11 updateAdamIdForPodcast:*(void *)(a1 + 32) withFeedURLs:v10];
  }
}

void sub_100162A2C(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  [v4 setStoreCollectionId:*(void *)(a1 + 56)];
  uint64_t v2 = [*(id *)(a1 + 48) absoluteString];
  [v4 setStoreCleanURL:v2];

  [*(id *)(a1 + 32) saveInCurrentBlock];
  id v3 = +[MTStoreInfoUpdater sharedInstance];
  [v3 updateStoreInfoForEpisodesAndPodcast:*(void *)(a1 + 40) skipPodcastLastCheckDate:1];
}

void sub_100162BBC(uint64_t a1)
{
  uint64_t v2 = +[MTDB sharedInstance];
  id v3 = [v2 importContext];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100162C8C;
  v7[3] = &unk_10054E708;
  id v8 = v3;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v9 = v4;
  uint64_t v10 = v5;
  id v6 = v3;
  [v6 performBlockAndWait:v7];
}

void sub_100162C8C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    if ([v2 storeCollectionId]
      || (+[NSDate timeIntervalSinceReferenceDate],
          double v5 = v4,
          [v3 lastStorePodcastInfoCheckDate],
          v5 <= v6 + 604800.0))
    {
      [*(id *)(a1 + 48) updateStoreInfoForEpisodesAndPodcast:*(void *)(a1 + 40) skipPodcastLastCheckDate:0];
    }
    else
    {
      +[NSDate timeIntervalSinceReferenceDate];
      [v3 setLastStorePodcastInfoCheckDate:];
      [*(id *)(a1 + 32) saveInCurrentBlock];
      uint64_t v7 = [v3 updatedFeedURL];
      if (v7)
      {
        id v8 = (void *)v7;
        id v9 = [v3 feedURL];

        if (v9)
        {
          uint64_t v10 = [v3 updatedFeedURL];
          v16[0] = v10;
          uint64_t v11 = [v3 feedURL];
          v16[1] = v11;
          id v12 = +[NSArray arrayWithObjects:v16 count:2];

LABEL_11:
          id v14 = objc_alloc_init(MTLibraryLinkService);
          [(MTLibraryLinkService *)v14 updateAdamIdForPodcast:*(void *)(a1 + 40) withFeedURLs:v12];

          goto LABEL_8;
        }
      }
      id v13 = [v3 feedURL];

      if (v13)
      {
        uint64_t v10 = [v3 feedURL];
        id v15 = v10;
        id v12 = +[NSArray arrayWithObjects:&v15 count:1];
        goto LABEL_11;
      }
    }
  }
LABEL_8:
}

void sub_100162F48(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2 && [v2 storeCollectionId])
  {
    if (*(unsigned char *)(a1 + 56)
      || (+[NSDate timeIntervalSinceReferenceDate],
          double v5 = v4,
          [v3 lastStorePodcastInfoCheckDate],
          v5 > v6 + 604800.0))
    {
      uint64_t v7 = [v3 storeCleanURL];
      if (!v7
        || (id v8 = (void *)v7,
            [v3 storeShortURL],
            id v9 = objc_claimAutoreleasedReturnValue(),
            v9,
            v8,
            !v9))
      {
        +[NSDate timeIntervalSinceReferenceDate];
        [v3 setLastStorePodcastInfoCheckDate:];
        [*(id *)(a1 + 32) saveInCurrentBlock];
        goto LABEL_13;
      }
    }
    +[NSDate timeIntervalSinceReferenceDate];
    double v11 = v10;
    [v3 lastStoreEpisodesInfoCheckDate];
    if (v11 > v12 + 86400.0)
    {
      id v13 = [*(id *)(a1 + 48) _fetchRequestForEpisodesWithMissingAdamIdsForPodcastUuid:*(void *)(a1 + 40)];
      [v13 setFetchLimit:1];
      id v14 = *(void **)(a1 + 32);
      id v27 = 0;
      id v15 = [v14 executeFetchRequest:v13 error:&v27];
      id v16 = v27;
      if (v16)
      {
        uint64_t v17 = v16;
        __int16 v18 = +[IMLogCategory defaultCategory];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v29 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to fetch episodes for store info update - %@", buf, 0xCu);
        }

        goto LABEL_14;
      }
      id v23 = [v15 count];

      if (!v23) {
        goto LABEL_15;
      }
LABEL_13:
      id v19 = *(void **)(a1 + 48);
      id v20 = [v3 storeCollectionId];
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1001631C8;
      v24[3] = &unk_1005533B8;
      id v21 = *(id *)(a1 + 40);
      uint64_t v22 = *(void *)(a1 + 48);
      id v25 = v21;
      uint64_t v26 = v22;
      [v19 getStoreInfoForPodcastWithAdamId:v20 callback:v24];
      id v13 = v25;
LABEL_14:
    }
  }
LABEL_15:
}

void sub_1001631C8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = +[MTDB sharedInstance];
  id v14 = [v13 importContext];

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_10016332C;
  long long v21[3] = &unk_100553390;
  id v22 = v14;
  id v23 = *(id *)(a1 + 32);
  id v24 = v9;
  uint64_t v15 = *(void *)(a1 + 40);
  id v25 = v10;
  uint64_t v26 = v15;
  id v27 = v11;
  id v28 = v12;
  id v16 = v12;
  id v17 = v11;
  id v18 = v10;
  id v19 = v9;
  id v20 = v14;
  [v20 performBlockAndWait:v21];
}

void sub_10016332C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  id v3 = *(void **)(a1 + 48);
  id v10 = v2;
  if (v3
    && ([v2 storeCleanURL],
        double v4 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v5 = [v3 isEqualToString:v4],
        v4,
        (v5 & 1) == 0))
  {
    [v10 setStoreCleanURL:*(void *)(a1 + 48)];
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7)
  {
    id v8 = [v10 storeShortURL];
    unsigned __int8 v9 = [v7 isEqualToString:v8];

    if ((v9 & 1) == 0)
    {
      [v10 setStoreShortURL:*(void *)(a1 + 56)];
      goto LABEL_10;
    }
  }
  if (v6) {
LABEL_10:
  }
    [*(id *)(a1 + 32) saveInCurrentBlock];
  [*(id *)(a1 + 64) updateStoreInfoForEpisodesInPodcast:*(void *)(a1 + 40) withEpisodeIds:*(void *)(a1 + 72) andEpisodesWithGuid:*(void *)(a1 + 80)];
}

void sub_100163548(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  if (!v2) {
    goto LABEL_25;
  }
  +[NSDate timeIntervalSinceReferenceDate];
  double v4 = v3;
  [v2 lastStoreEpisodesInfoCheckDate];
  if (v4 <= v5 + 86400.0) {
    goto LABEL_25;
  }
  +[NSDate timeIntervalSinceReferenceDate];
  [v2 setLastStoreEpisodesInfoCheckDate];
  [*(id *)(a1 + 32) saveInCurrentBlock];
  int v6 = [*(id *)(a1 + 48) episodesWithMissingAdamIdsForPodcast:*(void *)(a1 + 40) withContext:*(void *)(a1 + 32)];
  uint64_t v7 = v6;
  if (!v6 || ![v6 count]) {
    goto LABEL_24;
  }
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v8 = v7;
  unsigned __int8 v9 = (char *)[v8 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (!v9)
  {

    goto LABEL_24;
  }
  id v10 = v9;
  uint64_t v29 = v7;
  id v30 = v2;
  char v11 = 0;
  id v12 = 0;
  uint64_t v13 = *(void *)v38;
  char v33 = 1;
  id obj = v8;
  do
  {
    id v14 = 0;
    id v31 = v12;
    uint64_t v15 = v12 + 1;
    do
    {
      if (*(void *)v38 != v13) {
        objc_enumerationMutation(obj);
      }
      id v16 = *(void **)(*((void *)&v37 + 1) + 8 * (void)v14);
      uint64_t v17 = [v16 guid:v29, v30];
      if (!v17) {
        goto LABEL_14;
      }
      id v18 = (void *)v17;
      id v19 = *(void **)(a1 + 56);
      id v20 = [v16 guid];
      id v21 = [v19 objectForKeyedSubscript:v20];

      if (v21)
      {
        id v22 = *(void **)(a1 + 48);
        id v23 = *(void **)(a1 + 56);
        id v24 = [v16 guid];
        id v25 = [v23 objectForKeyedSubscript:v24];
        unsigned __int8 v26 = [v22 updateAdamId:v25 forEpisode:v16];

        v11 |= v26;
        if ((v11 & 1) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
LABEL_14:
        char v33 = 0;
        if ((v11 & 1) == 0) {
          goto LABEL_17;
        }
      }
      if (!((unint64_t)v15 % 0xC8))
      {
        [*(id *)(a1 + 32) saveInCurrentBlock];
        char v11 = 0;
      }
LABEL_17:
      ++v14;
      ++v15;
    }
    while (v10 != v14);
    id v12 = &v10[(void)v31];
    id v10 = (char *)[obj countByEnumeratingWithState:&v37 objects:v41 count:16];
  }
  while (v10);

  if (v11) {
    [*(id *)(a1 + 32) saveInCurrentBlock];
  }
  uint64_t v7 = v29;
  uint64_t v2 = v30;
  if ((v33 & 1) == 0)
  {
    id v27 = *(void **)(a1 + 48);
    uint64_t v28 = *(void *)(a1 + 64);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10016387C;
    v34[3] = &unk_1005533E0;
    void v34[4] = v27;
    id v35 = *(id *)(a1 + 40);
    id v36 = *(id *)(a1 + 32);
    [v27 getStoreInfoForEpisodesWithAdamIds:v28 callback:v34];
  }
LABEL_24:

LABEL_25:
}

void sub_10016387C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = +[MTDB sharedInstance];
  double v5 = [v4 importContext];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10016397C;
  void v9[3] = &unk_10054FE58;
  int v6 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v6;
  id v11 = v5;
  id v12 = v3;
  id v13 = *(id *)(a1 + 48);
  id v7 = v3;
  id v8 = v5;
  [v8 performBlockAndWait:v9];
}

void sub_10016397C(uint64_t a1)
{
  [*(id *)(a1 + 32) episodesWithMissingAdamIdsForPodcast:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48)];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v2)
  {
    id v3 = v2;
    unint64_t v4 = 0;
    char v5 = 0;
    uint64_t v6 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v9 = [v8 enclosureURL];
        if (v9)
        {
          id v10 = (void *)v9;
          id v11 = *(void **)(a1 + 56);
          id v12 = [v8 enclosureURL];
          id v13 = [v11 objectForKeyedSubscript:v12];

          if (v13)
          {
            id v14 = *(void **)(a1 + 32);
            uint64_t v15 = *(void **)(a1 + 56);
            id v16 = [v8 enclosureURL];
            uint64_t v17 = [v15 objectForKeyedSubscript:v16];
            unsigned __int8 v18 = [v14 updateAdamId:v17 forEpisode:v8];

            v5 |= v18;
            ++v4;
            if ((v5 & 1) != 0 && !(v4 % 0xC8))
            {
              [*(id *)(a1 + 64) saveInCurrentBlock];
              char v5 = 0;
            }
          }
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v3);
    if (v5) {
      [*(id *)(a1 + 48) saveInCurrentBlock];
    }
  }
}

void sub_100164064(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_17;
  }
  unint64_t v4 = [*(id *)(a1 + 32) stringValue];
  char v5 = [v3 objectForKeyedSubscript:v4];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
LABEL_17:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_24;
  }
  uint64_t v34 = a1;
  id v7 = [*(id *)(a1 + 32) stringValue];
  id v35 = v3;
  id v8 = [v3 objectForKeyedSubscript:v7];
  id v9 = [v8 copy];

  id v10 = [v9 objectForKeyedSubscript:@"childrenIds"];
  id v32 = [v10 mutableCopy];

  char v33 = v9;
  id v11 = [v9 objectForKeyedSubscript:@"children"];
  id v36 = objc_alloc_init((Class)NSMutableDictionary);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v12 = v11;
  id v13 = [v12 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (!v13) {
    goto LABEL_14;
  }
  id v14 = v13;
  uint64_t v15 = *(void *)v38;
  do
  {
    for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v38 != v15) {
        objc_enumerationMutation(v12);
      }
      uint64_t v17 = *(void **)(*((void *)&v37 + 1) + 8 * i);
      unsigned __int8 v18 = [v12 objectForKeyedSubscript:v17];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v19 = [v12 objectForKeyedSubscript:v17];
        long long v20 = [v19 objectForKeyedSubscript:@"podcastEpisodeGuid"];

        if (!v20) {
          continue;
        }
        long long v21 = [v12 objectForKeyedSubscript:v17];
        unsigned __int8 v18 = [v21 objectForKeyedSubscript:@"podcastEpisodeGuid"];

        long long v22 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v17 longLongValue]);
        [v36 setObject:v22 forKeyedSubscript:v18];
      }
    }
    id v14 = [v12 countByEnumeratingWithState:&v37 objects:v41 count:16];
  }
  while (v14);
LABEL_14:

  long long v23 = [v36 allValues];
  [v32 removeObjectsInArray:v23];

  id v24 = [v33 objectForKeyedSubscript:@"url"];
  if (v24)
  {
    id v25 = [v33 objectForKeyedSubscript:@"url"];
    unsigned __int8 v26 = +[NSNull null];

    if (v25 == v26)
    {
      id v24 = 0;
    }
    else
    {
      id v27 = [v33 objectForKeyedSubscript:@"url"];
      id v24 = [v27 copy];
    }
  }
  id v28 = [v33 objectForKeyedSubscript:@"shortUrl"];
  if (v28)
  {
    uint64_t v29 = [v33 objectForKeyedSubscript:@"shortUrl"];
    id v30 = +[NSNull null];

    if (v29 == v30)
    {
      id v28 = 0;
    }
    else
    {
      id v31 = [v33 objectForKeyedSubscript:@"shortUrl"];
      id v28 = [v31 copy];
    }
  }
  id v3 = v35;
  (*(void (**)(void))(*(void *)(v34 + 40) + 16))();

LABEL_24:
}

void sub_1001645AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = &NSFileSize_ptr;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v27 = a1;
    id v28 = objc_alloc_init((Class)NSMutableDictionary);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id obj = *(id *)(a1 + 32);
    id v31 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (!v31) {
      goto LABEL_21;
    }
    uint64_t v5 = *(void *)v33;
    CFStringRef v6 = @"url";
    uint64_t v29 = *(void *)v33;
    while (1)
    {
      id v7 = 0;
      do
      {
        if (*(void *)v33 != v5) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v7);
        uint64_t v9 = [v3 objectForKeyedSubscript:v8];
        if (v9)
        {
          id v10 = (void *)v9;
          [v3 objectForKeyedSubscript:v8];
          v12 = CFStringRef v11 = v6;
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          CFStringRef v6 = v11;
          if (isKindOfClass)
          {
            id v14 = [v3 objectForKeyedSubscript:v8];
            uint64_t v15 = [v14 objectForKeyedSubscript:@"offers"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_15;
            }
            id v16 = [v14 objectForKeyedSubscript:@"offers"];
            [v16 objectAtIndexedSubscript:0];
            v18 = uint64_t v17 = v4;
            objc_opt_class();
            char v19 = objc_opt_isKindOfClass();

            unint64_t v4 = v17;
            CFStringRef v6 = v11;

            if (v19)
            {
              long long v20 = [v14 objectForKeyedSubscript:@"offers"];
              uint64_t v15 = [v20 objectAtIndexedSubscript:0];

              long long v21 = [v15 objectForKeyedSubscript:@"download"];
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                goto LABEL_14;
              }
              long long v22 = [v15 objectForKeyedSubscript:@"download"];
              long long v23 = [v22 objectForKeyedSubscript:v11];

              if (v23)
              {
                id v24 = [v15 objectForKeyedSubscript:@"download"];
                long long v21 = [v24 objectForKeyedSubscript:@"url"];

                id v25 = [v8 copy];
                [v28 setObject:v25 forKeyedSubscript:v21];

                unint64_t v4 = v17;
LABEL_14:

                CFStringRef v6 = v11;
              }
              else
              {
                unint64_t v4 = v17;
                CFStringRef v6 = @"url";
              }
LABEL_15:
            }
            uint64_t v5 = v29;
          }
        }
        id v7 = (char *)v7 + 1;
      }
      while (v31 != v7);
      id v26 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
      id v31 = v26;
      if (!v26)
      {
LABEL_21:

        (*(void (**)(void))(*(void *)(v27 + 40) + 16))();
        break;
      }
    }
  }
}

void sub_100164E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100164E90(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) storageProvider];
  id v3 = [v2 feedUrlFromModernKey:*(void *)(a1 + 40)];

  unint64_t v4 = [*(id *)(a1 + 48) podcastForFeedUrl:v3];
  if (v4)
  {
    id v30 = v4;
    id v31 = v3;
    uint64_t v5 = [v4 uuid];
    CFStringRef v6 = +[MTEpisode predicateForAllEpisodesOnPodcastUuid:v5 includeNonAudioEpisodes:1];

    uint64_t v29 = [*(id *)(a1 + 32) predicateForFilteringEpisodesWithEmptyPlayState];
    uint64_t v7 = [v6 AND:];

    id v8 = +[NSFetchRequest fetchRequestWithEntityName:kMTEpisodeEntityName];
    id v28 = (void *)v7;
    [v8 setPredicate:v7];
    uint64_t v36 = kEpisodeMetadataIdentifier;
    uint64_t v37 = kEpisodeGuid;
    v57[0] = kEpisodeGuid;
    v57[1] = kEpisodeMetadataIdentifier;
    uint64_t v34 = kEpisodeLastDatePlayed;
    uint64_t v35 = kEpisodePlayStateManuallySet;
    v57[2] = kEpisodePlayStateManuallySet;
    v57[3] = kEpisodeLastDatePlayed;
    uint64_t v32 = kEpisodeIsNew;
    uint64_t v33 = kEpisodeLastUserMarkedAsPlayedDate;
    v57[4] = kEpisodeLastUserMarkedAsPlayedDate;
    v57[5] = kEpisodeIsNew;
    v57[6] = kEpisodeTitle;
    v57[7] = kEpisodeUuid;
    uint64_t v9 = +[NSArray arrayWithObjects:v57 count:8];
    [v8 setPropertiesToFetch:v9];

    [v8 setFetchBatchSize:200];
    uint64_t v38 = a1;
    uint64_t v27 = v8;
    [*(id *)(a1 + 48) executeFetchRequest:v8 error:0];
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v10 = [obj countByEnumeratingWithState:&v42 objects:v56 count:16];
    if (!v10) {
      goto LABEL_16;
    }
    id v11 = v10;
    uint64_t v41 = *(void *)v43;
    while (1)
    {
      for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v41) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        id v14 = [v13 guid];
        if ([v14 length])
        {
          uint64_t v15 = [v13 metadataIdentifier];
          id v16 = [v15 length];

          if (v16)
          {
            long long v40 = *(void **)(*(void *)(*(void *)(v38 + 56) + 8) + 40);
            v46[0] = v37;
            uint64_t v17 = [v13 guid];
            v47[0] = v17;
            v46[1] = v36;
            unsigned __int8 v18 = [v13 metadataIdentifier];
            v47[1] = v18;
            v46[2] = v35;
            char v19 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v13 playStateManuallySet]);
            void v47[2] = v19;
            v46[3] = v34;
            [v13 lastDatePlayed];
            long long v20 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            v47[3] = v20;
            void v46[4] = v33;
            [v13 lastUserMarkedAsPlayedDate];
            long long v21 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            v47[4] = v21;
            v46[5] = v32;
            long long v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v13 isNew]);
            v47[5] = v22;
            long long v23 = +[NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:6];
            [v40 addObject:v23];

            goto LABEL_13;
          }
        }
        else
        {
        }
        uint64_t v17 = _MTLogCategoryUPPSync();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_14;
        }
        unsigned __int8 v18 = [v13 title];
        id v24 = [v13 uuid];
        id v25 = [v13 metadataIdentifier];
        id v26 = [v13 guid];
        *(_DWORD *)buf = 138544130;
        uint64_t v49 = v18;
        __int16 v50 = 2114;
        __int16 v51 = v24;
        __int16 v52 = 2114;
        __int16 v53 = v25;
        __int16 v54 = 2114;
        __int16 v55 = v26;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[Episode Sync] Skipping syncing episode without a valid guid and metadataIdentifier: %{public}@, %{public}@, %{public}@, %{public}@", buf, 0x2Au);

LABEL_13:
LABEL_14:
      }
      id v11 = [obj countByEnumeratingWithState:&v42 objects:v56 count:16];
      if (!v11)
      {
LABEL_16:

        unint64_t v4 = v30;
        id v3 = v31;
        break;
      }
    }
  }
}

void sub_100165E70(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) storageProvider];
  id v3 = [v2 feedUrlFromModernKey:*(void *)(a1 + 40)];

  unint64_t v4 = [*(id *)(a1 + 48) podcastForFeedUrl:v3];
  if (v4)
  {
    uint64_t v5 = +[NSFetchRequest fetchRequestWithEntityName:kMTEpisodeEntityName];
    CFStringRef v6 = [v4 uuid];
    uint64_t v7 = +[MTEpisode predicateForAllEpisodesOnPodcastUuid:v6 includeNonAudioEpisodes:1];
    [v5 setPredicate:v7];

    id v8 = [*(id *)(a1 + 32) _propertiesToFetch];
    [v5 setPropertiesToFetch:v8];

    [v5 setFetchBatchSize:200];
    uint64_t v9 = *(void **)(a1 + 48);
    id v36 = 0;
    id v10 = [v9 executeFetchRequest:v5 error:&v36];
    id v11 = v36;
    if (v11)
    {
      id v12 = _MTLogCategoryCloudSync();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v13 = [v4 uuid];
        id v14 = [v4 title];
        *(_DWORD *)buf = 138543874;
        long long v39 = v13;
        __int16 v40 = 2112;
        uint64_t v41 = v14;
        __int16 v42 = 2112;
        id v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[Episode Sync] Failed to fetch episodes for show %{public}@ - %@ - %@", buf, 0x20u);
      }
    }
    else
    {
      id v26 = v10;
      uint64_t v27 = v5;
      id v28 = v4;
      uint64_t v29 = v3;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id obj = v10;
      uint64_t v15 = (char *)[obj countByEnumeratingWithState:&v32 objects:v37 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)v33;
        do
        {
          char v19 = 0;
          id v30 = v17;
          long long v20 = v17 + 1;
          do
          {
            if (*(void *)v33 != v18) {
              objc_enumerationMutation(obj);
            }
            long long v21 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v19);
            long long v23 = [v21 guid];
            id v24 = [v21 metadataIdentifier];
            id v25 = [*(id *)(a1 + 56) objectForKey:v23];
            if (v25
              || ([*(id *)(a1 + 64) objectForKey:v24],
                  (id v25 = objc_claimAutoreleasedReturnValue()) != 0))
            {
              if (v23) {
                [*(id *)(a1 + 56) removeObjectForKey:v23];
              }
              if (v24) {
                [*(id *)(a1 + 64) removeObjectForKey:v24];
              }
              [*(id *)(a1 + 32) unsafeUpdateEpisode:v21 forRemoteEpisodeDictionary:v25];
            }
            if (!((unint64_t)v20 % 0xC8)) {
              [*(id *)(a1 + 48) saveInCurrentBlock];
            }

            ++v19;
            ++v20;
          }
          while (v16 != v19);
          uint64_t v17 = &v16[(void)v30];
          id v16 = (char *)[obj countByEnumeratingWithState:&v32 objects:v37 count:16];
        }
        while (v16);
      }

      [*(id *)(a1 + 48) saveInCurrentBlock];
      unint64_t v4 = v28;
      id v3 = v29;
      id v10 = v26;
      uint64_t v5 = v27;
      id v11 = 0;
    }
  }
}

void sub_100166650(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) podcastForFeedUrl:*(void *)(a1 + 40)];
  if ([v2 subscribed])
  {
    id v3 = +[NSFetchRequest fetchRequestWithEntityName:kMTEpisodeEntityName];
    unint64_t v4 = [v2 uuid];
    uint64_t v5 = +[MTEpisode predicateForListenNowForPodcastUuid:v4];
    CFStringRef v6 = +[MTEpisode predicateForVisuallyPlayed:1];
    uint64_t v7 = [v5 AND:v6];
    [v3 setPredicate:v7];

    [v3 setFetchLimit:1];
    if ([*(id *)(a1 + 32) countForFetchRequest:v3 error:0])
    {
      id v8 = _MTLogCategoryDefault();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [v2 title];
        int v13 = 138543362;
        id v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Recalculating Up Next for podcast %{public}@ which has played up next episode after sync completion", (uint8_t *)&v13, 0xCu);
      }
      id v10 = [v2 uuid];
      id v11 = +[MTRecencyUtil upNextForPodcastUuid:v10 excludeExplicit:0 ctx:*(void *)(a1 + 32)];

      id v12 = [v2 uuid];
      +[MTRecencyUtil unsafeUpdateRelatedFieldsIfUpNextChangedForPodcast:v12 upNextResult:v11 ctx:*(void *)(a1 + 32)];

      [*(id *)(a1 + 32) saveInCurrentBlock];
    }
  }
}

void sub_100167010(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  CFStringRef v6 = _MTLogCategoryPrivacy();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Acknowledge privacy task has been completed successfully.", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    id v8 = [v5 localizedDescription];
    *(_DWORD *)buf = 138543362;
    id v11 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to execute acknowledge task, error %{public}@.", buf, 0xCu);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100167178;
  block[3] = &unk_10054D910;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_100167178(uint64_t a1)
{
  +[MTPrivacyUtil markAsAgreedToLatestTerms];
  id v2 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v2 setInteger:qword_1005F59C8 forKey:@"MTWelcomeVersion"];

  id v3 = +[NSUserDefaults _applePodcastsFoundationSharedUserDefaults];
  [v3 synchronize];

  if ([*(id *)(a1 + 32) shouldShowWelcome])
  {
    unint64_t v4 = _MTLogCategoryPrivacy();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = 0;
      id v5 = "shouldShowWelcome = YES after +[MTWelcomeUtil markWelcomeAsShown]";
      CFStringRef v6 = (uint8_t *)&v11;
      uint64_t v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_ERROR;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v5, v6, 2u);
    }
  }
  else
  {
    uint64_t v9 = +[NSNotificationCenter defaultCenter];
    [v9 postNotificationName:kMTDidMarkWelcomeAsShownNotification object:0];

    unint64_t v4 = _MTLogCategoryPrivacy();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = 0;
      id v5 = "Marking Welcome screen as shown was successful.";
      CFStringRef v6 = (uint8_t *)&v10;
      uint64_t v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_6;
    }
  }
}

void sub_1001672B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, WeakRetained);
  }
}

void sub_100167B74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectsInEntity:kMTPlaylistEntityName predicate:0 sortDescriptors:0];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100167C2C;
  void v4[3] = &unk_100553498;
  id v3 = *(void **)(a1 + 48);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = v3;
  [v2 enumerateObjectsUsingBlock:v4];
}

void sub_100167C2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isItunesPlaylist] & 1) == 0
    && ([v3 isItunesSmartPlaylist] & 1) == 0
    && ([v3 isBuiltIn] & 1) == 0)
  {
    unint64_t v4 = [v3 defaultSettings];

    if (v4)
    {
      id v5 = [v3 dictionaryRepresentation];
      id v6 = [v5 mutableCopy];

      if (([v3 hasBeenSynced] & 1) == 0)
      {
        uint64_t v7 = [*(id *)(a1 + 32) addedPlaylists];

        if (!v7)
        {
          os_log_type_t v8 = objc_opt_new();
          [*(id *)(a1 + 32) setAddedPlaylists:v8];
        }
        uint64_t v9 = [*(id *)(a1 + 32) addedPlaylists];
        __int16 v10 = [v3 uuid];
        [v9 addObject:v10];

        [v3 setHasBeenSynced:1];
      }
      uint64_t v60 = a1;
      __int16 v11 = [v3 podcasts];
      id v64 = [v3 settings];
      uint64_t v67 = objc_opt_new();
      double v58 = objc_opt_new();
      id v12 = [v3 defaultSettings];
      int v13 = [v12 dictionaryRepresentation];
      id v14 = [v13 mutableCopy];

      uint64_t v15 = [v3 defaultSettings];
      id v16 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v15 episodesToShow]);
      [v14 setObject:v16 forKey:@"episodesToShowTruth"];

      double v57 = v14;
      [v6 setObject:v14 forKey:kPlaylistDefaultSettings];
      id v61 = v3;
      uint64_t v17 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 isUngroupedList]);
      uint64_t v59 = v6;
      [v6 setObject:v17 forKey:kPlaylistUngroupedList];

      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      id obj = v11;
      id v18 = [obj countByEnumeratingWithState:&v72 objects:v79 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v73;
        uint64_t v21 = kPodcastFeedUrl;
        uint64_t v22 = kPodcastStoreCollectionId;
        uint64_t v23 = kPodcastPID;
        do
        {
          for (uint64_t i = 0; i != v19; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v73 != v20) {
              objc_enumerationMutation(obj);
            }
            id v25 = *(void **)(*((void *)&v72 + 1) + 8 * i);
            id v26 = [v25 feedURL];

            if (v26)
            {
              v77[0] = v21;
              uint64_t v27 = [v25 feedURL];
              v78[0] = v27;
              v77[1] = v22;
              id v28 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v25 storeCollectionId]);
              v78[1] = v28;
              v77[2] = v23;
              uint64_t v29 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v25 storeCollectionId]);
              v78[2] = v29;
              id v30 = +[NSDictionary dictionaryWithObjects:v78 forKeys:v77 count:3];
              [v67 addObject:v30];
            }
          }
          id v19 = [obj countByEnumeratingWithState:&v72 objects:v79 count:16];
        }
        while (v19);
      }

      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      id v31 = v64;
      id v32 = [v31 countByEnumeratingWithState:&v68 objects:v76 count:16];
      if (v32)
      {
        id v33 = v32;
        uint64_t v34 = *(void *)v69;
        uint64_t v63 = kPlaylistSettingEpisodesToShow;
        uint64_t v65 = kPlaylistSettingTracksDefault;
        uint64_t v62 = kPlaylistSettingEpisodeToShowItunesTruth;
        do
        {
          for (j = 0; j != v33; j = (char *)j + 1)
          {
            if (*(void *)v69 != v34) {
              objc_enumerationMutation(v31);
            }
            id v36 = *(void **)(*((void *)&v68 + 1) + 8 * (void)j);
            uint64_t v37 = [v36 dictionaryRepresentation];
            id v38 = [v37 mutableCopy];

            long long v39 = [v36 podcast];

            if (v39)
            {
              __int16 v40 = [v36 podcast];
              uint64_t v41 = [v40 feedURL];

              if (!v41) {
                goto LABEL_34;
              }
              if ([v36 tracksDefault])
              {
                __int16 v42 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v36 integerForEpisodesToShow]);
                [v38 setObject:v42 forKey:v63];
              }
              id v43 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v36 episodesToShow]);
              [v38 setObject:v43 forKey:@"episodesToShowTruth"];

              long long v44 = [v36 podcast];
              long long v45 = [v44 feedURL];
              [v38 setObject:v45 forKey:@"podcastFeedUrl"];

              long long v46 = [v36 podcast];
              uint64_t v47 = (uint64_t)[v46 storeCollectionId];

              if (v47 >= 1)
              {
                long long v48 = [v36 podcast];
                uint64_t v49 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v48 storeCollectionId]);
                [v38 setObject:v49 forKey:@"podcastStoreCollectionId"];
              }
              __int16 v50 = [v36 podcast];
              uint64_t v51 = (uint64_t)[v50 podcastPID];

              if (v51 >= 1)
              {
                __int16 v52 = [v36 podcast];
                __int16 v53 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v52 storeCollectionId]);
                [v38 setObject:v53 forKey:@"podcastPID"];
              }
              __int16 v54 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v36 tracksDefault]);
              [v38 setObject:v54 forKey:v65];

              if ([v36 tracksDefault]) {
                [v38 setObject:&off_10057A058 forKey:v62];
              }
            }
            [v58 addObject:v38];
LABEL_34:
          }
          id v33 = [v31 countByEnumeratingWithState:&v68 objects:v76 count:16];
        }
        while (v33);
      }

      [v59 setObject:v67 forKey:@"podcasts"];
      [v59 setObject:v58 forKey:@"settings"];
      id v3 = v61;
      __int16 v55 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v61 includesAllPodcasts]);
      [v59 setObject:v55 forKey:kPlaylistIncludesAllPodcasts];

      [*(id *)(v60 + 40) addObject:v59];
    }
    else
    {
      id v56 = +[IMLogger sharedLogger];
      [v56 logFile:"/Library/Caches/com.apple.xbs/Sources/Marmoset/Source/Library/Sync/MTPlaylistSyncProcessor.m" lineNumber:110 format:@"*** Attempting to cloud sync a playlist with nil defaultSettings ***"];
    }
  }
}

id sub_100168750(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  unint64_t v4 = [v2 addedPlaylists];
  id v5 = [v4 containsObject:v3];

  return v5;
}

void sub_100168A98(uint64_t a1)
{
  if (*(uint64_t *)(a1 + 56) >= 1)
  {
    id v2 = +[MTPodcast predicateForPodcastStoreId:](MTPodcast, "predicateForPodcastStoreId:");
    id v3 = [*(id *)(a1 + 32) objectsInEntity:kMTPodcastEntityName predicate:v2 sortDescriptors:0];
    uint64_t v4 = [v3 firstObject];
    if (v4)
    {
      id v13 = (id)v4;
      if (*(uint64_t *)(a1 + 64) <= 0)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        if (!v6)
        {
          BOOL v10 = 0;
          uint64_t v9 = 0;
          goto LABEL_12;
        }
        uint64_t v5 = +[NSPredicate predicateWithFormat:@"%K = %@", kEpisodeGuid, v6];
      }
      else
      {
        uint64_t v5 = +[MTEpisode predicateForEpisodeStoreTrackId:](MTEpisode, "predicateForEpisodeStoreTrackId:");
      }
      uint64_t v7 = (void *)v5;

      os_log_type_t v8 = [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:v7 sortDescriptors:0];
      uint64_t v9 = [v8 firstObject];
      BOOL v10 = v9 == 0;

      id v2 = v7;
LABEL_12:

      __int16 v11 = [*(id *)(a1 + 72) appController];
      id v12 = [v9 uuid];
      [v11 presentPodcast:v13 episodeUuid:v12 episodeNotAvailable:v10 podcastTab:1 startPlayback:0 animated:0];

      goto LABEL_13;
    }
  }
  if (!*(void *)(a1 + 48)) {
    return;
  }
  id v13 = [*(id *)(a1 + 72) appController];
  [v13 openStoreURL:*(void *)(a1 + 48)];
LABEL_13:
}

void sub_100169770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001697A4(uint64_t a1, void *a2)
{
  id v7 = a2;
  if ([v7 hasPrefix:@"pid"])
  {
    id v3 = [v7 componentsSeparatedByString:@"="];
    uint64_t v4 = [v3 lastObject];
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

void sub_100169C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100169C70(uint64_t a1)
{
  id v18 = [*(id *)(a1 + 32) podcastForFeedUrl:*(void *)(a1 + 40)];
  if (v18)
  {
    id v2 = +[PodcastsStateCoordinator shared];
    id v3 = [v18 uuid];
    [v2 unsafeEnableSubscriptionOnPodcastUUID:v3 from:3 context:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v4 = [*(id *)(a1 + 48) showType];
    id v19 = +[MTPodcast showTypeFromString:v4];

    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v6 = [*(id *)(a1 + 48) showType];
    id v7 = [*(id *)(a1 + 48) title];
    os_log_type_t v8 = [*(id *)(a1 + 48) author];
    uint64_t v9 = [*(id *)(a1 + 48) provider];
    BOOL v10 = [*(id *)(a1 + 48) imageURL];
    __int16 v11 = [*(id *)(a1 + 48) feedDescription];
    id v12 = [*(id *)(a1 + 48) displayType];
    id v13 = [*(id *)(a1 + 48) showSpecificUpsellCopy];
    id v18 = +[MTPodcast insertNewPodcastInManagedObjectContext:v5 subscribed:1 feedUrl:v17 showType:v19 showTypeInFeed:v6 title:v7 author:v8 provider:v9 imageUrl:v10 description:v11 displayType:v12 showSpecificUpsellCopy:v13];

    [v18 setStoreCollectionId:[*(id *)(a1 + 56) storeCollectionId]];
    [v18 setImporting:1];
    +[NSDate timeIntervalSinceReferenceDate];
    [v18 setUpdatedDate:];
    +[NSDate timeIntervalSinceReferenceDate];
    [v18 setModifiedDate:];
  }
  uint64_t v14 = [v18 uuid];
  uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;
}

void sub_100169FBC(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) podcastForUuid:*(void *)(a1 + 40)];
  if (([v7 feedUpdateNeedsRetry] & 1) == 0)
  {
    if ([v7 showTypeInFeedResolvedValue] == (id)2)
    {
      id v2 = *(void **)(a1 + 48);
      goto LABEL_5;
    }
    id v3 = [v7 showTypeInFeedResolvedValue];
    id v2 = *(void **)(a1 + 48);
    if (v3 == (id)4)
    {
LABEL_5:
      if (([v2 _addLatestSeasonToPodcast:v7] & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    if ([v2 _addNewestEpisodeToPodcast:v7]) {
LABEL_6:
    }
      [*(id *)(a1 + 32) saveInCurrentBlock];
  }
LABEL_7:
  uint64_t v4 = [*(id *)(a1 + 56) location];
  uint64_t v5 = +[MTStoreReportingController sharedInstance];
  uint64_t v6 = [v7 dictionaryRepresentation];
  [v5 reportWithType:4 userInfo:v6 location:v4 reason:0];
}

void sub_10016A1A4(_Unwind_Exception *a1)
{
}

void sub_10016A2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10016A2F8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _addLatestSeasonForSerialPodcast:*(void *)(a1 + 40)];
  if (result)
  {
    id result = [*(id *)(a1 + 48) saveInCurrentBlock];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (_BYTE)result;
  }
  return result;
}

void sub_10016A59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10016A5B4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) newestFullEpisode];
  id v3 = v2;
  if (v2)
  {
    id v4 = v2;
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) newestEpisode];
  }
  id v5 = v4;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 40) _addEpisode:v5 toMyEpisodesInPodcast:*(void *)(a1 + 32) persist:1];
}

void sub_10016A764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10016A77C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) metadataTimestamp];
  if (fabs(v3) <= 2.22044605e-16)
  {
    [*(id *)(a1 + 32) setPlayState:2 manually:0 source:6];
    [*(id *)(a1 + 32) unsuppressAutomaticDownloadsIfNeeded];
    [*(id *)(a1 + 32) setMetadataTimestamp:0.0];
    [*(id *)(a1 + 32) setMetadataFirstSyncEligible:1];
    id result = [*(id *)(a1 + 32) setIsNew:1];
    if (*(unsigned char *)(a1 + 56))
    {
      id result = [*(id *)(a1 + 40) saveInCurrentBlock];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)result;
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  return result;
}

id sub_10016ACBC(uint64_t a1, uint64_t a2)
{
  id v4 = _MTLogCategoryFeedUpdate();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      int v8 = 134217984;
      uint64_t v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Podcast exists in the store. Using MAPI for feed update for adamId: %ld", (uint8_t *)&v8, 0xCu);
    }

    [*(id *)(a1 + 40) setStoreCollectionId:a2];
  }
  else
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v8 = 138412290;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Podcast does not exist in the store. Doing RSS feed update for feedUrl: %@", (uint8_t *)&v8, 0xCu);
    }
  }
  return [*(id *)(a1 + 48) _feedUpdateAndSubscribeToPodcast:*(void *)(a1 + 40) feedUrl:*(void *)(a1 + 56) adamId:a2];
}

id sub_10016B2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) feedDownloadedWithParams:*(void *)(a1 + 40) error:a2 task:a3];
}

id sub_10016B2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = [*(id *)(a1 + 32) preProcessFeedHookWithParams:*(void *)(a1 + 40) feed:a2 requestUrl:*(void *)(a1 + 48) needsUpdate:a3 ctx:a4];
  uint64_t v6 = _MTLogCategoryFollowing();
  id v7 = v6;
  os_signpost_id_t v8 = *(void *)(a1 + 56);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)BOOL v10 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, v8, "MTSubscriptionManager pre process complete", "", v10, 2u);
  }

  return v5;
}

void sub_10016B3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) postProcessFeedHookWithParams:*(void *)(a1 + 40) podcastUuid:a2 ctx:a3];
  id v4 = _MTLogCategoryFollowing();
  BOOL v5 = v4;
  os_signpost_id_t v6 = *(void *)(a1 + 48);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)id v7 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, v6, "MTSubscriptionManager post process complete", "", v7, 2u);
  }
}

void sub_10016B458(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  os_signpost_id_t v6 = *(void **)(a1 + 32);
  id v7 = [*(id *)(a1 + 40) absoluteString];
  [v6 removeSubscribeParamsForFeedUrl:v7];

  os_signpost_id_t v8 = _MTLogCategoryFollowing();
  uint64_t v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 48);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    v11[0] = 67109378;
    v11[1] = a2;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "MTSubscriptionManager subscribe", "success: %i, error: %@", (uint8_t *)v11, 0x12u);
  }
}

void sub_10016B5F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016B690(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016B7C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016B9AC(_Unwind_Exception *exception_object)
{
}

void sub_10016BA6C(uint64_t a1)
{
  id v2 = +[NSBundle mainBundle];
  id v14 = [v2 localizedStringForKey:@"FOLLOW_FAIL" value:&stru_10056A8A0 table:0];

  if (+[DebugUtil isInternalInstall])
  {
    double v3 = [*(id *)(a1 + 32) description];
    id v4 = +[NSString stringWithFormat:@" INTERNAL: %@", v3];

    uint64_t v5 = [v14 stringByAppendingString:v4];

    id v14 = (id)v5;
  }
  os_signpost_id_t v6 = +[NSBundle mainBundle];
  id v7 = [v6 localizedStringForKey:@"FOLLOW_FAIL_TITLE" value:&stru_10056A8A0 table:0];
  os_signpost_id_t v8 = +[UIAlertController alertControllerWithTitle:v7 message:v14 preferredStyle:1];

  uint64_t v9 = +[NSBundle mainBundle];
  os_signpost_id_t v10 = [v9 localizedStringForKey:@"OK" value:&stru_10056A8A0 table:0];
  __int16 v11 = +[UIAlertAction actionWithTitle:v10 style:1 handler:0];
  [v8 addAction:v11];

  __int16 v12 = +[MTApplication appController];
  id v13 = [v12 rootViewController];

  [v13 presentViewController:v8 animated:1 completion:0];
}

void sub_10016BD88(id a1)
{
  double v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v1 = dispatch_queue_create("UNUserNotificationCenter.workQueue", v3);
  id v2 = (void *)qword_10060A990;
  qword_10060A990 = (uint64_t)v1;
}

void sub_10016BF48(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _mt_identifiersMatchingPodcastUuid:*(void *)(a1 + 40) inNotificationRequests:a2];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if ([v3 count]) {
    [*(id *)(a1 + 32) removePendingNotificationRequestsWithIdentifiers:v3];
  }
}

void sub_10016BFB0(uint64_t a1, void *a2)
{
  [a2 mt_compactMap:&stru_1005536A0];
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [*(id *)(a1 + 32) _mt_identifiersMatchingPodcastUuid:*(void *)(a1 + 40)];
  if ([v3 count]) {
    [*(id *)(a1 + 32) removeDeliveredNotificationsWithIdentifiers:v3];
  }
}

UNNotificationRequest *__cdecl sub_10016C030(id a1, UNNotification *a2)
{
  return [(UNNotification *)a2 request];
}

void sub_10016C24C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v11 = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lu pending notifications.", buf, 0xCu);
  }

  os_signpost_id_t v6 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  uint64_t v7 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10016C384;
  void v8[3] = &unk_100553660;
  void v8[4] = v6;
  id v9 = v5;
  [v6 _mt_identifiersMatchingDeletedEpisodesOnPodcastUuid:v9 inNotificationRequests:v3 ctx:v7 completion:v8];
}

void sub_10016C384(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    [*(id *)(a1 + 32) removePendingNotificationRequestsWithIdentifiers:v3];
    id v4 = _MTLogCategoryNotifications();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [v3 count];
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 134218242;
      id v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed %lu pending notifications for podcastUUID: %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10016C468(void *a1, void *a2)
{
  id v3 = [a2 mt_compactMap:&stru_1005536C0];
  id v4 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v11 = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found %lu delivered notifications.", buf, 0xCu);
  }

  uint64_t v6 = (void *)a1[4];
  id v5 = (void *)a1[5];
  uint64_t v7 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10016C5B8;
  void v8[3] = &unk_100553660;
  void v8[4] = v6;
  id v9 = v5;
  [v6 _mt_identifiersMatchingDeletedEpisodesOnPodcastUuid:v9 inNotificationRequests:v3 ctx:v7 completion:v8];
}

UNNotificationRequest *__cdecl sub_10016C5B0(id a1, UNNotification *a2)
{
  return [(UNNotification *)a2 request];
}

void sub_10016C5B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    [*(id *)(a1 + 32) removeDeliveredNotificationsWithIdentifiers:v3];
    id v4 = _MTLogCategoryNotifications();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [v3 count];
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 134218242;
      id v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed %lu delivered notifications for podcastUUID: %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10016C730(uint64_t a1, void *a2)
{
  [a2 mt_compactMap:&stru_1005536E0];
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [*(id *)(a1 + 32) _mt_identifiersMatchingPlayerItemsInNotificationRequests];
  if ([v3 count]) {
    [*(id *)(a1 + 32) removeDeliveredNotificationsWithIdentifiers:v3];
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

UNNotificationRequest *__cdecl sub_10016C7C4(id a1, UNNotification *a2)
{
  return [(UNNotification *)a2 request];
}

id sub_10016C87C(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  if (+[UNNotificationRequest mt_isUuidRequestIdentifier:v3 matchForPodcastUuid:*(void *)(a1 + 32)])
  {
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_10016CD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

id sub_10016CD44(id a1, MTNotificationEpisode *a2)
{
  return [(MTNotificationEpisode *)a2 uuid];
}

void sub_10016CD4C(uint64_t a1)
{
  id v2 = +[MTEpisode predicateForEpisodeUuids:*(void *)(a1 + 32)];
  unsigned int v3 = [*(id *)(a1 + 40) hasAnyObjectsInEntity:kMTEpisodeEntityName satisfyingPredicate:v2];
  id v4 = _MTLogCategoryNotifications();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 48);
      int v9 = 138412546;
      uint64_t v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Not deleting notification. Notification contains episode that is not deleted. Episode uuids in notification: %@ podcastUuid: %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Deleting notification for podcastUuid: %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addObject:*(void *)(a1 + 64)];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_10016CEA4(uint64_t a1)
{
  id v2 = _MTLogCategoryNotifications();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) count];
    int v5 = 134217984;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Deleting %lu notifications.", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10016CF80(id a1, UNNotificationRequest *a2)
{
  id v2 = [(UNNotificationRequest *)a2 identifier];
  if (+[UNNotificationRequest mt_isPlayerItemRequestIdentifier:v2])
  {
    id v3 = v2;
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_10016D554(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectsInEntity:kMTEpisodeEntityName predicate:*(void *)(a1 + 40) propertiesToFetch:*(void *)(a1 + 48) batchSize:0];
  id v3 = _MTLogCategoryDatabase();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v14 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MTEpisodeUpdaterCache loaded %lu episodes", buf, 0xCu);
  }

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10016D720;
  void v4[3] = &unk_1005537B8;
  id v5 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 72);
  id v8 = *(id *)(a1 + 80);
  id v9 = *(id *)(a1 + 88);
  id v10 = *(id *)(a1 + 96);
  id v11 = *(id *)(a1 + 104);
  id v12 = *(id *)(a1 + 112);
  [v2 enumerateObjectsUsingBlock:v4];
}

void sub_10016D720(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 uuid];
  if ([v4 length])
  {
    id v5 = [v3 title];
    id v6 = [v3 enclosureURL];
    id v7 = [v3 guid];
    id v8 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 persistentID]);
    id v9 = [v3 assetURL];
    if (v5)
    {
      id v10 = [a1[4] objectForKey:v5];
      if (!v10)
      {
        id v10 = objc_alloc_init((Class)NSMutableArray);
        [a1[4] setObject:v10 forKey:v5];
      }
      [v10 addObject:v4];
    }
    if (v6) {
      [a1[5] setObject:v4 forKey:v6];
    }
    if (v7) {
      [a1[6] setObject:v4 forKey:v7];
    }
    if (v8) {
      [a1[7] setObject:v4 forKey:v8];
    }
    if (v9) {
      [a1[8] setObject:v4 forKey:v9];
    }
    [a1[9] setObject:v3 forKey:v4];
    [a1[10] setObject:v4 forKey:v4];
    [a1[11] addObject:v4];
  }
  else
  {
    id v11 = _MTLogCategoryDatabase();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = [v3 title];
      int v13 = 138412290;
      id v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "MTEpisodeUpdaterCache encountered episode without UUID %@", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_10016E130(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016E148(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 24) objectForUuid:a1[5] entityName:kMTEpisodeEntityName];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

uint64_t sub_10016E1A4(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 24) objectForUuid:a1[5] entityName:kMTEpisodeEntityName];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_10016E744(uint64_t a1)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_METACLASS___MTShowsPreferencesDataStore;
  id v1 = objc_msgSend(objc_msgSendSuper2(&v3, "allocWithZone:", 0), "init");
  uint64_t v2 = (void *)qword_10060A9A0;
  qword_10060A9A0 = (uint64_t)v1;
}

unint64_t sub_10016E860(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    objc_super v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6460);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  objc_super v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100054BBC(v6, (uint64_t)v15, &qword_1005F6468);
    unint64_t result = sub_100226C5C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10004D384(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016E9A4(uint64_t a1)
{
  return sub_10016F1E8(a1, &qword_1005F64D0);
}

unint64_t sub_10016E9B0(uint64_t a1)
{
  return sub_10016EF88(a1, &qword_1005F6428, &qword_1005F6430, sub_100226C58);
}

unint64_t sub_10016E9D8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    objc_super v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6388);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  objc_super v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100054BBC(v6, (uint64_t)&v15, (uint64_t *)&unk_1005F6390);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100051E78(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10004D384(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016EB10(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6400);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100051E78(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016EC34(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6498);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_100051E78(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016ED60(uint64_t a1)
{
  return sub_10016F1E8(a1, &qword_1005F6530);
}

unint64_t sub_10016ED6C(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005F64D8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78((uint64_t *)&unk_1005F64E0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100054BBC(v12, (uint64_t)v5, &qword_1005F64D8);
    unint64_t result = sub_100226D9C((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for MediaRequest.ContentType();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016EF60(uint64_t a1)
{
  return sub_10016EF88(a1, &qword_1005F64F8, &qword_1005F6500, sub_100226C58);
}

unint64_t sub_10016EF88(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100054BBC(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_10004D384(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016F0B8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6440);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100051E78(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016F1DC(uint64_t a1)
{
  return sub_10016F1E8(a1, &qword_1005F64B8);
}

unint64_t sub_10016F1E8(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100051E78(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016F300(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F64C0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100054BBC(v6, (uint64_t)&v15, &qword_1005F64C8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100051E78(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100042FC4(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016F444(uint64_t a1)
{
  return sub_100051C7C(a1, &qword_1005F6408);
}

unint64_t sub_10016F450(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6470);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100054BBC(v6, (uint64_t)&v15, &qword_1005F6478);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100051E78(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100004C04((uint64_t)&v17, v3[7] + 32 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016F588(uint64_t a1)
{
  return sub_100051C7C(a1, &qword_1005F6510);
}

unint64_t sub_10016F594(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005F6488);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F6490);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100054BBC(v12, (uint64_t)v5, &qword_1005F6488);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_100051E78(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v19 = (uint64_t *)(v7[6] + 16 * result);
    *long long v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for EpisodeMetadata(0);
    unint64_t result = sub_100172F6C(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, type metadata accessor for EpisodeMetadata);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    void v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10016F790(uint64_t a1)
{
  return sub_10016EF88(a1, &qword_1005F6548, &qword_1005F6550, sub_100226C58);
}

unint64_t sub_10016F7B8(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005F64A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100054B78(&qword_1005F64B0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100054BBC(v12, (uint64_t)v5, &qword_1005F64A8);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_100051E78(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v19 = (uint64_t *)(v7[6] + 16 * result);
    *long long v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for MediaLibraryPid();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    void v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of MTNotificationSettingsPresentationController.activePresentedSettingsViewController()
{
  return 0;
}

double variable initialization expression of DebouncedAssetRemovalProcessor.$__lazy_storage_$_episodeStorage@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of LibraryDataProvider.podcastStateController()
{
  if (qword_1005F5A48 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t variable initialization expression of LibraryDataProvider.reviewController()
{
  type metadata accessor for ReviewController();
  uint64_t v0 = swift_allocObject();
  sub_1001700DC(&qword_1005F5BB0, (void (*)(uint64_t))type metadata accessor for ReviewController);
  return v0;
}

uint64_t variable initialization expression of LibraryDataProvider.hudPresenter()
{
  type metadata accessor for HUDPresenter();

  return swift_allocObject();
}

uint64_t variable initialization expression of DebouncedAutoDownloadProcessor.isRunning()
{
  return 0;
}

uint64_t variable initialization expression of LibraryDataProvider.$__lazy_storage_$_signpostID@<X0>(uint64_t a1@<X8>)
{
  return sub_10016FD94((uint64_t (*)(void))&type metadata accessor for OSSignpostID, a1);
}

const char *variable initialization expression of LibraryDataProvider.signpostName()
{
  return "LibraryDataProvider.startObservingEpisodesIfNeeded()";
}

uint64_t variable initialization expression of MTNotificationSettingsViewController.newEpisodeNotifcationGroupInitialHighlightedPodcastUuid()
{
  return 0;
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.Configuration.referenceTime()
{
  return 0;
}

void *variable initialization expression of LibraryEpisodePagePresenter.subscriptions()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.headerButtonItems()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.pageContent()
{
  uint64_t v0 = type metadata accessor for PageContent();
  __chkstk_darwin(v0);
  *((unsigned char *)&v3 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0)) = 0;
  swift_storeEnumTagMultiPayload();
  sub_100054B78(&qword_1005F5BC0);
  swift_allocObject();
  return CurrentValueSubject.init(_:)();
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.pageHeader()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.pageRender()
{
  return sub_100170130((uint64_t *)&unk_1005F5BD0);
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.interactionContextPage@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  type metadata accessor for InteractionContext.Page();
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;

  return swift_storeEnumTagMultiPayload();
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.pageID()
{
  static MetricsPageType.episode.getter();
  uint64_t v0 = static MetricsPageID.unknown.getter();
  uint64_t v2 = v1;
  v3._uint64_t countAndFlagsBits = 95;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = v0;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();

  return PageID.init(with:)();
}

uint64_t variable initialization expression of LibraryEpisodePagePresenter.upsellBannerShelf@<X0>(uint64_t a1@<X8>)
{
  return sub_10016FD94((uint64_t (*)(void))&type metadata accessor for ModernShelf, a1);
}

uint64_t sub_10016FD94@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

void *variable initialization expression of MTTestActionListViewController.orderedTestActionCategories()
{
  return &_swiftEmptyArrayStorage;
}

double variable initialization expression of CarPlayController.$__lazy_storage_$_deviceInfo@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 56) = 1;
  return result;
}

double variable initialization expression of DebouncedAutoDownloadProcessor.debounceInterval()
{
  return 1.0;
}

unint64_t variable initialization expression of MTTestActionListViewController.orderedTestActionsByCategoryName()
{
  return sub_10016F1E8((uint64_t)_swiftEmptyArrayStorage, &qword_1005F6530);
}

uint64_t variable initialization expression of MTTestActionListViewController.testRunner()
{
  type metadata accessor for MTTestActionRunner();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  return result;
}

double variable initialization expression of MTTestActionListViewController.testStartDelay()
{
  return 2.0;
}

uint64_t variable initialization expression of ImplicitFollowsDecayCoordinator.debounceQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static DispatchQoS.background.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1001700DC((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100059F08();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t sub_1001700DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t variable initialization expression of ImplicitFollowsDecayCoordinator.implicitFollowsEvents()
{
  return sub_100170130(&qword_1005F5BF8);
}

uint64_t sub_100170130(uint64_t *a1)
{
  return PassthroughSubject.init()();
}

void *variable initialization expression of ImplicitFollowsDecayCoordinator.subscriptions()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0 || !_CocoaArrayWrapper.endIndex.getter()) {
    return &_swiftEmptySetSingleton;
  }
  return (void *)sub_100172170((unint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of InterestSyncProcessor.signpostID()
{
  return sub_1001701EC((void (*)(uint64_t))&static OSSignposter.interests.getter);
}

uint64_t variable initialization expression of NonFollowedShowsSyncProcessor.signpostID()
{
  return sub_1001701EC((void (*)(uint64_t))&static OSSignposter.cloudSync.getter);
}

uint64_t sub_1001701EC(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for OSSignposter();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

const char *variable initialization expression of UberArtworkResetMigrator.stepIdentifier()
{
  return "com.apple.podcasts.artwork.uber-migration.rdar120006144";
}

uint64_t MTWelcomeViewController.isAcknowledgementRequired.getter()
{
  return 1;
}

uint64_t variable initialization expression of CopyTranscriptSelectionProvider.maxTranscriptWordsToCopy()
{
  return 200;
}

id variable initialization expression of UIAppSettingsBridge.app()
{
  id v0 = [self sharedApplication];

  return v0;
}

uint64_t variable initialization expression of FeedManager.systemFuture()
{
  return UninitializedCurrentValueSubject.init()();
}

uint64_t variable initialization expression of FeedManager.queue()
{
  return sub_1001704AC();
}

uint64_t variable initialization expression of FeedManager._system()
{
  return 0;
}

uint64_t variable initialization expression of PodcastsPlayerAdapter.playerPathCoordinator()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v0 = objc_allocWithZone((Class)type metadata accessor for PlayerPathCoordinator());
  return PlayerPathCoordinator.init(playerID:bundleID:)();
}

id variable initialization expression of PodcastsPlayerAdapter.playerRequestController()
{
  id v0 = objc_allocWithZone((Class)MPRequestResponseController);

  return [v0 init];
}

uint64_t variable initialization expression of PodcastsPlayerAdapter.playerID()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

double variable initialization expression of PodcastsPlayerAdapter.jumpForwardsAmount()
{
  return 30.0;
}

double variable initialization expression of PodcastsPlayerAdapter.jumpBackwardsAmount()
{
  return 15.0;
}

id variable initialization expression of ForegroundSyncUtil.defaults()
{
  id v0 = [self _applePodcastsFoundationSharedUserDefaults];

  return v0;
}

uint64_t variable initialization expression of ForegroundSyncUtil.workQueue()
{
  return sub_1001704AC();
}

uint64_t sub_1001704AC()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1001700DC((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100059F08();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

id variable initialization expression of ForegroundSyncUtil.syncController()
{
  id v0 = [self sharedInstance];

  return v0;
}

uint64_t variable initialization expression of ForegroundSyncUtil.categoriesSyncUtil()
{
  uint64_t v0 = sub_100054B78(&qword_1005F5D20);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LibraryImageProvider();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self sharedInstance];
  uint64_t v29 = sub_10004D29C(0, &qword_1005F5D28);
  id v30 = &protocol witness table for IMURLBag;
  id v28 = v7;
  uint64_t v8 = (objc_class *)type metadata accessor for MediaRequestController();
  id v9 = [objc_allocWithZone(v8) init];
  uint64_t v26 = (uint64_t)v8;
  uint64_t v27 = &protocol witness table for MediaRequestController;
  uint64_t v25 = (uint64_t)v9;
  uint64_t v10 = type metadata accessor for MAPICategoriesProvider();
  swift_allocObject();
  uint64_t v11 = MAPICategoriesProvider.init(mediaRequestController:)();
  uint64_t v26 = v10;
  uint64_t v27 = &protocol witness table for MAPICategoriesProvider;
  uint64_t v25 = v11;
  static LibraryImageProvider.background.getter();
  type metadata accessor for CategoryIngester();
  uint64_t v12 = (uint64_t *)swift_allocObject();
  v12[5] = v3;
  v12[6] = (uint64_t)&protocol witness table for LibraryImageProvider;
  uint64_t v13 = sub_10004A244(v12 + 2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v4 + 32))(v13, v6, v3);
  id v14 = [self _applePodcastsFoundationSharedUserDefaults];
  id v15 = [v14 objectForKey:kMTLastCategoriesSyncDateDefaultKey];

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  sub_100004C04((uint64_t)v22, (uint64_t)v23);
  if (v24)
  {
    uint64_t v16 = type metadata accessor for Date();
    int v17 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v2, v17 ^ 1u, 1, v16);
  }
  else
  {
    sub_100172424((uint64_t)v23);
    uint64_t v18 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v2, 1, 1, v18);
  }
  sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  static OS_dispatch_queue.uiAssetPreparationQueue.getter();
  id v19 = [self sharedInstance];
  id v20 = [v19 importContext];

  type metadata accessor for CategoriesSyncUtil();
  swift_allocObject();
  return CategoriesSyncUtil.init(categoriesSyncThresholdProvider:categoriesProvider:categoryIngester:lastCategoriesSyncDate:queue:ctx:)();
}

double variable initialization expression of ForegroundSyncUtil.storefrontChangeObserver@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

const char *variable initialization expression of EntitledFirstTimeAvailableMigrator.stepIdentifier()
{
  return "com.apple.podcasts.db.firstAvailabilityDate-migration.rdar138352221";
}

uint64_t variable initialization expression of EpisodeDownloadsManager.delegateQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  v10[1] = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  type metadata accessor for EpisodeDownloadsManager();
  sub_100054B78(&qword_1005F5D38);
  v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x746167656C65642ELL;
  v8._object = (void *)0xEE00657565755165;
  String.append(_:)(v8);
  static DispatchQoS.unspecified.getter();
  uint64_t v11 = _swiftEmptyArrayStorage;
  sub_1001700DC((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100059F08();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of EpisodeDownloadsManager.accessQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  v10[1] = sub_10004D29C(0, (unint64_t *)&qword_1005F8B70);
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  type metadata accessor for EpisodeDownloadsManager();
  sub_100054B78(&qword_1005F5D38);
  v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x517373656363612ELL;
  v8._object = (void *)0xEC00000065756575;
  String.append(_:)(v8);
  static DispatchQoS.unspecified.getter();
  uint64_t v11 = _swiftEmptyArrayStorage;
  sub_1001700DC((unint64_t *)&qword_1005F5BE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100054B78((uint64_t *)&unk_1005F7A60);
  sub_100059F08();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t variable initialization expression of EpisodeDownloadsManager._downloaders()
{
  return sub_10005A2F4((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of EpisodeDownloadsManager.inMemoryStorage()
{
  type metadata accessor for JobPipelineInMemoryStorage();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)NSRecursiveLock) init];
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  return v0;
}

uint64_t sub_100171098(uint64_t a1, uint64_t a2)
{
  return sub_100171E70(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_1001710C4(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1001710CC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1001710E0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1001710F4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_100171108@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100171134@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100171158(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10017116C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100171180(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100171194@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1001711A8(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1001711BC(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1001711D0(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1001711E4()
{
  return *v0 == 0;
}

uint64_t sub_1001711F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_10017120C(void *result)
{
  *v1 &= ~*result;
  return result;
}

NSNumber sub_100171220()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_100171228(uint64_t a1, uint64_t a2)
{
  uint64_t result = static Int._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_10017127C(uint64_t a1, uint64_t a2)
{
  char v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_1001712D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

BOOL sub_1001712FC(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_100171310@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100171320(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_10017132C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

Swift::Int sub_10017135C(uint64_t a1, uint64_t a2)
{
  return sub_100171600(a1, a2, (void (*)(uint64_t))&Hasher._combine(_:));
}

void sub_100171374()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1001713A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100171684(a1, a2, a3, (void (*)(uint64_t))&Hasher._combine(_:));
}

Swift::Int sub_1001713B8()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100171400()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10017142C()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_100171470(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100171484(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1001714FC(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10017157C@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1001715C0()
{
  return Int.hashValue.getter();
}

uint64_t sub_1001715C8()
{
  return static Hasher._hash(seed:_:)();
}

Swift::Int sub_1001715D0(uint64_t a1, uint64_t a2)
{
  return sub_100171600(a1, a2, (void (*)(uint64_t))&Hasher._combine(_:));
}

Swift::Int sub_1001715E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100171684(a1, a2, a3, (void (*)(uint64_t))&Hasher._combine(_:));
}

Swift::Int sub_100171600(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

void sub_100171658()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100171684(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_1001716DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100172E84(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_10017171C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_100171728@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_100171738(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100171748()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100171804()
{
  sub_1001700DC(&qword_1005F66A0, type metadata accessor for ProgressUserInfoKey);
  sub_1001700DC(&qword_1005F66A8, type metadata accessor for ProgressUserInfoKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1001718C0()
{
  sub_1001700DC(&qword_1005F66C0, type metadata accessor for FileAttributeKey);
  sub_1001700DC(&qword_1005F66C8, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10017197C()
{
  sub_1001700DC(&qword_1005F66F0, type metadata accessor for OpenExternalURLOptionsKey);
  sub_1001700DC(&qword_1005F66F8, type metadata accessor for OpenExternalURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100171A38()
{
  sub_1001700DC(&qword_1005F6700, type metadata accessor for ActivityType);
  sub_1001700DC(&qword_1005F6708, type metadata accessor for ActivityType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100171AF4()
{
  sub_1001700DC((unint64_t *)&qword_1005F6690, type metadata accessor for Key);
  sub_1001700DC(&qword_1005F6698, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100171BB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100171BDC()
{
  sub_1001700DC(&qword_1005F66B0, type metadata accessor for BuildType);
  sub_1001700DC(&qword_1005F66B8, type metadata accessor for BuildType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100171C98()
{
  sub_1001700DC((unint64_t *)&qword_1005F66E0, type metadata accessor for OpenURLOptionsKey);
  sub_1001700DC(&qword_1005F66E8, type metadata accessor for OpenURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100171D54@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100171D9C()
{
  sub_1001700DC(&qword_1005F66D0, type metadata accessor for LaunchOptionsKey);
  sub_1001700DC(&qword_1005F66D8, type metadata accessor for LaunchOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100171E58(uint64_t a1, uint64_t a2)
{
  return sub_100171E70(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100171E70(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100171EB4()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100171F08()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100171F7C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

Swift::Int sub_100172008(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100054B78(&qword_1005F64F0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      sub_100172EBC(v6 + 40 * v4, (uint64_t)v21);
      Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v3 + 40));
      uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
      unint64_t v9 = result & v8;
      unint64_t v10 = (result & (unint64_t)v8) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1 << (result & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          sub_100172EBC(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v20);
          char v13 = static AnyHashable.== infix(_:_:)();
          Swift::Int result = sub_100172F18((uint64_t)v20);
          if (v13) {
            break;
          }
          unint64_t v9 = (v9 + 1) & v8;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            goto LABEL_8;
          }
        }
        sub_100172F18((uint64_t)v21);
      }
      else
      {
LABEL_8:
        *(void *)(v5 + 8 * v10) = v12 | v11;
        uint64_t v14 = *(void *)(v3 + 48) + 40 * v9;
        long long v15 = v21[0];
        long long v16 = v21[1];
        *(void *)(v14 + 32) = v22;
        *(_OWORD *)uint64_t v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        uint64_t v17 = *(void *)(v3 + 16);
        BOOL v18 = __OFADD__(v17, 1);
        uint64_t v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v19;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t sub_100172170(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    Swift::Int result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100054B78(&qword_1005F6518);
      Swift::Int result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      Swift::Int result = swift_bridgeObjectRelease();
      if (!v5) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  uint64_t v8 = v3 + 56;
  unint64_t v21 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  while (v21)
  {
    Swift::Int result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_25;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    sub_1001700DC(&qword_1005F6520, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    Swift::Int result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      sub_1001700DC(&qword_1005F6528, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      while (1)
      {
        Swift::Int result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          goto LABEL_22;
        }
      }
      Swift::Int result = swift_release();
    }
    else
    {
LABEL_22:
      *(void *)&v8[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v9;
      uint64_t v17 = *((void *)v3 + 2);
      BOOL v10 = __OFADD__(v17, 1);
      uint64_t v18 = v17 + 1;
      if (v10) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v18;
    }
    if (v7 == v5) {
      return (unint64_t)v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  Swift::Int result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100172424(uint64_t a1)
{
  uint64_t v2 = sub_100054B78(&qword_1005F5D30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 initializeWithTake for DownloaderSessionConfigurationType(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100172490(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001724B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for MTPodcastCellularDownloadLimit(uint64_t a1)
{
}

void type metadata accessor for UIBackgroundTaskIdentifier(uint64_t a1)
{
}

void type metadata accessor for Attributes(uint64_t a1)
{
}

void type metadata accessor for MTPodcastDeletePlayed(uint64_t a1)
{
}

void type metadata accessor for MTPodcastHidesPlayedEpisodes(uint64_t a1)
{
}

void type metadata accessor for MTPodcastShowType(uint64_t a1)
{
}

void type metadata accessor for State(uint64_t a1)
{
}

void type metadata accessor for LegacyDownloadPhase(uint64_t a1)
{
}

void type metadata accessor for MTEpisodeDownloadPhase(uint64_t a1)
{
}

void type metadata accessor for MTEpisodePubDateLimit(uint64_t a1)
{
}

uint64_t sub_1001725B4()
{
  return sub_1001700DC(&qword_1005F6338, type metadata accessor for Attributes);
}

uint64_t sub_1001725FC()
{
  return sub_1001700DC(&qword_1005F6340, type metadata accessor for Attributes);
}

uint64_t sub_100172644()
{
  return sub_1001700DC(&qword_1005F6348, type metadata accessor for Attributes);
}

uint64_t sub_10017268C()
{
  return sub_1001700DC(&qword_1005F6350, type metadata accessor for Attributes);
}

uint64_t sub_1001726D4()
{
  return sub_1001700DC(&qword_1005F6358, type metadata accessor for UIBackgroundTaskIdentifier);
}

uint64_t sub_10017271C()
{
  return sub_1001700DC(&qword_1005F6360, type metadata accessor for UIBackgroundTaskIdentifier);
}

uint64_t sub_100172764()
{
  return sub_1001700DC(&qword_1005F6368, type metadata accessor for UIBackgroundTaskIdentifier);
}

uint64_t sub_1001727AC()
{
  return sub_1001700DC(&qword_1005F6370, type metadata accessor for MTPodcastDeletePlayed);
}

uint64_t sub_1001727F4()
{
  return sub_1001700DC(&qword_1005F6378, type metadata accessor for MTPodcastHidesPlayedEpisodes);
}

uint64_t sub_10017283C()
{
  return sub_1001700DC(&qword_1005F6380, type metadata accessor for MTPodcastShowType);
}

Swift::Int sub_100172884(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100054B78(&qword_1005F6448);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt64 v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_1001729C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100054B78(&qword_100607F90);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      unint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *unint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void *sub_100172B6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlaybackIntent.Option();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100054B78(&qword_1005F6410);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    long long v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    id v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1001700DC(&qword_1005F6418, (void (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1001700DC(&qword_1005F6420, (void (*)(uint64_t))&type metadata accessor for PlaybackIntent.Option);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        Swift::Int result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100172E84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100172EBC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100172F18(uint64_t a1)
{
  return a1;
}

uint64_t sub_100172F6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for MRMediaRemoteError(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

void type metadata accessor for ProgressUserInfoKey(uint64_t a1)
{
}

void type metadata accessor for BuildType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
}

void type metadata accessor for OpenURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for MTEpisodePlayState(uint64_t a1)
{
}

void type metadata accessor for MTPlaybackRequestStatus(uint64_t a1)
{
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for ActivityType(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for Style(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for DownloaderConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithCopy for CarPlayDeviceInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100173128(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10017317C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1001731CC()
{
  return sub_1001700DC(&qword_1005F65D0, type metadata accessor for ActivityType);
}

uint64_t sub_100173214()
{
  return sub_1001700DC(&qword_1005F65D8, type metadata accessor for ActivityType);
}

uint64_t sub_10017325C()
{
  return sub_1001700DC(&qword_1005F65E0, type metadata accessor for ActivityType);
}

uint64_t sub_1001732A4()
{
  return sub_1001700DC(&qword_1005F65E8, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_1001732EC()
{
  return sub_1001700DC(&qword_1005F65F0, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_100173334()
{
  return sub_1001700DC(&qword_1005F65F8, type metadata accessor for OpenURLOptionsKey);
}

uint64_t sub_10017337C()
{
  return sub_1001700DC(&qword_1005F6600, type metadata accessor for OpenURLOptionsKey);
}

uint64_t sub_1001733C4()
{
  return sub_1001700DC(&qword_1005F6608, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_10017340C()
{
  return sub_1001700DC(&qword_1005F6610, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_100173454()
{
  return sub_1001700DC(&qword_1005F6618, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10017349C()
{
  return sub_1001700DC(&qword_1005F6620, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1001734E4()
{
  return sub_1001700DC(&qword_1005F6628, type metadata accessor for BuildType);
}

uint64_t sub_10017352C()
{
  return sub_1001700DC(&qword_1005F6630, type metadata accessor for BuildType);
}

uint64_t sub_100173574()
{
  return sub_1001700DC(&qword_1005F6638, type metadata accessor for BuildType);
}

uint64_t sub_1001735BC()
{
  return sub_1001700DC(&qword_1005F6640, type metadata accessor for ProgressUserInfoKey);
}

uint64_t sub_100173604()
{
  return sub_1001700DC(&qword_1005F6648, type metadata accessor for ProgressUserInfoKey);
}

uint64_t sub_10017364C()
{
  return sub_1001700DC(&qword_1005F6650, type metadata accessor for Key);
}

uint64_t sub_100173694()
{
  return sub_1001700DC(&qword_1005F6658, type metadata accessor for Key);
}

uint64_t sub_1001736DC()
{
  return sub_1001700DC(&qword_1005F6660, type metadata accessor for Key);
}

uint64_t sub_100173724()
{
  return sub_1001700DC(&qword_1005F6668, type metadata accessor for ProgressUserInfoKey);
}

uint64_t sub_10017376C()
{
  return sub_1001700DC(&qword_1005F6670, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1001737B4()
{
  return sub_1001700DC(&qword_1005F6678, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_1001737FC()
{
  return sub_1001700DC(&qword_1005F6680, type metadata accessor for OpenURLOptionsKey);
}

uint64_t sub_100173844()
{
  return sub_1001700DC(&qword_1005F6688, type metadata accessor for OpenExternalURLOptionsKey);
}

void type metadata accessor for MTEpisodeEntitlementState(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for CLSContextType(uint64_t a1)
{
}

void type metadata accessor for MTBookmarksSyncType(uint64_t a1)
{
}

void type metadata accessor for MTSubscriptionSyncType(uint64_t a1)
{
}

uint64_t sub_1001738F0()
{
  return sub_1001700DC(&qword_1005F6738, type metadata accessor for MTSubscriptionSyncType);
}

uint64_t sub_100173938()
{
  return sub_1001700DC((unint64_t *)&unk_1005F6740, type metadata accessor for MTBookmarksSyncType);
}

void CarPlayController.graph.setter()
{
}

void *initializeBufferWithCopyOfBuffer for DownloaderSessionConfigurationType(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DownloaderSessionConfigurationType(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for DownloaderSessionConfigurationType(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloaderSessionConfigurationType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloaderSessionConfigurationType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for DownloaderSessionIdentifier()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s8Podcasts27DownloaderSessionIdentifierVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DownloaderSessionIdentifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for DownloaderSessionIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloaderSessionIdentifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloaderSessionIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloaderSessionIdentifier()
{
  return &type metadata for DownloaderSessionIdentifier;
}

uint64_t *assignWithCopy for DownloaderConfiguration(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *sub_100173CCC(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for DownloaderConfiguration(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for DownloaderConfiguration(uint64_t a1, uint64_t a2)
{
  sub_10004D2D8(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_10004D2D8(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_10004D2D8(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  sub_10004D2D8(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloaderConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloaderConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloaderConfiguration()
{
  return &type metadata for DownloaderConfiguration;
}

uint64_t getEnumTagSinglePayload for PodcastsDownloader(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PodcastsDownloader(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001741D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_100174200(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100174208(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PodcastsDownloader()
{
  return &type metadata for PodcastsDownloader;
}

Swift::Int sub_100174220()
{
  return Hasher._finalize()();
}

Swift::Int sub_100174304()
{
  return Hasher._finalize()();
}

Swift::Int sub_10017438C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100174410()
{
  return Hasher._finalize()();
}

uint64_t sub_1001744EC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001745B4()
{
  return Hasher._finalize()();
}

Swift::Int sub_100174694()
{
  return Hasher._finalize()();
}

Swift::Int sub_100174718()
{
  return Hasher._finalize()();
}

Swift::Int sub_100174798()
{
  return Hasher._finalize()();
}

uint64_t sub_100174870(char *a1, char *a2)
{
  return sub_1002ECF84(*a1, *a2);
}

Swift::Int sub_10017487C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001748FC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100174968()
{
  return Hasher._finalize()();
}

uint64_t sub_1001749E4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100553A10, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100174A44(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1936484398;
  if (!*v1) {
    uint64_t v2 = 0x7261646E6174732ELL;
  }
  unint64_t v3 = 0xE900000000000064;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100174A80(void *a1@<X8>)
{
  *a1 = &off_100553A60;
}

Swift::Int sub_100174A90()
{
  return Hasher._finalize()();
}

uint64_t sub_100174AEC()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100174B44()
{
  return Hasher._finalize()();
}

uint64_t sub_100174B9C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  strcpy((char *)v5, "ConfigType: ");
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5[0];
}

uint64_t sub_100174C10(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_100174C40(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    uint64_t v3 = 1936484398;
  }
  else {
    uint64_t v3 = 0x7261646E6174732ELL;
  }
  if (a3) {
    unsigned int v4 = (void *)0xE400000000000000;
  }
  else {
    unsigned int v4 = (void *)0xE900000000000064;
  }
  v7._uint64_t countAndFlagsBits = a1;
  v7._object = a2;
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0x496E6F6973736553;
}

Swift::Int sub_100174CFC()
{
  return Hasher._finalize()();
}

uint64_t sub_100174DA8()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100174E48()
{
  return Hasher._finalize()();
}

uint64_t sub_100174EF0()
{
  return sub_100174C40(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100174EFC(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 16);
  char v3 = *(unsigned char *)(a2 + 16);
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }

  return sub_1002ECF84(v2, v3);
}

unint64_t sub_100174F74(char a1)
{
  unint64_t result = 0xD000000000000033;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 3:
      unint64_t result = 0xD00000000000002FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100175038(char *a1, char *a2)
{
  return sub_1002ED5A8(*a1, *a2);
}

Swift::Int sub_100175044()
{
  return sub_100174220();
}

uint64_t sub_10017504C()
{
  return sub_1001744EC();
}

Swift::Int sub_100175054()
{
  return sub_1001745B4();
}

unint64_t sub_10017505C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100175364(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10017508C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100174F74(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1001750BC()
{
  unint64_t result = qword_1005F6810;
  if (!qword_1005F6810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F6810);
  }
  return result;
}

unint64_t sub_100175114()
{
  unint64_t result = qword_1005F6818;
  if (!qword_1005F6818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F6818);
  }
  return result;
}

uint64_t sub_100175168(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t sub_100175204()
{
  v0._uint64_t countAndFlagsBits = 0x7261646E6174732ELL;
  v0._object = (void *)0xE900000000000064;
  Swift::Bool v1 = String.hasSuffix(_:)(v0);
  swift_bridgeObjectRelease();
  if (v1
    || (v2._uint64_t countAndFlagsBits = 1936484398,
        v2._object = (void *)0xE400000000000000,
        Swift::Bool v3 = String.hasSuffix(_:)(v2),
        swift_bridgeObjectRelease(),
        v3))
  {
    uint64_t v4 = String.count.getter();
    swift_bridgeObjectRelease();
    sub_100175168(v4);
    swift_bridgeObjectRelease();
    uint64_t v5 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v5;
}

unint64_t sub_100175364(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100553AB0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t getEnumTagSinglePayload for SessionConfigFlavor(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SessionConfigFlavor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10017550CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100175534(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SessionConfigFlavor()
{
  return &type metadata for SessionConfigFlavor;
}

unint64_t sub_100175554()
{
  unint64_t result = qword_1005F6830;
  if (!qword_1005F6830)
  {
    sub_100044244(&qword_1005F6838);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F6830);
  }
  return result;
}

unint64_t sub_1001755B4()
{
  unint64_t result = qword_1005F6840;
  if (!qword_1005F6840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005F6840);
  }
  return result;
}

unint64_t sub_100175610(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      sub_100189FF0(a1, a2, a3 & 0x3F);
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      sub_10018A280();
      v6._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      sub_10018AA14(a1, a2, a3);
      return 0xD000000000000011;
    }
    swift_errorRetain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t v9 = 0x20636972656E6547;
    swift_getErrorValue();
  }
  else
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t v9 = 0x206B726F7774654ELL;
    swift_getErrorValue();
  }
  v8._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_10018AA14(a1, a2, a3);
  return v9;
}

unint64_t sub_1001757E8()
{
  return sub_100175610(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100175800()
{
  uint64_t v1 = *v0;
  int v2 = (void *)v0[1];
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  return 0x2064696C61766E49;
}

unint64_t sub_100175884(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
  {
    unint64_t v13 = 0;
    _StringGuts.grow(_:)(60);
    v6._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v6._object = (void *)0x80000001004D2BB0;
    String.append(_:)(v6);
    v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 0x3A74696D696C202CLL;
    v8._object = (void *)0xE900000000000020;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return v13;
  }
  if (a3 == 1)
  {
    swift_errorRetain();
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000020;
    swift_getErrorValue();
    v5._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    sub_10018A014(a1, a2, 1);
    return v13;
  }
  unint64_t v12 = 0xD000000000000014;
  if (!(a1 ^ 1 | a2)) {
    unint64_t v12 = 0x656C6C65636E6143;
  }
  if (a1 | a2) {
    return v12;
  }
  else {
    return 0xD000000000000012;
  }
}

unint64_t sub_100175A98()
{
  return sub_100175884(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100175AA4()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  sub_10018A30C(v0, qword_10061A948);
  *(void *)sub_10018A370(v0, (uint64_t)qword_10061A948) = 200;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

BOOL sub_100175B34(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100175B4C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100175B94()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100175BC0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100175C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job;
  swift_beginAccess();
  return sub_10018A620(v3, a2, type metadata accessor for DownloadJob);
}

uint64_t sub_100175C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__job;
  swift_beginAccess();
  sub_10018A6B8(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100175CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100056D54(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline__task, a2);
}

id sub_100175D10()
{
  uint64_t v1 = OBJC_IVAR____TtC8Podcasts11JobPipeline____lazy_storage___operationQueue;
  int v2 = *(void **)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline____lazy_storage___operationQueue);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline____lazy_storage___operationQueue);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)NSOperationQueue) init];
    NSString v5 = String._bridgeToObjectiveC()();
    [v4 setName:v5];

    [v4 setMaxConcurrentOperationCount:1];
    Swift::String v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    int v2 = 0;
  }
  id v7 = v2;
  return v3;
}

void sub_100175DD4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v3 = *(id *)(Strong + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    sub_100054B78(&qword_1005F8450);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();

    uint64_t v4 = v32;
    uint64_t v5 = v33;
    sub_100041A98(v31, v32);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 56))(v4, v5);
    unint64_t v8 = v7;
    sub_10004D2D8((uint64_t)v31);
    if (a1 != 1) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xE000000000000000;
    if (a1 != 1)
    {
LABEL_3:
      if (a1)
      {
        swift_bridgeObjectRelease();
        return;
      }
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      Swift::String v10 = static OS_os_log.downloads.getter();
      os_log_type_t v11 = v9;
      if (os_log_type_enabled(v10, v9))
      {
        swift_bridgeObjectRetain();
        unint64_t v12 = (uint8_t *)swift_slowAlloc();
        v31[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v12 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&v30[0] = sub_10004B974(v6, v8, v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        unint64_t v13 = "Task %{public}s is running";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
LABEL_14:
      swift_bridgeObjectRelease();

      return;
    }
  }
  swift_beginAccess();
  uint64_t v14 = swift_weakLoadStrong();
  if (!v14)
  {
    os_log_type_t v20 = static os_log_type_t.error.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    Swift::String v10 = static OS_os_log.downloads.getter();
    os_log_type_t v11 = v20;
    if (os_log_type_enabled(v10, v20))
    {
      swift_bridgeObjectRetain();
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v12 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&v30[0] = sub_10004B974(v6, v8, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      unint64_t v13 = "Task %{public}s state got change into suspended, but no progress provided.";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  id v15 = *(id *)(v14 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  sub_100054B78(&qword_1005F8450);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();

  sub_100042FC4(v30, (uint64_t)v31);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v17 = static OS_os_log.downloads.getter();
  os_log_type_t v18 = v16;
  if (os_log_type_enabled(v17, v16))
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(void *)&v30[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v19 = 136446210;
    swift_bridgeObjectRetain();
    sub_10004B974(v6, v8, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Task %{public}s has been suspended", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v21 = v32;
    uint64_t v22 = v33;
    sub_100041A98(v31, v32);
    char v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
    uint64_t v24 = v32;
    uint64_t v25 = v33;
    sub_100041A98(v31, v32);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 96))(v24, v25);
    uint64_t v27 = v32;
    uint64_t v28 = v33;
    sub_100041A98(v31, v32);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 104))(v27, v28);
    sub_1001880A4(v23, v26, v29, 1);
    swift_release();
  }
  sub_10004D2D8((uint64_t)v31);
}

void sub_1001763A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = (uint64_t *)(v6 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  uint64_t v8 = *(void *)(v6 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  uint64_t *v7 = a1;
  v7[1] = a2;
  void v7[2] = a3;
  v7[3] = a4;
  sub_10018D364(a1);
  sub_10018D3A4(v8);
  uint64_t v142 = v6;
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_1003C4468(v6);
    swift_unknownObjectRelease();
  }
  os_log_type_t v9 = (objc_class *)sub_100054B78(&qword_1005F6D20);
  Swift::String v10 = (char *)objc_allocWithZone(v9);
  os_log_type_t v11 = &v10[*(void *)((swift_isaMask & *(void *)v10) + 0x180)];
  *(void *)os_log_type_t v11 = 0;
  v11[8] = 2;
  unint64_t v12 = &v10[*(void *)((swift_isaMask & *(void *)v10) + 0x188)];
  *(void *)unint64_t v12 = sub_10018D3E4;
  *((void *)v12 + 1) = v142;
  v154.receiver = v10;
  v154.super_class = v9;
  swift_retain();
  unint64_t v13 = (char *)objc_msgSendSuper2(&v154, "init");
  uint64_t v14 = (objc_class *)sub_100054B78(&qword_1005F6D28);
  id v15 = (char *)objc_allocWithZone(v14);
  os_log_type_t v16 = &v15[*(void *)((swift_isaMask & *(void *)v15) + 0x180)];
  *(void *)os_log_type_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *((_WORD *)v16 + 8) = 512;
  uint64_t v17 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v15[*(void *)((swift_isaMask & *(void *)v15)
                                                                                 + 0x188)];
  *uint64_t v17 = sub_10018D3EC;
  v17[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v142;
  v153.receiver = v15;
  v153.super_class = v14;
  swift_retain();
  unsigned int v131 = (char *)[v153 init];
  os_log_type_t v18 = (objc_class *)sub_100054B78((uint64_t *)&unk_1005FF010);
  unint64_t v19 = (char *)objc_allocWithZone(v18);
  os_log_type_t v20 = &v19[*(void *)((swift_isaMask & *(void *)v19) + 0x180)];
  *(void *)os_log_type_t v20 = 0;
  v20[8] = 2;
  uint64_t v21 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v19[*(void *)((swift_isaMask & *(void *)v19) + 0x188)];
  *uint64_t v21 = sub_10018D408;
  v21[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v142;
  v152.receiver = v19;
  v152.super_class = v18;
  swift_retain();
  id v127 = [super init];
  uint64_t v22 = OBJC_IVAR____TtC8Podcasts11JobPipeline_jobStorage;
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  swift_retain();
  long long v139 = *(_OWORD *)(v142 + v22);
  swift_unknownObjectRetain();
  uint64_t v23 = static OS_os_log.downloads.getter();
  uint64_t v24 = (objc_class *)sub_100054B78(&qword_1005F6D30);
  uint64_t v25 = (char *)objc_allocWithZone(v24);
  uint64_t v26 = &v25[*(void *)((swift_isaMask & *(void *)v25) + 0x198)];
  *(void *)uint64_t v26 = 0;
  uint8_t v26[8] = 2;
  uint64_t v27 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v25[*(void *)((swift_isaMask & *(void *)v25)
                                                                                    + 0x1A8)];
  *uint64_t v27 = sub_10018D424;
  v27[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v142;
  *(_OWORD *)&v25[*(void *)((swift_isaMask & *(void *)v25) + 0x1A0)] = v139;
  *(void *)&v25[*(void *)((swift_isaMask & *(void *)v25) + 0x1B0)] = v23;
  v151.receiver = v25;
  v151.super_class = v24;
  id v140 = [super init];
  uint64_t v28 = (objc_class *)sub_100054B78(&qword_1005F6D38);
  uint64_t v29 = objc_allocWithZone(v28);
  sub_100054B78(&qword_100608080);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = (uint64_t (**)(uint64_t, void (*)(char *), uint64_t))((char *)v29
                                                                               + *(void *)((swift_isaMask & *v29)
                                                                                           + 0x188));
  void *v30 = sub_10018D42C;
  v30[1] = (uint64_t (*)(uint64_t, void (*)(char *), uint64_t))v142;
  v150.receiver = v29;
  v150.super_class = v28;
  swift_retain();
  id v134 = [super init];
  id v31 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject();
  *((void *)v31 + 2) = v142;
  *((void *)v31 + 3) = a5;
  *((void *)v31 + 4) = a6;
  uint64_t v32 = (objc_class *)sub_100054B78(&qword_1005F6D40);
  uint64_t v33 = objc_allocWithZone(v32);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v33
                                                                 + *(void *)((swift_isaMask & *v33) + 0x188));
  *uint64_t v34 = sub_10018D490;
  v34[1] = v31;
  swift_retain();
  sub_10004ACDC(a5);
  v149.receiver = v33;
  v149.super_class = v32;
  long long v35 = v131;
  [super init];
  uint64_t v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v37 = (uint64_t (**)(uint64_t))&v13[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v38 = *(void *)&v13[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  char *v37 = sub_10018D4B0;
  v37[1] = (uint64_t (*)(uint64_t))v36;
  sub_1000536BC(v38);
  self;
  CFStringRef v133 = v13;
  uint64_t v39 = swift_dynamicCastObjCClass();
  if (v39)
  {
    uint64_t v40 = v39;
    swift_getObjectType();
    uint64_t v41 = swift_conformsToProtocol2();
    uint64_t v42 = v41 ? v41 : 0;
    if (v41 ? v40 : 0)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 24) = v42;
      swift_unknownObjectWeakInit();
      uint64_t v45 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = v44;
      uint64_t v47 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v42 + 72);
      id v48 = (id)swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      v47(sub_10004AF2C, v46, ObjectType, v42);
      long long v35 = v131;
      swift_release();
      swift_release();
      swift_release();
      v143.receiver = v131;
      v143.super_class = (Class)type metadata accessor for BaseOperation();
      [super addDependency:v40];
    }
  }
  uint64_t v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  __int16 v50 = (uint64_t (**)(uint64_t))&v35[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v51 = *(void *)&v35[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  void *v50 = sub_10018A578;
  v50[1] = (uint64_t (*)(uint64_t))v49;
  __int16 v52 = v35;
  sub_1000536BC(v51);
  self;
  uint64_t v53 = swift_dynamicCastObjCClass();
  int v132 = v52;
  if (v53)
  {
    uint64_t v54 = v53;
    swift_getObjectType();
    uint64_t v55 = swift_conformsToProtocol2();
    uint64_t v56 = v55 ? v55 : 0;
    if (v55 ? v54 : 0)
    {
      uint64_t v126 = swift_getObjectType();
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 24) = v56;
      swift_unknownObjectWeakInit();
      uint64_t v59 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v60 = swift_allocObject();
      *(void *)(v60 + 16) = v59;
      *(void *)(v60 + 24) = v58;
      id v61 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v56 + 72);
      swift_unknownObjectRetain();
      uint64_t v62 = v52;
      swift_retain();
      swift_retain();
      v61(sub_10004AF2C, v60, v126, v56);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v63 = (objc_class *)type metadata accessor for BaseOperation();
      v144.receiver = v127;
      v144.super_class = v63;
      [super addDependency:v54];

      __int16 v52 = v132;
    }
  }
  id v64 = (char *)v127;

  uint64_t v65 = swift_allocObject();
  id v66 = v140;
  swift_unknownObjectWeakInit();
  uint64_t v67 = (uint64_t (**)(uint64_t))&v64[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v68 = *(void *)&v64[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *uint64_t v67 = sub_10018AAC8;
  v67[1] = (uint64_t (*)(uint64_t))v65;
  sub_1000536BC(v68);
  self;
  uint64_t v69 = swift_dynamicCastObjCClass();
  if (v69)
  {
    uint64_t v70 = v69;
    swift_getObjectType();
    uint64_t v71 = swift_conformsToProtocol2();
    uint64_t v72 = v71 ? v71 : 0;
    if (v71 ? v70 : 0)
    {
      uint64_t v128 = swift_getObjectType();
      uint64_t v74 = swift_allocObject();
      *(void *)(v74 + 24) = v72;
      swift_unknownObjectWeakInit();
      uint64_t v75 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v76 = swift_allocObject();
      *(void *)(v76 + 16) = v75;
      *(void *)(v76 + 24) = v74;
      long long v77 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v72 + 72);
      swift_unknownObjectRetain();
      long long v78 = v64;
      swift_retain();
      swift_retain();
      v77(sub_10004AF2C, v76, v128, v72);
      id v66 = v140;
      swift_release();
      swift_release();
      swift_release();
      long long v79 = (objc_class *)type metadata accessor for BaseOperation();
      v145.receiver = v140;
      v145.super_class = v79;
      [super addDependency:v70];
    }
  }
  id v80 = v66;

  uint64_t v81 = swift_allocObject();
  id v82 = v134;
  swift_unknownObjectWeakInit();
  uint64_t v83 = (uint64_t (**)(uint64_t))&v80[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v84 = *(void *)&v80[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *uint64_t v83 = sub_10018D4B8;
  v83[1] = (uint64_t (*)(uint64_t))v81;
  sub_1000536BC(v84);
  self;
  uint64_t v85 = swift_dynamicCastObjCClass();
  __int16 v141 = v80;
  if (v85)
  {
    uint64_t v86 = v85;
    swift_getObjectType();
    uint64_t v87 = swift_conformsToProtocol2();
    uint64_t v88 = v87 ? v87 : 0;
    if (v87 ? v86 : 0)
    {
      uint64_t v129 = swift_getObjectType();
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 24) = v88;
      swift_unknownObjectWeakInit();
      uint64_t v91 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v92 = swift_allocObject();
      *(void *)(v92 + 16) = v91;
      *(void *)(v92 + 24) = v90;
      uint64_t v93 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v88 + 72);
      swift_unknownObjectRetain();
      id v94 = v141;
      swift_retain();
      swift_retain();
      v93(sub_10004AF2C, v92, v129, v88);
      id v80 = v141;
      swift_release();
      swift_release();
      swift_release();
      id v95 = (objc_class *)type metadata accessor for BaseOperation();
      v146.receiver = v134;
      v146.super_class = v95;
      [super addDependency:v86];

      id v82 = v134;
    }
  }
  unint64_t v96 = v82;

  uint64_t v97 = swift_allocObject();
  int v98 = v136;
  swift_unknownObjectWeakInit();
  id v99 = (uint64_t (**)(uint64_t))&v96[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v100 = *(void *)&v96[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *id v99 = sub_10018D4B8;
  v99[1] = (uint64_t (*)(uint64_t))v97;
  sub_1000536BC(v100);
  self;
  uint64_t v101 = swift_dynamicCastObjCClass();
  if (v101)
  {
    uint64_t v102 = v101;
    swift_getObjectType();
    uint64_t v103 = swift_conformsToProtocol2();
    if (v103) {
      uint64_t v104 = v103;
    }
    else {
      uint64_t v104 = 0;
    }
    if (v103) {
      uint64_t v105 = v102;
    }
    else {
      uint64_t v105 = 0;
    }
    if (v105)
    {
      uint64_t v130 = swift_getObjectType();
      uint64_t v106 = swift_allocObject();
      *(void *)(v106 + 24) = v104;
      swift_unknownObjectWeakInit();
      uint64_t v107 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v135 = v64;
      uint64_t v108 = swift_allocObject();
      *(void *)(v108 + 16) = v107;
      *(void *)(v108 + 24) = v106;
      uint64_t v109 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v104 + 72);
      swift_unknownObjectRetain();
      id v110 = v96;
      swift_retain();
      swift_retain();
      v109(sub_10004AF2C, v108, v130, v104);
      swift_release();
      int v98 = v136;
      swift_release();
      id v64 = v135;
      swift_release();
      long long v111 = (objc_class *)type metadata accessor for BaseOperation();
      v147.receiver = v136;
      v147.super_class = v111;
      [super addDependency:v102];
    }
  }
  long long v112 = v98;

  uint64_t v113 = swift_allocObject();
  *(void *)(v113 + 16) = a5;
  *(void *)(v113 + 24) = a6;
  long long v114 = (uint64_t (**)(uint64_t))&v112[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  uint64_t v115 = *(void *)&v112[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  *long long v114 = sub_10018D4C4;
  v114[1] = (uint64_t (*)(uint64_t))v113;
  sub_10004ACDC(a5);
  sub_1000536BC(v115);

  id v116 = sub_100175D10();
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v117 = swift_allocObject();
  *(_OWORD *)(v117 + 16) = xmmword_10046D000;
  *(void *)(v117 + 32) = v133;
  *(void *)(v117 + 40) = v132;
  *(void *)(v117 + 48) = v64;
  *(void *)(v117 + 56) = v141;
  *(void *)(v117 + 64) = v96;
  *(void *)(v117 + 72) = v112;
  uint64_t v148 = v117;
  specialized Array._endMutation()();
  sub_10004D29C(0, (unint64_t *)&unk_1005FF020);
  id v118 = v133;
  long long v119 = v132;
  long long v120 = v64;
  long long v121 = v141;
  long long v122 = v96;
  long long v123 = v112;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v116 addOperations:isa waitUntilFinished:0];
}

uint64_t sub_1001772A8(uint64_t a1, uint64_t (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  uint64_t v8 = *(void *)(a4 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  swift_retain();
  if (v8)
  {
    sub_10018D364(v8);
    uint64_t v9 = swift_unknownObjectRetain();
    sub_10018D3A4(v9);
    swift_retain();
    sub_1003A12F4(v8, (void (*)(uint64_t, void, uint64_t))sub_10018DB2C, v7);
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  else
  {
    swift_release();
    v11[0] = 0;
    v11[1] = 0;
    __int16 v12 = 64;
    return a2(v11);
  }
}

uint64_t sub_1001773BC(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  return a4(a1, a2, a3);
}

uint64_t sub_1001773E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  char v6 = 0;
  uint64_t result = 0;
  switch(v4 >> 6)
  {
    case 1u:
      break;
    case 2u:
      swift_errorRetain();
      static os_log_type_t.default.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      uint64_t v14 = (void *)static OS_os_log.downloads.getter();
      sub_100054B78(&qword_1005F7720);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_10046D010;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      uint64_t v18 = v17;
      *(void *)(v15 + 56) = &type metadata for String;
      *(void *)(v15 + 64) = sub_10004DA4C();
      *(void *)(v15 + 32) = v16;
      *(void *)(v15 + 40) = v18;
      os_log(_:dso:log:_:_:)();
      sub_10018DB10(v2, v3, v4);

      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 3u:
      static os_log_type_t.default.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      unint64_t v19 = (void *)static OS_os_log.downloads.getter();
      os_log(_:dso:log:_:_:)();

LABEL_12:
      uint64_t result = 0;
      char v6 = 0;
      break;
    default:
      if (v4 == 2 && v2 == 1 && v3 == 0)
      {
        sub_100189FF0(1, 0, 2);
        sub_100189FF0(1, 0, 2);
        static os_log_type_t.default.getter();
        sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
        os_log_type_t v20 = (void *)static OS_os_log.downloads.getter();
        os_log(_:dso:log:_:_:)();
      }
      else
      {
        sub_100189FF0(v2, v3, v4);
        static os_log_type_t.error.getter();
        sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
        uint64_t v22 = (void *)static OS_os_log.downloads.getter();
        sub_100054B78(&qword_1005F7720);
        uint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_10046D010;
        sub_10018A280();
        uint64_t v11 = Error.localizedDescription.getter();
        uint64_t v13 = v12;
        *(void *)(v10 + 56) = &type metadata for String;
        *(void *)(v10 + 64) = sub_10004DA4C();
        *(void *)(v10 + 32) = v11;
        *(void *)(v10 + 40) = v13;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
        sub_10018871C(v2, v3, v4);
      }
      sub_10018A280();
      uint64_t result = swift_allocError();
      *(void *)uint64_t v21 = v2;
      *(void *)(v21 + 8) = v3;
      *(unsigned char *)(v21 + 16) = v4;
      char v6 = 1;
      break;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

uint64_t sub_10017778C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (!*(void *)(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck)) {
    goto LABEL_4;
  }
  unsigned int v4 = *(uint64_t (**)(uint64_t))(a1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck + 16);
  swift_retain_n();
  uint64_t v5 = swift_unknownObjectRetain();
  sub_10018D3A4(v5);
  uint64_t v6 = v4(a1);
  uint64_t v8 = v7;
  int v10 = v9;
  int v11 = ~(_BYTE)v9;
  swift_release();
  if (v11)
  {
    static os_log_type_t.error.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    os_log_type_t v20 = (void *)static OS_os_log.downloads.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10046D010;
    sub_10018A280();
    uint64_t v13 = Error.localizedDescription.getter();
    uint64_t v14 = v6;
    uint64_t v16 = v15;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10004DA4C();
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v16;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    sub_10018871C(v14, v8, v10);
    uint64_t result = swift_allocError();
    *(void *)uint64_t v18 = v14;
    *(void *)(v18 + 8) = v8;
    *(unsigned char *)(v18 + 16) = v10;
    char v19 = 1;
  }
  else
  {
LABEL_4:
    uint64_t result = 0;
    char v19 = 0;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v19;
  return result;
}

uint64_t sub_100177974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for DownloadJob(0);
  __chkstk_darwin();
  int v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = *(id *)(a5 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)();

  sub_1001D6788((uint64_t)v9, a3, a4);
  return sub_10018A5C0((uint64_t)v9, type metadata accessor for DownloadJob);
}

uint64_t sub_100177A80(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for DownloadJob(0) - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin();
  sub_100054B78(&qword_100608080);
  __chkstk_darwin();
  int v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void (**)(uint64_t (*)(uint64_t), void *))(a4
                                                                         + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetPrefetchBlock);
  if (v12)
  {
    sub_10018A620(a1, (uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DownloadJob);
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = a4;
    v14[3] = a2;
    void v14[4] = a3;
    sub_10018CD14((uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13, type metadata accessor for DownloadJob);
    sub_10004ACDC((uint64_t)v12);
    swift_retain();
    swift_retain();
    v12(sub_10018DA20, v14);
    sub_1000536BC((uint64_t)v12);
    return swift_release();
  }
  else
  {
    sub_10018A620(a1, (uint64_t)v11, type metadata accessor for DownloadJob);
    swift_storeEnumTagMultiPayload();
    a2(v11);
    return sub_100054B1C((uint64_t)v11, &qword_100608080);
  }
}

uint64_t sub_100177CB8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5)
{
  sub_100054B78(&qword_100608080);
  __chkstk_darwin();
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (uint64_t *)((char *)&v14 - v9);
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    sub_10018871C(a1, 0, 1);
    sub_10018A280();
    uint64_t v11 = swift_allocError();
    *(void *)uint64_t v12 = a1;
    *(void *)(v12 + 8) = 0;
    *(unsigned char *)(v12 + 16) = 1;
    uint64_t *v10 = v11;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v10);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    sub_10018A620(a5, (uint64_t)&v14 - v9, type metadata accessor for DownloadJob);
    swift_storeEnumTagMultiPayload();
    a3(v10);
  }
  return sub_100054B1C((uint64_t)v10, &qword_100608080);
}

uint64_t sub_100177E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v54 = a4;
  uint64_t v56 = a3;
  uint64_t v58 = a5;
  uint64_t v62 = type metadata accessor for DownloadJob(0);
  uint64_t v60 = *(void *)(v62 - 8);
  uint64_t v9 = *(void *)(v60 + 64);
  __chkstk_darwin();
  uint64_t v59 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v61 = (uint64_t)v50 - v10;
  __chkstk_darwin();
  uint64_t v12 = (char *)v50 - v11;
  __chkstk_darwin();
  uint64_t v14 = (char *)v50 - v13;
  os_log_type_t v15 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v16 = static OS_os_log.downloads.getter();
  sub_10018A620(a1, (uint64_t)v14, type metadata accessor for DownloadJob);
  uint64_t v57 = a1;
  sub_10018A620(a1, (uint64_t)v12, type metadata accessor for DownloadJob);
  p_class_meths = &OBJC_PROTOCOL___MTImageStoreProtocol.class_meths;
  if (os_log_type_enabled(v16, v15))
  {
    swift_retain_n();
    uint64_t v18 = swift_slowAlloc();
    os_log_t v53 = v16;
    uint64_t v19 = v18;
    uint64_t v55 = swift_slowAlloc();
    uint64_t v67 = v55;
    *(_DWORD *)uint64_t v19 = 136446722;
    v50[1] = v19 + 4;
    id v20 = *(id *)(a2 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    int v52 = v15;
    id v21 = v20;
    sub_100054B78(&qword_1005F8450);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v51 = v5;

    uint64_t v23 = v64;
    uint64_t v22 = v65;
    sub_100041A98(aBlock, (uint64_t)v64);
    uint64_t v24 = (*((uint64_t (**)(void *, uint64_t (*)()))v22 + 7))(v23, v22);
    unint64_t v26 = v25;
    sub_10004D2D8((uint64_t)aBlock);
    aBlock[0] = sub_10004B974(v24, v26, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v27 = (uint64_t *)&v14[*(int *)(v62 + 20)];
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    swift_bridgeObjectRetain();
    aBlock[0] = sub_10004B974(v28, v29, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10018A5C0((uint64_t)v14, type metadata accessor for DownloadJob);
    *(_WORD *)(v19 + 22) = 2080;
    uint64_t v6 = v51;
    type metadata accessor for EpisodeMetadata(0);
    uint64_t v30 = URL.absoluteString.getter();
    aBlock[0] = sub_10004B974(v30, v31, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___MTImageStoreProtocol + 32);
    sub_10018A5C0((uint64_t)v12, type metadata accessor for DownloadJob);
    os_log_t v32 = v53;
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v52, "Start download task %{public}s for episode %s at %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10018A5C0((uint64_t)v14, type metadata accessor for DownloadJob);
    sub_10018A5C0((uint64_t)v12, type metadata accessor for DownloadJob);
  }
  uint64_t v33 = p_class_meths[280];
  id v34 = *(id *)((char *)v33 + a2);
  sub_100054B78(&qword_1005F8450);
  OS_dispatch_queue.sync<A>(execute:)();

  long long v35 = v64;
  uint64_t v36 = v65;
  sub_100041A98(aBlock, (uint64_t)v64);
  (*((void (**)(void *, uint64_t (*)()))v36 + 14))(v35, v36);
  sub_10004D2D8((uint64_t)aBlock);
  id v37 = *(id *)((char *)v33 + a2);
  uint64_t v38 = (uint64_t)v59;
  uint64_t v39 = v62;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v55 = v6;

  uint64_t v40 = v61;
  sub_10018A620(v38, v61, type metadata accessor for DownloadJob);
  uint64_t v41 = v40 + *(int *)(v39 + 40);
  sub_10018A688(*(void *)v41, *(void *)(v41 + 8), *(void *)(v41 + 16), *(void *)(v41 + 24));
  *(void *)uint64_t v41 = 0;
  *(void *)(v41 + 8) = 0;
  *(void *)(v41 + 16) = 0;
  *(void *)(v41 + 24) = 2;
  *(void *)(v41 + 32) = 0;
  *(void *)(v41 + 40) = 0;
  *(_WORD *)(v41 + 48) = 0;
  sub_10018A5C0(v38, type metadata accessor for DownloadJob);
  uint64_t v42 = *(void **)((char *)v33 + a2);
  sub_10018A620(v40, v38, type metadata accessor for DownloadJob);
  unint64_t v43 = (*(unsigned __int8 *)(v60 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = a2;
  sub_10018CD14(v38, v44 + v43, type metadata accessor for DownloadJob);
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_10018A6A4;
  *(void *)(v45 + 24) = v44;
  uint64_t v65 = sub_100018840;
  uint64_t v66 = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100018818;
  id v64 = &unk_100556878;
  uint64_t v46 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v47 = v42;
  swift_retain();
  swift_release();
  dispatch_sync(v47, v46);
  _Block_release(v46);

  sub_10018A5C0(v40, type metadata accessor for DownloadJob);
  LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v37)
  {
    __break(1u);
  }
  else
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      sub_1003BE080(a2);
      uint64_t Strong = swift_unknownObjectRelease();
    }
    if (v56) {
      v56(Strong);
    }
    sub_10018A620(v57, v58, type metadata accessor for DownloadJob);
    sub_100054B78(&qword_100608080);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_1001785AC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  swift_errorRetain();
  sub_100054B78(&qword_100603F70);
  if (!swift_dynamicCast())
  {
    static os_log_type_t.error.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    unsigned int v4 = (void *)static OS_os_log.downloads.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_10046D010;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    uint64_t v8 = v7;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_10004DA4C();
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v8;
    os_log(_:dso:log:_:_:)();

    uint64_t result = swift_bridgeObjectRelease();
    if (!a2) {
      return result;
    }
    return a2(result);
  }
  uint64_t result = sub_10018A014(v9, v10, v11);
  if (a2) {
    return a2(result);
  }
  return result;
}

uint64_t sub_100178710()
{
  uint64_t v1 = v0;
  os_log_type_t v2 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v3 = static OS_os_log.downloads.getter();
  if (os_log_type_enabled(v3, v2))
  {
    swift_retain_n();
    unsigned int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)unsigned int v4 = 136446210;
    uint64_t v19 = v5;
    id v6 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    sub_100054B78(&qword_1005F8450);
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v8 = v21;
    uint64_t v7 = v22;
    sub_100041A98(v20, v21);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(v8, v7);
    unint64_t v11 = v10;
    sub_10004D2D8((uint64_t)v20);
    v20[0] = sub_10004B974(v9, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v2, "Cancel download task %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck);
  if (v12)
  {
    sub_10018D364(*(void *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_takeOffCheck));
    uint64_t v13 = swift_unknownObjectRetain();
    sub_10018D3A4(v13);
    static os_log_type_t.default.getter();
    uint64_t v14 = (void *)static OS_os_log.downloads.getter();
    os_log(_:dso:log:_:_:)();

    [*(id *)(v12 + 56) cancel];
    swift_unknownObjectRelease();
  }
  id v15 = *(id *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  sub_100054B78(&qword_1005F8450);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v16 = v21;
  uint64_t v17 = v22;
  sub_100041A98(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
  return sub_10004D2D8((uint64_t)v20);
}

uint64_t sub_100178A34()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DownloadJob(0);
  uint64_t v164 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v164 + 64);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v154 - v6;
  uint64_t v165 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  id v8 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  sub_100054B78(&qword_1005F8450);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v9 = v168;
  uint64_t v10 = v169;
  sub_100041A98(v167, v168);
  switch((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10))
  {
    case 0:
      uint64_t v11 = v165;
      id v12 = *(id *)(v1 + v165);
      OS_dispatch_queue.sync<A>(execute:)();

      sub_10004D29C(0, (unint64_t *)&unk_1005F6D18);
      if (swift_dynamicCast()
        || (id v13 = *(id *)(v1 + v11),
            OS_dispatch_queue.sync<A>(execute:)(),
            v13,
            sub_10004D29C(0, (unint64_t *)&unk_1005FB930),
            swift_dynamicCast()))
      {

        id v162 = 0;
        goto LABEL_5;
      }
      id v96 = *(id *)(v1 + v11);
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v97 = v173;
      int v98 = v174;
      sub_100041A98((id *)&aBlock, (uint64_t)v173);
      id v99 = (void *)(*((uint64_t (**)(void *, uint64_t (*)()))v98 + 2))(v97, v98);
      sub_10004D2D8((uint64_t)&aBlock);
      id v100 = v99;
      uint64_t v101 = (uint64_t)[v100 completedUnitCount];
      id v162 = v99;
      if (v101 < 1 || (uint64_t)[v100 totalUnitCount] < 1)
      {

        uint64_t v11 = v165;
LABEL_5:
        os_log_type_t v14 = static os_log_type_t.default.getter();
        sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
        id v15 = static OS_os_log.downloads.getter();
        swift_retain_n();
        if (os_log_type_enabled(v15, v14))
        {
          swift_retain_n();
          uint64_t v16 = swift_slowAlloc();
          LODWORD(v160) = v14;
          uint64_t v17 = v16;
          uint64_t v159 = (void *)swift_slowAlloc();
          v166[0] = v159;
          *(_DWORD *)uint64_t v17 = 136446466;
          uint64_t v157 = v17 + 4;
          id v18 = *(id *)(v1 + v11);
          os_log_t v158 = v15;
          id v19 = v18;
          uint64_t v20 = (uint64_t)v7;
          OS_dispatch_queue.sync<A>(execute:)();

          uint64_t v163 = v2;
          uint64_t v22 = v173;
          uint64_t v21 = v174;
          sub_100041A98((id *)&aBlock, (uint64_t)v173);
          uint64_t v23 = (*((uint64_t (**)(void *, uint64_t (*)()))v21 + 7))(v22, v21);
          unint64_t v25 = v24;
          sub_10004D2D8((uint64_t)&aBlock);
          id aBlock = sub_10004B974(v23, v25, (uint64_t *)v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v17 + 12) = 2082;
          id v26 = *(id *)(v1 + v165);
          OS_dispatch_queue.sync<A>(execute:)();

          uint64_t v27 = (uint64_t *)&v7[*(int *)(v163 + 20)];
          uint64_t v28 = *v27;
          unint64_t v29 = v27[1];
          swift_bridgeObjectRetain();
          sub_10018A5C0(v20, type metadata accessor for DownloadJob);
          id aBlock = sub_10004B974(v28, v29, (uint64_t *)v166);
          uint64_t v2 = v163;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          uint64_t v7 = (char *)v20;
          uint64_t v11 = v165;
          swift_bridgeObjectRelease();
          id v15 = v158;
          _os_log_impl((void *)&_mh_execute_header, v158, (os_log_type_t)v160, "Update task state to running, download progress is not determined %{public}s episode: %{public}s", (uint8_t *)v17, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        uint64_t v86 = v164;
        id v87 = *(id *)(v1 + v11);
        OS_dispatch_queue.sync<A>(execute:)();

        sub_10018A620((uint64_t)v5, (uint64_t)v7, type metadata accessor for DownloadJob);
        uint64_t v88 = &v7[*(int *)(v2 + 40)];
        sub_10018A688(*(void *)v88, *((void *)v88 + 1), *((void *)v88 + 2), *((void *)v88 + 3));
        *(void *)uint64_t v88 = 0;
        *((void *)v88 + 1) = 0;
        *((void *)v88 + 2) = 0;
        *((void *)v88 + 3) = 2;
        *((void *)v88 + 4) = 0;
        *((void *)v88 + 5) = 0;
        *((_WORD *)v88 + 24) = 0;
        sub_10018A5C0((uint64_t)v5, type metadata accessor for DownloadJob);
        uint64_t v89 = (uint64_t)v7;
        uint64_t v90 = *(void **)(v1 + v11);
        sub_10018A620(v89, (uint64_t)v5, type metadata accessor for DownloadJob);
        unint64_t v91 = (*(unsigned __int8 *)(v86 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
        uint64_t v92 = swift_allocObject();
        *(void *)(v92 + 16) = v1;
        sub_10018CD14((uint64_t)v5, v92 + v91, type metadata accessor for DownloadJob);
        uint64_t v93 = swift_allocObject();
        *(void *)(v93 + 16) = sub_10018A6A4;
        *(void *)(v93 + 24) = v92;
        uint64_t v174 = sub_100018840;
        uint64_t v175 = v93;
        id aBlock = (uint64_t)_NSConcreteStackBlock;
        uint64_t v171 = 1107296256;
        uint64_t v172 = sub_100018818;
        uint64_t v173 = &unk_1005565A8;
        id v94 = _Block_copy(&aBlock);
        swift_retain();
        id v95 = v90;
        swift_retain();
        swift_release();
        dispatch_sync(v95, v94);
        _Block_release(v94);

        sub_10018A5C0(v89, type metadata accessor for DownloadJob);
        LOBYTE(v88) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        if ((v88 & 1) == 0) {
          goto LABEL_20;
        }
LABEL_39:
        __break(1u);
        JUMPOUT(0x10017A334);
      }
      id v160 = v100;
      uint64_t v163 = v2;
      uint64_t v102 = (uint64_t)v7;
      os_log_type_t v103 = static os_log_type_t.default.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      uint64_t v104 = static OS_os_log.downloads.getter();
      swift_retain_n();
      BOOL v105 = os_log_type_enabled(v104, v103);
      long long v161 = v7;
      if (v105)
      {
        swift_retain_n();
        uint64_t v106 = swift_slowAlloc();
        uint64_t v159 = (void *)swift_slowAlloc();
        v166[0] = v159;
        *(_DWORD *)uint64_t v106 = 136446466;
        uint64_t v155 = v106 + 4;
        uint64_t v107 = v165;
        id v108 = *(id *)(v1 + v165);
        os_log_t v158 = v104;
        id v109 = v108;
        OS_dispatch_queue.sync<A>(execute:)();

        LODWORD(v157) = v103;
        long long v111 = v173;
        id v110 = v174;
        sub_100041A98((id *)&aBlock, (uint64_t)v173);
        uint64_t v112 = (*((uint64_t (**)(void *, uint64_t (*)()))v110 + 7))(v111, v110);
        unint64_t v114 = v113;
        sub_10004D2D8((uint64_t)&aBlock);
        id aBlock = sub_10004B974(v112, v114, (uint64_t *)v166);
        uint64_t v156 = &v171;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v106 + 12) = 2082;
        uint64_t v155 = v106 + 14;
        id v115 = *(id *)(v1 + v107);
        uint64_t v116 = v163;
        OS_dispatch_queue.sync<A>(execute:)();

        uint64_t v117 = (uint64_t *)(v102 + *(int *)(v116 + 20));
        uint64_t v118 = *v117;
        unint64_t v119 = v117[1];
        swift_bridgeObjectRetain();
        sub_10018A5C0(v102, type metadata accessor for DownloadJob);
        id aBlock = sub_10004B974(v118, v119, (uint64_t *)v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v104 = v158;
        _os_log_impl((void *)&_mh_execute_header, v158, (os_log_type_t)v157, "Update task state and set current progress %{public}s episode: %{public}s", (uint8_t *)v106, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v134 = v165;
      id v135 = *(id *)(v1 + v165);
      OS_dispatch_queue.sync<A>(execute:)();

      id v136 = v160;
      id v137 = [v160 totalUnitCount];
      id v138 = [v136 completedUnitCount];
      uint64_t v139 = sub_100237ED0();
      __int16 v141 = v140;
      [v136 fractionCompleted];
      objc_super v143 = v142;
      uint64_t v144 = NSProgress.estimatedTimeRemaining.getter();
      id aBlock = (uint64_t)v137;
      uint64_t v171 = (uint64_t)v138;
      uint64_t v172 = (uint64_t (*)(uint64_t))v139;
      uint64_t v173 = v141;
      uint64_t v174 = v143;
      uint64_t v175 = v144;
      char v176 = v145 & 1;
      uint64_t v146 = (uint64_t)v161;
      sub_100233D8C((uint64_t)&aBlock, 0, (uint64_t)v161);
      swift_bridgeObjectRelease();
      sub_10018A5C0((uint64_t)v5, type metadata accessor for DownloadJob);
      objc_super v147 = *(void **)(v1 + v134);
      uint64_t v148 = v146;
      sub_10018A620(v146, (uint64_t)v5, type metadata accessor for DownloadJob);
      unint64_t v149 = (*(unsigned __int8 *)(v164 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
      uint64_t v150 = swift_allocObject();
      *(void *)(v150 + 16) = v1;
      sub_10018CD14((uint64_t)v5, v150 + v149, type metadata accessor for DownloadJob);
      objc_super v151 = (void *)swift_allocObject();
      v151[2] = sub_10018A6A4;
      v151[3] = v150;
      v166[4] = sub_100018840;
      v166[5] = v151;
      v166[0] = _NSConcreteStackBlock;
      v166[1] = (id)1107296256;
      v166[2] = sub_100018818;
      v166[3] = &unk_100556620;
      objc_super v152 = _Block_copy(v166);
      swift_retain();
      objc_super v153 = v147;
      swift_retain();
      swift_release();
      dispatch_sync(v153, v152);
      _Block_release(v152);

      sub_10018A5C0(v148, type metadata accessor for DownloadJob);
      LOBYTE(v135) = swift_isEscapingClosureAtFileLocation();

      swift_release();
      swift_release();
      if (v135)
      {
        __break(1u);
        goto LABEL_39;
      }
LABEL_20:
      if (swift_unknownObjectWeakLoadStrong())
      {
        sub_1003BE080(v1);
        swift_unknownObjectRelease();
      }

      return sub_10004D2D8((uint64_t)v167);
    case 1:
      os_log_type_t v39 = static os_log_type_t.default.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      unint64_t v31 = static OS_os_log.downloads.getter();
      swift_retain_n();
      if (!os_log_type_enabled(v31, v39)) {
        goto LABEL_17;
      }
      swift_retain_n();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v164 = swift_slowAlloc();
      v166[0] = (id)v164;
      *(_DWORD *)uint64_t v40 = 136446466;
      id v162 = (id)(v40 + 4);
      uint64_t v41 = v165;
      id v42 = *(id *)(v1 + v165);
      LODWORD(v163) = v39;
      id v43 = v42;
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v44 = v2;
      uint64_t v45 = (uint64_t)v7;
      uint64_t v46 = v173;
      uint64_t v47 = v174;
      sub_100041A98((id *)&aBlock, (uint64_t)v173);
      uint64_t v48 = (*((uint64_t (**)(void *, uint64_t (*)()))v47 + 7))(v46, v47);
      unint64_t v50 = v49;
      sub_10004D2D8((uint64_t)&aBlock);
      id aBlock = sub_10004B974(v48, v50, (uint64_t *)v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2082;
      id v51 = *(id *)(v1 + v41);
      OS_dispatch_queue.sync<A>(execute:)();

      int v52 = (uint64_t *)(v45 + *(int *)(v44 + 20));
      uint64_t v53 = *v52;
      unint64_t v54 = v52[1];
      swift_bridgeObjectRetain();
      sub_10018A5C0(v45, type metadata accessor for DownloadJob);
      id aBlock = sub_10004B974(v53, v54, (uint64_t *)v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v163, "Resuming suspended task %{public}s episode: %{public}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_33;
    case 2:
      uint64_t v163 = v2;
      os_log_type_t v55 = static os_log_type_t.default.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      unint64_t v31 = static OS_os_log.downloads.getter();
      swift_retain_n();
      os_log_type_t v56 = v55;
      if (!os_log_type_enabled(v31, v55)) {
        goto LABEL_17;
      }
      swift_retain_n();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v164 = swift_slowAlloc();
      v166[0] = (id)v164;
      *(_DWORD *)uint64_t v57 = 136446466;
      id v162 = (id)(v57 + 4);
      uint64_t v58 = v165;
      id v59 = *(id *)(v1 + v165);
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v60 = (uint64_t)v7;
      uint64_t v61 = v173;
      uint64_t v62 = v174;
      sub_100041A98((id *)&aBlock, (uint64_t)v173);
      uint64_t v63 = (*((uint64_t (**)(void *, uint64_t (*)()))v62 + 7))(v61, v62);
      unint64_t v65 = v64;
      sub_10004D2D8((uint64_t)&aBlock);
      id aBlock = sub_10004B974(v63, v65, (uint64_t *)v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2082;
      id v66 = *(id *)(v1 + v58);
      uint64_t v67 = v163;
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v68 = (uint64_t *)(v60 + *(int *)(v67 + 20));
      uint64_t v69 = *v68;
      unint64_t v70 = v68[1];
      swift_bridgeObjectRetain();
      sub_10018A5C0(v60, type metadata accessor for DownloadJob);
      id aBlock = sub_10004B974(v69, v70, (uint64_t *)v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v71 = "Attempt to resume task which is being canceled, doing nothing %{public}s episode: %{public}s";
      goto LABEL_16;
    case 3:
      uint64_t v163 = v2;
      os_log_type_t v72 = static os_log_type_t.error.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      unint64_t v31 = static OS_os_log.downloads.getter();
      swift_retain_n();
      os_log_type_t v56 = v72;
      if (!os_log_type_enabled(v31, v72)) {
        goto LABEL_17;
      }
      swift_retain_n();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v164 = swift_slowAlloc();
      v166[0] = (id)v164;
      *(_DWORD *)uint64_t v57 = 136446466;
      id v162 = (id)(v57 + 4);
      uint64_t v73 = v165;
      id v74 = *(id *)(v1 + v165);
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v75 = (uint64_t)v7;
      uint64_t v76 = v173;
      long long v77 = v174;
      sub_100041A98((id *)&aBlock, (uint64_t)v173);
      uint64_t v78 = (*((uint64_t (**)(void *, uint64_t (*)()))v77 + 7))(v76, v77);
      unint64_t v80 = v79;
      sub_10004D2D8((uint64_t)&aBlock);
      id aBlock = sub_10004B974(v78, v80, (uint64_t *)v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2082;
      id v81 = *(id *)(v1 + v73);
      uint64_t v82 = v163;
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v83 = (uint64_t *)(v75 + *(int *)(v82 + 20));
      uint64_t v84 = *v83;
      unint64_t v85 = v83[1];
      swift_bridgeObjectRetain();
      sub_10018A5C0(v75, type metadata accessor for DownloadJob);
      id aBlock = sub_10004B974(v84, v85, (uint64_t *)v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v71 = "Attempt to resume task, which has been completed already %{public}s episode: %{public}s";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v31, v56, v71, (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_33;
    default:
      int v30 = static os_log_type_t.default.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      unint64_t v31 = static OS_os_log.downloads.getter();
      swift_retain_n();
      if (os_log_type_enabled(v31, (os_log_type_t)v30))
      {
        LODWORD(v164) = v30;
        uint64_t v163 = v2;
        swift_retain_n();
        uint64_t v32 = swift_slowAlloc();
        id v162 = (id)swift_slowAlloc();
        v166[0] = v162;
        *(_DWORD *)uint64_t v32 = 136446722;
        id v33 = *(id *)(v1 + v165);
        OS_dispatch_queue.sync<A>(execute:)();

        id v34 = v173;
        long long v35 = v174;
        sub_100041A98((id *)&aBlock, (uint64_t)v173);
        uint64_t v36 = (*((uint64_t (**)(void *, uint64_t (*)()))v35 + 1))(v34, v35);
        sub_10004D2D8((uint64_t)&aBlock);
        long long v161 = v7;
        unint64_t v37 = 0xE900000000000067;
        uint64_t v38 = 0x6E696C65636E6163;
        switch(v36)
        {
          case 0:
            unint64_t v37 = 0xE700000000000000;
            uint64_t v38 = 0x676E696E6E7572;
            break;
          case 1:
            uint64_t v38 = 0x65646E6570737573;
            goto LABEL_31;
          case 2:
            break;
          case 3:
            uint64_t v38 = 0x6574656C706D6F63;
LABEL_31:
            unint64_t v37 = 0xE900000000000064;
            break;
          default:
            unint64_t v37 = 0xE700000000000000;
            uint64_t v38 = 0x6E776F6E6B6E75;
            break;
        }
        id aBlock = sub_10004B974(v38, v37, (uint64_t *)v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2082;
        uint64_t v120 = v165;
        id v121 = *(id *)(v1 + v165);
        OS_dispatch_queue.sync<A>(execute:)();

        long long v122 = v173;
        long long v123 = v174;
        sub_100041A98((id *)&aBlock, (uint64_t)v173);
        uint64_t v124 = (*((uint64_t (**)(void *, uint64_t (*)()))v123 + 7))(v122, v123);
        unint64_t v126 = v125;
        sub_10004D2D8((uint64_t)&aBlock);
        id aBlock = sub_10004B974(v124, v126, (uint64_t *)v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 22) = 2082;
        id v127 = *(id *)(v1 + v120);
        uint64_t v128 = (uint64_t)v161;
        uint64_t v129 = v163;
        OS_dispatch_queue.sync<A>(execute:)();

        uint64_t v130 = (uint64_t *)(v128 + *(int *)(v129 + 20));
        uint64_t v131 = *v130;
        unint64_t v132 = v130[1];
        swift_bridgeObjectRetain();
        sub_10018A5C0(v128, type metadata accessor for DownloadJob);
        id aBlock = sub_10004B974(v131, v132, (uint64_t *)v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v164, "Not resuming task, which is in state: %{public}s task: %{public}s episode: %{public}s", (uint8_t *)v32, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_33:
        swift_slowDealloc();
      }
      else
      {
LABEL_17:
        swift_release_n();
      }

      return sub_10004D2D8((uint64_t)v167);
  }
}

void sub_10017A354()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  id v3 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  sub_100054B78(&qword_1005F8450);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v4 = v20;
  uint64_t v5 = v21;
  sub_100041A98(v19, v20);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  sub_10004D2D8((uint64_t)v19);
  if (v6 == 1)
  {
    sub_10017A9C8();
  }
  else if (v6)
  {
    os_log_type_t v7 = static os_log_type_t.error.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    id v8 = static OS_os_log.downloads.getter();
    if (os_log_type_enabled(v8, v7))
    {
      swift_retain_n();
      uint64_t v9 = swift_slowAlloc();
      v18[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446466;
      id v10 = *(id *)(v1 + v2);
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v11 = v20;
      uint64_t v12 = v21;
      sub_100041A98(v19, v20);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 56))(v11, v12);
      unint64_t v15 = v14;
      sub_10004D2D8((uint64_t)v19);
      v19[0] = sub_10004B974(v13, v15, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      if (v6 == 2)
      {
        unint64_t v17 = 0xE900000000000067;
        uint64_t v16 = 0x6E696C65636E6163;
      }
      else if (v6 == 3)
      {
        uint64_t v16 = 0x6574656C706D6F63;
        unint64_t v17 = 0xE900000000000064;
      }
      else
      {
        unint64_t v17 = 0xE700000000000000;
        uint64_t v16 = 0x6E776F6E6B6E75;
      }
      v19[0] = sub_10004B974(v16, v17, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v7, "Invalid state. Attempt to pause or resume task %{public}s) which is in state: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    sub_10017A674();
  }
}

uint64_t sub_10017A674()
{
  uint64_t v1 = v0;
  os_log_type_t v2 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  id v3 = static OS_os_log.downloads.getter();
  if (os_log_type_enabled(v3, v2))
  {
    swift_retain_n();
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v21[0] = v5;
    id v6 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    sub_100054B78(&qword_1005F8450);
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v8 = v23;
    uint64_t v7 = v24;
    sub_100041A98(v22, v23);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(v8, v7);
    unint64_t v11 = v10;
    sub_10004D2D8((uint64_t)v22);
    v22[0] = sub_10004B974(v9, v11, (uint64_t *)v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v2, "Pause download task %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v12 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  id v13 = *(id *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  sub_100054B78(&qword_1005F8450);
  OS_dispatch_queue.sync<A>(execute:)();

  sub_10004D29C(0, &qword_1005FB930);
  if (swift_dynamicCast())
  {

    id v14 = *(id *)(v1 + v12);
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v15 = v23;
    uint64_t v16 = v24;
    sub_100041A98(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v16 + 120))(v15, v16);
  }
  else
  {
    id v17 = *(id *)(v1 + v12);
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v18 = v23;
    uint64_t v19 = v24;
    sub_100041A98(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v19 + 128))(v18, v19);
  }
  return sub_10004D2D8((uint64_t)v22);
}

void sub_10017A9C8()
{
  uint64_t v1 = v0;
  os_log_type_t v2 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  id v3 = static OS_os_log.downloads.getter();
  if (os_log_type_enabled(v3, v2))
  {
    swift_retain_n();
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v17[0] = v5;
    id v6 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    sub_100054B78(&qword_1005F8450);
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v8 = v19;
    uint64_t v7 = v20;
    sub_100041A98(v18, v19);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(v8, v7);
    unint64_t v11 = v10;
    sub_10004D2D8((uint64_t)v18);
    v18[0] = sub_10004B974(v9, v11, (uint64_t *)v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v2, "Resume download task %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v12 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  id v13 = *(id *)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  sub_100054B78(&qword_1005F8450);
  OS_dispatch_queue.sync<A>(execute:)();

  sub_10004D29C(0, &qword_1005FB930);
  if (swift_dynamicCast())
  {
  }
  else
  {
    id v14 = *(id *)(v1 + v12);
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v15 = v19;
    uint64_t v16 = v20;
    sub_100041A98(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 112))(v15, v16);
    sub_10004D2D8((uint64_t)v18);
  }
}

uint64_t sub_10017ACB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v61 = a4;
  int v56 = a3;
  uint64_t v55 = a2;
  uint64_t v54 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v54);
  id v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100054B78((uint64_t *)&unk_1005F7750);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v51 - v19;
  int v53 = static os_log_type_t.default.getter();
  sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v21 = static OS_os_log.downloads.getter();
  sub_100054B78(&qword_1005F7720);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_10046D020;
  uint64_t v60 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = a7;
  int v52 = (void *)v21;
  if (!a5) {
    goto LABEL_7;
  }
  id v23 = [a5 URL];
  if (v23)
  {
    uint64_t v24 = v23;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v18, 0, 1, v25);
  }
  else
  {
    uint64_t v25 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v18, 1, 1, v25);
  }
  sub_100053820((uint64_t)v18, (uint64_t)v20, (uint64_t *)&unk_1005F7750);
  type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v20, 1, v25) == 1)
  {
    sub_100054B1C((uint64_t)v20, (uint64_t *)&unk_1005F7750);
LABEL_7:
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    goto LABEL_9;
  }
  uint64_t v27 = URL.absoluteString.getter();
  unint64_t v28 = v29;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v25);
LABEL_9:
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v30 = sub_10004DA4C();
  *(void *)(v22 + 64) = v30;
  if (v28) {
    uint64_t v31 = v27;
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = 0xE000000000000000;
  if (v28) {
    unint64_t v32 = v28;
  }
  *(void *)(v22 + 32) = v31;
  *(void *)(v22 + 40) = v32;
  uint64_t v33 = URL.absoluteString.getter();
  *(void *)(v22 + 96) = &type metadata for String;
  *(void *)(v22 + 104) = v30;
  *(void *)(v22 + 72) = v33;
  *(void *)(v22 + 80) = v34;
  *(void *)(v22 + 136) = &type metadata for Int64;
  *(void *)(v22 + 144) = &protocol witness table for Int64;
  *(void *)(v22 + 112) = v61;
  uint64_t v35 = sub_10017B1BC();
  uint64_t v59 = a1;
  *(void *)(v22 + 176) = &type metadata for UInt64;
  *(void *)(v22 + 184) = &protocol witness table for UInt64;
  if (v36) {
    uint64_t v35 = 0;
  }
  *(void *)(v22 + 152) = v35;
  uint64_t v37 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
  id v38 = *(id *)(v8 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  uint64_t v39 = v54;
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v40 = &v14[*(int *)(v39 + 20)];
  uint64_t v42 = *(void *)v40;
  uint64_t v41 = *((void *)v40 + 1);
  swift_bridgeObjectRetain();
  sub_10018A5C0((uint64_t)v14, type metadata accessor for DownloadJob);
  *(void *)(v22 + 216) = &type metadata for String;
  *(void *)(v22 + 224) = v30;
  *(void *)(v22 + 192) = v42;
  *(void *)(v22 + 200) = v41;
  id v43 = v52;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  id v44 = *(id *)(v8 + v37);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v45 = v8 + OBJC_IVAR____TtC8Podcasts11JobPipeline_assetsFolder;
  uint64_t v46 = swift_allocObject();
  uint64_t v48 = v57;
  uint64_t v47 = v58;
  *(void *)(v46 + 16) = v8;
  *(void *)(v46 + 24) = v48;
  uint64_t v49 = v55;
  *(void *)(v46 + 32) = v47;
  *(void *)(v46 + 40) = v49;
  *(unsigned char *)(v46 + 48) = v56 & 1;
  *(void *)(v46 + 56) = v61;
  swift_retain();
  sub_10004ACDC(v48);
  sub_100181A6C((uint64_t)v14, v45, v59, v60, (uint64_t)sub_10018D1A0, v46);
  swift_release();
  return sub_10018A5C0((uint64_t)v14, type metadata accessor for DownloadJob);
}

uint64_t sub_10017B1BC()
{
  id v0 = [self defaultManager];
  URL.path.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&long long v16 = 0;
  id v2 = [v0 attributesOfItemAtPath:v1 error:&v16];

  id v3 = (void *)v16;
  if (v2)
  {
    type metadata accessor for FileAttributeKey(0);
    sub_10018B870(&qword_1005F66C0, type metadata accessor for FileAttributeKey);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = v3;

    if (*(void *)(v4 + 16))
    {
      id v6 = NSFileSize;
      uint64_t v7 = sub_100226C58(v6);
      if (v8)
      {
        sub_10004D328(*(void *)(v4 + 56) + 32 * v7, (uint64_t)&v16);
      }
      else
      {
        long long v16 = 0u;
        long long v17 = 0u;
      }
    }
    else
    {
      long long v16 = 0u;
      long long v17 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v17 + 1))
    {
      if (swift_dynamicCast()) {
        return (uint64_t)v15;
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_100054B1C((uint64_t)&v16, &qword_1005F5D30);
      return 0;
    }
  }
  else
  {
    id v9 = (id)v16;
    uint64_t v10 = _convertNSErrorToError(_:)();

    swift_willThrow();
    *(void *)&long long v16 = v10;
    swift_errorRetain();
    sub_100054B78(&qword_100603F70);
    sub_10004D29C(0, &qword_1005F6BF0);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      static os_log_type_t.error.getter();
      sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
      unint64_t v11 = (void *)static OS_os_log.downloads.getter();
      sub_100054B78(&qword_1005F7720);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_10046D010;
      id v13 = [v15 code];
      *(void *)(v12 + 56) = &type metadata for Int;
      *(void *)(v12 + 64) = &protocol witness table for Int;
      *(void *)(v12 + 32) = v13;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      swift_errorRelease();
      return 0;
    }
    else
    {
      return swift_errorRelease();
    }
  }
}

uint64_t sub_10017B4FC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t a1), int a6, uint64_t a7)
{
  uint64_t v55 = a7;
  int v56 = a5;
  int v52 = a6;
  uint64_t v57 = a4;
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v53 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v53);
  uint64_t v58 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v54 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v48 - v14;
  __chkstk_darwin(v13);
  long long v17 = (char *)&v48 - v16;
  uint64_t v50 = sub_100054B78(&qword_1005F6D08);
  __chkstk_darwin(v50);
  uint64_t v51 = (void (*)(char *, char *, uint64_t))((char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100054B78(&qword_1005F6C88);
  __chkstk_darwin(v22);
  uint64_t v24 = (unint64_t *)((char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100054BBC(a1, (uint64_t)v24, &qword_1005F6C88);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = v9;
    unint64_t v26 = *v24;
    static os_log_type_t.default.getter();
    sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
    uint64_t v27 = (void *)static OS_os_log.downloads.getter();
    sub_100054B78(&qword_1005F7720);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_10046D010;
    swift_getErrorValue();
    uint64_t v29 = Error.localizedDescription.getter();
    uint64_t v31 = v30;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_10004DA4C();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v31;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v21, 1, 1, v25);
    swift_errorRetain();
    sub_1001860C0(v26, 0, 128, (uint64_t)v21);
    swift_errorRelease();
    sub_100054B1C((uint64_t)v21, (uint64_t *)&unk_1005F7750);
    unint64_t v32 = v60;
    if (v60)
    {
      uint64_t v33 = (uint64_t)v51;
      *(void *)uint64_t v51 = v26;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v32(v33);
      swift_errorRelease();
      return sub_100054B1C(v33, &qword_1005F6D08);
    }
    else
    {
      return swift_errorRelease();
    }
  }
  else
  {
    v52 &= 1u;
    uint64_t v35 = (char *)v24 + *(int *)(sub_100054B78(&qword_1005F6C90) + 48);
    char v36 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v49 = v17;
    uint64_t v51 = v36;
    v36(v17, (char *)v24, v9);
    uint64_t v37 = v15;
    uint64_t v48 = v15;
    v36(v15, v35, v9);
    id v38 = *(id *)(v59 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v39 = swift_allocObject();
    swift_weakInit();
    uint64_t v40 = v54;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v54, v37, v9);
    unint64_t v41 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v42 = (char *)swift_allocObject();
    uint64_t v43 = (uint64_t)v60;
    *((void *)v42 + 2) = v39;
    *((void *)v42 + 3) = v43;
    *((void *)v42 + 4) = v57;
    v51(&v42[v41], v40, v9);
    swift_retain();
    sub_10004ACDC(v43);
    id v44 = v58;
    uint64_t v46 = v48;
    uint64_t v45 = v49;
    sub_10017D148(v58, v49, v48, v56, v52, v55, (uint64_t)sub_10018D290, (uint64_t)v42);
    swift_release();
    sub_10018A5C0((uint64_t)v44, type metadata accessor for DownloadJob);
    uint64_t v47 = *(void (**)(char *, uint64_t))(v10 + 8);
    v47(v46, v9);
    v47(v45, v9);
    return swift_release();
  }
}

uint64_t sub_10017BAF4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a5;
  uint64_t v53 = a4;
  uint64_t v54 = a3;
  uint64_t v6 = type metadata accessor for DownloadJob(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  uint64_t v49 = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v50 = (uint64_t)&v46 - v11;
  uint64_t v51 = sub_100054B78(&qword_1005F6D08);
  __chkstk_darwin(v51);
  int v52 = (uint64_t *)((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_100054B78((uint64_t *)&unk_1005F7750);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for JobPipelineError(0);
  uint64_t v16 = __chkstk_darwin(v47);
  uint64_t v18 = (unint64_t *)((char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = sub_100054B78(&qword_1005F6CE8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100054BBC(a1, (uint64_t)v23, &qword_1005F6CE8);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v31 = result;
      sub_10017C210();
      uint64_t v32 = OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue;
      id v33 = *(id *)(v31 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
      uint64_t v34 = v48;
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v35 = v50;
      sub_10018A620((uint64_t)v10, v50, type metadata accessor for DownloadJob);
      uint64_t v36 = v35 + *(int *)(v34 + 40);
      sub_10018A688(*(void *)v36, *(void *)(v36 + 8), *(void *)(v36 + 16), *(void *)(v36 + 24));
      *(void *)uint64_t v36 = 0;
      *(void *)(v36 + 8) = 0;
      *(void *)(v36 + 16) = 0;
      *(void *)(v36 + 24) = 3;
      *(void *)(v36 + 32) = 0;
      *(void *)(v36 + 40) = 0;
      *(_WORD *)(v36 + 48) = 0;
      sub_10018A5C0((uint64_t)v10, type metadata accessor for DownloadJob);
      uint64_t v37 = *(void **)(v31 + v32);
      sub_10018A620(v35, (uint64_t)v10, type metadata accessor for DownloadJob);
      unint64_t v38 = (*(unsigned __int8 *)(v49 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v31;
      sub_10018CD14((uint64_t)v10, v39 + v38, type metadata accessor for DownloadJob);
      uint64_t v40 = swift_allocObject();
      *(void *)(v40 + 16) = sub_10018A6A4;
      *(void *)(v40 + 24) = v39;
      aBlock[4] = sub_100018840;
      aBlock[5] = v40;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100018818;
      void aBlock[3] = &unk_100556530;
      unint64_t v41 = _Block_copy(aBlock);
      uint64_t v42 = v37;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v42, v41);
      _Block_release(v41);

      sub_10018A5C0(v35, type metadata accessor for DownloadJob);
      LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t result = swift_release();
      if (v36)
      {
        __break(1u);
        return result;
      }
      if (!swift_unknownObjectWeakLoadStrong())
      {
        uint64_t result = swift_release();
        uint64_t v43 = v54;
        if (!v54) {
          return result;
        }
LABEL_12:
        uint64_t v44 = type metadata accessor for URL();
        uint64_t v45 = (uint64_t)v52;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(v52, v46, v44);
        swift_storeEnumTagMultiPayload();
        v43(v45);
        return sub_100054B1C(v45, &qword_1005F6D08);
      }
      sub_1003C5518(v31);
      swift_release();
      uint64_t result = swift_unknownObjectRelease();
    }
    uint64_t v43 = v54;
    if (!v54) {
      return result;
    }
    goto LABEL_12;
  }
  sub_10018CD14((uint64_t)v23, (uint64_t)v20, type metadata accessor for JobPipelineError);
  sub_10018A620((uint64_t)v20, (uint64_t)v18, type metadata accessor for JobPipelineError);
  unint64_t v24 = *v18;
  uint64_t v25 = sub_100054B78(&qword_1005F6CF0);
  sub_100053820((uint64_t)v18 + *(int *)(v25 + 48), (uint64_t)v15, (uint64_t *)&unk_1005F7750);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_errorRetain();
    sub_1001860C0(v24, 0, 128, (uint64_t)v15);
    swift_errorRelease();
    swift_release();
  }
  swift_errorRelease();
  sub_100054B1C((uint64_t)v15, (uint64_t *)&unk_1005F7750);
  unint64_t v26 = v54;
  if (v54)
  {
    sub_10018B870(&qword_1005F6D10, (void (*)(uint64_t))type metadata accessor for JobPipelineError);
    uint64_t v27 = swift_allocError();
    sub_10018A620((uint64_t)v20, v28, type metadata accessor for JobPipelineError);
    uint64_t v29 = (uint64_t)v52;
    *int v52 = v27;
    swift_storeEnumTagMultiPayload();
    v26(v29);
    sub_100054B1C(v29, &qword_1005F6D08);
  }
  return sub_10018A5C0((uint64_t)v20, type metadata accessor for JobPipelineError);
}

void sub_10017C210()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100054B78(&qword_1005F5D20);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for DownloadJob(0);
  __chkstk_darwin(v5);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v8 = *(id *)(v0 + OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v9 = (uint64_t *)&v7[*(int *)(v5 + 20)];
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain();
  sub_10018A5C0((uint64_t)v7, type metadata accessor for DownloadJob);
  sub_10017C440(v10, v11, 2);
  swift_bridgeObjectRelease();
  uint64_t v12 = v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_metadata;
  uint64_t v13 = type metadata accessor for EpisodeMetadata(0);
  sub_100054BBC(v12 + *(int *)(v13 + 60), (uint64_t)v4, &qword_1005F5D20);
  uint64_t v14 = type metadata accessor for Date();
  LODWORD(v12) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v4, 1, v14);
  sub_100054B1C((uint64_t)v4, &qword_1005F5D20);
  if (v12 != 1)
  {
    uint64_t v15 = *(void **)(v1 + OBJC_IVAR____TtC8Podcasts11JobPipeline_analyticsChannel);
    type metadata accessor for AnalyticsEvent();
    swift_unknownObjectRetain();
    uint64_t v16 = (void *)AnalyticsEvent.__allocating_init(cacheDeletedFilesRestored:failed:)();
    [v15 sendEvent:v16];
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10017C440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for BugReportFrequency();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BugReport.Domain();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BugReport.ErrorKind();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PodcastsSystem();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = os_feature_enabled_download_consistency_checks();
  if (result)
  {
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for PodcastsSystem.downloads(_:), v14);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for BugReport.ErrorKind.duplicateDownloads(_:), v10);
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for BugReport.Domain.podcasts(_:), v6);
    id v19 = objc_allocWithZone((Class)type metadata accessor for BugReport());
    uint64_t v20 = (void *)BugReport.init(domain:system:errorKind:forceSubmissionAttempt:)();
    sub_100056D54(v25[1] + OBJC_IVAR____TtC8Podcasts11JobPipeline_bugReporter, (uint64_t)v31);
    sub_100041A98(v31, v31[3]);
    uint64_t v22 = v29;
    uint64_t v21 = v30;
    (*(void (**)(char *, void, uint64_t))(v29 + 104))(v5, enum case for BugReportFrequency.hourly(_:), v30);
    uint64_t v23 = (void *)swift_allocObject();
    void v23[2] = v26;
    uint64_t v24 = v27;
    v23[3] = v28;
    v23[4] = v24;
    swift_bridgeObjectRetain();
    dispatch thunk of BugReporter.prepare(bugReport:maximumFrequency:checkBlock:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v21);
    return sub_10004D2D8((uint64_t)v31);
  }
  return result;
}

void sub_10017C7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = [self sharedInstance];
  id v11 = [v10 loggingContext];

  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = v11;
  uint64_t v12[3] = a3;
  void v12[4] = a4;
  v12[5] = a5;
  v12[6] = a1;
  v12[7] = a2;
  void v15[4] = sub_10018D120;
  void v15[5] = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  _OWORD v15[2] = sub_10003B424;
  void v15[3] = &unk_100556440;
  uint64_t v13 = _Block_copy(v15);
  id v14 = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v14 performBlock:v13];
  _Block_release(v13);
}

void sub_10017C93C(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5, void *a6)
{
  id v52 = a4;
  id v53 = a5;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v47 - v15;
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [a1 episodeForUuid:v17];

  if (v18)
  {
    id v51 = a6;
    id v19 = [v18 podcast];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v54 = v10;
      id v21 = [v19 uuid];
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v49 = v14;
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v50 = v23;
        sub_10004D29C(0, (unint64_t *)&qword_100603220);
        id v24 = [(id)swift_getObjCClassFromMetadata() fetchRequest];
        uint64_t v25 = self;
        id v26 = [v25 predicateForDownloadBehavior:2];
        id v27 = [v25 predicateForDownloadBehavior:4];
        id v28 = [v26 OR:v27];

        id v29 = [v25 predicateForDownloadedEpisodesOnPodcastUuid:v22];
        id v30 = [v28 NOT];
        id v31 = [v29 AND:v30];

        [v24 setPredicate:v31];
        id v56 = 0;
        uint64_t v32 = v24;
        id v33 = [a1 countForFetchRequest:v24 error:&v56];
        if (v56)
        {
          id v53 = v28;
          id v34 = v56;
          swift_willThrow();
          uint64_t v35 = v49;
          static Logger.downloads.getter();
          swift_bridgeObjectRetain();
          uint64_t v36 = Logger.logObject.getter();
          os_log_type_t v37 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v36, v37))
          {
            id v52 = v32;
            uint64_t v38 = swift_slowAlloc();
            id v51 = v34;
            uint64_t v39 = (uint8_t *)v38;
            id v56 = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v39 = 136446210;
            unint64_t v40 = v50;
            swift_bridgeObjectRetain();
            uint64_t v55 = sub_10004B974(v48, v40, (uint64_t *)&v56);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to count downloaded episodes for podcast: %{public}s, unable to assess excessive downloads.", v39, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v11 + 8))(v49, v54);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v11 + 8))(v35, v54);
          }
        }
        else
        {
          id v44 = v33;
          swift_bridgeObjectRelease();
          [v20 episodeLimitResolvedValue];
          uint64_t v45 = (void *)swift_allocObject();
          id v46 = v52;
          v45[2] = v44;
          v45[3] = v46;
          v45[4] = v53;
          v45[5] = v51;
          swift_retain();
          MTPodcastEpisodeLimit.countValue(in:completionHandler:)();
          swift_release();
        }
        return;
      }

      uint64_t v10 = v54;
    }
    else
    {
      uint64_t v20 = v18;
    }
  }
  static Logger.downloads.getter();
  swift_bridgeObjectRetain_n();
  unint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v54 = v10;
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    id v56 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_10004B974(a2, a3, (uint64_t *)&v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to assess for excessive download, episode or podcast not found for episodeUUID: %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v54);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
}

unint64_t sub_10017CFBC(unint64_t result, char a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void))
{
  if ((a2 & 1) == 0)
  {
    unint64_t v6 = result;
    if (is_mul_ok(a5, result))
    {
      if (a4 >= 1 && a5 * result < a4)
      {
        sub_100054B78(&qword_1005F6CB8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10046D030;
        AnyHashable.init<A>(_:)();
        id v10 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:v6];
        uint64_t v11 = sub_10004D29C(0, (unint64_t *)&unk_1005F9460);
        *(void *)(inited + 96) = v11;
        *(void *)(inited + 72) = v10;
        AnyHashable.init<A>(_:)();
        id v12 = [objc_allocWithZone((Class)NSNumber) initWithInteger:a4];
        *(void *)(inited + 168) = v11;
        *(void *)(inited + 144) = v12;
        sub_10016E860(inited);
        a6();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_10017D148(char *a1, void *a2, char *a3, uint64_t (*a4)(uint64_t a1), int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v318 = a3;
  uint64_t v305 = a7;
  uint64_t v306 = a8;
  uint64_t v299 = a6;
  LODWORD(v308) = a5;
  v307 = a4;
  v312 = a1;
  uint64_t v289 = type metadata accessor for DownloadJob(0);
  v311 = *(void **)(v289 - 8);
  uint64_t v304 = v311[8];
  __chkstk_darwin(v289);
  uint64_t ObjectType = (char *)&v288 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)type metadata accessor for URL();
  v321 = (void *)*(v11 - 1);
  id v315 = (id)v321[8];
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v288 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v288 - v15;
  uint64_t v18 = v17 + 16;
  id v19 = *(void (**)(char *, void *, void *))(v17 + 16);
  v300 = a2;
  v19((char *)&v288 - v15, a2, v11);
  v19(v14, a3, v11);
  v309 = (char *)sub_10004D29C(0, (unint64_t *)&qword_1005F89D0);
  uint64_t v310 = static OS_os_log.downloads.getter();
  uint64_t v20 = (objc_class *)type metadata accessor for MoveFileOperation(0);
  id v21 = (char *)objc_allocWithZone(v20);
  uint64_t v22 = &v21[OBJC_IVAR____TtC8Podcasts17MoveFileOperation_input];
  *(void *)uint64_t v22 = 0;
  v22[8] = 2;
  v19(&v21[OBJC_IVAR____TtC8Podcasts17MoveFileOperation_destination], v14, v11);
  v19(&v21[OBJC_IVAR____TtC8Podcasts17MoveFileOperation_source], v16, v11);
  *(void *)&v21[OBJC_IVAR____TtC8Podcasts17MoveFileOperation_log] = v310;
  v343.receiver = v21;
  v343.super_class = v20;
  uint64_t v310 = (uint64_t)[super init];
  unint64_t v23 = (void (*)(char *, void *))v321[1];
  v23(v14, v11);
  v23(v16, v11);
  v313 = (void (*)(id, char *, id))v19;
  uint64_t v314 = v18;
  v19(v16, v318, v11);
  type metadata accessor for FairPlayRolloutController();
  id v24 = (void *)static FairPlayRolloutController.shared.getter();
  LODWORD(v303) = FairPlayRolloutController.isEnabled()();

  type metadata accessor for FairPlayKeyLoader();
  uint64_t v25 = FairPlayKeyLoader.__allocating_init()();
  FairPlayKeyOperation = (objc_class *)type metadata accessor for FetchFairPlayKeyOperation();
  id v27 = objc_allocWithZone(FairPlayKeyOperation);
  id v28 = &v27[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_input];
  *(void *)id v28 = 0;
  v28[8] = 2;
  id v29 = &v27[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation____lazy_storage___logPrefix];
  *id v29 = 0;
  v29[1] = 0;
  id v30 = &v27[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeAdamID];
  *(void *)id v30 = v307;
  v30[8] = v308 & 1;
  id v316 = v16;
  id v317 = v11;
  v19(&v27[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_episodeLocation], v16, v11);
  *(void *)&v27[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_fairPlayKeyLoader] = v25;
  v27[OBJC_IVAR____TtC8Podcasts25FetchFairPlayKeyOperation_iTunesCloudFairPlayOfflineEnabled] = v303 & 1;
  v342.receiver = v27;
  v342.super_class = FairPlayKeyOperation;
  v301 = [super init];
  v23(v16, v11);
  v307 = type metadata accessor for DownloadJob;
  uint64_t v31 = (uint64_t)ObjectType;
  sub_10018A620((uint64_t)v312, (uint64_t)ObjectType, type metadata accessor for DownloadJob);
  uint64_t v32 = *((unsigned __int8 *)v311 + 80);
  v311 = (void *)(((v32 + 16) & ~v32) + v304);
  id v33 = (char *)((v32 + 16) & ~v32);
  uint64_t v298 = v32 | 7;
  uint64_t v34 = swift_allocObject();
  v308 = v33;
  v302 = type metadata accessor for DownloadJob;
  sub_10018CD14(v31, (uint64_t)&v33[v34], type metadata accessor for DownloadJob);
  uint64_t v35 = (objc_class *)sub_100054B78(&qword_1005F6CC0);
  uint64_t v36 = (char *)objc_allocWithZone(v35);
  os_log_type_t v37 = &v36[*(void *)((swift_isaMask & *(void *)v36) + 0x180)];
  *(void *)os_log_type_t v37 = 0;
  v37[8] = 2;
  uint64_t v38 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v36[*(void *)((swift_isaMask & *(void *)v36) + 0x188)];
  void *v38 = sub_10018B9B8;
  v38[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
  v341.receiver = v36;
  v341.super_class = v35;
  id v293 = [super init];
  uint64_t v39 = (objc_class *)sub_100054B78(&qword_1005F6CC8);
  unint64_t v40 = objc_allocWithZone(v39);
  sub_100054B78(&qword_1005F6CD0);
  swift_storeEnumTagMultiPayload();
  unint64_t v41 = (void *)((char *)v40 + *(void *)((swift_isaMask & *v40) + 0x188));
  void *v41 = sub_10017F734;
  v41[1] = 0;
  v340.receiver = v40;
  v340.super_class = v39;
  v296 = [super init];
  uint64_t v42 = (uint64_t)v312;
  uint64_t v43 = (uint64_t)ObjectType;
  sub_10018A620((uint64_t)v312, (uint64_t)ObjectType, v307);
  uint64_t v44 = swift_allocObject();
  uint64_t v45 = v43;
  sub_10018CD14(v43, (uint64_t)&v33[v44], type metadata accessor for DownloadJob);
  id v46 = (objc_class *)sub_100054B78(&qword_1005F6CD8);
  uint64_t v47 = (char *)objc_allocWithZone(v46);
  uint64_t v48 = &v47[*(void *)((swift_isaMask & *(void *)v47) + 0x180)];
  *(void *)uint64_t v48 = 0;
  v48[8] = 2;
  uint64_t v49 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v47[*(void *)((swift_isaMask & *(void *)v47) + 0x188)];
  char *v49 = sub_10018BC28;
  v49[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  v339.receiver = v47;
  v339.super_class = v46;
  id v294 = [super init];
  unint64_t v50 = (objc_class *)sub_100054B78(&qword_1005F6CE0);
  id v51 = (char *)objc_allocWithZone(v50);
  id v52 = &v51[*(void *)((swift_isaMask & *(void *)v51) + 0x180)];
  *(void *)id v52 = 0;
  v52[8] = 2;
  id v53 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))&v51[*(void *)((swift_isaMask & *(void *)v51)
                                                                                   + 0x188)];
  *id v53 = sub_100180268;
  v53[1] = 0;
  v338.receiver = v51;
  v338.super_class = v50;
  v295 = [super init];
  uint64_t v54 = v319;
  id v297 = sub_1001899C0(v42, 1);
  uint64_t v55 = *(uint64_t (**)(uint64_t))&v54[OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage];
  id v56 = *(uint64_t (**)(uint64_t))&v54[OBJC_IVAR____TtC8Podcasts11JobPipeline_episodeStorage + 8];
  swift_unknownObjectRetain();
  Class v291 = (Class)static OS_os_log.downloads.getter();
  sub_10018A620(v42, v43, v307);
  id v57 = v316;
  id v58 = v317;
  v313(v316, v318, v317);
  uint64_t v59 = v321;
  uint64_t v60 = *((unsigned __int8 *)v321 + 80);
  uint64_t v303 = ~v60;
  uint64_t v304 = v60;
  unint64_t v61 = ((unint64_t)v311 + v60) & ~v60;
  unint64_t v62 = ((unint64_t)v315 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v290 = v298 | v60;
  uint64_t v63 = swift_allocObject();
  sub_10018CD14(v45, (uint64_t)&v308[v63], v302);
  unint64_t v64 = (uint64_t (*)(uint64_t))v59[4];
  v321 = v59 + 4;
  v302 = v64;
  ((void (*)(unint64_t, id, id))v64)(v63 + v61, v57, v58);
  *(void *)(v63 + v62) = v299;
  unint64_t v65 = (objc_class *)sub_100054B78(&qword_1005F6C00);
  id v66 = (char *)objc_allocWithZone(v65);
  uint64_t v67 = &v66[*(void *)((swift_isaMask & *(void *)v66) + 0x198)];
  *(void *)uint64_t v67 = 0;
  v67[8] = 2;
  uint64_t v68 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))&v66[*(void *)((swift_isaMask & *(void *)v66)
                                                                                   + 0x1A8)];
  *uint64_t v68 = sub_10018BFBC;
  v68[1] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v63;
  uint64_t v69 = &v66[*(void *)((swift_isaMask & *(void *)v66) + 0x1A0)];
  v307 = v55;
  *(void *)uint64_t v69 = v55;
  *((void *)v69 + 1) = v56;
  v292 = v56;
  *(void *)&v66[*(void *)((swift_isaMask & *(void *)v66) + 0x1B0)] = v291;
  unint64_t v70 = v319;
  v337.receiver = v66;
  v337.super_class = v65;
  Class v291 = v65;
  uint64_t v298 = (uint64_t)[super init];
  sub_100054BBC((uint64_t)&v70[OBJC_IVAR____TtC8Podcasts11JobPipeline_mediaLibraryClient], (uint64_t)&v334, (uint64_t *)&unk_1005F6FD0);
  if (v335)
  {
    sub_100042FC4(&v334, (uint64_t)v336);
    id v71 = *(id *)&v70[OBJC_IVAR____TtC8Podcasts11JobPipeline_accessQueue];
    os_log_type_t v72 = ObjectType;
    uint64_t v73 = v289;
    OS_dispatch_queue.sync<A>(execute:)();

    id v74 = (uint64_t *)&v72[*(int *)(v73 + 20)];
    uint64_t v75 = *v74;
    uint64_t v76 = v74[1];
    swift_bridgeObjectRetain();
    sub_10018A5C0((uint64_t)v72, type metadata accessor for DownloadJob);
    sub_10004D29C(0, (unint64_t *)&unk_1005FE480);
    id v77 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
    id v78 = [v77 activeDsid];

    uint64_t v299 = (uint64_t)sub_100182B40(v75, v76, v78, (uint64_t)v336);
    swift_bridgeObjectRelease();

    sub_10004D2D8((uint64_t)v336);
  }
  else
  {
    sub_100054B1C((uint64_t)&v334, (uint64_t *)&unk_1005F6FD0);
    unint64_t v79 = (void *)static OS_os_log.default.getter();
    id v80 = objc_allocWithZone((Class)type metadata accessor for GroupOperation());
    uint64_t v299 = sub_1003FF024((unint64_t)_swiftEmptyArrayStorage, 0, v79);
  }
  id v81 = v307;
  swift_unknownObjectRetain();
  uint64_t v82 = static OS_os_log.downloads.getter();
  uint64_t v83 = (uint64_t)ObjectType;
  sub_10018A620((uint64_t)v312, (uint64_t)ObjectType, type metadata accessor for DownloadJob);
  id v85 = v316;
  id v84 = v317;
  v313(v316, (char *)v300, v317);
  unint64_t v86 = ((unint64_t)v311 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v87 = (v86 + v304 + 8) & v303;
  uint64_t v88 = swift_allocObject();
  sub_10018CD14(v83, (uint64_t)&v308[v88], type metadata accessor for DownloadJob);
  *(void *)(v88 + v86) = v70;
  ((void (*)(uint64_t, id, id))v302)(v88 + v87, v85, v84);
  uint64_t v89 = v291;
  uint64_t v90 = (char *)objc_allocWithZone(v291);
  unint64_t v91 = &v90[*(void *)((swift_isaMask & *(void *)v90) + 0x198)];
  *(void *)unint64_t v91 = 0;
  v91[8] = 2;
  uint64_t v92 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))&v90[*(void *)((swift_isaMask & *(void *)v90)
                                                                                   + 0x1A8)];
  *uint64_t v92 = sub_10018C3D4;
  v92[1] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v88;
  uint64_t v93 = (uint64_t (**)(uint64_t))&v90[*(void *)((swift_isaMask & *(void *)v90) + 0x1A0)];
  id v94 = v292;
  *uint64_t v93 = v81;
  v93[1] = v94;
  *(void *)&v90[*(void *)((swift_isaMask & *(void *)v90) + 0x1B0)] = v82;
  v333.receiver = v90;
  v333.super_class = v89;
  swift_retain();
  [super init];
  uint64_t v95 = swift_allocObject();
  uint64_t v97 = v305;
  uint64_t v96 = v306;
  *(void *)(v95 + 16) = v305;
  *(void *)(v95 + 24) = v96;
  int v98 = (objc_class *)sub_100054B78((uint64_t *)&unk_1005FF010);
  id v99 = objc_allocWithZone(v98);
  id v100 = (char *)v99 + *(void *)((swift_isaMask & *v99) + 0x180);
  *(void *)id v100 = 0;
  v100[8] = 2;
  uint64_t v101 = (void (**)(uint64_t@<X8>))((char *)v99 + *(void *)((swift_isaMask & *v99) + 0x188));
  *uint64_t v101 = sub_10018C4E4;
  v101[1] = (void (*)(uint64_t@<X8>))v95;
  sub_10004ACDC(v97);
  v332.receiver = v99;
  v332.super_class = v98;
  v300 = [super init];
  uint64_t v102 = swift_allocObject();
  os_log_type_t v103 = v301;
  swift_unknownObjectWeakInit();
  uint64_t v104 = (uint64_t (**)(uint64_t))(v310 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  uint64_t v105 = *(void *)(v310 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  *uint64_t v104 = sub_10018C500;
  v104[1] = (uint64_t (*)(uint64_t))v102;
  sub_1000536BC(v105);
  self;
  uint64_t v106 = swift_dynamicCastObjCClass();
  if (v106)
  {
    uint64_t v107 = v106;
    swift_getObjectType();
    uint64_t v108 = swift_conformsToProtocol2();
    uint64_t v109 = v108 ? v108 : 0;
    if (v108 ? v107 : 0)
    {
      uint64_t ObjectType = (char *)swift_getObjectType();
      uint64_t v111 = swift_allocObject();
      *(void *)(v111 + 24) = v109;
      swift_unknownObjectWeakInit();
      uint64_t v112 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v113 = swift_allocObject();
      *(void *)(v113 + 16) = v112;
      *(void *)(v113 + 24) = v111;
      unint64_t v114 = *(void (**)(void (*)(), uint64_t, char *, uint64_t))(v109 + 72);
      id v115 = (id)swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      v114(sub_10004AF2C, v113, ObjectType, v109);
      os_log_type_t v103 = v301;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v116 = (objc_class *)type metadata accessor for BaseOperation();
      v322.receiver = v103;
      v322.super_class = v116;
      [super addDependency:v107];
    }
  }
  uint64_t v117 = swift_allocObject();
  uint64_t v118 = v293;
  swift_unknownObjectWeakInit();
  unint64_t v119 = (uint64_t (**)(uint64_t))&v103[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v120 = *(void *)&v103[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *unint64_t v119 = sub_10018A578;
  v119[1] = (uint64_t (*)(uint64_t))v117;
  id v121 = v103;
  sub_1000536BC(v120);
  self;
  uint64_t v122 = swift_dynamicCastObjCClass();
  v301 = v121;
  if (v122)
  {
    uint64_t v123 = v122;
    swift_getObjectType();
    uint64_t v124 = swift_conformsToProtocol2();
    uint64_t v125 = v124 ? v124 : 0;
    if (v124 ? v123 : 0)
    {
      uint64_t ObjectType = (char *)swift_getObjectType();
      uint64_t v127 = swift_allocObject();
      *(void *)(v127 + 24) = v125;
      swift_unknownObjectWeakInit();
      uint64_t v128 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v129 = swift_allocObject();
      *(void *)(v129 + 16) = v128;
      *(void *)(v129 + 24) = v127;
      uint64_t v130 = *(void (**)(void (*)(), uint64_t, char *, uint64_t))(v125 + 72);
      swift_unknownObjectRetain();
      uint64_t v131 = v121;
      swift_retain();
      swift_retain();
      v130(sub_10004AF2C, v129, ObjectType, v125);
      uint64_t v118 = v293;
      swift_release();
      swift_release();
      swift_release();
      unint64_t v132 = (objc_class *)type metadata accessor for BaseOperation();
      v323.receiver = v118;
      v323.super_class = v132;
      [super addDependency:v123];

      id v121 = v301;
    }
  }
  CFStringRef v133 = v118;

  uint64_t v134 = swift_allocObject();
  id v135 = v296;
  swift_unknownObjectWeakInit();
  id v136 = (uint64_t (**)(uint64_t))&v133[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v137 = *(void *)&v133[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *id v136 = sub_10018C508;
  v136[1] = (uint64_t (*)(uint64_t))v134;
  sub_1000536BC(v137);
  self;
  uint64_t v138 = swift_dynamicCastObjCClass();
  v309 = v133;
  if (v138)
  {
    uint64_t v139 = v138;
    swift_getObjectType();
    uint64_t v140 = swift_conformsToProtocol2();
    uint64_t v141 = v140 ? v140 : 0;
    if (v140 ? v139 : 0)
    {
      uint64_t ObjectType = (char *)swift_getObjectType();
      uint64_t v143 = swift_allocObject();
      *(void *)(v143 + 24) = v141;
      swift_unknownObjectWeakInit();
      uint64_t v144 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v145 = swift_allocObject();
      *(void *)(v145 + 16) = v144;
      *(void *)(v145 + 24) = v143;
      uint64_t v146 = *(void (**)(void (*)(), uint64_t, char *, uint64_t))(v141 + 72);
      swift_unknownObjectRetain();
      objc_super v147 = v309;
      swift_retain();
      swift_retain();
      v146(sub_10004AF2C, v145, ObjectType, v141);
      id v135 = v296;
      CFStringRef v133 = v309;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v148 = (objc_class *)type metadata accessor for BaseOperation();
      v324.receiver = v135;
      v324.super_class = v148;
      [super addDependency:v139];
    }
  }
  unint64_t v149 = v135;

  uint64_t v150 = swift_allocObject();
  objc_super v151 = v294;
  swift_unknownObjectWeakInit();
  objc_super v152 = (uint64_t (**)(uint64_t))&v149[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v153 = *(void *)&v149[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  void *v152 = sub_10018A578;
  v152[1] = (uint64_t (*)(uint64_t))v150;
  sub_1000536BC(v153);
  self;
  uint64_t v154 = swift_dynamicCastObjCClass();
  v296 = v149;
  if (v154)
  {
    uint64_t v155 = v154;
    swift_getObjectType();
    uint64_t v156 = swift_conformsToProtocol2();
    uint64_t v157 = v156 ? v156 : 0;
    if (v156 ? v155 : 0)
    {
      uint64_t ObjectType = (char *)swift_getObjectType();
      uint64_t v159 = swift_allocObject();
      *(void *)(v159 + 24) = v157;
      swift_unknownObjectWeakInit();
      uint64_t v160 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v161 = swift_allocObject();
      *(void *)(v161 + 16) = v160;
      *(void *)(v161 + 24) = v159;
      id v162 = *(void (**)(void (*)(), uint64_t, char *, uint64_t))(v157 + 72);
      swift_unknownObjectRetain();
      uint64_t v163 = v149;
      swift_retain();
      swift_retain();
      v162(sub_10004AF2C, v161, ObjectType, v157);
      objc_super v151 = v294;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v164 = (objc_class *)type metadata accessor for BaseOperation();
      v325.receiver = v151;
      v325.super_class = v164;
      [super addDependency:v155];

      unint64_t v149 = v296;
    }
  }
  uint64_t v165 = v151;

  uint64_t v166 = swift_allocObject();
  uint64_t v167 = v295;
  swift_unknownObjectWeakInit();
  uint64_t v168 = (uint64_t (**)(uint64_t))&v165[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v169 = *(void *)&v165[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  char *v168 = sub_10018C510;
  v168[1] = (uint64_t (*)(uint64_t))v166;
  sub_1000536BC(v169);
  self;
  uint64_t v170 = swift_dynamicCastObjCClass();
  v308 = v165;
  if (v170)
  {
    uint64_t v171 = v170;
    swift_getObjectType();
    uint64_t v172 = swift_conformsToProtocol2();
    uint64_t v173 = v172 ? v172 : 0;
    if (v172 ? v171 : 0)
    {
      uint64_t ObjectType = (char *)swift_getObjectType();
      uint64_t v175 = swift_allocObject();
      *(void *)(v175 + 24) = v173;
      swift_unknownObjectWeakInit();
      uint64_t v176 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v177 = swift_allocObject();
      *(void *)(v177 + 16) = v176;
      *(void *)(v177 + 24) = v175;
      uint64_t v178 = *(void (**)(void (*)(), uint64_t, char *, uint64_t))(v173 + 72);
      swift_unknownObjectRetain();
      uint64_t v179 = v308;
      swift_retain();
      swift_retain();
      v178(sub_10004AF2C, v177, ObjectType, v173);
      uint64_t v167 = v295;
      uint64_t v165 = v308;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v180 = (objc_class *)type metadata accessor for BaseOperation();
      v326.receiver = v167;
      v326.super_class = v180;
      [super addDependency:v171];
    }
  }
  uint64_t v181 = v167;

  uint64_t v182 = swift_allocObject();
  uint64_t v183 = v297;
  swift_unknownObjectWeakInit();
  uint64_t v184 = (uint64_t (**)(uint64_t))&v181[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v185 = *(void *)&v181[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *uint64_t v184 = sub_10018AAC8;
  v184[1] = (uint64_t (*)(uint64_t))v182;
  sub_1000536BC(v185);
  self;
  uint64_t v186 = swift_dynamicCastObjCClass();
  v295 = v181;
  if (v186)
  {
    uint64_t v187 = v186;
    swift_getObjectType();
    uint64_t v188 = swift_conformsToProtocol2();
    uint64_t v189 = v188 ? v188 : 0;
    if (v188 ? v187 : 0)
    {
      uint64_t ObjectType = (char *)swift_getObjectType();
      uint64_t v191 = swift_allocObject();
      *(void *)(v191 + 24) = v189;
      swift_unknownObjectWeakInit();
      uint64_t v192 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v193 = swift_allocObject();
      *(void *)(v193 + 16) = v192;
      *(void *)(v193 + 24) = v191;
      uint64_t v194 = *(void (**)(void (*)(), uint64_t, char *, uint64_t))(v189 + 72);
      swift_unknownObjectRetain();
      uint64_t v195 = v181;
      swift_retain();
      swift_retain();
      v194(sub_10004AF2C, v193, ObjectType, v189);
      uint64_t v183 = v297;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v196 = (objc_class *)type metadata accessor for BaseOperation();
      v327.receiver = v183;
      v327.super_class = v196;
      [super addDependency:v187];

      uint64_t v181 = v295;
    }
  }
  uint64_t v197 = v183;

  uint64_t v198 = swift_allocObject();
  uint64_t v199 = (void *)v298;
  swift_unknownObjectWeakInit();
  uint64_t v200 = (uint64_t (**)(uint64_t))((char *)v197 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  uint64_t v201 = *(void *)((char *)v197 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  *uint64_t v200 = sub_10018AAC8;
  v200[1] = (uint64_t (*)(uint64_t))v198;
  sub_1000536BC(v201);
  self;
  uint64_t v202 = swift_dynamicCastObjCClass();
  v307 = v197;
  if (v202)
  {
    uint64_t v203 = v202;
    swift_getObjectType();
    uint64_t v204 = swift_conformsToProtocol2();
    uint64_t v205 = v204 ? v204 : 0;
    if (v204 ? v203 : 0)
    {
      uint64_t ObjectType = (char *)swift_getObjectType();
      uint64_t v207 = swift_allocObject();
      *(void *)(v207 + 24) = v205;
      swift_unknownObjectWeakInit();
      uint64_t v208 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v209 = swift_allocObject();
      *(void *)(v209 + 16) = v208;
      *(void *)(v209 + 24) = v207;
      v210 = *(void (**)(void (*)(), uint64_t, char *, uint64_t))(v205 + 72);
      swift_unknownObjectRetain();
      v211 = v307;
      swift_retain();
      swift_retain();
      v210(sub_10004AF2C, v209, ObjectType, v205);
      uint64_t v199 = (void *)v298;
      swift_release();
      uint64_t v197 = v307;
      swift_release();
      swift_release();
      uint64_t v212 = (objc_class *)type metadata accessor for BaseOperation();
      v328.receiver = v199;
      v328.super_class = v212;
      [super addDependency:v203];
    }
  }
  uint64_t v213 = v199;

  uint64_t v214 = swift_allocObject();
  v215 = (void *)v299;
  swift_unknownObjectWeakInit();
  uint64_t v216 = (uint64_t (**)(uint64_t))&v213[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v217 = *(void *)&v213[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  *uint64_t v216 = sub_10018AAC0;
  v216[1] = (uint64_t (*)(uint64_t))v214;
  sub_1000536BC(v217);
  self;
  uint64_t v218 = swift_dynamicCastObjCClass();
  v312 = v213;
  if (v218)
  {
    uint64_t v219 = v218;
    swift_getObjectType();
    uint64_t v220 = swift_conformsToProtocol2();
    uint64_t v221 = v220 ? v220 : 0;
    if (v220 ? v219 : 0)
    {
      uint64_t ObjectType = (char *)swift_getObjectType();
      uint64_t v223 = swift_allocObject();
      *(void *)(v223 + 24) = v221;
      swift_unknownObjectWeakInit();
      uint64_t v224 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v225 = swift_allocObject();
      *(void *)(v225 + 16) = v224;
      *(void *)(v225 + 24) = v223;
      v226 = *(void (**)(void (*)(), uint64_t, char *, uint64_t))(v221 + 72);
      swift_unknownObjectRetain();
      v227 = v213;
      swift_retain();
      swift_retain();
      v226(sub_10004AF2C, v225, ObjectType, v221);
      v215 = (void *)v299;
      swift_release();
      swift_release();
      swift_release();
      v228 = (objc_class *)type metadata accessor for BaseOperation();
      v329.receiver = v215;
      v329.super_class = v228;
      [super addDependency:v219];

      uint64_t v213 = v312;
    }
  }
  v229 = v215;

  uint64_t v230 = swift_allocObject();
  id v231 = v311;
  swift_unknownObjectWeakInit();
  v232 = (uint64_t (**)(uint64_t))&v229[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  uint64_t v233 = *(void *)&v229[OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler];
  char *v232 = sub_10018AAC8;
  v232[1] = (uint64_t (*)(uint64_t))v230;
  sub_1000536BC(v233);
  self;
  uint64_t v234 = swift_dynamicCastObjCClass();
  uint64_t ObjectType = v229;
  if (v234)
  {
    uint64_t v235 = v234;
    swift_getObjectType();
    uint64_t v236 = swift_conformsToProtocol2();
    uint64_t v237 = v236 ? v236 : 0;
    if (v236 ? v235 : 0)
    {
      uint64_t v299 = swift_getObjectType();
      uint64_t v239 = swift_allocObject();
      *(void *)(v239 + 24) = v237;
      swift_unknownObjectWeakInit();
      uint64_t v240 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v241 = swift_allocObject();
      *(void *)(v241 + 16) = v240;
      *(void *)(v241 + 24) = v239;
      v242 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v237 + 72);
      swift_unknownObjectRetain();
      v243 = ObjectType;
      swift_retain();
      swift_retain();
      v242(sub_10004AF2C, v241, v299, v237);
      v229 = ObjectType;
      id v231 = v311;
      swift_release();
      swift_release();
      swift_release();
      v244 = (objc_class *)type metadata accessor for BaseOperation();
      v330.receiver = v231;
      v330.super_class = v244;
      [super addDependency:v235];
    }
  }
  v245 = v231;

  uint64_t v246 = swift_allocObject();
  v247 = v300;
  swift_unknownObjectWeakInit();
  v248 = (uint64_t (**)(uint64_t))((char *)v245 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  uint64_t v249 = *(void *)((char *)v245 + OBJC_IVAR____TtC8Podcasts13BaseOperation_resultHandler);
  char *v248 = sub_10018A578;
  v248[1] = (uint64_t (*)(uint64_t))v246;
  sub_1000536BC(v249);
  self;
  uint64_t v250 = swift_dynamicCastObjCClass();
  v311 = v245;
  if (v250)
  {
    uint64_t v251 = v250;
    swift_getObjectType();
    uint64_t v252 = swift_conformsToProtocol2();
    if (v252) {
      uint64_t v253 = v252;
    }
    else {
      uint64_t v253 = 0;
    }
    if (v252) {
      uint64_t v254 = v251;
    }
    else {
      uint64_t v254 = 0;
    }
    if (v254)
    {
      uint64_t v299 = swift_getObjectType();
      uint64_t v255 = swift_allocObject();
      *(void *)(v255 + 24) = v253;
      swift_unknownObjectWeakInit();
      uint64_t v256 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v257 = swift_allocObject();
      *(void *)(v257 + 16) = v256;
      *(void *)(v257 + 24) = v255;
      v258 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v253 + 72);
      swift_unknownObjectRetain();
      v259 = v245;
      swift_retain();
      swift_retain();
      v258(sub_10004AF2C, v257, v299, v253);
      swift_release();
      swift_release();
      v247 = v300;
      swift_release();
      v260 = (objc_class *)type metadata accessor for BaseOperation();
      v331.receiver = v247;
      v331.super_class = v260;
      [super addDependency:v251];

      v245 = v311;
    }
  }
  v261 = v247;

  id v263 = v316;
  id v262 = v317;
  v313(v316, v318, v317);
  uint64_t v264 = (v304 + 32) & v303;
  uint64_t v265 = swift_allocObject();
  uint64_t v267 = v305;
  uint64_t v266 = v306;
  *(void *)(v265 + 16) = v305;
  *(void *)(v265 + 24) = v266;
  ((void (*)(uint64_t, id, id))v302)(v265 + v264, v263, v262);
  v268 = (uint64_t (**)(uint64_t))&v261[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  uint64_t v269 = *(void *)&v261[OBJC_IVAR____TtC8Podcasts13BaseOperation_onError];
  char *v268 = sub_10018C5EC;
  v268[1] = (uint64_t (*)(uint64_t))v265;
  sub_10004ACDC(v267);
  sub_1000536BC(v269);

  v321 = sub_100175D10();
  sub_100054B78((uint64_t *)&unk_1005FA7F0);
  uint64_t v270 = swift_allocObject();
  *(_OWORD *)(v270 + 16) = xmmword_10046D040;
  id v272 = v309;
  v271 = (void *)v310;
  v273 = v301;
  *(void *)(v270 + 32) = v310;
  *(void *)(v270 + 40) = v273;
  v274 = v295;
  v275 = v296;
  *(void *)(v270 + 48) = v272;
  *(void *)(v270 + 56) = v275;
  v276 = v307;
  id v277 = v308;
  *(void *)(v270 + 64) = v308;
  *(void *)(v270 + 72) = v274;
  v278 = v312;
  *(void *)(v270 + 80) = v276;
  *(void *)(v270 + 88) = v278;
  v279 = v311;
  *(void *)(v270 + 96) = ObjectType;
  *(void *)(v270 + 104) = v279;
  *(void *)(v270 + 112) = v261;
  v336[0] = v270;
  specialized Array._endMutation()();
  uint64_t v314 = sub_10004D29C(0, (unint64_t *)&unk_1005FF020);
  v319 = v271;
  v318 = v273;
  id v317 = v272;
  id v316 = v275;
  id v315 = v277;
  id v280 = v274;
  v281 = v276;
  v282 = v312;
  v283 = ObjectType;
  v284 = v311;
  v285 = v261;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v287 = v321;
  [v321 addOperations:isa waitUntilFinished:0];
}