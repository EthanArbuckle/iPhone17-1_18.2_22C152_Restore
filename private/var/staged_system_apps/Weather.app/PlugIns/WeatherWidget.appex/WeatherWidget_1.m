uint64_t sub_1000AADF4@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  void (*v43)(void);
  uint64_t v45;
  uint64_t v46;

  v6 = sub_100129480();
  sub_10000DB98();
  __chkstk_darwin(v7);
  sub_10006D4E4();
  v8 = sub_100129300();
  sub_10000DB98();
  v10 = v9;
  __chkstk_darwin(v11);
  sub_10002A53C();
  v12 = sub_1000053D8(&qword_10016C7C0);
  v13 = sub_10000DC9C(v12);
  __chkstk_darwin(v13);
  sub_10000DC50();
  v16 = v15 - v14;
  v17 = sub_1000053D8(&qword_10016B9F8);
  v18 = sub_10000DC9C(v17);
  __chkstk_darwin(v18);
  sub_10000DC50();
  v19 = sub_1000053D8(&qword_10016EE18);
  v20 = sub_10000DC9C(v19);
  __chkstk_darwin(v20);
  sub_10000DC50();
  v23 = v22 - v21;
  v24 = sub_1000053D8(&qword_10016EE10);
  v25 = sub_10000DC9C(v24);
  __chkstk_darwin(v25);
  sub_100099AF0();
  v26 = sub_10012AB00();
  sub_10000DB98();
  v46 = v27;
  __chkstk_darwin(v28);
  sub_10000DBCC();
  v45 = v29;
  sub_1000AC22C();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v30, v31, v32, v6);
  sub_1001292B0();
  AggregateWeatherViewModel.nextHourPrecipitationShift(startDate:timeZone:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v8);
  sub_100046DC4(v16, &qword_10016C7C0);
  type metadata accessor for AggregateWeatherViewModel(0);
  sub_10012A6A0();
  sub_1001292B0();
  sub_10012AA50();
  v33 = sub_10012AA90();
  sub_10006D2E8(v23, 1, v33);
  if (v38)
  {
    sub_100046DC4(v23, &qword_10016EE18);
    sub_1000AC22C();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v34, v35, v36, v26);
  }
  else
  {
    sub_10012AA80();
    sub_1000472C0();
    sub_10000B424();
    v37();
    sub_10006D2E8(v4, 1, v26);
    if (!v38)
    {
      sub_100011F6C();
      v42();
      sub_10012A6A0();
      sub_1000A7658(v45, a1, a2, a3, a4);
      sub_10000B424();
      v43();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v45, v26);
    }
  }
  sub_100046DC4(v4, &qword_10016EE10);
  v39 = sub_10012C0E0();
  return sub_1000AC238(a4, v40, v41, v39);
}

uint64_t sub_1000AB1A4(uint64_t a1, unsigned __int8 a2)
{
  int v3 = a2;
  uint64_t v4 = sub_100129B10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  if (v3)
  {
    v11(v8, a1, v4);
    int v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
    int v13 = enum case for Precipitation.none(_:);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (v12 != v13)
    {
      if (qword_10016AEE8 != -1) {
        swift_once();
      }
      v14 = (objc_class *)(id)qword_100181E30;
      v25._countAndFlagsBits = 0x800000010013B3D0;
      v15._countAndFlagsBits = 7827278;
      v15._object = (void *)0xE300000000000000;
LABEL_6:
      v16.value._countAndFlagsBits = 0;
      v16.value._object = 0;
      v17.super.isa = v14;
      v18._countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
LABEL_19:
      uint64_t v20 = sub_100129180(v15, v16, v17, v18, v25);

      return v20;
    }
    return 0;
  }
  v11((char *)&v26 - v9, a1, v4);
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v19 == enum case for Precipitation.none(_:)) {
    return 0;
  }
  if (v19 == enum case for Precipitation.hail(_:))
  {
    if (qword_10016AEE8 != -1) {
      swift_once();
    }
    v14 = (objc_class *)(id)qword_100181E30;
    v25._countAndFlagsBits = 0x800000010013B4E0;
    unsigned int v21 = 1818845512;
LABEL_18:
    v15._countAndFlagsBits = v21 | 0x776F4E2000000000;
    v15._object = (void *)0xE800000000000000;
    v16.value._countAndFlagsBits = 0;
    v16.value._object = 0;
    v17.super.isa = v14;
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    goto LABEL_19;
  }
  if (v19 == enum case for Precipitation.mixed(_:) || v19 == enum case for Precipitation.rain(_:))
  {
    if (qword_10016AEE8 != -1) {
      swift_once();
    }
    v14 = (objc_class *)(id)qword_100181E30;
    v25._countAndFlagsBits = 0x800000010013B450;
    unsigned int v21 = 1852399954;
    goto LABEL_18;
  }
  if (v19 == enum case for Precipitation.sleet(_:))
  {
    if (qword_10016AEE8 != -1) {
      swift_once();
    }
    v14 = (objc_class *)(id)qword_100181E30;
    v25._countAndFlagsBits = 0x800000010013B4B0;
    v15._countAndFlagsBits = 0x6F4E207465656C53;
    v15._object = (void *)0xE900000000000077;
    goto LABEL_6;
  }
  if (v19 == enum case for Precipitation.snow(_:))
  {
    if (qword_10016AEE8 != -1) {
      swift_once();
    }
    v14 = (objc_class *)(id)qword_100181E30;
    v25._countAndFlagsBits = 0x800000010013B480;
    unsigned int v21 = 2003791443;
    goto LABEL_18;
  }
  if (qword_10016AEE8 != -1) {
    swift_once();
  }
  v23 = (objc_class *)(id)qword_100181E30;
  v25._countAndFlagsBits = 0x800000010013B450;
  v27._countAndFlagsBits = 0x776F4E206E696152;
  v27._object = (void *)0xE800000000000000;
  v28.value._countAndFlagsBits = 0;
  v28.value._object = 0;
  v24.super.isa = v23;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  uint64_t v20 = sub_100129180(v27, v28, v24, v29, v25);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v20;
}

uint64_t sub_1000AB6B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  uint64_t v8 = sub_100129380();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1001293A0();
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  __chkstk_darwin(v11);
  int v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000053D8(&qword_10016EE38);
  __chkstk_darwin(v14 - 8);
  Swift::String_optional v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10012CA10();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  unsigned int v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v31 - v22;
  if (a2) {
    sub_1000DB4FC(a3, a2, (uint64_t)v16);
  }
  else {
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 1, 1, v17);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a1, v17);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v17) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v21, v17);
    sub_100046DC4((uint64_t)v16, &qword_10016EE38);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
  }
  if (qword_10016AEE8 != -1) {
    swift_once();
  }
  id v24 = (id)qword_100181E30;
  if (a3
    || (sub_100129340(),
        sub_100129390(),
        (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v32),
        char v25 = sub_100129370(),
        (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34),
        (v25 & 1) == 0))
  {
    sub_1000053D8(&qword_10016EE40);
    uint64_t v26 = sub_10012BED0();
    uint64_t v27 = *(void *)(v26 - 8);
    unint64_t v28 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_100130010;
    (*(void (**)(unint64_t, void, uint64_t))(v27 + 104))(v29 + v28, enum case for StyledVariableAttribute.Style.lowercaseSmallCaps(_:), v26);
  }
  sub_100129130();

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
}

uint64_t sub_1000ABB2C(char a1, char a2)
{
  char v2 = a1 | (a2 == 0);
  if (a1 & 1 | (a2 == 0)) {
    NSDateComponentsFormatterUnitsStyle v3 = NSDateComponentsFormatterUnitsStyleShort;
  }
  else {
    NSDateComponentsFormatterUnitsStyle v3 = NSDateComponentsFormatterUnitsStyleAbbreviated;
  }
  uint64_t v4 = sub_10012CC50(v3);
  if (v5) {
    return v4;
  }
  if (v2)
  {
    if (qword_10016AEE8 != -1) {
      swift_once();
    }
    uint64_t v7 = (objc_class *)(id)qword_100181E30;
    v13._countAndFlagsBits = 0x800000010013B7D0;
    v8._countAndFlagsBits = 0x73796164203031;
    v8._object = (void *)0xE700000000000000;
    v9.value._countAndFlagsBits = 0;
    v9.value._object = 0;
    v10.super.isa = v7;
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
  }
  else
  {
    if (qword_10016AEE8 != -1) {
      swift_once();
    }
    uint64_t v7 = (objc_class *)(id)qword_100181E30;
    v13._countAndFlagsBits = 0x800000010013B7F0;
    v8._countAndFlagsBits = 6565937;
    v8._object = (void *)0xE300000000000000;
    v9.value._countAndFlagsBits = 0;
    v9.value._object = 0;
    v10.super.isa = v7;
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
  }
  uint64_t v6 = sub_100129180(v8, v9, v10, v11, v13);

  return v6;
}

unint64_t sub_1000ABC9C()
{
  unint64_t result = qword_10016EE30;
  if (!qword_10016EE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EE30);
  }
  return result;
}

uint64_t sub_1000ABCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AggregateWeatherViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ABD4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000053D8(a3);
  sub_1000472C0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

unint64_t sub_1000ABDAC()
{
  unint64_t result = qword_10016EE68;
  if (!qword_10016EE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EE68);
  }
  return result;
}

uint64_t sub_1000ABDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_10016ECC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ABE60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for RainInlineContentViewModelFactory()
{
  return &type metadata for RainInlineContentViewModelFactory;
}

unsigned char *storeEnumTagSinglePayload for RainInlineContentViewModelFactory.ContentLength(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000ABF84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RainInlineContentViewModelFactory.ContentLength()
{
  return &type metadata for RainInlineContentViewModelFactory.ContentLength;
}

unint64_t sub_1000ABFC0()
{
  unint64_t result = qword_10016EE88;
  if (!qword_10016EE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EE88);
  }
  return result;
}

uint64_t sub_1000AC00C()
{
  return v0;
}

uint64_t sub_1000AC028()
{
  return v0;
}

uint64_t sub_1000AC05C()
{
  return *(void *)(v0 - 400);
}

uint64_t sub_1000AC07C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_1000AC09C()
{
  uint64_t result = v0;
  *(void *)(v2 - 224) = *(void *)(v1 + 8);
  return result;
}

uint64_t sub_1000AC0B8()
{
  return sub_100129170();
}

uint64_t sub_1000AC0DC(Swift::String a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, Swift::String a8)
{
  v10.value._countAndFlagsBits = 0;
  v10.value._object = 0;
  v11.super.isa = v8;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  return sub_100129180(a1, v10, v11, v12, a8);
}

uint64_t sub_1000AC100(Swift::String a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, Swift::String a8)
{
  v10.value._countAndFlagsBits = 0;
  v10.value._object = 0;
  v11.super.isa = v8;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  return sub_100129180(a1, v10, v11, v12, a8);
}

uint64_t sub_1000AC124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 176) = (char *)&a9 - v9;
  return 0;
}

uint64_t sub_1000AC13C()
{
  return sub_10012CA00();
}

uint64_t sub_1000AC160()
{
  return swift_slowAlloc();
}

uint64_t sub_1000AC194()
{
  return v0;
}

uint64_t sub_1000AC1C0()
{
  return v0;
}

uint64_t sub_1000AC1D4()
{
  return 0;
}

uint64_t sub_1000AC1E8(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v3 - 176);
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000AC214()
{
  return swift_allocObject();
}

uint64_t sub_1000AC238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, a4);
}

uint64_t sub_1000AC264()
{
  return sub_10012AAA0();
}

uint64_t sub_1000AC27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AC290);
}

uint64_t sub_1000AC290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012C610();

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
}

uint64_t sub_1000AC2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AC2EC);
}

uint64_t sub_1000AC2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012C610();

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DescriptionView()
{
  uint64_t result = qword_10016EEE8;
  if (!qword_10016EEE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AC380()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AC39C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v57 = sub_1000053D8(&qword_10016EF60);
  __chkstk_darwin(v57);
  v58 = (void *)((char *)v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v54 = sub_1000053D8(&qword_10016EF68);
  __chkstk_darwin(v54);
  uint64_t v53 = (uint64_t)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000053D8(&qword_10016EF70);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000053D8(&qword_10016EF78);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000053D8(&qword_10016EF80);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  Swift::String_optional v16 = (char *)v49 - v15;
  uint64_t v17 = sub_10012C5E0();
  v55 = v6;
  uint64_t v56 = v4;
  if (v17)
  {
    v52 = v49;
    __chkstk_darwin(v17);
    v49[-2] = v1;
    uint64_t v51 = sub_1000053D8(&qword_10016EFA0);
    sub_1000053D8(&qword_10016E188);
    sub_1000AD5FC();
    sub_1000840C0();
    sub_10012B670();
    uint64_t v18 = sub_10012C600();
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v10, v7);
    uint64_t v20 = (uint64_t *)&v14[*(int *)(v11 + 36)];
    *uint64_t v20 = KeyPath;
    v20[1] = v18;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_10000B2F4((uint64_t)v14, (uint64_t)v16, &qword_10016EF80);
    sub_10002BADC((uint64_t)v16, v53, &qword_10016EF80);
    swift_storeEnumTagMultiPayload();
    sub_1000AD514();
    uint64_t v21 = (uint64_t)v55;
    sub_10012B0E0();
    sub_10002BADC(v21, (uint64_t)v58, &qword_10016EF70);
    swift_storeEnumTagMultiPayload();
    sub_1000AD4A0();
    sub_10012B0E0();
    sub_1000235F8(v21, &qword_10016EF70);
    uint64_t v22 = (uint64_t)v16;
    return sub_1000235F8(v22, &qword_10016EF80);
  }
  v50 = v14;
  uint64_t v51 = (uint64_t)v10;
  v52 = v16;
  uint64_t v23 = sub_10012C570();
  if (v24)
  {
    v49[2] = v49;
    uint64_t v25 = __chkstk_darwin(v23);
    v49[-2] = v1;
    v49[-2] = __chkstk_darwin(v25);
    v49[-1] = v26;
    v49[1] = sub_1000053D8(&qword_10016EFA0);
    sub_1000053D8(&qword_10016E188);
    sub_1000AD5FC();
    sub_1000840C0();
    uint64_t v27 = v51;
    sub_10012B670();
    swift_bridgeObjectRelease();
    uint64_t v28 = sub_10012C600();
    uint64_t v29 = swift_getKeyPath();
    uint64_t v30 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v50, v27, v7);
    uint64_t v31 = (uint64_t *)(v30 + *(int *)(v11 + 36));
    *uint64_t v31 = v29;
    v31[1] = v28;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v27, v7);
    uint64_t v32 = (uint64_t)v52;
    sub_10000B2F4(v30, (uint64_t)v52, &qword_10016EF80);
    sub_10002BADC(v32, v53, &qword_10016EF80);
    swift_storeEnumTagMultiPayload();
    sub_1000AD514();
    uint64_t v33 = (uint64_t)v55;
    sub_10012B0E0();
    sub_10002BADC(v33, (uint64_t)v58, &qword_10016EF70);
    swift_storeEnumTagMultiPayload();
    sub_1000AD4A0();
    sub_10012B0E0();
    sub_1000235F8(v33, &qword_10016EF70);
    uint64_t v22 = v32;
    return sub_1000235F8(v22, &qword_10016EF80);
  }
  uint64_t v60 = sub_10012C540();
  uint64_t v61 = v35;
  sub_10000822C();
  uint64_t v36 = sub_10012B420();
  uint64_t v38 = v37;
  char v40 = v39 & 1;
  sub_10012C600();
  uint64_t v41 = sub_10012B3F0();
  uint64_t v43 = v42;
  char v45 = v44;
  uint64_t v47 = v46;
  swift_release();
  sub_100008278(v36, v38, v40);
  swift_bridgeObjectRelease();
  v48 = v58;
  uint64_t *v58 = v41;
  v48[1] = v43;
  *((unsigned char *)v48 + 16) = v45 & 1;
  v48[3] = v47;
  swift_storeEnumTagMultiPayload();
  sub_1000AD4A0();
  return sub_10012B0E0();
}

uint64_t sub_1000ACA98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1000053D8(&qword_10016DC10);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10012B660();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10012B620();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Image.Scale.small(_:), v6);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v5 + *(int *)(v3 + 36), v9, v6);
  *uint64_t v5 = KeyPath;
  uint64_t v12 = sub_1000053D8(&qword_10016E188);
  sub_10002BADC((uint64_t)v5, (uint64_t)a1 + *(int *)(v12 + 36), &qword_10016DC10);
  *a1 = v10;
  swift_retain();
  sub_1000235F8((uint64_t)v5, &qword_10016DC10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1000ACC7C@<X0>(uint64_t a1@<X8>)
{
  sub_10012C540();
  sub_10000822C();
  uint64_t v2 = sub_10012B420();
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6 & 1;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 40) = 2;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1000ACD10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1000053D8(&qword_10016DC10);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  char v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10012B660();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_10012B620();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Image.Scale.small(_:), v6);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v5 + *(int *)(v3 + 36), v9, v6);
  *char v5 = KeyPath;
  uint64_t v12 = sub_1000053D8(&qword_10016E188);
  sub_10002BADC((uint64_t)v5, (uint64_t)a1 + *(int *)(v12 + 36), &qword_10016DC10);
  *a1 = v10;
  swift_retain();
  sub_1000235F8((uint64_t)v5, &qword_10016DC10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1000ACEF4()
{
  uint64_t v0 = sub_10012B120();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10000DC50();
  uint64_t v6 = v5 - v4;
  sub_1000053D8(&qword_10016EF20);
  sub_10000B3FC();
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_1000053D8(&qword_10016EF28);
  sub_10000DB98();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_10000DC50();
  uint64_t v17 = v16 - v15;
  *(void *)uint64_t v10 = sub_10012AF10();
  *(void *)(v10 + 8) = 0;
  *(unsigned char *)(v10 + 16) = 1;
  uint64_t v18 = sub_1000053D8(&qword_10016EF30);
  sub_1000AD15C(v10 + *(int *)(v18 + 44));
  sub_10012B0F0();
  sub_10000B38C(&qword_10016EF38, &qword_10016EF20);
  sub_10012B520();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  sub_1000235F8(v10, &qword_10016EF20);
  sub_10012C540();
  sub_10000822C();
  uint64_t v19 = sub_10012B420();
  uint64_t v21 = v20;
  LOBYTE(v6) = v22 & 1;
  swift_getOpaqueTypeConformance2();
  sub_10012B490();
  sub_100008278(v19, v21, v6);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
}

uint64_t sub_1000AD15C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v1 = sub_10012B2E0();
  uint64_t v30 = *(void *)(v1 - 8);
  uint64_t v31 = v1;
  __chkstk_darwin(v1);
  uint64_t v29 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000053D8(&qword_10016EF40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000053D8(&qword_10016EF48);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000053D8(&qword_10016EF50);
  uint64_t v11 = v10 - 8;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  sub_1000AC39C((uint64_t)v5);
  uint64_t v17 = sub_10012B5C0();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10002BADC((uint64_t)v5, (uint64_t)v9, &qword_10016EF40);
  uint64_t v19 = (uint64_t *)&v9[*(int *)(v7 + 44)];
  *uint64_t v19 = KeyPath;
  v19[1] = v17;
  sub_1000235F8((uint64_t)v5, &qword_10016EF40);
  sub_10012C560();
  uint64_t v21 = v29;
  uint64_t v20 = v30;
  uint64_t v22 = v31;
  (*(void (**)(char *, void, uint64_t))(v30 + 104))(v29, enum case for Font.Leading.tight(_:), v31);
  uint64_t v23 = sub_10012B310();
  swift_release();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
  uint64_t v24 = swift_getKeyPath();
  sub_10002BADC((uint64_t)v9, (uint64_t)v14, &qword_10016EF48);
  uint64_t v25 = (uint64_t *)&v14[*(int *)(v11 + 44)];
  *uint64_t v25 = v24;
  v25[1] = v23;
  sub_1000235F8((uint64_t)v9, &qword_10016EF48);
  sub_10000B2F4((uint64_t)v14, (uint64_t)v16, &qword_10016EF50);
  sub_10002BADC((uint64_t)v16, (uint64_t)v14, &qword_10016EF50);
  uint64_t v26 = v32;
  sub_10002BADC((uint64_t)v14, v32, &qword_10016EF50);
  uint64_t v27 = v26 + *(int *)(sub_1000053D8(&qword_10016EF58) + 48);
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8) = 1;
  sub_1000235F8((uint64_t)v16, &qword_10016EF50);
  return sub_1000235F8((uint64_t)v14, &qword_10016EF50);
}

unint64_t sub_1000AD4A0()
{
  unint64_t result = qword_10016EF88;
  if (!qword_10016EF88)
  {
    sub_100005470(&qword_10016EF70);
    sub_1000AD514();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EF88);
  }
  return result;
}

unint64_t sub_1000AD514()
{
  unint64_t result = qword_10016EF90;
  if (!qword_10016EF90)
  {
    sub_100005470(&qword_10016EF80);
    sub_10000B38C(&qword_10016EF98, &qword_10016EF78);
    sub_10000B38C(&qword_10016BD48, &qword_10016BD50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EF90);
  }
  return result;
}

uint64_t sub_1000AD5D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACC7C(a1);
}

uint64_t sub_1000AD5F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000ACD10(a1);
}

unint64_t sub_1000AD5FC()
{
  unint64_t result = qword_10016EFA8;
  if (!qword_10016EFA8)
  {
    sub_100005470(&qword_10016EFA0);
    sub_10000B38C(&qword_10016DDD0, &qword_10016DDD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EFA8);
  }
  return result;
}

uint64_t sub_1000AD69C()
{
  return sub_10012ACF0();
}

uint64_t sub_1000AD6C0()
{
  return sub_10012ACF0();
}

uint64_t sub_1000AD6E4(uint64_t a1)
{
  sub_10012B660();
  sub_10000DB98();
  __chkstk_darwin(v2);
  sub_10000DC50();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4 - v3, a1);
  return sub_10012AD00();
}

uint64_t sub_1000AD780@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_10012AEC0();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000AD7B8()
{
  return sub_10012AED0();
}

unint64_t sub_1000AD7F0()
{
  unint64_t result = qword_10016EFB0;
  if (!qword_10016EFB0)
  {
    sub_100005470(&qword_10016EFB8);
    sub_100005470(&qword_10016EF20);
    sub_10000B38C(&qword_10016EF38, &qword_10016EF20);
    swift_getOpaqueTypeConformance2();
    sub_100070988();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EFB0);
  }
  return result;
}

uint64_t sub_1000AD8D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v132 = a1;
  uint64_t v110 = type metadata accessor for InstantWeatherViewModel();
  sub_10000B3FC();
  __chkstk_darwin(v2);
  sub_10000DBCC();
  uint64_t v128 = v3;
  uint64_t v131 = sub_10012C630();
  sub_10000DB98();
  uint64_t v125 = v4;
  __chkstk_darwin(v5);
  sub_10000DBCC();
  uint64_t v124 = v6;
  uint64_t v7 = sub_1000053D8(&qword_10016B098);
  __chkstk_darwin(v7 - 8);
  sub_10000DCB4();
  uint64_t v116 = v8;
  sub_1000636C8();
  __chkstk_darwin(v9);
  sub_100011F60();
  uint64_t v111 = v10;
  sub_1000636C8();
  __chkstk_darwin(v11);
  sub_100011F60();
  uint64_t v114 = v12;
  sub_1000636C8();
  __chkstk_darwin(v13);
  v108 = (char *)&v104 - v14;
  uint64_t v15 = sub_1000053D8(&qword_10016B060);
  sub_10000DB98();
  v123 = v16;
  __chkstk_darwin(v17);
  sub_10000DCB4();
  uint64_t v112 = v18;
  sub_1000636C8();
  __chkstk_darwin(v19);
  sub_100011F60();
  uint64_t v115 = v20;
  sub_1000636C8();
  __chkstk_darwin(v21);
  sub_100011F60();
  uint64_t v106 = v22;
  sub_1000636C8();
  __chkstk_darwin(v23);
  sub_100011F60();
  uint64_t v119 = v24;
  sub_1000636C8();
  __chkstk_darwin(v25);
  sub_100011F60();
  uint64_t v113 = v26;
  sub_1000636C8();
  __chkstk_darwin(v27);
  sub_100011F60();
  uint64_t v122 = v28;
  sub_1000636C8();
  __chkstk_darwin(v29);
  sub_100011F60();
  uint64_t v121 = v30;
  sub_1000636C8();
  __chkstk_darwin(v31);
  sub_100011F60();
  uint64_t v120 = v32;
  sub_1000636C8();
  __chkstk_darwin(v33);
  sub_100011F60();
  uint64_t v107 = v34;
  sub_1000636C8();
  __chkstk_darwin(v35);
  sub_100011F60();
  uint64_t v109 = v36;
  sub_1000636C8();
  uint64_t v38 = __chkstk_darwin(v37);
  char v40 = (char *)&v104 - v39;
  __chkstk_darwin(v38);
  sub_100011F60();
  uint64_t v118 = v41;
  sub_1000636C8();
  __chkstk_darwin(v42);
  v117 = (char *)&v104 - v43;
  sub_10012C250();
  sub_10000DB98();
  uint64_t v129 = v45;
  uint64_t v130 = v44;
  __chkstk_darwin(v44);
  sub_10000DCB4();
  uint64_t v127 = v46;
  sub_1000636C8();
  __chkstk_darwin(v47);
  v49 = (char *)&v104 - v48;
  uint64_t v50 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_10000B3FC();
  __chkstk_darwin(v51);
  sub_10000DBCC();
  uint64_t v126 = v52;
  type metadata accessor for WeatherDataViewModel();
  sub_10000B3FC();
  uint64_t v54 = __chkstk_darwin(v53);
  uint64_t v56 = (char *)&v104 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v58 = (char *)&v104 - v57;
  type metadata accessor for ForecastEntry.Model(0);
  sub_10000B3FC();
  __chkstk_darwin(v59);
  uint64_t v61 = (char *)&v104 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for ForecastEntry(0);
  sub_100012588(v1 + *(int *)(v62 + 28), (uint64_t)v61, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100047B60((uint64_t)v61, (uint64_t)v58, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    sub_100012588((uint64_t)v58, (uint64_t)v56, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v64 = (uint64_t)v58;
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        sub_100047BC0((uint64_t)v58, (void (*)(void))type metadata accessor for WeatherDataViewModel);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v132, 1, 2, v131);
        return sub_100047BC0((uint64_t)v56, (void (*)(void))type metadata accessor for WeatherDataViewModel);
      }
      sub_100047B60((uint64_t)v56, v128, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v65 = sub_10012AB60();
      sub_10000D7A4(v65, (uint64_t)qword_100181C40);
      v66 = sub_10012AB40();
      os_log_type_t v67 = sub_10012CD60();
      BOOL v68 = os_log_type_enabled(v66, v67);
      v69 = v123;
      uint64_t v70 = v116;
      uint64_t v71 = v112;
      uint64_t v72 = v111;
      if (v68)
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_10000DBE0((void *)&_mh_execute_header, v73, v74, "Making Temperature complication view model entry from interpolated instant weather");
        swift_slowDealloc();
      }
      v105 = (char *)v64;

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 16))(v127, v128 + *(int *)(v110 + 24), v130);
      sub_10012C190();
      sub_10012C1C0();
      v75 = v69[2];
      uint64_t v76 = v106;
      sub_1000AE4AC();
      v75();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v72, 1, v15) == 1)
      {
        v77 = v69[4];
        sub_1000AE4C0();
        v77();
        sub_1000AE44C(v72);
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))v69[1])(v76, v15);
        v77 = v69[4];
        sub_1000AE4FC();
        v77();
      }
      sub_10012C1B0();
      sub_1000AE4AC();
      v75();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v70, 1, v15) == 1)
      {
        sub_1000AE4C0();
        v77();
        sub_1000AE44C(v70);
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))v69[1])(v71, v15);
        sub_1000AE4FC();
        v77();
      }
      sub_1000AE4AC();
      v75();
      sub_1000AE4AC();
      v75();
      uint64_t v94 = sub_1000AE4D0();
      ((void (*)(uint64_t))v75)(v94);
      uint64_t v95 = v124;
      sub_10012C620();
      v96 = v69[1];
      sub_1000AE4EC();
      v96();
      sub_1000AE4EC();
      v96();
      sub_1000AE4EC();
      v96();
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v127, v130);
      v97 = (void (*)(void))type metadata accessor for InstantWeatherViewModel;
      uint64_t v98 = v128;
    }
    else
    {
      sub_100047B60((uint64_t)v56, v126, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v81 = sub_10012AB60();
      sub_10000D7A4(v81, (uint64_t)qword_100181C40);
      v82 = sub_10012AB40();
      os_log_type_t v83 = sub_10012CD60();
      BOOL v84 = os_log_type_enabled(v82, v83);
      uint64_t v85 = (uint64_t)v108;
      if (v84)
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_10000DBE0((void *)&_mh_execute_header, v86, v87, "Making Temperature complication view model entry from aggregate weather");
        swift_slowDealloc();
      }
      v105 = v58;

      (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v49, v126 + *(int *)(v50 + 24), v130);
      sub_10012C190();
      sub_10012C1C0();
      v88 = v123;
      v89 = v123[2];
      sub_1000AE4AC();
      v89();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v85, 1, v15) == 1)
      {
        v90 = v88[4];
        sub_1000AE4C0();
        v90();
        sub_1000AE44C(v85);
      }
      else
      {
        ((void (*)(char *, uint64_t))v88[1])(v40, v15);
        v90 = v88[4];
        sub_1000AE4FC();
        v90();
      }
      uint64_t v92 = v114;
      sub_10012C1B0();
      uint64_t v93 = v107;
      sub_1000AE4AC();
      v89();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v92, 1, v15) == 1)
      {
        sub_1000AE4C0();
        v90();
        sub_1000AE44C(v92);
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))v88[1])(v93, v15);
        sub_1000AE4FC();
        v90();
      }
      sub_1000AE4AC();
      v89();
      sub_1000AE4AC();
      v89();
      uint64_t v99 = sub_1000AE4D0();
      ((void (*)(uint64_t))v89)(v99);
      uint64_t v95 = v124;
      sub_10012C620();
      v100 = v88[1];
      sub_100099A68();
      v100();
      sub_100099A68();
      v100();
      sub_100099A68();
      v100();
      (*(void (**)(char *, uint64_t))(v129 + 8))(v49, v130);
      v97 = (void (*)(void))type metadata accessor for AggregateWeatherViewModel;
      uint64_t v98 = v126;
    }
    sub_100047BC0(v98, v97);
    sub_100047BC0((uint64_t)v105, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v101 = v132;
    uint64_t v102 = v95;
    uint64_t v103 = v131;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 32))(v132, v102, v131);
    uint64_t v78 = v101;
    uint64_t v79 = 0;
    uint64_t v80 = v103;
  }
  else
  {
    uint64_t v78 = v132;
    if (*v61) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = 2;
    }
    uint64_t v80 = v131;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v78, v79, 2, v80);
}

uint64_t sub_1000AE44C(uint64_t a1)
{
  uint64_t v2 = sub_1000053D8(&qword_10016B098);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AE4D0()
{
  return *(void *)(v0 - 176);
}

uint64_t sub_1000AE508()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100129B10();
  sub_10000DB98();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1, v2);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v2);
  uint64_t v9 = 0;
  if (v8 != enum case for Precipitation.none(_:))
  {
    if (v8 == enum case for Precipitation.hail(_:))
    {
      return 0x61682E64756F6C63;
    }
    else if (v8 == enum case for Precipitation.mixed(_:))
    {
      return 0x616C6C6572626D75;
    }
    else
    {
      uint64_t v9 = 0x61722E64756F6C63;
      if (v8 != enum case for Precipitation.rain(_:))
      {
        if (v8 == enum case for Precipitation.sleet(_:))
        {
          return 0xD000000000000010;
        }
        else if (v8 == enum case for Precipitation.snow(_:))
        {
          return 0x6B616C66776F6E73;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
        }
      }
    }
  }
  return v9;
}

uint64_t sub_1000AE6FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100129B10();
  sub_10000DB98();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1, v2);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v2);
  uint64_t v9 = 0;
  if (v8 != enum case for Precipitation.none(_:))
  {
    if (v8 == enum case for Precipitation.hail(_:))
    {
      if (qword_10016AEE8 == -1) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    if (v8 == enum case for Precipitation.mixed(_:)) {
      return 0;
    }
    if (v8 == enum case for Precipitation.rain(_:))
    {
      if (qword_10016AEE8 == -1) {
        goto LABEL_15;
      }
    }
    else if (v8 == enum case for Precipitation.sleet(_:))
    {
      if (qword_10016AEE8 == -1) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v8 != enum case for Precipitation.snow(_:))
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
        return 0;
      }
      if (qword_10016AEE8 == -1)
      {
LABEL_15:
        id v10 = (id)qword_100181E30;
        sub_1000AC04C();
        sub_1000AEA1C();
        uint64_t v9 = sub_100129180(v14, v15, v13, v16, v12);

        return v9;
      }
    }
LABEL_18:
    swift_once();
    goto LABEL_15;
  }
  return v9;
}

uint64_t static WeatherDataViewModel.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  sub_10012BE90();
  sub_10000DB98();
  uint64_t v39 = v5;
  uint64_t v40 = v4;
  __chkstk_darwin(v4);
  sub_10000DC50();
  int v8 = (char *)(v7 - v6);
  uint64_t v38 = type metadata accessor for InstantWeatherViewModel();
  sub_10000B3FC();
  __chkstk_darwin(v9);
  sub_10000DC50();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v13 - 8);
  sub_10002A5F0();
  type metadata accessor for WeatherDataViewModel();
  sub_10000B3FC();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v38 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = sub_1000053D8(&qword_10016EFC0);
  __chkstk_darwin(v23 - 8);
  sub_10000DC50();
  uint64_t v26 = v25 - v24;
  uint64_t v28 = v25 - v24 + *(int *)(v27 + 56);
  sub_1000AEF14(a1, v25 - v24);
  sub_1000AEF14(v41, v28);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1000AEF14(v26, (uint64_t)v22);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t v31 = (void (*)(void))type metadata accessor for AggregateWeatherViewModel;
      uint64_t v32 = (uint64_t)v22;
LABEL_13:
      sub_1000AEFD8(v32, v31);
LABEL_15:
      sub_1000AEF78(v26);
LABEL_17:
      char v30 = 0;
      return v30 & 1;
    }
    sub_1000B0248(v28, v2, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    static AggregateWeatherViewModel.__derived_struct_equals(_:_:)();
    char v30 = v36;
    sub_1000AEFD8(v2, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    sub_1000AEFD8((uint64_t)v22, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
LABEL_19:
    sub_1000AEFD8(v26, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    return v30 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1000AEF14(v26, (uint64_t)v17);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
      goto LABEL_15;
    }
    uint64_t v34 = v39;
    uint64_t v33 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v8, v28, v40);
    char v30 = sub_10012BE80();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v34 + 8);
    v35(v8, v33);
    v35(v17, v33);
    goto LABEL_19;
  }
  sub_1000AEF14(v26, (uint64_t)v20);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v31 = (void (*)(void))type metadata accessor for InstantWeatherViewModel;
    uint64_t v32 = (uint64_t)v20;
    goto LABEL_13;
  }
  sub_1000B0248(v28, v12, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
  if ((sub_100129310() & 1) == 0 || (sub_10012A640() & 1) == 0 || (sub_10012C1E0() & 1) == 0)
  {
    sub_1000AEFD8(v12, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
    sub_1000AEFD8((uint64_t)v20, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
    sub_1000AEFD8(v26, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    goto LABEL_17;
  }
  sub_1000AEFD8(v12, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
  sub_1000AEFD8((uint64_t)v20, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
  sub_1000AEFD8(v26, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  char v30 = 1;
  return v30 & 1;
}

uint64_t type metadata accessor for WeatherDataViewModel()
{
  uint64_t result = qword_10016F0C8;
  if (!qword_10016F0C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AEF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WeatherDataViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AEF78(uint64_t a1)
{
  uint64_t v2 = sub_1000053D8(&qword_10016EFC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AEFD8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3FC();
  sub_10000B424();
  v3();
  return a1;
}

uint64_t sub_1000AF02C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7461676572676761 && a2 == 0xE900000000000065;
  if (v2 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x746E6174736E69 && a2 == 0xE700000000000000;
    if (v6 || (sub_10012D1F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x53657369726E7573 && a2 == 0xED00007465736E75)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_10012D1F0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1000AF1AC(char a1)
{
  if (!a1) {
    return 0x7461676572676761;
  }
  if (a1 == 1) {
    return 0x746E6174736E69;
  }
  return 0x53657369726E7573;
}

uint64_t sub_1000AF214(uint64_t a1)
{
  unint64_t v2 = sub_1000AFAA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AF250(uint64_t a1)
{
  unint64_t v2 = sub_1000AFAA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AF28C()
{
  return sub_1000AF1AC(*v0);
}

uint64_t sub_1000AF294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AF02C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000AF2BC(uint64_t a1)
{
  unint64_t v2 = sub_1000AF9C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AF2F8(uint64_t a1)
{
  unint64_t v2 = sub_1000AF9C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AF334(uint64_t a1)
{
  unint64_t v2 = sub_1000AFA58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AF370(uint64_t a1)
{
  unint64_t v2 = sub_1000AFA58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AF3AC(uint64_t a1)
{
  unint64_t v2 = sub_1000AFA0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AF3E8(uint64_t a1)
{
  unint64_t v2 = sub_1000AFA0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WeatherDataViewModel.encode(to:)(void *a1)
{
  sub_1000053D8(&qword_10016EFC8);
  sub_10000DB98();
  __chkstk_darwin(v4);
  sub_1000B2F2C(v5, v28);
  sub_10012BE90();
  sub_10000DB98();
  uint64_t v32 = v7;
  uint64_t v33 = v6;
  __chkstk_darwin(v6);
  sub_1000B2F10(v8, v29);
  sub_1000053D8(&qword_10016EFD0);
  sub_10000DB98();
  __chkstk_darwin(v9);
  sub_10000DBCC();
  type metadata accessor for InstantWeatherViewModel();
  sub_10000B3FC();
  __chkstk_darwin(v10);
  sub_10000DBCC();
  uint64_t v30 = v11;
  sub_1000053D8(&qword_10016EFD8);
  sub_10000DB98();
  __chkstk_darwin(v12);
  sub_10000DBCC();
  type metadata accessor for AggregateWeatherViewModel(0);
  sub_10000B3FC();
  __chkstk_darwin(v13);
  sub_1000B2F48();
  sub_10000B3FC();
  __chkstk_darwin(v14);
  sub_10000DC50();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_1000053D8(&qword_10016EFE0);
  sub_10000DB98();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_10002A5F0();
  sub_10000D890(a1, a1[3]);
  sub_1000AF9C0();
  sub_10012D2C0();
  sub_1000AEF14(v34, v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000B0248(v17, v30, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
      sub_1000AFA58();
      sub_10012D150();
      sub_1000B02A8(&qword_10016F008, (void (*)(uint64_t))type metadata accessor for InstantWeatherViewModel);
      sub_10012D1B0();
      sub_10000B424();
      v23();
      sub_1000AEFD8(v30, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v31, v17, v33);
      sub_1000AFA0C();
      sub_10012D150();
      sub_1000B02A8(&qword_10016EFF8, (void (*)(uint64_t))&type metadata accessor for SunriseSunsetViewModel);
      sub_10012D1B0();
      uint64_t v26 = sub_1000B2ED0();
      v27(v26);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v1, v18);
  }
  else
  {
    sub_1000B0248(v17, v2, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    sub_1000AFAA4();
    sub_10012D150();
    sub_1000B02A8(&qword_10016F018, (void (*)(uint64_t))type metadata accessor for AggregateWeatherViewModel);
    sub_10012D1B0();
    sub_10000B424();
    v25();
    sub_1000AEFD8(v2, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v1, v18);
  }
}

unint64_t sub_1000AF9C0()
{
  unint64_t result = qword_10016EFE8;
  if (!qword_10016EFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EFE8);
  }
  return result;
}

unint64_t sub_1000AFA0C()
{
  unint64_t result = qword_10016EFF0;
  if (!qword_10016EFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016EFF0);
  }
  return result;
}

unint64_t sub_1000AFA58()
{
  unint64_t result = qword_10016F000;
  if (!qword_10016F000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F000);
  }
  return result;
}

unint64_t sub_1000AFAA4()
{
  unint64_t result = qword_10016F010;
  if (!qword_10016F010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F010);
  }
  return result;
}

uint64_t WeatherDataViewModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v72 = sub_1000053D8(&qword_10016F020);
  sub_10000DB98();
  uint64_t v69 = v4;
  __chkstk_darwin(v5);
  sub_10000DBCC();
  uint64_t v76 = v6;
  uint64_t v71 = sub_1000053D8(&qword_10016F028);
  sub_10000DB98();
  uint64_t v68 = v7;
  __chkstk_darwin(v8);
  sub_1000B2F2C(v9, v61);
  uint64_t v70 = sub_1000053D8(&qword_10016F030);
  sub_10000DB98();
  uint64_t v67 = v10;
  __chkstk_darwin(v11);
  sub_1000B2F10(v12, v61);
  sub_1000053D8(&qword_10016F038);
  sub_10000DB98();
  uint64_t v74 = v14;
  uint64_t v75 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = sub_1000B2F48();
  sub_10000B3FC();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v61 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v61 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v61 - v26;
  uint64_t v28 = a1[3];
  v77 = a1;
  sub_10000D890(a1, v28);
  sub_1000AF9C0();
  uint64_t v29 = v78;
  sub_10012D2B0();
  if (!v29)
  {
    uint64_t v62 = v22;
    v63 = v27;
    uint64_t v64 = v25;
    uint64_t v65 = v19;
    uint64_t v31 = v75;
    uint64_t v66 = v15;
    uint64_t v78 = v2;
    uint64_t v32 = sub_10012D140();
    uint64_t v33 = *(void *)(v32 + 16);
    if (v33)
    {
      uint64_t v34 = v31;
      int v35 = *(unsigned __int8 *)(v32 + 32);
      sub_1000B2E54(1, v33, v32, v32 + 32, 0, (2 * v33) | 1);
      uint64_t v37 = v36;
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      if (v37 == v39 >> 1)
      {
        if (v35)
        {
          if (v35 == 1)
          {
            char v80 = 1;
            sub_1000AFA58();
            sub_1000B2EE8();
            type metadata accessor for InstantWeatherViewModel();
            sub_1000B02A8(&qword_10016F048, (void (*)(uint64_t))type metadata accessor for InstantWeatherViewModel);
            uint64_t v40 = (uint64_t)v62;
            sub_10012D130();
            uint64_t v30 = (uint64_t)v77;
            sub_10000B424();
            v48();
            swift_unknownObjectRelease();
            uint64_t v49 = sub_1000B2F88();
            v50(v49);
            swift_storeEnumTagMultiPayload();
            uint64_t v51 = v40;
LABEL_15:
            uint64_t v60 = (uint64_t)v63;
            sub_1000B0248(v51, (uint64_t)v63, (void (*)(void))type metadata accessor for WeatherDataViewModel);
            sub_1000B0248(v60, v73, (void (*)(void))type metadata accessor for WeatherDataViewModel);
            return sub_10000DB48(v30);
          }
          char v81 = 2;
          sub_1000AFA0C();
          sub_1000B2EE8();
          sub_10012BE90();
          sub_1000B02A8(&qword_10016F040, (void (*)(uint64_t))&type metadata accessor for SunriseSunsetViewModel);
          sub_1000B2FA0();
          uint64_t v30 = (uint64_t)v77;
          uint64_t v56 = sub_1000B2ED0();
          v57(v56);
          swift_unknownObjectRelease();
          uint64_t v58 = sub_1000B2F70();
          v59(v58);
          uint64_t v55 = (uint64_t)v65;
        }
        else
        {
          char v79 = 0;
          sub_1000AFAA4();
          sub_1000B2EE8();
          type metadata accessor for AggregateWeatherViewModel(0);
          sub_1000B02A8(&qword_10016F050, (void (*)(uint64_t))type metadata accessor for AggregateWeatherViewModel);
          sub_1000B2FA0();
          uint64_t v30 = (uint64_t)v77;
          uint64_t v52 = sub_1000B2ED0();
          v53(v52);
          swift_unknownObjectRelease();
          sub_10000B424();
          v54();
          uint64_t v55 = (uint64_t)v64;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v51 = v55;
        goto LABEL_15;
      }
      uint64_t v30 = (uint64_t)v77;
      uint64_t v41 = v74;
      uint64_t v31 = v34;
    }
    else
    {
      uint64_t v30 = (uint64_t)v77;
      uint64_t v41 = v74;
    }
    uint64_t v42 = v66;
    uint64_t v43 = sub_10012D010();
    swift_allocError();
    uint64_t v45 = v44;
    sub_1000053D8(&qword_10016B730);
    *uint64_t v45 = v42;
    uint64_t v46 = v78;
    sub_10012D0D0();
    sub_10012D000();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v43 - 8) + 104))(v45, enum case for DecodingError.typeMismatch(_:), v43);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v46, v31);
    return sub_10000DB48(v30);
  }
  uint64_t v30 = (uint64_t)v77;
  return sub_10000DB48(v30);
}

uint64_t sub_1000B0214@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return WeatherDataViewModel.init(from:)(a1, a2);
}

uint64_t sub_1000B022C(void *a1)
{
  return WeatherDataViewModel.encode(to:)(a1);
}

uint64_t sub_1000B0248(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000B02A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WeatherDataViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v18 = sub_10012BE90();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_100129330();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = type metadata accessor for InstantWeatherViewModel();
      uint64_t v9 = *(int *)(v8 + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_10012A6B0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      uint64_t v13 = *(int *)(v8 + 24);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = sub_10012C250();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      uint64_t v19 = sub_100129330();
      uint64_t v66 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v19 - 8) + 16);
      v66(a1, a2, v19);
      uint64_t v20 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
      uint64_t v21 = v20[5];
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = sub_10012A6B0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
      uint64_t v25 = v20[6];
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = sub_10012C250();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      *(uint64_t *)((char *)a1 + v20[7]) = *(uint64_t *)((char *)a2 + v20[7]);
      *(uint64_t *)((char *)a1 + v20[8]) = *(uint64_t *)((char *)a2 + v20[8]);
      uint64_t v29 = v20[9];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      uint64_t v32 = (int *)type metadata accessor for AirQualityViewModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, (uint64_t)v32))
      {
        uint64_t v33 = sub_1000053D8(&qword_10016B428);
        memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        v66((uint64_t *)v30, (uint64_t *)v31, v19);
        uint64_t v34 = v32[5];
        int v35 = &v30[v34];
        uint64_t v36 = &v31[v34];
        uint64_t v37 = sub_100129300();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
        *(void *)&v30[v32[6]] = *(void *)&v31[v32[6]];
        uint64_t v38 = v32[7];
        unint64_t v39 = &v30[v38];
        uint64_t v40 = &v31[v38];
        uint64_t v41 = sub_100129B70();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
        uint64_t v42 = v32[8];
        uint64_t v43 = &v30[v42];
        uint64_t v44 = &v31[v42];
        uint64_t v45 = sub_100129C50();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, (uint64_t)v32);
      }
      uint64_t v46 = v20[10];
      uint64_t v47 = (char *)a1 + v46;
      uint64_t v48 = (char *)a2 + v46;
      uint64_t v49 = sub_10012C6B0();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v48, 1, v49))
      {
        uint64_t v50 = sub_1000053D8(&qword_10016B430);
        memcpy(v47, v48, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v47, 0, 1, v49);
      }
      *(uint64_t *)((char *)a1 + v20[11]) = *(uint64_t *)((char *)a2 + v20[11]);
      uint64_t v51 = v20[12];
      uint64_t v52 = (char *)a1 + v51;
      uint64_t v53 = (char *)a2 + v51;
      *(void *)uint64_t v52 = *(void *)v53;
      *((_WORD *)v52 + 4) = *((_WORD *)v53 + 4);
      uint64_t v54 = v20[13];
      uint64_t v55 = (char *)a1 + v54;
      uint64_t v56 = (char *)a2 + v54;
      uint64_t v57 = sub_100129220();
      swift_bridgeObjectRetain();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v56, 1, v57))
      {
        uint64_t v58 = sub_1000053D8(&qword_10016B420);
        memcpy(v55, v56, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v55, 0, 1, v57);
      }
      uint64_t v59 = v20[14];
      uint64_t v60 = (char *)a1 + v59;
      uint64_t v61 = (char *)a2 + v59;
      uint64_t v62 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v61, 1, v62))
      {
        uint64_t v63 = sub_1000053D8(&qword_10016B438);
        memcpy(v60, v61, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v64 = sub_100129300();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v60, v61, v64);
        swift_storeEnumTagMultiPayload();
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 0, 1, v62);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for WeatherDataViewModel(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      uint64_t v23 = sub_10012BE90();
LABEL_15:
      uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);
      return v28(a1, v23);
    case 1:
      uint64_t v24 = sub_100129330();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a1, v24);
      uint64_t v25 = type metadata accessor for InstantWeatherViewModel();
      uint64_t v26 = a1 + *(int *)(v25 + 20);
      uint64_t v27 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
      a1 += *(int *)(v25 + 24);
      uint64_t v23 = sub_10012C250();
      goto LABEL_15;
    case 0:
      uint64_t v3 = sub_100129330();
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      int v5 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
      uint64_t v6 = a1 + v5[5];
      uint64_t v7 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      uint64_t v8 = a1 + v5[6];
      uint64_t v9 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = a1 + v5[9];
      uint64_t v11 = (int *)type metadata accessor for AirQualityViewModel();
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v10, 1, (uint64_t)v11))
      {
        v4(v10, v3);
        uint64_t v12 = v10 + v11[5];
        uint64_t v13 = sub_100129300();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
        uint64_t v14 = v10 + v11[7];
        uint64_t v15 = sub_100129B70();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
        uint64_t v16 = v10 + v11[8];
        uint64_t v17 = sub_100129C50();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
      }
      uint64_t v18 = a1 + v5[10];
      uint64_t v19 = sub_10012C6B0();
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = a1 + v5[13];
      uint64_t v21 = sub_100129220();
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v20, 1, v21)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
      }
      a1 += v5[14];
      uint64_t v22 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      uint64_t result = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v22);
      if (!result)
      {
        uint64_t v23 = sub_100129300();
        goto LABEL_15;
      }
      break;
  }
  return result;
}

uint64_t initializeWithCopy for WeatherDataViewModel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v15 = sub_10012BE90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = sub_100129330();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = type metadata accessor for InstantWeatherViewModel();
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    uint64_t v10 = sub_10012A6B0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(v6 + 24);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = sub_10012C250();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    uint64_t v16 = sub_100129330();
    uint64_t v17 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    uint64_t v64 = *v17;
    (*v17)(a1, a2, v16);
    uint64_t v18 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
    uint64_t v19 = v18[5];
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = sub_10012A6B0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = v18[6];
    uint64_t v24 = a1 + v23;
    uint64_t v25 = a2 + v23;
    uint64_t v26 = sub_10012C250();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    *(void *)(a1 + v18[7]) = *(void *)(a2 + v18[7]);
    *(void *)(a1 + v18[8]) = *(void *)(a2 + v18[8]);
    uint64_t v27 = v18[9];
    uint64_t v28 = (char *)(a1 + v27);
    uint64_t v29 = (char *)(a2 + v27);
    uint64_t v30 = (int *)type metadata accessor for AirQualityViewModel();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, (uint64_t)v30))
    {
      uint64_t v31 = sub_1000053D8(&qword_10016B428);
      memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v64((uint64_t)v28, (uint64_t)v29, v16);
      uint64_t v32 = v30[5];
      uint64_t v33 = &v28[v32];
      uint64_t v34 = &v29[v32];
      uint64_t v35 = sub_100129300();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
      *(void *)&v28[v30[6]] = *(void *)&v29[v30[6]];
      uint64_t v36 = v30[7];
      uint64_t v37 = &v28[v36];
      uint64_t v38 = &v29[v36];
      uint64_t v39 = sub_100129B70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
      uint64_t v40 = v30[8];
      uint64_t v41 = &v28[v40];
      uint64_t v42 = &v29[v40];
      uint64_t v43 = sub_100129C50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, (uint64_t)v30);
    }
    uint64_t v44 = v18[10];
    uint64_t v45 = (void *)(a1 + v44);
    uint64_t v46 = (const void *)(a2 + v44);
    uint64_t v47 = sub_10012C6B0();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v47))
    {
      uint64_t v48 = sub_1000053D8(&qword_10016B430);
      memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v47);
    }
    *(void *)(a1 + v18[11]) = *(void *)(a2 + v18[11]);
    uint64_t v49 = v18[12];
    uint64_t v50 = a1 + v49;
    uint64_t v51 = a2 + v49;
    *(void *)uint64_t v50 = *(void *)v51;
    *(_WORD *)(v50 + 8) = *(_WORD *)(v51 + 8);
    uint64_t v52 = v18[13];
    uint64_t v53 = (void *)(a1 + v52);
    uint64_t v54 = (const void *)(a2 + v52);
    uint64_t v55 = sub_100129220();
    swift_bridgeObjectRetain();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v54, 1, v55))
    {
      uint64_t v56 = sub_1000053D8(&qword_10016B420);
      memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v53, 0, 1, v55);
    }
    uint64_t v57 = v18[14];
    uint64_t v58 = (void *)(a1 + v57);
    uint64_t v59 = (const void *)(a2 + v57);
    uint64_t v60 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v59, 1, v60))
    {
      uint64_t v61 = sub_1000053D8(&qword_10016B438);
      memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      uint64_t v62 = sub_100129300();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v62 - 8) + 16))(v58, v59, v62);
      swift_storeEnumTagMultiPayload();
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v60);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for WeatherDataViewModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000AEFD8(a1, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = sub_10012BE90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = sub_100129330();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = type metadata accessor for InstantWeatherViewModel();
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      uint64_t v10 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      uint64_t v11 = *(int *)(v6 + 24);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      uint64_t v16 = sub_100129330();
      uint64_t v17 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
      uint64_t v65 = *v17;
      (*v17)(a1, a2, v16);
      uint64_t v18 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
      uint64_t v19 = v18[5];
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      uint64_t v22 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
      uint64_t v23 = v18[6];
      uint64_t v24 = a1 + v23;
      uint64_t v25 = a2 + v23;
      uint64_t v26 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
      *(void *)(a1 + v18[7]) = *(void *)(a2 + v18[7]);
      *(void *)(a1 + v18[8]) = *(void *)(a2 + v18[8]);
      uint64_t v27 = v18[9];
      uint64_t v28 = (char *)(a1 + v27);
      uint64_t v29 = (char *)(a2 + v27);
      uint64_t v30 = (int *)type metadata accessor for AirQualityViewModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, (uint64_t)v30))
      {
        uint64_t v31 = sub_1000053D8(&qword_10016B428);
        memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        v65((uint64_t)v28, (uint64_t)v29, v16);
        uint64_t v32 = v30[5];
        uint64_t v33 = &v28[v32];
        uint64_t v34 = &v29[v32];
        uint64_t v35 = sub_100129300();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
        *(void *)&v28[v30[6]] = *(void *)&v29[v30[6]];
        uint64_t v36 = v30[7];
        uint64_t v37 = &v28[v36];
        uint64_t v38 = &v29[v36];
        uint64_t v39 = sub_100129B70();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
        uint64_t v40 = v30[8];
        uint64_t v41 = &v28[v40];
        uint64_t v42 = &v29[v40];
        uint64_t v43 = sub_100129C50();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, (uint64_t)v30);
      }
      uint64_t v44 = v18[10];
      uint64_t v45 = (void *)(a1 + v44);
      uint64_t v46 = (const void *)(a2 + v44);
      uint64_t v47 = sub_10012C6B0();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v47))
      {
        uint64_t v48 = sub_1000053D8(&qword_10016B430);
        memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v47);
      }
      *(void *)(a1 + v18[11]) = *(void *)(a2 + v18[11]);
      uint64_t v49 = v18[12];
      uint64_t v50 = a1 + v49;
      uint64_t v51 = (uint64_t *)(a2 + v49);
      uint64_t v52 = *v51;
      *(_WORD *)(v50 + 8) = *((_WORD *)v51 + 4);
      *(void *)uint64_t v50 = v52;
      uint64_t v53 = v18[13];
      uint64_t v54 = (void *)(a1 + v53);
      uint64_t v55 = (const void *)(a2 + v53);
      uint64_t v56 = sub_100129220();
      swift_bridgeObjectRetain();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v55, 1, v56))
      {
        uint64_t v57 = sub_1000053D8(&qword_10016B420);
        memcpy(v54, v55, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v54, 0, 1, v56);
      }
      uint64_t v58 = v18[14];
      uint64_t v59 = (void *)(a1 + v58);
      uint64_t v60 = (const void *)(a2 + v58);
      uint64_t v61 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v60, 1, v61))
      {
        uint64_t v62 = sub_1000053D8(&qword_10016B438);
        memcpy(v59, v60, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v63 = sub_100129300();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v63 - 8) + 16))(v59, v60, v63);
        swift_storeEnumTagMultiPayload();
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v59, 0, 1, v61);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for WeatherDataViewModel(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v15 = sub_10012BE90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = sub_100129330();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    uint64_t v6 = type metadata accessor for InstantWeatherViewModel();
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    uint64_t v10 = sub_10012A6B0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    uint64_t v11 = *(int *)(v6 + 24);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = sub_10012C250();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  }
  else
  {
    uint64_t v16 = sub_100129330();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
    v17(a1, a2, v16);
    uint64_t v18 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
    uint64_t v19 = v18[5];
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = sub_10012A6B0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
    uint64_t v23 = v18[6];
    uint64_t v24 = a1 + v23;
    uint64_t v25 = a2 + v23;
    uint64_t v26 = sub_10012C250();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
    *(void *)(a1 + v18[7]) = *(void *)(a2 + v18[7]);
    *(void *)(a1 + v18[8]) = *(void *)(a2 + v18[8]);
    uint64_t v27 = v18[9];
    uint64_t v28 = (char *)(a1 + v27);
    uint64_t v29 = (char *)(a2 + v27);
    uint64_t v30 = (int *)type metadata accessor for AirQualityViewModel();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, (uint64_t)v30))
    {
      uint64_t v31 = sub_1000053D8(&qword_10016B428);
      memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v17((uint64_t)v28, (uint64_t)v29, v16);
      uint64_t v32 = v30[5];
      uint64_t v33 = &v28[v32];
      uint64_t v34 = &v29[v32];
      uint64_t v35 = sub_100129300();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
      *(void *)&v28[v30[6]] = *(void *)&v29[v30[6]];
      uint64_t v36 = v30[7];
      uint64_t v37 = &v28[v36];
      uint64_t v38 = &v29[v36];
      uint64_t v39 = sub_100129B70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
      uint64_t v40 = v30[8];
      uint64_t v41 = &v28[v40];
      uint64_t v42 = &v29[v40];
      uint64_t v43 = sub_100129C50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, (uint64_t)v30);
    }
    uint64_t v44 = v18[10];
    uint64_t v45 = (void *)(a1 + v44);
    uint64_t v46 = (const void *)(a2 + v44);
    uint64_t v47 = sub_10012C6B0();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v47))
    {
      uint64_t v48 = sub_1000053D8(&qword_10016B430);
      memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v47);
    }
    *(void *)(a1 + v18[11]) = *(void *)(a2 + v18[11]);
    uint64_t v49 = v18[12];
    uint64_t v50 = a1 + v49;
    uint64_t v51 = a2 + v49;
    *(void *)uint64_t v50 = *(void *)v51;
    *(_WORD *)(v50 + 8) = *(_WORD *)(v51 + 8);
    uint64_t v52 = v18[13];
    uint64_t v53 = (void *)(a1 + v52);
    uint64_t v54 = (const void *)(a2 + v52);
    uint64_t v55 = sub_100129220();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v54, 1, v55))
    {
      uint64_t v56 = sub_1000053D8(&qword_10016B420);
      memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v55 - 8) + 32))(v53, v54, v55);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v53, 0, 1, v55);
    }
    uint64_t v57 = v18[14];
    uint64_t v58 = (void *)(a1 + v57);
    uint64_t v59 = (const void *)(a2 + v57);
    uint64_t v60 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v59, 1, v60))
    {
      uint64_t v61 = sub_1000053D8(&qword_10016B438);
      memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      uint64_t v62 = sub_100129300();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v62 - 8) + 32))(v58, v59, v62);
      swift_storeEnumTagMultiPayload();
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v60);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for WeatherDataViewModel(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000AEFD8(a1, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = sub_10012BE90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = sub_100129330();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      uint64_t v6 = type metadata accessor for InstantWeatherViewModel();
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      uint64_t v10 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      uint64_t v11 = *(int *)(v6 + 24);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    }
    else
    {
      uint64_t v16 = sub_100129330();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
      v17(a1, a2, v16);
      uint64_t v18 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
      uint64_t v19 = v18[5];
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      uint64_t v22 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
      uint64_t v23 = v18[6];
      uint64_t v24 = a1 + v23;
      uint64_t v25 = a2 + v23;
      uint64_t v26 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
      *(void *)(a1 + v18[7]) = *(void *)(a2 + v18[7]);
      *(void *)(a1 + v18[8]) = *(void *)(a2 + v18[8]);
      uint64_t v27 = v18[9];
      uint64_t v28 = (char *)(a1 + v27);
      uint64_t v29 = (char *)(a2 + v27);
      uint64_t v30 = (int *)type metadata accessor for AirQualityViewModel();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, (uint64_t)v30))
      {
        uint64_t v31 = sub_1000053D8(&qword_10016B428);
        memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        v17((uint64_t)v28, (uint64_t)v29, v16);
        uint64_t v32 = v30[5];
        uint64_t v33 = &v28[v32];
        uint64_t v34 = &v29[v32];
        uint64_t v35 = sub_100129300();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
        *(void *)&v28[v30[6]] = *(void *)&v29[v30[6]];
        uint64_t v36 = v30[7];
        uint64_t v37 = &v28[v36];
        uint64_t v38 = &v29[v36];
        uint64_t v39 = sub_100129B70();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
        uint64_t v40 = v30[8];
        uint64_t v41 = &v28[v40];
        uint64_t v42 = &v29[v40];
        uint64_t v43 = sub_100129C50();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, (uint64_t)v30);
      }
      uint64_t v44 = v18[10];
      uint64_t v45 = (void *)(a1 + v44);
      uint64_t v46 = (const void *)(a2 + v44);
      uint64_t v47 = sub_10012C6B0();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v47))
      {
        uint64_t v48 = sub_1000053D8(&qword_10016B430);
        memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v47);
      }
      *(void *)(a1 + v18[11]) = *(void *)(a2 + v18[11]);
      uint64_t v49 = v18[12];
      uint64_t v50 = a1 + v49;
      uint64_t v51 = a2 + v49;
      *(void *)uint64_t v50 = *(void *)v51;
      *(_WORD *)(v50 + 8) = *(_WORD *)(v51 + 8);
      uint64_t v52 = v18[13];
      uint64_t v53 = (void *)(a1 + v52);
      uint64_t v54 = (const void *)(a2 + v52);
      uint64_t v55 = sub_100129220();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v54, 1, v55))
      {
        uint64_t v56 = sub_1000053D8(&qword_10016B420);
        memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v55 - 8) + 32))(v53, v54, v55);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v53, 0, 1, v55);
      }
      uint64_t v57 = v18[14];
      uint64_t v58 = (void *)(a1 + v57);
      uint64_t v59 = (const void *)(a2 + v57);
      uint64_t v60 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v59, 1, v60))
      {
        uint64_t v61 = sub_1000053D8(&qword_10016B438);
        memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v62 = sub_100129300();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v62 - 8) + 32))(v58, v59, v62);
        swift_storeEnumTagMultiPayload();
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v58, 0, 1, v60);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000B2798()
{
  uint64_t result = type metadata accessor for AggregateWeatherViewModel(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for InstantWeatherViewModel();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_10012BE90();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WeatherDataViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B2964);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WeatherDataViewModel.CodingKeys()
{
  return &type metadata for WeatherDataViewModel.CodingKeys;
}

ValueMetadata *type metadata accessor for WeatherDataViewModel.AggregateCodingKeys()
{
  return &type metadata for WeatherDataViewModel.AggregateCodingKeys;
}

ValueMetadata *type metadata accessor for WeatherDataViewModel.InstantCodingKeys()
{
  return &type metadata for WeatherDataViewModel.InstantCodingKeys;
}

unsigned char *_s13WeatherWidget20WeatherDataViewModelO19AggregateCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000B2A5CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for WeatherDataViewModel.SunriseSunsetCodingKeys()
{
  return &type metadata for WeatherDataViewModel.SunriseSunsetCodingKeys;
}

unint64_t sub_1000B2A98()
{
  unint64_t result = qword_10016F100;
  if (!qword_10016F100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F100);
  }
  return result;
}

unint64_t sub_1000B2AE8()
{
  unint64_t result = qword_10016F108;
  if (!qword_10016F108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F108);
  }
  return result;
}

unint64_t sub_1000B2B38()
{
  unint64_t result = qword_10016F110;
  if (!qword_10016F110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F110);
  }
  return result;
}

unint64_t sub_1000B2B88()
{
  unint64_t result = qword_10016F118;
  if (!qword_10016F118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F118);
  }
  return result;
}

unint64_t sub_1000B2BD8()
{
  unint64_t result = qword_10016F120;
  if (!qword_10016F120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F120);
  }
  return result;
}

unint64_t sub_1000B2C28()
{
  unint64_t result = qword_10016F128;
  if (!qword_10016F128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F128);
  }
  return result;
}

unint64_t sub_1000B2C78()
{
  unint64_t result = qword_10016F130;
  if (!qword_10016F130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F130);
  }
  return result;
}

unint64_t sub_1000B2CC8()
{
  unint64_t result = qword_10016F138;
  if (!qword_10016F138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F138);
  }
  return result;
}

unint64_t sub_1000B2D18()
{
  unint64_t result = qword_10016F140;
  if (!qword_10016F140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F140);
  }
  return result;
}

unint64_t sub_1000B2D68()
{
  unint64_t result = qword_10016F148;
  if (!qword_10016F148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F148);
  }
  return result;
}

unint64_t sub_1000B2DB8()
{
  unint64_t result = qword_10016F150;
  if (!qword_10016F150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F150);
  }
  return result;
}

unint64_t sub_1000B2E08()
{
  unint64_t result = qword_10016F158;
  if (!qword_10016F158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F158);
  }
  return result;
}

uint64_t sub_1000B2E54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000B2ED0()
{
  return v0;
}

uint64_t sub_1000B2EE8()
{
  return sub_10012D0C0();
}

void sub_1000B2F10(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000B2F2C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000B2F48()
{
  return type metadata accessor for WeatherDataViewModel();
}

uint64_t sub_1000B2F70()
{
  return v0;
}

uint64_t sub_1000B2F88()
{
  return v0;
}

uint64_t sub_1000B2FA0()
{
  return sub_10012D130();
}

uint64_t sub_1000B2FC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000B2FE8()
{
  uint64_t v0 = sub_10012A860();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10012A7E0();
  sub_1000053D8(&qword_10016F1F8);
  sub_1000B61DC();
  swift_release();
  swift_release();
  sub_10012A7E0();
  sub_1000053D8(&qword_10016F200);
  sub_1000B61DC();
  swift_release();
  swift_release();
  sub_10012A7E0();
  sub_1000053D8(&qword_10016F208);
  sub_1000B61DC();
  sub_1000B6214();
  uint64_t v2 = *(void (**)(uint64_t))(v1 + 104);
  uint64_t v3 = sub_1000B6190();
  v2(v3);
  sub_1000B61FC();
  swift_release();
  swift_release();
  unsigned int v4 = *(void (**)(uint64_t))(v1 + 8);
  uint64_t v5 = sub_1000B61A8();
  v4(v5);
  sub_10012A7E0();
  sub_1000053D8(&qword_10016F210);
  sub_1000B61DC();
  swift_release();
  swift_release();
  sub_10012A7E0();
  sub_1000B622C();
  uint64_t v6 = type metadata accessor for WidgetLocationManager();
  sub_1000B61BC(v6, v7, v8, (uint64_t)sub_1000B3624);
  sub_1000B6214();
  uint64_t v9 = sub_1000B6190();
  v2(v9);
  sub_1000B61FC();
  swift_release();
  swift_release();
  uint64_t v10 = sub_1000B61A8();
  v4(v10);
  sub_10012A7E0();
  sub_1000053D8(&qword_10016F218);
  sub_1000B61DC();
  sub_1000B6214();
  uint64_t v11 = sub_1000B6190();
  v2(v11);
  sub_1000B61FC();
  swift_release();
  uint64_t v12 = sub_1000B61A8();
  v4(v12);
  sub_10012A100();
  sub_10012A6C0();
  swift_release();
  swift_release();
  sub_10012A7E0();
  sub_1000B622C();
  uint64_t v13 = sub_1001298C0();
  sub_1000B61BC(v13, v14, v15, (uint64_t)sub_1000B3BB8);
  sub_1000B6214();
  uint64_t v16 = sub_1000B6190();
  v2(v16);
  sub_1000B61FC();
  swift_release();
  swift_release();
  uint64_t v17 = sub_1000B61A8();
  v4(v17);
  sub_10012A7E0();
  sub_1000B622C();
  uint64_t v18 = type metadata accessor for WeatherDataService();
  sub_1000B61BC(v18, v19, v20, (uint64_t)sub_1000B3D98);
  sub_1000B6214();
  uint64_t v21 = sub_1000B6190();
  v2(v21);
  sub_1000B61FC();
  swift_release();
  swift_release();
  uint64_t v22 = sub_1000B61A8();
  v4(v22);
  sub_10012A7E0();
  sub_1000B622C();
  uint64_t v23 = type metadata accessor for EntryFactory();
  sub_1000B61BC(v23, v24, v25, (uint64_t)sub_1000B3EA4);
  sub_1000B6214();
  uint64_t v26 = sub_1000B6190();
  v2(v26);
  sub_1000B61FC();
  swift_release();
  swift_release();
  uint64_t v27 = sub_1000B61A8();
  v4(v27);
  sub_10012A7E0();
  sub_1000B622C();
  uint64_t refreshed = type metadata accessor for RefreshPolicyProvider();
  sub_1000B61BC(refreshed, v29, v30, (uint64_t)sub_1000B3F7C);
  sub_1000B6214();
  uint64_t v31 = sub_1000B6190();
  v2(v31);
  sub_1000B61FC();
  swift_release();
  swift_release();
  uint64_t v32 = sub_1000B61A8();
  v4(v32);
  sub_10012A7E0();
  sub_1000B622C();
  uint64_t v33 = sub_10012A450();
  sub_1000B61BC(v33, v34, v35, (uint64_t)sub_1000B400C);
  sub_1000B6214();
  uint64_t v36 = sub_1000B6190();
  v2(v36);
  sub_1000B61FC();
  swift_release();
  swift_release();
  uint64_t v37 = sub_1000B61A8();
  v4(v37);
  sub_10012A7E0();
  sub_1000B622C();
  uint64_t v38 = type metadata accessor for DemoManager();
  sub_1000B61BC(v38, v39, v40, (uint64_t)sub_1000B4044);
  sub_1000B6214();
  uint64_t v41 = sub_1000B6190();
  v2(v41);
  sub_1000B61FC();
  swift_release();
  swift_release();
  uint64_t v42 = sub_1000B61A8();
  v4(v42);
  sub_10012A7F0();
  sub_10012A820();
  return swift_release();
}

uint64_t sub_1000B3490@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F2F8);
  uint64_t result = sub_10012A780();
  if (v7)
  {
    sub_10000D890(a1, a1[3]);
    sub_1000053D8(&qword_10016F300);
    uint64_t result = sub_10012A780();
    if (v6)
    {
      uint64_t v5 = sub_10012AA40();
      swift_allocObject();
      uint64_t result = sub_10012AA30();
      a2[3] = v5;
      a2[4] = (uint64_t)&protocol witness table for WidgetTimelineTelemetryManager;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B3580@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000B4CC8(a1, &qword_10016F2F0, (uint64_t (*)(void))&type metadata accessor for LocationAccessDataProvider, (uint64_t (*)(char *))&LocationAccessDataProvider.init(locationManager:), (uint64_t)&protocol witness table for LocationAccessDataProvider, a2);
}

uint64_t sub_1000B35BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B4558((uint64_t (*)(void))&type metadata accessor for LocationDataModelFactory, (uint64_t (*)(void))&LocationDataModelFactory.init(), (uint64_t)&protocol witness table for LocationDataModelFactory, a1);
}

uint64_t sub_1000B35F0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B4558((uint64_t (*)(void))&type metadata accessor for NonAppCellularRadioAccessTechnologyProvider, (uint64_t (*)(void))&NonAppCellularRadioAccessTechnologyProvider.init(), (uint64_t)&protocol witness table for NonAppCellularRadioAccessTechnologyProvider, a1);
}

uint64_t sub_1000B3624(void *a1)
{
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F298);
  uint64_t result = sub_10012A780();
  if (!v23)
  {
    __break(1u);
    goto LABEL_13;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F240);
  uint64_t result = sub_10012A780();
  if (!v21)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_10000D890(a1, a1[3]);
  sub_100046928(0, &qword_10016F270);
  uint64_t result = sub_10012A770();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = (void *)result;
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F2A0);
  uint64_t result = sub_10012A780();
  if (!v19)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F208);
  uint64_t result = sub_10012A780();
  if (!v17[3])
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F2A8);
  uint64_t result = sub_10012A780();
  if (!v16[3])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F2B0);
  uint64_t result = sub_10012A780();
  if (!v15[3])
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F2B8);
  uint64_t result = sub_10012A780();
  if (!v14[3])
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F2C0);
  uint64_t result = sub_10012A780();
  if (!v13[3])
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F2C8);
  uint64_t result = sub_10012A780();
  if (v12[3])
  {
    sub_100046928(0, (unint64_t *)&qword_10016C740);
    uint64_t v4 = sub_10012CD70();
    uint64_t v5 = sub_1000B6068((uint64_t)v20, v21);
    __chkstk_darwin(v5);
    uint64_t v7 = (void *)((char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    *((void *)&v10 + 1) = v12;
    *(void *)&long long v10 = v13;
    uint64_t v9 = sub_1000B4F14((uint64_t)v22, *v7, v3, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15, (uint64_t)v14, v10, v4);
    sub_10000DB48((uint64_t)v20);
    return v9;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1000B39FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F248);
  uint64_t result = sub_10012A780();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F238);
  uint64_t result = sub_10012A780();
  if (!v8)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F290);
  uint64_t result = sub_10012A780();
  if (v6)
  {
    sub_100070A60(&v5, (uint64_t)v7);
    sub_10012A100();
    swift_allocObject();
    uint64_t result = sub_10012A0F0();
    *a2 = result;
    a2[1] = (uint64_t)&protocol witness table for GeocodeService;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000B3B34(uint64_t a1, void *a2)
{
  sub_10000D890(a2, a2[3]);
  sub_1000053D8(&qword_10016F220);
  uint64_t result = sub_10012A780();
  if (v4)
  {
    sub_10012A0E0();
    return sub_10000DB48((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B3BB8(void *a1)
{
  uint64_t v2 = sub_100129730();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_1000053D8(&qword_10016F280);
  __chkstk_darwin(v3 - 8);
  long long v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D890(a1, a1[3]);
  uint64_t v6 = sub_100129A70();
  sub_10012A780();
  uint64_t result = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v5, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_100129720();
    sub_10000D890(a1, a1[3]);
    sub_1000053D8(&qword_10016F288);
    uint64_t result = sub_10012A780();
    uint64_t v8 = v15;
    if (v15)
    {
      sub_1001298C0();
      uint64_t v9 = sub_10000D890(v14, v8);
      v13[3] = v8;
      long long v10 = sub_1000B6004(v13);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v10, v9, v8);
      uint64_t v11 = sub_1001298B0();
      sub_10000DB48((uint64_t)v14);
      return v11;
    }
  }
  __break(1u);
  return result;
}

void *sub_1000B3D98(void *a1)
{
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F248);
  uint64_t result = (void *)sub_10012A780();
  if (!v7)
  {
    __break(1u);
    goto LABEL_6;
  }
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F278);
  uint64_t result = (void *)sub_10012A780();
  if (!v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_10000D890(a1, a1[3]);
  sub_1001298C0();
  uint64_t result = (void *)sub_10012A770();
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    type metadata accessor for WeatherDataService();
    swift_allocObject();
    return sub_1000DB604(&v6, &v4, v3);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000B3EA4(void *a1)
{
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F248);
  uint64_t result = sub_10012A780();
  if (v5)
  {
    sub_10000D890(a1, a1[3]);
    sub_100046928(0, &qword_10016F270);
    uint64_t result = sub_10012A770();
    if (result)
    {
      uint64_t v3 = (void *)result;
      type metadata accessor for EntryFactory();
      swift_allocObject();
      return sub_10011231C((uint64_t)v4, v3);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B3F7C(void *a1)
{
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F248);
  uint64_t result = sub_10012A780();
  if (v4)
  {
    type metadata accessor for RefreshPolicyProvider();
    uint64_t v2 = swift_allocObject();
    sub_100070A60(&v3, v2 + 16);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B400C()
{
  return sub_10012A440();
}

uint64_t sub_1000B4044()
{
  type metadata accessor for DemoManager();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0xD00000000000001ALL;
  *(void *)(result + 24) = 0x800000010013B910;
  return result;
}

uint64_t sub_1000B4088()
{
  uint64_t v0 = sub_10012A860();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  long long v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000053D8(&qword_10016F220);
  sub_10012A840();
  uint64_t v4 = enum case for Scope.singleton(_:);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for Scope.singleton(_:), v0);
  sub_10012A6D0();
  swift_release();
  swift_release();
  long long v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  sub_1000053D8(&qword_10016F228);
  sub_10012A840();
  v5(v3, v4, v0);
  sub_10012A6D0();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_100129A70();
  sub_10012A840();
  v5(v3, enum case for Scope.containerSingleton(_:), v0);
  sub_10012A6D0();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000053D8(&qword_10016F230);
  sub_10012A840();
  swift_release();
  sub_1000053D8(&qword_10016F238);
  sub_10012A840();
  swift_release();
  sub_1000053D8(&qword_10016F240);
  sub_10012A840();
  return swift_release();
}

uint64_t sub_1000B4380@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000D890(a1, a1[3]);
  sub_1001298C0();
  uint64_t result = sub_10012A770();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = result;
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F228);
  uint64_t result = sub_10012A780();
  if (!v12)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_10000D890(a1, a1[3]);
  type metadata accessor for WidgetLocationManager();
  uint64_t result = sub_10012A770();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  long long v6 = (void *)result;
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F248);
  uint64_t result = sub_10012A780();
  if (v10)
  {
    uint64_t v7 = type metadata accessor for GeocodeWeatherService();
    swift_allocObject();
    uint64_t v8 = sub_1000C9298(v5, &v11, v6, &v9);
    a2[3] = v7;
    uint64_t result = sub_1000B60B8(&qword_10016F268, (void (*)(uint64_t))type metadata accessor for GeocodeWeatherService);
    a2[4] = result;
    *a2 = v8;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000B4524@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B4558((uint64_t (*)(void))&type metadata accessor for ProductRequirementsFactory, (uint64_t (*)(void))&ProductRequirementsFactory.init(), (uint64_t)&protocol witness table for ProductRequirementsFactory, a1);
}

uint64_t sub_1000B4558@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a1(0);
  swift_allocObject();
  uint64_t result = a2();
  a4[3] = v7;
  a4[4] = a3;
  *a4 = result;
  return result;
}

uint64_t sub_1000B45C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = sub_100129220();
  __chkstk_darwin(v3 - 8);
  uint64_t v23 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10012A3D0();
  uint64_t v5 = *(void *)(v24 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v24);
  uint64_t v21 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v9 = (char *)&v20 - v8;
  uint64_t v22 = sub_10012A190();
  uint64_t v10 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100129FD0();
  sub_100129FC0();
  sub_100129F20();
  sub_100129FB0();
  swift_release();
  swift_release();
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F248);
  uint64_t result = sub_10012A780();
  if (v27)
  {
    sub_100070A60(&v26, (uint64_t)v28);
    sub_10000D890(v28, v28[3]);
    sub_10012A490();
    sub_10012A130();
    char v14 = sub_10012A3B0();
    sub_10012A3C0();
    if (v14)
    {
      uint64_t v15 = v21;
      uint64_t v16 = v24;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v21, v9, v24);
      unint64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v18 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v18 + v17, v15, v16);
      sub_100129A50();
    }
    else
    {
      sub_100129A60();
      uint64_t v16 = v24;
    }
    uint64_t v19 = v22;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v16);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v19);
    return sub_10000DB48((uint64_t)v28);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B4920(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v25 = sub_10012AB60();
  uint64_t v1 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100129220();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000053D8(&qword_10016F260);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - v12;
  sub_10012A700();
  sub_10012A6F0();
  uint64_t v14 = sub_10012A6E0();
  char v16 = v15;
  swift_release();
  if (v16)
  {
    sub_10012A3C0();
    sub_1001290B0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10012AB20();
    unint64_t v17 = sub_10012AB40();
    os_log_type_t v18 = sub_10012CD60();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to get port from mock server", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v25);
    sub_1000B5F3C((uint64_t)v13, (uint64_t)v11);
    uint64_t v20 = sub_1001290D0();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v20) == 1)
    {
      sub_1000B5FA4((uint64_t)v13);
      sub_1000B5FA4((uint64_t)v11);
      return 0;
    }
    else
    {
      uint64_t v14 = sub_1001290C0();
      char v22 = v21;
      sub_1000B5FA4((uint64_t)v13);
      (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v11, v20);
      if (v22) {
        return 0;
      }
    }
  }
  return v14;
}

uint64_t sub_1000B4C50@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000B4CC8(a1, &qword_10016F258, (uint64_t (*)(void))&type metadata accessor for PrivacySaltProvider, (uint64_t (*)(char *))&PrivacySaltProvider.init(identityService:), (uint64_t)&protocol witness table for PrivacySaltProvider, a2);
}

uint64_t sub_1000B4C8C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000B4CC8(a1, &qword_10016F230, (uint64_t (*)(void))&type metadata accessor for PrivacySampler, (uint64_t (*)(char *))&PrivacySampler.init(saltProvider:), (uint64_t)&protocol witness table for PrivacySampler, a2);
}

uint64_t sub_1000B4CC8@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(char *)@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(a2);
  uint64_t result = sub_10012A780();
  if (v14)
  {
    uint64_t v12 = a3(0);
    swift_allocObject();
    uint64_t result = a4(v13);
    a6[3] = v12;
    a6[4] = a5;
    *a6 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B4D88@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000D890(a1, a1[3]);
  sub_1000053D8(&qword_10016F248);
  uint64_t result = sub_10012A780();
  if (v12)
  {
    sub_100070A60(&v11, (uint64_t)v13);
    sub_100074220((uint64_t)v13, (uint64_t)&v11);
    type metadata accessor for LocalSearchRequestService();
    uint64_t v5 = swift_allocObject();
    sub_100070A60(&v11, v5 + 16);
    sub_10000D890(a1, a1[3]);
    sub_1000053D8(&qword_10016F250);
    uint64_t result = sub_10012A780();
    if (v9)
    {
      sub_100074220((uint64_t)v13, (uint64_t)&v11);
      uint64_t v6 = type metadata accessor for LocalSearchRequestManager();
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = sub_1000B5A70(v5, v9, v10, (uint64_t)&v11, 0, v7);
      a2[3] = v6;
      a2[4] = (uint64_t)&off_100162720;
      *a2 = v8;
      return sub_10000DB48((uint64_t)v13);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for WeatherWidgetAssembly()
{
  return self;
}

uint64_t sub_1000B4EFC()
{
  return sub_1000B2FE8();
}

uint64_t sub_1000B4F14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10)
{
  uint64_t v25 = a8;
  long long v24 = a9;
  uint64_t v27 = type metadata accessor for LocalSearchRequestManager();
  uint64_t v28 = &off_100162720;
  v26[0] = a2;
  unint64_t v17 = (char *)objc_allocWithZone((Class)type metadata accessor for WidgetLocationManager());
  uint64_t v18 = sub_1000B6068((uint64_t)v26, v27);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_1000B508C(a1, *v20, a3, a4, a5, a6, a7, v25, v24, *((uint64_t *)&v24 + 1), a10, v17);
  sub_10000DB48((uint64_t)v26);
  return v22;
}

uint64_t sub_1000B508C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12)
{
  uint64_t v68 = a1;
  uint64_t v69 = a8;
  uint64_t v66 = a7;
  uint64_t v67 = a4;
  uint64_t v64 = a6;
  uint64_t v62 = a5;
  id v60 = a3;
  uint64_t v70 = a10;
  uint64_t v65 = a9;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v13 = sub_1000053D8(&qword_10016B420);
  __chkstk_darwin(v13 - 8);
  uint64_t v61 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10012CDF0();
  __chkstk_darwin(v59);
  uint64_t v58 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10012CE00();
  uint64_t v16 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10012B860();
  __chkstk_darwin(v18 - 8);
  uint64_t v55 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10012A740();
  __chkstk_darwin(v20);
  v84[3] = sub_100046928(0, (unint64_t *)&qword_10016C740);
  v84[4] = &protocol witness table for NSUserDefaults;
  v84[0] = a11;
  v83[3] = type metadata accessor for LocalSearchRequestManager();
  v83[4] = &off_100162720;
  v83[0] = a2;
  uint64_t v21 = OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_lock;
  sub_1000053D8(&qword_10016F2D0);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100130010;
  uint64_t v23 = a12;
  sub_10012A730();
  v71[0] = v22;
  sub_1000B60B8(&qword_10016F2D8, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_1000053D8(&qword_10016F2E0);
  sub_1000468D8(&qword_10016F2E8, &qword_10016F2E0);
  sub_10012CFC0();
  sub_10012A760();
  swift_allocObject();
  *(void *)&a12[v21] = sub_10012A750();
  long long v24 = &v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_didReceiveLocationAuthorization];
  *(void *)long long v24 = 0xD00000000000001FLL;
  *((void *)v24 + 1) = 0x80000001001396B0;
  *(void *)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_timer] = 0;
  v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationIsUpdating] = 0;
  uint64_t v25 = OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue;
  sub_100046928(0, (unint64_t *)&qword_10016D970);
  sub_10012B850();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v56, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v57);
  v71[0] = &_swiftEmptyArrayStorage;
  sub_1000B60B8(&qword_10016D978, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000053D8(&qword_10016D980);
  sub_1000468D8(&qword_10016D988, &qword_10016D980);
  sub_10012CFC0();
  *(void *)&v23[v25] = sub_10012CE20();
  *(void *)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationManager] = 0;
  *(void *)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_completionQueue] = &_swiftEmptyArrayStorage;
  sub_100074220(v68, (uint64_t)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_geocodeManager]);
  sub_100074220((uint64_t)v83, (uint64_t)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_localSearchManager]);
  id v26 = v60;
  *(void *)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_defaultCityManager] = v60;
  sub_100074220(v67, (uint64_t)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_iCloudStatusProvider]);
  uint64_t v27 = v64;
  sub_100074220(v64, (uint64_t)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_ubiquitousKeyValueStoreProvider]);
  sub_100074220(v66, (uint64_t)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationCacheManager]);
  sub_100074220(v69, (uint64_t)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationsOfInterestDataSource]);
  uint64_t v28 = v65;
  sub_100074220(v65, (uint64_t)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_weatherLocationCoalescenceManager]);
  sub_100074220(v70, (uint64_t)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationMatchHelper]);
  uint64_t v29 = sub_10012A410();
  swift_allocObject();
  id v60 = v26;
  uint64_t v30 = sub_10012A400();
  *(void *)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationsReconciler] = v30;
  uint64_t v31 = sub_10012A250();
  uint64_t v32 = sub_100129220();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v61, 1, 1, v32);
  uint64_t v33 = sub_10012A470();
  swift_allocObject();
  uint64_t v34 = sub_10012A460();
  uint64_t v72 = (void *)v33;
  uint64_t v73 = (uint64_t (*)())&protocol witness table for SyncedDataContextProvider;
  v71[0] = v34;
  uint64_t v81 = v29;
  v82 = &protocol witness table for SavedLocationsReconciler;
  v80[0] = v30;
  swift_retain();
  uint64_t v35 = sub_10012A240();
  sub_100074220(v27, (uint64_t)v71);
  uint64_t v81 = v31;
  v82 = &protocol witness table for SyncedDataManager;
  v80[0] = v35;
  uint64_t v36 = sub_10012A500();
  swift_allocObject();
  swift_retain();
  uint64_t v37 = sub_10012A4F0();
  uint64_t v38 = (uint64_t *)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationDisplayContextReader];
  v38[3] = v36;
  v38[4] = (uint64_t)&protocol witness table for LocationDisplayContextReader;
  *uint64_t v38 = v37;
  uint64_t v39 = v27;
  sub_100074220(v27, (uint64_t)v71);
  uint64_t v40 = v62;
  sub_100074220(v62, (uint64_t)v80);
  v79[3] = v31;
  v79[4] = &protocol witness table for SyncedDataManager;
  v79[0] = v35;
  sub_100074220((uint64_t)v84, (uint64_t)v78);
  uint64_t v41 = sub_10012A360();
  swift_allocObject();
  swift_retain();
  uint64_t v42 = sub_10012A350();
  uint64_t v43 = (uint64_t *)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationsReader];
  v43[3] = v41;
  v43[4] = (uint64_t)&protocol witness table for SavedLocationsReader;
  *uint64_t v43 = v42;
  sub_100074220(v39, (uint64_t)v71);
  sub_100074220(v69, (uint64_t)v80);
  sub_100074220(v28, (uint64_t)v79);
  sub_100074220(v70, (uint64_t)v78);
  sub_100074220(v40, (uint64_t)&v77);
  sub_100074220((uint64_t)v84, (uint64_t)&v76);
  uint64_t v44 = sub_10012A320();
  swift_allocObject();
  id v45 = v60;
  uint64_t v46 = sub_10012A310();
  uint64_t v47 = (uint64_t *)&v23[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_savedLocationFinder];
  v47[3] = v44;
  v47[4] = (uint64_t)&protocol witness table for SavedLocationFinder;
  *uint64_t v47 = v46;

  v75.receiver = v23;
  v75.super_class = ObjectType;
  uint64_t v48 = (char *)[super init];
  uint64_t v49 = *(NSObject **)&v48[OBJC_IVAR____TtC13WeatherWidget21WidgetLocationManager_locationQueue];
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = v48;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = sub_1000B6138;
  *(void *)(v51 + 24) = v50;
  uint64_t v73 = sub_1000B6150;
  uint64_t v74 = v51;
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 1107296256;
  v71[2] = sub_1000B2FC0;
  uint64_t v72 = &unk_100163320;
  uint64_t v52 = _Block_copy(v71);
  uint64_t v53 = v48;
  swift_retain();
  swift_release();
  dispatch_sync(v49, v52);

  _Block_release(v52);
  swift_release();

  sub_10000DB48((uint64_t)v84);
  sub_10000DB48(v70);
  sub_10000DB48(v65);
  sub_10000DB48(v69);
  sub_10000DB48(v66);
  sub_10000DB48(v64);
  sub_10000DB48(v40);
  sub_10000DB48(v67);
  sub_10000DB48((uint64_t)v83);
  sub_10000DB48(v68);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v35 & 1) == 0) {
    return (uint64_t)v53;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B5A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a2;
  uint64_t v22 = sub_10012CE00();
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v21 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10012CDF0();
  __chkstk_darwin(v18);
  uint64_t v19 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10012B860();
  __chkstk_darwin(v13 - 8);
  uint64_t v17 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10012A810();
  __chkstk_darwin(v15);
  long long v24 = &_swiftEmptyArrayStorage;
  sub_1000B60B8((unint64_t *)&qword_10016AEF0, (void (*)(uint64_t))&type metadata accessor for PromiseDeduperFlags);
  sub_1000053D8(&qword_10016AEF8);
  sub_1000468D8((unint64_t *)&qword_10016AF00, &qword_10016AEF8);
  sub_10012CFC0();
  sub_1000053D8(&qword_10016AF08);
  swift_allocObject();
  *(void *)(a6 + 72) = sub_10012A7C0();
  *(void *)(a6 + 80) = 0;
  *(void *)(a6 + 88) = 0;
  *(void *)(a6 + 96) = 0;
  *(_OWORD *)(a6 + 104) = xmmword_10012F2D0;
  *(void *)(a6 + 56) = a1;
  *(void *)(a6 + 64) = &protocol witness table for LocalSearchRequestService;
  *(void *)(a6 + 120) = v23;
  *(void *)(a6 + 128) = a3;
  sub_100074220(a4, a6 + 16);
  if (!a5)
  {
    sub_100046928(0, (unint64_t *)&qword_10016D970);
    swift_retain();
    swift_retain();
    sub_10012B840();
    long long v24 = &_swiftEmptyArrayStorage;
    sub_1000B60B8(&qword_10016D978, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_1000053D8(&qword_10016D980);
    sub_1000468D8(&qword_10016D988, &qword_10016D980);
    sub_10012CFC0();
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v21, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
    a5 = sub_10012CE20();
    swift_release();
    swift_release();
  }
  sub_10000DB48(a4);
  *(void *)(a6 + 136) = a5;
  return a6;
}

uint64_t sub_1000B5E4C()
{
  uint64_t v1 = sub_10012A3D0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B5EDC()
{
  uint64_t v1 = *(void *)(sub_10012A3D0() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000B4920(v2);
}

uint64_t sub_1000B5F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_10016F260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B5FA4(uint64_t a1)
{
  uint64_t v2 = sub_1000053D8(&qword_10016F260);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1000B6004(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1000B6068(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000B60B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B6100()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000B6138()
{
  return sub_10003C780(*(char **)(v0 + 16));
}

uint64_t sub_1000B6140()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B6150()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000B6178(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B6188()
{
  return swift_release();
}

uint64_t sub_1000B6190()
{
  return v0;
}

uint64_t sub_1000B61A8()
{
  return v0;
}

uint64_t sub_1000B61BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RegistrationContainer.register<A>(_:name:factory:)(a1, 0, 0, a4, 0, a1);
}

uint64_t sub_1000B61DC()
{
  return sub_10012A840();
}

uint64_t sub_1000B61FC()
{
  return sub_10012A6D0();
}

uint64_t sub_1000B6214()
{
  return swift_release();
}

uint64_t sub_1000B622C()
{
  return 0;
}

ValueMetadata *type metadata accessor for TemperatureUnitControlWidget()
{
  return &type metadata for TemperatureUnitControlWidget;
}

uint64_t sub_1000B6248()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B6264()
{
  uint64_t v0 = sub_10012C820();
  __chkstk_darwin(v0 - 8);
  sub_10000DC50();
  uint64_t v1 = sub_1000053D8(&qword_10016F308);
  sub_10000DB98();
  uint64_t v19 = v2;
  __chkstk_darwin(v3);
  sub_10000DC50();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_1000053D8(&qword_10016F310);
  sub_10000DB98();
  uint64_t v20 = v8;
  __chkstk_darwin(v9);
  sub_10000DC50();
  uint64_t v12 = v11 - v10;
  sub_1000053D8(&qword_10016F318);
  sub_10000DB98();
  uint64_t v21 = v13;
  uint64_t v22 = v14;
  __chkstk_darwin(v13);
  sub_10000DC50();
  uint64_t v17 = v16 - v15;
  swift_getKeyPath();
  sub_10012C810();
  sub_1000B676C();
  sub_1000B67B8();
  sub_1000B6804();
  sub_10012C830();
  sub_10012AF80();
  sub_1000B6850();
  sub_10012B0A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v6, v1);
  swift_getOpaqueTypeConformance2();
  sub_10012B0C0();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v12, v7);
  swift_getOpaqueTypeConformance2();
  sub_10012B080();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v17, v21);
}

uint64_t sub_1000B65DC@<X0>(uint64_t a1@<X8>)
{
  sub_10012AF80();
  if (qword_10016AEE8 != -1) {
    swift_once();
  }
  id v2 = (id)qword_100181E30;
  uint64_t result = sub_10012B400();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  *(void *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_1000B66C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1000FBDA0();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000B66FC()
{
  return sub_10012C870();
}

unint64_t sub_1000B676C()
{
  unint64_t result = qword_10016F320;
  if (!qword_10016F320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F320);
  }
  return result;
}

unint64_t sub_1000B67B8()
{
  unint64_t result = qword_10016F328;
  if (!qword_10016F328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F328);
  }
  return result;
}

unint64_t sub_1000B6804()
{
  unint64_t result = qword_10016F330;
  if (!qword_10016F330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F330);
  }
  return result;
}

unint64_t sub_1000B6850()
{
  unint64_t result = qword_10016F338;
  if (!qword_10016F338)
  {
    sub_100005470(&qword_10016F308);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F338);
  }
  return result;
}

uint64_t sub_1000B68A4()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_1000B6970(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10012C800();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for DailyViewAttributes();
    *(void *)((char *)a1 + v8[5]) = *(void *)((char *)a2 + v8[5]);
    *(_WORD *)((char *)a1 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
    *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
    *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
    *((unsigned char *)a1 + v8[12]) = *((unsigned char *)a2 + v8[12]);
    *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
    *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
    *((unsigned char *)a1 + v8[15]) = *((unsigned char *)a2 + v8[15]);
    *(void *)((char *)a1 + v8[16]) = *(void *)((char *)a2 + v8[16]);
    *(void *)((char *)a1 + v8[17]) = *(void *)((char *)a2 + v8[17]);
    *(void *)((char *)a1 + v8[18]) = *(void *)((char *)a2 + v8[18]);
    *(void *)((char *)a1 + v8[19]) = *(void *)((char *)a2 + v8[19]);
    *(void *)((char *)a1 + v8[20]) = *(void *)((char *)a2 + v8[20]);
    *(void *)((char *)a1 + v8[21]) = *(void *)((char *)a2 + v8[21]);
    uint64_t v9 = v8[22];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000053D8(&qword_10016B060);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_1000053D8(&qword_10016B098);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v15 = v8[23];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v15, 1, v12))
    {
      uint64_t v18 = sub_1000053D8(&qword_10016B098);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v16, v17, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 0, 1, v12);
    }
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    v20[2] = v21[2];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000B6CAC(uint64_t a1)
{
  uint64_t v2 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for DailyViewAttributes();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(v3 + 88);
  uint64_t v5 = sub_1000053D8(&qword_10016B060);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + *(int *)(v3 + 92);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v6, v5);
  }
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B6E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v7[23];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    uint64_t v16 = sub_1000053D8(&qword_10016B098);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  v18[2] = v19[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000B7114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = v7[6];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v11 = v7[22];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_1000053D8(&qword_10016B060);
  int v15 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(v14 - 8);
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
LABEL_6:
    uint64_t v18 = sub_1000053D8(&qword_10016B098);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
LABEL_7:
  uint64_t v19 = v7[23];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  int v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v19, 1, v14);
  int v23 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v14);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v14 - 8);
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 24))(v20, v21, v14);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v20, v14);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_1000053D8(&qword_10016B098);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v20, v21, v14);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v14);
LABEL_13:
  uint64_t v26 = *(int *)(a3 + 20);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)(a1 + v26) = *(void *)(a2 + v26);
  swift_retain();
  swift_release();
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  swift_retain();
  swift_release();
  *(void *)(v27 + 16) = *(void *)(v28 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000B7550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v7[23];
  uint64_t v14 = (void *)(a1 + v13);
  int v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    uint64_t v16 = sub_1000053D8(&qword_10016B098);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(void *)(v18 + 16) = *(void *)(v19 + 16);
  return a1;
}

uint64_t sub_1000B7804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  swift_release();
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  swift_release();
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  swift_release();
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  int v12 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v11);
  int v13 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v14 = *(void *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v16 = v7[23];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v16, 1, v11);
  int v20 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v11);
  if (!v19)
  {
    uint64_t v21 = *(void *)(v11 - 8);
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 40))(v17, v18, v11);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v17, v11);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    uint64_t v22 = sub_1000053D8(&qword_10016B098);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v17, v18, v11);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v11);
LABEL_13:
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (void *)(a2 + v23);
  *(void *)(a1 + v23) = *v25;
  swift_release();
  *(void *)(v24 + 8) = v25[1];
  swift_release();
  *(void *)(v24 + 16) = v25[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000B7BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B7C0C);
}

uint64_t sub_1000B7C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DailyViewAttributes();
  sub_100099990();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return sub_10002A65C(*(void *)(a1 + *(int *)(a3 + 20) + 8));
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v6);
}

uint64_t sub_1000B7C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B7CA8);
}

void sub_1000B7CA8(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000C8478();
  sub_100099990();
  if (*(_DWORD *)(v4 + 84) == a3)
  {
    sub_10007993C();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v5, v6, v7, v8);
  }
  else
  {
    sub_1000C86E4();
  }
}

uint64_t type metadata accessor for DailyView(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F398);
}

uint64_t sub_1000B7D3C()
{
  uint64_t result = type metadata accessor for DailyViewAttributes();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000B7DD0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B7DEC(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata);
    uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      uint64_t v9 = v5;
      uint64_t v10 = v8;
      uint64_t v11 = a2;
      do
      {
        uint64_t v12 = *v9++;
        *v10++ = v12;
        --v11;
      }
      while (v11);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v15 = (int *)(v6 + 32);
    uint64_t v16 = a2;
    do
    {
      if (a2 == 1) {
        int v17 = 0;
      }
      else {
        int v17 = *v15;
      }
      uint64_t v19 = *v5++;
      uint64_t v18 = v19;
      uint64_t v20 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 16))(&v14[v17], v20);
      v15 += 4;
      --v16;
    }
    while (v16);
  }
  return sub_10012B7F0();
}

uint64_t sub_1000B7F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = sub_10012BDF0();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v5, v6);
    uint64_t v7 = a2;
    uint64_t v8 = 0;
    uint64_t v9 = v6;
  }
  else
  {
    uint64_t v9 = sub_10012BDF0();
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v7, v8, 1, v9);
}

uint64_t sub_1000B8028@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v3 = type metadata accessor for DailyView(0);
  uint64_t v4 = sub_100047198(v3);
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v4);
  sub_1000B9108(v1, (uint64_t)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for DailyView);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  uint64_t result = sub_1000BF4F8((uint64_t)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, (void (*)(void))type metadata accessor for DailyView);
  *a1 = sub_1000B8FDC;
  a1[1] = (uint64_t (*)(uint64_t))v10;
  return result;
}

uint64_t sub_1000B8120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v33 = a3;
  uint64_t v4 = sub_10012B120();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000053D8(&qword_10016F3D0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_1000053D8(&qword_10016F3D8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_1000053D8(&qword_10016F3E0);
  uint64_t v14 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_1000053D8(&qword_10016F3E8);
  __chkstk_darwin(v32);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t *v10 = sub_10012B7A0();
  v10[1] = v19;
  uint64_t v20 = sub_1000053D8(&qword_10016F3F0);
  sub_1000B8530(a2, (uint64_t)v10 + *(int *)(v20 + 44));
  sub_10012ABD0();
  sub_10012B790();
  sub_10012ABC0();
  sub_1000C30D4((uint64_t)v10, (uint64_t)v13, &qword_10016F3D0);
  uint64_t v21 = &v13[*(int *)(v11 + 36)];
  long long v22 = v37;
  *(_OWORD *)uint64_t v21 = v36;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v38;
  sub_1000C7A48((uint64_t)v10, &qword_10016F3D0);
  sub_10012B110();
  unint64_t v23 = sub_1000B9008();
  sub_10012B520();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000C7A48((uint64_t)v13, &qword_10016F3D8);
  sub_10012AF80();
  uint64_t v24 = sub_10012B400();
  uint64_t v26 = v25;
  LOBYTE(v5) = v27 & 1;
  uint64_t v34 = v11;
  unint64_t v35 = v23;
  swift_getOpaqueTypeConformance2();
  uint64_t v28 = v31;
  sub_10012B490();
  sub_100008278(v24, v26, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v28);
  sub_10012AC80();
  return sub_1000C7A48((uint64_t)v18, &qword_10016F3E8);
}

uint64_t sub_1000B8530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v54 = type metadata accessor for LargeDailyView(0);
  __chkstk_darwin(v54);
  uint64_t v41 = (uint64_t)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_1000053D8(&qword_10016F408);
  __chkstk_darwin(v51);
  uint64_t v52 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for MediumPrecipitationDailyView(0);
  __chkstk_darwin(v46);
  uint64_t v43 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_1000053D8(&qword_10016F410);
  __chkstk_darwin(v48);
  uint64_t v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for MediumTemperatureDailyView(0);
  __chkstk_darwin(v49);
  uint64_t v39 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_1000053D8(&qword_10016F418);
  __chkstk_darwin(v50);
  id v45 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DailyView(0);
  uint64_t v9 = __chkstk_darwin(v40);
  uint64_t v47 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = sub_10012C800();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = *(void (**)(char *, void, uint64_t))(v14 + 104);
  v42(v16, enum case for WidgetFamily.systemSmall(_:), v13);
  sub_1000B9244((unint64_t *)&qword_10016CCC8, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
  sub_10012CB60();
  sub_10012CB60();
  uint64_t v17 = v58;
  uint64_t v18 = v56;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v14 + 8);
  v19(v16, v13);
  uint64_t v55 = a1;
  sub_1000B9108(a1, (uint64_t)v12, (void (*)(void))type metadata accessor for DailyView);
  if (v17 == v18)
  {
    sub_1000B928C((uint64_t)v12, (void (*)(void))type metadata accessor for DailyView);
    goto LABEL_4;
  }
  v42(v16, enum case for WidgetFamily.systemMedium(_:), v13);
  sub_10012CB60();
  sub_10012CB60();
  uint64_t v20 = v58;
  uint64_t v21 = v56;
  v19(v16, v13);
  sub_1000B928C((uint64_t)v12, (void (*)(void))type metadata accessor for DailyView);
  if (v20 == v21)
  {
LABEL_4:
    uint64_t v22 = type metadata accessor for DailyViewAttributes();
    int v23 = *(unsigned __int8 *)(v55 + *(int *)(v22 + 24));
    uint64_t v24 = v47;
    sub_1000B9108(v55, v47, (void (*)(void))type metadata accessor for DailyView);
    if (v23 == 5)
    {
      char v25 = *(unsigned char *)(v24 + *(int *)(v22 + 60));
      sub_1000B928C(v24, (void (*)(void))type metadata accessor for DailyView);
      uint64_t v26 = v52;
      uint64_t v27 = (uint64_t)v45;
      uint64_t v28 = (uint64_t)v44;
      if ((v25 & 1) == 0)
      {
        uint64_t v29 = v39;
        sub_1000B9108(v55, v39, (void (*)(void))type metadata accessor for DailyViewAttributes);
        sub_10012B380();
        sub_1000B9108(v29, v28, (void (*)(void))type metadata accessor for MediumTemperatureDailyView);
        swift_storeEnumTagMultiPayload();
        sub_1000B9244(&qword_10016F428, (void (*)(uint64_t))type metadata accessor for MediumTemperatureDailyView);
        sub_1000B9244(&qword_10016F430, (void (*)(uint64_t))type metadata accessor for MediumPrecipitationDailyView);
        sub_10012B0E0();
        uint64_t v30 = type metadata accessor for MediumTemperatureDailyView;
        uint64_t v31 = v29;
LABEL_9:
        sub_1000B928C(v31, (void (*)(void))v30);
        sub_1000C30D4(v27, v26, &qword_10016F418);
        swift_storeEnumTagMultiPayload();
        sub_1000B9168();
        sub_1000B9244(&qword_10016F438, (void (*)(uint64_t))type metadata accessor for LargeDailyView);
        sub_10012B0E0();
        return sub_1000C7A48(v27, &qword_10016F418);
      }
    }
    else
    {
      sub_1000B928C(v24, (void (*)(void))type metadata accessor for DailyView);
      uint64_t v26 = v52;
      uint64_t v27 = (uint64_t)v45;
      uint64_t v28 = (uint64_t)v44;
    }
    uint64_t v32 = v43;
    sub_1000B9108(v55, v43, (void (*)(void))type metadata accessor for DailyViewAttributes);
    sub_1000B9108(v32, v28, (void (*)(void))type metadata accessor for MediumPrecipitationDailyView);
    swift_storeEnumTagMultiPayload();
    sub_1000B9244(&qword_10016F428, (void (*)(uint64_t))type metadata accessor for MediumTemperatureDailyView);
    sub_1000B9244(&qword_10016F430, (void (*)(uint64_t))type metadata accessor for MediumPrecipitationDailyView);
    sub_10012B0E0();
    uint64_t v30 = type metadata accessor for MediumPrecipitationDailyView;
    uint64_t v31 = v32;
    goto LABEL_9;
  }
  uint64_t v34 = v55;
  uint64_t v35 = v41;
  sub_1000B9108(v55, v41, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v36 = v34 + *(int *)(v40 + 20);
  uint64_t v56 = *(void *)v36;
  long long v57 = *(_OWORD *)(v36 + 8);
  sub_1000053D8(&qword_10016B200);
  sub_10012B6F0();
  long long v37 = v59;
  uint64_t v38 = v35 + *(int *)(v54 + 20);
  *(void *)uint64_t v38 = v58;
  *(_OWORD *)(v38 + 8) = v37;
  sub_10012B380();
  sub_1000B9108(v35, v52, (void (*)(void))type metadata accessor for LargeDailyView);
  swift_storeEnumTagMultiPayload();
  sub_1000B9168();
  sub_1000B9244(&qword_10016F438, (void (*)(uint64_t))type metadata accessor for LargeDailyView);
  sub_10012B0E0();
  return sub_1000B928C(v35, (void (*)(void))type metadata accessor for LargeDailyView);
}

uint64_t sub_1000B8E54()
{
  type metadata accessor for DailyView(0);
  sub_1000C8394();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = *(void *)(v3 + 64);
  sub_10012C800();
  sub_1000472C0();
  sub_10000B424();
  v5();
  type metadata accessor for DailyViewAttributes();
  sub_1000C85CC();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = sub_1000053D8(&qword_10016B060);
  if (!sub_1000C8518(v6))
  {
    sub_1000472C0();
    sub_1000C8590();
    v7();
  }
  if (!sub_1000C84F4())
  {
    sub_1000472C0();
    sub_1000C8590();
    v8();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v2 + 16) & ~v2) + v4, v2 | 7);
}

uint64_t sub_1000B8FDC(uint64_t a1)
{
  return sub_1000C6DE8(a1, (uint64_t)type metadata accessor for DailyView, (uint64_t (*)(uint64_t))sub_1000B8120);
}

unint64_t sub_1000B9008()
{
  unint64_t result = qword_10016F3F8;
  if (!qword_10016F3F8)
  {
    sub_100005470(&qword_10016F3D8);
    sub_10000B38C(&qword_10016F400, &qword_10016F3D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F3F8);
  }
  return result;
}

uint64_t type metadata accessor for LargeDailyView(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F498);
}

uint64_t type metadata accessor for MediumPrecipitationDailyView(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F530);
}

uint64_t type metadata accessor for MediumTemperatureDailyView(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F5C0);
}

uint64_t sub_1000B9108(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000472C0();
  sub_10006D61C();
  v4();
  return a2;
}

unint64_t sub_1000B9168()
{
  unint64_t result = qword_10016F420;
  if (!qword_10016F420)
  {
    sub_100005470(&qword_10016F418);
    sub_1000B9244(&qword_10016F428, (void (*)(uint64_t))type metadata accessor for MediumTemperatureDailyView);
    sub_1000B9244(&qword_10016F430, (void (*)(uint64_t))type metadata accessor for MediumPrecipitationDailyView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F420);
  }
  return result;
}

uint64_t sub_1000B9244(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B928C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000472C0();
  uint64_t v3 = sub_1000C8450();
  v4(v3);
  return a1;
}

void *sub_1000B92E0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10012C800();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for DailyViewAttributes();
    *(void *)((char *)a1 + v8[5]) = *(void *)((char *)a2 + v8[5]);
    *(_WORD *)((char *)a1 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
    *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
    *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
    *((unsigned char *)a1 + v8[12]) = *((unsigned char *)a2 + v8[12]);
    *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
    *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
    *((unsigned char *)a1 + v8[15]) = *((unsigned char *)a2 + v8[15]);
    *(void *)((char *)a1 + v8[16]) = *(void *)((char *)a2 + v8[16]);
    *(void *)((char *)a1 + v8[17]) = *(void *)((char *)a2 + v8[17]);
    *(void *)((char *)a1 + v8[18]) = *(void *)((char *)a2 + v8[18]);
    *(void *)((char *)a1 + v8[19]) = *(void *)((char *)a2 + v8[19]);
    *(void *)((char *)a1 + v8[20]) = *(void *)((char *)a2 + v8[20]);
    *(void *)((char *)a1 + v8[21]) = *(void *)((char *)a2 + v8[21]);
    uint64_t v9 = v8[22];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000053D8(&qword_10016B060);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_1000053D8(&qword_10016B098);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v15 = v8[23];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v15, 1, v12))
    {
      uint64_t v18 = sub_1000053D8(&qword_10016B098);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v16, v17, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 0, 1, v12);
    }
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = *(int *)(a3 + 24);
    uint64_t v21 = (void *)((char *)a1 + v19);
    uint64_t v22 = (void *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    v21[2] = v22[2];
    uint64_t v24 = (char *)a1 + v20;
    char v25 = (char *)a2 + v20;
    uint64_t v26 = sub_10012B390();
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v27(v24, v25, v26);
  }
  return a1;
}

uint64_t sub_1000B9668(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for DailyViewAttributes();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(v5 + 88);
  uint64_t v7 = sub_1000053D8(&qword_10016B060);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = a1 + *(int *)(v5 + 92);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  uint64_t v10 = sub_10012B390();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

uint64_t sub_1000B9824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v7[23];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    uint64_t v16 = sub_1000053D8(&qword_10016B098);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  v19[2] = v20[2];
  uint64_t v22 = a1 + v18;
  uint64_t v23 = a2 + v18;
  uint64_t v24 = sub_10012B390();
  char v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v25(v22, v23, v24);
  return a1;
}

uint64_t sub_1000B9B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = v7[6];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v11 = v7[22];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_1000053D8(&qword_10016B060);
  int v15 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(v14 - 8);
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
LABEL_6:
    uint64_t v18 = sub_1000053D8(&qword_10016B098);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
LABEL_7:
  uint64_t v19 = v7[23];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  int v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v19, 1, v14);
  int v23 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v14);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v14 - 8);
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 24))(v20, v21, v14);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v20, v14);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_1000053D8(&qword_10016B098);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v20, v21, v14);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v14);
LABEL_13:
  uint64_t v26 = *(int *)(a3 + 20);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)(a1 + v26) = *(void *)(a2 + v26);
  swift_retain();
  swift_release();
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  swift_retain();
  swift_release();
  *(void *)(v27 + 16) = *(void *)(v28 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(int *)(a3 + 24);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = sub_10012B390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  return a1;
}

uint64_t sub_1000B9FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v7[23];
  uint64_t v14 = (void *)(a1 + v13);
  int v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    uint64_t v16 = sub_1000053D8(&qword_10016B098);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  uint64_t v23 = sub_10012B390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t sub_1000BA2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  swift_release();
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  swift_release();
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  swift_release();
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  int v12 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v11);
  int v13 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v14 = *(void *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v16 = v7[23];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v16, 1, v11);
  int v20 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v11);
  if (!v19)
  {
    uint64_t v21 = *(void *)(v11 - 8);
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 40))(v17, v18, v11);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v17, v11);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    uint64_t v22 = sub_1000053D8(&qword_10016B098);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v17, v18, v11);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v11);
LABEL_13:
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  swift_release();
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  swift_release();
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  swift_bridgeObjectRelease();
  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = sub_10012B390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  return a1;
}

uint64_t sub_1000BA714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA728);
}

uint64_t sub_1000BA728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000C8478();
  sub_100099990();
  if (*(_DWORD *)(v7 + 84) == v3)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
  }
  else
  {
    if (v3 == 0x7FFFFFFF) {
      return sub_10002A65C(*(void *)(v4 + *(int *)(a3 + 20) + 8));
    }
    uint64_t v8 = sub_10012B390();
    uint64_t v9 = v4 + *(int *)(a3 + 24);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, v3, v8);
}

uint64_t sub_1000BA7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA7DC);
}

void sub_1000BA7DC(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000C8478();
  sub_100099990();
  if (*(_DWORD *)(v4 + 84) != a3)
  {
    if (a3 == 0x7FFFFFFF)
    {
      sub_1000C86E4();
      return;
    }
    sub_10012B390();
  }
  sub_10007993C();

  _s13WeatherWidget20WeatherDataViewModelOwst_0(v5, v6, v7, v8);
}

uint64_t sub_1000BA874()
{
  uint64_t result = type metadata accessor for DailyViewAttributes();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_10012B390();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000BA95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C82A4);
}

uint64_t sub_1000BA970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C8298);
}

void *sub_1000BA988(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10012C800();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for DailyViewAttributes();
    *(void *)((char *)a1 + v8[5]) = *(void *)((char *)a2 + v8[5]);
    *(_WORD *)((char *)a1 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
    *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
    *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
    *((unsigned char *)a1 + v8[12]) = *((unsigned char *)a2 + v8[12]);
    *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
    *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
    *((unsigned char *)a1 + v8[15]) = *((unsigned char *)a2 + v8[15]);
    *(void *)((char *)a1 + v8[16]) = *(void *)((char *)a2 + v8[16]);
    *(void *)((char *)a1 + v8[17]) = *(void *)((char *)a2 + v8[17]);
    *(void *)((char *)a1 + v8[18]) = *(void *)((char *)a2 + v8[18]);
    *(void *)((char *)a1 + v8[19]) = *(void *)((char *)a2 + v8[19]);
    *(void *)((char *)a1 + v8[20]) = *(void *)((char *)a2 + v8[20]);
    *(void *)((char *)a1 + v8[21]) = *(void *)((char *)a2 + v8[21]);
    uint64_t v9 = v8[22];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000053D8(&qword_10016B060);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_1000053D8(&qword_10016B098);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v15 = v8[23];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v15, 1, v12))
    {
      uint64_t v18 = sub_1000053D8(&qword_10016B098);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v16, v17, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 0, 1, v12);
    }
    uint64_t v19 = *(int *)(a3 + 20);
    int v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = sub_10012B390();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t sub_1000BACDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for DailyViewAttributes();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(v5 + 88);
  uint64_t v7 = sub_1000053D8(&qword_10016B060);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = a1 + *(int *)(v5 + 92);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
  }
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = sub_10012B390();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

uint64_t sub_1000BAE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v7[23];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    uint64_t v16 = sub_1000053D8(&qword_10016B098);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_10012B390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000BB17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = v7[6];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v11 = v7[22];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_1000053D8(&qword_10016B060);
  int v15 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(v14 - 8);
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
LABEL_6:
    uint64_t v18 = sub_1000053D8(&qword_10016B098);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
LABEL_7:
  uint64_t v19 = v7[23];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  int v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v19, 1, v14);
  int v23 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v14);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v14 - 8);
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(v24 + 24))(v20, v21, v14);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v20, v14);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_1000053D8(&qword_10016B098);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v20, v21, v14);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v14);
LABEL_13:
  uint64_t v26 = *(int *)(a3 + 20);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = sub_10012B390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  return a1;
}

uint64_t sub_1000BB5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v7[23];
  uint64_t v14 = (void *)(a1 + v13);
  int v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    uint64_t v16 = sub_1000053D8(&qword_10016B098);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_10012B390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000BB88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  swift_release();
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  swift_release();
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  swift_release();
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  int v12 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v11);
  int v13 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v14 = *(void *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v16 = v7[23];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v16, 1, v11);
  int v20 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v11);
  if (!v19)
  {
    uint64_t v21 = *(void *)(v11 - 8);
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 40))(v17, v18, v11);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v17, v11);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    uint64_t v22 = sub_1000053D8(&qword_10016B098);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v17, v18, v11);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v11);
LABEL_13:
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = sub_10012B390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t sub_1000BBC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BBCA0);
}

uint64_t sub_1000BBCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000C8478();
  sub_100099990();
  if (*(_DWORD *)(v7 + 84) == v3)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
  }
  else
  {
    uint64_t v8 = sub_10012B390();
    uint64_t v9 = v4 + *(int *)(a3 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, v3, v8);
}

uint64_t sub_1000BBD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BBD28);
}

uint64_t sub_1000BBD28(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000C8478();
  sub_100099990();
  if (*(_DWORD *)(v4 + 84) != a3) {
    sub_10012B390();
  }
  sub_10007993C();

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v5, v6, v7, v8);
}

uint64_t sub_1000BBDA0()
{
  uint64_t result = type metadata accessor for DailyViewAttributes();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_10012B390();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000BBE68()
{
  return sub_10000B38C(&qword_10016F5F8, &qword_10016F600);
}

uint64_t sub_1000BBEA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BBEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10012BBA0();
  uint64_t v115 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LargeDailyView(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000053D8(&qword_10016F610);
  __chkstk_darwin(v11 - 8);
  int v13 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_10012B940();
  uint64_t v151 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  v147 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10012CDD0();
  unint64_t v150 = *(void *)(v146 - 8);
  uint64_t v15 = __chkstk_darwin(v146);
  v145 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v144 = (char *)&v113 - v17;
  uint64_t v143 = sub_1000053D8(&qword_10016B060);
  v149 = *(void (***)(char *, uint64_t))(v143 - 8);
  __chkstk_darwin(v143);
  v142 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DailyViewAttributes();
  uint64_t v122 = *(int *)(v19 + 20);
  uint64_t v153 = a1;
  uint64_t v20 = *(void *)(a1 + v122);
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v124 = v6;
    uint64_t v125 = v4;
    uint64_t v116 = v8;
    uint64_t v117 = v9;
    uint64_t v118 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v119 = a2;
    uint64_t v22 = v19;
    uint64_t v23 = v21;
    uint64_t v24 = sub_10012BDF0();
    v152 = v13;
    uint64_t v25 = *(void *)(v24 - 8);
    unint64_t v26 = v20 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    uint64_t v121 = v7;
    uint64_t v131 = v153 + *(int *)(v7 + 24);
    uint64_t v130 = sub_10012A090();
    uint64_t v120 = v22;
    unint64_t v129 = *(int *)(v22 + 68);
    uint64_t v128 = *(void *)(v25 + 72);
    uint64_t v27 = (void (**)(char *, uint64_t))(v150 + 8);
    uint64_t v28 = enum case for WeatherFormatPlaceholder.none(_:);
    v139 = (void (**)(char *, uint64_t, uint64_t))(v151 + 104);
    uint64_t v29 = (void (**)(char *, uint64_t))(v151 + 8);
    v137 = v149 + 1;
    uint64_t v123 = v20;
    swift_bridgeObjectRetain();
    double v30 = 0.0;
    v141 = v27;
    unsigned int v140 = v28;
    v138 = v29;
    do
    {
      uint64_t v151 = v23;
      uint64_t v31 = v139;
      uint64_t v32 = v142;
      unint64_t v150 = v26;
      sub_10012BD70();
      uint64_t v33 = v144;
      sub_10012B8F0();
      uint64_t v34 = v145;
      sub_10012CDC0();
      uint64_t v35 = *v27;
      uint64_t v36 = v146;
      (*v27)(v33, v146);
      uint64_t v38 = v147;
      uint64_t v37 = v148;
      v136 = *v31;
      v136(v147, v28, v148);
      sub_10012A080();
      uint64_t v39 = sub_1000B9244(&qword_10016B068, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
      uint64_t v40 = v143;
      uint64_t v135 = v39;
      uint64_t v41 = sub_100129020();
      v149 = v42;
      swift_release();
      v134 = *v138;
      v134(v38, v37);
      uint64_t v132 = v35;
      v35(v34, v36);
      v133 = *v137;
      v133(v32, v40);
      uint64_t v154 = v41;
      v155 = v149;
      unint64_t v43 = sub_10000822C();
      uint64_t v44 = sub_10012B420();
      uint64_t v46 = v45;
      char v48 = v47 & 1;
      sub_10012B2A0();
      sub_10012B2C0();
      sub_10012B210();
      swift_release();
      uint64_t v49 = sub_10012B3F0();
      uint64_t v51 = v50;
      LOBYTE(v34) = v52;
      swift_release();
      uint64_t v53 = v46;
      uint64_t v28 = v140;
      char v54 = v48;
      uint64_t v27 = v141;
      sub_100008278(v44, v53, v54);
      swift_bridgeObjectRelease();
      uint64_t v55 = sub_10012B360();
      uint64_t v56 = (uint64_t)v152;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v152, 1, 1, v55);
      sub_10012B370();
      double v58 = v57;
      sub_100008278(v49, v51, v34 & 1);
      swift_bridgeObjectRelease();
      uint64_t v59 = v56;
      uint64_t v60 = v151;
      sub_1000C7A48(v59, &qword_10016F610);
      if (v30 <= v58) {
        double v30 = v58;
      }
      unint64_t v26 = v150 + v128;
      uint64_t v23 = v60 - 1;
    }
    while (v23);
    unint64_t v129 = v43;
    uint64_t v131 = v55;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v153 + v122);
    uint64_t v61 = *(void *)(v20 + 16);
    if (v61)
    {
      uint64_t v62 = *(void *)(sub_10012BDF0() - 8);
      unint64_t v114 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      unint64_t v63 = v20 + v114;
      uint64_t v128 = v153 + *(int *)(v121 + 24);
      uint64_t v127 = sub_10012A090();
      uint64_t v126 = *(int *)(v120 + 68);
      uint64_t v64 = *(void *)(v62 + 72);
      uint64_t v123 = v20;
      swift_bridgeObjectRetain();
      double v65 = 0.0;
      uint64_t v130 = v64;
      uint64_t v66 = v132;
      do
      {
        unint64_t v150 = v63;
        uint64_t v151 = v61;
        uint64_t v67 = v142;
        sub_10012BD90();
        uint64_t v68 = v144;
        sub_10012B8F0();
        uint64_t v69 = v145;
        sub_10012CDC0();
        uint64_t v70 = v146;
        v66(v68, v146);
        uint64_t v71 = v147;
        uint64_t v72 = v28;
        uint64_t v73 = v148;
        v136(v147, v72, v148);
        sub_10012A080();
        uint64_t v74 = v143;
        uint64_t v75 = sub_100129020();
        v149 = v76;
        swift_release();
        v134(v71, v73);
        v66(v69, v70);
        v133(v67, v74);
        uint64_t v154 = v75;
        v155 = v149;
        uint64_t v77 = sub_10012B420();
        uint64_t v79 = v78;
        char v81 = v80 & 1;
        sub_10012B2A0();
        sub_10012B2C0();
        sub_10012B210();
        swift_release();
        uint64_t v82 = sub_10012B3F0();
        uint64_t v84 = v83;
        LOBYTE(v71) = v85;
        swift_release();
        LOBYTE(v74) = v71 & 1;
        sub_100008278(v77, v79, v81);
        uint64_t v86 = v151;
        swift_bridgeObjectRelease();
        uint64_t v87 = (uint64_t)v152;
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v152, 1, 1, v131);
        sub_10012B370();
        uint64_t v88 = v130;
        double v90 = v89;
        unint64_t v91 = v150;
        sub_100008278(v82, v84, v74);
        uint64_t v28 = v140;
        swift_bridgeObjectRelease();
        sub_1000C7A48(v87, &qword_10016F610);
        if (v65 <= v90) {
          double v65 = v90;
        }
        unint64_t v63 = v91 + v88;
        uint64_t v61 = v86 - 1;
      }
      while (v61);
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v153 + v122);
      uint64_t v92 = *(void *)(v20 + 16);
      if (v92)
      {
        unint64_t v93 = v20 + v114;
        uint64_t v151 = *(int *)(v120 + 72);
        unint64_t v150 = v153 + *(int *)(v121 + 24);
        v149 = (void (**)(char *, uint64_t))(v115 + 8);
        uint64_t v123 = v20;
        swift_bridgeObjectRetain();
        double v94 = 0.0;
        do
        {
          uint64_t v95 = v124;
          sub_10012BDC0();
          sub_10012BB60();
          (*v149)(v95, v125);
          sub_10012B620();
          uint64_t v96 = sub_10012B430();
          uint64_t v98 = v97;
          char v100 = v99 & 1;
          uint64_t v101 = sub_10012B3F0();
          uint64_t v103 = v102;
          LOBYTE(v95) = v104 & 1;
          sub_100008278(v96, v98, v100);
          swift_bridgeObjectRelease();
          uint64_t v105 = (uint64_t)v152;
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v152, 1, 1, v131);
          sub_10012B370();
          double v107 = v106;
          sub_100008278(v101, v103, (char)v95);
          swift_bridgeObjectRelease();
          sub_1000C7A48(v105, &qword_10016F610);
          if (v94 <= v107) {
            double v94 = v107;
          }
          v93 += v130;
          --v92;
        }
        while (v92);
        swift_bridgeObjectRelease();
        uint64_t v20 = *(void *)(v153 + v122);
        goto LABEL_20;
      }
    }
    else
    {
      double v65 = 0.0;
    }
    double v94 = 0.0;
LABEL_20:
    uint64_t v10 = v118;
    uint64_t v9 = v117;
    uint64_t v8 = v116;
    goto LABEL_21;
  }
  double v65 = 0.0;
  double v30 = 0.0;
  double v94 = 0.0;
LABEL_21:
  uint64_t v154 = v20;
  sub_1000B9108(v153, (uint64_t)v10, (void (*)(void))type metadata accessor for LargeDailyView);
  unint64_t v108 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v109 = (v9 + v108 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v110 = (v109 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v111 = swift_allocObject();
  sub_1000BF4F8((uint64_t)v10, v111 + v108, (void (*)(void))type metadata accessor for LargeDailyView);
  *(double *)(v111 + v109) = v30;
  *(double *)(v111 + v110) = v65;
  *(double *)(v111 + ((v110 + 15) & 0xFFFFFFFFFFFFFFF8)) = v94;
  swift_bridgeObjectRetain();
  sub_1000053D8(&qword_10016D1D8);
  sub_100129330();
  sub_1000053D8(&qword_10016F6C0);
  sub_10000B38C(&qword_10016D2B8, &qword_10016D1D8);
  sub_10000B38C(&qword_10016F6C8, &qword_10016F6C0);
  sub_1000B9244(&qword_10016F628, (void (*)(uint64_t))&type metadata accessor for DailyForecastViewModel);
  return sub_10012B720();
}

uint64_t sub_1000BCD48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v67 = a1;
  uint64_t v65 = a3;
  uint64_t v64 = sub_1000053D8(&qword_10016F630) - 8;
  __chkstk_darwin(v64);
  unint64_t v63 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000053D8(&qword_10016D4C8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v57 = (uint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v62 = (uint64_t)&v56 - v15;
  __chkstk_darwin(v14);
  uint64_t v61 = (char *)&v56 - v16;
  uint64_t v17 = sub_1000053D8(&qword_10016B0B0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (uint64_t *)((char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = sub_1000053D8(&qword_10016B0A0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (uint64_t *)((char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = sub_10012BDF0();
  uint64_t v66 = *(void *)(v23 - 8);
  uint64_t v24 = v66;
  __chkstk_darwin(v23);
  unint64_t v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for DailyViewAttributes() - 8;
  __chkstk_darwin(v60);
  uint64_t v28 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for ModernDailyForecastRowView();
  double v30 = (int *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v56 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v68 = (uint64_t)&v56 - v34;
  uint64_t v59 = a2;
  sub_1000B9108(a2, (uint64_t)v28, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v35(v26, v67, v23);
  uint64_t v36 = a2 + *(int *)(type metadata accessor for LargeDailyView(0) + 20);
  uint64_t v69 = *(void *)v36;
  long long v70 = *(_OWORD *)(v36 + 8);
  sub_1000053D8(&qword_10016B200);
  sub_10012B6F0();
  uint64_t v37 = v71;
  long long v58 = v72;
  *uint64_t v22 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B078);
  swift_storeEnumTagMultiPayload();
  *uint64_t v19 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B088);
  swift_storeEnumTagMultiPayload();
  sub_1000C72E8((uint64_t)v22, (uint64_t)v33, &qword_10016B0A0);
  uint64_t v38 = &v33[v30[7]];
  *(void *)uint64_t v38 = swift_getKeyPath();
  v38[8] = 0;
  uint64_t v39 = (uint64_t *)&v33[v30[8]];
  *uint64_t v39 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B080);
  swift_storeEnumTagMultiPayload();
  sub_1000C72E8((uint64_t)v19, (uint64_t)&v33[v30[9]], &qword_10016B0B0);
  uint64_t v71 = 0x4010000000000000;
  uint64_t v69 = 0x3FF0000000000000;
  sub_10000AB1C();
  sub_10012BA60();
  sub_1000BF4F8((uint64_t)v28, (uint64_t)&v33[v30[11]], (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
  uint64_t v41 = &v33[v30[12]];
  uint64_t v56 = v26;
  v40(v41, v26, v23);
  *(double *)&v33[v30[13]] = a4;
  *(double *)&v33[v30[14]] = a5;
  *(double *)&v33[v30[15]] = a6;
  uint64_t v42 = v30[16];
  uint64_t v43 = (uint64_t)v61;
  uint64_t v44 = &v33[v42];
  *(void *)uint64_t v44 = v37;
  *(_OWORD *)(v44 + 8) = v58;
  sub_1000BF4F8((uint64_t)v33, v68, (void (*)(void))type metadata accessor for ModernDailyForecastRowView);
  v35((char *)v43, v67, v23);
  uint64_t v45 = (uint64_t)v63;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v43, 0, 1, v23);
  uint64_t v46 = v62;
  sub_1000B7F60(*(void *)(v59 + *(int *)(v60 + 28)), v62);
  uint64_t v47 = v45 + *(int *)(v64 + 56);
  sub_1000C30D4(v43, v45, &qword_10016D4C8);
  sub_1000C30D4(v46, v47, &qword_10016D4C8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v23) != 1)
  {
    uint64_t v48 = v57;
    sub_1000C30D4(v45, v57, &qword_10016D4C8);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v47, 1, v23) != 1)
    {
      uint64_t v49 = v56;
      v40(v56, (char *)v47, v23);
      sub_1000B9244(&qword_10016D4E0, (void (*)(uint64_t))&type metadata accessor for DailyForecastViewModel);
      LODWORD(v67) = sub_10012C9E0();
      uint64_t v50 = *(void (**)(char *, uint64_t))(v66 + 8);
      v50(v49, v23);
      sub_1000C7A48(v46, &qword_10016D4C8);
      sub_1000C7A48(v43, &qword_10016D4C8);
      v50((char *)v48, v23);
      sub_1000C7A48(v45, &qword_10016D4C8);
      if (v67) {
        goto LABEL_8;
      }
LABEL_9:
      char v51 = 0;
      goto LABEL_10;
    }
    sub_1000C7A48(v46, &qword_10016D4C8);
    sub_1000C7A48(v43, &qword_10016D4C8);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v48, v23);
LABEL_6:
    sub_1000C7A48(v45, &qword_10016F630);
    goto LABEL_9;
  }
  sub_1000C7A48(v46, &qword_10016D4C8);
  sub_1000C7A48(v43, &qword_10016D4C8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v47, 1, v23) != 1) {
    goto LABEL_6;
  }
  sub_1000C7A48(v45, &qword_10016D4C8);
LABEL_8:
  char v51 = 1;
LABEL_10:
  uint64_t v52 = v68;
  sub_1000B9108(v68, (uint64_t)v33, (void (*)(void))type metadata accessor for ModernDailyForecastRowView);
  uint64_t v53 = v65;
  sub_1000B9108((uint64_t)v33, v65, (void (*)(void))type metadata accessor for ModernDailyForecastRowView);
  uint64_t v54 = v53 + *(int *)(sub_1000053D8(&qword_10016F6D0) + 48);
  *(void *)uint64_t v54 = 0;
  *(unsigned char *)(v54 + 8) = 0;
  *(unsigned char *)(v54 + 9) = v51;
  sub_1000B928C(v52, (void (*)(void))type metadata accessor for ModernDailyForecastRowView);
  return sub_1000B928C((uint64_t)v33, (void (*)(void))type metadata accessor for ModernDailyForecastRowView);
}

uint64_t sub_1000BD55C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BE6D4(0, &qword_10016F6B8, (uint64_t (*)(uint64_t))sub_1000BBEC0, a1);
}

uint64_t sub_1000BD594()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BD5B0@<X0>(unsigned char *a1@<X8>)
{
  *a1 = sub_10012B170();
  uint64_t v3 = sub_1000053D8(&qword_10016F640);
  return sub_1000BD5F4(v1, (uint64_t)&a1[*(int *)(v3 + 44)]);
}

uint64_t sub_1000BD5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000053D8(&qword_10016F648);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v19 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v19 - v14;
  *(void *)uint64_t v15 = sub_10012AF10();
  *((void *)v15 + 1) = 0;
  v15[16] = 1;
  uint64_t v16 = sub_1000053D8(&qword_10016F650);
  sub_1000BD7BC(a1, 0, (uint64_t)&v15[*(int *)(v16 + 44)]);
  *(void *)uint64_t v13 = sub_10012AF10();
  *((void *)v13 + 1) = 0;
  v13[16] = 1;
  sub_1000BD7BC(a1, 1, (uint64_t)&v13[*(int *)(v16 + 44)]);
  sub_1000C30D4((uint64_t)v15, (uint64_t)v10, &qword_10016F648);
  sub_1000C30D4((uint64_t)v13, (uint64_t)v7, &qword_10016F648);
  sub_1000C30D4((uint64_t)v10, a2, &qword_10016F648);
  uint64_t v17 = sub_1000053D8(&qword_10016F658);
  sub_1000C30D4((uint64_t)v7, a2 + *(int *)(v17 + 48), &qword_10016F648);
  sub_1000C7A48((uint64_t)v13, &qword_10016F648);
  sub_1000C7A48((uint64_t)v15, &qword_10016F648);
  sub_1000C7A48((uint64_t)v7, &qword_10016F648);
  return sub_1000C7A48((uint64_t)v10, &qword_10016F648);
}

uint64_t sub_1000BD7BC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v86) = a2;
  uint64_t v99 = a3;
  uint64_t v96 = type metadata accessor for HighTemperatureColumn(0);
  __chkstk_darwin(v96);
  uint64_t v95 = (uint64_t)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000053D8(&qword_10016CDF0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v98 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v97 = (uint64_t)&v75 - v8;
  uint64_t v101 = type metadata accessor for DailyViewAttributes();
  __chkstk_darwin(v101);
  uint64_t v83 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for LowTemperatureColumn(0);
  __chkstk_darwin(v85);
  uint64_t v84 = (uint64_t *)((char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v92 = sub_1000053D8(&qword_10016F660);
  __chkstk_darwin(v92);
  uint64_t v82 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000053D8(&qword_10016CDE8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v94 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v100 = (uint64_t)&v75 - v15;
  uint64_t v87 = sub_1000053D8(&qword_10016F668);
  __chkstk_darwin(v87);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_1000053D8(&qword_10016F670);
  __chkstk_darwin(v88);
  uint64_t v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10012B590();
  uint64_t v77 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v78 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for PrecipitationColumn(0);
  __chkstk_darwin(v80);
  uint64_t v22 = (uint64_t *)((char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = sub_1000053D8(&qword_10016F678);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  unint64_t v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v81 = (uint64_t)&v75 - v27;
  uint64_t v28 = sub_1000053D8(&qword_10016CDE0);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v93 = (uint64_t)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v103 = (uint64_t)&v75 - v31;
  uint64_t v32 = type metadata accessor for ConditionColumn(0);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v75 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_1000053D8(&qword_10016F680);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v75 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_1000053D8(&qword_10016CDD8);
  uint64_t v39 = __chkstk_darwin(v38 - 8);
  uint64_t v91 = (uint64_t)&v75 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v75 - v41;
  uint64_t v43 = type metadata accessor for WeekdayColumn(0);
  uint64_t v44 = __chkstk_darwin(v43 - 8);
  uint64_t v90 = (uint64_t)&v75 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v102 = (uint64_t)&v75 - v46;
  sub_1000B9108(a1, (uint64_t)&v75 - v46, (void (*)(void))type metadata accessor for DailyViewAttributes);
  if (v86)
  {
    uint64_t v47 = 1;
  }
  else
  {
    sub_1000B9108(a1, (uint64_t)v34, (void (*)(void))type metadata accessor for DailyViewAttributes);
    sub_1000B9244(&qword_10016F688, (void (*)(uint64_t))type metadata accessor for ConditionColumn);
    sub_10012B500();
    sub_1000B928C((uint64_t)v34, (void (*)(void))type metadata accessor for ConditionColumn);
    sub_1000C72E8((uint64_t)v37, (uint64_t)v42, &qword_10016F680);
    uint64_t v47 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v42, v47, 1, v35);
  uint64_t v48 = v101;
  BOOL v49 = *(unsigned char *)(a1 + *(int *)(v101 + 32)) == 1;
  double v89 = v42;
  if (v49)
  {
    sub_10012B7A0();
    sub_10012ABC0();
    uint64_t v50 = v112[6];
    char v51 = v113;
    uint64_t v52 = v114;
    LODWORD(v86) = v115;
    uint64_t v76 = v116;
    uint64_t v75 = v117;
    sub_1000B9108(a1, (uint64_t)v22 + *(int *)(v80 + 20), (void (*)(void))type metadata accessor for DailyViewAttributes);
    (*(void (**)(char *, void, uint64_t))(v77 + 104))(v78, enum case for Color.RGBColorSpace.sRGB(_:), v79);
    *uint64_t v22 = sub_10012B5F0();
    sub_1000B9244(&qword_10016F6A8, (void (*)(uint64_t))type metadata accessor for PrecipitationColumn);
    sub_10012B500();
    sub_1000B928C((uint64_t)v22, (void (*)(void))type metadata accessor for PrecipitationColumn);
    uint64_t v53 = v81;
    sub_1000C72E8((uint64_t)v26, v81, &qword_10016F678);
    sub_1000C30D4(v53, (uint64_t)v26, &qword_10016F678);
    *(void *)uint64_t v19 = 0;
    v19[8] = 1;
    *((void *)v19 + 2) = v50;
    v19[24] = v51;
    *((void *)v19 + 4) = v52;
    v19[40] = v86;
    uint64_t v54 = v75;
    *((void *)v19 + 6) = v76;
    *((void *)v19 + 7) = v54;
    uint64_t v55 = sub_1000053D8(&qword_10016F6B0);
    sub_1000C30D4((uint64_t)v26, (uint64_t)&v19[*(int *)(v55 + 48)], &qword_10016F678);
    uint64_t v56 = &v19[*(int *)(v55 + 64)];
    *(void *)uint64_t v56 = 0x4000000000000000;
    v56[8] = 0;
    sub_1000C7A48((uint64_t)v26, &qword_10016F678);
    sub_1000C30D4((uint64_t)v19, (uint64_t)v17, &qword_10016F670);
    swift_storeEnumTagMultiPayload();
    sub_10000B38C(&qword_10016F690, &qword_10016F670);
    sub_10012B0E0();
    uint64_t v48 = v101;
    sub_1000C7A48((uint64_t)v19, &qword_10016F670);
    sub_1000C7A48(v53, &qword_10016F678);
  }
  else
  {
    *(void *)uint64_t v17 = 0;
    v17[8] = 0;
    swift_storeEnumTagMultiPayload();
    sub_10000B38C(&qword_10016F690, &qword_10016F670);
    sub_10012B0E0();
  }
  uint64_t v57 = 1;
  if (*(unsigned char *)(a1 + *(int *)(v48 + 36)) == 1)
  {
    uint64_t v58 = v83;
    sub_1000B9108(a1, v83, (void (*)(void))type metadata accessor for DailyViewAttributes);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v60 = (uint64_t)v84;
    *uint64_t v84 = KeyPath;
    *(unsigned char *)(v60 + 8) = 0;
    uint64_t v61 = v85;
    uint64_t v62 = (uint64_t *)(v60 + *(int *)(v85 + 20));
    *uint64_t v62 = swift_getKeyPath();
    sub_1000053D8(&qword_10016B080);
    swift_storeEnumTagMultiPayload();
    sub_1000BF4F8(v58, v60 + *(int *)(v61 + 24), (void (*)(void))type metadata accessor for DailyViewAttributes);
    sub_1000B9244(&qword_10016F6A0, (void (*)(uint64_t))type metadata accessor for LowTemperatureColumn);
    uint64_t v63 = (uint64_t)v82;
    sub_10012B500();
    sub_1000B928C(v60, (void (*)(void))type metadata accessor for LowTemperatureColumn);
    sub_1000C72E8(v63, v100, &qword_10016F660);
    uint64_t v57 = 0;
  }
  uint64_t v64 = v100;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v100, v57, 1, v92);
  sub_10012B7A0();
  sub_10012ABC0();
  uint64_t v101 = v118;
  LODWORD(v92) = v119;
  uint64_t v88 = v120;
  LODWORD(v87) = v121;
  uint64_t v86 = v122;
  uint64_t v85 = v123;
  uint64_t v65 = v95;
  sub_1000B9108(a1, v95, (void (*)(void))type metadata accessor for DailyViewAttributes);
  sub_1000B9244(&qword_10016F698, (void (*)(uint64_t))type metadata accessor for HighTemperatureColumn);
  uint64_t v66 = (uint64_t)v98;
  sub_10012B500();
  sub_1000B928C(v65, (void (*)(void))type metadata accessor for HighTemperatureColumn);
  uint64_t v67 = v97;
  sub_1000C72E8(v66, v97, &qword_10016CDF0);
  uint64_t v68 = v90;
  sub_1000B9108(v102, v90, (void (*)(void))type metadata accessor for WeekdayColumn);
  v112[0] = v68;
  uint64_t v69 = (uint64_t)v89;
  uint64_t v70 = v91;
  sub_1000C30D4((uint64_t)v89, v91, &qword_10016CDD8);
  v112[1] = v70;
  uint64_t v71 = v103;
  uint64_t v72 = v93;
  sub_1000C30D4(v103, v93, &qword_10016CDE0);
  v112[2] = v72;
  uint64_t v73 = v94;
  sub_1000C30D4(v64, v94, &qword_10016CDE8);
  uint64_t v104 = 0;
  char v105 = 1;
  uint64_t v106 = v101;
  char v107 = v92;
  uint64_t v108 = v88;
  char v109 = v87;
  uint64_t v110 = v86;
  uint64_t v111 = v85;
  v112[3] = v73;
  v112[4] = (uint64_t)&v104;
  sub_1000C30D4(v67, v66, &qword_10016CDF0);
  v112[5] = v66;
  sub_10004C5B4(v112, v99);
  sub_1000C7A48(v67, &qword_10016CDF0);
  sub_1000C7A48(v64, &qword_10016CDE8);
  sub_1000C7A48(v71, &qword_10016CDE0);
  sub_1000C7A48(v69, &qword_10016CDD8);
  sub_1000B928C(v102, (void (*)(void))type metadata accessor for WeekdayColumn);
  sub_1000C7A48(v66, &qword_10016CDF0);
  sub_1000C7A48(v73, &qword_10016CDE8);
  sub_1000C7A48(v72, &qword_10016CDE0);
  sub_1000C7A48(v70, &qword_10016CDD8);
  return sub_1000B928C(v68, (void (*)(void))type metadata accessor for WeekdayColumn);
}

uint64_t sub_1000BE6B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BE6D4@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = sub_10012AFF0();
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = a1;
  sub_1000053D8(a2);
  return a3(v4);
}

uint64_t sub_1000BE738@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for MediumTemperatureDailyView(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000053D8(&qword_10016F610);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(int *)(type metadata accessor for DailyViewAttributes() + 20);
  uint64_t v11 = *(void *)((char *)a1 + v49);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v45 = v5;
    uint64_t v46 = v6;
    uint64_t v47 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v48 = a2;
    uint64_t v13 = *(void *)(sub_10012BDF0() - 8);
    uint64_t v14 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v44[1] = v4;
    uint64_t v15 = *(void *)(v13 + 72);
    uint64_t v50 = v11;
    uint64_t v51 = v15;
    swift_bridgeObjectRetain();
    double v16 = 0.0;
    do
    {
      uint64_t v17 = a1;
      uint64_t v18 = sub_1000DC9BC(v14, a1);
      uint64_t v20 = v19;
      char v22 = v21 & 1;
      uint64_t v23 = sub_10012B360();
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 1, 1, v23);
      sub_10012B370();
      double v25 = v24;
      uint64_t v26 = v18;
      a1 = v17;
      sub_100008278(v26, v20, v22);
      swift_bridgeObjectRelease();
      sub_1000C7A48((uint64_t)v10, &qword_10016F610);
      if (v16 <= v25) {
        double v16 = v25;
      }
      v14 += v51;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)((char *)v17 + v49);
    uint64_t v27 = *(void *)(v11 + 16);
    if (v27)
    {
      uint64_t v28 = *(void *)(sub_10012BDF0() - 8);
      uint64_t v29 = v11 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
      uint64_t v30 = *(void *)(v28 + 72);
      uint64_t v50 = v11;
      uint64_t v51 = v30;
      swift_bridgeObjectRetain();
      double v31 = 0.0;
      do
      {
        uint64_t v32 = sub_1000DC9D4(v29, a1);
        uint64_t v34 = v33;
        char v36 = v35 & 1;
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 1, 1, v23);
        sub_10012B370();
        double v38 = v37;
        uint64_t v39 = v32;
        a1 = v17;
        sub_100008278(v39, v34, v36);
        swift_bridgeObjectRelease();
        sub_1000C7A48((uint64_t)v10, &qword_10016F610);
        if (v31 <= v38) {
          double v31 = v38;
        }
        v29 += v51;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)((char *)v17 + v49);
    }
    else
    {
      double v31 = 0.0;
    }
    uint64_t v7 = v47;
    uint64_t v5 = v45;
    uint64_t v6 = v46;
  }
  else
  {
    double v16 = 0.0;
    double v31 = 0.0;
  }
  uint64_t v52 = v11;
  sub_1000B9108((uint64_t)a1, (uint64_t)v7, (void (*)(void))type metadata accessor for MediumTemperatureDailyView);
  unint64_t v40 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v41 = (v6 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = swift_allocObject();
  sub_1000BF4F8((uint64_t)v7, v42 + v40, (void (*)(void))type metadata accessor for MediumTemperatureDailyView);
  *(double *)(v42 + v41) = v16;
  *(double *)(v42 + ((v41 + 15) & 0xFFFFFFFFFFFFFFF8)) = v31;
  swift_bridgeObjectRetain();
  sub_1000053D8(&qword_10016D1D8);
  sub_100129330();
  sub_1000053D8(&qword_10016F618);
  sub_10000B38C(&qword_10016D2B8, &qword_10016D1D8);
  sub_10000B38C(&qword_10016F620, &qword_10016F618);
  sub_1000B9244(&qword_10016F628, (void (*)(uint64_t))&type metadata accessor for DailyForecastViewModel);
  return sub_10012B720();
}

uint64_t sub_1000BEC70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v54 = a2;
  uint64_t v60 = a3;
  uint64_t v61 = a1;
  uint64_t v58 = sub_1000053D8(&qword_10016F630) - 8;
  __chkstk_darwin(v58);
  uint64_t v56 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000053D8(&qword_10016D4C8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v52 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v57 = (uint64_t)&v48 - v13;
  __chkstk_darwin(v12);
  uint64_t v55 = (char *)&v48 - v14;
  uint64_t v15 = sub_10012BDF0();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DailyViewAttributes();
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  char v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DailyTemperatureForecastRowView();
  double v24 = (int *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v48 - v28;
  sub_1000B9108(a2, (uint64_t)v22, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v53(v18, v61, v15);
  *(void *)&v27[v24[10]] = swift_getKeyPath();
  sub_1000053D8(&qword_10016B088);
  swift_storeEnumTagMultiPayload();
  sub_1000BF4F8((uint64_t)v22, (uint64_t)v27, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v30 = &v27[v24[7]];
  uint64_t v50 = v18;
  uint64_t v51 = v16;
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v49(v30, v18, v15);
  *(double *)&v27[v24[8]] = a4;
  *(double *)&v27[v24[9]] = a5;
  double v31 = &v27[v24[11]];
  *(void *)double v31 = swift_getKeyPath();
  v31[8] = 0;
  uint64_t v32 = (uint64_t *)&v27[v24[12]];
  *uint64_t v32 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B080);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = (uint64_t)v56;
  uint64_t v62 = 0x3FF0000000000000;
  uint64_t v63 = 0x4010000000000000;
  sub_10000AB1C();
  sub_10012BA60();
  uint64_t v59 = v29;
  sub_1000BF4F8((uint64_t)v27, (uint64_t)v29, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
  uint64_t v34 = (uint64_t)v55;
  v53(v55, v61, v15);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v34, 0, 1, v15);
  uint64_t v35 = *(int *)(v20 + 28);
  uint64_t v36 = v57;
  sub_1000B7F60(*(void *)(v54 + v35), v57);
  uint64_t v37 = v33 + *(int *)(v58 + 56);
  sub_1000C30D4(v34, v33, &qword_10016D4C8);
  sub_1000C30D4(v36, v37, &qword_10016D4C8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v33, 1, v15) != 1)
  {
    uint64_t v38 = v52;
    sub_1000C30D4(v33, v52, &qword_10016D4C8);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v15) != 1)
    {
      uint64_t v39 = v50;
      v49(v50, (char *)v37, v15);
      sub_1000B9244(&qword_10016D4E0, (void (*)(uint64_t))&type metadata accessor for DailyForecastViewModel);
      char v40 = sub_10012C9E0();
      unint64_t v41 = *(void (**)(char *, uint64_t))(v51 + 8);
      v41(v39, v15);
      sub_1000C7A48(v36, &qword_10016D4C8);
      sub_1000C7A48(v34, &qword_10016D4C8);
      v41((char *)v38, v15);
      sub_1000C7A48(v33, &qword_10016D4C8);
      if (v40) {
        goto LABEL_8;
      }
LABEL_9:
      char v43 = 0;
      char v42 = 1;
      goto LABEL_10;
    }
    sub_1000C7A48(v36, &qword_10016D4C8);
    sub_1000C7A48(v34, &qword_10016D4C8);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v38, v15);
LABEL_6:
    sub_1000C7A48(v33, &qword_10016F630);
    goto LABEL_9;
  }
  sub_1000C7A48(v36, &qword_10016D4C8);
  sub_1000C7A48(v34, &qword_10016D4C8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v15) != 1) {
    goto LABEL_6;
  }
  sub_1000C7A48(v33, &qword_10016D4C8);
LABEL_8:
  char v42 = 0;
  char v43 = 1;
LABEL_10:
  uint64_t v44 = (uint64_t)v59;
  sub_1000B9108((uint64_t)v59, (uint64_t)v27, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
  uint64_t v45 = v60;
  sub_1000B9108((uint64_t)v27, v60, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
  uint64_t v46 = v45 + *(int *)(sub_1000053D8(&qword_10016F638) + 48);
  *(void *)uint64_t v46 = 0;
  *(unsigned char *)(v46 + 8) = v42;
  *(unsigned char *)(v46 + 9) = v43;
  sub_1000B928C(v44, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
  return sub_1000B928C((uint64_t)v27, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
}

uint64_t sub_1000BF324@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BE6D4(1, &qword_10016F608, (uint64_t (*)(uint64_t))sub_1000BE738, a1);
}

uint64_t sub_1000BF35C()
{
  type metadata accessor for MediumTemperatureDailyView(0);
  sub_1000C8394();
  sub_10012C800();
  sub_1000472C0();
  sub_10000B424();
  v3();
  type metadata accessor for DailyViewAttributes();
  sub_1000C85CC();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = sub_1000053D8(&qword_10016B060);
  if (!sub_1000C8518(v4))
  {
    sub_1000472C0();
    sub_1000C8590();
    v5();
  }
  if (!sub_1000C84F4())
  {
    sub_1000472C0();
    sub_1000C8590();
    v6();
  }
  sub_1000C859C();
  sub_10012B390();
  sub_1000472C0();
  uint64_t v7 = sub_1000C8450();
  v8(v7);

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000BF4F8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000472C0();
  sub_100063AE4();
  v4();
  return a2;
}

uint64_t sub_1000BF558()
{
  uint64_t v3 = sub_1000C854C();
  uint64_t v4 = type metadata accessor for MediumTemperatureDailyView(v3);
  sub_100047198(v4);
  sub_1000C8618();
  double v7 = *(double *)(v1 + v6);
  double v9 = *(double *)(v1 + v8);

  return sub_1000BEC70(v0, v1 + v5, v2, v7, v9);
}

uint64_t sub_1000BF5D4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for WeekdayColumn(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = type metadata accessor for DailyViewAttributes();
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B9108(v2, (uint64_t)v10, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v11 = sub_10012B000();
  sub_1000B9108(v2, (uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for WeekdayColumn);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  sub_1000BF4F8((uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (void (*)(void))type metadata accessor for WeekdayColumn);
  uint64_t v14 = (void *)((char *)a1 + *(int *)(sub_1000053D8(&qword_10016FA00) + 48));
  uint64_t *v14 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B9E0);
  swift_storeEnumTagMultiPayload();
  *a1 = *(void *)&v10[*(int *)(v8 + 28)];
  uint64_t v15 = *(void *)&v10[*(int *)(v8 + 76)];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t result = sub_1000B928C((uint64_t)v10, (void (*)(void))type metadata accessor for DailyViewAttributes);
  a1[1] = v15;
  a1[2] = v11;
  a1[3] = sub_1000C7510;
  a1[4] = v13;
  return result;
}

uint64_t sub_1000BF7EC()
{
  sub_10012BCE0();
  sub_10000822C();
  uint64_t v0 = sub_10012B420();
  uint64_t v2 = v1;
  char v4 = v3 & 1;
  sub_10012B5C0();
  uint64_t v5 = sub_10012B3A0();
  uint64_t v7 = v6;
  char v9 = v8;
  swift_release();
  sub_100008278(v0, v2, v4);
  swift_bridgeObjectRelease();
  type metadata accessor for DailyViewAttributes();
  uint64_t v10 = sub_10012B3F0();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  sub_100008278(v5, v7, v9 & 1);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_10012B3B0();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  sub_100008278(v10, v12, v14);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_10012B350();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  sub_100008278(v15, v17, v19);
  swift_bridgeObjectRelease();
  sub_10012BD20();
  uint64_t v25 = sub_10012B3C0();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  sub_100008278(v20, v22, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10012B540();
  sub_100008278(v25, v27, v29);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BFA44@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ConditionColumn(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = type metadata accessor for DailyViewAttributes();
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B9108(v2, (uint64_t)v10, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v11 = sub_10012AFF0();
  sub_1000B9108(v2, (uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for ConditionColumn);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  sub_1000BF4F8((uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (void (*)(void))type metadata accessor for ConditionColumn);
  char v14 = (void *)((char *)a1 + *(int *)(sub_1000053D8(&qword_10016F9E0) + 48));
  uint64_t *v14 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B9E0);
  swift_storeEnumTagMultiPayload();
  *a1 = *(void *)&v10[*(int *)(v8 + 28)];
  uint64_t v15 = *(void *)&v10[*(int *)(v8 + 76)];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t result = sub_1000B928C((uint64_t)v10, (void (*)(void))type metadata accessor for DailyViewAttributes);
  a1[1] = v15;
  a1[2] = v11;
  a1[3] = sub_1000C6DBC;
  a1[4] = v13;
  return result;
}

uint64_t sub_1000BFC5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = sub_10012AFB0();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  char v42 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10012BBA0();
  uint64_t v5 = *(void *)(v46 - 8);
  uint64_t v6 = __chkstk_darwin(v46);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v38 = sub_10012BAB0();
  uint64_t v35 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  unint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_1000053D8(&qword_10016B1E8);
  __chkstk_darwin(v37);
  uint64_t v36 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_1000053D8(&qword_10016F9E8);
  __chkstk_darwin(v41);
  uint64_t v39 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1;
  sub_10012BDC0();
  sub_10012BB60();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v16 = v46;
  v15(v10, v46);
  sub_10012BDC0();
  sub_10012BB30();
  v15(v8, v16);
  sub_10012BAA0();
  uint64_t v17 = *(void *)(v40 + *(int *)(type metadata accessor for DailyViewAttributes() + 72));
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = v35;
  uint64_t v19 = (uint64_t)v36;
  uint64_t v21 = v38;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v36, v12, v38);
  uint64_t v22 = (uint64_t *)(v19 + *(int *)(v37 + 36));
  *uint64_t v22 = KeyPath;
  v22[1] = v17;
  char v23 = *(void (**)(char *, uint64_t))(v20 + 8);
  swift_retain();
  v23(v12, v21);
  sub_10012BDC0();
  uint64_t v24 = sub_10012BB50();
  uint64_t v26 = v25;
  v15(v10, v46);
  uint64_t v47 = v24;
  uint64_t v48 = v26;
  sub_10000822C();
  uint64_t v27 = sub_10012B420();
  uint64_t v29 = v28;
  LOBYTE(v5) = v30 & 1;
  sub_1000C6E78();
  uint64_t v31 = (uint64_t)v39;
  sub_10012B490();
  sub_100008278(v27, v29, v5);
  swift_bridgeObjectRelease();
  sub_1000C7A48(v19, &qword_10016B1E8);
  uint64_t v32 = v42;
  sub_10012AFA0();
  sub_10012AC20();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v45);
  return sub_1000C7A48(v31, &qword_10016F9E8);
}

uint64_t sub_1000C00D8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PrecipitationColumn(0);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = type metadata accessor for DailyViewAttributes();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B9108(v2 + *(int *)(v5 + 28), (uint64_t)v11, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v12 = sub_10012B000();
  sub_1000B9108(v2, (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for PrecipitationColumn);
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = swift_allocObject();
  sub_1000BF4F8((uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (void (*)(void))type metadata accessor for PrecipitationColumn);
  uint64_t v15 = (void *)((char *)a1 + *(int *)(sub_1000053D8(qword_10016FA20) + 48));
  *uint64_t v15 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B9E0);
  swift_storeEnumTagMultiPayload();
  *a1 = *(void *)&v11[*(int *)(v9 + 28)];
  uint64_t v16 = *(void *)&v11[*(int *)(v9 + 76)];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t result = sub_1000B928C((uint64_t)v11, (void (*)(void))type metadata accessor for DailyViewAttributes);
  a1[1] = v16;
  a1[2] = v12;
  a1[3] = sub_1000C74AC;
  a1[4] = v14;
  return result;
}

double sub_1000C02F8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10012BBA0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012BDC0();
  char v6 = sub_10012BB70();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    sub_10012BCF0();
    *(void *)&long long v43 = sub_10012CC40(1);
    *((void *)&v43 + 1) = v7;
    sub_10000822C();
    uint64_t v8 = sub_10012B420();
    uint64_t v10 = v9;
    char v12 = v11 & 1;
    uint64_t v13 = sub_10012B3A0();
    uint64_t v15 = v14;
    char v17 = v16 & 1;
    sub_100008278(v8, v10, v12);
    swift_bridgeObjectRelease();
    type metadata accessor for PrecipitationColumn(0);
    type metadata accessor for DailyViewAttributes();
    uint64_t v18 = sub_10012B3F0();
    uint64_t v20 = v19;
    char v22 = v21 & 1;
    sub_100008278(v13, v15, v17);
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_10012B3B0();
    uint64_t v25 = v24;
    char v27 = v26 & 1;
    sub_100008278(v18, v20, v22);
    swift_bridgeObjectRelease();
    sub_10012B2A0();
    uint64_t v28 = sub_10012B350();
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33 & 1;
    sub_100008278(v23, v25, v27);
    swift_bridgeObjectRelease();
    *(void *)&long long v39 = v28;
    *((void *)&v39 + 1) = v30;
    uint64_t v40 = v34;
    uint64_t v41 = v32;
    char v42 = 0;
  }
  else
  {
    long long v39 = xmmword_100133D30;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    char v42 = 1;
  }
  sub_10012B0E0();
  double result = *(double *)&v43;
  long long v36 = v44;
  char v37 = v45;
  *(_OWORD *)a1 = v43;
  *(_OWORD *)(a1 + 16) = v36;
  *(unsigned char *)(a1 + 32) = v37;
  return result;
}

uint64_t sub_1000C05B8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for HighTemperatureColumn(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = type metadata accessor for DailyViewAttributes();
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B9108(v2, (uint64_t)v10, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v11 = sub_10012B010();
  sub_1000B9108(v2, (uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for HighTemperatureColumn);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  sub_1000BF4F8((uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (void (*)(void))type metadata accessor for HighTemperatureColumn);
  uint64_t v14 = (void *)((char *)a1 + *(int *)(sub_1000053D8(&qword_10016FA00) + 48));
  uint64_t *v14 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B9E0);
  swift_storeEnumTagMultiPayload();
  *a1 = *(void *)&v10[*(int *)(v8 + 28)];
  uint64_t v15 = *(void *)&v10[*(int *)(v8 + 76)];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t result = sub_1000B928C((uint64_t)v10, (void (*)(void))type metadata accessor for DailyViewAttributes);
  a1[1] = v15;
  a1[2] = v11;
  a1[3] = sub_1000C70C0;
  a1[4] = v13;
  return result;
}

uint64_t sub_1000C07D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = a3;
  unint64_t v72 = sub_10012B940();
  uint64_t v5 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000053D8(&qword_10016C058);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10012CDD0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v65 - v16;
  uint64_t v18 = sub_1000053D8(&qword_10016B060);
  uint64_t v69 = *(void *)(v18 - 8);
  uint64_t v70 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000053D8(&qword_10016FA08);
  __chkstk_darwin(v21 - 8);
  uint64_t v73 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = a1;
  uint64_t v68 = v20;
  sub_10012BD90();
  uint64_t v71 = type metadata accessor for DailyViewAttributes();
  uint64_t v23 = *(int *)(v71 + 52);
  uint64_t v75 = a2;
  if (*(unsigned char *)(a2 + v23) == 1) {
    sub_10012CC90();
  }
  else {
    sub_10012CCA0();
  }
  uint64_t v24 = sub_1001293A0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 1, 1, v24);
  sub_10012B900();
  swift_bridgeObjectRelease();
  sub_1000C7A48((uint64_t)v10, &qword_10016C058);
  sub_10012CDC0();
  uint64_t v67 = *(void (**)(char *, uint64_t))(v12 + 8);
  v67(v17, v11);
  uint64_t v25 = v15;
  unint64_t v26 = v72;
  (*(void (**)(char *, void, unint64_t))(v5 + 104))(v7, enum case for WeatherFormatPlaceholder.none(_:), v72);
  sub_10012A090();
  sub_10012A080();
  sub_1000B9244(&qword_10016B068, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  uint64_t v27 = v70;
  uint64_t v28 = v68;
  uint64_t v66 = sub_100129020();
  uint64_t v30 = v29;
  swift_release();
  (*(void (**)(char *, unint64_t))(v5 + 8))(v7, v26);
  v67(v25, v11);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v28, v27);
  uint64_t v79 = v66;
  uint64_t v80 = v30;
  unint64_t v72 = sub_10000822C();
  uint64_t v31 = sub_10012B420();
  uint64_t v33 = v32;
  char v35 = v34 & 1;
  sub_10012B5C0();
  uint64_t v36 = sub_10012B3A0();
  uint64_t v38 = v37;
  char v40 = v39;
  swift_release();
  sub_100008278(v31, v33, v35);
  swift_bridgeObjectRelease();
  uint64_t v41 = sub_10012B3F0();
  uint64_t v43 = v42;
  char v45 = v44 & 1;
  sub_100008278(v36, v38, v40 & 1);
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_10012B3B0();
  uint64_t v48 = v47;
  char v50 = v49 & 1;
  sub_100008278(v41, v43, v45);
  swift_bridgeObjectRelease();
  sub_10012B2A0();
  uint64_t v51 = sub_10012B350();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  char v57 = v56 & 1;
  sub_100008278(v46, v48, v50);
  swift_bridgeObjectRelease();
  uint64_t v79 = v51;
  uint64_t v80 = v53;
  char v81 = v57;
  uint64_t v82 = v55;
  uint64_t v77 = sub_1000C0DEC(v74);
  uint64_t v78 = v58;
  uint64_t v59 = sub_10012B420();
  uint64_t v61 = v60;
  LOBYTE(v38) = v62 & 1;
  uint64_t v63 = (uint64_t)v73;
  sub_10012B490();
  sub_100008278(v59, v61, v38);
  swift_bridgeObjectRelease();
  sub_100008278(v51, v53, v57);
  swift_bridgeObjectRelease();
  return sub_1000C72E8(v63, v76, &qword_10016FA08);
}

uint64_t sub_1000C0DEC(uint64_t a1)
{
  uint64_t v2 = sub_10012B940();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10012CDD0();
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000053D8(&qword_10016B060);
  uint64_t v27 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10016AEE8 != -1) {
    swift_once();
  }
  uint64_t v12 = (objc_class *)(id)qword_100181E30;
  v25._countAndFlagsBits = 0x800000010013BA50;
  v29._object = (void *)0x800000010013BA30;
  v29._countAndFlagsBits = 0xD000000000000011;
  v30.value._countAndFlagsBits = 0;
  v30.value._object = 0;
  v13.super.isa = v12;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  uint64_t v14 = sub_100129180(v29, v30, v13, v31, v25);
  v26[2] = v15;
  void v26[3] = v14;

  sub_1000053D8(&qword_10016EE28);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100130850;
  v26[1] = a1;
  sub_10012BD90();
  sub_10012B8F0();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for WeatherFormatPlaceholder.none(_:), v2);
  sub_10012A090();
  sub_10012A080();
  sub_1000B9244(&qword_10016B068, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  uint64_t v17 = sub_100129020();
  v26[0] = v18;
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000ABC9C();
  *(void *)(v16 + 64) = v19;
  uint64_t v20 = v26[0];
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v20;
  uint64_t v21 = sub_10012BD00();
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v19;
  *(void *)(v16 + 72) = v21;
  *(void *)(v16 + 80) = v22;
  uint64_t v23 = sub_10012CA70();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1000C11D0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LowTemperatureColumn(0);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = type metadata accessor for DailyViewAttributes();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B9108(v2 + *(int *)(v5 + 32), (uint64_t)v11, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v12 = sub_10012B010();
  sub_1000B9108(v2, (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for LowTemperatureColumn);
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = swift_allocObject();
  sub_1000BF4F8((uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, (void (*)(void))type metadata accessor for LowTemperatureColumn);
  uint64_t v15 = (void *)((char *)a1 + *(int *)(sub_1000053D8(&qword_10016FA10) + 48));
  *uint64_t v15 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B9E0);
  swift_storeEnumTagMultiPayload();
  *a1 = *(void *)&v11[*(int *)(v9 + 28)];
  uint64_t v16 = *(void *)&v11[*(int *)(v9 + 76)];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t result = sub_1000B928C((uint64_t)v11, (void (*)(void))type metadata accessor for DailyViewAttributes);
  a1[1] = v16;
  a1[2] = v12;
  a1[3] = sub_1000C72BC;
  a1[4] = v14;
  return result;
}

uint64_t sub_1000C13F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v99 = a3;
  uint64_t v5 = type metadata accessor for LowTemperatureColumn(0);
  __chkstk_darwin(v5);
  uint64_t v97 = (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10012B940();
  uint64_t v94 = *(void *)(v7 - 8);
  unint64_t v95 = v7;
  __chkstk_darwin(v7);
  uint64_t v93 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000053D8(&qword_10016C058);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10012AFD0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v84 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v83 = (uint64_t)&v82 - v17;
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v82 - v18;
  uint64_t v92 = sub_10012CDD0();
  uint64_t v88 = *(void *)(v92 - 8);
  uint64_t v20 = __chkstk_darwin(v92);
  uint64_t v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v82 - v23;
  uint64_t v91 = sub_1000053D8(&qword_10016B060);
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v26 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1000053D8(&qword_10016FA18);
  __chkstk_darwin(v27 - 8);
  uint64_t v96 = (char *)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v89 = v26;
  uint64_t v98 = a1;
  sub_10012BD70();
  sub_10008F524((uint64_t)v19);
  uint64_t v85 = v13;
  Swift::String v29 = *(uint64_t (**)(char *, uint64_t))(v13 + 88);
  uint64_t v86 = v12;
  int v30 = v29(v19, v12);
  uint64_t v100 = a2;
  uint64_t v101 = v5;
  if (v30 != enum case for ColorSchemeContrast.standard(_:))
  {
    if (v30 == enum case for ColorSchemeContrast.increased(_:)) {
      goto LABEL_7;
    }
    uint64_t v32 = v100 + *(int *)(v101 + 24);
    LOBYTE(v32) = *(unsigned char *)(v32 + *(int *)(type metadata accessor for DailyViewAttributes() + 56));
    (*(void (**)(char *, uint64_t))(v85 + 8))(v19, v86);
    if ((v32 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    sub_10012CCA0();
    goto LABEL_8;
  }
  uint64_t v31 = a2 + *(int *)(v5 + 24);
  if (*(unsigned char *)(v31 + *(int *)(type metadata accessor for DailyViewAttributes() + 56)) == 1) {
    goto LABEL_6;
  }
LABEL_7:
  sub_10012CC90();
LABEL_8:
  uint64_t v33 = sub_1001293A0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v11, 1, 1, v33);
  sub_10012B900();
  swift_bridgeObjectRelease();
  sub_1000C7A48((uint64_t)v11, &qword_10016C058);
  sub_10012CDC0();
  uint64_t v88 = *(void *)(v88 + 8);
  char v34 = v24;
  char v35 = v22;
  uint64_t v36 = v92;
  ((void (*)(char *, uint64_t))v88)(v34, v92);
  uint64_t v38 = v93;
  uint64_t v37 = v94;
  unint64_t v39 = v95;
  (*(void (**)(char *, void, unint64_t))(v94 + 104))(v93, enum case for WeatherFormatPlaceholder.none(_:), v95);
  sub_10012A090();
  sub_10012A080();
  sub_1000B9244(&qword_10016B068, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  uint64_t v40 = v91;
  uint64_t v41 = v89;
  uint64_t v42 = sub_100129020();
  uint64_t v87 = v43;
  swift_release();
  (*(void (**)(char *, unint64_t))(v37 + 8))(v38, v39);
  ((void (*)(char *, uint64_t))v88)(v35, v36);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v41, v40);
  uint64_t v104 = (char *)v42;
  uint64_t v105 = v87;
  unint64_t v95 = sub_10000822C();
  uint64_t v44 = sub_10012B420();
  uint64_t v46 = v45;
  LOBYTE(v35) = v47 & 1;
  sub_10012B5C0();
  uint64_t v48 = sub_10012B3A0();
  uint64_t v50 = v49;
  LOBYTE(v36) = v51;
  swift_release();
  LOBYTE(v42) = v36 & 1;
  sub_100008278(v44, v46, (char)v35);
  swift_bridgeObjectRelease();
  uint64_t v52 = v100;
  type metadata accessor for DailyViewAttributes();
  sub_10012B210();
  uint64_t v53 = sub_10012B3F0();
  uint64_t v55 = v54;
  LOBYTE(v46) = v56;
  swift_release();
  uint64_t v57 = v48;
  uint64_t v58 = v52;
  sub_100008278(v57, v50, v42);
  swift_bridgeObjectRelease();
  sub_10012B2A0();
  uint64_t v93 = (char *)sub_10012B350();
  uint64_t v94 = v59;
  uint64_t v61 = v60;
  char v63 = v62;
  sub_100008278(v53, v55, v46 & 1);
  swift_bridgeObjectRelease();
  uint64_t v64 = *(void *)v58;
  LOBYTE(v55) = *(unsigned char *)(v58 + 8);
  sub_10000886C(*(void *)v58, v55);
  LOBYTE(v37) = sub_10008F2A4(v64, v55);
  sub_100008BF8(v64, v55);
  uint64_t v65 = v97;
  sub_1000B9108(v58, v97, (void (*)(void))type metadata accessor for LowTemperatureColumn);
  if (v37)
  {
    sub_1000B928C(v65, (void (*)(void))type metadata accessor for LowTemperatureColumn);
    double v66 = 1.0;
  }
  else
  {
    uint64_t v67 = v83;
    sub_10008F524(v83);
    uint64_t v68 = v85;
    uint64_t v69 = v84;
    uint64_t v70 = v86;
    (*(void (**)(char *, void, uint64_t))(v85 + 104))(v84, enum case for ColorSchemeContrast.increased(_:), v86);
    char v71 = sub_10012AFC0();
    unint64_t v72 = *(void (**)(char *, uint64_t))(v68 + 8);
    v72(v69, v70);
    v72((char *)v67, v70);
    sub_1000B928C(v65, (void (*)(void))type metadata accessor for LowTemperatureColumn);
    double v66 = 0.6;
    if (v71) {
      double v66 = 1.0;
    }
  }
  uint64_t v104 = v93;
  uint64_t v105 = v61;
  char v106 = v63 & 1;
  uint64_t v101 = v61;
  uint64_t v73 = (uint64_t)v93;
  uint64_t v107 = v94;
  double v108 = v66;
  uint64_t v102 = sub_1000C1D5C(v98);
  uint64_t v103 = v74;
  uint64_t v75 = sub_10012B420();
  uint64_t v77 = v76;
  char v79 = v78 & 1;
  sub_1000053D8(&qword_10016C4D8);
  sub_10003BE80();
  uint64_t v80 = (uint64_t)v96;
  sub_10012B490();
  sub_100008278(v75, v77, v79);
  swift_bridgeObjectRelease();
  sub_100008278(v73, v101, v63 & 1);
  swift_bridgeObjectRelease();
  return sub_1000C72E8(v80, v99, &qword_10016FA18);
}

uint64_t sub_1000C1D5C(uint64_t a1)
{
  uint64_t v2 = sub_10012B940();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10012CDD0();
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000053D8(&qword_10016B060);
  uint64_t v27 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10016AEE8 != -1) {
    swift_once();
  }
  uint64_t v12 = (objc_class *)(id)qword_100181E30;
  v25._countAndFlagsBits = 0x800000010013BB50;
  v29._object = (void *)0x800000010013BB30;
  v29._countAndFlagsBits = 0xD000000000000010;
  v30.value._countAndFlagsBits = 0;
  v30.value._object = 0;
  v13.super.isa = v12;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  uint64_t v14 = sub_100129180(v29, v30, v13, v31, v25);
  v26[2] = v15;
  void v26[3] = v14;

  sub_1000053D8(&qword_10016EE28);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100130850;
  v26[1] = a1;
  sub_10012BD70();
  sub_10012B8F0();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for WeatherFormatPlaceholder.none(_:), v2);
  sub_10012A090();
  sub_10012A080();
  sub_1000B9244(&qword_10016B068, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  uint64_t v17 = sub_100129020();
  v26[0] = v18;
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000ABC9C();
  *(void *)(v16 + 64) = v19;
  uint64_t v20 = v26[0];
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v20;
  uint64_t v21 = sub_10012BD00();
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v19;
  *(void *)(v16 + 72) = v21;
  *(void *)(v16 + 80) = v22;
  uint64_t v23 = sub_10012CA70();
  swift_bridgeObjectRelease();
  return v23;
}

double sub_1000C2140()
{
  uint64_t v0 = sub_10012B2D0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008F590((uint64_t)v3);
  sub_10012B1D0();
  double v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t sub_1000C2234@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_100005470(&qword_10016D1D8);
  uint64_t v6 = sub_100129330();
  uint64_t v7 = *(void *)(a1 + 16);
  sub_10012AC90();
  sub_100005470(&qword_10016FAC8);
  swift_getTupleTypeMetadata2();
  uint64_t v24 = v5;
  uint64_t v25 = v6;
  uint64_t v26 = sub_10012B7E0();
  uint64_t v27 = sub_10000B38C(&qword_10016D2B8, &qword_10016D1D8);
  uint64_t v28 = sub_1000B9244(&qword_10016D2B0, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_10012B730();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v8 = sub_10012B6D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v19[-v13];
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v20 = v7;
  uint64_t v21 = v15;
  uint64_t v22 = v2;
  sub_10012B6C0();
  swift_getWitnessTable();
  uint64_t v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16);
  v16(v14, v12, v8);
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  v17(v12, v8);
  v16(a2, v14, v8);
  return ((uint64_t (*)(unsigned char *, uint64_t))v17)(v14, v8);
}

uint64_t sub_1000C250C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v29 = a2;
  uint64_t v30 = type metadata accessor for Column();
  uint64_t v5 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v7 = (char *)v28 - v6;
  uint64_t v8 = sub_100005470(&qword_10016D1D8);
  v28[3] = v8;
  uint64_t v9 = sub_100129330();
  v28[2] = v9;
  sub_10012AC90();
  sub_100005470(&qword_10016FAC8);
  swift_getTupleTypeMetadata2();
  uint64_t v10 = sub_10012B7E0();
  v28[0] = v10;
  uint64_t v11 = sub_10000B38C(&qword_10016D2B8, &qword_10016D1D8);
  v28[1] = v11;
  uint64_t v12 = sub_1000B9244(&qword_10016D2B0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  uint64_t v38 = v12;
  uint64_t v13 = sub_10012B730();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)v28 - v18;
  uint64_t v34 = *a1;
  uint64_t v20 = v30;
  (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 16))(v7, a1, v30);
  unint64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v31;
  *(void *)(v22 + 16) = v29;
  *(void *)(v22 + 24) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v22 + v21, v7, v20);
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1000B9244(&qword_10016F628, (void (*)(uint64_t))&type metadata accessor for DailyForecastViewModel);
  sub_10012B720();
  uint64_t v33 = WitnessTable;
  swift_getWitnessTable();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v25(v19, v17, v13);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v17, v13);
  v25(v32, v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v26)(v19, v13);
}

uint64_t sub_1000C28F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v66 = a1;
  uint64_t v55 = sub_10012BDF0();
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v50 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_1000053D8(&qword_10016F630) - 8;
  __chkstk_darwin(v57);
  char v56 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000053D8(&qword_10016D4C8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  char v51 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v53 = (char *)&v50 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v50 - v15;
  uint64_t v16 = *(void *)(a3 - 8);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10012AC90();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v50 - v24;
  (*(void (**)(uint64_t))(a2 + 24))(v66);
  uint64_t v26 = v64;
  type metadata accessor for Column();
  sub_1000C2140();
  sub_10012B7A0();
  sub_10012B550();
  uint64_t v27 = v54;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a3);
  uint64_t v28 = v55;
  v73[2] = v26;
  v73[3] = &protocol witness table for _FlexFrameLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  char v63 = v25;
  uint64_t v30 = v25;
  uint64_t v31 = (uint64_t)v53;
  uint64_t v59 = v29;
  v29(v30, v23, v19);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v20 + 8);
  uint64_t v60 = v23;
  uint64_t v58 = v19;
  uint64_t v64 = v20 + 8;
  char v62 = v32;
  v32(v23, v19);
  uint64_t v33 = (uint64_t)v56;
  uint64_t v34 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v52, v66, v28);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v34, 0, 1, v28);
  uint64_t v35 = *(void *)a2;
  uint64_t v36 = v34;
  sub_1000B7F60(v35, v31);
  uint64_t v37 = v33 + *(int *)(v57 + 56);
  sub_1000C30D4(v36, v33, &qword_10016D4C8);
  sub_1000C30D4(v31, v37, &qword_10016D4C8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v33, 1, v28) != 1)
  {
    uint64_t v38 = (uint64_t)v51;
    sub_1000C30D4(v33, (uint64_t)v51, &qword_10016D4C8);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v28) != 1)
    {
      uint64_t v39 = v31;
      uint64_t v40 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v50, v37, v28);
      sub_1000B9244(&qword_10016D4E0, (void (*)(uint64_t))&type metadata accessor for DailyForecastViewModel);
      char v41 = sub_10012C9E0();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v27 + 8);
      v42(v40, v28);
      sub_1000C7A48(v39, &qword_10016D4C8);
      sub_1000C7A48(v36, &qword_10016D4C8);
      v42(v51, v28);
      sub_1000C7A48(v33, &qword_10016D4C8);
      if (v41) {
        goto LABEL_8;
      }
LABEL_9:
      char v44 = 0;
      uint64_t v43 = 0x4020000000000000;
      goto LABEL_10;
    }
    sub_1000C7A48(v31, &qword_10016D4C8);
    sub_1000C7A48(v36, &qword_10016D4C8);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v38, v28);
LABEL_6:
    sub_1000C7A48(v33, &qword_10016F630);
    goto LABEL_9;
  }
  sub_1000C7A48(v31, &qword_10016D4C8);
  sub_1000C7A48(v36, &qword_10016D4C8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v28) != 1) {
    goto LABEL_6;
  }
  sub_1000C7A48(v33, &qword_10016D4C8);
LABEL_8:
  uint64_t v43 = 0;
  char v44 = 1;
LABEL_10:
  uint64_t v45 = v60;
  uint64_t v46 = v63;
  uint64_t v47 = v58;
  v59(v60, v63, v58);
  uint64_t v70 = v43;
  char v71 = 0;
  char v72 = v44;
  v73[0] = v45;
  v73[1] = &v70;
  v69[0] = v47;
  v69[1] = sub_1000053D8(&qword_10016FAC8);
  uint64_t v67 = WitnessTable;
  unint64_t v68 = sub_1000C807C();
  sub_1000B7DEC((uint64_t)v73, 2, (uint64_t)v69);
  uint64_t v48 = v62;
  v62(v46, v47);
  return v48(v45, v47);
}

uint64_t type metadata accessor for HighTemperatureColumn(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F730);
}

uint64_t type metadata accessor for LowTemperatureColumn(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F7C0);
}

uint64_t type metadata accessor for PrecipitationColumn(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F858);
}

uint64_t type metadata accessor for ConditionColumn(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F8E8);
}

uint64_t type metadata accessor for WeekdayColumn(uint64_t a1)
{
  return sub_10001A270(a1, qword_10016F978);
}

uint64_t sub_1000C30D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000053D8(a3);
  sub_1000472C0();
  sub_10006D61C();
  v4();
  return a2;
}

uint64_t sub_1000C3130()
{
  type metadata accessor for LargeDailyView(0);
  sub_1000C8394();
  sub_10012C800();
  sub_1000472C0();
  sub_10000B424();
  v3();
  type metadata accessor for DailyViewAttributes();
  sub_1000C85CC();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = sub_1000053D8(&qword_10016B060);
  if (!sub_1000C8518(v4))
  {
    sub_1000472C0();
    sub_1000C8590();
    v5();
  }
  if (!sub_1000C84F4())
  {
    sub_1000472C0();
    sub_1000C8590();
    v6();
  }
  sub_1000C859C();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10012B390();
  sub_1000472C0();
  uint64_t v7 = sub_1000C8450();
  v8(v7);

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000C32F4()
{
  uint64_t v3 = sub_1000C854C();
  uint64_t v4 = type metadata accessor for LargeDailyView(v3);
  sub_100047198(v4);
  sub_1000C8618();
  double v7 = *(double *)(v1 + v6);
  double v9 = *(double *)(v1 + v8);
  double v10 = *(double *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000BCD48(v0, v1 + v5, v2, v7, v9, v10);
}

uint64_t sub_1000C337C()
{
  return sub_10012AD70();
}

uint64_t sub_1000C33A0(uint64_t a1)
{
  uint64_t v2 = sub_10012AC10();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_10012AD80();
}

uint64_t sub_1000C346C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3480);
}

uint64_t sub_1000C3480()
{
  uint64_t v2 = sub_1000C8478();

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, v0, v2);
}

uint64_t sub_1000C34BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C34D0);
}

uint64_t sub_1000C34D0()
{
  sub_1000C8478();
  sub_10007993C();

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, v1, v2, v3);
}

unint64_t sub_1000C350C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_10000886C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    double v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_1000053D8(&qword_10016B080);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10012AFD0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = a1 + v14;
    uint64_t v16 = a2 + v14;
    uint64_t v17 = sub_10012C800();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = (int *)type metadata accessor for DailyViewAttributes();
    *(void *)(v15 + v18[5]) = *(void *)(v16 + v18[5]);
    *(_WORD *)(v15 + v18[6]) = *(_WORD *)(v16 + v18[6]);
    *(void *)(v15 + v18[7]) = *(void *)(v16 + v18[7]);
    *(unsigned char *)(v15 + v18[8]) = *(unsigned char *)(v16 + v18[8]);
    *(unsigned char *)(v15 + v18[9]) = *(unsigned char *)(v16 + v18[9]);
    *(unsigned char *)(v15 + v18[10]) = *(unsigned char *)(v16 + v18[10]);
    *(void *)(v15 + v18[11]) = *(void *)(v16 + v18[11]);
    *(unsigned char *)(v15 + v18[12]) = *(unsigned char *)(v16 + v18[12]);
    *(unsigned char *)(v15 + v18[13]) = *(unsigned char *)(v16 + v18[13]);
    *(unsigned char *)(v15 + v18[14]) = *(unsigned char *)(v16 + v18[14]);
    *(unsigned char *)(v15 + v18[15]) = *(unsigned char *)(v16 + v18[15]);
    *(void *)(v15 + v18[16]) = *(void *)(v16 + v18[16]);
    *(void *)(v15 + v18[17]) = *(void *)(v16 + v18[17]);
    *(void *)(v15 + v18[18]) = *(void *)(v16 + v18[18]);
    *(void *)(v15 + v18[19]) = *(void *)(v16 + v18[19]);
    *(void *)(v15 + v18[20]) = *(void *)(v16 + v18[20]);
    *(void *)(v15 + v18[21]) = *(void *)(v16 + v18[21]);
    uint64_t v19 = v18[22];
    uint64_t v20 = (void *)(v15 + v19);
    uint64_t v21 = (const void *)(v16 + v19);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v22 = sub_1000053D8(&qword_10016B060);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v22))
    {
      uint64_t v23 = sub_1000053D8(&qword_10016B098);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v22);
    }
    uint64_t v24 = v18[23];
    uint64_t v25 = (void *)(v15 + v24);
    uint64_t v26 = (const void *)(v16 + v24);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v22))
    {
      uint64_t v27 = sub_1000053D8(&qword_10016B098);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 16))(v25, v26, v22);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_1000C38D0(uint64_t a1, uint64_t a2)
{
  sub_100008BF8(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_1000053D8(&qword_10016B080);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_10012AFD0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = type metadata accessor for DailyViewAttributes();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v9 = v6 + *(int *)(v8 + 88);
  uint64_t v10 = sub_1000053D8(&qword_10016B060);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  uint64_t v11 = v6 + *(int *)(v8 + 92);
  uint64_t result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v11, 1, v10);
  if (!result)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    return v13(v11, v10);
  }
  return result;
}

uint64_t sub_1000C3AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10000886C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  sub_1000053D8(&qword_10016B080);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_10012AFD0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(v13 + v16[5]) = *(void *)(v14 + v16[5]);
  *(_WORD *)(v13 + v16[6]) = *(_WORD *)(v14 + v16[6]);
  *(void *)(v13 + v16[7]) = *(void *)(v14 + v16[7]);
  *(unsigned char *)(v13 + v16[8]) = *(unsigned char *)(v14 + v16[8]);
  *(unsigned char *)(v13 + v16[9]) = *(unsigned char *)(v14 + v16[9]);
  *(unsigned char *)(v13 + v16[10]) = *(unsigned char *)(v14 + v16[10]);
  *(void *)(v13 + v16[11]) = *(void *)(v14 + v16[11]);
  *(unsigned char *)(v13 + v16[12]) = *(unsigned char *)(v14 + v16[12]);
  *(unsigned char *)(v13 + v16[13]) = *(unsigned char *)(v14 + v16[13]);
  *(unsigned char *)(v13 + v16[14]) = *(unsigned char *)(v14 + v16[14]);
  *(unsigned char *)(v13 + v16[15]) = *(unsigned char *)(v14 + v16[15]);
  *(void *)(v13 + v16[16]) = *(void *)(v14 + v16[16]);
  *(void *)(v13 + v16[17]) = *(void *)(v14 + v16[17]);
  *(void *)(v13 + v16[18]) = *(void *)(v14 + v16[18]);
  *(void *)(v13 + v16[19]) = *(void *)(v14 + v16[19]);
  *(void *)(v13 + v16[20]) = *(void *)(v14 + v16[20]);
  *(void *)(v13 + v16[21]) = *(void *)(v14 + v16[21]);
  uint64_t v17 = v16[22];
  uint64_t v18 = (void *)(v13 + v17);
  uint64_t v19 = (const void *)(v14 + v17);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v20 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20))
  {
    uint64_t v21 = sub_1000053D8(&qword_10016B098);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v20);
  }
  uint64_t v22 = v16[23];
  uint64_t v23 = (void *)(v13 + v22);
  uint64_t v24 = (const void *)(v14 + v22);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v20))
  {
    uint64_t v25 = sub_1000053D8(&qword_10016B098);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 16))(v23, v24, v20);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_1000C3E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10000886C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_100008BF8(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_1000C7A48(a1 + v10, &qword_10016B080);
    sub_1000053D8(&qword_10016B080);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_10012AFD0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(v15 + v18[5]) = *(void *)(v16 + v18[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = v18[6];
  uint64_t v20 = (unsigned char *)(v15 + v19);
  uint64_t v21 = (unsigned char *)(v16 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  *(void *)(v15 + v18[7]) = *(void *)(v16 + v18[7]);
  *(unsigned char *)(v15 + v18[8]) = *(unsigned char *)(v16 + v18[8]);
  *(unsigned char *)(v15 + v18[9]) = *(unsigned char *)(v16 + v18[9]);
  *(unsigned char *)(v15 + v18[10]) = *(unsigned char *)(v16 + v18[10]);
  *(void *)(v15 + v18[11]) = *(void *)(v16 + v18[11]);
  *(unsigned char *)(v15 + v18[12]) = *(unsigned char *)(v16 + v18[12]);
  *(unsigned char *)(v15 + v18[13]) = *(unsigned char *)(v16 + v18[13]);
  *(unsigned char *)(v15 + v18[14]) = *(unsigned char *)(v16 + v18[14]);
  *(unsigned char *)(v15 + v18[15]) = *(unsigned char *)(v16 + v18[15]);
  *(void *)(v15 + v18[16]) = *(void *)(v16 + v18[16]);
  *(void *)(v15 + v18[17]) = *(void *)(v16 + v18[17]);
  swift_retain();
  swift_release();
  *(void *)(v15 + v18[18]) = *(void *)(v16 + v18[18]);
  swift_retain();
  swift_release();
  *(void *)(v15 + v18[19]) = *(void *)(v16 + v18[19]);
  swift_retain();
  swift_release();
  *(void *)(v15 + v18[20]) = *(void *)(v16 + v18[20]);
  *(void *)(v15 + v18[21]) = *(void *)(v16 + v18[21]);
  uint64_t v22 = v18[22];
  uint64_t v23 = (void *)(v15 + v22);
  uint64_t v24 = (const void *)(v16 + v22);
  uint64_t v25 = sub_1000053D8(&qword_10016B060);
  int v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v23, 1, v25);
  int v27 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v25);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v25);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v28 = *(void *)(v25 - 8);
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v23, v25);
LABEL_11:
    uint64_t v29 = sub_1000053D8(&qword_10016B098);
    memcpy(v23, v24, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, const void *, uint64_t))(v28 + 24))(v23, v24, v25);
LABEL_12:
  uint64_t v30 = v18[23];
  uint64_t v31 = (void *)(v15 + v30);
  uint64_t v32 = (const void *)(v16 + v30);
  int v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v25);
  int v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v32, 1, v25);
  if (!v33)
  {
    uint64_t v35 = *(void *)(v25 - 8);
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 24))(v31, v32, v25);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v35 + 8))(v31, v25);
    goto LABEL_17;
  }
  if (v34)
  {
LABEL_17:
    uint64_t v36 = sub_1000053D8(&qword_10016B098);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 16))(v31, v32, v25);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v31, 0, 1, v25);
  return a1;
}

uint64_t sub_1000C42EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1000053D8(&qword_10016B080);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_10012AFD0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(v12 + v15[5]) = *(void *)(v13 + v15[5]);
  *(_WORD *)(v12 + v15[6]) = *(_WORD *)(v13 + v15[6]);
  *(void *)(v12 + v15[7]) = *(void *)(v13 + v15[7]);
  *(unsigned char *)(v12 + v15[8]) = *(unsigned char *)(v13 + v15[8]);
  *(unsigned char *)(v12 + v15[9]) = *(unsigned char *)(v13 + v15[9]);
  *(unsigned char *)(v12 + v15[10]) = *(unsigned char *)(v13 + v15[10]);
  *(void *)(v12 + v15[11]) = *(void *)(v13 + v15[11]);
  *(unsigned char *)(v12 + v15[12]) = *(unsigned char *)(v13 + v15[12]);
  *(unsigned char *)(v12 + v15[13]) = *(unsigned char *)(v13 + v15[13]);
  *(unsigned char *)(v12 + v15[14]) = *(unsigned char *)(v13 + v15[14]);
  *(unsigned char *)(v12 + v15[15]) = *(unsigned char *)(v13 + v15[15]);
  *(void *)(v12 + v15[16]) = *(void *)(v13 + v15[16]);
  *(void *)(v12 + v15[17]) = *(void *)(v13 + v15[17]);
  *(void *)(v12 + v15[18]) = *(void *)(v13 + v15[18]);
  *(void *)(v12 + v15[19]) = *(void *)(v13 + v15[19]);
  *(void *)(v12 + v15[20]) = *(void *)(v13 + v15[20]);
  *(void *)(v12 + v15[21]) = *(void *)(v13 + v15[21]);
  uint64_t v16 = v15[22];
  uint64_t v17 = (void *)(v12 + v16);
  uint64_t v18 = (const void *)(v13 + v16);
  uint64_t v19 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19))
  {
    uint64_t v20 = sub_1000053D8(&qword_10016B098);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v19);
  }
  uint64_t v21 = v15[23];
  uint64_t v22 = (void *)(v12 + v21);
  uint64_t v23 = (const void *)(v13 + v21);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v23, 1, v19))
  {
    uint64_t v24 = sub_1000053D8(&qword_10016B098);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v22, v23, v19);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_1000C4640(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_100008BF8(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    sub_1000C7A48(a1 + v10, &qword_10016B080);
    uint64_t v13 = sub_1000053D8(&qword_10016B080);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_10012AFD0();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  uint64_t v18 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(v16 + v19[5]) = *(void *)(v17 + v19[5]);
  swift_bridgeObjectRelease();
  *(_WORD *)(v16 + v19[6]) = *(_WORD *)(v17 + v19[6]);
  *(void *)(v16 + v19[7]) = *(void *)(v17 + v19[7]);
  *(unsigned char *)(v16 + v19[8]) = *(unsigned char *)(v17 + v19[8]);
  *(unsigned char *)(v16 + v19[9]) = *(unsigned char *)(v17 + v19[9]);
  *(unsigned char *)(v16 + v19[10]) = *(unsigned char *)(v17 + v19[10]);
  *(void *)(v16 + v19[11]) = *(void *)(v17 + v19[11]);
  *(unsigned char *)(v16 + v19[12]) = *(unsigned char *)(v17 + v19[12]);
  *(unsigned char *)(v16 + v19[13]) = *(unsigned char *)(v17 + v19[13]);
  *(unsigned char *)(v16 + v19[14]) = *(unsigned char *)(v17 + v19[14]);
  *(unsigned char *)(v16 + v19[15]) = *(unsigned char *)(v17 + v19[15]);
  *(void *)(v16 + v19[16]) = *(void *)(v17 + v19[16]);
  *(void *)(v16 + v19[17]) = *(void *)(v17 + v19[17]);
  swift_release();
  *(void *)(v16 + v19[18]) = *(void *)(v17 + v19[18]);
  swift_release();
  *(void *)(v16 + v19[19]) = *(void *)(v17 + v19[19]);
  swift_release();
  *(void *)(v16 + v19[20]) = *(void *)(v17 + v19[20]);
  *(void *)(v16 + v19[21]) = *(void *)(v17 + v19[21]);
  uint64_t v20 = v19[22];
  uint64_t v21 = (void *)(v16 + v20);
  uint64_t v22 = (const void *)(v17 + v20);
  uint64_t v23 = sub_1000053D8(&qword_10016B060);
  int v24 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v23);
  int v25 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v22, 1, v23);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v21, 0, 1, v23);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v26 = *(void *)(v23 - 8);
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v21, v23);
LABEL_10:
    uint64_t v27 = sub_1000053D8(&qword_10016B098);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, const void *, uint64_t))(v26 + 40))(v21, v22, v23);
LABEL_11:
  uint64_t v28 = v19[23];
  uint64_t v29 = (void *)(v16 + v28);
  uint64_t v30 = (const void *)(v17 + v28);
  int v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v23);
  int v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v23);
  if (!v31)
  {
    uint64_t v33 = *(void *)(v23 - 8);
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 40))(v29, v30, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v29, v23);
    goto LABEL_16;
  }
  if (v32)
  {
LABEL_16:
    uint64_t v34 = sub_1000053D8(&qword_10016B098);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v29, v30, v23);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v23);
  return a1;
}

uint64_t sub_1000C4AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C4AEC);
}

uint64_t sub_1000C4AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_1000053D8(&qword_10016B0A8);
    sub_100099990();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for DailyViewAttributes();
      uint64_t v11 = *(int *)(a3 + 24);
    }
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000C4B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C4BAC);
}

uint64_t sub_1000C4BAC(uint64_t result, char a2, int a3)
{
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -a2;
  }
  else
  {
    sub_1000053D8(&qword_10016B0A8);
    sub_100099990();
    if (*(_DWORD *)(v4 + 84) != a3) {
      type metadata accessor for DailyViewAttributes();
    }
    sub_10007993C();
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v5, v6, v7, v8);
  }
  return result;
}

void sub_1000C4C54()
{
  sub_100039DDC(319, (unint64_t *)&qword_10016B128, (void (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DailyViewAttributes();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1000C4D44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_10012C800();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    v10(v7, v8, v9);
    uint64_t v11 = (int *)type metadata accessor for DailyViewAttributes();
    *(void *)&v7[v11[5]] = *(void *)&v8[v11[5]];
    *(_WORD *)&v7[v11[6]] = *(_WORD *)&v8[v11[6]];
    *(void *)&v7[v11[7]] = *(void *)&v8[v11[7]];
    v7[v11[8]] = v8[v11[8]];
    v7[v11[9]] = v8[v11[9]];
    v7[v11[10]] = v8[v11[10]];
    *(void *)&v7[v11[11]] = *(void *)&v8[v11[11]];
    v7[v11[12]] = v8[v11[12]];
    v7[v11[13]] = v8[v11[13]];
    v7[v11[14]] = v8[v11[14]];
    v7[v11[15]] = v8[v11[15]];
    *(void *)&v7[v11[16]] = *(void *)&v8[v11[16]];
    *(void *)&v7[v11[17]] = *(void *)&v8[v11[17]];
    *(void *)&v7[v11[18]] = *(void *)&v8[v11[18]];
    *(void *)&v7[v11[19]] = *(void *)&v8[v11[19]];
    *(void *)&v7[v11[20]] = *(void *)&v8[v11[20]];
    *(void *)&v7[v11[21]] = *(void *)&v8[v11[21]];
    uint64_t v12 = v11[22];
    uint64_t v13 = &v7[v12];
    uint64_t v14 = &v8[v12];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v15 = sub_1000053D8(&qword_10016B060);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = sub_1000053D8(&qword_10016B098);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v15);
    }
    uint64_t v17 = v11[23];
    uint64_t v18 = &v7[v17];
    uint64_t v19 = &v8[v17];
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v15))
    {
      uint64_t v20 = sub_1000053D8(&qword_10016B098);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v18, v19, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, 0, 1, v15);
    }
  }
  return v5;
}

uint64_t sub_1000C5064(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for DailyViewAttributes();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v4 + *(int *)(v6 + 88);
  uint64_t v8 = sub_1000053D8(&qword_10016B060);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = v4 + *(int *)(v6 + 92);
  uint64_t result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, 1, v8);
  if (!result)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v11(v9, v8);
  }
  return result;
}

void *sub_1000C51D8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10012C800();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_retain();
  v8(v5, v6, v7);
  uint64_t v9 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)&v5[v9[5]] = *(void *)&v6[v9[5]];
  *(_WORD *)&v5[v9[6]] = *(_WORD *)&v6[v9[6]];
  *(void *)&v5[v9[7]] = *(void *)&v6[v9[7]];
  v5[v9[8]] = v6[v9[8]];
  v5[v9[9]] = v6[v9[9]];
  v5[v9[10]] = v6[v9[10]];
  *(void *)&v5[v9[11]] = *(void *)&v6[v9[11]];
  v5[v9[12]] = v6[v9[12]];
  v5[v9[13]] = v6[v9[13]];
  v5[v9[14]] = v6[v9[14]];
  v5[v9[15]] = v6[v9[15]];
  *(void *)&v5[v9[16]] = *(void *)&v6[v9[16]];
  *(void *)&v5[v9[17]] = *(void *)&v6[v9[17]];
  *(void *)&v5[v9[18]] = *(void *)&v6[v9[18]];
  *(void *)&v5[v9[19]] = *(void *)&v6[v9[19]];
  *(void *)&v5[v9[20]] = *(void *)&v6[v9[20]];
  *(void *)&v5[v9[21]] = *(void *)&v6[v9[21]];
  uint64_t v10 = v9[22];
  uint64_t v11 = &v5[v10];
  uint64_t v12 = &v6[v10];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v13))
  {
    uint64_t v14 = sub_1000053D8(&qword_10016B098);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v11, 0, 1, v13);
  }
  uint64_t v15 = v9[23];
  uint64_t v16 = &v5[v15];
  uint64_t v17 = &v6[v15];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v13))
  {
    uint64_t v18 = sub_1000053D8(&qword_10016B098);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v16, v17, v13);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 0, 1, v13);
  }
  return a1;
}

void *sub_1000C54AC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10012C800();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)&v7[v10[5]] = *(void *)&v8[v10[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = v10[6];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  *(void *)&v7[v10[7]] = *(void *)&v8[v10[7]];
  v7[v10[8]] = v8[v10[8]];
  v7[v10[9]] = v8[v10[9]];
  v7[v10[10]] = v8[v10[10]];
  *(void *)&v7[v10[11]] = *(void *)&v8[v10[11]];
  v7[v10[12]] = v8[v10[12]];
  v7[v10[13]] = v8[v10[13]];
  v7[v10[14]] = v8[v10[14]];
  v7[v10[15]] = v8[v10[15]];
  *(void *)&v7[v10[16]] = *(void *)&v8[v10[16]];
  *(void *)&v7[v10[17]] = *(void *)&v8[v10[17]];
  swift_retain();
  swift_release();
  *(void *)&v7[v10[18]] = *(void *)&v8[v10[18]];
  swift_retain();
  swift_release();
  *(void *)&v7[v10[19]] = *(void *)&v8[v10[19]];
  swift_retain();
  swift_release();
  *(void *)&v7[v10[20]] = *(void *)&v8[v10[20]];
  *(void *)&v7[v10[21]] = *(void *)&v8[v10[21]];
  uint64_t v14 = v10[22];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  uint64_t v17 = sub_1000053D8(&qword_10016B060);
  int v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v17);
  int v19 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v17);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v20 = *(void *)(v17 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v17);
LABEL_6:
    uint64_t v21 = sub_1000053D8(&qword_10016B098);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v15, v16, v17);
LABEL_7:
  uint64_t v22 = v10[23];
  uint64_t v23 = &v7[v22];
  int v24 = &v8[v22];
  int v25 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v23, 1, v17);
  int v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v24, 1, v17);
  if (!v25)
  {
    uint64_t v27 = *(void *)(v17 - 8);
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v23, v24, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v17);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    uint64_t v28 = sub_1000053D8(&qword_10016B098);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v23, v24, v17);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, 0, 1, v17);
  return a1;
}

void *sub_1000C58B8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10012C800();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  uint64_t v8 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)&v5[v8[5]] = *(void *)&v6[v8[5]];
  *(_WORD *)&v5[v8[6]] = *(_WORD *)&v6[v8[6]];
  *(void *)&v5[v8[7]] = *(void *)&v6[v8[7]];
  v5[v8[8]] = v6[v8[8]];
  v5[v8[9]] = v6[v8[9]];
  v5[v8[10]] = v6[v8[10]];
  *(void *)&v5[v8[11]] = *(void *)&v6[v8[11]];
  v5[v8[12]] = v6[v8[12]];
  v5[v8[13]] = v6[v8[13]];
  v5[v8[14]] = v6[v8[14]];
  v5[v8[15]] = v6[v8[15]];
  *(void *)&v5[v8[16]] = *(void *)&v6[v8[16]];
  *(void *)&v5[v8[17]] = *(void *)&v6[v8[17]];
  *(void *)&v5[v8[18]] = *(void *)&v6[v8[18]];
  *(void *)&v5[v8[19]] = *(void *)&v6[v8[19]];
  *(void *)&v5[v8[20]] = *(void *)&v6[v8[20]];
  *(void *)&v5[v8[21]] = *(void *)&v6[v8[21]];
  uint64_t v9 = v8[22];
  uint64_t v10 = &v5[v9];
  uint64_t v11 = &v6[v9];
  uint64_t v12 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = sub_1000053D8(&qword_10016B098);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 0, 1, v12);
  }
  uint64_t v14 = v8[23];
  uint64_t v15 = &v5[v14];
  uint64_t v16 = &v6[v14];
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v12))
  {
    uint64_t v17 = sub_1000053D8(&qword_10016B098);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v15, v16, v12);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v15, 0, 1, v12);
  }
  return a1;
}

void *sub_1000C5B5C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10012C800();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)&v7[v10[5]] = *(void *)&v8[v10[5]];
  swift_bridgeObjectRelease();
  *(_WORD *)&v7[v10[6]] = *(_WORD *)&v8[v10[6]];
  *(void *)&v7[v10[7]] = *(void *)&v8[v10[7]];
  v7[v10[8]] = v8[v10[8]];
  v7[v10[9]] = v8[v10[9]];
  v7[v10[10]] = v8[v10[10]];
  *(void *)&v7[v10[11]] = *(void *)&v8[v10[11]];
  v7[v10[12]] = v8[v10[12]];
  v7[v10[13]] = v8[v10[13]];
  v7[v10[14]] = v8[v10[14]];
  v7[v10[15]] = v8[v10[15]];
  *(void *)&v7[v10[16]] = *(void *)&v8[v10[16]];
  *(void *)&v7[v10[17]] = *(void *)&v8[v10[17]];
  swift_release();
  *(void *)&v7[v10[18]] = *(void *)&v8[v10[18]];
  swift_release();
  *(void *)&v7[v10[19]] = *(void *)&v8[v10[19]];
  swift_release();
  *(void *)&v7[v10[20]] = *(void *)&v8[v10[20]];
  *(void *)&v7[v10[21]] = *(void *)&v8[v10[21]];
  uint64_t v11 = v10[22];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_1000053D8(&qword_10016B060);
  int v15 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(v14 - 8);
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v14);
LABEL_6:
    uint64_t v18 = sub_1000053D8(&qword_10016B098);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v12, v13, v14);
LABEL_7:
  uint64_t v19 = v10[23];
  uint64_t v20 = &v7[v19];
  uint64_t v21 = &v8[v19];
  int v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v20, 1, v14);
  int v23 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v14);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v14 - 8);
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v20, v21, v14);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v14);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_1000053D8(&qword_10016B098);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v20, v21, v14);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v14);
  return a1;
}

uint64_t sub_1000C5F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C5F44);
}

uint64_t sub_1000C5F44(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_10002A65C(*a1);
  }
  uint64_t v7 = type metadata accessor for DailyViewAttributes();
  uint64_t v8 = (uint64_t)a1 + *(int *)(a3 + 20);

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_1000C5FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C5FD4);
}

void sub_1000C5FD4()
{
  sub_10003C12C();
  if (v2)
  {
    *unint64_t v1 = (v0 - 1);
  }
  else
  {
    type metadata accessor for DailyViewAttributes();
    sub_10007993C();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v3, v4, v5, v6);
  }
}

uint64_t sub_1000C6044()
{
  uint64_t result = type metadata accessor for DailyViewAttributes();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000C60E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C82A8);
}

uint64_t sub_1000C60F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C829C);
}

void sub_1000C6108()
{
  sub_1000C85B8();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for DailyViewAttributes();
  sub_100099990();
  if ((*(_DWORD *)(v7 + 80) & 0x20000) != 0)
  {
    *uint64_t v5 = *v3;
    swift_retain();
  }
  else
  {
    uint64_t v8 = v6;
    sub_10012C800();
    sub_1000472C0();
    sub_10006D61C();
    v9();
    sub_1000C82B0(*(int *)(v8 + 20));
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000053D8(&qword_10016B060);
    if (sub_1000C8460(v1))
    {
      uint64_t v10 = sub_1000053D8(&qword_10016B098);
      uint64_t v11 = sub_10000DC9C(v10);
      sub_1000C8600(v11, v13, *(void *)(v12 + 64));
    }
    else
    {
      sub_1000472C0();
      sub_1000C84B0();
      v14();
      sub_1000C8434(v0);
    }
    uint64_t v15 = *(int *)(v8 + 92);
    uint64_t v16 = (uint64_t)v5 + v15;
    if (sub_1000C8460((uint64_t)v3 + v15))
    {
      uint64_t v17 = sub_1000053D8(&qword_10016B098);
      uint64_t v18 = sub_10000DC9C(v17);
      sub_1000C85E8(v18, v20, *(void *)(v19 + 64));
    }
    else
    {
      sub_1000472C0();
      sub_1000C84B0();
      v21();
      sub_1000C8434(v16);
    }
  }
  sub_1000C8694();
}

uint64_t sub_1000C62AC(uint64_t a1)
{
  sub_10012C800();
  sub_1000472C0();
  uint64_t v2 = sub_1000C8450();
  v3(v2);
  uint64_t v4 = type metadata accessor for DailyViewAttributes();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(v4 + 88);
  uint64_t v6 = sub_1000053D8(&qword_10016B060);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v5, 1, v6))
  {
    sub_1000472C0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + *(int *)(v4 + 92);
  uint64_t result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v6);
  if (!result)
  {
    sub_1000472C0();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v11(v8, v6);
  }
  return result;
}

void sub_1000C63F8()
{
  sub_1000C85B8();
  sub_1000C8568();
  sub_1000472C0();
  sub_10006D61C();
  v4();
  uint64_t v5 = type metadata accessor for DailyViewAttributes();
  sub_1000C82B0(*(int *)(v5 + 20));
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000053D8(&qword_10016B060);
  if (sub_1000C8460(v3))
  {
    uint64_t v6 = sub_1000053D8(&qword_10016B098);
    uint64_t v7 = sub_10000DC9C(v6);
    sub_1000C8600(v7, v9, *(void *)(v8 + 64));
  }
  else
  {
    sub_1000472C0();
    sub_1000C84B0();
    v10();
    sub_1000C8434(v2);
  }
  uint64_t v11 = *(int *)(v5 + 92);
  uint64_t v12 = v0 + v11;
  if (sub_1000C8460(v1 + v11))
  {
    uint64_t v13 = sub_1000053D8(&qword_10016B098);
    uint64_t v14 = sub_10000DC9C(v13);
    sub_1000C85E8(v14, v16, *(void *)(v15 + 64));
  }
  else
  {
    sub_1000472C0();
    sub_1000C84B0();
    v17();
    sub_1000C8434(v12);
  }
  sub_1000C8694();
}

void sub_1000C6560()
{
  sub_1000C85B8();
  sub_1000C8568();
  sub_1000472C0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v0, v1);
  uint64_t v5 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(v0 + v5[5]) = *(void *)(v1 + v5[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v5[6];
  uint64_t v7 = (unsigned char *)(v0 + v6);
  uint64_t v8 = (unsigned char *)(v1 + v6);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  sub_1000C83B4();
  sub_1000C865C(v9);
  swift_release();
  sub_1000C865C(v5[18]);
  swift_release();
  sub_1000C865C(v5[19]);
  swift_release();
  sub_1000C84C0();
  uint64_t v10 = sub_1000053D8(&qword_10016B060);
  int v11 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v2, 1, v10);
  int v12 = sub_1000C8460(v3);
  if (v11)
  {
    if (!v12)
    {
      sub_1000472C0();
      sub_1000C84B0();
      v13();
      sub_1000C8434(v2);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_100099990();
  if (v14)
  {
    uint64_t v15 = sub_1000C86BC();
    v16(v15);
LABEL_6:
    uint64_t v17 = sub_1000053D8(&qword_10016B098);
    uint64_t v18 = sub_10000DC9C(v17);
    sub_1000C8600(v18, v20, *(void *)(v19 + 64));
    goto LABEL_7;
  }
  uint64_t v34 = sub_1000C86F8();
  v35(v34);
LABEL_7:
  uint64_t v21 = v5[23];
  uint64_t v22 = v0 + v21;
  uint64_t v23 = v1 + v21;
  int v24 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v0 + v21, 1, v10);
  int v25 = sub_1000C8460(v23);
  if (!v24)
  {
    sub_100099990();
    if (!v27)
    {
      uint64_t v36 = sub_1000C86A8();
      v37(v36);
      goto LABEL_13;
    }
    uint64_t v28 = sub_1000C86D0();
    v29(v28);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v30 = sub_1000053D8(&qword_10016B098);
    uint64_t v31 = sub_10000DC9C(v30);
    sub_1000C85E8(v31, v33, *(void *)(v32 + 64));
    goto LABEL_13;
  }
  sub_1000472C0();
  sub_1000C84B0();
  v26();
  sub_1000C8434(v22);
LABEL_13:
  sub_1000C8694();
}

uint64_t sub_1000C67A8()
{
  sub_1000C8568();
  sub_1000472C0();
  sub_100063AE4();
  v2();
  uint64_t v3 = type metadata accessor for DailyViewAttributes();
  sub_1000C84E8(*(int *)(v3 + 20));
  *(_WORD *)(v0 + *(int *)(v4 + 24)) = *(_WORD *)(v1 + *(int *)(v4 + 24));
  sub_1000C84E8(*(int *)(v4 + 28));
  sub_1000C855C(*(int *)(v5 + 32));
  sub_1000C855C(*(int *)(v6 + 36));
  sub_1000C855C(*(int *)(v7 + 40));
  sub_1000C84E8(*(int *)(v8 + 44));
  sub_1000C855C(*(int *)(v9 + 48));
  sub_1000C855C(*(int *)(v10 + 52));
  sub_1000C855C(*(int *)(v11 + 56));
  sub_1000C855C(*(int *)(v12 + 60));
  sub_1000C84E8(*(int *)(v13 + 64));
  sub_1000C84E8(*(int *)(v14 + 68));
  sub_1000C84E8(*(int *)(v15 + 72));
  sub_1000C84E8(*(int *)(v16 + 76));
  sub_1000C84E8(*(int *)(v17 + 80));
  sub_1000C84E8(*(int *)(v18 + 84));
  uint64_t v20 = *(int *)(v19 + 88);
  uint64_t v21 = v0 + v20;
  uint64_t v22 = v1 + v20;
  sub_1000053D8(&qword_10016B060);
  if (sub_1000C8460(v22))
  {
    uint64_t v23 = sub_1000053D8(&qword_10016B098);
    uint64_t v24 = sub_10000DC9C(v23);
    sub_1000C8600(v24, v26, *(void *)(v25 + 64));
  }
  else
  {
    sub_1000472C0();
    sub_100063AE4();
    v27();
    sub_1000C8434(v21);
  }
  uint64_t v28 = *(int *)(v3 + 92);
  uint64_t v29 = v0 + v28;
  if (sub_1000C8460(v1 + v28))
  {
    uint64_t v30 = sub_1000053D8(&qword_10016B098);
    uint64_t v31 = sub_10000DC9C(v30);
    sub_1000C85E8(v31, v33, *(void *)(v32 + 64));
  }
  else
  {
    sub_1000472C0();
    sub_100063AE4();
    v34();
    sub_1000C8434(v29);
  }
  return v0;
}

void sub_1000C6990()
{
  sub_1000C85B8();
  sub_1000C8568();
  sub_1000472C0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v0, v1);
  uint64_t v5 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(v0 + v5[5]) = *(void *)(v1 + v5[5]);
  swift_bridgeObjectRelease();
  *(_WORD *)(v0 + v5[6]) = *(_WORD *)(v1 + v5[6]);
  sub_1000C83B4();
  sub_1000C8640(v6);
  sub_1000C8640(v5[18]);
  sub_1000C8640(v5[19]);
  sub_1000C84C0();
  uint64_t v7 = sub_1000053D8(&qword_10016B060);
  int v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v2, 1, v7);
  int v9 = sub_1000C8460(v3);
  if (v8)
  {
    if (!v9)
    {
      sub_1000472C0();
      sub_100063AE4();
      v10();
      sub_1000C8434(v2);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_100099990();
  if (v11)
  {
    uint64_t v12 = sub_1000C86BC();
    v13(v12);
LABEL_6:
    uint64_t v14 = sub_1000053D8(&qword_10016B098);
    uint64_t v15 = sub_10000DC9C(v14);
    sub_1000C8600(v15, v17, *(void *)(v16 + 64));
    goto LABEL_7;
  }
  uint64_t v31 = sub_1000C86F8();
  v32(v31);
LABEL_7:
  uint64_t v18 = v5[23];
  uint64_t v19 = v0 + v18;
  uint64_t v20 = v1 + v18;
  int v21 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v0 + v18, 1, v7);
  int v22 = sub_1000C8460(v20);
  if (!v21)
  {
    sub_100099990();
    if (!v24)
    {
      uint64_t v33 = sub_1000C86A8();
      v34(v33);
      goto LABEL_13;
    }
    uint64_t v25 = sub_1000C86D0();
    v26(v25);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v27 = sub_1000053D8(&qword_10016B098);
    uint64_t v28 = sub_10000DC9C(v27);
    sub_1000C85E8(v28, v30, *(void *)(v29 + 64));
    goto LABEL_13;
  }
  sub_1000472C0();
  sub_100063AE4();
  v23();
  sub_1000C8434(v19);
LABEL_13:
  sub_1000C8694();
}

uint64_t sub_1000C6BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C82AC);
}

uint64_t sub_1000C6BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C82A0);
}

uint64_t sub_1000C6BD8()
{
  uint64_t result = type metadata accessor for DailyViewAttributes();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000C6C64()
{
  return sub_10000B38C(&qword_10016F9B0, &qword_10016F9B8);
}

uint64_t sub_1000C6CA0()
{
  return sub_10000B38C(&qword_10016F9C0, &qword_10016F9C8);
}

uint64_t sub_1000C6CDC()
{
  return sub_10000B38C(&qword_10016F9D0, &qword_10016F9D8);
}

uint64_t sub_1000C6D18()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C6D34()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C6D50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C6D6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C6D88()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C6DA4()
{
  return sub_1000C6F60();
}

uint64_t sub_1000C6DBC(uint64_t a1)
{
  return sub_1000C6DE8(a1, (uint64_t)type metadata accessor for ConditionColumn, (uint64_t (*)(uint64_t))sub_1000BFC5C);
}

uint64_t sub_1000C6DE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = sub_1000C854C();
  v4(v3);
  uint64_t v5 = sub_1000C8538();

  return a3(v5);
}

unint64_t sub_1000C6E78()
{
  unint64_t result = qword_10016F9F0;
  if (!qword_10016F9F0)
  {
    sub_100005470(&qword_10016B1E8);
    sub_1000B9244(&qword_10016F9F8, (void (*)(uint64_t))&type metadata accessor for ConditionImage);
    sub_10000B38C(&qword_10016BD48, &qword_10016BD50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016F9F0);
  }
  return result;
}

uint64_t sub_1000C6F48()
{
  return sub_1000C6F60();
}

uint64_t sub_1000C6F60()
{
  sub_1000C85B8();
  uint64_t v3 = v2(0);
  sub_100047198(v3);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  sub_10012C800();
  sub_1000472C0();
  uint64_t v6 = sub_1000C8450();
  v7(v6);
  type metadata accessor for DailyViewAttributes();
  sub_1000C8678();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = v5 + *(int *)(v1 + 88);
  sub_1000053D8(&qword_10016B060);
  if (!sub_1000C8460(v8))
  {
    sub_1000472C0();
    sub_1000C8584();
    v9();
  }
  if (!sub_1000C8460(v5 + *(int *)(v1 + 92)))
  {
    sub_1000472C0();
    sub_1000C8584();
    v10();
  }
  sub_1000C8630();
  sub_1000C8694();
  return _swift_deallocObject(v11, v12, v13);
}

uint64_t sub_1000C70C0(uint64_t a1)
{
  return sub_1000C6DE8(a1, (uint64_t)type metadata accessor for HighTemperatureColumn, (uint64_t (*)(uint64_t))sub_1000C07D0);
}

uint64_t sub_1000C70EC()
{
  sub_1000C85B8();
  type metadata accessor for LowTemperatureColumn(0);
  sub_1000C8394();
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  sub_100008BF8(*(void *)v3, *(unsigned char *)(v3 + 8));
  uint64_t v4 = v3 + *(int *)(v0 + 20);
  sub_1000053D8(&qword_10016B080);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10012AFD0();
    sub_1000472C0();
    sub_10000B424();
    v5();
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v3 + *(int *)(v0 + 24);
  sub_10012C800();
  sub_1000472C0();
  uint64_t v7 = sub_1000C8450();
  v8(v7);
  type metadata accessor for DailyViewAttributes();
  sub_1000C8678();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v9 = v6 + *(int *)(v4 + 88);
  sub_1000053D8(&qword_10016B060);
  if (!sub_1000C8460(v9))
  {
    sub_1000472C0();
    sub_1000C8584();
    v10();
  }
  if (!sub_1000C8460(v6 + *(int *)(v4 + 92)))
  {
    sub_1000472C0();
    sub_1000C8584();
    v11();
  }
  sub_1000C8630();
  sub_1000C8694();
  return _swift_deallocObject(v12, v13, v14);
}

uint64_t sub_1000C72BC(uint64_t a1)
{
  return sub_1000C6DE8(a1, (uint64_t)type metadata accessor for LowTemperatureColumn, (uint64_t (*)(uint64_t))sub_1000C13F0);
}

uint64_t sub_1000C72E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000053D8(a3);
  sub_1000472C0();
  sub_100063AE4();
  v4();
  return a2;
}

uint64_t sub_1000C7344()
{
  sub_1000C85B8();
  type metadata accessor for PrecipitationColumn(0);
  sub_1000C8494();
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  swift_release();
  uint64_t v4 = v3 + *(int *)(v0 + 28);
  sub_10012C800();
  sub_1000472C0();
  uint64_t v5 = sub_1000C8450();
  v6(v5);
  type metadata accessor for DailyViewAttributes();
  sub_1000C8678();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v4 + *(int *)(v3 + 88);
  sub_1000053D8(&qword_10016B060);
  if (!sub_1000C8460(v7))
  {
    sub_1000472C0();
    sub_1000C8584();
    v8();
  }
  if (!sub_1000C8460(v4 + *(int *)(v3 + 92)))
  {
    sub_1000472C0();
    sub_1000C8584();
    v9();
  }
  sub_1000C8630();
  sub_1000C8694();
  return _swift_deallocObject(v10, v11, v12);
}

double sub_1000C74AC()
{
  uint64_t v0 = sub_1000C854C();
  uint64_t v1 = type metadata accessor for PrecipitationColumn(v0);
  sub_10005C734(v1);
  sub_1000C8538();

  return sub_1000C02F8(v2);
}

uint64_t sub_1000C74F8()
{
  return sub_1000C6F60();
}

uint64_t sub_1000C7510(uint64_t a1)
{
  return sub_1000C6DE8(a1, (uint64_t)type metadata accessor for WeekdayColumn, (uint64_t (*)(uint64_t))sub_1000BF7EC);
}

uint64_t sub_1000C753C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_1000C7544()
{
  sub_100039DDC(319, (unint64_t *)&unk_10016C1B0, (void (*)(uint64_t))&type metadata accessor for Font.Context);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_1000C7624(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    uint64_t v8 = *(int *)(a3 + 48);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1000053D8(&qword_10016B9E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_10012B2D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000C7764(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  sub_1000053D8(&qword_10016B9E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_10012B2D0();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_1000C782C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = v6;
  uint64_t v7 = *(int *)(a3 + 48);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000053D8(&qword_10016B9E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_10012B2D0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    void *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1000C791C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 48);
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    sub_1000C7A48((uint64_t)a1 + v7, &qword_10016B9E0);
    sub_1000053D8(&qword_10016B9E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_10012B2D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      void *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000C7A48(uint64_t a1, uint64_t *a2)
{
  sub_1000053D8(a2);
  sub_1000472C0();
  uint64_t v3 = sub_1000C8450();
  v4(v3);
  return a1;
}

uint64_t sub_1000C7A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_1000053D8(&qword_10016B9E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_10012B2D0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000C7B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 48);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    sub_1000C7A48(a1 + v6, &qword_10016B9E0);
    uint64_t v9 = sub_1000053D8(&qword_10016B9E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_10012B2D0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000C7CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C7CB4);
}

uint64_t sub_1000C7CB4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_10002A65C(*a1);
  }
  uint64_t v7 = sub_1000053D8(&qword_10016C140);
  uint64_t v8 = (uint64_t)a1 + *(int *)(a3 + 48);

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v8, a2, v7);
}

uint64_t sub_1000C7D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C7D48);
}

void sub_1000C7D48()
{
  sub_10003C12C();
  if (v2)
  {
    *uint64_t v1 = (v0 - 1);
  }
  else
  {
    sub_1000053D8(&qword_10016C140);
    sub_10007993C();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v3, v4, v5, v6);
  }
}

uint64_t type metadata accessor for Column()
{
  return sub_1000C80E8();
}

uint64_t sub_1000C7DD4()
{
  return sub_10000B38C(&qword_10016FAA8, &qword_10016F9E0);
}

uint64_t sub_1000C7E10()
{
  return sub_10000B38C(&qword_10016FAB0, &qword_10016FA00);
}

uint64_t sub_1000C7E4C()
{
  return sub_10000B38C(&qword_10016FAB8, &qword_10016FA10);
}

uint64_t sub_1000C7E88()
{
  return sub_10000B38C(&qword_10016FAC0, qword_10016FA20);
}

uint64_t sub_1000C7EC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C7F08@<X0>(char *a1@<X8>)
{
  return sub_1000C250C(*(uint64_t **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000C7F14()
{
  type metadata accessor for Column();
  sub_1000C8494();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = *(void *)(v3 + 64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000053D8(&qword_10016B9E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10012B2D0();
    sub_1000472C0();
    uint64_t v5 = sub_1000C8450();
    v6(v5);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, ((v2 + 32) & ~v2) + v4, v2 | 7);
}

uint64_t sub_1000C800C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for Column();
  sub_10005C734(v3);
  uint64_t v4 = sub_1000C8538();

  return sub_1000C28F4(v4, v5, v1, v2, v6);
}

unint64_t sub_1000C807C()
{
  unint64_t result = qword_10016FAD0;
  if (!qword_10016FAD0)
  {
    sub_100005470(&qword_10016FAC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FAD0);
  }
  return result;
}

uint64_t sub_1000C80E8()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000C8118()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000C82B0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = *(void *)(v2 + a1);
  *(_WORD *)(v1 + v3[6]) = *(_WORD *)(v2 + v3[6]);
  *(void *)(v1 + v3[7]) = *(void *)(v2 + v3[7]);
  *(unsigned char *)(v1 + v3[8]) = *(unsigned char *)(v2 + v3[8]);
  *(unsigned char *)(v1 + v3[9]) = *(unsigned char *)(v2 + v3[9]);
  *(unsigned char *)(v1 + v3[10]) = *(unsigned char *)(v2 + v3[10]);
  *(void *)(v1 + v3[11]) = *(void *)(v2 + v3[11]);
  *(unsigned char *)(v1 + v3[12]) = *(unsigned char *)(v2 + v3[12]);
  *(unsigned char *)(v1 + v3[13]) = *(unsigned char *)(v2 + v3[13]);
  *(unsigned char *)(v1 + v3[14]) = *(unsigned char *)(v2 + v3[14]);
  *(unsigned char *)(v1 + v3[15]) = *(unsigned char *)(v2 + v3[15]);
  *(void *)(v1 + v3[16]) = *(void *)(v2 + v3[16]);
  *(void *)(v1 + v3[17]) = *(void *)(v2 + v3[17]);
  *(void *)(v1 + v3[18]) = *(void *)(v2 + v3[18]);
  *(void *)(v1 + v3[19]) = *(void *)(v2 + v3[19]);
  *(void *)(v1 + v3[20]) = *(void *)(v2 + v3[20]);
  *(void *)(v1 + v3[21]) = *(void *)(v2 + v3[21]);
  return swift_bridgeObjectRetain();
}

void sub_1000C83B4()
{
  *(void *)(v0 + v2[7]) = *(void *)(v1 + v2[7]);
  *(unsigned char *)(v0 + v2[8]) = *(unsigned char *)(v1 + v2[8]);
  *(unsigned char *)(v0 + v2[9]) = *(unsigned char *)(v1 + v2[9]);
  *(unsigned char *)(v0 + v2[10]) = *(unsigned char *)(v1 + v2[10]);
  *(void *)(v0 + v2[11]) = *(void *)(v1 + v2[11]);
  *(unsigned char *)(v0 + v2[12]) = *(unsigned char *)(v1 + v2[12]);
  *(unsigned char *)(v0 + v2[13]) = *(unsigned char *)(v1 + v2[13]);
  *(unsigned char *)(v0 + v2[14]) = *(unsigned char *)(v1 + v2[14]);
  *(unsigned char *)(v0 + v2[15]) = *(unsigned char *)(v1 + v2[15]);
  *(void *)(v0 + v2[16]) = *(void *)(v1 + v2[16]);
}

uint64_t sub_1000C8434(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1000C8450()
{
  return v0;
}

uint64_t sub_1000C8460(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000C8478()
{
  return type metadata accessor for DailyViewAttributes();
}

double sub_1000C84C0()
{
  uint64_t v3 = *(int *)(v2 + 80);
  double result = *(double *)(v1 + v3);
  *(double *)(v0 + v3) = result;
  *(void *)(v0 + *(int *)(v2 + 84)) = *(void *)(v1 + *(int *)(v2 + 84));
  return result;
}

void sub_1000C84E8(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = *(void *)(v2 + a1);
}

uint64_t sub_1000C84F4()
{
  uint64_t v4 = v0 + *(int *)(v1 + 92);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v2);
}

uint64_t sub_1000C8518(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_1000C8538()
{
  return v0;
}

uint64_t sub_1000C854C()
{
  return 0;
}

void sub_1000C855C(uint64_t a1@<X8>)
{
  *(unsigned char *)(v1 + a1) = *(unsigned char *)(v2 + a1);
}

uint64_t sub_1000C8568()
{
  return sub_10012C800();
}

uint64_t sub_1000C85CC()
{
  return swift_bridgeObjectRelease();
}

void *sub_1000C85E8(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v4, v3, a3);
}

void *sub_1000C8600(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

uint64_t sub_1000C8630()
{
  return v0;
}

uint64_t sub_1000C8640@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = *(void *)(v2 + a1);
  return swift_release();
}

uint64_t sub_1000C865C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = *(void *)(v2 + a1);
  return swift_retain();
}

uint64_t sub_1000C8678()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C86A8()
{
  return v0;
}

uint64_t sub_1000C86BC()
{
  return v0;
}

uint64_t sub_1000C86D0()
{
  return v0;
}

void sub_1000C86E4()
{
  *(void *)(v1 + *(int *)(v2 + 20) + 8) = (v0 - 1);
}

uint64_t sub_1000C86F8()
{
  return v0;
}

uint64_t sub_1000C870C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_10000B3FC();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WeatherDataViewModel();
  sub_10000B3FC();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  type metadata accessor for ForecastEntry.Model(0);
  sub_10000B3FC();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ForecastEntry(0);
  sub_100012588(v1 + *(int *)(v16 + 28), (uint64_t)v15, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000125E8((uint64_t)v15, (uint64_t)v12, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    sub_100012588((uint64_t)v12, (uint64_t)v10, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    if (swift_getEnumCaseMultiPayload())
    {
      sub_10002C540((uint64_t)v10);
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v17 = sub_10012AB60();
      sub_10000D7A4(v17, (uint64_t)qword_100181C40);
      uint64_t v18 = sub_10012AB40();
      os_log_type_t v19 = sub_10012CD40();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Expected aggregate weather but got instant or sunriseSunset", v20, 2u);
        swift_slowDealloc();
      }

      sub_10002C540((uint64_t)v12);
      uint64_t v21 = 1;
    }
    else
    {
      sub_1000125E8((uint64_t)v10, (uint64_t)v6, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_10012AB60();
      sub_10000D7A4(v22, (uint64_t)qword_100181C40);
      uint64_t v23 = sub_10012AB40();
      os_log_type_t v24 = sub_10012CD60();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Making AdaptiveConditions complication view model entry from aggregate weather", v25, 2u);
        swift_slowDealloc();
      }

      sub_10002C540((uint64_t)v12);
      sub_1000125E8((uint64_t)v6, a1, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      uint64_t v21 = 0;
    }
  }
  else if (*v15)
  {
    uint64_t v21 = 1;
  }
  else
  {
    uint64_t v21 = 2;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, v21, 2, v3);
}

uint64_t *sub_1000C8ABC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10012C610();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    *((_WORD *)v10 + 4) = *((_WORD *)v11 + 4);
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    uint64_t v14 = sub_10012C0E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_1000C8BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012C610();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = sub_10012C0E0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1000C8C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C610();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_WORD *)(v9 + 8) = *(_WORD *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = sub_10012C0E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000C8D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C610();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  unsigned char *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  v8[6] = v9[6];
  v8[7] = v9[7];
  v8[8] = v9[8];
  v8[9] = v9[9];
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_10012C0E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000C8E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C610();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_WORD *)(v9 + 8) = *(_WORD *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = sub_10012C0E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000C8F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012C610();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(_WORD *)(v9 + 8) = *(_WORD *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = sub_10012C0E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000C9008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C901C);
}

uint64_t sub_1000C901C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10012C610();
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    if (a2 == 251)
    {
      unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
      if (v10 >= 5) {
        return v10 - 4;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = sub_10012C0E0();
    uint64_t v9 = a1 + *(int *)(a3 + 24);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
}

uint64_t sub_1000C90C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C90D8);
}

void sub_1000C90D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_10012C610();
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 251)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
      return;
    }
    uint64_t v10 = sub_10012C0E0();
    uint64_t v11 = a1 + *(int *)(a4 + 24);
  }

  _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t type metadata accessor for DataDenseViewAttributes()
{
  uint64_t result = qword_10016FB30;
  if (!qword_10016FB30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C91C8()
{
  uint64_t result = sub_10012C610();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_10012C0E0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C9298(uint64_t a1, long long *a2, void *a3, long long *a4)
{
  swift_unknownObjectWeakInit();
  *(void *)(v4 + 16) = a1;
  sub_100070A60(a2, v4 + 24);
  swift_unknownObjectWeakAssign();

  sub_100070A60(a4, v4 + 72);
  return v4;
}

uint64_t sub_1000C9314()
{
  swift_release();
  sub_10000DB48(v0 + 24);
  swift_unknownObjectWeakDestroy();
  sub_10000DB48(v0 + 72);
  return v0;
}

uint64_t sub_1000C934C()
{
  sub_1000C9314();

  return _swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for GeocodeWeatherService()
{
  return self;
}

uint64_t sub_1000C93A4(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = a2;
  uint64_t v59 = sub_100129710();
  sub_10000B3FC();
  __chkstk_darwin(v3);
  sub_10000DBCC();
  uint64_t v60 = v4;
  uint64_t v5 = sub_1000053D8(&qword_10016E860);
  uint64_t v6 = sub_10000DC9C(v5);
  __chkstk_darwin(v6);
  sub_10000DBCC();
  uint64_t v58 = v7;
  uint64_t v8 = sub_1000053D8(&qword_10016E868);
  uint64_t v9 = sub_10000DC9C(v8);
  __chkstk_darwin(v9);
  sub_10000DBCC();
  uint64_t v54 = v10;
  sub_100129760();
  sub_10000DB98();
  uint64_t v62 = v12;
  uint64_t v63 = v11;
  __chkstk_darwin(v11);
  sub_10000DBCC();
  uint64_t v61 = v13;
  uint64_t v14 = sub_1000053D8(&qword_10016FC28);
  uint64_t v15 = sub_10000DC9C(v14);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100129780();
  sub_10000DB98();
  uint64_t v52 = v19;
  uint64_t v53 = v18;
  __chkstk_darwin(v18);
  sub_10000DBCC();
  uint64_t v21 = v20;
  sub_100129D90();
  sub_10000DB98();
  uint64_t v56 = v23;
  uint64_t v57 = v22;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1000053D8(&qword_10016C7C0);
  uint64_t v27 = sub_10000DC9C(v26);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v49 - v31;
  sub_10012A980();
  uint64_t v65 = v2;
  sub_10000D890((void *)(v65 + 24), *(void *)(v65 + 48));
  uint64_t v55 = v25;
  sub_100129DD0();
  sub_10012A960();
  uint64_t v33 = sub_10012A9A0();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v33) == 1)
  {
    sub_1000235F8((uint64_t)v17, &qword_10016FC28);
  }
  else
  {
    sub_10012A990();
    (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(v17, v33);
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v35 = (void *)Strong;
    sub_10003C74C();
  }
  uint64_t v36 = v21;
  uint64_t v50 = v21;
  sub_100129770();
  char v51 = v32;
  sub_10002BADC((uint64_t)v32, (uint64_t)v30, &qword_10016C7C0);
  uint64_t v38 = v52;
  uint64_t v37 = v53;
  uint64_t v39 = v54;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v54, v36, v53);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v39, 0, 1, v37);
  sub_10012A970();
  uint64_t v40 = sub_100129740();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v58, 1, 1, v40);
  sub_10012A950();
  uint64_t v66 = &_swiftEmptyArrayStorage;
  sub_1000CB660();
  sub_1000053D8(&qword_10016E880);
  sub_1000994F8();
  sub_10012CFC0();
  uint64_t v41 = v61;
  uint64_t v42 = sub_100129750();
  __chkstk_darwin(v42);
  uint64_t v43 = v64;
  *(&v49 - 4) = v65;
  *(&v49 - 3) = v43;
  char v44 = v55;
  uint64_t v47 = v55;
  uint64_t v48 = v41;
  sub_1000053D8(&qword_10016FC30);
  swift_allocObject();
  uint64_t v45 = sub_10012A8E0();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v50, v37);
  sub_1000235F8((uint64_t)v51, &qword_10016C7C0);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v41, v63);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v44, v57);
  return v45;
}

uint64_t sub_1000C9920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v64 = a8;
  uint64_t v44 = a5;
  uint64_t v45 = a2;
  uint64_t v46 = a4;
  uint64_t v49 = a3;
  uint64_t v51 = a1;
  uint64_t v65 = sub_1000053D8(&qword_10016FC38);
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v37 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000053D8(&qword_10016E820);
  uint64_t v61 = *(void *)(v10 - 8);
  uint64_t v62 = v10;
  __chkstk_darwin(v10);
  uint64_t v38 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000053D8(&qword_10016E828);
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  __chkstk_darwin(v12);
  uint64_t v39 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000053D8(&qword_10016E830);
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  __chkstk_darwin(v14);
  uint64_t v40 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000053D8(&qword_10016E838);
  uint64_t v55 = *(void *)(v16 - 8);
  uint64_t v56 = v16;
  __chkstk_darwin(v16);
  uint64_t v41 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000053D8(&qword_10016E858);
  uint64_t v53 = *(void *)(v18 - 8);
  uint64_t v54 = v18;
  __chkstk_darwin(v18);
  uint64_t v42 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_1000053D8(&qword_10016E840);
  uint64_t v50 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v43 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000053D8(&qword_10016E848);
  uint64_t v47 = *(void *)(v21 - 8);
  uint64_t v48 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = *(void *)(v44 + 16);
  sub_100129D70();
  sub_100129D80();
  sub_100129D50();
  sub_100129D30();
  sub_100129D10();
  sub_100129D60();
  sub_100129D40();
  sub_100129D20();
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v25 = v51;
  v24[2] = a6;
  v24[3] = v25;
  uint64_t v26 = v46;
  uint64_t v27 = v49;
  v24[4] = v45;
  v24[5] = v27;
  v24[6] = v26;
  sub_1001295D0();
  id v28 = a6;
  swift_retain();
  swift_retain();
  sub_1000053D8(&qword_10016B3D8);
  sub_1000053D8(&qword_10016E890);
  sub_1000053D8(&qword_10016B3C0);
  sub_1000053D8(&qword_10016B558);
  sub_1000053D8(&qword_10016B3C8);
  sub_1000053D8(&qword_10016E898);
  sub_100129AF0();
  uint64_t v29 = v37;
  uint64_t v30 = v43;
  uint64_t v31 = v42;
  uint64_t v32 = v41;
  uint64_t v33 = v40;
  uint64_t v34 = v39;
  uint64_t v35 = v38;
  sub_100129890();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v29, v65);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v62);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v34, v60);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v58);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v56);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v54);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v52);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v23, v48);
}

uint64_t sub_1000CA000(uint64_t a1, char *a2, void (*a3)(char *), uint64_t a4, void (*a5)(void))
{
  uint64_t v183 = a4;
  v179 = a2;
  uint64_t v8 = sub_1000053D8(&qword_10016FC40);
  __chkstk_darwin(v8 - 8);
  v180 = (char *)&v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000053D8(&qword_10016C7B0);
  __chkstk_darwin(v10 - 8);
  v178 = (char *)&v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = (void (*)(char *, uint64_t))sub_100129300();
  uint64_t v12 = __chkstk_darwin(v176);
  uint64_t v177 = (uint64_t)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v187 = (char *)&v146 - v14;
  uint64_t v15 = sub_10012AA10();
  __chkstk_darwin(v15 - 8);
  v188 = (char *)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = sub_10012A9C0();
  uint64_t v184 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  v190 = (char *)&v146 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (int *)sub_1000053D8(&qword_10016FC48);
  uint64_t v19 = __chkstk_darwin(v18);
  v182 = (char *)&v146 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v146 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  v189 = (char *)&v146 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v198 = (char *)&v146 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v193 = (char *)&v146 - v29;
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v146 - v30;
  uint64_t v32 = sub_1000053D8(&qword_10016FC50);
  __chkstk_darwin(v32);
  uint64_t v34 = (uint64_t *)((char *)&v146 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002BADC(a1, (uint64_t)v34, &qword_10016FC50);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    a5(*v34);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v36 = v18[12];
    uint64_t v37 = (uint64_t)&v31[v36];
    uint64_t v38 = v18[16];
    uint64_t v39 = &v31[v38];
    v200 = &v31[v38];
    uint64_t v40 = v18[20];
    uint64_t v41 = &v31[v40];
    v210 = &v31[v36];
    v211 = &v31[v40];
    uint64_t v42 = v18[24];
    v213 = &v31[v42];
    uint64_t v43 = v18[28];
    v214 = &v31[v43];
    uint64_t v44 = v18[36];
    v209 = &v31[v44];
    v181 = v23;
    uint64_t v45 = (uint64_t)v31;
    uint64_t v46 = (uint64_t)v34 + v36;
    uint64_t v47 = (char *)v34 + v38;
    v174 = a3;
    uint64_t v48 = v18[32];
    v205 = (void (*)(char *, char *, uint64_t))((char *)v34 + v40);
    uint64_t v207 = (uint64_t)v34 + v42;
    uint64_t v216 = (uint64_t)v34 + v43;
    uint64_t v206 = (uint64_t)v34 + v44;
    uint64_t v215 = sub_1001295D0();
    uint64_t v49 = *(void *)(v215 - 8);
    uint64_t v186 = v49;
    (*(void (**)(uint64_t, void *, uint64_t))(v49 + 32))(v45, v34, v215);
    sub_10000B2F4(v46, v37, &qword_10016B3D8);
    uint64_t v208 = sub_1000053D8(&qword_10016E890);
    uint64_t v191 = *(void *)(v208 - 8);
    (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v39, v47, v208);
    uint64_t v199 = sub_1000053D8(&qword_10016B3C0);
    uint64_t v192 = *(void *)(v199 - 8);
    (*(void (**)(char *, void *, uint64_t))(v192 + 32))(v41, v205, v199);
    sub_10000B2F4(v207, (uint64_t)v213, &qword_10016B558);
    sub_10000B2F4(v216, (uint64_t)v214, &qword_10016B3C8);
    uint64_t v201 = *(void *)((char *)v34 + v48);
    uint64_t v212 = v45;
    *(void *)(v45 + v48) = v201;
    uint64_t v207 = sub_100129AF0();
    uint64_t v216 = *(void *)(v207 - 8);
    uint64_t v50 = v209;
    (*(void (**)(char *, uint64_t, uint64_t))(v216 + 32))(v209, v206, v207);
    uint64_t v51 = v193;
    v171 = &v193[v18[12]];
    uint64_t v52 = (uint64_t)v171;
    v170 = &v193[v18[16]];
    uint64_t v53 = v170;
    v169 = &v193[v18[20]];
    uint64_t v54 = (uint64_t)v169;
    v168 = &v193[v18[24]];
    uint64_t v55 = (uint64_t)v168;
    uint64_t v175 = (uint64_t)&v193[v18[28]];
    uint64_t v206 = v18[32];
    uint64_t v56 = &v193[v18[36]];
    v202 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
    uint64_t v196 = v49 + 16;
    v202(v193, v45, v215);
    sub_10002BADC((uint64_t)v210, v52, &qword_10016B3D8);
    v205 = *(void (**)(char *, char *, uint64_t))(v191 + 16);
    uint64_t v197 = v191 + 16;
    uint64_t v57 = v200;
    v205(v53, v200, v208);
    v195 = *(void (**)(uint64_t, char *, uint64_t))(v192 + 16);
    uint64_t v194 = v192 + 16;
    v195(v54, v211, v199);
    sub_10002BADC((uint64_t)v213, v55, &qword_10016B558);
    sub_10002BADC((uint64_t)v214, v175, &qword_10016B3C8);
    uint64_t v58 = v201;
    *(void *)&v51[v206] = v201;
    uint64_t v59 = v216;
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
    uint64_t v206 = v216 + 16;
    v204 = v60;
    uint64_t v61 = v50;
    uint64_t v62 = v207;
    v60(v56, v61, v207);
    swift_bridgeObjectRetain();
    sub_100129AD0();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v59 + 8);
    uint64_t v216 = v59 + 8;
    v203 = v63;
    v63(v56, v62);
    uint64_t v64 = v198;
    v172 = &v198[v18[12]];
    uint64_t v65 = v172;
    uint64_t v167 = (uint64_t)&v198[v18[16]];
    uint64_t v66 = v167;
    uint64_t v67 = &v198[v18[20]];
    uint64_t v68 = (uint64_t)&v198[v18[24]];
    uint64_t v69 = (uint64_t)&v198[v18[28]];
    v173 = (void (*)(uint64_t, uint64_t))v18[32];
    uint64_t v70 = &v198[v18[36]];
    v202(v198, v212, v215);
    sub_10002BADC((uint64_t)v210, (uint64_t)v65, &qword_10016B3D8);
    v205((char *)v66, v57, v208);
    char v71 = v67;
    uint64_t v72 = v199;
    v195((uint64_t)v67, v211, v199);
    sub_10002BADC((uint64_t)v213, v68, &qword_10016B558);
    sub_10002BADC((uint64_t)v214, v69, &qword_10016B3C8);
    *(void *)((char *)v173 + (void)v64) = v58;
    uint64_t v73 = v207;
    v204(v70, v209, v207);
    sub_100129A80();
    v203(v70, v73);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v178, 1, 1, (uint64_t)v176);
    uint64_t v74 = v179;
    [v179 coordinate];
    [v74 coordinate];
    uint64_t v75 = sub_10012A9F0();
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v180, 1, 1, v75);
    sub_10012AA00();
    sub_1000235F8(v69, &qword_10016B3C8);
    sub_1000235F8(v68, &qword_10016B558);
    uint64_t v77 = v192 + 8;
    uint64_t v76 = *(void (**)(char *, uint64_t))(v192 + 8);
    v76(v71, v72);
    char v78 = v76;
    v176 = v76;
    uint64_t v192 = v77;
    uint64_t v80 = v191 + 8;
    char v79 = *(void (**)(uint64_t, uint64_t))(v191 + 8);
    v79(v167, v208);
    char v81 = (void (*)(char *, uint64_t))v79;
    v173 = v79;
    uint64_t v191 = v80;
    sub_1000235F8((uint64_t)v172, &qword_10016B3D8);
    uint64_t v82 = v186 + 8;
    uint64_t v83 = *(char **)(v186 + 8);
    uint64_t v84 = v215;
    ((void (*)(char *, uint64_t))v83)(v198, v215);
    v172 = v83;
    uint64_t v186 = v82;
    sub_1000235F8(v175, &qword_10016B3C8);
    sub_1000235F8((uint64_t)v168, &qword_10016B558);
    v78(v169, v72);
    uint64_t v85 = v208;
    v81(v170, v208);
    sub_1000235F8((uint64_t)v171, &qword_10016B3D8);
    uint64_t v86 = v193;
    uint64_t v87 = v84;
    ((void (*)(char *, uint64_t))v83)(v193, v84);
    uint64_t v88 = v86;
    v187 = &v86[v18[12]];
    uint64_t v89 = (uint64_t)v187;
    v180 = &v86[v18[16]];
    uint64_t v90 = (uint64_t)v180;
    v179 = &v86[v18[20]];
    uint64_t v91 = v179;
    v178 = &v86[v18[24]];
    uint64_t v92 = (uint64_t)v178;
    uint64_t v93 = (uint64_t)&v86[v18[28]];
    uint64_t v177 = v93;
    uint64_t v175 = v18[32];
    uint64_t v94 = &v88[v18[36]];
    v202(v88, v212, v87);
    sub_10002BADC((uint64_t)v210, v89, &qword_10016B3D8);
    v205((char *)v90, v200, v85);
    v195((uint64_t)v91, v211, v199);
    sub_10002BADC((uint64_t)v213, v92, &qword_10016B558);
    sub_10002BADC((uint64_t)v214, v93, &qword_10016B3C8);
    *(void *)&v88[v175] = v201;
    uint64_t v95 = v207;
    v204(v94, v209, v207);
    uint64_t v167 = sub_100129AB0();
    uint64_t v166 = v96;
    v203(v94, v95);
    uint64_t v97 = v198;
    uint64_t v175 = (uint64_t)&v198[v18[12]];
    uint64_t v98 = v175;
    v171 = &v198[v18[16]];
    uint64_t v99 = (uint64_t)v171;
    v170 = &v198[v18[20]];
    uint64_t v100 = v170;
    v169 = &v198[v18[24]];
    uint64_t v101 = (uint64_t)v169;
    v168 = &v198[v18[28]];
    uint64_t v102 = (uint64_t)v168;
    uint64_t v165 = v18[32];
    uint64_t v103 = &v198[v18[36]];
    v202(v198, v212, v215);
    sub_10002BADC((uint64_t)v210, v98, &qword_10016B3D8);
    uint64_t v104 = v99;
    uint64_t v105 = v208;
    v205((char *)v104, v200, v208);
    v195((uint64_t)v100, v211, v199);
    sub_10002BADC((uint64_t)v213, v101, &qword_10016B558);
    sub_10002BADC((uint64_t)v214, v102, &qword_10016B3C8);
    *(void *)&v97[v165] = v201;
    uint64_t v106 = v207;
    v204(v103, v209, v207);
    uint64_t v160 = sub_100129AC0();
    uint64_t v159 = v107;
    v203(v103, v106);
    double v108 = v189;
    uint64_t v165 = (uint64_t)&v189[v18[12]];
    uint64_t v109 = v165;
    v164 = &v189[v18[16]];
    uint64_t v110 = v164;
    v163 = &v189[v18[20]];
    uint64_t v111 = v163;
    v162 = &v189[v18[24]];
    uint64_t v112 = (uint64_t)v162;
    v161 = &v189[v18[28]];
    uint64_t v113 = (uint64_t)v161;
    uint64_t v158 = v18[32];
    uint64_t v114 = &v189[v18[36]];
    v202(v189, v212, v215);
    sub_10002BADC((uint64_t)v210, v109, &qword_10016B3D8);
    v205(v110, v200, v105);
    unsigned __int8 v115 = (void (*)(char *, char *, uint64_t))v195;
    v195((uint64_t)v111, v211, v199);
    sub_10002BADC((uint64_t)v213, v112, &qword_10016B558);
    sub_10002BADC((uint64_t)v214, v113, &qword_10016B3C8);
    *(void *)&v108[v158] = v201;
    uint64_t v116 = v207;
    v204(v114, v209, v207);
    uint64_t v155 = sub_100129AA0();
    uint64_t v154 = v117;
    v203(v114, v116);
    uint64_t v118 = v181;
    uint64_t v158 = (uint64_t)&v181[v18[12]];
    uint64_t v119 = v158;
    v157 = &v181[v18[16]];
    uint64_t v120 = v157;
    v156 = &v181[v18[20]];
    unsigned __int8 v121 = v156;
    uint64_t v153 = &v181[v18[24]];
    uint64_t v122 = (uint64_t)v153;
    v152 = &v181[v18[28]];
    uint64_t v123 = (uint64_t)v152;
    uint64_t v151 = v18[32];
    uint64_t v124 = &v181[v18[36]];
    v202(v181, v212, v215);
    sub_10002BADC((uint64_t)v210, v119, &qword_10016B3D8);
    uint64_t v125 = v120;
    uint64_t v126 = v208;
    v205(v125, v200, v208);
    uint64_t v127 = v121;
    uint64_t v128 = v199;
    v115(v127, v211, v199);
    sub_10002BADC((uint64_t)v213, v122, &qword_10016B558);
    sub_10002BADC((uint64_t)v214, v123, &qword_10016B3C8);
    *(void *)&v118[v151] = v201;
    uint64_t v129 = v207;
    v204(v124, v209, v207);
    uint64_t v151 = sub_100129A90();
    uint64_t v149 = v130;
    v203(v124, v129);
    uint64_t v131 = v182;
    unint64_t v150 = &v182[v18[12]];
    uint64_t v132 = (uint64_t)v150;
    uint64_t v148 = &v182[v18[16]];
    v133 = v148;
    v134 = &v182[v18[20]];
    uint64_t v135 = (uint64_t)&v182[v18[24]];
    uint64_t v136 = (uint64_t)&v182[v18[28]];
    uint64_t v147 = v18[32];
    v137 = &v182[v18[36]];
    v202(v182, v212, v215);
    sub_10002BADC((uint64_t)v210, v132, &qword_10016B3D8);
    v205(v133, v200, v126);
    v195((uint64_t)v134, v211, v128);
    sub_10002BADC((uint64_t)v213, v135, &qword_10016B558);
    sub_10002BADC((uint64_t)v214, v136, &qword_10016B3C8);
    *(void *)&v131[v147] = v201;
    uint64_t v138 = v207;
    v204(v137, v209, v207);
    swift_bridgeObjectRelease();
    sub_100129AE0();
    v203(v137, v138);
    sub_10012A9B0();
    sub_1000235F8(v136, &qword_10016B3C8);
    sub_1000235F8(v135, &qword_10016B558);
    v139 = v176;
    v176(v134, v128);
    uint64_t v140 = v208;
    v141 = (void (*)(char *, uint64_t))v173;
    v173((uint64_t)v148, v208);
    sub_1000235F8((uint64_t)v150, &qword_10016B3D8);
    v142 = v131;
    uint64_t v143 = v215;
    v144 = v172;
    ((void (*)(char *, uint64_t))v172)(v142, v215);
    sub_1000235F8((uint64_t)v152, &qword_10016B3C8);
    sub_1000235F8((uint64_t)v153, &qword_10016B558);
    v139(v156, v128);
    v141(v157, v140);
    sub_1000235F8(v158, &qword_10016B3D8);
    ((void (*)(char *, uint64_t))v144)(v181, v143);
    sub_1000235F8((uint64_t)v161, &qword_10016B3C8);
    sub_1000235F8((uint64_t)v162, &qword_10016B558);
    v139(v163, v128);
    v141(v164, v140);
    sub_1000235F8(v165, &qword_10016B3D8);
    ((void (*)(char *, uint64_t))v144)(v189, v143);
    sub_1000235F8((uint64_t)v168, &qword_10016B3C8);
    sub_1000235F8((uint64_t)v169, &qword_10016B558);
    v139(v170, v128);
    v141(v171, v140);
    sub_1000235F8(v175, &qword_10016B3D8);
    ((void (*)(char *, uint64_t))v144)(v198, v143);
    sub_1000235F8(v177, &qword_10016B3C8);
    sub_1000235F8((uint64_t)v178, &qword_10016B558);
    v139(v179, v128);
    v141(v180, v140);
    sub_1000235F8((uint64_t)v187, &qword_10016B3D8);
    ((void (*)(char *, uint64_t))v144)(v193, v143);
    v145 = v190;
    v174(v190);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v145, v185);
    return sub_1000235F8(v212, &qword_10016FC48);
  }
}

uint64_t sub_1000CB63C(uint64_t a1, uint64_t a2)
{
  return sub_1000C93A4(a1, a2);
}

unint64_t sub_1000CB660()
{
  unint64_t result = qword_10016E878;
  if (!qword_10016E878)
  {
    sub_100129710();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016E878);
  }
  return result;
}

uint64_t sub_1000CB6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C9920(a1, a2, a3, a4, *(void *)(v4 + 16), *(void **)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40));
}

uint64_t sub_1000CB6BC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000CB704(uint64_t a1)
{
  return sub_1000CA000(a1, *(char **)(v1 + 16), *(void (**)(char *))(v1 + 24), *(void *)(v1 + 32), *(void (**)(void))(v1 + 40));
}

uint64_t sub_1000CB714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CB728);
}

uint64_t sub_1000CB728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BFA0();

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
}

uint64_t sub_1000CB770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CB784);
}

uint64_t sub_1000CB784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012BFA0();

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CurrentObservationViewModelFactory()
{
  uint64_t result = qword_10016FCB0;
  if (!qword_10016FCB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_1000CB818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  v349 = a3;
  uint64_t v340 = a2;
  uint64_t v359 = a1;
  v339[5] = a4;
  uint64_t v305 = sub_10012BFA0();
  sub_10000DB98();
  uint64_t v312 = v4;
  __chkstk_darwin(v5);
  sub_10000DBCC();
  sub_1000999FC(v6);
  uint64_t v319 = sub_100129510();
  sub_10000DB98();
  uint64_t v318 = v7;
  __chkstk_darwin(v8);
  sub_10000DBCC();
  sub_100012098(v9);
  uint64_t v10 = sub_1000053D8(&qword_10016E890);
  uint64_t v11 = sub_10000DC9C(v10);
  __chkstk_darwin(v11);
  sub_10000DBCC();
  sub_100012098(v12);
  uint64_t v13 = sub_1000053D8(&qword_10016B558);
  uint64_t v14 = sub_10000DC9C(v13);
  __chkstk_darwin(v14);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v15);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v16);
  sub_100011FAC();
  sub_100012098(v17);
  uint64_t v18 = sub_1000053D8(&qword_10016C070);
  uint64_t v19 = sub_10000DC9C(v18);
  __chkstk_darwin(v19);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v20);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v21);
  sub_100011FAC();
  sub_1000999FC(v22);
  uint64_t v23 = sub_100129E20();
  uint64_t v24 = sub_10000DC9C(v23);
  __chkstk_darwin(v24);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v25);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v26);
  sub_100011FAC();
  sub_1000999FC(v27);
  uint64_t v28 = sub_100129E70();
  uint64_t v29 = sub_10000DC9C(v28);
  __chkstk_darwin(v29);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v30);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v31);
  sub_100011FAC();
  sub_1000999FC(v32);
  sub_100129F10();
  sub_10000DB98();
  uint64_t v344 = v34;
  uint64_t v345 = v33;
  __chkstk_darwin(v33);
  sub_10000DBCC();
  sub_100012098(v35);
  uint64_t v36 = sub_1000053D8(&qword_10016C7B0);
  uint64_t v37 = sub_10000DC9C(v36);
  __chkstk_darwin(v37);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v38);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v39);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v40);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v41);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v42);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v43);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v44);
  sub_100011FAC();
  sub_1000999FC(v45);
  uint64_t v46 = sub_10012BB00();
  uint64_t v47 = sub_10000DC9C(v46);
  __chkstk_darwin(v47);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v48);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v49);
  sub_100011FAC();
  sub_100012098(v50);
  uint64_t v51 = sub_1000053D8(&qword_10016B098);
  uint64_t v52 = sub_10000DC9C(v51);
  __chkstk_darwin(v52);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v53);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v54);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v55);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v56);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v57);
  sub_100011FAC();
  sub_100012098(v58);
  uint64_t v350 = sub_1000053D8(&qword_10016B060);
  sub_1000472C0();
  __chkstk_darwin(v59);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v60);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v61);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v62);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v63);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v64);
  sub_100011FAC();
  sub_1000999FC(v65);
  v339[3] = sub_1001298F0();
  sub_10000DB98();
  v339[2] = v66;
  __chkstk_darwin(v67);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v68);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v69);
  char v71 = (char *)v295 - v70;
  uint64_t v72 = sub_100129330();
  uint64_t v73 = sub_10000DC9C(v72);
  __chkstk_darwin(v73);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v74);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v75);
  sub_100011FAC();
  sub_1000999FC(v76);
  v339[1] = sub_100129920();
  sub_10000DB98();
  v339[0] = v77;
  __chkstk_darwin(v78);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v79);
  sub_100011FAC();
  v333[3] = v80;
  sub_10012BBA0();
  sub_10000DB98();
  uint64_t v352 = v81;
  uint64_t v353 = v82;
  __chkstk_darwin(v81);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v83);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v84);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v85);
  sub_100011F60();
  uint64_t v348 = v86;
  sub_1000636C8();
  __chkstk_darwin(v87);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v88);
  sub_100011FAC();
  sub_1000999FC(v89);
  uint64_t v357 = sub_100129300();
  sub_10000DB98();
  uint64_t v354 = v90;
  __chkstk_darwin(v91);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v92);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v93);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v94);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v95);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v96);
  sub_100011F60();
  uint64_t v347 = v97;
  sub_1000636C8();
  __chkstk_darwin(v98);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v99);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v100);
  sub_100011FAC();
  sub_100012098(v101);
  uint64_t v342 = sub_1000053D8(&qword_10016B3C0);
  sub_10000DB98();
  uint64_t v341 = v102;
  __chkstk_darwin(v103);
  sub_10000DBCC();
  uint64_t v104 = sub_1000053D8(&qword_10016FCE8);
  uint64_t v105 = sub_10000DC9C(v104);
  __chkstk_darwin(v105);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v106);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v107);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v108);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v109);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v110);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v111);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v112);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v113);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v114);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v115);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v116);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v117);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v118);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v119);
  unsigned __int8 v121 = (char *)v295 - v120;
  uint64_t v356 = sub_1001295D0();
  sub_10000DB98();
  uint64_t v123 = v122;
  __chkstk_darwin(v124);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v125);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v126);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v127);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v128);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v129);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v130);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v131);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v132);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v133);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v134);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v135);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v136);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v137);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v138);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v139);
  v141 = (char *)v295 - v140;
  sub_10012A090();
  sub_10012A080();
  v142 = (void *)sub_10012A050();
  swift_release();
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v143 = sub_10012AB60();
  uint64_t v144 = sub_10000D7A4(v143, (uint64_t)qword_100181C40);
  id v145 = v142;
  uint64_t v346 = v144;
  uint64_t v146 = sub_10012AB40();
  os_log_type_t v147 = sub_10012CD60();
  BOOL v148 = os_log_type_enabled(v146, v147);
  v358 = v121;
  v355 = v141;
  id v351 = v145;
  if (v148)
  {
    uint64_t v149 = (uint8_t *)swift_slowAlloc();
    uint64_t v150 = swift_slowAlloc();
    v295[0] = v71;
    uint64_t v360 = (uint64_t)v145;
    uint64_t v361 = v150;
    *(_DWORD *)uint64_t v149 = 136446210;
    sub_10006CD88();
    id v151 = v145;
    uint64_t v152 = sub_10012CAB0();
    uint64_t v360 = sub_100123564(v152, v153, &v361);
    sub_10012CF70();

    unsigned __int8 v121 = v358;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v146, v147, "Building current weather model from aggregate weather. - unit: %{public}s", v149, 0xCu);
    swift_arrayDestroy();
    sub_10000DBB4();
    sub_10000DBB4();
  }
  else
  {
  }
  uint64_t v154 = v349;
  uint64_t v340 = v123;
  sub_100129950();
  sub_100129970();
  uint64_t v155 = v343;
  sub_100129570();
  sub_100129E90();
  uint64_t v156 = v354 + 8;
  uint64_t v157 = v155;
  uint64_t v158 = *(void (**)(uint64_t, uint64_t))(v354 + 8);
  v158(v157, v357);
  sub_10000B424();
  v159();
  if (!v154)
  {
    sub_1000CF094();
    sub_1001295C0();
    sub_100129540();
    sub_10012BF80();
    sub_10000B424();
    v169();
    sub_100129320();
    sub_1000120A4();
    sub_100129950();
    sub_100129570();
    v170 = *(void (**)(void))(v123 + 8);
    uint64_t v171 = v356;
    sub_1000CEFDC();
    v170();
    sub_1000CF034();
    sub_1001295B0();
    sub_1000CEFDC();
    v170();
    sub_1001298D0();
    sub_1000CF078();
    sub_10000B424();
    v172();
    sub_1000CF034();
    sub_1000CF088();
    sub_100129550();
    sub_1000CEFDC();
    v170();
    sub_1000CF034();
    sub_1000CF088();
    sub_100129560();
    sub_1000CEFDC();
    v170();
    id v173 = v351;
    uint64_t v174 = (uint64_t)v351;
    uint64_t v354 = sub_10012CDE0();
    v349 = v175;
    sub_1000CF050((uint64_t)v121, (uint64_t)v324);
    uint64_t v176 = sub_1001294C0();
    sub_1000CEF7C(v174);
    if (v177)
    {
      sub_100046DC4(v174, &qword_10016FCE8);
      uint64_t v211 = 1;
      uint64_t v171 = v331;
    }
    else
    {
      sub_1000120A4();
      sub_1001294A0();
      sub_1000472C0();
      sub_10000B424();
      v210();
      uint64_t v211 = 0;
    }
    uint64_t v212 = v307;
    uint64_t v213 = v306;
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v171, v211, 1, v350);
    sub_1000CEECC((uint64_t)v121, v213);
    v214 = v173;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v213, 1, v176) == 1)
    {
      sub_100046DC4(v213, &qword_10016FCE8);
      uint64_t v215 = 1;
      uint64_t v216 = v330;
    }
    else
    {
      uint64_t v216 = v330;
      sub_100129490();
      sub_1000472C0();
      sub_10000B424();
      v217();
      uint64_t v215 = 0;
    }
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v216, v215, 1, v350);
    sub_1000999B4();
    v218();
    sub_1000CF094();
    uint64_t v219 = v359;
    sub_100129950();
    sub_100129530();
    sub_1000CEFDC();
    v170();
    sub_1000CF094();
    sub_100129950();
    sub_1000CF018();
    sub_100129520();
    sub_1000CEFDC();
    v170();
    sub_1000CF050((uint64_t)v121, (uint64_t)v325);
    sub_1000CEF7C(v219);
    if (v177)
    {
      sub_100046DC4(v219, &qword_10016FCE8);
      sub_1000CEF9C((uint64_t)&v347);
    }
    else
    {
      sub_1000CF0C0();
      sub_1001294B0();
      sub_1000472C0();
      sub_10000B424();
      v220();
      sub_100129F00();
      v221 = v121;
      unsigned __int8 v121 = v358;
      (*(void (**)(char *, uint64_t))(v344 + 8))(v221, v345);
    }
    sub_1000CEECC((uint64_t)v121, v212);
    sub_1000CEF7C(v212);
    v222 = v214;
    if (v177)
    {
      sub_100046DC4(v212, &qword_10016FCE8);
      sub_1000CEF9C((uint64_t)&v348);
    }
    else
    {
      sub_1000CF0C0();
      sub_1001294B0();
      sub_1000472C0();
      sub_10000B424();
      v223();
      sub_100129EF0();
      v224 = v121;
      unsigned __int8 v121 = v358;
      (*(void (**)(char *, uint64_t))(v344 + 8))(v224, v345);
    }
    uint64_t v225 = v309;
    uint64_t v226 = v308;
    sub_100129590();
    sub_100129580();
    sub_1001295A0();
    sub_100129960();
    sub_100129A20();
    sub_1000CEF7C(v225);
    if (v177)
    {
      sub_100046DC4(v225, &qword_10016B558);
      uint64_t v228 = 1;
    }
    else
    {
      sub_1000CE49C(v226);
      sub_1000472C0();
      sub_10000B424();
      v227();
      uint64_t v228 = 0;
    }
    uint64_t v229 = sub_10012C160();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v226, v228, 1, v229);
    uint64_t v294 = v226;
    uint64_t v293 = v333[2];
    uint64_t v292 = v333[1];
    uint64_t v291 = v333[0];
    sub_1000CF004();
    sub_10012C1F0();
    sub_1000CF068();
    sub_10000B424();
    v238(v230, v231, v232, v233, v234, v235, v236, v237);
    goto LABEL_70;
  }
  uint64_t v160 = v347;
  sub_100129570();
  sub_1000120A4();
  uint64_t v161 = sub_100129990();
  __chkstk_darwin(v161);
  uint64_t v293 = v160;
  uint64_t result = sub_1000CEA08((uint64_t (*)(char *))sub_1000CE9E8, (uint64_t)&v291);
  uint64_t v163 = *((void *)result + 2);
  uint64_t v354 = v156;
  if (v163)
  {
    uint64_t v164 = v350;
    uint64_t v165 = v329;
    if (v163 >= (uint64_t)v349)
    {
      uint64_t v206 = v349 - 1;
      if (__OFSUB__(v349, 1))
      {
        __break(1u);
      }
      else
      {
        uint64_t v207 = v304;
        uint64_t v208 = v303;
        if ((unint64_t)v206 < v163)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v318 + 16))(v327, &result[((*(unsigned __int8 *)(v318 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v318 + 80))+ *(void *)(v318 + 72) * (void)v206], v319);
          swift_bridgeObjectRelease();
          sub_1000999B4();
          v209();
          sub_100129500();
          sub_1001294F0();
          sub_1000CEECC((uint64_t)v358, v208);
          sub_1001294C0();
          sub_1000CEFBC(v208);
          if (v177)
          {
            sub_100046DC4(v208, &qword_10016FCE8);
            sub_1000CEF9C((uint64_t)v328);
          }
          else
          {
            sub_1000CF094();
            sub_1001294B0();
            sub_1000472C0();
            sub_10000B424();
            v239();
            sub_1000CF018();
            sub_100129F00();
            uint64_t v240 = sub_1000CF0CC();
            v241(v240);
          }
          sub_1000CEECC((uint64_t)v358, v207);
          sub_1000CEFBC(v207);
          if (v177)
          {
            sub_100046DC4(v207, &qword_10016FCE8);
            uint64_t v243 = v299;
            _s13WeatherWidget20WeatherDataViewModelOwst_0(v299, 1, 1, v357);
          }
          else
          {
            sub_1000CF024();
            sub_1001294B0();
            sub_1000472C0();
            sub_10000B424();
            v242();
            uint64_t v243 = v299;
            sub_100129EF0();
            uint64_t v244 = sub_1000CF0CC();
            v245(v244);
          }
          uint64_t v246 = v311;
          uint64_t v247 = v310;
          sub_1001292E0();
          sub_100046DC4(v243, &qword_10016C7B0);
          sub_100046DC4(v246, &qword_10016C7B0);
          v158(v247, v357);
          sub_10012BF80();
          sub_10000B424();
          v248();
          sub_10000B424();
          v249();
          sub_100129320();
          uint64_t v250 = v327;
          sub_1001294F0();
          sub_1000CF0C0();
          sub_100129950();
          sub_1000CF0B4();
          sub_1001295B0();
          v170 = *(void (**)(void))(v123 + 8);
          sub_1000CEFDC();
          v170();
          sub_1000CF088();
          sub_1001298D0();
          sub_1000CF078();
          sub_10000B424();
          v251();
          sub_1000CF018();
          sub_1001294D0();
          sub_1001294E0();
          uint64_t v252 = sub_10012CDE0();
          uint64_t v348 = v253;
          v349 = (char *)v252;
          uint64_t v254 = v296;
          sub_1000CEECC((uint64_t)v358, v296);
          sub_1000CEFBC(v254);
          if (v177)
          {
            sub_100046DC4(v254, &qword_10016FCE8);
            uint64_t v257 = 1;
            uint64_t v255 = v314;
          }
          else
          {
            sub_1000CF024();
            sub_1001294A0();
            uint64_t v255 = v250;
            sub_1000472C0();
            sub_10000B424();
            v256();
            uint64_t v257 = 0;
          }
          uint64_t v258 = v300;
          uint64_t v259 = v297;
          uint64_t v260 = v350;
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v255, v257, 1, v350);
          sub_1000CEECC((uint64_t)v358, v259);
          sub_1000CEFBC(v259);
          if (v177)
          {
            sub_100046DC4(v259, &qword_10016FCE8);
            uint64_t v262 = 1;
          }
          else
          {
            sub_100129490();
            sub_1000472C0();
            sub_10000B424();
            v261();
            uint64_t v262 = 0;
          }
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v258, v262, 1, v260);
          sub_1000999B4();
          v263();
          sub_1000CF0B4();
          uint64_t v264 = v359;
          sub_100129950();
          sub_100129530();
          sub_1000CEFDC();
          v170();
          sub_1000CF0B4();
          sub_100129950();
          sub_1000CF088();
          sub_100129520();
          sub_1000CEFDC();
          v170();
          sub_1000CF050((uint64_t)v358, (uint64_t)v313);
          sub_1000CEFBC(v264);
          if (v177)
          {
            sub_100046DC4(v264, &qword_10016FCE8);
            sub_1000CEF9C((uint64_t)v332);
          }
          else
          {
            sub_1000CEFE8();
            sub_1000472C0();
            sub_10000B424();
            v265();
            sub_100129F00();
            uint64_t v266 = sub_1000CF0E0();
            v267(v266);
          }
          uint64_t v268 = v302;
          uint64_t v269 = v298;
          sub_1000CEECC((uint64_t)v358, v298);
          sub_1000CEFBC(v269);
          if (v177)
          {
            sub_100046DC4(v269, &qword_10016FCE8);
            sub_1000CEF9C((uint64_t)v333);
          }
          else
          {
            sub_1000CEFE8();
            sub_1000472C0();
            sub_10000B424();
            v270();
            sub_100129EF0();
            uint64_t v271 = sub_1000CF0A0();
            v272(v271);
          }
          sub_100129590();
          sub_100129580();
          sub_1001295A0();
          sub_100129960();
          sub_100129A20();
          sub_1000CEFBC(v268);
          if (v177)
          {
            sub_100046DC4(v268, &qword_10016B558);
            uint64_t v275 = 1;
            uint64_t v273 = v301;
          }
          else
          {
            uint64_t v273 = v301;
            sub_1000CE49C(v301);
            sub_1000472C0();
            sub_10000B424();
            v274();
            uint64_t v275 = 0;
          }
          uint64_t v276 = sub_10012C160();
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v273, v275, 1, v276);
          uint64_t v294 = v273;
          uint64_t v293 = v317;
          uint64_t v292 = v316;
          uint64_t v291 = v315;
          sub_1000CF004();
          sub_10012C1F0();
          sub_1000CF068();
          sub_10000B424();
          v281(v277, v278, v279, v280);
          sub_10000B424();
          v286(v282, v283, v284, v285);
          v158(v347, v357);
          goto LABEL_69;
        }
      }
      __break(1u);
      return result;
    }
    uint64_t v166 = sub_10012AB40();
    os_log_type_t v167 = sub_10012CD40();
    if (os_log_type_enabled(v166, v167))
    {
      v168 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v168 = 0;
      _os_log_impl((void *)&_mh_execute_header, v166, v167, "Invalid hour entry - falling back to current conditions", v168, 2u);
      sub_10000DBB4();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v164 = v350;
    uint64_t v165 = v329;
  }
  v349 = (char *)v158;
  sub_1000120A4();
  sub_1001295C0();
  sub_100129540();
  sub_10012BF80();
  sub_10000B424();
  v178();
  sub_100129320();
  sub_1000120A4();
  sub_100129950();
  sub_100129570();
  v170 = *(void (**)(void))(v123 + 8);
  sub_1000CEFDC();
  v170();
  sub_1000CF0B4();
  sub_100129950();
  sub_1000CF024();
  sub_1001295B0();
  sub_1000CEFDC();
  v170();
  sub_1000CF018();
  sub_1001298D0();
  sub_1000CF078();
  sub_10000B424();
  v179();
  sub_100129950();
  sub_1000CF018();
  sub_100129550();
  sub_1000CEFDC();
  v170();
  sub_100129950();
  sub_1000CF018();
  sub_100129560();
  sub_1000CEFDC();
  v170();
  uint64_t v180 = (uint64_t)v351;
  sub_10012CDE0();
  sub_1000CF050((uint64_t)v358, (uint64_t)v336);
  sub_1001294C0();
  sub_1000CEF7C(v180);
  if (v177)
  {
    sub_100046DC4(v180, &qword_10016FCE8);
    uint64_t v183 = 1;
    uint64_t v181 = v334;
  }
  else
  {
    uint64_t v181 = v334;
    sub_1001294A0();
    sub_1000472C0();
    sub_10000B424();
    v182();
    uint64_t v183 = 0;
  }
  uint64_t v184 = v321;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v181, v183, 1, v164);
  sub_1000CEECC((uint64_t)v358, v165);
  sub_1000CEF7C(v165);
  if (v177)
  {
    sub_100046DC4(v165, &qword_10016FCE8);
    uint64_t v186 = 1;
  }
  else
  {
    sub_100129490();
    sub_1000472C0();
    sub_10000B424();
    v185();
    uint64_t v186 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v184, v186, 1, v164);
  sub_1000999B4();
  v187();
  sub_1000CF0C0();
  sub_100129950();
  sub_100129530();
  sub_1000CEFDC();
  v170();
  uint64_t v188 = v326;
  sub_100129950();
  sub_100129520();
  sub_1000CEFDC();
  v170();
  sub_1000CF050((uint64_t)v358, (uint64_t)v339);
  sub_1000CEF7C(v188);
  if (v177)
  {
    sub_100046DC4(v188, &qword_10016FCE8);
    sub_1000CEF9C((uint64_t)&v353);
  }
  else
  {
    sub_1000CEFE8();
    sub_1000472C0();
    sub_10000B424();
    v189();
    sub_100129F00();
    uint64_t v190 = sub_1000CF0E0();
    v191(v190);
  }
  uint64_t v192 = v323;
  uint64_t v193 = v320;
  sub_1000CEECC((uint64_t)v358, v320);
  sub_1000CEF7C(v193);
  if (v177)
  {
    sub_100046DC4(v193, &qword_10016FCE8);
    sub_1000CEF9C((uint64_t)&v354);
  }
  else
  {
    sub_1000CEFE8();
    sub_1000472C0();
    sub_10000B424();
    v194();
    sub_100129EF0();
    uint64_t v195 = sub_1000CF0A0();
    v196(v195);
  }
  sub_100129590();
  sub_100129580();
  sub_1001295A0();
  sub_100129960();
  sub_100129A20();
  sub_1000CEF7C(v192);
  if (v177)
  {
    sub_100046DC4(v192, &qword_10016B558);
    uint64_t v199 = 1;
    uint64_t v197 = v322;
  }
  else
  {
    uint64_t v197 = v322;
    sub_1000CE49C(v322);
    sub_1000472C0();
    sub_10000B424();
    v198();
    uint64_t v199 = 0;
  }
  uint64_t v200 = sub_10012C160();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v197, v199, 1, v200);
  uint64_t v294 = v197;
  uint64_t v293 = v338;
  uint64_t v292 = v337;
  uint64_t v291 = v335;
  sub_1000CF004();
  sub_10012C1F0();
  sub_1000CF068();
  sub_10000B424();
  v205(v201, v202, v203, v204);
  ((void (*)(uint64_t, uint64_t))v349)(v347, v357);
LABEL_69:
  unsigned __int8 v121 = v358;
  v222 = v351;
LABEL_70:
  v287 = sub_10012AB40();
  os_log_type_t v288 = sub_10012CD60();
  if (os_log_type_enabled(v287, v288))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_10000DBE0((void *)&_mh_execute_header, v289, v290, "Built current weather model from aggregate weather");
    sub_10000DBB4();
  }

  sub_100046DC4((uint64_t)v121, &qword_10016FCE8);
  return (char *)((uint64_t (*)(char *, uint64_t))v170)(v355, v356);
}

uint64_t sub_1000CDC58()
{
  uint64_t v0 = sub_1000053D8(&qword_10016C070);
  uint64_t v1 = sub_10000DC9C(v0);
  __chkstk_darwin(v1);
  sub_10000DBCC();
  uint64_t v53 = v2;
  uint64_t v3 = sub_100129E20();
  uint64_t v4 = sub_10000DC9C(v3);
  __chkstk_darwin(v4);
  sub_10000DBCC();
  uint64_t v5 = sub_100129E70();
  uint64_t v6 = sub_10000DC9C(v5);
  __chkstk_darwin(v6);
  sub_10000DBCC();
  uint64_t v7 = sub_1000053D8(&qword_10016C7B0);
  uint64_t v8 = sub_10000DC9C(v7);
  __chkstk_darwin(v8);
  sub_10000DCB4();
  uint64_t v52 = v9;
  sub_1000636C8();
  __chkstk_darwin(v10);
  sub_100011FAC();
  uint64_t v51 = v11;
  uint64_t v12 = sub_10012BB00();
  uint64_t v13 = sub_10000DC9C(v12);
  __chkstk_darwin(v13);
  sub_10000DBCC();
  uint64_t v14 = sub_1000053D8(&qword_10016B098);
  uint64_t v15 = sub_10000DC9C(v14);
  __chkstk_darwin(v15);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v16);
  sub_100011FAC();
  uint64_t v50 = v17;
  uint64_t v18 = sub_1000053D8(&qword_10016B060);
  sub_1000472C0();
  __chkstk_darwin(v19);
  sub_10000DCB4();
  sub_1000636C8();
  __chkstk_darwin(v20);
  sub_100011FAC();
  sub_1001298F0();
  sub_10000DB98();
  __chkstk_darwin(v21);
  uint64_t v48 = sub_100129300();
  sub_1000472C0();
  __chkstk_darwin(v22);
  sub_10000DCB4();
  sub_1000636C8();
  __chkstk_darwin(v23);
  sub_100011FAC();
  uint64_t v24 = sub_100129330();
  uint64_t v25 = sub_10000DC9C(v24);
  __chkstk_darwin(v25);
  sub_10000DBCC();
  sub_100129920();
  sub_10000DB98();
  __chkstk_darwin(v26);
  sub_10000DBCC();
  sub_10012BBA0();
  sub_10000DB98();
  __chkstk_darwin(v27);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v28);
  sub_100011FAC();
  sub_10012A090();
  sub_10012A080();
  uint64_t v29 = (void *)sub_10012A050();
  swift_release();
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v30 = sub_10012AB60();
  sub_10000D7A4(v30, (uint64_t)qword_100181C40);
  id v31 = v29;
  uint64_t v32 = sub_10012AB40();
  os_log_type_t v33 = sub_10012CD60();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136446210;
    sub_10006CD88();
    id v35 = v31;
    uint64_t v36 = sub_10012CAB0();
    sub_100123564(v36, v37, &v54);
    sub_10012CF70();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Building current weather model from instant weather. - unit: %{public}s", v34, 0xCu);
    swift_arrayDestroy();
    sub_10000DBB4();
    sub_10000DBB4();
  }
  else
  {
  }
  sub_1001296A0();
  sub_100129600();
  sub_10012BF80();
  sub_10000B424();
  v38();
  sub_100129320();
  sub_100129650();
  sub_100129690();
  sub_1001298D0();
  sub_1000CEFDC();
  v39();
  sub_100129610();
  sub_100129640();
  sub_10012CDE0();
  sub_100129630();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v50, 0, 1, v18);
  sub_100129620();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v49, 0, 1, v18);
  sub_1000999B4();
  v40();
  sub_1001295F0();
  sub_1001295E0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v51, 1, 1, v48);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v52, 1, 1, v48);
  sub_100129670();
  sub_100129660();
  sub_100129680();
  uint64_t v41 = sub_10012C160();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v53, 1, 1, v41);
  sub_10012C1F0();
  uint64_t v42 = sub_10012AB40();
  os_log_type_t v43 = sub_10012CD60();
  if (os_log_type_enabled(v42, v43))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_10000DBE0((void *)&_mh_execute_header, v44, v45, "Built current weather model from instant weather");
    sub_10000DBB4();
  }

  sub_10000B424();
  return v46();
}

uint64_t sub_1000CE49C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = sub_100129A20();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  __chkstk_darwin(v3);
  uint64_t v41 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100129C50();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  uint64_t v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100129B70();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = sub_10012C120();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v20 = (uint64_t *)((char *)&v33 - v19);
  sub_100129A00();
  char v21 = sub_100129B40();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v42 = v7;
  unint64_t v37 = v22;
  v22(v13, v7);
  uint64_t v38 = v20;
  uint64_t v39 = v8 + 8;
  if (v21)
  {
    *uint64_t v20 = sub_1001299F0();
    (*(void (**)(uint64_t *, void, uint64_t))(v15 + 104))(v20, enum case for CurrentObservationViewModel.AirQuality.Value.number(_:), v14);
  }
  else
  {
    uint64_t v23 = v34;
    sub_1001299E0();
    uint64_t v24 = sub_100129C30();
    uint64_t v33 = v14;
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v36);
    *uint64_t v18 = v24;
    v18[1] = v26;
    uint64_t v14 = v33;
    (*(void (**)(uint64_t *, void, uint64_t))(v15 + 104))(v18, enum case for CurrentObservationViewModel.AirQuality.Value.category(_:), v33);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 32))(v20, v18, v14);
  }
  sub_100129A00();
  sub_100129B50();
  uint64_t v28 = v27;
  uint64_t v29 = v37;
  v37(v11, v42);
  uint64_t v30 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v41, v2, v44);
  if (!v28)
  {
    sub_100129A00();
    sub_100129B30();
    v29(v13, v42);
  }
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v44);
  id v31 = v38;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(v18, v38, v14);
  sub_10012C140();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v31, v14);
}

uint64_t sub_1000CE8FC()
{
  uint64_t v0 = sub_100129300();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001294F0();
  char v4 = sub_100129260();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t sub_1000CE9E8()
{
  return sub_1000CE8FC() & 1;
}

char *sub_1000CEA08(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v3 = sub_1000053D8(&qword_10016E890);
  uint64_t v34 = *(void (***)(char *, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v39 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100129510();
  uint64_t v5 = *(void *)(v44 - 8);
  uint64_t v6 = __chkstk_darwin(v44);
  unint64_t v37 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v38 = (char *)&v31 - v9;
  __chkstk_darwin(v8);
  uint64_t v43 = (char *)&v31 - v10;
  uint64_t v11 = sub_1000053D8(&qword_10016FCF0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (char *)_swiftEmptyArrayStorage;
  uint64_t v46 = (char *)_swiftEmptyArrayStorage;
  sub_1000CEF34(&qword_10016FCF8);
  sub_10012CB50();
  uint64_t v16 = &v14[*(int *)(v12 + 44)];
  sub_1000CEF34((unint64_t *)&qword_10016FD00);
  uint64_t v17 = *(void *)v16;
  uint64_t v42 = v14;
  sub_10012CCD0();
  if (v17 == v45[0])
  {
    uint64_t v18 = (uint64_t)v42;
LABEL_15:
    sub_100046DC4(v18, &qword_10016FCF0);
  }
  else
  {
    uint64_t v35 = (void (**)(char *, uint64_t, uint64_t))(v34 + 2);
    uint64_t v36 = (void (**)(char *))(v5 + 16);
    uint64_t v15 = (char *)(v5 + 32);
    uint64_t v32 = v5;
    uint64_t v33 = (void (**)(char *, uint64_t))(v5 + 8);
    ++v34;
    uint64_t v18 = (uint64_t)v42;
    while (1)
    {
      uint64_t v19 = (void (*)(uint64_t *, void))sub_10012CCF0();
      uint64_t v20 = v38;
      uint64_t v21 = v44;
      (*v36)(v38);
      v19(v45, 0);
      uint64_t v22 = v39;
      (*v35)(v39, v18, v3);
      sub_10012CCE0();
      (*v34)(v22, v3);
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))v15;
      uint64_t v24 = v43;
      (*(void (**)(char *, char *, uint64_t))v15)(v43, v20, v21);
      char v25 = v40(v24);
      if (v2) {
        break;
      }
      if (v25)
      {
        v23(v37, v43, v44);
        uint64_t v26 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000EAD68(0, *((void *)v26 + 2) + 1, 1);
          uint64_t v26 = v46;
        }
        unint64_t v28 = *((void *)v26 + 2);
        unint64_t v27 = *((void *)v26 + 3);
        if (v28 >= v27 >> 1)
        {
          sub_1000EAD68(v27 > 1, v28 + 1, 1);
          uint64_t v26 = v46;
        }
        *((void *)v26 + 2) = v28 + 1;
        v23(&v26[((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v28], v37, v44);
        uint64_t v46 = v26;
      }
      else
      {
        (*v33)(v43, v44);
      }
      uint64_t v29 = *(void *)v16;
      uint64_t v18 = (uint64_t)v42;
      sub_10012CCD0();
      if (v29 == v45[0])
      {
        uint64_t v15 = v46;
        goto LABEL_15;
      }
    }
    (*v33)(v43, v44);
    sub_100046DC4((uint64_t)v42, &qword_10016FCF0);
    swift_release();
  }
  return v15;
}

uint64_t sub_1000CEECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_10016FCE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CEF34(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100005470(&qword_10016E890);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CEF7C(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000CEF9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(a1 - 256);
  uint64_t v4 = *(void *)(v1 - 152);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v3, 1, 1, v4);
}

uint64_t sub_1000CEFBC(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v1);
}

uint64_t sub_1000CEFE8()
{
  return sub_1001294B0();
}

double sub_1000CF004()
{
  return v0;
}

uint64_t sub_1000CF034()
{
  return sub_100129950();
}

uint64_t sub_1000CF050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a2 - 256);
  return sub_1000CEECC(a1, v3);
}

uint64_t sub_1000CF0A0()
{
  return v0;
}

uint64_t sub_1000CF0CC()
{
  return v0;
}

uint64_t sub_1000CF0E0()
{
  return v0;
}

uint64_t sub_1000CF0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_10016FD08);
  sub_10000DB98();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v10 = v9 - v8;
  sub_1000053D8(&qword_10016FD10);
  sub_10000DB98();
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  __chkstk_darwin(v11);
  sub_10000DC50();
  uint64_t v15 = v14 - v13;
  sub_1000053D8(&qword_10016FD18);
  sub_10000DB98();
  uint64_t v42 = v16;
  uint64_t v43 = v17;
  __chkstk_darwin(v16);
  sub_10000DC50();
  uint64_t v39 = v19 - v18;
  type metadata accessor for WeatherTimelineProvider();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  sub_100118DBC(65, a1, a2);
  type metadata accessor for AdaptiveConditionsContentView();
  sub_1000CF7B8(&qword_10016FD20, (void (*)(uint64_t))type metadata accessor for AdaptiveConditionsContentView);
  sub_1000CF7B8(&qword_10016BDB8, (void (*)(uint64_t))type metadata accessor for WeatherTimelineProvider);
  sub_10012C890();
  sub_10012AF80();
  uint64_t v20 = sub_10012B400();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  sub_1000CF800();
  sub_10012B0B0();
  sub_100008278(v20, v22, v24);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  sub_10012AF80();
  uint64_t v25 = sub_10012B400();
  uint64_t v27 = v26;
  LOBYTE(v22) = v28 & 1;
  swift_getOpaqueTypeConformance2();
  sub_10012B070();
  sub_100008278(v25, v27, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v15, v40);
  sub_1000053D8(&qword_10016B9C8);
  uint64_t v29 = sub_10012C800();
  sub_10000DB98();
  uint64_t v31 = v30;
  uint64_t v33 = *(void *)(v32 + 72);
  unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_100130850;
  unint64_t v36 = v35 + v34;
  unint64_t v37 = *(void (**)(unint64_t, void, uint64_t))(v31 + 104);
  v37(v36, enum case for WidgetFamily.accessoryRectangular(_:), v29);
  v37(v36 + v33, enum case for WidgetFamily.accessoryInline(_:), v29);
  swift_getOpaqueTypeConformance2();
  sub_10012B090();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v39, v42);
}

uint64_t sub_1000CF5CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024484(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B410);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = type metadata accessor for AdaptiveConditionsContentView();
  return sub_100024560((uint64_t)v6, (uint64_t)a2 + *(int *)(v7 + 20));
}

uint64_t sub_1000CF690()
{
  uint64_t v0 = sub_10012A0B0();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10000DC50();
  uint64_t v6 = v5 - v4;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v5 - v4, enum case for WidgetNames.AdaptiveConditionsComplication(_:), v0);
  uint64_t v7 = sub_10012A0A0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  return v7;
}

ValueMetadata *type metadata accessor for AdaptiveConditionsComplicationWidget()
{
  return &type metadata for AdaptiveConditionsComplicationWidget;
}

uint64_t sub_1000CF76C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000CF788@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000CF690();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000CF7B0()
{
  return sub_1000CF0F4(*v0, v0[1]);
}

uint64_t sub_1000CF7B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000CF800()
{
  unint64_t result = qword_10016FD28;
  if (!qword_10016FD28)
  {
    sub_100005470(&qword_10016FD08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD28);
  }
  return result;
}

uint64_t sub_1000CF858()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000CF924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_10016FD30);
  sub_10000DB98();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v10 = v9 - v8;
  sub_1000053D8(&qword_10016FD38);
  sub_10000DB98();
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  __chkstk_darwin(v11);
  sub_10000DC50();
  uint64_t v15 = v14 - v13;
  sub_1000053D8(&qword_10016FD40);
  sub_10000DB98();
  uint64_t v42 = v16;
  uint64_t v43 = v17;
  __chkstk_darwin(v16);
  sub_10000DC50();
  uint64_t v39 = v19 - v18;
  type metadata accessor for WeatherTimelineProvider();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  sub_100118DBC(64, a1, a2);
  type metadata accessor for MoonContentView();
  sub_1000CFF34(&qword_10016FD48, (void (*)(uint64_t))type metadata accessor for MoonContentView);
  sub_1000CFF34(&qword_10016BDB8, (void (*)(uint64_t))type metadata accessor for WeatherTimelineProvider);
  sub_10012C890();
  sub_10012AF80();
  uint64_t v20 = sub_10012B400();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  sub_1000CFF7C();
  sub_10012B0B0();
  sub_100008278(v20, v22, v24);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  sub_10012AF80();
  uint64_t v25 = sub_10012B400();
  uint64_t v27 = v26;
  LOBYTE(v22) = v28 & 1;
  swift_getOpaqueTypeConformance2();
  sub_10012B070();
  sub_100008278(v25, v27, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v15, v40);
  sub_1000053D8(&qword_10016B9C8);
  uint64_t v29 = sub_10012C800();
  sub_10000DB98();
  uint64_t v31 = v30;
  uint64_t v33 = *(void *)(v32 + 72);
  unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_100130850;
  unint64_t v36 = v35 + v34;
  unint64_t v37 = *(void (**)(unint64_t, void, uint64_t))(v31 + 104);
  v37(v36, enum case for WidgetFamily.accessoryRectangular(_:), v29);
  v37(v36 + v33, enum case for WidgetFamily.accessoryInline(_:), v29);
  swift_getOpaqueTypeConformance2();
  sub_10012B090();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v39, v42);
}

uint64_t sub_1000CFDF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024484(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B410);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = type metadata accessor for MoonContentView();
  return sub_100024560((uint64_t)v6, (uint64_t)a2 + *(int *)(v7 + 20));
}

unint64_t sub_1000CFEB4()
{
  return 0xD000000000000029;
}

ValueMetadata *type metadata accessor for MoonComplicationWidget()
{
  return &type metadata for MoonComplicationWidget;
}

uint64_t sub_1000CFEE0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000CFEFC@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_1000CFEB4();
  *a1 = 0xD000000000000029;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000CFF2C()
{
  return sub_1000CF924(*v0, v0[1]);
}

uint64_t sub_1000CFF34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000CFF7C()
{
  unint64_t result = qword_10016FD50;
  if (!qword_10016FD50)
  {
    sub_100005470(&qword_10016FD30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD50);
  }
  return result;
}

uint64_t sub_1000CFFD4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MKPlacemark.safeTitle.getter()
{
  return sub_1000D00B8((SEL *)&selRef_title);
}

uint64_t MKPlacemark.safeSubtitle.getter()
{
  return sub_1000D00B8((SEL *)&selRef_subtitle);
}

uint64_t sub_1000D00B8(SEL *a1)
{
  if ([v1 respondsToSelector:*a1]) {
    return sub_100046A24(v1, a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000D0108(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t sub_1000D011C(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && a1[10])
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 5;
      int v2 = v3 - 5;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000D0158(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 4;
    }
  }
  return result;
}

void type metadata accessor for DataDenseTableViewModel()
{
}

BOOL sub_1000D01A8(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  BOOL v5 = a4 != a2 || a1 != a3 || (unsigned __int16)(a4 ^ a2) >= 0x100u;
  return !v5;
}

BOOL sub_1000D01C8(int a1, int a2)
{
  return a1 == a2;
}

BOOL sub_1000D01D4(int a1, int a2)
{
  return ((a2 ^ a1) & 0xFFFFFF) == 0;
}

uint64_t sub_1000D01E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010013BEA0 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010013BEC0 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010013BEE0 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F43776F52656E6FLL && a2 == 0xEF6E6F697469646ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_10012D1F0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1000D03AC(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6F43776F52656E6FLL;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000D0458()
{
  sub_100021314();
  __int16 v2 = v1;
  char v4 = v3;
  char v6 = v5;
  uint64_t v7 = sub_1000053D8(&qword_10016FD58);
  sub_10000DB98();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = &v13[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D890(v6, v6[3]);
  sub_1000D2580();
  sub_10012D2C0();
  sub_1000D25CC();
  sub_1000D469C();
  if (!v0)
  {
    v13[15] = 1;
    sub_1000D2618();
    sub_1000D469C();
    v13[13] = v4;
    v13[14] = v2;
    v13[12] = 2;
    sub_1000D2664();
    sub_1000D469C();
    v13[11] = HIBYTE(v2);
    v13[10] = 3;
    sub_1000D26B0();
    sub_1000D469C();
  }
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v7);
  sub_10002132C();
}

void sub_1000D062C()
{
  sub_100021314();
  uint64_t v1 = v0;
  sub_1000053D8(&qword_10016FD88);
  sub_10000DB98();
  __chkstk_darwin(v2);
  sub_100088A7C();
  sub_1000D2580();
  sub_10012D2B0();
  sub_1000D26FC();
  sub_1000D46F8();
  sub_1000D2748();
  sub_1000D46F8();
  sub_1000D2794();
  sub_1000D46F8();
  sub_1000D27E0();
  sub_1000D46F8();
  sub_10002A56C();
  v3();
  sub_10000DB48(v1);
  sub_10002132C();
}

uint64_t sub_1000D082C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7469706963657270 && a2 == 0xED00006E6F697461;
  if (v2 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1684957559 && a2 == 0xE400000000000000;
    if (v6 || (sub_10012D1F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x696C617551726961 && a2 == 0xEA00000000007974;
      if (v7 || (sub_10012D1F0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6F69566172746C75 && a2 == 0xEB0000000074656CLL;
        if (v8 || (sub_10012D1F0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x6B694C736C656566 && a2 == 0xE900000000000065)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = sub_10012D1F0();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t sub_1000D0A80(char a1)
{
  uint64_t result = 0x7469706963657270;
  switch(a1)
  {
    case 1:
      uint64_t result = 1684957559;
      break;
    case 2:
      uint64_t result = 0x696C617551726961;
      break;
    case 3:
      uint64_t result = 0x6F69566172746C75;
      break;
    case 4:
      uint64_t result = 0x6B694C736C656566;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000D0B44()
{
  sub_100021314();
  char v42 = v2;
  char v4 = v3;
  sub_1000053D8(&qword_10016FEA0);
  sub_10000DB98();
  uint64_t v40 = v6;
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  sub_100021344(v7, v29);
  sub_1000053D8(&qword_10016FEA8);
  sub_10000DB98();
  uint64_t v37 = v9;
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  sub_10000DBCC();
  uint64_t v36 = v10;
  sub_1000053D8(&qword_10016FEB0);
  sub_10000DB98();
  uint64_t v34 = v12;
  uint64_t v35 = v11;
  __chkstk_darwin(v11);
  sub_10000DBCC();
  uint64_t v33 = v13;
  sub_1000053D8(&qword_10016FEB8);
  sub_10000DB98();
  uint64_t v31 = v15;
  uint64_t v32 = v14;
  __chkstk_darwin(v14);
  sub_10000DC50();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = sub_1000053D8(&qword_10016FEC0);
  sub_10000DB98();
  uint64_t v30 = v20;
  __chkstk_darwin(v21);
  sub_10000DC60();
  uint64_t v22 = sub_1000053D8(&qword_10016FEC8);
  sub_10000DB98();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  sub_1000D4744();
  sub_10000D890(v4, v4[3]);
  sub_1000D36AC();
  sub_10012D2C0();
  switch(v42)
  {
    case 1:
      sub_1000D37DC();
      sub_10012D150();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v18, v32);
      break;
    case 2:
      sub_1000D3790();
      uint64_t v26 = v33;
      sub_1000D46D8();
      uint64_t v28 = v34;
      uint64_t v27 = v35;
      goto LABEL_7;
    case 3:
      sub_1000D3744();
      uint64_t v26 = v36;
      sub_1000D46D8();
      uint64_t v28 = v37;
      uint64_t v27 = v38;
      goto LABEL_7;
    case 4:
      sub_1000D36F8();
      uint64_t v26 = v39;
      sub_1000D46D8();
      uint64_t v28 = v40;
      uint64_t v27 = v41;
LABEL_7:
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
      break;
    default:
      sub_1000D3828();
      sub_1000D46D8();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v0, v19);
      break;
  }
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v1, v22);
  sub_10002132C();
}

void sub_1000D0EB4()
{
  sub_100021314();
  char v4 = v3;
  uint64_t v50 = sub_1000053D8(&qword_10016FE40);
  sub_10000DB98();
  uint64_t v52 = v5;
  __chkstk_darwin(v6);
  sub_10000DBCC();
  uint64_t v56 = v7;
  uint64_t v55 = sub_1000053D8(&qword_10016FE48);
  sub_10000DB98();
  uint64_t v51 = v8;
  __chkstk_darwin(v9);
  sub_100021344(v10, v43);
  sub_1000053D8(&qword_10016FE50);
  sub_10000DB98();
  uint64_t v48 = v12;
  uint64_t v49 = v11;
  __chkstk_darwin(v11);
  sub_10000DBCC();
  uint64_t v53 = v13;
  sub_1000053D8(&qword_10016FE58);
  sub_10000DB98();
  uint64_t v46 = v15;
  uint64_t v47 = v14;
  __chkstk_darwin(v14);
  sub_10000DC50();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = sub_1000053D8(&qword_10016FE60);
  sub_10000DB98();
  uint64_t v45 = v20;
  __chkstk_darwin(v21);
  sub_1000D4744();
  uint64_t v22 = sub_1000053D8(&qword_10016FE68);
  sub_10000DB98();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  sub_10000DC60();
  uint64_t v57 = (uint64_t)v4;
  sub_10000D890(v4, v4[3]);
  sub_1000D36AC();
  sub_10012D2B0();
  if (v1) {
    goto LABEL_9;
  }
  uint64_t v26 = sub_10012D140();
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    uint64_t v34 = v0;
LABEL_8:
    uint64_t v35 = sub_10012D010();
    swift_allocError();
    uint64_t v37 = v36;
    sub_1000053D8(&qword_10016B730);
    *uint64_t v37 = &unk_100163758;
    sub_10012D0D0();
    sub_10012D000();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, enum case for DecodingError.typeMismatch(_:), v35);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v34, v22);
LABEL_9:
    sub_10000DB48(v57);
    goto LABEL_10;
  }
  uint64_t v44 = v22;
  uint64_t v28 = v0;
  uint64_t v29 = *(unsigned __int8 *)(v26 + 32);
  sub_1000B0244(1, v27, v26, v26 + 32, 0, (2 * v27) | 1);
  uint64_t v31 = v30;
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();
  if (v31 != v33 >> 1)
  {
    uint64_t v34 = v28;
    uint64_t v22 = v44;
    goto LABEL_8;
  }
  switch(v29)
  {
    case 1:
      sub_1000D37DC();
      uint64_t v38 = v18;
      sub_10012D0C0();
      uint64_t v40 = v46;
      uint64_t v39 = v47;
      goto LABEL_13;
    case 2:
      sub_1000D3790();
      uint64_t v38 = v53;
      sub_1000D4678();
      uint64_t v40 = v48;
      uint64_t v39 = v49;
LABEL_13:
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
      break;
    case 3:
      sub_1000D3744();
      sub_1000D4678();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v54, v55);
      break;
    case 4:
      sub_1000D36F8();
      sub_1000D4678();
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v56, v50);
      break;
    default:
      sub_1000D3828();
      sub_1000D4678();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v2, v19);
      break;
  }
  swift_unknownObjectRelease();
  uint64_t v41 = sub_1000D475C();
  v42(v41);
  sub_10000DB48((uint64_t)v4);
LABEL_10:
  sub_10002132C();
}

uint64_t sub_1000D1428(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010013BF00 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010013BF20 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010013BF40 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010013BF60)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = sub_10012D1F0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1000D15B8(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000D163C()
{
  sub_1000D47C0();
  sub_1000D4774();
  sub_1000053D8(&qword_10016FDD0);
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_100088A58();
  sub_1000D34E4();
  sub_10002A628();
  sub_1000D3530();
  sub_100090AE0();
  if (!v0)
  {
    sub_1000D4720();
    sub_100090AE0();
    sub_1000D4798();
    sub_100090AE0();
    sub_100090AE0();
  }
  sub_10002A56C();
  v2();
  sub_1000D4784();
}

void sub_1000D178C()
{
  sub_100021314();
  sub_1000D47D4();
  sub_1000053D8(&qword_10016FE18);
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_100088A7C();
  sub_1000D34E4();
  sub_1000D46B4();
  sub_1000D3660();
  sub_100090ABC();
  sub_1000D4734();
  sub_100090ABC();
  sub_100090ABC();
  sub_100090ABC();
  uint64_t v2 = sub_1000889F8();
  v3(v2);
  sub_10000DB48(v0);
  sub_10002132C();
}

uint64_t sub_1000D1914(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010013BF00 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010013BF20 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010013BF40)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = sub_10012D1F0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1000D1A58(char a1)
{
  unint64_t result = 0xD000000000000011;
  if (a1 == 1) {
    return 0xD000000000000012;
  }
  return result;
}

void sub_1000D1AB0()
{
  sub_1000D47C0();
  sub_1000D4774();
  sub_1000053D8(&qword_10016FDE8);
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_100088A58();
  sub_1000D357C();
  sub_10002A628();
  sub_1000D3530();
  sub_100090AE0();
  if (!v0)
  {
    sub_1000D4720();
    sub_100090AE0();
    sub_1000D4798();
    sub_100090AE0();
  }
  sub_10002A56C();
  v2();
  sub_1000D4784();
}

void sub_1000D1BD4()
{
  sub_100021314();
  sub_1000D47D4();
  sub_1000053D8(&qword_10016FE28);
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_100088A7C();
  sub_1000D357C();
  sub_1000D46B4();
  sub_1000D3660();
  sub_100090ABC();
  sub_1000D4734();
  sub_100090ABC();
  sub_100090ABC();
  uint64_t v2 = sub_1000889F8();
  v3(v2);
  sub_10000DB48(v0);
  sub_10002132C();
}

uint64_t sub_1000D1D24(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010013BF00 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010013BF20)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_10012D1F0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1000D1E10(char a1)
{
  if (a1) {
    return 0xD000000000000012;
  }
  else {
    return 0xD000000000000011;
  }
}

void sub_1000D1E48()
{
  sub_1000D47C0();
  sub_1000D4774();
  sub_1000053D8(&qword_10016FDF8);
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_100088A58();
  sub_1000D35C8();
  sub_10002A628();
  sub_1000D3530();
  sub_100090AE0();
  if (!v0)
  {
    sub_1000D4720();
    sub_100090AE0();
  }
  sub_10002A56C();
  v2();
  sub_1000D4784();
}

void sub_1000D1F4C()
{
  sub_1000D47C0();
  sub_1000D47D4();
  sub_1000053D8(&qword_10016FE30);
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_100088A7C();
  sub_1000D35C8();
  sub_1000D46B4();
  sub_1000D3660();
  sub_100090ABC();
  sub_1000D4734();
  sub_100090ABC();
  uint64_t v2 = sub_1000889F8();
  v3(v2);
  sub_10000DB48(v0);
  sub_1000D4784();
}

uint64_t sub_1000D2074(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_10012D1F0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1000D2108()
{
  return 0x6F697469646E6F63;
}

void sub_1000D2124()
{
  sub_1000D47C0();
  sub_1000053D8(&qword_10016FE08);
  sub_10000DB98();
  __chkstk_darwin(v0);
  sub_100088A58();
  sub_1000D3614();
  sub_10012D2C0();
  sub_1000D3530();
  sub_10012D1B0();
  sub_10002A56C();
  v1();
  sub_1000D4784();
}

void sub_1000D2224()
{
  sub_1000D47C0();
  sub_1000D47D4();
  sub_1000053D8(&qword_10016FE38);
  sub_10000DB98();
  __chkstk_darwin(v2);
  sub_100088A7C();
  sub_1000D3614();
  sub_1000D46B4();
  if (!v1)
  {
    sub_1000D3660();
    sub_10012D130();
    uint64_t v3 = sub_1000889F8();
    v4(v3);
  }
  sub_10000DB48(v0);
  sub_1000D4784();
}

uint64_t sub_1000D2328(void *a1)
{
  uint64_t v2 = sub_1000053D8(&qword_10016FED0);
  sub_10000DB98();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_10000DC50();
  uint64_t v8 = v7 - v6;
  sub_10000D890(a1, a1[3]);
  sub_1000D3874();
  sub_10012D2C0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

uint64_t sub_1000D2408(uint64_t a1)
{
  return sub_10000DB48(a1);
}

unint64_t sub_1000D2430()
{
  return sub_1000D03AC(*v0);
}

uint64_t sub_1000D2438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D01E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D2460(uint64_t a1)
{
  unint64_t v2 = sub_1000D2580();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D249C(uint64_t a1)
{
  unint64_t v2 = sub_1000D2580();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1000D24D8(uint64_t a1, uint64_t a2)
{
  return sub_1000D01A8(*(void *)a1, *(_WORD *)(a1 + 8), *(void *)a2, *(_WORD *)(a2 + 8));
}

void sub_1000D24F0(uint64_t a1@<X8>)
{
  sub_1000D062C();
  if (!v1)
  {
    *(void *)a1 = v3;
    *(_WORD *)(a1 + 8) = v4;
  }
}

void sub_1000D2560()
{
}

unint64_t sub_1000D2580()
{
  unint64_t result = qword_10016FD60;
  if (!qword_10016FD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD60);
  }
  return result;
}

unint64_t sub_1000D25CC()
{
  unint64_t result = qword_10016FD68;
  if (!qword_10016FD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD68);
  }
  return result;
}

unint64_t sub_1000D2618()
{
  unint64_t result = qword_10016FD70;
  if (!qword_10016FD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD70);
  }
  return result;
}

unint64_t sub_1000D2664()
{
  unint64_t result = qword_10016FD78;
  if (!qword_10016FD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD78);
  }
  return result;
}

unint64_t sub_1000D26B0()
{
  unint64_t result = qword_10016FD80;
  if (!qword_10016FD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD80);
  }
  return result;
}

unint64_t sub_1000D26FC()
{
  unint64_t result = qword_10016FD90;
  if (!qword_10016FD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD90);
  }
  return result;
}

unint64_t sub_1000D2748()
{
  unint64_t result = qword_10016FD98;
  if (!qword_10016FD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD98);
  }
  return result;
}

unint64_t sub_1000D2794()
{
  unint64_t result = qword_10016FDA0;
  if (!qword_10016FDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDA0);
  }
  return result;
}

unint64_t sub_1000D27E0()
{
  unint64_t result = qword_10016FDA8;
  if (!qword_10016FDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDA8);
  }
  return result;
}

void type metadata accessor for DataDenseTable.Condition()
{
}

ValueMetadata *type metadata accessor for DataDenseTableViewModel.CodingKeys()
{
  return &type metadata for DataDenseTableViewModel.CodingKeys;
}

void type metadata accessor for DataDenseTable.OneRowCondition()
{
}

uint64_t sub_1000D2864(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 65284 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 65284 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 16)) - 65285;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1000D28F0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65284 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65284 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 252;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D29BCLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for DataDenseTable.TwoRowConditions()
{
}

uint64_t sub_1000D29F0(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t sub_1000D2A04(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v3 = -1;
    return (v3 + 1);
  }
  if (a2 >= 0xFC)
  {
    if ((a2 + 33554180) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        goto LABEL_5;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
      {
LABEL_5:
        int v3 = (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776965;
        return (v3 + 1);
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 5;
  int v3 = v4 - 5;
  if (!v5) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_1000D2A6C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554180) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFB) {
    int v3 = 0;
  }
  if (a2 > 0xFB)
  {
    *(_WORD *)unint64_t result = a2 - 252;
    *(unsigned char *)(result + 2) = (a2 - 252) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 252) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)unint64_t result = a2 + 4;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

void type metadata accessor for DataDenseTable.ThreeRowConditions()
{
}

void type metadata accessor for DataDenseTable()
{
}

_DWORD *sub_1000D2B10(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t sub_1000D2B1C(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && a1[4])
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 5;
      int v2 = v3 - 5;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000D2B58(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_DWORD *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 4;
    }
  }
  return result;
}

void type metadata accessor for DataDenseTable.FourRowConditions()
{
}

uint64_t sub_1000D2BA4(uint64_t a1)
{
  unint64_t v2 = sub_1000D3790();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2BE0(uint64_t a1)
{
  unint64_t v2 = sub_1000D3790();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2C1C()
{
  return sub_1000D0A80(*v0);
}

uint64_t sub_1000D2C24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D082C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D2C4C(uint64_t a1)
{
  unint64_t v2 = sub_1000D36AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2C88(uint64_t a1)
{
  unint64_t v2 = sub_1000D36AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2CC4(uint64_t a1)
{
  unint64_t v2 = sub_1000D36F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2D00(uint64_t a1)
{
  unint64_t v2 = sub_1000D36F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2D3C(uint64_t a1)
{
  unint64_t v2 = sub_1000D3828();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2D78(uint64_t a1)
{
  unint64_t v2 = sub_1000D3828();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2DB4(uint64_t a1)
{
  unint64_t v2 = sub_1000D3744();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2DF0(uint64_t a1)
{
  unint64_t v2 = sub_1000D3744();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2E2C(uint64_t a1)
{
  unint64_t v2 = sub_1000D37DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2E68(uint64_t a1)
{
  unint64_t v2 = sub_1000D37DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D2EA4(unsigned char *a1@<X8>)
{
  sub_1000D0EB4();
  if (!v1) {
    *a1 = v3;
  }
}

void sub_1000D2ED0()
{
}

BOOL sub_1000D2EEC(char *a1, char *a2)
{
  return sub_1000D01E4(*a1, *a2);
}

unint64_t sub_1000D2EF8()
{
  return sub_1000D15B8(*v0);
}

uint64_t sub_1000D2F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D1428(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D2F28(uint64_t a1)
{
  unint64_t v2 = sub_1000D34E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2F64(uint64_t a1)
{
  unint64_t v2 = sub_1000D34E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D2FA0(_DWORD *a1@<X8>)
{
  sub_1000D178C();
  if (!v1) {
    *a1 = v3;
  }
}

void sub_1000D2FCC()
{
}

BOOL sub_1000D2FE8(int *a1, int *a2)
{
  return sub_1000D01C8(*a1, *a2);
}

unint64_t sub_1000D2FF4()
{
  return sub_1000D1A58(*v0);
}

uint64_t sub_1000D2FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D1914(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D3024(uint64_t a1)
{
  unint64_t v2 = sub_1000D357C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D3060(uint64_t a1)
{
  unint64_t v2 = sub_1000D357C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D309C(uint64_t a1@<X8>)
{
  sub_1000D1BD4();
  if (!v1)
  {
    *(_WORD *)a1 = v3;
    *(unsigned char *)(a1 + 2) = BYTE2(v3);
  }
}

void sub_1000D30D8()
{
}

BOOL sub_1000D30FC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_1000D01D4(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

unint64_t sub_1000D3118()
{
  return sub_1000D1E10(*v0);
}

uint64_t sub_1000D3120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D1D24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D3148(uint64_t a1)
{
  unint64_t v2 = sub_1000D35C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D3184(uint64_t a1)
{
  unint64_t v2 = sub_1000D35C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D31C0(_WORD *a1@<X8>)
{
  sub_1000D1F4C();
  if (!v1) {
    *a1 = v3;
  }
}

void sub_1000D31EC()
{
}

uint64_t sub_1000D3210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D2074(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000D323C(uint64_t a1)
{
  unint64_t v2 = sub_1000D3614();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D3278(uint64_t a1)
{
  unint64_t v2 = sub_1000D3614();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D32B4(unsigned char *a1@<X8>)
{
  sub_1000D2224();
  if (!v1) {
    *a1 = v3;
  }
}

void sub_1000D32E0()
{
}

uint64_t sub_1000D32FC(uint64_t a1)
{
  unint64_t v2 = sub_1000D3874();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D3338(uint64_t a1)
{
  unint64_t v2 = sub_1000D3874();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D3374(uint64_t a1)
{
  return sub_1000D2408(a1);
}

uint64_t sub_1000D338C(void *a1)
{
  return sub_1000D2328(a1);
}

unint64_t sub_1000D33A8()
{
  unint64_t result = qword_10016FDB0;
  if (!qword_10016FDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDB0);
  }
  return result;
}

unint64_t sub_1000D33F8()
{
  unint64_t result = qword_10016FDB8;
  if (!qword_10016FDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDB8);
  }
  return result;
}

unint64_t sub_1000D3448()
{
  unint64_t result = qword_10016FDC0;
  if (!qword_10016FDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDC0);
  }
  return result;
}

unint64_t sub_1000D3498()
{
  unint64_t result = qword_10016FDC8;
  if (!qword_10016FDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDC8);
  }
  return result;
}

unint64_t sub_1000D34E4()
{
  unint64_t result = qword_10016FDD8;
  if (!qword_10016FDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDD8);
  }
  return result;
}

unint64_t sub_1000D3530()
{
  unint64_t result = qword_10016FDE0;
  if (!qword_10016FDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDE0);
  }
  return result;
}

unint64_t sub_1000D357C()
{
  unint64_t result = qword_10016FDF0;
  if (!qword_10016FDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FDF0);
  }
  return result;
}

unint64_t sub_1000D35C8()
{
  unint64_t result = qword_10016FE00;
  if (!qword_10016FE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE00);
  }
  return result;
}

unint64_t sub_1000D3614()
{
  unint64_t result = qword_10016FE10;
  if (!qword_10016FE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE10);
  }
  return result;
}

unint64_t sub_1000D3660()
{
  unint64_t result = qword_10016FE20;
  if (!qword_10016FE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE20);
  }
  return result;
}

unint64_t sub_1000D36AC()
{
  unint64_t result = qword_10016FE70;
  if (!qword_10016FE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE70);
  }
  return result;
}

unint64_t sub_1000D36F8()
{
  unint64_t result = qword_10016FE78;
  if (!qword_10016FE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE78);
  }
  return result;
}

unint64_t sub_1000D3744()
{
  unint64_t result = qword_10016FE80;
  if (!qword_10016FE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE80);
  }
  return result;
}

unint64_t sub_1000D3790()
{
  unint64_t result = qword_10016FE88;
  if (!qword_10016FE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE88);
  }
  return result;
}

unint64_t sub_1000D37DC()
{
  unint64_t result = qword_10016FE90;
  if (!qword_10016FE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE90);
  }
  return result;
}

unint64_t sub_1000D3828()
{
  unint64_t result = qword_10016FE98;
  if (!qword_10016FE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FE98);
  }
  return result;
}

unint64_t sub_1000D3874()
{
  unint64_t result = qword_10016FED8;
  if (!qword_10016FED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FED8);
  }
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.CodingKeys()
{
  return &type metadata for DataDenseTable.CodingKeys;
}

unsigned char *_s13WeatherWidget14DataDenseTableV9ConditionO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D399CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.CodingKeys()
{
  return &type metadata for DataDenseTable.Condition.CodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.PrecipitationCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.PrecipitationCodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.WindCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.WindCodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.AirQualityCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.AirQualityCodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.UltraVioletCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.UltraVioletCodingKeys;
}

ValueMetadata *type metadata accessor for DataDenseTable.Condition.FeelsLikeCodingKeys()
{
  return &type metadata for DataDenseTable.Condition.FeelsLikeCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DataDenseTable.OneRowCondition.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000D3AC0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.OneRowCondition.CodingKeys()
{
  return &type metadata for DataDenseTable.OneRowCondition.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DataDenseTable.TwoRowConditions.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D3BC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.TwoRowConditions.CodingKeys()
{
  return &type metadata for DataDenseTable.TwoRowConditions.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DataDenseTable.ThreeRowConditions.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D3CC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.ThreeRowConditions.CodingKeys()
{
  return &type metadata for DataDenseTable.ThreeRowConditions.CodingKeys;
}

unsigned char *_s13WeatherWidget23DataDenseTableViewModelV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D3DCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataDenseTable.FourRowConditions.CodingKeys()
{
  return &type metadata for DataDenseTable.FourRowConditions.CodingKeys;
}

unint64_t sub_1000D3E08()
{
  unint64_t result = qword_10016FEE0;
  if (!qword_10016FEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FEE0);
  }
  return result;
}

unint64_t sub_1000D3E58()
{
  unint64_t result = qword_10016FEE8;
  if (!qword_10016FEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FEE8);
  }
  return result;
}

unint64_t sub_1000D3EA8()
{
  unint64_t result = qword_10016FEF0;
  if (!qword_10016FEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FEF0);
  }
  return result;
}

unint64_t sub_1000D3EF8()
{
  unint64_t result = qword_10016FEF8;
  if (!qword_10016FEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FEF8);
  }
  return result;
}

unint64_t sub_1000D3F48()
{
  unint64_t result = qword_10016FF00;
  if (!qword_10016FF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF00);
  }
  return result;
}

unint64_t sub_1000D3F98()
{
  unint64_t result = qword_10016FF08;
  if (!qword_10016FF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF08);
  }
  return result;
}

unint64_t sub_1000D3FE8()
{
  unint64_t result = qword_10016FF10;
  if (!qword_10016FF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF10);
  }
  return result;
}

unint64_t sub_1000D4038()
{
  unint64_t result = qword_10016FF18;
  if (!qword_10016FF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF18);
  }
  return result;
}

unint64_t sub_1000D4088()
{
  unint64_t result = qword_10016FF20;
  if (!qword_10016FF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF20);
  }
  return result;
}

unint64_t sub_1000D40D8()
{
  unint64_t result = qword_10016FF28;
  if (!qword_10016FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF28);
  }
  return result;
}

unint64_t sub_1000D4128()
{
  unint64_t result = qword_10016FF30;
  if (!qword_10016FF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF30);
  }
  return result;
}

unint64_t sub_1000D4178()
{
  unint64_t result = qword_10016FF38;
  if (!qword_10016FF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF38);
  }
  return result;
}

unint64_t sub_1000D41C8()
{
  unint64_t result = qword_10016FF40;
  if (!qword_10016FF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF40);
  }
  return result;
}

unint64_t sub_1000D4218()
{
  unint64_t result = qword_10016FF48;
  if (!qword_10016FF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF48);
  }
  return result;
}

unint64_t sub_1000D4268()
{
  unint64_t result = qword_10016FF50;
  if (!qword_10016FF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF50);
  }
  return result;
}

unint64_t sub_1000D42B8()
{
  unint64_t result = qword_10016FF58;
  if (!qword_10016FF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF58);
  }
  return result;
}

unint64_t sub_1000D4308()
{
  unint64_t result = qword_10016FF60;
  if (!qword_10016FF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF60);
  }
  return result;
}

unint64_t sub_1000D4358()
{
  unint64_t result = qword_10016FF68;
  if (!qword_10016FF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF68);
  }
  return result;
}

unint64_t sub_1000D43A8()
{
  unint64_t result = qword_10016FF70;
  if (!qword_10016FF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF70);
  }
  return result;
}

unint64_t sub_1000D43F8()
{
  unint64_t result = qword_10016FF78;
  if (!qword_10016FF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF78);
  }
  return result;
}

unint64_t sub_1000D4448()
{
  unint64_t result = qword_10016FF80;
  if (!qword_10016FF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF80);
  }
  return result;
}

unint64_t sub_1000D4498()
{
  unint64_t result = qword_10016FF88;
  if (!qword_10016FF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF88);
  }
  return result;
}

unint64_t sub_1000D44E8()
{
  unint64_t result = qword_10016FF90;
  if (!qword_10016FF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF90);
  }
  return result;
}

unint64_t sub_1000D4538()
{
  unint64_t result = qword_10016FF98;
  if (!qword_10016FF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FF98);
  }
  return result;
}

unint64_t sub_1000D4588()
{
  unint64_t result = qword_10016FFA0;
  if (!qword_10016FFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FFA0);
  }
  return result;
}

unint64_t sub_1000D45D8()
{
  unint64_t result = qword_10016FFA8;
  if (!qword_10016FFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FFA8);
  }
  return result;
}

unint64_t sub_1000D4628()
{
  unint64_t result = qword_10016FFB0;
  if (!qword_10016FFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FFB0);
  }
  return result;
}

uint64_t sub_1000D4678()
{
  return sub_10012D0C0();
}

uint64_t sub_1000D469C()
{
  return sub_10012D1B0();
}

uint64_t sub_1000D46B4()
{
  return sub_10012D2B0();
}

uint64_t sub_1000D46D8()
{
  return sub_10012D150();
}

uint64_t sub_1000D46F8()
{
  return sub_10012D130();
}

void sub_1000D4720()
{
  *(unsigned char *)(v1 - 67) = HIBYTE(v0);
  *(unsigned char *)(v1 - 68) = 1;
}

void sub_1000D4734()
{
  *(unsigned char *)(v0 - 68) = 1;
}

uint64_t sub_1000D475C()
{
  return v0;
}

void sub_1000D4798()
{
  *(unsigned char *)(v1 - 69) = BYTE2(v0);
  *(unsigned char *)(v1 - 70) = 2;
}

uint64_t sub_1000D47AC()
{
  return v0;
}

uint64_t sub_1000D47E0(uint64_t a1)
{
  char v2 = sub_1000D485C(a1);
  char v3 = sub_1000D4964(a1);
  if (v2)
  {
    if (v3) {
      int v4 = 6;
    }
    else {
      int v4 = 1;
    }
    int v5 = 2;
  }
  else if (v3)
  {
    int v4 = 1;
    int v5 = 6;
  }
  else
  {
    unsigned __int8 v6 = sub_1000D4A6C(a1);
    if ((v6 & 0xFE) != 0) {
      int v5 = v6;
    }
    else {
      int v5 = 1;
    }
    int v4 = 1;
  }
  return v5 | (v4 << 8);
}

uint64_t sub_1000D485C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventViewModel(0) - 8;
  __chkstk_darwin(v2);
  int v5 = (unsigned __int8 *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v8 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    uint64_t v9 = v6 - 1;
    do
    {
      sub_10000F960(v7, (uint64_t)v5);
      int v10 = *v5;
      sub_10001049C((uint64_t)v5);
      BOOL v11 = v10 == 2;
      uint64_t v6 = v10 == 2;
      BOOL v11 = v11 || v9-- == 0;
      v7 += v8;
    }
    while (!v11);
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1000D4964(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventViewModel(0) - 8;
  __chkstk_darwin(v2);
  int v5 = (unsigned __int8 *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v8 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    uint64_t v9 = v6 - 1;
    do
    {
      sub_10000F960(v7, (uint64_t)v5);
      int v10 = *v5;
      sub_10001049C((uint64_t)v5);
      BOOL v11 = v10 == 6;
      uint64_t v6 = v10 == 6;
      BOOL v11 = v11 || v9-- == 0;
      v7 += v8;
    }
    while (!v11);
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1000D4A6C(uint64_t a1)
{
  uint64_t v40 = sub_100129430();
  uint64_t v2 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100129450();
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100129300();
  uint64_t v7 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for EventViewModel(0) - 8;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (unsigned __int8 *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (unsigned __int8 *)v31 - v15;
  __chkstk_darwin(v14);
  uint64_t v19 = (unsigned __int8 *)v31 - v18;
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    uint64_t v21 = v7;
    uint64_t v22 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    unsigned int v36 = enum case for Calendar.Component.hour(_:);
    uint64_t v34 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v35 = (void (**)(char *, void, uint64_t))(v2 + 104);
    unint64_t v32 = (void (**)(char *, uint64_t))(v21 + 8);
    unint64_t v33 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v41 = *(void *)(v17 + 72);
    v31[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v24 = v39;
    uint64_t v23 = v40;
    while (1)
    {
      sub_10000F960(v22, (uint64_t)v19);
      int v25 = *v19;
      sub_10000F960((uint64_t)v19, (uint64_t)v16);
      if (v25 == 3)
      {
        sub_10001049C((uint64_t)v16);
        sub_10000F960((uint64_t)v19, (uint64_t)v13);
      }
      else
      {
        int v26 = *v16;
        sub_10001049C((uint64_t)v16);
        sub_10000F960((uint64_t)v19, (uint64_t)v13);
        if (v26 != 4)
        {
          int v28 = *v13;
          sub_10001049C((uint64_t)v13);
          if (v28 != 5) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
      sub_10001049C((uint64_t)v13);
LABEL_7:
      sub_1001292F0();
      sub_100129410();
      (*v35)(v24, v36, v23);
      uint64_t v27 = sub_100129440();
      (*v34)(v24, v23);
      (*v33)(v6, v38);
      (*v32)(v9, v37);
      if (v27 >= 20)
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = *v19;
        sub_10001049C((uint64_t)v19);
        return v29;
      }
LABEL_8:
      sub_10001049C((uint64_t)v19);
      v22 += v41;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1000D4E88(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventViewModel(0) - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v10 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10000F960(v9, (uint64_t)v7);
    if (*v7 == a1) {
      break;
    }
    sub_10001049C((uint64_t)v7);
    v9 += v10;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1000D4FC8(v7);
  sub_10001049C((uint64_t)v7);
  return v11;
}

uint64_t sub_1000D4FC8(unsigned char *a1)
{
  uint64_t v2 = sub_100129380();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1001293A0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 == 2)
  {
    sub_100129340();
    sub_100129390();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v10 = sub_100129370();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v11 = (uint64_t *)&a1[*(int *)(type metadata accessor for EventViewModel(0) + 40)];
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_1000D5760(1);
      uint64_t v14 = sub_10012CF60();
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      sub_100111E6C(1uLL, v12, v13);
      uint64_t v17 = sub_10012CF50();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      v21[0] = v14;
      v21[1] = v16;
      swift_bridgeObjectRetain();
      v22._countAndFlagsBits = v17;
      v22._object = v19;
      sub_10012CAF0(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v21[0];
    }
  }
  else
  {
    uint64_t v12 = *(void *)&a1[*(int *)(type metadata accessor for EventViewModel(0) + 40)];
    swift_bridgeObjectRetain();
  }
  return v12;
}

uint64_t sub_1000D5220(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventViewModel(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v10 = (unsigned __int8 *)&v19 - v9;
  uint64_t v11 = *(void *)(a2 + 16);
  if (!v11) {
    return 0;
  }
  int v12 = a1;
  uint64_t v13 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v14 = *(void *)(v8 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10000F960(v13, (uint64_t)v10);
    if (*v10 == v12) {
      break;
    }
    sub_10001049C((uint64_t)v10);
    v13 += v14;
    if (!--v11)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = (uint64_t *)&v10[*(int *)(v4 + 44)];
  uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  sub_10000F960((uint64_t)v10, (uint64_t)v7);
  if (!v17) {
    uint64_t v15 = sub_1000D4FC8(v7);
  }
  swift_bridgeObjectRetain();
  sub_10001049C((uint64_t)v7);
  sub_10001049C((uint64_t)v10);
  return v15;
}

uint64_t sub_1000D53C4(__int16 a1, uint64_t a2)
{
  if (a1 == 1538) {
    return sub_1000D53DC(a2);
  }
  else {
    return sub_1000D5220(a1, a2);
  }
}

uint64_t sub_1000D53DC(uint64_t a1)
{
  uint64_t v2 = sub_1000D5220(2u, a1);
  unint64_t v4 = v3;
  uint64_t v6 = sub_1000D5220(6u, a1);
  unint64_t v7 = v5;
  uint64_t v8 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v8 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    uint64_t v9 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v9)
    {
      if (qword_10016AEE8 != -1) {
        swift_once();
      }
      char v10 = (objc_class *)(id)qword_100181E30;
      v15._countAndFlagsBits = 0x800000010013BFB0;
      v16._countAndFlagsBits = 0x4025202E4025;
      v16._object = (void *)0xE600000000000000;
      v17.value._countAndFlagsBits = 0;
      v17.value._object = 0;
      v11.super.isa = v10;
      v18._countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      sub_100129180(v16, v17, v11, v18, v15);

      sub_1000053D8(&qword_10016EE28);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_100130850;
      *(void *)(v12 + 56) = &type metadata for String;
      unint64_t v13 = sub_1000ABC9C();
      *(void *)(v12 + 32) = v2;
      *(void *)(v12 + 40) = v4;
      *(void *)(v12 + 96) = &type metadata for String;
      *(void *)(v12 + 104) = v13;
      *(void *)(v12 + 64) = v13;
      *(void *)(v12 + 72) = v6;
      *(void *)(v12 + 80) = v7;
      uint64_t v6 = sub_10012CA30();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = v2;
    }
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000D558C(uint64_t a1, uint64_t a2)
{
  return sub_1000D56A0(a1, a2, (uint64_t (*)(void, uint64_t, void, uint64_t))sub_1001186B8, (uint64_t (*)(void))&type metadata accessor for DailyForecastViewModel);
}

uint64_t sub_1000D55B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = a5 >> 1;
    unint64_t result = sub_1000D5844(a4, result, a5 >> 1);
    if (v10) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = result;
    }
    if (v11 >= a4)
    {
      uint64_t v12 = sub_1000B0244(a4, v11, a2, a3, a4, a5);
      swift_unknownObjectRelease();
      return v12;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D5674(uint64_t a1, uint64_t a2)
{
  return sub_1000D56A0(a1, a2, (uint64_t (*)(void, uint64_t, void, uint64_t))sub_1001186B8, (uint64_t (*)(void))&type metadata accessor for HourlyForecastBannerViewModel);
}

uint64_t sub_1000D56A0(uint64_t result, uint64_t a2, uint64_t (*a3)(void, uint64_t, void, uint64_t), uint64_t (*a4)(void))
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v6 = *(void *)(a2 + 16);
  unint64_t result = a3(0, result, *(void *)(a2 + 16), a2);
  if (v7) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = result;
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v6 >= v8)
  {
    a4(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000D5760(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_10012CAE0();
    uint64_t v1 = sub_10012CB30();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

uint64_t type metadata accessor for EventManager()
{
  return self;
}

uint64_t sub_1000D5844(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

void *sub_1000D5890(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000D635C((uint64_t)a1);
    sub_1000053D8(&qword_10016B410);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_10012C800();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100129300();
  uint64_t v97 = *(void *)(v10 - 8);
  uint64_t v98 = v10;
  (*(void (**)(char *, char *))(v97 + 24))(v8, v9);
  uint64_t v11 = type metadata accessor for ForecastEntry(0);
  uint64_t v12 = *(int *)(v11 + 20);
  unint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = sub_10012C920();
  int v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v15);
  int v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v15);
  uint64_t v100 = a1;
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v13, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v18 = *(void *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
LABEL_11:
    uint64_t v19 = sub_1000053D8(&qword_10016B418);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v13, v14, v15);
LABEL_12:
  uint64_t v99 = v11;
  uint64_t v20 = *(int *)(v11 + 24);
  uint64_t v21 = &v8[v20];
  Swift::String v22 = &v9[v20];
  *(void *)uint64_t v21 = *(void *)&v9[v20];
  *((void *)v21 + 1) = *(void *)&v9[v20 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v21 + 2) = *((void *)v22 + 2);
  *((void *)v21 + 3) = *((void *)v22 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v21 + 4) = *((void *)v22 + 4);
  *((void *)v21 + 5) = *((void *)v22 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[48] = v22[48];
  v21[49] = v22[49];
  v21[50] = v22[50];
  v21[51] = v22[51];
  uint64_t v23 = type metadata accessor for WidgetContext();
  uint64_t v24 = *(int *)(v23 + 40);
  int v25 = &v21[v24];
  int v26 = &v22[v24];
  uint64_t v27 = sub_100129220();
  int v28 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v25, 1, v27);
  int v29 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v26, 1, v27);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v25, 0, 1, v27);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v30 = *(void *)(v27 - 8);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v27);
LABEL_17:
    uint64_t v31 = sub_1000053D8(&qword_10016B420);
    memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v25, v26, v27);
LABEL_18:
  uint64_t v32 = *(int *)(v23 + 44);
  unint64_t v33 = &v21[v32];
  uint64_t v34 = &v22[v32];
  *(void *)unint64_t v33 = *(void *)v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33[8] = v34[8];
  uint64_t v35 = v100;
  if (v100 != a2)
  {
    uint64_t v36 = *(int *)(v99 + 28);
    uint64_t v37 = &v8[v36];
    uint64_t v38 = &v9[v36];
    sub_100014B0C((uint64_t)&v8[v36]);
    uint64_t v39 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for WeatherDataViewModel();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v51 = sub_10012BE90();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v37, v38, v51);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v41 = sub_100129330();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v37, v38, v41);
        uint64_t v42 = type metadata accessor for InstantWeatherViewModel();
        uint64_t v43 = *(int *)(v42 + 20);
        uint64_t v44 = &v37[v43];
        uint64_t v45 = &v38[v43];
        uint64_t v46 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
        uint64_t v47 = *(int *)(v42 + 24);
        uint64_t v48 = &v37[v47];
        uint64_t v49 = &v38[v47];
        uint64_t v50 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      }
      else
      {
        uint64_t v52 = sub_100129330();
        uint64_t v95 = *(void (**)(char *, char *))(*(void *)(v52 - 8) + 16);
        uint64_t v96 = v52;
        v95(v37, v38);
        uint64_t v53 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v54 = v53[5];
        uint64_t v55 = &v37[v54];
        uint64_t v56 = &v38[v54];
        uint64_t v57 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
        uint64_t v58 = v53[6];
        uint64_t v59 = &v37[v58];
        uint64_t v60 = &v38[v58];
        uint64_t v61 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
        *(void *)&v37[v53[7]] = *(void *)&v38[v53[7]];
        *(void *)&v37[v53[8]] = *(void *)&v38[v53[8]];
        uint64_t v62 = v53[9];
        uint64_t v63 = &v37[v62];
        uint64_t v64 = &v38[v62];
        uint64_t v65 = (int *)type metadata accessor for AirQualityViewModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v64, 1, (uint64_t)v65))
        {
          uint64_t v66 = sub_1000053D8(&qword_10016B428);
          memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          uint64_t v67 = (uint64_t)v63;
          ((void (*)(char *, char *, uint64_t))v95)(v63, v64, v96);
          (*(void (**)(char *, char *, uint64_t))(v97 + 16))(&v63[v65[5]], &v64[v65[5]], v98);
          *(void *)&v63[v65[6]] = *(void *)&v64[v65[6]];
          uint64_t v68 = v65[7];
          uint64_t v69 = &v63[v68];
          uint64_t v70 = &v64[v68];
          uint64_t v71 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v69, v70, v71);
          uint64_t v72 = v65[8];
          uint64_t v73 = v67 + v72;
          uint64_t v74 = &v64[v72];
          uint64_t v75 = sub_100129C50();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v75 - 8) + 16))(v73, v74, v75);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v67, 0, 1, (uint64_t)v65);
        }
        uint64_t v76 = v53[10];
        uint64_t v77 = &v37[v76];
        uint64_t v78 = &v38[v76];
        uint64_t v79 = sub_10012C6B0();
        uint64_t v35 = v100;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v79))
        {
          uint64_t v80 = sub_1000053D8(&qword_10016B430);
          memcpy(v77, v78, *(void *)(*(void *)(v80 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v79);
        }
        *(void *)&v37[v53[11]] = *(void *)&v38[v53[11]];
        uint64_t v81 = v53[12];
        uint64_t v82 = &v37[v81];
        uint64_t v83 = &v38[v81];
        uint64_t v84 = *(void *)v83;
        *((_WORD *)v82 + 4) = *((_WORD *)v83 + 4);
        *(void *)uint64_t v82 = v84;
        uint64_t v85 = v53[13];
        uint64_t v86 = &v37[v85];
        uint64_t v87 = &v38[v85];
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v87, 1, v27))
        {
          uint64_t v88 = sub_1000053D8(&qword_10016B420);
          memcpy(v86, v87, *(void *)(*(void *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v86, v87, v27);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v86, 0, 1, v27);
        }
        uint64_t v89 = v53[14];
        uint64_t v90 = &v37[v89];
        uint64_t v91 = &v38[v89];
        uint64_t v92 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v91, 1, v92))
        {
          uint64_t v93 = sub_1000053D8(&qword_10016B438);
          memcpy(v90, v91, *(void *)(*(void *)(v93 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v90, v91, v98);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v90, 0, 1, v92);
        }
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
  }
  return v35;
}

uint64_t sub_1000D635C(uint64_t a1)
{
  uint64_t v2 = sub_1000053D8(&qword_10016B410);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1000D63BC(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000D635C((uint64_t)a1);
    uint64_t v6 = sub_1000053D8(&qword_10016B410);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_10012C800();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_100129300();
  uint64_t v99 = *(void *)(v11 - 8);
  uint64_t v100 = v11;
  (*(void (**)(char *, char *))(v99 + 40))(v9, v10);
  uint64_t v12 = type metadata accessor for ForecastEntry(0);
  uint64_t v13 = *(int *)(v12 + 20);
  uint64_t v14 = &v9[v13];
  uint64_t v15 = &v10[v13];
  uint64_t v16 = sub_10012C920();
  int v17 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v16);
  int v18 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16);
  uint64_t v103 = a1;
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v16);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v19 = *(void *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v16);
LABEL_10:
    uint64_t v20 = sub_1000053D8(&qword_10016B418);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_11:
  uint64_t v102 = v12;
  uint64_t v21 = *(int *)(v12 + 24);
  Swift::String v22 = &v9[v21];
  uint64_t v23 = &v10[v21];
  uint64_t v24 = *(void *)&v10[v21 + 8];
  *(void *)Swift::String v22 = *(void *)&v10[v21];
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = *((void *)v23 + 3);
  *((void *)v22 + 2) = *((void *)v23 + 2);
  *((void *)v22 + 3) = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = *((void *)v23 + 5);
  *((void *)v22 + 4) = *((void *)v23 + 4);
  *((void *)v22 + 5) = v26;
  swift_bridgeObjectRelease();
  *((_WORD *)v22 + 24) = *((_WORD *)v23 + 24);
  v22[50] = v23[50];
  v22[51] = v23[51];
  uint64_t v27 = type metadata accessor for WidgetContext();
  uint64_t v28 = *(int *)(v27 + 40);
  int v29 = &v22[v28];
  uint64_t v30 = &v23[v28];
  uint64_t v31 = sub_100129220();
  int v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v31);
  int v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v31);
  uint64_t v101 = v31;
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v29, 0, 1, v31);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v34 = *(void *)(v31 - 8);
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v31);
LABEL_16:
    uint64_t v35 = sub_1000053D8(&qword_10016B420);
    memcpy(v29, v30, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v29, v30, v31);
LABEL_17:
  uint64_t v36 = *(int *)(v27 + 44);
  uint64_t v37 = &v22[v36];
  uint64_t v38 = &v23[v36];
  *(void *)uint64_t v37 = *(void *)&v23[v36];
  swift_bridgeObjectRelease();
  v37[8] = v38[8];
  uint64_t v39 = v103;
  if (v103 != a2)
  {
    uint64_t v40 = *(int *)(v102 + 28);
    uint64_t v41 = &v9[v40];
    uint64_t v42 = &v10[v40];
    sub_100014B0C((uint64_t)&v9[v40]);
    uint64_t v43 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for WeatherDataViewModel();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v55 = sub_10012BE90();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v41, v42, v55);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v45 = sub_100129330();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v41, v42, v45);
        uint64_t v46 = type metadata accessor for InstantWeatherViewModel();
        uint64_t v47 = *(int *)(v46 + 20);
        uint64_t v48 = &v41[v47];
        uint64_t v49 = &v42[v47];
        uint64_t v50 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
        uint64_t v51 = *(int *)(v46 + 24);
        uint64_t v52 = &v41[v51];
        uint64_t v53 = &v42[v51];
        uint64_t v54 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v52, v53, v54);
      }
      else
      {
        uint64_t v56 = sub_100129330();
        uint64_t v57 = *(void (**)(char *, char *))(*(void *)(v56 - 8) + 32);
        uint64_t v98 = v56;
        v57(v41, v42);
        uint64_t v58 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v59 = v58[5];
        uint64_t v60 = &v41[v59];
        uint64_t v61 = &v42[v59];
        uint64_t v62 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v60, v61, v62);
        uint64_t v63 = v58[6];
        uint64_t v64 = &v41[v63];
        uint64_t v65 = &v42[v63];
        uint64_t v66 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v64, v65, v66);
        *(void *)&v41[v58[7]] = *(void *)&v42[v58[7]];
        *(void *)&v41[v58[8]] = *(void *)&v42[v58[8]];
        uint64_t v67 = v58[9];
        uint64_t v68 = &v41[v67];
        uint64_t v69 = &v42[v67];
        uint64_t v70 = (int *)type metadata accessor for AirQualityViewModel();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, (uint64_t)v70))
        {
          uint64_t v71 = sub_1000053D8(&qword_10016B428);
          memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v57)(v68, v69, v98);
          (*(void (**)(char *, char *, uint64_t))(v99 + 32))(&v68[v70[5]], &v69[v70[5]], v100);
          *(void *)&v68[v70[6]] = *(void *)&v69[v70[6]];
          uint64_t v72 = v70[7];
          uint64_t v73 = &v68[v72];
          uint64_t v74 = &v69[v72];
          uint64_t v75 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v73, v74, v75);
          uint64_t v76 = v70[8];
          uint64_t v77 = &v68[v76];
          uint64_t v78 = &v69[v76];
          uint64_t v79 = sub_100129C50();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 32))(v77, v78, v79);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, (uint64_t)v70);
        }
        uint64_t v80 = v58[10];
        uint64_t v81 = &v41[v80];
        uint64_t v82 = &v42[v80];
        uint64_t v83 = sub_10012C6B0();
        uint64_t v39 = v103;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, v83))
        {
          uint64_t v84 = sub_1000053D8(&qword_10016B430);
          memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 32))(v81, v82, v83);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, v83);
        }
        *(void *)&v41[v58[11]] = *(void *)&v42[v58[11]];
        uint64_t v85 = v58[12];
        uint64_t v86 = &v41[v85];
        uint64_t v87 = &v42[v85];
        *(void *)uint64_t v86 = *(void *)v87;
        *((_WORD *)v86 + 4) = *((_WORD *)v87 + 4);
        uint64_t v88 = v58[13];
        uint64_t v89 = &v41[v88];
        uint64_t v90 = &v42[v88];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v42[v88], 1, v101))
        {
          uint64_t v91 = sub_1000053D8(&qword_10016B420);
          memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 32))(v89, v90, v101);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v89, 0, 1, v101);
        }
        uint64_t v92 = v58[14];
        uint64_t v93 = &v41[v92];
        uint64_t v94 = &v42[v92];
        uint64_t v95 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v94, 1, v95))
        {
          uint64_t v96 = sub_1000053D8(&qword_10016B438);
          memcpy(v93, v94, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v93, v94, v100);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v93, 0, 1, v95);
        }
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
  }
  return v39;
}

uint64_t sub_1000D6E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6E50);
}

uint64_t sub_1000D6E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for ForecastEntry(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
}

uint64_t sub_1000D6ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D6EE4);
}

uint64_t sub_1000D6EE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for ForecastEntry(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t type metadata accessor for TemperatureContentView()
{
  uint64_t result = qword_1001700A8;
  if (!qword_1001700A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D6FB4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000D6FD0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6FD8(v1, a1);
}

uint64_t sub_1000D6FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for TemperatureContentView();
  __chkstk_darwin(v3);
  uint64_t v25 = (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1000053D8(&qword_1001700E0);
  __chkstk_darwin(v26);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10012C660();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10012C4A0();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10012C800();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v23 = (uint64_t)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v22 - v18;
  sub_10008F554((uint64_t)&v22 - v18);
  uint64_t v24 = v15;
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v19, v14) == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_1000AD8D0((uint64_t)v9);
    sub_10012C490();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v6, v13, v10);
    swift_storeEnumTagMultiPayload();
    sub_1000D74A4(&qword_1001700E8, (void (*)(uint64_t))&type metadata accessor for TemperatureCircularContentView);
    sub_10012B0E0();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    sub_1000D7440(a1, v25);
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    sub_10012CFD0(65);
    v30._countAndFlagsBits = 0xD000000000000022;
    v30._object = (void *)0x8000000100138E20;
    sub_10012CAF0(v30);
    uint64_t v21 = v23;
    sub_10008F554(v23);
    sub_1000D74A4(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
    v31._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v31);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v14);
    v32._object = (void *)0x800000010013C060;
    v32._countAndFlagsBits = 0xD00000000000001DLL;
    sub_10012CAF0(v32);
    uint64_t result = sub_10012D070();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D7440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TemperatureContentView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D74A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D74F0()
{
  unint64_t result = qword_1001700F0;
  if (!qword_1001700F0)
  {
    sub_100005470(&qword_1001700F8);
    sub_1000D7564();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001700F0);
  }
  return result;
}

unint64_t sub_1000D7564()
{
  unint64_t result = qword_100170100;
  if (!qword_100170100)
  {
    sub_100005470(&qword_100170108);
    sub_1000D74A4(&qword_1001700E8, (void (*)(uint64_t))&type metadata accessor for TemperatureCircularContentView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170100);
  }
  return result;
}

uint64_t sub_1000D7610()
{
  uint64_t v0 = sub_10012B120();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10000DC50();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_10012AF70();
  __chkstk_darwin(v7 - 8);
  sub_10005C778();
  uint64_t v8 = sub_1000053D8(&qword_10016EAC0);
  sub_10000DB98();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10000DC50();
  uint64_t v14 = v13 - v12;
  sub_10012AF60();
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  sub_10012AF50(v26);
  sub_10012B620();
  sub_10012AF30();
  swift_release();
  v27._countAndFlagsBits = 623717664;
  v27._object = (void *)0xE400000000000000;
  sub_10012AF50(v27);
  sub_10012AF90();
  uint64_t v23 = sub_1000D7E68();
  uint64_t v24 = v15;
  char v25 = v16 & 1;
  sub_10012B0F0();
  sub_10012B520();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  sub_100008278(v23, v24, v25);
  swift_bridgeObjectRelease();
  sub_10012AF80();
  uint64_t v17 = sub_1000D7E68();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  swift_getOpaqueTypeConformance2();
  sub_10012B4D0();
  sub_100008278(v17, v19, v21);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
}

uint64_t sub_1000D78B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D78C8);
}

uint64_t sub_1000D78C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012C0E0();

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
}

uint64_t sub_1000D7910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7924);
}

uint64_t sub_1000D7924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012C0E0();

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RainInlineContentView()
{
  uint64_t result = qword_100170168;
  if (!qword_100170168) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D79B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000D79D4()
{
  uint64_t v1 = type metadata accessor for RainInlineTruncateFallbackText();
  __chkstk_darwin(v1);
  sub_10005C778();
  uint64_t v2 = sub_1000053D8(&qword_10016CD88);
  __chkstk_darwin(v2 - 8);
  sub_10000DC50();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_10012C0E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v0, v0, v6);
  sub_10012AF80();
  uint64_t v7 = sub_10012B400();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  sub_1000D7E20(&qword_10016EB20, (void (*)(uint64_t))type metadata accessor for RainInlineTruncateFallbackText);
  sub_10012B4D0();
  sub_100008278(v7, v9, v11);
  swift_bridgeObjectRelease();
  sub_1000D7C08(v0);
  sub_10012B7A0();
  sub_10004CDE0();
  return sub_1000D7C64(v5);
}

uint64_t sub_1000D7C08(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RainInlineTruncateFallbackText();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D7C64(uint64_t a1)
{
  uint64_t v2 = sub_1000053D8(&qword_10016CD88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000D7CC8()
{
  unint64_t result = qword_1001701A0;
  if (!qword_1001701A0)
  {
    sub_100005470(&qword_10016CD90);
    sub_1000D7D44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001701A0);
  }
  return result;
}

unint64_t sub_1000D7D44()
{
  unint64_t result = qword_1001701A8;
  if (!qword_1001701A8)
  {
    sub_100005470(&qword_10016CD88);
    sub_1000D7E20(&qword_10016EB20, (void (*)(uint64_t))type metadata accessor for RainInlineTruncateFallbackText);
    sub_1000D7E20((unint64_t *)&qword_10016BEC8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001701A8);
  }
  return result;
}

uint64_t sub_1000D7E20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D7E68()
{
  return sub_10012B400();
}

uint64_t sub_1000D7E94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v106 = a2;
  sub_10012BBA0();
  sub_10000DB98();
  uint64_t v97 = v7;
  uint64_t v98 = v6;
  __chkstk_darwin(v6);
  sub_10000DBCC();
  uint64_t v96 = v8;
  uint64_t v9 = type metadata accessor for EventViewModel(0);
  sub_10000B3FC();
  __chkstk_darwin(v10);
  sub_10000DBCC();
  uint64_t v102 = v11;
  uint64_t v12 = sub_1000053D8(&qword_10016BEA8);
  __chkstk_darwin(v12 - 8);
  sub_10000DCB4();
  uint64_t v94 = v13;
  sub_1000636C8();
  __chkstk_darwin(v14);
  uint64_t v100 = (uint64_t)v90 - v15;
  uint64_t v110 = sub_10012C0E0();
  sub_10000DB98();
  uint64_t v95 = v16;
  __chkstk_darwin(v17);
  sub_10000DCB4();
  uint64_t v93 = v18;
  sub_1000636C8();
  __chkstk_darwin(v19);
  uint64_t v101 = (char *)v90 - v20;
  uint64_t v21 = sub_1000053D8(&qword_10016B430);
  __chkstk_darwin(v21 - 8);
  sub_1000DB48C(v22, v90[0]);
  uint64_t v23 = sub_10012C6B0();
  sub_10000DB98();
  uint64_t v103 = v24;
  __chkstk_darwin(v25);
  sub_1000B2F10(v26, v90[0]);
  uint64_t v27 = sub_1000053D8(&qword_10016D2A8);
  __chkstk_darwin(v27 - 8);
  sub_10000DCB4();
  uint64_t v104 = v28;
  sub_1000636C8();
  __chkstk_darwin(v29);
  uint64_t v99 = (uint64_t)v90 - v30;
  sub_1000636C8();
  __chkstk_darwin(v31);
  int v33 = (char *)v90 - v32;
  uint64_t v111 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_10000B3FC();
  __chkstk_darwin(v34);
  sub_1000213D4();
  if (qword_10016AE08 != -1) {
    swift_once();
  }
  uint64_t v35 = sub_10012AB60();
  uint64_t v36 = sub_10000D7A4(v35, (uint64_t)qword_100181BE0);
  sub_1000DAC54(a1, v3, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
  uint64_t v105 = v36;
  uint64_t v37 = sub_10012AB40();
  os_log_type_t v38 = sub_10012CD60();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v109 = v23;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v92 = v33;
    *(_DWORD *)uint64_t v40 = 141558275;
    uint64_t v112 = 1752392040;
    uint64_t v113 = v41;
    v90[1] = v4;
    sub_10012CF70();
    *(_WORD *)(v40 + 12) = 2081;
    v90[0] = v40 + 14;
    uint64_t v42 = v111;
    sub_10012A6B0();
    uint64_t v91 = a1;
    sub_1000DACA8(&qword_10016E808, (void (*)(uint64_t))&type metadata accessor for Location);
    uint64_t v43 = sub_10012D1D0();
    uint64_t v112 = sub_100123564(v43, v44, &v113);
    sub_10012CF70();
    a1 = v91;
    swift_bridgeObjectRelease();
    sub_1000DA658(v3, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "About to evaluate conditions for location=%{private,mask.hash}s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    int v33 = v92;
    swift_slowDealloc();
    uint64_t v23 = v109;
    swift_slowDealloc();
  }
  else
  {
    sub_1000DA658(v3, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);

    uint64_t v42 = v111;
  }
  sub_1000D9E80(*(void *)(a1 + *(int *)(v42 + 44)), (uint64_t)v33);
  uint64_t v45 = v107;
  sub_10000B114(a1 + *(int *)(v42 + 40), v107, &qword_10016B430);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v45, 1, v23) == 1)
  {
    sub_10000D930(v45, &qword_10016B430);
    uint64_t v46 = v110;
    uint64_t v47 = v104;
  }
  else
  {
    uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 32);
    v48(v108, v45, v23);
    uint64_t v49 = v99;
    sub_10000B114((uint64_t)v33, v99, &qword_10016D2A8);
    int v50 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v49, 1, v9);
    uint64_t v46 = v110;
    if (v50 == 1)
    {
      sub_10000D930(v49, &qword_10016D2A8);
      uint64_t v51 = 0;
      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v53 = (uint64_t *)(v49 + *(int *)(v9 + 40));
      uint64_t v51 = *v53;
      uint64_t v52 = v53[1];
      swift_bridgeObjectRetain();
      sub_1000DA658(v49, (void (*)(void))type metadata accessor for EventViewModel);
    }
    uint64_t v54 = v100;
    sub_1000AADF4(0, v51, v52, v100);
    swift_bridgeObjectRelease();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v54, 1, v46) != 1)
    {
      uint64_t v75 = *(void (**)(void))(v95 + 32);
      sub_100011F6C();
      v75();
      uint64_t v76 = (void *)sub_10012AB40();
      os_log_type_t v77 = sub_10012CD60();
      if (sub_10000DC00(v77))
      {
        uint64_t v78 = (_WORD *)sub_10000DC1C();
        sub_10000DC90(v78);
        sub_10000DBE0((void *)&_mh_execute_header, v79, v80, "Detected precipitation. Returning .nextHourPrecipitation.");
        sub_1000DB470();
      }

      sub_10000D930((uint64_t)v33, &qword_10016D2A8);
      uint64_t v81 = sub_1000053D8(&qword_10016EA90);
      uint64_t v82 = (char *)v106 + *(int *)(v81 + 48);
      ((void (*)(void *, char *, uint64_t))v75)(v106, v101, v46);
      v48((uint64_t)v82, v108, v109);
      type metadata accessor for ConditionState();
      return swift_storeEnumTagMultiPayload();
    }
    sub_10000B424();
    v55();
    sub_10000D930(v54, &qword_10016BEA8);
    uint64_t v47 = v104;
  }
  sub_10000B114((uint64_t)v33, v47, &qword_10016D2A8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v47, 1, v9) == 1)
  {
    sub_10000D930(v47, &qword_10016D2A8);
    sub_10012C240();
    char v56 = sub_10012BB70();
    sub_10000B424();
    v57();
    if (v56)
    {
LABEL_17:
      uint64_t v59 = (void *)sub_10012AB40();
      os_log_type_t v60 = sub_10012CD60();
      if (sub_10000DC00(v60))
      {
        uint64_t v61 = (_WORD *)sub_10000DC1C();
        sub_10000DC90(v61);
        sub_10000DBE0((void *)&_mh_execute_header, v62, v63, "Detected no special condition. Returning .normal.");
        sub_1000DB470();
      }

      sub_10000D930((uint64_t)v33, &qword_10016D2A8);
      type metadata accessor for ConditionState();
      return swift_storeEnumTagMultiPayload();
    }
    uint64_t v58 = v94;
    sub_1000A7190(a1, 1, COERCE_DOUBLE(6), v94, 0.6);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v58, 1, v46) == 1)
    {
      sub_10000D930(v58, &qword_10016BEA8);
      goto LABEL_17;
    }
    uint64_t v83 = *(void (**)(void))(v95 + 32);
    sub_100011F6C();
    v83();
    uint64_t v84 = (void *)sub_10012AB40();
    os_log_type_t v85 = sub_10012CD60();
    if (sub_10000DC00(v85))
    {
      uint64_t v86 = (_WORD *)sub_10000DC1C();
      sub_10000DC90(v86);
      sub_10000DBE0((void *)&_mh_execute_header, v87, v88, "Detected precipitation within six hours. Returning .precipitationWithinSixHours.");
      sub_1000DB470();
    }

    sub_10000D930((uint64_t)v33, &qword_10016D2A8);
    ((void (*)(void *, uint64_t, uint64_t))v83)(v106, v93, v46);
    type metadata accessor for ConditionState();
  }
  else
  {
    uint64_t v64 = v9;
    sub_1000DAB10(v47, v102, (void (*)(void))type metadata accessor for EventViewModel);
    uint64_t v65 = (void *)sub_10012AB40();
    os_log_type_t v66 = sub_10012CD60();
    if (sub_10000DC00(v66))
    {
      uint64_t v67 = (_WORD *)sub_10000DC1C();
      sub_10000DC90(v67);
      sub_10000DBE0((void *)&_mh_execute_header, v68, v69, "Detected an alert. Returning .alert.");
      sub_1000DB470();
    }

    sub_10000D930((uint64_t)v33, &qword_10016D2A8);
    uint64_t v70 = v102;
    uint64_t v71 = (uint64_t *)(v102 + *(int *)(v64 + 40));
    uint64_t v73 = *v71;
    uint64_t v72 = v71[1];
    swift_bridgeObjectRetain();
    sub_1000DA658(v70, (void (*)(void))type metadata accessor for EventViewModel);
    uint64_t v74 = v106;
    *uint64_t v106 = v73;
    v74[1] = v72;
    type metadata accessor for ConditionState();
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000D886C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7472656C61 && a2 == 0xE500000000000000;
  if (v2 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100139DB0 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000010013C0F0 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v7 = sub_10012D1F0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1000D8A08(char a1)
{
  unint64_t result = 0x7472656C61;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
      unint64_t result = 0x6C616D726F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D8AA0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_10012D1F0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000D8B68(char a1)
{
  if (a1) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t sub_1000D8B80(void *a1)
{
  v51[5] = sub_1000053D8(&qword_100170348);
  sub_10000DB98();
  v51[3] = v2;
  __chkstk_darwin(v3);
  sub_10000DBCC();
  v51[2] = v4;
  sub_1000053D8(&qword_100170350);
  sub_10000DB98();
  v51[6] = v6;
  v51[7] = v5;
  __chkstk_darwin(v5);
  sub_10000DBCC();
  v51[4] = v7;
  sub_1000053D8(&qword_100170358);
  sub_10000DB98();
  v51[9] = v9;
  v51[10] = v8;
  __chkstk_darwin(v8);
  sub_10000DBCC();
  v51[8] = v10;
  uint64_t v57 = sub_10012C6B0();
  sub_10000DB98();
  uint64_t v53 = v11;
  __chkstk_darwin(v12);
  sub_1000B2F10(v13, v51[0]);
  sub_10012C0E0();
  sub_10000DB98();
  uint64_t v54 = v15;
  uint64_t v55 = v14;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v52 = (char *)v51 - v19;
  sub_1000053D8(&qword_100170360);
  sub_10000DB98();
  v51[1] = v20;
  __chkstk_darwin(v21);
  sub_10000DC50();
  type metadata accessor for ConditionState();
  sub_10000B3FC();
  __chkstk_darwin(v22);
  sub_10000DC50();
  uint64_t v25 = v24 - v23;
  uint64_t v61 = sub_1000053D8(&qword_100170368);
  sub_10000DB98();
  uint64_t v59 = v26;
  __chkstk_darwin(v27);
  sub_1000213D4();
  sub_10000D890(a1, a1[3]);
  sub_1000DAA78();
  sub_10012D2C0();
  sub_1000DAC54(v60, v25, (void (*)(void))type metadata accessor for ConditionState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1000053D8(&qword_10016EA90);
      uint64_t v33 = v54;
      uint64_t v34 = v55;
      uint64_t v35 = v52;
      sub_100011F6C();
      v36();
      uint64_t v37 = v53;
      sub_100011F6C();
      v38();
      char v65 = 1;
      sub_1000DABBC();
      sub_1000DB4D0();
      char v64 = 0;
      sub_1000DACA8(&qword_100170370, (void (*)(uint64_t))&type metadata accessor for RainInlineContentViewModel);
      uint64_t v39 = v58;
      sub_10012D1B0();
      if (v39)
      {
        sub_10000B424();
        v40();
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v56, v57);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v34);
        uint64_t v30 = sub_1000DB4C0();
        uint64_t v32 = v61;
      }
      else
      {
        uint64_t v48 = v61;
        char v63 = 1;
        sub_1000DACA8(&qword_10016D1F8, (void (*)(uint64_t))&type metadata accessor for NextHourPrecipitationChartViewModel);
        sub_10012D1B0();
        sub_10000B424();
        v49();
        sub_10000B424();
        v50();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v52, v34);
        uint64_t v30 = sub_1000DB4C0();
        uint64_t v32 = v48;
      }
      return v31(v30, v32);
    case 2u:
      uint64_t v41 = v54;
      uint64_t v42 = v55;
      sub_100011F6C();
      v43();
      char v66 = 2;
      sub_1000DAB70();
      sub_1000DB4D0();
      sub_1000DACA8(&qword_100170370, (void (*)(uint64_t))&type metadata accessor for RainInlineContentViewModel);
      sub_10012D1B0();
      sub_10000B424();
      v44();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v42);
      uint64_t v30 = sub_1000DB4E8();
      return v31(v30, v32);
    case 3u:
      char v67 = 3;
      sub_1000DAAC4();
      sub_1000DB4D0();
      sub_10000B424();
      v45();
      sub_1000DB4E8();
      sub_10000B424();
      return v46();
    default:
      char v62 = 0;
      sub_1000DAC08();
      uint64_t v28 = v61;
      sub_1000DB4D0();
      sub_10012D180();
      swift_bridgeObjectRelease();
      sub_10000B424();
      v29();
      uint64_t v30 = sub_1000DB4C0();
      uint64_t v32 = v28;
      return v31(v30, v32);
  }
}

uint64_t sub_1000D9270@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = a2;
  sub_1000053D8(&qword_1001702F0);
  sub_10000DB98();
  uint64_t v76 = v4;
  uint64_t v77 = v3;
  __chkstk_darwin(v3);
  sub_10000DBCC();
  uint64_t v83 = v5;
  sub_1000053D8(&qword_1001702F8);
  sub_10000DB98();
  uint64_t v78 = v7;
  uint64_t v79 = v6;
  __chkstk_darwin(v6);
  sub_1000DB48C(v8, v70);
  uint64_t v88 = sub_1000053D8(&qword_100170300);
  sub_10000DB98();
  uint64_t v80 = v9;
  __chkstk_darwin(v10);
  sub_10000DBCC();
  uint64_t v87 = v11;
  sub_1000053D8(&qword_100170308);
  sub_10000DB98();
  uint64_t v74 = v13;
  uint64_t v75 = v12;
  __chkstk_darwin(v12);
  sub_10000DBCC();
  uint64_t v82 = v14;
  sub_1000053D8(&qword_100170310);
  sub_10000DB98();
  uint64_t v85 = v16;
  uint64_t v86 = v15;
  __chkstk_darwin(v15);
  sub_10000DC50();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for ConditionState();
  sub_10000B3FC();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v70 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (uint64_t *)((char *)&v70 - v29);
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v70 - v31;
  uint64_t v33 = a1[3];
  uint64_t v89 = a1;
  sub_10000D890(a1, v33);
  sub_1000DAA78();
  uint64_t v34 = (uint64_t)v90;
  sub_10012D2B0();
  if (v34) {
    goto LABEL_12;
  }
  uint64_t v71 = v30;
  uint64_t v72 = v24;
  uint64_t v73 = v27;
  uint64_t v90 = v32;
  uint64_t v35 = v86;
  uint64_t v36 = sub_10012D140();
  uint64_t v37 = *(void *)(v36 + 16);
  if (!v37)
  {
    uint64_t v44 = v19;
    uint64_t v45 = v35;
LABEL_8:
    uint64_t v46 = sub_10012D010();
    swift_allocError();
    uint64_t v48 = v47;
    sub_1000053D8(&qword_10016B730);
    uint64_t *v48 = v20;
    sub_10012D0D0();
    sub_10012D000();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v46 - 8) + 104))(v48, enum case for DecodingError.typeMismatch(_:), v46);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v44, v45);
LABEL_12:
    uint64_t v49 = (uint64_t)v89;
    return sub_10000DB48(v49);
  }
  uint64_t v70 = 0;
  uint64_t v38 = *(unsigned __int8 *)(v36 + 32);
  uint64_t v39 = sub_1000B0244(1, v37, v36, v36 + 32, 0, (2 * v37) | 1);
  uint64_t v41 = v40;
  unint64_t v43 = v42;
  swift_bridgeObjectRelease();
  if (v41 != v43 >> 1)
  {
    uint64_t v44 = v19;
    uint64_t v45 = v35;
    goto LABEL_8;
  }
  switch(v38)
  {
    case 1:
      char v94 = 1;
      sub_1000DABBC();
      sub_1000DB450();
      uint64_t v84 = v39;
      sub_10012C0E0();
      char v93 = 0;
      sub_1000DACA8(&qword_100170330, (void (*)(uint64_t))&type metadata accessor for RainInlineContentViewModel);
      sub_10012D130();
      sub_1000053D8(&qword_10016EA90);
      sub_10012C6B0();
      char v92 = 1;
      sub_1000DACA8(&qword_10016D278, (void (*)(uint64_t))&type metadata accessor for NextHourPrecipitationChartViewModel);
      sub_10012D130();
      sub_10000B424();
      v63();
      swift_unknownObjectRelease();
      uint64_t v64 = sub_1000DB4A8();
      v65(v64);
      uint64_t v66 = (uint64_t)v73;
      swift_storeEnumTagMultiPayload();
      uint64_t v67 = (uint64_t)v90;
      sub_1000DAB10(v66, (uint64_t)v90, (void (*)(void))type metadata accessor for ConditionState);
      uint64_t v68 = (uint64_t)v89;
      uint64_t v69 = v81;
      goto LABEL_16;
    case 2:
      char v95 = 2;
      sub_1000DAB70();
      sub_1000DB450();
      sub_10012C0E0();
      sub_1000DACA8(&qword_100170330, (void (*)(uint64_t))&type metadata accessor for RainInlineContentViewModel);
      sub_10012D130();
      sub_10000B424();
      v60();
      swift_unknownObjectRelease();
      sub_10000B424();
      v61();
      uint64_t v62 = (uint64_t)v72;
      swift_storeEnumTagMultiPayload();
      uint64_t v59 = v62;
      goto LABEL_14;
    case 3:
      char v96 = 3;
      sub_1000DAAC4();
      sub_1000DB450();
      sub_10000B424();
      v51();
      swift_unknownObjectRelease();
      sub_10000B424();
      v52();
      uint64_t v67 = (uint64_t)v90;
      swift_storeEnumTagMultiPayload();
      goto LABEL_15;
    default:
      char v91 = 0;
      sub_1000DAC08();
      sub_1000DB450();
      uint64_t v53 = sub_10012D100();
      uint64_t v55 = v54;
      sub_10000B424();
      v56();
      swift_unknownObjectRelease();
      sub_10000B424();
      v57();
      uint64_t v58 = v71;
      *uint64_t v71 = v53;
      v58[1] = v55;
      swift_storeEnumTagMultiPayload();
      uint64_t v59 = (uint64_t)v58;
LABEL_14:
      uint64_t v67 = (uint64_t)v90;
      sub_1000DAB10(v59, (uint64_t)v90, (void (*)(void))type metadata accessor for ConditionState);
LABEL_15:
      uint64_t v68 = (uint64_t)v89;
      uint64_t v69 = v81;
LABEL_16:
      sub_1000DAB10(v67, v69, (void (*)(void))type metadata accessor for ConditionState);
      uint64_t v49 = v68;
      break;
  }
  return sub_10000DB48(v49);
}

uint64_t sub_1000D9B98(uint64_t a1)
{
  unint64_t v2 = sub_1000DAC08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D9BD4(uint64_t a1)
{
  unint64_t v2 = sub_1000DAC08();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000D9C10()
{
  return sub_1000D8A08(*v0);
}

uint64_t sub_1000D9C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D886C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D9C40(uint64_t a1)
{
  unint64_t v2 = sub_1000DAA78();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D9C7C(uint64_t a1)
{
  unint64_t v2 = sub_1000DAA78();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D9CB8()
{
  return sub_1000D8B68(*v0);
}

uint64_t sub_1000D9CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D8AA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D9CE8(uint64_t a1)
{
  unint64_t v2 = sub_1000DABBC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D9D24(uint64_t a1)
{
  unint64_t v2 = sub_1000DABBC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D9D60(uint64_t a1)
{
  unint64_t v2 = sub_1000DAAC4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D9D9C(uint64_t a1)
{
  unint64_t v2 = sub_1000DAAC4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D9DD8(uint64_t a1)
{
  unint64_t v2 = sub_1000DAB70();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D9E14(uint64_t a1)
{
  unint64_t v2 = sub_1000DAB70();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D9E50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D9270(a1, a2);
}

uint64_t sub_1000D9E68(void *a1)
{
  return sub_1000D8B80(a1);
}

uint64_t sub_1000D9E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for EventViewModel(0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v10 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000DAC54(v9, (uint64_t)v7, (void (*)(void))type metadata accessor for EventViewModel);
      if (*v7 == 2) {
        break;
      }
      sub_1000DA658((uint64_t)v7, (void (*)(void))type metadata accessor for EventViewModel);
      v9 += v10;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000DAB10((uint64_t)v7, a2, (void (*)(void))type metadata accessor for EventViewModel);
    uint64_t v11 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v11 = 1;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a2, v11, 1, v4);
}

uint64_t type metadata accessor for ConditionsEvaluationManager()
{
  return self;
}

uint64_t type metadata accessor for ConditionState()
{
  uint64_t result = qword_1001702B8;
  if (!qword_1001702B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1000DA068(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = sub_10012C0E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = sub_10012C0E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(sub_1000053D8(&qword_10016EA90) + 48);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = sub_10012C6B0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000DA22C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      uint64_t v3 = sub_10012C0E0();
      break;
    case 1:
      uint64_t v4 = sub_10012C0E0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      a1 += *(int *)(sub_1000053D8(&qword_10016EA90) + 48);
      uint64_t v3 = sub_10012C6B0();
      break;
    case 0:
      return swift_bridgeObjectRelease();
    default:
      return result;
  }
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v5(a1, v3);
}

void *sub_1000DA32C(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = sub_10012C0E0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = sub_10012C0E0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    uint64_t v10 = *(int *)(sub_1000053D8(&qword_10016EA90) + 48);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_10012C6B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1000DA4AC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000DA658((uint64_t)a1, (void (*)(void))type metadata accessor for ConditionState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = sub_10012C0E0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = sub_10012C0E0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = *(int *)(sub_1000053D8(&qword_10016EA90) + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_10012C6B0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000DA658(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3FC();
  sub_10000B424();
  v3();
  return a1;
}

char *sub_1000DA6AC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = sub_10012C0E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = sub_10012C0E0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = *(int *)(sub_1000053D8(&qword_10016EA90) + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = sub_10012C6B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_1000DA80C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000DA658((uint64_t)a1, (void (*)(void))type metadata accessor for ConditionState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = sub_10012C0E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = sub_10012C0E0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = *(int *)(sub_1000053D8(&qword_10016EA90) + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = sub_10012C6B0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000DA990()
{
  int v5 = &unk_100135490;
  uint64_t result = sub_10012C0E0();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8);
    uint64_t result = sub_10012C6B0();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v4;
      uint64_t v7 = v2 + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000DAA78()
{
  unint64_t result = qword_100170318;
  if (!qword_100170318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170318);
  }
  return result;
}

unint64_t sub_1000DAAC4()
{
  unint64_t result = qword_100170320;
  if (!qword_100170320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170320);
  }
  return result;
}

uint64_t sub_1000DAB10(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_1000DAB70()
{
  unint64_t result = qword_100170328;
  if (!qword_100170328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170328);
  }
  return result;
}

unint64_t sub_1000DABBC()
{
  unint64_t result = qword_100170338;
  if (!qword_100170338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170338);
  }
  return result;
}

unint64_t sub_1000DAC08()
{
  unint64_t result = qword_100170340;
  if (!qword_100170340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170340);
  }
  return result;
}

uint64_t sub_1000DAC54(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  uint64_t v4 = sub_10000B430();
  v5(v4);
  return a2;
}

uint64_t sub_1000DACA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ConditionState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DADBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionState.CodingKeys()
{
  return &type metadata for ConditionState.CodingKeys;
}

ValueMetadata *type metadata accessor for ConditionState.AlertCodingKeys()
{
  return &type metadata for ConditionState.AlertCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ConditionState.NextHourPrecipitationCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DAED4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionState.NextHourPrecipitationCodingKeys()
{
  return &type metadata for ConditionState.NextHourPrecipitationCodingKeys;
}

unsigned char *_s13WeatherWidget14ConditionStateO15AlertCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000DAFA8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionState.PrecipitationWithinSixHoursCodingKeys()
{
  return &type metadata for ConditionState.PrecipitationWithinSixHoursCodingKeys;
}

ValueMetadata *type metadata accessor for ConditionState.NormalCodingKeys()
{
  return &type metadata for ConditionState.NormalCodingKeys;
}

unint64_t sub_1000DAFF4()
{
  unint64_t result = qword_100170378;
  if (!qword_100170378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170378);
  }
  return result;
}

unint64_t sub_1000DB044()
{
  unint64_t result = qword_100170380;
  if (!qword_100170380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170380);
  }
  return result;
}

unint64_t sub_1000DB094()
{
  unint64_t result = qword_100170388;
  if (!qword_100170388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170388);
  }
  return result;
}

unint64_t sub_1000DB0E4()
{
  unint64_t result = qword_100170390;
  if (!qword_100170390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170390);
  }
  return result;
}

unint64_t sub_1000DB134()
{
  unint64_t result = qword_100170398;
  if (!qword_100170398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170398);
  }
  return result;
}

unint64_t sub_1000DB184()
{
  unint64_t result = qword_1001703A0;
  if (!qword_1001703A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703A0);
  }
  return result;
}

unint64_t sub_1000DB1D4()
{
  unint64_t result = qword_1001703A8;
  if (!qword_1001703A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703A8);
  }
  return result;
}

unint64_t sub_1000DB224()
{
  unint64_t result = qword_1001703B0;
  if (!qword_1001703B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703B0);
  }
  return result;
}

unint64_t sub_1000DB274()
{
  unint64_t result = qword_1001703B8;
  if (!qword_1001703B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703B8);
  }
  return result;
}

unint64_t sub_1000DB2C4()
{
  unint64_t result = qword_1001703C0;
  if (!qword_1001703C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703C0);
  }
  return result;
}

unint64_t sub_1000DB314()
{
  unint64_t result = qword_1001703C8;
  if (!qword_1001703C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703C8);
  }
  return result;
}

unint64_t sub_1000DB364()
{
  unint64_t result = qword_1001703D0;
  if (!qword_1001703D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703D0);
  }
  return result;
}

unint64_t sub_1000DB3B4()
{
  unint64_t result = qword_1001703D8;
  if (!qword_1001703D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703D8);
  }
  return result;
}

unint64_t sub_1000DB404()
{
  unint64_t result = qword_1001703E0;
  if (!qword_1001703E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001703E0);
  }
  return result;
}

uint64_t sub_1000DB450()
{
  return sub_10012D0C0();
}

uint64_t sub_1000DB470()
{
  return swift_slowDealloc();
}

void sub_1000DB48C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000DB4A8()
{
  return v0;
}

uint64_t sub_1000DB4C0()
{
  return v0;
}

uint64_t sub_1000DB4D0()
{
  return sub_10012D150();
}

uint64_t sub_1000DB4E8()
{
  return v0;
}

uint64_t sub_1000DB4FC@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_1000DC448(a1), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = sub_10012CA10();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a3, v8 + *(void *)(*(void *)(v9 - 8) + 72) * v7, v9);
    uint64_t v10 = a3;
    uint64_t v11 = 0;
    uint64_t v12 = v9;
  }
  else
  {
    uint64_t v12 = sub_10012CA10();
    uint64_t v10 = a3;
    uint64_t v11 = 1;
  }

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v10, v11, 1, v12);
}

uint64_t sub_1000DB5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_1000DC3D0(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

void *sub_1000DB604(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v7 = sub_10012A740();
  __chkstk_darwin(v7 - 8);
  v3[13] = 0;
  sub_1000053D8(&qword_1001704B0);
  v3[14] = sub_10012C9A0();
  sub_10012A730();
  sub_10012A760();
  swift_allocObject();
  v3[15] = sub_10012A750();
  sub_100070A60(a1, (uint64_t)(v3 + 2));
  sub_100070A60(a2, (uint64_t)(v3 + 7));
  v3[12] = a3;
  return v3;
}

id sub_1000DB70C()
{
  unint64_t v1 = *(void **)(v0 + 104);
  if (v1)
  {
    id v2 = *(id *)(v0 + 104);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)NSOperationQueue) init];
    [v3 setQualityOfService:25];
    unsigned int v4 = *(void **)(v0 + 104);
    *(void *)(v0 + 104) = v3;
    id v2 = v3;

    unint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

void sub_1000DB78C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v27 = a2;
  uint64_t v8 = sub_10012A6B0();
  sub_10000DB98();
  uint64_t v10 = v9;
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v13);
  sub_10012A5F0();
  uint64_t v14 = sub_10012CEF0();
  uint64_t v16 = v15;
  uint64_t v28 = v14;
  if (sub_1000DB9E0(a3, a4, v14, v15))
  {
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v26((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
    sub_100074220(v4 + 16, (uint64_t)v30);
    sub_100074220(v4 + 56, (uint64_t)v29);
    id v17 = objc_allocWithZone((Class)type metadata accessor for WeatherDataOperation(0));
    swift_retain();
    sub_100090C24();
    uint64_t v19 = v18;
    uint64_t v20 = swift_allocObject();
    swift_weakInit();
    v26((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
    unint64_t v21 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v22 = (char *)swift_allocObject();
    uint64_t v23 = v28;
    *((void *)v22 + 2) = v20;
    *((void *)v22 + 3) = v23;
    *((void *)v22 + 4) = v16;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v22[v21], (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    sub_10012A7B0();
    id v24 = sub_1000DB70C();
    [v24 addOperation:v19];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

BOOL sub_1000DB9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10012A710();
  swift_beginAccess();
  uint64_t v9 = *(void *)(v4 + 112);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000DB5C0(a3, a4, v9);
  swift_bridgeObjectRelease();
  if (v10)
  {
    swift_endAccess();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = a1;
    *(void *)(v11 + 24) = a2;
    swift_retain();
    uint64_t v12 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100045B88(0, *(void *)(v10 + 16) + 1, 1, v10);
      uint64_t v12 = v20;
    }
    unint64_t v14 = *(void *)(v12 + 16);
    unint64_t v13 = *(void *)(v12 + 24);
    if (v14 >= v13 >> 1)
    {
      sub_100045B88(v13 > 1, v14 + 1, 1, v12);
      uint64_t v12 = v21;
    }
    *(void *)(v12 + 16) = v14 + 1;
    uint64_t v15 = v12 + 16 * v14;
    *(void *)(v15 + 32) = sub_1000DC9B8;
    *(void *)(v15 + 40) = v11;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v16 = v12;
  }
  else
  {
    swift_endAccess();
    sub_1000053D8(&qword_10016C7D8);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100130010;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a1;
    *(void *)(v18 + 24) = a2;
    *(void *)(v17 + 32) = sub_1000DC81C;
    *(void *)(v17 + 40) = v18;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v16 = v17;
  }
  sub_1000DC754(v16, a3, a4);
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_10012A720();
  return v10 == 0;
}

uint64_t sub_1000DBC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_10012A6B0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)v31 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = sub_1000DBFC4();
    uint64_t result = swift_release();
    if (v15)
    {
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v16 = sub_10012AB60();
      sub_10000D7A4(v16, (uint64_t)qword_100181C40);
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v17(v13, a5, v7);
      swift_bridgeObjectRetain_n();
      uint64_t v18 = sub_10012AB40();
      os_log_type_t v19 = sub_10012CD60();
      int v20 = v19;
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v21 = swift_slowAlloc();
        int v33 = v20;
        uint64_t v22 = v21;
        uint64_t v23 = swift_slowAlloc();
        uint64_t v34 = v23;
        *(_DWORD *)uint64_t v22 = 141558531;
        uint64_t v35 = 1752392040;
        uint64_t v36 = v23;
        os_log_t v32 = v18;
        sub_10012CF70();
        *(_WORD *)(v22 + 12) = 2081;
        v31[1] = v22 + 14;
        v17(v11, (uint64_t)v13, v7);
        uint64_t v24 = sub_10012CAB0();
        uint64_t v35 = sub_100123564(v24, v25, &v36);
        sub_10012CF70();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
        *(_WORD *)(v22 + 22) = 2048;
        uint64_t v26 = *(void *)(v15 + 16);
        swift_bridgeObjectRelease();
        uint64_t v35 = v26;
        sub_10012CF70();
        swift_bridgeObjectRelease();
        os_log_t v27 = v32;
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v33, "Data operation completion: %{private,mask.hash}s, requests: %ld", (uint8_t *)v22, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);

        swift_bridgeObjectRelease();
      }
      uint64_t v28 = *(void *)(v15 + 16);
      if (v28)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = v15 + 40;
        do
        {
          uint64_t v30 = *(void (**)(uint64_t))(v29 - 8);
          swift_retain();
          v30(a1);
          swift_release();
          v29 += 16;
          --v28;
        }
        while (v28);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1000DBFC4()
{
  sub_10012A760();
  swift_retain();
  sub_1000053D8(&qword_1001704B8);
  sub_10012A850();
  swift_release();
  return v1;
}

void sub_1000DC060(uint64_t a1)
{
  sub_10012A6B0();
  sub_10000DB98();
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_100074220(v1 + 16, (uint64_t)v17);
  sub_100074220(v1 + 56, (uint64_t)v16);
  id v6 = objc_allocWithZone((Class)type metadata accessor for WeatherDataOperation(0));
  swift_retain();
  sub_100090C24();
  uint64_t v8 = v7;
  sub_100094FCC(a1, v9, v10, v11, v12, v13, v14, v15, v16[0], v16[1], v16[2], v16[3], v16[4], v17[0], v17[1], v17[2], v17[3], v17[4], v17[5],
    v17[6],
    v17[7],
    v17[8]);
}

uint64_t sub_1000DC168()
{
  sub_10000DB48(v0 + 16);
  sub_10000DB48(v0 + 56);
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1000DC1B0()
{
  sub_1000DC168();

  return _swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for WeatherDataService()
{
  return self;
}

uint64_t sub_1000DC208()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DC240()
{
  uint64_t v1 = sub_10012A6B0();
  sub_10000DB98();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 40) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_1000DC2EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10012A6B0() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000DBC04(a1, v4, v5, v6, v7);
}

uint64_t sub_1000DC364@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = sub_1000DC644(a1, a2);
  return swift_endAccess();
}

unint64_t sub_1000DC3D0(uint64_t a1, uint64_t a2)
{
  sub_10012D280();
  sub_10012CAC0();
  Swift::Int v4 = sub_10012D2A0();

  return sub_1000DC4B4(a1, a2, v4);
}

unint64_t sub_1000DC448(unsigned __int8 a1)
{
  sub_10012D280();
  sub_10012D290(a1);
  Swift::Int v2 = sub_10012D2A0();

  return sub_1000DC598(a1, v2);
}

unint64_t sub_1000DC4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_10012D1F0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_10012D1F0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000DC598(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000DC638@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000DC364(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1000DC644(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000DC3D0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  Swift::Int v10 = *(void *)(v9 + 24);
  sub_1000053D8(&qword_1001704C0);
  sub_10012D040(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v6);
  sub_1000053D8(&qword_1001704B0);
  sub_10012D050();
  *uint64_t v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000DC754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_1000DC844(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v9;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000DC7E4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DC81C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000DC844(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::Int v10 = (void *)*v4;
  unint64_t v11 = sub_1000DC3D0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1000053D8(&qword_1001704C0);
  if (!sub_10012D040(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000DC3D0(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = sub_10012D220();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  int v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_1000DC96C(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1000DC96C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_1000DC9BC(uint64_t a1, void (*a2)(void))
{
  return sub_1000DC9EC(a1, a2, (void (*)(void))&DailyForecastViewModel.low.getter);
}

uint64_t sub_1000DC9D4(uint64_t a1, void (*a2)(void))
{
  return sub_1000DC9EC(a1, a2, (void (*)(void))&DailyForecastViewModel.high.getter);
}

uint64_t sub_1000DC9EC(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  unint64_t v43 = a3;
  uint64_t v42 = sub_10012B940();
  sub_10000DB98();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_10000DBCC();
  uint64_t v8 = v7;
  uint64_t v9 = sub_1000053D8(&qword_10016C058);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10012CDD0();
  sub_10000DB98();
  uint64_t v14 = v13;
  uint64_t v16 = __chkstk_darwin(v15);
  unint64_t v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  int v20 = (char *)v37 - v19;
  sub_1000053D8(&qword_10016B060);
  sub_10000DB98();
  uint64_t v40 = v22;
  uint64_t v41 = v21;
  __chkstk_darwin(v21);
  sub_10000DBCC();
  v37[1] = v23;
  v43();
  uint64_t v39 = type metadata accessor for DailyViewAttributes();
  uint64_t v24 = *(int *)(v39 + 52);
  unint64_t v43 = a2;
  if (*((unsigned char *)a2 + v24) == 1) {
    sub_10012CC90();
  }
  else {
    sub_10012CCA0();
  }
  uint64_t v25 = sub_1001293A0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v11, 1, 1, v25);
  sub_10012B900();
  swift_bridgeObjectRelease();
  sub_10000B2A8((uint64_t)v11, &qword_10016C058);
  sub_10012CDC0();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v14 + 8);
  v38(v20, v12);
  uint64_t v26 = v42;
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v8, enum case for WeatherFormatPlaceholder.none(_:), v42);
  sub_10012A090();
  sub_10012A080();
  sub_10000B260(&qword_10016B068, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
  v37[0] = sub_100129020();
  uint64_t v28 = v27;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v26);
  v38(v18, v12);
  sub_10000B424();
  v29();
  uint64_t v44 = v37[0];
  uint64_t v45 = v28;
  sub_10000822C();
  uint64_t v30 = sub_10012B420();
  uint64_t v32 = v31;
  char v34 = v33 & 1;
  sub_10012B2A0();
  sub_10012B2C0();
  sub_10012B210();
  swift_release();
  uint64_t v35 = sub_10012B3F0();
  swift_release();
  sub_100008278(v30, v32, v34);
  swift_bridgeObjectRelease();
  return v35;
}

void *sub_1000DCDDC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10012C800();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for DailyViewAttributes();
    *(void *)((char *)a1 + v8[5]) = *(void *)((char *)a2 + v8[5]);
    *(_WORD *)((char *)a1 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
    *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
    *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
    *((unsigned char *)a1 + v8[12]) = *((unsigned char *)a2 + v8[12]);
    *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
    *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
    *((unsigned char *)a1 + v8[15]) = *((unsigned char *)a2 + v8[15]);
    *(void *)((char *)a1 + v8[16]) = *(void *)((char *)a2 + v8[16]);
    *(void *)((char *)a1 + v8[17]) = *(void *)((char *)a2 + v8[17]);
    *(void *)((char *)a1 + v8[18]) = *(void *)((char *)a2 + v8[18]);
    *(void *)((char *)a1 + v8[19]) = *(void *)((char *)a2 + v8[19]);
    *(void *)((char *)a1 + v8[20]) = *(void *)((char *)a2 + v8[20]);
    *(void *)((char *)a1 + v8[21]) = *(void *)((char *)a2 + v8[21]);
    uint64_t v9 = v8[22];
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000053D8(&qword_10016B060);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_1000053D8(&qword_10016B098);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v15 = v8[23];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)a2 + v15, 1, v12))
    {
      uint64_t v18 = sub_1000053D8(&qword_10016B098);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v16, v17, v12);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v16, 0, 1, v12);
    }
    uint64_t v19 = a3[5];
    int v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = sub_10012BDF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = a3[7];
    *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);
    uint64_t v24 = a3[8];
    uint64_t v25 = (void *)((char *)a1 + v24);
    uint64_t v26 = (void *)((char *)a2 + v24);
    sub_1000053D8(&qword_10016B088);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v27 = sub_10012C7F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    }
    else
    {
      *uint64_t v25 = *v26;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = a3[9];
    uint64_t v29 = (char *)a1 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = *(void *)v30;
    char v32 = v30[8];
    sub_10000886C(*(void *)v30, v32);
    *(void *)uint64_t v29 = v31;
    v29[8] = v32;
    uint64_t v33 = a3[10];
    char v34 = (void *)((char *)a1 + v33);
    uint64_t v35 = (void *)((char *)a2 + v33);
    sub_1000053D8(&qword_10016B080);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v36 = sub_10012AFD0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
    }
    else
    {
      *char v34 = *v35;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = a3[11];
    uint64_t v38 = (char *)a1 + v37;
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = sub_1000053D8(&qword_10016B090);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
  }
  return a1;
}

uint64_t sub_1000DD2D8(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for DailyViewAttributes();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + *(int *)(v5 + 88);
  uint64_t v7 = sub_1000053D8(&qword_10016B060);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = a1 + *(int *)(v5 + 92);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
  }
  uint64_t v9 = a1 + a2[5];
  uint64_t v10 = sub_10012BDF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = a1 + a2[8];
  sub_1000053D8(&qword_10016B088);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_10012C7F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  sub_100008BF8(*(void *)(a1 + a2[9]), *(unsigned char *)(a1 + a2[9] + 8));
  uint64_t v13 = a1 + a2[10];
  sub_1000053D8(&qword_10016B080);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_10012AFD0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = a1 + a2[11];
  uint64_t v16 = sub_1000053D8(&qword_10016B090);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);

  return v17(v15, v16);
}

uint64_t sub_1000DD5A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v7[23];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    uint64_t v16 = sub_1000053D8(&qword_10016B098);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = a3[5];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_10012BDF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  sub_1000053D8(&qword_10016B088);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = sub_10012C7F0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  }
  else
  {
    void *v23 = *v24;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v26 = a3[9];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)v28;
  char v30 = *(unsigned char *)(v28 + 8);
  sub_10000886C(*(void *)v28, v30);
  *(void *)uint64_t v27 = v29;
  *(unsigned char *)(v27 + 8) = v30;
  uint64_t v31 = a3[10];
  char v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  sub_1000053D8(&qword_10016B080);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v34 = sub_10012AFD0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  }
  else
  {
    *char v32 = *v33;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = a3[11];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  uint64_t v38 = sub_1000053D8(&qword_10016B090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
  return a1;
}

uint64_t sub_1000DDA50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = v7[6];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v11 = v7[22];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_1000053D8(&qword_10016B060);
  int v15 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)(v14 - 8);
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
LABEL_6:
    uint64_t v18 = sub_1000053D8(&qword_10016B098);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
LABEL_7:
  uint64_t v19 = v7[23];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  int v22 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v19, 1, v14);
  int v23 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v14);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v20, v21, v14);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v24 = *(void *)(v14 - 8);
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v20, v14);
LABEL_12:
    uint64_t v25 = sub_1000053D8(&qword_10016B098);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v24 + 24))(v20, v21, v14);
LABEL_13:
  uint64_t v26 = a3[5];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = sub_10012BDF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  if (a1 != a2)
  {
    uint64_t v30 = a3[8];
    uint64_t v31 = (void *)(a1 + v30);
    char v32 = (void *)(a2 + v30);
    sub_10000B2A8(a1 + v30, &qword_10016B088);
    sub_1000053D8(&qword_10016B088);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v33 = sub_10012C7F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
    }
    else
    {
      *uint64_t v31 = *v32;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v34 = a3[9];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = *(void *)v36;
  char v38 = *(unsigned char *)(v36 + 8);
  sub_10000886C(*(void *)v36, v38);
  uint64_t v39 = *(void *)v35;
  char v40 = *(unsigned char *)(v35 + 8);
  *(void *)uint64_t v35 = v37;
  *(unsigned char *)(v35 + 8) = v38;
  sub_100008BF8(v39, v40);
  if (a1 != a2)
  {
    uint64_t v41 = a3[10];
    uint64_t v42 = (void *)(a1 + v41);
    unint64_t v43 = (void *)(a2 + v41);
    sub_10000B2A8(a1 + v41, &qword_10016B080);
    sub_1000053D8(&qword_10016B080);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v44 = sub_10012AFD0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v44 - 8) + 16))(v42, v43, v44);
    }
    else
    {
      *uint64_t v42 = *v43;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v45 = a3[11];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = a2 + v45;
  uint64_t v48 = sub_1000053D8(&qword_10016B090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 24))(v46, v47, v48);
  return a1;
}

uint64_t sub_1000DE068(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = v7[23];
  uint64_t v14 = (void *)(a1 + v13);
  int v15 = (const void *)(a2 + v13);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a2 + v13, 1, v11))
  {
    uint64_t v16 = sub_1000053D8(&qword_10016B098);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v14, v15, v11);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v14, 0, 1, v11);
  }
  uint64_t v17 = a3[5];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_10012BDF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  uint64_t v21 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  uint64_t v22 = a3[8];
  int v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  uint64_t v25 = sub_1000053D8(&qword_10016B088);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = sub_10012C7F0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 32))(v23, v24, v26);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  uint64_t v27 = a3[9];
  uint64_t v28 = a3[10];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(void *)uint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  uint64_t v31 = (void *)(a1 + v28);
  char v32 = (const void *)(a2 + v28);
  uint64_t v33 = sub_1000053D8(&qword_10016B080);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v34 = sub_10012AFD0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 32))(v31, v32, v34);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  uint64_t v35 = a3[11];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  uint64_t v38 = sub_1000053D8(&qword_10016B090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
  return a1;
}

uint64_t sub_1000DE500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10012C800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for DailyViewAttributes();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(void *)(a1 + v7[16]) = *(void *)(a2 + v7[16]);
  *(void *)(a1 + v7[17]) = *(void *)(a2 + v7[17]);
  swift_release();
  *(void *)(a1 + v7[18]) = *(void *)(a2 + v7[18]);
  swift_release();
  *(void *)(a1 + v7[19]) = *(void *)(a2 + v7[19]);
  swift_release();
  *(void *)(a1 + v7[20]) = *(void *)(a2 + v7[20]);
  *(void *)(a1 + v7[21]) = *(void *)(a2 + v7[21]);
  uint64_t v8 = v7[22];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1000053D8(&qword_10016B060);
  int v12 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v11);
  int v13 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v14 = *(void *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_1000053D8(&qword_10016B098);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v16 = v7[23];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1 + v16, 1, v11);
  int v20 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v11);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v17, v18, v11);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v17, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v21 = *(void *)(v11 - 8);
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v17, v11);
LABEL_12:
    uint64_t v22 = sub_1000053D8(&qword_10016B098);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v21 + 40))(v17, v18, v11);
LABEL_13:
  uint64_t v23 = a3[5];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = sub_10012BDF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  uint64_t v27 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v27) = *(void *)(a2 + v27);
  if (a1 != a2)
  {
    uint64_t v28 = a3[8];
    uint64_t v29 = (void *)(a1 + v28);
    uint64_t v30 = (const void *)(a2 + v28);
    sub_10000B2A8(a1 + v28, &qword_10016B088);
    uint64_t v31 = sub_1000053D8(&qword_10016B088);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v32 = sub_10012C7F0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
  }
  uint64_t v33 = a3[9];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v36 = *v35;
  LOBYTE(v35) = *((unsigned char *)v35 + 8);
  uint64_t v37 = *(void *)v34;
  char v38 = *(unsigned char *)(v34 + 8);
  *(void *)uint64_t v34 = v36;
  *(unsigned char *)(v34 + 8) = (_BYTE)v35;
  sub_100008BF8(v37, v38);
  if (a1 != a2)
  {
    uint64_t v39 = a3[10];
    char v40 = (void *)(a1 + v39);
    uint64_t v41 = (const void *)(a2 + v39);
    sub_10000B2A8(a1 + v39, &qword_10016B080);
    uint64_t v42 = sub_1000053D8(&qword_10016B080);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v43 = sub_10012AFD0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v43 - 8) + 32))(v40, v41, v43);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
  }
  uint64_t v44 = a3[11];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  uint64_t v47 = sub_1000053D8(&qword_10016B090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 40))(v45, v46, v47);
  return a1;
}

uint64_t sub_1000DEAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DEB0C);
}

uint64_t sub_1000DEB0C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for DailyViewAttributes();
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    sub_10012BDF0();
    sub_10000B3D0();
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v8 = v10;
      uint64_t v12 = a3[5];
    }
    else
    {
      sub_1000053D8(&qword_10016B0B0);
      sub_10000B3D0();
      if (*(_DWORD *)(v14 + 84) == a2)
      {
        uint64_t v8 = v13;
        uint64_t v12 = a3[8];
      }
      else
      {
        if (a2 == 254)
        {
          unsigned int v15 = *(unsigned __int8 *)(a1 + a3[9] + 8);
          if (v15 > 1) {
            return (v15 ^ 0xFF) + 1;
          }
          else {
            return 0;
          }
        }
        sub_1000053D8(&qword_10016B0A8);
        sub_10000B3D0();
        if (*(_DWORD *)(v18 + 84) == a2)
        {
          uint64_t v8 = v17;
          uint64_t v12 = a3[10];
        }
        else
        {
          uint64_t v8 = sub_1000053D8(&qword_10016B090);
          uint64_t v12 = a3[11];
        }
      }
    }
    uint64_t v9 = a1 + v12;
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
}

uint64_t sub_1000DEC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DEC44);
}

void sub_1000DEC44(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for DailyViewAttributes();
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_10012BDF0();
    sub_10000B3D0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[5];
    }
    else
    {
      sub_1000053D8(&qword_10016B0B0);
      sub_10000B3D0();
      if (*(_DWORD *)(v16 + 84) == a3)
      {
        uint64_t v10 = v15;
        uint64_t v14 = a4[8];
      }
      else
      {
        if (a3 == 254)
        {
          *(unsigned char *)(a1 + a4[9] + 8) = -(char)a2;
          return;
        }
        sub_1000053D8(&qword_10016B0A8);
        sub_10000B3D0();
        if (*(_DWORD *)(v18 + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = a4[10];
        }
        else
        {
          uint64_t v10 = sub_1000053D8(&qword_10016B090);
          uint64_t v14 = a4[11];
        }
      }
    }
    uint64_t v11 = a1 + v14;
  }

  _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t type metadata accessor for DailyTemperatureForecastRowView()
{
  uint64_t result = qword_100170520;
  if (!qword_100170520) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000DEDB0()
{
  type metadata accessor for DailyViewAttributes();
  if (v0 <= 0x3F)
  {
    sub_10012BDF0();
    if (v1 <= 0x3F)
    {
      sub_1000DEF7C(319, &qword_10016B130, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
      if (v2 <= 0x3F)
      {
        sub_1000DEF7C(319, (unint64_t *)&qword_10016B128, (void (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
        if (v3 <= 0x3F)
        {
          sub_10000AAC0();
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_1000DEF7C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_10012AB90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000DEFD0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1000DEFEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10012C7F0();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v30 = (uint64_t)&v30 - v5;
  uint64_t v6 = sub_10012AFD0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for DailyTemperatureForecastRowView();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v0 + *(int *)(v14 + 36);
  uint64_t v18 = *(void *)v17;
  char v19 = *(unsigned char *)(v17 + 8);
  sub_10000886C(*(void *)v17, v19);
  char v20 = sub_10008F2A4(v18, v19);
  sub_100008BF8(v18, v19);
  sub_1000E1B6C(v1, (uint64_t)v16, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
  if (v20)
  {
    sub_1000E1BC0((uint64_t)v16, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
    return 1.0;
  }
  else
  {
    sub_10008F524((uint64_t)v12);
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for ColorSchemeContrast.increased(_:), v6);
    char v22 = sub_10012AFC0();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    v23(v10, v6);
    v23(v12, v6);
    sub_1000E1BC0((uint64_t)v16, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
    double result = 1.0;
    if ((v22 & 1) == 0)
    {
      uint64_t v24 = v30;
      sub_10008F028(v30);
      uint64_t v25 = v31;
      sub_10012C7D0();
      char v26 = sub_10012C7B0();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v32 + 8);
      uint64_t v28 = v25;
      uint64_t v29 = v33;
      v27(v28, v33);
      v27((char *)v24, v29);
      double result = 0.27;
      if (v26) {
        return 0.7;
      }
    }
  }
  return result;
}

uint64_t sub_1000DF348@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3 = type metadata accessor for DailyTemperatureForecastRowView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  sub_1000E1B6C(v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_1000E19B0((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  *a1 = sub_1000E1A14;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v7;
  return result;
}

uint64_t sub_1000DF450@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v20 = sub_10012B120();
  uint64_t v3 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000053D8(&qword_100170570);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1000053D8(&qword_100170578);
  uint64_t v9 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000053D8(&qword_100170580);
  __chkstk_darwin(v21);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = sub_10012AF10();
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  uint64_t v14 = sub_1000053D8(&qword_100170588);
  sub_1000DF778(a1, (uint64_t *)&v8[*(int *)(v14 + 44)]);
  sub_10012B0F0();
  uint64_t v15 = sub_10000B38C(&qword_100170590, &qword_100170570);
  sub_10012B520();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
  sub_10000B2A8((uint64_t)v8, &qword_100170570);
  type metadata accessor for DailyTemperatureForecastRowView();
  uint64_t v25 = sub_10012BD20();
  uint64_t v26 = v16;
  uint64_t v23 = v6;
  uint64_t v24 = v15;
  swift_getOpaqueTypeConformance2();
  sub_10000822C();
  uint64_t v17 = v19;
  sub_10012B4E0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v17);
  sub_10012AC80();
  return sub_10000B2A8((uint64_t)v13, &qword_100170580);
}

uint64_t sub_1000DF778@<X0>(void (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v75 = a1;
  uint64_t v104 = a2;
  uint64_t v3 = sub_1000053D8(&qword_100170598);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v103 = (uint64_t)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v102 = (uint64_t *)((char *)&v74 - v6);
  uint64_t v101 = sub_10012AFD0();
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v98 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10012BBA0();
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v87 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_1000053D8(&qword_1001705A0);
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v88 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_1000053D8(&qword_1001705A8) - 8;
  __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_1000053D8(&qword_1001705B0) - 8;
  __chkstk_darwin(v94);
  uint64_t v93 = (uint64_t)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_1000053D8(&qword_1001705B8) - 8;
  uint64_t v12 = __chkstk_darwin(v99);
  uint64_t v95 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v105 = (uint64_t)&v74 - v14;
  uint64_t v76 = (uint64_t)a1 + *(int *)(type metadata accessor for DailyTemperatureForecastRowView() + 20);
  *(void *)&long long v113 = sub_10012BCE0();
  *((void *)&v113 + 1) = v15;
  sub_10000822C();
  uint64_t v16 = sub_10012B420();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  sub_10012B5C0();
  uint64_t v21 = sub_10012B3A0();
  uint64_t v23 = v22;
  char v25 = v24;
  swift_release();
  sub_100008278(v16, v18, v20);
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for DailyViewAttributes();
  uint64_t v27 = v75;
  uint64_t v28 = sub_10012B3F0();
  uint64_t v30 = v29;
  char v32 = v31 & 1;
  sub_100008278(v21, v23, v25 & 1);
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_10012B3B0();
  uint64_t v35 = v34;
  char v37 = v36 & 1;
  sub_100008278(v28, v30, v32);
  swift_bridgeObjectRelease();
  uint64_t v38 = v26;
  uint64_t v39 = v27;
  uint64_t v84 = sub_10012B350();
  uint64_t v85 = v40;
  uint64_t v86 = v41;
  int v77 = v42 & 1;
  sub_100008278(v33, v35, v37);
  swift_bridgeObjectRelease();
  sub_10012B7B0();
  sub_10012ABC0();
  uint64_t v83 = v107;
  int v82 = v108;
  uint64_t v81 = v109;
  int v80 = v110;
  uint64_t v79 = v111;
  uint64_t v78 = v112;
  uint64_t v43 = v87;
  sub_10012BDC0();
  sub_10012BB60();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v43, v92);
  uint64_t v44 = v88;
  sub_10012BF70();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v46 = v100;
  uint64_t v47 = v98;
  uint64_t v48 = v101;
  (*(void (**)(char *, void, uint64_t))(v100 + 104))(v98, enum case for ColorSchemeContrast.standard(_:), v101);
  uint64_t v49 = (uint64_t)v89;
  int v50 = (uint64_t *)&v89[*(int *)(v90 + 44)];
  uint64_t v51 = sub_1000053D8(&qword_10016DD78);
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))((char *)v50 + *(int *)(v51 + 28), v47, v48);
  uint64_t *v50 = KeyPath;
  uint64_t v52 = v96;
  uint64_t v53 = v97;
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 16))(v49, v44, v97);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v44, v53);
  uint64_t v54 = *(void *)((char *)v39 + *(int *)(v38 + 72));
  uint64_t v55 = swift_getKeyPath();
  uint64_t v56 = v93;
  sub_10000B114(v49, v93, &qword_1001705A8);
  uint64_t v57 = (uint64_t *)(v56 + *(int *)(v94 + 44));
  *uint64_t v57 = v55;
  v57[1] = v54;
  swift_retain();
  sub_10000B2A8(v49, &qword_1001705A8);
  sub_10012B7A0();
  sub_10012ABC0();
  uint64_t v58 = v95;
  sub_10000B114(v56, v95, &qword_1001705B0);
  uint64_t v59 = (_OWORD *)(v58 + *(int *)(v99 + 44));
  long long v60 = v114;
  *uint64_t v59 = v113;
  v59[1] = v60;
  v59[2] = v115;
  sub_10000B2A8(v56, &qword_1001705B0);
  uint64_t v61 = v105;
  sub_10000B2F4(v58, v105, &qword_1001705B8);
  uint64_t v62 = sub_10012AF10();
  uint64_t v63 = (uint64_t)v102;
  *uint64_t v102 = v62;
  *(void *)(v63 + 8) = 0;
  *(unsigned char *)(v63 + 16) = 1;
  uint64_t v64 = sub_1000053D8(&qword_1001705C0);
  sub_1000E020C(v39, v63 + *(int *)(v64 + 44));
  LOBYTE(v54) = v77;
  char v106 = v77;
  sub_10000B114(v61, v58, &qword_1001705B8);
  uint64_t v65 = v103;
  sub_10000B114(v63, v103, &qword_100170598);
  uint64_t v66 = v104;
  uint64_t v67 = v84;
  uint64_t v68 = v85;
  *uint64_t v104 = v84;
  v66[1] = v68;
  *((unsigned char *)v66 + 16) = v54;
  LOBYTE(v61) = v54;
  v66[3] = v86;
  *((_WORD *)v66 + 16) = 257;
  v66[5] = v83;
  *((unsigned char *)v66 + 48) = v82;
  v66[7] = v81;
  *((unsigned char *)v66 + 64) = v80;
  uint64_t v69 = v78;
  v66[9] = v79;
  v66[10] = v69;
  v66[11] = 0;
  *((unsigned char *)v66 + 96) = 1;
  uint64_t v70 = v66;
  uint64_t v71 = (int *)sub_1000053D8(&qword_1001705C8);
  sub_10000B114(v58, (uint64_t)v70 + v71[16], &qword_1001705B8);
  uint64_t v72 = (uint64_t)v70 + v71[20];
  *(void *)uint64_t v72 = 0;
  *(unsigned char *)(v72 + 8) = 1;
  sub_10000B114(v65, (uint64_t)v70 + v71[24], &qword_100170598);
  sub_10000B0B0(v67, v68, v61);
  swift_bridgeObjectRetain();
  sub_10000B0B0(v67, v68, v61);
  swift_bridgeObjectRetain();
  sub_10000B2A8(v63, &qword_100170598);
  sub_10000B2A8(v105, &qword_1001705B8);
  sub_100008278(v67, v68, v61);
  swift_bridgeObjectRelease();
  sub_10000B2A8(v65, &qword_100170598);
  sub_10000B2A8(v58, &qword_1001705B8);
  sub_100008278(v67, v68, v106);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E014C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1000053D8(&qword_100170618);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012B640();
  uint64_t v5 = sub_10012B650();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v4, 0, 1, v5);
  uint64_t v6 = sub_10012B630();
  uint64_t result = sub_10000B2A8((uint64_t)v4, &qword_100170618);
  *a1 = v6;
  return result;
}

uint64_t sub_1000E020C@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v216 = a2;
  uint64_t v3 = sub_10012A510();
  __chkstk_darwin(v3 - 8);
  v209 = &v171[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10012A530();
  uint64_t v207 = *(void *)(v5 - 8);
  uint64_t v208 = v5;
  __chkstk_darwin(v5);
  uint64_t v206 = &v171[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v223 = type metadata accessor for DailyTemperatureForecastRowView();
  uint64_t v7 = __chkstk_darwin(v223);
  uint64_t v9 = &v171[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v171[-v10];
  uint64_t v12 = sub_1000053D8(&qword_10016B098);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v210 = &v171[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v16 = &v171[-v15];
  uint64_t v220 = sub_1000053D8(&qword_10016B060);
  uint64_t v218 = *(void *)(v220 - 8);
  uint64_t v17 = __chkstk_darwin(v220);
  uint64_t v196 = &v171[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v194 = &v171[-v20];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v180 = &v171[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v193 = &v171[-v24];
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v213 = &v171[-v26];
  __chkstk_darwin(v25);
  v179 = &v171[-v27];
  uint64_t v28 = sub_10012B920();
  uint64_t v204 = *(void *)(v28 - 8);
  uint64_t v205 = v28;
  __chkstk_darwin(v28);
  uint64_t v203 = &v171[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v199 = sub_1000053D8(&qword_10016B218);
  __chkstk_darwin(v199);
  uint64_t v201 = &v171[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v202 = sub_1000053D8(&qword_1001705D0);
  __chkstk_darwin(v202);
  uint64_t v200 = &v171[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v214 = sub_1000053D8(&qword_1001705D8);
  uint64_t v32 = __chkstk_darwin(v214);
  v198 = &v171[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v32);
  uint64_t v197 = &v171[-v34];
  uint64_t v35 = sub_1000053D8(&qword_1001705E0);
  uint64_t v36 = __chkstk_darwin(v35 - 8);
  uint64_t v215 = &v171[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v36);
  v222 = &v171[-v38];
  uint64_t v39 = sub_10012ACA0();
  __chkstk_darwin(v39 - 8);
  uint64_t v41 = &v171[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v42 = sub_10012C7F0();
  uint64_t v212 = *(void *)(v42 - 8);
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v211 = &v171[-((v44 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v43);
  uint64_t v46 = &v171[-v45];
  uint64_t v187 = sub_10012B7D0();
  uint64_t v184 = *(void *)(v187 - 8);
  __chkstk_darwin(v187);
  uint64_t v183 = &v171[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v181 = sub_1000053D8(&qword_10016B230);
  __chkstk_darwin(v181);
  uint64_t v49 = &v171[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v182 = sub_1000053D8(&qword_10016B238);
  __chkstk_darwin(v182);
  uint64_t v188 = &v171[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v186 = sub_1000053D8(&qword_10016B240);
  uint64_t v51 = __chkstk_darwin(v186);
  uint64_t v190 = &v171[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v185 = &v171[-v54];
  __chkstk_darwin(v53);
  v189 = &v171[-v55];
  uint64_t v56 = sub_1000053D8(&qword_1001705E8);
  uint64_t v57 = __chkstk_darwin(v56 - 8);
  v221 = &v171[-((v58 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v57);
  long long v60 = &v171[-v59];
  v217 = (int *)type metadata accessor for DailyViewAttributes();
  uint64_t v61 = v217[9];
  v224 = a1;
  LODWORD(v61) = *((unsigned __int8 *)a1 + v61);
  uint64_t v219 = v60;
  uint64_t v195 = v9;
  uint64_t v191 = v46;
  uint64_t v192 = v42;
  if (v61 == 1)
  {
    uint64_t v62 = sub_1000DC9EC((uint64_t)v224 + *(int *)(v223 + 20), v224, (void (*)(void))&DailyForecastViewModel.low.getter);
    uint64_t v64 = v63;
    id v173 = v41;
    v178 = v11;
    uint64_t v65 = v42;
    char v67 = v66 & 1;
    sub_10012B5C0();
    char v177 = v16;
    uint64_t v68 = sub_10012B3A0();
    uint64_t v174 = v69;
    uint64_t v175 = v68;
    char v71 = v70;
    uint64_t v176 = v72;
    swift_release();
    int v73 = v71 & 1;
    sub_100008278(v62, v64, v67);
    swift_bridgeObjectRelease();
    sub_10008F028((uint64_t)v46);
    uint64_t v74 = v211;
    sub_10012C7D0();
    LOBYTE(v62) = sub_10012C7B0();
    uint64_t v75 = *(void (**)(unsigned char *, uint64_t))(v212 + 8);
    v75(v74, v65);
    v75(v46, v65);
    int v77 = v183;
    uint64_t v76 = v184;
    uint64_t v78 = (unsigned int *)&enum case for BlendMode.normal(_:);
    if ((v62 & 1) == 0) {
      uint64_t v78 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
    }
    uint64_t v79 = v187;
    (*(void (**)(unsigned char *, void, uint64_t))(v184 + 104))(v183, *v78, v187);
    uint64_t v80 = (uint64_t)v173;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v76 + 16))(v173, v77, v79);
    sub_1000E1B6C(v80, (uint64_t)&v49[*(int *)(v181 + 36)], (void (*)(void))&type metadata accessor for _BlendModeEffect);
    uint64_t v82 = v174;
    uint64_t v81 = v175;
    *(void *)uint64_t v49 = v175;
    *((void *)v49 + 1) = v82;
    char v83 = v73;
    int v172 = v73;
    v49[16] = v73;
    *((void *)v49 + 3) = v176;
    uint64_t v84 = v81;
    sub_10000B0B0(v81, v82, v83);
    swift_bridgeObjectRetain();
    sub_1000E1BC0(v80, (void (*)(void))&type metadata accessor for _BlendModeEffect);
    (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v77, v79);
    sub_100008278(v84, v82, v172);
    swift_bridgeObjectRelease();
    double v85 = sub_1000DEFEC();
    uint64_t v86 = v188;
    sub_10000B114((uint64_t)v49, (uint64_t)v188, &qword_10016B230);
    *(double *)&v86[*(int *)(v182 + 36)] = v85;
    sub_10000B2A8((uint64_t)v49, &qword_10016B230);
    sub_10012B7C0();
    sub_10012ABC0();
    uint64_t v87 = v185;
    sub_10000B114((uint64_t)v86, (uint64_t)v185, &qword_10016B238);
    uint64_t v88 = &v87[*(int *)(v186 + 36)];
    long long v89 = v226;
    *uint64_t v88 = v225;
    v88[1] = v89;
    v88[2] = v227;
    sub_10000B2A8((uint64_t)v86, &qword_10016B238);
    uint64_t v90 = v189;
    sub_10000B2F4((uint64_t)v87, (uint64_t)v189, &qword_10016B240);
    sub_10012B7A0();
    sub_10012ABC0();
    uint64_t v91 = v228;
    char v92 = v229;
    uint64_t v93 = v230;
    char v94 = v231;
    uint64_t v95 = v232;
    uint64_t v96 = v233;
    uint64_t v97 = v190;
    sub_10000B114((uint64_t)v90, (uint64_t)v190, &qword_10016B240);
    sub_10000B114((uint64_t)v97, (uint64_t)v221, &qword_10016B240);
    uint64_t v98 = sub_1000053D8(&qword_100170610);
    uint64_t v99 = &v221[*(int *)(v98 + 48)];
    *(void *)uint64_t v99 = 0;
    v99[8] = 1;
    *((void *)v99 + 2) = v91;
    v99[24] = v92;
    *((void *)v99 + 4) = v93;
    v99[40] = v94;
    *((void *)v99 + 6) = v95;
    *((void *)v99 + 7) = v96;
    uint64_t v16 = v177;
    uint64_t v11 = v178;
    sub_10000B2A8((uint64_t)v90, &qword_10016B240);
    uint64_t v100 = v221;
    sub_10000B2A8((uint64_t)v97, &qword_10016B240);
    uint64_t v101 = sub_1000053D8(&qword_1001705F0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v100, 0, 1, v101);
    sub_10000B2F4((uint64_t)v100, (uint64_t)v219, &qword_1001705E8);
  }
  else
  {
    uint64_t v102 = sub_1000053D8(&qword_1001705F0);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v60, 1, 1, v102);
  }
  uint64_t v103 = v217;
  uint64_t v104 = 1;
  if (*((unsigned char *)v224 + v217[10]) == 1)
  {
    sub_10000B114((uint64_t)v224 + v217[22], (uint64_t)v16, &qword_10016B098);
    int v105 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v220);
    if (v105 == 1)
    {
      sub_10000B2A8((uint64_t)v16, &qword_10016B098);
    }
    else
    {
      char v106 = v179;
      sub_100129040();
      uint64_t v107 = v220;
      unsigned __int8 v108 = v16;
      uint64_t v109 = *(void (**)(unsigned char *, uint64_t))(v218 + 8);
      v109(v108, v220);
      sub_100129000();
      unsigned __int8 v110 = v106;
      uint64_t v103 = v217;
      v109(v110, v107);
    }
    uint64_t v111 = (uint64_t)v210;
    sub_1000E1B6C((uint64_t)v224, (uint64_t)v11, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
    if (v105 == 1)
    {
      uint64_t v112 = v193;
      sub_10012BD90();
      long long v113 = v213;
      sub_100129040();
      long long v114 = *(void (**)(unsigned char *, uint64_t))(v218 + 8);
      long long v115 = v112;
      uint64_t v116 = v220;
      v114(v115, v220);
      sub_100129000();
      uint64_t v111 = (uint64_t)v210;
      v114(v113, v116);
    }
    sub_1000E1BC0((uint64_t)v11, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
    sub_10000B114((uint64_t)v224 + v103[23], v111, &qword_10016B098);
    int v117 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v111, 1, v220);
    if (v117 == 1)
    {
      sub_10000B2A8(v111, &qword_10016B098);
    }
    else
    {
      uint64_t v118 = v180;
      sub_100129040();
      uint64_t v119 = v220;
      uint64_t v120 = *(void (**)(uint64_t, uint64_t))(v218 + 8);
      v120(v111, v220);
      sub_100129000();
      v120((uint64_t)v118, v119);
    }
    uint64_t v121 = (uint64_t)v195;
    sub_1000E1B6C((uint64_t)v224, (uint64_t)v195, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
    if (v117 == 1)
    {
      uint64_t v122 = v193;
      sub_10012BD70();
      uint64_t v123 = v213;
      sub_100129040();
      uint64_t v124 = *(void (**)(unsigned char *, uint64_t))(v218 + 8);
      uint64_t v125 = v220;
      v124(v122, v220);
      sub_100129000();
      v124(v123, v125);
    }
    sub_1000E1BC0(v121, (void (*)(void))type metadata accessor for DailyTemperatureForecastRowView);
    uint64_t v126 = v213;
    sub_10012BD90();
    uint64_t v127 = v194;
    sub_100129040();
    uint64_t v128 = *(void (**)(unsigned char *, uint64_t))(v218 + 8);
    uint64_t v129 = v220;
    v128(v126, v220);
    sub_100129000();
    v128(v127, v129);
    sub_10012BD70();
    uint64_t v130 = v196;
    sub_100129040();
    v128(v126, v129);
    sub_100129000();
    v128(v130, v129);
    uint64_t v131 = (uint64_t)v191;
    sub_10008F028((uint64_t)v191);
    uint64_t v132 = v211;
    sub_10012C7C0();
    sub_10012C7B0();
    uint64_t v133 = *(void (**)(unsigned char *, uint64_t))(v212 + 8);
    uint64_t v134 = v132;
    uint64_t v135 = v192;
    v133(v134, v192);
    v133((unsigned char *)v131, v135);
    uint64_t v136 = v206;
    sub_10012BD10();
    sub_10012A520();
    (*(void (**)(unsigned char *, uint64_t))(v207 + 8))(v136, v208);
    sub_10012B750();
    uint64_t v137 = v203;
    sub_10012B910();
    sub_1000053D8(&qword_10016B090);
    sub_10012BA70();
    sub_10012B7A0();
    sub_10012ABC0();
    uint64_t v139 = v204;
    uint64_t v138 = v205;
    uint64_t v140 = (uint64_t)v201;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v204 + 16))(v201, v137, v205);
    v141 = (_OWORD *)(v140 + *(int *)(v199 + 36));
    long long v142 = v235;
    _OWORD *v141 = v234;
    v141[1] = v142;
    v141[2] = v236;
    (*(void (**)(unsigned char *, uint64_t))(v139 + 8))(v137, v138);
    uint64_t v143 = v200;
    sub_10000B114(v140, (uint64_t)v200, &qword_10016B218);
    v143[*(int *)(v202 + 36)] = 1;
    sub_10000B2A8(v140, &qword_10016B218);
    sub_1000E1AA4();
    uint64_t v144 = v198;
    sub_10012B500();
    sub_10000B2A8((uint64_t)v143, &qword_1001705D0);
    uint64_t v145 = (uint64_t)v144;
    uint64_t v146 = v197;
    sub_10000B2F4(v145, (uint64_t)v197, &qword_1001705D8);
    sub_10000B2F4((uint64_t)v146, (uint64_t)v222, &qword_1001705D8);
    uint64_t v104 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v222, v104, 1, v214);
  sub_10012B7A0();
  sub_10012ABC0();
  uint64_t v220 = v237;
  LODWORD(v218) = v238;
  v217 = v239;
  LODWORD(v214) = v240;
  uint64_t v212 = v242;
  uint64_t v213 = v241;
  uint64_t v147 = sub_1000DC9EC((uint64_t)v224 + *(int *)(v223 + 20), v224, (void (*)(void))&DailyForecastViewModel.high.getter);
  uint64_t v149 = v148;
  char v151 = v150 & 1;
  sub_10012B5C0();
  v210 = (unsigned char *)sub_10012B3A0();
  uint64_t v211 = v152;
  uint64_t v154 = v153;
  char v156 = v155;
  swift_release();
  sub_100008278(v147, v149, v151);
  swift_bridgeObjectRelease();
  sub_10012B7C0();
  sub_10012ABC0();
  v224 = v243;
  LODWORD(v223) = v244;
  v209 = v245;
  LODWORD(v208) = v246;
  uint64_t v206 = v248;
  uint64_t v207 = v247;
  uint64_t v157 = (uint64_t)v219;
  uint64_t v158 = v221;
  sub_10000B114((uint64_t)v219, (uint64_t)v221, &qword_1001705E8);
  uint64_t v159 = v222;
  uint64_t v160 = v215;
  sub_10000B114((uint64_t)v222, (uint64_t)v215, &qword_1001705E0);
  uint64_t v161 = v216;
  sub_10000B114((uint64_t)v158, v216, &qword_1001705E8);
  v162 = (int *)sub_1000053D8(&qword_1001705F8);
  sub_10000B114((uint64_t)v160, v161 + v162[12], &qword_1001705E0);
  uint64_t v163 = v161 + v162[16];
  *(void *)uint64_t v163 = 0;
  *(unsigned char *)(v163 + 8) = 1;
  *(void *)(v163 + 16) = v220;
  *(unsigned char *)(v163 + 24) = v218;
  *(void *)(v163 + 32) = v217;
  *(unsigned char *)(v163 + 40) = v214;
  uint64_t v164 = v212;
  *(void *)(v163 + 48) = v213;
  *(void *)(v163 + 56) = v164;
  uint64_t v165 = v161 + v162[20];
  uint64_t v167 = (uint64_t)v210;
  uint64_t v166 = v211;
  *(void *)uint64_t v165 = v210;
  *(void *)(v165 + 8) = v154;
  *(unsigned char *)(v165 + 16) = v156 & 1;
  v168 = v224;
  *(void *)(v165 + 24) = v166;
  *(void *)(v165 + 32) = v168;
  *(unsigned char *)(v165 + 40) = v223;
  *(void *)(v165 + 48) = v209;
  *(unsigned char *)(v165 + 56) = v208;
  v169 = v206;
  *(void *)(v165 + 64) = v207;
  *(void *)(v165 + 72) = v169;
  sub_10000B0B0(v167, v154, v156 & 1);
  swift_bridgeObjectRetain();
  sub_10000B2A8((uint64_t)v159, &qword_1001705E0);
  sub_10000B2A8(v157, &qword_1001705E8);
  sub_100008278(v167, v154, v156 & 1);
  swift_bridgeObjectRelease();
  sub_10000B2A8((uint64_t)v160, &qword_1001705E0);
  return sub_10000B2A8((uint64_t)v158, &qword_1001705E8);
}

uint64_t sub_1000E16B4()
{
  uint64_t v1 = type metadata accessor for DailyTemperatureForecastRowView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  sub_10012C800();
  sub_10000B3E8();
  sub_10000B424();
  v6();
  uint64_t v7 = type metadata accessor for DailyViewAttributes();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = v0 + v3 + *(int *)(v7 + 88);
  uint64_t v9 = sub_1000053D8(&qword_10016B060);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = v5 + *(int *)(v7 + 92);
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v10, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v10, v9);
  }
  sub_10012BDF0();
  sub_10000B3E8();
  sub_10000B424();
  v11();
  sub_1000053D8(&qword_10016B088);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10012C7F0();
    sub_10000B3E8();
    sub_10000B424();
    v12();
  }
  else
  {
    swift_release();
  }
  sub_100008BF8(*(void *)(v5 + *(int *)(v1 + 36)), *(unsigned char *)(v5 + *(int *)(v1 + 36) + 8));
  sub_1000053D8(&qword_10016B080);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10012AFD0();
    sub_10000B3E8();
    sub_10000B424();
    v13();
  }
  else
  {
    swift_release();
  }
  sub_1000053D8(&qword_10016B090);
  sub_10000B3E8();
  sub_10000B424();
  v14();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000E19B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DailyTemperatureForecastRowView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E1A14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for DailyTemperatureForecastRowView() - 8);
  uint64_t v4 = (void (*)(void))(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));

  return sub_1000DF450(v4, a1);
}

unint64_t sub_1000E1AA4()
{
  unint64_t result = qword_100170600;
  if (!qword_100170600)
  {
    sub_100005470(&qword_1001705D0);
    sub_10000B1B4();
    sub_1000E1B20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170600);
  }
  return result;
}

unint64_t sub_1000E1B20()
{
  unint64_t result = qword_100170608;
  if (!qword_100170608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170608);
  }
  return result;
}

uint64_t sub_1000E1B6C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  uint64_t v4 = sub_10000B430();
  v5(v4);
  return a2;
}

uint64_t sub_1000E1BC0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3E8();
  sub_10000B424();
  v3();
  return a1;
}

uint64_t sub_1000E1C10()
{
  return sub_10000B38C(&qword_100170620, &qword_100170628);
}

uint64_t sub_1000E1C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E1C60);
}

uint64_t sub_1000E1C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for ForecastEntry(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
}

uint64_t sub_1000E1CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E1CF4);
}

uint64_t sub_1000E1CF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for ForecastEntry(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t type metadata accessor for LocationContentView()
{
  uint64_t result = qword_100170688;
  if (!qword_100170688) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E1DC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E1DE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E1DE8(v1, a1);
}

uint64_t sub_1000E1DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v41 = sub_1000053D8(&qword_1001706C0);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_1000053D8(&qword_1001706C8);
  __chkstk_darwin(v38);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_1000053D8(&qword_1001706D0);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10012C460();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10012BFC0();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LocationContentView();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v35 = (uint64_t)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v34 = (uint64_t)&v32 - v18;
  __chkstk_darwin(v17);
  uint64_t v33 = (uint64_t)&v32 - v19;
  uint64_t v20 = sub_10012C800();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v36 = (uint64_t)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v32 - v24;
  sub_10008F554((uint64_t)&v32 - v24);
  uint64_t v37 = v21;
  int v26 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v25, v20);
  if (v26 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_1000E25D0(a1, v33);
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    sub_10012CFD0(61);
    v46._countAndFlagsBits = 0xD000000000000021;
    v46._object = (void *)0x8000000100138E70;
    sub_10012CAF0(v46);
    uint64_t v29 = v36;
    sub_10008F554(v36);
    sub_1000E2634(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
    v47._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v47);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v29, v20);
    v48._object = (void *)0x800000010013C1C0;
    v48._countAndFlagsBits = 0xD00000000000001ALL;
    sub_10012CAF0(v48);
  }
  else if (v26 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_1000E25D0(a1, v34);
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    sub_10012CFD0(61);
    v49._countAndFlagsBits = 0xD000000000000021;
    v49._object = (void *)0x8000000100138E70;
    sub_10012CAF0(v49);
    uint64_t v30 = v36;
    sub_10008F554(v36);
    sub_1000E2634(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
    v50._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v50);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v30, v20);
    v51._object = (void *)0x800000010013C1C0;
    v51._countAndFlagsBits = 0xD00000000000001ALL;
    sub_10012CAF0(v51);
  }
  else
  {
    if (v26 == enum case for WidgetFamily.accessoryInline(_:))
    {
      sub_100047488((uint64_t)v9);
      sub_10012BFB0();
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v5, v13, v10);
      swift_storeEnumTagMultiPayload();
      sub_1000E2634(&qword_1001706D8, (void (*)(uint64_t))&type metadata accessor for LocationInlineContentView);
      uint64_t v27 = (uint64_t)v39;
      sub_10012B0E0();
      sub_1000E267C(v27, v42);
      swift_storeEnumTagMultiPayload();
      sub_1000053D8(&qword_1001706E0);
      sub_1000E26E4();
      sub_1000E2750();
      sub_10012B0E0();
      sub_100016D10(v27, &qword_1001706D0);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    sub_1000E25D0(a1, v35);
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    sub_10012CFD0(64);
    v52._countAndFlagsBits = 0xD000000000000022;
    v52._object = (void *)0x8000000100138E20;
    sub_10012CAF0(v52);
    uint64_t v31 = v36;
    sub_10008F554(v36);
    sub_1000E2634(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
    v53._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v53);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v31, v20);
    v54._countAndFlagsBits = 0xD00000000000001CLL;
    v54._object = (void *)0x8000000100138F30;
    sub_10012CAF0(v54);
  }
  uint64_t result = sub_10012D070();
  __break(1u);
  return result;
}

uint64_t sub_1000E25D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationContentView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2634(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E267C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_1001706D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E26E4()
{
  unint64_t result = qword_1001706E8;
  if (!qword_1001706E8)
  {
    sub_100005470(&qword_1001706E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001706E8);
  }
  return result;
}

unint64_t sub_1000E2750()
{
  unint64_t result = qword_1001706F0;
  if (!qword_1001706F0)
  {
    sub_100005470(&qword_1001706D0);
    sub_1000E2634(&qword_1001706D8, (void (*)(uint64_t))&type metadata accessor for LocationInlineContentView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001706F0);
  }
  return result;
}

unint64_t sub_1000E2800()
{
  unint64_t result = qword_1001706F8;
  if (!qword_1001706F8)
  {
    sub_100005470(&qword_100170700);
    sub_1000E2874();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001706F8);
  }
  return result;
}

unint64_t sub_1000E2874()
{
  unint64_t result = qword_100170708;
  if (!qword_100170708)
  {
    sub_100005470(&qword_100170710);
    sub_1000E26E4();
    sub_1000E2750();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170708);
  }
  return result;
}

uint64_t assignWithCopy for AdaptiveConditionsComplicationDataStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  int v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v6);
  int v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, (uint64_t)v6);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = sub_100129330();
      uint64_t v10 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
      uint64_t v131 = *v10;
      (*v10)(a1, a2, v9);
      uint64_t v11 = v6[5];
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      uint64_t v15 = v6[6];
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
      uint64_t v19 = v6[9];
      uint64_t v20 = (char *)(a1 + v19);
      uint64_t v21 = (char *)(a2 + v19);
      uint64_t v22 = (int *)type metadata accessor for AirQualityViewModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, (uint64_t)v22))
      {
        uint64_t v23 = sub_1000053D8(&qword_10016B428);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        v131((uint64_t)v20, (uint64_t)v21, v9);
        uint64_t v55 = v22[5];
        uint64_t v56 = &v20[v55];
        uint64_t v57 = &v21[v55];
        uint64_t v58 = sub_100129300();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
        *(void *)&v20[v22[6]] = *(void *)&v21[v22[6]];
        uint64_t v59 = v22[7];
        long long v60 = &v20[v59];
        uint64_t v61 = &v21[v59];
        uint64_t v62 = sub_100129B70();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v60, v61, v62);
        uint64_t v63 = v22[8];
        uint64_t v64 = &v20[v63];
        uint64_t v65 = &v21[v63];
        uint64_t v66 = sub_100129C50();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v64, v65, v66);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, (uint64_t)v22);
      }
      uint64_t v67 = v6[10];
      uint64_t v68 = (void *)(a1 + v67);
      uint64_t v69 = (const void *)(a2 + v67);
      uint64_t v70 = sub_10012C6B0();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, v70))
      {
        uint64_t v71 = sub_1000053D8(&qword_10016B430);
        memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v70 - 8) + 16))(v68, v69, v70);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v70);
      }
      *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
      uint64_t v72 = v6[12];
      uint64_t v73 = a1 + v72;
      uint64_t v74 = (uint64_t *)(a2 + v72);
      uint64_t v75 = *v74;
      *(_WORD *)(v73 + 8) = *((_WORD *)v74 + 4);
      *(void *)uint64_t v73 = v75;
      uint64_t v76 = v6[13];
      int v77 = (void *)(a1 + v76);
      uint64_t v78 = (const void *)(a2 + v76);
      uint64_t v79 = sub_100129220();
      swift_bridgeObjectRetain();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v79))
      {
        uint64_t v80 = sub_1000053D8(&qword_10016B420);
        memcpy(v77, v78, *(void *)(*(void *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v79);
      }
      uint64_t v81 = v6[14];
      uint64_t v82 = (void *)(a1 + v81);
      char v83 = (const void *)(a2 + v81);
      uint64_t v84 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, v84))
      {
        uint64_t v85 = sub_1000053D8(&qword_10016B438);
        memcpy(v82, v83, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v86 = sub_100129300();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v86 - 8) + 16))(v82, v83, v86);
        swift_storeEnumTagMultiPayload();
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, v84);
      }
      uint64_t v87 = a1;
      uint64_t v88 = 2;
      uint64_t v89 = (uint64_t)v6;
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_1000E36C0(a1, type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    size_t v24 = *(void *)(*(void *)(a3 - 8) + 64);
    uint64_t v25 = (void *)a1;
    int v26 = (const void *)a2;
LABEL_8:
    memcpy(v25, v26, v24);
    return a1;
  }
  uint64_t v27 = sub_100129330();
  uint64_t v132 = *(void *)(v27 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 24);
  v28(a1, a2, v27);
  uint64_t v29 = v6[5];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  uint64_t v33 = v6[6];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  uint64_t v36 = sub_10012C250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 24))(v34, v35, v36);
  *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v6[9];
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AirQualityViewModel();
  int v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, (uint64_t)v40);
  int v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, (uint64_t)v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v38, v39, v27);
      uint64_t v43 = v40[5];
      uint64_t v44 = &v38[v43];
      unint64_t v45 = &v39[v43];
      uint64_t v46 = sub_100129300();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
      *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
      uint64_t v47 = v40[7];
      Swift::String v48 = &v38[v47];
      Swift::String v49 = &v39[v47];
      uint64_t v50 = sub_100129B70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      uint64_t v51 = v40[8];
      Swift::String v52 = &v38[v51];
      Swift::String v53 = &v39[v51];
      uint64_t v54 = sub_100129C50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, (uint64_t)v40);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v42)
  {
    sub_1000E36C0((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for AirQualityViewModel);
LABEL_27:
    uint64_t v91 = sub_1000053D8(&qword_10016B428);
    memcpy(v38, v39, *(void *)(*(void *)(v91 - 8) + 64));
    goto LABEL_28;
  }
  v28((uint64_t)v38, (uint64_t)v39, v27);
  uint64_t v118 = v40[5];
  uint64_t v119 = &v38[v118];
  uint64_t v120 = &v39[v118];
  uint64_t v121 = sub_100129300();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 24))(v119, v120, v121);
  *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
  uint64_t v122 = v40[7];
  uint64_t v123 = &v38[v122];
  uint64_t v124 = &v39[v122];
  uint64_t v125 = sub_100129B70();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v125 - 8) + 24))(v123, v124, v125);
  uint64_t v126 = v40[8];
  uint64_t v127 = &v38[v126];
  uint64_t v128 = &v39[v126];
  uint64_t v129 = sub_100129C50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 24))(v127, v128, v129);
LABEL_28:
  uint64_t v92 = v6[10];
  uint64_t v93 = (void *)(a1 + v92);
  char v94 = (const void *)(a2 + v92);
  uint64_t v95 = sub_10012C6B0();
  int v96 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v93, 1, v95);
  int v97 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v94, 1, v95);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v95 - 8) + 16))(v93, v94, v95);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v93, 0, 1, v95);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v98 = *(void *)(v95 - 8);
  if (v97)
  {
    (*(void (**)(void *, uint64_t))(v98 + 8))(v93, v95);
LABEL_33:
    uint64_t v99 = sub_1000053D8(&qword_10016B430);
    memcpy(v93, v94, *(void *)(*(void *)(v99 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, const void *, uint64_t))(v98 + 24))(v93, v94, v95);
LABEL_34:
  *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v100 = v6[12];
  uint64_t v101 = (unsigned char *)(a1 + v100);
  uint64_t v102 = (unsigned char *)(a2 + v100);
  *uint64_t v101 = *v102;
  v101[1] = v102[1];
  v101[2] = v102[2];
  v101[3] = v102[3];
  v101[4] = v102[4];
  v101[5] = v102[5];
  v101[6] = v102[6];
  v101[7] = v102[7];
  v101[8] = v102[8];
  v101[9] = v102[9];
  uint64_t v103 = v6[13];
  uint64_t v104 = (void *)(a1 + v103);
  int v105 = (const void *)(a2 + v103);
  uint64_t v106 = sub_100129220();
  int v107 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, v106);
  int v108 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v105, 1, v106);
  if (v107)
  {
    if (!v108)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v105, v106);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, v106);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v109 = *(void *)(v106 - 8);
  if (v108)
  {
    (*(void (**)(void *, uint64_t))(v109 + 8))(v104, v106);
LABEL_39:
    uint64_t v110 = sub_1000053D8(&qword_10016B420);
    memcpy(v104, v105, *(void *)(*(void *)(v110 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(void *, const void *, uint64_t))(v109 + 24))(v104, v105, v106);
LABEL_40:
  uint64_t v111 = v6[14];
  uint64_t v112 = a1 + v111;
  uint64_t v113 = a2 + v111;
  uint64_t v114 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  int v115 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v112, 1, v114);
  int v116 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v113, 1, v114);
  if (v115)
  {
    if (!v116)
    {
      swift_getEnumCaseMultiPayload();
      uint64_t v117 = sub_100129300();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 16))(v112, v113, v117);
      swift_storeEnumTagMultiPayload();
      uint64_t v87 = v112;
      uint64_t v88 = 1;
      uint64_t v89 = v114;
LABEL_23:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v87, 0, v88, v89);
      return a1;
    }
    goto LABEL_45;
  }
  if (v116)
  {
    sub_1000E36C0(v112, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_45:
    size_t v24 = *(void *)(*(void *)(sub_1000053D8(&qword_10016B438) - 8) + 64);
    uint64_t v25 = (void *)v112;
    int v26 = (const void *)v113;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_1000E36C0(v112, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    swift_getEnumCaseMultiPayload();
    uint64_t v130 = sub_100129300();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 16))(v112, v113, v130);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000E36C0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t assignWithTake for AdaptiveConditionsComplicationDataStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  int v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v6);
  int v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, (uint64_t)v6);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = sub_100129330();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
      v10(a1, a2, v9);
      uint64_t v11 = v6[5];
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      uint64_t v15 = v6[6];
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
      uint64_t v19 = v6[9];
      uint64_t v20 = (char *)(a1 + v19);
      uint64_t v21 = (char *)(a2 + v19);
      uint64_t v22 = (int *)type metadata accessor for AirQualityViewModel();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, (uint64_t)v22))
      {
        uint64_t v23 = sub_1000053D8(&qword_10016B428);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        v10((uint64_t)v20, (uint64_t)v21, v9);
        uint64_t v55 = v22[5];
        uint64_t v56 = &v20[v55];
        uint64_t v57 = &v21[v55];
        uint64_t v58 = sub_100129300();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32))(v56, v57, v58);
        *(void *)&v20[v22[6]] = *(void *)&v21[v22[6]];
        uint64_t v59 = v22[7];
        long long v60 = &v20[v59];
        uint64_t v61 = &v21[v59];
        uint64_t v62 = sub_100129B70();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v60, v61, v62);
        uint64_t v63 = v22[8];
        uint64_t v64 = &v20[v63];
        uint64_t v65 = &v21[v63];
        uint64_t v66 = sub_100129C50();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v64, v65, v66);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, (uint64_t)v22);
      }
      uint64_t v67 = v6[10];
      uint64_t v68 = (void *)(a1 + v67);
      uint64_t v69 = (const void *)(a2 + v67);
      uint64_t v70 = sub_10012C6B0();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, v70))
      {
        uint64_t v71 = sub_1000053D8(&qword_10016B430);
        memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v70 - 8) + 32))(v68, v69, v70);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v70);
      }
      *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
      uint64_t v72 = v6[12];
      uint64_t v73 = a1 + v72;
      uint64_t v74 = a2 + v72;
      *(void *)uint64_t v73 = *(void *)v74;
      *(_WORD *)(v73 + 8) = *(_WORD *)(v74 + 8);
      uint64_t v75 = v6[13];
      uint64_t v76 = (void *)(a1 + v75);
      int v77 = (const void *)(a2 + v75);
      uint64_t v78 = sub_100129220();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v77, 1, v78))
      {
        uint64_t v79 = sub_1000053D8(&qword_10016B420);
        memcpy(v76, v77, *(void *)(*(void *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v78 - 8) + 32))(v76, v77, v78);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v76, 0, 1, v78);
      }
      uint64_t v80 = v6[14];
      uint64_t v81 = (void *)(a1 + v80);
      uint64_t v82 = (const void *)(a2 + v80);
      uint64_t v83 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, v83))
      {
        uint64_t v84 = sub_1000053D8(&qword_10016B438);
        memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v85 = sub_100129300();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v85 - 8) + 32))(v81, v82, v85);
        swift_storeEnumTagMultiPayload();
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, v83);
      }
      uint64_t v86 = a1;
      uint64_t v87 = 2;
      uint64_t v88 = (uint64_t)v6;
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_1000E36C0(a1, type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    size_t v24 = *(void *)(*(void *)(a3 - 8) + 64);
    uint64_t v25 = (void *)a1;
    int v26 = (const void *)a2;
LABEL_8:
    memcpy(v25, v26, v24);
    return a1;
  }
  uint64_t v27 = sub_100129330();
  uint64_t v130 = *(void *)(v27 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 40);
  v28(a1, a2, v27);
  uint64_t v29 = v6[5];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  uint64_t v33 = v6[6];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  uint64_t v36 = sub_10012C250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 40))(v34, v35, v36);
  *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
  swift_bridgeObjectRelease();
  uint64_t v37 = v6[9];
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AirQualityViewModel();
  int v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, (uint64_t)v40);
  int v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, (uint64_t)v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v38, v39, v27);
      uint64_t v43 = v40[5];
      uint64_t v44 = &v38[v43];
      unint64_t v45 = &v39[v43];
      uint64_t v46 = sub_100129300();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v44, v45, v46);
      *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
      uint64_t v47 = v40[7];
      Swift::String v48 = &v38[v47];
      Swift::String v49 = &v39[v47];
      uint64_t v50 = sub_100129B70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
      uint64_t v51 = v40[8];
      Swift::String v52 = &v38[v51];
      Swift::String v53 = &v39[v51];
      uint64_t v54 = sub_100129C50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v52, v53, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, (uint64_t)v40);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v42)
  {
    sub_1000E36C0((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for AirQualityViewModel);
LABEL_27:
    uint64_t v90 = sub_1000053D8(&qword_10016B428);
    memcpy(v38, v39, *(void *)(*(void *)(v90 - 8) + 64));
    goto LABEL_28;
  }
  v28((uint64_t)v38, (uint64_t)v39, v27);
  uint64_t v117 = v40[5];
  uint64_t v118 = &v38[v117];
  uint64_t v119 = &v39[v117];
  uint64_t v120 = sub_100129300();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 40))(v118, v119, v120);
  *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
  uint64_t v121 = v40[7];
  uint64_t v122 = &v38[v121];
  uint64_t v123 = &v39[v121];
  uint64_t v124 = sub_100129B70();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 40))(v122, v123, v124);
  uint64_t v125 = v40[8];
  uint64_t v126 = &v38[v125];
  uint64_t v127 = &v39[v125];
  uint64_t v128 = sub_100129C50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 40))(v126, v127, v128);
LABEL_28:
  uint64_t v91 = v6[10];
  uint64_t v92 = (void *)(a1 + v91);
  uint64_t v93 = (const void *)(a2 + v91);
  uint64_t v94 = sub_10012C6B0();
  int v95 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v92, 1, v94);
  int v96 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v93, 1, v94);
  if (v95)
  {
    if (!v96)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v94 - 8) + 32))(v92, v93, v94);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v92, 0, 1, v94);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v97 = *(void *)(v94 - 8);
  if (v96)
  {
    (*(void (**)(void *, uint64_t))(v97 + 8))(v92, v94);
LABEL_33:
    uint64_t v98 = sub_1000053D8(&qword_10016B430);
    memcpy(v92, v93, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, const void *, uint64_t))(v97 + 40))(v92, v93, v94);
LABEL_34:
  *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
  swift_bridgeObjectRelease();
  uint64_t v99 = v6[12];
  uint64_t v100 = a1 + v99;
  uint64_t v101 = a2 + v99;
  *(void *)uint64_t v100 = *(void *)v101;
  *(_WORD *)(v100 + 8) = *(_WORD *)(v101 + 8);
  uint64_t v102 = v6[13];
  uint64_t v103 = (void *)(a1 + v102);
  uint64_t v104 = (const void *)(a2 + v102);
  uint64_t v105 = sub_100129220();
  int v106 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v103, 1, v105);
  int v107 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, v105);
  if (v106)
  {
    if (!v107)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v105 - 8) + 32))(v103, v104, v105);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, v105);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v108 = *(void *)(v105 - 8);
  if (v107)
  {
    (*(void (**)(void *, uint64_t))(v108 + 8))(v103, v105);
LABEL_39:
    uint64_t v109 = sub_1000053D8(&qword_10016B420);
    memcpy(v103, v104, *(void *)(*(void *)(v109 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(void *, const void *, uint64_t))(v108 + 40))(v103, v104, v105);
LABEL_40:
  uint64_t v110 = v6[14];
  uint64_t v111 = a1 + v110;
  uint64_t v112 = a2 + v110;
  uint64_t v113 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  int v114 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v111, 1, v113);
  int v115 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v112, 1, v113);
  if (v114)
  {
    if (!v115)
    {
      swift_getEnumCaseMultiPayload();
      uint64_t v116 = sub_100129300();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 32))(v111, v112, v116);
      swift_storeEnumTagMultiPayload();
      uint64_t v86 = v111;
      uint64_t v87 = 1;
      uint64_t v88 = v113;
LABEL_23:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v86, 0, v87, v88);
      return a1;
    }
    goto LABEL_45;
  }
  if (v115)
  {
    sub_1000E36C0(v111, type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_45:
    size_t v24 = *(void *)(*(void *)(sub_1000053D8(&qword_10016B438) - 8) + 64);
    uint64_t v25 = (void *)v111;
    int v26 = (const void *)v112;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_1000E36C0(v111, type metadata accessor for AggregateWeatherViewModel.SunEvent);
    swift_getEnumCaseMultiPayload();
    uint64_t v129 = sub_100129300();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 32))(v111, v112, v129);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AdaptiveConditionsComplicationDataStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E448C);
}

uint64_t sub_1000E448C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AggregateWeatherViewModel(0);
  unsigned int v5 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AdaptiveConditionsComplicationDataStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E44E8);
}

uint64_t sub_1000E44E8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for AggregateWeatherViewModel(0);

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, v5, a3, v6);
}

uint64_t type metadata accessor for AdaptiveConditionsComplicationDataStatus()
{
  uint64_t result = qword_100170788;
  if (!qword_100170788) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E4590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E45A4);
}

uint64_t sub_1000E45A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for ForecastEntry(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
}

uint64_t sub_1000E4624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E4638);
}

uint64_t sub_1000E4638(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for ForecastEntry(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t type metadata accessor for AQIContentView()
{
  uint64_t result = qword_1001707F0;
  if (!qword_1001707F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E4708()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E4724@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E472C(v1, a1);
}

uint64_t sub_1000E472C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v43 = sub_1000053D8(&qword_100170828);
  __chkstk_darwin(v43);
  uint64_t v44 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_1000053D8(&qword_100170830);
  __chkstk_darwin(v52);
  Swift::String v48 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10012C110();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  unint64_t v45 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for AQIContentView();
  uint64_t v7 = __chkstk_darwin(v49);
  uint64_t v40 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v37 - v9;
  uint64_t v50 = sub_1000053D8(&qword_100170838);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_1000053D8(&qword_100170840);
  __chkstk_darwin(v41);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_1000053D8(&qword_100170848);
  __chkstk_darwin(v51);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10012C500();
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10012C2F0();
  uint64_t v42 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10012C800();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v37 = (uint64_t)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v37 - v26;
  sub_10008F554((uint64_t)&v37 - v26);
  uint64_t v39 = v23;
  int v28 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v27, v22);
  if (v28 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_1000A5A8C((uint64_t)v18);
    sub_10012C2E0();
    uint64_t v29 = v42;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v13, v21, v19);
    swift_storeEnumTagMultiPayload();
    sub_1000E5150(&qword_100170860, (void (*)(uint64_t))&type metadata accessor for AirQualityCircularContentView);
    sub_10012B0E0();
    sub_100016CAC((uint64_t)v15, (uint64_t)v11, &qword_100170848);
    swift_storeEnumTagMultiPayload();
    sub_1000E50A4();
    sub_1000E5198();
    sub_10012B0E0();
    sub_100016D10((uint64_t)v15, &qword_100170848);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v21, v19);
  }
  if (v28 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_1000E5040(a1, v38);
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    sub_10012CFD0(56);
    v56._countAndFlagsBits = 0xD000000000000021;
    v56._object = (void *)0x8000000100138E70;
    sub_10012CAF0(v56);
    uint64_t v35 = v37;
    sub_10008F554(v37);
    sub_1000E5150(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
    v57._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v57);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v35, v22);
    v58._object = (void *)0x800000010013C210;
    v58._countAndFlagsBits = 0xD000000000000015;
    sub_10012CAF0(v58);
LABEL_9:
    uint64_t result = sub_10012D070();
    __break(1u);
    return result;
  }
  if (v28 != enum case for WidgetFamily.accessoryInline(_:))
  {
    sub_1000E5040(a1, v40);
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    sub_10012CFD0(57);
    v59._countAndFlagsBits = 0xD000000000000022;
    v59._object = (void *)0x8000000100138E20;
    sub_10012CAF0(v59);
    uint64_t v36 = v37;
    sub_10008F554(v37);
    sub_1000E5150(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
    v60._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v36, v22);
    v61._object = (void *)0x800000010013C210;
    v61._countAndFlagsBits = 0xD000000000000015;
    sub_10012CAF0(v61);
    goto LABEL_9;
  }
  sub_1000A5A8C((uint64_t)v18);
  uint64_t v31 = v45;
  sub_10012C100();
  uint64_t v33 = v46;
  uint64_t v32 = v47;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v44, v31, v47);
  swift_storeEnumTagMultiPayload();
  sub_1000E5150(&qword_100170850, (void (*)(uint64_t))&type metadata accessor for AirQualityInlineContentView);
  uint64_t v34 = (uint64_t)v48;
  sub_10012B0E0();
  sub_100016CAC(v34, (uint64_t)v11, &qword_100170830);
  swift_storeEnumTagMultiPayload();
  sub_1000E50A4();
  sub_1000E5198();
  sub_10012B0E0();
  sub_100016D10(v34, &qword_100170830);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v31, v32);
}

uint64_t sub_1000E5040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AQIContentView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E50A4()
{
  unint64_t result = qword_100170858;
  if (!qword_100170858)
  {
    sub_100005470(&qword_100170848);
    sub_1000E5150(&qword_100170860, (void (*)(uint64_t))&type metadata accessor for AirQualityCircularContentView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170858);
  }
  return result;
}

uint64_t sub_1000E5150(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000E5198()
{
  unint64_t result = qword_100170868;
  if (!qword_100170868)
  {
    sub_100005470(&qword_100170830);
    sub_1000E5150(&qword_100170850, (void (*)(uint64_t))&type metadata accessor for AirQualityInlineContentView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170868);
  }
  return result;
}

unint64_t sub_1000E5248()
{
  unint64_t result = qword_100170870;
  if (!qword_100170870)
  {
    sub_100005470(&qword_100170878);
    sub_1000E52BC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170870);
  }
  return result;
}

unint64_t sub_1000E52BC()
{
  unint64_t result = qword_100170880;
  if (!qword_100170880)
  {
    sub_100005470(&qword_100170888);
    sub_1000E50A4();
    sub_1000E5198();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170880);
  }
  return result;
}

uint64_t sub_1000E5338()
{
  uint64_t v0 = sub_10012A910();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000053D8(&qword_100170900);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100135C90;
  uint64_t v7 = (objc_class *)sub_10012A800();
  id v8 = [objc_allocWithZone(v7) init];
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 64) = &protocol witness table for FrameworkAssembly;
  *(void *)(v6 + 32) = v8;
  uint64_t v9 = sub_10012A590();
  sub_1000E6470();
  uint64_t v10 = sub_10012A580();
  *(void *)(v6 + 96) = v9;
  *(void *)(v6 + 104) = sub_1000E63D0(&qword_100170908, (void (*)(uint64_t))&type metadata accessor for Assembly);
  *(void *)(v6 + 72) = v10;
  uint64_t v11 = sub_10012A9E0();
  sub_1000E6470();
  uint64_t v12 = sub_10012A9D0();
  *(void *)(v6 + 136) = v11;
  *(void *)(v6 + 144) = sub_1000E63D0(&qword_100170910, (void (*)(uint64_t))&type metadata accessor for Assembly);
  *(void *)(v6 + 112) = v12;
  sub_1000053D8(&qword_100170918);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100130010;
  uint64_t v14 = type metadata accessor for WeatherWidgetAssembly();
  uint64_t v15 = swift_allocObject();
  *(void *)(v13 + 56) = v14;
  *(void *)(v13 + 64) = sub_1000E63D0(&qword_100170920, (void (*)(uint64_t))type metadata accessor for WeatherWidgetAssembly);
  *(void *)(v13 + 32) = v15;
  sub_10012A7A0();
  sub_1000E6470();
  sub_10012A790();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for Container.Environment.normal(_:), v0);
  sub_10012A940();
  sub_1000E6470();
  uint64_t result = sub_10012A920();
  qword_100181C68 = result;
  return result;
}

id sub_1000E55BC()
{
  uint64_t v0 = self;

  return [v0 setSuppressEngagement:1];
}

uint64_t sub_1000E55F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v82 = a1;
  uint64_t v93 = sub_1000053D8(&qword_100170898);
  sub_10000DB98();
  uint64_t v96 = v1;
  __chkstk_darwin(v2);
  sub_10000DCB4();
  uint64_t v92 = v3;
  sub_1000636C8();
  __chkstk_darwin(v4);
  uint64_t v81 = (char *)v75 - v5;
  uint64_t v91 = sub_1000053D8(&qword_1001708A0);
  sub_10000DB98();
  uint64_t v95 = v6;
  __chkstk_darwin(v7);
  sub_10000DCB4();
  uint64_t v90 = v8;
  sub_1000636C8();
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)v75 - v10;
  uint64_t v80 = sub_1000053D8(&qword_1001708A8);
  sub_10000DB98();
  uint64_t v94 = v11;
  __chkstk_darwin(v12);
  sub_10000DCB4();
  uint64_t v86 = v13;
  sub_1000636C8();
  __chkstk_darwin(v14);
  uint64_t v84 = (char *)v75 - v15;
  uint64_t v78 = sub_1000053D8(&qword_1001708B0);
  sub_10000DB98();
  uint64_t v89 = v16;
  __chkstk_darwin(v17);
  sub_10000DCB4();
  uint64_t v85 = v18;
  sub_1000636C8();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v75 - v20;
  sub_1000053D8(&qword_1001708B8);
  sub_10000DB98();
  uint64_t v87 = v23;
  uint64_t v88 = v22;
  __chkstk_darwin(v22);
  sub_10000DCB4();
  uint64_t v83 = v24;
  sub_1000636C8();
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v75 - v26;
  sub_10012A0B0();
  sub_10000DB98();
  uint64_t v29 = v28;
  __chkstk_darwin(v30);
  sub_10005C778();
  uint64_t v31 = *(void (**)(uint64_t))(v29 + 104);
  uint64_t v32 = sub_1000E6448();
  v31(v32);
  uint64_t v77 = sub_10012A0A0();
  uint64_t v76 = v33;
  uint64_t v34 = *(void (**)(uint64_t))(v29 + 8);
  uint64_t v35 = sub_1000E6434();
  v34(v35);
  uint64_t v36 = sub_1000E6448();
  v31(v36);
  uint64_t v37 = sub_10012A0A0();
  uint64_t v39 = v38;
  uint64_t v40 = sub_1000E6434();
  v34(v40);
  uint64_t v98 = (void *)v37;
  uint64_t v99 = v39;
  sub_1000E6294();
  v75[1] = v27;
  sub_10012B050();
  swift_bridgeObjectRelease();
  uint64_t v41 = sub_1000E6448();
  v31(v41);
  uint64_t v42 = sub_10012A0A0();
  uint64_t v44 = v43;
  uint64_t v45 = sub_1000E6434();
  v34(v45);
  uint64_t v98 = (void *)v42;
  uint64_t v99 = v44;
  sub_1000E62E0();
  v75[0] = v21;
  sub_10012B050();
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_1000E6448();
  v31(v46);
  uint64_t v47 = sub_10012A0A0();
  uint64_t v49 = v48;
  uint64_t v50 = sub_1000E6434();
  v34(v50);
  uint64_t v98 = (void *)v47;
  uint64_t v99 = v49;
  sub_1000E632C();
  sub_10012B050();
  swift_bridgeObjectRelease();
  sub_1000E5BF0();
  uint64_t v51 = v81;
  sub_1000E5E64();
  v97[0] = v77;
  v97[1] = v76;
  uint64_t v98 = v97;
  uint64_t v52 = v83;
  sub_1000999B4();
  v53();
  uint64_t v99 = v52;
  uint64_t v54 = v85;
  uint64_t v55 = v78;
  sub_1000999B4();
  v56();
  uint64_t v100 = v54;
  uint64_t v57 = v94;
  uint64_t v58 = v86;
  sub_1000999B4();
  v59();
  uint64_t v101 = v58;
  uint64_t v60 = v95;
  uint64_t v61 = v90;
  sub_1000999B4();
  v62();
  uint64_t v102 = v61;
  uint64_t v63 = v96;
  uint64_t v64 = v92;
  uint64_t v65 = v93;
  sub_1000999B4();
  v66();
  uint64_t v103 = v64;
  sub_1000E5FB0(&v98);
  uint64_t v67 = *(void (**)(void))(v63 + 8);
  uint64_t v96 = v63 + 8;
  ((void (*)(char *, uint64_t))v67)(v51, v65);
  uint64_t v68 = *(void (**)(void))(v60 + 8);
  uint64_t v95 = v60 + 8;
  sub_1000999D0();
  v68();
  uint64_t v69 = *(void (**)(void))(v57 + 8);
  uint64_t v94 = v57 + 8;
  sub_1000999D0();
  v69();
  uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
  v70(v75[0], v55);
  uint64_t v71 = *(void (**)(uint64_t))(v87 + 8);
  uint64_t v72 = sub_1000E6488((uint64_t)&v104);
  v71(v72);
  sub_1000999D0();
  v67();
  sub_1000999D0();
  v68();
  sub_1000999D0();
  v69();
  v70(v85, v55);
  uint64_t v73 = sub_1000E6488((uint64_t)&v105);
  v71(v73);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E5BF0()
{
  uint64_t v1 = sub_10012A0B0();
  sub_10000DB98();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10005C778();
  uint64_t v5 = *(void (**)(uint64_t))(v3 + 104);
  uint64_t v6 = sub_1000E645C();
  v5(v6);
  uint64_t v7 = sub_10012A0A0();
  uint64_t v9 = v8;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v10(v0, v1);
  v26[0] = v7;
  v26[1] = v9;
  v26[2] = v26;
  uint64_t v11 = sub_1000E645C();
  v5(v11);
  sub_10012A0A0();
  uint64_t v12 = sub_1000E6418();
  ((void (*)(uint64_t))v10)(v12);
  v25[0] = v7;
  v25[1] = v9;
  void v26[3] = v25;
  uint64_t v13 = sub_1000E645C();
  v5(v13);
  sub_10012A0A0();
  uint64_t v14 = sub_1000E6418();
  ((void (*)(uint64_t))v10)(v14);
  v24[0] = v7;
  v24[1] = v9;
  v23[0] = 0xD000000000000026;
  v23[1] = 0x800000010013C230;
  void v26[4] = v24;
  v26[5] = v23;
  v22[0] = 0xD000000000000028;
  v22[1] = 0x800000010013C260;
  v21[0] = 0xD000000000000029;
  v21[1] = 0x800000010013BD60;
  v26[6] = v22;
  v26[7] = v21;
  uint64_t v15 = sub_1000E645C();
  v5(v15);
  sub_10012A0A0();
  uint64_t v16 = sub_1000E6418();
  ((void (*)(uint64_t))v10)(v16);
  v20[0] = v7;
  v20[1] = v9;
  v19[0] = 0xD000000000000023;
  v19[1] = 0x800000010013A3D0;
  v26[8] = v20;
  v26[9] = v19;
  v18[0] = 0xD000000000000022;
  v18[1] = 0x800000010013C290;
  v26[10] = v18;
  sub_1000E5EA8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E5E64()
{
  sub_1000053D8(&qword_1001708E0);

  return sub_10012ABA0();
}

uint64_t sub_1000E5EA8()
{
  return sub_10012ABA0();
}

uint64_t sub_1000E5FB0(void *a1)
{
  uint64_t v2 = (int *)sub_1000053D8(&qword_1001708D8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = a1[1];
  uint64_t v7 = *(void *)(*a1 + 8);
  *uint64_t v5 = *(void *)*a1;
  v5[1] = v7;
  uint64_t v8 = (char *)v5 + *(int *)(v3 + 48);
  uint64_t v9 = sub_1000053D8(&qword_1001708B8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, v6, v9);
  uint64_t v10 = (char *)v5 + v2[16];
  uint64_t v11 = a1[2];
  uint64_t v12 = sub_1000053D8(&qword_1001708B0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  uint64_t v13 = (char *)v5 + v2[20];
  uint64_t v14 = a1[3];
  uint64_t v15 = sub_1000053D8(&qword_1001708A8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = (char *)v5 + v2[24];
  uint64_t v17 = a1[4];
  uint64_t v18 = sub_1000053D8(&qword_1001708A0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = (char *)v5 + v2[28];
  uint64_t v20 = a1[5];
  uint64_t v21 = sub_1000053D8(&qword_100170898);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  swift_bridgeObjectRetain();
  return sub_10012ABA0();
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

unint64_t sub_1000E621C()
{
  unint64_t result = qword_100170890;
  if (!qword_100170890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170890);
  }
  return result;
}

ValueMetadata *type metadata accessor for WeatherWidgetBundle()
{
  return &type metadata for WeatherWidgetBundle;
}

uint64_t sub_1000E6278()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000E6294()
{
  unint64_t result = qword_1001708C0;
  if (!qword_1001708C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001708C0);
  }
  return result;
}

unint64_t sub_1000E62E0()
{
  unint64_t result = qword_1001708C8;
  if (!qword_1001708C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001708C8);
  }
  return result;
}

unint64_t sub_1000E632C()
{
  unint64_t result = qword_1001708D0;
  if (!qword_1001708D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001708D0);
  }
  return result;
}

unint64_t sub_1000E637C()
{
  unint64_t result = qword_1001708F0;
  if (!qword_1001708F0)
  {
    sub_100005470(&qword_1001708F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001708F0);
  }
  return result;
}

uint64_t sub_1000E63D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E6418()
{
  return v0;
}

uint64_t sub_1000E6434()
{
  return v0;
}

uint64_t sub_1000E6448()
{
  return v0;
}

uint64_t sub_1000E645C()
{
  return v0;
}

uint64_t sub_1000E6470()
{
  return swift_allocObject();
}

uint64_t sub_1000E6488@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t getEnumTagSinglePayload for WeatherDataNeeds(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    unsigned int v5 = -1;
    return v5 + 1;
  }
  if (a2 >= 0x7D)
  {
    if (a2 + 131 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 131) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    unsigned int v5 = (*a1 | (v4 << 8)) - 132;
    return v5 + 1;
  }
LABEL_17:
  unsigned int v5 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v5 >= 0x7C) {
    unsigned int v5 = -1;
  }
  return v5 + 1;
}

unsigned char *storeEnumTagSinglePayload for WeatherDataNeeds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 131 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 131) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x7D) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x7C)
  {
    unsigned int v6 = ((a2 - 125) >> 8) + 1;
    *uint64_t result = a2 - 125;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E660CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_1000E6634(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  unsigned int v4 = (v1 | 0xFFFFFFFE) + 2 * (v1 >> 6);
  if (v2 >= 0) {
    return v3;
  }
  else {
    return v4;
  }
}

unsigned char *sub_1000E6654(unsigned char *result)
{
  *result &= 0x3Fu;
  return result;
}

unsigned char *sub_1000E6664(unsigned char *result, unsigned int a2)
{
  if (a2 < 2) {
    LOBYTE(v2) = *result & 1 | ((_BYTE)a2 << 6);
  }
  else {
    int v2 = (a2 & 1 | (a2 >> 1 << 6)) + 64;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for WeatherDataNeeds()
{
  return &type metadata for WeatherDataNeeds;
}

void *sub_1000E66A4(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000053D8(&qword_10016B318);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for ForecastEntry(0);
  uint64_t v9 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v25 = (uint64_t)v22 - v12;
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return &_swiftEmptyArrayStorage;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v22[1] = a3;
  unint64_t v23 = v14;
  uint64_t v15 = a3 + v14;
  uint64_t v16 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  uint64_t v17 = &_swiftEmptyArrayStorage;
  uint64_t v24 = a1;
  while (1)
  {
    a1(v15);
    if (v3) {
      break;
    }
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v27) == 1)
    {
      sub_1000235F8((uint64_t)v8, &qword_10016B318);
    }
    else
    {
      uint64_t v18 = v25;
      sub_1000EAEDC((uint64_t)v8, v25, (void (*)(void))type metadata accessor for ForecastEntry);
      sub_1000EAEDC(v18, v26, (void (*)(void))type metadata accessor for ForecastEntry);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v17 = (void *)sub_100045B94(0, v17[2] + 1, 1, (uint64_t)v17);
      }
      unint64_t v20 = v17[2];
      unint64_t v19 = v17[3];
      if (v20 >= v19 >> 1) {
        uint64_t v17 = (void *)sub_100045B94(v19 > 1, v20 + 1, 1, (uint64_t)v17);
      }
      v17[2] = v20 + 1;
      sub_1000EAEDC(v26, (uint64_t)v17 + v23 + v20 * v16, (void (*)(void))type metadata accessor for ForecastEntry);
      a1 = v24;
    }
    v15 += v16;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      return v17;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

void sub_1000E6960()
{
  uint64_t v0 = sub_100129220();
  sub_10006D284(v0, qword_100181C70);
  uint64_t v1 = sub_10000D7A4(v0, (uint64_t)qword_100181C70);
  id v2 = [self defaultManager];
  id v3 = [v2 URLsForDirectory:9 inDomains:1];

  uint64_t v4 = sub_10012CBA0();
  if (*(void *)(v4 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v0 - 8) + 16))(v1, v4+ ((*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80)), v0);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000E6A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = a1;
  v71[2] = a2;
  uint64_t v73 = 0;
  uint64_t v2 = sub_10012C8D0();
  uint64_t v3 = sub_10000DC9C(v2);
  __chkstk_darwin(v3);
  sub_10000DC50();
  uint64_t v6 = v5 - v4;
  void v71[3] = type metadata accessor for ForecastEntry(0);
  sub_10000DB98();
  uint64_t v79 = v7;
  __chkstk_darwin(v8);
  sub_10000DCB4();
  uint64_t v81 = v9;
  sub_1000636C8();
  __chkstk_darwin(v10);
  uint64_t v80 = (uint64_t)v71 - v11;
  uint64_t v82 = sub_1000053D8(&qword_1001709C8);
  sub_10000B3FC();
  __chkstk_darwin(v12);
  sub_1000EB204(v13, v71[0]);
  uint64_t v14 = sub_1000053D8(&qword_1001709D0);
  uint64_t v15 = sub_10000DC9C(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (unint64_t *)((char *)v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)v71 - v19;
  uint64_t v21 = sub_1000053D8(&qword_10016C738);
  uint64_t v22 = sub_10000DC9C(v21);
  __chkstk_darwin(v22);
  sub_10000DC50();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = sub_10012A6B0();
  sub_10000DB98();
  uint64_t v28 = v27;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100129300();
  sub_10000DB98();
  uint64_t v74 = v32;
  __chkstk_darwin(v33);
  sub_10000DCB4();
  uint64_t v76 = v34;
  sub_1000636C8();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)v71 - v36;
  uint64_t v85 = &_swiftEmptyArrayStorage;
  sub_1001292F0();
  v71[4] = (uint64_t)sub_1000E7294();
  uint64_t v38 = sub_1000E7334();
  sub_10000B114(v72, v25, &qword_10016C738);
  int v39 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v25, 1, v26);
  v71[1] = v6;
  uint64_t v77 = v37;
  if (v39 == 1)
  {
    sub_1000235F8(v25, &qword_10016C738);
  }
  else
  {
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 32))(v31, v25, v26);
    __chkstk_darwin(v40);
    v71[-2] = (uint64_t)v31;
    v71[-1] = (uint64_t)v37;
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_1000E66A4((void (*)(void))sub_1000EAC20, (uint64_t)&v71[-4], (uint64_t)v38);
    swift_bridgeObjectRelease();
    uint64_t v42 = v41[2];
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v26);
    swift_bridgeObjectRelease();
    if (v42) {
      uint64_t v38 = v41;
    }
  }
  unint64_t v43 = 0;
  unint64_t v44 = v38[2];
  uint64_t v45 = (void (**)(uint64_t, uint64_t, uint64_t))(v74 + 40);
  while (1)
  {
    uint64_t v46 = v82;
    if (v43 == v44)
    {
      uint64_t v47 = 1;
      unint64_t v43 = v44;
    }
    else
    {
      if (v43 >= v38[2])
      {
        __break(1u);
        goto LABEL_21;
      }
      sub_1000EB228();
      uint64_t v50 = v75 + *(int *)(v46 + 48);
      sub_1000EAE30((uint64_t)v38 + v48 + *(void *)(v49 + 72) * v43, v50, (void (*)(void))type metadata accessor for ForecastEntry);
      uint64_t v51 = (uint64_t)v18 + *(int *)(v82 + 48);
      *uint64_t v18 = v43;
      uint64_t v52 = v50;
      uint64_t v46 = v82;
      sub_1000EAEDC(v52, v51, (void (*)(void))type metadata accessor for ForecastEntry);
      uint64_t v47 = 0;
      ++v43;
    }
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v18, v47, 1, v46);
    sub_10003BFD4((uint64_t)v18, (uint64_t)v20, &qword_1001709D0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v20, 1, v46) == 1) {
      break;
    }
    uint64_t v53 = v18;
    uint64_t v54 = v38;
    uint64_t v55 = v80;
    sub_1000EAEDC((uint64_t)&v20[*(int *)(v46 + 48)], v80, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v56 = v76;
    sub_100129250();
    (*v45)(v55, v56, v78);
    sub_1000EAE30(v55, v81, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v57 = (uint64_t)v85;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v57 = sub_100045B94(0, *(void *)(v57 + 16) + 1, 1, v57);
    }
    unint64_t v59 = *(void *)(v57 + 16);
    unint64_t v58 = *(void *)(v57 + 24);
    if (v59 >= v58 >> 1) {
      uint64_t v57 = sub_100045B94(v58 > 1, v59 + 1, 1, v57);
    }
    *(void *)(v57 + 16) = v59 + 1;
    sub_1000EB228();
    sub_1000EAEDC(v81, v57 + v60 + *(void *)(v61 + 72) * v59, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v85 = (void *)v57;
    sub_1000EAE84(v80, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v38 = v54;
    uint64_t v18 = v53;
  }
  swift_bridgeObjectRelease();
  if (qword_10016AE00 == -1) {
    goto LABEL_17;
  }
LABEL_21:
  swift_once();
LABEL_17:
  uint64_t v62 = sub_10012AB60();
  sub_10000D7A4(v62, (uint64_t)qword_100181BC8);
  uint64_t v63 = sub_10012AB40();
  os_log_type_t v64 = sub_10012CD60();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    v84[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v65 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_10012CBB0();
    unint64_t v68 = v67;
    swift_bridgeObjectRelease();
    uint64_t v83 = sub_100123564(v66, v68, v84);
    sub_10012CF70();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Returning entries:%s", v65, 0xCu);
    swift_arrayDestroy();
    sub_10000DBB4();
    sub_10000DBB4();
  }

  uint64_t v69 = v77;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10012C8B0();
  sub_1000EB19C((unint64_t *)&qword_1001709D8, (void (*)(uint64_t))type metadata accessor for ForecastEntry);
  sub_10012C960();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v69, v78);
  return swift_bridgeObjectRelease();
}

id sub_1000E7294()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  id result = sub_1000EAA90(v1, v2);
  if (result)
  {
    uint64_t v4 = result;
    NSString v5 = sub_10012CA20();
    id v6 = [v4 integerForKey:v5];

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1000E7334()
{
  uint64_t v0 = sub_1000053D8(&qword_10016B318);
  __chkstk_darwin(v0 - 8);
  uint64_t v98 = (char *)&v79 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for ForecastEntry(0);
  uint64_t v84 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v86 = (uint64_t)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v90 = (uint64_t)&v79 - v5;
  uint64_t v97 = sub_10012CA90();
  uint64_t v104 = *(char **)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v96 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000053D8(&qword_10016B420);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100129220();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v102 = (char *)&v79 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v103 = (char *)&v79 - v18;
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v79 - v19;
  if (qword_10016AE38 != -1) {
    swift_once();
  }
  sub_10000D7A4(v10, (uint64_t)qword_100181C70);
  sub_1001291F0();
  id v21 = [self defaultManager];
  sub_1001291E0(v22);
  uint64_t v24 = v23;
  id v107 = 0;
  id v25 = [v21 contentsOfDirectoryAtURL:v23 includingPropertiesForKeys:0 options:0 error:&v107];

  id v26 = v107;
  if (v25)
  {
    uint64_t v83 = v11;
    uint64_t v27 = sub_10012CBA0();
    id v28 = v26;

    if (qword_10016AE00 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_10012AB60();
    uint64_t v30 = sub_10000D7A4(v29, (uint64_t)qword_100181BC8);
    swift_bridgeObjectRetain_n();
    uint64_t v101 = v30;
    uint64_t v31 = sub_10012AB40();
    os_log_type_t v32 = sub_10012CD60();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v87 = v2;
    uint64_t v82 = v14;
    uint64_t v88 = v27;
    uint64_t v81 = v20;
    if (v33)
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      id v107 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v35 = v9;
      uint64_t v36 = sub_10012CBB0();
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      uint64_t v39 = v36;
      uint64_t v9 = v35;
      uint64_t v106 = sub_100123564(v39, v38, (uint64_t *)&v107);
      sub_10012CF70();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Found Content:%s", v34, 0xCu);
      swift_arrayDestroy();
      uint64_t v27 = v88;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v42 = v102;
    unint64_t v43 = v103;
    uint64_t v44 = *(void *)(v27 + 16);
    if (v44)
    {
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
      unint64_t v46 = v27 + ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
      uint64_t v47 = *(void *)(v83 + 72);
      uint64_t v95 = (void (**)(char *, char *, uint64_t))(v83 + 32);
      uint64_t v105 = (char **)(v83 + 8);
      uint64_t v92 = (void (**)(char *, uint64_t))(v104 + 8);
      uint64_t v93 = v47;
      uint64_t v91 = &_swiftEmptyArrayStorage;
      *(void *)&long long v40 = 136315138;
      long long v89 = v40;
      uint64_t v85 = (char *)&type metadata for Any + 8;
      uint64_t v94 = v9;
      uint64_t v99 = v45;
      uint64_t v100 = v83 + 16;
      while (1)
      {
        v45(v9, (char *)v46, v10);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 0, 1, v10);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v9, 1, v10) == 1) {
          break;
        }
        (*v95)(v43, v9, v10);
        v45(v42, v43, v10);
        uint64_t v48 = sub_10012AB40();
        os_log_type_t v49 = sub_10012CD60();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = v42;
          uint64_t v51 = swift_slowAlloc();
          id v107 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = v89;
          sub_1000EB19C(&qword_1001709F0, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v52 = sub_10012D1D0();
          *(void *)(v51 + 4) = sub_100123564(v52, v53, (uint64_t *)&v107);
          swift_bridgeObjectRelease();
          uint64_t v104 = *v105;
          ((void (*)(char *, uint64_t))v104)(v50, v10);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Found URL:%s", (uint8_t *)v51, 0xCu);
          swift_arrayDestroy();
          unint64_t v43 = v103;
          uint64_t v54 = (uint64_t)v98;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v104 = *v105;
          ((void (*)(char *, uint64_t))v104)(v42, v10);

          uint64_t v54 = (uint64_t)v98;
        }
        sub_100129200();
        sub_10012C9F0();
        swift_bridgeObjectRelease();
        uint64_t v55 = v96;
        sub_10012CA80();
        uint64_t v56 = sub_10012CA50();
        unint64_t v58 = v57;
        swift_bridgeObjectRelease();
        (*v92)(v55, v97);
        if (v58 >> 60 != 15)
        {
          sub_100128FA0();
          swift_allocObject();
          sub_100128F90();
          sub_1000EB19C(&qword_1001709E8, (void (*)(uint64_t))type metadata accessor for ForecastEntry);
          uint64_t v59 = v87;
          sub_100128F80();
          swift_release();
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v54, 0, 1, v59);
          sub_1000EAEDC(v54, v90, (void (*)(void))type metadata accessor for ForecastEntry);
          uint64_t v60 = v82;
          v99(v82, v103, v10);
          uint64_t v61 = sub_10012AB40();
          os_log_type_t v62 = sub_10012CD60();
          if (os_log_type_enabled(v61, v62))
          {
            uint64_t v63 = swift_slowAlloc();
            uint64_t v80 = v61;
            uint64_t v64 = v63;
            uint64_t v79 = (void *)swift_slowAlloc();
            id v107 = v79;
            *(_DWORD *)uint64_t v64 = v89;
            sub_1000EB19C(&qword_1001709F0, (void (*)(uint64_t))&type metadata accessor for URL);
            uint64_t v65 = sub_10012D1D0();
            *(void *)(v64 + 4) = sub_100123564(v65, v66, (uint64_t *)&v107);
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v104)(v60, v10);
            _os_log_impl((void *)&_mh_execute_header, v80, v62, "Succeeded decoding:%s", (uint8_t *)v64, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            ((void (*)(char *, uint64_t))v104)(v60, v10);
          }
          sub_1000EAE30(v90, v86, (void (*)(void))type metadata accessor for ForecastEntry);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v43 = v103;
          if (isUniquelyReferenced_nonNull_native) {
            unint64_t v68 = v91;
          }
          else {
            unint64_t v68 = (void *)sub_100045B94(0, v91[2] + 1, 1, (uint64_t)v91);
          }
          unint64_t v70 = v68[2];
          unint64_t v69 = v68[3];
          if (v70 >= v69 >> 1) {
            unint64_t v68 = (void *)sub_100045B94(v69 > 1, v70 + 1, 1, (uint64_t)v68);
          }
          v68[2] = v70 + 1;
          unint64_t v71 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
          uint64_t v91 = v68;
          sub_1000EAEDC(v86, (uint64_t)v68 + v71 + *(void *)(v84 + 72) * v70, (void (*)(void))type metadata accessor for ForecastEntry);
          sub_1000EB130(v56, v58);
          sub_1000EAE84(v90, (void (*)(void))type metadata accessor for ForecastEntry);
        }
        ((void (*)(char *, uint64_t))v104)(v43, v10);
        uint64_t v9 = v94;
        v46 += v93;
        --v44;
        uint64_t v42 = v102;
        uint64_t v45 = v99;
        if (!v44) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      uint64_t v91 = &_swiftEmptyArrayStorage;
LABEL_29:
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v9, 1, 1, v10);
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v81, v10);
    return v91;
  }
  else
  {
    id v41 = v107;
    sub_1001291B0();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    if (qword_10016AE00 != -1) {
      swift_once();
    }
    uint64_t v73 = sub_10012AB60();
    sub_10000D7A4(v73, (uint64_t)qword_100181BC8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v74 = sub_10012AB40();
    os_log_type_t v75 = sub_10012CD40();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v76 = 138543362;
      swift_errorRetain();
      uint64_t v78 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v107 = v78;
      sub_10012CF70();
      void *v77 = v78;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "WidgetDemo failed to decode entries. error=%{public}@", v76, 0xCu);
      sub_1000053D8(&qword_10016E7F0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return &_swiftEmptyArrayStorage;
  }
}

uint64_t sub_1000E8214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v24[1] = a3;
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  uint64_t v5 = type metadata accessor for WeatherDataViewModel();
  __chkstk_darwin(v5);
  uint64_t v25 = (uint64_t)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000053D8(&qword_10016B310);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)type metadata accessor for ForecastEntry(0);
  sub_1000EAE30(a1 + v16[7], (uint64_t)v9, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000EAEDC((uint64_t)v9, (uint64_t)v12, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, v17, 1, v5);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v5) == 1)
  {
    sub_1000235F8((uint64_t)v12, &qword_10016B310);
LABEL_8:
    uint64_t v18 = 1;
    uint64_t v19 = v27;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v19, v18, 1, (uint64_t)v16);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1000EAE84((uint64_t)v12, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    goto LABEL_8;
  }
  sub_1000EAEDC((uint64_t)v12, (uint64_t)v15, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
  sub_10012A5F0();
  sub_10012A5F0();
  char v21 = sub_10012CEE0();
  uint64_t v19 = v27;
  if (v21)
  {
    sub_100129240();
    uint64_t v22 = v25;
    sub_1000E8630(v25);
    sub_1000EAE84((uint64_t)v15, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = sub_100129300();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v19, a1, v23);
    sub_10000B114(a1 + v16[5], v19 + v16[5], &qword_10016B418);
    sub_1000EAE30(a1 + v16[6], v19 + v16[6], (void (*)(void))type metadata accessor for WidgetContext);
    sub_1000EAE30(v22, v19 + v16[7], (void (*)(void))type metadata accessor for WeatherDataViewModel);
    swift_storeEnumTagMultiPayload();
    sub_1000EAE84(v22, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v18 = 0;
  }
  else
  {
    sub_1000EAE84((uint64_t)v15, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    uint64_t v18 = 1;
  }
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v19, v18, 1, (uint64_t)v16);
}

uint64_t sub_1000E8630@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v98 = a1;
  uint64_t v3 = type metadata accessor for EventViewModel(0);
  uint64_t v92 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v107 = (uint64_t)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v112 = (char *)v91 - v6;
  uint64_t v7 = sub_1000053D8(&qword_10016B438);
  __chkstk_darwin(v7 - 8);
  uint64_t v97 = (uint64_t)v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000053D8(&qword_10016B420);
  __chkstk_darwin(v9 - 8);
  uint64_t v96 = (uint64_t)v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10012BDF0();
  uint64_t v113 = *(void *)(v111 - 8);
  uint64_t v11 = __chkstk_darwin(v111);
  uint64_t v106 = (char *)v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v110 = (char *)v91 - v13;
  uint64_t v14 = sub_1000053D8(&qword_10016B430);
  __chkstk_darwin(v14 - 8);
  uint64_t v102 = (uint64_t)v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000053D8(&qword_10016B428);
  __chkstk_darwin(v16 - 8);
  uint64_t v101 = (uint64_t)v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = (void *)sub_10012C3F0();
  uint64_t v18 = *(v109 - 1);
  uint64_t v19 = __chkstk_darwin(v109);
  uint64_t v105 = (char *)v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v108 = (char *)v91 - v21;
  uint64_t v22 = sub_10012C250();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10012A6B0();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100129330();
  __chkstk_darwin(v30);
  os_log_type_t v32 = (char *)v91 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void (**)(void))(v33 + 16);
  uint64_t v93 = v32;
  v34();
  uint64_t v35 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  uint64_t v36 = v2 + v35[5];
  unint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v94 = v29;
  v37(v29, v36, v26);
  uint64_t v38 = v2 + v35[6];
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v95 = v25;
  v39(v25, v38, v22);
  uint64_t v40 = *(void *)(v2 + v35[7]);
  int64_t v41 = *(void *)(v40 + 16);
  uint64_t v42 = &_swiftEmptyArrayStorage;
  uint64_t v99 = v35;
  uint64_t v100 = v2;
  if (v41)
  {
    int v114 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000EACA0(0, v41, 0);
    uint64_t v44 = *(void (**)(char *, uint64_t, void *))(v18 + 16);
    uint64_t v43 = v18 + 16;
    uint64_t v104 = v44;
    unint64_t v45 = (*(unsigned __int8 *)(v43 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 64);
    v91[1] = v40;
    unint64_t v103 = v45;
    uint64_t v46 = v40 + v45;
    uint64_t v47 = *(void *)(v43 + 56);
    uint64_t v48 = (void (**)(char *, void *))(v43 - 8);
    os_log_type_t v49 = (void (**)(char *, char *, void *))(v43 + 16);
    uint64_t v51 = (uint64_t)v108;
    uint64_t v50 = v109;
    uint64_t v52 = v43;
    do
    {
      unint64_t v53 = v105;
      uint64_t v54 = v52;
      v104(v105, v46, v50);
      sub_1000E9B98(v51);
      (*v48)(v53, v50);
      uint64_t v42 = v114;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000EACA0(0, v42[2] + 1, 1);
        uint64_t v42 = v114;
      }
      unint64_t v56 = v42[2];
      unint64_t v55 = v42[3];
      if (v56 >= v55 >> 1)
      {
        sub_1000EACA0(v55 > 1, v56 + 1, 1);
        uint64_t v42 = v114;
      }
      v42[2] = v56 + 1;
      unint64_t v57 = (char *)v42 + v103 + v56 * v47;
      uint64_t v51 = (uint64_t)v108;
      uint64_t v50 = v109;
      (*v49)(v57, v108, v109);
      int v114 = v42;
      v46 += v47;
      --v41;
      uint64_t v52 = v54;
    }
    while (v41);
    swift_bridgeObjectRelease();
    uint64_t v35 = v99;
    uint64_t v2 = v100;
  }
  unint64_t v58 = *(char **)(v2 + v35[8]);
  int64_t v59 = *((void *)v58 + 2);
  uint64_t v60 = (uint64_t)&_swiftEmptyArrayStorage;
  if (v59)
  {
    int v114 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000EAD04(0, v59, 0);
    uint64_t v61 = *(void **)(v113 + 16);
    uint64_t v62 = *(unsigned __int8 *)(v113 + 80);
    uint64_t v105 = v58;
    uint64_t v108 = (char *)((v62 + 32) & ~v62);
    uint64_t v109 = v61;
    uint64_t v63 = &v108[(void)v58];
    uint64_t v64 = *(void *)(v113 + 72);
    uint64_t v65 = (void (**)(char *, uint64_t))(v113 + 8);
    v113 += 16;
    unint64_t v66 = (void (**)(char *, char *, uint64_t))(v113 + 16);
    uint64_t v68 = (uint64_t)v110;
    uint64_t v67 = v111;
    do
    {
      unint64_t v69 = v106;
      ((void (*)(char *, char *, uint64_t))v109)(v106, v63, v67);
      sub_1000E9EB4(v68);
      (*v65)(v69, v67);
      uint64_t v60 = (uint64_t)v114;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000EAD04(0, *(void *)(v60 + 16) + 1, 1);
        uint64_t v60 = (uint64_t)v114;
      }
      unint64_t v71 = *(void *)(v60 + 16);
      unint64_t v70 = *(void *)(v60 + 24);
      if (v71 >= v70 >> 1)
      {
        sub_1000EAD04(v70 > 1, v71 + 1, 1);
        uint64_t v60 = (uint64_t)v114;
      }
      *(void *)(v60 + 16) = v71 + 1;
      uint64_t v72 = &v108[v60 + v71 * v64];
      uint64_t v68 = (uint64_t)v110;
      uint64_t v67 = v111;
      (*v66)(v72, v110, v111);
      int v114 = (void *)v60;
      v63 += v64;
      --v59;
    }
    while (v59);
    swift_bridgeObjectRelease();
    uint64_t v35 = v99;
    uint64_t v2 = v100;
  }
  sub_10000B114(v2 + v35[9], v101, &qword_10016B428);
  sub_10000B114(v2 + v35[10], v102, &qword_10016B430);
  uint64_t v73 = *(void *)(v2 + v35[11]);
  int64_t v74 = *(void *)(v73 + 16);
  os_log_type_t v75 = &_swiftEmptyArrayStorage;
  uint64_t v76 = v112;
  if (v74)
  {
    int v114 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000EADCC(0, v74, 0);
    unint64_t v77 = (*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
    uint64_t v113 = v73;
    uint64_t v78 = v73 + v77;
    uint64_t v79 = *(void *)(v92 + 72);
    os_log_type_t v75 = v114;
    do
    {
      uint64_t v80 = v107;
      sub_1000EAE30(v78, v107, (void (*)(void))type metadata accessor for EventViewModel);
      sub_1000EA320(v76);
      sub_1000EAE84(v80, (void (*)(void))type metadata accessor for EventViewModel);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000EADCC(0, v75[2] + 1, 1);
        os_log_type_t v75 = v114;
      }
      unint64_t v82 = v75[2];
      unint64_t v81 = v75[3];
      if (v82 >= v81 >> 1)
      {
        sub_1000EADCC(v81 > 1, v82 + 1, 1);
        os_log_type_t v75 = v114;
      }
      void v75[2] = v82 + 1;
      uint64_t v83 = (uint64_t)v75 + v77 + v82 * v79;
      uint64_t v76 = v112;
      sub_1000EAEDC((uint64_t)v112, v83, (void (*)(void))type metadata accessor for EventViewModel);
      v78 += v79;
      --v74;
    }
    while (v74);
    swift_bridgeObjectRelease();
    uint64_t v35 = v99;
    uint64_t v2 = v100;
  }
  uint64_t v84 = v2 + v35[12];
  uint64_t v85 = *(void *)v84;
  __int16 v86 = *(_WORD *)(v84 + 8);
  uint64_t v87 = v96;
  sub_10000B114(v2 + v35[13], v96, &qword_10016B420);
  uint64_t v88 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  uint64_t v89 = v97;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v97, 1, 1, v88);
  return sub_1000688E0((uint64_t)v42, v60, v101, v102, (uint64_t)v75, v98, v85, v86, v87, v89);
}

uint64_t sub_1000E9040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v102 = a2;
  uint64_t v103 = a3;
  uint64_t v90 = sub_10012CA90();
  sub_10000DB98();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_10000DCB4();
  uint64_t v91 = v7;
  sub_1000636C8();
  __chkstk_darwin(v8);
  uint64_t v92 = (char *)v83 - v9;
  uint64_t v10 = sub_100129220();
  sub_10000DB98();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_10000DCB4();
  uint64_t v87 = v14;
  sub_1000636C8();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)v83 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v83 - v19;
  uint64_t v101 = type metadata accessor for ForecastEntry(0);
  sub_10000DB98();
  uint64_t v96 = v21;
  __chkstk_darwin(v22);
  sub_10000DC50();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = sub_1000053D8(&qword_1001709C8);
  sub_10000B3FC();
  __chkstk_darwin(v27);
  sub_1000EB204(v28, v83[0]);
  uint64_t v29 = sub_1000053D8(&qword_1001709D0);
  uint64_t v30 = sub_10000DC9C(v29);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v33 = (unint64_t *)((char *)v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v31);
  uint64_t v104 = (char *)v83 - v34;
  uint64_t result = (uint64_t)sub_1000E9AF8();
  if ((result & 1) == 0) {
    return result;
  }
  unint64_t v36 = *(void *)(a1 + 16);
  uint64_t v105 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v109 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v88 = v5 + 8;
  unint64_t v37 = v36;
  uint64_t v94 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v38 = 0;
  uint64_t v108 = 0;
  *(void *)&long long v39 = 136446210;
  long long v84 = v39;
  v83[1] = (uint64_t)&type metadata for Any + 8;
  *(void *)&long long v39 = 138543362;
  long long v93 = v39;
  uint64_t v40 = (uint64_t *)v104;
  uint64_t v89 = v18;
  uint64_t v97 = v25;
  unint64_t v98 = v37;
  uint64_t v99 = v33;
  uint64_t v100 = v26;
  v83[0] = (uint64_t)v20;
  while (v38 == v37)
  {
    uint64_t v41 = 1;
    unint64_t v42 = v37;
LABEL_7:
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v33, v41, 1, v26);
    sub_10003BFD4((uint64_t)v33, (uint64_t)v40, &qword_1001709D0);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v26) == 1) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v107 = v42;
    uint64_t v54 = *v40;
    sub_1000EAEDC((uint64_t)v40 + *(int *)(v26 + 48), v25, (void (*)(void))type metadata accessor for ForecastEntry);
    if (qword_10016AE38 != -1) {
      swift_once();
    }
    uint64_t v55 = sub_10000D7A4(v10, (uint64_t)qword_100181C70);
    unint64_t v56 = *v105;
    (*v105)(v18, v55, v10);
    uint64_t v111 = v102;
    uint64_t v112 = v103;
    swift_bridgeObjectRetain();
    v113._countAndFlagsBits = 95;
    v113._object = (void *)0xE100000000000000;
    sub_10012CAF0(v113);
    uint64_t v110 = v54;
    v114._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v114);
    swift_bridgeObjectRelease();
    v115._countAndFlagsBits = 0x6E6F736A2ELL;
    v115._object = (void *)0xE500000000000000;
    sub_10012CAF0(v115);
    sub_1001291F0();
    swift_bridgeObjectRelease();
    uint64_t v106 = *v109;
    v106(v18, v10);
    sub_100128FD0();
    swift_allocObject();
    sub_100128FC0();
    sub_1000EB19C(&qword_100170A08, (void (*)(uint64_t))type metadata accessor for ForecastEntry);
    uint64_t v57 = v108;
    uint64_t v58 = sub_100128FB0();
    if (v57)
    {
      swift_release();
      uint64_t v108 = 0;
      uint64_t v33 = v99;
      uint64_t v26 = v100;
      if (qword_10016AE00 != -1) {
        swift_once();
      }
      uint64_t v63 = sub_10012AB60();
      sub_10000D7A4(v63, (uint64_t)qword_100181BC8);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v64 = sub_10012AB40();
      os_log_type_t v65 = sub_10012CD40();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        uint64_t v67 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = v93;
        swift_errorRetain();
        uint64_t v68 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v66 + 4) = v68;
        *uint64_t v67 = v68;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed writing entry to disk. error=%{public}@", (uint8_t *)v66, 0xCu);
        sub_1000053D8(&qword_10016E7F0);
        swift_arrayDestroy();
        sub_10000DBB4();
        sub_10000DBB4();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v25 = v97;
      uint64_t v40 = (uint64_t *)v104;
      unint64_t v69 = v106;
      unint64_t v38 = v107;
      swift_errorRelease();
      v69(v20, v10);
      uint64_t result = sub_1000EAE84(v25, (void (*)(void))type metadata accessor for ForecastEntry);
      unint64_t v37 = v98;
    }
    else
    {
      uint64_t v60 = v58;
      unint64_t v61 = v59;
      sub_10012CA80();
      uint64_t result = sub_10012CA60();
      if (!v62) {
        goto LABEL_29;
      }
      uint64_t v111 = result;
      uint64_t v112 = v62;
      sub_10012CA80();
      sub_10000822C();
      sub_10012CFA0();
      uint64_t v70 = sub_1000EB1E4();
      v71(v70);
      swift_bridgeObjectRelease();
      if (qword_10016AE00 != -1) {
        swift_once();
      }
      uint64_t v108 = 0;
      uint64_t v72 = sub_10012AB60();
      sub_10000D7A4(v72, (uint64_t)qword_100181BC8);
      uint64_t v73 = (uint64_t)v87;
      v56(v87, (uint64_t)v20, v10);
      int64_t v74 = sub_10012AB40();
      os_log_type_t v75 = sub_10012CD60();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        uint64_t v111 = v86;
        *(_DWORD *)uint64_t v76 = v84;
        os_log_t v85 = v74;
        uint64_t v18 = v89;
        v56(v89, v73, v10);
        uint64_t v77 = sub_10012CAB0();
        *(void *)(v76 + 4) = sub_100123564(v77, v78, &v111);
        swift_bridgeObjectRelease();
        uint64_t v79 = (void (*)(void))v106;
        sub_10006D3C8();
        v79();
        os_log_t v80 = v85;
        _os_log_impl((void *)&_mh_execute_header, v85, v75, "Demo entries to disk: %{public}s.", (uint8_t *)v76, 0xCu);
        swift_arrayDestroy();
        sub_10000DBB4();
        sub_10000DBB4();
        sub_1000EB144(v60, v61);

        swift_release();
        uint64_t v81 = v83[0];
        sub_10006D3C8();
        v79();
        uint64_t v25 = v97;
        uint64_t result = sub_1000EAE84(v97, (void (*)(void))type metadata accessor for ForecastEntry);
        uint64_t v20 = (char *)v81;
      }
      else
      {
        sub_1000EB144(v60, v61);

        swift_release();
        unint64_t v82 = (void (*)(void))v106;
        sub_10006D3C8();
        v82();
        sub_10006D3C8();
        v82();
        uint64_t v25 = v97;
        uint64_t result = sub_1000EAE84(v97, (void (*)(void))type metadata accessor for ForecastEntry);
        uint64_t v18 = v89;
      }
      uint64_t v33 = v99;
      uint64_t v26 = v100;
      uint64_t v40 = (uint64_t *)v104;
      unint64_t v37 = v98;
      unint64_t v38 = v107;
    }
  }
  if (v38 < v37)
  {
    unint64_t v107 = v38 + 1;
    sub_1000EB228();
    uint64_t v46 = v44 + v43 + *(void *)(v45 + 72) * v38;
    uint64_t v47 = v25;
    uint64_t v48 = v10;
    os_log_type_t v49 = v18;
    uint64_t v50 = v20;
    unint64_t v51 = v38;
    uint64_t v52 = v95 + *(int *)(v26 + 48);
    sub_1000EAE30(v46, v52, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v53 = (uint64_t)v33 + *(int *)(v26 + 48);
    *uint64_t v33 = v51;
    uint64_t v20 = v50;
    uint64_t v18 = v49;
    uint64_t v10 = v48;
    uint64_t v25 = v47;
    sub_1000EAEDC(v52, v53, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v41 = 0;
    unint64_t v42 = v107;
    goto LABEL_7;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

id sub_1000E9A6C()
{
  return sub_1000EB220();
}

uint64_t sub_1000E9A84()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for DemoManager()
{
  return self;
}

id sub_1000E9AE0()
{
  return sub_1000EB220();
}

id sub_1000E9AF8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  id result = sub_1000EAA90(v2, v1);
  if (result)
  {
    uint64_t v4 = result;
    NSString v5 = sub_10012CA20();
    id v6 = [v4 BOOLForKey:v5];

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E9B98@<X0>(uint64_t a1@<X8>)
{
  v17[7] = a1;
  uint64_t v1 = sub_100129E20();
  __chkstk_darwin(v1 - 8);
  v17[6] = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100129B10();
  __chkstk_darwin(v3 - 8);
  void v17[5] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10012BBA0();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = sub_1000053D8(&qword_10016B060);
  __chkstk_darwin(v6 - 8);
  v17[4] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100129300();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = sub_100129330();
  __chkstk_darwin(v13 - 8);
  sub_10012C3A0();
  sub_10012C3C0();
  sub_100129250();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_10012C340();
  uint64_t v14 = sub_10012C330();
  v17[2] = v15;
  v17[3] = v14;
  v17[1] = sub_10012C380();
  sub_10012C3E0();
  sub_10012C360();
  sub_10012C370();
  sub_10012C350();
  sub_10012C3D0();
  return sub_10012C3B0();
}

uint64_t sub_1000E9EB4@<X0>(uint64_t a1@<X8>)
{
  v30[15] = a1;
  uint64_t v1 = sub_100129E70();
  __chkstk_darwin(v1 - 8);
  v30[14] = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000053D8(&qword_10016B408);
  __chkstk_darwin(v3 - 8);
  v30[13] = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000053D8(&qword_1001709E0);
  __chkstk_darwin(v5 - 8);
  v30[12] = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10012A530();
  __chkstk_darwin(v7 - 8);
  v30[11] = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100129B10();
  __chkstk_darwin(v9 - 8);
  v30[5] = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10012BBA0();
  __chkstk_darwin(v11 - 8);
  v30[6] = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000053D8(&qword_10016B060);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  v30[7] = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v30[8] = (char *)v30 - v16;
  uint64_t v17 = sub_100129300();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v30[9] = (char *)v30 - v22;
  uint64_t v23 = sub_100129330();
  __chkstk_darwin(v23 - 8);
  v30[10] = (char *)v30 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012BD50();
  sub_10012BD80();
  sub_100129250();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  sub_10012BD90();
  sub_10012BD70();
  sub_10012BDC0();
  sub_10012BCD0();
  sub_10012BCF0();
  uint64_t v25 = sub_10012BD30();
  v30[3] = v26;
  v30[4] = v25;
  uint64_t v27 = sub_10012BD00();
  v30[1] = v28;
  v30[2] = v27;
  sub_10012BDD0();
  sub_10012BCE0();
  sub_10012BD10();
  sub_10012BDE0();
  sub_10012BCC0();
  sub_10012BDA0();
  sub_10012BDB0();
  return sub_10012BD60();
}

uint64_t sub_1000EA320@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000053D8(&qword_10016B9F8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v58 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v56 = (char *)&v49 - v7;
  uint64_t v8 = sub_100129300();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000053D8(&qword_10016C7B0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v61 = (uint64_t)&v49 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v49 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v49 - v21;
  int v23 = *v2;
  int v54 = v2[1];
  int v55 = v23;
  uint64_t v24 = (int *)type metadata accessor for EventViewModel(0);
  sub_10000B114((uint64_t)&v2[v24[6]], (uint64_t)v20, &qword_10016C7B0);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v20, 1, v8) == 1)
  {
    sub_1000235F8((uint64_t)v20, &qword_10016C7B0);
    uint64_t v25 = 1;
  }
  else
  {
    sub_100129250();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v20, v8);
    uint64_t v25 = 0;
  }
  uint64_t v57 = v22;
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v22, v25, 1, v8);
  sub_10000B114((uint64_t)&v2[v24[7]], (uint64_t)v15, &qword_10016C7B0);
  int v26 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v8);
  uint64_t v27 = v61;
  uint64_t v60 = v9;
  if (v26 == 1)
  {
    sub_1000235F8((uint64_t)v15, &qword_10016C7B0);
    uint64_t v28 = 1;
  }
  else
  {
    sub_100129250();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    uint64_t v28 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v27, v28, 1, v8);
  unint64_t v59 = v11;
  sub_100129250();
  uint64_t v29 = &v2[v24[9]];
  uint64_t v30 = *(void *)v29;
  uint64_t v31 = *((void *)v29 + 1);
  uint64_t v32 = &v2[v24[10]];
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *((void *)v32 + 1);
  uint64_t v51 = v30;
  uint64_t v52 = v33;
  uint64_t v35 = v24[12];
  unint64_t v36 = &v2[v24[11]];
  uint64_t v37 = *((void *)v36 + 1);
  uint64_t v50 = *(void *)v36;
  uint64_t v38 = *(void *)&v2[v35];
  uint64_t v39 = v58;
  sub_10000B114((uint64_t)&v2[v24[13]], v58, &qword_10016B9F8);
  uint64_t v40 = sub_100129C10();
  int v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v41 == 1)
  {
    sub_1000235F8(v39, &qword_10016B9F8);
    uint64_t v42 = 1;
    uint64_t v43 = (uint64_t)v56;
  }
  else
  {
    uint64_t v43 = (uint64_t)v56;
    sub_1000EA808();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v39, v40);
    uint64_t v42 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v43, v42, 1, v40);
  *a1 = v55;
  a1[1] = v54;
  sub_10003BFD4((uint64_t)v57, (uint64_t)&a1[v24[6]], &qword_10016C7B0);
  sub_10003BFD4(v61, (uint64_t)&a1[v24[7]], &qword_10016C7B0);
  (*(void (**)(unsigned char *, char *, uint64_t))(v60 + 32))(&a1[v24[8]], v59, v8);
  uint64_t v44 = &a1[v24[9]];
  *uint64_t v44 = v51;
  v44[1] = v31;
  uint64_t v45 = &a1[v24[10]];
  uint64_t v46 = v53;
  *uint64_t v45 = v52;
  v45[1] = v46;
  uint64_t v47 = &a1[v24[11]];
  *uint64_t v47 = v50;
  v47[1] = v37;
  *(void *)&a1[v24[12]] = v38;
  return sub_10003BFD4(v43, (uint64_t)&a1[v24[13]], &qword_10016B9F8);
}

uint64_t sub_1000EA808()
{
  uint64_t v0 = sub_100129BC0();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_1000053D8(&qword_10016C7B0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v17 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v17 - v11;
  sub_100129BD0();
  uint64_t v13 = sub_100129300();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v13) == 1)
  {
    sub_1000235F8((uint64_t)v10, &qword_10016C7B0);
    uint64_t v14 = 1;
  }
  else
  {
    sub_100129250();
    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v10, v13);
    uint64_t v14 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, v14, 1, v13);
  sub_100129C00();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v4, 1, v13) == 1)
  {
    sub_1000235F8((uint64_t)v4, &qword_10016C7B0);
    uint64_t v15 = 1;
  }
  else
  {
    sub_100129250();
    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v4, v13);
    uint64_t v15 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v7, v15, 1, v13);
  sub_100129BF0();
  return sub_100129BE0();
}

id sub_1000EAA90(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = sub_10012CA20();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithSuiteName:v3];

  return v4;
}

uint64_t sub_1000EAAF4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1000EAB24(a1, a2, a3, (void (*)(void))&type metadata accessor for DailyForecastViewModel);
}

uint64_t sub_1000EAB0C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1000EAB24(a1, a2, a3, (void (*)(void))&type metadata accessor for HourlyForecastBannerViewModel);
}

uint64_t sub_1000EAB24(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0
    || ((a4(0), sub_10000B3FC(), v8 = *(void *)(v7 + 72) * a2, unint64_t v9 = a3 + v8, v10 = a1 + v8, v9 > a1)
      ? (BOOL v11 = v10 > a3)
      : (BOOL v11 = 0),
        v11))
  {
    sub_100047184();
    uint64_t result = sub_10012D0A0();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1000EAC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E8214(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

size_t sub_1000EAC3C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000EAF78(a1, a2, a3, *v3, &qword_1001709F8, (uint64_t (*)(void))&type metadata accessor for MinuteCondition, sub_100046480, (void (*)(void))&type metadata accessor for MinuteCondition);
  *NSString v3 = result;
  return result;
}

size_t sub_1000EACA0(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000EAF78(a1, a2, a3, *v3, &qword_10016C7F8, (uint64_t (*)(void))&type metadata accessor for HourlyForecastBannerViewModel, sub_100046668, (void (*)(void))&type metadata accessor for HourlyForecastBannerViewModel);
  *NSString v3 = result;
  return result;
}

size_t sub_1000EAD04(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000EAF78(a1, a2, a3, *v3, &qword_10016C7F0, (uint64_t (*)(void))&type metadata accessor for DailyForecastViewModel, sub_100046680, (void (*)(void))&type metadata accessor for DailyForecastViewModel);
  *NSString v3 = result;
  return result;
}

size_t sub_1000EAD68(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000EAF78(a1, a2, a3, *v3, &qword_100170A00, (uint64_t (*)(void))&type metadata accessor for HourWeather, sub_100046698, (void (*)(void))&type metadata accessor for HourWeather);
  *NSString v3 = result;
  return result;
}

size_t sub_1000EADCC(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000EAF78(a1, a2, a3, *v3, &qword_10016C7E0, type metadata accessor for EventViewModel, sub_100046498, (void (*)(void))type metadata accessor for EventViewModel);
  *NSString v3 = result;
  return result;
}

uint64_t sub_1000EAE30(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  uint64_t v4 = sub_10000B430();
  v5(v4);
  return a2;
}

uint64_t sub_1000EAE84(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3FC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1000EAEDC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  uint64_t v4 = sub_10003C1BC();
  v5(v4);
  return a2;
}

size_t sub_1000EAF30(size_t a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_1000EAF78(a1, a2, a3, a4, &qword_1001709F8, (uint64_t (*)(void))&type metadata accessor for MinuteCondition, sub_100046480, (void (*)(void))&type metadata accessor for MinuteCondition);
}

size_t sub_1000EAF78(size_t result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(unint64_t, uint64_t, unint64_t), void (*a8)(void))
{
  char v12 = result;
  if (a3)
  {
    unint64_t v13 = *(void *)(a4 + 24);
    uint64_t v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v14 = a2;
      }
    }
  }
  else
  {
    uint64_t v14 = a2;
  }
  uint64_t v15 = *(void *)(a4 + 16);
  if (v14 <= v15) {
    uint64_t v16 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v16 = v14;
  }
  if (!v16)
  {
    uint64_t v20 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000053D8(a5);
  uint64_t v17 = *(void *)(a6(0) - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v20);
  if (!v18)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v19 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_24;
  }
  void v20[2] = v15;
  v20[3] = 2 * ((uint64_t)(result - v19) / v18);
LABEL_19:
  a6(0);
  sub_1000EB228();
  unint64_t v23 = (unint64_t)v20 + v22;
  unint64_t v24 = a4 + v22;
  if (v12)
  {
    a7(v24, v15, v23);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000EAB24(v24, v15, v23, a8);
  }
  swift_release();
  return (size_t)v20;
}

uint64_t sub_1000EB130(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000EB144(a1, a2);
  }
  return a1;
}

uint64_t sub_1000EB144(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000EB19C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EB1E4()
{
  return v0;
}

void sub_1000EB204(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

id sub_1000EB220()
{
  return sub_1000E9AF8();
}

ValueMetadata *type metadata accessor for ErrorViewAttributes()
{
  return &type metadata for ErrorViewAttributes;
}

void *sub_1000EB244(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000D930((uint64_t)a1, &qword_10016B410);
    sub_1000053D8(&qword_10016B410);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_10012C800();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)((char *)a1 + v7);
    unint64_t v9 = (void *)((char *)a2 + v7);
    sub_10000D930((uint64_t)a1 + v7, &qword_10016B9D8);
    sub_1000053D8(&qword_10016B9D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_10012AFE0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      void *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = a3[6];
  char v12 = (char *)a1 + v11;
  unint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  char v15 = v13[8];
  sub_10000886C(*(void *)v13, v15);
  uint64_t v16 = *(void *)v12;
  char v17 = v12[8];
  *(void *)char v12 = v14;
  v12[8] = v15;
  sub_100008BF8(v16, v17);
  if (a1 != a2)
  {
    uint64_t v18 = a3[7];
    unint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    sub_10000D930((uint64_t)a1 + v18, &qword_10016B9E0);
    sub_1000053D8(&qword_10016B9E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = sub_10012B2D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *unint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v120 = a3;
  uint64_t v121 = a2;
  uint64_t v22 = a3[8];
  unint64_t v23 = (char *)a1 + v22;
  unint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = sub_100129300();
  uint64_t v117 = *(void *)(v25 - 8);
  uint64_t v118 = v25;
  (*(void (**)(char *, char *))(v117 + 24))(v23, v24);
  int v26 = (int *)type metadata accessor for ForecastEntry(0);
  uint64_t v27 = v26[5];
  uint64_t v28 = &v23[v27];
  uint64_t v29 = &v24[v27];
  uint64_t v30 = sub_10012C920();
  int v31 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v28, 1, v30);
  int v32 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v29, 1, v30);
  uint64_t v122 = a1;
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v28, 0, 1, v30);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v33 = *(void *)(v30 - 8);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v30);
LABEL_19:
    uint64_t v34 = sub_1000053D8(&qword_10016B418);
    memcpy(v28, v29, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v28, v29, v30);
LABEL_20:
  uint64_t v35 = v26[6];
  unint64_t v36 = &v23[v35];
  uint64_t v37 = &v24[v35];
  *(void *)unint64_t v36 = *(void *)&v24[v35];
  *((void *)v36 + 1) = *(void *)&v24[v35 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v36 + 2) = *((void *)v37 + 2);
  *((void *)v36 + 3) = *((void *)v37 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v36 + 4) = *((void *)v37 + 4);
  *((void *)v36 + 5) = *((void *)v37 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36[48] = v37[48];
  v36[49] = v37[49];
  v36[50] = v37[50];
  v36[51] = v37[51];
  uint64_t v38 = type metadata accessor for WidgetContext();
  uint64_t v39 = *(int *)(v38 + 40);
  uint64_t v40 = &v36[v39];
  int v41 = &v37[v39];
  uint64_t v42 = sub_100129220();
  int v43 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v42);
  int v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v42);
  uint64_t v119 = v42;
  if (v43)
  {
    uint64_t v45 = v122;
    if (v44)
    {
      uint64_t v46 = sub_1000053D8(&qword_10016B420);
      memcpy(v40, v41, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 16))(v40, v41, v119);
      uint64_t v45 = v122;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v40, 0, 1, v119);
    }
  }
  else
  {
    uint64_t v47 = *(void *)(v42 - 8);
    if (v44)
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v40, v42);
      uint64_t v48 = sub_1000053D8(&qword_10016B420);
      memcpy(v40, v41, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v40, v41, v42);
    }
    uint64_t v45 = v122;
  }
  uint64_t v49 = *(int *)(v38 + 44);
  uint64_t v50 = &v36[v49];
  uint64_t v51 = &v37[v49];
  *(void *)uint64_t v50 = *(void *)&v37[v49];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50[8] = v51[8];
  uint64_t v52 = v121;
  if (v45 != v121)
  {
    uint64_t v53 = v26[7];
    int v54 = &v23[v53];
    int v55 = &v24[v53];
    sub_1000F15FC((uint64_t)v54, (void (*)(void))type metadata accessor for ForecastEntry.Model);
    uint64_t v56 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for WeatherDataViewModel();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v68 = sub_10012BE90();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(v54, v55, v68);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v58 = sub_100129330();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v54, v55, v58);
        uint64_t v59 = type metadata accessor for InstantWeatherViewModel();
        uint64_t v60 = *(int *)(v59 + 20);
        uint64_t v61 = &v54[v60];
        uint64_t v62 = &v55[v60];
        uint64_t v63 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
        uint64_t v64 = *(int *)(v59 + 24);
        os_log_type_t v65 = &v54[v64];
        uint64_t v66 = &v55[v64];
        uint64_t v67 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
      }
      else
      {
        uint64_t v69 = sub_100129330();
        uint64_t v70 = (void (**)(void *, const void *))(*(void *)(v69 - 8) + 16);
        Swift::String v115 = *v70;
        uint64_t v116 = v69;
        (*v70)(v54, v55);
        unint64_t v71 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v72 = v71[5];
        uint64_t v73 = &v54[v72];
        int64_t v74 = &v55[v72];
        uint64_t v75 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 16))(v73, v74, v75);
        uint64_t v76 = v71[6];
        uint64_t v77 = &v54[v76];
        unint64_t v78 = &v55[v76];
        uint64_t v79 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
        *(void *)&v54[v71[7]] = *(void *)&v55[v71[7]];
        *(void *)&v54[v71[8]] = *(void *)&v55[v71[8]];
        uint64_t v123 = v71;
        uint64_t v80 = v71[9];
        uint64_t v81 = &v54[v80];
        unint64_t v82 = &v55[v80];
        uint64_t v83 = (int *)type metadata accessor for AirQualityViewModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, (uint64_t)v83))
        {
          uint64_t v84 = sub_1000053D8(&qword_10016B428);
          memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v115)(v81, v82, v116);
          (*(void (**)(char *, char *, uint64_t))(v117 + 16))(&v81[v83[5]], &v82[v83[5]], v118);
          *(void *)&v81[v83[6]] = *(void *)&v82[v83[6]];
          uint64_t v85 = v83[7];
          uint64_t v86 = &v81[v85];
          uint64_t v87 = &v82[v85];
          uint64_t v88 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16))(v86, v87, v88);
          uint64_t v89 = v83[8];
          uint64_t v90 = &v81[v89];
          uint64_t v91 = &v82[v89];
          uint64_t v92 = sub_100129C50();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 16))(v90, v91, v92);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, (uint64_t)v83);
        }
        uint64_t v93 = v123[10];
        uint64_t v94 = &v54[v93];
        uint64_t v95 = &v55[v93];
        uint64_t v96 = sub_10012C6B0();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v95, 1, v96))
        {
          uint64_t v97 = sub_1000053D8(&qword_10016B430);
          memcpy(v94, v95, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 16))(v94, v95, v96);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v94, 0, 1, v96);
        }
        *(void *)&v54[v123[11]] = *(void *)&v55[v123[11]];
        uint64_t v98 = v123[12];
        uint64_t v99 = &v54[v98];
        uint64_t v100 = &v55[v98];
        uint64_t v101 = *(void *)v100;
        *((_WORD *)v99 + 4) = *((_WORD *)v100 + 4);
        *(void *)uint64_t v99 = v101;
        uint64_t v102 = v123[13];
        uint64_t v103 = &v54[v102];
        uint64_t v104 = &v55[v102];
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, v119))
        {
          uint64_t v105 = sub_1000053D8(&qword_10016B420);
          memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 16))(v103, v104, v119);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, v119);
        }
        uint64_t v106 = v123[14];
        unint64_t v107 = &v54[v106];
        uint64_t v108 = &v55[v106];
        uint64_t v109 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v108, 1, v109))
        {
          uint64_t v110 = sub_1000053D8(&qword_10016B438);
          memcpy(v107, v108, *(void *)(*(void *)(v110 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v107, v108, v118);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v107, 0, 1, v109);
        }
        uint64_t v52 = v121;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
    }
  }
  uint64_t v111 = v120[9];
  uint64_t v112 = (uint64_t)v45 + v111;
  uint64_t v113 = (uint64_t)v52 + v111;
  *(void *)((char *)v45 + v111) = *(void *)((char *)v52 + v111);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v112 + 8) = *(void *)(v113 + 8);
  swift_retain();
  swift_release();
  *((unsigned char *)v45 + v120[10]) = *((unsigned char *)v52 + v120[10]);
  return v45;
}

char *sub_1000EBF44(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000D930((uint64_t)a1, &qword_10016B410);
    uint64_t v6 = sub_1000053D8(&qword_10016B410);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_10012C800();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = a3[5];
    unint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    sub_10000D930((uint64_t)&a1[v8], &qword_10016B9D8);
    uint64_t v11 = sub_1000053D8(&qword_10016B9D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10012AFE0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  char v15 = &a2[v13];
  uint64_t v16 = *(void *)v15;
  LOBYTE(v15) = v15[8];
  uint64_t v17 = *(void *)v14;
  char v18 = v14[8];
  *(void *)uint64_t v14 = v16;
  v14[8] = (char)v15;
  sub_100008BF8(v17, v18);
  if (a1 != a2)
  {
    uint64_t v19 = a3[7];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    sub_10000D930((uint64_t)&a1[v19], &qword_10016B9E0);
    uint64_t v22 = sub_1000053D8(&qword_10016B9E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = sub_10012B2D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
  }
  uint64_t v124 = a3;
  uint64_t v125 = a2;
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  int v26 = &a2[v24];
  uint64_t v27 = sub_100129300();
  uint64_t v121 = *(void *)(v27 - 8);
  uint64_t v122 = v27;
  (*(void (**)(char *, char *))(v121 + 40))(v25, v26);
  uint64_t v28 = (int *)type metadata accessor for ForecastEntry(0);
  uint64_t v29 = v28[5];
  uint64_t v30 = &v25[v29];
  int v31 = &v26[v29];
  uint64_t v32 = sub_10012C920();
  int v33 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v30, 1, v32);
  int v34 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v31, 1, v32);
  uint64_t v126 = a1;
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v30, 0, 1, v32);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v35 = *(void *)(v32 - 8);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v32);
LABEL_17:
    uint64_t v36 = sub_1000053D8(&qword_10016B418);
    memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v30, v31, v32);
LABEL_18:
  uint64_t v37 = v28[6];
  uint64_t v38 = &v25[v37];
  uint64_t v39 = &v26[v37];
  uint64_t v40 = *(void *)&v26[v37 + 8];
  *(void *)uint64_t v38 = *(void *)&v26[v37];
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  uint64_t v41 = *((void *)v39 + 3);
  *((void *)v38 + 2) = *((void *)v39 + 2);
  *((void *)v38 + 3) = v41;
  swift_bridgeObjectRelease();
  uint64_t v42 = *((void *)v39 + 5);
  *((void *)v38 + 4) = *((void *)v39 + 4);
  *((void *)v38 + 5) = v42;
  swift_bridgeObjectRelease();
  *((_WORD *)v38 + 24) = *((_WORD *)v39 + 24);
  v38[50] = v39[50];
  v38[51] = v39[51];
  uint64_t v43 = type metadata accessor for WidgetContext();
  uint64_t v44 = *(int *)(v43 + 40);
  uint64_t v45 = &v38[v44];
  uint64_t v46 = &v39[v44];
  uint64_t v47 = sub_100129220();
  int v48 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v45, 1, v47);
  int v49 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v47);
  uint64_t v123 = v47;
  if (v48)
  {
    uint64_t v50 = v126;
    if (v49)
    {
      uint64_t v51 = sub_1000053D8(&qword_10016B420);
      memcpy(v45, v46, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 32))(v45, v46, v123);
      uint64_t v50 = v126;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v123);
    }
  }
  else
  {
    uint64_t v52 = *(void *)(v47 - 8);
    if (v49)
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v45, v47);
      uint64_t v53 = sub_1000053D8(&qword_10016B420);
      memcpy(v45, v46, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v45, v46, v47);
    }
    uint64_t v50 = v126;
  }
  uint64_t v54 = *(int *)(v43 + 44);
  int v55 = &v38[v54];
  uint64_t v56 = &v39[v54];
  *(void *)int v55 = *(void *)&v39[v54];
  swift_bridgeObjectRelease();
  v55[8] = v56[8];
  uint64_t v57 = v125;
  if (v50 != v125)
  {
    uint64_t v58 = v28[7];
    uint64_t v59 = &v25[v58];
    uint64_t v60 = &v26[v58];
    sub_1000F15FC((uint64_t)v59, (void (*)(void))type metadata accessor for ForecastEntry.Model);
    uint64_t v61 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for WeatherDataViewModel();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v73 = sub_10012BE90();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 32))(v59, v60, v73);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v63 = sub_100129330();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v59, v60, v63);
        uint64_t v64 = type metadata accessor for InstantWeatherViewModel();
        uint64_t v65 = *(int *)(v64 + 20);
        uint64_t v66 = &v59[v65];
        uint64_t v67 = &v60[v65];
        uint64_t v68 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v66, v67, v68);
        uint64_t v69 = *(int *)(v64 + 24);
        uint64_t v70 = &v59[v69];
        unint64_t v71 = &v60[v69];
        uint64_t v72 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 32))(v70, v71, v72);
      }
      else
      {
        uint64_t v74 = sub_100129330();
        uint64_t v75 = *(void (**)(char *, char *))(*(void *)(v74 - 8) + 32);
        uint64_t v120 = v74;
        v75(v59, v60);
        uint64_t v76 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v77 = v76[5];
        unint64_t v78 = &v59[v77];
        uint64_t v79 = &v60[v77];
        uint64_t v80 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
        uint64_t v81 = v76[6];
        unint64_t v82 = &v59[v81];
        uint64_t v83 = &v60[v81];
        uint64_t v84 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 32))(v82, v83, v84);
        *(void *)&v59[v76[7]] = *(void *)&v60[v76[7]];
        *(void *)&v59[v76[8]] = *(void *)&v60[v76[8]];
        uint64_t v85 = v76[9];
        uint64_t v86 = &v59[v85];
        uint64_t v87 = &v60[v85];
        uint64_t v88 = (int *)type metadata accessor for AirQualityViewModel();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v87, 1, (uint64_t)v88))
        {
          uint64_t v89 = sub_1000053D8(&qword_10016B428);
          memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v75)(v86, v87, v120);
          (*(void (**)(char *, char *, uint64_t))(v121 + 32))(&v86[v88[5]], &v87[v88[5]], v122);
          *(void *)&v86[v88[6]] = *(void *)&v87[v88[6]];
          uint64_t v90 = v88[7];
          uint64_t v91 = (uint64_t)v86;
          uint64_t v92 = &v86[v90];
          uint64_t v93 = &v87[v90];
          uint64_t v94 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 32))(v92, v93, v94);
          uint64_t v95 = v88[8];
          uint64_t v96 = v91 + v95;
          uint64_t v97 = &v87[v95];
          uint64_t v98 = sub_100129C50();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v98 - 8) + 32))(v96, v97, v98);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v91, 0, 1, (uint64_t)v88);
        }
        uint64_t v99 = v76[10];
        uint64_t v100 = &v59[v99];
        uint64_t v101 = &v60[v99];
        uint64_t v102 = sub_10012C6B0();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v101, 1, v102))
        {
          uint64_t v103 = sub_1000053D8(&qword_10016B430);
          memcpy(v100, v101, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 32))(v100, v101, v102);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v100, 0, 1, v102);
        }
        *(void *)&v59[v76[11]] = *(void *)&v60[v76[11]];
        uint64_t v104 = v76[12];
        uint64_t v105 = &v59[v104];
        uint64_t v106 = &v60[v104];
        *(void *)uint64_t v105 = *(void *)v106;
        *((_WORD *)v105 + 4) = *((_WORD *)v106 + 4);
        uint64_t v107 = v76[13];
        uint64_t v108 = &v59[v107];
        uint64_t v109 = &v60[v107];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v60[v107], 1, v123))
        {
          uint64_t v110 = sub_1000053D8(&qword_10016B420);
          memcpy(v108, v109, *(void *)(*(void *)(v110 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 32))(v108, v109, v123);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v108, 0, 1, v123);
        }
        uint64_t v111 = v76[14];
        uint64_t v112 = &v59[v111];
        uint64_t v113 = &v60[v111];
        uint64_t v114 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v113, 1, v114))
        {
          uint64_t v115 = sub_1000053D8(&qword_10016B438);
          memcpy(v112, v113, *(void *)(*(void *)(v115 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v112, v113, v122);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v112, 0, 1, v114);
        }
        uint64_t v57 = v125;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
    }
  }
  uint64_t v116 = v124[9];
  uint64_t v117 = &v50[v116];
  uint64_t v118 = &v57[v116];
  *(void *)&v50[v116] = *(void *)&v57[v116];
  swift_bridgeObjectRelease();
  *((void *)v117 + 1) = *((void *)v118 + 1);
  swift_release();
  v50[v124[10]] = v57[v124[10]];
  return v50;
}

uint64_t sub_1000ECBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000ECBFC);
}

uint64_t sub_1000ECBFC(uint64_t a1, uint64_t a2, int *a3)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_10:
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
  }
  sub_1000053D8(&qword_10016B9D0);
  sub_10000B3D0();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v12 = a3[5];
LABEL_9:
    uint64_t v9 = a1 + v12;
    goto LABEL_10;
  }
  sub_1000053D8(&qword_10016C140);
  sub_10000B3D0();
  if (*(_DWORD *)(v14 + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v12 = a3[7];
    goto LABEL_9;
  }
  type metadata accessor for ForecastEntry(0);
  sub_10000B3D0();
  if (*(_DWORD *)(v16 + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = a3[8];
    goto LABEL_9;
  }
  unint64_t v18 = *(void *)(a1 + a3[9]);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

uint64_t sub_1000ECD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ECD18);
}

void sub_1000ECD18(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_1000053D8(&qword_10016B9D0);
    sub_10000B3D0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[5];
    }
    else
    {
      sub_1000053D8(&qword_10016C140);
      sub_10000B3D0();
      if (*(_DWORD *)(v16 + 84) == a3)
      {
        uint64_t v10 = v15;
        uint64_t v14 = a4[7];
      }
      else
      {
        type metadata accessor for ForecastEntry(0);
        sub_10000B3D0();
        if (*(_DWORD *)(v18 + 84) != a3)
        {
          *(void *)(a1 + a4[9]) = (a2 - 1);
          return;
        }
        uint64_t v10 = v17;
        uint64_t v14 = a4[8];
      }
    }
    uint64_t v11 = a1 + v14;
  }

  _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t type metadata accessor for DailyForecastContentView()
{
  uint64_t result = qword_100170A68;
  if (!qword_100170A68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000ECE64()
{
  sub_10008CF4C(319, (unint64_t *)&qword_10016B4B0, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v0 <= 0x3F)
  {
    sub_10008CF4C(319, (unint64_t *)&unk_10016C8F0, (void (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v1 <= 0x3F)
    {
      sub_10008CF4C(319, (unint64_t *)&unk_10016C1B0, (void (*)(uint64_t))&type metadata accessor for Font.Context);
      if (v2 <= 0x3F)
      {
        type metadata accessor for ForecastEntry(319);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_1000ED014()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000ED030@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10012AFE0();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10012C800();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000053D8(&qword_10016B310);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (int *)type metadata accessor for DailyForecastContentView();
  uint64_t v20 = v2 + v19[8];
  uint64_t v21 = type metadata accessor for ForecastEntry(0);
  sub_1000F15A8(v20 + *(int *)(v21 + 28), (uint64_t)v12, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000F147C((uint64_t)v12, (uint64_t)v15, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v22 = type metadata accessor for WeatherDataViewModel();
    uint64_t v23 = (uint64_t)v15;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v22 = type metadata accessor for WeatherDataViewModel();
    uint64_t v23 = (uint64_t)v15;
    uint64_t v24 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v23, v24, 1, v22);
  type metadata accessor for WeatherDataViewModel();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v22) == 1)
  {
    sub_10000D930((uint64_t)v15, &qword_10016B310);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1000F147C((uint64_t)v15, (uint64_t)v18, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      sub_10008F554((uint64_t)v9);
      sub_10008F5C4((uint64_t)v6);
      uint64_t v26 = v19[10];
      uint64_t v27 = v2 + v19[6];
      uint64_t v28 = *(void *)v27;
      char v29 = *(unsigned char *)(v27 + 8);
      char v30 = *(unsigned char *)(v2 + v26);
      sub_10000886C(*(void *)v27, v29);
      char v31 = sub_10008F2A4(v28, v29);
      sub_100008BF8(v28, v29);
      type metadata accessor for HourlyBannerViewAttributesFactory();
      swift_allocObject();
      sub_1001037A8((uint64_t)v9, (uint64_t)v6, v30, v31 & 1);
      sub_1001032F0((uint64_t)v18);
      swift_release();
      sub_1000F15FC((uint64_t)v18, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      uint64_t v25 = 0;
      goto LABEL_10;
    }
    sub_1000F15FC((uint64_t)v15, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  }
  uint64_t v25 = 1;
LABEL_10:
  uint64_t v32 = sub_10012C040();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, v25, 1, v32);
}

uint64_t sub_1000ED3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v4 = sub_10012AFE0();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10012C800();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000053D8(&qword_10016B310);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DailyForecastContentView();
  uint64_t v20 = v3 + *(int *)(v19 + 32);
  uint64_t v21 = type metadata accessor for ForecastEntry(0);
  sub_1000F15A8(v20 + *(int *)(v21 + 28), (uint64_t)v12, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000F147C((uint64_t)v12, (uint64_t)v15, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v22 = type metadata accessor for WeatherDataViewModel();
    uint64_t v23 = (uint64_t)v15;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v22 = type metadata accessor for WeatherDataViewModel();
    uint64_t v23 = (uint64_t)v15;
    uint64_t v24 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v23, v24, 1, v22);
  type metadata accessor for WeatherDataViewModel();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v22) == 1)
  {
    sub_10000D930((uint64_t)v15, &qword_10016B310);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1000F147C((uint64_t)v15, (uint64_t)v18, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      sub_10008F554((uint64_t)v9);
      sub_10008F5C4((uint64_t)v6);
      uint64_t v27 = v3 + *(int *)(v19 + 24);
      uint64_t v28 = *(void *)v27;
      char v29 = *(unsigned char *)(v27 + 8);
      sub_10000886C(*(void *)v27, v29);
      sub_10008F2A4(v28, v29);
      sub_100008BF8(v28, v29);
      type metadata accessor for DailyViewAttributesFactory();
      swift_allocObject();
      sub_100110864();
      uint64_t v30 = v20 + *(int *)(v21 + 24);
      uint64_t v26 = v34;
      sub_10010EBE4((uint64_t)v18, v33, v30, 1, v34);
      swift_release();
      sub_1000F15FC((uint64_t)v18, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      uint64_t v25 = 0;
      goto LABEL_10;
    }
    sub_1000F15FC((uint64_t)v15, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  }
  uint64_t v25 = 1;
  uint64_t v26 = v34;
LABEL_10:
  uint64_t v31 = type metadata accessor for DailyViewAttributes();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v26, v25, 1, v31);
}

uint64_t sub_1000ED7BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v35 = a1;
  uint64_t v3 = sub_10012AFE0();
  __chkstk_darwin(v3 - 8);
  uint64_t v34 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10012C800();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000053D8(&qword_10016B310);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (int *)type metadata accessor for DailyForecastContentView();
  uint64_t v18 = v2 + v17[8];
  uint64_t v19 = type metadata accessor for ForecastEntry(0);
  sub_1000F15A8(v18 + *(int *)(v19 + 28), (uint64_t)v10, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000F147C((uint64_t)v10, (uint64_t)v13, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v20 = type metadata accessor for WeatherDataViewModel();
    uint64_t v21 = (uint64_t)v13;
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v20 = type metadata accessor for WeatherDataViewModel();
    uint64_t v21 = (uint64_t)v13;
    uint64_t v22 = 1;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v21, v22, 1, v20);
  type metadata accessor for WeatherDataViewModel();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v20) == 1)
  {
    sub_10000D930((uint64_t)v13, &qword_10016B310);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1000F147C((uint64_t)v13, (uint64_t)v16, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      sub_10008F554((uint64_t)v7);
      uint64_t v25 = v34;
      sub_10008F5C4(v34);
      uint64_t v26 = v2 + v17[6];
      uint64_t v27 = *(void *)v26;
      char v28 = *(unsigned char *)(v26 + 8);
      char v29 = *(unsigned char *)(v2 + v17[10]);
      sub_10000886C(*(void *)v26, v28);
      char v30 = sub_10008F2A4(v27, v28);
      sub_100008BF8(v27, v28);
      type metadata accessor for CurrentObservationViewAttributesFactory();
      swift_allocObject();
      sub_1000A4B44((uint64_t)v7, v25, v29, v30 & 1);
      uint64_t v31 = v18 + *(int *)(v19 + 24);
      uint64_t v24 = v35;
      sub_1000A37F8((uint64_t)v16, v31, (uint64_t)&v16[*(int *)(v14 + 20)], *(void *)v31, *(void *)(v31 + 8), *(unsigned __int8 *)(v31 + 50), *(unsigned __int8 *)(v31 + 51), 1, v35, 1, 1u);
      swift_release();
      sub_1000F15FC((uint64_t)v16, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      uint64_t v23 = 0;
      goto LABEL_10;
    }
    sub_1000F15FC((uint64_t)v13, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  }
  uint64_t v23 = 1;
  uint64_t v24 = v35;
LABEL_10:
  uint64_t v32 = sub_10012C610();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v24, v23, 1, v32);
}

void *sub_1000EDBC0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v22 = a1;
  uint64_t v21 = sub_10012B2D0();
  uint64_t v3 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10012AFE0();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_10012C800();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v20 = sub_1000EDE00(v1);
  sub_10008F554((uint64_t)v11);
  uint64_t v12 = type metadata accessor for DailyForecastContentView();
  sub_10008F5C4((uint64_t)v8);
  uint64_t v13 = v1 + *(int *)(v12 + 24);
  uint64_t v14 = *(void *)v13;
  char v15 = *(unsigned char *)(v13 + 8);
  char v16 = *(unsigned char *)(v2 + *(int *)(v12 + 40));
  sub_10000886C(*(void *)v13, v15);
  char v17 = sub_10008F2A4(v14, v15);
  sub_100008BF8(v14, v15);
  type metadata accessor for ErrorViewAttributesFactory();
  swift_allocObject();
  sub_1000A67D4((uint64_t)v11, (uint64_t)v8, v16, v17 & 1);
  sub_10008F590((uint64_t)v5);
  sub_1000A6524(v20, (uint64_t)__src);
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v21);
  return memcpy(v22, __src, 0x50uLL);
}

uint64_t sub_1000EDE00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (unsigned __int8 *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for DailyForecastContentView() + 32);
  uint64_t v6 = type metadata accessor for ForecastEntry(0);
  sub_1000F15A8(v5 + *(int *)(v6 + 28), (uint64_t)v4, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return *v4;
  }
  sub_1000F15FC((uint64_t)v4, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  return 3;
}

uint64_t sub_1000EDEF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ErrorView();
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  sub_10000DC50();
  uint64_t v8 = v7 - v6;
  memcpy((void *)(v7 - v6), v2, 0x50uLL);
  uint64_t v9 = (uint64_t *)(v8 + *(int *)(v5 + 28));
  *uint64_t v9 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B080);
  swift_storeEnumTagMultiPayload();
  sub_10008F7E0((uint64_t)v2);
  LOBYTE(v2) = sub_10012B1A0();
  sub_1000F15A8(v8, a1, (void (*)(void))type metadata accessor for ErrorView);
  uint64_t v10 = a1 + *(int *)(sub_1000053D8(&qword_10016CD98) + 36);
  *(unsigned char *)uint64_t v10 = (_BYTE)v2;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(unsigned char *)(v10 + 40) = 1;
  return sub_1000F15FC(v8, (void (*)(void))type metadata accessor for ErrorView);
}

uint64_t sub_1000EE01C@<X0>(uint64_t a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_1000EDEF0(a1);
}

uint64_t sub_1000EE060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v45 = sub_1000053D8(&qword_100170B78);
  __chkstk_darwin(v45);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_1000053D8(&qword_10016CBB0);
  __chkstk_darwin(v46);
  uint64_t v43 = (uint64_t *)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_1000053D8(&qword_10016CBB8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DailyViewAttributes();
  __chkstk_darwin(v11);
  uint64_t v41 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000053D8(&qword_10016CB20);
  __chkstk_darwin(v13 - 8);
  char v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10012C610();
  uint64_t v44 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1000053D8(&qword_10016CB78);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a1;
  sub_10012ABD0();
  sub_1000ED030((uint64_t)v21);
  uint64_t v22 = sub_10012C040();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, v22) == 1)
  {
    uint64_t v23 = &qword_10016CB78;
    uint64_t v24 = (uint64_t)v21;
  }
  else
  {
    uint64_t v25 = sub_10012C030();
    (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
    uint64_t v26 = *(void *)(v25 + 16);
    swift_bridgeObjectRelease();
    sub_1000ED7BC((uint64_t)v15);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v16) == 1)
    {
      uint64_t v23 = &qword_10016CB20;
      uint64_t v24 = (uint64_t)v15;
    }
    else
    {
      uint64_t v27 = v44;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v18, v15, v16);
      sub_1000ED3E8(v26, (uint64_t)v10);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v10, 1, v11) != 1)
      {
        uint64_t v34 = (uint64_t)v10;
        uint64_t v35 = v27;
        uint64_t v36 = v41;
        sub_1000F147C(v34, v41, (void (*)(void))type metadata accessor for DailyViewAttributes);
        uint64_t v37 = sub_10012AF10();
        uint64_t v38 = (uint64_t)v43;
        *uint64_t v43 = v37;
        *(void *)(v38 + 8) = 0;
        *(unsigned char *)(v38 + 16) = 0;
        uint64_t v39 = sub_1000053D8(&qword_10016CBC8);
        sub_1000EE5D8((uint64_t)v18, v42, v36, a2, v38 + *(int *)(v39 + 44));
        sub_10000B114(v38, (uint64_t)v6, &qword_10016CBB0);
        swift_storeEnumTagMultiPayload();
        sub_10000B38C(&qword_10016CBC0, &qword_10016CBB0);
        sub_1000F1430();
        sub_10012B0E0();
        sub_10000D930(v38, &qword_10016CBB0);
        sub_1000F15FC(v36, (void (*)(void))type metadata accessor for DailyViewAttributes);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v18, v16);
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v16);
      uint64_t v23 = &qword_10016CBB8;
      uint64_t v24 = (uint64_t)v10;
    }
  }
  sub_10000D930(v24, v23);
  sub_1000EDBC0(&v48);
  char v28 = v49;
  uint64_t v29 = v50;
  uint64_t v30 = v53;
  uint64_t v31 = v54;
  *(_OWORD *)uint64_t v6 = v48;
  v6[16] = v28;
  *((void *)v6 + 3) = v29;
  long long v32 = v52;
  *((_OWORD *)v6 + 2) = v51;
  *((_OWORD *)v6 + 3) = v32;
  *((void *)v6 + 8) = v30;
  *((void *)v6 + 9) = v31;
  swift_storeEnumTagMultiPayload();
  sub_10000B38C(&qword_10016CBC0, &qword_10016CBB0);
  sub_1000F1430();
  return sub_10012B0E0();
}

uint64_t sub_1000EE5D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v47 = a4;
  uint64_t v50 = a3;
  uint64_t v54 = a2;
  uint64_t v46 = a1;
  uint64_t v53 = a5;
  uint64_t v49 = type metadata accessor for DailyView(0) - 8;
  __chkstk_darwin(v49);
  uint64_t v48 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_1000053D8(&qword_10016CBD0) - 8;
  uint64_t v6 = __chkstk_darwin(v51);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v52 = (uint64_t)&v43 - v9;
  uint64_t v10 = sub_10012C610();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10012BCB0();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000053D8(&qword_10016CBD8);
  uint64_t v19 = v18 - 8;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v43 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v46, v10);
  sub_10012BCA0();
  sub_10012ABD0();
  sub_10012ABD0();
  sub_10012B7B0();
  sub_10012ABC0();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v22, v17, v14);
  uint64_t v25 = &v22[*(int *)(v19 + 44)];
  long long v26 = v58;
  *(_OWORD *)uint64_t v25 = v57;
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v59;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_10003BFD4((uint64_t)v22, (uint64_t)v24, &qword_10016CBD8);
  sub_10012B7A0();
  sub_10012ABC0();
  uint64_t v27 = v60;
  LOBYTE(v19) = v61;
  uint64_t v28 = v62;
  LODWORD(v46) = v63;
  uint64_t v45 = v64;
  uint64_t v44 = v65;
  uint64_t v29 = (uint64_t *)(v47 + *(int *)(type metadata accessor for DailyForecastContentView() + 36));
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  uint64_t v55 = v31;
  uint64_t v56 = v30;
  sub_1000053D8(&qword_10016C980);
  sub_10012B6B0();
  uint64_t v32 = *(void *)v66;
  long long v47 = *(_OWORD *)&v66[8];
  uint64_t v33 = v48;
  sub_1000F15A8(v50, v48, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v34 = v33 + *(int *)(v49 + 28);
  *(void *)uint64_t v34 = v32;
  *(_OWORD *)(v34 + 8) = v47;
  sub_10012ABD0();
  sub_10012ABD0();
  sub_10012B7B0();
  sub_10012ABC0();
  sub_1000F15A8(v33, (uint64_t)v8, (void (*)(void))type metadata accessor for DailyView);
  uint64_t v35 = &v8[*(int *)(v51 + 44)];
  long long v36 = *(_OWORD *)&v66[16];
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v66;
  *((_OWORD *)v35 + 1) = v36;
  *((_OWORD *)v35 + 2) = v67;
  sub_1000F15FC(v33, (void (*)(void))type metadata accessor for DailyView);
  uint64_t v37 = v52;
  sub_10003BFD4((uint64_t)v8, v52, &qword_10016CBD0);
  sub_10000B114((uint64_t)v24, (uint64_t)v22, &qword_10016CBD8);
  sub_10000B114(v37, (uint64_t)v8, &qword_10016CBD0);
  uint64_t v38 = v53;
  sub_10000B114((uint64_t)v22, v53, &qword_10016CBD8);
  uint64_t v39 = sub_1000053D8(&qword_10016CBE0);
  uint64_t v40 = v38 + *(int *)(v39 + 48);
  *(void *)uint64_t v40 = 0;
  *(unsigned char *)(v40 + 8) = 1;
  *(void *)(v40 + 16) = v27;
  *(unsigned char *)(v40 + 24) = v19;
  *(void *)(v40 + 32) = v28;
  *(unsigned char *)(v40 + 40) = v46;
  uint64_t v41 = v44;
  *(void *)(v40 + 48) = v45;
  *(void *)(v40 + 56) = v41;
  sub_10000B114((uint64_t)v8, v38 + *(int *)(v39 + 64), &qword_10016CBD0);
  sub_10000D930(v37, &qword_10016CBD0);
  sub_10000D930((uint64_t)v24, &qword_10016CBD8);
  sub_10000D930((uint64_t)v8, &qword_10016CBD0);
  return sub_10000D930((uint64_t)v22, &qword_10016CBD8);
}

void sub_1000EEBDC()
{
  id v0 = [self mainScreen];
  [v0 bounds];
}

void sub_1000EEC50()
{
  id v0 = [self mainScreen];
  [v0 bounds];
}

uint64_t sub_1000EECC4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v39 = sub_1000053D8(&qword_100170B10);
  __chkstk_darwin(v39);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_1000053D8(&qword_100170B18);
  __chkstk_darwin(v40);
  uint64_t v37 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_1000053D8(&qword_10016CBB8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DailyViewAttributes();
  __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000053D8(&qword_10016CB20);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10012C610();
  uint64_t v38 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000053D8(&qword_10016CB78);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012ABD0();
  sub_1000ED030((uint64_t)v19);
  uint64_t v20 = sub_10012C040();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v20) == 1)
  {
    uint64_t v21 = &qword_10016CB78;
    uint64_t v22 = (uint64_t)v19;
  }
  else
  {
    uint64_t v23 = sub_10012C030();
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
    uint64_t v24 = *(void *)(v23 + 16);
    swift_bridgeObjectRelease();
    sub_1000ED7BC((uint64_t)v13);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14) == 1)
    {
      uint64_t v21 = &qword_10016CB20;
      uint64_t v22 = (uint64_t)v13;
    }
    else
    {
      uint64_t v25 = v38;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v16, v13, v14);
      sub_1000ED3E8(v24, (uint64_t)v8);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v8, 1, v9) != 1)
      {
        uint64_t v32 = v36;
        sub_1000F147C((uint64_t)v8, v36, (void (*)(void))type metadata accessor for DailyViewAttributes);
        uint64_t v33 = sub_10012AFF0();
        uint64_t v34 = (uint64_t)v37;
        *uint64_t v37 = v33;
        *(void *)(v34 + 8) = 0;
        *(unsigned char *)(v34 + 16) = 1;
        uint64_t v35 = sub_1000053D8(&qword_100170B30);
        sub_1000EF234((uint64_t)v16, a1, v32, v34 + *(int *)(v35 + 44));
        sub_10000B114(v34, (uint64_t)v4, &qword_100170B18);
        swift_storeEnumTagMultiPayload();
        sub_10000B38C(&qword_100170B20, &qword_100170B18);
        sub_1000F1430();
        sub_10012B0E0();
        sub_10000D930(v34, &qword_100170B18);
        sub_1000F15FC(v32, (void (*)(void))type metadata accessor for DailyViewAttributes);
        return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v16, v14);
      }
      (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v14);
      uint64_t v21 = &qword_10016CBB8;
      uint64_t v22 = (uint64_t)v8;
    }
  }
  sub_10000D930(v22, v21);
  sub_1000EDBC0(&v42);
  char v26 = v43;
  uint64_t v27 = v44;
  uint64_t v28 = v47;
  uint64_t v29 = v48;
  *(_OWORD *)uint64_t v4 = v42;
  v4[16] = v26;
  *((void *)v4 + 3) = v27;
  long long v30 = v46;
  *((_OWORD *)v4 + 2) = v45;
  *((_OWORD *)v4 + 3) = v30;
  *((void *)v4 + 8) = v28;
  *((void *)v4 + 9) = v29;
  swift_storeEnumTagMultiPayload();
  sub_10000B38C(&qword_100170B20, &qword_100170B18);
  sub_1000F1430();
  return sub_10012B0E0();
}

uint64_t sub_1000EF234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v50 = a2;
  uint64_t v62 = a4;
  uint64_t v59 = type metadata accessor for DailyView(0) - 8;
  uint64_t v5 = __chkstk_darwin(v59);
  uint64_t v60 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v58 = (uint64_t)&v48 - v7;
  uint64_t v8 = sub_10012A6B0();
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v57 = v8;
  __chkstk_darwin(v8);
  uint64_t v55 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10012B120();
  uint64_t v49 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000053D8(&qword_100170B38);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000053D8(&qword_100170B40);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v54 = sub_1000053D8(&qword_100170B48);
  uint64_t v19 = __chkstk_darwin(v54);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v52 = (char *)&v48 - v23;
  __chkstk_darwin(v22);
  uint64_t v53 = (uint64_t)&v48 - v24;
  *(void *)uint64_t v14 = sub_10012AFF0();
  *((void *)v14 + 1) = 0;
  v14[16] = 1;
  uint64_t v25 = sub_1000053D8(&qword_100170B50);
  sub_1000EF8D4(a1, &v14[*(int *)(v25 + 44)]);
  sub_10012B100();
  uint64_t v26 = sub_10000B38C(&qword_100170B58, &qword_100170B38);
  sub_10012B520();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v11, v51);
  sub_10000D930((uint64_t)v14, &qword_100170B38);
  uint64_t v67 = v12;
  uint64_t v68 = v26;
  swift_getOpaqueTypeConformance2();
  sub_10012B540();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_1000053D8(&qword_10016C880);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100130010;
  uint64_t v28 = v55;
  sub_10012C5F0();
  uint64_t v29 = sub_10012A680();
  uint64_t v31 = v30;
  (*(void (**)(char *, uint64_t))(v56 + 8))(v28, v57);
  *(void *)(v27 + 32) = v29;
  *(void *)(v27 + 40) = v31;
  sub_10000822C();
  uint64_t v32 = (uint64_t)v52;
  sub_10012AC70();
  swift_bridgeObjectRelease();
  sub_10000D930((uint64_t)v21, &qword_100170B48);
  uint64_t v33 = v53;
  sub_10003BFD4(v32, v53, &qword_100170B48);
  uint64_t v34 = v50;
  sub_1000EEC50();
  sub_10012B7A0();
  sub_10012ABC0();
  uint64_t v57 = v67;
  LODWORD(v56) = v68;
  uint64_t v55 = v69;
  LOBYTE(v12) = v70;
  uint64_t v35 = v71;
  uint64_t v36 = v72;
  uint64_t v37 = (uint64_t *)(v34 + *(int *)(type metadata accessor for DailyForecastContentView() + 36));
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  uint64_t v63 = v39;
  uint64_t v64 = v38;
  sub_1000053D8(&qword_10016C980);
  sub_10012B6B0();
  uint64_t v40 = v65;
  long long v54 = v66;
  uint64_t v41 = v58;
  sub_1000F15A8(v61, v58, (void (*)(void))type metadata accessor for DailyViewAttributes);
  uint64_t v42 = v41 + *(int *)(v59 + 28);
  *(void *)uint64_t v42 = v40;
  *(_OWORD *)(v42 + 8) = v54;
  sub_10000B114(v33, v32, &qword_100170B48);
  uint64_t v43 = v60;
  sub_1000F15A8(v41, v60, (void (*)(void))type metadata accessor for DailyView);
  uint64_t v44 = v62;
  sub_10000B114(v32, v62, &qword_100170B48);
  uint64_t v45 = sub_1000053D8(&qword_100170B60);
  uint64_t v46 = v44 + *(int *)(v45 + 48);
  *(void *)uint64_t v46 = 0;
  *(unsigned char *)(v46 + 8) = 1;
  *(void *)(v46 + 16) = v57;
  *(unsigned char *)(v46 + 24) = v56;
  *(void *)(v46 + 32) = v55;
  *(unsigned char *)(v46 + 40) = v12;
  *(void *)(v46 + 48) = v35;
  *(void *)(v46 + 56) = v36;
  sub_1000F15A8(v43, v44 + *(int *)(v45 + 64), (void (*)(void))type metadata accessor for DailyView);
  sub_1000F15FC(v41, (void (*)(void))type metadata accessor for DailyView);
  sub_10000D930(v33, &qword_100170B48);
  sub_1000F15FC(v43, (void (*)(void))type metadata accessor for DailyView);
  return sub_10000D930(v32, &qword_100170B48);
}

uint64_t sub_1000EF8D4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  long long v54 = a2;
  uint64_t v52 = sub_10012B2D0();
  uint64_t v50 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10012BBF0();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v40 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_1000053D8(&qword_100170B68) - 8;
  uint64_t v6 = __chkstk_darwin(v48);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v49 = (uint64_t)&v38 - v9;
  uint64_t v10 = sub_10012C610();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10012BAF0();
  uint64_t v14 = *(void *)(v47 - 8);
  uint64_t v15 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v41 = (char *)&v38 - v17;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v13, a1, v10);
  sub_10012BAE0();
  sub_1000EEBDC();
  sub_10012B7A0();
  sub_10012ABC0();
  uint64_t v45 = v58;
  int v39 = v59;
  uint64_t v44 = v60;
  int v38 = v61;
  uint64_t v43 = v62;
  uint64_t v42 = v63;
  v18(v13, a1, v10);
  uint64_t v19 = v40;
  sub_10012BBE0();
  sub_10012C590();
  type metadata accessor for DailyForecastContentView();
  sub_10008F590((uint64_t)v4);
  sub_10012B1D0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v4, v52);
  sub_10012B7A0();
  sub_10012ABC0();
  uint64_t v20 = v51;
  uint64_t v21 = v53;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v8, v19, v53);
  uint64_t v22 = &v8[*(int *)(v48 + 44)];
  long long v23 = v65;
  *(_OWORD *)uint64_t v22 = v64;
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v66;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v21);
  uint64_t v24 = v49;
  sub_10003BFD4((uint64_t)v8, v49, &qword_100170B68);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v26 = v46;
  uint64_t v27 = v41;
  uint64_t v28 = v47;
  v25(v46, v41, v47);
  char v57 = 1;
  char v56 = v39;
  char v55 = v38;
  sub_10000B114(v24, (uint64_t)v8, &qword_100170B68);
  uint64_t v29 = v54;
  v25(v54, v26, v28);
  uint64_t v30 = sub_1000053D8(&qword_100170B70);
  uint64_t v31 = &v29[*(int *)(v30 + 48)];
  char v32 = v57;
  char v33 = v56;
  char v34 = v55;
  *(void *)uint64_t v31 = 0;
  v31[8] = v32;
  *((void *)v31 + 2) = v45;
  v31[24] = v33;
  *((void *)v31 + 4) = v44;
  v31[40] = v34;
  uint64_t v35 = v42;
  *((void *)v31 + 6) = v43;
  *((void *)v31 + 7) = v35;
  sub_10000B114((uint64_t)v8, (uint64_t)&v29[*(int *)(v30 + 64)], &qword_100170B68);
  sub_10000D930(v24, &qword_100170B68);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v14 + 8);
  v36(v27, v28);
  sub_10000D930((uint64_t)v8, &qword_100170B68);
  return ((uint64_t (*)(char *, uint64_t))v36)(v26, v28);
}

uint64_t sub_1000EFED8@<X0>(char *a1@<X8>)
{
  uint64_t v48 = a1;
  sub_10012B140();
  sub_10000DB98();
  uint64_t v46 = v3;
  uint64_t v47 = v2;
  __chkstk_darwin(v2);
  sub_10000DC50();
  v40[1] = v5 - v4;
  uint64_t v6 = type metadata accessor for DailyForecastContentView();
  sub_10000B3FC();
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v10 = v9 - v8;
  sub_1000053D8(&qword_100170AB8);
  sub_10000DB98();
  uint64_t v44 = v12;
  uint64_t v45 = v11;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v41 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v43 = (char *)v40 - v15;
  uint64_t v16 = sub_1000053D8(&qword_10016CBB8);
  __chkstk_darwin(v16 - 8);
  sub_10000DC50();
  uint64_t v19 = v18 - v17;
  sub_1000ED3E8(4, v18 - v17);
  uint64_t v20 = sub_10012B7B0();
  uint64_t v22 = v21;
  uint64_t v42 = v19;
  sub_1000F030C(v19, v1, &v49);
  v40[0] = *((void *)&v49 + 1);
  uint64_t v23 = v49;
  char v24 = v50;
  uint64_t v25 = v1 + *(int *)(v6 + 24);
  uint64_t v26 = *(void *)v25;
  char v27 = *(unsigned char *)(v25 + 8);
  sub_10000886C(*(void *)v25, v27);
  char v28 = sub_10008F2A4(v26, v27);
  sub_100008BF8(v26, v27);
  sub_1000F15A8(v1, v10, (void (*)(void))type metadata accessor for DailyForecastContentView);
  if ((v28 & 1) == 0)
  {
    sub_1000F15FC(v10, (void (*)(void))type metadata accessor for DailyForecastContentView);
    uint64_t v31 = v40[0];
    goto LABEL_5;
  }
  uint64_t v29 = *(int *)(v6 + 32);
  uint64_t v30 = v29 + *(int *)(type metadata accessor for ForecastEntry(0) + 24);
  LOBYTE(v30) = *(unsigned char *)(v10 + v30 + *(int *)(type metadata accessor for WidgetContext() + 44) + 8);
  sub_1000F15FC(v10, (void (*)(void))type metadata accessor for DailyForecastContentView);
  uint64_t v31 = v40[0];
  if ((v30 & 1) == 0)
  {
LABEL_5:
    uint64_t v32 = sub_10012B5B0();
    goto LABEL_6;
  }
  sub_10012B5A0();
  uint64_t v32 = sub_10012B5D0();
  swift_release();
LABEL_6:
  *(void *)&long long v49 = v20;
  *((void *)&v49 + 1) = v22;
  uint64_t v50 = v23;
  uint64_t v51 = v31;
  char v52 = v24;
  uint64_t v53 = v32;
  long long v54 = xmmword_100130E40;
  uint64_t v55 = 0x4000000000000000;
  uint64_t v33 = sub_10012B130();
  __chkstk_darwin(v33);
  sub_10012B7A0();
  sub_1000053D8(&qword_100170AC0);
  type metadata accessor for BackgroundView(0);
  sub_1000F0BF4();
  sub_1000F1654(&qword_10016C978, (void (*)(uint64_t))type metadata accessor for BackgroundView);
  char v34 = v41;
  sub_10012B510();
  sub_10000B424();
  v35();
  sub_100058178();
  swift_release();
  uint64_t v36 = v43;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  uint64_t v38 = v45;
  v37(v43, v34, v45);
  v37(v48, v36, v38);
  return sub_10000D930(v42, &qword_10016CBB8);
}

double sub_1000F030C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v45 = a3;
  uint64_t v4 = type metadata accessor for DailyForecastContentView();
  uint64_t v41 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v43 = v5;
  uint64_t v44 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10012C800();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000053D8(&qword_100170AE0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000053D8(&qword_10016CBB8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000053D8(&qword_100170AE8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v39 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v39 - v22;
  sub_10000B114(a1, (uint64_t)v14, &qword_10016CBB8);
  uint64_t v24 = type metadata accessor for DailyViewAttributes();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v24) == 1)
  {
    sub_10000D930((uint64_t)v14, &qword_10016CBB8);
    uint64_t v25 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v23, v14, v6);
    sub_1000F15FC((uint64_t)v14, (void (*)(void))type metadata accessor for DailyViewAttributes);
    uint64_t v25 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v23, v25, 1, v6);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v21, enum case for WidgetFamily.systemSmall(_:), v6);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v21, 0, 1, v6);
  uint64_t v26 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_10000B114((uint64_t)v23, (uint64_t)v11, &qword_100170AE8);
  sub_10000B114((uint64_t)v21, v26, &qword_100170AE8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v11, 1, v6) != 1)
  {
    sub_10000B114((uint64_t)v11, (uint64_t)v18, &qword_100170AE8);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v26, 1, v6) != 1)
    {
      char v27 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v40, v26, v6);
      sub_1000F1654(&qword_10016EC20, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
      char v28 = sub_10012C9E0();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
      v29(v27, v6);
      sub_10000D930((uint64_t)v21, &qword_100170AE8);
      sub_10000D930((uint64_t)v23, &qword_100170AE8);
      v29(v18, v6);
      sub_10000D930((uint64_t)v11, &qword_100170AE8);
      if (v28) {
        goto LABEL_11;
      }
LABEL_12:
      uint64_t v33 = v44;
      sub_1000F15A8(v42, v44, (void (*)(void))type metadata accessor for DailyForecastContentView);
      unint64_t v34 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v35 = swift_allocObject();
      sub_1000F147C(v33, v35 + v34, (void (*)(void))type metadata accessor for DailyForecastContentView);
      uint64_t v46 = sub_1000F0CA0;
      uint64_t v47 = v35;
      char v48 = 1;
      goto LABEL_13;
    }
    sub_10000D930((uint64_t)v21, &qword_100170AE8);
    sub_10000D930((uint64_t)v23, &qword_100170AE8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
LABEL_9:
    sub_10000D930((uint64_t)v11, &qword_100170AE0);
    goto LABEL_12;
  }
  sub_10000D930((uint64_t)v21, &qword_100170AE8);
  sub_10000D930((uint64_t)v23, &qword_100170AE8);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v26, 1, v6) != 1) {
    goto LABEL_9;
  }
  sub_10000D930((uint64_t)v11, &qword_100170AE8);
LABEL_11:
  uint64_t v30 = v44;
  sub_1000F15A8(v42, v44, (void (*)(void))type metadata accessor for DailyForecastContentView);
  unint64_t v31 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v32 = swift_allocObject();
  sub_1000F147C(v30, v32 + v31, (void (*)(void))type metadata accessor for DailyForecastContentView);
  uint64_t v46 = sub_1000F1384;
  uint64_t v47 = v32;
  char v48 = 0;
LABEL_13:
  sub_1000053D8(&qword_100170AF0);
  sub_1000053D8(&qword_100170AF8);
  sub_10000B38C(&qword_100170B00, &qword_100170AF0);
  sub_10000B38C(&qword_100170B08, &qword_100170AF8);
  sub_10012B0E0();
  double result = *(double *)&v49;
  char v37 = v50;
  uint64_t v38 = v45;
  *uint64_t v45 = v49;
  *((unsigned char *)v38 + 16) = v37;
  return result;
}

uint64_t sub_1000F09C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for BackgroundView(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1 + *(int *)(type metadata accessor for DailyForecastContentView() + 32);
  uint64_t v11 = type metadata accessor for ForecastEntry(0);
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = (uint64_t *)(v10 + v12 + *(int *)(type metadata accessor for WidgetContext() + 44));
  uint64_t v14 = *v13;
  char v15 = *((unsigned char *)v13 + 8);
  uint64_t v16 = (uint64_t)&v9[v7[5]];
  sub_1000F15A8(v10 + *(int *)(v11 + 28), (uint64_t)v6, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000F147C((uint64_t)v6, v16, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
  uint64_t v18 = type metadata accessor for WeatherDataViewModel();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v16, v17, 1, v18);
  *(void *)uint64_t v9 = v14;
  v9[8] = v15;
  uint64_t v19 = (uint64_t *)&v9[v7[6]];
  *uint64_t v19 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B080);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = &v9[v7[7]];
  *(void *)uint64_t v20 = swift_getKeyPath();
  v20[8] = 0;
  sub_1000F147C((uint64_t)v9, a2, (void (*)(void))type metadata accessor for BackgroundView);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F0BEC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F09C4(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000F0BF4()
{
  unint64_t result = qword_100170AC8;
  if (!qword_100170AC8)
  {
    sub_100005470(&qword_100170AC0);
    sub_10000B38C(&qword_100170AD0, &qword_100170AD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170AC8);
  }
  return result;
}

uint64_t sub_1000F0CA0(uint64_t a1)
{
  return sub_1000F139C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000EE060);
}

uint64_t sub_1000F0CBC()
{
  uint64_t v1 = type metadata accessor for DailyForecastContentView();
  uint64_t v49 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v48 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = v0 + ((v49 + 16) & ~v49);
  sub_1000053D8(&qword_10016B410);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10012C800();
    sub_10000B3FC();
    sub_10000B424();
    v3();
  }
  else
  {
    swift_release();
  }
  sub_1000053D8(&qword_10016B9D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10012AFE0();
    sub_10000B3FC();
    sub_10000B424();
    v4();
  }
  else
  {
    swift_release();
  }
  sub_100008BF8(*(void *)(v2 + *(int *)(v1 + 24)), *(unsigned char *)(v2 + *(int *)(v1 + 24) + 8));
  sub_1000053D8(&qword_10016B9E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10012B2D0();
    sub_10000B3FC();
    sub_10000B424();
    v5();
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v2 + *(int *)(v1 + 32);
  uint64_t v7 = sub_100129300();
  sub_10000B3FC();
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v47(v6, v7);
  uint64_t v9 = (int *)type metadata accessor for ForecastEntry(0);
  uint64_t v10 = v6 + v9[5];
  uint64_t v11 = sub_10012C920();
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v10, 1, v11))
  {
    sub_1000472C0();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  uint64_t v13 = v6 + v9[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v13 + *(int *)(type metadata accessor for WidgetContext() + 40);
  uint64_t v15 = sub_100129220();
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v15))
  {
    sub_1000472C0();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = v6 + v9[7];
  type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for WeatherDataViewModel();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        sub_10012BE90();
        sub_10000B3FC();
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v17, v39);
        break;
      case 1:
        sub_100129330();
        sub_10000B3FC();
        sub_10000B424();
        v40();
        uint64_t v41 = type metadata accessor for InstantWeatherViewModel();
        sub_10012A6B0();
        sub_10000B3FC();
        sub_10000B424();
        v42();
        uint64_t v43 = v17 + *(int *)(v41 + 24);
        sub_10012C250();
        sub_10000B3FC();
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
        break;
      case 0:
        uint64_t v19 = sub_100129330();
        sub_10000B3FC();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v19);
        uint64_t v21 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        sub_10012A6B0();
        sub_10000B3FC();
        sub_10000B424();
        v22();
        sub_10012C250();
        sub_10000B3FC();
        sub_10000B424();
        v23();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v17 + v21[9];
        uint64_t v25 = type metadata accessor for AirQualityViewModel();
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v24, 1, v25))
        {
          sub_10000B424();
          v26();
          sub_10000B424();
          v27();
          sub_100129B70();
          sub_10000B3FC();
          sub_10000B424();
          v28();
          uint64_t v29 = v24 + *(int *)(v25 + 32);
          sub_100129C50();
          sub_10000B3FC();
          (*(void (**)(uint64_t))(v30 + 8))(v29);
        }
        uint64_t v31 = v17 + v21[10];
        uint64_t v32 = sub_10012C6B0();
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v31, 1, v32))
        {
          sub_1000472C0();
          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
        }
        swift_bridgeObjectRelease();
        uint64_t v34 = v17 + v21[13];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v34, 1, v15))
        {
          sub_1000472C0();
          (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v15);
        }
        uint64_t v36 = v17 + v21[14];
        uint64_t v37 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v37)) {
          v47(v36, v7);
        }
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v49 + 16) & ~v49) + v48, v49 | 7);
}

uint64_t sub_1000F1384(uint64_t a1)
{
  return sub_1000F139C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000EECC4);
}

uint64_t sub_1000F139C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for DailyForecastContentView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

unint64_t sub_1000F1430()
{
  unint64_t result = qword_100170B28;
  if (!qword_100170B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170B28);
  }
  return result;
}

uint64_t sub_1000F147C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  uint64_t v4 = sub_10003C1BC();
  v5(v4);
  return a2;
}

ValueMetadata *type metadata accessor for DailyForecastContentView.GenericErrorView()
{
  return &type metadata for DailyForecastContentView.GenericErrorView;
}

uint64_t sub_1000F14E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F158C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F15A8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  uint64_t v4 = sub_10000B430();
  v5(v4);
  return a2;
}

uint64_t sub_1000F15FC(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3FC();
  sub_10000B424();
  v3();
  return a1;
}

uint64_t sub_1000F1654(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F169C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  int v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v6);
  int v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, (uint64_t)v6);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v133 = a3;
      uint64_t v9 = sub_100129330();
      uint64_t v10 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
      uint64_t v131 = *v10;
      (*v10)(a1, a2, v9);
      uint64_t v11 = v6[5];
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      uint64_t v15 = v6[6];
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
      uint64_t v19 = v6[9];
      uint64_t v20 = (char *)(a1 + v19);
      uint64_t v21 = (char *)(a2 + v19);
      uint64_t v22 = (int *)type metadata accessor for AirQualityViewModel();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, (uint64_t)v22))
      {
        uint64_t v23 = sub_1000053D8(&qword_10016B428);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        v131((uint64_t)v20, (uint64_t)v21, v9);
        uint64_t v55 = v22[5];
        char v56 = &v20[v55];
        char v57 = &v21[v55];
        uint64_t v58 = sub_100129300();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
        *(void *)&v20[v22[6]] = *(void *)&v21[v22[6]];
        uint64_t v59 = v22[7];
        uint64_t v60 = &v20[v59];
        unsigned __int8 v61 = &v21[v59];
        uint64_t v62 = sub_100129B70();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v60, v61, v62);
        uint64_t v63 = v22[8];
        long long v64 = &v20[v63];
        long long v65 = &v21[v63];
        uint64_t v66 = sub_100129C50();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v64, v65, v66);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, (uint64_t)v22);
      }
      a3 = v133;
      uint64_t v67 = v6[10];
      uint64_t v68 = (void *)(a1 + v67);
      uint64_t v69 = (const void *)(a2 + v67);
      uint64_t v70 = sub_10012C6B0();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, v70))
      {
        uint64_t v71 = sub_1000053D8(&qword_10016B430);
        memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v70 - 8) + 16))(v68, v69, v70);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v70);
      }
      *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
      uint64_t v72 = v6[12];
      uint64_t v73 = a1 + v72;
      uint64_t v74 = (uint64_t *)(a2 + v72);
      uint64_t v75 = *v74;
      *(_WORD *)(v73 + 8) = *((_WORD *)v74 + 4);
      *(void *)uint64_t v73 = v75;
      uint64_t v76 = v6[13];
      uint64_t v77 = (void *)(a1 + v76);
      unint64_t v78 = (const void *)(a2 + v76);
      uint64_t v79 = sub_100129220();
      swift_bridgeObjectRetain();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v78, 1, v79))
      {
        uint64_t v80 = sub_1000053D8(&qword_10016B420);
        memcpy(v77, v78, *(void *)(*(void *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v77, 0, 1, v79);
      }
      uint64_t v81 = v6[14];
      unint64_t v82 = (void *)(a1 + v81);
      uint64_t v83 = (const void *)(a2 + v81);
      uint64_t v84 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v83, 1, v84))
      {
        uint64_t v85 = sub_1000053D8(&qword_10016B438);
        memcpy(v82, v83, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v86 = sub_100129300();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v86 - 8) + 16))(v82, v83, v86);
        swift_storeEnumTagMultiPayload();
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v82, 0, 1, v84);
      }
      uint64_t v87 = a1;
      uint64_t v88 = 2;
      uint64_t v89 = (uint64_t)v6;
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_1000F5818(a1, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    size_t v24 = *(void *)(*(void *)(type metadata accessor for AdaptiveConditionsComplicationDataStatus() - 8) + 64);
    uint64_t v25 = (void *)a1;
    uint64_t v26 = (const void *)a2;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_24;
  }
  uint64_t v134 = a3;
  uint64_t v27 = sub_100129330();
  uint64_t v132 = *(void *)(v27 - 8);
  char v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 24);
  v28(a1, a2, v27);
  uint64_t v29 = v6[5];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  uint64_t v33 = v6[6];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  uint64_t v36 = sub_10012C250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 24))(v34, v35, v36);
  *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v6[9];
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AirQualityViewModel();
  int v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, (uint64_t)v40);
  int v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, (uint64_t)v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v38, v39, v27);
      uint64_t v43 = v40[5];
      uint64_t v44 = &v38[v43];
      uint64_t v45 = &v39[v43];
      uint64_t v46 = sub_100129300();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
      *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
      uint64_t v47 = v40[7];
      uint64_t v48 = &v38[v47];
      uint64_t v49 = &v39[v47];
      uint64_t v50 = sub_100129B70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      uint64_t v51 = v40[8];
      char v52 = &v38[v51];
      uint64_t v53 = &v39[v51];
      uint64_t v54 = sub_100129C50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, (uint64_t)v40);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v42)
  {
    sub_1000F5818((uint64_t)v38, (void (*)(void))type metadata accessor for AirQualityViewModel);
LABEL_27:
    uint64_t v91 = sub_1000053D8(&qword_10016B428);
    memcpy(v38, v39, *(void *)(*(void *)(v91 - 8) + 64));
    goto LABEL_28;
  }
  v28((uint64_t)v38, (uint64_t)v39, v27);
  uint64_t v118 = v40[5];
  uint64_t v119 = &v38[v118];
  uint64_t v120 = &v39[v118];
  uint64_t v121 = sub_100129300();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 24))(v119, v120, v121);
  *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
  uint64_t v122 = v40[7];
  uint64_t v123 = &v38[v122];
  uint64_t v124 = &v39[v122];
  uint64_t v125 = sub_100129B70();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v125 - 8) + 24))(v123, v124, v125);
  uint64_t v126 = v40[8];
  uint64_t v127 = &v38[v126];
  uint64_t v128 = &v39[v126];
  uint64_t v129 = sub_100129C50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 24))(v127, v128, v129);
LABEL_28:
  a3 = v134;
  uint64_t v92 = v6[10];
  uint64_t v93 = (void *)(a1 + v92);
  uint64_t v94 = (const void *)(a2 + v92);
  uint64_t v95 = sub_10012C6B0();
  int v96 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v93, 1, v95);
  int v97 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v94, 1, v95);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v95 - 8) + 16))(v93, v94, v95);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v93, 0, 1, v95);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v98 = *(void *)(v95 - 8);
  if (v97)
  {
    (*(void (**)(void *, uint64_t))(v98 + 8))(v93, v95);
LABEL_33:
    uint64_t v99 = sub_1000053D8(&qword_10016B430);
    memcpy(v93, v94, *(void *)(*(void *)(v99 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, const void *, uint64_t))(v98 + 24))(v93, v94, v95);
LABEL_34:
  *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v100 = v6[12];
  uint64_t v101 = (unsigned char *)(a1 + v100);
  uint64_t v102 = (unsigned char *)(a2 + v100);
  *uint64_t v101 = *v102;
  v101[1] = v102[1];
  v101[2] = v102[2];
  v101[3] = v102[3];
  v101[4] = v102[4];
  v101[5] = v102[5];
  v101[6] = v102[6];
  v101[7] = v102[7];
  v101[8] = v102[8];
  v101[9] = v102[9];
  uint64_t v103 = v6[13];
  uint64_t v104 = (void *)(a1 + v103);
  uint64_t v105 = (const void *)(a2 + v103);
  uint64_t v106 = sub_100129220();
  int v107 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, v106);
  int v108 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v105, 1, v106);
  if (v107)
  {
    if (!v108)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v105, v106);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v104, 0, 1, v106);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v109 = *(void *)(v106 - 8);
  if (v108)
  {
    (*(void (**)(void *, uint64_t))(v109 + 8))(v104, v106);
LABEL_39:
    uint64_t v110 = sub_1000053D8(&qword_10016B420);
    memcpy(v104, v105, *(void *)(*(void *)(v110 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(void *, const void *, uint64_t))(v109 + 24))(v104, v105, v106);
LABEL_40:
  uint64_t v111 = v6[14];
  uint64_t v112 = a1 + v111;
  uint64_t v113 = a2 + v111;
  uint64_t v114 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  int v115 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v112, 1, v114);
  int v116 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v113, 1, v114);
  if (v115)
  {
    if (!v116)
    {
      swift_getEnumCaseMultiPayload();
      uint64_t v117 = sub_100129300();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 16))(v112, v113, v117);
      swift_storeEnumTagMultiPayload();
      uint64_t v87 = v112;
      uint64_t v88 = 1;
      uint64_t v89 = v114;
LABEL_23:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v87, 0, v88, v89);
      goto LABEL_24;
    }
    goto LABEL_45;
  }
  if (v116)
  {
    sub_1000F5818(v112, (void (*)(void))type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_45:
    size_t v24 = *(void *)(*(void *)(sub_1000053D8(&qword_10016B438) - 8) + 64);
    uint64_t v25 = (void *)v112;
    uint64_t v26 = (const void *)v113;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_1000F5818(v112, (void (*)(void))type metadata accessor for AggregateWeatherViewModel.SunEvent);
    swift_getEnumCaseMultiPayload();
    uint64_t v130 = sub_100129300();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 16))(v112, v113, v130);
    swift_storeEnumTagMultiPayload();
  }
LABEL_24:
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000F24A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
  int v7 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 2, (uint64_t)v6);
  int v8 = _s13WeatherWidget20WeatherDataViewModelOwet_0(a2, 2, (uint64_t)v6);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = sub_100129330();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
      v10(a1, a2, v9);
      uint64_t v11 = v6[5];
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      uint64_t v15 = v6[6];
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
      uint64_t v19 = v6[9];
      uint64_t v20 = (char *)(a1 + v19);
      uint64_t v21 = (char *)(a2 + v19);
      uint64_t v22 = (int *)type metadata accessor for AirQualityViewModel();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v21, 1, (uint64_t)v22))
      {
        uint64_t v23 = sub_1000053D8(&qword_10016B428);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        v10((uint64_t)v20, (uint64_t)v21, v9);
        uint64_t v55 = v22[5];
        char v56 = &v20[v55];
        char v57 = &v21[v55];
        uint64_t v58 = sub_100129300();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32))(v56, v57, v58);
        *(void *)&v20[v22[6]] = *(void *)&v21[v22[6]];
        uint64_t v59 = v22[7];
        uint64_t v60 = &v20[v59];
        unsigned __int8 v61 = &v21[v59];
        uint64_t v62 = sub_100129B70();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v60, v61, v62);
        uint64_t v63 = v22[8];
        long long v64 = &v20[v63];
        long long v65 = &v21[v63];
        uint64_t v66 = sub_100129C50();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v64, v65, v66);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v20, 0, 1, (uint64_t)v22);
      }
      uint64_t v67 = v6[10];
      uint64_t v68 = (void *)(a1 + v67);
      uint64_t v69 = (const void *)(a2 + v67);
      uint64_t v70 = sub_10012C6B0();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v69, 1, v70))
      {
        uint64_t v71 = sub_1000053D8(&qword_10016B430);
        memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v70 - 8) + 32))(v68, v69, v70);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v68, 0, 1, v70);
      }
      *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
      uint64_t v72 = v6[12];
      uint64_t v73 = a1 + v72;
      uint64_t v74 = a2 + v72;
      *(void *)uint64_t v73 = *(void *)v74;
      *(_WORD *)(v73 + 8) = *(_WORD *)(v74 + 8);
      uint64_t v75 = v6[13];
      uint64_t v76 = (void *)(a1 + v75);
      uint64_t v77 = (const void *)(a2 + v75);
      uint64_t v78 = sub_100129220();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v77, 1, v78))
      {
        uint64_t v79 = sub_1000053D8(&qword_10016B420);
        memcpy(v76, v77, *(void *)(*(void *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v78 - 8) + 32))(v76, v77, v78);
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v76, 0, 1, v78);
      }
      uint64_t v80 = v6[14];
      uint64_t v81 = (void *)(a1 + v80);
      unint64_t v82 = (const void *)(a2 + v80);
      uint64_t v83 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, v83))
      {
        uint64_t v84 = sub_1000053D8(&qword_10016B438);
        memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        uint64_t v85 = sub_100129300();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v85 - 8) + 32))(v81, v82, v85);
        swift_storeEnumTagMultiPayload();
        _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, v83);
      }
      uint64_t v86 = a1;
      uint64_t v87 = 2;
      uint64_t v88 = (uint64_t)v6;
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  if (v8)
  {
    sub_1000F5818(a1, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
LABEL_7:
    size_t v24 = *(void *)(*(void *)(type metadata accessor for AdaptiveConditionsComplicationDataStatus() - 8) + 64);
    uint64_t v25 = (void *)a1;
    uint64_t v26 = (const void *)a2;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_24;
  }
  uint64_t v27 = sub_100129330();
  uint64_t v130 = *(void *)(v27 - 8);
  char v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 40);
  v28(a1, a2, v27);
  uint64_t v29 = v6[5];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  uint64_t v33 = v6[6];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  uint64_t v36 = sub_10012C250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 40))(v34, v35, v36);
  *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
  swift_bridgeObjectRelease();
  uint64_t v37 = v6[9];
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AirQualityViewModel();
  int v41 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v38, 1, (uint64_t)v40);
  int v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, (uint64_t)v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v38, v39, v27);
      uint64_t v43 = v40[5];
      uint64_t v44 = &v38[v43];
      uint64_t v45 = &v39[v43];
      uint64_t v46 = sub_100129300();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v44, v45, v46);
      *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
      uint64_t v47 = v40[7];
      uint64_t v48 = &v38[v47];
      uint64_t v49 = &v39[v47];
      uint64_t v50 = sub_100129B70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
      uint64_t v51 = v40[8];
      char v52 = &v38[v51];
      uint64_t v53 = &v39[v51];
      uint64_t v54 = sub_100129C50();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v52, v53, v54);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, (uint64_t)v40);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v42)
  {
    sub_1000F5818((uint64_t)v38, (void (*)(void))type metadata accessor for AirQualityViewModel);
LABEL_27:
    uint64_t v90 = sub_1000053D8(&qword_10016B428);
    memcpy(v38, v39, *(void *)(*(void *)(v90 - 8) + 64));
    goto LABEL_28;
  }
  v28((uint64_t)v38, (uint64_t)v39, v27);
  uint64_t v117 = v40[5];
  uint64_t v118 = &v38[v117];
  uint64_t v119 = &v39[v117];
  uint64_t v120 = sub_100129300();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 40))(v118, v119, v120);
  *(void *)&v38[v40[6]] = *(void *)&v39[v40[6]];
  uint64_t v121 = v40[7];
  uint64_t v122 = &v38[v121];
  uint64_t v123 = &v39[v121];
  uint64_t v124 = sub_100129B70();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v124 - 8) + 40))(v122, v123, v124);
  uint64_t v125 = v40[8];
  uint64_t v126 = &v38[v125];
  uint64_t v127 = &v39[v125];
  uint64_t v128 = sub_100129C50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 40))(v126, v127, v128);
LABEL_28:
  uint64_t v91 = v6[10];
  uint64_t v92 = (void *)(a1 + v91);
  uint64_t v93 = (const void *)(a2 + v91);
  uint64_t v94 = sub_10012C6B0();
  int v95 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v92, 1, v94);
  int v96 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v93, 1, v94);
  if (v95)
  {
    if (!v96)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v94 - 8) + 32))(v92, v93, v94);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v92, 0, 1, v94);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v97 = *(void *)(v94 - 8);
  if (v96)
  {
    (*(void (**)(void *, uint64_t))(v97 + 8))(v92, v94);
LABEL_33:
    uint64_t v98 = sub_1000053D8(&qword_10016B430);
    memcpy(v92, v93, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, const void *, uint64_t))(v97 + 40))(v92, v93, v94);
LABEL_34:
  *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
  swift_bridgeObjectRelease();
  uint64_t v99 = v6[12];
  uint64_t v100 = a1 + v99;
  uint64_t v101 = a2 + v99;
  *(void *)uint64_t v100 = *(void *)v101;
  *(_WORD *)(v100 + 8) = *(_WORD *)(v101 + 8);
  uint64_t v102 = v6[13];
  uint64_t v103 = (void *)(a1 + v102);
  uint64_t v104 = (const void *)(a2 + v102);
  uint64_t v105 = sub_100129220();
  int v106 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v103, 1, v105);
  int v107 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, v105);
  if (v106)
  {
    if (!v107)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v105 - 8) + 32))(v103, v104, v105);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, v105);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v108 = *(void *)(v105 - 8);
  if (v107)
  {
    (*(void (**)(void *, uint64_t))(v108 + 8))(v103, v105);
LABEL_39:
    uint64_t v109 = sub_1000053D8(&qword_10016B420);
    memcpy(v103, v104, *(void *)(*(void *)(v109 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(void *, const void *, uint64_t))(v108 + 40))(v103, v104, v105);
LABEL_40:
  uint64_t v110 = v6[14];
  uint64_t v111 = a1 + v110;
  uint64_t v112 = a2 + v110;
  uint64_t v113 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  int v114 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v111, 1, v113);
  int v115 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v112, 1, v113);
  if (v114)
  {
    if (!v115)
    {
      swift_getEnumCaseMultiPayload();
      uint64_t v116 = sub_100129300();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 32))(v111, v112, v116);
      swift_storeEnumTagMultiPayload();
      uint64_t v86 = v111;
      uint64_t v87 = 1;
      uint64_t v88 = v113;
LABEL_23:
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v86, 0, v87, v88);
      goto LABEL_24;
    }
    goto LABEL_45;
  }
  if (v115)
  {
    sub_1000F5818(v111, (void (*)(void))type metadata accessor for AggregateWeatherViewModel.SunEvent);
LABEL_45:
    size_t v24 = *(void *)(*(void *)(sub_1000053D8(&qword_10016B438) - 8) + 64);
    uint64_t v25 = (void *)v111;
    uint64_t v26 = (const void *)v112;
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_1000F5818(v111, (void (*)(void))type metadata accessor for AggregateWeatherViewModel.SunEvent);
    swift_getEnumCaseMultiPayload();
    uint64_t v129 = sub_100129300();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 32))(v111, v112, v129);
    swift_storeEnumTagMultiPayload();
  }
LABEL_24:
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_1000F321C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F3230);
}

uint64_t sub_1000F3230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AdaptiveConditionsComplicationDataStatus();
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s13WeatherWidget20WeatherDataViewModelOwet_0(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_1000F32BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F32D0);
}

void sub_1000F32D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AdaptiveConditionsComplicationDataStatus();
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for AdaptiveConditionsInlineContentView()
{
  uint64_t result = qword_100170BD8;
  if (!qword_100170BD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000F33A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F33BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v260 = a1;
  uint64_t v259 = sub_1000053D8(&qword_100170C10);
  sub_10000B3FC();
  __chkstk_darwin(v1);
  sub_10000DBCC();
  uint64_t v256 = v2;
  uint64_t v248 = sub_1000053D8(&qword_100170C18);
  sub_10000B3FC();
  __chkstk_darwin(v3);
  sub_10000DBCC();
  sub_100012098(v4);
  uint64_t v258 = sub_1000053D8(&qword_100170C20);
  sub_10000B3FC();
  __chkstk_darwin(v5);
  sub_10000DBCC();
  sub_1000999FC(v6);
  uint64_t v209 = type metadata accessor for RainInlineTruncateFallbackText();
  sub_10000B3FC();
  __chkstk_darwin(v7);
  sub_10000DBCC();
  sub_100012098(v8);
  uint64_t v235 = sub_1000053D8(&qword_10016CD88);
  sub_10000B3FC();
  __chkstk_darwin(v9);
  sub_10000DCB4();
  uint64_t v208 = v10;
  __chkstk_darwin(v11);
  sub_1000999FC((uint64_t)&v200 - v12);
  uint64_t v219 = sub_10012C0E0();
  sub_10000DB98();
  uint64_t v211 = v13;
  __chkstk_darwin(v14);
  sub_10000DBCC();
  sub_100012098(v15);
  uint64_t v232 = sub_1000053D8(&qword_100170C28);
  sub_10000B3FC();
  __chkstk_darwin(v16);
  sub_10000DCB4();
  uint64_t v213 = v17;
  __chkstk_darwin(v18);
  sub_100012098((uint64_t)&v200 - v19);
  uint64_t v245 = sub_1000053D8(&qword_100170C30);
  sub_10000B3FC();
  __chkstk_darwin(v20);
  sub_10000DBCC();
  sub_100012098(v21);
  uint64_t v230 = sub_1000053D8(&qword_100170C38);
  sub_10000B3FC();
  __chkstk_darwin(v22);
  sub_10000DBCC();
  sub_100012098(v23);
  uint64_t v234 = sub_1000053D8(&qword_100170C40);
  sub_10000B3FC();
  __chkstk_darwin(v24);
  sub_10000DBCC();
  sub_100012098(v25);
  uint64_t v26 = sub_1000053D8(&qword_10016C058);
  __chkstk_darwin(v26 - 8);
  sub_10000DBCC();
  sub_1000999FC(v27);
  uint64_t v224 = sub_100129920();
  sub_10000DB98();
  uint64_t v223 = v28;
  __chkstk_darwin(v29);
  sub_10000DBCC();
  sub_1000999FC(v30);
  uint64_t v251 = sub_10012B120();
  sub_10000DB98();
  uint64_t v250 = v31;
  __chkstk_darwin(v32);
  sub_10000DBCC();
  sub_100012098(v33);
  sub_1000053D8(&qword_10016EAC0);
  sub_10000DB98();
  uint64_t v253 = v35;
  uint64_t v254 = v34;
  __chkstk_darwin(v34);
  sub_10000DBCC();
  uint64_t v261 = v36;
  uint64_t v257 = sub_1000053D8(&qword_10016BE70);
  sub_10000B3FC();
  __chkstk_darwin(v37);
  sub_10000DCB4();
  uint64_t v252 = v38;
  __chkstk_darwin(v39);
  uint64_t v255 = (uint64_t)&v200 - v40;
  uint64_t v244 = sub_10012B940();
  sub_10000DB98();
  uint64_t v228 = v41;
  __chkstk_darwin(v42);
  sub_10000DBCC();
  sub_1000999FC(v43);
  uint64_t v217 = sub_10012CDA0();
  sub_10000DB98();
  uint64_t v216 = (void *)v44;
  __chkstk_darwin(v45);
  sub_10000DBCC();
  sub_1000999FC(v46);
  uint64_t v241 = sub_10012CDD0();
  sub_10000DB98();
  uint64_t v226 = v47;
  __chkstk_darwin(v48);
  sub_10000DBCC();
  sub_100012098(v49);
  uint64_t v239 = sub_1000053D8(&qword_10016B060);
  sub_10000DB98();
  long long v227 = v50;
  __chkstk_darwin(v51);
  sub_10000DBCC();
  sub_1000999FC(v52);
  uint64_t v215 = sub_100129160();
  sub_10000DB98();
  uint64_t v214 = v53;
  __chkstk_darwin(v54);
  sub_10000DBCC();
  sub_1000999FC(v55);
  uint64_t v238 = sub_10012BBA0();
  sub_10000DB98();
  uint64_t v243 = v56;
  __chkstk_darwin(v57);
  sub_10000DBCC();
  sub_1000999FC(v58);
  uint64_t v59 = sub_10012AF70();
  __chkstk_darwin(v59 - 8);
  sub_10000DBCC();
  sub_1000999FC(v60);
  uint64_t v61 = sub_100129380();
  sub_10000DB98();
  uint64_t v237 = v62;
  __chkstk_darwin(v63);
  sub_10000DC50();
  uint64_t v66 = v65 - v64;
  uint64_t v67 = sub_1001293A0();
  sub_10000DB98();
  uint64_t v220 = v68;
  __chkstk_darwin(v69);
  sub_10000DC50();
  uint64_t v72 = v71 - v70;
  uint64_t v249 = sub_1000053D8(&qword_100170C48);
  sub_10000B3FC();
  __chkstk_darwin(v73);
  sub_10000DC50();
  uint64_t v76 = v75 - v74;
  long long v236 = (void (*)(uint64_t, uint64_t))type metadata accessor for ConditionState();
  sub_10000B3FC();
  uint64_t v78 = __chkstk_darwin(v77);
  uint64_t v80 = (uint64_t *)((char *)&v200 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v78);
  unint64_t v82 = (uint64_t *)((char *)&v200 - v81);
  uint64_t v83 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_10000B3FC();
  __chkstk_darwin(v84);
  sub_10000DC50();
  uint64_t v87 = v86 - v85;
  uint64_t v88 = type metadata accessor for AdaptiveConditionsComplicationDataStatus();
  __chkstk_darwin(v88 - 8);
  sub_10000DC50();
  uint64_t v91 = v90 - v89;
  sub_1000A356C(v262, v90 - v89, (void (*)(void))type metadata accessor for AdaptiveConditionsComplicationDataStatus);
  int v92 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v91, 2, v83);
  if (v92)
  {
    if (v92 == 1)
    {
      sub_1000F5AE8();
      sub_10012AF60();
      sub_1000F5A90();
      sub_10012B620();
      sub_10012AF30();
      swift_release();
      v267._countAndFlagsBits = 0xB0C22D2D20;
      v267._object = (void *)0xA500000000000000;
      sub_10012AF50(v267);
      sub_10012AF90();
      uint64_t v93 = sub_1000F5904();
      sub_1000F5A24(v93, v94, v95, v96);
      uint64_t v98 = *(void *)(v97 - 256);
      sub_10012B0F0();
      sub_10012B520();
      sub_100099A5C();
      sub_10000B424();
      v99();
      sub_100008278((uint64_t)v263, (uint64_t)v264, v265);
      swift_bridgeObjectRelease();
      sub_10012AF80();
      sub_1000F5904();
      sub_1000F5A08();
      swift_getOpaqueTypeConformance2();
      sub_1000F59A0();
      sub_100008278(256, v98, v67);
      swift_bridgeObjectRelease();
      sub_10000B424();
      v100();
      uint64_t v101 = v255;
      sub_10000B2F4((uint64_t)&protocol witness table for Text, v255, &qword_10016BE70);
      sub_10000B114(v101, v246, &qword_10016BE70);
      swift_storeEnumTagMultiPayload();
      sub_1000F56C4();
      sub_10002F598();
      uint64_t v102 = v247;
      sub_10012B0E0();
      sub_10000B114(v102, v256, &qword_100170C20);
      swift_storeEnumTagMultiPayload();
      sub_1000F5688();
      sub_10012B0E0();
      sub_10000D930(v102, &qword_100170C20);
      uint64_t v103 = v101;
    }
    else
    {
      sub_1000F5AE8();
      sub_10012AF60();
      sub_1000F5A90();
      sub_10012B620();
      sub_10012AF30();
      swift_release();
      sub_1000F5A90();
      sub_10012AF90();
      uint64_t v120 = sub_1000F5904();
      sub_1000F5A24(v120, v121, v122, v123);
      sub_10012B0F0();
      sub_10012B520();
      sub_10000B424();
      v124();
      sub_100008278((uint64_t)v263, (uint64_t)v264, v265);
      swift_bridgeObjectRelease();
      sub_10012AF80();
      sub_1000F5904();
      sub_1000F5A08();
      swift_getOpaqueTypeConformance2();
      sub_1000F59A0();
      sub_100008278(0xD000000000000013, 256, v67);
      swift_bridgeObjectRelease();
      sub_10000B424();
      v125();
      uint64_t v126 = v255;
      sub_10000B2F4((uint64_t)&protocol witness table for Text, v255, &qword_10016BE70);
      sub_10000B114(v126, v256, &qword_10016BE70);
      swift_storeEnumTagMultiPayload();
      sub_1000F5688();
      sub_10002F598();
      sub_10012B0E0();
      uint64_t v103 = v126;
    }
    return sub_10000D930(v103, &qword_10016BE70);
  }
  else
  {
    uint64_t v200 = v72;
    uint64_t v201 = v66;
    uint64_t v203 = v61;
    uint64_t v204 = v83;
    uint64_t v206 = v67;
    uint64_t v202 = v76;
    sub_10002FA1C(v91, v87);
    type metadata accessor for AdaptiveConditionsInlineContentView();
    sub_1000D7E94(v87, v82);
    sub_1000A356C((uint64_t)v82, (uint64_t)v80, (void (*)(void))type metadata accessor for ConditionState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v105 = v87;
    uint64_t v106 = v203;
    int v107 = v237;
    uint64_t v205 = v82;
    uint64_t v207 = v87;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v262 = (uint64_t)v80 + *(int *)(sub_1000053D8(&qword_10016EA90) + 48);
        uint64_t v186 = v211;
        uint64_t v187 = v218;
        uint64_t v188 = v219;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v211 + 32))(v218, v80, v219);
        uint64_t v189 = v210;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 16))(v210, v187, v188);
        sub_10012AF80();
        uint64_t v190 = sub_1000F5904();
        uint64_t v192 = v191;
        char v194 = v193 & 1;
        sub_1000F586C(&qword_10016EB20, (void (*)(uint64_t))type metadata accessor for RainInlineTruncateFallbackText);
        sub_1000F5ADC();
        sub_10012B4D0();
        sub_100008278(v190, v192, v194);
        swift_bridgeObjectRelease();
        sub_1000F5818(v189, (void (*)(void))type metadata accessor for RainInlineTruncateFallbackText);
        uint64_t v195 = v212;
        sub_10000B2F4(v106, v212, &qword_10016CD88);
        sub_1000F5A80();
        sub_10000B114(v196, v197, &qword_10016CD88);
        swift_storeEnumTagMultiPayload();
        sub_1000F5788();
        sub_1000D7D44();
        uint64_t v198 = v202;
        sub_1000F5A40();
        sub_10000D930(v195, &qword_10016CD88);
        (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v218, v219);
        sub_10012C6B0();
        sub_10000B3FC();
        sub_10000B424();
        v199();
        uint64_t v119 = v198;
        uint64_t v113 = v256;
        goto LABEL_18;
      case 2:
        sub_1000F5818((uint64_t)v80, (void (*)(void))type metadata accessor for ConditionState);
        goto LABEL_13;
      case 3:
LABEL_13:
        sub_1000F5AE8();
        sub_100129340();
        uint64_t v128 = v201;
        sub_100129390();
        sub_100099A5C();
        sub_10000B424();
        v129();
        char v130 = sub_100129350();
        v107[1](v128, v106);
        sub_1000F5ADC();
        sub_10012AF60();
        v268._countAndFlagsBits = 0;
        v268._object = (void *)0xE000000000000000;
        sub_10012AF50(v268);
        sub_10012C240();
        sub_10012BB60();
        v243 += 8;
        sub_1000F59D8();
        v131();
        sub_10012B620();
        sub_10012AF30();
        swift_release();
        v269._countAndFlagsBits = 32;
        v269._object = (void *)0xE100000000000000;
        sub_10012AF50(v269);
        uint64_t v132 = v221;
        sub_10012C190();
        uint64_t v133 = v222;
        sub_10012B8F0();
        if (v130)
        {
          sub_10012CDB0();
          uint64_t v134 = sub_1000F5968();
          v135(v134);
          uint64_t v136 = sub_1000F592C(enum case for WeatherFormatPlaceholder.none(_:), (uint64_t)v228);
          v137(v136);
          uint64_t v219 = sub_10012A090();
          sub_10012A080();
          sub_1000F586C(&qword_10016EAC8, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle);
          sub_100129010();
          swift_release();
          uint64_t v138 = sub_1000F5A68();
          uint64_t v140 = *(void *)(v139 - 256);
          uint64_t v228 = v141;
          v141(v138, v140);
          sub_100099A5C();
          sub_10000B424();
          v142();
          sub_1000F59E8();
          sub_1000F59D8();
          v143();
          sub_10012AF20();
          sub_10000B424();
          v144();
          sub_1000F5A90();
          sub_10012AF90();
          uint64_t v145 = (void *)sub_1000F5904();
          uint64_t v105 = v140;
        }
        else
        {
          uint64_t v149 = sub_1000F592C(enum case for WeatherFormatPlaceholder.none(_:), (uint64_t)v228);
          v150(v149);
          uint64_t v219 = sub_10012A090();
          sub_10012A080();
          sub_1000F586C(&qword_10016B068, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
          uint64_t v151 = sub_100129020();
          uint64_t v153 = v152;
          swift_release();
          uint64_t v154 = sub_1000F5A68();
          uint64_t v156 = *(void *)(v155 - 256);
          uint64_t v228 = v157;
          v157(v154, v156);
          uint64_t v158 = sub_1000F5968();
          v159(v158);
          sub_1000F59E8();
          sub_1000F59D8();
          v160();
          v270._countAndFlagsBits = v151;
          v270._object = v153;
          sub_10012AF40(v270);
          swift_bridgeObjectRelease();
          sub_1000F5A90();
          sub_10012AF90();
          uint64_t v145 = (void *)sub_1000F5904();
          uint64_t v105 = v156;
        }
        uint64_t v216 = v145;
        uint64_t v217 = (uint64_t)v146;
        uint64_t v222 = v148;
        LODWORD(v221) = v147 & 1;
        v263 = v145;
        uint64_t v264 = v146;
        char v265 = v147 & 1;
        uint64_t v266 = v148;
        sub_10012B0F0();
        sub_10012B520();
        sub_100099A5C();
        sub_10000B424();
        v161();
        sub_10012AF60();
        v271._countAndFlagsBits = 0;
        v271._object = (void *)0xE000000000000000;
        sub_10012AF50(v271);
        uint64_t v162 = v242;
        sub_10012C240();
        sub_1000F5ADC();
        sub_10012BB40();
        v236(v162, v238);
        uint64_t v163 = sub_100129910();
        uint64_t v165 = v164;
        sub_100099A5C();
        sub_10000B424();
        v166();
        v272._countAndFlagsBits = v163;
        v272._object = v165;
        sub_10012AF40(v272);
        swift_bridgeObjectRelease();
        v273._countAndFlagsBits = 8236;
        v273._object = (void *)0xE200000000000000;
        sub_10012AF50(v273);
        sub_10012C190();
        sub_10012CCA0();
        uint64_t v167 = v225;
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v225, 1, 1, v206);
        sub_10012B900();
        swift_bridgeObjectRelease();
        sub_10000D930(v167, &qword_10016C058);
        uint64_t v168 = v132;
        uint64_t v169 = v240;
        ((void (*)(uint64_t, void, uint64_t))v237)(v240, v262, v105);
        sub_10012A090();
        sub_10012A080();
        sub_1000F586C(&qword_10016B068, (void (*)(uint64_t))&type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle);
        uint64_t v170 = v239;
        uint64_t v171 = v241;
        uint64_t v172 = sub_100129020();
        uint64_t v174 = v173;
        swift_release();
        v228(v169, v105);
        v229(v133, v171);
        v227(v168, v170);
        v274._countAndFlagsBits = v172;
        v274._object = v174;
        sub_10012AF40(v274);
        swift_bridgeObjectRelease();
        v275._countAndFlagsBits = 0x7365657267656420;
        v275._object = (void *)0xE800000000000000;
        sub_10012AF50(v275);
        sub_10012AF90();
        uint64_t v175 = sub_1000F5904();
        uint64_t v177 = v176;
        uint64_t v106 = v178;
        LOBYTE(v171) = v179 & 1;
        v263 = &type metadata for Text;
        uint64_t v264 = &protocol witness table for Text;
        swift_getOpaqueTypeConformance2();
        uint64_t v180 = v252;
        sub_10012B4D0();
        sub_100008278(v175, v177, v171);
        swift_bridgeObjectRelease();
        sub_10000B424();
        v181();
        uint64_t v182 = v255;
        sub_10000B2F4(v180, v255, &qword_10016BE70);
        sub_10000B114(v182, v231, &qword_10016BE70);
        swift_storeEnumTagMultiPayload();
        sub_10002F598();
        sub_1000F57C4();
        uint64_t v183 = v233;
        sub_10012B0E0();
        sub_1000F5A80();
        sub_10000B114(v184, v185, &qword_100170C40);
        sub_1000F5ABC();
        sub_1000F5788();
        sub_1000D7D44();
        sub_1000F5ADC();
        sub_10012B0E0();
        sub_100008278((uint64_t)v216, v217, v221);
        swift_bridgeObjectRelease();
        sub_10000D930(v183, &qword_100170C40);
        sub_10000D930(v182, &qword_10016BE70);
        uint64_t v119 = v106;
        uint64_t v113 = v256;
LABEL_18:
        sub_1000F5AA8();
        break;
      default:
        uint64_t v109 = *v80;
        uint64_t v108 = (void *)v80[1];
        unsigned __int8 v110 = sub_10012B170();
        unsigned __int8 v111 = sub_10012B190();
        char v112 = sub_10012B180();
        sub_10012B180();
        if (sub_10012B180() != v110) {
          char v112 = sub_10012B180();
        }
        sub_10012B180();
        if (sub_10012B180() != v111) {
          char v112 = sub_10012B180();
        }
        uint64_t v113 = v256;
        sub_1000F5AA8();
        uint64_t v114 = (uint64_t)v213;
        unsigned char *v213 = v112;
        uint64_t v115 = sub_1000053D8(&qword_100170C70);
        sub_1000F4F30(v109, v108, v114 + *(int *)(v115 + 44));
        swift_bridgeObjectRelease();
        uint64_t v116 = v229;
        sub_10000B2F4(v114, (uint64_t)v229, &qword_100170C28);
        sub_10000B114((uint64_t)v116, v231, &qword_100170C28);
        swift_storeEnumTagMultiPayload();
        sub_10002F598();
        sub_1000F57C4();
        sub_1000F5AE8();
        sub_10012B0E0();
        sub_1000F5A80();
        sub_10000B114(v117, v118, &qword_100170C40);
        sub_1000F5ABC();
        sub_1000F5788();
        sub_1000D7D44();
        uint64_t v119 = v202;
        sub_1000F5A40();
        sub_10000D930((uint64_t)v116, &qword_100170C40);
        sub_10000D930((uint64_t)v229, &qword_100170C28);
        break;
    }
    sub_10000B114(v119, v105, &qword_100170C48);
    swift_storeEnumTagMultiPayload();
    sub_1000F56C4();
    sub_10002F598();
    sub_10012B0E0();
    sub_10000B114(v106, v113, &qword_100170C20);
    swift_storeEnumTagMultiPayload();
    sub_1000F5688();
    sub_10012B0E0();
    sub_10000D930(v106, &qword_100170C20);
    sub_10000D930(v119, &qword_100170C48);
    sub_1000F5818((uint64_t)v205, (void (*)(void))type metadata accessor for ConditionState);
    return sub_1000F5818(v207, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
  }
}

uint64_t sub_1000F4F30@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v45 = (void *)a1;
  uint64_t v46 = a2;
  uint64_t v54 = a3;
  uint64_t v5 = sub_10012B120();
  uint64_t v49 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10012AF70();
  __chkstk_darwin(v9 - 8);
  uint64_t v52 = sub_1000053D8(&qword_10016EAC0);
  uint64_t v58 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_1000053D8(&qword_10016BE70);
  uint64_t v12 = __chkstk_darwin(v57);
  uint64_t v53 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v55 = (uint64_t)&v45 - v18;
  __chkstk_darwin(v17);
  uint64_t v56 = (uint64_t)&v45 - v19;
  sub_10012AF60();
  v63._countAndFlagsBits = 0;
  v63._object = (void *)0xE000000000000000;
  sub_10012AF50(v63);
  unint64_t v51 = 0x800000010013A4E0;
  sub_10012B620();
  sub_10012AF30();
  swift_release();
  v64._countAndFlagsBits = 32;
  v64._object = (void *)0xE100000000000000;
  sub_10012AF50(v64);
  v65._countAndFlagsBits = a1;
  v65._object = v3;
  sub_10012AF40(v65);
  v66._countAndFlagsBits = 0;
  v66._object = (void *)0xE000000000000000;
  sub_10012AF50(v66);
  sub_10012AF90();
  uint64_t v59 = (void *)sub_10012B400();
  uint64_t v60 = v20;
  char v61 = v21 & 1;
  uint64_t v62 = v22;
  sub_10012B0F0();
  sub_10012B520();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v48 = v6 + 8;
  uint64_t v50 = v23;
  v23(v8, v5);
  sub_100008278((uint64_t)v59, (uint64_t)v60, v61);
  swift_bridgeObjectRelease();
  sub_10012AF80();
  uint64_t v24 = sub_10012B400();
  uint64_t v26 = v25;
  LOBYTE(v3) = v27 & 1;
  uint64_t v59 = &type metadata for Text;
  uint64_t v60 = &protocol witness table for Text;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v28 = v52;
  sub_10012B4D0();
  sub_100008278(v24, v26, (char)v3);
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v58 + 8);
  v58 += 8;
  v29(v11, v28);
  uint64_t v59 = v45;
  uint64_t v60 = v46;
  sub_10000822C();
  uint64_t v30 = v55;
  sub_10012AC60();
  sub_10000D930((uint64_t)v16, &qword_10016BE70);
  sub_10000B2F4(v30, v56, &qword_10016BE70);
  sub_10012AF60();
  v67._countAndFlagsBits = 0;
  v67._object = (void *)0xE000000000000000;
  sub_10012AF50(v67);
  sub_10012B620();
  sub_10012AF30();
  swift_release();
  v68._countAndFlagsBits = 0x2065726576655320;
  v68._object = (void *)0xEF72656874616557;
  sub_10012AF50(v68);
  sub_10012AF90();
  uint64_t v59 = (void *)sub_10012B400();
  uint64_t v60 = v31;
  char v61 = v32 & 1;
  uint64_t v62 = v33;
  sub_10012B0F0();
  sub_10012B520();
  v50(v8, v49);
  sub_100008278((uint64_t)v59, (uint64_t)v60, v61);
  swift_bridgeObjectRelease();
  sub_10012AF80();
  uint64_t v34 = sub_10012B400();
  uint64_t v36 = v35;
  char v38 = v37 & 1;
  uint64_t v39 = (uint64_t)v53;
  sub_10012B4D0();
  sub_100008278(v34, v36, v38);
  swift_bridgeObjectRelease();
  v29(v11, v28);
  sub_10012AF80();
  sub_10012AC50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000D930(v39, &qword_10016BE70);
  uint64_t v40 = v55;
  sub_10000B2F4((uint64_t)v16, v55, &qword_10016BE70);
  uint64_t v41 = v56;
  sub_10000B114(v56, (uint64_t)v16, &qword_10016BE70);
  sub_10000B114(v40, v39, &qword_10016BE70);
  uint64_t v42 = v54;
  sub_10000B114((uint64_t)v16, v54, &qword_10016BE70);
  uint64_t v43 = sub_1000053D8(&qword_100170C78);
  sub_10000B114(v39, v42 + *(int *)(v43 + 48), &qword_10016BE70);
  sub_10000D930(v40, &qword_10016BE70);
  sub_10000D930(v41, &qword_10016BE70);
  sub_10000D930(v39, &qword_10016BE70);
  return sub_10000D930((uint64_t)v16, &qword_10016BE70);
}

uint64_t sub_1000F5688()
{
  return sub_1000F5700(&qword_100170C50, &qword_100170C20, (void (*)(void))sub_1000F56C4, (void (*)(void))sub_10002F598);
}

uint64_t sub_1000F56C4()
{
  return sub_1000F5700(&qword_100170C58, &qword_100170C48, (void (*)(void))sub_1000F5788, (void (*)(void))sub_1000D7D44);
}

uint64_t sub_1000F5700(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100005470(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F5788()
{
  return sub_1000F5700(&qword_100170C60, &qword_100170C40, (void (*)(void))sub_10002F598, (void (*)(void))sub_1000F57C4);
}

unint64_t sub_1000F57C4()
{
  unint64_t result = qword_100170C68;
  if (!qword_100170C68)
  {
    sub_100005470(&qword_100170C28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170C68);
  }
  return result;
}

uint64_t sub_1000F5818(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3FC();
  sub_10000B424();
  v3();
  return a1;
}

uint64_t sub_1000F586C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F58B4()
{
  return sub_1000F5700(&qword_100170C80, &qword_100170C88, (void (*)(void))sub_1000F5688, (void (*)(void))sub_10002F598);
}

uint64_t sub_1000F5904()
{
  return sub_10012B400();
}

uint64_t sub_1000F592C@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a2 + 104);
  *(void *)(v2 - 552) = (a2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  uint64_t result = *(void *)(v2 - 368);
  *(_DWORD *)(v2 - 176) = a1;
  *(void *)(v2 - 392) = v3;
  return result;
}

uint64_t sub_1000F5968()
{
  uint64_t v2 = *(void *)(v1 - 496);
  uint64_t v3 = *(void *)(v2 + 8);
  *(void *)(v1 - 496) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t result = v0;
  *(void *)(v1 - 464) = v3;
  return result;
}

uint64_t sub_1000F59A0()
{
  return sub_10012B4D0();
}

void sub_1000F59D8()
{
  *(void *)(v1 - 256) = v0;
}

void sub_1000F59E8()
{
  *(void *)(v0 - 488) = (*(void *)(v0 - 480) + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
}

void sub_1000F5A08()
{
  *(void *)(v2 - 128) = v0;
  *(void *)(v2 - 120) = v1;
}

uint64_t sub_1000F5A24(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 - 128) = result;
  *(void *)(v4 - 120) = a2;
  *(unsigned char *)(v4 - 112) = a3 & 1;
  *(void *)(v4 - 104) = a4;
  return result;
}

uint64_t sub_1000F5A40()
{
  return sub_10012B0E0();
}

uint64_t sub_1000F5A68()
{
  *(void *)(v2 - 568) = v0 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  return v1;
}

void sub_1000F5A90()
{
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  sub_10012AF50(v1);
}

uint64_t sub_1000F5ABC()
{
  return swift_storeEnumTagMultiPayload();
}

unint64_t sub_1000F5AF8()
{
  unint64_t result = qword_100170CB0;
  if (!qword_100170CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170CB0);
  }
  return result;
}

uint64_t sub_1000F5B44()
{
  return sub_10000B38C(&qword_100170CB8, &qword_100170CC0);
}

uint64_t sub_1000F5B80()
{
  unint64_t v0 = sub_1000F7970();

  return _EntityURLRepresentation.init(_:)(0xD000000000000055, 0x800000010013ACE0, &unk_1001643C8, v0);
}

uint64_t sub_1000F5BDC()
{
  uint64_t v0 = sub_1000053D8(&qword_100170E10);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1001291D0();
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100128F30();
  sub_10006D284(v4, qword_100181C88);
  sub_10000D7A4(v4, (uint64_t)qword_100181C88);
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v3);
  return sub_100128F20();
}

uint64_t sub_1000F5D18()
{
  uint64_t v2 = sub_1000053D8(&qword_100170E38);
  uint64_t v3 = sub_10000DC9C(v2);
  __chkstk_darwin(v3);
  sub_10005C778();
  uint64_t v4 = sub_1000053D8(&qword_100170E10);
  uint64_t v5 = sub_10000DC9C(v4);
  __chkstk_darwin(v5);
  sub_10008F960();
  uint64_t v6 = sub_1001291D0();
  sub_10000B3FC();
  __chkstk_darwin(v7);
  sub_10002A5E0();
  __chkstk_darwin(v8);
  sub_1000F91C8();
  sub_10007BB8C();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v6);
  uint64_t v9 = sub_100128DF0();
  sub_1000AC238(v0, v10, v11, v9);
  sub_1000F91C8();
  return sub_100128E00();
}

uint64_t sub_1000F5E84(uint64_t a1)
{
  return sub_1000F842C(a1, qword_100181CA0);
}

uint64_t sub_1000F5EA8()
{
  uint64_t v0 = sub_1000053D8(&qword_100170EB0);
  sub_10006D284(v0, qword_100181CB8);
  uint64_t v1 = sub_10000D7A4(v0, (uint64_t)qword_100181CB8);
  sub_100128D60();
  uint64_t v2 = sub_100128D70();

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v2);
}

uint64_t sub_1000F5F3C()
{
  if (qword_10016AE50 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1000053D8(&qword_100170EB0);

  return sub_10000D7A4(v0, (uint64_t)qword_100181CB8);
}

uint64_t sub_1000F5FA4()
{
  uint64_t result = swift_getKeyPath();
  qword_100181CD0 = result;
  return result;
}

uint64_t sub_1000F5FCC()
{
  return swift_retain();
}

uint64_t sub_1000F5FD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = sub_1000F5FCC();
  *a2 = v3;
  return result;
}

uint64_t *sub_1000F6004()
{
  if (qword_10016AE58 != -1) {
    swift_once();
  }
  return &qword_100181CD0;
}

uint64_t sub_1000F6050()
{
  sub_100128C30();
  return v1;
}

uint64_t sub_1000F6088()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F60D8()
{
  sub_100128C30();
  return v1;
}

uint64_t sub_1000F610C()
{
  return sub_100128C40();
}

uint64_t sub_1000F6140()
{
  sub_100047290();
  v0[21] = v1;
  v0[22] = v2;
  v0[20] = v3;
  uint64_t v4 = sub_1000053D8(&qword_100170E80);
  sub_10000DC9C(v4);
  v0[23] = sub_1000F9230();
  uint64_t v5 = sub_1000053D8(&qword_100170E88);
  sub_10000DC9C(v5);
  v0[24] = sub_1000F9230();
  uint64_t v6 = sub_1000053D8(&qword_100170E90);
  sub_10000DC9C(v6);
  v0[25] = sub_1000F9230();
  uint64_t v7 = sub_100128C00();
  v0[26] = v7;
  sub_100047198(v7);
  v0[27] = v8;
  v0[28] = sub_1000F9230();
  uint64_t v9 = sub_1000053D8(&qword_100170E98);
  v0[29] = v9;
  sub_100047198(v9);
  v0[30] = v10;
  v0[31] = swift_task_alloc();
  v0[32] = swift_task_alloc();
  sub_1000F9280();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_1000F6288()
{
  sub_100047290();
  sub_100128C30();
  long long v1 = *(_OWORD *)(v0 + 24);
  *(void *)(v0 + 40) = *(void *)(v0 + 16);
  *(_OWORD *)(v0 + 48) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v2;
  unint64_t v3 = sub_1000F7970();
  *uint64_t v2 = v0;
  v2[1] = sub_1000F6368;
  uint64_t v4 = *(void *)(v0 + 256);
  return IntentDialog._CapturedContent.init<>(entity:_:)(v4, v0 + 40, sub_1000F69AC, 0, &unk_1001643C8, v3);
}

uint64_t sub_1000F6368()
{
  sub_100047290();
  sub_10004716C();
  uint64_t v1 = *v0;
  sub_1000471B0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1000F9280();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000F6430()
{
  sub_100128C30();
  *(void *)(v0 + 88) = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  *(void *)(v0 + 272) = v1;
  *(void *)(v0 + 280) = v2;
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = v2;
  sub_100128C30();
  *(unsigned char *)(v0 + 312) = *(unsigned char *)(v0 + 313);
  if (qword_10016AE58 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100181CD0;
  *(void *)(v0 + 288) = qword_100181CD0;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v4;
  uint64_t v5 = sub_10000B38C(&qword_100170E58, &qword_100170E60);
  *uint64_t v4 = v0;
  v4[1] = sub_1000F6590;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 312, v3, &type metadata for Bool, v5);
}

uint64_t sub_1000F6590()
{
  sub_10004716C();
  uint64_t v2 = *v1;
  sub_1000471B0();
  *uint64_t v3 = v2;
  *(void *)(v4 + 304) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000F9280();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000F66D0()
{
  uint64_t v16 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v14 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  sub_100128C30();
  long long v5 = *(_OWORD *)(v0 + 144);
  *(void *)(v0 + 112) = *(void *)(v0 + 136);
  *(_OWORD *)(v0 + 120) = v5;
  uint64_t v6 = sub_100128F10();
  sub_1000AC238(v4, v7, v8, v6);
  uint64_t v9 = sub_100128F40();
  sub_1000AC238(v3, v10, v11, v9);
  sub_1000F5AF8();
  sub_1000F7C44();
  sub_100128BD0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v15, v16, v14);
  sub_100128BF0();
  sub_100128C10();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v2, v18);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v16, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000F9220();
  return v12();
}

uint64_t sub_1000F68EC()
{
  (*(void (**)(void, void))(v0[30] + 8))(v0[32], v0[29]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100047328();
  return v1();
}

uint64_t sub_1000F69B0()
{
  uint64_t v1 = sub_1000053D8(&qword_100170EA0);
  sub_10000DB98();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10008F960();
  if (qword_10016AE58 != -1) {
    swift_once();
  }
  swift_retain();
  sub_100128DD0();
  swift_release();
  sub_1000F7C44();
  sub_10000B38C(&qword_100170EA8, &qword_100170EA0);
  sub_100128DC0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
}

uint64_t sub_1000F6AE0()
{
  uint64_t v1 = sub_1000053D8(&qword_100170E68);
  uint64_t v2 = sub_10000DC9C(v1);
  __chkstk_darwin(v2);
  sub_10000DC50();
  uint64_t v33 = v4 - v3;
  uint64_t v5 = sub_100128EA0();
  sub_10000DB98();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10000DC50();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_1000053D8(&qword_100170E08);
  uint64_t v13 = sub_10000DC9C(v12);
  __chkstk_darwin(v13);
  sub_10002A5E0();
  uint64_t v16 = v14 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v30 - v18;
  uint64_t v20 = sub_1000053D8(&qword_100170E10);
  uint64_t v21 = sub_10000DC9C(v20);
  __chkstk_darwin(v21);
  sub_1000212FC();
  uint64_t v32 = sub_1001291D0();
  __chkstk_darwin(v32);
  sub_10000DC50();
  v30[0] = sub_1000053D8(&qword_100170E18);
  sub_1001291C0();
  sub_1000F9248(v0);
  sub_100128C00();
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  sub_1000F9264((uint64_t)v19);
  sub_1000F9264(v16);
  uint64_t v22 = enum case for InputConnectionBehavior.default(_:);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  v30[1] = v7 + 104;
  uint64_t v31 = v23;
  v23(v11, enum case for InputConnectionBehavior.default(_:), v5);
  sub_1000F7970();
  uint64_t v24 = v11;
  uint64_t v25 = sub_100128C60();
  sub_1000053D8(&qword_100170E70);
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 1, 1, v32);
  LOBYTE(v34) = 2;
  uint64_t v26 = sub_10012CBF0();
  sub_1000AC238(v33, v27, v28, v26);
  sub_1000F9264((uint64_t)v19);
  v31(v24, v22, v5);
  sub_100128C70();
  return v25;
}

uint64_t sub_1000F6DEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000F6050();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_1000F6E1C()
{
  return sub_1000F6088();
}

uint64_t (*sub_1000F6E30(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100128C20();
  return sub_1000F6E8C;
}

uint64_t sub_1000F6E90@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000F60D8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000F6EC0()
{
  return sub_1000F610C();
}

uint64_t (*sub_1000F6ECC(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100128C20();
  return sub_1000F6E8C;
}

uint64_t sub_1000F6F28()
{
  sub_1000F6004();

  return swift_retain();
}

unint64_t sub_1000F6F5C()
{
  return 0xD000000000000015;
}

unint64_t sub_1000F6F80()
{
  unint64_t result = qword_100170CC8;
  if (!qword_100170CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170CC8);
  }
  return result;
}

unint64_t sub_1000F6FD0()
{
  unint64_t result = qword_100170CD0;
  if (!qword_100170CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170CD0);
  }
  return result;
}

uint64_t sub_1000F701C()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_1000F7050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F894C(a1, a2, a3, (void (*)(void))sub_1000F5AF8);
}

uint64_t sub_1000F7068@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F89C4(&qword_10016AE48, (uint64_t)qword_100181CA0, a1);
}

uint64_t sub_1000F709C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000F5F3C();

  return sub_1000F915C(v2, a1);
}

uint64_t sub_1000F70D4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100047164;
  return sub_1000F6140();
}

uint64_t sub_1000F7180@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000F6AE0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000F71A8()
{
  return 0xD000000000000030;
}

unint64_t sub_1000F71C8()
{
  unint64_t result = qword_100170CE0;
  if (!qword_100170CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170CE0);
  }
  return result;
}

unint64_t sub_1000F7218()
{
  unint64_t result = qword_100170CE8;
  if (!qword_100170CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170CE8);
  }
  return result;
}

uint64_t sub_1000F7264(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000F7284, 0, 0);
}

uint64_t sub_1000F7284()
{
  sub_100047290();
  if (qword_10016ADF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(unsigned char **)(v0 + 16);
  *uint64_t v1 = sub_100063CF8() & 1;
  sub_1000F9220();
  return v2();
}

uint64_t sub_1000F731C(uint64_t a1, unsigned char *a2)
{
  *(unsigned char *)(v2 + 16) = *a2;
  return _swift_task_switch(sub_1000F7340, 0, 0);
}

uint64_t sub_1000F7340()
{
  sub_100047290();
  if (qword_10016ADF0 != -1) {
    swift_once();
  }
  sub_100063DE0();
  sub_1000F9118();
  sub_10012CD80();
  sub_1000F9220();
  return v0();
}

uint64_t sub_1000F73E0()
{
  sub_100047290();
  uint64_t v1 = sub_1001291D0();
  sub_10000DC9C(v1);
  *(void *)(v0 + 16) = sub_1000F9230();
  sub_1000F9280();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000F7458()
{
  sub_100047290();
  sub_1000053D8(&qword_100170CC0);
  sub_1000F91C8();
  sub_10000B38C(&qword_100170E58, &qword_100170E60);
  sub_100128F70();
  swift_task_dealloc();
  sub_10007BB8C();
  return v0(0xD00000000000001FLL);
}

uint64_t sub_1000F755C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000F75EC;
  return sub_1000F73E0();
}

uint64_t sub_1000F75EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10004716C();
  uint64_t v9 = v8;
  uint64_t v10 = *v4;
  sub_1000471B0();
  *uint64_t v11 = v10;
  swift_task_dealloc();
  if (!v3)
  {
    uint64_t v12 = *(void **)(v9 + 16);
    *uint64_t v12 = a1;
    v12[1] = a2;
    v12[2] = a3;
  }
  uint64_t v13 = *(uint64_t (**)(void))(v10 + 8);
  return v13();
}

unint64_t sub_1000F76E8()
{
  unint64_t result = qword_100170CF8;
  if (!qword_100170CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170CF8);
  }
  return result;
}

uint64_t sub_1000F7734(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  unint64_t v5 = sub_1000F7E7C();
  *uint64_t v4 = v2;
  v4[1] = sub_1000F77E4;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_1000F77E4(uint64_t a1)
{
  sub_10004716C();
  uint64_t v5 = v4;
  uint64_t v6 = *v2;
  sub_1000471B0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v5 + 16) = a1;
  }
  uint64_t v8 = *(uint64_t (**)(void))(v6 + 8);
  return v8();
}

unint64_t sub_1000F78D0()
{
  unint64_t result = qword_100170D08;
  if (!qword_100170D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D08);
  }
  return result;
}

unint64_t sub_1000F7920()
{
  unint64_t result = qword_100170D10;
  if (!qword_100170D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D10);
  }
  return result;
}

unint64_t sub_1000F7970()
{
  unint64_t result = qword_100170D18[0];
  if (!qword_100170D18[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100170D18);
  }
  return result;
}

uint64_t sub_1000F79BC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000F7E7C();
  *uint64_t v5 = v2;
  v5[1] = sub_1000F7A70;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_1000F7A70()
{
  sub_100047290();
  uint64_t v3 = v2;
  sub_10004716C();
  uint64_t v4 = *v1;
  sub_1000471B0();
  *uint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t sub_1000F7B40(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  unint64_t v5 = sub_1000F7E7C();
  *uint64_t v4 = v2;
  v4[1] = sub_1000F91C4;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000F7BF4()
{
  unint64_t result = qword_100170D30;
  if (!qword_100170D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D30);
  }
  return result;
}

unint64_t sub_1000F7C44()
{
  unint64_t result = qword_100170D38;
  if (!qword_100170D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D38);
  }
  return result;
}

unint64_t sub_1000F7C94()
{
  unint64_t result = qword_100170D40;
  if (!qword_100170D40)
  {
    sub_100005470(qword_100170D48);
    sub_1000F7C44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D40);
  }
  return result;
}

uint64_t sub_1000F7D08(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000F76E8();
  *unint64_t v5 = v2;
  v5[1] = sub_100046C9C;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_1000F7DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100046C9C;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_1000F7E7C()
{
  unint64_t result = qword_100170D60;
  if (!qword_100170D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D60);
  }
  return result;
}

uint64_t sub_1000F7EC8()
{
  uint64_t v0 = qword_100170C90;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t sub_1000F7F04()
{
  unint64_t result = qword_100170D68;
  if (!qword_100170D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D68);
  }
  return result;
}

unint64_t sub_1000F7F58()
{
  unint64_t result = qword_100170D70;
  if (!qword_100170D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D70);
  }
  return result;
}

unint64_t sub_1000F7FA8()
{
  unint64_t result = qword_100170D78;
  if (!qword_100170D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D78);
  }
  return result;
}

unint64_t sub_1000F7FF8()
{
  unint64_t result = qword_100170D80;
  if (!qword_100170D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D80);
  }
  return result;
}

void *sub_1000F8044()
{
  return &protocol witness table for String;
}

uint64_t sub_1000F8050()
{
  sub_1000F90B8();
  uint64_t v2 = sub_100128EB0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return sub_1000F9104(v3, v0, v2, v1);
}

unint64_t sub_1000F80E8()
{
  unint64_t result = qword_100170D90;
  if (!qword_100170D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D90);
  }
  return result;
}

unint64_t sub_1000F8138()
{
  unint64_t result = qword_100170D98;
  if (!qword_100170D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170D98);
  }
  return result;
}

unint64_t sub_1000F8188()
{
  unint64_t result = qword_100170DA0;
  if (!qword_100170DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170DA0);
  }
  return result;
}

void *sub_1000F81D4()
{
  return &protocol witness table for String;
}

uint64_t sub_1000F81E0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F81EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000F848C(&qword_10016AE40, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100181C88);
  uint64_t v3 = sub_100128F30();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v2, v3);
}

uint64_t sub_1000F8290()
{
  return sub_10000B38C(&qword_100170DA8, &qword_100170DB0);
}

uint64_t sub_1000F82CC(uint64_t a1)
{
  unint64_t v2 = sub_1000F7970();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000F831C()
{
  unint64_t result = qword_100170DB8;
  if (!qword_100170DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170DB8);
  }
  return result;
}

uint64_t sub_1000F836C(uint64_t a1)
{
  unint64_t v2 = sub_1000F8188();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_1000F83BC()
{
  unint64_t result = qword_100170DC0;
  if (!qword_100170DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170DC0);
  }
  return result;
}

uint64_t sub_1000F8408(uint64_t a1)
{
  return sub_1000F842C(a1, qword_100181CD8);
}

uint64_t sub_1000F842C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1001291D0();
  sub_10006D284(v3, a2);
  sub_10000D7A4(v3, (uint64_t)a2);
  return sub_1001291C0();
}

uint64_t sub_1000F848C(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return sub_10000D7A4(v5, a3);
}

uint64_t sub_1000F84E8()
{
  uint64_t v1 = sub_100128EA0();
  sub_10000DB98();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10005C778();
  uint64_t v5 = sub_1000053D8(&qword_100170E08);
  uint64_t v6 = sub_10000DC9C(v5);
  __chkstk_darwin(v6);
  sub_10002A5E0();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = &v21[-v11];
  uint64_t v13 = sub_1000053D8(&qword_100170E10);
  uint64_t v14 = sub_10000DC9C(v13);
  __chkstk_darwin(v14);
  sub_10000DC50();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_1001291D0();
  sub_10000B3FC();
  __chkstk_darwin(v19);
  sub_1000212FC();
  sub_1000053D8(&qword_100170E18);
  sub_10007BB8C();
  sub_1001291C0();
  sub_10007BB8C();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v17, 0, 1, v18);
  sub_100128C00();
  memset(&v21[8], 0, 24);
  sub_1000F9248((uint64_t)v12);
  sub_1000F9248(v9);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for InputConnectionBehavior.default(_:), v1);
  sub_1000F7970();
  return sub_100128C60();
}

void sub_1000F8708(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

unint64_t sub_1000F8758()
{
  unint64_t result = qword_100170DC8;
  if (!qword_100170DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170DC8);
  }
  return result;
}

unint64_t sub_1000F87A8()
{
  unint64_t result = qword_100170DD0;
  if (!qword_100170DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170DD0);
  }
  return result;
}

uint64_t sub_1000F87F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000F9020();
  unint64_t v5 = sub_1000F90B8();

  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_1000F885C()
{
  uint64_t v0 = qword_100170CA0;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t sub_1000F8898()
{
  unint64_t result = qword_100170DD8;
  if (!qword_100170DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170DD8);
  }
  return result;
}

unint64_t sub_1000F88E8()
{
  unint64_t result = qword_100170DE0;
  if (!qword_100170DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170DE0);
  }
  return result;
}

uint64_t sub_1000F8934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F894C(a1, a2, a3, (void (*)(void))sub_1000F8758);
}

uint64_t sub_1000F894C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F89A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F89C4(&qword_10016AE60, (uint64_t)qword_100181CD8, a1);
}

uint64_t sub_1000F89C4@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = sub_1000F848C(a1, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, a2);
  sub_1001291D0();
  sub_10000B3FC();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);

  return v7(a3, v4, v5);
}

uint64_t sub_1000F8A50(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000F9020();
  unint64_t v7 = sub_1000F906C();
  unint64_t v8 = sub_1000F90B8();
  *uint64_t v5 = v2;
  v5[1] = sub_1000F8B24;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000F8B24()
{
  sub_100047290();
  sub_10004716C();
  uint64_t v2 = *v1;
  sub_1000471B0();
  *uint64_t v3 = v2;
  uint64_t result = swift_task_dealloc();
  if (v0)
  {
    sub_100047328();
    return v5();
  }
  return result;
}

uint64_t sub_1000F8BF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000F84E8();
  *a1 = result;
  return result;
}

uint64_t sub_1000F8C20(uint64_t a1)
{
  unint64_t v2 = sub_1000F8758();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

void type metadata accessor for OpenWeatherHomeWorkShowLabelsIntent()
{
}

void type metadata accessor for WeatherHomeWorkShowLabelsEntity.WeatherHomeWorkShowLabelsEntityQuery()
{
}

void *sub_1000F8C78(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1000F8CB8(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 sub_1000F8D20(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1000F8D34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1000F8D7C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000F8DBC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for WeatherHomeWorkShowLabelsEntity()
{
}

uint64_t sub_1000F8E0C()
{
  swift_release();

  return swift_release();
}

void *sub_1000F8E48(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1000F8E80(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1000F8EE0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_1000F8F20(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000F8F60(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for WeatherHomeWorkShowLabelsEntity.UpdateIntent_value()
{
}

uint64_t sub_1000F8FA8()
{
  return sub_10000B38C(&qword_100170DF0, &qword_100170DF8);
}

uint64_t sub_1000F8FE4()
{
  return sub_10000B38C(&qword_100170E00, &qword_100170DF8);
}

unint64_t sub_1000F9020()
{
  unint64_t result = qword_100170E20;
  if (!qword_100170E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170E20);
  }
  return result;
}

unint64_t sub_1000F906C()
{
  unint64_t result = qword_100170E28;
  if (!qword_100170E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170E28);
  }
  return result;
}

unint64_t sub_1000F90B8()
{
  unint64_t result = qword_100170E30;
  if (!qword_100170E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170E30);
  }
  return result;
}

uint64_t sub_1000F9104(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

unint64_t sub_1000F9118()
{
  unint64_t result = qword_10016C740;
  if (!qword_10016C740)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10016C740);
  }
  return result;
}

uint64_t sub_1000F915C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_100170EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F91C8()
{
  return sub_1001291C0();
}

uint64_t sub_1000F91F8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F9220()
{
  return v0 + 8;
}

uint64_t sub_1000F9230()
{
  return swift_task_alloc();
}

uint64_t sub_1000F9248(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1000F9264(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(a1, 1, 1, v1);
}

unint64_t sub_1000F9290()
{
  unint64_t result = qword_100170ED8;
  if (!qword_100170ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170ED8);
  }
  return result;
}

uint64_t sub_1000F92DC()
{
  return sub_10000B38C(&qword_100170EE0, &qword_100170EE8);
}

uint64_t sub_1000F9318()
{
  unint64_t v0 = sub_1000FACF0();

  return _EntityURLRepresentation.init(_:)(0xD00000000000004DLL, 0x800000010013AD40, &unk_100164510, v0);
}

uint64_t sub_1000F9374()
{
  uint64_t v0 = sub_1000053D8(&qword_100170E10);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1001291D0();
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100128F30();
  sub_10006D284(v4, qword_100181CF0);
  sub_10000D7A4(v4, (uint64_t)qword_100181CF0);
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v3);
  return sub_100128F20();
}

uint64_t sub_1000F94A8()
{
  uint64_t v2 = sub_1000053D8(&qword_100170E38);
  uint64_t v3 = sub_10000DC9C(v2);
  __chkstk_darwin(v3);
  sub_10005C778();
  uint64_t v4 = sub_1000053D8(&qword_100170E10);
  uint64_t v5 = sub_10000DC9C(v4);
  __chkstk_darwin(v5);
  sub_10008F960();
  uint64_t v6 = sub_1001291D0();
  sub_10000B3FC();
  __chkstk_darwin(v7);
  sub_10002A5E0();
  __chkstk_darwin(v8);
  sub_1001291C0();
  sub_10007BB8C();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v6);
  uint64_t v9 = sub_100128DF0();
  sub_1000AC238(v0, v10, v11, v9);
  sub_1001291C0();
  return sub_100128E00();
}

uint64_t sub_1000F9644(uint64_t a1)
{
  return sub_1000F842C(a1, qword_100181D08);
}

uint64_t sub_1000F9668()
{
  uint64_t v0 = sub_1000053D8(&qword_100170EB0);
  sub_10006D284(v0, qword_100181D20);
  uint64_t v1 = sub_10000D7A4(v0, (uint64_t)qword_100181D20);
  sub_100128D60();
  uint64_t v2 = sub_100128D70();

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v2);
}

uint64_t sub_1000F96FC()
{
  if (qword_10016AE78 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1000053D8(&qword_100170EB0);

  return sub_10000D7A4(v0, (uint64_t)qword_100181D20);
}

uint64_t sub_1000F9764()
{
  uint64_t result = swift_getKeyPath();
  qword_100181D38 = result;
  return result;
}

uint64_t *sub_1000F978C()
{
  if (qword_10016AE80 != -1) {
    swift_once();
  }
  return &qword_100181D38;
}

uint64_t sub_1000F97D8()
{
  sub_100047290();
  v0[21] = v1;
  v0[22] = v2;
  v0[20] = v3;
  uint64_t v4 = sub_1000053D8(&qword_100170E80);
  sub_10000DC9C(v4);
  v0[23] = sub_1000F9230();
  uint64_t v5 = sub_1000053D8(&qword_100170E88);
  sub_10000DC9C(v5);
  v0[24] = sub_1000F9230();
  uint64_t v6 = sub_1000053D8(&qword_100171078);
  sub_10000DC9C(v6);
  v0[25] = sub_1000F9230();
  uint64_t v7 = sub_100128C00();
  v0[26] = v7;
  sub_100047198(v7);
  v0[27] = v8;
  v0[28] = sub_1000F9230();
  uint64_t v9 = sub_1000053D8(&qword_100171080);
  v0[29] = v9;
  sub_100047198(v9);
  v0[30] = v10;
  v0[31] = swift_task_alloc();
  v0[32] = swift_task_alloc();
  sub_1000F9280();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_1000F9920()
{
  sub_100047290();
  sub_100128C30();
  long long v1 = *(_OWORD *)(v0 + 24);
  *(void *)(v0 + 40) = *(void *)(v0 + 16);
  *(_OWORD *)(v0 + 48) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v2;
  unint64_t v3 = sub_1000FACF0();
  *uint64_t v2 = v0;
  v2[1] = sub_1000F9A00;
  uint64_t v4 = *(void *)(v0 + 256);
  return IntentDialog._CapturedContent.init<>(entity:_:)(v4, v0 + 40, sub_1000F9F7C, 0, &unk_100164510, v3);
}

uint64_t sub_1000F9A00()
{
  sub_100047290();
  sub_10004716C();
  uint64_t v1 = *v0;
  sub_1000471B0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1000F9280();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000F9AC8()
{
  sub_1000FBD08();
  sub_100128C30();
  *(void *)(v0 + 88) = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  *(void *)(v0 + 272) = v1;
  *(void *)(v0 + 280) = v2;
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = v2;
  sub_100128C30();
  *(unsigned char *)(v0 + 312) = *(unsigned char *)(v0 + 313);
  if (qword_10016AE80 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100181D38;
  *(void *)(v0 + 288) = qword_100181D38;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v4;
  uint64_t v5 = sub_10000B38C(&qword_100171060, &qword_100171068);
  *uint64_t v4 = v0;
  v4[1] = sub_1000F9C24;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 312, v3, &type metadata for Bool, v5);
}

uint64_t sub_1000F9C24()
{
  sub_1000FBD08();
  sub_10004716C();
  uint64_t v2 = *v1;
  sub_1000471B0();
  *uint64_t v3 = v2;
  *(void *)(v4 + 304) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000F9280();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000F9D60()
{
  uint64_t v16 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v14 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  sub_100128C30();
  long long v5 = *(_OWORD *)(v0 + 144);
  *(void *)(v0 + 112) = *(void *)(v0 + 136);
  *(_OWORD *)(v0 + 120) = v5;
  uint64_t v6 = sub_100128F10();
  sub_1000AC238(v4, v7, v8, v6);
  uint64_t v9 = sub_100128F40();
  sub_1000AC238(v3, v10, v11, v9);
  sub_1000F9290();
  sub_1000FAEF4();
  sub_100128BD0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v15, v16, v14);
  sub_100128BF0();
  sub_100128C10();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v2, v18);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v16, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000F9220();
  return v12();
}

uint64_t sub_1000F9F80()
{
  uint64_t v1 = sub_1000053D8(&qword_100171088);
  sub_10000DB98();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10008F960();
  if (qword_10016AE80 != -1) {
    swift_once();
  }
  swift_retain();
  sub_100128DD0();
  swift_release();
  sub_1000FAEF4();
  sub_10000B38C(&qword_100171090, &qword_100171088);
  sub_100128DC0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
}

uint64_t sub_1000FA0B0()
{
  uint64_t v1 = sub_1000053D8(&qword_100170E68);
  uint64_t v2 = sub_10000DC9C(v1);
  __chkstk_darwin(v2);
  sub_10000DC50();
  uint64_t v33 = v4 - v3;
  uint64_t v5 = sub_100128EA0();
  sub_10000DB98();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10000DC50();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_1000053D8(&qword_100170E08);
  uint64_t v13 = sub_10000DC9C(v12);
  __chkstk_darwin(v13);
  sub_10002A5E0();
  uint64_t v16 = v14 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v30 - v18;
  uint64_t v20 = sub_1000053D8(&qword_100170E10);
  uint64_t v21 = sub_10000DC9C(v20);
  __chkstk_darwin(v21);
  sub_1000212FC();
  uint64_t v32 = sub_1001291D0();
  __chkstk_darwin(v32);
  sub_10000DC50();
  v30[0] = sub_1000053D8(&qword_100171028);
  sub_1001291C0();
  sub_1000F9248(v0);
  sub_100128C00();
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  sub_1000F9264((uint64_t)v19);
  sub_1000F9264(v16);
  uint64_t v22 = enum case for InputConnectionBehavior.default(_:);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104);
  v30[1] = v7 + 104;
  uint64_t v31 = v23;
  v23(v11, enum case for InputConnectionBehavior.default(_:), v5);
  sub_1000FACF0();
  uint64_t v24 = v11;
  uint64_t v25 = sub_100128C60();
  sub_1000053D8(&qword_100170E70);
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 1, 1, v32);
  LOBYTE(v34) = 2;
  uint64_t v26 = sub_10012CBF0();
  sub_1000AC238(v33, v27, v28, v26);
  sub_1000F9264((uint64_t)v19);
  v31(v24, v22, v5);
  sub_100128C70();
  return v25;
}

uint64_t sub_1000FA3BC()
{
  sub_1000F978C();

  return swift_retain();
}

unint64_t sub_1000FA3F0()
{
  unint64_t result = qword_100170EF0;
  if (!qword_100170EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170EF0);
  }
  return result;
}

unint64_t sub_1000FA440()
{
  unint64_t result = qword_100170EF8;
  if (!qword_100170EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170EF8);
  }
  return result;
}

uint64_t sub_1000FA48C()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_1000FA4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB9C4(a1, a2, a3, (void (*)(void))sub_1000F9290);
}

uint64_t sub_1000FA4D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F89C4(&qword_10016AE70, (uint64_t)qword_100181D08, a1);
}

uint64_t sub_1000FA4FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000F96FC();

  return sub_1000F915C(v2, a1);
}

uint64_t sub_1000FA534()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100047164;
  return sub_1000F97D8();
}

uint64_t sub_1000FA5E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000FA0B0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000FA608()
{
  return 0xD000000000000034;
}

unint64_t sub_1000FA628()
{
  unint64_t result = qword_100170F08;
  if (!qword_100170F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F08);
  }
  return result;
}

unint64_t sub_1000FA678()
{
  unint64_t result = qword_100170F10;
  if (!qword_100170F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F10);
  }
  return result;
}

uint64_t sub_1000FA6C4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000FA6E4, 0, 0);
}

uint64_t sub_1000FA6E4()
{
  sub_100047290();
  if (qword_10016ADF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(unsigned char **)(v0 + 16);
  *uint64_t v1 = sub_100063C30() & 1;
  sub_1000F9220();
  return v2();
}

uint64_t sub_1000FA77C(uint64_t a1, unsigned char *a2)
{
  *(unsigned char *)(v2 + 16) = *a2;
  return _swift_task_switch(sub_1000FA7A0, 0, 0);
}

uint64_t sub_1000FA7A0()
{
  sub_100047290();
  if (qword_10016ADF0 != -1) {
    swift_once();
  }
  sub_100063CA4();
  sub_1000F9118();
  sub_10012CD80();
  sub_1000F9220();
  return v0();
}

uint64_t sub_1000FA840()
{
  sub_100047290();
  uint64_t v1 = sub_1001291D0();
  sub_10000DC9C(v1);
  *(void *)(v0 + 16) = sub_1000F9230();
  sub_1000F9280();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000FA8B8()
{
  sub_1000FBD08();
  sub_1000053D8(&qword_100170EE8);
  sub_10007BB8C();
  sub_1001291C0();
  sub_10000B38C(&qword_100171060, &qword_100171068);
  sub_100128F70();
  swift_task_dealloc();
  sub_10007BB8C();
  return v0();
}

uint64_t sub_1000FA9DC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000F75EC;
  return sub_1000FA840();
}

unint64_t sub_1000FAA70()
{
  unint64_t result = qword_100170F20;
  if (!qword_100170F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F20);
  }
  return result;
}

uint64_t sub_1000FAABC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  unint64_t v5 = sub_1000FB070();
  *uint64_t v4 = v2;
  v4[1] = sub_1000FAB6C;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_1000FAB6C()
{
  sub_1000FBD08();
  uint64_t v3 = v2;
  sub_10004716C();
  uint64_t v5 = v4;
  uint64_t v6 = *v1;
  sub_1000471B0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  uint64_t v8 = *(uint64_t (**)(void))(v6 + 8);
  return v8();
}

unint64_t sub_1000FAC50()
{
  unint64_t result = qword_100170F30;
  if (!qword_100170F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F30);
  }
  return result;
}

unint64_t sub_1000FACA0()
{
  unint64_t result = qword_100170F38;
  if (!qword_100170F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F38);
  }
  return result;
}

unint64_t sub_1000FACF0()
{
  unint64_t result = qword_100170F40[0];
  if (!qword_100170F40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100170F40);
  }
  return result;
}

uint64_t sub_1000FAD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000FB070();
  *uint64_t v5 = v2;
  v5[1] = sub_1000F7A70;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_1000FADF0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  unint64_t v5 = sub_1000FB070();
  *uint64_t v4 = v2;
  v4[1] = sub_1000FBD04;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000FAEA4()
{
  unint64_t result = qword_100170F58;
  if (!qword_100170F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F58);
  }
  return result;
}

unint64_t sub_1000FAEF4()
{
  unint64_t result = qword_100170F60;
  if (!qword_100170F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F60);
  }
  return result;
}

unint64_t sub_1000FAF44()
{
  unint64_t result = qword_100170F68;
  if (!qword_100170F68)
  {
    sub_100005470(qword_100170F70);
    sub_1000FAEF4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F68);
  }
  return result;
}

uint64_t sub_1000FAFB8(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000FAA70();
  *unint64_t v5 = v2;
  v5[1] = sub_100046C9C;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_1000FB070()
{
  unint64_t result = qword_100170F88;
  if (!qword_100170F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F88);
  }
  return result;
}

uint64_t sub_1000FB0BC()
{
  uint64_t v0 = qword_100170EB8;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t sub_1000FB0F8()
{
  unint64_t result = qword_100170F90;
  if (!qword_100170F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F90);
  }
  return result;
}

unint64_t sub_1000FB14C()
{
  unint64_t result = qword_100170F98;
  if (!qword_100170F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170F98);
  }
  return result;
}

unint64_t sub_1000FB19C()
{
  unint64_t result = qword_100170FA0;
  if (!qword_100170FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FA0);
  }
  return result;
}

unint64_t sub_1000FB1EC()
{
  unint64_t result = qword_100170FA8;
  if (!qword_100170FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FA8);
  }
  return result;
}

uint64_t sub_1000FB238()
{
  sub_1000FBCB4();
  uint64_t v2 = sub_100128EB0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return sub_1000F9104(v3, v0, v2, v1);
}

unint64_t sub_1000FB2D0()
{
  unint64_t result = qword_100170FB8;
  if (!qword_100170FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FB8);
  }
  return result;
}

unint64_t sub_1000FB320()
{
  unint64_t result = qword_100170FC0;
  if (!qword_100170FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FC0);
  }
  return result;
}

unint64_t sub_1000FB370()
{
  unint64_t result = qword_100170FC8;
  if (!qword_100170FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FC8);
  }
  return result;
}

uint64_t sub_1000FB3BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000F848C(&qword_10016AE68, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100181CF0);
  uint64_t v3 = sub_100128F30();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v2, v3);
}

uint64_t sub_1000FB460()
{
  return sub_10000B38C(&qword_100170FD0, &qword_100170FD8);
}

uint64_t sub_1000FB49C(uint64_t a1)
{
  unint64_t v2 = sub_1000FACF0();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000FB4EC()
{
  unint64_t result = qword_100170FE0;
  if (!qword_100170FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FE0);
  }
  return result;
}

uint64_t sub_1000FB53C(uint64_t a1)
{
  unint64_t v2 = sub_1000FB370();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_1000FB58C()
{
  unint64_t result = qword_100170FE8;
  if (!qword_100170FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FE8);
  }
  return result;
}

uint64_t sub_1000FB5D8(uint64_t a1)
{
  return sub_1000F842C(a1, qword_100181D40);
}

uint64_t sub_1000FB5FC()
{
  uint64_t v1 = sub_100128EA0();
  sub_10000DB98();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10005C778();
  uint64_t v5 = sub_1000053D8(&qword_100170E08);
  uint64_t v6 = sub_10000DC9C(v5);
  __chkstk_darwin(v6);
  sub_10002A5E0();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = &v21[-v11];
  uint64_t v13 = sub_1000053D8(&qword_100170E10);
  uint64_t v14 = sub_10000DC9C(v13);
  __chkstk_darwin(v14);
  sub_10000DC50();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_1001291D0();
  sub_10000B3FC();
  __chkstk_darwin(v19);
  sub_1000212FC();
  sub_1000053D8(&qword_100171028);
  sub_10007BB8C();
  sub_1001291C0();
  sub_10007BB8C();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v17, 0, 1, v18);
  sub_100128C00();
  memset(&v21[8], 0, 24);
  sub_1000F9248((uint64_t)v12);
  sub_1000F9248(v9);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for InputConnectionBehavior.default(_:), v1);
  sub_1000FACF0();
  return sub_100128C60();
}

unint64_t sub_1000FB820()
{
  unint64_t result = qword_100170FF0;
  if (!qword_100170FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FF0);
  }
  return result;
}

uint64_t sub_1000FB86C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000FBC1C();
  unint64_t v5 = sub_1000FBCB4();

  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_1000FB8D4()
{
  uint64_t v0 = qword_100170EC8;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t sub_1000FB910()
{
  unint64_t result = qword_100170FF8;
  if (!qword_100170FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100170FF8);
  }
  return result;
}

unint64_t sub_1000FB960()
{
  unint64_t result = qword_100171000;
  if (!qword_100171000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171000);
  }
  return result;
}

uint64_t sub_1000FB9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FB9C4(a1, a2, a3, (void (*)(void))sub_1000FB820);
}

uint64_t sub_1000FB9C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000FBA18@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F89C4(&qword_10016AE88, (uint64_t)qword_100181D40, a1);
}

uint64_t sub_1000FBA3C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000FBC1C();
  unint64_t v7 = sub_1000FBC68();
  unint64_t v8 = sub_1000FBCB4();
  *unint64_t v5 = v2;
  v5[1] = sub_1000F8B24;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000FBB10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000FB5FC();
  *a1 = result;
  return result;
}

uint64_t sub_1000FBB38(uint64_t a1)
{
  unint64_t v2 = sub_1000FB820();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

void type metadata accessor for OpenWeatherPrivacyResetIdentifierIntent()
{
}

void type metadata accessor for WeatherPrivacyResetIdentifierEntity.WeatherPrivacyResetIdentifierEntityQuery()
{
}

void type metadata accessor for WeatherPrivacyResetIdentifierEntity()
{
}

void type metadata accessor for WeatherPrivacyResetIdentifierEntity.UpdateIntent_value()
{
}

uint64_t sub_1000FBBA4()
{
  return sub_10000B38C(&qword_100171010, &qword_100171018);
}

uint64_t sub_1000FBBE0()
{
  return sub_10000B38C(&qword_100171020, &qword_100171018);
}

unint64_t sub_1000FBC1C()
{
  unint64_t result = qword_100171030;
  if (!qword_100171030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171030);
  }
  return result;
}

unint64_t sub_1000FBC68()
{
  unint64_t result = qword_100171038;
  if (!qword_100171038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171038);
  }
  return result;
}

unint64_t sub_1000FBCB4()
{
  unint64_t result = qword_100171040;
  if (!qword_100171040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100171040);
  }
  return result;
}

unint64_t sub_1000FBD18()
{
  unint64_t result = qword_1001710B8;
  if (!qword_1001710B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001710B8);
  }
  return result;
}

uint64_t sub_1000FBD64()
{
  return sub_10000B38C(&qword_1001710C0, &qword_1001710C8);
}

uint64_t sub_1000FBDA0()
{
  sub_10012AF80();
  if (qword_10016AEE8 != -1) {
    swift_once();
  }
  id v0 = (id)qword_100181E30;
  return sub_10012B400();
}

uint64_t sub_1000FBEBC()
{
  unint64_t v0 = sub_1000FD974();

  return _EntityURLRepresentation.init(_:)(0xD000000000000050, 0x800000010013AD90, &unk_1001646E8, v0);
}

uint64_t sub_1000FBF18(uint64_t a1)
{
  return sub_1000FE7CC(a1, qword_100181D58);
}

uint64_t sub_1000FBF24()
{
  uint64_t v2 = sub_1000053D8(&qword_100170E38);
  uint64_t v3 = sub_10000DC9C(v2);
  __chkstk_darwin(v3);
  sub_10005C778();
  uint64_t v4 = sub_1000053D8(&qword_100170E10);
  uint64_t v5 = sub_10000DC9C(v4);
  __chkstk_darwin(v5);
  sub_10008F960();
  uint64_t v6 = sub_1001291D0();
  sub_10000B3FC();
  __chkstk_darwin(v7);
  sub_10002A5E0();
  __chkstk_darwin(v8);
  sub_1001291C0();
  sub_10007BB8C();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v6);
  uint64_t v9 = sub_100128DF0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v0, 1, 1, v9);
  sub_1001291C0();
  return sub_100128E00();
}

uint64_t sub_1000FC0C8(uint64_t a1)
{
  return sub_1000F842C(a1, qword_100181D70);
}

uint64_t sub_1000FC0EC()
{
  uint64_t v0 = sub_1000053D8(&qword_100170EB0);
  sub_10006D284(v0, qword_100181D88);
  uint64_t v1 = sub_10000D7A4(v0, (uint64_t)qword_100181D88);
  sub_100128D60();
  uint64_t v2 = sub_100128D70();

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v2);
}

uint64_t sub_1000FC180()
{
  if (qword_10016AEA0 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1000053D8(&qword_100170EB0);

  return sub_10000D7A4(v0, (uint64_t)qword_100181D88);
}

uint64_t sub_1000FC1E8()
{
  uint64_t result = swift_getKeyPath();
  qword_100181DA0 = result;
  return result;
}

uint64_t *sub_1000FC210()
{
  if (qword_10016AEA8 != -1) {
    swift_once();
  }
  return &qword_100181DA0;
}

uint64_t sub_1000FC25C()
{
  sub_100047290();
  v0[21] = v1;
  v0[22] = v2;
  v0[20] = v3;
  uint64_t v4 = sub_1000053D8(&qword_100170E80);
  sub_10000DC9C(v4);
  v0[23] = sub_1000F9230();
  uint64_t v5 = sub_1000053D8(&qword_100170E88);
  sub_10000DC9C(v5);
  v0[24] = sub_1000F9230();
  uint64_t v6 = sub_1000053D8(&qword_1001712D0);
  sub_10000DC9C(v6);
  v0[25] = sub_1000F9230();
  uint64_t v7 = sub_100128C00();
  v0[26] = v7;
  sub_100047198(v7);
  v0[27] = v8;
  v0[28] = sub_1000F9230();
  uint64_t v9 = sub_1000053D8(&qword_1001712D8);
  v0[29] = v9;
  sub_100047198(v9);
  v0[30] = v10;
  v0[31] = swift_task_alloc();
  v0[32] = swift_task_alloc();
  sub_1000F9280();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_1000FC3A4()
{
  sub_100047290();
  sub_100128C30();
  long long v1 = *(_OWORD *)(v0 + 24);
  *(void *)(v0 + 40) = *(void *)(v0 + 16);
  *(_OWORD *)(v0 + 48) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v2;
  unint64_t v3 = sub_1000FD974();
  *uint64_t v2 = v0;
  v2[1] = sub_1000FC484;
  uint64_t v4 = *(void *)(v0 + 256);
  return IntentDialog._CapturedContent.init<>(entity:_:)(v4, v0 + 40, sub_1000FCA08, 0, &unk_1001646E8, v3);
}

uint64_t sub_1000FC484()
{
  sub_100047290();
  sub_10004716C();
  uint64_t v1 = *v0;
  sub_1000471B0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_1000F9280();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000FC54C()
{
  sub_1000FBD08();
  sub_100128C30();
  v0[11] = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  v0[34] = v1;
  v0[35] = v2;
  v0[12] = v1;
  v0[13] = v2;
  sub_100128C30();
  if (qword_10016AEA8 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100181DA0;
  v0[36] = qword_100181DA0;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[37] = v4;
  uint64_t v5 = sub_10000B38C(&qword_1001712B0, &qword_1001712B8);
  *uint64_t v4 = v0;
  v4[1] = sub_1000FC6A0;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 39, v3, &unk_100164670, v5);
}

uint64_t sub_1000FC6A0()
{
  sub_1000FBD08();
  sub_10004716C();
  uint64_t v2 = *v1;
  sub_1000471B0();
  *uint64_t v3 = v2;
  *(void *)(v4 + 304) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000F9280();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000FC7DC()
{
  uint64_t v12 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 248);
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v14 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  sub_100128C30();
  long long v5 = *(_OWORD *)(v0 + 144);
  *(void *)(v0 + 112) = *(void *)(v0 + 136);
  *(_OWORD *)(v0 + 120) = v5;
  uint64_t v6 = sub_100128F10();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v4, 1, 1, v6);
  uint64_t v7 = sub_100128F40();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v3, 1, 1, v7);
  sub_1000FBD18();
  sub_1000FDB78();
  sub_100128BD0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v11, v12, v10);
  sub_100128BF0();
  sub_100128C10();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v14);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000F9220();
  return v8();
}

uint64_t sub_1000FCA0C()
{
  uint64_t v1 = sub_1000053D8(&qword_1001712E0);
  sub_10000DB98();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10008F960();
  if (qword_10016AEA8 != -1) {
    swift_once();
  }
  swift_retain();
  sub_100128DD0();
  swift_release();
  sub_1000FDB78();
  sub_10000B38C(&qword_1001712E8, &qword_1001712E0);
  sub_100128DC0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
}

uint64_t sub_1000FCB3C()
{
  uint64_t v2 = sub_100128EA0();
  sub_10000DB98();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_1000212E4();
  uint64_t v6 = sub_1000053D8(&qword_100170E08);
  uint64_t v7 = sub_10000DC9C(v6);
  __chkstk_darwin(v7);
  sub_10002A5E0();
  uint64_t v10 = v8 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v21 - v12;
  uint64_t v14 = sub_1000053D8(&qword_100170E10);
  uint64_t v15 = sub_10000DC9C(v14);
  __chkstk_darwin(v15);
  sub_1000212FC();
  sub_1001291D0();
  sub_10000B3FC();
  __chkstk_darwin(v16);
  sub_10000DC50();
  uint64_t v24 = sub_1000053D8(&qword_100171278);
  sub_1001291C0();
  sub_1000F9248(v1);
  sub_100128C00();
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  sub_1000F9264((uint64_t)v13);
  sub_1000F9264(v10);
  unsigned int v23 = enum case for InputConnectionBehavior.default(_:);
  uint64_t v17 = *(void (**)(void))(v4 + 104);
  v21[1] = v4 + 104;
  uint64_t v22 = (void (*)(uint64_t, void, uint64_t))v17;
  v17(v0);
  sub_1000FD974();
  sub_1000FF630();
  uint64_t v18 = v10;
  uint64_t v19 = sub_100128C60();
  sub_1000053D8(&qword_1001712C0);
  sub_1001291C0();
  sub_1000F9248(v1);
  LOBYTE(v25) = 3;
  sub_1000F9264((uint64_t)v13);
  sub_1000F9264(v18);
  v22(v0, v23, v2);
  sub_1000B676C();
  sub_1000FF630();
  sub_100128C50();
  return v19;
}

uint64_t sub_1000FCDD0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000F60D8();
  *a1 = result;
  return result;
}

uint64_t sub_1000FCDFC()
{
  return sub_1000F610C();
}

uint64_t sub_1000FCE08()
{
  sub_1000FC210();

  return swift_retain();
}

unint64_t sub_1000FCE3C()
{
  unint64_t result = qword_1001710D0;
  if (!qword_1001710D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001710D0);
  }
  return result;
}

unint64_t sub_1000FCE8C()
{
  unint64_t result = qword_1001710D8;
  if (!qword_1001710D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001710D8);
  }
  return result;
}

uint64_t sub_1000FCED8()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_1000FCF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FF1A4(a1, a2, a3, (void (*)(void))sub_1000FBD18);
}

uint64_t sub_1000FCF38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FE600(&qword_10016AE98, (uint64_t)qword_100181D70, a1);
}

uint64_t sub_1000FCF5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000FC180();

  return sub_1000F915C(v2, a1);
}

uint64_t sub_1000FCF94()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100047164;
  return sub_1000FC25C();
}

uint64_t sub_1000FD040@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000FCB3C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000FD068()
{
  return 0xD00000000000002DLL;
}

unint64_t sub_1000FD088()
{
  unint64_t result = qword_1001710E8;
  if (!qword_1001710E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001710E8);
  }
  return result;
}

uint64_t sub_1000FD0D8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000FD0F8, 0, 0);
}

uint64_t sub_1000FD0F8()
{
  sub_100047290();
  if (qword_10016ADF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(qword_100181BC0 + OBJC_IVAR____TtC13WeatherWidget20WeatherSettingsState_units);
  *(void *)(v0 + 24) = v1;
  v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000FD1DC;
  return sub_100110CCC();
}

uint64_t sub_1000FD1DC()
{
  sub_100047290();
  sub_10004716C();
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *v0;
  sub_1000471B0();
  *uint64_t v4 = v3;
  swift_task_dealloc();

  sub_1000F9280();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000FD2BC()
{
  id v1 = *(id *)(qword_100181BC0 + OBJC_IVAR____TtC13WeatherWidget20WeatherSettingsState_units);
  uint64_t v2 = (void *)sub_100111328();

  if (v2)
  {
    sub_100046928(0, (unint64_t *)&qword_10016D4D0);
    uint64_t v3 = self;
    id v4 = v2;
    id v5 = [v3 celsius];
    char v6 = sub_10012CF30();

    if (v6)
    {

      char v7 = 0;
    }
    else
    {
      id v8 = [v3 fahrenheit];
      char v9 = sub_10012CF30();

      if (v9) {
        char v7 = 1;
      }
      else {
        char v7 = 2;
      }
    }
  }
  else
  {
    char v7 = 2;
  }
  **(unsigned char **)(v0 + 16) = v7;
  sub_1000F9220();
  return v10();
}

uint64_t sub_1000FD41C(uint64_t a1, unsigned char *a2)
{
  *(unsigned char *)(v2 + 16) = *a2;
  return _swift_task_switch(sub_1000FD440, 0, 0);
}

uint64_t sub_1000FD440()
{
  sub_100047290();
  id v1 = sub_1000FD534(*(unsigned char *)(v0 + 16));
  if (qword_10016ADF0 != -1) {
    swift_once();
  }
  id v2 = *(id *)(qword_100181BC0 + OBJC_IVAR____TtC13WeatherWidget20WeatherSettingsState_units);
  sub_100111190(v1);

  sub_100046928(0, (unint64_t *)&qword_10016C740);
  sub_10012CD80();
  sub_10007BB8C();
  sub_10012A110();

  sub_1000F9220();
  return v3();
}

id sub_1000FD534(char a1)
{
  if (!a1)
  {
    id v1 = &selRef_celsius;
    return [self *v1];
  }
  if (a1 == 1)
  {
    id v1 = &selRef_fahrenheit;
    return [self *v1];
  }
  return 0;
}

uint64_t sub_1000FD598()
{
  sub_100047290();
  uint64_t v1 = sub_1001291D0();
  sub_10000DC9C(v1);
  *(void *)(v0 + 16) = sub_1000F9230();
  sub_1000F9280();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000FD610()
{
  sub_1000FBD08();
  sub_1000053D8(&qword_1001710C8);
  sub_10007BB8C();
  sub_1001291C0();
  sub_10000B38C(&qword_1001712B0, &qword_1001712B8);
  sub_1000B676C();
  sub_100128F60();
  swift_task_dealloc();
  sub_10007BB8C();
  return v0();
}

uint64_t sub_1000FD740(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000F75EC;
  return sub_1000FD598();
}

unint64_t sub_1000FD7D4()
{
  unint64_t result = qword_1001710F8;
  if (!qword_1001710F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001710F8);
  }
  return result;
}

uint64_t sub_1000FD820(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  unint64_t v5 = sub_1000FDCF4();
  *uint64_t v4 = v2;
  v4[1] = sub_1000FAB6C;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_1000FD8D4()
{
  unint64_t result = qword_100171108;
  if (!qword_100171108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171108);
  }
  return result;
}

unint64_t sub_1000FD924()
{
  unint64_t result = qword_100171110;
  if (!qword_100171110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171110);
  }
  return result;
}

unint64_t sub_1000FD974()
{
  unint64_t result = qword_100171118[0];
  if (!qword_100171118[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100171118);
  }
  return result;
}

uint64_t sub_1000FD9C0(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000FDCF4();
  *unint64_t v5 = v2;
  v5[1] = sub_1000F7A70;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_1000FDA74(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  unint64_t v5 = sub_1000FDCF4();
  *uint64_t v4 = v2;
  v4[1] = sub_1000FBD04;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000FDB28()
{
  unint64_t result = qword_100171130;
  if (!qword_100171130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171130);
  }
  return result;
}

unint64_t sub_1000FDB78()
{
  unint64_t result = qword_100171138;
  if (!qword_100171138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171138);
  }
  return result;
}

unint64_t sub_1000FDBC8()
{
  unint64_t result = qword_100171140;
  if (!qword_100171140)
  {
    sub_100005470(qword_100171148);
    sub_1000FDB78();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171140);
  }
  return result;
}

uint64_t sub_1000FDC3C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000FD7D4();
  *unint64_t v5 = v2;
  v5[1] = sub_100046C9C;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_1000FDCF4()
{
  unint64_t result = qword_100171160;
  if (!qword_100171160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171160);
  }
  return result;
}

uint64_t sub_1000FDD40()
{
  uint64_t v0 = qword_100171098;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t sub_1000FDD7C()
{
  unint64_t result = qword_100171168;
  if (!qword_100171168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171168);
  }
  return result;
}

unint64_t sub_1000FDDD0()
{
  unint64_t result = qword_100171170;
  if (!qword_100171170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171170);
  }
  return result;
}

unint64_t sub_1000FDE20()
{
  unint64_t result = qword_100171178;
  if (!qword_100171178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171178);
  }
  return result;
}

unint64_t sub_1000FDE70()
{
  unint64_t result = qword_100171180;
  if (!qword_100171180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171180);
  }
  return result;
}

uint64_t sub_1000FDEBC()
{
  sub_1000FF5E0();
  uint64_t v2 = sub_100128EB0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return sub_1000F9104(v3, v0, v2, v1);
}

unint64_t sub_1000FDF54()
{
  unint64_t result = qword_100171190;
  if (!qword_100171190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171190);
  }
  return result;
}

unint64_t sub_1000FDFA4()
{
  unint64_t result = qword_100171198;
  if (!qword_100171198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171198);
  }
  return result;
}

unint64_t sub_1000FDFF4()
{
  unint64_t result = qword_1001711A0;
  if (!qword_1001711A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711A0);
  }
  return result;
}

uint64_t sub_1000FE040@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FF0F0(&qword_10016AE90, (uint64_t)qword_100181D58, a1);
}

uint64_t sub_1000FE064()
{
  return sub_10000B38C(&qword_1001711A8, &qword_1001711B0);
}

uint64_t sub_1000FE0A0(uint64_t a1)
{
  unint64_t v2 = sub_1000FD974();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000FE0F0()
{
  unint64_t result = qword_1001711B8;
  if (!qword_1001711B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711B8);
  }
  return result;
}

uint64_t sub_1000FE140(uint64_t a1)
{
  unint64_t v2 = sub_1000FDFF4();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_1000FE190()
{
  unint64_t result = qword_1001711C0;
  if (!qword_1001711C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711C0);
  }
  return result;
}

uint64_t sub_1000FE1DC(uint64_t a1)
{
  return sub_1000F842C(a1, qword_100181DA8);
}

uint64_t sub_1000FE200()
{
  uint64_t v1 = sub_100128EA0();
  sub_10000DB98();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10005C778();
  uint64_t v5 = sub_1000053D8(&qword_100170E08);
  uint64_t v6 = sub_10000DC9C(v5);
  __chkstk_darwin(v6);
  sub_10002A5E0();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = &v21[-v11];
  uint64_t v13 = sub_1000053D8(&qword_100170E10);
  uint64_t v14 = sub_10000DC9C(v13);
  __chkstk_darwin(v14);
  sub_10000DC50();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_1001291D0();
  sub_10000B3FC();
  __chkstk_darwin(v19);
  sub_1000212FC();
  sub_1000053D8(&qword_100171278);
  sub_10007BB8C();
  sub_1001291C0();
  sub_10007BB8C();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v17, 0, 1, v18);
  sub_100128C00();
  memset(&v21[8], 0, 24);
  sub_1000F9248((uint64_t)v12);
  sub_1000F9248(v9);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, enum case for InputConnectionBehavior.default(_:), v1);
  sub_1000FD974();
  return sub_100128C60();
}

unint64_t sub_1000FE424()
{
  unint64_t result = qword_1001711C8;
  if (!qword_1001711C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711C8);
  }
  return result;
}

uint64_t sub_1000FE470(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000FF548();
  unint64_t v5 = sub_1000FF5E0();

  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_1000FE4D8()
{
  uint64_t v0 = qword_1001710A8;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t sub_1000FE514()
{
  unint64_t result = qword_1001711D0;
  if (!qword_1001711D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711D0);
  }
  return result;
}

unint64_t sub_1000FE564()
{
  unint64_t result = qword_1001711D8;
  if (!qword_1001711D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711D8);
  }
  return result;
}

uint64_t sub_1000FE5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FF1A4(a1, a2, a3, (void (*)(void))sub_1000FE424);
}

uint64_t sub_1000FE5DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FE600(&qword_10016AEB0, (uint64_t)qword_100181DA8, a1);
}

uint64_t sub_1000FE600@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = sub_1000FE8D4(a1, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, a2);
  sub_1001291D0();
  sub_10000B3FC();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);

  return v7(a3, v4, v5);
}

uint64_t sub_1000FE688(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000FF548();
  unint64_t v7 = sub_1000FF594();
  unint64_t v8 = sub_1000FF5E0();
  *uint64_t v5 = v2;
  v5[1] = sub_1000F8B24;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000FE75C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000FE200();
  *a1 = result;
  return result;
}

uint64_t sub_1000FE784(uint64_t a1)
{
  unint64_t v2 = sub_1000FE424();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_1000FE7C0(uint64_t a1)
{
  return sub_1000FE7CC(a1, qword_100181DC0);
}

uint64_t sub_1000FE7CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000053D8(&qword_100170E10);
  uint64_t v4 = sub_10000DC9C(v3);
  __chkstk_darwin(v4);
  sub_10000DC50();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_1001291D0();
  sub_10000B3FC();
  __chkstk_darwin(v9);
  sub_1000212E4();
  uint64_t v10 = sub_100128F30();
  sub_10006D284(v10, a2);
  sub_10000D7A4(v10, (uint64_t)a2);
  sub_10007BB8C();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v7, 1, 1, v8);
  return sub_100128F20();
}

uint64_t sub_1000FE8D4(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return sub_10000D7A4(v5, a3);
}

uint64_t sub_1000FE930()
{
  uint64_t v0 = sub_1000053D8(&qword_100170E38);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000053D8(&qword_100170E10);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1001291D0();
  __chkstk_darwin(v6);
  sub_1000053D8(&qword_100171268);
  uint64_t v7 = *(void *)(sub_1000053D8(&qword_100171270) - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100135C90;
  unint64_t v11 = v10 + v9;
  *(unsigned char *)(v10 + v9) = 0;
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v5, 1, 1, v6);
  uint64_t v12 = sub_100128DF0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v12);
  sub_100128E10();
  *(unsigned char *)(v11 + v8) = 1;
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v5, 1, 1, v6);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v12);
  sub_100128E10();
  *(unsigned char *)(v11 + 2 * v8) = 2;
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v5, 1, 1, v6);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v12);
  sub_100128E10();
  sub_100128E20();
  sub_1000FEF34();
  uint64_t result = sub_10012C9A0();
  qword_100181DD8 = result;
  return result;
}

uint64_t *sub_1000FEC68()
{
  if (qword_10016AEC0 != -1) {
    swift_once();
  }
  return &qword_100181DD8;
}

uint64_t sub_1000FECB4(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1001611C8;
  v6._object = a2;
  unint64_t v4 = sub_10012D0B0(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_1000FED00(char a1)
{
  if (!a1) {
    return 0x737569736C6563;
  }
  if (a1 == 1) {
    return 0x65686E6572686166;
  }
  return 0x7953726F7272696DLL;
}

uint64_t sub_1000FED64(unsigned __int8 *a1, char *a2)
{
  return sub_100064008(*a1, *a2);
}

unint64_t sub_1000FED74()
{
  unint64_t result = qword_1001711E8;
  if (!qword_1001711E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711E8);
  }
  return result;
}

Swift::Int sub_1000FEDC0()
{
  return sub_100026148(*v0);
}

uint64_t sub_1000FEDC8(uint64_t a1)
{
  return sub_100026264(a1, *v1);
}

Swift::Int sub_1000FEDD0(uint64_t a1)
{
  return sub_10002637C(a1, *v1);
}

uint64_t sub_1000FEDD8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000FECB4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1000FEE08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000FED00(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000FEE38()
{
  unint64_t result = qword_1001711F0;
  if (!qword_1001711F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711F0);
  }
  return result;
}

unint64_t sub_1000FEE88()
{
  unint64_t result = qword_1001711F8;
  if (!qword_1001711F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001711F8);
  }
  return result;
}

unint64_t sub_1000FEED8()
{
  unint64_t result = qword_100171200;
  if (!qword_100171200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171200);
  }
  return result;
}

void *sub_1000FEF24()
{
  return &protocol witness table for String;
}

unint64_t sub_1000FEF34()
{
  unint64_t result = qword_100171208;
  if (!qword_100171208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171208);
  }
  return result;
}

void sub_1000FEF80(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_1000FEF90()
{
  unint64_t result = qword_100171210;
  if (!qword_100171210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171210);
  }
  return result;
}

unint64_t sub_1000FEFE0()
{
  unint64_t result = qword_100171218;
  if (!qword_100171218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171218);
  }
  return result;
}

unint64_t sub_1000FF030()
{
  unint64_t result = qword_100171220;
  if (!qword_100171220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171220);
  }
  return result;
}

unint64_t sub_1000FF080()
{
  unint64_t result = qword_100171228;
  if (!qword_100171228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171228);
  }
  return result;
}

uint64_t sub_1000FF0CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FF0F0(&qword_10016AEB8, (uint64_t)qword_100181DC0, a1);
}

uint64_t sub_1000FF0F0@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = sub_1000FE8D4(a1, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, a2);
  sub_100128F30();
  sub_10000B3FC();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);

  return v7(a3, v4, v5);
}

uint64_t sub_1000FF178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FF1A4(a1, a2, a3, (void (*)(void))sub_1000B676C);
}

uint64_t sub_1000FF1A4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000FF1EC(uint64_t a1)
{
  unint64_t v2 = sub_1000B676C();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000FF23C()
{
  unint64_t result = qword_100171230;
  if (!qword_100171230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171230);
  }
  return result;
}

unint64_t sub_1000FF28C()
{
  unint64_t result = qword_100171238;
  if (!qword_100171238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171238);
  }
  return result;
}

uint64_t sub_1000FF2D8()
{
  sub_1000FEC68();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000FF308(uint64_t a1)
{
  unint64_t v2 = sub_1000FF080();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000FF354()
{
  return sub_10000B38C(&qword_100171240, &qword_100171248);
}

void sub_1000FF390(void *a1@<X8>)
{
  *a1 = &off_1001611A0;
}

void type metadata accessor for OpenWeatherTemperatureUnitIntent()
{
}

void type metadata accessor for WeatherTemperatureUnitEntity.WeatherTemperatureUnitEntityQuery()
{
}

unsigned char *sub_1000FF3B8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FF484);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for TemperatureUnit()
{
}

void type metadata accessor for WeatherTemperatureUnitEntity()
{
}

void type metadata accessor for WeatherTemperatureUnitEntity.UpdateIntent_value()
{
}

uint64_t sub_1000FF4D0()
{
  return sub_10000B38C(&qword_100171250, &qword_100171258);
}

uint64_t sub_1000FF50C()
{
  return sub_10000B38C(&qword_100171260, &qword_100171258);
}

unint64_t sub_1000FF548()
{
  unint64_t result = qword_100171280;
  if (!qword_100171280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171280);
  }
  return result;
}

unint64_t sub_1000FF594()
{
  unint64_t result = qword_100171288;
  if (!qword_100171288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171288);
  }
  return result;
}

unint64_t sub_1000FF5E0()
{
  unint64_t result = qword_100171290;
  if (!qword_100171290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100171290);
  }
  return result;
}

uint64_t sub_1000FF630()
{
  return v0;
}

void *sub_1000FF644(uint64_t a1)
{
  type metadata accessor for EventManager();
  v1[2] = swift_allocObject();
  sub_10012B9C0();
  sub_1000E6470();
  uint64_t v3 = sub_10012B9B0();
  v1[3] = a1;
  v1[4] = v3;
  return v1;
}

void sub_1000FF6A4()
{
  sub_100099BEC();
  uint64_t v69 = v2;
  int v75 = v3;
  uint64_t v77 = v4;
  uint64_t v6 = v5;
  uint64_t v57 = v7;
  uint64_t v8 = sub_1000053D8(&qword_10016B420);
  uint64_t v9 = sub_10000DC9C(v8);
  __chkstk_darwin(v9);
  sub_100100634(v10, v56);
  sub_10000DB98();
  uint64_t v73 = v12;
  uint64_t v74 = v11;
  __chkstk_darwin(v11);
  sub_10000DBCC();
  uint64_t v72 = v13;
  uint64_t v14 = sub_10012BB00();
  uint64_t v15 = sub_10000DC9C(v14);
  __chkstk_darwin(v15);
  sub_10000DBCC();
  uint64_t v63 = v16;
  sub_10012B970();
  sub_10000DB98();
  uint64_t v59 = v18;
  uint64_t v60 = v17;
  __chkstk_darwin(v17);
  sub_10000DBCC();
  uint64_t v58 = v19;
  uint64_t v20 = sub_10012C780();
  uint64_t v21 = sub_10000DC9C(v20);
  __chkstk_darwin(v21);
  sub_100100610(v22, v56);
  uint64_t v23 = sub_100129920();
  uint64_t v24 = sub_10000DC9C(v23);
  __chkstk_darwin(v24);
  sub_10000DC50();
  uint64_t v56 = sub_10012BBA0();
  sub_10000DB98();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  sub_1001006A0();
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v56 - v29;
  sub_10012B990();
  sub_10000DB98();
  uint64_t v70 = v32;
  uint64_t v71 = v31;
  __chkstk_darwin(v31);
  sub_1000212E4();
  uint64_t v33 = *(void *)(v6 + *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 44));
  int v34 = sub_1000D47E0(v33);
  uint64_t v35 = sub_1000D4E88(v34, v33);
  uint64_t v66 = v36;
  uint64_t v67 = v35;
  uint64_t v37 = sub_1000D5220(v34, v33);
  uint64_t v64 = v38;
  uint64_t v65 = v37;
  HIDWORD(v68) = v34;
  uint64_t v39 = sub_1000D53C4(v34, v33);
  uint64_t v61 = v40;
  uint64_t v62 = v39;
  sub_10012C240();
  sub_10012BB40();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v42 = v56;
  v41(v30, v56);
  sub_10012BA40();
  sub_10012C240();
  uint64_t v43 = sub_10012BB90();
  v41(v1, v42);
  (*(void (**)(uint64_t, void, uint64_t))(v59 + 104))(v58, enum case for WeatherConditionGradientModel.PresentationContext.widget(_:), v60);
  sub_10012C180();
  sub_10012C230();
  sub_10012B950();
  sub_10012B9C0();
  sub_1000E6470();
  sub_10012B9B0();
  sub_10012B9A0();
  sub_10012BC60();
  uint64_t v44 = sub_100100660();
  v45(v44);
  uint64_t v46 = v77;
  sub_10012A670();
  sub_10012A5C0();
  if (v43 != sub_100100700() || v46 != v47) {
    sub_10012D1F0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = sub_100100740();
  sub_1000AC238(v76, v50, v51, v49);
  sub_10012B980();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v0, v71);
  uint64_t v52 = v57;
  uint64_t v53 = v66;
  *uint64_t v57 = v67;
  v52[1] = v53;
  uint64_t v54 = v64;
  v52[2] = v65;
  v52[3] = v54;
  uint64_t v55 = sub_100100674(v61);
  sub_100100720(v55);
  sub_1001006E4();
  sub_100099C20();
}

void sub_1000FFB3C()
{
  sub_100099BEC();
  uint64_t v62 = v1;
  BOOL v58 = v2;
  uint64_t v4 = v3;
  uint64_t v59 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1000053D8(&qword_10016B420);
  uint64_t v9 = sub_10000DC9C(v8);
  __chkstk_darwin(v9);
  sub_100100634(v10, v52[0]);
  sub_10000DB98();
  uint64_t v64 = v12;
  uint64_t v65 = v11;
  __chkstk_darwin(v11);
  sub_10000DBCC();
  uint64_t v63 = v13;
  uint64_t v14 = sub_10012BB00();
  uint64_t v15 = sub_10000DC9C(v14);
  __chkstk_darwin(v15);
  sub_10000DBCC();
  uint64_t v60 = v16;
  sub_10012B970();
  sub_10000DB98();
  uint64_t v55 = v18;
  uint64_t v56 = v17;
  __chkstk_darwin(v17);
  sub_10000DBCC();
  uint64_t v57 = v19;
  uint64_t v20 = sub_10012C780();
  uint64_t v21 = sub_10000DC9C(v20);
  __chkstk_darwin(v21);
  sub_10000DBCC();
  v52[1] = v22;
  uint64_t v23 = sub_100129920();
  uint64_t v24 = sub_10000DC9C(v23);
  __chkstk_darwin(v24);
  sub_10000DBCC();
  uint64_t v25 = sub_10012BBA0();
  sub_10000DB98();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  sub_1001006A0();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)v52 - v30;
  sub_10012B990();
  sub_10000DB98();
  uint64_t v53 = v33;
  uint64_t v54 = v32;
  __chkstk_darwin(v32);
  sub_10000DBCC();
  v52[0] = v34;
  uint64_t v61 = v4;
  sub_10012A670();
  uint64_t v35 = sub_10012A5C0();
  uint64_t v37 = v36;
  int v67 = 1;
  if (v35 != sub_10012A5C0() || v37 != v38) {
    int v67 = sub_10012D1F0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL v58 = v58 == 3;
  type metadata accessor for InstantWeatherViewModel();
  sub_10012C240();
  sub_10012BB40();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v27 + 8);
  v40(v31, v25);
  sub_10012BA40();
  sub_10012C240();
  sub_10012BB90();
  v40(v0, v25);
  (*(void (**)(uint64_t, void, uint64_t))(v55 + 104))(v57, enum case for WeatherConditionGradientModel.PresentationContext.widget(_:), v56);
  sub_10012C180();
  sub_10012C230();
  uint64_t v41 = v52[0];
  sub_10012B950();
  sub_10012B9C0();
  sub_1000E6470();
  sub_10012B9B0();
  sub_10012B9A0();
  uint64_t v42 = sub_10012BC60();
  uint64_t v43 = sub_100100660();
  v44(v43);
  uint64_t v45 = sub_100129220();
  uint64_t v46 = v66;
  sub_1000AC238(v66, v47, v48, v45);
  char v49 = sub_10012B980();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v41, v54);
  sub_100100760();
  *(_WORD *)(v7 + 48) = 257;
  *(unsigned char *)(v7 + 50) = v67 & 1;
  *(unsigned char *)(v7 + 51) = v58;
  uint64_t v50 = type metadata accessor for WidgetContext();
  sub_1000880BC(v46, v7 + *(int *)(v50 + 40));
  uint64_t v51 = v7 + *(int *)(v50 + 44);
  *(void *)uint64_t v51 = v42;
  *(unsigned char *)(v51 + 8) = v49 & 1;
  sub_100099C20();
}

void sub_1000FFFBC()
{
  sub_100099BEC();
  uint64_t v54 = v2;
  uint64_t v4 = v3;
  uint64_t v55 = v5;
  uint64_t v51 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = sub_1000053D8(&qword_10016B420);
  uint64_t v10 = sub_10000DC9C(v9);
  __chkstk_darwin(v10);
  sub_10000DBCC();
  uint64_t v58 = v11;
  sub_10012BC70();
  sub_10000DB98();
  __chkstk_darwin(v12);
  sub_10000DBCC();
  uint64_t v47 = sub_10012BB00();
  sub_10000DB98();
  uint64_t v46 = v13;
  __chkstk_darwin(v14);
  sub_100100610(v15, v42);
  uint64_t v44 = sub_10012B970();
  sub_10000DB98();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_10000DBCC();
  uint64_t v43 = v19;
  uint64_t v20 = sub_10012C780();
  uint64_t v21 = sub_10000DC9C(v20);
  __chkstk_darwin(v21);
  sub_10000DC50();
  uint64_t v22 = sub_100129920();
  sub_10000DB98();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  uint64_t v57 = sub_1001006BC();
  sub_10000DB98();
  uint64_t v56 = v26;
  __chkstk_darwin(v27);
  sub_1000212E4();
  __int16 v28 = sub_1000D47E0(v4);
  uint64_t v29 = sub_1000D4E88(v28, v4);
  uint64_t v52 = v30;
  uint64_t v53 = v29;
  uint64_t v31 = sub_1000D5220(v28, v4);
  uint64_t v49 = v32;
  uint64_t v50 = v31;
  sub_1000D53C4(v28, v4);
  uint64_t v48 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v1, v51, v22);
  sub_10012BA40();
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v43, enum case for WeatherConditionGradientModel.PresentationContext.widget(_:), v44);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v55, v47);
  sub_10012B950();
  sub_10012B9C0();
  sub_1000E6470();
  sub_10012B9B0();
  sub_10012B9A0();
  sub_10012BC60();
  uint64_t v34 = sub_100100660();
  v35(v34);
  sub_10012A670();
  sub_10012A5C0();
  if (v1 != sub_100100700() || v54 != v36) {
    sub_10012D1F0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = sub_100100740();
  sub_1000AC238(v58, v39, v40, v38);
  sub_10012B980();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v0, v57);
  uint64_t *v8 = v53;
  v8[1] = v52;
  v8[2] = v50;
  v8[3] = v49;
  uint64_t v41 = sub_100100674(v48);
  sub_100100720(v41);
  sub_1001006E4();
  sub_100099C20();
}

uint64_t sub_1001003D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000053D8(&qword_10016B420);
  uint64_t v4 = sub_10000DC9C(v3);
  __chkstk_darwin(v4);
  sub_10000DC50();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_10012BC70();
  sub_10000DB98();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v12 = sub_1001006BC();
  sub_10000DB98();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_10000DC50();
  uint64_t v18 = v17 - v16;
  sub_10012B960();
  sub_10012B9A0();
  uint64_t v19 = sub_10012BC60();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
  uint64_t v20 = sub_100129220();
  sub_1000AC238(v7, v21, v22, v20);
  char v23 = sub_10012B980();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v12);
  sub_100100760();
  *(_DWORD *)(a1 + 48) = 65793;
  uint64_t v24 = type metadata accessor for WidgetContext();
  uint64_t result = sub_1000880BC(v7, a1 + *(int *)(v24 + 40));
  uint64_t v26 = a1 + *(int *)(v24 + 44);
  *(void *)uint64_t v26 = v19;
  *(unsigned char *)(v26 + 8) = v23 & 1;
  return result;
}

uint64_t sub_100100588()
{
  swift_release();

  swift_release();
  return v0;
}

uint64_t sub_1001005B8()
{
  sub_100100588();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for WidgetContextFactory()
{
  return self;
}

uint64_t sub_100100610@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 280) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_100100634@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_10012BC70();
}

uint64_t sub_100100660()
{
  return v0;
}

uint64_t sub_100100674@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 32) = v1;
  *(void *)(v2 + 40) = a1;
  *(unsigned char *)(v2 + 48) = v6;
  *(unsigned char *)(v2 + 49) = v4;
  *(unsigned char *)(v2 + 50) = v3 & 1;
  *(unsigned char *)(v2 + 51) = v5;
  return type metadata accessor for WidgetContext();
}

uint64_t sub_1001006BC()
{
  return sub_10012B990();
}

void sub_1001006E4()
{
  uint64_t v4 = v0 + *(int *)(v3 + 44);
  *(void *)uint64_t v4 = v2;
  *(unsigned char *)(v4 + 8) = v1 & 1;
}

uint64_t sub_100100700()
{
  return sub_10012A5C0();
}

uint64_t sub_100100720(uint64_t a1)
{
  uint64_t v4 = v1 + *(int *)(a1 + 40);
  return sub_1000880BC(v2, v4);
}

uint64_t sub_100100740()
{
  return sub_100129220();
}

void sub_100100760()
{
  *uint64_t v0 = 0;
  v0[1] = 0xE000000000000000;
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = 0;
  v0[5] = 0xE000000000000000;
}

uint64_t sub_100100774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100100788);
}

uint64_t sub_100100788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for ForecastEntry(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
}

uint64_t sub_100100808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010081C);
}

uint64_t sub_10010081C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for ForecastEntry(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t type metadata accessor for WindContentView()
{
  uint64_t result = qword_1001713F8;
  if (!qword_1001713F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001008EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100100908@<X0>(uint64_t a1@<X8>)
{
  return sub_100100910(v1, a1);
}

uint64_t sub_100100910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v43 = sub_1000053D8(&qword_100171430);
  __chkstk_darwin(v43);
  uint64_t v44 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_1000053D8(&qword_100171438);
  __chkstk_darwin(v52);
  uint64_t v48 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10012BC90();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for WindContentView();
  uint64_t v7 = __chkstk_darwin(v49);
  uint64_t v40 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v37 - v9;
  uint64_t v50 = sub_1000053D8(&qword_100171440);
  __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_1000053D8(&qword_100171448);
  __chkstk_darwin(v41);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_1000053D8(&qword_100171450);
  __chkstk_darwin(v51);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10012C0F0();
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10012BEF0();
  uint64_t v42 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10012C800();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v37 = (uint64_t)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v37 - v26;
  sub_10008F554((uint64_t)&v37 - v26);
  uint64_t v39 = v23;
  int v28 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v27, v22);
  if (v28 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_10010D73C((uint64_t)v18);
    sub_10012BEE0();
    uint64_t v29 = v42;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v13, v21, v19);
    swift_storeEnumTagMultiPayload();
    sub_100101334(&qword_100171468, (void (*)(uint64_t))&type metadata accessor for WindCircularContentView);
    sub_10012B0E0();
    sub_100016CAC((uint64_t)v15, (uint64_t)v11, &qword_100171450);
    swift_storeEnumTagMultiPayload();
    sub_100101288();
    sub_10010137C();
    sub_10012B0E0();
    sub_100016D10((uint64_t)v15, &qword_100171450);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v21, v19);
  }
  if (v28 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    sub_100101224(a1, v38);
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    sub_10012CFD0(57);
    v56._countAndFlagsBits = 0xD000000000000021;
    v56._object = (void *)0x8000000100138E70;
    sub_10012CAF0(v56);
    uint64_t v35 = v37;
    sub_10008F554(v37);
    sub_100101334(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
    v57._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v57);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v35, v22);
    v58._object = (void *)0x800000010013C9D0;
    v58._countAndFlagsBits = 0xD000000000000016;
    sub_10012CAF0(v58);
LABEL_9:
    uint64_t result = sub_10012D070();
    __break(1u);
    return result;
  }
  if (v28 != enum case for WidgetFamily.accessoryInline(_:))
  {
    sub_100101224(a1, v40);
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    sub_10012CFD0(58);
    v59._countAndFlagsBits = 0xD000000000000022;
    v59._object = (void *)0x8000000100138E20;
    sub_10012CAF0(v59);
    uint64_t v36 = v37;
    sub_10008F554(v37);
    sub_100101334(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
    v60._countAndFlagsBits = sub_10012D1D0();
    sub_10012CAF0(v60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v36, v22);
    v61._object = (void *)0x800000010013C9D0;
    v61._countAndFlagsBits = 0xD000000000000016;
    sub_10012CAF0(v61);
    goto LABEL_9;
  }
  sub_10010D73C((uint64_t)v18);
  uint64_t v31 = v45;
  sub_10012BC80();
  uint64_t v33 = v46;
  uint64_t v32 = v47;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v44, v31, v47);
  swift_storeEnumTagMultiPayload();
  sub_100101334(&qword_100171458, (void (*)(uint64_t))&type metadata accessor for WindInlineContentView);
  uint64_t v34 = (uint64_t)v48;
  sub_10012B0E0();
  sub_100016CAC(v34, (uint64_t)v11, &qword_100171438);
  swift_storeEnumTagMultiPayload();
  sub_100101288();
  sub_10010137C();
  sub_10012B0E0();
  sub_100016D10(v34, &qword_100171438);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v31, v32);
}

uint64_t sub_100101224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WindContentView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100101288()
{
  unint64_t result = qword_100171460;
  if (!qword_100171460)
  {
    sub_100005470(&qword_100171450);
    sub_100101334(&qword_100171468, (void (*)(uint64_t))&type metadata accessor for WindCircularContentView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171460);
  }
  return result;
}

uint64_t sub_100101334(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010137C()
{
  unint64_t result = qword_100171470;
  if (!qword_100171470)
  {
    sub_100005470(&qword_100171438);
    sub_100101334(&qword_100171458, (void (*)(uint64_t))&type metadata accessor for WindInlineContentView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171470);
  }
  return result;
}

unint64_t sub_10010142C()
{
  unint64_t result = qword_100171478;
  if (!qword_100171478)
  {
    sub_100005470(&qword_100171480);
    sub_1001014A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171478);
  }
  return result;
}

unint64_t sub_1001014A0()
{
  unint64_t result = qword_100171488;
  if (!qword_100171488)
  {
    sub_100005470(&qword_100171490);
    sub_100101288();
    sub_10010137C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171488);
  }
  return result;
}

uint64_t sub_10010151C()
{
  uint64_t v0 = sub_1000053D8(&qword_100170E10);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1001291D0();
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100128F30();
  sub_10006D284(v4, qword_100181DE0);
  sub_10000D7A4(v4, (uint64_t)qword_100181DE0);
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v3);
  return sub_100128F20();
}

uint64_t sub_10010164C()
{
  uint64_t v0 = sub_1000053D8(&qword_100170E38);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000053D8(&qword_100170E10);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1001291D0();
  __chkstk_darwin(v6);
  sub_1000053D8(&qword_100171598);
  sub_1000053D8(&qword_1001715A0);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100130010;
  sub_1001291C0();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v5, 0, 1, v6);
  sub_100128DE0();
  uint64_t v7 = sub_100128DF0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 0, 1, v7);
  sub_100128E10();
  sub_100128E20();
  sub_10010213C();
  uint64_t result = sub_10012C9A0();
  qword_100181DF8 = result;
  return result;
}

uint64_t *sub_1001018A8()
{
  if (qword_10016AED0 != -1) {
    swift_once();
  }
  return &qword_100181DF8;
}

uint64_t sub_1001018F4()
{
  uint64_t v0 = sub_1000053D8(&qword_1001715A8);
  sub_10006D284(v0, qword_100181E00);
  sub_10000D7A4(v0, (uint64_t)qword_100181E00);
  sub_1000053D8(&qword_1001715B0);
  sub_1000053D8(&qword_1001715B8);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100130010;
  sub_100101BA8();
  sub_100128E30();
  sub_1000053D8(&qword_1001715C0);
  sub_10010213C();
  sub_10012C9A0();
  return sub_100128E40();
}

uint64_t sub_100101A4C()
{
  if (qword_10016AED8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1000053D8(&qword_1001715A8);

  return sub_10000D7A4(v0, (uint64_t)qword_100181E00);
}

BOOL sub_100101AB4(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100161230;
  v6._object = a2;
  Swift::Int v4 = sub_10012D0B0(v3, v6);
  swift_bridgeObjectRelease();
  return v4 != 0;
}

unint64_t sub_100101B00()
{
  unint64_t result = qword_1001714A8;
  if (!qword_1001714A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714A8);
  }
  return result;
}

BOOL sub_100101B58@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100101AB4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100101B90(void *a1@<X8>)
{
  *a1 = 1953460082;
  a1[1] = 0xE400000000000000;
}

unint64_t sub_100101BA8()
{
  unint64_t result = qword_1001714B0;
  if (!qword_1001714B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714B0);
  }
  return result;
}

unint64_t sub_100101BF8()
{
  unint64_t result = qword_1001714B8;
  if (!qword_1001714B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714B8);
  }
  return result;
}

uint64_t sub_100101C44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100101A4C();
  uint64_t v3 = sub_1000053D8(&qword_1001715A8);
  Swift::Int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v2, v3);
}

unint64_t sub_100101CBC()
{
  unint64_t result = qword_1001714C0;
  if (!qword_1001714C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714C0);
  }
  return result;
}

unint64_t sub_100101D0C()
{
  unint64_t result = qword_1001714C8;
  if (!qword_1001714C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714C8);
  }
  return result;
}

unint64_t sub_100101D5C()
{
  unint64_t result = qword_1001714D0;
  if (!qword_1001714D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714D0);
  }
  return result;
}

uint64_t sub_100101DA8()
{
  sub_100103288();
  uint64_t v2 = sub_100128DB0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return sub_1000F9104(v3, v0, v2, v1);
}

unint64_t sub_100101E40()
{
  unint64_t result = qword_1001714E0;
  if (!qword_1001714E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714E0);
  }
  return result;
}

unint64_t sub_100101E90()
{
  unint64_t result = qword_1001714E8;
  if (!qword_1001714E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714E8);
  }
  return result;
}

unint64_t sub_100101EE0()
{
  unint64_t result = qword_1001714F0;
  if (!qword_1001714F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714F0);
  }
  return result;
}

unint64_t sub_100101F30()
{
  unint64_t result = qword_1001714F8;
  if (!qword_1001714F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001714F8);
  }
  return result;
}

uint64_t sub_100101F7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100102320(&qword_10016AEC8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100181DE0);
  uint64_t v3 = sub_100128F30();
  Swift::Int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v2, v3);
}

uint64_t sub_100102020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102860(a1, a2, a3, (void (*)(void))sub_100101BA8);
}

uint64_t sub_10010204C(uint64_t a1)
{
  unint64_t v2 = sub_100101BA8();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10010209C()
{
  unint64_t result = qword_100171500;
  if (!qword_100171500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171500);
  }
  return result;
}

unint64_t sub_1001020EC()
{
  unint64_t result = qword_100171508;
  if (!qword_100171508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171508);
  }
  return result;
}

unint64_t sub_10010213C()
{
  unint64_t result = qword_100171510;
  if (!qword_100171510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171510);
  }
  return result;
}

uint64_t sub_100102188()
{
  sub_1001018A8();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001021B8(uint64_t a1)
{
  unint64_t v2 = sub_100101F30();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100102208()
{
  unint64_t result = qword_100171518;
  if (!qword_100171518)
  {
    sub_100005470(&qword_100171520);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171518);
  }
  return result;
}

void sub_10010225C(void *a1@<X8>)
{
  *a1 = &off_100161268;
}

unint64_t sub_100102270()
{
  unint64_t result = qword_100171528;
  if (!qword_100171528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171528);
  }
  return result;
}

uint64_t sub_1001022BC()
{
  uint64_t v0 = sub_1001291D0();
  sub_10006D284(v0, qword_100181E18);
  sub_10000D7A4(v0, (uint64_t)qword_100181E18);
  return sub_1001291C0();
}

uint64_t sub_100102320(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return sub_10000D7A4(v5, a3);
}

uint64_t sub_10010237C()
{
  return sub_100128C30();
}

uint64_t sub_1001023A0()
{
  return sub_100128C40();
}

uint64_t sub_1001023C4()
{
  uint64_t v0 = sub_100128EA0();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10000DC50();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_1000053D8(&qword_100170E08);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v20[-v11];
  uint64_t v13 = sub_1000053D8(&qword_100170E10);
  __chkstk_darwin(v13 - 8);
  sub_10000DC50();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = sub_1001291D0();
  __chkstk_darwin(v17);
  sub_10000DC50();
  sub_1000053D8(&qword_100171578);
  sub_1001291C0();
  sub_1001291C0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v16, 0, 1, v17);
  v20[15] = 1;
  uint64_t v18 = sub_100128C00();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v12, 1, 1, v18);
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v10, 1, 1, v18);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v6, enum case for InputConnectionBehavior.default(_:), v0);
  sub_100101BA8();
  return sub_100128C50();
}

uint64_t sub_100102638()
{
  return sub_10010237C();
}

uint64_t sub_100102640()
{
  return sub_1001023A0();
}

void (*sub_100102648(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100128C20();
  return sub_1000F8708;
}

unint64_t sub_1001026A8()
{
  unint64_t result = qword_100171530;
  if (!qword_100171530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171530);
  }
  return result;
}

uint64_t sub_1001026F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001031F0();
  unint64_t v5 = sub_100103288();

  return static URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_10010275C()
{
  uint64_t v0 = qword_100171498;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t sub_100102798()
{
  unint64_t result = qword_100171538;
  if (!qword_100171538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171538);
  }
  return result;
}

unint64_t sub_1001027E8()
{
  unint64_t result = qword_100171540;
  if (!qword_100171540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171540);
  }
  return result;
}

uint64_t sub_100102834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100102860(a1, a2, a3, (void (*)(void))sub_1001026A8);
}

uint64_t sub_100102860(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001028A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100102320(&qword_10016AEE0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100181E18);
  uint64_t v3 = sub_1001291D0();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v2, v3);
}

uint64_t sub_10010294C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  unint64_t v5 = sub_1001031F0();
  unint64_t v6 = sub_10010323C();
  unint64_t v7 = sub_100103288();
  *unint64_t v4 = v2;
  v4[1] = sub_100102A18;
  return URLRepresentableIntent<>.perform()(a2, v5, v6, v7);
}

uint64_t sub_100102A18()
{
  uint64_t v2 = *v1;
  uint64_t result = swift_task_dealloc();
  if (v0)
  {
    unint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
  return result;
}

uint64_t sub_100102B20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001023C4();
  *a1 = result;
  return result;
}

uint64_t sub_100102B48(uint64_t a1)
{
  unint64_t v2 = sub_1001026A8();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_100102B84()
{
  sub_100128D40();
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_10005C778();
  sub_1001023C4();
  sub_1001026A8();
  sub_100128D50();
  sub_100128D30();
  uint64_t v2 = sub_1001032D4();
  v3(v2);
  sub_1000053D8(&qword_100171560);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100130010;
  *(void *)(v4 + 32) = v0;
  uint64_t v5 = sub_100128D20();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100102C94()
{
  uint64_t v0 = sub_1000053D8(&qword_100171568);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001026A8();
  sub_100128D10();
  uint64_t v14 = sub_100128CD0();
  uint64_t v4 = *(void (**)(char *, uint64_t))(v1 + 8);
  v4(v3, v0);
  sub_100128D10();
  uint64_t v13 = sub_100128CD0();
  v4(v3, v0);
  sub_100128D10();
  uint64_t v5 = sub_100128CD0();
  v4(v3, v0);
  sub_100128D10();
  uint64_t v6 = sub_100128CD0();
  v4(v3, v0);
  sub_100128D10();
  uint64_t v7 = sub_100128CD0();
  v4(v3, v0);
  sub_100128D10();
  uint64_t v8 = sub_100128CD0();
  v4(v3, v0);
  sub_1000053D8(&qword_100171570);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100137BD0;
  uint64_t v10 = v13;
  *(void *)(v9 + 32) = v14;
  *(void *)(v9 + 40) = v10;
  *(void *)(v9 + 48) = v5;
  *(void *)(v9 + 56) = v6;
  *(void *)(v9 + 64) = v7;
  *(void *)(v9 + 72) = v8;
  uint64_t v11 = sub_100128CC0();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100102FA4()
{
  sub_100128CB0();
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_10005C778();
  sub_1001026A8();
  sub_100128CA0();
  sub_100128C90();
  uint64_t v2 = sub_1001032D4();
  v3(v2);
  sub_1000053D8(&qword_100171550);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100130010;
  *(void *)(v4 + 32) = v0;
  uint64_t v5 = sub_100128C80();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100103090()
{
  uint64_t v0 = sub_100128CF0();
  sub_1000053D8(&qword_100171558);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100130010;
  *(void *)(v1 + 32) = v0;
  uint64_t v2 = sub_100128CE0();
  swift_bridgeObjectRelease();
  return v2;
}

void type metadata accessor for OpenWeatherSettingsDeeplinksIntents()
{
}

void type metadata accessor for OpenWeatherSettingsDeeplinksIntent()
{
}

unsigned char *sub_100103120(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001031BCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for WeatherSettingsDeeplinks()
{
}

unint64_t sub_1001031F0()
{
  unint64_t result = qword_100171580;
  if (!qword_100171580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171580);
  }
  return result;
}

unint64_t sub_10010323C()
{
  unint64_t result = qword_100171588;
  if (!qword_100171588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171588);
  }
  return result;
}

unint64_t sub_100103288()
{
  unint64_t result = qword_100171590;
  if (!qword_100171590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171590);
  }
  return result;
}

uint64_t sub_1001032D4()
{
  return v0;
}

uint64_t sub_1001032F0(uint64_t a1)
{
  uint64_t v3 = sub_10012B320();
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize))
  {
    if (sub_1000051CC(*(unsigned char *)(v1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize)))
    {
      uint64_t v4 = sub_10012B320();
      uint64_t v5 = sub_10012B300();
    }
    else
    {
      uint64_t v4 = sub_10012B230();
      uint64_t v5 = sub_10012B330();
    }
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = sub_10012B2F0();
    uint64_t v6 = sub_10012B300();
  }
  uint64_t v7 = sub_100103450();
  uint64_t v8 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_1000D5674(v7, *(void *)(a1 + *(int *)(v8 + 28)));
  swift_bridgeObjectRetain();
  sub_100111D20();
  uint64_t v10 = v9;
  char v11 = sub_10010355C(v1);
  uint64_t v12 = sub_10012B5C0();
  uint64_t v13 = sub_10012B5C0();
  v14.n128_u64[0] = 2.0;
  v15.n128_u64[0] = 2.0;

  return HourlyBannerViewAttributes.init(hourlyForecasts:hourFont:hourColor:conditionFont:temperatureFont:temperatureColor:temperatureOffset:spacerMinLength:showTemperatures:)(v10, v3, v12, v4, v6, v13, v11 & 1, v14, v15);
}

uint64_t sub_100103450()
{
  sub_10012AFE0();
  sub_10000DB98();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  sub_10000DC50();
  uint64_t v3 = *(void (**)(uint64_t))(v1 + 104);
  uint64_t v4 = sub_100103984();
  v3(v4);
  sub_10010E1A0();
  char v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t))(v1 + 8);
  uint64_t v8 = sub_100103970();
  v7(v8);
  if (v6) {
    return 4;
  }
  uint64_t v10 = sub_100103984();
  v3(v10);
  sub_10010E1A0();
  char v12 = v11;
  uint64_t v13 = sub_100103970();
  v7(v13);
  if (v12) {
    return 5;
  }
  else {
    return 6;
  }
}

uint64_t sub_10010355C(uint64_t a1)
{
  uint64_t v2 = sub_10012AFE0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10012C800();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for WidgetFamily.systemMedium(_:), v6);
  sub_10006357C();
  sub_10012CB60();
  sub_10012CB60();
  uint64_t v11 = v16[0];
  uint64_t v10 = v16[1];
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v10 == v11)
  {
    if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize) >= 2u) {
      char v12 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
    }
    else {
      char v12 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *v12, v2);
    sub_10010E878();
    char v14 = v13;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    char v14 = 1;
  }
  return v14 & 1;
}

uint64_t sub_1001037A8(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8 = sub_10012AFE0();
  sub_10000DB98();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10000DC50();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = sub_10012C800();
  sub_10000DB98();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_10000DC50();
  uint64_t v21 = v20 - v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v20 - v19, a1, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v14, a2, v8);
  uint64_t v22 = sub_10003C1D0(v21, v14, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, v15);
  return v22;
}

uint64_t sub_100103920()
{
  return type metadata accessor for HourlyBannerViewAttributesFactory();
}

uint64_t type metadata accessor for HourlyBannerViewAttributesFactory()
{
  uint64_t result = qword_1001715F0;
  if (!qword_1001715F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100103970()
{
  return v0;
}

uint64_t sub_100103984()
{
  return v0;
}

void *sub_100103998(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    sub_1000053D8(&qword_10016B410);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_10012C800();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    sub_1000053D8(&qword_10016B9D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_10012AFE0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)v16;
    char v18 = v16[8];
    sub_10000886C(*(void *)v16, v18);
    *(void *)uint64_t v15 = v17;
    v15[8] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    sub_1000053D8(&qword_10016B9E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_10012B2D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      *uint64_t v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = a3[8];
    uint64_t v24 = (void *)((char *)a1 + v23);
    uint64_t v25 = (void *)((char *)a2 + v23);
    sub_1000053D8(&qword_10016B088);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v26 = sub_10012C7F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    }
    else
    {
      *uint64_t v24 = *v25;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = a3[9];
    int v28 = (char *)a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v30 = *(void *)v29;
    char v31 = v29[8];
    sub_10000886C(*(void *)v29, v31);
    *(void *)int v28 = v30;
    v28[8] = v31;
    uint64_t v124 = a3;
    uint64_t v125 = a2;
    uint64_t v32 = a3[10];
    uint64_t v126 = a1;
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = sub_100129300();
    char v122 = *(void (**)(char *, char *))(*(void *)(v35 - 8) + 16);
    uint64_t v123 = v35;
    v122(v33, v34);
    uint64_t v36 = type metadata accessor for ForecastEntry(0);
    uint64_t v37 = *(int *)(v36 + 20);
    uint64_t v38 = &v33[v37];
    uint64_t v39 = &v34[v37];
    uint64_t v40 = sub_10012C920();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, v40))
    {
      uint64_t v41 = sub_1000053D8(&qword_10016B418);
      memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v38, 0, 1, v40);
    }
    uint64_t v127 = v36;
    uint64_t v128 = v34;
    uint64_t v42 = *(int *)(v36 + 24);
    uint64_t v43 = &v33[v42];
    uint64_t v44 = &v34[v42];
    uint64_t v45 = *(void *)&v34[v42 + 8];
    *(void *)uint64_t v43 = *(void *)&v34[v42];
    *((void *)v43 + 1) = v45;
    uint64_t v46 = *(void *)&v34[v42 + 24];
    *((void *)v43 + 2) = *(void *)&v34[v42 + 16];
    *((void *)v43 + 3) = v46;
    uint64_t v47 = *(void *)&v34[v42 + 32];
    uint64_t v48 = *((void *)v44 + 5);
    *((void *)v43 + 4) = v47;
    *((void *)v43 + 5) = v48;
    *((_DWORD *)v43 + 12) = *((_DWORD *)v44 + 12);
    uint64_t v49 = type metadata accessor for WidgetContext();
    uint64_t v50 = *(int *)(v49 + 40);
    uint64_t v51 = &v43[v50];
    uint64_t v52 = &v44[v50];
    uint64_t v53 = sub_100129220();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v52, 1, v53))
    {
      uint64_t v54 = sub_1000053D8(&qword_10016B420);
      memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v53);
    }
    uint64_t v55 = *(int *)(v49 + 44);
    Swift::String v56 = &v43[v55];
    Swift::String v57 = &v44[v55];
    *(void *)Swift::String v56 = *(void *)v57;
    v56[8] = v57[8];
    uint64_t v58 = *(int *)(v127 + 28);
    Swift::String v59 = &v33[v58];
    Swift::String v60 = &v128[v58];
    uint64_t v61 = type metadata accessor for ForecastEntry.Model(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
      uint64_t v73 = v125;
      uint64_t v9 = v126;
      uint64_t v74 = v124;
LABEL_42:
      *((unsigned char *)v9 + v74[11]) = *((unsigned char *)v73 + v74[11]);
      return v9;
    }
    type metadata accessor for WeatherDataViewModel();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v75 = sub_10012BE90();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 16))(v59, v60, v75);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v121 = v53;
        uint64_t v76 = sub_100129330();
        uint64_t v77 = (void (**)(void *, const void *))(*(void *)(v76 - 8) + 16);
        uint64_t v119 = *v77;
        uint64_t v120 = v76;
        (*v77)(v59, v60);
        uint64_t v78 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v79 = v78[5];
        uint64_t v80 = &v59[v79];
        uint64_t v81 = &v60[v79];
        uint64_t v82 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 16))(v80, v81, v82);
        uint64_t v83 = v78[6];
        uint64_t v84 = &v59[v83];
        uint64_t v85 = &v60[v83];
        uint64_t v86 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v84, v85, v86);
        *(void *)&v59[v78[7]] = *(void *)&v60[v78[7]];
        *(void *)&v59[v78[8]] = *(void *)&v60[v78[8]];
        uint64_t v87 = v78[9];
        uint64_t v88 = &v59[v87];
        uint64_t v89 = &v60[v87];
        uint64_t v90 = (int *)type metadata accessor for AirQualityViewModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v89, 1, (uint64_t)v90))
        {
          uint64_t v91 = sub_1000053D8(&qword_10016B428);
          memcpy(v88, v89, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
          uint64_t v92 = (uint64_t)v88;
          ((void (*)(char *, char *, uint64_t))v119)(v88, v89, v120);
          ((void (*)(char *, char *, uint64_t))v122)(&v88[v90[5]], &v89[v90[5]], v123);
          *(void *)&v88[v90[6]] = *(void *)&v89[v90[6]];
          uint64_t v93 = v90[7];
          uint64_t v94 = &v88[v93];
          char v95 = &v89[v93];
          uint64_t v96 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 16))(v94, v95, v96);
          uint64_t v97 = v90[8];
          uint64_t v98 = v92 + v97;
          uint64_t v99 = &v89[v97];
          uint64_t v100 = sub_100129C50();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v100 - 8) + 16))(v98, v99, v100);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v92, 0, 1, (uint64_t)v90);
        }
        uint64_t v101 = v78[10];
        uint64_t v102 = &v59[v101];
        uint64_t v103 = &v60[v101];
        uint64_t v104 = sub_10012C6B0();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v103, 1, v104))
        {
          uint64_t v105 = sub_1000053D8(&qword_10016B430);
          memcpy(v102, v103, *(void *)(*(void *)(v105 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v102, 0, 1, v104);
        }
        *(void *)&v59[v78[11]] = *(void *)&v60[v78[11]];
        uint64_t v106 = v78[12];
        int v107 = &v59[v106];
        uint64_t v108 = &v60[v106];
        *(void *)int v107 = *(void *)v108;
        *((_WORD *)v107 + 4) = *((_WORD *)v108 + 4);
        uint64_t v109 = v78[13];
        unsigned __int8 v110 = &v59[v109];
        unsigned __int8 v111 = &v60[v109];
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v111, 1, v121))
        {
          uint64_t v112 = sub_1000053D8(&qword_10016B420);
          memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 16))(v110, v111, v121);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v110, 0, 1, v121);
        }
        uint64_t v113 = v78[14];
        uint64_t v114 = &v59[v113];
        uint64_t v115 = &v60[v113];
        uint64_t v116 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v115, 1, v116))
        {
          uint64_t v117 = sub_1000053D8(&qword_10016B438);
          memcpy(v114, v115, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          ((void (*)(char *, char *, uint64_t))v122)(v114, v115, v123);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v116);
        }
        uint64_t v73 = v125;
        uint64_t v9 = v126;
        uint64_t v74 = v124;
        goto LABEL_41;
      }
      uint64_t v63 = sub_100129330();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v59, v60, v63);
      uint64_t v64 = type metadata accessor for InstantWeatherViewModel();
      uint64_t v65 = *(int *)(v64 + 20);
      uint64_t v66 = &v59[v65];
      int v67 = &v60[v65];
      uint64_t v68 = sub_10012A6B0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(v66, v67, v68);
      uint64_t v69 = *(int *)(v64 + 24);
      uint64_t v70 = &v59[v69];
      uint64_t v71 = &v60[v69];
      uint64_t v72 = sub_10012C250();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
    }
    uint64_t v73 = v125;
    uint64_t v9 = v126;
    uint64_t v74 = v124;
LABEL_41:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    goto LABEL_42;
  }
  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v9;
}

uint64_t sub_10010454C(uint64_t a1, int *a2)
{
  sub_1000053D8(&qword_10016B410);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_10012C800();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  sub_1000053D8(&qword_10016B9D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_10012AFE0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  sub_100008BF8(*(void *)(a1 + a2[6]), *(unsigned char *)(a1 + a2[6] + 8));
  uint64_t v7 = a1 + a2[7];
  sub_1000053D8(&qword_10016B9E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_10012B2D0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = a1 + a2[8];
  sub_1000053D8(&qword_10016B088);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_10012C7F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  sub_100008BF8(*(void *)(a1 + a2[9]), *(unsigned char *)(a1 + a2[9] + 8));
  uint64_t v11 = a1 + a2[10];
  uint64_t v12 = sub_100129300();
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v49(v11, v12);
  uint64_t v13 = (int *)type metadata accessor for ForecastEntry(0);
  uint64_t v14 = v11 + v13[5];
  uint64_t v15 = sub_10012C920();
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v14, 1, v15)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  }
  uint64_t v16 = v11 + v13[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 + *(int *)(type metadata accessor for WidgetContext() + 40);
  uint64_t v18 = sub_100129220();
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v17, 1, v18)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = v11 + v13[7];
  type metadata accessor for ForecastEntry.Model(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for WeatherDataViewModel();
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 2)
    {
      uint64_t v39 = sub_10012BE90();
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8);
      uint64_t v41 = v39;
      uint64_t v42 = v19;
    }
    else if (result == 1)
    {
      uint64_t v43 = sub_100129330();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v19, v43);
      uint64_t v44 = type metadata accessor for InstantWeatherViewModel();
      uint64_t v45 = v19 + *(int *)(v44 + 20);
      uint64_t v46 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
      uint64_t v47 = v19 + *(int *)(v44 + 24);
      uint64_t v48 = sub_10012C250();
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8);
      uint64_t v41 = v48;
      uint64_t v42 = v47;
    }
    else
    {
      if (result) {
        return result;
      }
      uint64_t v21 = sub_100129330();
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
      v22(v19, v21);
      uint64_t v23 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
      uint64_t v24 = v19 + v23[5];
      uint64_t v25 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
      uint64_t v26 = v19 + v23[6];
      uint64_t v27 = sub_10012C250();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = v19 + v23[9];
      uint64_t v29 = (int *)type metadata accessor for AirQualityViewModel();
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v28, 1, (uint64_t)v29))
      {
        v22(v28, v21);
        v49(v28 + v29[5], v12);
        uint64_t v30 = v28 + v29[7];
        uint64_t v31 = sub_100129B70();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
        uint64_t v32 = v28 + v29[8];
        uint64_t v33 = sub_100129C50();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v32, v33);
      }
      uint64_t v34 = v19 + v23[10];
      uint64_t v35 = sub_10012C6B0();
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v34, 1, v35)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v34, v35);
      }
      swift_bridgeObjectRelease();
      uint64_t v36 = v19 + v23[13];
      if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v36, 1, v18)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v36, v18);
      }
      uint64_t v37 = v19 + v23[14];
      uint64_t v38 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      uint64_t result = _s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v38);
      if (result) {
        return result;
      }
      uint64_t v42 = v37;
      uint64_t v41 = v12;
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t))v49;
    }
    return v40(v42, v41);
  }
  return result;
}

void *sub_100104CAC(void *a1, void *a2, int *a3)
{
  sub_1000053D8(&qword_10016B410);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_10012C800();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  sub_1000053D8(&qword_10016B9D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_10012AFE0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    void *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  char v15 = v13[8];
  sub_10000886C(*(void *)v13, v15);
  *(void *)uint64_t v12 = v14;
  v12[8] = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  sub_1000053D8(&qword_10016B9E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = sub_10012B2D0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  else
  {
    *uint64_t v17 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  sub_1000053D8(&qword_10016B088);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = sub_10012C7F0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  }
  else
  {
    *uint64_t v21 = *v22;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = a3[9];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)v26;
  char v28 = v26[8];
  sub_10000886C(*(void *)v26, v28);
  *(void *)uint64_t v25 = v27;
  v25[8] = v28;
  uint64_t v121 = a3;
  char v122 = a2;
  uint64_t v29 = a3[10];
  uint64_t v123 = a1;
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = sub_100129300();
  uint64_t v119 = *(void (**)(char *, char *))(*(void *)(v32 - 8) + 16);
  uint64_t v120 = v32;
  v119(v30, v31);
  uint64_t v33 = type metadata accessor for ForecastEntry(0);
  uint64_t v34 = *(int *)(v33 + 20);
  uint64_t v35 = &v30[v34];
  uint64_t v36 = &v31[v34];
  uint64_t v37 = sub_10012C920();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v37))
  {
    uint64_t v38 = sub_1000053D8(&qword_10016B418);
    memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v37);
  }
  uint64_t v124 = v33;
  uint64_t v39 = *(int *)(v33 + 24);
  uint64_t v40 = &v30[v39];
  uint64_t v41 = &v31[v39];
  uint64_t v42 = *(void *)&v31[v39 + 8];
  *(void *)uint64_t v40 = *(void *)&v31[v39];
  *((void *)v40 + 1) = v42;
  uint64_t v43 = *(void *)&v31[v39 + 24];
  *((void *)v40 + 2) = *(void *)&v31[v39 + 16];
  *((void *)v40 + 3) = v43;
  uint64_t v44 = *(void *)&v31[v39 + 40];
  *((void *)v40 + 4) = *(void *)&v31[v39 + 32];
  *((void *)v40 + 5) = v44;
  *((_DWORD *)v40 + 12) = *(_DWORD *)&v31[v39 + 48];
  uint64_t v45 = type metadata accessor for WidgetContext();
  uint64_t v46 = *(int *)(v45 + 40);
  uint64_t v47 = &v40[v46];
  uint64_t v48 = &v41[v46];
  uint64_t v49 = sub_100129220();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v48, 1, v49))
  {
    uint64_t v50 = sub_1000053D8(&qword_10016B420);
    memcpy(v47, v48, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v47, 0, 1, v49);
  }
  uint64_t v51 = *(int *)(v45 + 44);
  uint64_t v52 = &v40[v51];
  uint64_t v53 = &v41[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  v52[8] = v53[8];
  uint64_t v54 = *(int *)(v124 + 28);
  uint64_t v55 = &v30[v54];
  Swift::String v56 = &v31[v54];
  uint64_t v57 = type metadata accessor for ForecastEntry.Model(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for WeatherDataViewModel();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v72 = sub_10012BE90();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v55, v56, v72);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v118 = v49;
        uint64_t v73 = sub_100129330();
        uint64_t v74 = (void (**)(void *, const void *))(*(void *)(v73 - 8) + 16);
        uint64_t v116 = *v74;
        uint64_t v117 = v73;
        (*v74)(v55, v56);
        uint64_t v75 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v76 = v75[5];
        uint64_t v77 = &v55[v76];
        uint64_t v78 = &v56[v76];
        uint64_t v79 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
        uint64_t v80 = v75[6];
        uint64_t v81 = &v55[v80];
        uint64_t v82 = &v56[v80];
        uint64_t v83 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
        *(void *)&v55[v75[7]] = *(void *)&v56[v75[7]];
        *(void *)&v55[v75[8]] = *(void *)&v56[v75[8]];
        uint64_t v84 = v75[9];
        uint64_t v85 = &v55[v84];
        uint64_t v86 = &v56[v84];
        uint64_t v87 = (int *)type metadata accessor for AirQualityViewModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v86, 1, (uint64_t)v87))
        {
          uint64_t v88 = sub_1000053D8(&qword_10016B428);
          memcpy(v85, v86, *(void *)(*(void *)(v88 - 8) + 64));
        }
        else
        {
          uint64_t v89 = (uint64_t)v85;
          ((void (*)(char *, char *, uint64_t))v116)(v85, v86, v117);
          ((void (*)(char *, char *, uint64_t))v119)(&v85[v87[5]], &v86[v87[5]], v120);
          *(void *)&v85[v87[6]] = *(void *)&v86[v87[6]];
          uint64_t v90 = v87[7];
          uint64_t v91 = &v85[v90];
          uint64_t v92 = &v86[v90];
          uint64_t v93 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 16))(v91, v92, v93);
          uint64_t v94 = v87[8];
          uint64_t v95 = v89 + v94;
          uint64_t v96 = &v86[v94];
          uint64_t v97 = sub_100129C50();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v89, 0, 1, (uint64_t)v87);
        }
        uint64_t v98 = v75[10];
        uint64_t v99 = &v55[v98];
        uint64_t v100 = &v56[v98];
        uint64_t v101 = sub_10012C6B0();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v100, 1, v101))
        {
          uint64_t v102 = sub_1000053D8(&qword_10016B430);
          memcpy(v99, v100, *(void *)(*(void *)(v102 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 16))(v99, v100, v101);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v101);
        }
        *(void *)&v55[v75[11]] = *(void *)&v56[v75[11]];
        uint64_t v103 = v75[12];
        uint64_t v104 = &v55[v103];
        uint64_t v105 = &v56[v103];
        *(void *)uint64_t v104 = *(void *)v105;
        *((_WORD *)v104 + 4) = *((_WORD *)v105 + 4);
        uint64_t v106 = v75[13];
        int v107 = &v55[v106];
        uint64_t v108 = &v56[v106];
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v108, 1, v118))
        {
          uint64_t v109 = sub_1000053D8(&qword_10016B420);
          memcpy(v107, v108, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 16))(v107, v108, v118);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v107, 0, 1, v118);
        }
        uint64_t v110 = v75[14];
        unsigned __int8 v111 = &v55[v110];
        uint64_t v112 = &v56[v110];
        uint64_t v113 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v112, 1, v113))
        {
          uint64_t v114 = sub_1000053D8(&qword_10016B438);
          memcpy(v111, v112, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          ((void (*)(char *, char *, uint64_t))v119)(v111, v112, v120);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 0, 1, v113);
        }
        uint64_t v70 = v122;
        uint64_t v69 = v123;
        uint64_t v71 = v121;
        goto LABEL_39;
      }
      uint64_t v59 = sub_100129330();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v55, v56, v59);
      uint64_t v60 = type metadata accessor for InstantWeatherViewModel();
      uint64_t v61 = *(int *)(v60 + 20);
      uint64_t v62 = &v55[v61];
      uint64_t v63 = &v56[v61];
      uint64_t v64 = sub_10012A6B0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
      uint64_t v65 = *(int *)(v60 + 24);
      uint64_t v66 = &v55[v65];
      int v67 = &v56[v65];
      uint64_t v68 = sub_10012C250();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(v66, v67, v68);
    }
    uint64_t v70 = v122;
    uint64_t v69 = v123;
    uint64_t v71 = v121;
LABEL_39:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    goto LABEL_40;
  }
  memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  uint64_t v70 = v122;
  uint64_t v69 = v123;
  uint64_t v71 = v121;
LABEL_40:
  *((unsigned char *)v69 + v71[11]) = *((unsigned char *)v70 + v71[11]);
  return v69;
}

void *sub_100105814(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1000235F8((uint64_t)a1, &qword_10016B410);
    sub_1000053D8(&qword_10016B410);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_10012C800();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    sub_1000235F8((uint64_t)a1 + v7, &qword_10016B9D8);
    sub_1000053D8(&qword_10016B9D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_10012AFE0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      void *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  char v15 = v13[8];
  sub_10000886C(*(void *)v13, v15);
  uint64_t v16 = *(void *)v12;
  char v17 = v12[8];
  *(void *)uint64_t v12 = v14;
  v12[8] = v15;
  sub_100008BF8(v16, v17);
  if (a1 != a2)
  {
    uint64_t v18 = a3[7];
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    sub_1000235F8((uint64_t)a1 + v18, &qword_10016B9E0);
    sub_1000053D8(&qword_10016B9E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = sub_10012B2D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = a3[8];
    uint64_t v23 = (void *)((char *)a1 + v22);
    uint64_t v24 = (void *)((char *)a2 + v22);
    sub_1000235F8((uint64_t)a1 + v22, &qword_10016B088);
    sub_1000053D8(&qword_10016B088);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = sub_10012C7F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      void *v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v26 = a3[9];
  uint64_t v27 = (char *)a1 + v26;
  char v28 = (char *)a2 + v26;
  uint64_t v29 = *(void *)v28;
  char v30 = v28[8];
  sub_10000886C(*(void *)v28, v30);
  uint64_t v31 = *(void *)v27;
  char v32 = v27[8];
  *(void *)uint64_t v27 = v29;
  v27[8] = v30;
  sub_100008BF8(v31, v32);
  uint64_t v129 = a3;
  char v130 = a2;
  uint64_t v33 = a3[10];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = sub_100129300();
  uint64_t v126 = *(void *)(v36 - 8);
  uint64_t v127 = v36;
  (*(void (**)(char *, char *))(v126 + 24))(v34, v35);
  uint64_t v37 = (int *)type metadata accessor for ForecastEntry(0);
  uint64_t v38 = v37[5];
  uint64_t v39 = &v34[v38];
  uint64_t v40 = &v35[v38];
  uint64_t v41 = sub_10012C920();
  int v42 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v39, 1, v41);
  int v43 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v40, 1, v41);
  uint64_t v131 = a1;
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v39, 0, 1, v41);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v44 = *(void *)(v41 - 8);
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v41);
LABEL_22:
    uint64_t v45 = sub_1000053D8(&qword_10016B418);
    memcpy(v39, v40, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v44 + 24))(v39, v40, v41);
LABEL_23:
  uint64_t v46 = v37[6];
  uint64_t v47 = &v34[v46];
  uint64_t v48 = &v35[v46];
  *(void *)uint64_t v47 = *(void *)&v35[v46];
  *((void *)v47 + 1) = *(void *)&v35[v46 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v47 + 2) = *((void *)v48 + 2);
  *((void *)v47 + 3) = *((void *)v48 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v47 + 4) = *((void *)v48 + 4);
  *((void *)v47 + 5) = *((void *)v48 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47[48] = v48[48];
  v47[49] = v48[49];
  v47[50] = v48[50];
  v47[51] = v48[51];
  uint64_t v49 = type metadata accessor for WidgetContext();
  uint64_t v50 = *(int *)(v49 + 40);
  uint64_t v51 = &v47[v50];
  uint64_t v52 = &v48[v50];
  uint64_t v53 = sub_100129220();
  int v54 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v51, 1, v53);
  int v55 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v52, 1, v53);
  uint64_t v128 = v53;
  if (v54)
  {
    Swift::String v56 = v131;
    if (v55)
    {
      uint64_t v57 = sub_1000053D8(&qword_10016B420);
      memcpy(v51, v52, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v51, v52, v128);
      Swift::String v56 = v131;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v51, 0, 1, v128);
    }
  }
  else
  {
    uint64_t v58 = *(void *)(v53 - 8);
    if (v55)
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v51, v53);
      uint64_t v59 = sub_1000053D8(&qword_10016B420);
      memcpy(v51, v52, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 24))(v51, v52, v53);
    }
    Swift::String v56 = v131;
  }
  uint64_t v60 = *(int *)(v49 + 44);
  uint64_t v61 = &v47[v60];
  uint64_t v62 = &v48[v60];
  *(void *)uint64_t v61 = *(void *)&v48[v60];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61[8] = v62[8];
  uint64_t v63 = v130;
  if (v56 != v130)
  {
    uint64_t v64 = v37[7];
    uint64_t v65 = &v34[v64];
    uint64_t v66 = &v35[v64];
    sub_10010AD68((uint64_t)v65, (void (*)(void))type metadata accessor for ForecastEntry.Model);
    uint64_t v67 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for WeatherDataViewModel();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v79 = sub_10012BE90();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v65, v66, v79);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v69 = sub_100129330();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 16))(v65, v66, v69);
        uint64_t v70 = type metadata accessor for InstantWeatherViewModel();
        uint64_t v71 = *(int *)(v70 + 20);
        uint64_t v72 = &v65[v71];
        uint64_t v73 = &v66[v71];
        uint64_t v74 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(v72, v73, v74);
        uint64_t v75 = *(int *)(v70 + 24);
        uint64_t v76 = &v65[v75];
        uint64_t v77 = &v66[v75];
        uint64_t v78 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16))(v76, v77, v78);
      }
      else
      {
        uint64_t v80 = sub_100129330();
        uint64_t v81 = (void (**)(void *, const void *))(*(void *)(v80 - 8) + 16);
        uint64_t v123 = *v81;
        uint64_t v124 = v80;
        (*v81)(v65, v66);
        uint64_t v82 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v83 = v82[5];
        uint64_t v84 = &v65[v83];
        uint64_t v85 = &v66[v83];
        uint64_t v86 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v84, v85, v86);
        uint64_t v87 = v82[6];
        uint64_t v88 = &v65[v87];
        uint64_t v89 = &v66[v87];
        uint64_t v90 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 16))(v88, v89, v90);
        *(void *)&v65[v82[7]] = *(void *)&v66[v82[7]];
        *(void *)&v65[v82[8]] = *(void *)&v66[v82[8]];
        uint64_t v125 = v82;
        uint64_t v91 = v82[9];
        uint64_t v92 = &v65[v91];
        uint64_t v93 = &v66[v91];
        uint64_t v94 = (int *)type metadata accessor for AirQualityViewModel();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v93, 1, (uint64_t)v94))
        {
          uint64_t v95 = sub_1000053D8(&qword_10016B428);
          memcpy(v92, v93, *(void *)(*(void *)(v95 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v123)(v92, v93, v124);
          (*(void (**)(char *, char *, uint64_t))(v126 + 16))(&v92[v94[5]], &v93[v94[5]], v127);
          *(void *)&v92[v94[6]] = *(void *)&v93[v94[6]];
          uint64_t v96 = v94[7];
          uint64_t v97 = &v92[v96];
          uint64_t v98 = &v93[v96];
          uint64_t v99 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 16))(v97, v98, v99);
          uint64_t v100 = v94[8];
          uint64_t v101 = &v92[v100];
          uint64_t v102 = &v93[v100];
          uint64_t v103 = sub_100129C50();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 16))(v101, v102, v103);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v92, 0, 1, (uint64_t)v94);
        }
        uint64_t v104 = v125[10];
        uint64_t v105 = &v65[v104];
        uint64_t v106 = &v66[v104];
        uint64_t v107 = sub_10012C6B0();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v106, 1, v107))
        {
          uint64_t v108 = sub_1000053D8(&qword_10016B430);
          memcpy(v105, v106, *(void *)(*(void *)(v108 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 16))(v105, v106, v107);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v105, 0, 1, v107);
        }
        *(void *)&v65[v125[11]] = *(void *)&v66[v125[11]];
        uint64_t v109 = v125[12];
        uint64_t v110 = &v65[v109];
        unsigned __int8 v111 = &v66[v109];
        uint64_t v112 = *(void *)v111;
        *((_WORD *)v110 + 4) = *((_WORD *)v111 + 4);
        *(void *)uint64_t v110 = v112;
        uint64_t v113 = v125[13];
        uint64_t v114 = &v65[v113];
        uint64_t v115 = &v66[v113];
        swift_bridgeObjectRetain();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v115, 1, v128))
        {
          uint64_t v116 = sub_1000053D8(&qword_10016B420);
          memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v114, v115, v128);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v114, 0, 1, v128);
        }
        uint64_t v117 = v125[14];
        uint64_t v118 = &v65[v117];
        uint64_t v119 = &v66[v117];
        uint64_t v120 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v119, 1, v120))
        {
          uint64_t v121 = sub_1000053D8(&qword_10016B438);
          memcpy(v118, v119, *(void *)(*(void *)(v121 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v118, v119, v127);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v118, 0, 1, v120);
        }
        uint64_t v63 = v130;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
  }
  *((unsigned char *)v56 + v129[11]) = *((unsigned char *)v63 + v129[11]);
  return v56;
}

char *sub_100106590(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000053D8(&qword_10016B410);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_10012C800();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000053D8(&qword_10016B9D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_10012AFE0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  char v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)char v15 = *(void *)v16;
  v15[8] = v16[8];
  char v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  uint64_t v19 = sub_1000053D8(&qword_10016B9E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_10012B2D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  uint64_t v21 = a3[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = sub_1000053D8(&qword_10016B088);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = sub_10012C7F0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  uint64_t v26 = a3[9];
  uint64_t v27 = a3[10];
  uint64_t v116 = a2;
  uint64_t v117 = a3;
  char v28 = &a1[v26];
  uint64_t v29 = &a2[v26];
  *(void *)char v28 = *(void *)v29;
  v28[8] = v29[8];
  char v30 = &a1[v27];
  uint64_t v31 = &a2[v27];
  uint64_t v32 = sub_100129300();
  uint64_t v113 = *(void (**)(char *, char *))(*(void *)(v32 - 8) + 32);
  uint64_t v114 = v32;
  v113(v30, v31);
  uint64_t v33 = (int *)type metadata accessor for ForecastEntry(0);
  uint64_t v34 = v33[5];
  uint64_t v35 = &v30[v34];
  uint64_t v36 = &v31[v34];
  uint64_t v37 = sub_10012C920();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v36, 1, v37))
  {
    uint64_t v38 = sub_1000053D8(&qword_10016B418);
    memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v35, 0, 1, v37);
  }
  uint64_t v39 = v33[6];
  uint64_t v40 = &v30[v39];
  uint64_t v41 = &v31[v39];
  long long v42 = *(_OWORD *)&v31[v39 + 16];
  *(_OWORD *)uint64_t v40 = *(_OWORD *)&v31[v39];
  *((_OWORD *)v40 + 1) = v42;
  *((_OWORD *)v40 + 2) = *(_OWORD *)&v31[v39 + 32];
  *((_DWORD *)v40 + 12) = *(_DWORD *)&v31[v39 + 48];
  uint64_t v43 = type metadata accessor for WidgetContext();
  uint64_t v44 = *(int *)(v43 + 40);
  uint64_t v45 = &v40[v44];
  uint64_t v46 = &v41[v44];
  uint64_t v47 = sub_100129220();
  uint64_t v115 = v47;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v46, 1, v47))
  {
    uint64_t v48 = sub_1000053D8(&qword_10016B420);
    memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v45, 0, 1, v47);
  }
  uint64_t v49 = *(int *)(v43 + 44);
  uint64_t v50 = &v40[v49];
  uint64_t v51 = &v41[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  uint64_t v52 = v33[7];
  uint64_t v53 = &v30[v52];
  int v54 = &v31[v52];
  uint64_t v55 = type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for WeatherDataViewModel();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v69 = sub_10012BE90();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v53, v54, v69);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v70 = sub_100129330();
        uint64_t v108 = *(void (**)(char *, char *))(*(void *)(v70 - 8) + 32);
        uint64_t v110 = v70;
        v108(v53, v54);
        uint64_t v71 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v72 = v71[5];
        uint64_t v73 = &v53[v72];
        uint64_t v74 = &v54[v72];
        uint64_t v75 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v73, v74, v75);
        uint64_t v76 = v71[6];
        uint64_t v77 = &v53[v76];
        uint64_t v78 = &v54[v76];
        uint64_t v79 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 32))(v77, v78, v79);
        *(void *)&v53[v71[7]] = *(void *)&v54[v71[7]];
        *(void *)&v53[v71[8]] = *(void *)&v54[v71[8]];
        uint64_t v80 = v71[9];
        uint64_t v81 = &v53[v80];
        uint64_t v82 = &v54[v80];
        uint64_t v83 = (int *)type metadata accessor for AirQualityViewModel();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v82, 1, (uint64_t)v83))
        {
          uint64_t v84 = sub_1000053D8(&qword_10016B428);
          memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v108)(v81, v82, v110);
          ((void (*)(char *, char *, uint64_t))v113)(&v81[v83[5]], &v82[v83[5]], v114);
          *(void *)&v81[v83[6]] = *(void *)&v82[v83[6]];
          uint64_t v85 = v83[7];
          uint64_t v109 = &v82[v85];
          unsigned __int8 v111 = &v81[v85];
          uint64_t v86 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v111, v109, v86);
          uint64_t v87 = v83[8];
          uint64_t v112 = &v81[v87];
          uint64_t v88 = &v82[v87];
          uint64_t v89 = sub_100129C50();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 32))(v112, v88, v89);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v81, 0, 1, (uint64_t)v83);
        }
        uint64_t v90 = v71[10];
        uint64_t v91 = &v53[v90];
        uint64_t v92 = &v54[v90];
        uint64_t v93 = sub_10012C6B0();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v92, 1, v93))
        {
          uint64_t v94 = sub_1000053D8(&qword_10016B430);
          memcpy(v91, v92, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 32))(v91, v92, v93);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v91, 0, 1, v93);
        }
        *(void *)&v53[v71[11]] = *(void *)&v54[v71[11]];
        uint64_t v95 = v71[12];
        uint64_t v96 = &v53[v95];
        uint64_t v97 = &v54[v95];
        *(void *)uint64_t v96 = *(void *)v97;
        *((_WORD *)v96 + 4) = *((_WORD *)v97 + 4);
        uint64_t v98 = v71[13];
        uint64_t v99 = &v53[v98];
        uint64_t v100 = &v54[v98];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v54[v98], 1, v115))
        {
          uint64_t v101 = sub_1000053D8(&qword_10016B420);
          memcpy(v99, v100, *(void *)(*(void *)(v101 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v99, v100, v115);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v99, 0, 1, v115);
        }
        uint64_t v102 = v71[14];
        uint64_t v103 = &v53[v102];
        uint64_t v104 = &v54[v102];
        uint64_t v105 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v104, 1, v105))
        {
          uint64_t v106 = sub_1000053D8(&qword_10016B438);
          memcpy(v103, v104, *(void *)(*(void *)(v106 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          ((void (*)(char *, char *, uint64_t))v113)(v103, v104, v114);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v103, 0, 1, v105);
        }
        uint64_t v68 = v117;
        goto LABEL_39;
      }
      uint64_t v57 = sub_100129330();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v53, v54, v57);
      uint64_t v58 = type metadata accessor for InstantWeatherViewModel();
      uint64_t v59 = *(int *)(v58 + 20);
      uint64_t v60 = &v53[v59];
      uint64_t v61 = &v54[v59];
      uint64_t v62 = sub_10012A6B0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v60, v61, v62);
      uint64_t v63 = *(int *)(v58 + 24);
      uint64_t v64 = &v53[v63];
      uint64_t v65 = &v54[v63];
      uint64_t v66 = sub_10012C250();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v64, v65, v66);
    }
    uint64_t v68 = v117;
LABEL_39:
    uint64_t v67 = v116;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    goto LABEL_40;
  }
  memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  uint64_t v67 = v116;
  uint64_t v68 = v117;
LABEL_40:
  a1[v68[11]] = v67[v68[11]];
  return a1;
}

char *sub_1001070B4(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1000235F8((uint64_t)a1, &qword_10016B410);
    uint64_t v6 = sub_1000053D8(&qword_10016B410);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_10012C800();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    sub_1000235F8((uint64_t)&a1[v8], &qword_10016B9D8);
    uint64_t v11 = sub_1000053D8(&qword_10016B9D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_10012AFE0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  char v15 = &a2[v13];
  uint64_t v16 = *(void *)v15;
  LOBYTE(v15) = v15[8];
  uint64_t v17 = *(void *)v14;
  char v18 = v14[8];
  *(void *)uint64_t v14 = v16;
  v14[8] = (char)v15;
  sub_100008BF8(v17, v18);
  if (a1 != a2)
  {
    uint64_t v19 = a3[7];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    sub_1000235F8((uint64_t)&a1[v19], &qword_10016B9E0);
    uint64_t v22 = sub_1000053D8(&qword_10016B9E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = sub_10012B2D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    uint64_t v24 = a3[8];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    sub_1000235F8((uint64_t)&a1[v24], &qword_10016B088);
    uint64_t v27 = sub_1000053D8(&qword_10016B088);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = sub_10012C7F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v25, v26, v28);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
  }
  uint64_t v29 = a3[9];
  char v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *(void *)v31;
  LOBYTE(v31) = v31[8];
  uint64_t v33 = *(void *)v30;
  char v34 = v30[8];
  *(void *)char v30 = v32;
  v30[8] = (char)v31;
  sub_100008BF8(v33, v34);
  uint64_t v132 = a3;
  uint64_t v35 = a3[10];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v38 = sub_100129300();
  uint64_t v129 = *(void *)(v38 - 8);
  uint64_t v130 = v38;
  (*(void (**)(char *, char *))(v129 + 40))(v36, v37);
  uint64_t v39 = (int *)type metadata accessor for ForecastEntry(0);
  uint64_t v40 = v39[5];
  uint64_t v41 = &v36[v40];
  long long v42 = &v37[v40];
  uint64_t v43 = sub_10012C920();
  int v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v41, 1, v43);
  int v45 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v42, 1, v43);
  uint64_t v133 = a2;
  uint64_t v134 = a1;
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v41, 0, 1, v43);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v46 = *(void *)(v43 - 8);
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v43);
LABEL_20:
    uint64_t v47 = sub_1000053D8(&qword_10016B418);
    memcpy(v41, v42, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v41, v42, v43);
LABEL_21:
  uint64_t v48 = v39[6];
  uint64_t v49 = &v36[v48];
  uint64_t v50 = &v37[v48];
  uint64_t v51 = *(void *)&v37[v48 + 8];
  *(void *)uint64_t v49 = *(void *)&v37[v48];
  *((void *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  uint64_t v52 = *((void *)v50 + 3);
  *((void *)v49 + 2) = *((void *)v50 + 2);
  *((void *)v49 + 3) = v52;
  swift_bridgeObjectRelease();
  uint64_t v53 = *((void *)v50 + 5);
  *((void *)v49 + 4) = *((void *)v50 + 4);
  *((void *)v49 + 5) = v53;
  swift_bridgeObjectRelease();
  *((_WORD *)v49 + 24) = *((_WORD *)v50 + 24);
  v49[50] = v50[50];
  v49[51] = v50[51];
  uint64_t v54 = type metadata accessor for WidgetContext();
  uint64_t v55 = *(int *)(v54 + 40);
  Swift::String v56 = &v49[v55];
  uint64_t v57 = &v50[v55];
  uint64_t v58 = sub_100129220();
  int v59 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v56, 1, v58);
  int v60 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v57, 1, v58);
  uint64_t v131 = v58;
  if (v59)
  {
    uint64_t v61 = v134;
    if (v60)
    {
      uint64_t v62 = sub_1000053D8(&qword_10016B420);
      memcpy(v56, v57, *(void *)(*(void *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 32))(v56, v57, v131);
      uint64_t v61 = v134;
      _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v56, 0, 1, v131);
    }
  }
  else
  {
    uint64_t v63 = *(void *)(v58 - 8);
    if (v60)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v58);
      uint64_t v64 = sub_1000053D8(&qword_10016B420);
      memcpy(v56, v57, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v56, v57, v58);
    }
    uint64_t v61 = v134;
  }
  uint64_t v65 = *(int *)(v54 + 44);
  uint64_t v66 = &v49[v65];
  uint64_t v67 = &v50[v65];
  *(void *)uint64_t v66 = *(void *)&v50[v65];
  swift_bridgeObjectRelease();
  v66[8] = v67[8];
  uint64_t v68 = v133;
  if (v61 != v133)
  {
    uint64_t v69 = v39[7];
    uint64_t v70 = &v36[v69];
    uint64_t v71 = &v37[v69];
    sub_10010AD68((uint64_t)v70, (void (*)(void))type metadata accessor for ForecastEntry.Model);
    uint64_t v72 = type metadata accessor for ForecastEntry.Model(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for WeatherDataViewModel();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v84 = sub_10012BE90();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 32))(v70, v71, v84);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v74 = sub_100129330();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32))(v70, v71, v74);
        uint64_t v75 = type metadata accessor for InstantWeatherViewModel();
        uint64_t v76 = *(int *)(v75 + 20);
        uint64_t v77 = &v70[v76];
        uint64_t v78 = &v71[v76];
        uint64_t v79 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 32))(v77, v78, v79);
        uint64_t v80 = *(int *)(v75 + 24);
        uint64_t v81 = &v70[v80];
        uint64_t v82 = &v71[v80];
        uint64_t v83 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 32))(v81, v82, v83);
      }
      else
      {
        uint64_t v85 = sub_100129330();
        uint64_t v86 = *(void (**)(char *, char *))(*(void *)(v85 - 8) + 32);
        uint64_t v128 = v85;
        v86(v70, v71);
        uint64_t v87 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v88 = v87[5];
        uint64_t v89 = &v70[v88];
        uint64_t v90 = &v71[v88];
        uint64_t v91 = sub_10012A6B0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32))(v89, v90, v91);
        uint64_t v92 = v87[6];
        uint64_t v93 = &v70[v92];
        uint64_t v94 = &v71[v92];
        uint64_t v95 = sub_10012C250();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v95 - 8) + 32))(v93, v94, v95);
        *(void *)&v70[v87[7]] = *(void *)&v71[v87[7]];
        *(void *)&v70[v87[8]] = *(void *)&v71[v87[8]];
        uint64_t v96 = v87[9];
        uint64_t v97 = &v70[v96];
        uint64_t v98 = &v71[v96];
        uint64_t v99 = (int *)type metadata accessor for AirQualityViewModel();
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v98, 1, (uint64_t)v99))
        {
          uint64_t v100 = sub_1000053D8(&qword_10016B428);
          memcpy(v97, v98, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v86)(v97, v98, v128);
          (*(void (**)(char *, char *, uint64_t))(v129 + 32))(&v97[v99[5]], &v98[v99[5]], v130);
          *(void *)&v97[v99[6]] = *(void *)&v98[v99[6]];
          uint64_t v101 = v99[7];
          uint64_t v102 = (uint64_t)v97;
          uint64_t v103 = &v97[v101];
          uint64_t v104 = &v98[v101];
          uint64_t v105 = sub_100129B70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 32))(v103, v104, v105);
          uint64_t v106 = v99[8];
          uint64_t v107 = v102 + v106;
          uint64_t v108 = &v98[v106];
          uint64_t v109 = sub_100129C50();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v109 - 8) + 32))(v107, v108, v109);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v102, 0, 1, (uint64_t)v99);
        }
        uint64_t v110 = v87[10];
        unsigned __int8 v111 = &v70[v110];
        uint64_t v112 = &v71[v110];
        uint64_t v113 = sub_10012C6B0();
        uint64_t v68 = v133;
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v112, 1, v113))
        {
          uint64_t v114 = sub_1000053D8(&qword_10016B430);
          memcpy(v111, v112, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 32))(v111, v112, v113);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v111, 0, 1, v113);
        }
        *(void *)&v70[v87[11]] = *(void *)&v71[v87[11]];
        uint64_t v115 = v87[12];
        uint64_t v116 = &v70[v115];
        uint64_t v117 = &v71[v115];
        *(void *)uint64_t v116 = *(void *)v117;
        *((_WORD *)v116 + 4) = *((_WORD *)v117 + 4);
        uint64_t v118 = v87[13];
        uint64_t v119 = &v70[v118];
        uint64_t v120 = &v71[v118];
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)&v71[v118], 1, v131))
        {
          uint64_t v121 = sub_1000053D8(&qword_10016B420);
          memcpy(v119, v120, *(void *)(*(void *)(v121 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 32))(v119, v120, v131);
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v119, 0, 1, v131);
        }
        uint64_t v122 = v87[14];
        uint64_t v123 = &v70[v122];
        uint64_t v124 = &v71[v122];
        uint64_t v125 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v124, 1, v125))
        {
          uint64_t v126 = sub_1000053D8(&qword_10016B438);
          memcpy(v123, v124, *(void *)(*(void *)(v126 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v123, v124, v130);
          swift_storeEnumTagMultiPayload();
          _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v123, 0, 1, v125);
        }
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
    }
  }
  v61[v132[11]] = v68[v132[11]];
  return v61;
}

uint64_t sub_100107DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100107E00);
}

uint64_t sub_100107E00(uint64_t a1, uint64_t a2, int *a3)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    sub_1000053D8(&qword_10016B9D0);
    sub_10000B3D0();
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v8 = v10;
      uint64_t v12 = a3[5];
    }
    else
    {
      if (a2 == 254)
      {
        unsigned int v13 = *(unsigned __int8 *)(a1 + a3[6] + 8);
        if (v13 > 1) {
          return (v13 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
      sub_1000053D8(&qword_10016C140);
      sub_10000B3D0();
      if (*(_DWORD *)(v16 + 84) == a2)
      {
        uint64_t v8 = v15;
        uint64_t v12 = a3[7];
      }
      else
      {
        sub_1000053D8(&qword_10016B0B0);
        sub_10000B3D0();
        if (*(_DWORD *)(v18 + 84) == a2)
        {
          uint64_t v8 = v17;
          uint64_t v12 = a3[8];
        }
        else
        {
          uint64_t v8 = type metadata accessor for ForecastEntry(0);
          uint64_t v12 = a3[10];
        }
      }
    }
    uint64_t v9 = a1 + v12;
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
}

uint64_t sub_100107F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100107F3C);
}

void sub_100107F3C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_1000053D8(&qword_10016B440);
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_1000053D8(&qword_10016B9D0);
    sub_10000B3D0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(unsigned char *)(a1 + a4[6] + 8) = -(char)a2;
        return;
      }
      sub_1000053D8(&qword_10016C140);
      sub_10000B3D0();
      if (*(_DWORD *)(v16 + 84) == a3)
      {
        uint64_t v10 = v15;
        uint64_t v14 = a4[7];
      }
      else
      {
        sub_1000053D8(&qword_10016B0B0);
        sub_10000B3D0();
        if (*(_DWORD *)(v18 + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = a4[8];
        }
        else
        {
          uint64_t v10 = type metadata accessor for ForecastEntry(0);
          uint64_t v14 = a4[10];
        }
      }
    }
    uint64_t v11 = a1 + v14;
  }

  _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t type metadata accessor for SunriseSunsetContentView()
{
  uint64_t result = qword_100171700;
  if (!qword_100171700) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001080AC()
{
  sub_1001082A8(319, (unint64_t *)&qword_10016B4B0, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v0 <= 0x3F)
  {
    sub_1001082A8(319, (unint64_t *)&unk_10016C8F0, (void (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v1 <= 0x3F)
    {
      sub_1001082A8(319, (unint64_t *)&unk_10016C1B0, (void (*)(uint64_t))&type metadata accessor for Font.Context);
      if (v2 <= 0x3F)
      {
        sub_1001082A8(319, &qword_10016B130, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
        if (v3 <= 0x3F)
        {
          type metadata accessor for ForecastEntry(319);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_1001082A8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_10012AB90();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1001082FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100108318()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SunriseSunsetContentView();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v29 = (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - v5;
  uint64_t v7 = sub_10012C7F0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - v12;
  sub_10008F028((uint64_t)&v28 - v12);
  sub_10012C7D0();
  char v14 = sub_10012C7B0();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, v7);
  v15(v13, v7);
  if (v14) {
    goto LABEL_6;
  }
  sub_10008F028((uint64_t)v13);
  sub_10012C7C0();
  char v16 = sub_10012C7B0();
  v15(v11, v7);
  v15(v13, v7);
  sub_10010AD14(v1, (uint64_t)v6, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
  if (v16)
  {
    sub_10010AD68((uint64_t)v6, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
    uint64_t v17 = v29;
    sub_10010AD14(v1, v29, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
LABEL_5:
    sub_10010AD68(v17, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
    goto LABEL_6;
  }
  uint64_t v18 = &v6[*(int *)(v2 + 36)];
  uint64_t v19 = *(void *)v18;
  char v20 = v18[8];
  sub_10000886C(*(void *)v18, v20);
  char v21 = sub_10008F2A4(v19, v20);
  sub_100008BF8(v19, v20);
  sub_10010AD68((uint64_t)v6, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
  uint64_t v17 = v29;
  sub_10010AD14(v1, v29, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
  if (v21) {
    goto LABEL_5;
  }
  uint64_t v24 = v17 + *(int *)(v2 + 24);
  uint64_t v25 = *(void *)v24;
  char v26 = *(unsigned char *)(v24 + 8);
  sub_10000886C(*(void *)v24, v26);
  char v27 = sub_10008F2A4(v25, v26);
  sub_100008BF8(v25, v26);
  sub_10010AD68(v17, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
  if (v27)
  {
    sub_10012B5A0();
    goto LABEL_7;
  }
LABEL_6:
  sub_10012B5C0();
LABEL_7:
  uint64_t v22 = sub_10012B5D0();
  swift_release();
  return v22;
}

uint64_t sub_1001086A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001086A8(v1, a1);
}

uint64_t sub_1001086A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v166 = a2;
  uint64_t v164 = sub_1000053D8(&qword_100171750);
  __chkstk_darwin(v164);
  uint64_t v165 = (uint64_t)&v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = (uint64_t *)sub_1000053D8(&qword_10016E1F8);
  __chkstk_darwin(v155);
  uint64_t v145 = (uint64_t *)((char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v169 = sub_1000053D8(&qword_100171758);
  __chkstk_darwin(v169);
  char v147 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = sub_1000053D8(&qword_100171760);
  uint64_t v149 = *(void *)(v163 - 8);
  uint64_t v6 = __chkstk_darwin(v163);
  uint64_t v146 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v148 = (char *)&v121 - v8;
  uint64_t v161 = sub_1000053D8(&qword_100171768);
  __chkstk_darwin(v161);
  uint64_t v162 = (uint64_t)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10012C280();
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  v141 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_10012B140();
  uint64_t v156 = *(void *)(v157 - 8);
  uint64_t v11 = __chkstk_darwin(v157);
  uint64_t v144 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v138 = (char *)&v121 - v13;
  uint64_t v168 = sub_10012AB80();
  uint64_t v154 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v153 = (char *)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SunriseSunsetContentView();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v123 = (uint64_t)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v124 = (uint64_t)&v121 - v18;
  uint64_t v127 = sub_10012BB20();
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  char v150 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_1000053D8(&qword_100171770);
  __chkstk_darwin(v125);
  uint64_t v128 = (char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_1000053D8(&qword_100171778);
  __chkstk_darwin(v129);
  uint64_t v130 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_1000053D8(&qword_100171780);
  uint64_t v134 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v132 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_1000053D8(&qword_100171788);
  __chkstk_darwin(v131);
  uint64_t v133 = (char *)&v121 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_1000053D8(&qword_100171790);
  __chkstk_darwin(v137);
  uint64_t v139 = (uint64_t)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_1000053D8(&qword_100171798);
  uint64_t v25 = __chkstk_darwin(v160);
  uint64_t v136 = (char *)&v121 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v140 = (uint64_t)&v121 - v27;
  uint64_t v28 = sub_10012BE90();
  uint64_t v152 = *(void *)(v28 - 8);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v121 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v151 = (char *)&v121 - v32;
  uint64_t v33 = sub_10012C450();
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v121 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = sub_1000053D8(&qword_1001717A0);
  __chkstk_darwin(v159);
  uint64_t v158 = (char *)&v121 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10012C800();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v121 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v121 - v42;
  sub_10008F554((uint64_t)&v121 - v42);
  if ((*(unsigned int (**)(char *, uint64_t))(v38 + 88))(v43, v37) == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_10002C114((uint64_t)v35);
    int v44 = _s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v35, 2, v28);
    uint64_t v167 = a1;
    if (v44)
    {
      sub_100109D70(&v174);
      uint64_t v151 = v174;
      char v150 = (char *)v175;
      LODWORD(v143) = v176;
      uint64_t v45 = v177;
      uint64_t v46 = v178;
      uint64_t v47 = v179;
      uint64_t v48 = v180;
      uint64_t v49 = v181;
      uint64_t v152 = v182;
      uint64_t v50 = v183;
      uint64_t v51 = v154;
      uint64_t v52 = v153;
      uint64_t v53 = v168;
      (*(void (**)(char *, void, uint64_t))(v154 + 104))(v153, enum case for ColorScheme.dark(_:), v168);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v55 = v145;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))((char *)v145 + *((int *)v155 + 7), v52, v53);
      uint64_t *v55 = KeyPath;
      uint64_t v56 = (uint64_t)v147;
      sub_10000B114((uint64_t)v55, (uint64_t)&v147[*(int *)(v169 + 36)], &qword_10016E1F8);
      uint64_t v57 = (uint64_t)v151;
      uint64_t v58 = (uint64_t)v150;
      *(void *)uint64_t v56 = v151;
      *(void *)(v56 + 8) = v58;
      char v59 = v143;
      *(unsigned char *)(v56 + 16) = v143;
      *(void *)(v56 + 24) = v45;
      *(void *)(v56 + 32) = v46;
      *(void *)(v56 + 40) = v47;
      *(void *)(v56 + 48) = v48;
      uint64_t v60 = v152;
      *(void *)(v56 + 56) = v49;
      *(void *)(v56 + 64) = v60;
      *(void *)(v56 + 72) = v50;
      sub_10000B0B0(v57, v58, v59);
      swift_bridgeObjectRetain();
      sub_10002BDA4(v46, v47, v48, v49);
      swift_retain();
      sub_1000235F8((uint64_t)v55, &qword_10016E1F8);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v168);
      sub_1000579CC((uint64_t)&v174);
      uint64_t v61 = v144;
      uint64_t v62 = sub_10012B130();
      __chkstk_darwin(v62);
      sub_10012B7A0();
      uint64_t v63 = type metadata accessor for BackgroundView(0);
      uint64_t v64 = sub_10010A7D8(&qword_1001717A8, &qword_100171758, (void (*)(void))sub_10010A520);
      uint64_t v120 = sub_10010ADC4(&qword_10016C978, (void (*)(uint64_t))type metadata accessor for BackgroundView);
      uint64_t v65 = v146;
      uint64_t v66 = v169;
      sub_10012B510();
      (*(void (**)(char *, uint64_t))(v156 + 8))(v61, v157);
      sub_1000235F8(v56, &qword_100171758);
      uint64_t v67 = v149;
      uint64_t v68 = v148;
      uint64_t v69 = v163;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v148, v65, v163);
      (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v162, v68, v69);
      swift_storeEnumTagMultiPayload();
      sub_10010A56C();
      uint64_t v170 = v66;
      uint64_t v171 = v63;
      uint64_t v172 = v64;
      uint64_t v173 = v120;
      swift_getOpaqueTypeConformance2();
      uint64_t v70 = (uint64_t)v158;
      sub_10012B0E0();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
LABEL_12:
      sub_10000B114(v70, v165, &qword_1001717A0);
      swift_storeEnumTagMultiPayload();
      sub_10010A964();
      sub_10012B0E0();
      return sub_1000235F8(v70, &qword_1001717A0);
    }
    uint64_t v71 = v152;
    uint64_t v72 = v151;
    (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v151, v35, v28);
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v31, v72, v28);
    sub_10012BB10();
    uint64_t v73 = a1 + *(int *)(v15 + 24);
    uint64_t v74 = *(void *)v73;
    uint64_t v149 = v73;
    char v75 = *(unsigned char *)(v73 + 8);
    sub_10000886C(v74, v75);
    char v76 = sub_10008F2A4(v74, v75);
    sub_100008BF8(v74, v75);
    uint64_t v77 = v124;
    sub_10010AD14(a1, v124, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
    uint64_t v122 = v28;
    if (v76)
    {
      uint64_t v78 = *(int *)(v15 + 40);
      uint64_t v79 = v78 + *(int *)(type metadata accessor for ForecastEntry(0) + 24);
      LOBYTE(v79) = *(unsigned char *)(v77 + v79 + *(int *)(type metadata accessor for WidgetContext() + 44) + 8);
      sub_10010AD68(v77, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
      uint64_t v80 = v168;
      uint64_t v81 = v154;
      uint64_t v82 = v153;
      uint64_t v83 = (uint64_t)v128;
      uint64_t v84 = v127;
      uint64_t v85 = v126;
      if (v79)
      {
        sub_10012B5A0();
        uint64_t v86 = sub_10012B5D0();
        swift_release();
LABEL_9:
        uint64_t v87 = v155;
        uint64_t v88 = v150;
        (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v83, v150, v84);
        uint64_t v89 = v83 + *(int *)(v125 + 36);
        *(void *)uint64_t v89 = v86;
        *(_OWORD *)(v89 + 8) = xmmword_100130E40;
        *(void *)(v89 + 24) = 0x4000000000000000;
        (*(void (**)(char *, uint64_t))(v85 + 8))(v88, v84);
        (*(void (**)(char *, void, uint64_t))(v81 + 104))(v82, enum case for ColorScheme.dark(_:), v80);
        uint64_t v90 = swift_getKeyPath();
        uint64_t v91 = (uint64_t)v130;
        uint64_t v92 = (uint64_t *)&v130[*(int *)(v129 + 36)];
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))((char *)v92 + *((int *)v87 + 7), v82, v80);
        *uint64_t v92 = v90;
        sub_10000B114(v83, v91, &qword_100171770);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v80);
        sub_1000235F8(v83, &qword_100171770);
        uint64_t v93 = v138;
        uint64_t v94 = sub_10012B130();
        uint64_t v155 = &v121;
        __chkstk_darwin(v94);
        sub_10012B7A0();
        uint64_t v95 = type metadata accessor for BackgroundView(0);
        sub_10010A7D8(&qword_1001717D8, &qword_100171778, (void (*)(void))sub_10010A868);
        uint64_t v168 = sub_10010ADC4(&qword_10016C978, (void (*)(uint64_t))type metadata accessor for BackgroundView);
        uint64_t v96 = v132;
        unint64_t v97 = v95;
        sub_10012B510();
        (*(void (**)(char *, uint64_t))(v156 + 8))(v93, v157);
        sub_1000235F8(v91, &qword_100171778);
        uint64_t v98 = swift_getKeyPath();
        uint64_t v99 = *(void *)v149;
        LOBYTE(v87) = *(unsigned char *)(v149 + 8);
        sub_10000886C(*(void *)v149, (char)v87);
        LOBYTE(v95) = sub_10008F2A4(v99, (char)v87);
        sub_100008BF8(v99, (char)v87);
        uint64_t v100 = v142;
        uint64_t v101 = (unsigned int *)&enum case for SunriseSunsetBackgroundStyle.opaque(_:);
        if ((v95 & 1) == 0) {
          uint64_t v101 = (unsigned int *)&enum case for SunriseSunsetBackgroundStyle.transparent(_:);
        }
        uint64_t v102 = v141;
        uint64_t v103 = v143;
        (*(void (**)(char *, void, uint64_t))(v142 + 104))(v141, *v101, v143);
        uint64_t v104 = (uint64_t)v133;
        uint64_t v105 = (uint64_t *)&v133[*(int *)(v131 + 36)];
        uint64_t v106 = sub_1000053D8(&qword_1001717F8);
        (*(void (**)(char *, char *, uint64_t))(v100 + 16))((char *)v105 + *(int *)(v106 + 28), v102, v103);
        uint64_t *v105 = v98;
        uint64_t v107 = v134;
        uint64_t v108 = v135;
        (*(void (**)(uint64_t, char *, uint64_t))(v134 + 16))(v104, v96, v135);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v103);
        (*(void (**)(char *, uint64_t))(v107 + 8))(v96, v108);
        uint64_t v109 = swift_getKeyPath();
        uint64_t v110 = sub_100108318();
        uint64_t v111 = v139;
        sub_10000B114(v104, v139, &qword_100171788);
        uint64_t v112 = (uint64_t *)(v111 + *(int *)(v137 + 36));
        *uint64_t v112 = v109;
        v112[1] = v110;
        sub_1000235F8(v104, &qword_100171788);
        sub_1000053D8(&qword_10016C880);
        uint64_t v113 = swift_allocObject();
        *(_OWORD *)(v113 + 16) = xmmword_100130010;
        uint64_t v114 = v151;
        *(void *)(v113 + 32) = sub_10012BE70();
        *(void *)(v113 + 40) = v115;
        sub_10010A618();
        sub_10000822C();
        uint64_t v116 = (uint64_t)v136;
        sub_10012B530();
        swift_bridgeObjectRelease();
        sub_1000235F8(v111, &qword_100171790);
        uint64_t v117 = v140;
        sub_10010AB24(v116, v140);
        sub_10000B114(v117, v162, &qword_100171798);
        swift_storeEnumTagMultiPayload();
        sub_10010A56C();
        uint64_t v118 = sub_10010A7D8(&qword_1001717A8, &qword_100171758, (void (*)(void))sub_10010A520);
        uint64_t v174 = (char *)v169;
        unint64_t v175 = v97;
        uint64_t v176 = v118;
        uint64_t v177 = v168;
        swift_getOpaqueTypeConformance2();
        uint64_t v70 = (uint64_t)v158;
        sub_10012B0E0();
        sub_1000235F8(v117, &qword_100171798);
        (*(void (**)(char *, uint64_t))(v152 + 8))(v114, v122);
        goto LABEL_12;
      }
    }
    else
    {
      sub_10010AD68(v77, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
      uint64_t v80 = v168;
      uint64_t v81 = v154;
      uint64_t v82 = v153;
      uint64_t v83 = (uint64_t)v128;
      uint64_t v84 = v127;
      uint64_t v85 = v126;
    }
    uint64_t v86 = sub_10012B5B0();
    goto LABEL_9;
  }
  sub_10010AD14(a1, v123, (void (*)(void))type metadata accessor for SunriseSunsetContentView);
  uint64_t v174 = 0;
  unint64_t v175 = 0xE000000000000000;
  sub_10012CFD0(62);
  v184._countAndFlagsBits = 0xD000000000000022;
  v184._object = (void *)0x8000000100138E20;
  sub_10012CAF0(v184);
  sub_10008F554((uint64_t)v41);
  sub_10010ADC4(&qword_10016B508, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
  v185._countAndFlagsBits = sub_10012D1D0();
  sub_10012CAF0(v185);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v37);
  v186._object = (void *)0x800000010013CB50;
  v186._countAndFlagsBits = 0xD00000000000001ALL;
  sub_10012CAF0(v186);
  uint64_t result = sub_10012D070();
  __break(1u);
  return result;
}

uint64_t sub_100109D44()
{
  return sub_10012ACD0();
}

void *sub_100109D70@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v28 = a1;
  uint64_t v3 = sub_10012B2D0();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10012AFE0();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10012C800();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ForecastEntry.Model(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (unsigned __int8 *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (int *)type metadata accessor for SunriseSunsetContentView();
  uint64_t v16 = v2 + v15[10];
  uint64_t v17 = type metadata accessor for ForecastEntry(0);
  sub_10010AD14(v16 + *(int *)(v17 + 28), (uint64_t)v14, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10010AD68((uint64_t)v14, (void (*)(void))type metadata accessor for ForecastEntry.Model);
    unsigned __int8 v18 = 2;
  }
  else
  {
    unsigned __int8 v18 = *v14;
  }
  sub_10008F554((uint64_t)v11);
  sub_10008F5C4((uint64_t)v8);
  uint64_t v19 = v2 + v15[6];
  uint64_t v20 = *(void *)v19;
  char v21 = *(unsigned char *)(v19 + 8);
  char v22 = *(unsigned char *)(v2 + v15[11]);
  sub_10000886C(*(void *)v19, v21);
  char v23 = sub_10008F2A4(v20, v21);
  sub_100008BF8(v20, v21);
  type metadata accessor for ErrorViewAttributesFactory();
  swift_allocObject();
  sub_1000A67D4((uint64_t)v11, (uint64_t)v8, v22, v23 & 1);
  sub_10008F590((uint64_t)v5);
  sub_1000A6524(v18, (uint64_t)__src);
  swift_release();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v27);
  return memcpy(v28, __src, 0x50uLL);
}

uint64_t sub_10010A060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ForecastEntry.Model(0);
  sub_10000B3FC();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for BackgroundView(0);
  sub_10000B3FC();
  __chkstk_darwin(v9);
  sub_10005C778();
  uint64_t v10 = a1 + *(int *)(type metadata accessor for SunriseSunsetContentView() + 40);
  uint64_t v11 = type metadata accessor for ForecastEntry(0);
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = (uint64_t *)(v10 + v12 + *(int *)(type metadata accessor for WidgetContext() + 44));
  uint64_t v14 = *v13;
  char v15 = *((unsigned char *)v13 + 8);
  uint64_t v16 = v2 + v8[5];
  sub_10010AD14(v10 + *(int *)(v11 + 28), (uint64_t)v7, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10010AB94((uint64_t)v7, v16, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
  uint64_t v18 = type metadata accessor for WeatherDataViewModel();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v16, v17, 1, v18);
  *(void *)uint64_t v2 = v14;
  *(unsigned char *)(v2 + 8) = v15;
  uint64_t v19 = (uint64_t *)(v2 + v8[6]);
  *uint64_t v19 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B080);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = v2 + v8[7];
  *(void *)uint64_t v20 = swift_getKeyPath();
  *(unsigned char *)(v20 + 8) = 0;
  sub_10010AB94(v2, a2, (void (*)(void))type metadata accessor for BackgroundView);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10010A264@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ErrorView();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  sub_10005C778();
  memcpy(v1, v1, 0x50uLL);
  uint64_t v5 = (uint64_t *)&v1[*(int *)(v4 + 28)];
  *uint64_t v5 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B080);
  swift_storeEnumTagMultiPayload();
  sub_10008F7E0((uint64_t)v1);
  char v6 = sub_10012B1A0();
  sub_10010AD14((uint64_t)v1, a1, (void (*)(void))type metadata accessor for ErrorView);
  uint64_t v7 = a1 + *(int *)(sub_1000053D8(&qword_10016CD98) + 36);
  *(unsigned char *)uint64_t v7 = v6;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(unsigned char *)(v7 + 40) = 1;
  return sub_10010AD68((uint64_t)v1, (void (*)(void))type metadata accessor for ErrorView);
}

uint64_t sub_10010A388@<X0>(uint64_t a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_10010A264(a1);
}

uint64_t sub_10010A3D0()
{
  return sub_10012AD10();
}

uint64_t sub_10010A3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_10010A4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10010A3F4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_10010A504@<X0>(uint64_t a1@<X8>)
{
  return sub_10010A060(*(void *)(v1 + 16), a1);
}

unint64_t sub_10010A520()
{
  unint64_t result = qword_1001717B0;
  if (!qword_1001717B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001717B0);
  }
  return result;
}

unint64_t sub_10010A56C()
{
  unint64_t result = qword_1001717C0;
  if (!qword_1001717C0)
  {
    sub_100005470(&qword_100171798);
    sub_10010A618();
    sub_10010ADC4((unint64_t *)&qword_10016BEC8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001717C0);
  }
  return result;
}

unint64_t sub_10010A618()
{
  unint64_t result = qword_1001717C8;
  if (!qword_1001717C8)
  {
    sub_100005470(&qword_100171790);
    sub_10010A6A4();
    sub_10010A914(&qword_100171800, &qword_100171808);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001717C8);
  }
  return result;
}

unint64_t sub_10010A6A4()
{
  unint64_t result = qword_1001717D0;
  if (!qword_1001717D0)
  {
    sub_100005470(&qword_100171788);
    sub_100005470(&qword_100171778);
    type metadata accessor for BackgroundView(255);
    sub_10010A7D8(&qword_1001717D8, &qword_100171778, (void (*)(void))sub_10010A868);
    sub_10010ADC4(&qword_10016C978, (void (*)(uint64_t))type metadata accessor for BackgroundView);
    swift_getOpaqueTypeConformance2();
    sub_10010A914(&qword_1001717F0, &qword_1001717F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001717D0);
  }
  return result;
}

uint64_t sub_10010A7D8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100005470(a2);
    a3();
    sub_10010A914(&qword_1001717B8, &qword_10016E1F8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010A868()
{
  unint64_t result = qword_1001717E0;
  if (!qword_1001717E0)
  {
    sub_100005470(&qword_100171770);
    sub_10010ADC4(&qword_1001717E8, (void (*)(uint64_t))&type metadata accessor for SunriseSunsetView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001717E0);
  }
  return result;
}

uint64_t sub_10010A914(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100005470(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010A964()
{
  unint64_t result = qword_100171810;
  if (!qword_100171810)
  {
    sub_100005470(&qword_1001717A0);
    sub_10010A56C();
    sub_100005470(&qword_100171758);
    type metadata accessor for BackgroundView(255);
    sub_10010A7D8(&qword_1001717A8, &qword_100171758, (void (*)(void))sub_10010A520);
    sub_10010ADC4(&qword_10016C978, (void (*)(uint64_t))type metadata accessor for BackgroundView);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171810);
  }
  return result;
}

uint64_t sub_10010AA90()
{
  return sub_10012ACE0();
}

uint64_t sub_10010AAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10010A3F4(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for SunriseSunsetBackgroundStyle, (uint64_t (*)(char *))&EnvironmentValues.sunriseSunsetBackgroundStyle.setter);
}

uint64_t sub_10010AAF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10012ACC0();
  *a1 = result;
  return result;
}

uint64_t sub_10010AB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_100171798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010AB94(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for SunriseSunsetContentView.GenericErrorView()
{
  return &type metadata for SunriseSunsetContentView.GenericErrorView;
}

unint64_t sub_10010AC08()
{
  unint64_t result = qword_100171818;
  if (!qword_100171818)
  {
    sub_100005470(&qword_100171820);
    sub_10010AC7C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171818);
  }
  return result;
}

unint64_t sub_10010AC7C()
{
  unint64_t result = qword_100171828;
  if (!qword_100171828)
  {
    sub_100005470(&qword_100171830);
    sub_10010A964();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171828);
  }
  return result;
}

uint64_t sub_10010ACF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010AD14(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  uint64_t v4 = sub_10000B430();
  v5(v4);
  return a2;
}

uint64_t sub_10010AD68(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3FC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10010ADC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010AE10()
{
  return 0xD000000000000028;
}

ValueMetadata *type metadata accessor for SunComplicationWidget()
{
  return &type metadata for SunComplicationWidget;
}

uint64_t sub_10010AE3C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010AE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_100171838);
  sub_10000DB98();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v10 = v9 - v8;
  sub_1000053D8(&qword_100171840);
  sub_10000DB98();
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  __chkstk_darwin(v11);
  sub_10000DC50();
  uint64_t v15 = v14 - v13;
  sub_1000053D8(&qword_100171848);
  sub_10000DB98();
  uint64_t v42 = v16;
  uint64_t v43 = v17;
  __chkstk_darwin(v16);
  sub_10000DC50();
  uint64_t v39 = v19 - v18;
  type metadata accessor for WeatherTimelineProvider();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  sub_100118DBC(64, a1, a2);
  type metadata accessor for SunEventsContentView();
  sub_10010B430(&qword_100171850, (void (*)(uint64_t))type metadata accessor for SunEventsContentView);
  sub_10010B430(&qword_10016BDB8, (void (*)(uint64_t))type metadata accessor for WeatherTimelineProvider);
  sub_10012C890();
  sub_10012AF80();
  uint64_t v20 = sub_10012B400();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  sub_10010B478();
  sub_10012B0B0();
  sub_100008278(v20, v22, v24);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  sub_10012AF80();
  uint64_t v25 = sub_10012B400();
  uint64_t v27 = v26;
  LOBYTE(v22) = v28 & 1;
  swift_getOpaqueTypeConformance2();
  sub_10012B070();
  sub_100008278(v25, v27, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v15, v40);
  sub_1000053D8(&qword_10016B9C8);
  uint64_t v29 = sub_10012C800();
  sub_10000DB98();
  uint64_t v31 = v30;
  uint64_t v33 = *(void *)(v32 + 72);
  unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_100130850;
  unint64_t v36 = v35 + v34;
  uint64_t v37 = *(void (**)(unint64_t, void, uint64_t))(v31 + 104);
  v37(v36, enum case for WidgetFamily.accessoryCircular(_:), v29);
  v37(v36 + v33, enum case for WidgetFamily.accessoryInline(_:), v29);
  swift_getOpaqueTypeConformance2();
  sub_10012B090();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v39, v42);
}

uint64_t sub_10010B334@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024484(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B410);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = type metadata accessor for SunEventsContentView();
  return sub_100024560((uint64_t)v6, (uint64_t)a2 + *(int *)(v7 + 20));
}

unint64_t sub_10010B3F8@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_10010AE10();
  *a1 = 0xD000000000000028;
  a1[1] = v3;
  return result;
}

uint64_t sub_10010B428()
{
  return sub_10010AE58(*v0, v0[1]);
}

uint64_t sub_10010B430(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010B478()
{
  unint64_t result = qword_100171858;
  if (!qword_100171858)
  {
    sub_100005470(&qword_100171838);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171858);
  }
  return result;
}

uint64_t sub_10010B4D0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10010B59C()
{
  return 0xD000000000000026;
}

ValueMetadata *type metadata accessor for UVIndexComplicationWidget()
{
  return &type metadata for UVIndexComplicationWidget;
}

uint64_t sub_10010B5C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010B5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_100171860);
  sub_10000DB98();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v10 = v9 - v8;
  sub_1000053D8(&qword_100171868);
  sub_10000DB98();
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  __chkstk_darwin(v11);
  sub_10000DC50();
  uint64_t v15 = v14 - v13;
  sub_1000053D8(&qword_100171870);
  sub_10000DB98();
  uint64_t v42 = v16;
  uint64_t v43 = v17;
  __chkstk_darwin(v16);
  sub_10000DC50();
  uint64_t v39 = v19 - v18;
  type metadata accessor for WeatherTimelineProvider();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  sub_100118DBC(0, a1, a2);
  type metadata accessor for UVIndexContentView();
  sub_10010BBB4(&qword_100171878, (void (*)(uint64_t))type metadata accessor for UVIndexContentView);
  sub_10010BBB4(&qword_10016BDB8, (void (*)(uint64_t))type metadata accessor for WeatherTimelineProvider);
  sub_10012C890();
  sub_10012AF80();
  uint64_t v20 = sub_10012B400();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  sub_10010BBFC();
  sub_10012B0B0();
  sub_100008278(v20, v22, v24);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  sub_10012AF80();
  uint64_t v25 = sub_10012B400();
  uint64_t v27 = v26;
  LOBYTE(v22) = v28 & 1;
  swift_getOpaqueTypeConformance2();
  sub_10012B070();
  sub_100008278(v25, v27, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v15, v40);
  sub_1000053D8(&qword_10016B9C8);
  uint64_t v29 = sub_10012C800();
  sub_10000DB98();
  uint64_t v31 = v30;
  uint64_t v33 = *(void *)(v32 + 72);
  unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_100130850;
  unint64_t v36 = v35 + v34;
  uint64_t v37 = *(void (**)(unint64_t, void, uint64_t))(v31 + 104);
  v37(v36, enum case for WidgetFamily.accessoryCircular(_:), v29);
  v37(v36 + v33, enum case for WidgetFamily.accessoryInline(_:), v29);
  swift_getOpaqueTypeConformance2();
  sub_10012B090();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v39, v42);
}

uint64_t sub_10010BAB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024484(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B410);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = type metadata accessor for UVIndexContentView();
  return sub_100024560((uint64_t)v6, (uint64_t)a2 + *(int *)(v7 + 20));
}

unint64_t sub_10010BB7C@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_10010B59C();
  *a1 = 0xD000000000000026;
  a1[1] = v3;
  return result;
}

uint64_t sub_10010BBAC()
{
  return sub_10010B5E4(*v0, v0[1]);
}

uint64_t sub_10010BBB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010BBFC()
{
  unint64_t result = qword_100171880;
  if (!qword_100171880)
  {
    sub_100005470(&qword_100171860);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171880);
  }
  return result;
}

uint64_t sub_10010BC54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010BD20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v107 = a1;
  uint64_t v2 = type metadata accessor for InstantWeatherViewModel();
  sub_10000B3FC();
  __chkstk_darwin(v3);
  sub_10000DC50();
  uint64_t v6 = v5 - v4;
  sub_10012C650();
  sub_10000DB98();
  uint64_t v105 = v8;
  uint64_t v106 = v7;
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v104 = v10 - v9;
  sub_100129E70();
  sub_10000DB98();
  uint64_t v102 = v12;
  uint64_t v103 = v11;
  __chkstk_darwin(v11);
  sub_10000DCB4();
  uint64_t v98 = v13;
  __chkstk_darwin(v14);
  uint64_t v99 = &v93[-v15];
  sub_100129480();
  sub_10000DB98();
  uint64_t v100 = v17;
  uint64_t v101 = v16;
  __chkstk_darwin(v16);
  sub_10000DCB4();
  uint64_t v96 = v18;
  __chkstk_darwin(v19);
  unint64_t v97 = &v93[-v20];
  uint64_t v21 = type metadata accessor for AggregateWeatherViewModel(0);
  sub_10000B3FC();
  __chkstk_darwin(v22);
  sub_10000DC50();
  uint64_t v25 = v24 - v23;
  type metadata accessor for WeatherDataViewModel();
  sub_10000B3FC();
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = &v93[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v27);
  uint64_t v31 = &v93[-v30];
  type metadata accessor for ForecastEntry.Model(0);
  sub_10000B3FC();
  __chkstk_darwin(v32);
  sub_10000DC50();
  uint64_t v35 = (unsigned char *)(v34 - v33);
  uint64_t v36 = type metadata accessor for ForecastEntry(0);
  sub_100012588(v1 + *(int *)(v36 + 28), (uint64_t)v35, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v61 = v107;
    if (*v35) {
      uint64_t v62 = 1;
    }
    else {
      uint64_t v62 = 2;
    }
    uint64_t v63 = v106;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v61, v62, 2, v63);
  }
  sub_100047B60((uint64_t)v35, (uint64_t)v31, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  sub_100012588((uint64_t)v31, (uint64_t)v29, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_100047B60((uint64_t)v29, v25, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v95 = v31;
    uint64_t v64 = sub_10012AB60();
    sub_10000D7A4(v64, (uint64_t)qword_100181C40);
    uint64_t v65 = (void *)sub_10012AB40();
    os_log_type_t v66 = sub_10012CD60();
    if (sub_10000DC00(v66))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_10000DBE0((void *)&_mh_execute_header, v67, v68, "Making UltraViolet complication view model entry from aggregate weather");
      swift_slowDealloc();
    }

    sub_10012A670();
    uint64_t v69 = sub_10012A5C0();
    uint64_t v71 = v70;
    int v72 = 1;
    if (v69 != sub_10012A5C0() || v71 != v73) {
      int v72 = sub_10012D1F0();
    }
    int v94 = v72;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10012A6A0();
    uint64_t v49 = v25 + *(int *)(v21 + 24);
    char v75 = v99;
    sub_10012C210();
    uint64_t v76 = sub_10010C4E8();
    v77(v76);
    uint64_t v79 = v102;
    uint64_t v78 = v103;
    uint64_t v80 = sub_10010C540();
    v81(v80);
    sub_10010C510();
    (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v75, v78);
    uint64_t v82 = sub_10010C560();
    v83(v82);
    char v59 = (void (*)(void))type metadata accessor for AggregateWeatherViewModel;
    uint64_t v60 = v25;
    goto LABEL_28;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_100047B60((uint64_t)v29, v6, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v95 = v31;
    uint64_t v38 = sub_10012AB60();
    os_log_type_t v39 = sub_10000D7A4(v38, (uint64_t)qword_100181C40);
    uint64_t v40 = sub_10012AB40();
    os_log_type_t v41 = sub_10012CD60();
    if (sub_10000DC00(v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v39, "Making UltraViolet complication view model entry from interpolated instant weather", v42, 2u);
      swift_slowDealloc();
    }

    sub_10012A670();
    uint64_t v43 = sub_10012A5C0();
    uint64_t v45 = v44;
    int v46 = 1;
    if (v43 != sub_10012A5C0() || v45 != v47) {
      int v46 = sub_10012D1F0();
    }
    int v94 = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10012A6A0();
    uint64_t v49 = v6 + *(int *)(v2 + 24);
    uint64_t v50 = v99;
    sub_10012C210();
    uint64_t v51 = sub_10010C4E8();
    v52(v51);
    uint64_t v54 = v102;
    uint64_t v53 = v103;
    uint64_t v55 = sub_10010C540();
    v56(v55);
    sub_10010C510();
    (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v50, v53);
    uint64_t v57 = sub_10010C560();
    v58(v57);
    char v59 = (void (*)(void))type metadata accessor for InstantWeatherViewModel;
    uint64_t v60 = v6;
LABEL_28:
    sub_100047BC0(v60, v59);
    sub_100047BC0((uint64_t)v95, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v84 = v107;
    uint64_t v85 = v49;
    uint64_t v86 = v106;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 32))(v107, v85, v106);
    uint64_t v61 = v84;
    uint64_t v62 = 0;
    uint64_t v63 = v86;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v61, v62, 2, v63);
  }
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v88 = sub_10012AB60();
  sub_10000D7A4(v88, (uint64_t)qword_100181C40);
  uint64_t v89 = (void *)sub_10012AB40();
  os_log_type_t v90 = sub_10012CD40();
  if (sub_10000DC00(v90))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_10000DBE0((void *)&_mh_execute_header, v91, v92, "Expected aggregate weather or instant but got sunrise/sunset");
    swift_slowDealloc();
  }

  sub_100047BC0((uint64_t)v31, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v107, 1, 2, v106);
  return sub_100047BC0((uint64_t)v29, (void (*)(void))type metadata accessor for WeatherDataViewModel);
}

uint64_t sub_10010C4E8()
{
  return *(void *)(v0 - 176);
}

uint64_t sub_10010C510()
{
  uint64_t v4 = *(_DWORD *)(v2 - 188) & 1;
  return UltravioletComplicationViewModel.init(localWeather:timeZone:current:daily:hourly:)(v4, v0, v1, 0, 0);
}

uint64_t sub_10010C540()
{
  return *(void *)(v0 - 160);
}

uint64_t sub_10010C560()
{
  return v0;
}

uint64_t sub_10010C578()
{
  uint64_t v0 = sub_10012A0B0();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10000DC50();
  uint64_t v6 = v5 - v4;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v5 - v4, enum case for WidgetNames.Forecast(_:), v0);
  uint64_t v7 = sub_10012A0A0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  return v7;
}

ValueMetadata *type metadata accessor for ForecastWidget()
{
  return &type metadata for ForecastWidget;
}

uint64_t sub_10010C654()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010C670(uint64_t a1, uint64_t a2)
{
  sub_1000053D8(&qword_100171888);
  sub_10000DB98();
  __chkstk_darwin(v4);
  sub_10000DC50();
  sub_1000053D8(&qword_100171890);
  sub_10000DB98();
  __chkstk_darwin(v5);
  sub_10000DC50();
  sub_1000053D8(&qword_100171898);
  sub_10000DB98();
  __chkstk_darwin(v6);
  sub_10000DBCC();
  sub_1000053D8(&qword_1001718A0);
  sub_10000DB98();
  __chkstk_darwin(v7);
  sub_10000DBCC();
  type metadata accessor for WeatherTimelineProvider();
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_100118DBC(65, a1, a2);
  type metadata accessor for WeatherIntent();
  type metadata accessor for WidgetContentView(0);
  sub_10010CF28(&qword_1001718A8, (void (*)(uint64_t))type metadata accessor for WidgetContentView);
  sub_10010CF28(&qword_10016B9B8, (void (*)(uint64_t))type metadata accessor for WeatherTimelineProvider);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10012C880();
  sub_10012AF80();
  uint64_t v8 = sub_10012B400();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  sub_10010CF70();
  sub_10012B0B0();
  sub_100008278(v8, v10, v12);
  swift_bridgeObjectRelease();
  sub_10000B424();
  v13();
  sub_1000053D8(&qword_10016B9C8);
  sub_10012C800();
  sub_10000DB98();
  uint64_t v15 = v14;
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100135C90;
  uint64_t v16 = *(void (**)(void))(v15 + 104);
  sub_10010D0B8();
  v16();
  sub_10010D0B8();
  v16();
  sub_10010D0B8();
  v16();
  swift_getOpaqueTypeConformance2();
  sub_10012B090();
  swift_bridgeObjectRelease();
  sub_10000B424();
  v17();
  sub_10012AF80();
  uint64_t v18 = sub_10012B400();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  swift_getOpaqueTypeConformance2();
  sub_10012B070();
  sub_100008278(v18, v20, v22);
  swift_bridgeObjectRelease();
  sub_10000B424();
  v23();
  swift_getOpaqueTypeConformance2();
  sub_10012B0D0();
  swift_release();
  sub_10000B424();
  return v24();
}

uint64_t sub_10010CC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000053D8(&qword_10016B9D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_1000053D8(&qword_10016B440);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (void *)((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v10 - 8);
  char v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024484(a1, (uint64_t)v12);
  *uint64_t v9 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B410);
  swift_storeEnumTagMultiPayload();
  *uint64_t v6 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B9D8);
  swift_storeEnumTagMultiPayload();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = (int *)type metadata accessor for WidgetContentView(0);
  *(void *)(a2 + v15[7]) = v14;
  sub_1000053D8(&qword_10016B9E0);
  swift_storeEnumTagMultiPayload();
  sub_1000244FC((uint64_t)v9, a2, &qword_10016B440);
  sub_1000244FC((uint64_t)v6, a2 + v15[5], &qword_10016B9D0);
  uint64_t v16 = a2 + v15[6];
  *(void *)uint64_t v16 = KeyPath;
  *(unsigned char *)(v16 + 8) = 0;
  sub_100024560((uint64_t)v12, a2 + v15[8]);
  uint64_t v17 = (void *)(a2 + v15[9]);
  type metadata accessor for CGRect(0);
  uint64_t v18 = sub_10012CBD0();
  *(void *)(v18 + 16) = 12;
  bzero((void *)(v18 + 32), 0x180uLL);
  v23[1] = v18;
  sub_1000053D8(&qword_10016B9E8);
  sub_10012B680();
  uint64_t v19 = v23[3];
  *uint64_t v17 = v23[2];
  v17[1] = v19;
  uint64_t v20 = v15[10];
  id v21 = [self mainScreen];
  [v21 bounds];

  uint64_t result = sub_100005130();
  *(unsigned char *)(a2 + v20) = result;
  return result;
}

uint64_t sub_10010CEF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10010C578();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10010CF20()
{
  return sub_10010C670(*v0, v0[1]);
}

uint64_t sub_10010CF28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010CF70()
{
  unint64_t result = qword_1001718B0;
  if (!qword_1001718B0)
  {
    sub_100005470(&qword_100171888);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001718B0);
  }
  return result;
}

uint64_t sub_10010CFD8()
{
  return sub_1000247D8();
}

ValueMetadata *type metadata accessor for PrivacyResetIdentifierControlWidget()
{
  return &type metadata for PrivacyResetIdentifierControlWidget;
}

uint64_t sub_10010D0D8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010D0F4()
{
  sub_1000053D8(&qword_1001718B8);
  sub_10000DB98();
  __chkstk_darwin(v0);
  sub_10000DC50();
  sub_1000053D8(&qword_1001718C0);
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_10000DC50();
  sub_1000053D8(&qword_1001718C8);
  sub_10000DB98();
  __chkstk_darwin(v2);
  sub_10000DC50();
  sub_1000053D8(&qword_1001718D0);
  sub_10000DB98();
  __chkstk_darwin(v3);
  sub_10000DC50();
  swift_getKeyPath();
  sub_1000FA678();
  sub_10012C840();
  sub_10012AF80();
  sub_10010D608();
  sub_10012B0A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000B424();
  v4();
  sub_10012AF80();
  swift_getOpaqueTypeConformance2();
  sub_10012B060();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000B424();
  v5();
  swift_getOpaqueTypeConformance2();
  sub_10012B0C0();
  sub_10000B424();
  v6();
  swift_getOpaqueTypeConformance2();
  sub_10012B080();
  sub_10000B424();
  return v7();
}

uint64_t sub_10010D4DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10010D510(a1);
}

uint64_t sub_10010D4F8@<X0>(uint64_t a1@<X8>)
{
  return sub_10010D510(a1);
}

uint64_t sub_10010D510@<X0>(uint64_t a1@<X8>)
{
  sub_10012AF80();
  uint64_t result = sub_10012B400();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10010D578@<X0>(uint64_t a1@<X8>)
{
  sub_10012AF80();
  uint64_t result = sub_10012B400();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

unint64_t sub_10010D608()
{
  unint64_t result = qword_1001718D8;
  if (!qword_1001718D8)
  {
    sub_100005470(&qword_1001718B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001718D8);
  }
  return result;
}

uint64_t sub_10010D65C()
{
  return sub_1000247D8();
}

uint64_t sub_10010D73C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v116 = a1;
  type metadata accessor for InstantWeatherViewModel();
  sub_10000B3FC();
  __chkstk_darwin(v2);
  sub_10000DBCC();
  uint64_t v97 = v3;
  uint64_t v4 = sub_1000053D8(&qword_1001718E0);
  __chkstk_darwin(v4 - 8);
  sub_10000DBCC();
  uint64_t v109 = v5;
  sub_10000DCA8();
  uint64_t v115 = sub_10012C010();
  sub_10000DB98();
  uint64_t v110 = v6;
  __chkstk_darwin(v7);
  sub_10000DBCC();
  uint64_t v114 = v8;
  sub_1000053D8(&qword_10016C060);
  sub_10000DB98();
  uint64_t v107 = v10;
  uint64_t v108 = v9;
  __chkstk_darwin(v9);
  sub_10000DCB4();
  uint64_t v101 = v11;
  __chkstk_darwin(v12);
  uint64_t v104 = &v92[-v13];
  sub_1000053D8(&qword_1001718E8);
  sub_10000DB98();
  uint64_t v105 = v15;
  uint64_t v106 = v14;
  __chkstk_darwin(v14);
  sub_10000DCB4();
  uint64_t v100 = v16;
  __chkstk_darwin(v17);
  uint64_t v112 = &v92[-v18];
  sub_10000DCA8();
  sub_100129E20();
  sub_10000DB98();
  uint64_t v102 = v20;
  uint64_t v103 = v19;
  __chkstk_darwin(v19);
  sub_10000DBCC();
  uint64_t v98 = v21;
  sub_10000DCA8();
  uint64_t v113 = sub_100129480();
  sub_10000DB98();
  uint64_t v99 = v22;
  __chkstk_darwin(v23);
  sub_10000DCB4();
  uint64_t v111 = v24;
  __chkstk_darwin(v25);
  uint64_t v27 = &v92[-v26];
  type metadata accessor for AggregateWeatherViewModel(0);
  sub_10000B3FC();
  __chkstk_darwin(v28);
  sub_10000DBCC();
  uint64_t v30 = v29;
  sub_10000DCA8();
  type metadata accessor for WeatherDataViewModel();
  sub_10000B3FC();
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v34 = &v92[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v32);
  uint64_t v36 = &v92[-v35];
  type metadata accessor for ForecastEntry.Model(0);
  sub_10000B3FC();
  __chkstk_darwin(v37);
  os_log_type_t v39 = &v92[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v40 = type metadata accessor for ForecastEntry(0);
  sub_100012588(v1 + *(int *)(v40 + 28), (uint64_t)v39, (void (*)(void))type metadata accessor for ForecastEntry.Model);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v65 = v116;
    if (*v39) {
      uint64_t v66 = 1;
    }
    else {
      uint64_t v66 = 2;
    }
    uint64_t v67 = v115;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v65, v66, 2, v67);
  }
  sub_100047B60((uint64_t)v39, (uint64_t)v36, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  sub_100012588((uint64_t)v36, (uint64_t)v34, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v96 = v36;
    sub_100047B60((uint64_t)v34, v30, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v68 = sub_10012AB60();
    sub_10000D7A4(v68, (uint64_t)qword_100181C40);
    uint64_t v69 = sub_10012AB40();
    os_log_type_t v70 = sub_10012CD60();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Making Wind complication view model entry from aggregate weather", v71, 2u);
      swift_slowDealloc();
    }

    sub_10012A670();
    uint64_t v72 = sub_10012A5C0();
    uint64_t v74 = v73;
    int v75 = 1;
    if (v72 != sub_10012A5C0() || v74 != v76) {
      int v75 = sub_10012D1F0();
    }
    int v93 = v75;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10012A6A0();
    uint64_t v95 = v27;
    uint64_t v78 = v98;
    sub_10012C200();
    sub_100129E10();
    LODWORD(v97) = sub_100129DF0();
    uint64_t v79 = v104;
    sub_100129E00();
    uint64_t v80 = v99;
    sub_1000999B4();
    v81();
    uint64_t v82 = sub_10012B990();
    sub_10010E17C(v82);
    uint64_t v83 = v105;
    uint64_t v84 = v106;
    sub_1000999B4();
    v85();
    uint64_t v86 = v107;
    uint64_t v94 = v30;
    uint64_t v87 = v108;
    sub_1000999B4();
    v88();
    sub_10010E160();
    sub_10012C000();
    (*(void (**)(unsigned char *, uint64_t))(v86 + 8))(v79, v87);
    (*(void (**)(unsigned char *, uint64_t))(v83 + 8))(v112, v84);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v78, v103);
    (*(void (**)(unsigned char *, uint64_t))(v80 + 8))(v95, v113);
    uint64_t v63 = (void (*)(void))type metadata accessor for AggregateWeatherViewModel;
    uint64_t v64 = v94;
    goto LABEL_28;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v96 = v36;
    sub_100047B60((uint64_t)v34, v97, (void (*)(void))type metadata accessor for InstantWeatherViewModel);
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v42 = sub_10012AB60();
    sub_10000D7A4(v42, (uint64_t)qword_100181C40);
    uint64_t v43 = sub_10012AB40();
    os_log_type_t v44 = sub_10012CD60();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Making Wind complication view model entry from interpolated instant weather", v45, 2u);
      swift_slowDealloc();
    }

    sub_10012A670();
    uint64_t v46 = sub_10012A5C0();
    uint64_t v48 = v47;
    int v49 = 1;
    if (v46 != sub_10012A5C0() || v48 != v50) {
      int v49 = sub_10012D1F0();
    }
    int v93 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v95 = v27;
    sub_10012A6A0();
    uint64_t v52 = v98;
    sub_10012C200();
    sub_100129E10();
    LODWORD(v94) = sub_100129DF0();
    uint64_t v53 = v104;
    sub_100129E00();
    uint64_t v54 = v99;
    sub_1000999B4();
    v55();
    uint64_t v56 = sub_10012B990();
    sub_10010E17C(v56);
    uint64_t v58 = v105;
    uint64_t v57 = v106;
    sub_1000999B4();
    v59();
    uint64_t v61 = v107;
    uint64_t v60 = v108;
    sub_1000999B4();
    v62();
    sub_10010E160();
    sub_10012C000();
    (*(void (**)(unsigned char *, uint64_t))(v61 + 8))(v53, v60);
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v112, v57);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v52, v103);
    (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v95, v113);
    uint64_t v63 = (void (*)(void))type metadata accessor for InstantWeatherViewModel;
    uint64_t v64 = v97;
LABEL_28:
    sub_100047BC0(v64, v63);
    sub_100047BC0((uint64_t)v96, (void (*)(void))type metadata accessor for WeatherDataViewModel);
    uint64_t v90 = v115;
    uint64_t v89 = v116;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(v116, v114, v115);
    uint64_t v65 = v89;
    uint64_t v66 = 0;
    uint64_t v67 = v90;
    return _s13WeatherWidget20WeatherDataViewModelOwst_0(v65, v66, 2, v67);
  }
  sub_100047BC0((uint64_t)v36, (void (*)(void))type metadata accessor for WeatherDataViewModel);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v116, 1, 2, v115);
  return sub_100047BC0((uint64_t)v34, (void (*)(void))type metadata accessor for WeatherDataViewModel);
}

uint64_t sub_10010E160()
{
  return *(_DWORD *)(v0 - 276) & 1;
}

uint64_t sub_10010E17C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 - 152);
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v4, 1, 1, a1);
}

void sub_10010E1A0()
{
  sub_100047278();
  sub_10012AFE0();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_100110B00();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v13 = sub_100110A98(v5, v6, v7, v8, v9, v10, v11, v12, v22);
  ((void (*)(char *))v0)(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v2 + 88);
  sub_100110AC4();
  int v15 = v14();
  int v16 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v15 != enum case for ContentSizeCategory.extraSmall(_:)
    && v15 != enum case for ContentSizeCategory.small(_:)
    && v15 != enum case for ContentSizeCategory.medium(_:)
    && v15 != enum case for ContentSizeCategory.large(_:)
    && v15 != enum case for ContentSizeCategory.extraLarge(_:)
    && v15 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    uint64_t v18 = sub_100110AE4();
    v19(v18);
  }
  sub_100110AD4();
  v0();
  sub_100110AC4();
  int v17 = v14();
  if (v17 != v16
    && v17 != enum case for ContentSizeCategory.small(_:)
    && v17 != enum case for ContentSizeCategory.medium(_:)
    && v17 != enum case for ContentSizeCategory.large(_:)
    && v17 != enum case for ContentSizeCategory.extraLarge(_:)
    && v17 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    uint64_t v20 = sub_100110B1C();
    v21(v20);
  }
  sub_100047260();
}

void sub_10010E50C()
{
  sub_100047278();
  sub_10012AFE0();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_100110B00();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v13 = sub_100110A98(v5, v6, v7, v8, v9, v10, v11, v12, v22);
  ((void (*)(char *))v0)(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v2 + 88);
  sub_100110AC4();
  int v15 = v14();
  int v16 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v15 != enum case for ContentSizeCategory.extraSmall(_:)
    && v15 != enum case for ContentSizeCategory.small(_:)
    && v15 != enum case for ContentSizeCategory.medium(_:)
    && v15 != enum case for ContentSizeCategory.large(_:)
    && v15 != enum case for ContentSizeCategory.extraLarge(_:)
    && v15 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    uint64_t v18 = sub_100110AE4();
    v19(v18);
  }
  sub_100110AD4();
  v0();
  sub_100110AC4();
  int v17 = v14();
  if (v17 != v16
    && v17 != enum case for ContentSizeCategory.small(_:)
    && v17 != enum case for ContentSizeCategory.medium(_:)
    && v17 != enum case for ContentSizeCategory.large(_:)
    && v17 != enum case for ContentSizeCategory.extraLarge(_:)
    && v17 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    uint64_t v20 = sub_100110B1C();
    v21(v20);
  }
  sub_100047260();
}

void sub_10010E878()
{
  sub_100047278();
  sub_10012AFE0();
  sub_10000DB98();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_100110B00();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v13 = sub_100110A98(v5, v6, v7, v8, v9, v10, v11, v12, v22);
  ((void (*)(char *))v0)(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v2 + 88);
  sub_100110AC4();
  int v15 = v14();
  int v16 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v15 != enum case for ContentSizeCategory.extraSmall(_:)
    && v15 != enum case for ContentSizeCategory.small(_:)
    && v15 != enum case for ContentSizeCategory.medium(_:)
    && v15 != enum case for ContentSizeCategory.large(_:)
    && v15 != enum case for ContentSizeCategory.extraLarge(_:)
    && v15 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v15 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    uint64_t v18 = sub_100110AE4();
    v19(v18);
  }
  sub_100110AD4();
  v0();
  sub_100110AC4();
  int v17 = v14();
  if (v17 != v16
    && v17 != enum case for ContentSizeCategory.small(_:)
    && v17 != enum case for ContentSizeCategory.medium(_:)
    && v17 != enum case for ContentSizeCategory.large(_:)
    && v17 != enum case for ContentSizeCategory.extraLarge(_:)
    && v17 != enum case for ContentSizeCategory.extraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.extraExtraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityMedium(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    && v17 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    uint64_t v20 = sub_100110B1C();
    v21(v20);
  }
  sub_100047260();
}

uint64_t sub_10010EBE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  int v147 = a4;
  uint64_t v151 = a3;
  uint64_t v146 = a2;
  uint64_t v153 = a1;
  uint64_t v148 = a5;
  uint64_t v164 = sub_10012BBA0();
  sub_10000DB98();
  uint64_t v130 = v7;
  __chkstk_darwin(v8);
  sub_10000DBCC();
  uint64_t v162 = v9;
  uint64_t v163 = sub_10012BDF0();
  sub_10000DB98();
  uint64_t v131 = v10;
  __chkstk_darwin(v11);
  sub_10000DBCC();
  uint64_t v161 = v12;
  uint64_t v13 = sub_1000053D8(&qword_10016B098);
  __chkstk_darwin(v13 - 8);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v14);
  sub_100011EF0();
  __chkstk_darwin(v15);
  sub_100011EF0();
  __chkstk_darwin(v16);
  uint64_t v144 = (char *)&v130 - v17;
  uint64_t v137 = sub_10012AFE0();
  sub_10000DB98();
  uint64_t v136 = v18;
  __chkstk_darwin(v19);
  sub_10000DBCC();
  uint64_t v135 = v20;
  uint64_t v21 = type metadata accessor for WidgetContext();
  __chkstk_darwin(v21 - 8);
  sub_10000DCB4();
  sub_100011EF0();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v130 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v130 - v26;
  uint64_t v28 = sub_10012C800();
  sub_10000DB98();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  sub_10000DCB4();
  uint64_t v149 = v32;
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v130 - v34;
  uint64_t v36 = (void (*)(uint64_t, unint64_t, uint64_t))(v5
                                                                + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily);
  uint64_t v156 = *(void (**)(char *))(v30 + 104);
  uint64_t v157 = v30 + 104;
  v156((char *)&v130 - v34);
  sub_10006357C();
  uint64_t v160 = v36;
  sub_10012CB60();
  sub_100110A44();
  uint64_t v38 = v165;
  uint64_t v37 = v166;
  uint64_t v133 = v30;
  uint64_t v158 = *(void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v159 = v30 + 8;
  v158(v35, v28);
  uint64_t v154 = v6;
  if (v37 == v38)
  {
    int v152 = 1;
  }
  else
  {
    sub_10010E50C();
    int v152 = v39;
  }
  sub_100110A84();
  v40();
  sub_100110A64();
  sub_100110A44();
  uint64_t v42 = v165;
  uint64_t v41 = v166;
  uint64_t v43 = sub_100110A2C();
  v44(v43);
  uint64_t v45 = v151;
  sub_100088170(v151, (uint64_t)v27);
  if (v41 == v42)
  {
    int v46 = v27[48];
    sub_1000881D4((uint64_t)v27);
    BOOL v47 = (v46 - 6) < 0xFFFFFFFD;
  }
  else
  {
    sub_1000881D4((uint64_t)v27);
    BOOL v47 = 1;
  }
  uint64_t v48 = v154;
  sub_100110A84();
  v49();
  sub_100110A64();
  sub_100110A44();
  uint64_t v139 = v166;
  uint64_t v138 = v165;
  uint64_t v50 = sub_100110A2C();
  v51(v50);
  uint64_t v140 = sub_10010F764(v48);
  int v52 = *(unsigned __int8 *)(v48 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize);
  BOOL v141 = v47;
  int v134 = v52;
  if ((v52 - 2) >= 2)
  {
    if (v52) {
      uint64_t v53 = sub_10010FD10();
    }
    else {
      uint64_t v53 = sub_10010FA94();
    }
  }
  else
  {
    uint64_t v53 = sub_100110084();
  }
  uint64_t v155 = v53;
  int v150 = enum case for WidgetFamily.systemLarge(_:);
  sub_100110A84();
  v54();
  sub_100110A64();
  sub_100110A44();
  uint64_t v56 = v165;
  uint64_t v55 = v166;
  uint64_t v57 = sub_100110A2C();
  v58(v57);
  sub_100088170(v45, (uint64_t)v25);
  if (v55 != v56)
  {
    sub_1000881D4((uint64_t)v25);
    goto LABEL_19;
  }
  int v59 = v25[48];
  if ((v59 - 3) >= 2)
  {
    uint64_t v60 = v132;
    sub_100088170((uint64_t)v25, v132);
    if (v59 != 5)
    {
      int v129 = *(unsigned __int8 *)(v60 + 48);
      sub_1000881D4(v60);
      uint64_t result = sub_1000881D4((uint64_t)v25);
      if (v129 != 2) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v60 = v132;
    sub_100088170((uint64_t)v25, v132);
  }
  sub_1000881D4(v60);
  uint64_t result = sub_1000881D4((uint64_t)v25);
LABEL_18:
  BOOL v62 = __OFSUB__(v155--, 1);
  if (v62)
  {
    __break(1u);
LABEL_57:
    __break(1u);
    return result;
  }
LABEL_19:
  sub_100110A84();
  v63();
  sub_100110A64();
  sub_100110A44();
  uint64_t v65 = v165;
  uint64_t v64 = v166;
  uint64_t v66 = sub_100110A2C();
  v67(v66);
  if (v64 == v65)
  {
    uint64_t result = sub_1001103E8();
    if (result)
    {
      BOOL v62 = __OFSUB__(v155--, 1);
      if (v62) {
        goto LABEL_57;
      }
    }
  }
  sub_100110A84();
  v68();
  sub_100110A64();
  sub_100110A44();
  uint64_t v70 = v165;
  uint64_t v69 = v166;
  uint64_t v71 = sub_100110A2C();
  v72(v71);
  uint64_t v73 = *(int *)(type metadata accessor for AggregateWeatherViewModel(0) + 32);
  if (v69 == v70)
  {
    sub_1000D558C(v155, *(void *)(v153 + v73));
    swift_bridgeObjectRetain();
    sub_100111CEC();
    uint64_t v75 = v74;
  }
  else
  {
    uint64_t v76 = sub_100111E54(1, *(void *)(v153 + v73));
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    unint64_t v82 = v81;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1000D55B8(v155, v76, v78, v80, v82);
    sub_100111CEC();
    uint64_t v75 = v83;
    swift_unknownObjectRelease();
  }
  uint64_t v84 = v154;
  LODWORD(v132) = sub_10011075C();
  uint64_t v85 = v84 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  uint64_t v86 = v136;
  uint64_t v87 = v135;
  uint64_t v88 = v137;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v136 + 16))(v135, v85, v137);
  int v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 88))(v87, v88);
  uint64_t v90 = v151;
  if (v89 == enum case for ContentSizeCategory.extraLarge(_:))
  {
    uint64_t v91 = 36;
    int v92 = v152;
  }
  else
  {
    BOOL v93 = v89 == enum case for ContentSizeCategory.extraExtraLarge(_:)
       || v89 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
    int v92 = v152;
    if (v93)
    {
      uint64_t v91 = 40;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v88);
      uint64_t v91 = 32;
    }
  }
  uint64_t v135 = sub_10012B320();
  uint64_t v137 = v91;
  if (!v134)
  {
    uint64_t v101 = sub_10012B300();
    sub_100110A84();
    v102();
    sub_100110A64();
    sub_100110A44();
    uint64_t v104 = v165;
    uint64_t v103 = v166;
    uint64_t v105 = sub_100110A2C();
    v106(v105);
    uint64_t v136 = v101;
    if (v103 != v104)
    {
      uint64_t v100 = sub_10012B330();
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  uint64_t v94 = sub_10012B330();
  sub_100110A84();
  v95();
  sub_100110A64();
  sub_100110A44();
  uint64_t v97 = v165;
  uint64_t v96 = v166;
  uint64_t v98 = sub_100110A2C();
  v99(v98);
  uint64_t v136 = v94;
  if (v96 != v97)
  {
LABEL_37:
    uint64_t v100 = sub_10012B200();
    goto LABEL_39;
  }
  uint64_t v100 = sub_10012B230();
LABEL_39:
  uint64_t v157 = v100;
  uint64_t v107 = v133;
  sub_10012B2A0();
  double v109 = v108;
  (*(void (**)(uint64_t, void, uint64_t))(v107 + 16))(v149, v160, v28);
  LODWORD(v159) = *(unsigned __int8 *)(v90 + 48);
  LODWORD(v158) = *(unsigned __int8 *)(v90 + 49);
  uint64_t v110 = *(void *)(v75 + 16);
  if (v110)
  {
    int v152 = v92;
    uint64_t v160 = *(void (**)(uint64_t, unint64_t, uint64_t))(v131 + 16);
    unint64_t v111 = v75 + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
    uint64_t v112 = (void (**)(uint64_t, uint64_t))(v130 + 8);
    uint64_t v113 = (void (**)(uint64_t, uint64_t))(v131 + 8);
    uint64_t v114 = *(void *)(v131 + 72);
    uint64_t v156 = (void (*)(char *))v75;
    swift_bridgeObjectRetain();
    uint64_t v115 = v161;
    uint64_t v116 = v162;
    uint64_t v117 = v163;
    while (1)
    {
      v160(v115, v111, v117);
      sub_10012BDC0();
      char v118 = sub_10012BB70();
      (*v112)(v116, v164);
      (*v113)(v115, v117);
      if (v118) {
        break;
      }
      v111 += v114;
      if (!--v110)
      {
        uint64_t v75 = (uint64_t)v156;
        swift_bridgeObjectRelease();
        char v119 = 0;
        goto LABEL_46;
      }
    }
    uint64_t v75 = (uint64_t)v156;
    swift_bridgeObjectRelease();
    char v119 = sub_100110484();
LABEL_46:
    LOBYTE(v92) = v152;
  }
  else
  {
    char v119 = 0;
  }
  char v120 = sub_100110484();
  uint64_t v121 = v142;
  sub_1000645EC();
  uint64_t v122 = sub_1000053D8(&qword_10016B060);
  int v123 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v121, 1, v122);
  uint64_t v124 = v145;
  uint64_t v125 = (uint64_t)v144;
  uint64_t v126 = v143;
  if (v123 == 1)
  {
    sub_1000AE44C(v121);
    uint64_t v127 = 1;
  }
  else
  {
    sub_100129040();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v122 - 8) + 8))(v121, v122);
    uint64_t v127 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v125, v127, 1, v122);
  sub_1000648F0();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v126, 1, v122) == 1)
  {
    sub_1000AE44C(v126);
    uint64_t v128 = 1;
  }
  else
  {
    sub_100129040();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v122 - 8) + 8))(v126, v122);
    uint64_t v128 = 0;
  }
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v124, v128, 1, v122);
  return sub_100061F78(v149, v75, (unsigned __int16)v159 | (unsigned __int16)((_WORD)v158 << 8), v155, v119 & 1, v132 & 1, v120 & 1, v137, v148, v109, v92 & 1, v141, v139 == v138, v147 & 1, v140, v136, v157, v135, v146,
           v125,
           v124);
}

uint64_t sub_10010F764(uint64_t a1)
{
  uint64_t v31 = sub_10012AFE0();
  uint64_t v33 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10012C800();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = a1;
  uint64_t v8 = a1 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
  uint64_t v9 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  v9(v7, enum case for WidgetFamily.systemLarge(_:), v4);
  sub_10006357C();
  uint64_t v30 = v8;
  sub_10012CB60();
  sub_10012CB60();
  uint64_t v11 = v34;
  uint64_t v10 = v35;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  if (v10 == v11)
  {
    uint64_t v13 = v33;
    uint64_t v14 = v31;
    (*(void (**)(char *, void, uint64_t))(v33 + 104))(v3, enum case for ContentSizeCategory.extraLarge(_:), v31);
    sub_10010E1A0();
    char v16 = v15;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v3, v14);
    BOOL v17 = (v16 & 1) == 0;
    uint64_t v18 = 24;
    uint64_t v19 = 16;
  }
  else
  {
    uint64_t v29 = v3;
    uint64_t v20 = v33;
    v9(v7, enum case for WidgetFamily.systemSmall(_:), v4);
    sub_10012CB60();
    sub_10012CB60();
    uint64_t v22 = v34;
    uint64_t v21 = v35;
    v12(v7, v4);
    if (v21 == v22) {
      return 4;
    }
    uint64_t v24 = v29;
    uint64_t v25 = v31;
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v29, enum case for ContentSizeCategory.large(_:), v31);
    sub_10010E1A0();
    char v27 = v26;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v25);
    BOOL v17 = (v27 & 1) == 0;
    uint64_t v18 = 14;
    uint64_t v19 = 12;
  }
  if (v17) {
    return v18;
  }
  else {
    return v19;
  }
}

uint64_t sub_10010FA94()
{
  uint64_t v0 = sub_10012C800();
  uint64_t v18 = *(void *)(v0 - 8);
  uint64_t v19 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10012AFE0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *, void, uint64_t))(v4 + 104);
  v7(v6, enum case for ContentSizeCategory.extraExtraLarge(_:), v3);
  sub_10010E1A0();
  char v9 = v8;
  uint64_t v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if (v9) {
    return 3;
  }
  v7(v6, enum case for ContentSizeCategory.large(_:), v3);
  sub_10010E1A0();
  char v13 = v12;
  v10(v6, v3);
  if (v13) {
    return 4;
  }
  uint64_t v15 = v18;
  uint64_t v14 = v19;
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v2, enum case for WidgetFamily.systemSmall(_:), v19);
  sub_10006357C();
  sub_10012CB60();
  sub_10012CB60();
  uint64_t v17 = v20;
  uint64_t v16 = v21;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v2, v14);
  if (v16 == v17) {
    return 4;
  }
  else {
    return 5;
  }
}

uint64_t sub_10010FD10()
{
  uint64_t v1 = sub_10012AFE0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10012C800();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
  uint64_t v28 = *(void (**)(char *, void, uint64_t))(v6 + 104);
  uint64_t v29 = v6 + 104;
  v28(v8, enum case for WidgetFamily.systemLarge(_:), v5);
  unint64_t v10 = sub_10006357C();
  uint64_t v31 = v9;
  sub_10012CB60();
  unint64_t v30 = v10;
  sub_10012CB60();
  uint64_t v12 = v32;
  uint64_t v11 = v33;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v13 = v6 + 8;
  char v27 = v14;
  v14(v8, v5);
  if (v11 == v12)
  {
    uint64_t v15 = *(void (**)(char *, void, uint64_t))(v2 + 104);
    v15(v4, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v1);
    sub_10010E1A0();
    char v17 = v16;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v17) {
      return 2;
    }
    uint64_t v26 = v13;
    v15(v4, enum case for ContentSizeCategory.extraExtraLarge(_:), v1);
  }
  else
  {
    uint64_t v26 = v13;
    uint64_t v15 = *(void (**)(char *, void, uint64_t))(v2 + 104);
    v15(v4, enum case for ContentSizeCategory.extraExtraLarge(_:), v1);
  }
  sub_10010E1A0();
  char v20 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v2 + 8);
  v21(v4, v1);
  if (v20) {
    return 3;
  }
  v15(v4, enum case for ContentSizeCategory.large(_:), v1);
  sub_10010E1A0();
  char v23 = v22;
  v21(v4, v1);
  if (v23) {
    return 4;
  }
  v28(v8, enum case for WidgetFamily.systemSmall(_:), v5);
  sub_10012CB60();
  sub_10012CB60();
  uint64_t v25 = v32;
  uint64_t v24 = v33;
  v27(v8, v5);
  if (v24 == v25) {
    return 4;
  }
  else {
    return 5;
  }
}

uint64_t sub_100110084()
{
  uint64_t v1 = sub_10012C800();
  uint64_t v40 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10012AFE0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_sizeCategory;
  int v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v39(v7, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v4);
  sub_10010E1A0();
  char v10 = v9;
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if (v10) {
    return 3;
  }
  uint64_t v13 = v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily;
  uint64_t v14 = v40;
  uint64_t v15 = *(void (**)(void))(v40 + 104);
  unsigned int v33 = enum case for WidgetFamily.systemSmall(_:);
  uint64_t v34 = v40 + 104;
  uint64_t v32 = (void (*)(char *, void, uint64_t))v15;
  v15(v3);
  unint64_t v16 = sub_10006357C();
  uint64_t v38 = v8;
  unint64_t v17 = v16;
  uint64_t v36 = v13;
  sub_10012CB60();
  unint64_t v35 = v17;
  sub_10012CB60();
  uint64_t v19 = v41;
  uint64_t v18 = v42;
  char v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v37 = v3;
  uint64_t v40 = v14 + 8;
  uint64_t v31 = v20;
  v20(v3, v1);
  uint64_t v21 = enum case for ContentSizeCategory.extraLarge(_:);
  BOOL v22 = v18 == v19;
  char v23 = v39;
  if (v22)
  {
    v39(v7, enum case for ContentSizeCategory.extraLarge(_:), v4);
    sub_10010E1A0();
    char v25 = v24;
    v11(v7, v4);
    if (v25) {
      return 3;
    }
  }
  v23(v7, v21, v4);
  sub_10010E1A0();
  char v27 = v26;
  v11(v7, v4);
  if (v27) {
    return 4;
  }
  uint64_t v28 = v37;
  v32(v37, v33, v1);
  sub_10012CB60();
  sub_10012CB60();
  uint64_t v30 = v41;
  uint64_t v29 = v42;
  v31(v28, v1);
  if (v29 == v30) {
    return 4;
  }
  else {
    return 5;
  }
}

BOOL sub_1001103E8()
{
  uint64_t v0 = self;
  id v1 = [v0 mainScreen];
  [v1 nativeScale];
  double v3 = v2;

  id v4 = [v0 mainScreen];
  [v4 scale];
  double v6 = v5;

  return v6 < v3;
}

uint64_t sub_100110484()
{
  uint64_t v1 = sub_10012AFE0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10012C800();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetFamily, v5);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (v9 == enum case for WidgetFamily.systemSmall(_:)) {
    goto LABEL_2;
  }
  if (v9 != enum case for WidgetFamily.systemMedium(_:))
  {
    if (v9 != enum case for WidgetFamily.systemLarge(_:) && v9 != enum case for WidgetFamily.systemExtraLarge(_:))
    {
      uint64_t result = sub_10012D070();
      __break(1u);
      return result;
    }
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize)) {
      uint64_t v12 = (unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:);
    }
    else {
      uint64_t v12 = (unsigned int *)&enum case for ContentSizeCategory.extraLarge(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *v12, v1);
    goto LABEL_16;
  }
  if (!sub_1001103E8() && *(unsigned char *)(v0 + OBJC_IVAR____TtC13WeatherWidget21ViewAttributesFactory_widgetDisplaySize))
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for ContentSizeCategory.extraExtraLarge(_:), v1);
LABEL_16:
    sub_10010E878();
    char v10 = v13;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v10 & 1;
  }
LABEL_2:
  char v10 = 0;
  return v10 & 1;
}

uint64_t sub_10011075C()
{
  uint64_t v0 = sub_10012AFE0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v0);
  sub_10010E878();
  char v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5 & 1;
}

void sub_100110864()
{
  sub_100047278();
  uint64_t v22 = v0;
  int v2 = v1;
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_10012AFE0();
  sub_10000DB98();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10012C800();
  sub_10000DB98();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  char v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v8, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v6, v9);
  sub_10003C1D0((uint64_t)v20, (uint64_t)v14, v4, v2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v6, v9);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v8, v15);
  sub_100047260();
}

uint64_t sub_1001109DC()
{
  return type metadata accessor for DailyViewAttributesFactory();
}

uint64_t type metadata accessor for DailyViewAttributesFactory()
{
  uint64_t result = qword_100171918;
  if (!qword_100171918) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100110A2C()
{
  return v0;
}

uint64_t sub_100110A44()
{
  return sub_10012CB60();
}

uint64_t sub_100110A64()
{
  return sub_10012CB60();
}

char *sub_100110A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - v9;
}

uint64_t sub_100110AE4()
{
  return v0;
}

uint64_t sub_100110B1C()
{
  return v0;
}

id sub_100110B34()
{
  uint64_t v1 = sub_10012A4E0();
  swift_allocObject();
  uint64_t v6 = v1;
  uint64_t v7 = &protocol witness table for NanoPreferencesSynchronizer;
  uint64_t v5 = sub_10012A4D0();
  sub_10012A220();
  swift_allocObject();
  sub_10012A200();
  sub_10012A1F0();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for WeatherSettingsUnits();
  [super init];
  swift_release();
  return v2;
}

uint64_t sub_100110C48()
{
  sub_10012A090();
  sub_10012A080();
  sub_10012A060();

  return swift_release();
}

uint64_t sub_100110CCC()
{
  return _swift_task_switch(sub_100110CE8, 0, 0);
}

uint64_t sub_100110CE8()
{
  sub_100047290();
  sub_10012A090();
  *(void *)(v0 + 16) = sub_10012A080();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100110D8C;
  return UnitManager.refreshUnitsFromStorage()();
}

uint64_t sub_100110D8C()
{
  sub_100047290();
  sub_10004716C();
  uint64_t v1 = *v0;
  sub_1000471B0();
  *id v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_100047328();
  return v3();
}

uint64_t sub_100110EE4(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100110F88;
  return sub_100110CCC();
}

uint64_t sub_100110F88()
{
  sub_100047290();
  sub_10004716C();
  id v2 = *(void (***)(void))(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *v0;
  sub_1000471B0();
  *uint64_t v5 = v4;
  swift_task_dealloc();

  v2[2](v2);
  _Block_release(v2);
  sub_100047328();
  return v6();
}

uint64_t sub_10011108C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_10016C818);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10012CC30();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_100171A20;
  v9[5] = v8;
  sub_1001118C8((uint64_t)v6, (uint64_t)&unk_100171A30, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_100111190(void *a1)
{
  uint64_t v3 = sub_1000053D8(&qword_100171A00);
  __chkstk_darwin(v3 - 8);
  sub_100111CC4();
  sub_10012A090();
  if (a1)
  {
    id v4 = a1;
    sub_10012A080();
    id v5 = v4;
    sub_10012A280();
    sub_10012A040();
  }
  else
  {
    sub_10012A080();
    uint64_t v6 = sub_10012A270();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 1, 1, v6);
    sub_10012A040();
  }
  swift_release();
  return sub_100016D10(v1, &qword_100171A00);
}

uint64_t sub_100111328()
{
  uint64_t v1 = sub_1000053D8(&qword_100171A00);
  __chkstk_darwin(v1 - 8);
  sub_100111CC4();
  sub_10012A090();
  sub_10012A080();
  sub_10012A030();
  swift_release();
  uint64_t v2 = sub_10012A270();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v2) == 1)
  {
    sub_100016D10(v0, &qword_100171A00);
    return 0;
  }
  else
  {
    uint64_t v3 = sub_10012A260();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v0, v2);
  }
  return v3;
}

id sub_100111424()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherSettingsUnits();
  return [super dealloc];
}

uint64_t type metadata accessor for WeatherSettingsUnits()
{
  return self;
}

uint64_t sub_10011147C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001114BC()
{
  uint64_t v1 = *(const void **)(v0 + 16);
  objc_super v2 = *(void **)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  id v4 = (void *)sub_100111CE0(v3);
  *id v4 = v5;
  v4[1] = sub_100046C9C;
  uint64_t v6 = (uint64_t (*)(const void *, void *))((char *)&dword_100171A08 + dword_100171A08);
  return v6(v1, v2);
}

uint64_t sub_100111564(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *id v4 = v3;
  v4[1] = sub_100047164;
  return v6();
}

uint64_t sub_100111634()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (int *)v0[4];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100111CE0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100047164;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100171A18 + dword_100171A18);
  return v7(v1, v2, v3);
}

uint64_t sub_1001116F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100047164;
  return v7();
}

uint64_t sub_1001117C0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100111800(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = (int *)v1[4];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_100111CE0(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_100047164;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100171A28 + dword_100171A28);
  return v9(a1, v3, v4, v5);
}

uint64_t sub_1001118C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012CC30();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(a1, 1, v6) == 1)
  {
    sub_100016D10(a1, &qword_10016C818);
  }
  else
  {
    sub_10012CC20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_10012CC10();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100111A38(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100111B14;
  return v6(a1);
}

uint64_t sub_100111B14()
{
  sub_100047290();
  sub_10004716C();
  uint64_t v1 = *v0;
  sub_1000471B0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100047328();
  return v3();
}

uint64_t sub_100111BD8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100111C10(uint64_t a1)
{
  uint64_t v3 = *(int **)(v1 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100111CE0(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100046C9C;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100171A38 + dword_100171A38);
  return v7(a1, v3);
}

uint64_t sub_100111CC4()
{
  return 0;
}

uint64_t sub_100111CE0(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

void sub_100111CEC()
{
}

void sub_100111D20()
{
}

void sub_100111D54()
{
  sub_100047278();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  if ((v0 & 1) == 0) {
    goto LABEL_2;
  }
  sub_10012D210();
  swift_unknownObjectRetain_n();
  uint64_t v4 = (void *)swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
    uint64_t v4 = &_swiftEmptyArrayStorage;
  }
  uint64_t v5 = v4[2];
  swift_release();
  if (__OFSUB__(v1 >> 1, v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v5 != (v1 >> 1) - v3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    sub_10011856C();
    goto LABEL_9;
  }
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_9:
  swift_unknownObjectRelease();
  sub_100047260();
}

uint64_t sub_100111E54(uint64_t a1, uint64_t a2)
{
  return sub_100111F40(a1, a2, (uint64_t (*)(void))&type metadata accessor for DailyForecastViewModel);
}

unint64_t sub_100111E6C(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v4 = 11;
    }
    unint64_t v5 = v4 | (v3 << 16);
    uint64_t result = sub_10012CAE0();
    if (v6) {
      uint64_t result = v5;
    }
    if (4 * v3 >= result >> 14)
    {
      uint64_t v7 = sub_10012CB30();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100111F40(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t result = sub_1000D5844(0, result, v5);
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result;
  }
  if (v5 < v7) {
    goto LABEL_9;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    a3(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100111FF8()
{
  uint64_t v0 = sub_10012BE30();
  uint64_t v18 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10012BC30();
  uint64_t v17 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10012BF60();
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10012BE50();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012BE40();
  sub_10012BF50();
  sub_10012BC20();
  sub_10012BE20();
  sub_100129300();
  sub_10012C4F0();
  uint64_t v13 = sub_10012BA50();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v0);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t sub_10011231C(uint64_t a1, void *a2)
{
  uint64_t v6 = type metadata accessor for AggregateWeatherViewModelFactory();
  uint64_t v7 = sub_10000DC9C(v6);
  __chkstk_darwin(v7);
  sub_10006D4E4();
  uint64_t v8 = sub_10012C2B0();
  uint64_t v9 = sub_10000DC9C(v8);
  __chkstk_darwin(v9);
  sub_10006D500();
  type metadata accessor for RelevanceProvider();
  *(void *)(v2 + 24) = swift_allocObject();
  uint64_t v10 = v2 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_eventViewModelFactory;
  sub_10012BF90();
  uint64_t v11 = *(int *)(type metadata accessor for EventViewModelFactory() + 20);
  sub_10012BA30();
  swift_allocObject();
  *(void *)(v10 + v11) = sub_10012BA20();
  sub_10012BF90();
  uint64_t v12 = OBJC_IVAR____TtC13WeatherWidget12EntryFactory_sunriseSunsetViewModelFactory;
  sub_1000053D8(&qword_100171B60);
  swift_allocObject();
  sub_10012BA90();
  sub_10012C2A0();
  sub_10012C440();
  swift_allocObject();
  *(void *)(v2 + v12) = sub_10012C430();
  sub_100074220(a1, v2 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_appConfigurationManager);
  *(void *)(v2 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_defaultCityManager) = a2;
  type metadata accessor for WidgetContextFactory();
  swift_allocObject();
  id v13 = a2;
  *(void *)(v2 + 16) = sub_1000FF644((uint64_t)v13);
  sub_100074220(a1, (uint64_t)v15);
  sub_10007A97C(v15, v3);

  sub_10000DB48(a1);
  sub_1001186BC(v3, v2 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_aggregateWeatherViewModelFactory, (void (*)(void))type metadata accessor for AggregateWeatherViewModelFactory);
  return v2;
}

void sub_100112538()
{
  sub_100047278();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000053D8(&qword_100171B88);
  uint64_t v6 = sub_10000DC9C(v5);
  __chkstk_darwin(v6);
  sub_1000D4744();
  uint64_t v7 = sub_1001296B0();
  sub_10000DB98();
  uint64_t v42 = v8;
  __chkstk_darwin(v9);
  sub_10000DC50();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = sub_1001299C0();
  sub_10000DB98();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_10000DC50();
  uint64_t v19 = v18 - v17;
  type metadata accessor for WeatherDataOperationResult.Data(0);
  sub_10000B3FC();
  __chkstk_darwin(v20);
  sub_10000DC50();
  sub_100118510(v2, v22 - v21, (void (*)(void))type metadata accessor for WeatherDataOperationResult.Data);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v25 = sub_10011876C();
    v26(v25);
    sub_1001187AC();
    sub_1001127B0(v27, v28, v29, v30);
LABEL_7:
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v19, v13);
LABEL_9:
    uint64_t v24 = 0;
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v31 = sub_10011876C();
    v32(v31);
    sub_1001187AC();
    sub_100112A1C(v33, v34, v35, v36);
    goto LABEL_7;
  }
  sub_10000C340();
  swift_bridgeObjectRelease();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v0, 1, v7) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v12, v0, v7);
    sub_1001187AC();
    sub_1001128E8(v37, v38, v39, v40);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v12, v7);
    goto LABEL_9;
  }
  sub_10000D930(v0, &qword_100171B88);
  uint64_t v24 = 1;
LABEL_10:
  uint64_t v41 = type metadata accessor for ForecastEntry(0);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v4, v24, 1, v41);
  sub_100047260();
}

uint64_t sub_1001127B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for ForecastEntry(0);
  sub_10007AB88(a1, a3, 0, a4 + v8[7]);
  uint64_t v9 = a4 + v8[6];
  sub_1000FF6A4();
  sub_1000604C8(*(_WORD *)(v9 + 48), a4 + v8[5]);
  uint64_t v10 = sub_100129300();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a4, a2, v10);
  type metadata accessor for WeatherDataViewModel();
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ForecastEntry.Model(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1001128E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for ForecastEntry(0);
  sub_10008FD7C(a1, a3, a4 + v8[7]);
  uint64_t v9 = a4 + v8[6];
  sub_1000FFB3C();
  sub_1000604C8(*(_WORD *)(v9 + 48), a4 + v8[5]);
  uint64_t v10 = sub_100129300();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a4, a2, v10);
  type metadata accessor for WeatherDataViewModel();
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ForecastEntry.Model(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100112A1C@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v57 = a4;
  uint64_t v60 = a3;
  int v56 = a2;
  uint64_t v54 = a1;
  uint64_t v4 = sub_1000053D8(&qword_10016B418);
  __chkstk_darwin(v4 - 8);
  uint64_t v55 = (uint64_t)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10012BB00();
  uint64_t v50 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  BOOL v47 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100129920();
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  __chkstk_darwin(v7);
  uint64_t v45 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for WidgetContext();
  __chkstk_darwin(v9 - 8);
  int v46 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10012BE90();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  int v59 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000053D8(&qword_10016B3C0);
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = sub_1001295D0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v41 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  char v23 = (char *)v41 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)v41 - v24;
  uint64_t v26 = sub_10012BBD0();
  uint64_t v43 = *(void *)(v26 - 8);
  uint64_t v44 = v26;
  __chkstk_darwin(v26);
  uint64_t v42 = (char *)v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100129950();
  sub_100129970();
  sub_10012BBC0();
  uint64_t v28 = v58;
  sub_10012C420();
  v41[1] = *(void *)(v28 + 16);
  sub_100129950();
  uint64_t v29 = v45;
  sub_1001295C0();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v14 + 8);
  v30(v25, v13);
  sub_100129950();
  sub_100129540();
  v30(v23, v13);
  sub_100129950();
  sub_100129530();
  v30(v20, v13);
  sub_100129950();
  uint64_t v31 = v47;
  sub_100129520();
  v30(v17, v13);
  uint64_t v32 = v46;
  uint64_t v33 = v31;
  uint64_t v34 = v54;
  sub_1000FFFBC();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v33, v52);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v49);
  uint64_t v35 = (uint64_t)v32;
  uint64_t v36 = v55;
  sub_1000604C8(*((_WORD *)v32 + 24), v55);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  uint64_t v37 = sub_100129300();
  uint64_t v38 = v57;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v57, v34, v37);
  uint64_t v39 = (int *)type metadata accessor for ForecastEntry(0);
  sub_1001186BC(v35, v38 + v39[6], (void (*)(void))type metadata accessor for WidgetContext);
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v38 + v39[7], v59, v53);
  type metadata accessor for WeatherDataViewModel();
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ForecastEntry.Model(0);
  swift_storeEnumTagMultiPayload();
  return sub_10006CD30(v36, v38 + v39[5], &qword_10016B418);
}

void sub_1001130A8()
{
  sub_100047278();
  uint64_t v3 = v2;
  uint64_t v4 = sub_1001299C0();
  sub_10000DB98();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v8 = sub_10006D500();
  type metadata accessor for WeatherDataOperationResult.Data(v8);
  sub_10000B3FC();
  __chkstk_darwin(v9);
  sub_1000D4744();
  sub_100118510(v3, v1, (void (*)(void))type metadata accessor for WeatherDataOperationResult.Data);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v14 = sub_10011878C();
    v15(v14);
    sub_1001187DC();
    sub_1001131FC(v16, v17, v18, v19);
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v20 = sub_10011878C();
    v21(v20);
    sub_1001187DC();
    sub_1001139AC(v22, v23, v24);
    goto LABEL_6;
  }
  sub_1001187DC();
  sub_1001136A4(v11, v12, v13);
  swift_bridgeObjectRelease();
LABEL_7:
  sub_100047260();
}

uint64_t sub_1001131FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a3;
  uint64_t v43 = a4;
  int v47 = a2;
  uint64_t v5 = sub_1000053D8(&qword_10016E890);
  uint64_t v44 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10012C800();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100129DC0();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000053D8(&qword_10016B3D8);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1000053D8(&qword_10016B3E0);
  uint64_t v45 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = a1;
  sub_1001299A0();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v18, 1, v19) == 1)
  {
    sub_10000D930((uint64_t)v18, &qword_10016B3D8);
LABEL_7:
    uint64_t v32 = v48;
    int v33 = v47;
    uint64_t v34 = v46;
    uint64_t v35 = v44;
    sub_100129990();
    sub_1001157B0();
    sub_10012CCB0();
    sub_10012CCD0();
    uint64_t v36 = sub_10012CCC0();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
    if (v36 >= 5) {
      uint64_t v37 = 5;
    }
    else {
      uint64_t v37 = v36;
    }
    return sub_100114C88(v34, v33, v32, v37);
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v21, v18, v19);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for PrecipitationRelevancyWindow.default(_:), v12);
  char v22 = sub_100129EB0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if ((v22 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v19);
    goto LABEL_7;
  }
  uint64_t v23 = v42;
  uint64_t v24 = v11;
  uint64_t v25 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v11, v43, v41);
  int v26 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v11, v25);
  uint64_t v27 = v48;
  int v28 = v47;
  uint64_t v29 = v45;
  if (v26 == enum case for WidgetFamily.systemLarge(_:))
  {
    uint64_t v30 = 3;
    uint64_t v31 = 7;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
    uint64_t v30 = 1;
    uint64_t v31 = 20;
  }
  uint64_t v38 = sub_100113CCC(v46, v28, v27, v30, (char *)v31);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v19);
  return v38;
}

void *sub_1001136A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v27 = a3;
  int v26 = a2;
  uint64_t v25 = sub_100129300();
  uint64_t v4 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ForecastEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v15 = *(void *)(sub_1001296B0() - 8);
  uint64_t v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  uint64_t v23 = a1;
  uint64_t v24 = v17;
  uint64_t v18 = (void (**)(char *, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  uint64_t v19 = _swiftEmptyArrayStorage;
  do
  {
    sub_100129650();
    sub_1001128E8(v16, (uint64_t)v6, v27, (uint64_t)v13);
    (*v18)(v6, v25);
    sub_100118510((uint64_t)v13, (uint64_t)v11, (void (*)(void))type metadata accessor for ForecastEntry);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = (void *)sub_100045B94(0, v19[2] + 1, 1, (uint64_t)v19);
    }
    unint64_t v21 = v19[2];
    unint64_t v20 = v19[3];
    if (v21 >= v20 >> 1) {
      uint64_t v19 = (void *)sub_100045B94(v20 > 1, v21 + 1, 1, (uint64_t)v19);
    }
    void v19[2] = v21 + 1;
    sub_1001186BC((uint64_t)v11, (uint64_t)v19+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v21, (void (*)(void))type metadata accessor for ForecastEntry);
    sub_100118718((uint64_t)v13, (void (*)(void))type metadata accessor for ForecastEntry);
    v16 += v24;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1001139AC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = sub_100129300();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ForecastEntry(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001292B0();
  sub_100112A1C((uint64_t)v8, a2, a3, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1000053D8(&qword_10016C7D0);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100130010;
  sub_1001186BC((uint64_t)v12, v14 + v13, (void (*)(void))type metadata accessor for ForecastEntry);
  return v14;
}

uint64_t sub_100113B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for ForecastEntry(0);
  uint64_t v7 = a3 + v6[6];
  sub_1000FF6A4();
  sub_1000604C8(*(_WORD *)(v7 + 48), a3 + v6[5]);
  uint64_t v8 = sub_100129300();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a3, a2, v8);
  sub_100118510(a1, a3 + v6[7], (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
  type metadata accessor for WeatherDataViewModel();
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ForecastEntry.Model(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100113CCC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v117 = a4;
  int v115 = a2;
  uint64_t v8 = type metadata accessor for ForecastEntry(0);
  uint64_t v114 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v138 = (uint64_t)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v137 = (uint64_t)&v91 - v11;
  uint64_t v113 = sub_10012C6B0();
  uint64_t v133 = *(void **)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v101 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000053D8(&qword_10016B430);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v100 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v112 = (char *)&v91 - v17;
  __chkstk_darwin(v16);
  uint64_t v135 = (char *)&v91 - v18;
  uint64_t v139 = sub_10012C250();
  uint64_t v132 = *(char **)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v140 = (uint64_t)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_100129430();
  uint64_t v124 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v116 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000053D8(&qword_10016C7B0);
  __chkstk_darwin(v21 - 8);
  char v120 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_100129450();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v24 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_100129480();
  uint64_t v97 = *(void *)(v131 - 8);
  uint64_t v25 = __chkstk_darwin(v131);
  uint64_t v128 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  int v28 = (char *)&v91 - v27;
  uint64_t v29 = type metadata accessor for AggregateWeatherViewModel(0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v136 = (uint64_t)&v91 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  int v33 = (char *)&v91 - v32;
  uint64_t v34 = type metadata accessor for CurrentObservationViewModelFactory();
  __chkstk_darwin(v34 - 8);
  uint64_t v36 = (char *)&v91 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_100129300();
  uint64_t v96 = *(void *)(v123 - 8);
  uint64_t v37 = __chkstk_darwin(v123);
  uint64_t v141 = (uint64_t)&v91 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v91 - v40;
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v91 - v42;
  sub_1001292B0();
  uint64_t v102 = v36;
  sub_10012BF90();
  uint64_t v122 = v41;
  int v92 = v43;
  sub_1001292C0();
  uint64_t v121 = v33;
  uint64_t v129 = a1;
  sub_10007AB88(a1, a3, 0, (uint64_t)v33);
  uint64_t v130 = a3;
  sub_10012A6A0();
  uint64_t v44 = v24;
  BOOL v93 = v28;
  uint64_t result = sub_1001293B0();
  if (((unint64_t)a5 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  char v118 = a5;
  if (a5)
  {
    uint64_t v46 = 0;
    uint64_t v108 = v125 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_eventViewModelFactory;
    unsigned int v111 = enum case for Calendar.Component.minute(_:);
    int v134 = *(uint64_t (**)(char *, void, uint64_t))(v124 + 104);
    v124 += 104;
    int v47 = (void (**)(char *, uint64_t))(v124 - 96);
    uint64_t v107 = (void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32);
    unsigned int v106 = enum case for Calendar.Component.hour(_:);
    uint64_t v126 = (void (**)(uint64_t, uint64_t, uint64_t))(v132 + 16);
    uint64_t v127 = (void (**)(char *, uint64_t))(v97 + 8);
    uint64_t v99 = (void (**)(char *, uint64_t, uint64_t))(v133 + 4);
    uint64_t v98 = (void (**)(char *, uint64_t))(v133 + 1);
    uint64_t v105 = (void (**)(uint64_t, uint64_t))(v132 + 8);
    uint64_t v110 = (uint64_t (**)(uint64_t, uint64_t))(v96 + 8);
    uint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v49 = v118;
    uint64_t v50 = (uint64_t)v120;
    uint64_t v51 = v119;
    uint64_t v52 = v123;
    double v109 = v24;
    uint64_t v104 = (void (**)(char *, uint64_t))(v124 - 96);
    uint64_t v103 = (int *)v29;
    while (v49 != v46)
    {
      uint64_t v53 = v116;
      uint64_t result = v134(v116, v111, v51);
      if ((unsigned __int128)(v117 * (__int128)(uint64_t)v46) >> 64 != (v117 * (uint64_t)v46) >> 63) {
        goto LABEL_24;
      }
      uint64_t v133 = v48;
      uint64_t v54 = v122;
      uint64_t v55 = v52;
      int v56 = v44;
      sub_1001293E0();
      uint64_t v57 = *v47;
      (*v47)(v53, v51);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v50, 1, v55) == 1)
      {
        (*(void (**)(char *, uint64_t))(v94 + 8))(v56, v95);
        (*v127)(v93, v131);
        sub_100118718((uint64_t)v121, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
        uint64_t v90 = *v110;
        (*v110)((uint64_t)v54, v55);
        sub_100118718((uint64_t)v102, (void (*)(void))type metadata accessor for CurrentObservationViewModelFactory);
        v90((uint64_t)v92, v55);
        sub_10000D930(v50, &qword_10016C7B0);
        return (uint64_t)v133;
      }
      uint64_t v132 = v46;
      (*v107)(v141, v50, v55);
      v134(v53, v106, v51);
      char v58 = sub_100129400();
      v57(v53, v51);
      if (v58)
      {
        int v59 = v103;
        uint64_t v60 = (uint64_t)v121;
        (*v126)(v140, (uint64_t)&v121[v103[6]], v139);
        uint64_t v61 = *(void *)(v60 + v59[7]);
        swift_bridgeObjectRetain();
        uint64_t v62 = v113;
        uint64_t v63 = (uint64_t)v112;
        uint64_t v64 = v132;
        uint64_t v65 = (uint64_t)v135;
      }
      else
      {
        uint64_t v66 = (uint64_t)v128;
        sub_10012A6A0();
        sub_1000CB818(v129, v66, (char *)1, v140);
        (*v127)((char *)v66, v131);
        int v59 = v103;
        uint64_t v60 = (uint64_t)v121;
        sub_100111F40(1, *(void *)&v121[v103[7]], (uint64_t (*)(void))&type metadata accessor for HourlyForecastBannerViewModel);
        swift_bridgeObjectRetain();
        uint64_t v65 = (uint64_t)v135;
        sub_100111D54();
        uint64_t v61 = v67;
        uint64_t v62 = v113;
        uint64_t v63 = (uint64_t)v112;
        uint64_t v64 = v132;
      }
      uint64_t v68 = v60 + v59[10];
      sub_10006CCD8(v68, v65, &qword_10016B430);
      sub_10006CCD8(v68, v63, &qword_10016B430);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v63, 1, v62) == 1)
      {
        sub_10000D930(v63, &qword_10016B430);
      }
      else
      {
        uint64_t v69 = v101;
        (*v99)(v101, v63, v62);
        uint64_t v70 = (uint64_t)v100;
        sub_10012C6A0();
        (*v98)(v69, v62);
        sub_10000D930(v65, &qword_10016B430);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v70, 0, 1, v62);
        sub_10006CD30(v70, v65, &qword_10016B430);
      }
      uint64_t v71 = v65;
      uint64_t v72 = (uint64_t)v128;
      uint64_t v73 = v130;
      sub_10012A6A0();
      uint64_t v74 = sub_10000E270(v129, v72, v64);
      (*v127)((char *)v72, v131);
      uint64_t v75 = v136;
      sub_100129320();
      uint64_t v76 = v75 + v59[5];
      uint64_t v77 = sub_10012A6B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(v76, v73, v77);
      (*v126)(v75 + v59[6], v140, v139);
      uint64_t v78 = *(void *)(v60 + v59[8]);
      sub_10006CCD8(v60 + v59[9], v75 + v59[9], &qword_10016B428);
      sub_10006CCD8(v71, v75 + v59[10], &qword_10016B430);
      uint64_t v79 = v60 + v59[12];
      __int16 v80 = *(_WORD *)(v79 + 8);
      uint64_t v81 = *(void *)v79;
      sub_10006CCD8(v60 + v59[13], v75 + v59[13], &qword_10016B420);
      uint64_t v82 = v75 + v59[14];
      uint64_t v83 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v82, 1, 1, v83);
      *(void *)(v75 + v59[7]) = v61;
      *(void *)(v75 + v59[8]) = v78;
      *(void *)(v75 + v59[11]) = v74;
      uint64_t v84 = v75 + v59[12];
      *(void *)uint64_t v84 = v81;
      *(_WORD *)(v84 + 8) = v80;
      swift_bridgeObjectRetain();
      uint64_t v85 = v137;
      sub_100113B94(v75, v141, v137);
      sub_100118510(v85, v138, (void (*)(void))type metadata accessor for ForecastEntry);
      uint64_t v48 = v133;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v48 = (void *)sub_100045B94(0, v48[2] + 1, 1, (uint64_t)v48);
      }
      uint64_t v50 = (uint64_t)v120;
      uint64_t v51 = v119;
      int v47 = v104;
      unint64_t v87 = v48[2];
      unint64_t v86 = v48[3];
      uint64_t v88 = (uint64_t)v135;
      if (v87 >= v86 >> 1) {
        uint64_t v48 = (void *)sub_100045B94(v86 > 1, v87 + 1, 1, (uint64_t)v48);
      }
      uint64_t v46 = v64 + 1;
      v48[2] = v87 + 1;
      sub_1001186BC(v138, (uint64_t)v48+ ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))+ *(void *)(v114 + 72) * v87, (void (*)(void))type metadata accessor for ForecastEntry);
      sub_100118718(v137, (void (*)(void))type metadata accessor for ForecastEntry);
      sub_100118718(v136, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      sub_10000D930(v88, &qword_10016B430);
      (*v105)(v140, v139);
      uint64_t v52 = v123;
      uint64_t result = (*v110)(v141, v123);
      uint64_t v49 = v118;
      uint64_t v44 = v109;
      if (v118 == v46) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v52 = v123;
  uint64_t v60 = (uint64_t)v121;
LABEL_20:
  (*(void (**)(char *, uint64_t))(v94 + 8))(v44, v95);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v93, v131);
  sub_100118718(v60, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
  int v89 = *(void (**)(char *, uint64_t))(v96 + 8);
  v89(v122, v52);
  sub_100118718((uint64_t)v102, (void (*)(void))type metadata accessor for CurrentObservationViewModelFactory);
  v89(v92, v52);
  return (uint64_t)v48;
}

uint64_t sub_100114C88(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a1;
  uint64_t v72 = a4;
  int v71 = a2;
  uint64_t v69 = sub_100129430();
  uint64_t v63 = *(void (***)(char *, uint64_t))(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v68 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000053D8(&qword_10016C7B0);
  __chkstk_darwin(v6 - 8);
  uint64_t v70 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AggregateWeatherViewModel(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ForecastEntry(0);
  uint64_t v66 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v80 = (uint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v79 = (uint64_t)&v56 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v65 = (char *)&v56 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v60 = sub_100129450();
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100129480();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100129300();
  uint64_t v61 = *(void *)(v75 - 8);
  uint64_t v26 = __chkstk_darwin(v75);
  uint64_t v78 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v56 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v56 - v31;
  sub_1001292B0();
  sub_10012A6A0();
  uint64_t v73 = v30;
  sub_100129230();
  int v33 = *(void (**)(char *, uint64_t))(v23 + 8);
  v33(v25, v22);
  sub_10012A6A0();
  uint64_t v74 = v21;
  uint64_t v34 = (uint64_t)v65;
  sub_1001293B0();
  v33(v25, v22);
  uint64_t v35 = a3;
  uint64_t v57 = v32;
  sub_1001127B0(v76, (uint64_t)v32, a3, (uint64_t)v19);
  char v58 = v19;
  sub_100118510((uint64_t)v19, v34, (void (*)(void))type metadata accessor for ForecastEntry);
  uint64_t v36 = sub_100045B94(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  unint64_t v38 = *(void *)(v36 + 16);
  unint64_t v37 = *(void *)(v36 + 24);
  uint64_t v39 = v38 + 1;
  if (v38 >= v37 >> 1) {
    goto LABEL_15;
  }
  while (1)
  {
    *(void *)(v36 + 16) = v39;
    unint64_t v67 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    uint64_t v66 = *(void *)(v66 + 72);
    uint64_t result = sub_1001186BC(v34, v36 + v67 + v66 * v38, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v41 = v72;
    uint64_t v34 = (uint64_t)v70;
    uint64_t v42 = v75;
    if (v72 < 1)
    {
      __break(1u);
      return result;
    }
    if (v72 == 1) {
      break;
    }
    uint64_t v65 = (char *)(v77 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_aggregateWeatherViewModelFactory);
    uint64_t v44 = (void (**)(char *, void, uint64_t))(v63 + 13);
    unsigned int v64 = enum case for Calendar.Component.hour(_:);
    uint64_t v45 = v63 + 1;
    unint64_t v37 = v61 + 8;
    uint64_t v62 = (void (**)(char *, uint64_t, uint64_t))(v61 + 32);
    uint64_t v63 = (void (**)(char *, uint64_t))(v61 + 8);
    unint64_t v38 = 1;
    while (v41 != v38)
    {
      sub_10007AB88(v76, v35, (char *)v38, (uint64_t)v10);
      uint64_t v46 = v68;
      uint64_t v47 = (uint64_t)v10;
      uint64_t v48 = v69;
      (*v44)(v68, v64, v69);
      sub_1001293E0();
      uint64_t v49 = v46;
      uint64_t v42 = v75;
      (*v45)(v49, v48);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v34, 1, v42) == 1)
      {
        sub_100118718(v47, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
        sub_100118718((uint64_t)v58, (void (*)(void))type metadata accessor for ForecastEntry);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v74, v60);
        uint64_t v55 = *v63;
        (*v63)(v73, v42);
        v55(v57, v42);
        sub_10000D930(v34, &qword_10016C7B0);
        return v36;
      }
      uint64_t v50 = (uint64_t)v78;
      (*v62)(v78, v34, v42);
      uint64_t v51 = v79;
      uint64_t v52 = v35;
      sub_100113B94(v47, v50, v79);
      sub_100118510(v51, v80, (void (*)(void))type metadata accessor for ForecastEntry);
      unint64_t v54 = *(void *)(v36 + 16);
      unint64_t v53 = *(void *)(v36 + 24);
      uint64_t v39 = v54 + 1;
      uint64_t v10 = (char *)v47;
      if (v54 >= v53 >> 1) {
        uint64_t v36 = sub_100045B94(v53 > 1, v54 + 1, 1, v36);
      }
      ++v38;
      *(void *)(v36 + 16) = v39;
      sub_1001186BC(v80, v36 + v67 + v54 * v66, (void (*)(void))type metadata accessor for ForecastEntry);
      sub_100118718(v79, (void (*)(void))type metadata accessor for ForecastEntry);
      (*v63)(v78, v42);
      sub_100118718(v47, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
      uint64_t v41 = v72;
      uint64_t v35 = v52;
      uint64_t v34 = (uint64_t)v70;
      if (v72 == v38) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_15:
    uint64_t v36 = sub_100045B94(v37 > 1, v39, 1, v36);
  }
LABEL_5:
  sub_100118718((uint64_t)v58, (void (*)(void))type metadata accessor for ForecastEntry);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v74, v60);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v61 + 8);
  v43(v73, v42);
  v43(v57, v42);
  return v36;
}

uint64_t sub_100115514()
{
  swift_release();
  swift_release();
  sub_100118718(v0 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_eventViewModelFactory, (void (*)(void))type metadata accessor for EventViewModelFactory);

  sub_100118718(v0 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_aggregateWeatherViewModelFactory, (void (*)(void))type metadata accessor for AggregateWeatherViewModelFactory);
  sub_100118718(v0 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_instantWeatherViewModelFactory, (void (*)(void))type metadata accessor for InstantWeatherViewModelFactory);
  swift_release();
  sub_10000DB48(v0 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_appConfigurationManager);
  return v0;
}

uint64_t sub_1001155D8()
{
  sub_100115514();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100115630()
{
  return type metadata accessor for EntryFactory();
}

uint64_t type metadata accessor for EntryFactory()
{
  uint64_t result = qword_100171AA0;
  if (!qword_100171AA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100115680()
{
  uint64_t result = type metadata accessor for EventViewModelFactory();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AggregateWeatherViewModelFactory();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_10012BFA0();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

unint64_t sub_1001157B0()
{
  unint64_t result = qword_10016FD00;
  if (!qword_10016FD00)
  {
    sub_100005470(&qword_10016E890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10016FD00);
  }
  return result;
}

uint64_t sub_100115804@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ForecastEntry(0);
  sub_1001003D4(a2 + *(int *)(v4 + 24));
  sub_1001292B0();
  uint64_t v5 = sub_10012C920();
  sub_100012030(v5);
  *(unsigned char *)(a2 + *(int *)(v4 + 28)) = a1;
  type metadata accessor for ForecastEntry.Model(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100115898@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v217 = a1;
  uint64_t v221 = a2;
  uint64_t v218 = type metadata accessor for WeatherDataViewModel();
  sub_10000B3FC();
  __chkstk_darwin(v3);
  sub_10000DBCC();
  sub_1000999FC(v4);
  uint64_t v5 = type metadata accessor for WidgetContext();
  uint64_t v6 = sub_10000DC9C(v5);
  __chkstk_darwin(v6);
  sub_10000DBCC();
  uint64_t v8 = sub_1000999FC(v7);
  uint64_t v214 = type metadata accessor for AggregateWeatherViewModel(v8);
  sub_10000B3FC();
  __chkstk_darwin(v9);
  sub_10000DBCC();
  sub_100012098(v10);
  uint64_t v11 = sub_1000053D8(&qword_10016B438);
  uint64_t v12 = sub_10000DC9C(v11);
  __chkstk_darwin(v12);
  sub_10000DBCC();
  sub_100012098(v13);
  uint64_t v14 = sub_1000053D8(&qword_10016B408);
  uint64_t v15 = sub_10000DC9C(v14);
  __chkstk_darwin(v15);
  sub_10000DBCC();
  sub_100012098(v16);
  uint64_t v17 = sub_1000053D8(&qword_1001709E0);
  uint64_t v18 = sub_10000DC9C(v17);
  __chkstk_darwin(v18);
  sub_10000DBCC();
  sub_1000999FC(v19);
  uint64_t v20 = sub_10012A530();
  uint64_t v21 = sub_10000DC9C(v20);
  __chkstk_darwin(v21);
  sub_10000DBCC();
  uint64_t v263 = v22;
  sub_10000DCA8();
  uint64_t v239 = sub_10012A190();
  sub_10000DB98();
  uint64_t v226 = v23;
  __chkstk_darwin(v24);
  sub_10000DBCC();
  sub_1000999FC(v25);
  uint64_t v238 = sub_10012BDF0();
  sub_10000DB98();
  uint64_t v247 = v26;
  __chkstk_darwin(v27);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v28);
  sub_100011FAC();
  sub_1000999FC(v29);
  uint64_t v262 = sub_100129B10();
  sub_10000DB98();
  char v229 = v30;
  __chkstk_darwin(v31);
  sub_10000DBCC();
  uint64_t v272 = v32;
  sub_10000DCA8();
  uint64_t v210 = sub_10012C3F0();
  sub_10000DB98();
  uint64_t v242 = v33;
  __chkstk_darwin(v34);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v35);
  sub_100011FAC();
  sub_1000999FC(v36);
  uint64_t v228 = (void *)sub_10012C120();
  sub_10000DB98();
  long long v227 = v37;
  __chkstk_darwin(v38);
  sub_10000DBCC();
  sub_100012098(v39);
  uint64_t v40 = sub_1000053D8(&qword_10016C070);
  uint64_t v41 = sub_10000DC9C(v40);
  __chkstk_darwin(v41);
  sub_10000DBCC();
  sub_1000999FC(v42);
  uint64_t v43 = sub_100129E20();
  uint64_t v44 = sub_10000DC9C(v43);
  __chkstk_darwin(v44);
  sub_10000DBCC();
  uint64_t v264 = v45;
  sub_10000DCA8();
  uint64_t v46 = sub_100129E70();
  uint64_t v47 = sub_10000DC9C(v46);
  __chkstk_darwin(v47);
  sub_10000DBCC();
  sub_100012098(v48);
  uint64_t v49 = sub_1000053D8(&qword_10016C7B0);
  uint64_t v50 = sub_10000DC9C(v49);
  __chkstk_darwin(v50);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v51);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v52);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v53);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v54);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v55);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v56);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v57);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v58);
  sub_100011F60();
  uint64_t v261 = v59;
  sub_1000636C8();
  __chkstk_darwin(v60);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v61);
  sub_100011FAC();
  uint64_t v265 = v62;
  sub_10000DCA8();
  uint64_t v253 = sub_10012BB00();
  sub_10000DB98();
  v204._countAndFlagsBits = v63;
  __chkstk_darwin(v64);
  sub_10000DBCC();
  sub_100012098(v65);
  uint64_t v66 = sub_1000053D8(&qword_10016B098);
  uint64_t v67 = sub_10000DC9C(v66);
  __chkstk_darwin(v67);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v68);
  sub_100011FAC();
  sub_1000999FC(v69);
  uint64_t v213 = sub_10012C250();
  sub_10000DB98();
  uint64_t v212 = v70;
  __chkstk_darwin(v71);
  sub_10000DBCC();
  sub_100012098(v72);
  uint64_t v268 = sub_1000053D8(&qword_10016B060);
  sub_10000DB98();
  uint64_t v223 = v73;
  __chkstk_darwin(v74);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v75);
  sub_100011F60();
  uint64_t v275 = v76;
  sub_1000636C8();
  uint64_t v78 = __chkstk_darwin(v77);
  uint64_t v80 = (char *)&v203 - v79;
  __chkstk_darwin(v78);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v81);
  uint64_t v83 = (char *)&v203 - v82;
  uint64_t v270 = sub_100129300();
  sub_10000DB98();
  uint64_t v225 = v84;
  __chkstk_darwin(v85);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v86);
  sub_100011F60();
  sub_100011EF0();
  __chkstk_darwin(v87);
  sub_100011F60();
  uint64_t v269 = v88;
  sub_1000636C8();
  __chkstk_darwin(v89);
  uint64_t v91 = (char *)&v203 - v90;
  uint64_t v92 = sub_100129920();
  sub_10000DB98();
  uint64_t v94 = v93;
  __chkstk_darwin(v95);
  sub_10000DC50();
  uint64_t v98 = v97 - v96;
  uint64_t v99 = sub_100129330();
  uint64_t v100 = sub_10000DC9C(v99);
  __chkstk_darwin(v100);
  sub_10006D4E4();
  uint64_t v101 = sub_10012BBA0();
  sub_10000DB98();
  uint64_t v222 = v102;
  __chkstk_darwin(v103);
  sub_10000DCB4();
  sub_100011EF0();
  __chkstk_darwin(v104);
  sub_100011F60();
  uint64_t v273 = v105;
  sub_1000636C8();
  __chkstk_darwin(v106);
  uint64_t v108 = (char *)&v203 - v107;
  uint64_t v109 = v2;
  sub_100129320();
  uint64_t v110 = *(void **)(v94 + 104);
  uint64_t v206 = v92;
  v205._object = (void *)(v94 + 104);
  v204._object = v110;
  ((void (*)(uint64_t, void, uint64_t))v110)(v98, enum case for WeatherCondition.partlyCloudy(_:), v92);
  if (qword_10016AEE8 != -1) {
    swift_once();
  }
  unsigned int v111 = (objc_class *)(id)qword_100181E30;
  sub_1000AC04C();
  v276._countAndFlagsBits = 0x4320796C74726150;
  v276._object = (void *)0xED00007964756F6CLL;
  v279.value._countAndFlagsBits = 0;
  v279.value._object = 0;
  v112.super.isa = v111;
  v282._countAndFlagsBits = 0;
  v282._object = (void *)0xE000000000000000;
  sub_100129180(v276, v279, v112, v282, v203);

  LOBYTE(v203._countAndFlagsBits) = 0;
  uint64_t v274 = v109;
  uint64_t v207 = v98;
  sub_100118820();
  sub_10012BB80();
  sub_1001292B0();
  sub_100129030();
  uint64_t v113 = v251;
  sub_100129030();
  sub_100129030();
  sub_100129320();
  uint64_t v114 = v270;
  uint64_t v259 = *(void *)(v225 + 16);
  uint64_t v260 = v225 + 16;
  sub_1000999B4();
  v115();
  Swift::String v267 = v91;
  sub_100129280();
  uint64_t v116 = v223 + 16;
  uint64_t v117 = *(void (**)(void))(v223 + 16);
  uint64_t v118 = v268;
  sub_1001187BC();
  v117();
  uint64_t v246 = v83;
  sub_1001187BC();
  v117();
  uint64_t v249 = v80;
  sub_1001187BC();
  v117();
  sub_100118800();
  uint64_t v257 = v117;
  uint64_t v258 = v116;
  ((void (*)(void, uint64_t, uint64_t))v117)(v254, v113, v118);
  sub_100118800();
  uint64_t v119 = *(void *)(v222 + 16);
  uint64_t v243 = v108;
  uint64_t v266 = v101;
  uint64_t v256 = v222 + 16;
  uint64_t v255 = v119;
  sub_1000999B4();
  v120();
  (*(void (**)(uint64_t, void, uint64_t))(v204._countAndFlagsBits + 104))(v205._countAndFlagsBits, enum case for CloudAltitudeKind.low(_:), v253);
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v265, 1, 1, v114);
  uint64_t v121 = v244;
  sub_100117160(v244);
  uint64_t v253 = 6;
  uint64_t v122 = v245;
  sub_100129E40();
  uint64_t v123 = (uint64_t)v264;
  sub_100117724();
  uint64_t v124 = (objc_class *)(id)qword_100181E30;
  sub_1000AC04C();
  v277._countAndFlagsBits = 4804929;
  v277._object = (void *)0xE300000000000000;
  v280.value._countAndFlagsBits = 0;
  v280.value._object = 0;
  v125.super.isa = v124;
  v283._countAndFlagsBits = 0;
  v283._object = (void *)0xE000000000000000;
  sub_100129180(v277, v280, v125, v283, v204);

  uint64_t v126 = v209;
  void *v209 = 50;
  ((void (*)(void *, void, void *))v227[13])(v126, enum case for CurrentObservationViewModel.AirQuality.Value.number(_:), v228);
  uint64_t v127 = v208;
  sub_10012C140();
  uint64_t v128 = sub_10012C160();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v127, 0, 1, v128);
  v204._countAndFlagsBits = v123;
  v204._object = v127;
  v203._countAndFlagsBits = v121;
  v203._object = v122;
  sub_10012C1F0();
  unsigned int v230 = enum case for Precipitation.none(_:);
  uint64_t v254 = (void (**)(uint64_t, void, uint64_t))(v229 + 13);
  char v229 = v242 + 2;
  uint64_t v228 = v242 + 4;
  long long v227 = v242 + 1;
  uint64_t v129 = &_swiftEmptyArrayStorage;
  do
  {
    sub_100129320();
    sub_1000999B4();
    v130();
    sub_1000999B4();
    v131();
    sub_1000999B4();
    v132();
    uint64_t v133 = v272;
    uint64_t v252 = *v254;
    v252(v272, v230, v262);
    sub_100117724();
    v204._countAndFlagsBits = v133;
    v204._object = v264;
    v203._countAndFlagsBits = 0;
    v203._object = (void *)0xE000000000000000;
    sub_10012C3B0();
    sub_10006D61C();
    v134();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v129 = (void *)sub_100045E18(0, v129[2] + 1, 1, (uint64_t)v129);
    }
    unint64_t v136 = v129[2];
    unint64_t v135 = v129[3];
    if (v136 >= v135 >> 1)
    {
      char v139 = sub_1001187EC(v135);
      uint64_t v129 = (void *)sub_100045E18(v139, v140, v141, (uint64_t)v129);
    }
    v129[2] = v136 + 1;
    sub_100063AE4();
    v137();
    sub_10000B424();
    v138();
    --v253;
  }
  while (v253);
  uint64_t v210 = (uint64_t)v129;
  sub_100129320();
  ((void (*)(uint64_t, void, uint64_t))v204._object)(v207, enum case for WeatherCondition.rain(_:), v206);
  uint64_t v142 = (objc_class *)(id)qword_100181E30;
  sub_1000AC04C();
  v278._countAndFlagsBits = 0x796E696152;
  v278._object = (void *)0xE500000000000000;
  v281.value._countAndFlagsBits = 0;
  v281.value._object = 0;
  v143.super.isa = v142;
  v284._countAndFlagsBits = 0;
  v284._object = (void *)0xE000000000000000;
  sub_100129180(v278, v281, v143, v284, v205);

  LOBYTE(v205._countAndFlagsBits) = 0;
  sub_100118820();
  sub_10012BB80();
  uint64_t v242 = (void *)(v271 + OBJC_IVAR____TtC13WeatherWidget12EntryFactory_appConfigurationManager);
  unsigned int v230 = enum case for Precipitation.rain(_:);
  char v229 = (void *)(v226 + 8);
  uint64_t v228 = (void *)(v247 + 16);
  long long v227 = (void *)(v247 + 32);
  uint64_t v226 = v247 + 8;
  uint64_t v144 = &_swiftEmptyArrayStorage;
  uint64_t v145 = 7;
  uint64_t v146 = v249;
  uint64_t v147 = v251;
  uint64_t v148 = v250;
  do
  {
    uint64_t v264 = v144;
    uint64_t v253 = v145;
    sub_100129320();
    uint64_t v149 = v270;
    sub_1000999B4();
    v150();
    uint64_t v151 = v268;
    int v152 = v257;
    ((void (*)(uint64_t, char *, uint64_t))v257)(v275, v146, v268);
    ((void (*)(uint64_t, uint64_t, uint64_t))v152)(v148, v147, v151);
    sub_1000999B4();
    v153();
    v252(v272, v230, v262);
    sub_10000D890(v242, v242[3]);
    sub_10012A490();
    sub_10012A140();
    sub_10000B424();
    v154();
    sub_1000F9248(v265);
    sub_1000F9248(v244);
    sub_1000F9248(v261);
    sub_1000F9248(v231);
    sub_1000F9248(v232);
    sub_100117160(v233);
    sub_1000F9248(v234);
    sub_1000F9248(v235);
    uint64_t v155 = v236;
    sub_1000F9248(v236);
    uint64_t v156 = v237;
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v237, 1, 1, v149);
    v205._countAndFlagsBits = v155;
    v205._object = v156;
    uint64_t v157 = v240;
    uint64_t v148 = v250;
    sub_100129EE0();
    uint64_t v158 = sub_100129F10();
    _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v157, 0, 1, v158);
    uint64_t v159 = v241;
    sub_100117910(v241);
    uint64_t v160 = v245;
    sub_100129E40();
    v205._countAndFlagsBits = v159;
    v205._object = v160;
    v204._object = v157;
    v203._object = (void *)0xE000000000000000;
    v204._countAndFlagsBits = v263;
    v203._countAndFlagsBits = 0;
    sub_10012BD60();
    sub_10006D61C();
    v161();
    uint64_t v162 = (uint64_t)v264;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v163 = v162;
    }
    else {
      uint64_t v163 = sub_100045DD0(0, *(void *)(v162 + 16) + 1, 1, v162);
    }
    unint64_t v165 = *(void *)(v163 + 16);
    unint64_t v164 = *(void *)(v163 + 24);
    uint64_t v146 = v249;
    uint64_t v147 = v251;
    if (v165 >= v164 >> 1)
    {
      char v168 = sub_1001187EC(v164);
      uint64_t v163 = sub_100045DD0(v168, v169, v170, v171);
    }
    *(void *)(v163 + 16) = v165 + 1;
    uint64_t v144 = (void *)v163;
    sub_100063AE4();
    v166();
    sub_10000B424();
    v167();
    uint64_t v145 = v253 - 1;
  }
  while (v253 != 1);
  uint64_t v264 = v144;
  uint64_t v172 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
  uint64_t v173 = v215;
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v215, 1, 1, v172);
  uint64_t v174 = v211;
  sub_100117160(v211);
  uint64_t v175 = v270;
  int v176 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v174, 1, v270);
  uint64_t v177 = v225;
  if (v176 == 1)
  {
    sub_10000D930(v174, &qword_10016C7B0);
  }
  else
  {
    sub_10000D930(v173, &qword_10016B438);
    uint64_t v178 = *(void (**)(void *, uint64_t, uint64_t))(v177 + 32);
    object = v203._object;
    v178(v203._object, v174, v175);
    v178((void *)v173, (uint64_t)object, v175);
    swift_storeEnumTagMultiPayload();
    _s13WeatherWidget20WeatherDataViewModelOwst_0(v173, 0, 1, v172);
  }
  uint64_t v180 = v216;
  uint64_t v181 = v213;
  uint64_t v182 = v212;
  uint64_t v183 = v222;
  sub_100129320();
  Swift::String v184 = (int *)v214;
  sub_10012CE80();
  uint64_t v185 = v180 + v184[9];
  sub_100118314(v185);
  uint64_t v186 = type metadata accessor for AirQualityViewModel();
  _s13WeatherWidget20WeatherDataViewModelOwst_0(v185, 0, 1, v186);
  uint64_t v187 = sub_10012C6B0();
  sub_100012030(v187);
  uint64_t v188 = sub_100129220();
  sub_100012030(v188);
  sub_10006CCD8(v173, v180 + v184[14], &qword_10016B438);
  sub_1000999B4();
  v189();
  *(void *)(v180 + v184[7]) = v210;
  *(void *)(v180 + v184[8]) = v264;
  *(void *)(v180 + v184[11]) = &_swiftEmptyArrayStorage;
  uint64_t v190 = v180 + v184[12];
  *(void *)uint64_t v190 = 0x2010004020100;
  *(_WORD *)(v190 + 8) = 1;
  uint64_t v191 = v220;
  sub_1001003D4(v220);
  uint64_t v192 = v219;
  if (v217 == 192) {
    sub_10012BE60();
  }
  else {
    sub_100118510(v180, v219, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
  }
  uint64_t v193 = v223;
  uint64_t v194 = v225;
  uint64_t v195 = v266;
  swift_storeEnumTagMultiPayload();
  sub_100118718(v180, (void (*)(void))type metadata accessor for AggregateWeatherViewModel);
  sub_10000D930(v173, &qword_10016B438);
  uint64_t v196 = *(void (**)(uint64_t, uint64_t))(v183 + 8);
  v196(v248, v195);
  (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v224, v181);
  uint64_t v197 = v195;
  uint64_t v198 = *(void (**)(void))(v193 + 8);
  sub_1001187CC();
  v198();
  sub_1001187CC();
  v198();
  sub_1001187CC();
  v198();
  v196((uint64_t)v243, v197);
  uint64_t v199 = type metadata accessor for ForecastEntry(0);
  uint64_t v200 = v221;
  uint64_t v201 = sub_10012C920();
  sub_100012030(v201);
  sub_1001186BC(v192, v200 + *(int *)(v199 + 28), (void (*)(void))type metadata accessor for WeatherDataViewModel);
  type metadata accessor for ForecastEntry.Model(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, char *, uint64_t))(v194 + 32))(v200, v267, v270);
  return sub_1001186BC(v191, v200 + *(int *)(v199 + 24), (void (*)(void))type metadata accessor for WidgetContext);
}

uint64_t sub_100117160@<X0>(uint64_t a1@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v1 = sub_100129430();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000053D8(&qword_10016C7B0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  unint64_t v37 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v38 = (char *)v36 - v8;
  uint64_t v9 = sub_100129300();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  v36[0] = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v36 - v12;
  uint64_t v14 = sub_100129450();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v47 = v14;
  uint64_t v48 = v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100129480();
  uint64_t v44 = *(void *)(v18 - 8);
  uint64_t v45 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10012A6B0();
  uint64_t v41 = *(void *)(v21 - 8);
  uint64_t v42 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012CE80();
  uint64_t v39 = v23;
  sub_10012A6A0();
  uint64_t v40 = v20;
  sub_1001293B0();
  sub_1001292F0();
  uint64_t v24 = *(void (**)(char *, void, uint64_t))(v2 + 104);
  v24(v4, enum case for Calendar.Component.hour(_:), v1);
  uint64_t v25 = (uint64_t)v38;
  uint64_t v46 = v13;
  uint64_t v43 = v17;
  sub_1001293F0();
  uint64_t v26 = v9;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v2 + 8);
  v36[1] = v2 + 8;
  v27(v4, v1);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v25, 1, v26) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v26);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v47);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v45);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v42);
  }
  else
  {
    uint64_t v28 = v49;
    uint64_t v29 = v36[0];
    uint64_t v38 = *(char **)(v49 + 32);
    ((void (*)(void, uint64_t, uint64_t))v38)(v36[0], v25, v26);
    v24(v4, enum case for Calendar.Component.minute(_:), v1);
    uint64_t v30 = (uint64_t)v37;
    uint64_t v31 = v43;
    sub_1001293F0();
    v27(v4, v1);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v32(v29, v26);
    v32((uint64_t)v46, v26);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v47);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v45);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v42);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v30, 1, v26) != 1)
    {
      uint64_t v33 = v50;
      ((void (*)(uint64_t, uint64_t, uint64_t))v38)(v50, v30, v26);
      uint64_t v34 = 0;
      return _s13WeatherWidget20WeatherDataViewModelOwst_0(v33, v34, 1, v26);
    }
    uint64_t v25 = v30;
  }
  uint64_t v33 = v50;
  sub_10000D930(v25, &qword_10016C7B0);
  uint64_t v34 = 1;
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v33, v34, 1, v26);
}

uint64_t sub_100117724()
{
  uint64_t v0 = sub_1000053D8(&qword_100171B70);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000053D8(&qword_10016C060);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_1000053D8(&qword_1001718E8);
  __chkstk_darwin(v4 - 8);
  id v5 = [self degrees];
  sub_100046928(0, &qword_100171B78);
  sub_100128FF0();
  id v6 = [self milesPerHour];
  sub_100046928(0, &qword_100171B80);
  sub_100128FF0();
  _s13WeatherWidget20WeatherDataViewModelOwst_0((uint64_t)v2, 1, 1, v3);
  return sub_100129DE0();
}

uint64_t sub_100117910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v94 = a1;
  uint64_t v1 = sub_100129430();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v68[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_1000053D8(&qword_10016C7B0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v75 = &v68[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v74 = &v68[-v9];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v76 = &v68[-v11];
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v78 = &v68[-v13];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v81 = &v68[-v15];
  __chkstk_darwin(v14);
  uint64_t v17 = &v68[-v16];
  uint64_t v86 = sub_100129300();
  uint64_t v95 = *(void *)(v86 - 8);
  uint64_t v18 = __chkstk_darwin(v86);
  uint64_t v72 = &v68[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v77 = &v68[-v21];
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v79 = &v68[-v23];
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v80 = &v68[-v25];
  __chkstk_darwin(v24);
  uint64_t v27 = &v68[-v26];
  uint64_t v28 = sub_100129450();
  uint64_t v93 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v30 = &v68[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = sub_100129480();
  uint64_t v91 = *(void *)(v31 - 8);
  uint64_t v92 = v31;
  __chkstk_darwin(v31);
  uint64_t v33 = &v68[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v34 = sub_10012A6B0();
  uint64_t v89 = *(void *)(v34 - 8);
  uint64_t v90 = v34;
  __chkstk_darwin(v34);
  uint64_t v36 = &v68[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10012CE80();
  uint64_t v87 = v36;
  sub_10012A6A0();
  uint64_t v88 = v33;
  sub_1001293B0();
  sub_1001292F0();
  uint64_t v37 = enum case for Calendar.Component.hour(_:);
  uint64_t v83 = *(void (**)(void))(v2 + 104);
  ((void (*)(unsigned char *, void, uint64_t))v83)(v4, enum case for Calendar.Component.hour(_:), v1);
  sub_1001293F0();
  uint64_t v38 = v86;
  uint64_t v39 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
  uint64_t v84 = v2 + 8;
  uint64_t v85 = v1;
  uint64_t v82 = v39;
  v39(v4, v1);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v17, 1, v38) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v95 + 8))(v27, v38);
    uint64_t v40 = v94;
  }
  else
  {
    uint64_t v73 = v27;
    uint64_t v71 = v28;
    uint64_t v41 = v80;
    uint64_t v70 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v95 + 32);
    v70(v80, v17, v38);
    unsigned int v69 = enum case for Calendar.Component.minute(_:);
    uint64_t v42 = v85;
    v83(v4);
    uint64_t v43 = (uint64_t)v81;
    sub_1001293F0();
    v82(v4, v42);
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v43, 1, v38) == 1)
    {
      uint64_t v44 = *(void (**)(unsigned char *, uint64_t))(v95 + 8);
      v44(v41, v38);
      v44(v73, v38);
      uint64_t v17 = (unsigned char *)v43;
    }
    else
    {
      uint64_t v45 = v79;
      v70(v79, (unsigned char *)v43, v38);
      uint64_t v46 = v37;
      uint64_t v47 = v45;
      uint64_t v48 = v85;
      ((void (*)(unsigned char *, uint64_t, uint64_t))v83)(v4, v46, v85);
      uint64_t v49 = (uint64_t)v78;
      sub_1001293E0();
      v82(v4, v48);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v49, 1, v38) == 1)
      {
        uint64_t v50 = *(void (**)(unsigned char *, uint64_t))(v95 + 8);
        v50(v47, v38);
        v50(v41, v38);
        v50(v73, v38);
        uint64_t v17 = (unsigned char *)v49;
      }
      else
      {
        uint64_t v51 = v77;
        v70(v77, (unsigned char *)v49, v38);
        uint64_t v52 = v85;
        ((void (*)(unsigned char *, void, uint64_t))v83)(v4, v69, v85);
        uint64_t v53 = (uint64_t)v76;
        sub_1001293E0();
        v82(v4, v52);
        int v54 = _s13WeatherWidget20WeatherDataViewModelOwet_0(v53, 1, v38);
        uint64_t v55 = v95;
        uint64_t v56 = v73;
        if (v54 != 1)
        {
          uint64_t v61 = v72;
          v70(v72, (unsigned char *)v53, v38);
          uint64_t v62 = v38;
          uint64_t v63 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v55 + 16);
          uint64_t v64 = (uint64_t)v74;
          uint64_t v65 = v79;
          v63(v74, v79, v62);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v64, 0, 1, v62);
          uint64_t v66 = (uint64_t)v75;
          v63(v75, v61, v62);
          _s13WeatherWidget20WeatherDataViewModelOwst_0(v66, 0, 1, v62);
          uint64_t v40 = v94;
          sub_100129A30();
          uint64_t v67 = *(void (**)(unsigned char *, uint64_t))(v55 + 8);
          v67(v61, v62);
          v67(v77, v62);
          v67(v65, v62);
          v67(v41, v62);
          v67(v73, v62);
          (*(void (**)(unsigned char *, uint64_t))(v93 + 8))(v30, v71);
          (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v88, v92);
          (*(void (**)(unsigned char *, uint64_t))(v89 + 8))(v87, v90);
          uint64_t v58 = 0;
          goto LABEL_11;
        }
        uint64_t v57 = *(void (**)(unsigned char *, uint64_t))(v95 + 8);
        v57(v51, v38);
        v57(v79, v38);
        v57(v41, v38);
        v57(v56, v38);
        uint64_t v17 = (unsigned char *)v53;
      }
    }
    uint64_t v40 = v94;
    uint64_t v28 = v71;
  }
  (*(void (**)(unsigned char *, uint64_t))(v93 + 8))(v30, v28);
  (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v88, v92);
  (*(void (**)(unsigned char *, uint64_t))(v89 + 8))(v87, v90);
  sub_10000D930((uint64_t)v17, &qword_10016C7B0);
  uint64_t v58 = 1;
LABEL_11:
  uint64_t v59 = sub_100129A40();
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v40, v58, 1, v59);
}

uint64_t sub_100118314@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100129C70();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for AirQualityViewModel();
  uint64_t v4 = a1 + *(int *)(v3 + 32);
  sub_100129C20();
  sub_1000053D8(&qword_100171B68);
  uint64_t v5 = sub_100129C50();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100130010;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(v8 + v7, v4, v5);
  sub_100129C60();
  sub_100129B20();
  sub_100129320();
  uint64_t result = sub_1001292F0();
  *(void *)(a1 + *(int *)(v3 + 24)) = 42;
  return result;
}

uint64_t sub_100118510(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  sub_10006D61C();
  v4();
  return a2;
}

void sub_10011856C()
{
  sub_100047278();
  unint64_t v6 = v5 >> 1;
  uint64_t v7 = (v5 >> 1) - v1;
  if (__OFSUB__(v5 >> 1, v1))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = v4;
  uint64_t v9 = v3;
  uint64_t v10 = v1;
  uint64_t v11 = v0;
  if (v7 > 0)
  {
    sub_1000053D8(v2);
    uint64_t v12 = v9(0);
    sub_100047198(v12);
    uint64_t v14 = *(void *)(v13 + 72);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v17 = (void *)swift_allocObject();
    size_t v18 = j__malloc_size(v17);
    if (v14)
    {
      if (v18 - v16 != 0x8000000000000000 || v14 != -1)
      {
        v17[2] = v7;
        v17[3] = 2 * ((uint64_t)(v18 - v16) / v14);
        goto LABEL_12;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v17 = &_swiftEmptyArrayStorage;
LABEL_12:
  if (v6 != v10)
  {
    uint64_t v20 = v9(0);
    sub_100047198(v20);
    v8(v11 + *(void *)(v22 + 72) * v10, v7, (char *)v17 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)));
LABEL_14:
    sub_100047260();
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_1001186BC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  sub_100063AE4();
  v4();
  return a2;
}

uint64_t sub_100118718(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3FC();
  sub_10000B424();
  v3();
  return a1;
}

uint64_t sub_10011876C()
{
  return v0;
}

uint64_t sub_10011878C()
{
  return v0;
}

BOOL sub_1001187EC@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100118800()
{
  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v1, 0, 1, v0);
}

unint64_t sub_100118838()
{
  unint64_t result = qword_100171B90;
  if (!qword_100171B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171B90);
  }
  return result;
}

uint64_t sub_100118884()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1001188D4()
{
  unint64_t result = qword_100171B98;
  if (!qword_100171B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171B98);
  }
  return result;
}

uint64_t sub_100118920(uint64_t a1)
{
  unint64_t v2 = sub_1001188D4();

  return AppIntentsExtension.configuration.getter(a1, v2);
}

ValueMetadata *type metadata accessor for WeatherSettingsIntentsExtension()
{
  return &type metadata for WeatherSettingsIntentsExtension;
}

ValueMetadata *type metadata accessor for HomeWorkShowLabelsControlWidget()
{
  return &type metadata for HomeWorkShowLabelsControlWidget;
}

uint64_t sub_10011898C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001189A8()
{
  sub_1000053D8(&qword_1001718B8);
  sub_10000DB98();
  __chkstk_darwin(v0);
  sub_10000DC50();
  sub_1000053D8(&qword_1001718C0);
  sub_10000DB98();
  __chkstk_darwin(v1);
  sub_10000DC50();
  sub_1000053D8(&qword_1001718C8);
  sub_10000DB98();
  __chkstk_darwin(v2);
  sub_10000DC50();
  sub_1000053D8(&qword_1001718D0);
  sub_10000DB98();
  __chkstk_darwin(v3);
  sub_10000DC50();
  swift_getKeyPath();
  sub_1000F7218();
  sub_10012C840();
  sub_10012AF80();
  sub_10010D608();
  sub_10012B0A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000B424();
  v4();
  sub_10012AF80();
  swift_getOpaqueTypeConformance2();
  sub_10012B060();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000B424();
  v5();
  swift_getOpaqueTypeConformance2();
  sub_10012B0C0();
  sub_10000B424();
  v6();
  swift_getOpaqueTypeConformance2();
  sub_10012B080();
  sub_10000B424();
  return v7();
}

uint64_t sub_100118D90@<X0>(uint64_t a1@<X8>)
{
  return sub_10010D510(a1);
}

uint64_t sub_100118DBC(char a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  if (qword_10016AE30 != -1) {
    swift_once();
  }
  sub_10012A930();
  sub_10000D890(v7, v8);
  sub_1000053D8(&qword_10016F248);
  uint64_t result = sub_100125694();
  if (!v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  sub_100070A60(&v5, v3 + 40);
  sub_100125444(v7);
  type metadata accessor for WeatherDataService();
  uint64_t result = sub_100125464();
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(void *)(v3 + 80) = result;
  sub_100125444(v7);
  type metadata accessor for EntryFactory();
  uint64_t result = sub_100125464();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(void *)(v3 + 88) = result;
  sub_100125444(v7);
  type metadata accessor for RefreshPolicyProvider();
  uint64_t result = sub_100125464();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(void *)(v3 + 96) = result;
  sub_100125444(v7);
  type metadata accessor for WidgetLocationManager();
  uint64_t result = sub_100125464();
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(void *)(v3 + 104) = result;
  sub_100125444(v7);
  sub_10012A450();
  uint64_t result = sub_100125464();
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(void *)(v3 + 112) = result;
  sub_100125444(v7);
  type metadata accessor for DemoManager();
  uint64_t result = sub_100125464();
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(void *)(v3 + 120) = result;
  sub_10000D890(v7, v8);
  sub_1000053D8(&qword_100171CE0);
  uint64_t result = sub_100125694();
  if (v6)
  {
    sub_100070A60(&v5, v3 + 128);
    sub_100118F80();
    sub_10000DB48((uint64_t)v7);
    return v3;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_100118F80()
{
  uint64_t v1 = sub_10012A190();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012A220();
  swift_allocObject();
  sub_10012A210();
  sub_10000D890((void *)(v0 + 40), *(void *)(v0 + 64));
  sub_10012A490();
  sub_10012A1E0();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

BOOL sub_1001190A4()
{
  sub_100129FD0();
  sub_100129FC0();
  sub_100129F20();
  sub_100129FB0();
  swift_release();
  swift_release();
  uint64_t v0 = sub_10012A290();
  uint64_t v2 = v1;
  if (v0 == sub_10012A290() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  char v5 = sub_10012D1F0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL result = 0;
  if (v5)
  {
LABEL_8:
    sub_100129FC0();
    sub_100129F30();
    sub_100129FB0();
    swift_release();
    swift_release();
    return v7 == 0;
  }
  return result;
}

void sub_1001191AC()
{
  sub_100047278();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v48 = type metadata accessor for ForecastEntry(0);
  sub_10000B3FC();
  __chkstk_darwin(v7);
  sub_10000DCB4();
  uint64_t v47 = v8;
  sub_1000636C8();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = sub_10012C950();
  sub_10000DB98();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_10000DCB4();
  uint64_t v46 = v16;
  sub_1000636C8();
  __chkstk_darwin(v17);
  sub_100125550();
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10012AB60();
  uint64_t v19 = sub_10000D7A4(v18, (uint64_t)qword_100181C40);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v44(v1, v4, v12);
  swift_retain();
  uint64_t v20 = sub_10012AB40();
  os_log_type_t v21 = sub_10012CD60();
  int v45 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v42 = v6;
    uint64_t v23 = v22;
    uint64_t v40 = sub_1001256FC();
    uint64_t v50 = v40;
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v43 = v11;
    uint64_t v41 = v19;
    uint64_t v25 = *(void *)(v2 + 24);
    unint64_t v24 = *(void *)(v2 + 32);
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_100123564(v25, v24, &v50);
    sub_10012CF70();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    v44(v46, v1, v12);
    uint64_t v26 = sub_10012CAB0();
    uint64_t v49 = sub_100123564(v26, v27, &v50);
    uint64_t v11 = v43;
    sub_10012CF70();
    swift_bridgeObjectRelease();
    uint64_t v28 = sub_100125668();
    v29(v28);
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v45, "About to build a placeholder entry for %s. context=%{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    sub_10000DBB4();
    uint64_t v6 = v42;
    sub_10000DBB4();
  }
  else
  {
    swift_release();
    uint64_t v30 = sub_100125668();
    v31(v30);
  }

  sub_100115898(*(unsigned __int8 *)(v2 + 16), v6);
  sub_10012431C(v6, (uint64_t)v11, (void (*)(void))type metadata accessor for ForecastEntry);
  swift_retain();
  uint64_t v32 = sub_10012AB40();
  os_log_type_t v33 = sub_10012CD60();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = sub_10000DCC8();
    uint64_t v50 = sub_1001256FC();
    *(_DWORD *)uint64_t v34 = 136315651;
    uint64_t v35 = *(void *)(v2 + 24);
    unint64_t v36 = *(void *)(v2 + 32);
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_100123564(v35, v36, &v50);
    sub_10012CF70();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2160;
    uint64_t v49 = 1752392040;
    sub_10012CF70();
    *(_WORD *)(v34 + 22) = 2081;
    sub_10012431C((uint64_t)v11, v47, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v37 = sub_10012CAA0();
    uint64_t v49 = sub_100123564(v37, v38, &v50);
    sub_10012CF70();
    swift_bridgeObjectRelease();
    sub_100123D04((uint64_t)v11, (void (*)(void))type metadata accessor for ForecastEntry);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Returning placeholder entry for %s. entry=%{private,mask.hash}s", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    sub_10000DBB4();
    sub_10000DBB4();
  }
  else
  {
    swift_release();
    sub_100123D04((uint64_t)v11, (void (*)(void))type metadata accessor for ForecastEntry);
  }

  sub_100047260();
}

uint64_t sub_10011969C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v48 = a2;
  uint64_t v5 = sub_10012C8D0();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v41 - v8;
  uint64_t v10 = type metadata accessor for ForecastEntry(0);
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v43 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v41 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v41 - v16;
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10012AB60();
  sub_10000D7A4(v18, (uint64_t)qword_100181C40);
  swift_retain();
  uint64_t v19 = sub_10012AB40();
  os_log_type_t v20 = sub_10012CD60();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v47 = v9;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v42 = v15;
    uint64_t v23 = v22;
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315651;
    uint64_t v41 = v17;
    char v24 = a1;
    uint64_t v26 = *(void *)(v3 + 24);
    unint64_t v25 = *(void *)(v3 + 32);
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_100123564(v26, v25, &v52);
    sub_10012CF70();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2160;
    uint64_t v51 = 1752392040;
    sub_10012CF70();
    *(_WORD *)(v23 + 22) = 2081;
    LOBYTE(v51) = v24;
    uint64_t v27 = sub_10012CAB0();
    uint64_t v51 = sub_100123564(v27, v28, &v52);
    uint64_t v9 = v47;
    sub_10012CF70();
    a1 = v24;
    uint64_t v17 = v41;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "About to build an error timeline for %s. error=%{private,mask.hash}s", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v15 = v42;
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  sub_100115804(a1, (uint64_t)v17);
  uint64_t v30 = *(void *)(v3 + 24);
  unint64_t v29 = *(void *)(v3 + 32);
  sub_10000D52C(a1, v30, v29, (uint64_t)v9);
  sub_10012431C((uint64_t)v17, (uint64_t)v15, (void (*)(void))type metadata accessor for ForecastEntry);
  swift_retain();
  uint64_t v31 = sub_10012AB40();
  os_log_type_t v32 = sub_10012CD60();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315651;
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_100123564(v30, v29, &v52);
    sub_10012CF70();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2160;
    uint64_t v51 = 1752392040;
    sub_10012CF70();
    *(_WORD *)(v33 + 22) = 2081;
    sub_10012431C((uint64_t)v15, v43, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v34 = sub_10012CAA0();
    uint64_t v51 = sub_100123564(v34, v35, &v52);
    sub_10012CF70();
    uint64_t v9 = v47;
    swift_bridgeObjectRelease();
    sub_100123D04((uint64_t)v15, (void (*)(void))type metadata accessor for ForecastEntry);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Returning error timeline for %s. entry=%{private,mask.hash}s", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_100123D04((uint64_t)v15, (void (*)(void))type metadata accessor for ForecastEntry);
  }

  sub_1000053D8(&qword_10016C7D0);
  unint64_t v36 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_100130010;
  sub_10012431C((uint64_t)v17, v37 + v36, (void (*)(void))type metadata accessor for ForecastEntry);
  uint64_t v38 = v49;
  uint64_t v39 = v50;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v9, v50);
  sub_10011BB0C();
  sub_10012C960();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
  return sub_100123D04((uint64_t)v17, (void (*)(void))type metadata accessor for ForecastEntry);
}

uint64_t sub_100119D48@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v65 = a3;
  uint64_t v55 = type metadata accessor for WeatherDataOperationResult.Data(0);
  __chkstk_darwin(v55);
  uint64_t v54 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for WeatherDataOperationResult(0);
  __chkstk_darwin(v61);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for ForecastEntry(0);
  uint64_t v7 = __chkstk_darwin(v66);
  uint64_t v53 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v56 = (uint64_t)&v52 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v52 - v11;
  uint64_t v13 = sub_100129300();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000053D8(&qword_10016B318);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  BOOL v21 = (char *)&v52 - v20;
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  int v62 = a2;
  uint64_t v22 = sub_10012AB60();
  uint64_t v23 = sub_10000D7A4(v22, (uint64_t)qword_100181C40);
  swift_retain();
  uint64_t v58 = v23;
  char v24 = sub_10012AB40();
  os_log_type_t v25 = sub_10012CD60();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v64 = v21;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v57 = v12;
    uint64_t v69 = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v52 = v6;
    uint64_t v29 = *(void *)(v67 + 24);
    unint64_t v30 = *(void *)(v67 + 32);
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_100123564(v29, v30, &v69);
    sub_10012CF70();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    LOBYTE(v68) = v62;
    uint64_t v31 = sub_10012CAB0();
    uint64_t v68 = sub_100123564(v31, v32, &v69);
    uint64_t v6 = v52;
    sub_10012CF70();
    BOOL v21 = v64;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "About to build a single timeline entry for %s. locationState=%{public}s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    uint64_t v12 = v57;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  sub_1001292F0();
  uint64_t v33 = v63;
  sub_100112538();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v60);
  sub_10006CCD8((uint64_t)v21, (uint64_t)v19, &qword_10016B318);
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v19, 1, v66) == 1)
  {
    sub_10000B2A8((uint64_t)v19, &qword_10016B318);
    sub_10012431C(v33, (uint64_t)v6, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
    swift_retain();
    uint64_t v34 = (uint64_t)v6;
    unint64_t v35 = sub_10012AB40();
    os_log_type_t v36 = sub_10012CD40();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315651;
      uint64_t v38 = *(void *)(v67 + 24);
      unint64_t v39 = *(void *)(v67 + 32);
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_100123564(v38, v39, &v69);
      sub_10012CF70();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2160;
      uint64_t v68 = 1752392040;
      sub_10012CF70();
      *(_WORD *)(v37 + 22) = 2081;
      sub_10012431C(v34, v54, (void (*)(void))type metadata accessor for WeatherDataOperationResult.Data);
      uint64_t v40 = sub_10012CAA0();
      uint64_t v68 = sub_100123564(v40, v41, &v69);
      BOOL v21 = v64;
      sub_10012CF70();
      swift_bridgeObjectRelease();
      sub_100123D04(v34, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Could not build single timeline entry for %s (returning .noWeatherData). weatherDataOperationResult.data=%{private,mask.hash}s", (uint8_t *)v37, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_100123D04(v34, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
    }

    sub_100115804(2, v65);
    return sub_10000B2A8((uint64_t)v21, &qword_10016B318);
  }
  else
  {
    sub_10012423C((uint64_t)v19, (uint64_t)v12, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v42 = v56;
    sub_10012431C((uint64_t)v12, v56, (void (*)(void))type metadata accessor for ForecastEntry);
    swift_retain_n();
    uint64_t v43 = sub_10012AB40();
    os_log_type_t v44 = sub_10012CD60();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315651;
      uint64_t v57 = v12;
      uint64_t v46 = *(void *)(v67 + 24);
      unint64_t v47 = *(void *)(v67 + 32);
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_100123564(v46, v47, &v69);
      sub_10012CF70();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2160;
      uint64_t v68 = 1752392040;
      sub_10012CF70();
      *(_WORD *)(v45 + 22) = 2081;
      sub_10012431C(v42, v53, (void (*)(void))type metadata accessor for ForecastEntry);
      uint64_t v48 = sub_10012CAA0();
      uint64_t v68 = sub_100123564(v48, v49, &v69);
      sub_10012CF70();
      uint64_t v12 = v57;
      swift_bridgeObjectRelease();
      sub_100123D04(v42, (void (*)(void))type metadata accessor for ForecastEntry);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Successfully built single timeline entry for %s. entry=%{private,mask.hash}s", (uint8_t *)v45, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v50 = (uint64_t)v64;
    }
    else
    {

      sub_100123D04(v42, (void (*)(void))type metadata accessor for ForecastEntry);
      swift_release_n();
      uint64_t v50 = (uint64_t)v21;
    }
    sub_10000B2A8(v50, &qword_10016B318);
    return sub_10012423C((uint64_t)v12, v65, (void (*)(void))type metadata accessor for ForecastEntry);
  }
}

void sub_10011A6BC()
{
  sub_100047278();
  uint64_t v1 = v0;
  uint64_t v102 = v3;
  uint64_t v103 = v2;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v93 = v8;
  uint64_t v89 = sub_1000053D8(&qword_100171CB8);
  sub_10000DB98();
  uint64_t v88 = v9;
  __chkstk_darwin(v10);
  sub_1000AC07C(v11, v86);
  uint64_t v107 = sub_10012C8D0();
  sub_10000DB98();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_10000DCB4();
  uint64_t v90 = v15;
  sub_1000636C8();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v86 - v17;
  sub_10012C800();
  sub_10000DB98();
  uint64_t v100 = v20;
  uint64_t v101 = v19;
  __chkstk_darwin(v19);
  sub_10000DBCC();
  uint64_t v99 = v21;
  uint64_t v95 = sub_10012A5E0();
  sub_10000B3FC();
  __chkstk_darwin(v22);
  sub_10000DBCC();
  uint64_t v94 = v23;
  uint64_t v24 = sub_10012A6B0();
  sub_10000DB98();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  sub_10000DCB4();
  uint64_t v86 = v28;
  sub_1000636C8();
  __chkstk_darwin(v29);
  uint64_t v105 = (char *)&v86 - v30;
  sub_1000636C8();
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v86 - v32;
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v34 = sub_10012AB60();
  uint64_t v35 = sub_10000D7A4(v34, (uint64_t)qword_100181C40);
  uint64_t v36 = *(void *)(v26 + 16);
  uint64_t v104 = v7;
  uint64_t v96 = v36;
  uint64_t v97 = v26 + 16;
  sub_1000999B4();
  v37();
  swift_retain();
  uint64_t v98 = v35;
  uint64_t v38 = sub_10012AB40();
  os_log_type_t v39 = sub_10012CD60();
  int v87 = v39;
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v110 = v24;
  uint64_t v108 = v26;
  uint64_t v91 = v13;
  if (v40)
  {
    uint64_t v41 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t v109 = v1;
    v112[0] = v42;
    *(_DWORD *)uint64_t v41 = 136315907;
    uint64_t v43 = *(void *)(v109 + 24);
    unint64_t v44 = *(void *)(v109 + 32);
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_100123564(v43, v44, v112);
    sub_10012552C(v45);
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2082;
    LOBYTE(v111) = v5;
    uint64_t v46 = sub_10012CAB0();
    uint64_t v111 = sub_100125584(v46, v47);
    sub_10012CF70();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 22) = 2160;
    sub_100125508();
    *(_WORD *)(v41 + 32) = 2081;
    sub_10012A600();
    uint64_t v48 = sub_10012CAB0();
    uint64_t v111 = sub_100125584(v48, v49);
    sub_10012CF70();
    swift_bridgeObjectRelease();
    uint64_t v92 = *(void (**)(char *, uint64_t))(v108 + 8);
    sub_1000999D0();
    v50();
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v87, "About to build a timeline for %s. locationState=%{public}s, location: %{private,mask.hash}s", (uint8_t *)v41, 0x2Au);
    swift_arrayDestroy();
    uint64_t v1 = v109;
    sub_10000DBB4();
    sub_10000DBB4();
  }
  else
  {
    swift_release();
    uint64_t v92 = *(void (**)(char *, uint64_t))(v26 + 8);
    v92(v33, v24);
  }

  type metadata accessor for WeatherDataOperationResult(0);
  sub_10012C930();
  sub_1001130A8();
  char v51 = v5;
  uint64_t v53 = v52;
  sub_10000B424();
  v54();
  uint64_t v55 = v107;
  if (v53)
  {
    uint64_t v56 = v1;
    uint64_t v57 = *(void *)(v1 + 24);
    unint64_t v58 = *(void *)(v56 + 32);
    sub_10000B444(v53, v51, v57, v58, (uint64_t)v18);
    uint64_t v59 = v18;
    uint64_t v60 = v91;
    sub_1000999B4();
    v61();
    type metadata accessor for ForecastEntry(0);
    sub_10011BB0C();
    sub_10012C960();
    sub_1000999B4();
    v62();
    swift_retain_n();
    uint64_t v63 = sub_10012AB40();
    os_log_type_t v64 = sub_10012CD60();
    int v65 = v64;
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v66 = sub_10000DCC8();
      v112[0] = sub_1001256FC();
      *(_DWORD *)uint64_t v66 = 136315651;
      LODWORD(v109) = v65;
      swift_bridgeObjectRetain();
      uint64_t v111 = sub_100123564(v57, v58, v112);
      sub_10012CF70();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2160;
      sub_100125508();
      *(_WORD *)(v66 + 22) = 2081;
      uint64_t v104 = v59;
      sub_10012A600();
      uint64_t v67 = sub_10012CAB0();
      uint64_t v111 = sub_100125584(v67, v68);
      sub_10012CF70();
      swift_bridgeObjectRelease();
      sub_100125610();
      sub_1000999D0();
      v69();
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v109, "Timeline: successfully built for %s! location: %{private,mask.hash}s", (uint8_t *)v66, 0x20u);
      swift_arrayDestroy();
      sub_10000DBB4();
      sub_10000DBB4();

      (*(void (**)(char *, uint64_t))(v60 + 8))(v104, v107);
    }
    else
    {

      sub_100125610();
      sub_1000999D0();
      v85();
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v55);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v93, v106, v89);
  }
  else
  {
    char v70 = v51;
    uint64_t v71 = v86;
    uint64_t v72 = v110;
    sub_1000999B4();
    v73();
    swift_retain();
    uint64_t v74 = sub_10012AB40();
    os_log_type_t v75 = sub_10012CD60();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = swift_slowAlloc();
      uint64_t v109 = swift_slowAlloc();
      v112[0] = v109;
      *(_DWORD *)uint64_t v76 = 136315907;
      uint64_t v77 = *(void *)(v1 + 24);
      unint64_t v78 = *(void *)(v1 + 32);
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100123564(v77, v78, v112);
      sub_10012552C(v79);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v76 + 12) = 2082;
      LOBYTE(v111) = v70;
      uint64_t v80 = sub_10012CAB0();
      uint64_t v111 = sub_100123564(v80, v81, v112);
      sub_10012CF70();
      swift_bridgeObjectRelease();
      *(_WORD *)(v76 + 22) = 2160;
      sub_1001255FC();
      sub_10012CF70();
      *(_WORD *)(v76 + 32) = 2081;
      sub_10012A600();
      uint64_t v82 = sub_10012CAB0();
      uint64_t v111 = sub_100125584(v82, v83);
      sub_10012CF70();
      swift_bridgeObjectRelease();
      sub_100125610();
      sub_1000999D0();
      v84();
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Timeline: failed for %s (no entries so returning .noWeatherData). locationState=%{public}s, location: %{private,mask.hash}s", (uint8_t *)v76, 0x2Au);
      swift_arrayDestroy();
      sub_10000DBB4();
      sub_10000DBB4();
    }
    else
    {
      swift_release();
      sub_100125610();
      v92((char *)v71, v72);
    }

    sub_10011969C(2, v93);
  }
  sub_100047260();
}

uint64_t sub_10011B048()
{
  uint64_t v1 = sub_10012A2D0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D890((void *)(v0 + 128), *(void *)(v0 + 152));
  sub_10012A4B0();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_10011B12C()
{
  uint64_t v1 = v0;
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10012AB60();
  sub_10000D7A4(v2, (uint64_t)qword_100181C40);
  uint64_t v3 = sub_10012AB40();
  os_log_type_t v4 = sub_10012CD60();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "About to refresh the app config - taking RBAssertion", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = sub_10011B30C();
  sub_10012A190();
  sub_10012A900();
  uint64_t v7 = (void *)sub_10012A870();
  sub_10012A8B0();
  swift_release();

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  *(void *)(v8 + 24) = v6;
  id v9 = v6;
  swift_retain();
  id v10 = (id)sub_10012A870();
  sub_10012A8D0();

  swift_release();
  swift_release();
  swift_release();
}

id sub_10011B30C()
{
  sub_100046928(0, &qword_100171CC8);
  id v0 = sub_10011B9BC();
  id v1 = [self currentProcess];
  sub_1000053D8(&qword_100171CD0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100138810;
  *(void *)(v2 + 32) = v0;
  sub_10012CBC0();
  objc_allocWithZone((Class)RBSAssertion);
  id v3 = v0;
  id v4 = sub_1001234BC(0xD00000000000001FLL, 0x800000010013D560, v1);
  id v14 = 0;
  if ([v4 acquireWithError:&v14])
  {
    id v5 = v14;
  }
  else
  {
    id v6 = v14;
    sub_1001291B0();

    swift_willThrow();
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10012AB60();
    sub_10000D7A4(v7, (uint64_t)qword_100181C40);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = sub_10012AB40();
    os_log_type_t v9 = sub_10012CD60();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      id v14 = (id)swift_slowAlloc();
      *(_DWORD *)id v10 = 136315138;
      swift_errorRetain();
      sub_1000053D8(&qword_10016C870);
      uint64_t v11 = sub_10012CAB0();
      sub_100123564(v11, v12, (uint64_t *)&v14);
      sub_10012CF70();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "failed to acquire runningboard assertion. error=%s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    [v4 invalidate];
    swift_errorRelease();

    return 0;
  }
  return v4;
}

uint64_t sub_10011B678(uint64_t a1)
{
  return sub_10012A4A0();
}

void sub_10011B6CC()
{
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10012AB60();
  sub_10000D7A4(v0, (uint64_t)qword_100181C40);
  swift_errorRetain();
  swift_errorRetain();
  oslog = sub_10012AB40();
  os_log_type_t v1 = sub_10012CD40();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    swift_errorRetain();
    sub_1000053D8(&qword_10016C870);
    uint64_t v3 = sub_10012CAB0();
    sub_100123564(v3, v4, &v6);
    sub_10012CF70();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Error refreshing app config. Error: %s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_10011B8C4(int a1, id a2)
{
  [a2 invalidate];
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10012AB60();
  sub_10000D7A4(v2, (uint64_t)qword_100181C40);
  oslog = sub_10012AB40();
  os_log_type_t v3 = sub_10012CD60();
  if (os_log_type_enabled(oslog, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Just refreshed the app config - release RBAssertion", v4, 2u);
    swift_slowDealloc();
  }
}

id sub_10011B9BC()
{
  NSString v0 = sub_10012CA20();
  swift_bridgeObjectRelease();
  NSString v1 = sub_10012CA20();
  swift_bridgeObjectRelease();
  id v2 = [(id)swift_getObjCClassFromMetadata() attributeWithDomain:v0 name:v1];

  return v2;
}

uint64_t sub_10011BA50()
{
  swift_bridgeObjectRelease();
  sub_10000DB48(v0 + 40);
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  sub_10000DB48(v0 + 128);
  return v0;
}

uint64_t sub_10011BAB0()
{
  sub_10011BA50();

  return _swift_deallocClassInstance(v0, 168, 7);
}

uint64_t type metadata accessor for WeatherTimelineProvider()
{
  return self;
}

unint64_t sub_10011BB0C()
{
  unint64_t result = qword_1001709D8;
  if (!qword_1001709D8)
  {
    type metadata accessor for ForecastEntry(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001709D8);
  }
  return result;
}

void sub_10011BB5C()
{
  sub_100047278();
  uint64_t v2 = v0;
  uint64_t v48 = v3;
  id v5 = v4;
  uint64_t v7 = v6;
  sub_10012C800();
  sub_10000DB98();
  uint64_t v44 = v8;
  __chkstk_darwin(v9);
  uint64_t v11 = sub_1000AC07C(v10, v41[0]);
  uint64_t v12 = type metadata accessor for ForecastEntry(v11);
  uint64_t v13 = sub_100047198(v12);
  uint64_t v45 = v14;
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  sub_100125550();
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10012AB60();
  uint64_t v20 = sub_10000D7A4(v19, (uint64_t)qword_100181C40);
  swift_retain();
  uint64_t v21 = sub_10012AB40();
  os_log_type_t v22 = sub_10012CD60();
  if (os_log_type_enabled(v21, v22))
  {
    v41[0] = v20;
    uint64_t v23 = swift_slowAlloc();
    unint64_t v47 = v5;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = sub_10000DCC8();
    void v41[2] = v16;
    uint64_t v49 = v25;
    uint64_t v46 = v1;
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v42 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v41[1] = v7;
    uint64_t v27 = *(void *)(v2 + 24);
    unint64_t v26 = *(void *)(v2 + 32);
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_100123564(v27, v26, &v49);
    sub_10008F978(v28);
    uint64_t v18 = v42;
    uint64_t v1 = v46;
    sub_10012CF70();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Accessory - Snapshot Requested for %s", v24, 0xCu);
    swift_arrayDestroy();
    sub_10000DBB4();
    id v5 = v47;
    sub_10000DBB4();
  }
  else
  {

    swift_release();
  }
  if (sub_10012C940())
  {
    swift_retain();
    uint64_t v29 = sub_10012AB40();
    os_log_type_t v30 = sub_10012CD60();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v47 = v5;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = sub_10000DCC8();
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v46 = v1;
      uint64_t v32 = *(void *)(v2 + 24);
      unint64_t v33 = *(void *)(v2 + 32);
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_100123564(v32, v33, &v49);
      sub_10008F978(v34);
      id v5 = v47;
      sub_10012CF70();
      swift_release();
      uint64_t v1 = v46;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Accessory - We are in preview mode for %s, so return placeholder data", v31, 0xCu);
      swift_arrayDestroy();
      sub_10000DBB4();
      sub_10000DBB4();
    }
    else
    {

      swift_release();
    }
    sub_1001191AC();
    v5(v1);
    sub_100123D04(v1, (void (*)(void))type metadata accessor for ForecastEntry);
  }
  else
  {
    sub_10011B048();
    sub_10011B12C();
    sub_10012A090();
    sub_10012A080();
    sub_10012A060();
    swift_release();
    sub_100115804(2, v1);
    uint64_t v35 = v43;
    sub_10012C930();
    char v36 = sub_10011C078(v35);
    sub_10000B424();
    v37();
    uint64_t v38 = sub_1001254D8();
    swift_weakInit();
    sub_10012431C(v1, (uint64_t)v18, (void (*)(void))type metadata accessor for ForecastEntry);
    unint64_t v39 = (*(unsigned __int8 *)(v45 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    BOOL v40 = (void *)swift_allocObject();
    void v40[2] = v38;
    v40[3] = v5;
    v40[4] = v48;
    sub_10012423C((uint64_t)v18, (uint64_t)v40 + v39, (void (*)(void))type metadata accessor for ForecastEntry);
    swift_retain();
    swift_retain();
    sub_10003E790(v36 & 1, (void (*)(uint64_t))sub_10012429C, (uint64_t)v40);
    swift_release();
    sub_100123D04(v1, (void (*)(void))type metadata accessor for ForecastEntry);
    swift_release();
  }
  sub_100047260();
}

uint64_t sub_10011C078(uint64_t a1)
{
  uint64_t v2 = sub_10012C800();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 != enum case for WidgetFamily.systemSmall(_:)
    && v6 != enum case for WidgetFamily.systemMedium(_:)
    && v6 != enum case for WidgetFamily.systemLarge(_:)
    && v6 != enum case for WidgetFamily.systemExtraLarge(_:))
  {
    if (v6 == enum case for WidgetFamily.accessoryCircular(_:)
      || v6 == enum case for WidgetFamily.accessoryRectangular(_:))
    {
      return 0;
    }
    if (v6 != enum case for WidgetFamily.accessoryInline(_:)) {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
  return 1;
}

uint64_t sub_10011C1F8(uint64_t a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v69 = a6;
  uint64_t v73 = a5;
  int v72 = a2;
  uint64_t v71 = a1;
  uint64_t v7 = sub_1000053D8(&qword_10016C738);
  __chkstk_darwin(v7 - 8);
  uint64_t v65 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10012A6B0();
  uint64_t v63 = *(void *)(v67 - 8);
  uint64_t v9 = *(void *)(v63 + 64);
  uint64_t v10 = __chkstk_darwin(v67);
  int v62 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v64 = (uint64_t)&v60 - v11;
  uint64_t v12 = sub_1000053D8(&qword_10016B318);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000053D8(&qword_100171CB8);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ForecastEntry(0);
  uint64_t v61 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v61 + 64);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v68 = (uint64_t)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v60 - v22;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return a4(v69);
  }
  uint64_t v66 = (void (*)(char *))a4;
  uint64_t v70 = Strong;
  swift_retain();
  unsigned __int8 v25 = sub_1000E9AE0();
  swift_release();
  if (v25)
  {
    swift_retain();
    sub_1000E6A6C(v71, (uint64_t)v18);
    swift_release();
    sub_10012C970();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_10000C260();
    swift_bridgeObjectRelease();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v14, 1, v19) != 1)
    {
      sub_10012423C((uint64_t)v14, (uint64_t)v23, (void (*)(void))type metadata accessor for ForecastEntry);
      v66(v23);
      swift_release();
      uint64_t v43 = (uint64_t)v23;
      return sub_100123D04(v43, (void (*)(void))type metadata accessor for ForecastEntry);
    }
    sub_10000B2A8((uint64_t)v14, &qword_10016B318);
  }
  if (v72 == 4)
  {
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_10012AB60();
    sub_10000D7A4(v26, (uint64_t)qword_100181C40);
    uint64_t v27 = v70;
    swift_retain();
    uint64_t v28 = sub_10012AB40();
    os_log_type_t v29 = sub_10012CD40();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v30 = 136315138;
      uint64_t v31 = *(void *)(v27 + 24);
      unint64_t v32 = *(void *)(v27 + 32);
      swift_bridgeObjectRetain();
      uint64_t v74 = sub_100123564(v31, v32, &v75);
      sub_10012CF70();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Accessory - Snapshot: failed for %s (no location permissions)", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v44 = (void (*)(uint64_t))v66;
    swift_retain();
    uint64_t v45 = v68;
    uint64_t v46 = v68;
    char v47 = 0;
  }
  else
  {
    uint64_t v34 = v65;
    sub_10006CCD8(v71, v65, &qword_10016C738);
    uint64_t v35 = v67;
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v34, 1, v67) != 1)
    {
      uint64_t v48 = v63;
      uint64_t v49 = v64;
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32);
      v60(v64, v34, v35);
      uint64_t v71 = *(void *)(v70 + 80);
      LODWORD(v65) = *(unsigned __int8 *)(v70 + 16);
      uint64_t v50 = swift_allocObject();
      swift_weakInit();
      uint64_t v51 = v68;
      sub_10012431C(v69, v68, (void (*)(void))type metadata accessor for ForecastEntry);
      uint64_t v52 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v62, v49, v35);
      unint64_t v53 = (*(unsigned __int8 *)(v61 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
      unint64_t v54 = (*(unsigned __int8 *)(v48 + 80) + v53 + v20 + 1) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      uint64_t v55 = (void *)swift_allocObject();
      uint64_t v56 = v66;
      v55[2] = v50;
      v55[3] = v56;
      v55[4] = v73;
      sub_10012423C(v51, (uint64_t)v55 + v53, (void (*)(void))type metadata accessor for ForecastEntry);
      *((unsigned char *)v55 + v53 + v20) = v72;
      uint64_t v57 = v52;
      uint64_t v58 = v67;
      v60((uint64_t)v55 + v54, (uint64_t)v57, v67);
      swift_retain();
      swift_retain();
      uint64_t v59 = v64;
      sub_1000DB78C(v64, v65, (uint64_t)sub_100124304, (uint64_t)v55);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v59, v58);
      swift_release();
      return swift_release();
    }
    sub_10000B2A8(v34, &qword_10016C738);
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v36 = sub_10012AB60();
    sub_10000D7A4(v36, (uint64_t)qword_100181C40);
    uint64_t v37 = v70;
    swift_retain();
    uint64_t v38 = sub_10012AB40();
    os_log_type_t v39 = sub_10012CD40();
    if (os_log_type_enabled(v38, v39))
    {
      BOOL v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      *(_DWORD *)BOOL v40 = 136315138;
      uint64_t v41 = *(void *)(v37 + 24);
      unint64_t v42 = *(void *)(v37 + 32);
      swift_bridgeObjectRetain();
      uint64_t v74 = sub_100123564(v41, v42, &v75);
      sub_10012CF70();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Accessory - Snapshot: failed for %s (no location)", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v44 = (void (*)(uint64_t))v66;
    swift_retain();
    uint64_t v45 = v68;
    uint64_t v46 = v68;
    char v47 = 1;
  }
  sub_100115804(v47, v46);
  swift_release();
  v44(v45);
  swift_release();
  uint64_t v43 = v45;
  return sub_100123D04(v43, (void (*)(void))type metadata accessor for ForecastEntry);
}

uint64_t sub_10011CB28(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v65 = a7;
  uint64_t v67 = a3;
  uint64_t v11 = sub_1000053D8(&qword_100171CC0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v14 - 8);
  uint64_t v66 = (uint64_t)v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for WeatherDataOperationResult(0);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v64 = (uint64_t)v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v59 - v19;
  uint64_t v21 = sub_1000053D8(&qword_10016E7F8);
  __chkstk_darwin(v21);
  uint64_t v23 = (void *)((char *)v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return v67(a5);
  }
  uint64_t v25 = Strong;
  uint64_t v61 = a5;
  sub_10006CCD8(a1, (uint64_t)v23, &qword_10016E7F8);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10012423C((uint64_t)v23, (uint64_t)v20, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v35 = sub_10012AB60();
    sub_10000D7A4(v35, (uint64_t)qword_100181C40);
    swift_retain();
    uint64_t v36 = sub_10012AB40();
    os_log_type_t v37 = sub_10012CD60();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v63 = a4;
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      int v62 = a6;
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v40 = *(void *)(v25 + 24);
      unint64_t v39 = *(void *)(v25 + 32);
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_100123564(v40, v39, &v69);
      a6 = v62;
      sub_10012CF70();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Accessory - Snapshot: successsully fetched weather data for %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v49 = v66;
    sub_100119D48((uint64_t)v20, a6, v66);
    v67(v49);
    swift_release();
    sub_100123D04(v49, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v50 = (uint64_t)v20;
    return sub_100123D04(v50, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
  }
  int v62 = a6;
  uint64_t v60 = *v23;
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_10012AB60();
  uint64_t v27 = sub_10000D7A4(v26, (uint64_t)qword_100181C40);
  swift_retain();
  uint64_t v28 = sub_10012AB40();
  os_log_type_t v29 = sub_10012CD60();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v63 = a4;
  if (v30)
  {
    v59[2] = v27;
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    v59[1] = v31 + 4;
    uint64_t v33 = *(void *)(v25 + 24);
    unint64_t v32 = *(void *)(v25 + 32);
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_100123564(v33, v32, &v69);
    sub_10012CF70();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Accessory - Snapshot: failed to fetch or interpolate fresh weather data for %s, trying old cached data first", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  swift_retain();
  sub_1000DC060(v65);
  swift_release();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v16) != 1)
  {
    uint64_t v51 = (uint64_t)v13;
    uint64_t v52 = v64;
    sub_10012423C(v51, v64, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
    swift_retain();
    unint64_t v53 = sub_10012AB40();
    os_log_type_t v54 = sub_10012CD60();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315138;
      uint64_t v56 = *(void *)(v25 + 24);
      unint64_t v57 = *(void *)(v25 + 32);
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_100123564(v56, v57, &v69);
      sub_10012CF70();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Accessory - Snapshot: successsully retrieved cached weather data for %s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v58 = v66;
    sub_100119D48(v52, v62, v66);
    v67(v58);
    swift_errorRelease();
    swift_release();
    sub_100123D04(v58, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v50 = v52;
    return sub_100123D04(v50, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
  }
  sub_10000B2A8((uint64_t)v13, &qword_100171CC0);
  swift_retain();
  uint64_t v41 = v60;
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  unint64_t v42 = sub_10012AB40();
  os_log_type_t v43 = sub_10012CD40();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315651;
    uint64_t v45 = *(void *)(v25 + 24);
    unint64_t v46 = *(void *)(v25 + 32);
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_100123564(v45, v46, &v69);
    sub_10012CF70();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2160;
    uint64_t v68 = 1752392040;
    sub_10012CF70();
    *(_WORD *)(v44 + 22) = 2081;
    uint64_t v68 = v41;
    swift_errorRetain();
    sub_1000053D8(&qword_10016C870);
    uint64_t v47 = sub_10012CAA0();
    uint64_t v68 = sub_100123564(v47, v48, &v69);
    sub_10012CF70();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Accessory - Snapshot: failed to fetch weather data or get cached data for %s ... returning .noWeatherData. error=%{private,mask.hash}s", (uint8_t *)v44, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  v67(v61);
  swift_release();
  return swift_errorRelease();
}

void sub_10011D4E4()
{
  sub_100047278();
  uint64_t v1 = v0;
  uint64_t v58 = v2;
  uint64_t v59 = v3;
  uint64_t v69 = v4;
  sub_10012C800();
  sub_10000DB98();
  uint64_t v61 = v6;
  uint64_t v62 = v5;
  __chkstk_darwin(v5);
  sub_10000DBCC();
  uint64_t v60 = v7;
  uint64_t v68 = sub_10012C950();
  sub_10000DB98();
  uint64_t v56 = v8;
  __chkstk_darwin(v9);
  uint64_t v57 = v10;
  uint64_t v65 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100129300();
  sub_10000DB98();
  uint64_t v70 = v11;
  __chkstk_darwin(v12);
  sub_1001256B4();
  uint64_t v64 = v13;
  __chkstk_darwin(v14);
  uint64_t v67 = (char *)&v50 - v15;
  uint64_t v17 = *(void *)(v0 + 24);
  unint64_t v16 = *(void *)(v0 + 32);
  uint64_t v18 = qword_10016AE28;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10012AB60();
  sub_10000D7A4(v19, (uint64_t)qword_100181C40);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = sub_10012AB40();
  os_log_type_t v21 = sub_10012CD60();
  BOOL v22 = os_log_type_enabled(v20, v21);
  unint64_t v55 = v16;
  uint64_t v63 = v17;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v72 = sub_10000DCC8();
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v71 = sub_100123564(v17, v16, &v72);
    sub_10012CF70();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Accessory - Timeline requested for %s", v23, 0xCu);
    swift_arrayDestroy();
    sub_10000DBB4();
    sub_10000DBB4();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_1001292B0();
  uint64_t v24 = sub_1001254D8();
  swift_weakInit();
  uint64_t v25 = v56;
  uint64_t v26 = *(void *)(v56 + 16);
  uint64_t v53 = v56 + 16;
  uint64_t v54 = v26;
  uint64_t v50 = v1;
  uint64_t v27 = v68;
  sub_10006D61C();
  v28();
  uint64_t v29 = v70;
  uint64_t v30 = v66;
  sub_1000999B4();
  v31();
  uint64_t v32 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v33 = v30;
  uint64_t v34 = (v32 + 56) & ~v32;
  v57 += v34;
  uint64_t v51 = v34;
  uint64_t v52 = v32 | 7;
  unint64_t v35 = (v57 + *(unsigned __int8 *)(v29 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v36 = (char *)swift_allocObject();
  unint64_t v37 = v55;
  *((void *)v36 + 2) = v63;
  *((void *)v36 + 3) = v37;
  uint64_t v38 = v58;
  *((void *)v36 + 4) = v24;
  *((void *)v36 + 5) = v38;
  *((void *)v36 + 6) = v59;
  unint64_t v39 = &v36[v34];
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  uint64_t v41 = v65;
  v40(v39, v65, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(&v36[v35], v64, v33);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10011B048();
  sub_10011B12C();
  sub_10012A090();
  sub_10012A080();
  sub_10012A060();
  swift_release();
  uint64_t v42 = v60;
  sub_10012C930();
  LODWORD(v64) = sub_10011C078(v42);
  sub_10000B424();
  v43();
  uint64_t v44 = sub_1001254D8();
  swift_weakInit();
  uint64_t v45 = v68;
  sub_10006D61C();
  v46();
  uint64_t v47 = (char *)swift_allocObject();
  uint64_t v48 = v63;
  *((void *)v47 + 2) = v44;
  *((void *)v47 + 3) = v48;
  *((void *)v47 + 4) = v37;
  *((void *)v47 + 5) = sub_1001233A4;
  *((void *)v47 + 6) = v36;
  v40(&v47[v51], v41, v45);
  swift_retain();
  swift_retain();
  sub_10003E790(v64 & 1, (void (*)(uint64_t))sub_100123460, (uint64_t)v47);
  swift_release();
  swift_release();
  sub_10000B424();
  v49();
  swift_release();
  sub_100047260();
}

uint64_t sub_10011DA1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10012AB60();
  sub_10000D7A4(v10, (uint64_t)qword_100181C40);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = sub_10012AB40();
  os_log_type_t v12 = sub_10012CD60();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v16 = a6;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    swift_bridgeObjectRetain();
    sub_100123564(a3, a4, v17);
    sub_10012CF70();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accessory - Completing timeline for %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v16;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = a6(a1);
  if (Strong) {
    return swift_release();
  }
  return result;
}

void sub_10011DC30(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void, void), uint64_t a7, unint64_t a8)
{
  unint64_t v61 = a8;
  uint64_t v73 = a6;
  unint64_t v74 = a5;
  uint64_t v67 = a4;
  int v68 = a2;
  uint64_t v69 = a1;
  uint64_t v64 = sub_10012C950();
  uint64_t v62 = *(void *)(v64 - 8);
  uint64_t v9 = *(void *)(v62 + 64);
  __chkstk_darwin(v64);
  uint64_t v10 = sub_1000053D8(&qword_10016C738);
  __chkstk_darwin(v10 - 8);
  os_log_type_t v12 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10012A6B0();
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v63 + 64);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v16 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v60 - v17;
  uint64_t v19 = sub_1000053D8(&qword_100171CB0);
  __chkstk_darwin(v19 - 8);
  uint64_t v71 = (uint64_t)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000053D8(&qword_100171CB8);
  uint64_t v72 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v70 = (void *)((char *)v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v65 = v21;
    uint64_t v66 = a7;
    uint64_t v24 = Strong;
    swift_retain();
    unsigned __int8 v25 = sub_1000E9AE0();
    swift_release();
    if (v25)
    {
      swift_retain();
      uint64_t v26 = (void (*)(void, void, void))v70;
      sub_1000E6A6C(v69, (uint64_t)v70);
      swift_release();
      uint64_t v27 = sub_10012AA20();
      uint64_t v28 = v71;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v71, 1, 1, v27);
      v73(v26, v28);
      swift_release();
      sub_10000B2A8(v28, &qword_100171CB0);
      (*(void (**)(void (*)(void, void, void), uint64_t))(v72 + 8))(v26, v65);
    }
    else if (v68 == 4)
    {
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v34 = sub_10012AB60();
      sub_10000D7A4(v34, (uint64_t)qword_100181C40);
      unint64_t v35 = v74;
      swift_bridgeObjectRetain_n();
      uint64_t v36 = sub_10012AB40();
      os_log_type_t v37 = sub_10012CD60();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v75 = sub_100123564(v67, v35, &v76);
        sub_10012CF70();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Accessory - Timeline: failed for %s (no location permissions)", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v44 = (void (*)(void, void, void))v70;
      sub_10011969C(0, (uint64_t)v70);
      uint64_t v45 = sub_10012AA20();
      uint64_t v46 = v71;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v71, 1, 1, v45);
      v73(v44, v46);
      swift_release();
      sub_10000B2A8(v46, &qword_100171CB0);
      (*(void (**)(void (*)(void, void, void), uint64_t))(v72 + 8))(v44, v65);
    }
    else
    {
      sub_10006CCD8(v69, (uint64_t)v12, &qword_10016C738);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v12, 1, v13) == 1)
      {
        sub_10000B2A8((uint64_t)v12, &qword_10016C738);
        if (qword_10016AE28 != -1) {
          swift_once();
        }
        uint64_t v39 = sub_10012AB60();
        sub_10000D7A4(v39, (uint64_t)qword_100181C40);
        unint64_t v40 = v74;
        swift_bridgeObjectRetain_n();
        uint64_t v41 = sub_10012AB40();
        os_log_type_t v42 = sub_10012CD60();
        if (os_log_type_enabled(v41, v42))
        {
          os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
          uint64_t v76 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v43 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v75 = sub_100123564(v67, v40, &v76);
          sub_10012CF70();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Accessory - Timeline: failed for %s (no location)", v43, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v56 = (void (*)(void, void, void))v70;
        sub_10011969C(1, (uint64_t)v70);
        uint64_t v57 = enum case for WidgetRefreshFailureReason.noLocationData(_:);
        uint64_t v58 = sub_10012AA20();
        uint64_t v59 = v71;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 104))(v71, v57, v58);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v59, 0, 1, v58);
        v73(v56, v59);
        swift_release();
        sub_10000B2A8(v59, &qword_100171CB0);
        (*(void (**)(void (*)(void, void, void), uint64_t))(v72 + 8))(v56, v65);
      }
      else
      {
        uint64_t v47 = v63;
        uint64_t v48 = *(void **)(v63 + 32);
        uint64_t v69 = v63 + 32;
        uint64_t v70 = v48;
        ((void (*)(char *, char *, uint64_t))v48)(v18, v12, v13);
        uint64_t v72 = *(void *)(v24 + 80);
        LODWORD(v71) = *(unsigned __int8 *)(v24 + 16);
        v60[1] = v24;
        uint64_t v65 = swift_allocObject();
        swift_weakInit();
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v16, v18, v13);
        uint64_t v49 = v62;
        (*(void (**)(char *, unint64_t, uint64_t))(v62 + 16))((char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v61, v64);
        unint64_t v50 = (*(unsigned __int8 *)(v47 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
        v60[0] = v50 + v14;
        unint64_t v51 = (*(unsigned __int8 *)(v49 + 80) + v50 + v14 + 1) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
        unint64_t v61 = (v9 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v52 = (void *)swift_allocObject();
        uint64_t v53 = v67;
        uint64_t v52[2] = v65;
        v52[3] = v53;
        v52[4] = v74;
        ((void (*)(char *, char *, uint64_t))v70)((char *)v52 + v50, v16, v13);
        *((unsigned char *)v52 + v60[0]) = v68;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))((char *)v52 + v51, (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v64);
        uint64_t v54 = (void *)((char *)v52 + v61);
        uint64_t v55 = v66;
        *uint64_t v54 = v73;
        v54[1] = v55;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_1000DB78C((uint64_t)v18, v71, (uint64_t)sub_100123CEC, (uint64_t)v52);
        swift_release();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v18, v13);
        swift_release();
        swift_release();
      }
    }
  }
  else
  {
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_10012AB60();
    sub_10000D7A4(v29, (uint64_t)qword_100181C40);
    unint64_t v30 = v74;
    swift_bridgeObjectRetain_n();
    uint64_t v31 = sub_10012AB40();
    os_log_type_t v32 = sub_10012CD60();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v75 = sub_100123564(v67, v30, &v76);
      sub_10012CF70();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Accessory - Timeline: failed for %s (we have been deallocated while obtaining location information)", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_10011E718(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), uint64_t a9)
{
  uint64_t v76 = a8;
  uint64_t v72 = a7;
  uint64_t v73 = a5;
  LODWORD(v71) = a6;
  uint64_t v78 = a3;
  uint64_t v11 = sub_1000053D8(&qword_100171CC0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000053D8(&qword_100171CB0);
  __chkstk_darwin(v14 - 8);
  uint64_t v75 = (uint64_t)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000053D8(&qword_100171CB8);
  uint64_t v77 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v74 = (uint64_t)v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for WeatherDataOperationResult(0);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v68 - v22;
  uint64_t v24 = sub_1000053D8(&qword_10016E7F8);
  __chkstk_darwin(v24);
  uint64_t v26 = (void *)((char *)v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v28 = Strong;
    uint64_t v70 = a9;
    sub_10006CCD8(a1, (uint64_t)v26, &qword_10016E7F8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = *v26;
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v71 = v29;
      uint64_t v30 = sub_10012AB60();
      uint64_t v31 = sub_10000D7A4(v30, (uint64_t)qword_100181C40);
      swift_bridgeObjectRetain_n();
      os_log_type_t v32 = sub_10012AB40();
      os_log_type_t v33 = sub_10012CD60();
      BOOL v34 = os_log_type_enabled(v32, v33);
      uint64_t v69 = v16;
      if (v34)
      {
        v68[2] = v28;
        uint64_t v35 = swift_slowAlloc();
        v68[1] = v31;
        uint64_t v36 = (uint8_t *)v35;
        uint64_t v80 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v79 = sub_100123564(v78, a4, &v80);
        sub_10012CF70();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Accessory - Timeline: failed to fetch or interpolate fresh weather data for %s, trying old cached data first", v36, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v45 = v73;
      swift_retain();
      sub_1000DC060(v45);
      swift_release();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v18) == 1)
      {
        sub_10000B2A8((uint64_t)v13, &qword_100171CC0);
        swift_bridgeObjectRetain();
        uint64_t v46 = v71;
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v47 = sub_10012AB40();
        os_log_type_t v48 = sub_10012CD40();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = swift_slowAlloc();
          uint64_t v80 = swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = 136315651;
          swift_bridgeObjectRetain();
          uint64_t v79 = sub_100123564(v78, a4, &v80);
          sub_10012CF70();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v49 + 12) = 2160;
          uint64_t v79 = 1752392040;
          sub_10012CF70();
          *(_WORD *)(v49 + 22) = 2081;
          uint64_t v79 = v46;
          swift_errorRetain();
          sub_1000053D8(&qword_10016C870);
          uint64_t v50 = sub_10012CAA0();
          uint64_t v79 = sub_100123564(v50, v51, &v80);
          sub_10012CF70();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Accessory - Timeline: failed to fetch weather data or get cached data for %s ... returning .noWeatherData. error=%{private,mask.hash}s", (uint8_t *)v49, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_errorRelease();
          swift_errorRelease();
        }

        uint64_t v59 = v69;
        uint64_t v60 = v74;
        sub_10011969C(2, v74);
        uint64_t v61 = enum case for WidgetRefreshFailureReason.noWeatherData(_:);
        uint64_t v62 = sub_10012AA20();
        uint64_t v63 = v75;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 104))(v75, v61, v62);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v63, 0, 1, v62);
        v76(v60, v63);
        swift_release();
        swift_errorRelease();
        sub_10000B2A8(v63, &qword_100171CB0);
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v60, v59);
        return;
      }
      sub_10012423C((uint64_t)v13, (uint64_t)v21, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
      swift_bridgeObjectRetain_n();
      uint64_t v56 = sub_10012AB40();
      os_log_type_t v57 = sub_10012CD60();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v79 = sub_100123564(v78, a4, &v80);
        sub_10012CF70();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Accessory - Timeline: successsully retrieved cached weather data for %s", v58, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v64 = v69;
      uint64_t v65 = v74;
      sub_10011A6BC();
      uint64_t v66 = sub_10012AA20();
      uint64_t v67 = v75;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v75, 1, 1, v66);
      v76(v65, v67);
      swift_release();
      swift_errorRelease();
      sub_10000B2A8(v67, &qword_100171CB0);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v65, v64);
      uint64_t v55 = (uint64_t)v21;
    }
    else
    {
      sub_10012423C((uint64_t)v26, (uint64_t)v23, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v41 = sub_10012AB60();
      sub_10000D7A4(v41, (uint64_t)qword_100181C40);
      swift_bridgeObjectRetain_n();
      os_log_type_t v42 = sub_10012AB40();
      os_log_type_t v43 = sub_10012CD60();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v79 = sub_100123564(v78, a4, &v80);
        sub_10012CF70();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Accessory - Timeline: successfully fetched weather data for %s", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v52 = v74;
      sub_10011A6BC();
      uint64_t v53 = sub_10012AA20();
      uint64_t v54 = v75;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v75, 1, 1, v53);
      v76(v52, v54);
      swift_release();
      sub_10000B2A8(v54, &qword_100171CB0);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v52, v16);
      uint64_t v55 = (uint64_t)v23;
    }
    sub_100123D04(v55, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
    return;
  }
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v37 = sub_10012AB60();
  sub_10000D7A4(v37, (uint64_t)qword_100181C40);
  swift_bridgeObjectRetain_n();
  uint64_t v38 = sub_10012AB40();
  os_log_type_t v39 = sub_10012CD60();
  if (os_log_type_enabled(v38, v39))
  {
    unint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v80 = swift_slowAlloc();
    *(_DWORD *)unint64_t v40 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v79 = sub_100123564(v78, a4, &v80);
    sub_10012CF70();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Accessory - Timeline: failed for %s (we have been deallocated while fetching weather data)", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_10011F3C8()
{
}

void sub_10011F3EC()
{
}

uint64_t sub_10011F410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100125424;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10011F4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100125424;
  return TimelineProvider.relevance()(a1, a2, a3);
}

void sub_10011F578()
{
  sub_100047278();
  uint64_t v1 = v0;
  uint64_t v40 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for ForecastEntry(0);
  uint64_t v6 = sub_100047198(v5);
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v6);
  uint64_t v39 = (uint64_t)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v41 = (uint64_t)v36 - v12;
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10012AB60();
  uint64_t v14 = sub_10000D7A4(v13, (uint64_t)qword_100181C40);
  id v15 = v4;
  uint64_t v16 = sub_10012AB40();
  os_log_type_t v17 = sub_10012CD60();
  if (os_log_type_enabled(v16, v17))
  {
    v36[1] = v14;
    uint64_t v37 = v8;
    uint64_t v38 = v1;
    uint64_t v18 = sub_10000DCC8();
    v36[0] = sub_1001256FC();
    uint64_t v44 = v36[0];
    *(_DWORD *)uint64_t v18 = 136446723;
    uint64_t v42 = sub_1001246A4(v15);
    uint64_t v43 = v19;
    sub_1000053D8(&qword_10016C858);
    uint64_t v20 = sub_10012CAB0();
    uint64_t v42 = sub_100123564(v20, v21, &v44);
    sub_10012CF70();

    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2160;
    sub_1001255FC();
    sub_10012CF70();
    *(_WORD *)(v18 + 22) = 2081;
    id v22 = [v15 location];
    if (v22) {
      id v22 = (id)sub_100124634(v22);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v42 = (uint64_t)v22;
    uint64_t v43 = v23;
    uint64_t v24 = sub_10012CAB0();
    uint64_t v42 = sub_100123564(v24, v25, &v44);
    sub_10012CF70();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Snapshot Requested. configuration.identifier=%{public}s, location=%{private,mask.hash}s", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy();
    sub_10000DBB4();
    sub_10000DBB4();

    uint64_t v8 = v37;
    uint64_t v1 = v38;
  }
  else
  {
  }
  if (sub_1001190A4() && !sub_10012A430())
  {
    uint64_t v26 = sub_10012AB40();
    os_log_type_t v27 = sub_10012CD60();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Setup stub data", v28, 2u);
      sub_10000DBB4();
    }

    sub_10012A420();
  }
  sub_10011B048();
  sub_10011B12C();
  sub_10012A090();
  sub_10012A080();
  sub_10012A060();
  swift_release();
  uint64_t v29 = v41;
  sub_100115804(2, v41);
  uint64_t v30 = sub_1001254D8();
  swift_weakInit();
  uint64_t v31 = v39;
  sub_10012431C(v29, v39, (void (*)(void))type metadata accessor for ForecastEntry);
  unint64_t v32 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  os_log_type_t v33 = (void *)swift_allocObject();
  uint64_t v34 = v40;
  v33[2] = v30;
  v33[3] = v34;
  v33[4] = v1;
  sub_10012423C(v31, (uint64_t)v33 + v32, (void (*)(void))type metadata accessor for ForecastEntry);
  *(void *)((char *)v33 + ((v10 + v32 + 7) & 0xFFFFFFFFFFFFFFF8)) = v15;
  id v35 = v15;
  swift_retain();
  swift_retain();
  sub_10003C864(v35, (void (*)(uint64_t, uint64_t))sub_100124D9C, (uint64_t)v33);
  swift_release();
  sub_100123D04(v29, (void (*)(void))type metadata accessor for ForecastEntry);
  swift_release();
  sub_100047260();
}

uint64_t sub_10011FA14(uint64_t a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6, void *a7)
{
  id v77 = a7;
  unint64_t v83 = (char *)a6;
  uint64_t v84 = a5;
  int v82 = a2;
  uint64_t v81 = a1;
  uint64_t v8 = sub_1000053D8(&qword_10016C738);
  __chkstk_darwin(v8 - 8);
  uint64_t v75 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10012A6B0();
  uint64_t v73 = *(void *)(v78 - 8);
  uint64_t v10 = *(void *)(v73 + 64);
  uint64_t v11 = __chkstk_darwin(v78);
  uint64_t v72 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v74 = (uint64_t)&v70 - v12;
  uint64_t v13 = sub_1000053D8(&qword_10016B318);
  __chkstk_darwin(v13 - 8);
  id v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000053D8(&qword_100171CB8);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ForecastEntry(0);
  uint64_t v71 = *(void *)(v20 - 8);
  uint64_t v21 = *(void *)(v71 + 64);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v79 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v70 - v23;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return a4((uint64_t)v83);
  }
  uint64_t v76 = (void (*)(char *))a4;
  uint64_t v80 = Strong;
  swift_retain();
  unsigned __int8 v26 = sub_1000E9AE0();
  swift_release();
  if (v26)
  {
    swift_retain();
    sub_1000E6A6C(v81, (uint64_t)v19);
    swift_release();
    sub_10012C970();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    sub_10000C260();
    swift_bridgeObjectRelease();
    if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v15, 1, v20) != 1)
    {
      sub_10012423C((uint64_t)v15, (uint64_t)v24, (void (*)(void))type metadata accessor for ForecastEntry);
      v76(v24);
      swift_release();
      uint64_t v50 = (uint64_t)v24;
      return sub_100123D04(v50, (void (*)(void))type metadata accessor for ForecastEntry);
    }
    sub_10000B2A8((uint64_t)v15, &qword_10016B318);
  }
  if (v82 == 4)
  {
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_10012AB60();
    sub_10000D7A4(v27, (uint64_t)qword_100181C40);
    id v28 = v77;
    uint64_t v29 = sub_10012AB40();
    os_log_type_t v30 = sub_10012CD40();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136446723;
      uint64_t v85 = sub_1001246A4(v28);
      uint64_t v86 = v32;
      sub_1000053D8(&qword_10016C858);
      uint64_t v33 = sub_10012CAB0();
      uint64_t v85 = sub_100123564(v33, v34, &v87);
      sub_10012CF70();

      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2160;
      uint64_t v85 = 1752392040;
      sub_10012CF70();
      *(_WORD *)(v31 + 22) = 2081;
      id v35 = [v28 location];
      if (v35) {
        id v35 = (id)sub_100124634(v35);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v85 = (uint64_t)v35;
      uint64_t v86 = v36;
      uint64_t v64 = sub_10012CAB0();
      uint64_t v85 = sub_100123564(v64, v65, &v87);
      sub_10012CF70();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Snapshot: failed (no location permissions). configuration.identifier=%{public}s, location= %{private,mask.hash}s", (uint8_t *)v31, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v66 = (void (*)(uint64_t))v76;
    swift_retain();
    uint64_t v67 = v79;
    sub_100115804(0, v79);
    swift_release();
    v66(v67);
    swift_release();
    uint64_t v50 = v67;
    return sub_100123D04(v50, (void (*)(void))type metadata accessor for ForecastEntry);
  }
  uint64_t v38 = v75;
  sub_10006CCD8(v81, v75, &qword_10016C738);
  uint64_t v39 = v78;
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0(v38, 1, v78) == 1)
  {
    sub_10000B2A8(v38, &qword_10016C738);
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v40 = sub_10012AB60();
    sub_10000D7A4(v40, (uint64_t)qword_100181C40);
    id v41 = v77;
    uint64_t v42 = sub_10012AB40();
    os_log_type_t v43 = sub_10012CD40();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136446723;
      uint64_t v85 = sub_1001246A4(v41);
      uint64_t v86 = v45;
      sub_1000053D8(&qword_10016C858);
      uint64_t v46 = sub_10012CAB0();
      uint64_t v85 = sub_100123564(v46, v47, &v87);
      sub_10012CF70();

      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2160;
      uint64_t v85 = 1752392040;
      sub_10012CF70();
      *(_WORD *)(v44 + 22) = 2081;
      id v48 = [v41 location];
      if (v48) {
        id v48 = (id)sub_100124634(v48);
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v85 = (uint64_t)v48;
      uint64_t v86 = v49;
      uint64_t v68 = sub_10012CAB0();
      uint64_t v85 = sub_100123564(v68, v69, &v87);
      sub_10012CF70();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Snapshot failed (no location). configuration.identifier=%{public}s, location=%{private,mask.hash}s", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v76(v83);
  }
  else
  {
    uint64_t v51 = v73;
    uint64_t v52 = v74;
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32);
    v70(v74, v38, v39);
    uint64_t v81 = *(void *)(v80 + 80);
    LODWORD(v77) = *(unsigned __int8 *)(v80 + 16);
    uint64_t v53 = swift_allocObject();
    swift_weakInit();
    uint64_t v54 = v79;
    sub_10012431C((uint64_t)v83, v79, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v55 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v72, v52, v39);
    unint64_t v56 = (*(unsigned __int8 *)(v71 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
    uint64_t v57 = v56 + v21;
    unint64_t v58 = (*(unsigned __int8 *)(v51 + 80) + v57 + 1) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    uint64_t v59 = (void *)swift_allocObject();
    uint64_t v60 = v76;
    v59[2] = v53;
    void v59[3] = v60;
    v59[4] = v84;
    sub_10012423C(v54, (uint64_t)v59 + v56, (void (*)(void))type metadata accessor for ForecastEntry);
    *((unsigned char *)v59 + v57) = v82;
    uint64_t v61 = v55;
    uint64_t v62 = v78;
    v70((uint64_t)v59 + v58, (uint64_t)v61, v78);
    swift_retain();
    swift_retain();
    uint64_t v63 = v74;
    sub_1000DB78C(v74, (int)v77, (uint64_t)sub_100125354, (uint64_t)v59);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v63, v62);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1001204E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v49 = a7;
  int v51 = a6;
  uint64_t v11 = sub_1000053D8(&qword_100171CC0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v14 - 8);
  uint64_t v50 = (uint64_t)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for WeatherDataOperationResult(0);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v47 = (uint64_t)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v46 - v19;
  uint64_t v21 = sub_1000053D8(&qword_10016E7F8);
  __chkstk_darwin(v21);
  uint64_t v23 = (void *)((char *)v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return a3(a5);
  }
  uint64_t v25 = Strong;
  v46[0] = a5;
  uint64_t v48 = a4;
  sub_10006CCD8(a1, (uint64_t)v23, &qword_10016E7F8);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10012423C((uint64_t)v23, (uint64_t)v20, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v38 = sub_10012AB60();
    sub_10000D7A4(v38, (uint64_t)qword_100181C40);
    uint64_t v39 = sub_10012AB40();
    os_log_type_t v40 = sub_10012CD60();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Snapshot: successsully fetched weather data", v41, 2u);
      swift_slowDealloc();
    }

    uint64_t v42 = v50;
    sub_100119D48((uint64_t)v20, v51, v50);
    a3(v42);
    swift_release();
    sub_100123D04(v42, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v43 = (uint64_t)v20;
    return sub_100123D04(v43, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
  }
  v46[1] = v25;
  uint64_t v26 = *v23;
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_10012AB60();
  sub_10000D7A4(v27, (uint64_t)qword_100181C40);
  id v28 = sub_10012AB40();
  os_log_type_t v29 = sub_10012CD60();
  if (os_log_type_enabled(v28, v29))
  {
    os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Snapshot: failed to fetch or interpolate fresh weather data, trying old cached data first", v30, 2u);
    swift_slowDealloc();
  }

  swift_retain();
  sub_1000DC060(v49);
  swift_release();
  if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v16) != 1)
  {
    uint64_t v44 = v47;
    sub_10012423C((uint64_t)v13, v47, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
    uint64_t v45 = v50;
    sub_100119D48(v44, v51, v50);
    a3(v45);
    swift_release();
    swift_errorRelease();
    sub_100123D04(v45, (void (*)(void))type metadata accessor for ForecastEntry);
    uint64_t v43 = v44;
    return sub_100123D04(v43, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
  }
  sub_10000B2A8((uint64_t)v13, &qword_100171CC0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v31 = sub_10012AB40();
  os_log_type_t v32 = sub_10012CD40();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 141558275;
    uint64_t v52 = 1752392040;
    uint64_t v53 = v34;
    sub_10012CF70();
    *(_WORD *)(v33 + 12) = 2081;
    uint64_t v52 = v26;
    swift_errorRetain();
    sub_1000053D8(&qword_10016C870);
    uint64_t v35 = sub_10012CAA0();
    uint64_t v52 = sub_100123564(v35, v36, &v53);
    sub_10012CF70();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Snapshot: failed to fetch weather data or get cached data. error=%{private,mask.hash}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  a3(v46[0]);
  swift_release();
  return swift_errorRelease();
}

void sub_100120B64()
{
  sub_100047278();
  uint64_t v2 = v0;
  uint64_t v70 = v3;
  uint64_t v71 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v79 = sub_10012C950();
  sub_10000DB98();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v77 = v12;
  uint64_t v78 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100129300();
  sub_10000DB98();
  uint64_t v80 = v14;
  uint64_t v81 = v13;
  __chkstk_darwin(v13);
  sub_1001256B4();
  uint64_t v76 = v15;
  __chkstk_darwin(v16);
  sub_100125550();
  unint64_t v17 = *(void *)(v2 + 32);
  uint64_t v82 = *(void *)(v2 + 24);
  uint64_t v18 = qword_10016AE28;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10012AB60();
  uint64_t v20 = sub_10000D7A4(v19, (uint64_t)qword_100181C40);
  id v21 = v8;
  swift_bridgeObjectRetain_n();
  id v22 = v21;
  uint64_t v64 = v20;
  uint64_t v23 = sub_10012AB40();
  int v24 = sub_10012CD60();
  BOOL v25 = os_log_type_enabled(v23, (os_log_type_t)v24);
  unint64_t v74 = v17;
  uint64_t v75 = v2;
  id v83 = v22;
  if (v25)
  {
    LODWORD(v73) = v24;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v72 = swift_slowAlloc();
    v86[0] = v72;
    *(_DWORD *)uint64_t v26 = 136315907;
    swift_bridgeObjectRetain();
    uint64_t v84 = sub_100123564(v82, v17, v86);
    sub_10012CF70();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2082;
    uint64_t v84 = sub_1001246A4(v22);
    uint64_t v85 = v27;
    sub_1000053D8(&qword_10016C858);
    uint64_t v28 = sub_10012CAB0();
    uint64_t v84 = sub_100123564(v28, v29, v86);
    sub_10012CF70();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2160;
    uint64_t v84 = 1752392040;
    sub_10012CF70();
    *(_WORD *)(v26 + 32) = 2081;
    id v30 = [v83 location];
    if (v30) {
      id v30 = (id)sub_100124634(v30);
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v84 = (uint64_t)v30;
    uint64_t v85 = v31;
    uint64_t v33 = sub_10012CAB0();
    uint64_t v84 = sub_100123564(v33, v34, v86);
    sub_10012CF70();
    id v35 = v83;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v73, "Timeline requested for for %s. configuration identifier=%{public}s - Location: %{private,mask.hash}s ", (uint8_t *)v26, 0x2Au);
    swift_arrayDestroy();
    sub_10000DBB4();
    sub_10000DBB4();

    unint64_t v32 = v74;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    unint64_t v32 = v17;
  }
  sub_1001292B0();
  uint64_t v36 = sub_1001254D8();
  swift_weakInit();
  uint64_t v37 = *(void *)(v10 + 16);
  uint64_t v38 = v78;
  uint64_t v72 = v6;
  uint64_t v39 = v79;
  uint64_t v68 = v37;
  uint64_t v69 = v10 + 16;
  sub_1000999B4();
  v40();
  uint64_t v41 = v80;
  uint64_t v73 = v1;
  uint64_t v42 = v81;
  sub_1000999B4();
  v43();
  uint64_t v44 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v65 = ~v44;
  uint64_t v45 = (v44 + 56) & ~v44;
  uint64_t v66 = v44;
  unint64_t v46 = (v77 + *(unsigned __int8 *)(v41 + 80) + v45) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v67 = v44 | 7;
  uint64_t v47 = (char *)swift_allocObject();
  uint64_t v48 = v82;
  *((void *)v47 + 2) = v36;
  *((void *)v47 + 3) = v48;
  uint64_t v49 = v70;
  uint64_t v50 = v71;
  *((void *)v47 + 4) = v32;
  *((void *)v47 + 5) = v49;
  *((void *)v47 + 6) = v50;
  uint64_t v70 = *(void (**)(void, void, void))(v10 + 32);
  v70(&v47[v45], v38, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(&v47[v46], v76, v42);
  swift_bridgeObjectRetain();
  swift_retain();
  if (sub_1001190A4() && !sub_10012A430())
  {
    int v51 = sub_10012AB40();
    os_log_type_t v52 = sub_10012CD60();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Setup stub data", v53, 2u);
      sub_10000DBB4();
    }

    sub_10012A420();
  }
  sub_10011B048();
  sub_10011B12C();
  sub_10012A090();
  sub_10012A080();
  sub_10012A060();
  swift_release();
  uint64_t v54 = sub_1001254D8();
  swift_weakInit();
  unint64_t v56 = v78;
  uint64_t v55 = v79;
  sub_1000999B4();
  v57();
  uint64_t v58 = (v66 + 64) & v65;
  uint64_t v59 = (void *)swift_allocObject();
  uint64_t v60 = v82;
  id v61 = v83;
  v59[2] = v54;
  void v59[3] = v60;
  v59[4] = v74;
  v59[5] = sub_100124460;
  v59[6] = v47;
  v59[7] = v61;
  v70((char *)v59 + v58, v56, v55);
  id v62 = v61;
  swift_retain();
  swift_retain();
  sub_10003C864(v62, (void (*)(uint64_t, uint64_t))sub_1001245CC, (uint64_t)v59);
  swift_release();
  swift_release();
  sub_10000B424();
  v63();
  swift_release();
  sub_100047260();
}

uint64_t sub_100121218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(uint64_t))
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    a6(a1);
    return swift_release();
  }
  else
  {
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10012AB60();
    sub_10000D7A4(v11, (uint64_t)qword_100181C40);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = sub_10012AB40();
    os_log_type_t v13 = sub_10012CD60();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_bridgeObjectRetain();
      sub_100123564(a4, a5, &v15);
      sub_10012CF70();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Completing timeline for %{public}s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return ((uint64_t (*)(uint64_t))a6)(a1);
  }
}

void sub_10012142C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t), void *a8, uint64_t a9)
{
  id v91 = a8;
  uint64_t v99 = a6;
  unint64_t v95 = a5;
  uint64_t v96 = (void (*)(char *, char *, uint64_t))a1;
  uint64_t v93 = a4;
  int v94 = a2;
  uint64_t v89 = sub_10012C950();
  uint64_t v86 = *(void *)(v89 - 8);
  uint64_t v10 = *(void *)(v86 + 64);
  __chkstk_darwin(v89);
  uint64_t v87 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000053D8(&qword_10016C738);
  __chkstk_darwin(v11 - 8);
  os_log_type_t v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10012A6B0();
  uint64_t v88 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v88 + 64);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v83 - v18;
  uint64_t v20 = sub_1000053D8(&qword_100171CB0);
  __chkstk_darwin(v20 - 8);
  uint64_t v98 = (uint64_t)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1000053D8(&qword_100171CB8);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v97 = (uint64_t)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v90 = v23;
    uint64_t v92 = a7;
    uint64_t v26 = Strong;
    swift_retain();
    unsigned __int8 v27 = sub_1000E9AE0();
    swift_release();
    if (v27)
    {
      swift_retain();
      uint64_t v28 = v97;
      sub_1000E6A6C((uint64_t)v96, v97);
      swift_release();
      uint64_t v29 = sub_10012AA20();
      uint64_t v30 = v98;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v98, 1, 1, v29);
      v99(v28, v30);
      swift_release();
      sub_10000B2A8(v30, &qword_100171CB0);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v28, v22);
      return;
    }
    uint64_t v85 = v26;
    if (v94 == 4)
    {
      uint64_t v36 = v22;
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v37 = sub_10012AB60();
      sub_10000D7A4(v37, (uint64_t)qword_100181C40);
      id v38 = v91;
      uint64_t v39 = sub_10012AB40();
      os_log_type_t v40 = sub_10012CD60();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 136446723;
        uint64_t v100 = sub_1001246A4(v38);
        uint64_t v101 = v42;
        sub_1000053D8(&qword_10016C858);
        uint64_t v43 = sub_10012CAB0();
        uint64_t v100 = sub_100123564(v43, v44, &v102);
        sub_10012CF70();

        swift_bridgeObjectRelease();
        *(_WORD *)(v41 + 12) = 2160;
        uint64_t v100 = 1752392040;
        sub_10012CF70();
        *(_WORD *)(v41 + 22) = 2081;
        id v45 = [v38 location];
        if (v45) {
          id v45 = (id)sub_100124634(v45);
        }
        else {
          uint64_t v46 = 0;
        }
        uint64_t v57 = v99;
        uint64_t v100 = (uint64_t)v45;
        uint64_t v101 = v46;
        uint64_t v70 = sub_10012CAB0();
        uint64_t v100 = sub_100123564(v70, v71, &v102);
        sub_10012CF70();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Timeline failed (no location permissions). configuration.identifier=%{public}s, location=%{private,mask.hash}s ", (uint8_t *)v41, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v57 = v99;
      }
      uint64_t v72 = v97;
      sub_10011969C(0, v97);
      uint64_t v73 = sub_10012AA20();
      uint64_t v74 = v98;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v98, 1, 1, v73);
      v57(v72, v74);
      swift_release();
      sub_10000B2A8(v74, &qword_100171CB0);
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      uint64_t v76 = v72;
    }
    else
    {
      sub_10006CCD8((uint64_t)v96, (uint64_t)v13, &qword_10016C738);
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v13, 1, v14) != 1)
      {
        uint64_t v58 = v88;
        uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
        id v91 = (id)(v88 + 32);
        uint64_t v96 = v59;
        v59(v19, v13, v14);
        uint64_t v98 = *(void *)(v85 + 80);
        LODWORD(v97) = *(unsigned __int8 *)(v85 + 16);
        uint64_t v90 = swift_allocObject();
        swift_weakInit();
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v17, v19, v14);
        uint64_t v60 = v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v87, a9, v89);
        unint64_t v61 = (*(unsigned __int8 *)(v58 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
        uint64_t v62 = v61 + v15;
        unint64_t v63 = (*(unsigned __int8 *)(v60 + 80) + v62 + 1) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
        unint64_t v84 = (v10 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v64 = (char *)swift_allocObject();
        uint64_t v65 = v93;
        *((void *)v64 + 2) = v90;
        *((void *)v64 + 3) = v65;
        uint64_t v66 = v96;
        *((void *)v64 + 4) = v95;
        v66(&v64[v61], v17, v14);
        v64[v62] = v94;
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v64[v63], v87, v89);
        uint64_t v67 = (void (**)(uint64_t, uint64_t))&v64[v84];
        uint64_t v68 = v92;
        *uint64_t v67 = v99;
        v67[1] = v68;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_1000DB78C((uint64_t)v19, v97, (uint64_t)sub_100124808, (uint64_t)v64);
        swift_release();
        (*(void (**)(char *, uint64_t))(v88 + 8))(v19, v14);
        swift_release();
        swift_release();
        return;
      }
      uint64_t v36 = v22;
      sub_10000B2A8((uint64_t)v13, &qword_10016C738);
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v47 = sub_10012AB60();
      sub_10000D7A4(v47, (uint64_t)qword_100181C40);
      id v48 = v91;
      uint64_t v49 = sub_10012AB40();
      os_log_type_t v50 = sub_10012CD60();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 136446723;
        uint64_t v100 = sub_1001246A4(v48);
        uint64_t v101 = v52;
        sub_1000053D8(&qword_10016C858);
        uint64_t v53 = sub_10012CAB0();
        uint64_t v100 = sub_100123564(v53, v54, &v102);
        sub_10012CF70();

        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2160;
        uint64_t v100 = 1752392040;
        sub_10012CF70();
        *(_WORD *)(v51 + 22) = 2081;
        id v55 = [v48 location];
        if (v55) {
          id v55 = (id)sub_100124634(v55);
        }
        else {
          uint64_t v56 = 0;
        }
        uint64_t v69 = v99;
        uint64_t v100 = (uint64_t)v55;
        uint64_t v101 = v56;
        uint64_t v77 = sub_10012CAB0();
        uint64_t v100 = sub_100123564(v77, v78, &v102);
        sub_10012CF70();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Timeline failed (no location). configuration.identifier=%{public}s, location=%{private,mask.hash}s ", (uint8_t *)v51, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v69 = v99;
      }
      uint64_t v79 = v97;
      sub_10011969C(1, v97);
      uint64_t v80 = enum case for WidgetRefreshFailureReason.noLocationData(_:);
      uint64_t v81 = sub_10012AA20();
      uint64_t v82 = v98;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 104))(v98, v80, v81);
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v82, 0, 1, v81);
      v69(v79, v82);
      swift_release();
      sub_10000B2A8(v82, &qword_100171CB0);
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      uint64_t v76 = v79;
    }
    v75(v76, v36);
  }
  else
  {
    if (qword_10016AE28 != -1) {
      swift_once();
    }
    uint64_t v31 = sub_10012AB60();
    sub_10000D7A4(v31, (uint64_t)qword_100181C40);
    unint64_t v32 = v95;
    swift_bridgeObjectRetain_n();
    uint64_t v33 = sub_10012AB40();
    os_log_type_t v34 = sub_10012CD60();
    if (os_log_type_enabled(v33, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v100 = swift_slowAlloc();
      *(_DWORD *)id v35 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v102 = sub_100123564(v93, v32, &v100);
      sub_10012CF70();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Timeline: failed for %s (we have been deallocated while obtaining location information)", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_1001220D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), uint64_t a9)
{
  uint64_t v93 = a8;
  uint64_t v94 = a5;
  uint64_t v90 = a7;
  LODWORD(v89) = a6;
  uint64_t v96 = a3;
  uint64_t v83 = sub_10012A5E0();
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10012A6B0();
  uint64_t v85 = *(void *)(v12 - 8);
  uint64_t v86 = v12;
  __chkstk_darwin(v12);
  unint64_t v84 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000053D8(&qword_100171CC0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000053D8(&qword_100171CB0);
  __chkstk_darwin(v17 - 8);
  uint64_t v91 = (uint64_t)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_1000053D8(&qword_100171CB8);
  uint64_t v92 = *(void *)(v95 - 8);
  uint64_t v19 = __chkstk_darwin(v95);
  uint64_t v88 = (uint64_t)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v80 - v21;
  uint64_t v23 = type metadata accessor for WeatherDataOperationResult(0);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v80 - v27;
  uint64_t v29 = sub_1000053D8(&qword_10016E7F8);
  __chkstk_darwin(v29);
  uint64_t v31 = (uint64_t *)((char *)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v87 = a9;
    sub_10006CCD8(a1, (uint64_t)v31, &qword_10016E7F8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v32 = *v31;
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v33 = sub_10012AB60();
      uint64_t v34 = sub_10000D7A4(v33, (uint64_t)qword_100181C40);
      swift_bridgeObjectRetain_n();
      uint64_t v89 = v34;
      id v35 = sub_10012AB40();
      os_log_type_t v36 = sub_10012CD60();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        uint64_t v81 = v32;
        id v38 = (uint8_t *)v37;
        uint64_t v99 = swift_slowAlloc();
        *(_DWORD *)id v38 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v98 = sub_100123564(v96, a4, &v99);
        sub_10012CF70();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Timeline: failed to fetch or interpolate fresh weather data for %s, trying old cached data first", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v32 = v81;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_retain();
      uint64_t v47 = v94;
      sub_1000DC060(v94);
      swift_release();
      if (_s13WeatherWidget20WeatherDataViewModelOwet_0((uint64_t)v16, 1, v23) == 1)
      {
        sub_10000B2A8((uint64_t)v16, &qword_100171CC0);
        uint64_t v49 = v84;
        uint64_t v48 = v85;
        uint64_t v50 = v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v84, v47, v86);
        swift_bridgeObjectRetain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v51 = sub_10012AB40();
        os_log_type_t v52 = sub_10012CD40();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = v48;
          uint64_t v54 = swift_slowAlloc();
          uint64_t v99 = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 136316163;
          swift_bridgeObjectRetain();
          uint64_t v98 = sub_100123564(v96, a4, &v99);
          uint64_t v81 = v32;
          sub_10012CF70();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v54 + 12) = 2160;
          uint64_t v98 = 1752392040;
          sub_10012CF70();
          *(_WORD *)(v54 + 22) = 2081;
          sub_10012A600();
          uint64_t v55 = sub_10012CAB0();
          uint64_t v98 = sub_100123564(v55, v56, &v99);
          sub_10012CF70();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v86);
          *(_WORD *)(v54 + 32) = 2160;
          uint64_t v98 = 1752392040;
          uint64_t v57 = v81;
          sub_10012CF70();
          *(_WORD *)(v54 + 42) = 2081;
          uint64_t v98 = v57;
          swift_errorRetain();
          sub_1000053D8(&qword_10016C870);
          uint64_t v58 = sub_10012CAA0();
          uint64_t v98 = sub_100123564(v58, v59, &v99);
          sub_10012CF70();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Timeline: failed to fetch weather data or get cached data for %s. location=%{private,mask.hash}s, error=%{private,mask.hash}s", (uint8_t *)v54, 0x34u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
          swift_errorRelease();
          swift_errorRelease();
        }

        uint64_t v71 = v95;
        uint64_t v72 = v88;
        sub_10011969C(2, v88);
        uint64_t v73 = enum case for WidgetRefreshFailureReason.noWeatherData(_:);
        uint64_t v74 = sub_10012AA20();
        uint64_t v75 = v91;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 104))(v91, v73, v74);
        _s13WeatherWidget20WeatherDataViewModelOwst_0(v75, 0, 1, v74);
        v93(v72, v75);
        swift_release();
        swift_errorRelease();
        sub_10000B2A8(v75, &qword_100171CB0);
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v72, v71);
        return;
      }
      sub_10012423C((uint64_t)v16, (uint64_t)v26, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
      swift_bridgeObjectRetain_n();
      uint64_t v68 = sub_10012AB40();
      os_log_type_t v69 = sub_10012CD60();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = (uint8_t *)swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        *(_DWORD *)uint64_t v70 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v98 = sub_100123564(v96, a4, &v99);
        sub_10012CF70();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "Timeline: successsully retrieved cached weather data for %s", v70, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v76 = v95;
      uint64_t v77 = v88;
      sub_10011A6BC();
      uint64_t v78 = sub_10012AA20();
      uint64_t v79 = v91;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v91, 1, 1, v78);
      v93(v77, v79);
      swift_release();
      swift_errorRelease();
      sub_10000B2A8(v79, &qword_100171CB0);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v77, v76);
      uint64_t v67 = (uint64_t)v26;
    }
    else
    {
      sub_10012423C((uint64_t)v31, (uint64_t)v28, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
      if (qword_10016AE28 != -1) {
        swift_once();
      }
      uint64_t v43 = sub_10012AB60();
      sub_10000D7A4(v43, (uint64_t)qword_100181C40);
      swift_bridgeObjectRetain_n();
      unint64_t v44 = sub_10012AB40();
      os_log_type_t v45 = sub_10012CD60();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v98 = sub_100123564(v96, a4, &v99);
        sub_10012CF70();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Timeline: successfully fetched weather data for %s", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v60 = v95;
      sub_10011A6BC();
      uint64_t v61 = sub_10012C970();
      swift_retain();
      unsigned __int8 v62 = sub_1000E9A6C();
      swift_release();
      if (v62)
      {
        swift_retain();
        uint64_t v63 = sub_10012A680();
        sub_1000E9040(v61, v63, v64);
        swift_release();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v65 = sub_10012AA20();
      uint64_t v66 = v91;
      _s13WeatherWidget20WeatherDataViewModelOwst_0(v91, 1, 1, v65);
      v93((uint64_t)v22, v66);
      swift_release();
      sub_10000B2A8(v66, &qword_100171CB0);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v22, v60);
      uint64_t v67 = (uint64_t)v28;
    }
    sub_100123D04(v67, (void (*)(void))type metadata accessor for WeatherDataOperationResult);
    return;
  }
  if (qword_10016AE28 != -1) {
    swift_once();
  }
  uint64_t v39 = sub_10012AB60();
  sub_10000D7A4(v39, (uint64_t)qword_100181C40);
  swift_bridgeObjectRetain_n();
  os_log_type_t v40 = sub_10012AB40();
  os_log_type_t v41 = sub_10012CD60();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v98 = sub_100123564(v96, a4, &v99);
    sub_10012CF70();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Timeline: failed for %s (we have been deallocated while fetching weather data)", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_100122FBC()
{
}

void sub_100122FE0()
{
}

void sub_100123004()
{
}

uint64_t sub_100123028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1001230DC;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_1001230DC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001231D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100125424;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100123284()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001232BC()
{
  sub_100047278();
  sub_10012C950();
  sub_10000DB98();
  sub_100129300();
  sub_10000DB98();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v0 = sub_100125480();
  v1(v0);
  uint64_t v2 = sub_100099A1C();
  v3(v2);
  sub_100047260();
  return _swift_deallocObject(v4, v5, v6);
}

uint64_t sub_1001233A4(uint64_t a1, uint64_t a2)
{
  return sub_100124478(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_10011DA1C);
}

uint64_t sub_1001233BC()
{
  sub_10012C950();
  sub_10000DB98();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 56) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v8 = sub_1001254F0();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

void sub_100123460()
{
  uint64_t v0 = sub_10012C950();
  sub_10005C734(v0);
  sub_1001256E8();
  uint64_t v1 = sub_10012565C();

  sub_10011DC30(v1, v2, v3, v4, v5, v6, v7, v8);
}

id sub_1001234BC(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = sub_10012CA20();
  swift_bridgeObjectRelease();
  sub_100046928(0, &qword_100171CD8);
  Class isa = sub_10012CB90().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v3 initWithExplanation:v5 target:a3 attributes:isa];

  return v7;
}

uint64_t sub_100123564(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100123638(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100123C8C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100123C8C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000DB48((uint64_t)v12);
  return v7;
}

uint64_t sub_100123638(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100123790((char *)__src, HIBYTE(a6) & 0xF, __dst);
      sub_10012CF80();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_100123868(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = sub_10012D020();
    if (!v8)
    {
      uint64_t result = sub_10012D060();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_100123790(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_10012D0A0();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_100123868(uint64_t a1, unint64_t a2)
{
  int v2 = sub_100123900(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v2 = sub_100123ADC(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    int v2 = sub_100123ADC((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_100123900(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = sub_10012CB00();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_100123A74(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = sub_10012CFE0();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  sub_10012D0A0();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)sub_10012D060();
  __break(1u);
  return result;
}

void *sub_100123A74(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000053D8(&qword_100171CA8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_100123ADC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000053D8(&qword_100171CA8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1000464B0(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100123BB4(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100123BB4(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_10012D0A0();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_100123C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100123CEC(uint64_t a1)
{
  return sub_100124820(a1, (uint64_t (*)(uint64_t, void, void, void, char *, void, char *, void, void))sub_10011E718);
}

uint64_t sub_100123D04(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000B3E8();
  sub_10000B424();
  v3();
  return a1;
}

uint64_t sub_100123D54()
{
  return sub_10011B678(v0);
}

uint64_t sub_100123D70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100123DB0()
{
  sub_10011B8C4(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_100123DB8()
{
  uint64_t v2 = (int *)type metadata accessor for ForecastEntry(0);
  sub_100125428();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v44 = *(void *)(v6 + 64);
  swift_release();
  swift_release();
  int64_t v7 = (int *)(v0 + v5);
  uint64_t v8 = sub_100129300();
  sub_10000B3FC();
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v43(v0 + v5, v8);
  uint64_t v10 = v0 + v5 + v2[5];
  uint64_t v11 = sub_10012C920();
  if (!sub_10012561C(v11))
  {
    sub_1000472C0();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v1);
  }
  uint64_t v13 = (char *)v7 + v2[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for WidgetContext();
  uint64_t v14 = sub_10012563C();
  if (!sub_1001255BC(v14))
  {
    sub_1000472C0();
    sub_1000C8584();
    v15();
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = (char *)v7 + v2[7];
  type metadata accessor for ForecastEntry.Model(0);
  if (sub_10012567C() == 1)
  {
    type metadata accessor for WeatherDataViewModel();
    int v17 = sub_10012567C();
    switch(v17)
    {
      case 2:
        sub_10012BE90();
        sub_10000B3E8();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
        break;
      case 1:
        sub_100129330();
        sub_10000B3E8();
        sub_10000B424();
        v37();
        type metadata accessor for InstantWeatherViewModel();
        sub_1001256C8();
        sub_10000B3E8();
        sub_10000B424();
        v38();
        uint64_t v39 = &v16[*(int *)(v8 + 24)];
        sub_10012C250();
        sub_10000B3E8();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
        break;
      case 0:
        uint64_t v18 = sub_100129330();
        sub_10000B3FC();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
        type metadata accessor for AggregateWeatherViewModel(0);
        sub_10012559C();
        sub_10000B3E8();
        sub_10000B424();
        v20();
        sub_10012C250();
        sub_10000B3E8();
        sub_10000B424();
        v21();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = &v16[v7[9]];
        uint64_t v23 = type metadata accessor for AirQualityViewModel();
        if (!sub_1001254B8(v23))
        {
          sub_10000B424();
          v24();
          sub_10000B424();
          v25();
          sub_100129B70();
          sub_10000B3E8();
          sub_10000B424();
          v26();
          uint64_t v27 = &v22[*((int *)v13 + 8)];
          sub_100129C50();
          sub_10000B3E8();
          (*(void (**)(char *))(v28 + 8))(v27);
        }
        uint64_t v29 = &v16[v7[10]];
        uint64_t v30 = sub_10012C6B0();
        if (!sub_1001255DC(v30))
        {
          sub_1000472C0();
          (*(void (**)(char *, char *))(v31 + 8))(v29, v22);
        }
        swift_bridgeObjectRelease();
        if (!sub_100125560())
        {
          sub_1000472C0();
          sub_1000C8584();
          v32();
        }
        uint64_t v33 = (uint64_t)&v16[v7[14]];
        uint64_t v34 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v33, 1, v34)) {
          v43(v33, v8);
        }
        break;
    }
  }

  return _swift_deallocObject(v0, v5 + v44, v4 | 7);
}

uint64_t sub_10012423C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_10012429C()
{
  uint64_t v0 = type metadata accessor for ForecastEntry(0);
  sub_10005C734(v0);
  uint64_t v1 = sub_10012565C();

  return sub_10011C1F8(v1, v2, v3, v4, v5, v6);
}

uint64_t sub_100124304(uint64_t a1)
{
  return sub_10012536C(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *))sub_10011CB28);
}

uint64_t sub_10012431C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10000B3FC();
  sub_10006D61C();
  v4();
  return a2;
}

uint64_t sub_100124378()
{
  sub_100047278();
  sub_10012C950();
  sub_10000DB98();
  sub_100129300();
  sub_10000DB98();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v0 = sub_100125480();
  v1(v0);
  uint64_t v2 = sub_100099A1C();
  v3(v2);
  sub_100047260();
  return _swift_deallocObject(v4, v5, v6);
}

uint64_t sub_100124460(uint64_t a1, uint64_t a2)
{
  return sub_100124478(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_100121218);
}

uint64_t sub_100124478(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = sub_10012C950();
  sub_100047198(v6);
  uint64_t v7 = sub_100129300();
  sub_10005C734(v7);
  sub_1001256E8();
  return a3(a1, a2);
}

uint64_t sub_100124520()
{
  sub_10012C950();
  sub_10000DB98();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 64) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v8 = sub_1001254F0();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

void sub_1001245CC()
{
  uint64_t v1 = sub_10012C950();
  sub_10005C734(v1);
  uint64_t v11 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v3 = sub_10012565C();
  sub_10012142C(v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100124634(void *a1)
{
  id v2 = [a1 identifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = sub_10012CA40();

  return v3;
}

uint64_t sub_1001246A4(void *a1)
{
  id v1 = [a1 identifier];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = sub_10012CA40();

  return v3;
}

uint64_t sub_10012470C()
{
  sub_100047278();
  sub_10012A6B0();
  sub_10000DB98();
  sub_10012C950();
  sub_10000DB98();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_100125480();
  v1(v0);
  uint64_t v2 = sub_100099A1C();
  v3(v2);
  swift_release();
  sub_100047260();
  return _swift_deallocObject(v4, v5, v6);
}

uint64_t sub_100124808(uint64_t a1)
{
  return sub_100124820(a1, (uint64_t (*)(uint64_t, void, void, void, char *, void, char *, void, void))sub_1001220D8);
}

uint64_t sub_100124820(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, char *, void, char *, void, void))
{
  uint64_t v5 = sub_10012A6B0();
  sub_100047198(v5);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = v7 + *(void *)(v8 + 64);
  uint64_t v10 = sub_10012C950();
  sub_100047198(v10);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  unint64_t v15 = (v9 + *(unsigned __int8 *)(v12 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (*(void *)(v14 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a2(a1, *((void *)v2 + 2), *((void *)v2 + 3), *((void *)v2 + 4), &v2[v7], v2[v9], &v2[v15], *(void *)&v2[v16], *(void *)&v2[v16 + 8]);
}

uint64_t sub_1001248FC()
{
  uint64_t v2 = (int *)type metadata accessor for ForecastEntry(0);
  sub_100125428();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v46 = *(void *)(v6 + 64);
  swift_release();
  swift_release();
  unint64_t v7 = (int *)(v0 + v5);
  uint64_t v8 = sub_100129300();
  sub_10000B3FC();
  os_log_type_t v45 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v45(v0 + v5, v8);
  uint64_t v10 = v0 + v5 + v2[5];
  uint64_t v11 = sub_10012C920();
  if (!sub_10012561C(v11))
  {
    sub_1000472C0();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v1);
  }
  uint64_t v13 = (char *)v7 + v2[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for WidgetContext();
  uint64_t v14 = sub_10012563C();
  if (!sub_1001255BC(v14))
  {
    sub_1000472C0();
    sub_1000C8584();
    v15();
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = (char *)v7 + v2[7];
  type metadata accessor for ForecastEntry.Model(0);
  if (sub_10012567C() == 1)
  {
    type metadata accessor for WeatherDataViewModel();
    int v17 = sub_10012567C();
    switch(v17)
    {
      case 2:
        sub_10012BE90();
        sub_10000B3E8();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
        break;
      case 1:
        sub_100129330();
        sub_10000B3E8();
        sub_10000B424();
        v37();
        type metadata accessor for InstantWeatherViewModel();
        sub_1001256C8();
        sub_10000B3E8();
        sub_10000B424();
        v38();
        uint64_t v39 = &v16[*(int *)(v8 + 24)];
        sub_10012C250();
        sub_10000B3E8();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
        break;
      case 0:
        uint64_t v18 = sub_100129330();
        sub_10000B3FC();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
        type metadata accessor for AggregateWeatherViewModel(0);
        sub_10012559C();
        sub_10000B3E8();
        sub_10000B424();
        v20();
        sub_10012C250();
        sub_10000B3E8();
        sub_10000B424();
        v21();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = &v16[v7[9]];
        uint64_t v23 = type metadata accessor for AirQualityViewModel();
        if (!sub_1001254B8(v23))
        {
          sub_10000B424();
          v24();
          sub_10000B424();
          v25();
          sub_100129B70();
          sub_10000B3E8();
          sub_10000B424();
          v26();
          uint64_t v27 = &v22[*((int *)v13 + 8)];
          sub_100129C50();
          sub_10000B3E8();
          (*(void (**)(char *))(v28 + 8))(v27);
        }
        uint64_t v29 = &v16[v7[10]];
        uint64_t v30 = sub_10012C6B0();
        if (!sub_1001255DC(v30))
        {
          sub_1000472C0();
          (*(void (**)(char *, char *))(v31 + 8))(v29, v22);
        }
        swift_bridgeObjectRelease();
        if (!sub_100125560())
        {
          sub_1000472C0();
          sub_1000C8584();
          v32();
        }
        uint64_t v33 = (uint64_t)&v16[v7[14]];
        uint64_t v34 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v33, 1, v34)) {
          v45(v33, v8);
        }
        break;
    }
  }
  unint64_t v42 = (v46 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = v42 + 8;

  return _swift_deallocObject(v0, v43, v4 | 7);
}

uint64_t sub_100124D9C()
{
  uint64_t v0 = type metadata accessor for ForecastEntry(0);
  sub_100047198(v0);
  uint64_t v1 = sub_10012565C();

  return sub_10011FA14(v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100124E2C()
{
  uint64_t v1 = (int *)type metadata accessor for ForecastEntry(0);
  sub_100125428();
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v56 = *(void *)(v4 + 64);
  uint64_t v57 = sub_10012A6B0();
  sub_10000DB98();
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v55 = *(void *)(v8 + 64);
  swift_release();
  swift_release();
  uint64_t v9 = v0 + ((v3 + 40) & ~v3);
  sub_100129300();
  sub_10000B3E8();
  uint64_t v53 = *(void (**)(uint64_t))(v10 + 8);
  uint64_t v54 = v11;
  v53(v9);
  uint64_t v12 = v9 + v1[5];
  uint64_t v13 = sub_10012C920();
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v12, 1, v13))
  {
    sub_1000472C0();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  uint64_t v15 = v9 + v1[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 + *(int *)(type metadata accessor for WidgetContext() + 40);
  uint64_t v17 = sub_100129220();
  if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v16, 1, v17))
  {
    sub_1000472C0();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = v9 + v1[7];
  type metadata accessor for ForecastEntry.Model(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for WeatherDataViewModel();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        sub_10012BE90();
        sub_10000B3E8();
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v19, v42);
        break;
      case 1:
        sub_100129330();
        sub_10000B3E8();
        sub_10000B424();
        v43();
        uint64_t v44 = type metadata accessor for InstantWeatherViewModel();
        uint64_t v45 = sub_100125498(v44);
        v46(v45);
        uint64_t v47 = v19 + *(int *)(v44 + 24);
        sub_10012C250();
        sub_10000B3E8();
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
        break;
      case 0:
        uint64_t v21 = sub_100129330();
        sub_10000B3FC();
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
        uint64_t v23 = (int *)type metadata accessor for AggregateWeatherViewModel(0);
        uint64_t v24 = sub_100125498((uint64_t)v23);
        v25(v24);
        sub_10012C250();
        sub_10000B3E8();
        sub_10000B424();
        v26();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v27 = v19 + v23[9];
        uint64_t v28 = type metadata accessor for AirQualityViewModel();
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v27, 1, v28))
        {
          sub_10000B424();
          v29();
          sub_10000B424();
          v30();
          sub_100129B70();
          sub_10000B3E8();
          sub_10000B424();
          v31();
          uint64_t v32 = v27 + *(int *)(v28 + 32);
          sub_100129C50();
          sub_10000B3E8();
          (*(void (**)(uint64_t))(v33 + 8))(v32);
        }
        uint64_t v34 = v19 + v23[10];
        uint64_t v35 = sub_10012C6B0();
        if (!sub_1001254B8(v35))
        {
          sub_1000472C0();
          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v27);
        }
        swift_bridgeObjectRelease();
        uint64_t v37 = v19 + v23[13];
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v37, 1, v17))
        {
          sub_1000472C0();
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v17);
        }
        uint64_t v39 = v19 + v23[14];
        uint64_t v40 = type metadata accessor for AggregateWeatherViewModel.SunEvent(0);
        if (!_s13WeatherWidget20WeatherDataViewModelOwet_0(v39, 1, v40)) {
          ((void (*)(uint64_t, uint64_t))v53)(v39, v54);
        }
        break;
    }
  }
  uint64_t v50 = (v56 + ((v3 + 40) & ~v3) + v7 + 1) & ~v7;
  uint64_t v51 = v50 + v55;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v50, v57);

  return _swift_deallocObject(v0, v51, v3 | v7 | 7);
}

uint64_t sub_100125354(uint64_t a1)
{
  return sub_10012536C(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *))sub_1001204E0);
}

uint64_t sub_10012536C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *))
{
  uint64_t v4 = type metadata accessor for ForecastEntry(0);
  sub_100047198(v4);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v8 = v6 + *(void *)(v7 + 64);
  uint64_t v9 = sub_10012A6B0();
  sub_10005C734(v9);
  uint64_t v11 = *((void *)v2 + 2);
  uint64_t v12 = *((void *)v2 + 3);
  uint64_t v13 = *((void *)v2 + 4);
  uint64_t v14 = &v2[(v8 + *(unsigned __int8 *)(v10 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)];
  uint64_t v15 = v2[v8];

  return a2(a1, v11, v12, v13, &v2[v6], v15, v14);
}

uint64_t sub_100125444(void *a1)
{
  sub_10000D890(a1, v1);
  return 0;
}

uint64_t sub_100125464()
{
  return sub_10012A770();
}

uint64_t sub_100125480()
{
  return v0 + v1;
}

uint64_t sub_100125498(uint64_t a1)
{
  return v1 + *(int *)(a1 + 20);
}

uint64_t sub_1001254B8(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_1001254D8()
{
  return swift_allocObject();
}

uint64_t sub_1001254F0()
{
  return v0 + v1;
}

uint64_t sub_100125508()
{
  *(void *)(v0 - 104) = 1752392040;
  return sub_10012CF70();
}

uint64_t sub_10012552C(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return sub_10012CF70();
}

uint64_t sub_100125560()
{
  uint64_t v4 = v0 + *(int *)(v2 + 52);
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v4, 1, v1);
}

uint64_t sub_100125584(uint64_t a1, unint64_t a2)
{
  return sub_100123564(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10012559C()
{
  return sub_10012A6B0();
}

uint64_t sub_1001255BC(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_1001255DC(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_1001255FC()
{
  *(void *)(v0 - 104) = 1752392040;
  return v0 - 104;
}

uint64_t sub_10012561C(uint64_t a1)
{
  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v1, 1, a1);
}

uint64_t sub_10012563C()
{
  return sub_100129220();
}

uint64_t sub_10012565C()
{
  return v0;
}

uint64_t sub_100125668()
{
  return v0;
}

uint64_t sub_10012567C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_100125694()
{
  return sub_10012A780();
}

uint64_t sub_1001256C8()
{
  return sub_10012A6B0();
}

uint64_t sub_1001256FC()
{
  return swift_slowAlloc();
}

unint64_t sub_100125714()
{
  return 0xD000000000000022;
}

ValueMetadata *type metadata accessor for AQIComplicationWidget()
{
  return &type metadata for AQIComplicationWidget;
}

uint64_t sub_100125740()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10012575C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000053D8(&qword_100171CE8);
  sub_10000DB98();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v10 = v9 - v8;
  sub_1000053D8(&qword_100171CF0);
  sub_10000DB98();
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  __chkstk_darwin(v11);
  sub_10000DC50();
  uint64_t v15 = v14 - v13;
  sub_1000053D8(&qword_100171CF8);
  sub_10000DB98();
  uint64_t v42 = v16;
  uint64_t v43 = v17;
  __chkstk_darwin(v16);
  sub_10000DC50();
  uint64_t v39 = v19 - v18;
  type metadata accessor for WeatherTimelineProvider();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  sub_100118DBC(64, a1, a2);
  type metadata accessor for AQIContentView();
  sub_100125D34(&qword_100171D00, (void (*)(uint64_t))type metadata accessor for AQIContentView);
  sub_100125D34(&qword_10016BDB8, (void (*)(uint64_t))type metadata accessor for WeatherTimelineProvider);
  sub_10012C890();
  sub_10012AF80();
  uint64_t v20 = sub_10012B400();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  sub_100125D7C();
  sub_10012B0B0();
  sub_100008278(v20, v22, v24);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  sub_10012AF80();
  uint64_t v25 = sub_10012B400();
  uint64_t v27 = v26;
  LOBYTE(v22) = v28 & 1;
  swift_getOpaqueTypeConformance2();
  sub_10012B070();
  sub_100008278(v25, v27, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v15, v40);
  sub_1000053D8(&qword_10016B9C8);
  uint64_t v29 = sub_10012C800();
  sub_10000DB98();
  uint64_t v31 = v30;
  uint64_t v33 = *(void *)(v32 + 72);
  unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_100130850;
  unint64_t v36 = v35 + v34;
  uint64_t v37 = *(void (**)(unint64_t, void, uint64_t))(v31 + 104);
  v37(v36, enum case for WidgetFamily.accessoryCircular(_:), v29);
  v37(v36 + v33, enum case for WidgetFamily.accessoryInline(_:), v29);
  swift_getOpaqueTypeConformance2();
  sub_10012B090();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v39, v42);
}

uint64_t sub_100125C38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ForecastEntry(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024484(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath();
  sub_1000053D8(&qword_10016B410);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = type metadata accessor for AQIContentView();
  return sub_100024560((uint64_t)v6, (uint64_t)a2 + *(int *)(v7 + 20));
}

unint64_t sub_100125CFC@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_100125714();
  *a1 = 0xD000000000000022;
  a1[1] = v3;
  return result;
}

uint64_t sub_100125D2C()
{
  return sub_10012575C(*v0, v0[1]);
}

uint64_t sub_100125D34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100125D7C()
{
  unint64_t result = qword_100171D08;
  if (!qword_100171D08)
  {
    sub_100005470(&qword_100171CE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171D08);
  }
  return result;
}

uint64_t sub_100125DD4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static InstantWeatherViewModel.__derived_struct_equals(_:_:)()
{
  if ((sub_100129310() & 1) == 0) {
    return 0;
  }
  type metadata accessor for InstantWeatherViewModel();
  if ((sub_10012A640() & 1) == 0) {
    return 0;
  }

  return sub_10012C1E0();
}

uint64_t type metadata accessor for InstantWeatherViewModel()
{
  uint64_t result = qword_100171D80;
  if (!qword_100171D80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100125F6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_10012D1F0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000;
    if (v6 || (sub_10012D1F0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000012 && a2 == 0x8000000100139D90)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = sub_10012D1F0();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1001260A4(char a1)
{
  if (!a1) {
    return 25705;
  }
  if (a1 == 1) {
    return 0x6E6F697461636F6CLL;
  }
  return 0xD000000000000012;
}

uint64_t sub_1001260F4()
{
  return sub_1001260A4(*v0);
}

uint64_t sub_1001260FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100125F6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100126124(uint64_t a1)
{
  unint64_t v2 = sub_1001263E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100126160(uint64_t a1)
{
  unint64_t v2 = sub_1001263E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InstantWeatherViewModel.encode(to:)(void *a1)
{
  uint64_t v3 = sub_1000053D8(&qword_100171D10);
  sub_10000DB98();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_10000DC50();
  uint64_t v9 = v8 - v7;
  sub_10000D890(a1, a1[3]);
  sub_1001263E8();
  sub_10012D2C0();
  sub_100129330();
  sub_1001269B0(&qword_10016D1A8, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_10012D1B0();
  if (!v1)
  {
    type metadata accessor for InstantWeatherViewModel();
    sub_10012A6B0();
    sub_1001269B0(&qword_10016D1B0, (void (*)(uint64_t))&type metadata accessor for Location);
    sub_10012D1B0();
    sub_10012C250();
    sub_1001269B0(&qword_10016D1B8, (void (*)(uint64_t))&type metadata accessor for CurrentObservationViewModel);
    sub_10012D1B0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t sub_1001263E8()
{
  unint64_t result = qword_100171D18;
  if (!qword_100171D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171D18);
  }
  return result;
}

uint64_t InstantWeatherViewModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = sub_10012C250();
  sub_10000DB98();
  uint64_t v23 = v3;
  __chkstk_darwin(v4);
  sub_10000DBCC();
  uint64_t v26 = v5;
  uint64_t v29 = sub_10012A6B0();
  sub_10000DB98();
  uint64_t v27 = v6;
  __chkstk_darwin(v7);
  sub_10000DC50();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_100129330();
  sub_10000DB98();
  uint64_t v28 = v12;
  __chkstk_darwin(v13);
  sub_10000DBCC();
  uint64_t v30 = v14;
  sub_1000053D8(&qword_100171D20);
  sub_10000DB98();
  __chkstk_darwin(v15);
  sub_10000DC50();
  uint64_t v16 = type metadata accessor for InstantWeatherViewModel();
  __chkstk_darwin(v16);
  sub_10000DC50();
  uint64_t v19 = v18 - v17;
  sub_10000D890(a1, a1[3]);
  sub_1001263E8();
  sub_10012D2B0();
  if (v31) {
    return sub_10000DB48((uint64_t)a1);
  }
  sub_1001269B0(&qword_10016D238, (void (*)(uint64_t))&type metadata accessor for UUID);
  sub_10012D130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v19, v30, v11);
  sub_1001269B0(&qword_10016D240, (void (*)(uint64_t))&type metadata accessor for Location);
  sub_10012D130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v19 + *(int *)(v16 + 20), v10, v29);
  sub_1001269B0(&qword_10016D248, (void (*)(uint64_t))&type metadata accessor for CurrentObservationViewModel);
  sub_10012D130();
  uint64_t v20 = sub_1001274FC();
  v21(v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v19 + *(int *)(v16 + 24), v26, v25);
  sub_1001268A8(v19, a2);
  sub_10000DB48((uint64_t)a1);
  return sub_10012690C(v19);
}

uint64_t sub_1001268A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InstantWeatherViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012690C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InstantWeatherViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100126968()
{
  return sub_1001269B0(&qword_10016D2B0, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_1001269B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001269FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return InstantWeatherViewModel.init(from:)(a1, a2);
}

uint64_t sub_100126A14(void *a1)
{
  return InstantWeatherViewModel.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for InstantWeatherViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100129330();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_10012A6B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_10012C250();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for InstantWeatherViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129330();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = sub_10012C250();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t initializeWithCopy for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100129330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_10012C250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100129330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_10012C250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100129330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_10012C250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100129330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_10012A6B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_10012C250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001270A8);
}

uint64_t sub_1001270A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100129330();
  sub_10000B3D0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    sub_10012A6B0();
    sub_10000B3D0();
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v8 = v10;
      uint64_t v12 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v8 = sub_10012C250();
      uint64_t v12 = *(int *)(a3 + 24);
    }
    uint64_t v9 = a1 + v12;
  }

  return _s13WeatherWidget20WeatherDataViewModelOwet_0(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for InstantWeatherViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012715C);
}

uint64_t sub_10012715C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_100129330();
  sub_10000B3D0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    sub_10012A6B0();
    sub_10000B3D0();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = sub_10012C250();
      uint64_t v14 = *(int *)(a4 + 24);
    }
    uint64_t v11 = a1 + v14;
  }

  return _s13WeatherWidget20WeatherDataViewModelOwst_0(v11, a2, a2, v10);
}

uint64_t sub_100127204()
{
  uint64_t result = sub_100129330();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_10012A6B0();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_10012C250();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InstantWeatherViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001273D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstantWeatherViewModel.CodingKeys()
{
  return &type metadata for InstantWeatherViewModel.CodingKeys;
}

unint64_t sub_100127410()
{
  unint64_t result = qword_100171DC0;
  if (!qword_100171DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171DC0);
  }
  return result;
}

unint64_t sub_100127460()
{
  unint64_t result = qword_100171DC8;
  if (!qword_100171DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171DC8);
  }
  return result;
}

unint64_t sub_1001274B0()
{
  unint64_t result = qword_100171DD0;
  if (!qword_100171DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171DD0);
  }
  return result;
}

uint64_t sub_1001274FC()
{
  return *(void *)(v0 - 96);
}

uint64_t type metadata accessor for BundleLookup()
{
  return self;
}

id sub_100127534()
{
  type metadata accessor for BundleLookup();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  qword_100181E30 = (uint64_t)result;
  return result;
}

id WeatherIntent.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherIntent();
  return [super init];
}

uint64_t type metadata accessor for WeatherIntent()
{
  return self;
}

id WeatherIntent.init(coder:)(void *a1)
{
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for WeatherIntent();
  id v9 = sub_100128158((uint64_t)v11.super_class, "initWithCoder:", v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id WeatherIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    NSString v6 = sub_10012CA20();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithIdentifier:v6 backingStore:a3];

  return v7;
}

id WeatherIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    NSString v5 = sub_10012CA20();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for WeatherIntent();
  id v6 = [super initWithIdentifier:v5 backingStore:a3];

  return v6;
}

id WeatherIntent.__allocating_init(domain:verb:parametersByName:)()
{
  NSString v2 = sub_100128170();
  swift_bridgeObjectRelease();
  NSString v3 = sub_10012CA20();
  swift_bridgeObjectRelease();
  if (v1)
  {
    v4.super.Class isa = sub_10012C980().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }
  id v5 = [objc_allocWithZone(v0) initWithDomain:v2 verb:v3 parametersByName:v4.super.isa];

  return v5;
}

id WeatherIntent.init(domain:verb:parametersByName:)()
{
  NSString v2 = sub_100128170();
  swift_bridgeObjectRelease();
  NSString v3 = sub_10012CA20();
  swift_bridgeObjectRelease();
  if (v1)
  {
    v4.super.Class isa = sub_10012C980().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for WeatherIntent();
  id v5 = [super initWithDomain:v2 verb:v3 parametersByName:v4.super.isa];

  return v5;
}

id WeatherIntent.__deallocating_deinit()
{
  return sub_100128064(type metadata accessor for WeatherIntent);
}

unint64_t WeatherIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6) {
    return 0;
  }
  return result;
}

BOOL sub_100127A2C(uint64_t *a1, uint64_t *a2)
{
  return sub_10006412C(*a1, *a2);
}

Swift::Int sub_100127A38()
{
  return sub_1000261AC(*v0);
}

void sub_100127A40(uint64_t a1)
{
  sub_1000262EC(a1, *v1);
}

Swift::Int sub_100127A48(uint64_t a1)
{
  return sub_100026334(a1, *v1);
}

unint64_t sub_100127A50@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = WeatherIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_100127A84(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t WeatherIntentResponse.code.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___WeatherIntentResponse_code;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_100127B24(uint64_t a1)
{
  NSString v3 = (void *)(v1 + OBJC_IVAR___WeatherIntentResponse_code);
  uint64_t result = swift_beginAccess();
  *NSString v3 = a1;
  return result;
}

char *WeatherIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return WeatherIntentResponse.init(code:userActivity:)(a1, a2);
}

char *WeatherIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v5 = (char *)[v2 init];
  id v6 = &v5[OBJC_IVAR___WeatherIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  objc_super v7 = v5;
  [v7 setUserActivity:a2];

  return v7;
}

id WeatherIntentResponse.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id WeatherIntentResponse.init()()
{
  *(void *)&v0[OBJC_IVAR___WeatherIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WeatherIntentResponse();
  return [super init];
}

uint64_t type metadata accessor for WeatherIntentResponse()
{
  return self;
}

id WeatherLocation.__allocating_init(coder:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCoder:a1];

  return v3;
}

id WeatherIntentResponse.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___WeatherIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for WeatherIntentResponse();
  id v9 = sub_100128158((uint64_t)v11.super_class, "initWithCoder:", v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id WeatherIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithBackingStore:a1];

  return v3;
}

id WeatherIntentResponse.init(backingStore:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR___WeatherIntentResponse_code] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for WeatherIntentResponse();
  id v9 = sub_100128158((uint64_t)v11.super_class, "initWithBackingStore:", v3, v4, v5, v6, v7, v8, v11);

  return v9;
}

id WeatherIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  if (a1)
  {
    v2.super.Class isa = sub_10012C980().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = [objc_allocWithZone(v1) initWithPropertiesByName:v2.super.isa];

  return v3;
}

id WeatherIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___WeatherIntentResponse_code] = 0;
  if (a1)
  {
    v2.super.Class isa = sub_10012C980().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2.super.Class isa = 0;
  }
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for WeatherIntentResponse();
  id v9 = sub_100128158((uint64_t)v11.super_class, "initWithPropertiesByName:", v3, v4, v5, v6, v7, v8, v11);

  if (v9) {
  return v9;
  }
}

id WeatherIntentResponse.__deallocating_deinit()
{
  return sub_100128064(type metadata accessor for WeatherIntentResponse);
}

id sub_100128064(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

unint64_t sub_1001280A0()
{
  unint64_t result = qword_100171E78;
  if (!qword_100171E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100171E78);
  }
  return result;
}

uint64_t sub_1001280EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = WeatherIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100128118(uint64_t *a1)
{
  return sub_100127B24(*a1);
}

ValueMetadata *type metadata accessor for WeatherIntentResponseCode()
{
  return &type metadata for WeatherIntentResponseCode;
}

id sub_100128158(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return [super a2:v9];
}

NSString sub_100128170()
{
  return sub_10012CA20();
}

id WeatherLocation.__allocating_init(identifier:display:pronunciationHint:)()
{
  sub_100128AB8();
  if (v2)
  {
    NSString v3 = sub_10012CA20();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  NSString v4 = sub_10012CA20();
  swift_bridgeObjectRelease();
  if (v1)
  {
    NSString v5 = sub_10012CA20();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  id v6 = [objc_allocWithZone(v0) initWithIdentifier:v3 displayString:v4 pronunciationHint:v5];

  return v6;
}

id WeatherLocation.init(identifier:display:pronunciationHint:)()
{
  sub_100128AB8();
  if (v2)
  {
    NSString v3 = sub_10012CA20();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  NSString v4 = sub_10012CA20();
  swift_bridgeObjectRelease();
  if (v1)
  {
    NSString v5 = sub_10012CA20();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for WeatherLocation();
  id v6 = [super initWithIdentifier:v3 displayString:v4 pronunciationHint:v5];

  return v6;
}

uint64_t type metadata accessor for WeatherLocation()
{
  return self;
}

id WeatherLocation.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for WeatherLocation();
  [super initWithCoder:a1];

  return v3;
}

id WeatherLocation.__deallocating_deinit()
{
  return sub_100128A58(type metadata accessor for WeatherLocation);
}

id static WeatherLocationResolutionResult.success(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___WeatherLocationResolutionResult;
  [super successWithResolvedObject:a1];

  return v2;
}

id static WeatherLocationResolutionResult.disambiguation(with:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_100128630();
    swift_bridgeObjectRetain();
    sub_10012D080();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10012D200();
    sub_100128630();
  }
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_100128630();
  Class isa = sub_10012CB90().super.isa;
  swift_bridgeObjectRelease();
  v5.receiver = ObjCClassFromMetadata;
  v5.super_class = (Class)&OBJC_METACLASS___WeatherLocationResolutionResult;
  [super disambiguationWithObjectsToDisambiguate:isa];

  return v3;
}

unint64_t sub_100128630()
{
  unint64_t result = qword_100171EF8;
  if (!qword_100171EF8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100171EF8);
  }
  return result;
}

id static WeatherLocationResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___WeatherLocationResolutionResult;
  [super confirmationRequiredWithObjectToConfirm:a1];

  return v2;
}

void static WeatherLocationResolutionResult.success(with:)()
{
}

void static WeatherLocationResolutionResult.disambiguation(with:)()
{
}

void static WeatherLocationResolutionResult.confirmationRequired(with:)()
{
}

id WeatherLocationResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = sub_10012C980().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithJSONDictionary:isa forIntent:a2];

  return v6;
}

id WeatherLocationResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  Class isa = sub_10012C980().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for WeatherLocationResolutionResult();
  [super initWithJSONDictionary:isa forIntent:a2];

  id v6 = v5;
  if (v6) {

  }
  return v6;
}

uint64_t type metadata accessor for WeatherLocationResolutionResult()
{
  return self;
}

id WeatherLocationResolutionResult.__deallocating_deinit()
{
  return sub_100128A58(type metadata accessor for WeatherLocationResolutionResult);
}

id sub_100128A58(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  [super dealloc];
}

uint64_t sub_100128A90()
{
  return sub_10012D070();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t sub_100128AF0()
{
  return static _AssistantIntentsProvider.uniqueEntities.getter();
}

uint64_t sub_100128B00()
{
  return static AppIntentInternal.sideEffect.getter();
}

uint64_t sub_100128B10()
{
  return static AppIntentInternal.shortcutsMetadata.getter();
}

uint64_t sub_100128B50()
{
  return static AppIntent.openAppWhenRun.getter();
}

uint64_t sub_100128B60()
{
  return static AppIntent.description.getter();
}

uint64_t sub_100128B70()
{
  return static AppIntent.isDiscoverable.getter();
}

uint64_t sub_100128B80()
{
  return static AppIntent.parameterSummary.getter();
}

uint64_t sub_100128B90()
{
  return static AppIntent.authenticationPolicy.getter();
}

uint64_t sub_100128BD0()
{
  return IntentDialog._GeneratedDialogContent.init(fromResult:options:fallbackDialog:)();
}

uint64_t sub_100128BF0()
{
  return IntentDialog.init<A, B>(from:capturedContent:)();
}

uint64_t sub_100128C00()
{
  return type metadata accessor for IntentDialog();
}

uint64_t sub_100128C10()
{
  return static IntentResult.result<A>(value:dialog:)();
}

uint64_t sub_100128C20()
{
  return IntentParameter.wrappedValue.modify();
}

uint64_t sub_100128C30()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_100128C40()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t sub_100128C50()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t sub_100128C60()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

uint64_t sub_100128C70()
{
  return IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t sub_100128C80()
{
  return static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildBlock(_:)();
}

uint64_t sub_100128C90()
{
  return static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildExpression(_:)();
}

uint64_t sub_100128CA0()
{
  return _AssistantIntent.NegativeAssistantIntentPhrases.init<A>(for:phrases:)();
}

uint64_t sub_100128CB0()
{
  return type metadata accessor for _AssistantIntent.NegativeAssistantIntentPhrases();
}

uint64_t sub_100128CC0()
{
  return static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
}

uint64_t sub_100128CD0()
{
  return static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
}

uint64_t sub_100128CE0()
{
  return static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
}

uint64_t sub_100128CF0()
{
  return static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
}

uint64_t sub_100128D00()
{
  return static _AssistantIntent.ParameterValueBuilder.buildBlock()();
}

uint64_t sub_100128D10()
{
  return _AssistantIntent.Phrase.init(stringLiteral:)();
}

uint64_t sub_100128D20()
{
  return static _AssistantIntent.Builder.buildBlock(_:)();
}

uint64_t sub_100128D30()
{
  return static _AssistantIntent.Builder.buildExpression(_:)();
}

uint64_t sub_100128D40()
{
  return type metadata accessor for _AssistantIntent();
}

uint64_t sub_100128D50()
{
  return _AssistantIntent.init<A>(_:phrases:parameterValues:)();
}

uint64_t sub_100128D60()
{
  return IntentDescription.init(stringLiteral:)();
}

uint64_t sub_100128D70()
{
  return type metadata accessor for IntentDescription();
}

uint64_t sub_100128DB0()
{
  return URLRepresentableEnum.urlRepresentationParameter.getter();
}

uint64_t sub_100128DC0()
{
  return static _DialogBuilderEntity.buildBlock<A>(_:)();
}

uint64_t sub_100128DD0()
{
  return static _DialogBuilderEntity.buildExpression<A, B>(_:)();
}

uint64_t sub_100128DE0()
{
  return DisplayRepresentation.Image.init(appBundleIdentifier:)();
}

uint64_t sub_100128DF0()
{
  return type metadata accessor for DisplayRepresentation.Image();
}

uint64_t sub_100128E00()
{
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)();
}

uint64_t sub_100128E10()
{
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t sub_100128E20()
{
  return type metadata accessor for DisplayRepresentation();
}

uint64_t sub_100128E30()
{
  return EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)();
}

uint64_t sub_100128E40()
{
  return EnumURLRepresentation.init(_:)();
}

uint64_t sub_100128E50()
{
  return static EnumerableEntityQuery.findIntentDescription.getter();
}

uint64_t sub_100128E70()
{
  return static DynamicOptionsProvider.useForParameterResolution.getter();
}

uint64_t sub_100128EA0()
{
  return type metadata accessor for InputConnectionBehavior();
}

uint64_t sub_100128EB0()
{
  return _URLRepresentableEntity.urlRepresentationParameter.getter();
}

uint64_t sub_100128EF0()
{
  return static PersistentlyIdentifiable.persistentIdentifier.getter();
}

uint64_t sub_100128F10()
{
  return type metadata accessor for _GeneratedContentOptions();
}

uint64_t sub_100128F20()
{
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_100128F30()
{
  return type metadata accessor for TypeDisplayRepresentation();
}

uint64_t sub_100128F40()
{
  return type metadata accessor for _GeneratedContentFallback();
}

uint64_t sub_100128F60()
{
  return _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)();
}

uint64_t sub_100128F70()
{
  return _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)();
}

uint64_t sub_100128F80()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t sub_100128F90()
{
  return JSONDecoder.init()();
}

uint64_t sub_100128FA0()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t sub_100128FB0()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t sub_100128FC0()
{
  return JSONEncoder.init()();
}

uint64_t sub_100128FD0()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t sub_100128FF0()
{
  return Measurement.init(value:unit:)();
}

uint64_t sub_100129000()
{
  return Measurement.value.getter();
}

uint64_t sub_100129010()
{
  return Measurement.formatted<A>(_:placeholder:unitManager:)();
}

uint64_t sub_100129020()
{
  return Measurement.formatted<A>(_:placeholder:unitManager:)();
}

uint64_t sub_100129030()
{
  return static Measurement<>.fahrenheit(_:)();
}

uint64_t sub_100129040()
{
  return Measurement<>.converted(rounded:)();
}

uint64_t sub_100129050()
{
  return Measurement<>.converted(to:)();
}

uint64_t sub_100129060()
{
  return static CharacterSet.alphanumerics.getter();
}

uint64_t sub_100129070()
{
  return CharacterSet.inverted.getter();
}

uint64_t sub_100129080()
{
  return type metadata accessor for CharacterSet();
}

uint64_t sub_100129090()
{
  return DateInterval.init(start:duration:)();
}

uint64_t sub_1001290A0()
{
  return type metadata accessor for DateInterval();
}

uint64_t sub_1001290B0()
{
  return URLComponents.init(url:resolvingAgainstBaseURL:)();
}

uint64_t sub_1001290C0()
{
  return URLComponents.port.getter();
}

uint64_t sub_1001290D0()
{
  return type metadata accessor for URLComponents();
}

uint64_t sub_1001290E0()
{
  return DateComponents.date.getter();
}

uint64_t sub_1001290F0()
{
  return DateComponents.calendar.getter();
}

uint64_t sub_100129100()
{
  return AttributedString.characters.getter();
}

uint64_t sub_100129110()
{
  return type metadata accessor for AttributedString.CharacterView();
}

uint64_t sub_100129120()
{
  return type metadata accessor for AttributedString.FormattingOptions();
}

uint64_t sub_100129130()
{
  return static AttributedString.makeStyledString(localized:bundle:ignoreStyles:arguments:)();
}

uint64_t sub_100129140()
{
  return AttributedString.with(font:)();
}

uint64_t sub_100129150()
{
  return AttributedString.init(localized:options:table:bundle:locale:comment:)();
}

uint64_t sub_100129160()
{
  return type metadata accessor for AttributedString();
}

uint64_t sub_100129170()
{
  return AttributedString.init(_:attributes:)();
}

uint64_t sub_100129180(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  return NSLocalizedString(_:tableName:bundle:value:comment:)(_, tableName, bundle, value, comment)._countAndFlagsBits;
}

uint64_t sub_100129190()
{
  return AttributeContainer.init()();
}

uint64_t sub_1001291A0()
{
  return type metadata accessor for AttributeContainer();
}

uint64_t sub_1001291B0()
{
  return _convertNSErrorToError(_:)();
}

uint64_t sub_1001291C0()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_1001291D0()
{
  return type metadata accessor for LocalizedStringResource();
}

void sub_1001291E0(NSURL *retstr@<X8>)
{
}

uint64_t sub_1001291F0()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t sub_100129200()
{
  return URL.path.getter();
}

uint64_t sub_100129210()
{
  return URL.init(string:)();
}

uint64_t sub_100129220()
{
  return type metadata accessor for URL();
}

uint64_t sub_100129230()
{
  return Date.zeroMinutes(timeZone:)();
}

uint64_t sub_100129240()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t sub_100129250()
{
  return Date.addingTimeInterval(_:)();
}

uint64_t sub_100129260()
{
  return static Date.> infix(_:_:)();
}

uint64_t sub_100129270()
{
  return static Date.< infix(_:_:)();
}

uint64_t sub_100129280()
{
  return static Date.+ infix(_:_:)();
}

uint64_t sub_100129290()
{
  return static Date.- infix(_:_:)();
}

uint64_t sub_1001292A0()
{
  return static Date.== infix(_:_:)();
}

uint64_t sub_1001292B0()
{
  return static Date.now.getter();
}

uint64_t sub_1001292C0()
{
  return Date.zeroSeconds.getter();
}

uint64_t sub_1001292D0()
{
  return Date.shortDayOfWeek(timeZone:isStandalone:)();
}

uint64_t sub_1001292E0()
{
  return Date.isDaytime(sunrise:sunset:)();
}

uint64_t sub_1001292F0()
{
  return Date.init()();
}

uint64_t sub_100129300()
{
  return type metadata accessor for Date();
}

uint64_t sub_100129310()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_100129320()
{
  return UUID.init()();
}

uint64_t sub_100129330()
{
  return type metadata accessor for UUID();
}

uint64_t sub_100129340()
{
  return static Locale.current.getter();
}

uint64_t sub_100129350()
{
  return Locale.Language.prefersFullTemperatureScale.getter();
}

uint64_t sub_100129360()
{
  return Locale.Language.isArabic.getter();
}

uint64_t sub_100129370()
{
  return Locale.Language.isEnglish.getter();
}

uint64_t sub_100129380()
{
  return type metadata accessor for Locale.Language();
}

uint64_t sub_100129390()
{
  return Locale.language.getter();
}

uint64_t sub_1001293A0()
{
  return type metadata accessor for Locale();
}

uint64_t sub_1001293B0()
{
  return static Calendar.currentCalendar(with:)();
}

uint64_t sub_1001293C0()
{
  return Calendar.isDateInToday(_:)();
}

uint64_t sub_1001293D0()
{
  return Calendar.isDateInTomorrow(_:)();
}

uint64_t sub_1001293E0()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t sub_1001293F0()
{
  return Calendar.date(bySetting:value:of:)();
}

uint64_t sub_100129400()
{
  return Calendar.isDate(_:equalTo:toGranularity:)();
}

uint64_t sub_100129410()
{
  return static Calendar.current.getter();
}

uint64_t sub_100129420()
{
  return Calendar.timeZone.setter();
}

uint64_t sub_100129430()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t sub_100129440()
{
  return Calendar.component(_:from:)();
}

uint64_t sub_100129450()
{
  return type metadata accessor for Calendar();
}

uint64_t sub_100129460()
{
  return static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100129470()
{
  return static TimeZone.current.getter();
}

uint64_t sub_100129480()
{
  return type metadata accessor for TimeZone();
}

uint64_t sub_100129490()
{
  return DayWeather.lowTemperature.getter();
}

uint64_t sub_1001294A0()
{
  return DayWeather.highTemperature.getter();
}

uint64_t sub_1001294B0()
{
  return DayWeather.sun.getter();
}

uint64_t sub_1001294C0()
{
  return type metadata accessor for DayWeather();
}

uint64_t sub_1001294D0()
{
  return HourWeather.temperature.getter();
}

uint64_t sub_1001294E0()
{
  return HourWeather.apparentTemperature.getter();
}

uint64_t sub_1001294F0()
{
  return HourWeather.date.getter();
}

uint64_t sub_100129500()
{
  return HourWeather.condition.getter();
}

uint64_t sub_100129510()
{
  return type metadata accessor for HourWeather();
}

uint64_t sub_100129520()
{
  return CurrentWeather.predominateCloudAltitudeKind.getter();
}

uint64_t sub_100129530()
{
  return CurrentWeather.cloudCover.getter();
}

uint64_t sub_100129540()
{
  return CurrentWeather.isDaylight.getter();
}

uint64_t sub_100129550()
{
  return CurrentWeather.temperature.getter();
}

uint64_t sub_100129560()
{
  return CurrentWeather.apparentTemperature.getter();
}

uint64_t sub_100129570()
{
  return CurrentWeather.date.getter();
}

uint64_t sub_100129580()
{
  return CurrentWeather.wind.getter();
}

uint64_t sub_100129590()
{
  return CurrentWeather.uvIndex.getter();
}

uint64_t sub_1001295A0()
{
  return CurrentWeather.humidity.getter();
}

uint64_t sub_1001295B0()
{
  return CurrentWeather.metadata.getter();
}

uint64_t sub_1001295C0()
{
  return CurrentWeather.condition.getter();
}

uint64_t sub_1001295D0()
{
  return type metadata accessor for CurrentWeather();
}

uint64_t sub_1001295E0()
{
  return InstantWeather.predominateCloudAltitudeKind.getter();
}

uint64_t sub_1001295F0()
{
  return InstantWeather.cloudCover.getter();
}

uint64_t sub_100129600()
{
  return InstantWeather.isDaylight.getter();
}

uint64_t sub_100129610()
{
  return InstantWeather.temperature.getter();
}

uint64_t sub_100129620()
{
  return InstantWeather.lowTemperature.getter();
}

uint64_t sub_100129630()
{
  return InstantWeather.highTemperature.getter();
}

uint64_t sub_100129640()
{
  return InstantWeather.apparentTemperature.getter();
}

uint64_t sub_100129650()
{
  return InstantWeather.date.getter();
}

uint64_t sub_100129660()
{
  return InstantWeather.wind.getter();
}

uint64_t sub_100129670()
{
  return InstantWeather.uvIndex.getter();
}

uint64_t sub_100129680()
{
  return InstantWeather.humidity.getter();
}

uint64_t sub_100129690()
{
  return InstantWeather.metadata.getter();
}

uint64_t sub_1001296A0()
{
  return InstantWeather.condition.getter();
}

uint64_t sub_1001296B0()
{
  return type metadata accessor for InstantWeather();
}

uint64_t sub_1001296C0()
{
  return type metadata accessor for InstantWeatherQueryOptions.Stride();
}

uint64_t sub_1001296D0()
{
  return WeatherAttribution.init(serviceName:legalPageURL:squareMarkURL:combinedMarkDarkURL:combinedMarkLightURL:)();
}

uint64_t sub_1001296E0()
{
  return WeatherAttribution.legalPageURL.getter();
}

uint64_t sub_1001296F0()
{
  return type metadata accessor for WeatherAttribution();
}

uint64_t sub_100129700()
{
  return static WeatherServiceCaching.Options.allowsExpiredData.getter();
}

uint64_t sub_100129710()
{
  return type metadata accessor for WeatherServiceCaching.Options();
}

uint64_t sub_100129720()
{
  return static WeatherServiceCaching.enabled.getter();
}

uint64_t sub_100129730()
{
  return type metadata accessor for WeatherServiceCaching();
}

uint64_t sub_100129740()
{
  return type metadata accessor for WeatherNetworkActivity();
}

uint64_t sub_100129750()
{
  return WeatherServiceFetchOptions.init(countryCode:timeZone:locationOptions:cachingOptions:treatmentIdentifiers:networkActivity:needsMarineData:needsTwilightData:)();
}

uint64_t sub_100129760()
{
  return type metadata accessor for WeatherServiceFetchOptions();
}

uint64_t sub_100129770()
{
  return WeatherServiceLocationOptions.init(decimalPrecision:limitsPrecision:)();
}

uint64_t sub_100129780()
{
  return type metadata accessor for WeatherServiceLocationOptions();
}

uint64_t sub_100129790()
{
  return type metadata accessor for WeatherQueryHourlyRelativeRange.RelativeTo();
}

uint64_t sub_1001297A0()
{
  return type metadata accessor for WeatherAlert.Prominence();
}

uint64_t sub_1001297B0()
{
  return WeatherAlert.metadata.getter();
}

uint64_t sub_1001297C0()
{
  return WeatherAlert.severity.getter();
}

uint64_t sub_1001297D0()
{
  return type metadata accessor for WeatherAlert();
}

uint64_t sub_1001297E0()
{
  return static WeatherQuery<A>.hourly(relativeTo:start:end:)();
}

uint64_t sub_1001297F0()
{
  return WeatherChange.highTemperature.getter();
}

uint64_t sub_100129800()
{
  return WeatherChange.dayPrecipitationAmount.getter();
}

uint64_t sub_100129810()
{
  return WeatherChange.date.getter();
}

uint64_t sub_100129820()
{
  return static WeatherChange.Direction.== infix(_:_:)();
}

uint64_t sub_100129830()
{
  return type metadata accessor for WeatherChange();
}

uint64_t sub_100129840()
{
  return WeatherChanges.changes.getter();
}

uint64_t sub_100129850()
{
  return type metadata accessor for WeatherChanges();
}

uint64_t sub_100129860()
{
  return WeatherService.fetchInstantWeather(for:spanning:stride:with:completion:)();
}

uint64_t sub_100129870()
{
  return WeatherService.fetchWeather<A, B, C>(for:including:_:_:options:completion:)();
}

uint64_t sub_100129880()
{
  return WeatherService.fetchWeather<A, B, C, D, E, F, G>(for:including:_:_:_:_:_:_:options:completion:)();
}

uint64_t sub_100129890()
{
  return WeatherService.fetchWeather<A, B, C, D, E, F, G, H>(for:including:_:_:_:_:_:_:_:options:completion:)();
}

uint64_t sub_1001298A0()
{
  return WeatherService.cachedWeather<A, B, C, D, E, F, G>(for:including:_:_:_:_:_:_:options:)();
}

uint64_t sub_1001298B0()
{
  return WeatherService.__allocating_init(endpoint:caching:networkMonitor:)();
}

uint64_t sub_1001298C0()
{
  return type metadata accessor for WeatherService();
}

uint64_t sub_1001298D0()
{
  return WeatherMetadata.expirationDate.getter();
}

uint64_t sub_1001298E0()
{
  return WeatherMetadata.date.getter();
}

uint64_t sub_1001298F0()
{
  return type metadata accessor for WeatherMetadata();
}

uint64_t sub_100129900()
{
  return type metadata accessor for WeatherSeverity();
}

uint64_t sub_100129910()
{
  return WeatherCondition.accessibilityDescription.getter();
}

uint64_t sub_100129920()
{
  return type metadata accessor for WeatherCondition();
}

uint64_t sub_100129930()
{
  return WeatherDataModel.init(currentWeather:hourlyForecast:dailyForecast:)();
}

uint64_t sub_100129940()
{
  return WeatherDataModel.init(currentWeather:minuteForecast:hourlyForecast:dailyForecast:airQuality:weatherChanges:weatherAlerts:)();
}

uint64_t sub_100129950()
{
  return WeatherDataModel.currentWeather.getter();
}

uint64_t sub_100129960()
{
  return WeatherDataModel.airQuality.getter();
}

uint64_t sub_100129970()
{
  return WeatherDataModel.dailyForecast.getter();
}

uint64_t sub_100129980()
{
  return WeatherDataModel.weatherAlerts.getter();
}

uint64_t sub_100129990()
{
  return WeatherDataModel.hourlyForecast.getter();
}

uint64_t sub_1001299A0()
{
  return WeatherDataModel.minuteForecast.getter();
}

uint64_t sub_1001299B0()
{
  return WeatherDataModel.weatherChanges.getter();
}

uint64_t sub_1001299C0()
{
  return type metadata accessor for WeatherDataModel();
}

uint64_t sub_1001299D0()
{
  return AirQuality.isSignificant.getter();
}

uint64_t sub_1001299E0()
{
  return AirQuality.currentScaleCategory.getter();
}

uint64_t sub_1001299F0()
{
  return AirQuality.index.getter();
}

uint64_t sub_100129A00()
{
  return AirQuality.scale.getter();
}

uint64_t sub_100129A10()
{
  return AirQuality.metadata.getter();
}

uint64_t sub_100129A20()
{
  return type metadata accessor for AirQuality();
}

uint64_t sub_100129A30()
{
  return MoonEvents.init(phase:moonrise:moonset:)();
}

uint64_t sub_100129A40()
{
  return type metadata accessor for MoonEvents();
}

uint64_t sub_100129A50()
{
  return WDSEndpoint.init(url:portOverrideProvider:)();
}

uint64_t sub_100129A60()
{
  return WDSEndpoint.init(url:)();
}

uint64_t sub_100129A70()
{
  return type metadata accessor for WDSEndpoint();
}

uint64_t sub_100129A80()
{
  return LocationInfo.expiration.getter();
}

uint64_t sub_100129A90()
{
  return LocationInfo.countryCode.getter();
}

uint64_t sub_100129AA0()
{
  return LocationInfo.preciseName.getter();
}

uint64_t sub_100129AB0()
{
  return LocationInfo.primaryName.getter();
}

uint64_t sub_100129AC0()
{
  return LocationInfo.secondaryName.getter();
}

uint64_t sub_100129AD0()
{
  return LocationInfo.date.getter();
}

uint64_t sub_100129AE0()
{
  return LocationInfo.timeZone.getter();
}

uint64_t sub_100129AF0()
{
  return type metadata accessor for LocationInfo();
}

uint64_t sub_100129B00()
{
  return Precipitation.accessibilityDescription.getter();
}

uint64_t sub_100129B10()
{
  return type metadata accessor for Precipitation();
}

uint64_t sub_100129B20()
{
  return AirQualityScale.init(identifier:displayName:shortDisplayName:longDisplayName:displayLabel:isNumerical:range:categories:gradient:)();
}

uint64_t sub_100129B30()
{
  return AirQualityScale.displayName.getter();
}

uint64_t sub_100129B40()
{
  return AirQualityScale.isNumerical.getter();
}

uint64_t sub_100129B50()
{
  return AirQualityScale.shortDisplayName.getter();
}

uint64_t sub_100129B60()
{
  return static AirQualityScale.== infix(_:_:)();
}

uint64_t sub_100129B70()
{
  return type metadata accessor for AirQualityScale();
}

uint64_t sub_100129B80()
{
  return MinuteCondition.expirationDate.getter();
}

uint64_t sub_100129B90()
{
  return MinuteCondition.date.getter();
}

uint64_t sub_100129BA0()
{
  return MinuteCondition.shift.getter();
}

uint64_t sub_100129BB0()
{
  return type metadata accessor for MinuteCondition();
}

uint64_t sub_100129BC0()
{
  return type metadata accessor for PrecipitationShift.Kind();
}

uint64_t sub_100129BD0()
{
  return PrecipitationShift.date.getter();
}

uint64_t sub_100129BE0()
{
  return PrecipitationShift.init(date:nextDate:kind:)();
}

uint64_t sub_100129BF0()
{
  return PrecipitationShift.kind.getter();
}

uint64_t sub_100129C00()
{
  return PrecipitationShift.nextDate.getter();
}

uint64_t sub_100129C10()
{
  return type metadata accessor for PrecipitationShift();
}

uint64_t sub_100129C20()
{
  return AirQualityScaleCategory.init(description:number:color:recommendation:range:glyph:)();
}

uint64_t sub_100129C30()
{
  return AirQualityScaleCategory.description.getter();
}

uint64_t sub_100129C40()
{
  return static AirQualityScaleCategory.== infix(_:_:)();
}

uint64_t sub_100129C50()
{
  return type metadata accessor for AirQualityScaleCategory();
}

uint64_t sub_100129C60()
{
  return AirQualityScaleGradient.init(stops:)();
}

uint64_t sub_100129C70()
{
  return type metadata accessor for AirQualityScaleGradient();
}

uint64_t sub_100129C80()
{
  return ProductRequirementsFactory.WidgetRequiredProducts.airQuality.getter();
}

uint64_t sub_100129C90()
{
  return ProductRequirementsFactory.WidgetRequiredProducts.daily.getter();
}

uint64_t sub_100129CA0()
{
  return ProductRequirementsFactory.WidgetRequiredProducts.alerts.getter();
}

uint64_t sub_100129CB0()
{
  return ProductRequirementsFactory.WidgetRequiredProducts.hourly.getter();
}

uint64_t sub_100129CC0()
{
  return ProductRequirementsFactory.WidgetRequiredProducts.changes.getter();
}

uint64_t sub_100129CD0()
{
  return ProductRequirementsFactory.WidgetRequiredProducts.current.getter();
}

uint64_t sub_100129CE0()
{
  return ProductRequirementsFactory.WidgetRequiredProducts.minutely.getter();
}

uint64_t sub_100129CF0()
{
  return type metadata accessor for ProductRequirementsFactory.WidgetRequiredProducts();
}

uint64_t sub_100129D00()
{
  return ProductRequirementsFactory.widgetRequiredProducts(for:)();
}

uint64_t sub_100129D10()
{
  return ProductRequirementsFactory.WidgetGeoRequiredProducts.airQuality.getter();
}

uint64_t sub_100129D20()
{
  return ProductRequirementsFactory.WidgetGeoRequiredProducts.locationInfo.getter();
}

uint64_t sub_100129D30()
{
  return ProductRequirementsFactory.WidgetGeoRequiredProducts.daily.getter();
}

uint64_t sub_100129D40()
{
  return ProductRequirementsFactory.WidgetGeoRequiredProducts.alerts.getter();
}

uint64_t sub_100129D50()
{
  return ProductRequirementsFactory.WidgetGeoRequiredProducts.hourly.getter();
}

uint64_t sub_100129D60()
{
  return ProductRequirementsFactory.WidgetGeoRequiredProducts.changes.getter();
}

uint64_t sub_100129D70()
{
  return ProductRequirementsFactory.WidgetGeoRequiredProducts.current.getter();
}

uint64_t sub_100129D80()
{
  return ProductRequirementsFactory.WidgetGeoRequiredProducts.minutely.getter();
}

uint64_t sub_100129D90()
{
  return type metadata accessor for ProductRequirementsFactory.WidgetGeoRequiredProducts();
}

uint64_t sub_100129DA0()
{
  return ProductRequirementsFactory.init()();
}

uint64_t sub_100129DB0()
{
  return type metadata accessor for ProductRequirementsFactory();
}

uint64_t sub_100129DC0()
{
  return type metadata accessor for PrecipitationRelevancyWindow();
}

uint64_t sub_100129DD0()
{
  return dispatch thunk of ProductRequirementsFactoryType.widgetGeoRequiredProducts(for:)();
}

uint64_t sub_100129DE0()
{
  return Wind.init(compassDirection:direction:speed:gust:)();
}

uint64_t sub_100129DF0()
{
  return Wind.compassDirection.getter();
}

uint64_t sub_100129E00()
{
  return Wind.speed.getter();
}

uint64_t sub_100129E10()
{
  return Wind.direction.getter();
}

uint64_t sub_100129E20()
{
  return type metadata accessor for Wind();
}

uint64_t sub_100129E30()
{
  return UVIndex.ExposureCategory.description.getter();
}

uint64_t sub_100129E40()
{
  return UVIndex.init(value:category:)();
}

uint64_t sub_100129E50()
{
  return UVIndex.value.getter();
}

uint64_t sub_100129E60()
{
  return UVIndex.category.getter();
}

uint64_t sub_100129E70()
{
  return type metadata accessor for UVIndex();
}

uint64_t sub_100129E80()
{
  return Forecast.metadata.getter();
}

uint64_t sub_100129E90()
{
  return Forecast<>.todaysWeather(today:timeZone:)();
}

uint64_t sub_100129EA0()
{
  return Forecast<>.conditions.getter();
}

uint64_t sub_100129EB0()
{
  return Forecast<>.isRelevant(in:)();
}

uint64_t sub_100129EC0()
{
  return MoonPhase.Hemisphere.init(latitude:)();
}

uint64_t sub_100129ED0()
{
  return type metadata accessor for MoonPhase.Hemisphere();
}

uint64_t sub_100129EE0()
{
  return SunEvents.init(astronomicalDawn:nauticalDawn:civilDawn:sunrise:solarNoon:sunset:civilDusk:nauticalDusk:astronomicalDusk:solarMidnight:)();
}

uint64_t sub_100129EF0()
{
  return SunEvents.sunset.getter();
}

uint64_t sub_100129F00()
{
  return SunEvents.sunrise.getter();
}

uint64_t sub_100129F10()
{
  return type metadata accessor for SunEvents();
}

uint64_t sub_100129F20()
{
  return static Settings.WeatherEnvironment.contentEnvironment.getter();
}

uint64_t sub_100129F30()
{
  return static Settings.WeatherEnvironment.localServerPort.getter();
}

uint64_t sub_100129F40()
{
  return static Settings.InternationalAuthenticity.verticalHeroEnabledForCurrentLocale.getter();
}

uint64_t sub_100129F50()
{
  return static Settings.Geocoding.clearGeocodingCacheOnNextLaunch.getter();
}

uint64_t sub_100129F60()
{
  return static Settings.Geocoding.bypassGeocodingCache.getter();
}

uint64_t sub_100129FB0()
{
  return SettingReader.read<A>(_:)();
}

uint64_t sub_100129FC0()
{
  return static SettingReader.shared.getter();
}

uint64_t sub_100129FD0()
{
  return type metadata accessor for SettingReader();
}

uint64_t sub_100129FE0()
{
  return Updatable.save<A>(setting:value:)();
}

uint64_t sub_10012A010()
{
  return WeatherDataServiceConfiguration.needsTwilightData.getter();
}

uint64_t sub_10012A020()
{
  return type metadata accessor for WeatherDataServiceConfiguration();
}

uint64_t sub_10012A030()
{
  return UnitManager.preferredTemperatureUnit.getter();
}

uint64_t sub_10012A040()
{
  return UnitManager.setPreferredTemperatureUnit(_:)();
}

uint64_t sub_10012A050()
{
  return UnitManager.temperature.getter();
}

void sub_10012A060()
{
}

uint64_t sub_10012A080()
{
  return static UnitManager.standard.getter();
}

uint64_t sub_10012A090()
{
  return type metadata accessor for UnitManager();
}

uint64_t sub_10012A0A0()
{
  return WidgetNames.rawValue.getter();
}

uint64_t sub_10012A0B0()
{
  return type metadata accessor for WidgetNames();
}

uint64_t sub_10012A0C0()
{
  return LocationModel.locationOfInterest.getter();
}

uint64_t sub_10012A0D0()
{
  return type metadata accessor for LocationModel();
}

uint64_t sub_10012A0E0()
{
  return GeocodeService.setupWeatherKitGeocoding(using:)();
}

uint64_t sub_10012A0F0()
{
  return GeocodeService.init(appConfigurationManager:privacySampler:locationMetadataUpdater:)();
}

uint64_t sub_10012A100()
{
  return type metadata accessor for GeocodeService();
}

uint64_t sub_10012A110()
{
  return static WidgetUtilities.reloadWidget(reason:)();
}

uint64_t sub_10012A120()
{
  return AppConfiguration.treatmentIDs.getter();
}

uint64_t sub_10012A130()
{
  return AppConfiguration.endpointConfig(for:)();
}

uint64_t sub_10012A140()
{
  return AppConfiguration.temperatureScale.getter();
}

uint64_t sub_10012A150()
{
  return AppConfiguration.weatherDataService.getter();
}

uint64_t sub_10012A160()
{
  return AppConfiguration.locationDecimalPrecision.getter();
}

uint64_t sub_10012A170()
{
  return AppConfiguration.reverseGeocodingRefreshTimeInterval.getter();
}

uint64_t sub_10012A180()
{
  return AppConfiguration.widget.getter();
}

uint64_t sub_10012A190()
{
  return type metadata accessor for AppConfiguration();
}

uint64_t sub_10012A1A0()
{
  return dispatch thunk of GeocodeStoreType.saveLocation(_:for:)();
}

uint64_t sub_10012A1B0()
{
  return dispatch thunk of GeocodeStoreType.queryLocation(for:)();
}

uint64_t sub_10012A1C0()
{
  return dispatch thunk of GeocodeStoreType.deleteLocation(for:)();
}

uint64_t sub_10012A1D0()
{
  return dispatch thunk of GeocodeStoreType.deleteAllLocations(satisfying:)();
}

uint64_t sub_10012A1E0()
{
  return UnitSetupManager.setupWidget(appConfiguration:)();
}

void sub_10012A1F0()
{
}

uint64_t sub_10012A200()
{
  return UnitSetupManager.init(nanoPrefencesSynchronizer:)();
}

uint64_t sub_10012A210()
{
  return UnitSetupManager.init()();
}

uint64_t sub_10012A220()
{
  return type metadata accessor for UnitSetupManager();
}

uint64_t sub_10012A230()
{
  return type metadata accessor for LocationDataModel();
}

uint64_t sub_10012A240()
{
  return SyncedDataManager.__allocating_init(syncedDataContextProvider:savedLocationsReconciler:)();
}

uint64_t sub_10012A250()
{
  return type metadata accessor for SyncedDataManager();
}

uint64_t sub_10012A260()
{
  return UnitConfiguration.Temperature.asUnit.getter();
}

uint64_t sub_10012A270()
{
  return type metadata accessor for UnitConfiguration.Temperature();
}

uint64_t sub_10012A280()
{
  return UnitConfiguration.Temperature.init(_:)();
}

uint64_t sub_10012A290()
{
  return ContentEnvironment.rawValue.getter();
}

uint64_t sub_10012A2A0()
{
  return dispatch thunk of GeocodeManagerType.reverseGeocode(coordinate:)();
}

uint64_t sub_10012A2B0()
{
  return LocationOfInterest.location.getter();
}

uint64_t sub_10012A2C0()
{
  return type metadata accessor for LocationOfInterest();
}

uint64_t sub_10012A2D0()
{
  return type metadata accessor for UserIdentityChange();
}

uint64_t sub_10012A2E0()
{
  return WidgetRefreshRange.maximum.getter();
}

uint64_t sub_10012A2F0()
{
  return WidgetRefreshRange.minimum.getter();
}

uint64_t sub_10012A300()
{
  return type metadata accessor for WidgetRefreshRange();
}

uint64_t sub_10012A310()
{
  return SavedLocationFinder.init(ubiquitousKeyValueStoreProvider:locationsOfInterestDataSource:weatherLocationCoalescenceManager:locationMatchHelper:locationDataModelFactory:defaultCityManager:localKeyValueStore:)();
}

uint64_t sub_10012A320()
{
  return type metadata accessor for SavedLocationFinder();
}

uint64_t sub_10012A330()
{
  return WidgetConfiguration.refresh.getter();
}

uint64_t sub_10012A340()
{
  return type metadata accessor for WidgetConfiguration();
}

uint64_t sub_10012A350()
{
  return SavedLocationsReader.init(keyValueStoreProvider:locationDataModelFactory:syncedDataManager:localKeyValueStore:testConfigurable:)();
}

uint64_t sub_10012A360()
{
  return type metadata accessor for SavedLocationsReader();
}

uint64_t sub_10012A370()
{
  return CachedCurrentLocation.EmbeddedLocation.clLocation.getter();
}

uint64_t sub_10012A380()
{
  return type metadata accessor for CachedCurrentLocation.EmbeddedLocation();
}

uint64_t sub_10012A390()
{
  return CachedCurrentLocation.embeddedLocation.getter();
}

uint64_t sub_10012A3A0()
{
  return type metadata accessor for CachedCurrentLocation();
}

uint64_t sub_10012A3B0()
{
  return EndpointConfiguration.useDynamicPortForWeatherData.getter();
}

uint64_t sub_10012A3C0()
{
  return EndpointConfiguration.weatherDataURL.getter();
}

uint64_t sub_10012A3D0()
{
  return type metadata accessor for EndpointConfiguration();
}

uint64_t sub_10012A3F0()
{
  return dispatch thunk of SavedLocationsReaderType.fetchSavedLocations()();
}

uint64_t sub_10012A400()
{
  return SavedLocationsReconciler.init(defaultCityManager:)();
}

uint64_t sub_10012A410()
{
  return type metadata accessor for SavedLocationsReconciler();
}

void sub_10012A420()
{
}

BOOL sub_10012A430()
{
  return StubPPTWeatherDataManager.isServiceAvailable()();
}

uint64_t sub_10012A440()
{
  return StubPPTWeatherDataManager.init()();
}

uint64_t sub_10012A450()
{
  return type metadata accessor for StubPPTWeatherDataManager();
}

uint64_t sub_10012A460()
{
  return SyncedDataContextProvider.init(dataStorageURL:useTransientContext:)();
}

uint64_t sub_10012A470()
{
  return type metadata accessor for SyncedDataContextProvider();
}

uint64_t sub_10012A480()
{
  return type metadata accessor for WidgetRefreshConfiguration();
}

uint64_t sub_10012A490()
{
  return dispatch thunk of AppConfigurationManagerType.appConfiguration.getter();
}

uint64_t sub_10012A4A0()
{
  return AppConfigurationManagerType.fetchAppConfig()();
}

uint64_t sub_10012A4B0()
{
  return dispatch thunk of IdentityRotationManagerType.rotateIdentifiersIfNeeded()();
}

uint64_t sub_10012A4C0()
{
  return dispatch thunk of LocationMetadataManagerType.resolveCountryCode(for:)();
}

uint64_t sub_10012A4D0()
{
  return NanoPreferencesSynchronizer.init(domain:container:appGroupContainer:)();
}

uint64_t sub_10012A4E0()
{
  return type metadata accessor for NanoPreferencesSynchronizer();
}

uint64_t sub_10012A4F0()
{
  return LocationDisplayContextReader.init(keyValueStoreProvider:syncedDataManager:)();
}

uint64_t sub_10012A500()
{
  return type metadata accessor for LocationDisplayContextReader();
}

uint64_t sub_10012A510()
{
  return type metadata accessor for TemperatureScaleConfiguration.Gradient();
}

uint64_t sub_10012A520()
{
  return TemperatureScaleConfiguration.gradient.getter();
}

uint64_t sub_10012A530()
{
  return type metadata accessor for TemperatureScaleConfiguration();
}

uint64_t sub_10012A540()
{
  return dispatch thunk of CurrentLocationCacheManagerType.readCachedLocation()();
}

uint64_t sub_10012A550()
{
  return dispatch thunk of CurrentLocationCacheManagerType.cacheLocation(_:)();
}

uint64_t sub_10012A560()
{
  return dispatch thunk of CurrentLocationCacheManagerType.cacheLocation(_:)();
}

uint64_t sub_10012A570()
{
  return dispatch thunk of CurrentLocationCacheManagerType.clearCache()();
}

uint64_t sub_10012A580()
{
  return Assembly.init()();
}

uint64_t sub_10012A590()
{
  return type metadata accessor for Assembly();
}

uint64_t sub_10012A5A0()
{
  return static Location.currentLocationID.getter();
}

uint64_t sub_10012A5B0()
{
  return static Location.currentLocationIntentID.getter();
}

uint64_t sub_10012A5C0()
{
  return Location.Identifier.Kind.rawValue.getter();
}

uint64_t sub_10012A5D0()
{
  return Location.Identifier.with(id:name:coordinate:)();
}

uint64_t sub_10012A5E0()
{
  return type metadata accessor for Location.Identifier();
}

uint64_t sub_10012A5F0()
{
  return Location.coordinate.getter();
}

uint64_t sub_10012A600()
{
  return Location.identifier.getter();
}

uint64_t sub_10012A610()
{
  return Location.lastRefreshDate.getter();
}

uint64_t sub_10012A620()
{
  return Location.init(locationDataModel:)();
}

uint64_t sub_10012A630()
{
  return static Location.sanitizedSecondaryName(_:name:)();
}

uint64_t sub_10012A640()
{
  return static Location.== infix(_:_:)();
}

uint64_t sub_10012A650()
{
  return Location.init(id:name:timeZone:coordinate:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)();
}

uint64_t sub_10012A660()
{
  return Location.id.getter();
}

uint64_t sub_10012A670()
{
  return Location.kind.getter();
}

uint64_t sub_10012A680()
{
  return Location.name.getter();
}

uint64_t sub_10012A690()
{
  return Location.with(identifier:timeZone:lastRefreshDate:searchTitle:searchSubtitle:preciseName:secondaryName:)();
}

uint64_t sub_10012A6A0()
{
  return Location.timeZone.getter();
}

uint64_t sub_10012A6B0()
{
  return type metadata accessor for Location();
}

uint64_t sub_10012A6C0()
{
  return Definition.thenConfigure<A>(as:configuration:)();
}

uint64_t sub_10012A6D0()
{
  return Definition.inScope(_:)();
}

uint64_t sub_10012A6E0()
{
  return MockServer.listeningPort.getter();
}

uint64_t sub_10012A6F0()
{
  return static MockServer.shared.getter();
}

uint64_t sub_10012A700()
{
  return type metadata accessor for MockServer();
}

void sub_10012A710()
{
}

void sub_10012A720()
{
}

uint64_t sub_10012A730()
{
  return static UnfairLock.Options.dataSynchronization.getter();
}

uint64_t sub_10012A740()
{
  return type metadata accessor for UnfairLock.Options();
}

uint64_t sub_10012A750()
{
  return UnfairLock.init(options:)();
}

uint64_t sub_10012A760()
{
  return type metadata accessor for UnfairLock();
}

uint64_t sub_10012A770()
{
  return dispatch thunk of ResolverType.resolve<A>(_:)();
}

uint64_t sub_10012A780()
{
  return dispatch thunk of ResolverType.resolve<A>(_:)();
}

uint64_t sub_10012A790()
{
  return SingletonPool.init()();
}

uint64_t sub_10012A7A0()
{
  return type metadata accessor for SingletonPool();
}

uint64_t sub_10012A7B0()
{
  return dispatch thunk of AsyncOperation.completion.setter();
}

uint64_t sub_10012A7C0()
{
  return PromiseDeduper.init(options:)();
}

uint64_t sub_10012A7D0()
{
  return PromiseDeduper.promise(key:createBlock:)();
}

uint64_t sub_10012A7E0()
{
  return ProxyContainer.public.getter();
}

uint64_t sub_10012A7F0()
{
  return ProxyContainer.private.getter();
}

uint64_t sub_10012A800()
{
  return type metadata accessor for FrameworkAssembly();
}

uint64_t sub_10012A810()
{
  return type metadata accessor for PromiseDeduperFlags();
}

uint64_t sub_10012A820()
{
  return RegistrationContainer.lazy(block:)();
}

uint64_t sub_10012A840()
{
  return RegistrationContainer.register<A>(_:name:factory:)();
}

uint64_t sub_10012A850()
{
  return Lock.sync<A>(_:)();
}

uint64_t sub_10012A860()
{
  return type metadata accessor for Scope();
}

uint64_t sub_10012A870()
{
  return zalgo.getter();
}

uint64_t sub_10012A880()
{
  return Promise.asOptional()();
}

uint64_t sub_10012A890()
{
  return Promise.then<A>(on:closure:)();
}

uint64_t sub_10012A8A0()
{
  return Promise.then<A, B>(on:disposeOn:closure:)();
}

uint64_t sub_10012A8B0()
{
  return Promise.error(on:closure:)();
}

uint64_t sub_10012A8C0()
{
  return Promise.init(value:)();
}

uint64_t sub_10012A8D0()
{
  return Promise.always(on:closure:)();
}

uint64_t sub_10012A8E0()
{
  return Promise.init(resolver:)();
}

uint64_t sub_10012A8F0()
{
  return firstly<A, B>(on:disposeOn:closure:)();
}

uint64_t sub_10012A900()
{
  return firstly<A>(closure:)();
}

uint64_t sub_10012A910()
{
  return type metadata accessor for Container.Environment();
}

uint64_t sub_10012A920()
{
  return Container.init(bundleAssemblies:assemblies:singletonPool:environment:)();
}

uint64_t sub_10012A930()
{
  return Container.resolver.getter();
}

uint64_t sub_10012A940()
{
  return type metadata accessor for Container();
}

uint64_t sub_10012A950()
{
  return WeatherDataRequestOptions.needsTwilightData.getter();
}

uint64_t sub_10012A960()
{
  return WeatherDataRequestOptions.locationOptions.getter();
}

uint64_t sub_10012A970()
{
  return WeatherDataRequestOptions.treatmentIdentifiers.getter();
}

uint64_t sub_10012A980()
{
  return WeatherDataRequestOptions.timeZone.getter();
}

uint64_t sub_10012A990()
{
  return WeatherRequestLocationOptions.decimalPrecision.getter();
}

uint64_t sub_10012A9A0()
{
  return type metadata accessor for WeatherRequestLocationOptions();
}

uint64_t sub_10012A9B0()
{
  return LocationInfo.init(metadata:primaryName:secondaryName:preciseName:countryCode:timeZone:)();
}

uint64_t sub_10012A9C0()
{
  return type metadata accessor for LocationInfo();
}

uint64_t sub_10012A9D0()
{
  return Assembly.init()();
}

uint64_t sub_10012A9E0()
{
  return type metadata accessor for Assembly();
}

uint64_t sub_10012A9F0()
{
  return type metadata accessor for Metadata.Units();
}

uint64_t sub_10012AA00()
{
  return Metadata.init(readTime:expireTime:reportedTime:version:latitude:longitude:language:providerName:providerLogo:temporarilyUnavailable:units:attributionURL:)();
}

uint64_t sub_10012AA10()
{
  return type metadata accessor for Metadata();
}

uint64_t sub_10012AA20()
{
  return type metadata accessor for WidgetRefreshFailureReason();
}

uint64_t sub_10012AA30()
{
  return WidgetTimelineTelemetryManager.init(flushManager:coordinator:)();
}

uint64_t sub_10012AA40()
{
  return type metadata accessor for WidgetTimelineTelemetryManager();
}

uint64_t sub_10012AA50()
{
  return NextPrecipitation.init(nextHourPrecipitationShift:date:timeZone:)();
}

uint64_t sub_10012AA60()
{
  return NextPrecipitation.init<A>(hourlyForecast:date:timeZone:limitInHours:precipitationChanceThreshold:)();
}

uint64_t sub_10012AA70()
{
  return NextPrecipitation.init<A>(from:date:timeZone:)();
}

uint64_t sub_10012AA80()
{
  return NextPrecipitation.event.getter();
}

uint64_t sub_10012AA90()
{
  return type metadata accessor for NextPrecipitation();
}

uint64_t sub_10012AAA0()
{
  return PrecipitationEvent.precipitation.getter();
}

uint64_t sub_10012AAB0()
{
  return PrecipitationEvent.chance.getter();
}

uint64_t sub_10012AAC0()
{
  return PrecipitationEvent.StartStop.isStop.getter();
}

uint64_t sub_10012AAD0()
{
  return type metadata accessor for PrecipitationEvent.StartStop();
}

uint64_t sub_10012AAE0()
{
  return PrecipitationEvent.startDate.getter();
}

uint64_t sub_10012AAF0()
{
  return PrecipitationEvent.startStop.getter();
}

uint64_t sub_10012AB00()
{
  return type metadata accessor for PrecipitationEvent();
}

uint64_t sub_10012AB10()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_10012AB20()
{
  return static Logger.automation.getter();
}

uint64_t sub_10012AB30()
{
  return static Logger.geocode.getter();
}

uint64_t sub_10012AB40()
{
  return Logger.logObject.getter();
}

uint64_t sub_10012AB50()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10012AB60()
{
  return type metadata accessor for Logger();
}

uint64_t sub_10012AB70()
{
  return EdgeInsets.init(_all:)();
}

uint64_t sub_10012AB80()
{
  return type metadata accessor for ColorScheme();
}

uint64_t sub_10012AB90()
{
  return type metadata accessor for Environment.Content();
}

uint64_t sub_10012ABA0()
{
  return TupleWidget.init(_:)();
}

uint64_t sub_10012ABB0()
{
  return static WidgetBundle.main()();
}

uint64_t sub_10012ABC0()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t sub_10012ABD0()
{
  return GeometryProxy.size.getter();
}

uint64_t sub_10012ABE0()
{
  return LinearGradient.init(gradient:startPoint:endPoint:)();
}

uint64_t sub_10012ABF0()
{
  return type metadata accessor for DynamicTypeSize();
}

uint64_t sub_10012AC00()
{
  return static LayoutDirection.== infix(_:_:)();
}

uint64_t sub_10012AC10()
{
  return type metadata accessor for LayoutDirection();
}

uint64_t sub_10012AC20()
{
  return ModifiedContent<>.accessibility(removeTraits:)();
}

uint64_t sub_10012AC30()
{
  return ModifiedContent<>.accessibility(value:)();
}

uint64_t sub_10012AC40()
{
  return ModifiedContent<>.accessibilityLabel(_:)();
}

uint64_t sub_10012AC50()
{
  return ModifiedContent<>.accessibilityValue(_:)();
}

uint64_t sub_10012AC60()
{
  return ModifiedContent<>.accessibilityValue<A>(_:)();
}

uint64_t sub_10012AC70()
{
  return ModifiedContent<>.accessibilityInputLabels<A>(_:)();
}

uint64_t sub_10012AC80()
{
  return ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)();
}

uint64_t sub_10012AC90()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t sub_10012ACA0()
{
  return type metadata accessor for _BlendModeEffect();
}

uint64_t sub_10012ACB0()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t sub_10012ACC0()
{
  return EnvironmentValues.sunriseSunsetNightLineColor.getter();
}

uint64_t sub_10012ACD0()
{
  return EnvironmentValues.sunriseSunsetNightLineColor.setter();
}

uint64_t sub_10012ACE0()
{
  return EnvironmentValues.sunriseSunsetBackgroundStyle.getter();
}

uint64_t sub_10012ACF0()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10012AD00()
{
  return EnvironmentValues.imageScale.setter();
}

uint64_t sub_10012AD10()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10012AD20()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t sub_10012AD30()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10012AD40()
{
  return EnvironmentValues.sizeCategory.setter();
}

uint64_t sub_10012AD50()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t sub_10012AD60()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_10012AD70()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_10012AD80()
{
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t sub_10012AD90()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10012ADA0()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_10012ADB0()
{
  return EnvironmentValues.colorSchemeContrast.getter();
}

uint64_t sub_10012ADC0()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_10012ADD0()
{
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t sub_10012ADE0()
{
  return EnvironmentValues._colorSchemeContrast.getter();
}

uint64_t sub_10012ADF0()
{
  return EnvironmentValues._colorSchemeContrast.setter();
}

uint64_t sub_10012AE00()
{
  return EnvironmentValues.fontResolutionContext.getter();
}

uint64_t sub_10012AE10()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t sub_10012AE20()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_10012AE30()
{
  return EnvironmentValues.accessibilityInvertColors.getter();
}

uint64_t sub_10012AE40()
{
  return EnvironmentValues.font.getter();
}

uint64_t sub_10012AE50()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_10012AE60()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_10012AE70()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_10012AE80()
{
  return type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey();
}

uint64_t sub_10012AE90()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_10012AEA0()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_10012AEB0()
{
  return EnvironmentValues.widgetRenderingMode.setter();
}

uint64_t sub_10012AEC0()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t sub_10012AED0()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_10012AEE0()
{
  return EnvironmentValues.init()();
}

uint64_t sub_10012AEF0()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t sub_10012AF00()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t sub_10012AF10()
{
  return static VerticalAlignment.center.getter();
}

uint64_t sub_10012AF20()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

uint64_t sub_10012AF30()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

void sub_10012AF40(Swift::String a1)
{
}

void sub_10012AF50(Swift::String a1)
{
}

uint64_t sub_10012AF60()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t sub_10012AF70()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t sub_10012AF80()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_10012AF90()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t sub_10012AFA0()
{
  return static AccessibilityTraits.isImage.getter();
}

uint64_t sub_10012AFB0()
{
  return type metadata accessor for AccessibilityTraits();
}

uint64_t sub_10012AFC0()
{
  return static ColorSchemeContrast.== infix(_:_:)();
}

uint64_t sub_10012AFD0()
{
  return type metadata accessor for ColorSchemeContrast();
}

uint64_t sub_10012AFE0()
{
  return type metadata accessor for ContentSizeCategory();
}

uint64_t sub_10012AFF0()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t sub_10012B000()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t sub_10012B010()
{
  return static HorizontalAlignment.trailing.getter();
}

uint64_t sub_10012B020()
{
  return static SymbolRenderingMode.monochrome.getter();
}

uint64_t sub_10012B030()
{
  return static SymbolRenderingMode.multicolor.getter();
}

uint64_t sub_10012B040()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t sub_10012B050()
{
  return static WidgetBundleBuilder.buildBlock<A>(_:)();
}

uint64_t sub_10012B060()
{
  return WidgetConfiguration.description(_:)();
}

uint64_t sub_10012B070()
{
  return WidgetConfiguration.description(_:)();
}

uint64_t sub_10012B080()
{
  return WidgetConfiguration.hiddenControl()();
}

uint64_t sub_10012B090()
{
  return WidgetConfiguration.supportedFamilies(_:)();
}

uint64_t sub_10012B0A0()
{
  return WidgetConfiguration.configurationDisplayName(_:)();
}

uint64_t sub_10012B0B0()
{
  return WidgetConfiguration.configurationDisplayName(_:)();
}

uint64_t sub_10012B0C0()
{
  return WidgetConfiguration.disablesControlStateCaching()();
}

uint64_t sub_10012B0D0()
{
  return WidgetConfiguration.enableContentMarginsForFirstParty(_:)();
}

uint64_t sub_10012B0E0()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_10012B0F0()
{
  return static AccessibilityChildBehavior.ignore.getter();
}

uint64_t sub_10012B100()
{
  return static AccessibilityChildBehavior.combine.getter();
}

uint64_t sub_10012B110()
{
  return static AccessibilityChildBehavior.contain.getter();
}

uint64_t sub_10012B120()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t sub_10012B130()
{
  return static ContainerBackgroundPlacement.widget.getter();
}

uint64_t sub_10012B140()
{
  return type metadata accessor for ContainerBackgroundPlacement();
}

uint64_t sub_10012B150()
{
  return type metadata accessor for AccessibilityAttachmentModifier();
}

uint64_t sub_10012B160()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_10012B170()
{
  return static Axis.Set.horizontal.getter();
}

uint64_t sub_10012B180()
{
  return Axis.Set.init(rawValue:)();
}

uint64_t sub_10012B190()
{
  return static Axis.Set.vertical.getter();
}

uint64_t sub_10012B1A0()
{
  return static Edge.Set.all.getter();
}

uint64_t sub_10012B1B0()
{
  return static Edge.Set.bottom.getter();
}

uint64_t sub_10012B1C0()
{
  return static Font.softNumeric(size:)();
}

uint64_t sub_10012B1D0()
{
  return Font.capHeight(in:)();
}

uint64_t sub_10012B1E0()
{
  return Font.pointSize(in:)();
}

uint64_t sub_10012B1F0()
{
  return static Font.largeTitle.getter();
}

uint64_t sub_10012B200()
{
  return static Font.subheadline.getter();
}

uint64_t sub_10012B210()
{
  return Font.monospacedDigit()();
}

uint64_t sub_10012B220()
{
  return static Font.== infix(_:_:)();
}

uint64_t sub_10012B230()
{
  return static Font.body.getter();
}

uint64_t sub_10012B240()
{
  return Font.bold()();
}

uint64_t sub_10012B250()
{
  return static Font.title.getter();
}

uint64_t sub_10012B260()
{
  return type metadata accessor for Font.Design();
}

uint64_t sub_10012B270()
{
  return static Font.Weight.== infix(_:_:)();
}

uint64_t sub_10012B280()
{
  return static Font.Weight.light.getter();
}

uint64_t sub_10012B290()
{
  return static Font.Weight.medium.getter();
}

uint64_t sub_10012B2A0()
{
  return static Font.Weight.semibold.getter();
}

uint64_t sub_10012B2B0()
{
  return static Font.system(size:weight:design:)();
}

uint64_t sub_10012B2C0()
{
  return Font.weight(_:)();
}

uint64_t sub_10012B2D0()
{
  return type metadata accessor for Font.Context();
}

uint64_t sub_10012B2E0()
{
  return type metadata accessor for Font.Leading();
}

uint64_t sub_10012B2F0()
{
  return static Font.callout.getter();
}

uint64_t sub_10012B300()
{
  return static Font.caption.getter();
}

uint64_t sub_10012B310()
{
  return Font.leading(_:)();
}

uint64_t sub_10012B320()
{
  return static Font.caption2.getter();
}

uint64_t sub_10012B330()
{
  return static Font.footnote.getter();
}

uint64_t sub_10012B340()
{
  return static Font.headline.getter();
}

uint64_t sub_10012B350()
{
  return Text.fontWeight(_:)();
}

uint64_t sub_10012B360()
{
  return type metadata accessor for Text.WritingMode();
}

uint64_t sub_10012B370()
{
  return Text.Measurements.size(of:in:writingMode:)();
}

uint64_t sub_10012B380()
{
  return Text.Measurements.init()();
}

uint64_t sub_10012B390()
{
  return type metadata accessor for Text.Measurements();
}

uint64_t sub_10012B3A0()
{
  return Text.foregroundColor(_:)();
}

uint64_t sub_10012B3B0()
{
  return Text.monospacedDigit()();
}

uint64_t sub_10012B3C0()
{
  return Text.accessibilityLabel<A>(_:)();
}

uint64_t sub_10012B3D0()
{
  return static Text.+ infix(_:_:)();
}

uint64_t sub_10012B3E0()
{
  return type metadata accessor for Text.Case();
}

uint64_t sub_10012B3F0()
{
  return Text.font(_:)();
}

uint64_t sub_10012B400()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t sub_10012B410()
{
  return Text.init(_:)();
}

uint64_t sub_10012B420()
{
  return Text.init<A>(_:)();
}

uint64_t sub_10012B430()
{
  return Text.init(_:)();
}

uint64_t sub_10012B440()
{
  return View.widgetAccentable(_:)();
}

uint64_t sub_10012B450()
{
  return View.widgetURL(_:)();
}

uint64_t sub_10012B460()
{
  return static View._makeView(view:inputs:)();
}

uint64_t sub_10012B470()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t sub_10012B480()
{
  return View.fontWeight(_:)();
}

uint64_t sub_10012B490()
{
  return View.accessibility(label:)();
}

uint64_t sub_10012B4A0()
{
  return View.accessibility(hidden:)();
}

uint64_t sub_10012B4B0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10012B4C0()
{
  return View.dynamicTypeSize<A>(_:)();
}

uint64_t sub_10012B4D0()
{
  return View.accessibilityLabel(_:)();
}

uint64_t sub_10012B4E0()
{
  return View.accessibilityLabel<A>(_:)();
}

uint64_t sub_10012B4F0()
{
  return View.accessibilityValue<A>(_:)();
}

uint64_t sub_10012B500()
{
  return View.accessibilityHidden(_:)();
}

uint64_t sub_10012B510()
{
  return View.containerBackground<A>(for:alignment:content:)();
}

uint64_t sub_10012B520()
{
  return View.accessibilityElement(children:)();
}

uint64_t sub_10012B530()
{
  return View.accessibilityInputLabels<A>(_:)();
}

uint64_t sub_10012B540()
{
  return View.accessibilityRespondsToUserInteraction(_:)();
}

uint64_t sub_10012B550()
{
  return View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t sub_10012B560()
{
  return Color.rgbaComponents.getter();
}

uint64_t sub_10012B570()
{
  return Color.contrastRatioAgainst(_:)();
}

uint64_t sub_10012B580()
{
  return Color.hex.getter();
}

uint64_t sub_10012B590()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t sub_10012B5A0()
{
  return static Color.black.getter();
}

uint64_t sub_10012B5B0()
{
  return static Color.clear.getter();
}

uint64_t sub_10012B5C0()
{
  return static Color.white.getter();
}

uint64_t sub_10012B5D0()
{
  return Color.opacity(_:)();
}

uint64_t sub_10012B5E0()
{
  return static Color.secondary.getter();
}

uint64_t sub_10012B5F0()
{
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t sub_10012B600()
{
  return Color.init(_:white:opacity:)();
}

uint64_t sub_10012B610()
{
  return Color.init(_:)();
}

uint64_t sub_10012B620()
{
  return Image.init(systemName:)();
}

uint64_t sub_10012B630()
{
  return Image.renderingMode(_:)();
}

uint64_t sub_10012B640()
{
  return static Image.TemplateRenderingMode.macSafeOriginal.getter();
}

uint64_t sub_10012B650()
{
  return type metadata accessor for Image.TemplateRenderingMode();
}

uint64_t sub_10012B660()
{
  return type metadata accessor for Image.Scale();
}

uint64_t sub_10012B670()
{
  return Label.init(title:icon:)();
}

uint64_t sub_10012B680()
{
  return State.init(wrappedValue:)();
}

uint64_t sub_10012B690()
{
  return State.wrappedValue.getter();
}

uint64_t sub_10012B6A0()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10012B6B0()
{
  return State.projectedValue.getter();
}

uint64_t sub_10012B6C0()
{
  return VStack.init(alignment:spacing:content:)();
}

uint64_t sub_10012B6D0()
{
  return type metadata accessor for VStack();
}

uint64_t sub_10012B6E0()
{
  return Binding.wrappedValue.getter();
}

uint64_t sub_10012B6F0()
{
  return Binding.projectedValue.getter();
}

uint64_t sub_10012B700()
{
  return Divider.init()();
}

uint64_t sub_10012B710()
{
  return type metadata accessor for Divider();
}

uint64_t sub_10012B720()
{
  return ForEach<>.init(_:content:)();
}

uint64_t sub_10012B730()
{
  return type metadata accessor for ForEach();
}

uint64_t sub_10012B740()
{
  return Gradient.mostLuminantStopColor.getter();
}

uint64_t sub_10012B750()
{
  return Gradient.init(_:)();
}

uint64_t sub_10012B760()
{
  return static Gradient.== infix(_:_:)();
}

uint64_t sub_10012B770()
{
  return Gradient.Stop.init(color:location:)();
}

uint64_t sub_10012B780()
{
  return Gradient.init(stops:)();
}

uint64_t sub_10012B790()
{
  return static Alignment.topLeading.getter();
}

uint64_t sub_10012B7A0()
{
  return static Alignment.center.getter();
}

uint64_t sub_10012B7B0()
{
  return static Alignment.leading.getter();
}

uint64_t sub_10012B7C0()
{
  return static Alignment.trailing.getter();
}

uint64_t sub_10012B7D0()
{
  return type metadata accessor for BlendMode();
}

uint64_t sub_10012B7E0()
{
  return type metadata accessor for TupleView();
}

uint64_t sub_10012B7F0()
{
  return TupleView.init(_:)();
}

uint64_t sub_10012B800()
{
  return static UnitPoint.top.getter();
}

uint64_t sub_10012B810()
{
  return static UnitPoint.bottom.getter();
}

uint64_t sub_10012B820()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t sub_10012B830()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t sub_10012B840()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_10012B850()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t sub_10012B860()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_10012B870()
{
  return static DispatchTime.now()();
}

uint64_t sub_10012B880()
{
  return type metadata accessor for DispatchTime();
}

uint64_t sub_10012B890()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t sub_10012B8A0()
{
  return + infix(_:_:)();
}

uint64_t sub_10012B8B0()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t sub_10012B8C0()
{
  return NoWeatherDataRectangularErrorView.init()();
}

uint64_t sub_10012B8D0()
{
  return type metadata accessor for NoWeatherDataRectangularErrorView();
}

uint64_t sub_10012B8E0()
{
  return static WeatherFormatStyle<>.weather(_:usage:locale:)();
}

uint64_t sub_10012B8F0()
{
  return static WeatherFormatStyle<>.weather.getter();
}

uint64_t sub_10012B900()
{
  return static WeatherFormatStyle<>.weather(_:locale:)();
}

uint64_t sub_10012B910()
{
  return WeatherDayVarianceView.init(weekMaxTemp:weekMinTemp:dayHighTemp:dayLowTemp:currentTemp:isDaylight:temperatureGradient:)();
}

uint64_t sub_10012B920()
{
  return type metadata accessor for WeatherDayVarianceView();
}

uint64_t sub_10012B930()
{
  return type metadata accessor for WeatherEventDescription();
}

uint64_t sub_10012B940()
{
  return type metadata accessor for WeatherFormatPlaceholder();
}

uint64_t sub_10012B950()
{
  return WeatherConditionGradientModel.init(conditionKind:elevation:isDaylight:presentation:cloudCover:cloudKind:)();
}

uint64_t sub_10012B960()
{
  return static WeatherConditionGradientModel.widgetPlaceholder.getter();
}

uint64_t sub_10012B970()
{
  return type metadata accessor for WeatherConditionGradientModel.PresentationContext();
}

uint64_t sub_10012B980()
{
  return WeatherConditionGradientModel.isLowContrastInWidgets.getter();
}

uint64_t sub_10012B990()
{
  return type metadata accessor for WeatherConditionGradientModel();
}

uint64_t sub_10012B9A0()
{
  return WeatherConditionGradientManager.load(for:)();
}

uint64_t sub_10012B9B0()
{
  return WeatherConditionGradientManager.init()();
}

uint64_t sub_10012B9C0()
{
  return type metadata accessor for WeatherConditionGradientManager();
}

uint64_t sub_10012B9D0()
{
  return WeatherEventDescriptionStringBuilder.buildSevereString(from:timeZone:date:)();
}

uint64_t sub_10012B9E0()
{
  return WeatherEventDescriptionStringBuilder.buildLongNextHourString(from:timeZone:date:)();
}

uint64_t sub_10012B9F0()
{
  return WeatherEventDescriptionStringBuilder.buildShortNextHourString(from:date:)();
}

uint64_t sub_10012BA00()
{
  return WeatherEventDescriptionStringBuilder.buildTitleNextHourString(from:date:)();
}

uint64_t sub_10012BA10()
{
  return WeatherEventDescriptionStringBuilder.buildChangeInConditionString(from:dailyForecast:timeZone:date:)();
}

uint64_t sub_10012BA20()
{
  return WeatherEventDescriptionStringBuilder.init()();
}

uint64_t sub_10012BA30()
{
  return type metadata accessor for WeatherEventDescriptionStringBuilder();
}

uint64_t sub_10012BA40()
{
  return static GeoHandler.getElevation(for:on:)();
}

uint64_t sub_10012BA50()
{
  return static RuleBuilder.buildBlock<A, B, C, D>(_:_:_:_:)();
}

uint64_t sub_10012BA60()
{
  return ScaledValue.init(wrappedValue:step:)();
}

uint64_t sub_10012BA70()
{
  return ScaledValue.wrappedValue.getter();
}

uint64_t sub_10012BA80()
{
  return type metadata accessor for ScaledValue();
}

uint64_t sub_10012BA90()
{
  return StringBuilder.init(_:)();
}

uint64_t sub_10012BAA0()
{
  return ConditionImage.init(conditionSymbol:iconHasRain:)();
}

uint64_t sub_10012BAB0()
{
  return type metadata accessor for ConditionImage();
}

uint64_t sub_10012BAC0()
{
  return HourlyBannerView.init(viewAttributes:)();
}

uint64_t sub_10012BAD0()
{
  return type metadata accessor for HourlyBannerView();
}

uint64_t sub_10012BAE0()
{
  return LocationIconView.init(viewAttributes:)();
}

uint64_t sub_10012BAF0()
{
  return type metadata accessor for LocationIconView();
}

uint64_t sub_10012BB00()
{
  return type metadata accessor for CloudAltitudeKind();
}

uint64_t sub_10012BB10()
{
  return SunriseSunsetView.init(model:)();
}

uint64_t sub_10012BB20()
{
  return type metadata accessor for SunriseSunsetView();
}

uint64_t sub_10012BB30()
{
  return ConditionViewModel.iconHasRain.getter();
}

uint64_t sub_10012BB40()
{
  return ConditionViewModel.conditionKind.getter();
}

uint64_t sub_10012BB50()
{
  return ConditionViewModel.conditionString.getter();
}

uint64_t sub_10012BB60()
{
  return ConditionViewModel.conditionSymbol.getter();
}

uint64_t sub_10012BB70()
{
  return ConditionViewModel.isPrecipitation.getter();
}

uint64_t sub_10012BB80()
{
  return ConditionViewModel.init(id:conditionKind:conditionSymbol:conditionString:isDay:isPrecipitation:iconHasRain:)();
}

uint64_t sub_10012BB90()
{
  return ConditionViewModel.isDay.getter();
}

uint64_t sub_10012BBA0()
{
  return type metadata accessor for ConditionViewModel();
}

uint64_t sub_10012BBB0()
{
  return type metadata accessor for SunriseSunsetEvent();
}

uint64_t sub_10012BBC0()
{
  return SunriseSunsetModel.init(currentWeather:dailyForecast:)();
}

uint64_t sub_10012BBD0()
{
  return type metadata accessor for SunriseSunsetModel();
}

uint64_t sub_10012BBE0()
{
  return DegreesConditionView.init(viewAttributes:)();
}

uint64_t sub_10012BBF0()
{
  return type metadata accessor for DegreesConditionView();
}

uint64_t sub_10012BC00()
{
  return SunInlineContentView.init(status:)();
}

uint64_t sub_10012BC10()
{
  return type metadata accessor for SunInlineContentView();
}

uint64_t sub_10012BC20()
{
  return SunriseSunsetDayRule.init()();
}

uint64_t sub_10012BC30()
{
  return type metadata accessor for SunriseSunsetDayRule();
}

uint64_t sub_10012BC40()
{
  return MoonInlineContentView.init(status:)();
}

uint64_t sub_10012BC50()
{
  return type metadata accessor for MoonInlineContentView();
}

uint64_t sub_10012BC60()
{
  return SkyBackgroundGradient.gradient()();
}

uint64_t sub_10012BC70()
{
  return type metadata accessor for SkyBackgroundGradient();
}

uint64_t sub_10012BC80()
{
  return WindInlineContentView.init(status:)();
}

uint64_t sub_10012BC90()
{
  return type metadata accessor for WindInlineContentView();
}

uint64_t sub_10012BCA0()
{
  return CurrentObservationView.init(viewAttributes:)();
}

uint64_t sub_10012BCB0()
{
  return type metadata accessor for CurrentObservationView();
}

uint64_t sub_10012BCC0()
{
  return DailyForecastViewModel.moonEvents.getter();
}

uint64_t sub_10012BCD0()
{
  return DailyForecastViewModel.precipitation.getter();
}

uint64_t sub_10012BCE0()
{
  return DailyForecastViewModel.shortDayString.getter();
}

uint64_t sub_10012BCF0()
{
  return DailyForecastViewModel.precipitationChance.getter();
}

uint64_t sub_10012BD00()
{
  return DailyForecastViewModel.temperatureUnitString.getter();
}

uint64_t sub_10012BD10()
{
  return DailyForecastViewModel.temperatureScaleConfig.getter();
}

uint64_t sub_10012BD20()
{
  return DailyForecastViewModel.accessibilityDescription.getter();
}

uint64_t sub_10012BD30()
{
  return DailyForecastViewModel.precipitationDescription.getter();
}

uint64_t sub_10012BD40()
{
  return DailyForecastViewModel.relevantPrecipitationChance.getter();
}

uint64_t sub_10012BD50()
{
  return DailyForecastViewModel.id.getter();
}

uint64_t sub_10012BD60()
{
  return DailyForecastViewModel.init(id:date:high:low:condition:precipitation:precipitationChance:precipitationDescription:temperatureUnitString:dayString:shortDayString:temperatureScaleConfig:sunEvents:moonEvents:uvIndex:humidity:)();
}

uint64_t sub_10012BD70()
{
  return DailyForecastViewModel.low.getter();
}

uint64_t sub_10012BD80()
{
  return DailyForecastViewModel.date.getter();
}

uint64_t sub_10012BD90()
{
  return DailyForecastViewModel.high.getter();
}

uint64_t sub_10012BDA0()
{
  return DailyForecastViewModel.uvIndex.getter();
}

uint64_t sub_10012BDB0()
{
  return DailyForecastViewModel.humidity.getter();
}

uint64_t sub_10012BDC0()
{
  return DailyForecastViewModel.condition.getter();
}

uint64_t sub_10012BDD0()
{
  return DailyForecastViewModel.dayString.getter();
}

uint64_t sub_10012BDE0()
{
  return DailyForecastViewModel.sunEvents.getter();
}

uint64_t sub_10012BDF0()
{
  return type metadata accessor for DailyForecastViewModel();
}

uint64_t sub_10012BE00()
{
  return SunCircularContentView.init(status:)();
}

uint64_t sub_10012BE10()
{
  return type metadata accessor for SunCircularContentView();
}

uint64_t sub_10012BE20()
{
  return SunriseSunsetNightRule.init()();
}

uint64_t sub_10012BE30()
{
  return type metadata accessor for SunriseSunsetNightRule();
}

uint64_t sub_10012BE40()
{
  return SunriseSunsetPolarRule.init()();
}

uint64_t sub_10012BE50()
{
  return type metadata accessor for SunriseSunsetPolarRule();
}

uint64_t sub_10012BE60()
{
  return static SunriseSunsetViewModel.placeholderModel.getter();
}

uint64_t sub_10012BE70()
{
  return SunriseSunsetViewModel.headerTitle.getter();
}

uint64_t sub_10012BE80()
{
  return static SunriseSunsetViewModel.== infix(_:_:)();
}

uint64_t sub_10012BE90()
{
  return type metadata accessor for SunriseSunsetViewModel();
}

uint64_t sub_10012BEA0()
{
  return TemperatureHighLowText.init(highTemperature:lowTemperature:font:foregroundColor:style:textAlignment:alignVertically:textHeightFrame:)();
}

uint64_t sub_10012BEB0()
{
  return type metadata accessor for TemperatureHighLowText.Style();
}

uint64_t sub_10012BEC0()
{
  return type metadata accessor for TemperatureHighLowText();
}

uint64_t sub_10012BED0()
{
  return type metadata accessor for StyledVariableAttribute.Style();
}

uint64_t sub_10012BEE0()
{
  return WindCircularContentView.init(status:)();
}

uint64_t sub_10012BEF0()
{
  return type metadata accessor for WindCircularContentView();
}

uint64_t sub_10012BF00()
{
  return HourlyCellPreferenceData.frame.getter();
}

uint64_t sub_10012BF10()
{
  return HourlyCellPreferenceData.index.getter();
}

uint64_t sub_10012BF20()
{
  return type metadata accessor for HourlyCellPreferenceData();
}

uint64_t sub_10012BF30()
{
  return SunComplicationViewModel.init(from:timeZone:)();
}

uint64_t sub_10012BF40()
{
  return type metadata accessor for SunComplicationViewModel();
}

uint64_t sub_10012BF50()
{
  return SunriseSunsetMorningRule.init()();
}

uint64_t sub_10012BF60()
{
  return type metadata accessor for SunriseSunsetMorningRule();
}

uint64_t sub_10012BF70()
{
  return WidgetAccentableIconView.init(symbol:modifier:)();
}

uint64_t sub_10012BF80()
{
  return ConditionViewModelFactory.makeConditionViewModel(from:isDaytime:)();
}

uint64_t sub_10012BF90()
{
  return ConditionViewModelFactory.init()();
}

uint64_t sub_10012BFA0()
{
  return type metadata accessor for ConditionViewModelFactory();
}

uint64_t sub_10012BFB0()
{
  return LocationInlineContentView.init(status:)();
}

uint64_t sub_10012BFC0()
{
  return type metadata accessor for LocationInlineContentView();
}

uint64_t sub_10012BFD0()
{
  return MoonComplicationViewModel.init(moonEvents:observerHemisphere:)();
}

uint64_t sub_10012BFE0()
{
  return type metadata accessor for MoonComplicationViewModel();
}

uint64_t sub_10012BFF0()
{
  return type metadata accessor for SunComplicationDataStatus();
}

uint64_t sub_10012C000()
{
  return WindComplicationViewModel.init(localWeather:timeZone:gradientModel:angle:direction:speed:hourly:)();
}

uint64_t sub_10012C010()
{
  return type metadata accessor for WindComplicationViewModel();
}

uint64_t sub_10012C030()
{
  return HourlyBannerViewAttributes.hourlyForecasts.getter();
}

uint64_t sub_10012C040()
{
  return type metadata accessor for HourlyBannerViewAttributes();
}

uint64_t sub_10012C050()
{
  return type metadata accessor for MoonComplicationDataStatus();
}

uint64_t sub_10012C060()
{
  return MoonRectangularContentView.init(status:)();
}

uint64_t sub_10012C070()
{
  return type metadata accessor for MoonRectangularContentView();
}

uint64_t sub_10012C080()
{
  return RainInlineContentViewModel.description.getter();
}

uint64_t sub_10012C090()
{
  return RainInlineContentViewModel.init(conditionIconName:conditionIconAccessibilityString:description:accessibilityDescription:fallbackDescription:)();
}

uint64_t sub_10012C0A0()
{
  return RainInlineContentViewModel.conditionIconName.getter();
}

uint64_t sub_10012C0B0()
{
  return RainInlineContentViewModel.fallbackDescription.getter();
}

uint64_t sub_10012C0C0()
{
  return RainInlineContentViewModel.accessibilityDescription.getter();
}

uint64_t sub_10012C0D0()
{
  return RainInlineContentViewModel.conditionIconAccessibilityString.getter();
}

uint64_t sub_10012C0E0()
{
  return type metadata accessor for RainInlineContentViewModel();
}

uint64_t sub_10012C0F0()
{
  return type metadata accessor for WindComplicationDataStatus();
}

uint64_t sub_10012C100()
{
  return AirQualityInlineContentView.init(status:)();
}

uint64_t sub_10012C110()
{
  return type metadata accessor for AirQualityInlineContentView();
}

uint64_t sub_10012C120()
{
  return type metadata accessor for CurrentObservationViewModel.AirQuality.Value();
}

uint64_t sub_10012C130()
{
  return CurrentObservationViewModel.AirQuality.value.getter();
}

uint64_t sub_10012C140()
{
  return CurrentObservationViewModel.AirQuality.init(scaleName:value:)();
}

uint64_t sub_10012C150()
{
  return CurrentObservationViewModel.AirQuality.scaleName.getter();
}

uint64_t sub_10012C160()
{
  return type metadata accessor for CurrentObservationViewModel.AirQuality();
}

uint64_t sub_10012C170()
{
  return CurrentObservationViewModel.airQuality.getter();
}

uint64_t sub_10012C180()
{
  return CurrentObservationViewModel.cloudCover.getter();
}

uint64_t sub_10012C190()
{
  return CurrentObservationViewModel.temperature.getter();
}

uint64_t sub_10012C1A0()
{
  return CurrentObservationViewModel.expirationDate.getter();
}

uint64_t sub_10012C1B0()
{
  return CurrentObservationViewModel.lowTemperature.getter();
}

uint64_t sub_10012C1C0()
{
  return CurrentObservationViewModel.highTemperature.getter();
}

uint64_t sub_10012C1D0()
{
  return CurrentObservationViewModel.apparentTemperature.getter();
}

uint64_t sub_10012C1E0()
{
  return static CurrentObservationViewModel.== infix(_:_:)();
}

uint64_t sub_10012C1F0()
{
  return CurrentObservationViewModel.init(id:date:expirationDate:temperature:apparentTemperature:temperatureUnitString:highTemperature:lowTemperature:condition:cloudCover:cloudKind:sunrise:sunset:uvIndex:wind:humidity:airQuality:)();
}

uint64_t sub_10012C200()
{
  return CurrentObservationViewModel.wind.getter();
}

uint64_t sub_10012C210()
{
  return CurrentObservationViewModel.uvIndex.getter();
}

uint64_t sub_10012C220()
{
  return CurrentObservationViewModel.humidity.getter();
}

uint64_t sub_10012C230()
{
  return CurrentObservationViewModel.cloudKind.getter();
}

uint64_t sub_10012C240()
{
  return CurrentObservationViewModel.condition.getter();
}

uint64_t sub_10012C250()
{
  return type metadata accessor for CurrentObservationViewModel();
}

uint64_t sub_10012C260()
{
  return CurrentObservationBannerView.init(viewAttributes:)();
}

uint64_t sub_10012C270()
{
  return type metadata accessor for CurrentObservationBannerView();
}

uint64_t sub_10012C280()
{
  return type metadata accessor for SunriseSunsetBackgroundStyle();
}

uint64_t sub_10012C290()
{
  return SunriseSunsetEventCalculator.nextEvent(coordinate:date:timeZone:)();
}

uint64_t sub_10012C2A0()
{
  return SunriseSunsetEventCalculator.init()();
}

uint64_t sub_10012C2B0()
{
  return type metadata accessor for SunriseSunsetEventCalculator();
}

uint64_t sub_10012C2C0()
{
  return UltravioletInlineContentView.init(status:)();
}

uint64_t sub_10012C2D0()
{
  return type metadata accessor for UltravioletInlineContentView();
}

uint64_t sub_10012C2E0()
{
  return AirQualityCircularContentView.init(status:)();
}

uint64_t sub_10012C2F0()
{
  return type metadata accessor for AirQualityCircularContentView();
}

uint64_t sub_10012C300()
{
  return DailyForecastViewModelFactory.makeDailyForecastViewModel(from:timeZone:)();
}

uint64_t sub_10012C310()
{
  return DailyForecastViewModelFactory.init(appConfiguration:)();
}

uint64_t sub_10012C320()
{
  return type metadata accessor for DailyForecastViewModelFactory();
}

uint64_t sub_10012C330()
{
  return HourlyForecastBannerViewModel.hourString.getter();
}

uint64_t sub_10012C340()
{
  return HourlyForecastBannerViewModel.temperature.getter();
}

uint64_t sub_10012C350()
{
  return HourlyForecastBannerViewModel.precipitation.getter();
}

uint64_t sub_10012C360()
{
  return HourlyForecastBannerViewModel.precipitationChance.getter();
}

uint64_t sub_10012C370()
{
  return HourlyForecastBannerViewModel.temperatureUnitString.getter();
}

uint64_t sub_10012C380()
{
  return HourlyForecastBannerViewModel.accessibilityHourString.getter();
}

uint64_t sub_10012C390()
{
  return HourlyForecastBannerViewModel.relevantPrecipitationChance.getter();
}

uint64_t sub_10012C3A0()
{
  return HourlyForecastBannerViewModel.id.getter();
}

uint64_t sub_10012C3B0()
{
  return HourlyForecastBannerViewModel.init(id:date:temperature:hourString:accessibilityHourString:condition:precipitationChance:temperatureUnitString:precipitation:wind:)();
}

uint64_t sub_10012C3C0()
{
  return HourlyForecastBannerViewModel.date.getter();
}

uint64_t sub_10012C3D0()
{
  return HourlyForecastBannerViewModel.wind.getter();
}

uint64_t sub_10012C3E0()
{
  return HourlyForecastBannerViewModel.condition.getter();
}

uint64_t sub_10012C3F0()
{
  return type metadata accessor for HourlyForecastBannerViewModel();
}

uint64_t sub_10012C400()
{
  return LocationComplicationViewModel.init(locationName:conditionKind:conditionSymbol:)();
}

uint64_t sub_10012C410()
{
  return type metadata accessor for LocationComplicationViewModel();
}

uint64_t sub_10012C420()
{
  return SunriseSunsetViewModelFactory.makeViewModel(for:component:)();
}

uint64_t sub_10012C430()
{
  return SunriseSunsetViewModelFactory.init(stringBuilder:sunriseSunsetEventCalculator:)();
}

uint64_t sub_10012C440()
{
  return type metadata accessor for SunriseSunsetViewModelFactory();
}

uint64_t sub_10012C450()
{
  return type metadata accessor for SunriseSunsetWidgetDataStatus();
}

uint64_t sub_10012C460()
{
  return type metadata accessor for LocationComplicationDataStatus();
}

uint64_t sub_10012C470()
{
  return NextHourPrecipitationChartView.init(model:lollipopPoint:selectedData:lollipopEnabled:)();
}

uint64_t sub_10012C480()
{
  return type metadata accessor for NextHourPrecipitationChartView();
}

uint64_t sub_10012C490()
{
  return TemperatureCircularContentView.init(status:)();
}

uint64_t sub_10012C4A0()
{
  return type metadata accessor for TemperatureCircularContentView();
}

uint64_t sub_10012C4B0()
{
  return UltravioletCircularContentView.init(status:)();
}

uint64_t sub_10012C4C0()
{
  return type metadata accessor for UltravioletCircularContentView();
}

uint64_t sub_10012C4D0()
{
  return AirQualityComplicationViewModel.init(localWeather:timeZone:index:scale:currentScaleCategory:)();
}

uint64_t sub_10012C4E0()
{
  return type metadata accessor for AirQualityComplicationViewModel();
}

uint64_t sub_10012C4F0()
{
  return type metadata accessor for SunriseSunsetDescriptionContext();
}

uint64_t sub_10012C500()
{
  return type metadata accessor for AirQualityComplicationDataStatus();
}

uint64_t sub_10012C510()
{
  return CurrentObservationViewAttributes.isCurrent.getter();
}

uint64_t sub_10012C520()
{
  return CurrentObservationViewAttributes.init(currentObservation:todayDailyForecast:rainContent:location:description:isCurrent:isDataDense:conditionGlyphForegroundColor:locationGlyphSystemName:labelColor:labelFont:descriptionColor:descriptionFont:conditionColor:conditionFont:temperatureColor:temperatureFont:usesSoftTemperatureFont:highLowTemperatureColor:highLowTemperatureFont:locationColor:locationFont:locationFontWeight:showNumericOnlyHighLow:useVerticalText:showConditionText:showConditionIcon:symbolOverride:showSevereConditionGlyph:locationDegreesSpacerHeight:valueFontOpacity:)();
}

uint64_t sub_10012C530()
{
  return CurrentObservationViewAttributes.currentObservation.getter();
}

uint64_t sub_10012C540()
{
  return CurrentObservationViewAttributes.description.getter();
}

uint64_t sub_10012C550()
{
  return CurrentObservationViewAttributes.locationFont.getter();
}

uint64_t sub_10012C560()
{
  return CurrentObservationViewAttributes.conditionFont.getter();
}

uint64_t sub_10012C570()
{
  return CurrentObservationViewAttributes.symbolOverride.getter();
}

uint64_t sub_10012C580()
{
  return CurrentObservationViewAttributes.descriptionFont.getter();
}

uint64_t sub_10012C590()
{
  return CurrentObservationViewAttributes.temperatureFont.getter();
}

uint64_t sub_10012C5A0()
{
  return CurrentObservationViewAttributes.valueFontOpacity.getter();
}

uint64_t sub_10012C5B0()
{
  return CurrentObservationViewAttributes.showConditionText.getter();
}

uint64_t sub_10012C5C0()
{
  return CurrentObservationViewAttributes.locationFontWeight.getter();
}

uint64_t sub_10012C5D0()
{
  return CurrentObservationViewAttributes.locationGlyphSystemName.getter();
}

uint64_t sub_10012C5E0()
{
  return CurrentObservationViewAttributes.showSevereConditionGlyph.getter();
}

uint64_t sub_10012C5F0()
{
  return CurrentObservationViewAttributes.location.getter();
}

uint64_t sub_10012C600()
{
  return CurrentObservationViewAttributes.labelFont.getter();
}

uint64_t sub_10012C610()
{
  return type metadata accessor for CurrentObservationViewAttributes();
}

uint64_t sub_10012C620()
{
  return TemperatureComplicationViewModel.init(temperature:maxTemperature:minTemperature:)();
}

uint64_t sub_10012C630()
{
  return type metadata accessor for TemperatureComplicationViewModel();
}

uint64_t sub_10012C650()
{
  return type metadata accessor for UltravioletComplicationViewModel();
}

uint64_t sub_10012C660()
{
  return type metadata accessor for TemperatureComplicationDataStatus();
}

uint64_t sub_10012C670()
{
  return type metadata accessor for UltravioletComplicationDataStatus();
}

uint64_t sub_10012C680()
{
  return type metadata accessor for NextHourPrecipitationChartPlacement();
}

uint64_t sub_10012C690()
{
  return NextHourPrecipitationChartViewModel.accessibilitySummary.getter();
}

uint64_t sub_10012C6A0()
{
  return static NextHourPrecipitationChartViewModel.transform(viewModel:by:)();
}

uint64_t sub_10012C6B0()
{
  return type metadata accessor for NextHourPrecipitationChartViewModel();
}

uint64_t sub_10012C6C0()
{
  return SmallNextHourPrecipitationChartView.init(model:)();
}

uint64_t sub_10012C6D0()
{
  return type metadata accessor for SmallNextHourPrecipitationChartView();
}

uint64_t sub_10012C6E0()
{
  return HourlyForecastBannerViewModelFactory.makeHourlyForecastBannerViewModel(from:timeZone:entry:)();
}

uint64_t sub_10012C6F0()
{
  return HourlyForecastBannerViewModelFactory.init()();
}

uint64_t sub_10012C700()
{
  return type metadata accessor for HourlyForecastBannerViewModelFactory();
}

uint64_t sub_10012C710()
{
  return CompactNextHourPrecipitationChartView.init(model:)();
}

uint64_t sub_10012C720()
{
  return type metadata accessor for CompactNextHourPrecipitationChartView();
}

uint64_t sub_10012C730()
{
  return NextHourPrecipitationChartViewModelFactory.init()();
}

uint64_t sub_10012C740()
{
  return type metadata accessor for NextHourPrecipitationChartViewModelFactory();
}

uint64_t sub_10012C750()
{
  return AccessibilitySizeCurrentObservationBannerView.init(viewAttributes:)();
}

uint64_t sub_10012C760()
{
  return type metadata accessor for AccessibilitySizeCurrentObservationBannerView();
}

uint64_t sub_10012C770()
{
  return dispatch thunk of NextHourPrecipitationChartViewModelFactoryType.makeViewModel(for:precipitation:placement:currentTime:minutesToConsider:)();
}

uint64_t sub_10012C780()
{
  return type metadata accessor for Elevation();
}

uint64_t sub_10012C790()
{
  return AccessoryWidgetBackground.init()();
}

uint64_t sub_10012C7A0()
{
  return type metadata accessor for AccessoryWidgetBackground();
}

uint64_t sub_10012C7B0()
{
  return static WidgetRenderingMode.== infix(_:_:)();
}

uint64_t sub_10012C7C0()
{
  return static WidgetRenderingMode.vibrant.getter();
}

uint64_t sub_10012C7D0()
{
  return static WidgetRenderingMode.accented.getter();
}

uint64_t sub_10012C7E0()
{
  return static WidgetRenderingMode.fullColor.getter();
}

uint64_t sub_10012C7F0()
{
  return type metadata accessor for WidgetRenderingMode();
}

uint64_t sub_10012C800()
{
  return type metadata accessor for WidgetFamily();
}

uint64_t sub_10012C810()
{
  return static ControlSize._1x1.getter();
}

uint64_t sub_10012C820()
{
  return type metadata accessor for ControlSize();
}

uint64_t sub_10012C830()
{
  return ControlPicker.init<A, B, C, D, E, F, G>(kind:displayName:preferredSize:intentUpdatableProperty:title:value:affordances:)();
}

uint64_t sub_10012C840()
{
  return ControlToggle.init<A, B, C, D, E, F, G>(kind:intentUpdatableProperty:title:subtitle:value:)();
}

uint64_t sub_10012C870()
{
  return ControlAffordances.init(tint:status:actionHint:)();
}

uint64_t sub_10012C880()
{
  return IntentConfiguration.init<A>(kind:intent:provider:content:)();
}

uint64_t sub_10012C890()
{
  return StaticConfiguration.init<A>(kind:provider:content:)();
}

uint64_t sub_10012C8A0()
{
  return static TimelineReloadPolicy.after(_:)();
}

uint64_t sub_10012C8B0()
{
  return static TimelineReloadPolicy.atEnd.getter();
}

uint64_t sub_10012C8C0()
{
  return static TimelineReloadPolicy.never.getter();
}

uint64_t sub_10012C8D0()
{
  return type metadata accessor for TimelineReloadPolicy();
}

uint64_t sub_10012C8F0()
{
  return IntentTimelineProvider.recommendations()();
}

uint64_t sub_10012C910()
{
  return TimelineEntryRelevance.init(score:duration:)();
}

uint64_t sub_10012C920()
{
  return type metadata accessor for TimelineEntryRelevance();
}

uint64_t sub_10012C930()
{
  return TimelineProviderContext.family.getter();
}

uint64_t sub_10012C940()
{
  return TimelineProviderContext.isPreview.getter();
}

uint64_t sub_10012C950()
{
  return type metadata accessor for TimelineProviderContext();
}

uint64_t sub_10012C960()
{
  return Timeline.init(entries:policy:)();
}

uint64_t sub_10012C970()
{
  return Timeline.entries.getter();
}

NSDictionary sub_10012C980()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10012C990()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10012C9A0()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_10012C9B0()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t sub_10012C9C0()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t sub_10012C9D0()
{
  return dispatch thunk of static Comparable.>= infix(_:_:)();
}

uint64_t sub_10012C9E0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_10012C9F0()
{
  return String.init(contentsOfFile:)();
}

uint64_t sub_10012CA00()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t sub_10012CA10()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString sub_10012CA20()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10012CA30()
{
  return static String.localizedStringWithFormat(_:_:)();
}

uint64_t sub_10012CA40()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10012CA50()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t sub_10012CA60()
{
  return String.init(data:encoding:)();
}

uint64_t sub_10012CA70()
{
  return String.init(format:_:)();
}

uint64_t sub_10012CA80()
{
  return static String.Encoding.utf8.getter();
}

uint64_t sub_10012CA90()
{
  return type metadata accessor for String.Encoding();
}

uint64_t sub_10012CAA0()
{
  return String.init<A>(describing:)();
}

uint64_t sub_10012CAB0()
{
  return String.init<A>(reflecting:)();
}

uint64_t sub_10012CAC0()
{
  return String.hash(into:)();
}

uint64_t sub_10012CAD0()
{
  return String.count.getter();
}

uint64_t sub_10012CAE0()
{
  return String.index(_:offsetBy:limitedBy:)();
}

void sub_10012CAF0(Swift::String a1)
{
}

Swift::Int sub_10012CB00()
{
  return String.UTF8View._foreignCount()();
}

uint64_t sub_10012CB10()
{
  return String.init<A>(_:)();
}

uint64_t sub_10012CB20()
{
  return String.init<A>(_:)();
}

uint64_t sub_10012CB30()
{
  return String.subscript.getter();
}

uint64_t sub_10012CB40()
{
  return Sequence.first<A>(map:)();
}

uint64_t sub_10012CB50()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t sub_10012CB60()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_10012CB70()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10012CB80()
{
  return RawRepresentable<>.init(from:)();
}

NSArray sub_10012CB90()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_10012CBA0()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10012CBB0()
{
  return Array.description.getter();
}

uint64_t sub_10012CBC0()
{
  return specialized Array._endMutation()();
}

uint64_t sub_10012CBD0()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t sub_10012CBE0()
{
  return Array<A>.alerts(prominence:)();
}

uint64_t sub_10012CBF0()
{
  return type metadata accessor for Bool.IntentDisplayName();
}

NSNumber sub_10012CC00()
{
  return Bool._bridgeToObjectiveC()();
}

uint64_t sub_10012CC10()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t sub_10012CC20()
{
  return TaskPriority.rawValue.getter();
}

uint64_t sub_10012CC30()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_10012CC40(Swift::Bool roundToNearestPercent)
{
  return Double.formattedPercent(roundToNearestPercent:)(roundToNearestPercent)._countAndFlagsBits;
}

uint64_t sub_10012CC50(NSDateComponentsFormatterUnitsStyle unitsStyle)
{
  return Double.formatDayDuration(unitsStyle:)(unitsStyle).value._countAndFlagsBits;
}

uint64_t sub_10012CC60(NSDateComponentsFormatterUnitsStyle unitsStyle)
{
  return Double.formatHourDuration(unitsStyle:)(unitsStyle).value._countAndFlagsBits;
}

uint64_t sub_10012CC70(NSDateComponentsFormatterUnitsStyle unitsStyle)
{
  return Double.formatMinuteDuration(unitsStyle:)(unitsStyle).value._countAndFlagsBits;
}

uint64_t sub_10012CC80()
{
  return static Set<>.full.getter();
}

uint64_t sub_10012CC90()
{
  return static Set<>.full.getter();
}

uint64_t sub_10012CCA0()
{
  return static Set<>.value.getter();
}

uint64_t sub_10012CCB0()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t sub_10012CCC0()
{
  return dispatch thunk of Collection.distance(from:to:)();
}

uint64_t sub_10012CCD0()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t sub_10012CCE0()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t sub_10012CCF0()
{
  return dispatch thunk of Collection.subscript.read();
}

BOOL sub_10012CD00(Swift::Bool limitsPrecision, CLLocation_optional lastKnownLocation)
{
  return CLLocation.isValid(limitsPrecision:lastKnownLocation:)(limitsPrecision, lastKnownLocation);
}

uint64_t sub_10012CD10()
{
  return NSUnitSpeed.BaseWeatherFormatStyle.accessible.getter();
}

uint64_t sub_10012CD20()
{
  return type metadata accessor for NSUnitSpeed.BaseWeatherFormatStyle();
}

uint64_t sub_10012CD30()
{
  return type metadata accessor for NSUnitSpeed.WeatherFormatUsage();
}

uint64_t sub_10012CD40()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10012CD50()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_10012CD60()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10012CD70()
{
  return static NSUserDefaults.weatherShared.getter();
}

uint64_t sub_10012CD80()
{
  return static NSUserDefaults.postSettingsUpdatedNotification()();
}

uint64_t sub_10012CD90()
{
  return NSUserDefaults.set<A>(_:for:)();
}

uint64_t sub_10012CDA0()
{
  return type metadata accessor for NSUnitTemperature.AttributedWeatherFormatStyle();
}

uint64_t sub_10012CDB0()
{
  return NSUnitTemperature.BaseWeatherFormatStyle.attributed.getter();
}

uint64_t sub_10012CDC0()
{
  return NSUnitTemperature.BaseWeatherFormatStyle.secondary.getter();
}

uint64_t sub_10012CDD0()
{
  return type metadata accessor for NSUnitTemperature.BaseWeatherFormatStyle();
}

uint64_t sub_10012CDE0()
{
  return NSUnitTemperature.accessibilityString()()._countAndFlagsBits;
}

uint64_t sub_10012CDF0()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t sub_10012CE00()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t sub_10012CE10()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_10012CE20()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t sub_10012CE30()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t sub_10012CE40()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t sub_10012CE50()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

void sub_10012CE60()
{
}

void sub_10012CE70()
{
}

uint64_t sub_10012CE80()
{
  return WCDefaultCityManager.defaultLocation()();
}

uint64_t sub_10012CE90()
{
  return CLAuthorizationStatus.isAuthorized.getter();
}

uint64_t sub_10012CEA0()
{
  return CLAuthorizationStatus.logDescription.getter();
}

uint64_t sub_10012CEB0()
{
  return CLAuthorizationStatus.isExplicitlyUnauthorized.getter();
}

uint64_t sub_10012CEC0()
{
  return UIContentSizeCategory.init(_:)();
}

uint64_t sub_10012CED0()
{
  return CLLocationCoordinate2D.clLocation.getter();
}

uint64_t sub_10012CEE0()
{
  return static CLLocationCoordinate2D.== infix(_:_:)();
}

uint64_t sub_10012CEF0()
{
  return CLLocationCoordinate2D.storeKey.getter();
}

uint64_t sub_10012CF00()
{
  return CLLocationCoordinate2D.id.getter();
}

uint64_t sub_10012CF10()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t sub_10012CF20()
{
  return CGSize.length.getter();
}

uint64_t sub_10012CF30()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_10012CF40()
{
  return type metadata accessor for Optional();
}

uint64_t sub_10012CF50()
{
  return Substring.lowercased()()._countAndFlagsBits;
}

uint64_t sub_10012CF60()
{
  return Substring.uppercased()()._countAndFlagsBits;
}

uint64_t sub_10012CF70()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10012CF80()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t sub_10012CF90()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t sub_10012CFA0()
{
  return StringProtocol.write(to:atomically:encoding:)();
}

uint64_t sub_10012CFB0()
{
  return BinaryInteger.formatted()()._countAndFlagsBits;
}

uint64_t sub_10012CFC0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void sub_10012CFD0(Swift::Int a1)
{
}

uint64_t sub_10012CFE0()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t sub_10012CFF0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_10012D000()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t sub_10012D010()
{
  return type metadata accessor for DecodingError();
}

uint64_t sub_10012D020()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_10012D030()
{
  return _print_unlocked<A, B>(_:_:)();
}

BOOL sub_10012D040(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

uint64_t sub_10012D050()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t sub_10012D060()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10012D070()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10012D080()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t sub_10012D090()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_10012D0A0()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int sub_10012D0B0(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases, string);
}

uint64_t sub_10012D0C0()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_10012D0D0()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t sub_10012D0E0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_10012D0F0()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10012D100()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10012D110()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10012D120()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10012D130()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_10012D140()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t sub_10012D150()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_10012D160()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_10012D170()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10012D180()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_10012D190()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_10012D1A0()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_10012D1B0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int sub_10012D1C0(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t sub_10012D1D0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10012D1E0()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t sub_10012D1F0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10012D200()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t sub_10012D210()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t sub_10012D220()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10012D230()
{
  return Error.localizedDescription.getter();
}

uint64_t sub_10012D240()
{
  return Error._getEmbeddedNSError()();
}

uint64_t sub_10012D250()
{
  return Error._code.getter();
}

uint64_t sub_10012D260()
{
  return Error._domain.getter();
}

uint64_t sub_10012D270()
{
  return Error._userInfo.getter();
}

uint64_t sub_10012D280()
{
  return Hasher.init(_seed:)();
}

void sub_10012D290(Swift::UInt a1)
{
}

Swift::Int sub_10012D2A0()
{
  return Hasher._finalize()();
}

uint64_t sub_10012D2B0()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_10012D2C0()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

uint64_t NSExtensionMain()
{
  return _NSExtensionMain();
}

uint64_t WCCountryCodeEstimate()
{
  return _WCCountryCodeEstimate();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFPreferencesAppSynchronizeWithContainer()
{
  return __CFPreferencesAppSynchronizeWithContainer();
}

uint64_t _CFPreferencesCopyAppValueWithContainer()
{
  return __CFPreferencesCopyAppValueWithContainer();
}

uint64_t _CFPreferencesSetAppValueWithContainer()
{
  return __CFPreferencesSetAppValueWithContainer();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeMetadata()
{
  return _swift_getTupleTypeMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

id objc_msgSend__weatherDisplayName(void *a1, const char *a2, ...)
{
  return _[a1 _weatherDisplayName];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_containerURLForSecurityApplicationGroupIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 containerURLForSecurityApplicationGroupIdentifier:];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_groupContainerURLs(void *a1, const char *a2, ...)
{
  return _[a1 groupContainerURLs];
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleIdentifier:allowPlaceholder:error:];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_locality(void *a1, const char *a2, ...)
{
  return _[a1 locality];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_placemark(void *a1, const char *a2, ...)
{
  return _[a1 placemark];
}

id objc_msgSend_readContainerPreferenceValueForKey_(void *a1, const char *a2, ...)
{
  return [a1 readContainerPreferenceValueForKey:];
}