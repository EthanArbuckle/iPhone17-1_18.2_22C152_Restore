uint64_t sub_1001BF40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = type metadata accessor for Font.Leading();
  v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Font.title.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v4 = Font.leading(_:)();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_100997660 = v4;
  return result;
}

double sub_1001BF534()
{
  double result = 30.0;
  xmmword_100997670 = xmmword_100752FA0;
  *(_OWORD *)&qword_100997680 = xmmword_100752FA0;
  return result;
}

uint64_t sub_1001BF54C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = type metadata accessor for CardConfigurationView();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v36 = *(void *)(v37 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v35 = (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ToolbarTitleDisplayMode();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000AFA94(&qword_10094E260);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000AFA94(&qword_10094E258);
  uint64_t v30 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000AFA94(&qword_10094E248);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v33 = v15;
  uint64_t v34 = v16;
  __chkstk_darwin(v15);
  v29 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a1;
  static Axis.Set.vertical.getter();
  sub_1000AFA94(&qword_10094E298);
  sub_1000A132C(&qword_10094E2A0, &qword_10094E298);
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v39 = a1;
  uint64_t v18 = a1;
  uint64_t v19 = sub_1000AFA94(&qword_10094E268);
  uint64_t v20 = sub_1000A132C(&qword_10094E270, &qword_10094E260);
  uint64_t v21 = sub_1000A132C(&qword_10094E278, &qword_10094E268);
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static ToolbarTitleDisplayMode.inline.getter();
  uint64_t v41 = v8;
  uint64_t v42 = v19;
  uint64_t v43 = v20;
  uint64_t v44 = v21;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v23 = v29;
  View.toolbarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
  uint64_t v24 = v35;
  sub_1001C5894(v18, v35, (uint64_t (*)(void))type metadata accessor for CardConfigurationView);
  unint64_t v25 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v26 = swift_allocObject();
  sub_1001C51D0(v24, v26 + v25);
  sub_1000AFA94(&qword_10094E250);
  uint64_t v41 = v12;
  uint64_t v42 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_1001C50C4();
  sub_1001C5118();
  uint64_t v27 = v33;
  View.navigationDestination<A, B>(for:destination:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v23, v27);
}

uint64_t sub_1001BFAB8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v58 = a1;
  v61 = a2;
  uint64_t v2 = sub_1000AFA94(&qword_10094E328);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v62 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v59 = (uint64_t *)((char *)&v49 - v5);
  uint64_t v55 = type metadata accessor for CardConfigurationView();
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v52 = v6;
  uint64_t v56 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = (uint64_t (*)(void))type metadata accessor for AccessibilityTraits();
  uint64_t v50 = *((void *)v51 - 1);
  __chkstk_darwin(v51);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_1000AFA94(&qword_10094E330);
  __chkstk_darwin(v53);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_1000AFA94(&qword_10094E338);
  uint64_t v57 = *(void *)(v60 - 8);
  uint64_t v11 = __chkstk_darwin(v60);
  v63 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v64 = (char *)&v49 - v13;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  char v18 = v17;
  if (qword_10094A600 != -1) {
    swift_once();
  }
  uint64_t v19 = Text.font(_:)();
  uint64_t v21 = v20;
  char v23 = v22;
  uint64_t v25 = v24;
  sub_1000A06C0(v14, v16, v18 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v27 = static Edge.Set.all.getter();
  uint64_t v65 = v19;
  uint64_t v66 = v21;
  char v67 = v23 & 1;
  uint64_t v68 = v25;
  uint64_t v69 = KeyPath;
  char v70 = 1;
  char v71 = v27;
  long long v72 = xmmword_100752FB0;
  long long v73 = xmmword_100752FC0;
  char v74 = 0;
  static AccessibilityTraits.isHeader.getter();
  sub_1000AFA94(&qword_10094E340);
  sub_1001C549C();
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t (*)(void)))(v50 + 8))(v8, v51);
  sub_1000A06C0(v65, v66, v67);
  swift_release();
  swift_bridgeObjectRelease();
  v51 = (uint64_t (*)(void))type metadata accessor for CardConfigurationView;
  uint64_t v28 = v58;
  uint64_t v29 = v56;
  sub_1001C5894(v58, v56, (uint64_t (*)(void))type metadata accessor for CardConfigurationView);
  unint64_t v30 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  uint64_t v31 = swift_allocObject();
  sub_1001C51D0(v29, v31 + v30);
  sub_1001C558C();
  uint64_t v32 = v63;
  View.onScrollVisibilityChange(threshold:_:)();
  swift_release();
  sub_10008DB18((uint64_t)v10, &qword_10094E330);
  uint64_t v33 = v57;
  uint64_t v34 = v32;
  uint64_t v35 = v60;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v64, v34, v60);
  uint64_t v36 = static Alignment.center.getter();
  uint64_t v37 = (uint64_t)v59;
  uint64_t *v59 = v36;
  *(void *)(v37 + 8) = v38;
  *(void *)(v37 + 16) = 0;
  *(unsigned char *)(v37 + 24) = 1;
  *(void *)(v37 + 32) = 0;
  *(unsigned char *)(v37 + 40) = 0;
  sub_1000AFA94(&qword_10094E358);
  uint64_t v39 = *(void *)(*(void *)(v28 + *(int *)(v55 + 52)) + 16);
  uint64_t v65 = 0;
  uint64_t v66 = v39;
  swift_getKeyPath();
  sub_1001C5894(v28, v29, v51);
  uint64_t v40 = swift_allocObject();
  sub_1001C51D0(v29, v40 + v30);
  sub_1000AFA94(&qword_10094E360);
  sub_1000AFA94(&qword_10094E368);
  sub_1001C5704();
  sub_1000A132C(&qword_10094E380, &qword_10094E368);
  ForEach<>.init(_:id:content:)();
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  uint64_t v42 = v63;
  uint64_t v43 = v64;
  v41(v63, v64, v35);
  uint64_t v44 = v62;
  sub_1000AEF2C(v37, v62, &qword_10094E328);
  v45 = v61;
  v41(v61, v42, v35);
  uint64_t v46 = sub_1000AFA94(&qword_10094E388);
  sub_1000AEF2C(v44, (uint64_t)&v45[*(int *)(v46 + 48)], &qword_10094E328);
  sub_10008DB18(v37, &qword_10094E328);
  v47 = *(void (**)(char *, uint64_t))(v33 + 8);
  v47(v43, v35);
  sub_10008DB18(v44, &qword_10094E328);
  return ((uint64_t (*)(char *, uint64_t))v47)(v42, v35);
}

uint64_t sub_1001C01F8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1001C0264@<X0>(char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = type metadata accessor for CardConfigurationView();
  if (((unint64_t)v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + *(int *)(result + 52));
  if ((unint64_t)v5 >= *(void *)(v7 + 16))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(v7 + 8 * (void)v5 + 32);
  swift_bridgeObjectRetain();
  *(void *)a3 = static HorizontalAlignment.center.getter();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v9 = sub_1000AFA94(&qword_10094E390);
  sub_1001C0310(v8, a2, v5, a3 + *(int *)(v9 + 44));

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001C0310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a3;
  *(void *)&long long v41 = a1;
  uint64_t v44 = a4;
  uint64_t v5 = type metadata accessor for Divider();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000AFA94(&qword_10094E398);
  uint64_t v43 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000AFA94(&qword_10094E3A0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = sub_1000AFA94(&qword_10094E3A8);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  char v22 = (char *)&v37 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v37 - v24;
  *(void *)char v22 = 0;
  uint64_t v26 = 1;
  v22[8] = 1;
  sub_1001C0734(a2, (uint64_t)&v22[*(int *)(v23 + 44)]);
  sub_1000AEEC8((uint64_t)v22, (uint64_t)v25, &qword_10094E3A8);
  if ((char *)(*(void *)(*(void *)(a2 + *(int *)(type metadata accessor for CardConfigurationView() + 52)) + 16)
              - 1) != v42)
  {
    uint64_t v42 = v13;
    Divider.init()();
    char v27 = v7;
    if (qword_10094A608 != -1) {
      swift_once();
    }
    long long v41 = xmmword_100997670;
    uint64_t v28 = unk_100997688;
    uint64_t v37 = qword_100997680;
    char v29 = static Edge.Set.all.getter();
    uint64_t v30 = (uint64_t)v38;
    uint64_t v31 = v39;
    uint64_t v32 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v38, v27, v40);
    uint64_t v33 = v30 + *(int *)(v8 + 36);
    *(unsigned char *)uint64_t v33 = v29;
    *(_OWORD *)(v33 + 8) = v41;
    *(void *)(v33 + 24) = v37;
    *(void *)(v33 + 32) = v28;
    *(unsigned char *)(v33 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v32);
    sub_1000AEEC8(v30, (uint64_t)v15, &qword_10094E398);
    uint64_t v26 = 0;
    uint64_t v13 = v42;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v15, v26, 1, v8);
  sub_1000AEF2C((uint64_t)v25, (uint64_t)v19, &qword_10094E3A8);
  sub_1000AEF2C((uint64_t)v15, (uint64_t)v13, &qword_10094E3A0);
  uint64_t v34 = v44;
  sub_1000AEF2C((uint64_t)v19, v44, &qword_10094E3A8);
  uint64_t v35 = sub_1000AFA94(&qword_10094E3B0);
  sub_1000AEF2C((uint64_t)v13, v34 + *(int *)(v35 + 48), &qword_10094E3A0);
  sub_10008DB18((uint64_t)v15, &qword_10094E3A0);
  sub_10008DB18((uint64_t)v25, &qword_10094E3A8);
  sub_10008DB18((uint64_t)v13, &qword_10094E3A0);
  return sub_10008DB18((uint64_t)v19, &qword_10094E3A8);
}

uint64_t sub_1001C0734@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v81 = a1;
  uint64_t v87 = a2;
  uint64_t v2 = sub_1000AFA94(&qword_10094E3B8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v86 = sub_1000AFA94(&qword_10094E3C0);
  uint64_t v5 = __chkstk_darwin(v86);
  uint64_t v7 = (uint64_t *)((char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v75 - v8;
  uint64_t v10 = sub_1000AFA94(&qword_10094E3C8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v79 = sub_1000AFA94(&qword_10094E3D0);
  uint64_t v13 = __chkstk_darwin(v79);
  uint64_t v15 = (uint64_t *)((char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  uint64_t v76 = (uint64_t)&v75 - v16;
  uint64_t v82 = sub_1000AFA94(&qword_10094E3D8);
  __chkstk_darwin(v82);
  uint64_t v84 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_1000AFA94(&qword_10094E3E0);
  __chkstk_darwin(v77);
  uint64_t v78 = (uint64_t)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_1000AFA94(&qword_10094E3E8);
  __chkstk_darwin(v83);
  v80 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000AFA94(&qword_10094E3F0);
  __chkstk_darwin(v20 - 8);
  v85 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1000AFA94(&qword_10094E3F8);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (int *)sub_1000AFA94(&qword_10094E400);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (uint64_t *)((char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v75 - v29;
  uint64_t v31 = sub_1000AFA94(&qword_10094CED0);
  __chkstk_darwin(v31 - 8);
  uint64_t v34 = (char *)&v75 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v32 + 16);
  switch(v35)
  {
    case 3:
      v80 = v9;
      uint64_t v42 = v32;
      sub_10008E75C(v32 + 32, (uint64_t)v90);
      sub_10008E75C((uint64_t)v90, (uint64_t)v91);
      if (qword_10094AC78 != -1) {
        swift_once();
      }
      double v43 = *(double *)&qword_100998080;
      uint64_t v44 = type metadata accessor for DynamicTypeSize();
      v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56);
      v45(v34, 1, 1, v44);
      double v46 = sub_10009259C(v90, (uint64_t)v34, v43);
      sub_10008E75C((uint64_t)v90, (uint64_t)v89);
      sub_100092908((uint64_t)v89, (uint64_t)v34, v46);
      sub_10008DB18((uint64_t)v89, &qword_10094CEF0);
      sub_10008DB18((uint64_t)v34, &qword_10094CED0);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v90);
      sub_10008E75C(v42 + 72, (uint64_t)v89);
      sub_10008E75C((uint64_t)v89, (uint64_t)v90);
      double v47 = *(double *)&qword_100998080;
      v45(v34, 1, 1, v44);
      double v48 = sub_10009259C(v89, (uint64_t)v34, v47);
      sub_10008E75C((uint64_t)v89, (uint64_t)v88);
      sub_100092908((uint64_t)v88, (uint64_t)v34, v48);
      sub_10008DB18((uint64_t)v88, &qword_10094CEF0);
      sub_10008DB18((uint64_t)v34, &qword_10094CED0);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v89);
      sub_10008E75C((uint64_t)v91, (uint64_t)v89);
      uint64_t *v7 = swift_getKeyPath();
      sub_1000AFA94(&qword_10094C578);
      swift_storeEnumTagMultiPayload();
      uint64_t v49 = v86;
      sub_10008E75C((uint64_t)v89, (uint64_t)v7 + *(int *)(v86 + 36));
      *((unsigned char *)v7 + *(int *)(v49 + 40)) = 1;
      *uint64_t v4 = static Alignment.center.getter();
      v4[1] = v50;
      uint64_t v51 = sub_1000AFA94(&qword_10094E410);
      sub_1001C204C(v91, v81, v90, v42, (uint64_t)v4 + *(int *)(v51 + 44), v48);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v89);
      sub_1000AEEC8((uint64_t)v4, (uint64_t)v7 + *(int *)(v49 + 44), &qword_10094E3B8);
      uint64_t v52 = (uint64_t)v80;
      sub_1000AEEC8((uint64_t)v7, (uint64_t)v80, &qword_10094E3C0);
      sub_1000AEF2C(v52, v84, &qword_10094E3C0);
      swift_storeEnumTagMultiPayload();
      sub_1001C57D4();
      sub_1000A132C(&qword_10094E430, &qword_10094E3C0);
      uint64_t v53 = v85;
      _ConditionalContent<>.init(storage:)();
      sub_10008DB18(v52, &qword_10094E3C0);
      uint64_t v54 = sub_1000AFA94(&qword_10094E408);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 0, 1, v54);
      uint64_t v55 = (uint64_t)v53;
      goto LABEL_13;
    case 2:
      uint64_t v56 = v32;
      sub_10008E75C(v32 + 32, (uint64_t)v90);
      sub_10008E75C((uint64_t)v90, (uint64_t)v91);
      if (qword_10094AC78 != -1) {
        swift_once();
      }
      double v57 = *(double *)&qword_100998080;
      uint64_t v58 = type metadata accessor for DynamicTypeSize();
      v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56);
      v59(v34, 1, 1, v58);
      double v60 = sub_10009259C(v90, (uint64_t)v34, v57);
      sub_10008E75C((uint64_t)v90, (uint64_t)v89);
      sub_100092908((uint64_t)v89, (uint64_t)v34, v60);
      sub_10008DB18((uint64_t)v89, &qword_10094CEF0);
      sub_10008DB18((uint64_t)v34, &qword_10094CED0);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v90);
      sub_10008E75C(v56 + 72, (uint64_t)v89);
      sub_10008E75C((uint64_t)v89, (uint64_t)v90);
      double v61 = *(double *)&qword_100998080;
      v59(v34, 1, 1, v58);
      double v62 = sub_10009259C(v89, (uint64_t)v34, v61);
      sub_10008E75C((uint64_t)v89, (uint64_t)v88);
      sub_100092908((uint64_t)v88, (uint64_t)v34, v62);
      sub_10008DB18((uint64_t)v88, &qword_10094CEF0);
      sub_10008DB18((uint64_t)v34, &qword_10094CED0);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v89);
      sub_10008E75C((uint64_t)v91, (uint64_t)v89);
      *uint64_t v15 = swift_getKeyPath();
      sub_1000AFA94(&qword_10094C578);
      swift_storeEnumTagMultiPayload();
      uint64_t v63 = v79;
      sub_10008E75C((uint64_t)v89, (uint64_t)v15 + *(int *)(v79 + 36));
      *((unsigned char *)v15 + *(int *)(v63 + 40)) = 1;
      *uint64_t v12 = static Alignment.center.getter();
      v12[1] = v64;
      uint64_t v65 = sub_1000AFA94(&qword_10094E438);
      sub_1001C1670(v91, v81, v90, (uint64_t)v12 + *(int *)(v65 + 44), v62);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v89);
      sub_1000AEEC8((uint64_t)v12, (uint64_t)v15 + *(int *)(v63 + 44), &qword_10094E3C8);
      uint64_t v66 = v76;
      sub_1000AEEC8((uint64_t)v15, v76, &qword_10094E3D0);
      sub_1000AEF2C(v66, v78, &qword_10094E3D0);
      swift_storeEnumTagMultiPayload();
      sub_1000A132C(&qword_10094E420, &qword_10094E400);
      sub_1000A132C(&qword_10094E428, &qword_10094E3D0);
      uint64_t v67 = (uint64_t)v80;
      _ConditionalContent<>.init(storage:)();
      sub_1000AEF2C(v67, v84, &qword_10094E3E8);
      swift_storeEnumTagMultiPayload();
      sub_1001C57D4();
      sub_1000A132C(&qword_10094E430, &qword_10094E3C0);
      uint64_t v68 = v85;
      _ConditionalContent<>.init(storage:)();
      sub_10008DB18(v67, &qword_10094E3E8);
      sub_10008DB18(v66, &qword_10094E3D0);
      uint64_t v69 = sub_1000AFA94(&qword_10094E408);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 0, 1, v69);
      uint64_t v55 = (uint64_t)v68;
LABEL_13:
      sub_1000AEEC8(v55, v87, &qword_10094E3F0);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v90);
      return _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v91);
    case 1:
      sub_10008E75C(v32 + 32, (uint64_t)v90);
      sub_10008E75C((uint64_t)v90, (uint64_t)v91);
      if (qword_10094AC78 != -1) {
        swift_once();
      }
      double v36 = *(double *)&qword_100998080;
      uint64_t v37 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v34, 1, 1, v37);
      double v38 = sub_10009259C(v90, (uint64_t)v34, v36);
      sub_10008E75C((uint64_t)v90, (uint64_t)v89);
      sub_100092908((uint64_t)v89, (uint64_t)v34, v38);
      sub_10008DB18((uint64_t)v89, &qword_10094CEF0);
      sub_10008DB18((uint64_t)v34, &qword_10094CED0);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v90);
      sub_10008E75C((uint64_t)v91, (uint64_t)v90);
      *uint64_t v28 = swift_getKeyPath();
      sub_1000AFA94(&qword_10094C578);
      swift_storeEnumTagMultiPayload();
      sub_10008E75C((uint64_t)v90, (uint64_t)v28 + v25[9]);
      *((unsigned char *)v28 + v25[10]) = 0;
      sub_1001C37C8(v91, v81, 0, (uint64_t)v24);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v90);
      sub_1000AEEC8((uint64_t)v24, (uint64_t)v28 + v25[11], &qword_10094E3F8);
      sub_1000AEEC8((uint64_t)v28, (uint64_t)v30, &qword_10094E400);
      sub_1000AEF2C((uint64_t)v30, v78, &qword_10094E400);
      swift_storeEnumTagMultiPayload();
      sub_1000A132C(&qword_10094E420, &qword_10094E400);
      sub_1000A132C(&qword_10094E428, &qword_10094E3D0);
      uint64_t v39 = (uint64_t)v80;
      _ConditionalContent<>.init(storage:)();
      sub_1000AEF2C(v39, v84, &qword_10094E3E8);
      swift_storeEnumTagMultiPayload();
      sub_1001C57D4();
      sub_1000A132C(&qword_10094E430, &qword_10094E3C0);
      uint64_t v40 = (uint64_t)v85;
      _ConditionalContent<>.init(storage:)();
      sub_10008DB18(v39, &qword_10094E3E8);
      sub_10008DB18((uint64_t)v30, &qword_10094E400);
      uint64_t v41 = sub_1000AFA94(&qword_10094E408);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 0, 1, v41);
      sub_1000AEEC8(v40, v87, &qword_10094E3F0);
      return _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v91);
  }
  uint64_t v71 = sub_1000AFA94(&qword_10094E408);
  long long v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56);
  uint64_t v73 = v71;
  uint64_t v74 = v87;

  return v72(v74, 1, 1, v73);
}

uint64_t sub_1001C1670@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  v80 = a3;
  uint64_t v84 = a4;
  uint64_t v85 = sub_1000AFA94(&qword_10094E468);
  __chkstk_darwin(v85);
  uint64_t v79 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_1000AFA94(&qword_10094E470);
  uint64_t v9 = __chkstk_darwin(v75);
  uint64_t v76 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v78 = (uint64_t)&v61 - v11;
  uint64_t v71 = sub_1000AFA94(&qword_10094E478);
  __chkstk_darwin(v71);
  uint64_t v72 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_1000AFA94(&qword_10094E480);
  uint64_t v13 = __chkstk_darwin(v69);
  uint64_t v74 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v77 = (uint64_t)&v61 - v15;
  uint64_t v81 = sub_1000AFA94(&qword_10094E488);
  __chkstk_darwin(v81);
  uint64_t v83 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_1000AFA94(&qword_10094E490);
  __chkstk_darwin(v82);
  uint64_t v73 = (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_1000AFA94(&qword_10094E498);
  __chkstk_darwin(v65);
  uint64_t v66 = (uint64_t)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_1000AFA94(&qword_10094E4A0);
  uint64_t v19 = __chkstk_darwin(v64);
  uint64_t v67 = (uint64_t)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v70 = (uint64_t)&v61 - v21;
  uint64_t v22 = sub_1000AFA94(&qword_10094E3F8);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_1000AFA94(&qword_10094E4A8);
  uint64_t v25 = __chkstk_darwin(v62);
  uint64_t v63 = (uint64_t)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v68 = (uint64_t)&v61 - v27;
  uint64_t v28 = type metadata accessor for DynamicTypeSize();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v61 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = a1[3];
  uint64_t v32 = a1[4];
  sub_10007E4EC(a1, v33);
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v33, v32);
  uint64_t v36 = v35;
  int v38 = v37;
  uint64_t v39 = a2;
  sub_100092088((uint64_t)v31);
  LODWORD(a2) = sub_100092DA4((uint64_t)v31, v34, v36, v38);
  sub_1000917F8(v34, v36, v38);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  sub_1001C37C8(a1, v39, 0, (uint64_t)v24);
  if (a2 == 2)
  {
    uint64_t v40 = v63;
    sub_1000AEF2C((uint64_t)v24, v63, &qword_10094E3F8);
    *(void *)(v40 + *(int *)(v62 + 36)) = 0x3FF0000000000000;
    sub_10008DB18((uint64_t)v24, &qword_10094E3F8);
    uint64_t v41 = v68;
    sub_1000AEEC8(v40, v68, &qword_10094E4A8);
    sub_1001C37C8(v80, v39, 1, (uint64_t)v24);
    uint64_t v42 = v66;
    sub_1000AEF2C((uint64_t)v24, v66, &qword_10094E3F8);
    *(void *)(v42 + *(int *)(v65 + 36)) = 0x3FE6666666666666;
    sub_10008DB18((uint64_t)v24, &qword_10094E3F8);
    uint64_t v43 = v67;
    sub_1000AEF2C(v42, v67, &qword_10094E498);
    *(_OWORD *)(v43 + *(int *)(v64 + 36)) = xmmword_100752FD0;
    sub_10008DB18(v42, &qword_10094E498);
    uint64_t v44 = v70;
    sub_1000AEEC8(v43, v70, &qword_10094E4A0);
    sub_1000AEF2C(v41, v40, &qword_10094E4A8);
    sub_1000AEF2C(v44, v43, &qword_10094E4A0);
    uint64_t v45 = v73;
    sub_1000AEF2C(v40, v73, &qword_10094E4A8);
    uint64_t v46 = sub_1000AFA94(&qword_10094E4C8);
    sub_1000AEF2C(v43, v45 + *(int *)(v46 + 48), &qword_10094E4A0);
    sub_10008DB18(v43, &qword_10094E4A0);
    sub_10008DB18(v40, &qword_10094E4A8);
    sub_1000AEF2C(v45, v83, &qword_10094E490);
    swift_storeEnumTagMultiPayload();
    sub_1000A132C(&qword_10094E4B8, &qword_10094E490);
    sub_1000A132C(&qword_10094E4C0, &qword_10094E468);
    _ConditionalContent<>.init(storage:)();
    sub_10008DB18(v45, &qword_10094E490);
    sub_10008DB18(v44, &qword_10094E4A0);
    uint64_t v47 = v41;
    double v48 = &qword_10094E4A8;
  }
  else
  {
    double v49 = a5 * -0.7 * 0.25;
    uint64_t v50 = v72;
    sub_1000AEF2C((uint64_t)v24, v72, &qword_10094E3F8);
    uint64_t v51 = v71;
    uint64_t v52 = v50 + *(int *)(v71 + 36);
    *(double *)uint64_t v52 = v49;
    *(void *)(v52 + 8) = 0;
    sub_10008DB18((uint64_t)v24, &qword_10094E3F8);
    uint64_t v53 = v74;
    sub_1000AEF2C(v50, v74, &qword_10094E478);
    *(void *)(v53 + *(int *)(v69 + 36)) = 0x3FF0000000000000;
    sub_10008DB18(v50, &qword_10094E478);
    uint64_t v54 = v77;
    sub_1000AEEC8(v53, v77, &qword_10094E480);
    sub_1001C37C8(v80, v39, 1, (uint64_t)v24);
    sub_1000AEF2C((uint64_t)v24, v50, &qword_10094E3F8);
    uint64_t v55 = v50 + *(int *)(v51 + 36);
    *(double *)uint64_t v55 = a5 * 0.5 + v49;
    *(void *)(v55 + 8) = 0;
    sub_10008DB18((uint64_t)v24, &qword_10094E3F8);
    uint64_t v56 = v76;
    sub_1000AEF2C(v50, v76, &qword_10094E478);
    *(void *)(v56 + *(int *)(v75 + 36)) = 0x3FE3333333333333;
    sub_10008DB18(v50, &qword_10094E478);
    uint64_t v57 = v78;
    sub_1000AEEC8(v56, v78, &qword_10094E470);
    sub_1000AEF2C(v54, v53, &qword_10094E480);
    sub_1000AEF2C(v57, v56, &qword_10094E470);
    uint64_t v58 = v79;
    sub_1000AEF2C(v53, v79, &qword_10094E480);
    uint64_t v59 = sub_1000AFA94(&qword_10094E4B0);
    sub_1000AEF2C(v56, v58 + *(int *)(v59 + 48), &qword_10094E470);
    sub_10008DB18(v56, &qword_10094E470);
    sub_10008DB18(v53, &qword_10094E480);
    sub_1000AEF2C(v58, v83, &qword_10094E468);
    swift_storeEnumTagMultiPayload();
    sub_1000A132C(&qword_10094E4B8, &qword_10094E490);
    sub_1000A132C(&qword_10094E4C0, &qword_10094E468);
    _ConditionalContent<>.init(storage:)();
    sub_10008DB18(v58, &qword_10094E468);
    sub_10008DB18(v57, &qword_10094E470);
    uint64_t v47 = v54;
    double v48 = &qword_10094E480;
  }
  return sub_10008DB18(v47, v48);
}

uint64_t sub_1001C204C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v90 = a4;
  v100 = a3;
  uint64_t v95 = a5;
  uint64_t v97 = sub_1000AFA94(&qword_10094E4D0);
  __chkstk_darwin(v97);
  uint64_t v84 = (uint64_t)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_1000AFA94(&qword_10094E478);
  __chkstk_darwin(v79);
  uint64_t v80 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_1000AFA94(&qword_10094E470);
  uint64_t v11 = __chkstk_darwin(v78);
  uint64_t v82 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v81 = (uint64_t)&v76 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v83 = (uint64_t)&v76 - v16;
  __chkstk_darwin(v15);
  uint64_t v92 = (uint64_t)&v76 - v17;
  uint64_t v18 = sub_1000AFA94(&qword_10094CED0);
  __chkstk_darwin(v18 - 8);
  uint64_t v77 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_1000AFA94(&qword_10094E4D8);
  __chkstk_darwin(v94);
  uint64_t v93 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_1000AFA94(&qword_10094E490);
  __chkstk_darwin(v96);
  uint64_t v91 = (uint64_t)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_1000AFA94(&qword_10094E498);
  __chkstk_darwin(v86);
  uint64_t v87 = (uint64_t)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_1000AFA94(&qword_10094E4A0);
  uint64_t v23 = __chkstk_darwin(v85);
  uint64_t v88 = (uint64_t)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v89 = (uint64_t)&v76 - v25;
  uint64_t v26 = sub_1000AFA94(&qword_10094E3F8);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_1000AFA94(&qword_10094E4A8);
  uint64_t v29 = __chkstk_darwin(v98);
  uint64_t v99 = (uint64_t)&v76 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v101 = (uint64_t)&v76 - v31;
  uint64_t v32 = type metadata accessor for DynamicTypeSize();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v76 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1[3];
  uint64_t v37 = a1[4];
  int v38 = a1;
  sub_10007E4EC(a1, v36);
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
  uint64_t v41 = v40;
  int v43 = v42;
  sub_100092088((uint64_t)v35);
  LODWORD(a1) = sub_100092DA4((uint64_t)v35, v39, v41, v43);
  sub_1000917F8(v39, v41, v43);
  uint64_t v44 = v32;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  if (a1 == 2)
  {
    sub_1001C37C8(v38, a2, 0, (uint64_t)v28);
    uint64_t v45 = v99;
    sub_1000AEF2C((uint64_t)v28, v99, &qword_10094E3F8);
    *(void *)(v45 + *(int *)(v98 + 36)) = 0x3FF0000000000000;
    sub_10008DB18((uint64_t)v28, &qword_10094E3F8);
    uint64_t v46 = v101;
    sub_1000AEEC8(v45, v101, &qword_10094E4A8);
    sub_1001C37C8(v100, a2, 1, (uint64_t)v28);
    uint64_t v47 = v87;
    sub_1000AEF2C((uint64_t)v28, v87, &qword_10094E3F8);
    *(void *)(v47 + *(int *)(v86 + 36)) = 0x3FE6666666666666;
    sub_10008DB18((uint64_t)v28, &qword_10094E3F8);
    uint64_t v48 = v88;
    sub_1000AEF2C(v47, v88, &qword_10094E498);
    *(_OWORD *)(v48 + *(int *)(v85 + 36)) = xmmword_100752FD0;
    sub_10008DB18(v47, &qword_10094E498);
    uint64_t v49 = v89;
    sub_1000AEEC8(v48, v89, &qword_10094E4A0);
    sub_1000AEF2C(v46, v45, &qword_10094E4A8);
    sub_1000AEF2C(v49, v48, &qword_10094E4A0);
    uint64_t v50 = v91;
    sub_1000AEF2C(v45, v91, &qword_10094E4A8);
    uint64_t v51 = sub_1000AFA94(&qword_10094E4C8);
    sub_1000AEF2C(v48, v50 + *(int *)(v51 + 48), &qword_10094E4A0);
    sub_10008DB18(v48, &qword_10094E4A0);
    sub_10008DB18(v45, &qword_10094E4A8);
    sub_1000AEF2C(v50, v93, &qword_10094E490);
    swift_storeEnumTagMultiPayload();
    sub_1000A132C(&qword_10094E4B8, &qword_10094E490);
    sub_1000A132C(&qword_10094E4E8, &qword_10094E4D0);
    _ConditionalContent<>.init(storage:)();
    sub_10008DB18(v50, &qword_10094E490);
    sub_10008DB18(v49, &qword_10094E4A0);
    return sub_10008DB18(v46, &qword_10094E4A8);
  }
  uint64_t v54 = v98;
  uint64_t v53 = v99;
  uint64_t v55 = v38;
  uint64_t v56 = a2;
  uint64_t v58 = v100;
  uint64_t v57 = v101;
  if (*(void *)(v90 + 16) < 3uLL)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_10008E75C(v90 + 112, (uint64_t)v103);
  sub_10008E75C((uint64_t)v103, (uint64_t)&v104);
  if (qword_10094AC78 != -1) {
LABEL_7:
  }
    swift_once();
  double v59 = *(double *)&qword_100998080;
  uint64_t v60 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v77, 1, 1, v44);
  double v61 = sub_10009259C(v103, v60, v59);
  sub_10008E75C((uint64_t)v103, (uint64_t)v102);
  sub_100092908((uint64_t)v102, v60, v61);
  sub_10008DB18((uint64_t)v102, &qword_10094CEF0);
  sub_10008DB18(v60, &qword_10094CED0);
  _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v103);
  uint64_t v62 = v56;
  sub_1001C37C8(v55, v56, 0, (uint64_t)v28);
  uint64_t v63 = v53;
  sub_1000AEF2C((uint64_t)v28, v53, &qword_10094E3F8);
  *(void *)(v53 + *(int *)(v54 + 36)) = 0x3FF0000000000000;
  sub_10008DB18((uint64_t)v28, &qword_10094E3F8);
  sub_1000AEEC8(v53, v57, &qword_10094E4A8);
  sub_1001C37C8(v58, v62, 1, (uint64_t)v28);
  uint64_t v64 = v80;
  sub_1000AEF2C((uint64_t)v28, v80, &qword_10094E3F8);
  uint64_t v65 = v79;
  uint64_t v66 = v64 + *(int *)(v79 + 36);
  *(double *)uint64_t v66 = a6 * -0.5;
  *(void *)(v66 + 8) = 0;
  sub_10008DB18((uint64_t)v28, &qword_10094E3F8);
  uint64_t v67 = v83;
  sub_1000AEF2C(v64, v83, &qword_10094E478);
  uint64_t v68 = v78;
  *(void *)(v67 + *(int *)(v78 + 36)) = 0x3FE3333333333333;
  sub_10008DB18(v64, &qword_10094E478);
  uint64_t v69 = v92;
  sub_1000AEEC8(v67, v92, &qword_10094E470);
  sub_1001C37C8(&v104, v62, 1, (uint64_t)v28);
  sub_1000AEF2C((uint64_t)v28, v64, &qword_10094E3F8);
  uint64_t v70 = v64 + *(int *)(v65 + 36);
  *(double *)uint64_t v70 = v61 * 0.5;
  *(void *)(v70 + 8) = 0;
  sub_10008DB18((uint64_t)v28, &qword_10094E3F8);
  uint64_t v71 = v81;
  sub_1000AEF2C(v64, v81, &qword_10094E478);
  *(void *)(v71 + *(int *)(v68 + 36)) = 0x3FE3333333333333;
  sub_10008DB18(v64, &qword_10094E478);
  sub_1000AEEC8(v71, v67, &qword_10094E470);
  uint64_t v72 = v101;
  sub_1000AEF2C(v101, v63, &qword_10094E4A8);
  sub_1000AEF2C(v69, v71, &qword_10094E470);
  uint64_t v73 = v82;
  sub_1000AEF2C(v67, v82, &qword_10094E470);
  uint64_t v74 = v84;
  sub_1000AEF2C(v63, v84, &qword_10094E4A8);
  uint64_t v75 = sub_1000AFA94(&qword_10094E4E0);
  sub_1000AEF2C(v71, v74 + *(int *)(v75 + 48), &qword_10094E470);
  sub_1000AEF2C(v73, v74 + *(int *)(v75 + 64), &qword_10094E470);
  sub_10008DB18(v73, &qword_10094E470);
  sub_10008DB18(v71, &qword_10094E470);
  sub_10008DB18(v63, &qword_10094E4A8);
  sub_1000AEF2C(v74, v93, &qword_10094E4D0);
  swift_storeEnumTagMultiPayload();
  sub_1000A132C(&qword_10094E4B8, &qword_10094E490);
  sub_1000A132C(&qword_10094E4E8, &qword_10094E4D0);
  _ConditionalContent<>.init(storage:)();
  sub_10008DB18(v74, &qword_10094E4D0);
  sub_10008DB18(v67, &qword_10094E470);
  sub_10008DB18(v92, &qword_10094E470);
  sub_10008DB18(v72, &qword_10094E4A8);
  return _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)&v104);
}

uint64_t sub_1001C2C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v16[1] = a2;
  v16[0] = sub_1000AFA94(&qword_10094E2A8);
  __chkstk_darwin(v16[0]);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000AFA94(&qword_10094E2B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = sub_1000AFA94(&qword_10094E2B8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.confirmationAction.getter();
  v16[8] = a1;
  sub_1000AFA94(&qword_10094E2C0);
  sub_1001C52BC();
  ToolbarItem<>.init(placement:content:)();
  static ToolbarItemPlacement.principal.getter();
  v16[4] = a1;
  sub_1000AFA94(&qword_10094E310);
  sub_1000A0724();
  ToolbarItem<>.init(placement:content:)();
  uint64_t v14 = &v4[*(int *)(v16[0] + 48)];
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v4, v13, v10);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v14, v8, v5);
  TupleToolbarContent.init(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1001C2F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = sub_1000AFA94(&qword_10094E320);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CardConfigurationView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = sub_1000AFA94(&qword_10094E2E8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000AFA94(&qword_10094E2D8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001C5894(a1, (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CardConfigurationView);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  sub_1001C51D0((uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  Button.init(action:label:)();
  static SymbolRenderingMode.hierarchical.getter();
  uint64_t v19 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 0, 1, v19);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = (uint64_t *)&v16[*(int *)(v14 + 44)];
  uint64_t v22 = sub_1000AFA94(&qword_10094E2F8);
  sub_1000AEF2C((uint64_t)v5, (uint64_t)v21 + *(int *)(v22 + 28), &qword_10094E320);
  *uint64_t v21 = KeyPath;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v12, v9);
  sub_10008DB18((uint64_t)v5, &qword_10094E320);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  id v23 = [self secondaryLabelColor];
  uint64_t v24 = Color.init(_:)();
  uint64_t v25 = v28;
  sub_1000AEF2C((uint64_t)v16, v28, &qword_10094E2D8);
  *(void *)(v25 + *(int *)(sub_1000AFA94(&qword_10094E2C0) + 36)) = v24;
  return sub_10008DB18((uint64_t)v16, &qword_10094E2D8);
}

uint64_t sub_1001C3324()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CardConfigurationView();
  sub_1004E7580((uint64_t)v3);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1001C3408@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_1001C3448@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v7 = Text.fontWeight(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  sub_1000A06C0(v2, v4, v6);
  swift_bridgeObjectRelease();
  type metadata accessor for CardConfigurationView();
  sub_1000AFA94(&qword_10094DEE0);
  uint64_t result = State.wrappedValue.getter();
  double v15 = 0.0;
  if (v16) {
    double v15 = 1.0;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = v15;
  return result;
}

uint64_t sub_1001C3590@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v5 = *a1;
  uint64_t v6 = type metadata accessor for CardConfigurationView();
  uint64_t v7 = *(void *)(a2 + *(int *)(v6 + 48));
  if (*(void *)(v7 + 16) && (uint64_t v8 = (int *)v6, v9 = sub_1000D5C14(v5), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    uint64_t v12 = *(void **)(a2 + v8[8]);
    uint64_t v13 = *(void **)(a2 + v8[7]);
    sub_1002A30DC(v5, (uint64_t)v20, v11, 0, (uint64_t)v12, (uint64_t)v13, *(void *)(a2 + v8[10]), *(unsigned char *)(a2 + v8[10] + 8), a3, *(void *)(a2 + v8[11]), *(unsigned char *)(a2 + v8[11] + 8), *(void *)(a2 + v8[14]), *(void *)(a2 + v8[14] + 8));
    uint64_t v14 = type metadata accessor for CardTypeConfigurationRoomView();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a3, 0, 1, v14);
    swift_bridgeObjectRetain();
    id v15 = v12;
    id v16 = v13;
    return swift_retain();
  }
  else
  {
    uint64_t v18 = type metadata accessor for CardTypeConfigurationRoomView();
    uint64_t v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    return v19(a3, 1, 1, v18);
  }
}

double sub_1001C3740@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + *(int *)(type metadata accessor for CardConfigurationView() + 48));
  if (*(void *)(v5 + 16)
    && (unint64_t v6 = sub_1000D5C14(*a1), (v7 & 1) != 0)
    && (uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6), *(void *)(v8 + 16)))
  {
    sub_10008E75C(v8 + 32, a3);
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1001C37C8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v65 = a3;
  uint64_t v66 = a4;
  uint64_t v67 = a2;
  uint64_t v61 = type metadata accessor for DynamicTypeSize();
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v59 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for RoundedRectangle();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  unint64_t v9 = (_OWORD *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for DashboardCardView();
  uint64_t v11 = (int *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_1000AFA94(&qword_10094E440);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000AFA94(&qword_10094E448);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1000AFA94(&qword_10094E450);
  uint64_t v23 = v22 - 8;
  __chkstk_darwin(v22);
  uint64_t v62 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_1000AFA94(&qword_10094E458);
  __chkstk_darwin(v63);
  uint64_t v64 = (uint64_t)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a1;
  sub_10008E75C((uint64_t)a1, (uint64_t)v70);
  uint64_t v26 = type metadata accessor for CardConfigurationView();
  uint64_t v69 = 0;
  memset(v68, 0, sizeof(v68));
  uint64_t v27 = *(void *)(v67 + *(int *)(v26 + 36));
  *uint64_t v13 = swift_getKeyPath();
  sub_1000AFA94(&qword_10094C578);
  swift_storeEnumTagMultiPayload();
  sub_100093E60(v70, (uint64_t)v13 + v11[7]);
  sub_1000AEEC8((uint64_t)v68, (uint64_t)v13 + v11[8], &qword_10094C750);
  *(uint64_t *)((char *)v13 + v11[9]) = v27;
  *((unsigned char *)v13 + v11[10]) = 1;
  *((unsigned char *)v13 + v11[11]) = 0;
  sub_1001C5894((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DashboardCardView);
  v17[*(int *)(v15 + 44)] = 0;
  swift_retain();
  sub_1001C58FC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for DashboardCardView);
  uint64_t v28 = (char *)v9 + *(int *)(v7 + 28);
  uint64_t v29 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v30 = type metadata accessor for RoundedCornerStyle();
  uint64_t v31 = v29;
  uint64_t v32 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v31, v30);
  __asm { FMOV            V0.2D, #20.0 }
  *unint64_t v9 = _Q0;
  uint64_t v38 = (uint64_t)&v21[*(int *)(v19 + 44)];
  sub_1001C5894((uint64_t)v9, v38, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v38 + *(int *)(sub_1000AFA94(&qword_10094E460) + 36)) = 256;
  sub_1000AEF2C((uint64_t)v17, (uint64_t)v21, &qword_10094E440);
  sub_1001C58FC((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10008DB18((uint64_t)v17, &qword_10094E440);
  static Color.black.getter();
  uint64_t v39 = Color.opacity(_:)();
  swift_release();
  sub_1000AEF2C((uint64_t)v21, v32, &qword_10094E448);
  uint64_t v40 = v32 + *(int *)(v23 + 44);
  *(void *)uint64_t v40 = v39;
  *(_OWORD *)(v40 + 8) = xmmword_100752FE0;
  *(void *)(v40 + 24) = 0x4034000000000000;
  sub_10008DB18((uint64_t)v21, &qword_10094E448);
  double v41 = 1.0;
  if (v65)
  {
    uint64_t v42 = v58[3];
    uint64_t v43 = v58[4];
    sub_10007E4EC(v58, v42);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43);
    uint64_t v46 = v45;
    int v48 = v47;
    uint64_t v49 = v59;
    sub_100092088(v59);
    int v50 = sub_100092DA4(v49, v44, v46, v48);
    sub_1000917F8(v44, v46, v48);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v49, v61);
    if (v50 == 2) {
      double v41 = 0.9;
    }
    else {
      double v41 = 0.7;
    }
  }
  static UnitPoint.center.getter();
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v55 = v64;
  sub_1000AEF2C(v32, v64, &qword_10094E450);
  uint64_t v56 = v55 + *(int *)(v63 + 36);
  *(double *)uint64_t v56 = v41;
  *(double *)(v56 + 8) = v41;
  *(void *)(v56 + 16) = v52;
  *(void *)(v56 + 24) = v54;
  sub_10008DB18(v32, &qword_10094E450);
  return sub_1000AEEC8(v55, v66, &qword_10094E458);
}

uint64_t sub_1001C3DD0()
{
  return NavigationStack.init<>(root:)();
}

uint64_t type metadata accessor for CardConfigurationView()
{
  uint64_t result = qword_10094E1E0;
  if (!qword_10094E1E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned __int8 *sub_1001C3FE0@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

double sub_1001C3FEC@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C3740(a1, *(void *)(v2 + 16), a2);
}

uint64_t *sub_1001C4008(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_1000AFA94(&qword_10094C578);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (uint64_t *)((char *)v4 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_1000AFA94(&qword_10094DFC8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v4 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *uint64_t v15 = *v16;
    *((void *)v15 + 1) = *((void *)v16 + 1);
    unint64_t v17 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v17;
    uint64_t v18 = a3[8];
    uint64_t v19 = a3[9];
    uint64_t v20 = *(void **)((char *)a2 + v18);
    *(uint64_t *)((char *)v4 + v18) = (uint64_t)v20;
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    uint64_t v21 = a3[10];
    uint64_t v22 = a3[11];
    uint64_t v23 = (char *)v4 + v21;
    uint64_t v24 = (char *)a2 + v21;
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    uint64_t v25 = (char *)v4 + v22;
    uint64_t v26 = (char *)a2 + v22;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = a3[13];
    *(uint64_t *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(uint64_t *)((char *)v4 + v27) = *(uint64_t *)((char *)a2 + v27);
    uint64_t v28 = a3[14];
    uint64_t v29 = (uint64_t *)((char *)v4 + v28);
    uint64_t v30 = (uint64_t *)((char *)a2 + v28);
    uint64_t v31 = v30[1];
    void *v29 = *v30;
    v29[1] = v31;
    swift_retain();
    id v32 = v17;
    id v33 = v20;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1001C427C(uint64_t a1, int *a2)
{
  sub_1000AFA94(&qword_10094C578);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  sub_1000AFA94(&qword_10094DFC8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *sub_1001C43E0(void *a1, void *a2, int *a3)
{
  sub_1000AFA94(&qword_10094C578);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  sub_1000AFA94(&qword_10094DFC8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *uint64_t v13 = *v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  uint64_t v15 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v15;
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = *(void **)((char *)a2 + v16);
  *(void *)((char *)a1 + v16) = v18;
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  uint64_t v19 = a3[10];
  uint64_t v20 = a3[11];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = (char *)a1 + v20;
  uint64_t v24 = (char *)a2 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  uint64_t v26 = a3[14];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  swift_retain();
  id v30 = v15;
  id v31 = v18;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1001C4608(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10008DB18((uint64_t)a1, &qword_10094C578);
    sub_1000AFA94(&qword_10094C578);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    sub_10008DB18((uint64_t)a1 + v7, &qword_10094DFC8);
    sub_1000AFA94(&qword_10094DFC8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *uint64_t v12 = *v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_retain();
  swift_release();
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void **)((char *)a2 + v14);
  uint64_t v16 = *(void **)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = v15;
  id v17 = v15;

  uint64_t v18 = a3[8];
  uint64_t v19 = *(void **)((char *)a2 + v18);
  uint64_t v20 = *(void **)((char *)a1 + v18);
  *(void *)((char *)a1 + v18) = v19;
  id v21 = v19;

  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_retain();
  swift_release();
  uint64_t v22 = a3[10];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[14];
  id v31 = (void *)((char *)a1 + v30);
  id v32 = (void *)((char *)a2 + v30);
  uint64_t v33 = v32[1];
  *id v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_release();
  return a1;
}

char *sub_1001C489C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000AFA94(&qword_10094C578);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1000AFA94(&qword_10094DFC8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for DismissAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  uint64_t v14 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  uint64_t v15 = a3[10];
  uint64_t v16 = a3[11];
  id v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(void *)id v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  return a1;
}

char *sub_1001C4A88(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10008DB18((uint64_t)a1, &qword_10094C578);
    uint64_t v6 = sub_1000AFA94(&qword_10094C578);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    sub_10008DB18((uint64_t)&a1[v8], &qword_10094DFC8);
    uint64_t v11 = sub_1000AFA94(&qword_10094DFC8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  char *v14 = *v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_release();
  uint64_t v16 = a3[7];
  id v17 = *(void **)&a1[v16];
  *(void *)&a1[v16] = *(void *)&a2[v16];

  uint64_t v18 = a3[8];
  uint64_t v19 = *(void **)&a1[v18];
  *(void *)&a1[v18] = *(void *)&a2[v18];

  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_release();
  uint64_t v20 = a3[10];
  uint64_t v21 = a3[11];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  v22[8] = v23[8];
  *(void *)uint64_t v22 = *(void *)v23;
  uint64_t v24 = &a1[v21];
  uint64_t v25 = &a2[v21];
  v24[8] = v25[8];
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  swift_release();
  return a1;
}

uint64_t sub_1001C4CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C4D08);
}

uint64_t sub_1001C4D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000AFA94(&qword_10094C590);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_1000AFA94(&qword_10094DFD0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1001C4E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C4E38);
}

uint64_t sub_1001C4E38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000AFA94(&qword_10094C590);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_1000AFA94(&qword_10094DFD0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1001C4F50()
{
  sub_1000DD158(319, (unint64_t *)&qword_10094C600, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  if (v0 <= 0x3F)
  {
    sub_1000DD158(319, (unint64_t *)&qword_10094E040, (void (*)(uint64_t))&type metadata accessor for DismissAction);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1001C50A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001C50BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001BF54C(*(void *)(v1 + 16), a1);
}

unint64_t sub_1001C50C4()
{
  unint64_t result = qword_10094E280;
  if (!qword_10094E280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E280);
  }
  return result;
}

unint64_t sub_1001C5118()
{
  unint64_t result = qword_10094E288;
  if (!qword_10094E288)
  {
    sub_1000A1370(&qword_10094E250);
    sub_1001C5638(&qword_10094E290, (void (*)(uint64_t))type metadata accessor for CardTypeConfigurationRoomView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E288);
  }
  return result;
}

uint64_t sub_1001C51BC@<X0>(char *a1@<X8>)
{
  return sub_1001BFAB8(*(void *)(v1 + 16), a1);
}

uint64_t sub_1001C51C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C2C90(*(void *)(v1 + 16), a1);
}

uint64_t sub_1001C51D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CardConfigurationView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C5234@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for CardConfigurationView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1001C3590(a1, v6, a2);
}

uint64_t sub_1001C52B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C2F8C(*(void *)(v1 + 16), a1);
}

unint64_t sub_1001C52BC()
{
  unint64_t result = qword_10094E2C8;
  if (!qword_10094E2C8)
  {
    sub_1000A1370(&qword_10094E2C0);
    sub_1001C535C();
    sub_1000A132C(&qword_10094E300, &qword_10094E308);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E2C8);
  }
  return result;
}

unint64_t sub_1001C535C()
{
  unint64_t result = qword_10094E2D0;
  if (!qword_10094E2D0)
  {
    sub_1000A1370(&qword_10094E2D8);
    sub_1000A132C(&qword_10094E2E0, &qword_10094E2E8);
    sub_1000A132C(&qword_10094E2F0, &qword_10094E2F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E2D0);
  }
  return result;
}

uint64_t sub_1001C5420@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C3448(a1);
}

uint64_t sub_1001C542C()
{
  type metadata accessor for CardConfigurationView();

  return sub_1001C3324();
}

unint64_t sub_1001C549C()
{
  unint64_t result = qword_10094E348;
  if (!qword_10094E348)
  {
    sub_1000A1370(&qword_10094E340);
    sub_1001AD3E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E348);
  }
  return result;
}

uint64_t sub_1001C551C()
{
  type metadata accessor for CardConfigurationView();

  return sub_1001C01F8();
}

unint64_t sub_1001C558C()
{
  unint64_t result = qword_10094E350;
  if (!qword_10094E350)
  {
    sub_1000A1370(&qword_10094E330);
    sub_1001C549C();
    sub_1001C5638((unint64_t *)&qword_10094C0F8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E350);
  }
  return result;
}

uint64_t sub_1001C5638(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001C5684@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for CardConfigurationView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1001C0264(a1, v6, a2);
}

unint64_t sub_1001C5704()
{
  unint64_t result = qword_10094E370;
  if (!qword_10094E370)
  {
    sub_1000A1370(&qword_10094E360);
    sub_1001C5780();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E370);
  }
  return result;
}

unint64_t sub_1001C5780()
{
  unint64_t result = qword_10094E378;
  if (!qword_10094E378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E378);
  }
  return result;
}

unint64_t sub_1001C57D4()
{
  unint64_t result = qword_10094E418;
  if (!qword_10094E418)
  {
    sub_1000A1370(&qword_10094E3E8);
    sub_1000A132C(&qword_10094E420, &qword_10094E400);
    sub_1000A132C(&qword_10094E428, &qword_10094E3D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E418);
  }
  return result;
}

uint64_t sub_1001C5894(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001C58FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001C595C()
{
  return sub_1000A132C(&qword_10094E4F0, &qword_10094E4F8);
}

uint64_t sub_1001C5998(double a1, double a2)
{
  id v5 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:a1, a2];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  *(double *)(v6 + 24) = a1;
  *(double *)(v6 + 32) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1001C5C08;
  *(void *)(v7 + 24) = v6;
  v13[4] = sub_1001C5C34;
  v13[5] = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100346D60;
  v13[3] = &unk_1008BA168;
  uint64_t v8 = _Block_copy(v13);
  id v9 = v2;
  swift_retain();
  swift_release();
  id v10 = [v5 imageWithActions:v8];

  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    id v12 = [v10 imageWithRenderingMode:[v9 renderingMode]];
    swift_release();

    return (uint64_t)v12;
  }
  return result;
}

uint64_t sub_1001C5BD0()
{
  return swift_deallocObject();
}

id sub_1001C5C08()
{
  return [*(id *)(v0 + 16) drawInRect:0.0, 0.0, *(double *)(v0 + 24), *(double *)(v0 + 32)];
}

uint64_t sub_1001C5C24()
{
  return swift_deallocObject();
}

uint64_t sub_1001C5C34(uint64_t a1)
{
  return sub_100346D38(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_1001C5D20()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100751160;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp33AddToYourRingSectionSeparatorView_div];
  id v5 = [v4 topAnchor];
  id v6 = [v1 topAnchor];
  id v7 = [v5 constraintEqualToAnchor:v6];

  *(void *)(v3 + 32) = v7;
  id v8 = [v4 leadingAnchor];
  id v9 = [v1 leadingAnchor];
  id v10 = [v8 constraintEqualToAnchor:v9];

  *(void *)(v3 + 40) = v10;
  id v11 = [v4 trailingAnchor];
  id v12 = [v1 trailingAnchor];
  id v13 = [v11 constraintEqualToAnchor:v12];

  *(void *)(v3 + 48) = v13;
  id v14 = [v4 heightAnchor];
  if (qword_10094AE08 != -1) {
    swift_once();
  }
  id v15 = [v14 constraintEqualToConstant:*(double *)&qword_100998308];

  *(void *)(v3 + 56) = v15;
  specialized Array._endMutation()();
  sub_10007E2D8(0, (unint64_t *)&qword_10094C810);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];
}

id sub_1001C6040()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AddToYourRingSectionSeparatorView();
  return [super dealloc];
}

uint64_t type metadata accessor for AddToYourRingSectionSeparatorView()
{
  return self;
}

uint64_t sub_1001C60A8(uint64_t result)
{
  return result;
}

_UNKNOWN **sub_1001C60B0(char a1)
{
  if ((a1 - 1) > 0xFu) {
    return (_UNKNOWN **)&_swiftEmptyArrayStorage;
  }
  else {
    return off_1008BA220[(char)(a1 - 1)];
  }
}

uint64_t sub_1001C6128(char a1)
{
  return sub_10007CD3C(a1, 24, 0x414E5F4D4F4F525FLL, (void *)0xEA0000000000454DLL);
}

uint64_t sub_1001C6148(char a1)
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_10007CE88(a1);
  uint64_t v10 = v2;
  v3._object = (void *)0x80000001007B7940;
  v3._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  id v4 = [self mainBundle];
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 localizedStringForKey:v5 value:0 table:0];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  return v7;
}

unint64_t sub_1001C6254(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E697270656F6873;
      break;
    case 2:
    case 11:
      unint64_t result = 0x722E657275676966;
      break;
    case 3:
      unint64_t result = 0x6B636F6C63;
      break;
    case 4:
      unint64_t result = 0x622E6E6F73726570;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
    case 17:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x322E6E6F73726570;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 12:
      unint64_t result = 0x722E657275676966;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    case 14:
      unint64_t result = 0xD000000000000010;
      break;
    case 15:
      unint64_t result = 0x682E657275676966;
      break;
    case 16:
      unint64_t result = 0x772E657275676966;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001C6470@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001C725C(*a1);
  *a2 = result;
  return result;
}

void sub_1001C649C(void *a1@<X8>)
{
  *a1 = &off_1008B2FD8;
}

uint64_t sub_1001C64AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *id v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *id v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  id v14 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for WorkoutDurationMetrics();
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        id v17 = (char *)(v14 + 1);
        uint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  void *v14 = v3;

  return specialized Array._endMutation()();
}

uint64_t sub_1001C6798(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_10009569C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[5 * a1 + 4];
  sub_1000AFA94(&qword_10094D218);
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_28;
  }
  if (v17 < 0)
  {
LABEL_30:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v18 = (char *)(v14 + 40);
  uint64_t v19 = (char *)&v5[5 * a2 + 4];
  if ((char *)(v14 + 40) != v19 || v18 >= &v19[40 * v17]) {
    memmove(v18, v19, 40 * v17);
  }
  uint64_t v20 = v5[2];
  BOOL v16 = __OFADD__(v20, v9);
  uint64_t v21 = v20 + v9;
  if (v16)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v5[2] = v21;
LABEL_20:
  sub_10008E75C(a3, v14);

  return sub_1001C7940(a3);
}

uint64_t sub_1001C694C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  id v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    id v4 = sub_1000D1C2C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_29;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    BOOL v16 = (char *)&v4[3 * a2 + 4];
    size_t v17 = 24 * v15;
    if (24 * a1 < 24 * a2 || (&v4[3 * a1 + 4] < (void *)&v16[v17] ? (BOOL v18 = a1 == a2) : (BOOL v18 = 0), !v18)) {
      uint64_t result = (uint64_t)memmove(&v4[3 * a1 + 4], v16, v17);
    }
    uint64_t v19 = v4[2];
    BOOL v14 = __OFADD__(v19, v8);
    uint64_t v20 = v19 - v7;
    if (!v14)
    {
      v4[2] = v20;
LABEL_23:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001C6AD8(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  id v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= v4[3] >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)sub_1001E71C4(result, v11, 1, v4);
    id v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = v4[2];
  size_t v13 = v12 - a2;
  if (__OFSUB__(v12, a2)) {
    goto LABEL_27;
  }
  if ((v13 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)v4 + a1 + 32;
    BOOL v14 = (char *)v4 + a2 + 32;
    if (a1 != a2 || result >= &v14[v13]) {
      uint64_t result = (char *)memmove(result, v14, v13);
    }
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, v8);
    uint64_t v17 = v15 + v8;
    if (!v16)
    {
      v4[2] = v17;
LABEL_21:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C6C30(uint64_t result)
{
  char v1 = result;
  uint64_t v2 = 18;
  uint64_t v3 = _swiftEmptyArrayStorage;
  id v4 = &byte_1008B2FF8;
  do
  {
    int v8 = *v4++;
    int v7 = v8;
    if (v8 != 8 && v7 != 5)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      v57[0] = v3;
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1001C8FC4(0, v3[2] + 1, 1);
        uint64_t v3 = (void *)v57[0];
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        uint64_t result = sub_1001C8FC4(v5 > 1, v6 + 1, 1);
        uint64_t v3 = (void *)v57[0];
      }
      v3[2] = v6 + 1;
      *((unsigned char *)v3 + v6 + 32) = v7;
    }
    --v2;
  }
  while (v2);
  uint64_t v58 = v3;
  if ((v1 & 2) == 0)
  {
    unint64_t v10 = v3[2];
    if (v10)
    {
      if (*((unsigned char *)v3 + 32) == 4)
      {
        uint64_t v11 = 0;
      }
      else
      {
        if (v10 == 1)
        {
          uint64_t v11 = 1;
          goto LABEL_40;
        }
        uint64_t v18 = 33;
        while (1)
        {
          uint64_t v11 = v18 - 32;
          if (*((unsigned char *)v3 + v18) == 4) {
            break;
          }
          uint64_t v19 = v18 - 31;
          if (__OFADD__(v11, 1)) {
            goto LABEL_154;
          }
          ++v18;
          if (v19 == v10)
          {
            uint64_t v11 = v3[2];
            goto LABEL_40;
          }
        }
      }
      uint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }
      if (v12 != v10)
      {
        uint64_t v13 = v11 + 33;
        while ((v12 & 0x8000000000000000) == 0)
        {
          if (v13 - 32 >= v10) {
            goto LABEL_146;
          }
          int v16 = *((unsigned __int8 *)v3 + v13);
          if (v16 != 4)
          {
            if (v13 - 32 != v11)
            {
              if (v11 >= v10) {
                goto LABEL_158;
              }
              char v17 = *((unsigned char *)v3 + v11 + 32);
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                uint64_t result = (uint64_t)sub_1005EC1E8(v3);
                uint64_t v3 = (void *)result;
              }
              *((unsigned char *)v3 + v11 + 32) = v16;
              *((unsigned char *)v3 + v13) = v17;
              uint64_t v58 = v3;
            }
            BOOL v14 = __OFADD__(v11++, 1);
            if (v14) {
              goto LABEL_151;
            }
            unint64_t v10 = v3[2];
          }
          uint64_t v15 = v13 - 31;
          ++v13;
          if (v15 == v10) {
            goto LABEL_18;
          }
        }
        goto LABEL_145;
      }
LABEL_18:
      if ((uint64_t)v10 >= v11) {
        goto LABEL_40;
      }
      __break(1u);
    }
    uint64_t v11 = 0;
LABEL_40:
    uint64_t result = (uint64_t)sub_1001C6AD8(v11, v10);
    uint64_t v3 = v58;
  }
  if ((v1 & 0x40) != 0) {
    goto LABEL_53;
  }
  unint64_t v20 = v3[2];
  if (!v20) {
    goto LABEL_51;
  }
  unsigned int v21 = *((unsigned __int8 *)v3 + 32);
  BOOL v22 = v21 > 0xB;
  int v23 = (1 << v21) & 0xC04;
  if (v22 || v23 == 0)
  {
    uint64_t v25 = 1;
    if (v20 == 1) {
      goto LABEL_52;
    }
    uint64_t v39 = 33;
    while (1)
    {
      uint64_t v40 = v39 - 32;
      unsigned int v41 = *((unsigned __int8 *)v3 + v39);
      BOOL v22 = v41 > 0xB;
      int v42 = (1 << v41) & 0xC04;
      if (!v22 && v42 != 0) {
        break;
      }
      BOOL v14 = __OFADD__(v40, 1);
      uint64_t v44 = v39 - 31;
      if (v14) {
        goto LABEL_162;
      }
      ++v39;
      if (v44 == v20)
      {
        uint64_t v25 = v3[2];
        goto LABEL_52;
      }
    }
    uint64_t v25 = v39 - 32;
    uint64_t v26 = v39 - 31;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 1;
  }
  if (v26 != v20)
  {
    uint64_t v30 = v25 + 33;
    while ((v26 & 0x8000000000000000) == 0)
    {
      if (v30 - 32 >= v20) {
        goto LABEL_144;
      }
      unsigned int v32 = *((unsigned __int8 *)v3 + v30);
      if (v32 > 0xB || ((1 << v32) & 0xC04) == 0)
      {
        if (v30 - 32 != v25)
        {
          if (v25 >= v20) {
            goto LABEL_161;
          }
          char v34 = *((unsigned char *)v3 + v25 + 32);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1005EC1E8(v3);
            uint64_t v3 = (void *)result;
          }
          *((unsigned char *)v3 + v25 + 32) = v32;
          *((unsigned char *)v3 + v30) = v34;
          uint64_t v58 = v3;
        }
        BOOL v14 = __OFADD__(v25++, 1);
        if (v14) {
          goto LABEL_157;
        }
        unint64_t v20 = v3[2];
      }
      uint64_t v31 = v30 - 31;
      ++v30;
      if (v31 == v20) {
        goto LABEL_49;
      }
    }
    goto LABEL_143;
  }
LABEL_49:
  if ((uint64_t)v20 < v25)
  {
    __break(1u);
LABEL_51:
    uint64_t v25 = 0;
  }
LABEL_52:
  uint64_t result = (uint64_t)sub_1001C6AD8(v25, v20);
  uint64_t v3 = v58;
LABEL_53:
  if ((v1 & 0x81) != 0x80)
  {
    unint64_t v27 = v3[2];
    if (!v27) {
      goto LABEL_61;
    }
    if (*((unsigned char *)v3 + 32) == 7)
    {
      uint64_t v28 = 0;
    }
    else
    {
      if (v27 == 1)
      {
        uint64_t v28 = 1;
        goto LABEL_107;
      }
      uint64_t v45 = 33;
      while (1)
      {
        uint64_t v28 = v45 - 32;
        if (*((unsigned char *)v3 + v45) == 7) {
          break;
        }
        uint64_t v46 = v45 - 31;
        if (__OFADD__(v28, 1)) {
          goto LABEL_155;
        }
        ++v45;
        if (v46 == v27)
        {
          uint64_t v28 = v3[2];
          goto LABEL_107;
        }
      }
    }
    uint64_t v29 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
    if (v29 == v27)
    {
LABEL_59:
      if ((uint64_t)v27 >= v28)
      {
LABEL_107:
        sub_1001C6AD8(v28, v27);
        uint64_t v3 = v58;
        goto LABEL_108;
      }
      __break(1u);
LABEL_61:
      uint64_t v28 = 0;
      goto LABEL_107;
    }
    uint64_t v35 = v28 + 33;
    while ((v29 & 0x8000000000000000) == 0)
    {
      if (v35 - 32 >= v27) {
        goto LABEL_148;
      }
      int v37 = *((unsigned __int8 *)v3 + v35);
      if (v37 != 7)
      {
        if (v35 - 32 != v28)
        {
          if (v28 >= v27) {
            goto LABEL_159;
          }
          char v38 = *((unsigned char *)v3 + v28 + 32);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1005EC1E8(v3);
            uint64_t v3 = (void *)result;
          }
          *((unsigned char *)v3 + v28 + 32) = v37;
          *((unsigned char *)v3 + v35) = v38;
          uint64_t v58 = v3;
        }
        BOOL v14 = __OFADD__(v28++, 1);
        if (v14) {
          goto LABEL_152;
        }
        unint64_t v27 = v3[2];
      }
      uint64_t v36 = v35 - 31;
      ++v35;
      if (v36 == v27) {
        goto LABEL_59;
      }
    }
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
LABEL_108:
  v57[3] = &type metadata for FitnessFeatures;
  v57[4] = sub_1000EAAD8();
  LOBYTE(v57[0]) = 4;
  char v47 = isFeatureEnabled(_:)();
  uint64_t result = _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v57);
  if ((v47 & 1) != 0 && (v1 & 0x88) == 0x80 && (v1 & 1) == 0) {
    return (uint64_t)v3;
  }
  unint64_t v48 = v3[2];
  if (!v48) {
    goto LABEL_118;
  }
  if (*((unsigned char *)v3 + 32) == 6)
  {
    uint64_t v49 = 0;
  }
  else
  {
    if (v48 == 1)
    {
      uint64_t v49 = 1;
      goto LABEL_138;
    }
    uint64_t v55 = 33;
    while (1)
    {
      uint64_t v49 = v55 - 32;
      if (*((unsigned char *)v3 + v55) == 6) {
        break;
      }
      uint64_t v56 = v55 - 31;
      if (__OFADD__(v49, 1)) {
        goto LABEL_156;
      }
      ++v55;
      if (v56 == v48)
      {
        uint64_t v49 = v3[2];
        goto LABEL_138;
      }
    }
  }
  uint64_t v50 = v49 + 1;
  if (!__OFADD__(v49, 1))
  {
    if (v50 == v48)
    {
LABEL_116:
      if ((uint64_t)v48 >= v49)
      {
LABEL_138:
        sub_1001C6AD8(v49, v48);
        return (uint64_t)v58;
      }
      __break(1u);
LABEL_118:
      uint64_t v49 = 0;
      goto LABEL_138;
    }
    uint64_t v51 = v49 + 33;
    while ((v50 & 0x8000000000000000) == 0)
    {
      if (v51 - 32 >= v48) {
        goto LABEL_150;
      }
      int v53 = *((unsigned __int8 *)v3 + v51);
      if (v53 != 6)
      {
        if (v51 - 32 != v49)
        {
          if (v49 >= v48) {
            goto LABEL_160;
          }
          char v54 = *((unsigned char *)v3 + v49 + 32);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1005EC1E8(v3);
            uint64_t v3 = (void *)result;
          }
          *((unsigned char *)v3 + v49 + 32) = v53;
          *((unsigned char *)v3 + v51) = v54;
          uint64_t v58 = v3;
        }
        BOOL v14 = __OFADD__(v49++, 1);
        if (v14) {
          goto LABEL_153;
        }
        unint64_t v48 = v3[2];
      }
      uint64_t v52 = v51 - 31;
      ++v51;
      if (v52 == v48) {
        goto LABEL_116;
      }
    }
    goto LABEL_149;
  }
LABEL_165:
  __break(1u);
  return result;
}

unint64_t sub_1001C725C(unint64_t result)
{
  if (result >= 0x12) {
    return 18;
  }
  return result;
}

uint64_t sub_1001C726C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  uint64_t v13 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for WorkoutNotification();
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        int v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1001C7578(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1001E7F58(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    int v16 = (char *)&v4[9 * a2 + 4];
    if (a1 != a2 || &v4[9 * a1 + 4] >= (void *)&v16[72 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[9 * a1 + 4], v16, 72 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C76F0(uint64_t a1, uint64_t a2)
{
  return sub_1001C7748(a1, a2, (uint64_t (*)(void))sub_1001E70C8, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1001C771C(uint64_t a1, uint64_t a2)
{
  return sub_1001C7748(a1, a2, (uint64_t (*)(void))sub_1001E8954, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_1001C7748(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = a3();
  }
  uint64_t v13 = *(void *)(a4(0) - 8);
  unint64_t v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_28;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v10);
    uint64_t v24 = v22 - v9;
    if (!v23)
    {
      *(void *)(v6 + 16) = v24;
LABEL_22:
      *uint64_t v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C7940(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94(&qword_10094E538);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardTypeFamily(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CardTypeFamily(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C7AFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CardTypeFamily()
{
  return &type metadata for CardTypeFamily;
}

unint64_t sub_1001C7B38()
{
  unint64_t result = qword_10094E540;
  if (!qword_10094E540)
  {
    sub_1000A1370(&qword_10094E548);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E540);
  }
  return result;
}

unint64_t sub_1001C7B98()
{
  unint64_t result = qword_10094E550;
  if (!qword_10094E550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E550);
  }
  return result;
}

unint64_t sub_1001C7BF0()
{
  unint64_t result = qword_10094E558;
  if (!qword_10094E558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E558);
  }
  return result;
}

unint64_t sub_1001C7C48()
{
  unint64_t result = qword_10094E560;
  if (!qword_10094E560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E560);
  }
  return result;
}

uint64_t sub_1001C7C9C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001C7CB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001C7CD4()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  sub_1000258C4(v0, qword_100997690);
  sub_1000876DC(v0, (uint64_t)qword_100997690);
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_1001C7D3C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C7D64(0x646E65727420, (void *)0xE600000000000000, a1);
}

uint64_t sub_1001C7D54@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C7D64(0, (void *)0xE000000000000000, a1);
}

uint64_t sub_1001C7D64@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  v16._countAndFlagsBits = a1;
  v16._object = a2;
  uint64_t v17 = a3;
  uint64_t v3 = sub_1000AFA94(&qword_10094E5C8);
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_1000AFA94(&qword_10094E5D0);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_1000AFA94(&qword_10094E5B0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int64_t v11 = (char *)&v15 - v10;
  sub_1001C8A9C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._countAndFlagsBits = 0x206E65704FLL;
  v12._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v12);
  swift_getKeyPath();
  sub_1000AFA94(&qword_10094E5D8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v16);
  ParameterSummaryString.init(stringInterpolation:)();
  IntentParameterSummary.init(_:table:)();
  sub_1000A132C(&qword_10094E5B8, &qword_10094E5B0);
  static ParameterSummaryBuilder.buildExpression<A>(_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v5);
  static ParameterSummaryBuilder.buildBlock<A>(_:)();
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v5);
}

uint64_t sub_1001C8020()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t sub_1001C8058()
{
  IntentParameter.wrappedValue.getter();
  if (!v2) {
    return URL.init(string:)();
  }
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1001C8134(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  sub_1000AFA94((uint64_t *)&unk_10094B790);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001C8224, 0, 0);
}

uint64_t sub_1001C8224()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[4];
  sub_1001C8058();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_1001C8AF0(v0[4]);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[6] + 32))(v0[7], v0[4], v0[5]);
    if (qword_10094AE38 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[6];
    uint64_t v4 = v0[7];
    uint64_t v6 = v0[5];
    sub_100539564(v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  static IntentResult.result<>()();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1001C8360@<X0>(uint64_t a1@<X8>)
{
  if (qword_10094A610 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_1000876DC(v2, (uint64_t)qword_100997690);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1001C8408()
{
  return 1;
}

uint64_t sub_1001C8410()
{
  uint64_t HasValueComparisonOperator = type metadata accessor for HasValueComparisonOperator();
  uint64_t v1 = *(void *)(HasValueComparisonOperator - 8);
  __chkstk_darwin(HasValueComparisonOperator);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for HasValueComparisonOperator.hasAnyValue(_:), HasValueComparisonOperator);
  sub_1000AFA94(&qword_10094E5B0);
  sub_1000A132C(&qword_10094E5B8, &qword_10094E5B0);
  sub_1000A132C(&qword_10094E5C0, &qword_10094E590);
  return ParameterSummaryWhenCondition.init<A>(_:_:_:otherwise:)();
}

uint64_t sub_1001C85B0(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10005DB5C;
  return sub_1001C8134(a1, v4);
}

uint64_t sub_1001C8650@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001C873C();
  *a1 = result;
  return result;
}

uint64_t sub_1001C8678(uint64_t a1)
{
  unint64_t v2 = sub_1001C8A9C();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenTrendIntent()
{
  return &type metadata for OpenTrendIntent;
}

uint64_t sub_1001C86C4()
{
  return sub_1000A132C(&qword_10094E570, &qword_10094E578);
}

uint64_t sub_1001C8700()
{
  return sub_1000A132C((unint64_t *)&qword_10094E580, &qword_10094E588);
}

uint64_t sub_1001C873C()
{
  uint64_t v18 = type metadata accessor for InputConnectionBehavior();
  uint64_t v0 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000AFA94(&qword_10094D320);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = sub_1000AFA94(&qword_10094D328);
  __chkstk_darwin(v9 - 8);
  int64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1000AFA94(&qword_10094E590);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v14 = type metadata accessor for IntentDialog();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v8, 1, 1, v14);
  v15(v6, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v18);
  sub_1001C8A48();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

unint64_t sub_1001C8A48()
{
  unint64_t result = qword_10094E598;
  if (!qword_10094E598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E598);
  }
  return result;
}

unint64_t sub_1001C8A9C()
{
  unint64_t result = qword_10094E5A0;
  if (!qword_10094E5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10094E5A0);
  }
  return result;
}

uint64_t sub_1001C8AF0(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94((uint64_t *)&unk_10094B790);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001C8B50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t initializeWithCopy for TrendsCoachingDataInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrendsCoachingDataInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v4;
  uint64_t v5 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v5;
  return a1;
}

__n128 initializeWithTake for TrendsCoachingDataInfo(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for TrendsCoachingDataInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrendsCoachingDataInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 97)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrendsCoachingDataInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrendsCoachingDataInfo()
{
  return &type metadata for TrendsCoachingDataInfo;
}

uint64_t sub_1001C8E2C()
{
  return type metadata accessor for HistoryItemsCard();
}

uint64_t sub_1001C8E34(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001C9750(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C8E54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001C98B0(a1, a2, a3, *v3, &qword_10094C528);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C8E84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001C98B0(a1, a2, a3, *v3, &qword_10094E868);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C8EB4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001C9A44(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C8ED4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB4D8(a1, a2, a3, (void *)*v3, &qword_10094E730, &qword_10094E738);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C8F04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100010598(a1, a2, a3, *v3, &qword_10094E930);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C8F2C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001C9BD4(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C8F4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E750, type metadata accessor for WorkoutChartDataElement);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C8F88(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E740, (uint64_t (*)(void))type metadata accessor for ActivitySharingHighlightViewModel);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C8FC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000D5460(a1, a2, a3, *v3, &qword_10094E758);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C8FEC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E8D8, (uint64_t (*)(void))&type metadata accessor for EngagementBadge);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9028(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001C9D34(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9048(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E940, (uint64_t (*)(void))&type metadata accessor for SleepingSampleDataType);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9084(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005F944(a1, a2, a3, (void *)*v3, &qword_10094E830, (uint64_t *)&unk_100955630);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C90B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001C9EA0(a1, a2, a3, (void *)*v3);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C90D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB4D8(a1, a2, a3, (void *)*v3, &qword_10094E7E8, &qword_10094E7F0);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9104(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CA02C(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9124(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005F944(a1, a2, a3, (void *)*v3, &qword_10094E7D8, &qword_10094E7E0);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9154(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E958, (uint64_t (*)(void))&type metadata accessor for BaselineRelativeValue);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9190(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA7E0(a1, a2, a3, *v3, &qword_10094E948);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C91B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CA18C(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C91D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CA2EC(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C91F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000D5460(a1, a2, a3, *v3, &qword_10094E7D0);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9220(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB4D8(a1, a2, a3, (void *)*v3, &qword_10094E760, &qword_10094E768);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9250(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E898, (uint64_t (*)(void))&type metadata accessor for AttributedString);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C928C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB4D8(a1, a2, a3, (void *)*v3, &qword_10094E838, &qword_10094E840);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C92BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CA478(a1, a2, a3, (void *)*v3);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C92DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100010598(a1, a2, a3, *v3, &qword_10094E890);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9304(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA7E0(a1, a2, a3, *v3, &qword_10094E960);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C932C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB668(a1, a2, a3, *v3, &qword_10094E780);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9354(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CA604(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9374(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CA754(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9394(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CA8DC(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C93B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100010598(a1, a2, a3, *v3, &qword_10094E828);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C93DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CAA64(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C93FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E878, (uint64_t (*)(void))type metadata accessor for ActivitySharingHighlight);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9438(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CABD0(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9458(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E870, (uint64_t (*)(void))&type metadata accessor for RoutePoint);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9494(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E928, type metadata accessor for WorkoutActivityEntity);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C94D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E850, (uint64_t (*)(void))&type metadata accessor for Artwork);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C950C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CAD50(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C952C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CAEDC(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C954C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E848, (uint64_t (*)(void))type metadata accessor for FitnessPlusStackViewModel);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9588(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB064(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C95A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB1F0(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C95C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB370(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C95E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB4D8(a1, a2, a3, (void *)*v3, &qword_10094E7B0, &qword_10094E7B8);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9618(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB668(a1, a2, a3, *v3, &qword_10094E7C0);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9640(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB7C4(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9660(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000D5460(a1, a2, a3, *v3, &qword_10094E788);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C9688(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001CB950(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_1001C96A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000AD6B4(a1, a2, a3, (void *)*v3, &qword_10094E798, &qword_10094E7A0);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C96D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094DBB0, (uint64_t (*)(void))&type metadata accessor for CatalogLockupPlaceholder);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9714(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B6AA0(a1, a2, a3, (void *)*v3, &qword_10094E7A8, (uint64_t (*)(void))&type metadata accessor for PersonalizationCandidate);
  *long long v3 = result;
  return result;
}

uint64_t sub_1001C9750(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E7C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C98B0(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_1000AFA94(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 24 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C9A30(char a1, int64_t a2, char a3, void *a4)
{
  return sub_10005F944(a1, a2, a3, a4, &qword_10094E180, &qword_10094D218);
}

uint64_t sub_1001C9A44(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94((uint64_t *)&unk_1009556C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C9BB4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000B6AA0(a1, a2, a3, a4, &qword_10094E750, type metadata accessor for WorkoutChartDataElement);
}

uint64_t sub_1001C9BD4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E790);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C9D34(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E900);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 223;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 8);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[256 * v8]) {
      memmove(v13, v14, v8 << 8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[256 * v8] || v13 >= &v14[256 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C9EA0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E808);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1000AFA94(&qword_10094E810);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CA02C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E938);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CA18C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E770);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CA2EC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E950);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CA478(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94((uint64_t *)&unk_100966E50);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1000AFA94((uint64_t *)&unk_100958790);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CA604(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E700);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CA754(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E888);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CA8DC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E880);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CAA64(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E860);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CABD0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E778);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CAD30(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000B6AA0(a1, a2, a3, a4, &qword_10094E858, (uint64_t (*)(void))&type metadata accessor for MediaMoment);
}

uint64_t sub_1001CAD50(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E8E8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CAEBC(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000B6AA0(a1, a2, a3, a4, &qword_10094E8F0, (uint64_t (*)(void))&type metadata accessor for Recommendation);
}

uint64_t sub_1001CAEDC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E968);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CB064(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E920);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CB1F0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E918);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CB35C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000AD6B4(a1, a2, a3, a4, &qword_10094E7F8, &qword_10094E800);
}

uint64_t sub_1001CB370(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E910);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CB4D8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_1000AFA94(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_1000AFA94(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CB668(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_1000AFA94(a5);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CB7C4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E908);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001CB950(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094E8F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1001CBAA0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    long long v4 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      Swift::UInt64 v5 = *v4;
      if ((*(v4 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v6 = *(v4 - 1);
      }
      else {
        Swift::UInt64 v6 = 0;
      }
      Hasher._combine(_:)(v6);
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v7 = v5;
      }
      else {
        Swift::UInt64 v7 = 0;
      }
      Hasher._combine(_:)(v7);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

void sub_1001CBB08(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = (int *)type metadata accessor for WorkoutChartDataElement(0);
  uint64_t v4 = *((void *)v3 - 1);
  __chkstk_darwin(v3);
  Swift::UInt64 v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v7 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v9 = *(void *)(v4 + 72);
    do
    {
      sub_1001CBD5C(v8, (uint64_t)v6, type metadata accessor for WorkoutChartDataElement);
      type metadata accessor for Date();
      sub_1000A6DB4((unint64_t *)&qword_10094E748, (void (*)(uint64_t))&type metadata accessor for Date);
      dispatch thunk of Hashable.hash(into:)();
      if ((*(void *)&v6[v3[5]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v10 = *(void *)&v6[v3[5]];
      }
      else {
        Swift::UInt64 v10 = 0;
      }
      Hasher._combine(_:)(v10);
      if ((*(void *)&v6[v3[6]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v11 = *(void *)&v6[v3[6]];
      }
      else {
        Swift::UInt64 v11 = 0;
      }
      Hasher._combine(_:)(v11);
      if ((*(void *)&v6[v3[7]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v12 = *(void *)&v6[v3[7]];
      }
      else {
        Swift::UInt64 v12 = 0;
      }
      Hasher._combine(_:)(v12);
      sub_1001CBDC4((uint64_t)v6, type metadata accessor for WorkoutChartDataElement);
      v8 += v9;
      --v7;
    }
    while (v7);
  }
}

void sub_1001CBCC4(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (void *)(a2 + 40);
    do
    {
      if (*v4)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1001CBD5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001CBDC4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for WorkoutDetailHeartRateView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for WorkoutDetailHeartRateView()
{
  return swift_release();
}

void *assignWithCopy for WorkoutDetailHeartRateView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for WorkoutDetailHeartRateView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for WorkoutDetailHeartRateView()
{
  return &type metadata for WorkoutDetailHeartRateView;
}

uint64_t sub_1001CBEE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001CBF00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v27 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for GeometryProxy();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000AFA94(&qword_10094E970);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)unint64_t v16 = static HorizontalAlignment.leading.getter();
  *((void *)v16 + 1) = 0;
  v16[16] = 1;
  uint64_t v17 = sub_1000AFA94(&qword_10094E978);
  sub_1001CC1C8(a3, (uint64_t)&v16[*(int *)(v17 + 44)]);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v18, v13, v10);
  swift_retain();
  static TaskPriority.userInitiated.getter();
  uint64_t v20 = sub_1000AFA94(&qword_10094E990);
  uint64_t v21 = v26;
  uint64_t v22 = (char *)(v26 + *(int *)(v20 + 36));
  uint64_t v23 = type metadata accessor for _TaskModifier();
  uint64_t v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v22[*(int *)(v23 + 20)], v9, v27);
  *(void *)uint64_t v22 = &unk_10094E988;
  *((void *)v22 + 1) = v19;
  sub_1000AEF2C((uint64_t)v16, v21, &qword_10094E970);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
  return sub_10008DB18((uint64_t)v16, &qword_10094E970);
}

uint64_t sub_1001CC1C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v156 = a1;
  uint64_t v154 = a2;
  uint64_t v2 = sub_1000AFA94(&qword_10094E9A0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v160 = (uint64_t)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v164 = (uint64_t)&v139 - v5;
  uint64_t v143 = type metadata accessor for HeartRateConfiguration.ConfigurationType();
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  v141 = (char *)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for WorkoutDetailChartView();
  uint64_t v148 = *(void *)(v155 - 8);
  uint64_t v7 = __chkstk_darwin(v155);
  uint64_t v144 = (uint64_t)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v140 = (uint64_t)&v139 - v9;
  uint64_t v10 = sub_1000AFA94(&qword_10094D448);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  v146 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v149 = (uint64_t (*)(uint64_t))((char *)&v139 - v13);
  uint64_t v157 = type metadata accessor for WorkoutChartViewModel(0);
  uint64_t v167 = *(void *)(v157 - 8);
  uint64_t v14 = __chkstk_darwin(v157);
  v147 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v145 = (char *)&v139 - v16;
  uint64_t v17 = sub_1000AFA94(&qword_10094DEE8);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v163 = (uint64_t)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v166 = (uint64_t)&v139 - v20;
  uint64_t v171 = type metadata accessor for Divider();
  uint64_t v162 = *(void *)(v171 - 8);
  uint64_t v21 = __chkstk_darwin(v171);
  v139 = (char *)&v139 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  v161 = (char *)&v139 - v24;
  __chkstk_darwin(v23);
  v169 = (char *)&v139 - v25;
  uint64_t v26 = type metadata accessor for AttributedString();
  __chkstk_darwin(v26 - 8);
  v152 = (void (*)(char *, uint64_t))((char *)&v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v153 = sub_1000AFA94(&qword_10094E9A8) - 8;
  uint64_t v28 = __chkstk_darwin(v153);
  uint64_t v170 = (uint64_t)&v139 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v168 = (uint64_t)&v139 - v30;
  uint64_t v165 = type metadata accessor for DynamicTypeSize();
  uint64_t v31 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v33 = (char *)&v139 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = sub_1000AFA94(&qword_10094DEF0);
  char v34 = *(void **)(v172 - 8);
  uint64_t v35 = __chkstk_darwin(v172);
  int v37 = (char *)&v139 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v139 - v38;
  id v40 = [self mainBundle];
  NSString v41 = String._bridgeToObjectiveC()();
  id v42 = [v40 localizedStringForKey:v41 value:0 table:0];

  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  uint64_t v177 = v43;
  v178 = v45;
  sub_1000A06D0();
  uint64_t v177 = Text.init<A>(_:)();
  v178 = v46;
  LOBYTE(v179) = v47 & 1;
  uint64_t v180 = v48;
  uint64_t v49 = enum case for DynamicTypeSize.large(_:);
  v151 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 104);
  uint64_t v50 = v165;
  v151(v33, enum case for DynamicTypeSize.large(_:), v165);
  View.dynamicTypeSize(_:)();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v31 + 8);
  v51(v33, v50);
  sub_1000A06C0(v177, (uint64_t)v178, v179);
  swift_bridgeObjectRelease();
  uint64_t v52 = (void (*)(char *, char *, uint64_t))v34[4];
  v158 = v39;
  v52(v39, v37, v172);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v53 = v156;
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  AttributedString.init(_:)();
  uint64_t v177 = Text.init(_:)();
  v178 = v54;
  LOBYTE(v179) = v55 & 1;
  uint64_t v180 = v56;
  uint64_t v57 = v49;
  uint64_t v58 = v165;
  v151(v33, v57, v165);
  uint64_t v59 = v53;
  View.dynamicTypeSize(_:)();
  v51(v33, v58);
  sub_1000A06C0(v177, (uint64_t)v178, v179);
  swift_bridgeObjectRelease();
  uint64_t v60 = static Color.red.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v62 = v170;
  uint64_t v63 = v172;
  v150 = (void (*)(uint64_t, char *, uint64_t))v34[2];
  v150(v170, v37, v172);
  uint64_t v64 = (uint64_t *)(v62 + *(int *)(v153 + 44));
  uint64_t *v64 = KeyPath;
  v64[1] = v60;
  int v65 = (void (*)(char *, uint64_t))v34[1];
  v159 = v37;
  uint64_t v153 = (uint64_t)(v34 + 1);
  v65(v37, v63);
  sub_1000AEEC8(v62, v168, &qword_10094E9A8);
  Divider.init()();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v66 = v149;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v67 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t))(v167 + 48);
  v167 += 48;
  int v68 = v67(v66, 1, v157);
  v152 = v65;
  v151 = (void (*)(char *, uint64_t, uint64_t))(v34 + 2);
  if (v68 == 1)
  {
    sub_10008DB18((uint64_t)v66, &qword_10094D448);
  }
  else
  {
    uint64_t v69 = (uint64_t)v66;
    uint64_t v70 = (uint64_t)v145;
    sub_1001BB6FC(v69, (uint64_t)v145);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v71 = v177;
    if (v177)
    {
      v149 = type metadata accessor for WorkoutChartViewModel;
      uint64_t v72 = v140;
      sub_1001BB760(v70, v140, type metadata accessor for WorkoutChartViewModel);
      *(void *)(v72 + *(int *)(v155 + 20)) = v71;
      swift_retain();
      uint64_t v73 = v161;
      Divider.init()();
      uint64_t v74 = v144;
      sub_1001BB760(v72, v144, (uint64_t (*)(void))type metadata accessor for WorkoutDetailChartView);
      uint64_t v75 = v162;
      uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v162 + 16);
      uint64_t v77 = v139;
      uint64_t v165 = (uint64_t)v67;
      uint64_t v78 = v171;
      v76(v139, v73, v171);
      uint64_t v79 = v74;
      uint64_t v80 = v163;
      sub_1001BB760(v79, v163, (uint64_t (*)(void))type metadata accessor for WorkoutDetailChartView);
      uint64_t v81 = sub_1000AFA94(&qword_10094DF08);
      v76((char *)(v80 + *(int *)(v81 + 48)), v77, v78);
      swift_release();
      uint64_t v82 = *(void (**)(char *, uint64_t))(v75 + 8);
      uint64_t v83 = v73;
      uint64_t v59 = v156;
      v82(v83, v78);
      sub_1001BB7C8(v72, (uint64_t (*)(void))type metadata accessor for WorkoutDetailChartView);
      sub_1001BB7C8((uint64_t)v145, v149);
      uint64_t v84 = v78;
      uint64_t v67 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v165;
      v82(v77, v84);
      sub_1001BB7C8(v144, (uint64_t (*)(void))type metadata accessor for WorkoutDetailChartView);
      uint64_t v85 = sub_1000AFA94(&qword_10094DEF8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v80, 0, 1, v85);
      sub_1000AEEC8(v80, v166, &qword_10094DEE8);
      goto LABEL_7;
    }
    sub_1001BB7C8(v70, type metadata accessor for WorkoutChartViewModel);
  }
  uint64_t v86 = v166;
  uint64_t v87 = sub_1000AFA94(&qword_10094DEF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 1, 1, v87);
LABEL_7:
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v89 = v177;
  if (!v177)
  {
    uint64_t v156 = 0;
    v149 = 0;
    v145 = 0;
    uint64_t v144 = 0;
    uint64_t v143 = 0;
    int v99 = 254;
    goto LABEL_18;
  }
  if (*(void *)(v177 + 16))
  {
    if (*(void *)(v177 + OBJC_IVAR____TtC10FitnessApp20WorkoutHeartRateInfo_elapsedTimeInZones))
    {
      double v90 = COERCE_DOUBLE(sub_100367310());
      if ((v91 & 1) == 0)
      {
        v88.n128_f64[0] = v90;
        if (v90 > 0.0)
        {
          uint64_t v92 = *(void **)(v59 + 64);
          swift_retain();
          sub_1001E2AEC(v89, [v92 fitnessUIFormattingManager], &v183);
          uint64_t v93 = (void *)*((void *)&v183 + 1);
          uint64_t v94 = (void *)v184;
          uint64_t v95 = v185;
          uint64_t v186 = *((void *)&v184 + 1);
          long long v173 = v183;
          long long v174 = v184;
          v175 = v185;
          char v176 = 0;
          swift_retain();
          id v96 = v93;
          id v97 = v94;
          sub_1001CE648((uint64_t)&v186);
          sub_1001CE5F4();
          id v98 = v95;
          _ConditionalContent<>.init(storage:)();

          swift_release();
          swift_release();
          sub_1000B1AE0((uint64_t)&v186);

          uint64_t v156 = v177;
          v149 = v178;
          v145 = (char *)v179;
          uint64_t v144 = v180;
          uint64_t v143 = v181;
          int v99 = v182;
LABEL_18:
          LODWORD(v165) = v99;
          uint64_t v108 = v155;
          uint64_t v105 = (uint64_t)v147;
          uint64_t v106 = (uint64_t)v146;
          goto LABEL_21;
        }
      }
    }
  }
  uint64_t v100 = v142;
  uint64_t v101 = v141;
  uint64_t v102 = v143;
  (*(void (**)(char *, void, uint64_t, __n128))(v142 + 104))(v141, enum case for HeartRateConfiguration.ConfigurationType.automatic(_:), v143, v88);
  sub_1001CE59C();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v103 = v177;
  uint64_t v104 = v173;
  (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v102);
  if (v103 != v104)
  {
    swift_release();
    uint64_t v156 = 0;
    v149 = 0;
    v145 = 0;
    uint64_t v144 = 0;
    uint64_t v143 = 0;
    int v99 = 255;
    goto LABEL_18;
  }
  uint64_t v105 = (uint64_t)v147;
  uint64_t v106 = (uint64_t)v146;
  if (*(void *)(v89 + 16))
  {
    swift_release();
    uint64_t v156 = 0;
    v149 = 0;
    v145 = 0;
    uint64_t v144 = 0;
    uint64_t v143 = 0;
    int v107 = 255;
  }
  else
  {
    v175 = 0;
    long long v173 = 0u;
    long long v174 = 0u;
    char v176 = 1;
    sub_1001CE5F4();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    uint64_t v156 = v177;
    v149 = v178;
    v145 = (char *)v179;
    uint64_t v144 = v180;
    uint64_t v143 = v181;
    int v107 = v182;
  }
  LODWORD(v165) = v107;
  uint64_t v108 = v155;
LABEL_21:
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v67((uint64_t (*)(uint64_t))v106, 1, v157) == 1)
  {
    sub_10008DB18(v106, &qword_10094D448);
LABEL_26:
    uint64_t v112 = 1;
    goto LABEL_27;
  }
  sub_1001BB6FC(v106, v105);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v109 = v177;
  if (!v177)
  {
    sub_1001BB7C8(v105, type metadata accessor for WorkoutChartViewModel);
    goto LABEL_26;
  }
  uint64_t v110 = v105;
  uint64_t v111 = v164;
  sub_1001BB6FC(v110, v164);
  uint64_t v112 = 0;
  *(void *)(v111 + *(int *)(v108 + 20)) = v109;
LABEL_27:
  uint64_t v113 = v164;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 56))(v164, v112, 1, v108);
  v114 = v159;
  uint64_t v115 = v172;
  v116 = v150;
  v150((uint64_t)v159, v158, v172);
  uint64_t v117 = v170;
  sub_1000AEF2C(v168, v170, &qword_10094E9A8);
  uint64_t v167 = *(void *)(v162 + 16);
  v118 = v161;
  ((void (*)(char *, char *, uint64_t))v167)(v161, v169, v171);
  uint64_t v119 = v163;
  sub_1000AEF2C(v166, v163, &qword_10094DEE8);
  uint64_t v120 = v113;
  uint64_t v121 = v160;
  sub_1000AEF2C(v120, v160, &qword_10094E9A0);
  LOBYTE(v177) = 1;
  uint64_t v122 = v154;
  v116(v154, v114, v115);
  v123 = (int *)sub_1000AFA94(&qword_10094E9B0);
  sub_1000AEF2C(v117, v122 + v123[12], &qword_10094E9A8);
  v124 = v118;
  uint64_t v125 = v171;
  ((void (*)(uint64_t, char *, uint64_t))v167)(v122 + v123[16], v124, v171);
  sub_1000AEF2C(v119, v122 + v123[20], &qword_10094DEE8);
  uint64_t v126 = v122 + v123[24];
  uint64_t v127 = v156;
  v128 = v149;
  *(void *)uint64_t v126 = v156;
  *(void *)(v126 + 8) = v128;
  v129 = v145;
  uint64_t v130 = v144;
  *(void *)(v126 + 16) = v145;
  *(void *)(v126 + 24) = v130;
  v131 = (void *)v143;
  *(void *)(v126 + 32) = v143;
  int v132 = v165;
  *(unsigned char *)(v126 + 40) = v165;
  LODWORD(v165) = v132;
  sub_1000AEF2C(v121, v122 + v123[28], &qword_10094E9A0);
  uint64_t v133 = v122 + v123[32];
  char v134 = v177;
  *(void *)uint64_t v133 = 0;
  *(unsigned char *)(v133 + 8) = v134;
  sub_1001CE46C(v127, v128, v129, v130, v131, v132);
  sub_10008DB18(v164, &qword_10094E9A0);
  sub_10008DB18(v166, &qword_10094DEE8);
  v135 = *(void (**)(char *, uint64_t))(v162 + 8);
  v135(v169, v125);
  sub_10008DB18(v168, &qword_10094E9A8);
  uint64_t v136 = v172;
  v137 = (uint64_t (*)(char *, uint64_t))v152;
  v152(v158, v172);
  sub_10008DB18(v160, &qword_10094E9A0);
  sub_1001CE504(v127, v128, v129, v130, v131, v165);
  sub_10008DB18(v163, &qword_10094DEE8);
  v135(v161, v171);
  sub_10008DB18(v170, &qword_10094E9A8);
  return v137(v159, v136);
}

uint64_t sub_1001CD6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  type metadata accessor for MainActor();
  v3[6] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[7] = v5;
  v3[8] = v4;
  return _swift_task_switch(sub_1001CD750, v5, v4);
}

uint64_t sub_1001CD750()
{
  swift_retain();
  return _swift_task_switch(sub_1001CD7BC, 0, 0);
}

uint64_t sub_1001CD7BC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001CD888;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1001CD888()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001CD984, 0, 0);
}

uint64_t sub_1001CD984()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  return _swift_task_switch(sub_1001CD9E8, v1, v2);
}

uint64_t sub_1001CD9E8()
{
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0[2];
  if (v1)
  {
    GeometryProxy.size.getter();
    uint64_t v3 = v1 + OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_viewWidth;
    *(double *)uint64_t v3 = v2 + -2.0;
    *(unsigned char *)(v3 + 8) = 0;
    swift_release();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v0[3];
  if (v4)
  {
    GeometryProxy.size.getter();
    uint64_t v6 = v4 + OBJC_IVAR____TtC10FitnessApp22WorkoutChartProperties_viewWidth;
    *(double *)uint64_t v6 = v5 + -2.0;
    *(unsigned char *)(v6 + 8) = 0;
    swift_release();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

double sub_1001CDB70@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  char v6 = static Edge.Set.all.getter();
  *(void *)a1 = sub_1001CDC28;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = xmmword_100752B90;
  *(_OWORD *)(a1 + 40) = xmmword_100752B90;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_1001CDBF0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001CDC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001CBF00(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1001CDC30()
{
  uint64_t v1 = type metadata accessor for GeometryProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1001CDCFC()
{
  uint64_t v2 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  char v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *char v6 = v1;
  v6[1] = sub_10005DB5C;
  return sub_1001CD6B8(v3, v4, v5);
}

uint64_t sub_1001CDDDC(uint64_t a1, uint64_t a2)
{
  char v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *char v6 = v3;
  v6[1] = sub_1000DBD6C;
  return sub_1001A232C(a1, a2, v2);
}

uint64_t sub_1001CDE88()
{
  return sub_1001CE05C();
}

uint64_t sub_1001CDE9C(uint64_t a1)
{
  return sub_1001CE0E8(a1);
}

uint64_t sub_1001CDEB0@<X0>(void *a1@<X8>)
{
  return sub_1001CE214(a1);
}

uint64_t sub_1001CDEC4@<X0>(void *a1@<X8>)
{
  return sub_1001CE214(a1);
}

uint64_t sub_1001CDEEC()
{
  return sub_1001CE2CC();
}

uint64_t sub_1001CDF00()
{
  return sub_1001CE2CC();
}

uint64_t sub_1001CDF28@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1001CDFA8(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_1001CE020@<X0>(void *a1@<X8>)
{
  return sub_1001CE214(a1);
}

uint64_t sub_1001CE034()
{
  return sub_1001CE2CC();
}

uint64_t sub_1001CE048()
{
  return sub_1001CE05C();
}

uint64_t sub_1001CE05C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1001CE0D4(uint64_t a1)
{
  return sub_1001CE0E8(a1);
}

uint64_t sub_1001CE0E8(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94(&qword_10094D448);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1000AEF2C(a1, (uint64_t)&v9 - v6, &qword_10094D448);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000AEF2C((uint64_t)v7, (uint64_t)v5, &qword_10094D448);
  swift_retain();
  static Published.subscript.setter();
  return sub_10008DB18((uint64_t)v7, &qword_10094D448);
}

uint64_t sub_1001CE200@<X0>(void *a1@<X8>)
{
  return sub_1001CE214(a1);
}

uint64_t sub_1001CE214@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1001CE290@<X0>(void *a1@<X8>)
{
  return sub_1001CE214(a1);
}

uint64_t sub_1001CE2B8()
{
  return sub_1001CE2CC();
}

uint64_t sub_1001CE2CC()
{
  return static Published.subscript.setter();
}

uint64_t sub_1001CE344()
{
  return sub_1001CE2CC();
}

uint64_t sub_1001CE37C()
{
  return sub_1001CE05C();
}

uint64_t sub_1001CE3A4(uint64_t a1)
{
  return sub_1001CE0E8(a1);
}

uint64_t sub_1001CE3CC@<X0>(void *a1@<X8>)
{
  return sub_1001CE214(a1);
}

uint64_t sub_1001CE3F4()
{
  return sub_1001CE2CC();
}

uint64_t sub_1001CE41C()
{
  return sub_1001CE05C();
}

uint64_t sub_1001CE444(uint64_t a1)
{
  return sub_1001CE0E8(a1);
}

void sub_1001CE46C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 != 254) {
    sub_1001CE480(a1, a2, a3, a4, a5, a6);
  }
}

void sub_1001CE480(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 != 255) {
    sub_1001CE498(a1, a2, a3, a4, a5, a6 & 1);
  }
}

void sub_1001CE498(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) == 0)
  {
    swift_retain();
    id v9 = a2;
    id v10 = a3;
    swift_bridgeObjectRetain();
    id v11 = a5;
  }
}

void sub_1001CE504(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 != 254) {
    sub_1001CE518(a1, a2, a3, a4, a5, a6);
  }
}

void sub_1001CE518(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 != 255) {
    sub_1001CE530(a1, a2, a3, a4, a5, a6 & 1);
  }
}

void sub_1001CE530(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) == 0)
  {
    swift_release();

    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1001CE59C()
{
  unint64_t result = qword_10094E9B8;
  if (!qword_10094E9B8)
  {
    type metadata accessor for HeartRateConfiguration.ConfigurationType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E9B8);
  }
  return result;
}

unint64_t sub_1001CE5F4()
{
  unint64_t result = qword_10094E9C0;
  if (!qword_10094E9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E9C0);
  }
  return result;
}

uint64_t sub_1001CE648(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001CE678()
{
  unint64_t result = qword_10094E9C8;
  if (!qword_10094E9C8)
  {
    sub_1000A1370(&qword_10094E9D0);
    sub_1001CE6F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E9C8);
  }
  return result;
}

unint64_t sub_1001CE6F4()
{
  unint64_t result = qword_10094E9D8;
  if (!qword_10094E9D8)
  {
    sub_1000A1370(&qword_10094E9E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094E9D8);
  }
  return result;
}

uint64_t sub_1001CE754()
{
  uint64_t result = 1702260557;
  switch(v0[43])
  {
    case 1:
      return result;
    case 2:
      uint64_t result = 0x65636E6174736944;
      break;
    case 3:
      unsigned int v2 = 1802264919;
      goto LABEL_18;
    case 4:
      if (v0[42]) {
        uint64_t result = 0xD000000000000017;
      }
      else {
        uint64_t result = 0x69466F6964726143;
      }
      break;
    case 5:
      uint64_t result = 0x6573696372657845;
      break;
    case 6:
      if (v0[41]) {
        uint64_t result = 0x756E694D6C6C6F52;
      }
      else {
        uint64_t result = 0x6E694D646E617453;
      }
      break;
    case 7:
      unsigned int v2 = 1852732754;
LABEL_18:
      uint64_t result = v2 | 0x50676E6900000000;
      break;
    case 8:
      uint64_t result = 0x4373746867696C46;
      break;
    default:
      if (v0[41]) {
        uint64_t result = 1819045714;
      }
      else {
        uint64_t result = 0x646E617453;
      }
      break;
  }
  return result;
}

uint64_t sub_1001CE8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v105 = a4;
  uint64_t v11 = sub_1000AFA94((uint64_t *)&unk_10095BF60);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (double *)a5;
  uint64_t v14 = *(void *)(a5 + 8);
  uint64_t v15 = sub_1001D0800(a1, a2, v14);
  uint64_t v17 = v16;
  uint64_t v112 = v15;
  uint64_t v113 = v16;
  strcpy((char *)v111, "%#@num_days@");
  BYTE5(v111[1]) = 0;
  HIWORD(v111[1]) = -5120;
  sub_1000A06D0();
  char v18 = StringProtocol.contains<A>(_:)();
  uint64_t v103 = a3;
  if (v18)
  {
    sub_1000AFA94((uint64_t *)&unk_1009546D0);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1007509E0;
    *(void *)(v19 + 56) = &type metadata for Int;
    *(void *)(v19 + 64) = &protocol witness table for Int;
    *(void *)(v19 + 32) = v14;
    uint64_t v15 = String.init(format:_:)();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v17 = v21;
  }
  uint64_t v22 = (uint64_t)v105;
  uint64_t v23 = (void *)v105[1];
  if (v23)
  {
    uint64_t v102 = v6;
    uint64_t v24 = *v105;
    uint64_t v112 = v15;
    uint64_t v113 = v17;
    v111[0] = 0xD000000000000015;
    v111[1] = 0x80000001007B7C90;
    swift_bridgeObjectRetain();
    if (StringProtocol.contains<A>(_:)())
    {
      static Locale.current.getter();
      uint64_t v25 = type metadata accessor for Locale();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v13, 0, 1, v25);
      sub_1000AFA94((uint64_t *)&unk_1009546D0);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1007509E0;
      *(void *)(v26 + 56) = &type metadata for String;
      *(void *)(v26 + 64) = sub_1000AA64C();
      *(void *)(v26 + 32) = v24;
      *(void *)(v26 + 40) = v23;
      uint64_t v27 = String.init(format:locale:arguments:)();
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      sub_1001D07A0((uint64_t)v13);
      uint64_t v112 = v15;
      uint64_t v113 = v17;
      v111[0] = 0xD000000000000015;
      v111[1] = 0x80000001007B7C90;
      v110._countAndFlagsBits = v27;
      v110._object = v29;
      uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v112 = v15;
      uint64_t v113 = v17;
      strcpy((char *)v111, "{{username}}");
      BYTE5(v111[1]) = 0;
      HIWORD(v111[1]) = -5120;
      v110._countAndFlagsBits = v24;
      v110._object = v23;
      uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v31 = v32;
      sub_1001D0774(v22);
    }
    swift_bridgeObjectRelease();
    uint64_t v17 = v31;
    uint64_t v6 = v102;
  }
  uint64_t v112 = v15;
  uint64_t v113 = v17;
  strcpy((char *)v111, "{{metric}}");
  BYTE3(v111[1]) = 0;
  HIDWORD(v111[1]) = -369098752;
  char v33 = v103;
  sub_1000AAF10();
  Swift::String v34 = String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v110 = v34;
  uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  int v37 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = v37;
  switch(v33)
  {
    case 1:
      goto LABEL_18;
    case 2:
      double v65 = *v104;
      id v66 = [*(id *)(v6 + 48) unitManager];
      if (!v66) {
        goto LABEL_47;
      }
      uint64_t v67 = v66;
      id v58 = sub_1005F20F4(v66, *(unsigned char *)(v6 + 43));

      id v59 = [self quantityWithUnit:v58 doubleValue:v65];
      uint64_t v112 = v35;
      uint64_t v113 = v38;
      v111[0] = 0xD000000000000017;
      v111[1] = 0x80000001007B7D10;
      v110._countAndFlagsBits = (uint64_t)sub_1001D0170(v59);
      v110._object = v68;
      goto LABEL_23;
    case 3:
    case 7:
      double v39 = v104[3];
      if (fabs(v39) < 2.22044605e-16) {
        return v35;
      }
      uint64_t v112 = v35;
      uint64_t v113 = v37;
      v111[0] = 0xD00000000000001ALL;
      v111[1] = 0x80000001007B7C10;
      id v40 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
      [v40 setAllowedUnits:192];
      [v40 setUnitsStyle:3];
      id v41 = [*(id *)(v6 + 48) unitManager];
      if (!v41)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        JUMPOUT(0x1001CF6D4);
      }
      id v42 = v41;
      id v43 = [v41 userDistanceUnitForDistanceType:1];

      double v44 = v39 / 1.60934;
      if (v43 != (id)3) {
        double v44 = v39;
      }
      id v45 = [v40 stringFromTimeInterval:3600.0 / v44];
      if (v45)
      {
        uint64_t v46 = v45;
        unint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v49 = v48;
      }
      else
      {

        unint64_t v47 = 0xD000000000000019;
        uint64_t v49 = (void *)0x80000001007B7C30;
      }
      v110._countAndFlagsBits = v47;
      v110._object = v49;
LABEL_41:
      uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      swift_bridgeObjectRelease();
LABEL_42:
      swift_bridgeObjectRelease();
      break;
    case 4:
      double v86 = v104[4];
      uint64_t v87 = v105;
      sub_1000AEEC8((uint64_t)(v105 + 2), (uint64_t)v116, &qword_10094E9E8);
      sub_1000AEEC8((uint64_t)v116, (uint64_t)&v117, &qword_10094E9E8);
      unint64_t v88 = 0x80000001007B7BD0;
      if ((v118 & 1) != 0
        || (uint64_t v89 = v117,
            sub_1000AEEC8((uint64_t)(v87 + 4), (uint64_t)v115, &qword_10094E9F0),
            sub_1000AEEC8((uint64_t)v115, (uint64_t)&v119, &qword_10094E9F0),
            (v120 & 1) != 0)
        || (v90 = sub_100481D5C(v119, v89), unint64_t v88 = 0x80000001007B7BD0, !v90))
      {
        uint64_t v92 = 0xD000000000000015;
      }
      else
      {
        sub_100481100(v90, v91, (uint64_t)v111, v86);
        swift_bridgeObjectRelease();
        sub_1000AEEC8((uint64_t)v111, (uint64_t)&v112, &qword_10094E9F8);
        uint64_t v92 = 0xD000000000000015;
        if (v114 != 6)
        {
          uint64_t v92 = sub_1004812E8();
          unint64_t v88 = v93;
        }
      }
      v110._countAndFlagsBits = v35;
      v110._object = v38;
      unint64_t v108 = 0xD00000000000001CLL;
      unint64_t v109 = 0x80000001007B7BF0;
      uint64_t v106 = v92;
      unint64_t v107 = v88;
      goto LABEL_41;
    case 5:
      double v94 = *v104;
      uint64_t v112 = v35;
      uint64_t v113 = v37;
      v111[0] = 0xD000000000000016;
      v111[1] = 0x80000001007B7C70;
      id v51 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v94];
      id v52 = [self stringWithNumber:v51 decimalPrecision:1];
      if (v52) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_34:
      double v95 = *v104;
      uint64_t v112 = v35;
      uint64_t v113 = v38;
      v111[0] = 0xD000000000000016;
      v111[1] = 0x80000001007B7C50;
      id v51 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v95];
      id v52 = [self stringWithNumber:v51 decimalPrecision:1];
      if (!v52) {
        goto LABEL_50;
      }
LABEL_35:
      id v96 = v52;
      uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v99 = v98;

      v110._countAndFlagsBits = v97;
      v110._object = v99;
      uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      goto LABEL_36;
    case 6:
      double v69 = *v104;
      uint64_t v112 = v35;
      uint64_t v113 = v37;
      v111[0] = 0xD000000000000016;
      v111[1] = 0x80000001007B7C70;
      id v70 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v69];
      uint64_t v71 = self;
      id v72 = [v71 stringWithNumber:v70 decimalPrecision:1];
      if (!v72) {
        goto LABEL_48;
      }
      uint64_t v73 = v72;
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v76 = v75;

      v110._countAndFlagsBits = v74;
      v110._object = v76;
      uint64_t v77 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v79 = v78;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v112 = v77;
      uint64_t v113 = v79;
      v111[0] = 0xD000000000000014;
      v111[1] = 0x80000001007B7CF0;
      id v80 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v69];
      id v81 = [v71 stringWithNumber:v80 decimalPrecision:1];
      if (!v81) {
        goto LABEL_49;
      }
      uint64_t v82 = v81;
      uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v85 = v84;

      v110._countAndFlagsBits = v83;
      v110._object = v85;
      uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
LABEL_36:
      swift_bridgeObjectRelease();
      goto LABEL_42;
    case 8:
      goto LABEL_34;
    default:
      double v50 = *v104;
      uint64_t v112 = v35;
      uint64_t v113 = v37;
      v111[0] = 0xD000000000000014;
      v111[1] = 0x80000001007B7CF0;
      id v51 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v50];
      id v52 = [self stringWithNumber:v51 decimalPrecision:1];
      if (v52) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_18:
      double v53 = *v104;
      char v54 = *(void **)(v6 + 48);
      id v55 = [v54 unitManager];
      if (!v55) {
        goto LABEL_45;
      }
      uint64_t v56 = v6;
      uint64_t v57 = v55;
      id v58 = sub_1005F20F4(v55, *(unsigned char *)(v56 + 43));

      id v59 = [self quantityWithUnit:v58 doubleValue:v53];
      uint64_t v112 = v35;
      uint64_t v113 = v38;
      v111[0] = 0xD000000000000015;
      v111[1] = 0x80000001007B7D30;
      id v60 = [v54 localizedStringWithActiveEnergy:v59];
      if (!v60) {
        goto LABEL_46;
      }
      uint64_t v61 = v60;
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;

      v110._countAndFlagsBits = v62;
      v110._object = v64;
LABEL_23:
      uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
  }
  return v35;
}

uint64_t sub_1001CF6F8(uint64_t a1, void *a2, char a3, uint64_t *a4, double a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_1000AFA94((uint64_t *)&unk_10095BF60);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)a4[1];
  uint64_t v51 = 0xD000000000000015;
  if (v15)
  {
    uint64_t v53 = v5;
    uint64_t v16 = *a4;
    uint64_t v60 = a1;
    uint64_t v61 = a2;
    v59[0] = 0xD000000000000015;
    v59[1] = 0x80000001007B7C90;
    sub_1000A06D0();
    swift_bridgeObjectRetain();
    id v52 = a4;
    if (StringProtocol.contains<A>(_:)())
    {
      static Locale.current.getter();
      uint64_t v17 = type metadata accessor for Locale();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 0, 1, v17);
      sub_1000AFA94((uint64_t *)&unk_1009546D0);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1007509E0;
      *(void *)(v18 + 56) = &type metadata for String;
      *(void *)(v18 + 64) = sub_1000AA64C();
      *(void *)(v18 + 32) = v16;
      *(void *)(v18 + 40) = v15;
      uint64_t v19 = String.init(format:locale:arguments:)();
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      sub_1001D07A0((uint64_t)v14);
      uint64_t v60 = a1;
      uint64_t v61 = a2;
      v59[0] = 0xD000000000000015;
      v59[1] = 0x80000001007B7C90;
      v58._countAndFlagsBits = v19;
      v58._object = v21;
      a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      a2 = v22;
      swift_bridgeObjectRelease();
      uint64_t v6 = v53;
      a4 = v52;
    }
    else
    {
      uint64_t v60 = a1;
      uint64_t v61 = a2;
      strcpy((char *)v59, "{{username}}");
      BYTE5(v59[1]) = 0;
      HIWORD(v59[1]) = -5120;
      v58._countAndFlagsBits = v16;
      v58._object = v15;
      a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      a2 = v23;
      a4 = v52;
      sub_1001D0774((uint64_t)v52);
      uint64_t v6 = v53;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  strcpy((char *)v59, "{{metric}}");
  BYTE3(v59[1]) = 0;
  HIDWORD(v59[1]) = -369098752;
  sub_1000AAF10();
  Swift::String v24 = String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String v58 = v24;
  sub_1000A06D0();
  uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = v27;
  switch(a3)
  {
    case 3:
    case 7:
      if (fabs(a5) < 2.22044605e-16) {
        return v25;
      }
      uint64_t v60 = v25;
      uint64_t v61 = v27;
      v59[0] = 0xD00000000000001ALL;
      v59[1] = 0x80000001007B7C10;
      id v29 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
      [v29 setAllowedUnits:192];
      [v29 setUnitsStyle:3];
      id v30 = [*(id *)(v6 + 48) unitManager];
      if (!v30)
      {
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1001CFF68);
      }
      uint64_t v31 = v30;
      id v32 = [v30 userDistanceUnitForDistanceType:1];

      double v33 = a5 / 1.60934;
      if (v32 != (id)3) {
        double v33 = a5;
      }
      id v34 = [v29 stringFromTimeInterval:3600.0 / v33 v51];
      if (v34)
      {
        uint64_t v35 = v34;
        unint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v37;
      }
      else
      {

        unint64_t v36 = 0xD000000000000019;
        uint64_t v38 = (void *)0x80000001007B7C30;
      }
      v58._countAndFlagsBits = v36;
      v58._object = v38;
      uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      swift_bridgeObjectRelease();
      break;
    case 4:
      sub_1000AEEC8((uint64_t)(a4 + 2), (uint64_t)v64, &qword_10094E9E8);
      sub_1000AEEC8((uint64_t)v64, (uint64_t)&v65, &qword_10094E9E8);
      unint64_t v39 = 0x80000001007B7BD0;
      if ((v66 & 1) == 0)
      {
        uint64_t v40 = v65;
        sub_1000AEEC8((uint64_t)(a4 + 4), (uint64_t)v63, &qword_10094E9F0);
        sub_1000AEEC8((uint64_t)v63, (uint64_t)&v67, &qword_10094E9F0);
        if ((v68 & 1) == 0)
        {
          unint64_t v41 = sub_100481D5C(v67, v40);
          unint64_t v39 = 0x80000001007B7BD0;
          if (v41)
          {
            sub_100481100(v41, v42, (uint64_t)v59, a5);
            swift_bridgeObjectRelease();
            sub_1000AEEC8((uint64_t)v59, (uint64_t)&v60, &qword_10094E9F8);
            if (v62 != 6)
            {
              uint64_t v51 = sub_1004812E8();
              unint64_t v39 = v43;
            }
          }
        }
      }
      v58._countAndFlagsBits = v25;
      v58._object = v28;
      unint64_t v56 = 0xD00000000000001CLL;
      unint64_t v57 = 0x80000001007B7BF0;
      uint64_t v54 = v51;
      unint64_t v55 = v39;
      goto LABEL_23;
    case 5:
      uint64_t v60 = v25;
      uint64_t v61 = v27;
      v59[0] = 0xD000000000000016;
      v59[1] = 0x80000001007B7C70;
      id v44 = [objc_allocWithZone((Class)NSNumber) initWithDouble:a5];
      id v45 = [self stringWithNumber:v44 decimalPrecision:1];
      if (v45) {
        goto LABEL_22;
      }
      __break(1u);
LABEL_21:
      uint64_t v60 = v25;
      uint64_t v61 = v28;
      v59[0] = 0xD000000000000016;
      v59[1] = 0x80000001007B7C50;
      id v44 = [objc_allocWithZone((Class)NSNumber) initWithDouble:a5];
      id v45 = [self stringWithNumber:v44 decimalPrecision:1];
      if (!v45) {
        goto LABEL_29;
      }
LABEL_22:
      uint64_t v46 = v45;
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v48;

      v58._countAndFlagsBits = v47;
      v58._object = v49;
LABEL_23:
      uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      swift_bridgeObjectRelease();
      break;
    case 8:
      goto LABEL_21;
    default:
      return v25;
  }
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_1001CFF8C()
{
  uint64_t result = (uint64_t)[*(id *)(v0 + 48) unitManager];
  if (result)
  {
    unsigned int v2 = (void *)result;
    id v3 = [(id)result userActiveEnergyBurnedUnit];

    uint64_t v4 = self;
    id v5 = [v4 jouleUnitWithMetricPrefix:9];
    unsigned int v6 = [v3 isEqual:v5];

    if (v6)
    {

      return 19019;
    }
    else
    {
      id v7 = [v4 kilocalorieUnit];
      unsigned int v8 = [v3 isEqual:v7];

      if (v8) {
        return 1279345483;
      }
      else {
        return 4997443;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D00B0()
{
  uint64_t result = (uint64_t)[*(id *)(v0 + 48) unitManager];
  if (result)
  {
    unsigned int v2 = (void *)result;
    id v3 = [(id)result userDistanceWalkingRunningHKUnit];

    id v4 = [self meterUnitWithMetricPrefix:9];
    unsigned int v5 = [v3 isEqual:v4];

    if (v5) {
      return 19787;
    }
    else {
      return 18765;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001D0170(void *a1)
{
  id v3 = [self meterUnit];
  [a1 doubleValueForUnit:v3];
  double v5 = v4;

  unsigned int v6 = *(void **)(v1 + 48);
  id result = [v6 unitManager];
  if (result)
  {
    unsigned int v8 = result;
    id v9 = [result userDistanceUnitForDistanceType:1];

    id result = [v6 localizedStringWithDistanceInMeters:v9 distanceUnit:2 unitStyle:2 decimalPrecision:v5];
    if (result)
    {
      id v10 = result;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return (id)v11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001D026C(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  v7._uint64_t countAndFlagsBits = sub_1001CE754();
  uint64_t countAndFlagsBits = v7._countAndFlagsBits;
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  id v10 = [self mainBundle];
  v28._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = a1;
  v11._object = a2;
  v12.value._uint64_t countAndFlagsBits = 0x6F4373646E657254;
  v12.value._object = (void *)0xEF2D676E69686361;
  v13._uint64_t countAndFlagsBits = a1;
  v13._object = a2;
  v28._uint64_t countAndFlagsBits = 0;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v28);
  swift_bridgeObjectRelease();

  static os_log_type_t.debug.getter();
  uint64_t v15 = (void *)HKLogActivity;
  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1007509E0;
  id v17 = v15;
  v18._uint64_t countAndFlagsBits = countAndFlagsBits;
  v18._object = object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000AA64C();
  *(void *)(v16 + 64) = v19;
  *(void *)(v16 + 32) = 0x6F4373646E657254;
  *(void *)(v16 + 40) = 0xEF2D676E69686361;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v20 = (void *)HKLogActivity;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1007509E0;
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = v19;
  *(void *)(v21 + 32) = a1;
  *(void *)(v21 + 40) = a2;
  swift_bridgeObjectRetain();
  id v22 = v20;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  uint64_t v23 = sub_1001CE8F0(v14._countAndFlagsBits, (uint64_t)v14._object, a3, a5, a4);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1001D04E8(uint64_t a1, void *a2, char a3, uint64_t *a4, double a5)
{
  v8._uint64_t countAndFlagsBits = sub_1001CE754();
  uint64_t countAndFlagsBits = v8._countAndFlagsBits;
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  id v11 = [self mainBundle];
  v28._object = (void *)0xE000000000000000;
  v12._uint64_t countAndFlagsBits = a1;
  v12._object = a2;
  v13.value._uint64_t countAndFlagsBits = 0x6F4373646E657254;
  v13.value._object = (void *)0xEF2D676E69686361;
  v14._uint64_t countAndFlagsBits = a1;
  v14._object = a2;
  v28._uint64_t countAndFlagsBits = 0;
  Swift::String v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v28);
  swift_bridgeObjectRelease();

  static os_log_type_t.debug.getter();
  uint64_t v16 = (void *)HKLogActivity;
  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1007509E0;
  id v18 = v16;
  v19._uint64_t countAndFlagsBits = countAndFlagsBits;
  v19._object = object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000AA64C();
  *(void *)(v17 + 64) = v20;
  *(void *)(v17 + 32) = 0x6F4373646E657254;
  *(void *)(v17 + 40) = 0xEF2D676E69686361;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v21 = (void *)HKLogActivity;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1007509E0;
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = v20;
  *(void *)(v22 + 32) = a1;
  *(void *)(v22 + 40) = a2;
  swift_bridgeObjectRetain();
  id v23 = v21;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  uint64_t v24 = sub_1001CF6F8(v15._countAndFlagsBits, v15._object, a3, a4, a5);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_1001D0774(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D07A0(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94((uint64_t *)&unk_10095BF60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D0800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000A06D0();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1007509E0;
  double v6 = ceil((double)a3 / 7.0);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 < 9.22337204e18)
  {
    *(void *)(result + 56) = &type metadata for Int;
    *(void *)(result + 64) = &protocol witness table for Int;
    *(void *)(result + 32) = (uint64_t)v6;
    return String.init(format:_:)();
  }
LABEL_10:
  __break(1u);
  return result;
}

void *sub_1001D0944(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_1001C8E34(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      double v6 = v5;
      MindfulnessSessionViewModel.duration.getter();
      uint64_t v8 = v7;

      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_1001C8E34(v9 > 1, v10 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v8;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001D0AA0(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  double v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    if (!v7) {
      return (uint64_t)v8;
    }
    id v23 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1000ABAB8(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v8 = v23;
    v18[1] = v2;
    unint64_t v19 = a1 & 0xC000000000000001;
    id v11 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v20 = v7;
    unint64_t v21 = a1;
    while (v7 != v10)
    {
      if (v19) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(a1 + 8 * v10 + 32);
      }
      id v13 = v12;
      MindfulnessSessionViewModel.uuid.getter();
      uint64_t v4 = UUID.uuidString.getter();
      uint64_t v2 = v14;
      (*v11)(v6, v22);

      id v23 = v8;
      unint64_t v16 = v8[2];
      unint64_t v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        sub_1000ABAB8(v15 > 1, v16 + 1, 1);
        uint64_t v8 = v23;
      }
      ++v10;
      v8[2] = v16 + 1;
      uint64_t v17 = &v8[2 * v16];
      v17[4] = v4;
      v17[5] = v2;
      uint64_t v7 = v20;
      a1 = v21;
      if (v20 == v10) {
        return (uint64_t)v8;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001D0CB8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  *(void *)&v6[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataSource] = 0;
  uint64_t v10 = OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels;
  *(void *)&v6[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels] = _swiftEmptyArrayStorage;
  *(void *)&v6[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_observers] = _swiftEmptyArrayStorage;
  id v11 = v6;
  unint64_t v12 = swift_bridgeObjectRetain();
  id v13 = sub_1001D68C8(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = (void *)sub_100369518(v13);
  swift_bridgeObjectRelease();
  aBlock[0] = v14;
  sub_1001D40B4(aBlock);
  swift_bridgeObjectRelease();
  unint64_t v15 = aBlock[0];
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_1001D6EA0(_swiftEmptyArrayStorage, (uint64_t)v15, (uint64_t)v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  *(void *)&v6[v10] = v16;
  swift_bridgeObjectRelease();
  *(void *)&v11[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataProvider] = a2;
  *(void *)&v11[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext] = a3;
  *(void *)&v11[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fiuiFormattingManager] = a4;
  *(void *)&v11[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_healthStore] = a5;
  *(void *)&v11[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager] = a6;
  id v17 = a2;
  id v52 = a3;
  id v18 = a4;
  id v19 = a5;
  id v55 = a6;

  uint64_t v20 = (objc_class *)type metadata accessor for MindfulnessSessionListViewController();
  v57.receiver = v11;
  v57.super_class = v20;
  id v21 = [super initWithNibName:0 bundle:0];
  uint64_t v22 = self;
  id v23 = (char *)v21;
  id v24 = [v22 mainBundle];
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v24 localizedStringForKey:v25 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v23 setTitle:v27];

  id v28 = [v23 tableView];
  if (!v28)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v29 = v28;
  [v28 setSectionHeaderTopPadding:0.0];

  id v30 = [v23 tableView];
  if (!v30)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v31 = v30;
  [v30 setSeparatorStyle:0];

  id v32 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  id v33 = [v23 tableView];
  if (!v33)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v34 = v33;
  id v35 = objc_allocWithZone((Class)UITableViewDiffableDataSource);
  aBlock[4] = sub_1001D7D08;
  aBlock[5] = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (void *)1107296256;
  aBlock[2] = sub_1003A0CBC;
  aBlock[3] = &unk_1008BA6D0;
  unint64_t v36 = _Block_copy(aBlock);
  swift_retain();
  id v37 = [v35 initWithTableView:v34 cellProvider:v36];

  _Block_release(v36);
  swift_release();
  uint64_t v38 = *(void **)&v23[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataSource];
  *(void *)&v23[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataSource] = v37;

  id v39 = [v23 tableView];
  if (!v39)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v40 = v39;
  sub_10007E2D8(0, &qword_10094EA80);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v42 = String._bridgeToObjectiveC()();
  [v40 registerClass:ObjCClassFromMetadata forHeaderFooterViewReuseIdentifier:v42];

  id v43 = [v23 tableView];
  if (!v43)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v44 = v43;
  sub_10007E2D8(0, &qword_10094EA88);
  uint64_t v45 = swift_getObjCClassFromMetadata();
  NSString v46 = String._bridgeToObjectiveC()();
  [v44 registerClass:v45 forCellReuseIdentifier:v46];

  id v47 = [v23 tableView];
  if (v47)
  {
    uint64_t v48 = v47;
    type metadata accessor for MindfulnessSessionListTableViewCell();
    uint64_t v49 = swift_getObjCClassFromMetadata();
    NSString v50 = String._bridgeToObjectiveC()();
    [v48 registerClass:v49 forCellReuseIdentifier:v50];

    sub_1001D1A04();
    sub_1001D1500();
    swift_release();

    return (uint64_t)v23;
  }
LABEL_13:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

id sub_1001D1318()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_observers];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    id v3 = self;
    uint64_t v4 = v1 + 32;
    swift_bridgeObjectRetain_n();
    do
    {
      sub_10008F484(v4, (uint64_t)v8);
      id v5 = [v3 defaultCenter];
      sub_10007E4EC(v8, v8[3]);
      [v5 removeObserver:_bridgeAnythingToObjectiveC<A>(_:)()];

      swift_unknownObjectRelease();
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v8);
      v4 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
  }
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for MindfulnessSessionListViewController();
  return [super dealloc];
}

uint64_t sub_1001D1500()
{
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  id v3 = self;
  id v4 = [v3 mainQueue];
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v20 = sub_1001D7220;
  uint64_t v21 = v5;
  unint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  id v18 = sub_1000711BC;
  id v19 = &unk_1008BA540;
  double v6 = _Block_copy(&v16);
  swift_release();
  id v7 = [v2 addObserverForName:UIApplicationSignificantTimeChangeNotification object:0 queue:v4 usingBlock:v6];
  _Block_release(v6);

  id v8 = [v1 defaultCenter];
  uint64_t v9 = kFIMindfulnessSessionDataProviderDidUpdateNotification;
  id v10 = [v3 mainQueue];
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v20 = sub_1001D7228;
  uint64_t v21 = v11;
  unint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  id v18 = sub_1000711BC;
  id v19 = &unk_1008BA568;
  unint64_t v12 = _Block_copy(&v16);
  swift_release();
  id v13 = [v8 addObserverForName:v9 object:0 queue:v10 usingBlock:v12];
  _Block_release(v12);

  sub_1000AFA94((uint64_t *)&unk_1009556C0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10074E640;
  *(void *)(v14 + 56) = swift_getObjectType();
  *(void *)(v14 + 32) = v7;
  *(void *)(v14 + 88) = swift_getObjectType();
  *(void *)(v14 + 64) = v13;
  *(void *)(v0 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_observers) = v14;
  return swift_bridgeObjectRelease();
}

void sub_1001D17D0()
{
  static os_log_type_t.default.getter();
  id v0 = HKLogActivity;
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v2 = Strong;
    id v3 = [Strong tableView];

    if (v3)
    {
      [v3 reloadData];
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1001D18A8()
{
  static os_log_type_t.default.getter();
  id v0 = HKLogActivity;
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v2 = (void *)Strong;
    id v3 = *(void **)(Strong + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataProvider);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v2;
    aBlock[4] = sub_1001D7268;
    aBlock[5] = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100007CA4;
    aBlock[3] = &unk_1008BA5B8;
    uint64_t v5 = _Block_copy(aBlock);
    id v6 = v2;
    swift_release();
    [v3 allMindfulnessSessionsWithCompletion:v5];
    _Block_release(v5);
  }
}

void sub_1001D1A04()
{
  swift_getObjectType();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  id v2 = (void *)HKLogActivity;
  os_log_type_t v3 = v1;
  if (os_log_type_enabled(HKLogActivity, v1))
  {
    uint64_t v4 = v2;
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    sub_10008F1F4(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    sub_10008F1F4(0xD000000000000012, 0x80000001007B7F90, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v3, "%s::%s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  id v8 = sub_1001D1BCC();
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_dataSource);
  if (v9)
  {
    id v10 = v9;
    [v10 applySnapshot:v8 animatingDifferences:1];
  }
}

id sub_1001D1BCC()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v71 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  id v70 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  char v68 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for DateComponents();
  uint64_t v7 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  char v66 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)NSDiffableDataSourceSnapshot) init];
  uint64_t v77 = v1;
  id v78 = v9;
  uint64_t v76 = *(void *)(*(void *)(v1
                              + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels)
                  + 16);
  if (v76)
  {
    v59[1] = ObjectType;
    unsigned int v65 = enum case for Calendar.Component.month(_:);
    unsigned int v64 = enum case for Calendar.Component.year(_:);
    uint64_t v63 = (void (**)(char *, uint64_t))(v3 + 8);
    char v62 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v61 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v10 = swift_bridgeObjectRetain();
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    long long v82 = xmmword_1007509E0;
    unint64_t v75 = 0x80000001007B7F50;
    unint64_t v73 = 0x80000001007B7F70;
    id v72 = (char *)&type metadata for Any + 8;
    long long v60 = xmmword_10074E640;
    uint64_t v74 = v10;
    while (1)
    {
      unint64_t v25 = *(void *)(v10 + 8 * v11 + 32);
      swift_bridgeObjectRetain();
      id v26 = sub_1001D3790(v11);
      sub_1000AFA94(&qword_10094D178);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v82;
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      uint64_t v84 = 0xD000000000000012;
      unint64_t v85 = v75;
      Swift::Int v83 = v11;
      v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 45;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      Swift::Int v83 = sub_100228FE0();
      v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      unint64_t v31 = v85;
      *(void *)(inited + 32) = v84;
      *(void *)(inited + 40) = v31;
      uint64_t v32 = sub_1001D0AA0(v25);
      uint64_t v84 = inited;
      id result = (id)sub_1001E3F2C(v32);
      uint64_t v34 = v84;
      if (v25 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        id result = (id)swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      id v80 = v26;
      uint64_t v81 = v12;
      uint64_t v79 = v34;
      if (v35)
      {
        if ((v25 & 0xC000000000000001) != 0)
        {
          id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          id v36 = *(id *)(v25 + 32);
        }
        id v37 = v36;
        swift_bridgeObjectRelease();
        uint64_t v38 = v68;
        static Calendar.current.getter();
        sub_1000AFA94((uint64_t *)&unk_1009559B0);
        uint64_t v39 = type metadata accessor for Calendar.Component();
        uint64_t v40 = *(void *)(v39 - 8);
        uint64_t v41 = *(void *)(v40 + 72);
        unint64_t v42 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
        uint64_t v43 = swift_allocObject();
        *(_OWORD *)(v43 + 16) = v60;
        unint64_t v44 = v43 + v42;
        uint64_t v45 = *(void (**)(unint64_t, void, uint64_t))(v40 + 104);
        v45(v44, v65, v39);
        v45(v44 + v41, v64, v39);
        sub_1000C6A18(v43);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        NSString v46 = v70;
        MindfulnessSessionViewModel.endDate.getter();
        id v47 = v66;
        Calendar.dateComponents(_:from:)();
        swift_bridgeObjectRelease();
        (*v63)(v46, v71);
        (*v62)(v38, v69);

        uint64_t v13 = DateComponents.description.getter();
        uint64_t v14 = v48;
        (*v61)(v47, v67);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = 0;
        uint64_t v14 = (void *)0xE000000000000000;
      }
      unint64_t v15 = v11 + 1;
      sub_1000AFA94((uint64_t *)&unk_1009556C0);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = v82;
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      uint64_t v84 = 0xD000000000000012;
      unint64_t v85 = v73;
      Swift::Int v83 = v11;
      v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = 45;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      v19._uint64_t countAndFlagsBits = v13;
      v19._object = v14;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      uint64_t v20 = v84;
      unint64_t v21 = v85;
      *(void *)(v16 + 56) = &type metadata for String;
      *(void *)(v16 + 32) = v20;
      *(void *)(v16 + 40) = v21;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = v78;
      [v78 appendSectionsWithIdentifiers:isa];

      sub_1001E5134(v79);
      swift_bridgeObjectRelease();
      Class v24 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v23 appendItemsWithIdentifiers:v24];

      unint64_t v11 = v15;
      uint64_t v12 = v81;
      uint64_t v10 = v74;
      if (v76 == v15)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  os_log_type_t v49 = static os_log_type_t.default.getter();
  NSString v50 = (void *)HKLogActivity;
  os_log_type_t v51 = v49;
  if (os_log_type_enabled(HKLogActivity, v49))
  {
    id v52 = v78;
    uint64_t v53 = v50;
    uint64_t v54 = swift_slowAlloc();
    id v55 = (void *)swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315650;
    uint64_t v56 = _typeName(_:qualified:)();
    Swift::Int v83 = sub_10008F1F4(v56, v57, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2080;
    Swift::Int v83 = sub_10008F1F4(0x70616E53656B616DLL, 0xEE002928746F6873, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 22) = 2112;
    Swift::Int v83 = (Swift::Int)v52;
    id v58 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v55 = v52;

    _os_log_impl((void *)&_mh_execute_header, v53, v51, "%s::%s snapshot %@", (uint8_t *)v54, 0x20u);
    sub_1000AFA94((uint64_t *)&unk_100955620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  return v78;
}

id sub_1001D2564(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    if (IndexPath.row.getter())
    {
      NSString v4 = String._bridgeToObjectiveC()();
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v6 = [a1 dequeueReusableCellWithIdentifier:v4 forIndexPath:isa];

      id v7 = v6;
      unint64_t v8 = sub_1001D3A0C();
      if (v8)
      {
        id v9 = (void *)v8;
        type metadata accessor for MindfulnessSessionListTableViewCell();
        if (swift_dynamicCastClass())
        {
          uint64_t v10 = *(void **)&v3[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext];
          unint64_t v11 = *(void **)&v3[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager];
          uint64_t v12 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v13 = v10;
          id v14 = v11;
          swift_retain();
          sub_100536384(v9, v13, v14, (uint64_t)sub_1001D7D10, v12);

          swift_release_n();
LABEL_12:
          [v7 setSelectionStyle:0];

          return v7;
        }
      }
    }
    else
    {
      NSString v15 = String._bridgeToObjectiveC()();
      Class v16 = IndexPath._bridgeToObjectiveC()().super.isa;
      id v17 = [a1 dequeueReusableCellWithIdentifier:v15 forIndexPath:v16];

      id v7 = v17;
      unint64_t v18 = IndexPath.section.getter();
      id v19 = sub_1001D3790(v18);
      self;
      uint64_t v20 = (void *)swift_dynamicCastObjCClass();
      if (v20)
      {
        [v20 setMindfulnessSessionsStatistics:v19 formattingManager:*(void *)&v3[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fiuiFormattingManager]];

        goto LABEL_12;
      }
    }
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_1001D2878(void *a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)[a1 numberOfRowsInSection:a2] < 1) {
    return 0;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [a1 dequeueReusableHeaderFooterViewWithIdentifier:v9];

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(v2
                  + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels);
  if (*(void *)(v11 + 16) <= a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v2 = *(void *)(v11 + 8 * a2 + 32);
  if (!(v2 >> 62))
  {
    uint64_t v12 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_6:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v14 = *(id *)(v2 + 32);
LABEL_9:
    NSString v15 = v14;
    swift_bridgeObjectRelease();
    if (v10)
    {
      self;
      uint64_t v16 = swift_dynamicCastObjCClass();
      if (v16)
      {
        id v17 = (void *)v16;
        id v18 = v10;
        MindfulnessSessionViewModel.endDate.getter();
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        [v17 setDate:isa];
      }
    }

    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

void sub_1001D2E0C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    if (IndexPath.row.getter() && (unint64_t v2 = sub_1001D3A0C()) != 0)
    {
      uint64_t v3 = (void *)v2;
      NSString v4 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext];
      uint64_t v5 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager];
      objc_allocWithZone((Class)type metadata accessor for MindfulnessSessionDetailViewController());
      uint64_t v6 = sub_10039EDA8(v3, v4, v5);
      uint64_t v7 = (char *)[v1 navigationController];
      if (v7)
      {
        unint64_t v8 = v7;
        [v7 pushViewController:v6 animated:1];

        uint64_t v1 = v8;
      }
    }
    else
    {
      uint64_t v6 = v1;
    }
  }
}

uint64_t sub_1001D30DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_1001D3B7C();
  }
  return a3(1);
}

uint64_t sub_1001D326C(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  NSString v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E2D8(0, (unint64_t *)&qword_1009555D0);
  id v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = v11;
  v12[4] = ObjectType;
  aBlock[4] = sub_1001D68BC;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100070394;
  aBlock[3] = &unk_1008BA518;
  uint64_t v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100075B54();
  sub_1000AFA94((uint64_t *)&unk_1009555E0);
  sub_100075AF8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v16);
}

void sub_1001D3534(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_3:
      type metadata accessor for MindfulnessSessionViewModel();
      static MindfulnessSessionViewModel.makeMindfulnessSessionViewModels(from:)();
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        unint64_t v2 = (char *)Strong;
        unint64_t v3 = swift_bridgeObjectRetain();
        uint64_t v4 = sub_1001D68C8(v3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain_n();
        uint64_t v5 = (void *)sub_100369518(v4);
        swift_bridgeObjectRelease();
        uint64_t v15 = v5;
        sub_1001D40B4(&v15);
        swift_bridgeObjectRelease();
        uint64_t v6 = v15;
        swift_bridgeObjectRetain();
        uint64_t v7 = sub_1001D6EA0(_swiftEmptyArrayStorage, (uint64_t)v6, (uint64_t)v4);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
        *(void *)&v2[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels] = v7;
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v8 = swift_unknownObjectWeakLoadStrong();
      if (v8)
      {
        id v9 = (id)v8;
        sub_1001D1A04();
LABEL_11:

        return;
      }
      return;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  static os_log_type_t.default.getter();
  id v11 = HKLogActivity;
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  uint64_t v12 = (void *)swift_unknownObjectWeakLoadStrong();
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = [v12 navigationController];

    if (v14)
    {
      id v9 = [v14 popViewControllerAnimated:1];

      goto LABEL_11;
    }
  }
}

id sub_1001D3790(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)(v1
                 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels);
  if (*(void *)(v3 + 16) <= a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v2 = *(void *)(v3 + 8 * a1 + 32);
  if (!(v2 >> 62))
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
LABEL_5:
  uint64_t v5 = sub_1001D0944(v2);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5[2];
  if (!v6)
  {
    double v8 = 0.0;
    goto LABEL_14;
  }
  if (v6 == 1)
  {
    uint64_t v7 = 0;
    double v8 = 0.0;
LABEL_12:
    uint64_t v11 = v6 - v7;
    uint64_t v12 = (double *)&v5[v7 + 4];
    do
    {
      double v13 = *v12++;
      double v8 = v8 + v13;
      --v11;
    }
    while (v11);
    goto LABEL_14;
  }
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
  id v9 = (double *)(v5 + 5);
  double v8 = 0.0;
  uint64_t v10 = v6 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v8 = v8 + *(v9 - 1) + *v9;
    v9 += 2;
    v10 -= 2;
  }
  while (v10);
  if (v6 != v7) {
    goto LABEL_12;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  id v14 = (objc_class *)type metadata accessor for MindfulnessSessionsStatistics();
  uint64_t v15 = (char *)objc_allocWithZone(v14);
  *(void *)&v15[OBJC_IVAR___CHMindfulnessSessionsStatistics_sessionCount] = v4;
  *(double *)&v15[OBJC_IVAR___CHMindfulnessSessionsStatistics_totalDuration] = v8;
  v17.receiver = v15;
  v17.super_class = v14;
  return [super init];
}

void sub_1001D3904()
{
  uint64_t v1 = v0;
  if (IndexPath.row.getter())
  {
    unint64_t v2 = sub_1001D3A0C();
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext];
      uint64_t v5 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager];
      objc_allocWithZone((Class)type metadata accessor for MindfulnessSessionDetailViewController());
      double v8 = sub_10039EDA8(v3, v4, v5);
      id v6 = [v1 navigationController];
      if (v6)
      {
        uint64_t v7 = v6;
        [v6 pushViewController:v8 animated:1];
      }
    }
  }
}

unint64_t sub_1001D3A0C()
{
  uint64_t v1 = IndexPath.section.getter();
  unint64_t result = (unint64_t)[v0 tableView];
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v3 = (void *)result;
  id v4 = [(id)result numberOfSections];

  if (v1 >= (uint64_t)v4) {
    return 0;
  }
  uint64_t v5 = IndexPath.row.getter();
  unint64_t result = (unint64_t)[v0 tableView];
  if (result)
  {
    id v6 = (void *)result;
    id v7 = [(id)result numberOfRowsInSection:IndexPath.section.getter()];

    if (v5 < (uint64_t)v7)
    {
      uint64_t v8 = IndexPath.row.getter();
      unint64_t v9 = v8 - 1;
      if (__OFSUB__(v8, 1))
      {
        __break(1u);
      }
      else
      {
        unint64_t result = IndexPath.section.getter();
        if ((result & 0x8000000000000000) == 0)
        {
          uint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_allMindfulnessSessionViewModels];
          if (result < *(void *)(v10 + 16))
          {
            uint64_t v11 = *(void *)(v10 + 8 * result + 32);
            if ((v11 & 0xC000000000000001) == 0)
            {
              if ((v9 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v9 < *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                return (unint64_t)*(id *)(v11 + 8 * v9 + 32);
              }
              __break(1u);
              goto LABEL_20;
            }
LABEL_17:
            swift_bridgeObjectRetain();
            uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            swift_bridgeObjectRelease();
            return v12;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
    return 0;
  }
LABEL_21:
  __break(1u);
  return result;
}

void sub_1001D3B7C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v3 = sub_1001D3A0C();
  if (v3)
  {
    id v4 = (void *)v3;
    uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_healthStore);
    if ((unint64_t)MindfulnessSessionViewModel.mindfulnessSessions.getter() >> 62)
    {
      sub_10007E2D8(0, &qword_10094EA68);
      _bridgeCocoaArray<A>(_:)();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_10007E2D8(0, &qword_10094EA68);
    }
    swift_bridgeObjectRelease();
    sub_10007E2D8(0, &qword_10094EA68);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = ObjectType;
    v11[4] = sub_1001D40AC;
    v11[5] = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10000D15C;
    v11[3] = &unk_1008BA4A0;
    uint64_t v8 = _Block_copy(v11);
    swift_release();
    [v5 _deleteObjects:isa options:0 completion:v8];

    _Block_release(v8);
    id v9 = objc_retain(*(id *)(*(void *)(v1
                                       + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext)
                           + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider));
    id v10 = v4;
    sub_1002DD368(v10, (uint64_t)v9);
  }
}

void sub_1001D3D90(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    os_log_type_t v2 = static os_log_type_t.error.getter();
    unint64_t v3 = (void *)HKLogActivity;
    os_log_type_t v4 = v2;
    if (os_log_type_enabled(HKLogActivity, v2))
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v5 = v3;
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315394;
      uint64_t v8 = _typeName(_:qualified:)();
      sub_10008F1F4(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2112;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v7 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v4, "%s failed to delete mindfulness session with error %@", (uint8_t *)v6, 0x16u);
      sub_1000AFA94((uint64_t *)&unk_100955620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t type metadata accessor for MindfulnessSessionListViewController()
{
  return self;
}

uint64_t sub_1001D409C()
{
  return swift_deallocObject();
}

void sub_1001D40AC(uint64_t a1, uint64_t a2)
{
}

Swift::Int sub_1001D40B4(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for DateComponents() - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = (void *)sub_1000C7B0C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1001D41D8(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1001D415C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1001EEFA4(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1001D4EDC(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_1001D41D8(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DateComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v179 = (char *)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  v192 = (char *)&v170 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v170 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  v196 = (char *)&v170 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  objc_super v17 = (char *)&v170 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  long long v183 = (char *)&v170 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v170 - v21;
  __chkstk_darwin(v20);
  char v176 = (char *)&v170 - v23;
  v195 = a1;
  Swift::Int v24 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v24);
  if (result >= v24)
  {
    if (v24 < 0) {
      goto LABEL_173;
    }
    if (v24) {
      return sub_1001D57C4(0, v24, 1, v195);
    }
    return result;
  }
  if (v24 >= 0) {
    uint64_t v26 = v24;
  }
  else {
    uint64_t v26 = v24 + 1;
  }
  if (v24 < -1) {
    goto LABEL_181;
  }
  uint64_t v197 = v4;
  v185 = v12;
  v175 = v22;
  Swift::Int v172 = result;
  if (v24 < 2)
  {
    unint64_t v31 = (char *)_swiftEmptyArrayStorage;
    unint64_t v182 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v171 = _swiftEmptyArrayStorage;
    if (v24 != 1)
    {
      unint64_t v33 = _swiftEmptyArrayStorage[2];
LABEL_139:
      if (v33 >= 2)
      {
        uint64_t v162 = *v195;
        do
        {
          unint64_t v163 = v33 - 2;
          if (v33 < 2) {
            goto LABEL_168;
          }
          if (!v162) {
            goto LABEL_180;
          }
          uint64_t v164 = v31;
          uint64_t v165 = v31 + 32;
          uint64_t v166 = *(void *)&v31[16 * v163 + 32];
          uint64_t v167 = *(void *)&v31[16 * v33 + 24];
          sub_1001D5D18(v162 + *(void *)(v5 + 72) * v166, v162 + *(void *)(v5 + 72) * *(void *)&v165[16 * v33 - 16], v162 + *(void *)(v5 + 72) * v167, v182);
          if (v2) {
            break;
          }
          if (v167 < v166) {
            goto LABEL_169;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v164 = sub_1001EEF68((uint64_t)v164);
          }
          if (v163 >= *((void *)v164 + 2)) {
            goto LABEL_170;
          }
          uint64_t v168 = &v164[16 * v163 + 32];
          *(void *)uint64_t v168 = v166;
          *((void *)v168 + 1) = v167;
          unint64_t v169 = *((void *)v164 + 2);
          if (v33 > v169) {
            goto LABEL_171;
          }
          unint64_t v31 = v164;
          memmove(&v164[16 * v33 + 16], &v164[16 * v33 + 32], 16 * (v169 - v33));
          *((void *)v164 + 2) = v169 - 1;
          unint64_t v33 = v169 - 1;
        }
        while (v169 > 2);
      }
LABEL_150:
      swift_bridgeObjectRelease();
      v171[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    Swift::Int v27 = v24;
    uint64_t v28 = v26 >> 1;
    uint64_t v29 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v29 + 16) = v28;
    Swift::Int v24 = v27;
    unint64_t v30 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v171 = (void *)v29;
    unint64_t v182 = v29 + v30;
  }
  uint64_t v32 = 0;
  v188 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v189 = v5 + 16;
  v193 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  unint64_t v31 = (char *)_swiftEmptyArrayStorage;
  uint64_t v181 = v5;
  long long v174 = v17;
  while (1)
  {
    uint64_t v177 = v31;
    uint64_t v34 = (uint64_t)v32;
    Swift::Int v35 = (Swift::Int)v32 + 1;
    Swift::Int v180 = v34;
    if (v35 >= v24)
    {
      Swift::Int v55 = v35;
      uint64_t v52 = v197;
      unint64_t v31 = v177;
      goto LABEL_67;
    }
    Swift::Int v191 = v24;
    uint64_t v36 = *v195;
    uint64_t v37 = v5;
    uint64_t v38 = *(void *)(v5 + 72);
    Swift::Int v186 = v35;
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
    uint64_t v40 = v197;
    v39(v176, v36 + v38 * v35, v197);
    long long v184 = (char *)v36;
    uint64_t v194 = v38;
    v187 = (void (*)(char *, char *, uint64_t))v39;
    v39(v175, v36 + v38 * v34, v40);
    uint64_t v41 = DateComponents.year.getter();
    if ((v42 & 1) != 0
      || (uint64_t v43 = v41, v44 = DateComponents.year.getter(), (v45 & 1) != 0)
      || (uint64_t v46 = v44, v47 = DateComponents.month.getter(), (v48 & 1) != 0))
    {
      LODWORD(v190) = 1;
    }
    else
    {
      uint64_t v49 = v47;
      uint64_t v50 = DateComponents.month.getter();
      LODWORD(v190) = 1;
      if ((v51 & 1) == 0)
      {
        uint64_t v52 = v197;
        if (v46 >= v43)
        {
          BOOL v54 = v43 >= v46 && v50 < v49;
          LODWORD(v190) = v54;
        }
        goto LABEL_31;
      }
    }
    uint64_t v52 = v197;
LABEL_31:
    uint64_t v56 = *v188;
    (*v188)(v175, v52);
    v56(v176, v52);
    Swift::Int v24 = v191;
    if (v180 + 2 >= v191)
    {
      Swift::Int v55 = v180 + 2;
    }
    else
    {
      uint64_t v173 = v2;
      v186 *= v194;
      unint64_t v57 = v184;
      Swift::Int v55 = v180 + 2;
      uint64_t v58 = v194 * (v180 + 2);
      while (1)
      {
        id v59 = v187;
        v187(v183, &v57[v58], v52);
        v59(v17, &v57[v186], v52);
        uint64_t v60 = DateComponents.year.getter();
        if ((v61 & 1) != 0
          || (uint64_t v62 = v60, v63 = DateComponents.year.getter(), (v64 & 1) != 0)
          || (uint64_t v65 = v63, v66 = DateComponents.month.getter(), (v67 & 1) != 0))
        {
          int v73 = 1;
        }
        else
        {
          uint64_t v68 = v66;
          uint64_t v69 = DateComponents.month.getter();
          BOOL v72 = v62 >= v65 && v69 < v68;
          if (v65 < v62) {
            BOOL v72 = 1;
          }
          int v73 = (v70 & 1) != 0 || v72;
        }
        uint64_t v52 = v197;
        v56(v17, v197);
        v56(v183, v52);
        if (v190 != v73) {
          break;
        }
        v57 += v194;
        ++v55;
        Swift::Int v24 = v191;
        if (v191 == v55)
        {
          Swift::Int v55 = v191;
          uint64_t v2 = v173;
          goto LABEL_53;
        }
      }
      uint64_t v2 = v173;
      Swift::Int v24 = v191;
    }
LABEL_53:
    unint64_t v31 = v177;
    uint64_t v34 = v180;
    if (v190)
    {
      if (v55 < v180) {
        goto LABEL_174;
      }
      if (v180 < v55)
      {
        uint64_t v173 = v2;
        uint64_t v74 = 0;
        uint64_t v75 = v194 * (v55 - 1);
        uint64_t v76 = v55 * v194;
        Swift::Int v77 = v180;
        uint64_t v78 = v180 * v194;
        do
        {
          if (v77 != v55 + v74 - 1)
          {
            uint64_t v79 = v184;
            if (!v184) {
              goto LABEL_179;
            }
            id v80 = &v184[v78];
            uint64_t v81 = &v184[v75];
            v190 = *v193;
            v190(v179, &v184[v78], v197);
            if (v78 < v75 || v80 >= &v79[v76])
            {
              uint64_t v52 = v197;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              uint64_t v52 = v197;
              if (v78 != v75) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v190(v81, v179, v52);
          }
          ++v77;
          --v74;
          v75 -= v194;
          v76 -= v194;
          v78 += v194;
        }
        while (v77 < v55 + v74);
        uint64_t v2 = v173;
        unint64_t v31 = v177;
        uint64_t v34 = v180;
        Swift::Int v24 = v191;
      }
    }
LABEL_67:
    if (v55 >= v24) {
      goto LABEL_91;
    }
    if (__OFSUB__(v55, v34)) {
      goto LABEL_172;
    }
    if (v55 - v34 >= v172) {
      goto LABEL_91;
    }
    if (__OFADD__(v34, v172)) {
      goto LABEL_175;
    }
    Swift::Int v82 = v34 + v172 >= v24 ? v24 : v34 + v172;
    if (v82 < v34) {
      break;
    }
    if (v55 != v82)
    {
      uint64_t v173 = v2;
      Swift::Int v83 = *(void *)(v181 + 72);
      long long v184 = *(char **)(v181 + 16);
      uint64_t v194 = v83 * (v55 - 1);
      Swift::Int v186 = v83;
      Swift::Int v84 = v55 * v83;
      Swift::Int v178 = v82;
      do
      {
        uint64_t v87 = 0;
        unint64_t v88 = (void (*)(char *, char *, uint64_t))v34;
        v190 = (void (*)(char *, char *, uint64_t))v55;
        v187 = (void (*)(char *, char *, uint64_t))v84;
        while (1)
        {
          uint64_t v90 = *v195;
          Swift::Int v191 = v84 + v87;
          uint64_t v91 = v52;
          uint64_t v92 = v52;
          unint64_t v93 = (void (*)(char *, uint64_t, uint64_t))v184;
          ((void (*)(char *, Swift::Int, uint64_t))v184)(v196, v84 + v87 + v90, v91);
          double v94 = v185;
          v93(v185, v194 + v87 + v90, v92);
          uint64_t v95 = DateComponents.year.getter();
          if ((v96 & 1) == 0)
          {
            uint64_t v97 = v95;
            uint64_t v98 = DateComponents.year.getter();
            if ((v99 & 1) == 0)
            {
              uint64_t v100 = v98;
              uint64_t v101 = DateComponents.month.getter();
              if ((v102 & 1) == 0)
              {
                uint64_t v103 = v101;
                uint64_t v104 = DateComponents.month.getter();
                if ((v105 & 1) == 0 && v100 >= v97 && (v97 < v100 || v104 >= v103)) {
                  break;
                }
              }
            }
          }
          uint64_t v106 = *v188;
          uint64_t v107 = v197;
          (*v188)(v94, v197);
          v106(v196, v107);
          uint64_t v108 = *v195;
          if (!*v195) {
            goto LABEL_177;
          }
          Swift::Int v84 = (Swift::Int)v187;
          uint64_t v109 = v107;
          Swift::String v110 = (char *)(v108 + v194 + v87);
          uint64_t v111 = *v193;
          (*v193)(v192, (char *)v187 + v108 + v87, v109);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t v89 = v110;
          uint64_t v52 = v197;
          v111(v89, v192, v197);
          v87 -= v186;
          unint64_t v88 = (void (*)(char *, char *, uint64_t))((char *)v88 + 1);
          double v86 = v190;
          if (v190 == v88) {
            goto LABEL_78;
          }
        }
        unint64_t v85 = *v188;
        uint64_t v52 = v197;
        (*v188)(v94, v197);
        v85(v196, v52);
        double v86 = v190;
        Swift::Int v84 = (Swift::Int)v187;
LABEL_78:
        Swift::Int v55 = (Swift::Int)v86 + 1;
        v194 += v186;
        v84 += v186;
        uint64_t v34 = v180;
      }
      while (v55 != v178);
      Swift::Int v55 = v178;
      uint64_t v2 = v173;
      unint64_t v31 = v177;
    }
LABEL_91:
    if (v55 < v34) {
      goto LABEL_167;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v31 = sub_1001EE868(0, *((void *)v31 + 2) + 1, 1, v31);
    }
    unint64_t v113 = *((void *)v31 + 2);
    unint64_t v112 = *((void *)v31 + 3);
    unint64_t v33 = v113 + 1;
    if (v113 >= v112 >> 1) {
      unint64_t v31 = sub_1001EE868((char *)(v112 > 1), v113 + 1, 1, v31);
    }
    *((void *)v31 + 2) = v33;
    char v114 = v31 + 32;
    uint64_t v115 = &v31[16 * v113 + 32];
    *(void *)uint64_t v115 = v34;
    *((void *)v115 + 1) = v55;
    v190 = (void (*)(char *, char *, uint64_t))v55;
    if (v113)
    {
      while (1)
      {
        unint64_t v116 = v33 - 1;
        if (v33 >= 4)
        {
          uint64_t v121 = &v114[16 * v33];
          uint64_t v122 = *((void *)v121 - 8);
          uint64_t v123 = *((void *)v121 - 7);
          BOOL v127 = __OFSUB__(v123, v122);
          uint64_t v124 = v123 - v122;
          if (v127) {
            goto LABEL_156;
          }
          uint64_t v126 = *((void *)v121 - 6);
          uint64_t v125 = *((void *)v121 - 5);
          BOOL v127 = __OFSUB__(v125, v126);
          uint64_t v119 = v125 - v126;
          char v120 = v127;
          if (v127) {
            goto LABEL_157;
          }
          unint64_t v128 = v33 - 2;
          v129 = &v114[16 * v33 - 32];
          uint64_t v131 = *(void *)v129;
          uint64_t v130 = *((void *)v129 + 1);
          BOOL v127 = __OFSUB__(v130, v131);
          uint64_t v132 = v130 - v131;
          if (v127) {
            goto LABEL_159;
          }
          BOOL v127 = __OFADD__(v119, v132);
          uint64_t v133 = v119 + v132;
          if (v127) {
            goto LABEL_162;
          }
          if (v133 >= v124)
          {
            v151 = &v114[16 * v116];
            uint64_t v153 = *(void *)v151;
            uint64_t v152 = *((void *)v151 + 1);
            BOOL v127 = __OFSUB__(v152, v153);
            uint64_t v154 = v152 - v153;
            if (v127) {
              goto LABEL_166;
            }
            BOOL v144 = v119 < v154;
            goto LABEL_128;
          }
        }
        else
        {
          if (v33 != 3)
          {
            uint64_t v145 = *((void *)v31 + 4);
            uint64_t v146 = *((void *)v31 + 5);
            BOOL v127 = __OFSUB__(v146, v145);
            uint64_t v138 = v146 - v145;
            char v139 = v127;
            goto LABEL_122;
          }
          uint64_t v118 = *((void *)v31 + 4);
          uint64_t v117 = *((void *)v31 + 5);
          BOOL v127 = __OFSUB__(v117, v118);
          uint64_t v119 = v117 - v118;
          char v120 = v127;
        }
        if (v120) {
          goto LABEL_158;
        }
        unint64_t v128 = v33 - 2;
        char v134 = &v114[16 * v33 - 32];
        uint64_t v136 = *(void *)v134;
        uint64_t v135 = *((void *)v134 + 1);
        BOOL v137 = __OFSUB__(v135, v136);
        uint64_t v138 = v135 - v136;
        char v139 = v137;
        if (v137) {
          goto LABEL_161;
        }
        uint64_t v140 = &v114[16 * v116];
        uint64_t v142 = *(void *)v140;
        uint64_t v141 = *((void *)v140 + 1);
        BOOL v127 = __OFSUB__(v141, v142);
        uint64_t v143 = v141 - v142;
        if (v127) {
          goto LABEL_164;
        }
        if (__OFADD__(v138, v143)) {
          goto LABEL_165;
        }
        if (v138 + v143 >= v119)
        {
          BOOL v144 = v119 < v143;
LABEL_128:
          if (v144) {
            unint64_t v116 = v128;
          }
          goto LABEL_130;
        }
LABEL_122:
        if (v139) {
          goto LABEL_160;
        }
        v147 = &v114[16 * v116];
        uint64_t v149 = *(void *)v147;
        uint64_t v148 = *((void *)v147 + 1);
        BOOL v127 = __OFSUB__(v148, v149);
        uint64_t v150 = v148 - v149;
        if (v127) {
          goto LABEL_163;
        }
        if (v150 < v138) {
          goto LABEL_14;
        }
LABEL_130:
        unint64_t v155 = v116 - 1;
        if (v116 - 1 >= v33)
        {
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
          goto LABEL_176;
        }
        if (!*v195) {
          goto LABEL_178;
        }
        uint64_t v156 = v31;
        uint64_t v157 = &v114[16 * v155];
        uint64_t v158 = *(void *)v157;
        v159 = &v114[16 * v116];
        uint64_t v160 = *((void *)v159 + 1);
        sub_1001D5D18(*v195 + *(void *)(v181 + 72) * *(void *)v157, *v195 + *(void *)(v181 + 72) * *(void *)v159, *v195 + *(void *)(v181 + 72) * v160, v182);
        if (v2) {
          goto LABEL_150;
        }
        if (v160 < v158) {
          goto LABEL_153;
        }
        if (v116 > *((void *)v156 + 2)) {
          goto LABEL_154;
        }
        *(void *)uint64_t v157 = v158;
        *(void *)&v114[16 * v155 + 8] = v160;
        unint64_t v161 = *((void *)v156 + 2);
        if (v116 >= v161) {
          goto LABEL_155;
        }
        unint64_t v31 = v156;
        unint64_t v33 = v161 - 1;
        memmove(&v114[16 * v116], v159 + 16, 16 * (v161 - 1 - v116));
        *((void *)v156 + 2) = v161 - 1;
        if (v161 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v33 = 1;
LABEL_14:
    Swift::Int v24 = v195[1];
    uint64_t v32 = v190;
    objc_super v17 = v174;
    uint64_t v5 = v181;
    if ((uint64_t)v190 >= v24) {
      goto LABEL_139;
    }
  }
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1001D4EDC(uint64_t *a1)
{
  uint64_t v130 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v130 - 8);
  uint64_t v3 = __chkstk_darwin(v130);
  v129 = (char *)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v128 = (char *)&v115 - v5;
  Swift::Int v6 = a1[1];
  Swift::Int v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0) {
      goto LABEL_134;
    }
    if (v6) {
      sub_1001D5B20(0, v6, 1, a1);
    }
    return;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_142;
  }
  Swift::Int v120 = v7;
  if (v6 < 2)
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    uint64_t v133 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v125 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_100:
      uint64_t v106 = v126;
      if (v14 >= 2)
      {
        uint64_t v107 = *a1;
        do
        {
          unint64_t v108 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_129;
          }
          if (!v107) {
            goto LABEL_141;
          }
          uint64_t v109 = v11;
          Swift::String v110 = v11 + 32;
          uint64_t v111 = *(void *)&v11[16 * v108 + 32];
          uint64_t v112 = *(void *)&v11[16 * v14 + 24];
          sub_1001D63B8((void **)(v107 + 8 * v111), (id *)(v107 + 8 * *(void *)&v110[16 * v14 - 16]), (id *)(v107 + 8 * v112), v125);
          if (v106) {
            break;
          }
          if (v112 < v111) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v109 = sub_1001EEF68((uint64_t)v109);
          }
          if (v108 >= *((void *)v109 + 2)) {
            goto LABEL_131;
          }
          unint64_t v113 = &v109[16 * v108 + 32];
          *(void *)unint64_t v113 = v111;
          *((void *)v113 + 1) = v112;
          unint64_t v114 = *((void *)v109 + 2);
          if (v14 > v114) {
            goto LABEL_132;
          }
          uint64_t v11 = v109;
          memmove(&v109[16 * v14 + 16], &v109[16 * v14 + 32], 16 * (v114 - v14));
          *((void *)v109 + 2) = v114 - 1;
          unint64_t v14 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    type metadata accessor for MindfulnessSessionViewModel();
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    uint64_t v125 = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v133 = v10;
  }
  Swift::Int v12 = 0;
  uint64_t v13 = *a1;
  BOOL v127 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v118 = v13 + 16;
  unint64_t v116 = a1;
  uint64_t v117 = v13 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v123 = v6;
  uint64_t v132 = v13;
  while (1)
  {
    Swift::Int v15 = v12;
    Swift::Int v16 = v12 + 1;
    Swift::Int v122 = v12;
    if (v12 + 1 < v6)
    {
      objc_super v17 = *(void **)(v13 + 8 * v12);
      id v18 = *(id *)(v13 + 8 * v16);
      id v19 = v17;
      uint64_t v20 = v128;
      MindfulnessSessionViewModel.endDate.getter();
      uint64_t v21 = v129;
      MindfulnessSessionViewModel.endDate.getter();
      LODWORD(v131) = static Date.> infix(_:_:)();
      uint64_t v22 = (char *)*v127;
      uint64_t v23 = v21;
      uint64_t v24 = v130;
      (*v127)(v23, v130);
      uint64_t v124 = v22;
      ((void (*)(char *, uint64_t))v22)(v20, v24);

      Swift::Int v6 = v123;
      Swift::Int v16 = v15 + 2;
      if (v15 + 2 < v123)
      {
        uint64_t v119 = v11;
        unint64_t v25 = (id *)(v118 + 8 * v15);
        while (1)
        {
          Swift::Int v26 = v16;
          Swift::Int v27 = *(v25 - 1);
          id v28 = *v25;
          id v29 = v27;
          unint64_t v30 = v128;
          MindfulnessSessionViewModel.endDate.getter();
          unint64_t v31 = v129;
          MindfulnessSessionViewModel.endDate.getter();
          LODWORD(v27) = static Date.> infix(_:_:)();
          uint64_t v32 = v31;
          uint64_t v33 = v130;
          uint64_t v34 = (void (*)(char *, uint64_t))v124;
          ((void (*)(char *, uint64_t))v124)(v32, v130);
          v34(v30, v33);

          if ((v131 ^ v27)) {
            break;
          }
          Swift::Int v16 = v26 + 1;
          ++v25;
          Swift::Int v6 = v123;
          if (v123 == v26 + 1)
          {
            Swift::Int v16 = v123;
            goto LABEL_22;
          }
        }
        Swift::Int v6 = v123;
        Swift::Int v16 = v26;
LABEL_22:
        Swift::Int v15 = v122;
        uint64_t v11 = v119;
      }
      uint64_t v13 = v132;
      if (v131)
      {
        if (v16 < v15) {
          goto LABEL_135;
        }
        if (v15 < v16)
        {
          Swift::Int v35 = (uint64_t *)(v117 + 8 * v16);
          Swift::Int v36 = v16;
          Swift::Int v37 = v15;
          uint64_t v38 = (uint64_t *)(v132 + 8 * v15);
          do
          {
            if (v37 != --v36)
            {
              if (!v13) {
                goto LABEL_140;
              }
              uint64_t v39 = *v38;
              *uint64_t v38 = *v35;
              *Swift::Int v35 = v39;
            }
            ++v37;
            --v35;
            ++v38;
          }
          while (v37 < v36);
        }
      }
    }
    if (v16 >= v6) {
      goto LABEL_50;
    }
    if (__OFSUB__(v16, v15)) {
      goto LABEL_133;
    }
    if (v16 - v15 >= v120) {
      goto LABEL_50;
    }
    if (__OFADD__(v15, v120)) {
      goto LABEL_136;
    }
    Swift::Int v40 = v15 + v120 >= v6 ? v6 : v15 + v120;
    if (v40 < v15) {
      break;
    }
    if (v16 != v40)
    {
      uint64_t v119 = v11;
      uint64_t v41 = (char *)(v117 + 8 * v16);
      Swift::Int v121 = v40;
      do
      {
        Swift::Int v131 = v16;
        char v42 = *(void **)(v13 + 8 * v16);
        Swift::Int v43 = v15;
        uint64_t v124 = v41;
        uint64_t v44 = v41;
        while (1)
        {
          char v45 = *(void **)v44;
          id v46 = v42;
          id v47 = v45;
          char v48 = v128;
          MindfulnessSessionViewModel.endDate.getter();
          uint64_t v49 = v129;
          MindfulnessSessionViewModel.endDate.getter();
          LOBYTE(v45) = static Date.> infix(_:_:)();
          uint64_t v50 = *v127;
          char v51 = v49;
          uint64_t v52 = v130;
          (*v127)(v51, v130);
          v50(v48, v52);

          if ((v45 & 1) == 0) {
            break;
          }
          uint64_t v13 = v132;
          if (!v132) {
            goto LABEL_138;
          }
          uint64_t v53 = *(void **)v44;
          char v42 = (void *)*((void *)v44 + 1);
          *(void *)uint64_t v44 = v42;
          *((void *)v44 + 1) = v53;
          v44 -= 8;
          if (v131 == ++v43) {
            goto LABEL_43;
          }
        }
        uint64_t v13 = v132;
LABEL_43:
        Swift::Int v16 = v131 + 1;
        uint64_t v41 = v124 + 8;
        Swift::Int v15 = v122;
      }
      while (v131 + 1 != v121);
      Swift::Int v16 = v121;
      uint64_t v11 = v119;
    }
LABEL_50:
    if (v16 < v15) {
      goto LABEL_128;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1001EE868(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v55 = *((void *)v11 + 2);
    unint64_t v54 = *((void *)v11 + 3);
    unint64_t v14 = v55 + 1;
    uint64_t v13 = v132;
    if (v55 >= v54 >> 1)
    {
      char v105 = sub_1001EE868((char *)(v54 > 1), v55 + 1, 1, v11);
      uint64_t v13 = v132;
      uint64_t v11 = v105;
    }
    *((void *)v11 + 2) = v14;
    uint64_t v56 = v11 + 32;
    unint64_t v57 = &v11[16 * v55 + 32];
    *(void *)unint64_t v57 = v15;
    *((void *)v57 + 1) = v16;
    Swift::Int v131 = v16;
    if (v55)
    {
      while (1)
      {
        unint64_t v58 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v63 = &v56[16 * v14];
          uint64_t v64 = *((void *)v63 - 8);
          uint64_t v65 = *((void *)v63 - 7);
          BOOL v69 = __OFSUB__(v65, v64);
          uint64_t v66 = v65 - v64;
          if (v69) {
            goto LABEL_117;
          }
          uint64_t v68 = *((void *)v63 - 6);
          uint64_t v67 = *((void *)v63 - 5);
          BOOL v69 = __OFSUB__(v67, v68);
          uint64_t v61 = v67 - v68;
          char v62 = v69;
          if (v69) {
            goto LABEL_118;
          }
          unint64_t v70 = v14 - 2;
          uint64_t v71 = &v56[16 * v14 - 32];
          uint64_t v73 = *(void *)v71;
          uint64_t v72 = *((void *)v71 + 1);
          BOOL v69 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          if (v69) {
            goto LABEL_120;
          }
          BOOL v69 = __OFADD__(v61, v74);
          uint64_t v75 = v61 + v74;
          if (v69) {
            goto LABEL_123;
          }
          if (v75 >= v66)
          {
            unint64_t v93 = &v56[16 * v58];
            uint64_t v95 = *(void *)v93;
            uint64_t v94 = *((void *)v93 + 1);
            BOOL v69 = __OFSUB__(v94, v95);
            uint64_t v96 = v94 - v95;
            if (v69) {
              goto LABEL_127;
            }
            BOOL v86 = v61 < v96;
            goto LABEL_87;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v87 = *((void *)v11 + 4);
            uint64_t v88 = *((void *)v11 + 5);
            BOOL v69 = __OFSUB__(v88, v87);
            uint64_t v80 = v88 - v87;
            char v81 = v69;
            goto LABEL_81;
          }
          uint64_t v60 = *((void *)v11 + 4);
          uint64_t v59 = *((void *)v11 + 5);
          BOOL v69 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          char v62 = v69;
        }
        if (v62) {
          goto LABEL_119;
        }
        unint64_t v70 = v14 - 2;
        uint64_t v76 = &v56[16 * v14 - 32];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v79 = __OFSUB__(v77, v78);
        uint64_t v80 = v77 - v78;
        char v81 = v79;
        if (v79) {
          goto LABEL_122;
        }
        Swift::Int v82 = &v56[16 * v58];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v69 = __OFSUB__(v83, v84);
        uint64_t v85 = v83 - v84;
        if (v69) {
          goto LABEL_125;
        }
        if (__OFADD__(v80, v85)) {
          goto LABEL_126;
        }
        if (v80 + v85 >= v61)
        {
          BOOL v86 = v61 < v85;
LABEL_87:
          if (v86) {
            unint64_t v58 = v70;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v81) {
          goto LABEL_121;
        }
        uint64_t v89 = &v56[16 * v58];
        uint64_t v91 = *(void *)v89;
        uint64_t v90 = *((void *)v89 + 1);
        BOOL v69 = __OFSUB__(v90, v91);
        uint64_t v92 = v90 - v91;
        if (v69) {
          goto LABEL_124;
        }
        if (v92 < v80) {
          goto LABEL_14;
        }
LABEL_89:
        unint64_t v97 = v58 - 1;
        if (v58 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v13) {
          goto LABEL_139;
        }
        uint64_t v98 = v11;
        char v99 = &v56[16 * v97];
        uint64_t v100 = *(void *)v99;
        uint64_t v101 = &v56[16 * v58];
        uint64_t v102 = *((void *)v101 + 1);
        uint64_t v103 = v126;
        sub_1001D63B8((void **)(v13 + 8 * *(void *)v99), (id *)(v13 + 8 * *(void *)v101), (id *)(v13 + 8 * v102), v125);
        uint64_t v126 = v103;
        if (v103) {
          goto LABEL_111;
        }
        if (v102 < v100) {
          goto LABEL_114;
        }
        if (v58 > *((void *)v98 + 2)) {
          goto LABEL_115;
        }
        *(void *)char v99 = v100;
        *(void *)&v56[16 * v97 + 8] = v102;
        unint64_t v104 = *((void *)v98 + 2);
        if (v58 >= v104) {
          goto LABEL_116;
        }
        uint64_t v11 = v98;
        unint64_t v14 = v104 - 1;
        memmove(&v56[16 * v58], v101 + 16, 16 * (v104 - 1 - v58));
        *((void *)v98 + 2) = v104 - 1;
        uint64_t v13 = v132;
        if (v104 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v14 = 1;
LABEL_14:
    Swift::Int v6 = v123;
    Swift::Int v12 = v131;
    if (v131 >= v123)
    {
      a1 = v116;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1001D57C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v52 = a4;
  uint64_t v42 = a1;
  uint64_t v6 = type metadata accessor for DateComponents();
  uint64_t v7 = __chkstk_darwin(v6);
  char v51 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t result = __chkstk_darwin(v9);
  Swift::Int v15 = (char *)&v40 - v14;
  uint64_t v48 = a3;
  uint64_t v41 = a2;
  if (a3 != a2)
  {
    objc_super v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v16 = v13 + 16;
    uint64_t v18 = *(void *)(v16 + 56);
    uint64_t v44 = (void (**)(char *, uint64_t))(v16 - 8);
    char v45 = v17;
    uint64_t v46 = v16;
    uint64_t v47 = v18;
    uint64_t v49 = (void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v54 = v18 * (v48 - 1);
    uint64_t v53 = v18 * v48;
LABEL_6:
    uint64_t v20 = 0;
    uint64_t v21 = v42;
    while (1)
    {
      uint64_t v22 = *v52;
      uint64_t v50 = v53 + v20;
      uint64_t v23 = v45;
      v45(v15, v53 + v20 + v22, v6);
      v23(v11, v54 + v20 + v22, v6);
      uint64_t v24 = DateComponents.year.getter();
      if ((v25 & 1) == 0)
      {
        uint64_t v26 = v24;
        uint64_t v27 = DateComponents.year.getter();
        if ((v28 & 1) == 0)
        {
          uint64_t v29 = v27;
          uint64_t v30 = DateComponents.month.getter();
          if ((v31 & 1) == 0)
          {
            uint64_t v43 = v30;
            uint64_t v32 = DateComponents.month.getter();
            if ((v33 & 1) == 0 && v29 >= v26 && (v26 < v29 || v32 >= v43))
            {
              id v19 = *v44;
              (*v44)(v11, v6);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v15, v6);
LABEL_5:
              v54 += v47;
              v53 += v47;
              if (++v48 == v41) {
                return result;
              }
              goto LABEL_6;
            }
          }
        }
      }
      uint64_t v34 = *v44;
      (*v44)(v11, v6);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v34)(v15, v6);
      uint64_t v35 = *v52;
      if (!*v52) {
        break;
      }
      Swift::Int v36 = v15;
      Swift::Int v37 = v11;
      uint64_t v38 = v35 + v54 + v20;
      uint64_t v39 = *v49;
      (*v49)(v51, v35 + v53 + v20, v6);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v39)(v38, v51, v6);
      v20 -= v47;
      ++v21;
      uint64_t v11 = v37;
      Swift::Int v15 = v36;
      if (v48 == v21) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_1001D5B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v29 = a1;
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v7 = __chkstk_darwin(v34);
  char v33 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v32 = (char *)&v27 - v10;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    uint64_t v11 = *a4;
    uint64_t v31 = v9 + 8;
    uint64_t v35 = v11;
    uint64_t v12 = v11 + 8 * a3 - 8;
    uint64_t v14 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v13 = v32;
LABEL_5:
    Swift::Int v15 = *(void **)(v35 + 8 * a3);
    uint64_t v16 = v29;
    uint64_t v30 = v12;
    uint64_t v36 = a3;
    while (1)
    {
      objc_super v17 = *(void **)v12;
      id v18 = v15;
      id v19 = v17;
      MindfulnessSessionViewModel.endDate.getter();
      uint64_t v20 = v33;
      MindfulnessSessionViewModel.endDate.getter();
      char v21 = static Date.> infix(_:_:)();
      uint64_t v22 = *v14;
      uint64_t v23 = v20;
      uint64_t v24 = v34;
      (*v14)(v23, v34);
      v22(v13, v24);

      uint64_t v25 = v36;
      if ((v21 & 1) == 0)
      {
LABEL_4:
        a3 = v25 + 1;
        uint64_t v12 = v30 + 8;
        if (a3 == v28) {
          return;
        }
        goto LABEL_5;
      }
      if (!v35) {
        break;
      }
      uint64_t v26 = *(void **)v12;
      Swift::Int v15 = *(void **)(v12 + 8);
      *(void *)uint64_t v12 = v15;
      *(void *)(v12 + 8) = v26;
      v12 -= 8;
      if (v25 == ++v16) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1001D5D18(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v83 = a3;
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v80 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  char v81 = (char *)&v75 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  Swift::Int v15 = (char *)&v75 - v14;
  __chkstk_darwin(v13);
  objc_super v17 = (char *)&v75 - v16;
  uint64_t v82 = *(void *)(v18 + 72);
  if (!v82)
  {
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (a2 - a1 == 0x8000000000000000 && v82 == -1) {
    goto LABEL_87;
  }
  int64_t v19 = v83 - a2;
  if (v83 - a2 == 0x8000000000000000 && v82 == -1) {
    goto LABEL_88;
  }
  uint64_t v20 = (uint64_t)(a2 - a1) / v82;
  unint64_t v86 = a1;
  unint64_t v85 = a4;
  uint64_t v21 = v19 / v82;
  if (v20 >= v19 / v82)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      uint64_t v23 = v21 * v82;
      if (a4 < a2 || a2 + v23 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v48 = a4 + v23;
      unint64_t v84 = a4 + v23;
      unint64_t v86 = a2;
      if (v23 >= 1 && a1 < a2)
      {
        uint64_t v50 = -v82;
        uint64_t v52 = *(char **)(v8 + 16);
        uint64_t v51 = v8 + 16;
        uint64_t v78 = (void (**)(char *, uint64_t))(v51 - 8);
        BOOL v79 = v52;
        uint64_t v82 = v51;
        unint64_t v76 = a1;
        unint64_t v77 = a4;
        do
        {
          uint64_t v53 = (void (*)(char *, unint64_t, uint64_t))v79;
          ((void (*)(char *, unint64_t, uint64_t))v79)(v81, v48 + v50, v7);
          unint64_t v54 = a2 + v50;
          v53(v80, a2 + v50, v7);
          uint64_t v55 = DateComponents.year.getter();
          if ((v56 & 1) != 0
            || (uint64_t v57 = v55, v58 = DateComponents.year.getter(), (v59 & 1) != 0)
            || (uint64_t v60 = v58, v61 = DateComponents.month.getter(), (v62 & 1) != 0))
          {
            BOOL v64 = 1;
          }
          else
          {
            uint64_t v75 = v61;
            uint64_t v63 = DateComponents.month.getter();
            BOOL v64 = 1;
            if ((v65 & 1) == 0 && v60 >= v57) {
              BOOL v64 = v57 >= v60 && v63 < v75;
            }
          }
          unint64_t v67 = v83;
          unint64_t v68 = v83 + v50;
          BOOL v69 = *v78;
          (*v78)(v80, v7);
          v69(v81, v7);
          if (v64)
          {
            unint64_t v70 = v77;
            if (v67 < a2 || v68 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v71 = v76;
            }
            else
            {
              unint64_t v71 = v76;
              if (v67 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v86 += v50;
          }
          else
          {
            unint64_t v72 = v84;
            v84 += v50;
            BOOL v73 = v67 < v72 || v68 >= v72;
            unint64_t v70 = v77;
            if (v73)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v54 = a2;
            }
            else
            {
              if (v67 != v72) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v54 = a2;
            }
            unint64_t v71 = v76;
          }
          unint64_t v48 = v84;
          if (v84 <= v70) {
            break;
          }
          a2 = v54;
          unint64_t v83 = v68;
        }
        while (v54 > v71);
      }
      goto LABEL_85;
    }
  }
  else if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v22 = v20 * v82;
    if (a4 < a1 || a1 + v22 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    char v81 = (char *)(a4 + v22);
    unint64_t v84 = a4 + v22;
    if (v22 >= 1 && a2 < v83)
    {
      uint64_t v26 = *(char **)(v8 + 16);
      uint64_t v25 = v8 + 16;
      BOOL v79 = v15;
      uint64_t v80 = v26;
      uint64_t v27 = (void (**)(char *, uint64_t))(v25 - 8);
      do
      {
        uint64_t v28 = v80;
        ((void (*)(char *, unint64_t, uint64_t))v80)(v17, a2, v7);
        ((void (*)(char *, unint64_t, uint64_t))v28)(v15, a4, v7);
        uint64_t v29 = DateComponents.year.getter();
        if (v30) {
          goto LABEL_30;
        }
        uint64_t v31 = v29;
        uint64_t v32 = DateComponents.year.getter();
        if ((v33 & 1) != 0
          || (uint64_t v34 = v32, v35 = DateComponents.month.getter(), (v36 & 1) != 0)
          || (v37 = v35, v38 = DateComponents.month.getter(), v39 = v37, Swift::Int v15 = v79, (v40 & 1) != 0)
          || v34 < v31
          || v31 >= v34 && v38 < v39)
        {
LABEL_30:
          uint64_t v41 = *v27;
          (*v27)(v15, v7);
          v41(v17, v7);
          unint64_t v42 = v86;
          unint64_t v43 = a2 + v82;
          if (v86 < a2 || v86 >= v43)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v86 == a2)
          {
            unint64_t v42 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          uint64_t v45 = v25;
          uint64_t v46 = *v27;
          (*v27)(v79, v7);
          v46(v17, v7);
          unint64_t v42 = v86;
          unint64_t v47 = v85 + v82;
          if (v86 < v85 || v86 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v86 != v85)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v85 = v47;
          unint64_t v43 = a2;
          uint64_t v25 = v45;
        }
        unint64_t v86 = v42 + v82;
        a4 = v85;
        if (v85 >= (unint64_t)v81) {
          break;
        }
        a2 = v43;
      }
      while (v43 < v83);
    }
LABEL_85:
    sub_1001EE980(&v86, &v85, (uint64_t *)&v84);
    return 1;
  }
LABEL_89:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D63B8(void **a1, id *a2, id *a3, void **a4)
{
  uint64_t v54 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v54 - 8);
  uint64_t v9 = __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v51 = a3;
  uint64_t v52 = (char *)&v45 - v11;
  uint64_t v12 = (char *)a2 - (char *)a1;
  uint64_t v13 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0) {
    uint64_t v13 = (char *)a2 - (char *)a1;
  }
  uint64_t v14 = v13 >> 3;
  Swift::Int v15 = a2;
  uint64_t v16 = (char *)a3 - (char *)a2;
  uint64_t v17 = v16 / 8;
  uint64_t v58 = a1;
  uint64_t v57 = a4;
  if (v13 >> 3 >= v16 / 8)
  {
    if (v16 < -7) {
      goto LABEL_43;
    }
    if (a4 != v15 || &v15[v17] <= a4) {
      memmove(a4, v15, 8 * v17);
    }
    uint64_t v29 = &a4[v17];
    char v56 = v29;
    uint64_t v58 = v15;
    if (v16 < 8 || a1 >= v15) {
      goto LABEL_42;
    }
    uint64_t v46 = (void (**)(char *, uint64_t))(v8 + 8);
    unint64_t v47 = a1;
    char v30 = v51 - 1;
    uint64_t v31 = v15;
    uint64_t v55 = a4;
    while (1)
    {
      uint64_t v51 = v15;
      unint64_t v49 = (unint64_t)v29;
      uint64_t v50 = v30 + 1;
      uint64_t v34 = v29 - 1;
      char v33 = *(v29 - 1);
      uint64_t v35 = *(v31 - 1);
      unint64_t v48 = v31 - 1;
      id v36 = v33;
      id v37 = v35;
      uint64_t v38 = v52;
      MindfulnessSessionViewModel.endDate.getter();
      uint64_t v39 = v53;
      MindfulnessSessionViewModel.endDate.getter();
      LOBYTE(v35) = static Date.> infix(_:_:)();
      char v40 = *v46;
      uint64_t v41 = v39;
      uint64_t v42 = v54;
      (*v46)(v41, v54);
      v40(v38, v42);

      if (v35) {
        break;
      }
      char v56 = v34;
      uint64_t v31 = v51;
      if ((unint64_t)v50 < v49 || (unint64_t)v30 >= v49)
      {
        *char v30 = *v34;
        uint64_t v29 = v34;
        goto LABEL_30;
      }
      unint64_t v43 = v55;
      uint64_t v32 = v47;
      if (v50 != (void **)v49) {
        *char v30 = *v34;
      }
      uint64_t v29 = v34;
      if (v34 <= v43) {
        goto LABEL_42;
      }
LABEL_31:
      --v30;
      Swift::Int v15 = v31;
      if (v31 <= v32) {
        goto LABEL_42;
      }
    }
    uint64_t v29 = (void **)v49;
    uint64_t v31 = v48;
    if (v50 != v51 || v30 >= v51) {
      *char v30 = *v48;
    }
    uint64_t v58 = v31;
LABEL_30:
    uint64_t v32 = v47;
    if (v29 <= v55) {
      goto LABEL_42;
    }
    goto LABEL_31;
  }
  if (v12 >= -7)
  {
    if (a4 != a1 || &a1[v14] <= a4) {
      memmove(a4, a1, 8 * v14);
    }
    uint64_t v50 = &a4[v14];
    char v56 = v50;
    if (v12 >= 8 && v15 < v51)
    {
      unint64_t v49 = v8 + 8;
      uint64_t v18 = v52;
      int64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
      do
      {
        uint64_t v55 = a4;
        uint64_t v20 = *a4;
        id v21 = *v15;
        id v22 = v20;
        MindfulnessSessionViewModel.endDate.getter();
        uint64_t v23 = v53;
        MindfulnessSessionViewModel.endDate.getter();
        LOBYTE(v20) = static Date.> infix(_:_:)();
        uint64_t v24 = *v19;
        uint64_t v25 = v23;
        uint64_t v26 = v54;
        (*v19)(v25, v54);
        v24(v18, v26);

        if (v20)
        {
          uint64_t v27 = v15 + 1;
          a4 = v55;
          if (a1 < v15 || a1 >= v27 || a1 != v15) {
            *a1 = *v15;
          }
        }
        else
        {
          uint64_t v28 = v55;
          if (a1 != v55) {
            *a1 = *v55;
          }
          a4 = v28 + 1;
          uint64_t v57 = a4;
          uint64_t v27 = v15;
        }
        uint64_t v58 = ++a1;
        if (a4 >= v50) {
          break;
        }
        Swift::Int v15 = v27;
      }
      while (v27 < v51);
    }
LABEL_42:
    sub_1001EE998(&v58, &v57, &v56);
    return 1;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D6844()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1001D687C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void sub_1001D68BC()
{
  sub_1001D3534(*(void *)(v0 + 16));
}

void *sub_1001D68C8(unint64_t a1)
{
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v2 = *(uint64_t **)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v50 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v49 = type metadata accessor for Calendar();
  unint64_t v4 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  unint64_t v48 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v47 = type metadata accessor for DateComponents();
  uint64_t v38 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v7 = &v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v56 = _swiftEmptyDictionarySingleton;
  if (a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v46 = a1 & 0xC000000000000001;
      unsigned int v44 = enum case for Calendar.Component.year(_:);
      unsigned int v45 = enum case for Calendar.Component.month(_:);
      uint64_t v42 = (void (**)(unsigned char *, uint64_t))(v4 + 8);
      unint64_t v43 = (void (**)(unint64_t, uint64_t))(v2 + 1);
      id v36 = (void (**)(unsigned char *, uint64_t))(v38 + 8);
      uint64_t v37 = v38 + 32;
      uint64_t v9 = _swiftEmptyDictionarySingleton;
      unint64_t v4 = 4;
      long long v41 = xmmword_10074E640;
      long long v35 = xmmword_100751040;
      uint64_t v39 = v8;
      char v40 = (unsigned char *)a1;
      while (1)
      {
        uint64_t v2 = (uint64_t *)(v4 - 4);
        if (v46) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(a1 + 8 * v4);
        }
        id v12 = v11;
        if (__OFADD__(v2, 1))
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        unint64_t v52 = v4 - 3;
        unint64_t v53 = v4;
        uint64_t v54 = v9;
        uint64_t v13 = v48;
        static Calendar.current.getter();
        sub_1000AFA94((uint64_t *)&unk_1009559B0);
        uint64_t v14 = type metadata accessor for Calendar.Component();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(void *)(v15 + 72);
        unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = v41;
        unint64_t v19 = v18 + v17;
        uint64_t v20 = *(void (**)(unint64_t, void, uint64_t))(v15 + 104);
        v20(v19, v45, v14);
        v20(v19 + v16, v44, v14);
        sub_1000C6A18(v18);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        a1 = (unint64_t)v50;
        MindfulnessSessionViewModel.endDate.getter();
        Calendar.dateComponents(_:from:)();
        swift_bridgeObjectRelease();
        (*v43)(a1, v51);
        id v21 = v13;
        uint64_t v9 = v54;
        (*v42)(v21, v49);
        uint64_t v2 = v9;
        unint64_t v4 = sub_100529888((uint64_t)v7);
        uint64_t v23 = v9[2];
        BOOL v24 = (v22 & 1) == 0;
        uint64_t v25 = v23 + v24;
        if (__OFADD__(v23, v24)) {
          goto LABEL_20;
        }
        char v26 = v22;
        if (v9[3] < v25)
        {
          sub_1004E8B44(v25, 1);
          uint64_t v9 = v56;
          unint64_t v27 = sub_100529888((uint64_t)v7);
          if ((v26 & 1) != (v28 & 1))
          {
            uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v4 = v27;
        }
        if (v26)
        {
          (*v36)(v7, v47);
          uint64_t v9 = v56;
          uint64_t v10 = (void *)(v56[7] + 8 * v4);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          a1 = (unint64_t)v40;
          if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          sub_1000AFA94((uint64_t *)&unk_10095B850);
          uint64_t v29 = swift_allocObject();
          *(_OWORD *)(v29 + 16) = v35;
          *(void *)(v29 + 32) = v12;
          uint64_t v55 = v29;
          uint64_t v2 = &v55;
          specialized Array._endMutation()();
          a1 = v55;
          v9[(v4 >> 6) + 8] |= 1 << v4;
          (*(void (**)(unint64_t, unsigned char *, uint64_t))(v38 + 32))(v9[6] + *(void *)(v38 + 72) * v4, v7, v47);
          *(void *)(v9[7] + 8 * v4) = a1;
          uint64_t v30 = v9[2];
          BOOL v31 = __OFADD__(v30, 1);
          uint64_t v32 = v30 + 1;
          if (v31) {
            goto LABEL_21;
          }
          v9[2] = v32;
          a1 = (unint64_t)v40;
        }
        unint64_t v4 = v53 + 1;
        if (v52 == v39) {
          return v9;
        }
      }
    }
  }
  return _swiftEmptyDictionarySingleton;
}

void *sub_1001D6EA0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v40 = a1;
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000AFA94(&qword_10094E8A8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v15 = v8 + 16;
    uint64_t v39 = v16;
    uint64_t v17 = a2;
    uint64_t v18 = a2 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v36 = *(void *)(v15 + 56);
    uint64_t v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 32);
    uint64_t v34 = (void (**)(char *, uint64_t))(v15 - 8);
    long long v35 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    v30[1] = v17;
    swift_bridgeObjectRetain();
    uint64_t v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 40);
    v30[0] = (v15 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v32 = a3;
    uint64_t v33 = v15;
    BOOL v31 = v10;
    while (1)
    {
      v39(v13, v18, v7);
      uint64_t v20 = *v38;
      (*v38)(v13, 0, 1, v7);
      if ((*v37)(v13, 1, v7) == 1) {
        break;
      }
      (*v35)(v10, v13, v7);
      if (*(void *)(a3 + 16))
      {
        unint64_t v21 = sub_100529888((uint64_t)v10);
        if (v22)
        {
          unint64_t v23 = *(void *)(*(void *)(a3 + 56) + 8 * v21);
          if ((v23 & 0x8000000000000000) != 0 || (v23 & 0x4000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v24 = (uint64_t)sub_10036951C(v23);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v24 = v23 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n();
          }
          uint64_t v41 = v24;
          sub_1001D415C(&v41);
          if (v4)
          {
            uint64_t result = (void *)swift_release();
            __break(1u);
            return result;
          }
          swift_bridgeObjectRelease();
          uint64_t v25 = v41;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v40 = sub_1001E71D0(0, v40[2] + 1, 1, v40);
          }
          unint64_t v27 = v40[2];
          unint64_t v26 = v40[3];
          if (v27 >= v26 >> 1) {
            char v40 = sub_1001E71D0((void *)(v26 > 1), v27 + 1, 1, v40);
          }
          unint64_t v19 = v40;
          v40[2] = v27 + 1;
          v19[v27 + 4] = v25;
          swift_release();
          uint64_t v4 = 0;
          a3 = v32;
          uint64_t v10 = v31;
        }
      }
      (*v34)(v10, v7);
      v18 += v36;
      if (!--v14)
      {
        v20(v13, 1, 1, v7);
        break;
      }
    }
  }
  else
  {
    char v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
    v28(v13, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  return v40;
}

void sub_1001D7220()
{
}

void sub_1001D7228()
{
}

uint64_t sub_1001D7230()
{
  return swift_deallocObject();
}

uint64_t sub_1001D7268(uint64_t a1)
{
  return sub_1001D326C(a1);
}

id sub_1001D728C()
{
  if (!IndexPath.row.getter()) {
    return 0;
  }
  unint64_t v1 = sub_1001D3A0C();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)v1;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_fitnessAppContext);
  uint64_t v4 = *(void **)(v0
                + OBJC_IVAR____TtC10FitnessApp36MindfulnessSessionListViewController_mindfulnessSessionFormattingManager);
  id v5 = objc_allocWithZone((Class)type metadata accessor for MindfulnessSessionDetailViewController());
  uint64_t v6 = sub_10039EDA8(v2, v3, v4);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  uint64_t v8 = v6;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  uint64_t v10 = self;
  v14[4] = sub_1001D7D00;
  v14[5] = v7;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1005BEB8C;
  v14[3] = &unk_1008BA6A8;
  uint64_t v11 = _Block_copy(v14);
  swift_retain_n();
  swift_release();
  id v12 = [v10 configurationWithIdentifier:isa previewProvider:v11 actionProvider:0];

  swift_release();
  _Block_release(v11);

  swift_release();
  return v12;
}

uint64_t sub_1001D7440(void *a1, void *a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_1009556D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - v12;
  aBlock[0] = [a1 identifier];
  sub_1000AFA94(&qword_10094EA78);
  int v14 = swift_dynamicCast();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v14)
  {
    v15(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v16(v13, v6, v7);
      uint64_t v17 = swift_allocObject();
      swift_unknownObjectWeakInit();
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
      uint64_t v18 = *(unsigned __int8 *)(v8 + 80);
      id v24 = a2;
      uint64_t v19 = (v18 + 24) & ~v18;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v17;
      v16((char *)(v20 + v19), v11, v7);
      aBlock[4] = sub_1001D7C9C;
      aBlock[5] = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100070394;
      aBlock[3] = &unk_1008BA658;
      unint64_t v21 = _Block_copy(aBlock);
      swift_release();
      [v24 addCompletion:v21];
      _Block_release(v21);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  else
  {
    v15(v6, 1, 1, v7);
  }
  return sub_1001D7B6C((uint64_t)v6);
}

id sub_1001D776C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!IndexPath.row.getter()) {
    return 0;
  }
  id v6 = [self mainBundle];
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 localizedStringForKey:v7 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v11 + v10, v5, v2);
  swift_retain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_1001D7AD0;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100612C08;
  aBlock[3] = &unk_1008BA608;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = [self contextualActionWithStyle:1 title:v12 handler:v13];

  _Block_release(v13);
  swift_release();
  swift_release();
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100751040;
  *(void *)(v15 + 32) = v14;
  aBlock[0] = v15;
  specialized Array._endMutation()();
  sub_10007E2D8(0, &qword_10094EA70);
  id v16 = v14;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = [self configurationWithActions:isa];

  return v18;
}

uint64_t sub_1001D7AD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for IndexPath();

  return sub_1001D30DC(a1, a2, a3);
}

uint64_t sub_1001D7B6C(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94(&qword_1009556D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001D7BD0()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_1001D7C9C()
{
  type metadata accessor for IndexPath();

  sub_1001D2E0C();
}

id sub_1001D7D00()
{
  return *(id *)(v0 + 16);
}

id sub_1001D7D08(void *a1)
{
  return sub_1001D2564(a1);
}

uint64_t sub_1001D7D10()
{
  return sub_1005361F4();
}

uint64_t sub_1001D7D50()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1001D7DC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000AFA94(&qword_10094B7A0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v5 = v12[1];
  id v6 = [self standardUserDefaults];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setInteger:v5 forKey:v7];

  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v9 = static MainActor.shared.getter();
  unint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  v10[4] = v1;
  sub_1000713D0((uint64_t)v4, (uint64_t)&unk_10094EC80, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_1001D7F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[5] = v6;
  v4[6] = v5;
  return _swift_task_switch(sub_1001D8030, v6, v5);
}

uint64_t sub_1001D8030()
{
  uint64_t v1 = v0[3];
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v0[7] = v0[2];
  return _swift_task_switch(sub_1001D80EC, v1, 0);
}

uint64_t sub_1001D80EC()
{
  sub_100071954(v0[7]);
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  return _swift_task_switch(sub_1001DADB8, v1, v2);
}

uint64_t sub_1001D8154()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

BOOL sub_1001D81C8()
{
  uint64_t v0 = sub_1000AFA94(&qword_10094ED08);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  BOOL result = v12;
  if (v12)
  {
    uint64_t v4 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = type metadata accessor for ActivitySharingFriendListDateItemGroup();
    uint64_t v7 = *(void *)(v6 - 8);
    if (v5)
    {
      sub_100072774(v4+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80)), (uint64_t)v2);
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v2, v8, 1, v6);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v2, 1, v6) == 1)
    {
      sub_10008DB18((uint64_t)v2, &qword_10094ED08);
      return 0;
    }
    else
    {
      uint64_t v9 = *(void *)&v2[*(int *)(v6 + 20)];
      swift_bridgeObjectRetain();
      sub_1000726A4((uint64_t)v2);
      unint64_t v10 = *(void *)(v9 + 16);
      swift_bridgeObjectRelease();
      return v10 > 1;
    }
  }
  return result;
}

uint64_t sub_1001D8394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_1000191E8, 0, 0);
}

uint64_t sub_1001D83B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_1000064F0, 0, 0);
}

uint64_t sub_1001D8404(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[26] = v3;
  v2[27] = *(void *)(v3 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = sub_1000AFA94((uint64_t *)&unk_1009555F0);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  return _swift_task_switch(sub_1001D852C, v1, 0);
}

uint64_t sub_1001D852C()
{
  id v1 = [*(id *)(*(void *)(v0 + 200)+ OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_friendListSectionManager) allFriends];
  if (v1)
  {
    uint64_t v2 = v1;
    sub_10007E2D8(0, (unint64_t *)&qword_10094ECC0);
    sub_1000CD998((unint64_t *)&qword_10095B7A0, (unint64_t *)&qword_10094ECC0);
    uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = (unint64_t *)&_swiftEmptySetSingleton;
      __CocoaSet.makeIterator()();
      uint64_t v5 = __CocoaSet.Iterator.next()();
      if (v5)
      {
        uint64_t v6 = (id *)(v0 + 184);
        do
        {
          *(void *)(v0 + 168) = v5;
          swift_dynamicCast();
          unsigned __int8 v7 = [*v6 hasInviteRequestFromMe];
          id v8 = *v6;
          if (v7)
          {
            unint64_t v9 = *((void *)&_swiftEmptySetSingleton + 2);
            if (*((void *)&_swiftEmptySetSingleton + 3) <= v9)
            {
              sub_1001EA3A8(v9 + 1);
              uint64_t v4 = (unint64_t *)&_swiftEmptySetSingleton;
            }
            id v10 = v8;
            Swift::Int v11 = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
            BOOL v12 = (char *)&_swiftEmptySetSingleton + 56;
            uint64_t v13 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
            unint64_t v14 = v11 & ~v13;
            unint64_t v15 = v14 >> 6;
            if (((-1 << v14) & ~*((void *)&_swiftEmptySetSingleton + (v14 >> 6) + 7)) != 0)
            {
              unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*((void *)&_swiftEmptySetSingleton + (v14 >> 6) + 7))) | v14 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v17 = 0;
              unint64_t v18 = (unint64_t)(63 - v13) >> 6;
              do
              {
                if (++v15 == v18 && (v17 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_33;
                }
                BOOL v19 = v15 == v18;
                if (v15 == v18) {
                  unint64_t v15 = 0;
                }
                v17 |= v19;
                uint64_t v20 = *(void *)&v12[8 * v15];
              }
              while (v20 == -1);
              unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
            }
            *(void *)&v12[(v16 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v16;
            *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v16) = v8;
            ++*((void *)&_swiftEmptySetSingleton + 2);
          }
          else
          {
          }
          uint64_t v5 = __CocoaSet.Iterator.next()();
        }
        while (v5);
      }
      swift_release();
    }
    else
    {
      uint64_t v4 = sub_1001D959C(v3);
    }
    uint64_t v22 = *(void *)(v0 + 192);
    uint64_t v23 = *(void **)v22;
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v22 + 8);
    *(_OWORD *)(v0 + 136) = *(_OWORD *)(v22 + 24);
    *(void *)(v0 + 160) = *(void *)(v22 + 40);
    id v24 = v23;
    sub_1001D9EF4(v0 + 120);
    sub_1001D9EF4(v0 + 136);
    sub_1001CE648(v0 + 160);
    sub_1001D9AC0((uint64_t)v4, v22);
    unint64_t v26 = v25;
    *(void *)(v0 + 280) = v25;

    sub_1001D0774(v0 + 120);
    sub_1001D0774(v0 + 136);
    sub_1000B1AE0(v0 + 160);
    swift_release();
    if (v26)
    {
      id v27 = [v26 UUID];
      id v10 = *(id *)(v0 + 272);
      if (v27)
      {
        char v28 = v27;
        uint64_t v30 = *(void *)(v0 + 216);
        uint64_t v29 = *(void *)(v0 + 224);
        uint64_t v31 = *(void *)(v0 + 208);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(id, uint64_t, uint64_t))(v30 + 32))(v10, v29, v31);
        uint64_t v32 = *(void (**)(id, void, uint64_t, uint64_t))(v30 + 56);
        *(void *)(v0 + 288) = v32;
        *(void *)(v0 + 296) = (v30 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        v32(v10, 0, 1, v31);
        uint64_t v33 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v30 + 48))(v10, 1, v31);
        if (v33 != 1)
        {
          uint64_t v34 = *(void *)(v0 + 272);
          uint64_t v35 = *(void *)(v0 + 208);
          uint64_t v36 = *(void *)(v0 + 216);
          uint64_t v37 = *(void *)(v0 + 200);
          UUID.uuidString.getter();
          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
          uint64_t v38 = *(void **)(v37
                         + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_activitySharingClient);
          NSString v39 = String._bridgeToObjectiveC()();
          *(void *)(v0 + 304) = v39;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 16) = v0;
          *(void *)(v0 + 56) = v0 + 320;
          *(void *)(v0 + 24) = sub_1001D8ADC;
          uint64_t v40 = swift_continuation_init();
          *(void *)(v0 + 80) = _NSConcreteStackBlock;
          *(void *)(v0 + 88) = 0x40000000;
          *(void *)(v0 + 96) = sub_1004213C8;
          *(void *)(v0 + 104) = &unk_1008BA918;
          *(void *)(v0 + 112) = v40;
          [v38 withdrawFriendInviteToFriendUUID:v39 completion:v0 + 80];
          uint64_t v33 = v0 + 16;
          return _swift_continuation_await(v33);
        }
      }
      else
      {
LABEL_33:
        uint64_t v33 = (*(uint64_t (**)(id, uint64_t, uint64_t, void))(*(void *)(v0 + 216) + 56))(v10, 1, 1, *(void *)(v0 + 208));
      }
      __break(1u);
      return _swift_continuation_await(v33);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    id v21 = HKLogActivity;
    os_log(_:dso:log:_:_:)();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41(0);
}

uint64_t sub_1001D8ADC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 312) = v2;
  uint64_t v3 = *(void *)(v1 + 200);
  if (v2) {
    uint64_t v4 = sub_1001D8E68;
  }
  else {
    uint64_t v4 = sub_1001D8BFC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001D8BFC()
{
  uint64_t v20 = v0;

  os_log_type_t v1 = static os_log_type_t.default.getter();
  uint64_t v2 = (void *)HKLogActivity;
  BOOL v3 = os_log_type_enabled(HKLogActivity, v1);
  uint64_t v4 = *(void **)(v0 + 280);
  if (v3)
  {
    id v5 = v4;
    log = v2;
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    id v7 = [v5 UUID];
    if (v7)
    {
      id v8 = v7;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 1;
    }
    id v10 = *(void **)(v0 + 280);
    uint64_t v12 = *(void *)(v0 + 256);
    uint64_t v11 = *(void *)(v0 + 264);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 288))(v12, v9, 1, *(void *)(v0 + 208));
    sub_1000AEEC8(v12, v11, (uint64_t *)&unk_1009555F0);
    uint64_t v13 = Optional.description.getter();
    unint64_t v15 = v14;
    sub_10008DB18(v11, (uint64_t *)&unk_1009555F0);
    *(void *)(v0 + 176) = sub_10008F1F4(v13, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, v1, "Successful withdrew invite from friend with UUID: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v16 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v16(1);
}

uint64_t sub_1001D8E68()
{
  uint64_t v20 = v0;
  os_log_type_t v1 = *(void **)(v0 + 304);
  swift_willThrow();

  os_log_type_t v2 = static os_log_type_t.error.getter();
  BOOL v3 = (void *)HKLogActivity;
  if (os_log_type_enabled(HKLogActivity, v2))
  {
    id v4 = *(id *)(v0 + 280);
    log = v3;
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    id v6 = [v4 UUID];
    if (v6)
    {
      id v7 = v6;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 1;
    }
    id v10 = *(void **)(v0 + 280);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 248);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 288))(v12, v8, 1, *(void *)(v0 + 208));
    sub_1000AEEC8(v12, v11, (uint64_t *)&unk_1009555F0);
    uint64_t v13 = Optional.description.getter();
    unint64_t v15 = v14;
    sub_10008DB18(v11, (uint64_t *)&unk_1009555F0);
    *(void *)(v0 + 152) = sub_10008F1F4(v13, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v9 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v2, "Failed to withdraw invite from friend with UUID: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = *(NSObject **)(v0 + 280);
  }
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16(0);
}

uint64_t sub_1001D90EC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider__state;
  uint64_t v2 = sub_1000AFA94(&qword_10094EC88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider__displayMode;
  uint64_t v4 = sub_1000AFA94(&qword_10094ED10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_invitationDestinationCoordinator));

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1001D9204()
{
  sub_1001D90EC();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001D9230()
{
  return type metadata accessor for ActivitySharingFriendListDataProvider();
}

unint64_t *assignWithCopy for ActivitySharingFriendListDataProvider.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ActivitySharingFriendListDataProvider.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySharingFriendListDataProvider.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ActivitySharingFriendListDataProvider.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)BOOL result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)BOOL result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)BOOL result = a2;
    }
  }
  return result;
}

uint64_t sub_1001D9464(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1001D947C(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *BOOL result = v2;
  return result;
}

uint64_t sub_1001D949C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ActivitySharingFriendListDataProvider();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001D94E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000DBD6C;
  return sub_1001D7F98(a1, v4, v5, v6);
}

unint64_t *sub_1001D959C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1001D9700((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    id v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_1001D9700((unint64_t *)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

unint64_t *sub_1001D9700(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    uint64_t result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) hasInviteRequestFromMe];
    if (result)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return (unint64_t *)sub_100522364(v4, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001D98A0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1001D98D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001D9918(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int64_t v6 = 0;
  uint64_t v7 = result + 56;
  uint64_t v8 = 1 << *(unsigned char *)(result + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(result + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v14 >= v11) {
      return 0;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return 0;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return 0;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15)
        {
          int64_t v6 = v14 + 3;
          if (v14 + 3 >= v11) {
            return 0;
          }
          unint64_t v15 = *(void *)(v7 + 8 * v6);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_22:
    char v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    if (*v17 == a2 && v17[1] == a3)
    {
      uint64_t v18 = a2;
LABEL_29:
      swift_bridgeObjectRetain();
      return v18;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_29;
    }
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v11) {
    return 0;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return 0;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void sub_1001D9AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007E2D8(0, (unint64_t *)&qword_10094ECC0);
    sub_1000CD998((unint64_t *)&qword_10095B7A0, (unint64_t *)&qword_10094ECC0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v31;
    uint64_t v28 = v32;
    uint64_t v3 = v33;
    int64_t v4 = v34;
    unint64_t v5 = v35;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v28 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    int64_t v4 = 0;
  }
  int64_t v27 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_37;
  }
  sub_10007E2D8(0, (unint64_t *)&qword_10094ECC0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v10 = v30;
  swift_unknownObjectRelease();
  int64_t v11 = v4;
  uint64_t v12 = v5;
  if (!v30) {
    goto LABEL_37;
  }
  while (1)
  {
    id v16 = [v10 contact];
    if (!v16) {
      goto LABEL_39;
    }
    char v17 = v16;
    id v18 = [v16 relationship];

    id v19 = [v18 addresses];
    if (!v19) {
      goto LABEL_40;
    }
    uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = *(void **)a2;
    v37[0] = *(_OWORD *)(a2 + 8);
    long long v22 = v37[0];
    long long v36 = *(_OWORD *)(a2 + 24);
    uint64_t v38 = *(void *)(a2 + 40);
    id v23 = v21;
    sub_1001D9EF4((uint64_t)v37);
    sub_1001D9EF4((uint64_t)&v36);
    sub_1001CE648((uint64_t)&v38);
    sub_1001D9918(v20, v22, *((uint64_t *)&v22 + 1));
    uint64_t v25 = v24;

    sub_1001D0774((uint64_t)v37);
    sub_1001D0774((uint64_t)&v36);
    sub_1000B1AE0((uint64_t)&v38);
    swift_bridgeObjectRelease();
    if (v25)
    {
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }

    int64_t v4 = v11;
    unint64_t v5 = v12;
    if (v2 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v5) {
      break;
    }
    uint64_t v12 = (v5 - 1) & v5;
    unint64_t v13 = __clz(__rbit64(v5)) | (v4 << 6);
    int64_t v11 = v4;
LABEL_24:
    id v10 = *(id *)(*(void *)(v2 + 48) + 8 * v13);
    if (!v10) {
      goto LABEL_37;
    }
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    return;
  }
  if (v11 >= v27) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v11);
  if (v14)
  {
LABEL_23:
    uint64_t v12 = (v14 - 1) & v14;
    unint64_t v13 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_24;
  }
  int64_t v15 = v4 + 2;
  if (v4 + 2 >= v27) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v4 + 3;
  if (v4 + 3 >= v27) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v15);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v15 = v4 + 4;
  if (v4 + 4 >= v27) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v15);
  if (v14)
  {
LABEL_22:
    int64_t v11 = v15;
    goto LABEL_23;
  }
  int64_t v11 = v4 + 5;
  if (v4 + 5 >= v27) {
    goto LABEL_37;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v11);
  if (v14) {
    goto LABEL_23;
  }
  int64_t v26 = v4 + 6;
  while (v27 != v26)
  {
    unint64_t v14 = *(void *)(v28 + 8 * v26++);
    if (v14)
    {
      int64_t v11 = v26 - 1;
      goto LABEL_23;
    }
  }
LABEL_37:
  sub_1000D9B04();
}

uint64_t sub_1001D9EF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D9F20()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1001D9F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[25] = a4;
  v5[26] = v4;
  v5[23] = a2;
  v5[24] = a3;
  v5[22] = a1;
  return _swift_task_switch(sub_1001D9FA8, v4, 0);
}

uint64_t sub_1001D9FA8()
{
  sub_10007E2D8(0, &qword_10094ED20);
  id v1 = [(id)swift_getObjCClassFromMetadata() iMessageService];
  id v2 = (id)IMPreferredAccountForService();
  v0[27] = v2;

  if (v2 && (id v3 = [v2 displayName]) != 0)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0xE000000000000000;
  }
  v0[28] = v7;
  swift_bridgeObjectRetain();
  if (ASManateeContainerEnabled())
  {
    uint64_t v9 = v0[22];
    uint64_t v8 = v0[23];
    sub_1000AFA94(&qword_10094D178);
    uint64_t v10 = swift_allocObject();
    v0[29] = v10;
    *(_OWORD *)(v10 + 16) = xmmword_1007509E0;
    *(void *)(v10 + 32) = v9;
    *(void *)(v10 + 40) = v8;
    swift_bridgeObjectRetain();
    int64_t v11 = (void *)swift_task_alloc();
    v0[30] = v11;
    void *v11 = v0;
    v11[1] = sub_1001DA288;
    return sub_10060DF24(v10, v5, v7);
  }
  else
  {
    unint64_t v13 = *(void **)(v0[26] + OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_activitySharingClient);
    NSString v14 = String._bridgeToObjectiveC()();
    v0[32] = v14;
    NSString v15 = String._bridgeToObjectiveC()();
    v0[33] = v15;
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    v0[34] = v16;
    v0[2] = v0;
    v0[7] = (char *)v0 + 292;
    v0[3] = sub_1001DA5D4;
    uint64_t v17 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1004213C8;
    v0[13] = &unk_1008BA958;
    v0[14] = v17;
    [v13 sendFriendInviteToDestination:v14 callerID:v15 serviceIdentifier:v16 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_1001DA288()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 208);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_1001DA8E0;
  }
  else {
    uint64_t v4 = sub_1001DA408;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DA408()
{
  uint64_t v12 = v0;
  os_log_type_t v1 = static os_log_type_t.default.getter();
  uint64_t v2 = (void *)HKLogActivity;
  os_log_type_t v3 = v1;
  if (os_log_type_enabled(HKLogActivity, v1))
  {
    uint64_t v4 = *(void **)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 176);
    unint64_t v5 = *(void *)(v0 + 184);
    swift_bridgeObjectRetain();
    uint64_t v7 = v2;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 152) = sub_10008F1F4(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 1024;
    *(_DWORD *)(v0 + 288) = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v3, "Sending friend request invite to destination=[%s] success=%{BOOL}d", (uint8_t *)v8, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(1);
}

uint64_t sub_1001DA5D4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 280) = v2;
  uint64_t v3 = *(void *)(v1 + 208);
  if (v2) {
    uint64_t v4 = sub_1001DAB40;
  }
  else {
    uint64_t v4 = sub_1001DA6F4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DA6F4()
{
  uint64_t v15 = v0;
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 256);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 292);

  os_log_type_t v4 = static os_log_type_t.default.getter();
  unint64_t v5 = (void *)HKLogActivity;
  os_log_type_t v6 = v4;
  if (os_log_type_enabled(HKLogActivity, v4))
  {
    uint64_t v13 = *(void **)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 176);
    unint64_t v7 = *(void *)(v0 + 184);
    swift_bridgeObjectRetain();
    uint64_t v9 = v5;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 152) = sub_10008F1F4(v8, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v0 + 288) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v6, "Sending friend request invite to destination=[%s] success=%{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v11(v3);
}

uint64_t sub_1001DA8E0()
{
  uint64_t v15 = v0;
  os_log_type_t v1 = static os_log_type_t.error.getter();
  uint64_t v2 = (void *)HKLogActivity;
  os_log_type_t v3 = v1;
  BOOL v4 = os_log_type_enabled(HKLogActivity, v1);
  swift_errorRetain();
  if (v4)
  {
    uint64_t v13 = *(void **)(v0 + 216);
    unint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 176);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    log = v2;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 144) = sub_10008F1F4(v6, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    *(void *)(v0 + 168) = sub_10008F1F4(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v3, "Failed sending friend request invite to destination=[%s] error=%s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10(0);
}

uint64_t sub_1001DAB40()
{
  uint64_t v17 = v0;
  os_log_type_t v1 = *(void **)(v0 + 272);
  os_log_type_t v3 = *(void **)(v0 + 256);
  uint64_t v2 = *(void **)(v0 + 264);
  swift_willThrow();

  os_log_type_t v4 = static os_log_type_t.error.getter();
  unint64_t v5 = (void *)HKLogActivity;
  os_log_type_t v6 = v4;
  LOBYTE(v1) = os_log_type_enabled(HKLogActivity, v4);
  swift_errorRetain();
  if (v1)
  {
    uint64_t v15 = *(void **)(v0 + 216);
    unint64_t v7 = *(void *)(v0 + 184);
    uint64_t v8 = *(void *)(v0 + 176);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    log = v5;
    uint64_t v9 = swift_slowAlloc();
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 144) = sub_10008F1F4(v8, v7, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    *(void *)(v0 + 168) = sub_10008F1F4(v10, v11, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v6, "Failed sending friend request invite to destination=[%s] error=%s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12(0);
}

void sub_1001DADC4()
{
  id v0 = [self preferredFontForTextStyle:UIFontTextStyleBody];
  os_log_type_t v1 = self;
  uint64_t v2 = UIContentSizeCategoryLarge;
  id v3 = [v1 traitCollectionWithPreferredContentSizeCategory:v2];

  id v4 = [v0 _fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:v3];
  if (v4) {
    qword_100997710 = (uint64_t)v4;
  }
  else {
    __break(1u);
  }
}

void sub_1001DAE98(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(v2 + 32);
  if (v5)
  {
    id v6 = [v5 workoutConfiguration];
    id v7 = [v6 activityType];
  }
  else
  {
    id v7 = [*(id *)(v2 + 24) workoutActivityType];
  }
  uint64_t v8 = self;
  id v9 = [v8 localizedShortCadenceUnitStringForActivityType:v7];
  if (v9)
  {
    uint64_t v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000A06D0();
    StringProtocol.localizedUppercase.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = type metadata accessor for WorkoutChartDataElement(0);
    id v12 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + *(int *)(v11 + 24))];
    id v13 = [v8 stringWithNumber:v12 decimalPrecision:1];

    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      id v17 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + *(int *)(v11 + 28))];
      id v18 = [v8 stringWithNumber:v17 decimalPrecision:1];

      if (v18)
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        uint64_t v22 = StringProtocol.localizedUppercase.getter();
        uint64_t v24 = v23;
        swift_bridgeObjectRelease();
        sub_1001DC410(v14, v16, v19, v21, v22, v24, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    sub_1001DC608(a2);
  }
}

id sub_1001DB124(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(v2 + 16);
  id result = [v5 unitManager];
  if (result)
  {
    id v7 = result;
    id v8 = [result userDistanceElevationUnit];

    id v9 = [v5 localizedShortUnitStringForDistanceUnit:v8];
    if (v9)
    {
      uint64_t v10 = v9;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v11 = type metadata accessor for WorkoutChartDataElement(0);
      id v12 = [v5 localizedStringWithDistanceInMeters:v8 distanceUnit:0 unitStyle:1 decimalPrecision:*(double *)(a1 + *(int *)(v11 + 24))];
      if (v12)
      {
        id v13 = v12;
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        id v16 = [v5 localizedStringWithDistanceInMeters:v8 distanceUnit:0 unitStyle:1 decimalPrecision:*(double *)(a1 + *(int *)(v11 + 28))];
        if (v16)
        {
          id v17 = v16;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          sub_1000A06D0();
          uint64_t v21 = StringProtocol.localizedUppercase.getter();
          uint64_t v23 = v22;
          swift_bridgeObjectRelease();
          id v24 = sub_1001DC410(v25, v15, v18, v20, v21, v23, a2);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v24;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    return sub_1001DC608(a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001DB328(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = type metadata accessor for WorkoutChartDataElement(0);
  id v7 = [v5 localizedStringWithBeatsPerMinute:*(double *)(a1 + *(int *)(v6 + 24))];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    id v12 = [v5 localizedStringWithBeatsPerMinute:*(double *)(a1 + *(int *)(v6 + 28))];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      id result = (id)FIUIBundle();
      if (result)
      {
        uint64_t v18 = result;
        NSString v19 = String._bridgeToObjectiveC()();
        id v20 = [v18 localizedStringForKey:v19 value:0 table:0];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000A06D0();
        StringProtocol.localizedUppercase.getter();
        swift_bridgeObjectRelease();
        uint64_t v21 = StringProtocol.localizedUppercase.getter();
        uint64_t v23 = v22;
        swift_bridgeObjectRelease();
        id v24 = sub_1001DC410(v9, v11, v14, v16, v21, v23, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v24;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return sub_1001DC608(a2);
}

id sub_1001DB540(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(v2 + 32);
  if (v5)
  {
    id v6 = [v5 fiui_activityType];
  }
  else
  {
    id v6 = [*(id *)(v2 + 24) fiui_activityType];
    if (!v6)
    {
      return sub_1001DC608(a2);
    }
  }
  uint64_t v7 = FIUIDistanceTypeForActivityType();
  id v8 = *(void **)(v2 + 16);
  id result = [v8 unitManager];
  if (result)
  {
    uint64_t v10 = result;
    id v11 = [result paceDistanceUnitForDistanceType:v7];

    uint64_t v12 = FIUIPaceFormatForDistanceType();
    if (v12 == 4)
    {
      id v13 = [v8 localizedSpeedUnitStringForActivityType:v6];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v62 = 4;
        uint64_t v63 = v6;
        BOOL v64 = a2;
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v61 = v15;

        goto LABEL_25;
      }
LABEL_23:
      id v42 = sub_1001DC608(a2);

      return v42;
    }
    if ([v6 identifier] != (id)46)
    {
      id v22 = [v8 localizedShortUnitStringForDistanceUnit:v11];
      if (!v22) {
        goto LABEL_23;
      }
      id v17 = v22;
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v23;
LABEL_14:

      uint64_t v63 = v6;
      BOOL v64 = a2;
      uint64_t v62 = v12;
      if ((unint64_t)(v12 - 2) >= 2)
      {
        if (v12 != 1)
        {
          uint64_t v61 = v21;
LABEL_25:
          uint64_t v43 = self;
          id v44 = [v43 meterUnit];
          uint64_t v45 = type metadata accessor for WorkoutChartDataElement(0);
          double v46 = *(double *)(a1 + *(int *)(v45 + 24));
          uint64_t v47 = self;
          uint64_t v48 = a1;
          id v49 = [v47 quantityWithUnit:v44 doubleValue:v46];

          uint64_t v50 = v7;
          id v51 = [v8 localizedPaceStringWithDistance:v49 overDuration:v62 paceFormat:v7 distanceType:0 zeroShowsDashes:1.0];

          if (v51)
          {
            uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v53 = v52;

            id v54 = [v43 meterUnit];
            id v55 = [v47 quantityWithUnit:v54 doubleValue:*(double *)(v48 + *(int *)(v45 + 28))];

            id v56 = [v8 localizedPaceStringWithDistance:v55 overDuration:v62 paceFormat:v50 distanceType:0 zeroShowsDashes:1.0];
            if (v56)
            {
              uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v59 = v58;

              id v42 = sub_1001DC410(v60, v53, v57, v59, v65, v61, v64);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_30:

              return v42;
            }
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          id v42 = sub_1001DC608(v64);
          goto LABEL_30;
        }
        id v32 = [self mainBundle];
        NSString v33 = String._bridgeToObjectiveC()();
        uint64_t v34 = v7;
        id v35 = [v32 localizedStringForKey:v33 value:0 table:0];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000AFA94((uint64_t *)&unk_1009546D0);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1007509E0;
        sub_1000A06D0();
        uint64_t v37 = StringProtocol.localizedUppercase.getter();
        uint64_t v38 = a1;
        uint64_t v40 = v39;
        swift_bridgeObjectRelease();
        *(void *)(v36 + 56) = &type metadata for String;
        *(void *)(v36 + 64) = sub_1000AA64C();
        *(void *)(v36 + 32) = v37;
        *(void *)(v36 + 40) = v40;
        a1 = v38;
        uint64_t v7 = v34;
      }
      else
      {
        uint64_t v24 = FIUINumberOfUnitsInPaceForPaceFormat();
        id v25 = [self mainBundle];
        NSString v26 = String._bridgeToObjectiveC()();
        uint64_t v27 = v21;
        uint64_t v28 = v7;
        id v29 = [v25 localizedStringForKey:v26 value:0 table:0];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000AFA94((uint64_t *)&unk_1009546D0);
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_10074E640;
        id v31 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:v24];
        uint64_t v7 = v28;
        *(void *)(v30 + 56) = sub_10007E2D8(0, (unint64_t *)&qword_100955BE0);
        *(void *)(v30 + 64) = sub_1001DCC84();
        *(void *)(v30 + 32) = v31;
        *(void *)(v30 + 96) = &type metadata for String;
        *(void *)(v30 + 104) = sub_1000AA64C();
        *(void *)(v30 + 72) = v65;
        *(void *)(v30 + 80) = v27;
      }
      uint64_t v65 = String.init(format:_:)();
      uint64_t v61 = v41;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    id result = [v8 unitManager];
    if (result)
    {
      uint64_t v16 = result;
      id v17 = [result userLapLengthHKUnit];

      id v18 = [v8 localizedShortUnitStringForDistanceUnit:FIUIDistanceUnitForHKUnit()];
      if (!v18)
      {

        goto LABEL_23;
      }
      NSString v19 = v18;
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1001DBBD4(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(v2 + 16);
  id v6 = [v5 localizedShortUnitStringForDistanceUnit:1];
  if (v6)
  {
    uint64_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = type metadata accessor for WorkoutChartDataElement(0);
    id v9 = [v5 localizedStringWithDistanceInMeters:1 distanceUnit:0 unitStyle:2 decimalPrecision:*(double *)(a1 + *(int *)(v8 + 24)) / 100.0];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      id v14 = [v5 localizedStringWithDistanceInMeters:1 distanceUnit:0 unitStyle:2 decimalPrecision:*(double *)(a1 + *(int *)(v8 + 28)) / 100.0];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        sub_1000A06D0();
        uint64_t v19 = StringProtocol.localizedUppercase.getter();
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();
        id v22 = sub_1001DC410(v11, v13, v16, v18, v19, v21, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v22;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }

  return sub_1001DC608(a2);
}

id sub_1001DBDB8(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = type metadata accessor for WorkoutChartDataElement(0);
  id v7 = [v5 localizedStringWithDistanceInMeters:1 distanceUnit:0 unitStyle:2 decimalPrecision:*(double *)(a1 + *(int *)(v6 + 24)) / 100.0];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    id v12 = [v5 localizedStringWithDistanceInMeters:1 distanceUnit:0 unitStyle:2 decimalPrecision:*(double *)(a1 + *(int *)(v6 + 28)) / 100.0];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      id v17 = [*(id *)(v2 + 40) unitStringFromValue:9 unit:100.0];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000A06D0();
      uint64_t v18 = StringProtocol.localizedUppercase.getter();
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      id v21 = sub_1001DC410(v9, v11, v14, v16, v18, v20, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v21;
    }
    swift_bridgeObjectRelease();
  }

  return sub_1001DC608(a2);
}

id sub_1001DBF90(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v8 = (int *)type metadata accessor for WorkoutChartDataElement(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    if (qword_10094A618 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)qword_100997710;
    return sub_1001DC608(v13);
  }
  else
  {
    static Date.now.getter();
    *(void *)&v10[v8[5]] = a3;
    *(void *)&v10[v8[6]] = a3;
    *(void *)&v10[v8[7]] = a3;
    if (qword_10094A618 != -1) {
      swift_once();
    }
    uint64_t v11 = (void *)qword_100997710;
    switch(a5)
    {
      case 1:
      case 8:
      case 9:
        id v12 = sub_1001DB540((uint64_t)v10, (void *)qword_100997710);
        break;
      case 2:
        id v12 = sub_1001DB124((uint64_t)v10, (void *)qword_100997710);
        break;
      case 3:
      case 10:
        sub_1001DAE98((uint64_t)v10, (void *)qword_100997710);
        break;
      case 4:
        sub_1001DC9BC((uint64_t)v10, (void *)qword_100997710);
        break;
      case 5:
        sub_1001DC7B8((uint64_t)v10, (void *)qword_100997710);
        break;
      case 6:
        id v12 = sub_1001DBBD4((uint64_t)v10, (void *)qword_100997710);
        break;
      case 7:
        id v12 = sub_1001DBDB8((uint64_t)v10, (void *)qword_100997710);
        break;
      default:
        id v12 = sub_1001DB328((uint64_t)v10, (void *)qword_100997710);
        break;
    }
    uint64_t v15 = v12;
    sub_1000AFA94((uint64_t *)&unk_10095BF70);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1007509E0;
    *(void *)(inited + 32) = NSFontAttributeName;
    *(void *)(inited + 64) = sub_10007E2D8(0, (unint64_t *)&qword_1009587A0);
    *(void *)(inited + 40) = v11;
    swift_bridgeObjectRetain();
    id v17 = NSFontAttributeName;
    id v18 = v11;
    sub_1000DFC2C(inited);
    id v19 = objc_allocWithZone((Class)NSMutableAttributedString);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1001DCBD0();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v22 = [v19 initWithString:v20 attributes:isa];

    id v23 = [v22 string];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v24 = objc_allocWithZone((Class)NSString);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v26 = [v24 initWithString:v25];

    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v26 rangeOfString:v27];
    uint64_t v30 = v29;

    if (v28 == (id)NSNotFound.getter())
    {
      sub_1001DCC28((uint64_t)v10);
    }
    else
    {
      [v22 replaceCharactersInRange:v28 withAttributedString:v30];

      sub_1001DCC28((uint64_t)v10);
    }
    return v22;
  }
}

uint64_t sub_1001DC39C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WorkoutChartDataElementFormattingManager()
{
  return self;
}

id sub_1001DC410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return sub_10052463C(a1, a2, a5, a6, a7);
  }
  else
  {
    id v15 = [self mainBundle];
    NSString v16 = String._bridgeToObjectiveC()();
    id v17 = [v15 localizedStringForKey:v16 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000AFA94((uint64_t *)&unk_1009546D0);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_10074E640;
    *(void *)(v18 + 56) = &type metadata for String;
    unint64_t v19 = sub_1000AA64C();
    *(void *)(v18 + 32) = a1;
    *(void *)(v18 + 40) = a2;
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = v19;
    *(void *)(v18 + 64) = v19;
    *(void *)(v18 + 72) = a3;
    *(void *)(v18 + 80) = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = String.init(format:_:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    id v23 = sub_10052463C(v20, v22, a5, a6, a7);
    swift_bridgeObjectRelease();
    return v23;
  }
}

id sub_1001DC608(void *a1)
{
  id v2 = [self mainBundle];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 localizedStringForKey:v3 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000AFA94((uint64_t *)&unk_10095BF70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007509E0;
  *(void *)(inited + 32) = NSFontAttributeName;
  *(void *)(inited + 64) = sub_10007E2D8(0, (unint64_t *)&qword_1009587A0);
  *(void *)(inited + 40) = a1;
  uint64_t v6 = NSFontAttributeName;
  id v7 = a1;
  sub_1000DFC2C(inited);
  id v8 = objc_allocWithZone((Class)NSAttributedString);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1001DCBD0();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v8 initWithString:v9 attributes:isa];

  return v11;
}

void sub_1001DC7B8(uint64_t a1, void *a2)
{
  id v3 = [self secondUnitWithMetricPrefix:4];
  id v4 = [v3 unitString];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = type metadata accessor for WorkoutChartDataElement(0);
  double v6 = *(double *)(a1 + *(int *)(v5 + 24));
  id v7 = self;
  id v8 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v6];
  id v9 = [v7 stringWithNumber:v8 decimalPrecision:1];

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    id v13 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + *(int *)(v5 + 28))];
    id v14 = [v7 stringWithNumber:v13 decimalPrecision:1];

    if (v14)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      sub_1000A06D0();
      uint64_t v18 = StringProtocol.localizedUppercase.getter();
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      sub_1001DC410(v10, v12, v15, v17, v18, v20, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1001DC9BC(uint64_t a1, void *a2)
{
  id v4 = self;
  id v5 = [v4 localizedShortPowerUnitString];
  if (v5)
  {
    double v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = type metadata accessor for WorkoutChartDataElement(0);
    id v8 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + *(int *)(v7 + 24))];
    id v9 = [v4 stringWithNumber:v8 decimalPrecision:1];

    if (v9)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      id v13 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + *(int *)(v7 + 28))];
      id v14 = [v4 stringWithNumber:v13 decimalPrecision:1];

      if (v14)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        sub_1000A06D0();
        uint64_t v18 = StringProtocol.localizedUppercase.getter();
        uint64_t v20 = v19;
        swift_bridgeObjectRelease();
        sub_1001DC410(v10, v12, v15, v17, v18, v20, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    sub_1001DC608(a2);
  }
}

unint64_t sub_1001DCBD0()
{
  unint64_t result = qword_10094B9A0;
  if (!qword_10094B9A0)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094B9A0);
  }
  return result;
}

uint64_t sub_1001DCC28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WorkoutChartDataElement(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001DCC84()
{
  unint64_t result = qword_10094EE48;
  if (!qword_10094EE48)
  {
    sub_10007E2D8(255, (unint64_t *)&qword_100955BE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094EE48);
  }
  return result;
}

uint64_t sub_1001DCCEC()
{
  return sub_1001DCD9C(&qword_10094EE50, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t type metadata accessor for WorkoutActivityEntity(uint64_t a1)
{
  return sub_10009CFF8(a1, qword_10094EFD8);
}

uint64_t sub_1001DCD54()
{
  return sub_1001DCD9C(&qword_10094EE58, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001DCD9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001DCDE4()
{
  return sub_1001DCD9C(&qword_10094EE60, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

unint64_t sub_1001DCE30()
{
  unint64_t result = qword_10094EE68;
  if (!qword_10094EE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094EE68);
  }
  return result;
}

uint64_t sub_1001DCE84()
{
  uint64_t result = sub_10047A8B0();
  qword_100997718 = result;
  unk_100997720 = v1;
  qword_100997728 = v2;
  unk_100997730 = v3;
  return result;
}

uint64_t sub_1001DCEAC()
{
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  sub_1000258C4(v0, qword_100997738);
  sub_1000876DC(v0, (uint64_t)qword_100997738);
  return TypeDisplayRepresentation.init(stringLiteral:)();
}

uint64_t sub_1001DCF10()
{
  uint64_t v0 = sub_1000AFA94(&qword_10094F148);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000AFA94(&qword_10094F150);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_1000AFA94(&qword_10094F140);
  sub_1000258C4(v5, qword_100997750);
  sub_1000876DC(v5, (uint64_t)qword_100997750);
  type metadata accessor for WorkoutActivityEntity(0);
  sub_1001DCD9C(&qword_10094EE70, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
  EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._object = (void *)0x80000001007B85D0;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for EntityURLRepresentation.StringInterpolation.Token.id<A>(_:), v0);
  EntityURLRepresentation.StringInterpolation.appendInterpolation(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v7);
  return EntityURLRepresentation.init(stringInterpolation:)();
}

uint64_t sub_1001DD130()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001DCD9C((unint64_t *)&qword_10095F730, (void (*)(uint64_t))&type metadata accessor for UUID);
  v10[0] = dispatch thunk of CustomStringConvertible.description.getter();
  v10[1] = v5;
  v6._uint64_t countAndFlagsBits = 47;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + *(int *)(type metadata accessor for WorkoutActivityEntity(0)
                                                                      + 20)), "UUID"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v10[0];
}

uint64_t sub_1001DD2AC()
{
  uint64_t v1 = type metadata accessor for WorkoutActivityEntity(0);
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24)) == 1)
  {
    id v2 = [*(id *)(v0 + *(int *)(v1 + 20)) fiui_activityType];
    [v2 effectiveTypeIdentifier];
    [v2 swimmingLocationType];
    [v2 isIndoor];
    uint64_t result = (uint64_t)(id)FILocalizedNameForActivityType();
    if (result)
    {
      uint64_t v4 = (void *)result;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v5;
    }
  }
  else
  {
    uint64_t result = EntityProperty.wrappedValue.getter();
    if (!__OFADD__(v7, 1))
    {
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      return 0x6C61767265746E49;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001DD3F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000AFA94(&qword_10094F098);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000AFA94(&qword_10094F070);
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  unint64_t v85 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000AFA94(&qword_10094F0A0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (int *)type metadata accessor for WorkoutActivityEntity(0);
  if (*(unsigned char *)(v1 + v15[6]) != 1)
  {
    id v33 = [self mainBundle];
    NSString v34 = String._bridgeToObjectiveC()();
    id v35 = [v33 localizedStringForKey:v34 value:0 table:0];

    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    uint64_t v84 = *(void *)(v1 + v15[26]);
    AppDependency.wrappedValue.getter();
    uint64_t v39 = v89;
    uint64_t v82 = *(void *)(v1 + v15[11]);
    EntityProperty.wrappedValue.getter();
    Measurement.value.getter();
    double v41 = v40;
    char v81 = *(void (**)(char *, uint64_t))(v8 + 8);
    v81(v10, v7);
    id v42 = [v39 stringWithDuration:3 durationFormat:v41];

    uint64_t v80 = v36;
    unint64_t v83 = v38;
    if (v42)
    {
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v44;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = v36;
    }
    uint64_t v45 = v86;
    EntityProperty.wrappedValue.getter();
    uint64_t v46 = v87;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v4, 1, v87) == 1)
    {
      swift_bridgeObjectRelease();
      sub_10008DB18((uint64_t)v4, &qword_10094F098);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v85, v4, v46);
      id v47 = [self meterUnit];
      Measurement.value.getter();
      id v49 = [self quantityWithUnit:v47 doubleValue:v48];

      id v50 = [*(id *)(v1 + v15[5]) fiui_activityType];
      uint64_t v51 = FIUIDistanceTypeForActivityType();

      uint64_t v52 = FIUIPaceFormatForDistanceType();
      AppDependency.wrappedValue.getter();
      uint64_t v53 = v89;
      id v54 = v49;
      EntityProperty.wrappedValue.getter();
      Measurement.value.getter();
      double v56 = v55;
      uint64_t v57 = v7;
      uint64_t v58 = v54;
      v81(v10, v57);
      id v59 = [v53 localizedPaceStringWithDistance:v54 overDuration:v52 paceFormat:v51 distanceType:v56];

      if (v59)
      {
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v62 = v61;

        uint64_t v63 = v83;
      }
      else
      {
        uint64_t v63 = v83;
        swift_bridgeObjectRetain();
        uint64_t v60 = v80;
        uint64_t v62 = v63;
      }
      AppDependency.wrappedValue.getter();
      unint64_t v70 = v89;
      Measurement.value.getter();
      id v71 = [v70 localizedStringWithDistanceInMeters:v51 distanceType:1 unitStyle:];

      if (v71)
      {
        uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v74 = v73;
        swift_bridgeObjectRelease();

        uint64_t v63 = v74;
      }
      else
      {
        uint64_t v72 = v80;
      }
      uint64_t v89 = (void *)v72;
      unint64_t v90 = (unint64_t)v63;
      v75._uint64_t countAndFlagsBits = 548913696;
      v75._object = (void *)0xA400000000000000;
      String.append(_:)(v75);
      v76._uint64_t countAndFlagsBits = v43;
      v76._object = v38;
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      v77._uint64_t countAndFlagsBits = 548913696;
      v77._object = (void *)0xA400000000000000;
      String.append(_:)(v77);
      v78._uint64_t countAndFlagsBits = v60;
      v78._object = v62;
      String.append(_:)(v78);

      swift_bridgeObjectRelease();
      uint64_t v43 = (uint64_t)v89;
      (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v87);
    }
    return v43;
  }
  uint64_t v16 = self;
  id v17 = [*(id *)(v1 + v15[5]) startDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  id v19 = [self fu_bodyShortFont];
  id v20 = [v16 formattedListStringForDate:isa font:v19];

  id v21 = [v20 string];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  uint64_t v89 = 0;
  unint64_t v90 = 0xE000000000000000;
  if (qword_10094A638 != -1) {
    swift_once();
  }
  NSString v25 = (void *)qword_100997768;
  uint64_t result = EntityProperty.wrappedValue.getter();
  if (!__OFADD__(v88, 1))
  {
    uint64_t v27 = v88 + 1;
    id v28 = [objc_allocWithZone((Class)NSNumber) initWithDouble:(double)v27];
    id v29 = [v25 stringFromNumber:v28];

    if (v29)
    {
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v32 = v31;
    }
    else
    {
      uint64_t v30 = 0;
      id v32 = (void *)0xE000000000000000;
    }
    v64._uint64_t countAndFlagsBits = v30;
    v64._object = v32;
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65._uint64_t countAndFlagsBits = 0x7469766974636120;
    v65._object = (void *)0xE900000000000079;
    String.append(_:)(v65);
    uint64_t v66 = (uint64_t)v89;
    unint64_t v67 = (void *)v90;
    uint64_t v89 = (void *)v22;
    unint64_t v90 = v24;
    v68._uint64_t countAndFlagsBits = 548913696;
    v68._object = (void *)0xA400000000000000;
    String.append(_:)(v68);
    v69._uint64_t countAndFlagsBits = v66;
    v69._object = v67;
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    return (uint64_t)v89;
  }
  __break(1u);
  return result;
}

id sub_1001DDC20()
{
  id v0 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  id result = [v0 setNumberStyle:6];
  qword_100997768 = (uint64_t)v0;
  return result;
}

uint64_t sub_1001DDC70@<X0>(uint64_t a1@<X8>)
{
  v16[1] = a1;
  uint64_t v1 = sub_1000AFA94(&qword_10094DE78);
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_1000AFA94(&qword_10094D328);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  __chkstk_darwin(v8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v9);
  v10._uint64_t countAndFlagsBits = sub_1001DD2AC();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  LocalizedStringResource.init(stringInterpolation:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v12);
  v13._uint64_t countAndFlagsBits = sub_1001DD3F8();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v14);
  LocalizedStringResource.init(stringInterpolation:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  type metadata accessor for WorkoutActivityEntity(0);
  swift_bridgeObjectRetain();
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
  return DisplayRepresentation.init(title:subtitle:image:)();
}

void sub_1001DDF38(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  id v232 = a3;
  uint64_t v242 = a2;
  id v244 = a1;
  uint64_t v7 = sub_1000AFA94(&qword_10094F068);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v207 = (uint64_t)v201 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v206 = (char *)v201 - v10;
  uint64_t v11 = sub_1000AFA94(&qword_10094F070);
  uint64_t v235 = *(void *)(v11 - 8);
  uint64_t v236 = v11;
  __chkstk_darwin(v11);
  v216 = (char *)v201 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000AFA94(&qword_10094F078);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v226 = (uint64_t)v201 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v225 = (char *)v201 - v16;
  uint64_t v17 = sub_1000AFA94(&qword_10094F080);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v219 = (uint64_t)v201 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v218 = (char *)v201 - v20;
  uint64_t v21 = sub_1000AFA94(&qword_10094F088);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v212 = (uint64_t)v201 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v211 = (char *)v201 - v24;
  uint64_t v214 = sub_1000AFA94(&qword_10094F090);
  uint64_t v213 = *(void *)(v214 - 8);
  uint64_t v25 = __chkstk_darwin(v214);
  v224 = (char *)v201 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v223 = (char *)v201 - v27;
  uint64_t v28 = sub_1000AFA94(&qword_10094F098);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  v228 = (char *)v201 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v234 = (uint64_t)v201 - v32;
  __chkstk_darwin(v31);
  v233 = (char *)v201 - v33;
  uint64_t v34 = sub_1000AFA94(&qword_10094F0A0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v240 = v34;
  uint64_t v241 = v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v231 = (char *)v201 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v239 = (char *)v201 - v38;
  uint64_t v39 = type metadata accessor for LocalizedStringResource();
  __chkstk_darwin(v39 - 8);
  double v40 = (int *)type metadata accessor for WorkoutActivityEntity(0);
  double v41 = (uint64_t *)(a5 + v40[7]);
  *double v41 = 0;
  v41[1] = 0xE000000000000000;
  id v42 = (void *)v40[10];
  sub_1000AFA94(&qword_10094F0A8);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v43 = EntityProperty<>.init(title:)();
  id v229 = v42;
  *(void *)((char *)v42 + a5) = v43;
  uint64_t v44 = v40[11];
  sub_1000AFA94(&qword_10094F0B0);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v45 = EntityProperty<>.init(title:)();
  uint64_t v238 = v44;
  *(void *)(a5 + v44) = v45;
  uint64_t v46 = (void *)v40[12];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v47 = EntityProperty<>.init(title:)();
  id v230 = v46;
  *(void *)((char *)v46 + a5) = v47;
  uint64_t v48 = v40[13];
  sub_1000AFA94(&qword_10094F0B8);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v49 = EntityProperty<>.init(title:)();
  uint64_t v237 = v48;
  *(void *)(a5 + v48) = v49;
  uint64_t v50 = v40[14];
  sub_1000AFA94(&qword_10094F0C0);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v51 = EntityProperty<>.init(title:)();
  uint64_t v210 = v50;
  *(void *)(a5 + v50) = v51;
  uint64_t v52 = v40[15];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v53 = EntityProperty<>.init(title:)();
  uint64_t v208 = v52;
  *(void *)(a5 + v52) = v53;
  uint64_t v54 = v40[16];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v55 = EntityProperty<>.init(title:)();
  uint64_t v209 = v54;
  *(void *)(a5 + v54) = v55;
  uint64_t v56 = v40[17];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v57 = EntityProperty<>.init(title:)();
  uint64_t v222 = v56;
  *(void *)(a5 + v56) = v57;
  uint64_t v58 = v40[18];
  sub_1000AFA94(&qword_10094F0C8);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v59 = EntityProperty<>.init(title:)();
  uint64_t v217 = v58;
  *(void *)(a5 + v58) = v59;
  uint64_t v60 = v40[19];
  sub_1000AFA94(&qword_10094F0D0);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v61 = EntityProperty<>.init(title:)();
  uint64_t v203 = v60;
  *(void *)(a5 + v60) = v61;
  uint64_t v62 = v40[20];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v63 = EntityProperty<>.init(title:)();
  uint64_t v221 = v62;
  *(void *)(a5 + v62) = v63;
  uint64_t v64 = v40[21];
  sub_1000AFA94(&qword_10094F0D8);
  LocalizedStringResource.init(stringLiteral:)();
  *(void *)(a5 + v64) = EntityProperty<>.init(title:)();
  uint64_t v65 = v40[22];
  sub_1000AFA94(&qword_10094F0E0);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v66 = EntityProperty<>.init(title:)();
  uint64_t v215 = v65;
  *(void *)(a5 + v65) = v66;
  uint64_t v67 = v40[23];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v68 = EntityProperty<>.init(title:)();
  uint64_t v205 = v67;
  *(void *)(a5 + v67) = v68;
  uint64_t v69 = v40[24];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v70 = EntityProperty<>.init(title:)();
  uint64_t v220 = v69;
  *(void *)(a5 + v69) = v70;
  uint64_t v71 = v40[25];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v72 = EntityProperty<>.init(title:)();
  uint64_t v204 = v71;
  *(void *)(a5 + v71) = v72;
  uint64_t v73 = v40[26];
  sub_1000AFA94(&qword_10094D340);
  type metadata accessor for AppDependencyManager();
  long long v246 = 0u;
  long long v247 = 0u;
  uint64_t v248 = 0;
  static AppDependencyManager.shared.getter();
  *(void *)(a5 + v73) = AppDependency.__allocating_init(key:manager:)();
  id v74 = [a4 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v75 = v244;
  *(void *)(a5 + v40[5]) = v244;
  id v76 = v75;
  id v227 = a4;
  uint64_t v77 = v242;
  *(unsigned char *)(a5 + v40[6]) = [a4 isMultiSportWorkout];
  *(void *)(a5 + v40[8]) = v77;
  swift_retain();
  id v244 = v76;
  id v78 = [v76 metadata];
  if (!v78)
  {
    long long v246 = 0u;
    long long v247 = 0u;
LABEL_10:
    sub_10008DB18((uint64_t)&v246, &qword_100955A00);
    char v86 = 2;
    goto LABEL_11;
  }
  uint64_t v79 = v78;
  uint64_t v80 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for IntervalWorkoutConfiguration();
  uint64_t v81 = static IntervalWorkoutConfiguration.StepSuccessMetadataKey.getter();
  if (*(void *)(v80 + 16) && (unint64_t v83 = sub_1000DA1C0(v81, v82), (v84 & 1) != 0))
  {
    sub_10008F484(*(void *)(v80 + 56) + 32 * v83, (uint64_t)&v246);
  }
  else
  {
    long long v246 = 0u;
    long long v247 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v247 + 1)) {
    goto LABEL_10;
  }
  int v85 = swift_dynamicCast();
  char v86 = v245;
  if (!v85) {
    char v86 = 2;
  }
LABEL_11:
  uint64_t v202 = v40[9];
  *(unsigned char *)(a5 + v202) = v86;
  *(void *)&long long v246 = v232;
  EntityProperty.wrappedValue.setter();
  id v229 = [v244 fiui_activityType];
  id v87 = [v229 symbolName];
  uint64_t v243 = a5;
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v91 = v90;
  }
  else
  {
    unint64_t v91 = 0x80000001007B8590;
    uint64_t v89 = 0xD000000000000011;
  }
  swift_bridgeObjectRelease();
  *double v41 = v89;
  v41[1] = v91;
  [v244 duration];
  id v232 = self;
  id v92 = [v232 seconds];
  sub_10007E2D8(0, &qword_10094F0E8);
  unint64_t v93 = v239;
  Measurement.init(value:unit:)();
  uint64_t v94 = v243;
  uint64_t v96 = v240;
  uint64_t v95 = v241;
  unint64_t v97 = *(void (**)(char *, char *, uint64_t))(v241 + 16);
  uint64_t v98 = v231;
  v97(v231, v93, v240);
  EntityProperty.wrappedValue.setter();
  char v99 = *(void (**)(char *, uint64_t))(v95 + 8);
  v99(v93, v96);
  [v244 elapsedTime];
  id v100 = [v232 seconds];
  Measurement.init(value:unit:)();
  v97(v98, v93, v96);
  EntityProperty.wrappedValue.setter();
  uint64_t v101 = v93;
  uint64_t v102 = v94;
  uint64_t v241 = v95 + 8;
  id v232 = v99;
  v99(v101, v96);
  uint64_t v103 = &selRef_setModalPresentationStyle_;
  uint64_t v104 = v235;
  uint64_t v105 = v236;
  if (v242)
  {
    swift_retain();
    uint64_t v106 = (void *)WorkoutStep.goal.getter();
    id v107 = [v106 goalTypeIdentifier];

    if (v107 == (id)1)
    {
      unint64_t v108 = (void *)WorkoutStep.goal.getter();
      id v109 = [v108 value];

      if (v109)
      {
        int v110 = *(unsigned __int8 *)(v102 + v202);
        if (v110 != 2 && (v110 & 1) != 0)
        {
          id v197 = [self meterUnit];
          [v109 doubleValueForUnit:v197];

          id v198 = [self meters];
          sub_10007E2D8(0, &qword_10094F128);
          uint64_t v199 = (uint64_t)v233;
          Measurement.init(value:unit:)();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v199, 0, 1, v105);
          sub_1000AEF2C(v199, v234, &qword_10094F098);
          EntityProperty.wrappedValue.setter();
          sub_10008DB18(v199, &qword_10094F098);

          swift_release();
          id v111 = v244;
          uint64_t v103 = &selRef_setModalPresentationStyle_;
          goto LABEL_26;
        }
        swift_release();
      }
      else
      {
        swift_release();
      }
      uint64_t v103 = &selRef_setModalPresentationStyle_;
    }
    else
    {
      swift_release();
    }
  }
  id v111 = v244;
  id v112 = [v244 distanceType];
  if (v112)
  {
    unint64_t v113 = v112;
    id v114 = [v111 v103[371] v112];
    id v115 = [v114 sumQuantity];

    if (v115)
    {
      id v116 = [self meterUnit];
      [v115 doubleValueForUnit:v116];

      id v117 = [self meters];
      sub_10007E2D8(0, &qword_10094F128);
      uint64_t v118 = (uint64_t)v233;
      Measurement.init(value:unit:)();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v118, 0, 1, v105);
      sub_1000AEF2C(v118, v234, &qword_10094F098);
      EntityProperty.wrappedValue.setter();
      uint64_t v119 = v118;
      uint64_t v103 = &selRef_setModalPresentationStyle_;
      sub_10008DB18(v119, &qword_10094F098);
    }
  }
LABEL_26:
  uint64_t v120 = sub_10007E2D8(0, &qword_10094F0F0);
  Class isa = HKQuantityType.init(_:)(HKQuantityTypeIdentifierActiveEnergyBurned).super.super.super.isa;
  id v122 = [v111 v103[371]];

  uint64_t v123 = (uint64_t)[v122 sumQuantity];
  if (v123)
  {
    Class v124 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierBasalEnergyBurned).super.super.super.isa;
    id v125 = [v111 v103[371] v124];

    id v126 = [v125 sumQuantity];
    if (v126)
    {
      BOOL v127 = self;
      id v128 = [v127 largeCalorieUnit];
      [v126 doubleValueForUnit:v128];

      v129 = self;
      uint64_t v130 = (void *)v123;
      uint64_t v202 = v123;
      Swift::Int v131 = v129;
      id v132 = [v129 kilocalories];
      id v230 = v126;
      uint64_t v133 = sub_10007E2D8(0, &qword_10094F130);
      char v134 = v223;
      v201[1] = v133;
      Measurement.init(value:unit:)();
      id v135 = [v127 largeCalorieUnit];
      [v130 doubleValueForUnit:v135];

      id v136 = [v131 kilocalories];
      Measurement.init(value:unit:)();
      v231 = (char *)v120;
      uint64_t v137 = v213;
      uint64_t v138 = *(void (**)(char *, char *, uint64_t))(v213 + 16);
      uint64_t v139 = (uint64_t)v211;
      uint64_t v140 = v214;
      v138(v211, v134, v214);
      uint64_t v123 = v137 + 56;
      uint64_t v141 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v137 + 56);
      v141(v139, 0, 1, v140);
      uint64_t v142 = v212;
      sub_1000AEF2C(v139, v212, &qword_10094F088);
      EntityProperty.wrappedValue.setter();
      sub_10008DB18(v139, &qword_10094F088);
      uint64_t v143 = v224;
      v138((char *)v139, v224, v140);
      v141(v139, 0, 1, v140);
      sub_1000AEF2C(v139, v142, &qword_10094F088);
      EntityProperty.wrappedValue.setter();
      sub_10008DB18(v139, &qword_10094F088);
      BOOL v144 = v223;
      static Measurement<>.+ infix(_:_:)();
      v141(v139, 0, 1, v140);
      uint64_t v105 = v236;
      sub_1000AEF2C(v139, v142, &qword_10094F088);
      EntityProperty.wrappedValue.setter();
      sub_10008DB18(v139, &qword_10094F088);

      uint64_t v145 = *(void (**)(char *, uint64_t))(v137 + 8);
      uint64_t v146 = v143;
      uint64_t v104 = v235;
      v145(v146, v140);
      v147 = v144;
      id v111 = v244;
      uint64_t v103 = &selRef_setModalPresentationStyle_;
      v145(v147, v140);
    }
    else
    {
    }
  }
  id v148 = [v111 fiui_elevationGain];
  if (v148)
  {
    uint64_t v149 = v148;
    id v150 = [self meterUnit];
    [v149 doubleValueForUnit:v150];

    id v151 = [self meters];
    sub_10007E2D8(0, &qword_10094F128);
    uint64_t v152 = (uint64_t)v233;
    Measurement.init(value:unit:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v152, 0, 1, v105);
    uint64_t v123 = (uint64_t)&qword_10094F098;
    sub_1000AEF2C(v152, v234, &qword_10094F098);
    EntityProperty.wrappedValue.setter();
    uint64_t v153 = v152;
    uint64_t v103 = &selRef_setModalPresentationStyle_;
    sub_10008DB18(v153, &qword_10094F098);
  }
  if (sub_1006CB618() > 0.0)
  {
    id v154 = [self watts];
    sub_10007E2D8(0, &qword_10094F118);
    uint64_t v155 = (uint64_t)v218;
    Measurement.init(value:unit:)();
    uint64_t v156 = sub_1000AFA94(&qword_10094F120);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(v155, 0, 1, v156);
    uint64_t v123 = v219;
    sub_1000AEF2C(v155, v219, &qword_10094F080);
    EntityProperty.wrappedValue.setter();
    sub_10008DB18(v155, &qword_10094F080);
  }
  Class v157 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierFlightsClimbed).super.super.super.isa;
  id v158 = [v111 v103[371] v157];

  unint64_t v159 = (unint64_t)[v158 sumQuantity];
  if (!v159) {
    goto LABEL_39;
  }
  id v160 = [self countUnit];
  [(id)v159 doubleValueForUnit:v160];
  double v162 = v161;

  if ((~*(void *)&v162 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_81;
  }
  if (v162 <= -9.22337204e18)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (v162 >= 9.22337204e18)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  *(void *)&long long v246 = (uint64_t)v162;
  BYTE8(v246) = 0;
  EntityProperty.wrappedValue.setter();

LABEL_39:
  Class v163 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierStepCount).super.super.super.isa;
  unint64_t v159 = [v111 v103[371] v163];

  if (v159)
  {
    id v164 = [(id)v159 sumQuantity];
    if (v164)
    {
      uint64_t v123 = (uint64_t)v164;
      id v165 = [self countUnit];
      [(id)v123 doubleValueForUnit:v165];
      double v167 = v166;

      if ((~*(void *)&v167 & 0x7FF0000000000000) == 0) {
        goto LABEL_84;
      }
      if (v167 <= -9.22337204e18) {
        goto LABEL_85;
      }
      if (v167 >= 9.22337204e18) {
        goto LABEL_86;
      }
      *(void *)&long long v246 = (uint64_t)v167;
      BYTE8(v246) = 0;
      EntityProperty.wrappedValue.setter();
    }
    else
    {
    }
  }
  Class v168 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierCyclingSpeed).super.super.super.isa;
  id v169 = [v111 v103[371] v168];

  if (v169)
  {
    id v170 = [v169 maximumQuantity];
    if (v170)
    {
      uint64_t v171 = v170;
      NSString v172 = String._bridgeToObjectiveC()();
      id v173 = [self unitFromString:v172];

      [v171 doubleValueForUnit:v173];
      id v174 = [self metersPerSecond];
      sub_10007E2D8(0, &qword_10094F108);
      uint64_t v175 = (uint64_t)v225;
      Measurement.init(value:unit:)();
      uint64_t v176 = sub_1000AFA94(&qword_10094F110);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v176 - 8) + 56))(v175, 0, 1, v176);
      sub_1000AEF2C(v175, v226, &qword_10094F078);
      uint64_t v103 = &selRef_setModalPresentationStyle_;
      EntityProperty.wrappedValue.setter();
      id v111 = v244;
      sub_10008DB18(v175, &qword_10094F078);
    }
  }
  uint64_t v177 = (uint64_t)v228;
  EntityProperty.wrappedValue.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v177, 1, v105) == 1)
  {
    sub_10008DB18(v177, &qword_10094F098);
  }
  else
  {
    Swift::Int v178 = v216;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 32))(v216, v177, v105);
    Measurement.value.getter();
    uint64_t v179 = v239;
    EntityProperty.wrappedValue.getter();
    uint64_t v180 = v240;
    Measurement.value.getter();
    ((void (*)(char *, uint64_t))v232)(v179, v180);
    id v181 = [self metersPerSecond];
    sub_10007E2D8(0, &qword_10094F108);
    uint64_t v182 = (uint64_t)v225;
    Measurement.init(value:unit:)();
    uint64_t v183 = sub_1000AFA94(&qword_10094F110);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v183 - 8) + 56))(v182, 0, 1, v183);
    sub_1000AEF2C(v182, v226, &qword_10094F078);
    EntityProperty.wrappedValue.setter();
    uint64_t v184 = v182;
    uint64_t v103 = &selRef_setModalPresentationStyle_;
    sub_10008DB18(v184, &qword_10094F078);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v178, v105);
  }
  Class v185 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierHeartRate).super.super.super.isa;
  unint64_t v159 = [v111 v103[371] v185];

  if (!v159) {
    goto LABEL_58;
  }
  id v186 = [(id)v159 averageQuantity];
  if (!v186) {
    goto LABEL_57;
  }
  uint64_t v123 = (uint64_t)v186;
  id v187 = [self _countPerMinuteUnit];
  [(id)v123 doubleValueForUnit:v187];

  if (qword_10094A678 != -1) {
    goto LABEL_87;
  }
  while (1)
  {
    v188 = (void *)qword_1009977F8;
    sub_10007E2D8(0, &qword_10094F0F8);
    id v189 = v188;
    uint64_t v190 = (uint64_t)v206;
    Measurement.init(value:unit:)();
    uint64_t v191 = sub_1000AFA94(&qword_10094F100);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v191 - 8) + 56))(v190, 0, 1, v191);
    sub_1000AEF2C(v190, v207, &qword_10094F068);
    EntityProperty.wrappedValue.setter();
    sub_10008DB18(v190, &qword_10094F068);

LABEL_57:
LABEL_58:
    id v192 = [v111 workoutEvents];
    sub_10007E2D8(0, (unint64_t *)&qword_10094BED8);
    unint64_t v159 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v246 = _swiftEmptyArrayStorage;
    if (v159 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v123 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v123)
      {
LABEL_73:
        swift_bridgeObjectRelease();
        unint64_t v196 = (unint64_t)_swiftEmptyArrayStorage;
        if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
          goto LABEL_79;
        }
        goto LABEL_74;
      }
    }
    else
    {
      uint64_t v123 = *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v123) {
        goto LABEL_73;
      }
    }
    if (v123 >= 1) {
      break;
    }
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    swift_once();
  }
  for (uint64_t i = 0; i != v123; ++i)
  {
    if ((v159 & 0xC000000000000001) != 0) {
      id v194 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v194 = *(id *)(v159 + 8 * i + 32);
    }
    v195 = v194;
    if ([v194 type] == (id)3)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v196 = v246;
  id v111 = v244;
  if ((v246 & 0x8000000000000000) != 0) {
    goto LABEL_79;
  }
LABEL_74:
  if ((v196 & 0x4000000000000000) == 0)
  {
    uint64_t v200 = *(void *)(v196 + 16);
    goto LABEL_76;
  }
LABEL_79:
  swift_bridgeObjectRetain();
  uint64_t v200 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_76:
  swift_release();
  if (v200 > 0)
  {
    *(void *)&long long v246 = v200;
    BYTE8(v246) = 0;
    EntityProperty.wrappedValue.setter();
  }

  swift_release();
}

uint64_t sub_1001DFE24@<X0>(void *a1@<X8>)
{
  if (qword_10094A620 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_100997720;
  uint64_t v3 = qword_100997728;
  uint64_t v4 = unk_100997730;
  *a1 = qword_100997718;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t sub_1001DFEBC()
{
  return sub_1001DCD9C(&qword_10094EE70, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001DFF04()
{
  return sub_1001DCD9C(&qword_10094EE78, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001DFF4C@<X0>(uint64_t a1@<X8>)
{
  if (qword_10094A630 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1000AFA94(&qword_10094F140);
  uint64_t v3 = sub_1000876DC(v2, (uint64_t)qword_100997750);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1001DFFF8()
{
  return sub_1001DCD9C(&qword_10094EE80, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001E0040()
{
  return sub_1001DCD9C(&qword_10094EE88, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001E0088()
{
  return sub_1001DCD9C(&qword_10094EE90, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001E00D0()
{
  return sub_1001DCD9C((unint64_t *)&unk_10094EE98, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001E0118@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001DD130();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001E0140()
{
  sub_1001DCD9C(&qword_10094F138, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
  uint64_t v2 = URLRepresentableEntity.urlRepresentationParameter.getter();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return sub_1001B8FDC(v3, v0, v2, v1);
}

uint64_t sub_1001E0204@<X0>(uint64_t a1@<X8>)
{
  if (qword_10094A628 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = sub_1000876DC(v2, (uint64_t)qword_100997738);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t sub_1001E02B0()
{
  unint64_t result = qword_10094EEA8;
  if (!qword_10094EEA8)
  {
    sub_1000A1370(&qword_10094EEB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094EEA8);
  }
  return result;
}

uint64_t sub_1001E030C(uint64_t a1)
{
  uint64_t v2 = sub_1001DCD9C(&qword_10094EE70, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1001E0388()
{
  return sub_1001DCD9C(&qword_10094EEB8, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001E03D4(uint64_t a1)
{
  uint64_t v2 = sub_1001DCD9C((unint64_t *)&unk_10094EE98, (void (*)(uint64_t))type metadata accessor for WorkoutActivityEntity);

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1001E0450()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10FitnessApp25WorkoutActivityIdentifier_activityId;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001E04F8()
{
  return type metadata accessor for WorkoutActivityIdentifier(0);
}

uint64_t type metadata accessor for WorkoutActivityIdentifier(uint64_t a1)
{
  return sub_10009CFF8(a1, qword_10094EEE8);
}

uint64_t sub_1001E0520()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_1001E05BC(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(void *)((char *)v4 + v8) = v10;
    *((unsigned char *)v4 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (void *)((char *)v4 + v11);
    uint64_t v14 = (void *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    *(void *)((char *)v4 + v12) = *(void *)((char *)a2 + v12);
    uint64_t v16 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *(void *)((char *)v4 + v16) = *(void *)((char *)a2 + v16);
    uint64_t v17 = a3[12];
    *(void *)((char *)v4 + a3[11]) = *(void *)((char *)a2 + a3[11]);
    *(void *)((char *)v4 + v17) = *(void *)((char *)a2 + v17);
    uint64_t v18 = a3[14];
    *(void *)((char *)v4 + a3[13]) = *(void *)((char *)a2 + a3[13]);
    *(void *)((char *)v4 + v18) = *(void *)((char *)a2 + v18);
    uint64_t v19 = a3[16];
    *(void *)((char *)v4 + a3[15]) = *(void *)((char *)a2 + a3[15]);
    *(void *)((char *)v4 + v19) = *(void *)((char *)a2 + v19);
    uint64_t v20 = a3[18];
    *(void *)((char *)v4 + a3[17]) = *(void *)((char *)a2 + a3[17]);
    *(void *)((char *)v4 + v20) = *(void *)((char *)a2 + v20);
    uint64_t v21 = a3[20];
    *(void *)((char *)v4 + a3[19]) = *(void *)((char *)a2 + a3[19]);
    *(void *)((char *)v4 + v21) = *(void *)((char *)a2 + v21);
    uint64_t v22 = a3[22];
    *(void *)((char *)v4 + a3[21]) = *(void *)((char *)a2 + a3[21]);
    *(void *)((char *)v4 + v22) = *(void *)((char *)a2 + v22);
    uint64_t v23 = a3[24];
    *(void *)((char *)v4 + a3[23]) = *(void *)((char *)a2 + a3[23]);
    *(void *)((char *)v4 + v23) = *(void *)((char *)a2 + v23);
    uint64_t v24 = a3[26];
    *(void *)((char *)v4 + a3[25]) = *(void *)((char *)a2 + a3[25]);
    *(void *)((char *)v4 + v24) = *(void *)((char *)a2 + v24);
    id v25 = v10;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1001E0840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1001E099C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v10);
  uint64_t v13 = (void *)(a2 + v10);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v15 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  uint64_t v19 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  uint64_t v20 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  uint64_t v21 = a3[22];
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  uint64_t v22 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  uint64_t v23 = a3[26];
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  id v24 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1001E0BD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[20]) = *(void *)(a2 + a3[20]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1001E0E98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  uint64_t v12 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[22];
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[26];
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  return a1;
}

uint64_t sub_1001E0FE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *uint64_t v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_release();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_release();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_release();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_release();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_release();
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  swift_release();
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_release();
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  swift_release();
  *(void *)(a1 + a3[20]) = *(void *)(a2 + a3[20]);
  swift_release();
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_release();
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  swift_release();
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  swift_release();
  *(void *)(a1 + a3[24]) = *(void *)(a2 + a3[24]);
  swift_release();
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  swift_release();
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_release();
  return a1;
}

uint64_t sub_1001E11FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E1210);
}

uint64_t sub_1001E1210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001E12D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E12E4);
}

uint64_t sub_1001E12E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001E13A0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001E1490()
{
  uint64_t v4 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 47;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_1001DCD9C((unint64_t *)&qword_10095F730, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Int sub_1001E1544()
{
  Hasher.init(_seed:)();
  uint64_t v1 = type metadata accessor for MetricChartData();
  type metadata accessor for Date();
  sub_1000A6728((unint64_t *)&qword_10094E748, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  [*(id *)((char *)v0 + *(int *)(v1 + 24)) doubleValueForUnit:*v0];
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  NSObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1001E162C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Date();
  sub_1000A6728((unint64_t *)&qword_10094E748, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  [*(id *)((char *)v2 + *(int *)(a2 + 24)) doubleValueForUnit:*v2];
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v4;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return NSObject.hash(into:)();
}

Swift::Int sub_1001E16F8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  sub_1000A6728((unint64_t *)&qword_10094E748, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  [*(id *)((char *)v2 + *(int *)(a2 + 24)) doubleValueForUnit:*v2];
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v4;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  NSObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1001E17D0()
{
  if (static NSObject.== infix(_:_:)() & 1) != 0 && (static Date.== infix(_:_:)()) {
    return static NSObject.== infix(_:_:)() & 1;
  }
  else {
    return 0;
  }
}

void **sub_1001E184C(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  Swift::UInt64 v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = *(void **)((char *)a2 + v14);
    *(void **)((char *)v7 + v14) = v15;
    id v16 = v15;
  }
  return v7;
}

void sub_1001E194C(id *a1, uint64_t a2)
{
  Swift::UInt64 v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = *(id *)((char *)a1 + *(int *)(a2 + 24));
}

void **sub_1001E19D8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = *(void **)((char *)a2 + v13);
  *(void **)((char *)a1 + v13) = v14;
  id v15 = v14;
  return a1;
}

void **sub_1001E1A8C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = *(void **)((char *)a2 + v13);
  id v15 = *(void **)((char *)a1 + v13);
  *(void **)((char *)a1 + v13) = v14;
  id v16 = v14;

  return a1;
}

void *sub_1001E1B3C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **sub_1001E1BD4(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void **)((char *)a1 + v11);
  *(void **)((char *)a1 + v11) = *(void **)((char *)a2 + v11);

  return a1;
}

uint64_t sub_1001E1C7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

void *sub_1001E1D2C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001E1DD4()
{
  return sub_1000A6728(&qword_10094F1F0, (void (*)(uint64_t))type metadata accessor for MetricChartData);
}

double sub_1001E1E1C()
{
  if (qword_10094AE08 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_100998308 + *(double *)&qword_100998308;
  *(double *)&qword_10094F1F8 = *(double *)&qword_100998308 + *(double *)&qword_100998308;
  return result;
}

char *sub_1001E1E74()
{
  uint64_t v1 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeLightColor;
  sub_100006248();
  Swift::UInt64 v2 = v0;
  *(UIColor *)&v0[v1] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.50196, 0.50196, 0.50196, 1.0);
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeDarkColor;
  *(UIColor *)&v2[v3] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 1.0, 1.0, 0.39836);
  uint64_t v4 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineDashPattern;
  sub_1000AFA94(&qword_10094E770);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10074E640;
  if (qword_10094A640 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_10094F1F8;
  double v7 = *(double *)&qword_10094F1F8 * 4.0;
  *(void *)(v5 + 32) = qword_10094F1F8;
  *(double *)(v5 + 40) = v7;
  *(void *)&v2[v4] = v5;
  *(void *)&v2[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineWidth] = v6;
  uint64_t v8 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridLayer;
  *(void *)&v2[v8] = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v9 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath;
  *(void *)&v2[v9] = [objc_allocWithZone((Class)UIBezierPath) init];

  v19.receiver = v2;
  v19.super_class = (Class)type metadata accessor for YearlyChartAxisLayer();
  uint64_t v10 = (char *)[super init];
  uint64_t v11 = *(void **)&v10[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridLayer];
  double v12 = *(double *)&v10[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineWidth];
  uint64_t v13 = v10;
  id v14 = v11;
  [v14 setLineWidth:v12];
  id v15 = *(id *)&v13[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeDarkColor];
  id v16 = [v15 CGColor];
  [v14 setStrokeColor:v16];

  swift_bridgeObjectRetain();
  uint64_t v17 = (void *)CAShapeLayer.withLineDashPattern(_:)();

  swift_bridgeObjectRelease();
  [v13 addSublayer:v17];

  return v13;
}

uint64_t sub_1001E20E4(void *a1)
{
  Swift::UInt64 v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeLightColor;
  sub_100006248();
  uint64_t v5 = v1;
  *(UIColor *)&v1[v4] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.50196, 0.50196, 0.50196, 1.0);
  uint64_t v6 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_strokeDarkColor;
  *(UIColor *)&v5[v6] = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 1.0, 1.0, 0.39836);
  uint64_t v7 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineDashPattern;
  sub_1000AFA94(&qword_10094E770);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10074E640;
  if (qword_10094A640 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_10094F1F8;
  double v10 = *(double *)&qword_10094F1F8 * 4.0;
  *(void *)(v8 + 32) = qword_10094F1F8;
  *(double *)(v8 + 40) = v10;
  *(void *)&v5[v7] = v8;
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_lineWidth] = v9;
  uint64_t v11 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridLayer;
  *(void *)&v5[v11] = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v12 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath;
  id v13 = [objc_allocWithZone((Class)UIBezierPath) init];

  *(void *)&v5[v12] = v13;
  swift_bridgeObjectRelease();

  id v14 = *(void **)&v5[v12];
  type metadata accessor for YearlyChartAxisLayer();
  swift_deallocPartialClassInstance();
  return 0;
}

id sub_1001E2338()
{
  [v0 bounds];
  CGRectGetWidth(v27);
  id v1 = [objc_allocWithZone((Class)UIBezierPath) init];
  if (qword_10094AE00 != -1) {
    swift_once();
  }
  UIRoundToScale();
  double v3 = v2;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v3, CGRectGetMaxY(v28)];
  UIRoundToScale();
  double v5 = v4;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v5, CGRectGetMaxY(v29)];
  UIRoundToScale();
  double v7 = v6;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v7, CGRectGetMaxY(v30)];
  UIRoundToScale();
  double v9 = v8;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v9, CGRectGetMaxY(v31)];
  UIRoundToScale();
  double v11 = v10;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v11, CGRectGetMaxY(v32)];
  UIRoundToScale();
  double v13 = v12;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v13, CGRectGetMaxY(v33)];
  UIRoundToScale();
  double v15 = v14;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v15, CGRectGetMaxY(v34)];
  UIRoundToScale();
  double v17 = v16;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v17, CGRectGetMaxY(v35)];
  UIRoundToScale();
  double v19 = v18;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v19, CGRectGetMaxY(v36)];
  UIRoundToScale();
  double v21 = v20;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v21, CGRectGetMaxY(v37)];
  UIRoundToScale();
  double v23 = v22;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v23, CGRectGetMaxY(v38)];
  UIRoundToScale();
  double v25 = v24;
  [v1 moveToPoint:];
  [v0 bounds];
  [v1 addLineToPoint:v25, CGRectGetMaxY(v39)];
  return v1;
}

id sub_1001E2748()
{
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for YearlyChartAxisLayer();
  [super layoutSublayers];
  id v1 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridLayer];
  [v0 bounds];
  [v1 setFrame:];
  id v2 = sub_1001E2338();
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath;
  double v4 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath];
  *(void *)&v0[OBJC_IVAR____TtC10FitnessApp20YearlyChartAxisLayer_gridPath] = v2;

  double v5 = self;
  [v5 begin];
  [v5 setDisableActions:1];
  id v6 = [*(id *)&v0[v3] CGPath];
  [v1 setPath:v6];

  return [v5 commit];
}

id sub_1001E288C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for YearlyChartAxisLayer();
  [super dealloc];
}

uint64_t type metadata accessor for YearlyChartAxisLayer()
{
  return self;
}

id sub_1001E2960()
{
  uint64_t v0 = (void *)sub_1001E33A4();

  return v0;
}

uint64_t sub_1001E29BC(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6)
{
  return sub_1001E3A8C(a1, a2 & 1, a3, a4 & 1, a6, *(id *)(v6 + 16), *(void *)(v6 + 24), *(void **)(v6 + 32));
}

uint64_t sub_1001E29FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E3350();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001E2A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001E3350();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001E2AC4()
{
}

void sub_1001E2AEC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    goto LABEL_27;
  }
  id v7 = objc_allocWithZone((Class)UIView);
  swift_retain();
  id v44 = a2;
  swift_bridgeObjectRetain();
  id v8 = [v7 init];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v43 = v3;
  uint64_t v45 = a1;
  id v10 = (id)FIUIBundle();
  if (!v10)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  double v11 = v10;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 localizedStringForKey:v12 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000A06D0();
  uint64_t v14 = StringProtocol.localizedUppercase.getter();
  double v16 = v15;
  swift_bridgeObjectRelease();
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  id v42 = a3;
  unint64_t v17 = v3;
  if (v9)
  {
    uint64_t v18 = 0;
    uint64_t v19 = OBJC_IVAR____TtC10FitnessApp20WorkoutHeartRateInfo_elapsedTimeInZones;
    do
    {
      if ((v43 & 0xC000000000000001) != 0)
      {
        uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v20 = *(void *)(v17 + 8 * v18 + 32);
        swift_retain();
      }
      uint64_t v21 = *(void *)(v45 + v19);
      double v22 = 0.0;
      if (v21)
      {
        if (*(void *)(v21 + 16))
        {
          unint64_t v23 = sub_100005758(v18);
          if (v24) {
            double v22 = *(double *)(*(void *)(v21 + 56) + 8 * v23);
          }
        }
      }
      double v25 = COERCE_DOUBLE(sub_100367310());
      double v27 = v22 / v25;
      if (v25 <= 0.0) {
        double v27 = 0.0;
      }
      if (v26) {
        double v28 = 0.0;
      }
      else {
        double v28 = v27;
      }
      id v29 = objc_allocWithZone((Class)type metadata accessor for WorkoutTimeInZoneView());
      id v30 = v44;
      swift_retain();
      swift_bridgeObjectRetain();
      CGRect v31 = sub_1003D1314(v20, v30, v14, v16, v22, v28);
      [v31 setTranslatesAutoresizingMaskIntoConstraints:0];

      CGRect v32 = v31;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v18;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release();
      unint64_t v17 = v43;
    }
    while (v9 != v18);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v33 = [objc_allocWithZone((Class)UILabel) init];
  [v33 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v34 = [self mainBundle];
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v34 localizedStringForKey:v35 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v33 setText:v37];

  id v38 = [self grayColor];
  [v33 setTextColor:v38];

  id v39 = [self preferredFontForTextStyle:UIFontTextStyleFootnote];
  id v40 = [self traitCollectionWithPreferredContentSizeCategory:UIContentSizeCategoryLarge];
  id v41 = [v39 _fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:v40];

  [v33 setFont:v41];
  [v33 setNumberOfLines:0];

  swift_release();
  *id v42 = v45;
  v42[1] = v44;
  v42[2] = v8;
  v42[3] = _swiftEmptyArrayStorage;
  v42[4] = v33;
}

void destroy for WorkoutTimeInZonesView(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  objc_super v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for WorkoutTimeInZonesView(void *a1, void *a2)
{
  unint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  double v5 = (void *)a2[2];
  uint64_t v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  unint64_t v6 = (void *)a2[4];
  a1[4] = v6;
  swift_retain();
  id v7 = v3;
  id v8 = v5;
  swift_bridgeObjectRetain();
  id v9 = v6;
  return a1;
}

void *assignWithCopy for WorkoutTimeInZonesView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)a2[1];
  double v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  id v7 = (void *)a2[2];
  id v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = (void *)a2[4];
  double v11 = (void *)a1[4];
  a1[4] = v10;
  id v12 = v10;

  return a1;
}

uint64_t assignWithTake for WorkoutTimeInZonesView(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  double v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutTimeInZonesView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkoutTimeInZonesView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkoutTimeInZonesView()
{
  return &type metadata for WorkoutTimeInZonesView;
}

void *sub_1001E3344()
{
  return &protocol witness table for Never;
}

unint64_t sub_1001E3350()
{
  unint64_t result = qword_10094F258;
  if (!qword_10094F258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F258);
  }
  return result;
}

uint64_t sub_1001E33A4()
{
  uint64_t v2 = (char *)v0[2];
  uint64_t v3 = *(void *)(*v0 + 16);
  if (!v3) {
    goto LABEL_36;
  }
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0) {
      id v6 = (char *)(v3 & 0xFFFFFFFFFFFFFF8);
    }
    else {
      id v6 = *(char **)(*v0 + 16);
    }
    id v30 = v2;
    swift_bridgeObjectRetain();
    unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    double v5 = v2;
  }
  id v6 = v2;
  if (!v4)
  {
LABEL_18:
    uint64_t v1 = v45;
    unint64_t v4 = *(void *)(v45 + 24);
    unint64_t v50 = v4;
    if (!(v4 >> 62))
    {
      uint64_t v26 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v26)
      {
LABEL_20:
        if (v26 >= 1)
        {
          uint64_t v27 = 0;
          do
          {
            if ((v4 & 0xC000000000000001) != 0) {
              id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v28 = *(id *)(v4 + 8 * v27 + 32);
            }
            id v29 = v28;
            ++v27;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1003D0C5C((unint64_t)_swiftEmptyArrayStorage, (unint64_t)_swiftEmptyArrayStorage, 10.0);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          while (v26 != v27);
          goto LABEL_33;
        }
        __break(1u);
        goto LABEL_35;
      }
LABEL_33:
      sub_1000B1AE0((uint64_t)&v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      CGRect v31 = *(void **)(v1 + 32);
      [v2 addSubview:v31];
      CGRect v32 = self;
      sub_1000AFA94((uint64_t *)&unk_10095B850);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_100752650;
      id v34 = [v31 leadingAnchor];
      id v35 = [v2 leadingAnchor];
      id v36 = [v34 constraintEqualToAnchor:v35];

      *(void *)(v33 + 32) = v36;
      id v37 = [v31 trailingAnchor];
      id v38 = [v2 trailingAnchor];
      id v39 = [v37 constraintEqualToAnchor:v38];

      *(void *)(v33 + 40) = v39;
      id v40 = [v31 topAnchor];
      id v41 = [v6 bottomAnchor];
      id v42 = [v40 constraintEqualToAnchor:v41 constant:5.0];

      *(void *)(v33 + 48) = v42;
      specialized Array._endMutation()();
      sub_1001ABF94();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v32 activateConstraints:isa];

      return (uint64_t)v2;
    }
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    if (v26) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }
  uint64_t v7 = *(void *)(v45 + 24);
  unint64_t v49 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0 || v4 - 1 < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v46 = self;
    uint64_t v8 = 0;
    id v9 = v2;
    uint64_t v47 = v7;
    unint64_t v48 = v4;
    do
    {
      if (v49) {
        id v10 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = (char *)*(id *)(v7 + 8 * v8 + 32);
      }
      id v6 = v10;
      id v11 = [*(id *)&v10[OBJC_IVAR____TtC10FitnessApp21WorkoutTimeInZoneView_zoneNameLabel] trailingAnchor];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v12 = [*(id *)&v6[OBJC_IVAR____TtC10FitnessApp21WorkoutTimeInZoneView_rangeLabel] leadingAnchor];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      uint64_t v13 = v8 + 1;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      [v2 addSubview:v6];
      sub_1000AFA94((uint64_t *)&unk_10095B850);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_100752650;
      id v15 = [v6 leadingAnchor];
      id v16 = [v2 leadingAnchor];
      id v17 = [v15 constraintEqualToAnchor:v16];

      *(void *)(v14 + 32) = v17;
      id v18 = [v6 trailingAnchor];
      id v19 = [v2 trailingAnchor];
      id v20 = [v18 constraintEqualToAnchor:v19];

      *(void *)(v14 + 40) = v20;
      id v21 = [v6 topAnchor];
      double v22 = &selRef_bottomAnchor;
      if (!v8) {
        double v22 = &selRef_topAnchor;
      }
      id v23 = [v9 *v22];
      id v24 = [v21 constraintEqualToAnchor:v23];

      *(void *)(v14 + 48) = v24;
      unint64_t v50 = v14;
      specialized Array._endMutation()();
      sub_1001ABF94();
      Class v25 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v46 activateConstraints:v25];

      id v9 = v6;
      ++v8;
      uint64_t v7 = v47;
    }
    while (v48 != v13);
    goto LABEL_18;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E3A8C(uint64_t a1, char a2, uint64_t a3, char a4, int a5, id a6, unint64_t a7, void *a8)
{
  [a6 frame];
  double v15 = v14;
  double v17 = v16;
  if (a7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v18 = result;
    if (!result) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v18 = *(void *)((a7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v18) {
      goto LABEL_11;
    }
  }
  if (v18 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v20 = 0;
  double v21 = 0.0;
  do
  {
    if ((a7 & 0xC000000000000001) != 0) {
      id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v22 = *(id *)(a7 + 8 * v20 + 32);
    }
    id v23 = v22;
    ++v20;
    [v22 intrinsicContentSize];
    double v25 = v24;

    double v21 = v21 + v25;
  }
  while (v18 != v20);
LABEL_11:
  swift_bridgeObjectRelease();
  if (a4) {
    double v26 = v17;
  }
  else {
    double v26 = *(double *)&a3;
  }
  if ((a2 & 1) == 0) {
    double v15 = *(double *)&a1;
  }
  [a8 sizeThatFits:v15, v26];
  return *(void *)&v15;
}

uint64_t sub_1001E3C40(unint64_t a1)
{
  return sub_1001E4B58(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10036A1C4);
}

uint64_t sub_1001E3C58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000D1AFC(isUniquelyReferenced_nonNull_native, v14, 1, v3, &qword_10094E868);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E3DC4(uint64_t a1)
{
  size_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    size_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_10005B1C4(isUniquelyReferenced_nonNull_native, v15, 1, v3, &qword_10094E710);
  size_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v10 = (char *)v3 + v9 + 32;
  if (a1 + 32 < (unint64_t)&v10[v8] && (unint64_t)v10 < a1 + 32 + v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  size_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E3F18(uint64_t a1)
{
  return sub_10005F2B0(a1, &qword_10094E180, &qword_10094D218);
}

uint64_t sub_1001E3F2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100084014(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E4080(unint64_t a1)
{
  return sub_1001E4B58(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10036A3E4);
}

uint64_t sub_1001E4098(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100087DFC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E41E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1001E735C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[12 * v8 + 4];
  if (a1 + 32 < v9 + 96 * v2 && v9 < a1 + 32 + 96 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E433C(unint64_t a1)
{
  return sub_1001E4B58(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10036A814);
}

uint64_t sub_1001E4354(uint64_t a1)
{
  return sub_100034FA0(a1, &qword_10094E890);
}

uint64_t sub_1001E4360(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10005B1C4(isUniquelyReferenced_nonNull_native, v14, 1, v3, &qword_10094E718);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (char *)v3 + v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E44B0(uint64_t a1)
{
  return sub_1000D5074(a1, &qword_10094E878, (uint64_t (*)(void))type metadata accessor for ActivitySharingHighlight, (uint64_t (*)(void))type metadata accessor for ActivitySharingHighlight, (uint64_t (*)(void))type metadata accessor for ActivitySharingHighlight);
}

uint64_t sub_1001E44F8(uint64_t result)
{
  int64_t v4 = v2;
  uint64_t v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 16);
  }
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v18 + v6;
    if (!__OFADD__(v18, v6)) {
      goto LABEL_6;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6)) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v9 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v4 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *int64_t v4 = v12;
    uint64_t v11 = v12 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = (*(void *)(v11 + 24) >> 1) - v13;
  uint64_t result = (uint64_t)sub_10036B958(&v42, (void *)(v11 + 8 * v13 + 32), v14, v5);
  if (result < v6) {
    goto LABEL_22;
  }
  if (result >= 1)
  {
    uint64_t v15 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v16 = __OFADD__(v15, result);
    uint64_t v17 = v15 + result;
    if (v16)
    {
      __break(1u);
LABEL_29:
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_18;
      }
      sub_10007E2D8(0, &qword_10094ECC8);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v22 = v41;
      swift_unknownObjectRelease();
      while (2)
      {
        if (!v22) {
          goto LABEL_18;
        }
        while (1)
        {
          uint64_t v24 = *v4 & 0xFFFFFFFFFFFFFF8;
          if (v3 + 1 > *(void *)(v24 + 0x18) >> 1)
          {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v24 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v25 = *(void *)(v24 + 24) >> 1;
          if (v3 < v25) {
            break;
          }
LABEL_33:
          *(void *)(v24 + 16) = v3;
        }
        uint64_t v26 = v24 + 32;
        while (1)
        {
          *(void *)(v26 + 8 * v3++) = v22;
          int64_t v27 = v45;
          if (v42 < 0)
          {
            if (!__CocoaSet.Iterator.next()()) {
              goto LABEL_70;
            }
            sub_10007E2D8(0, &qword_10094ECC8);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v22 = v41;
            swift_unknownObjectRelease();
            goto LABEL_45;
          }
          if (!v46) {
            break;
          }
          unint64_t v28 = (v46 - 1) & v46;
          unint64_t v29 = __clz(__rbit64(v46)) | (v45 << 6);
LABEL_41:
          id v22 = *(void **)(*(void *)(v42 + 48) + 8 * v29);
          id v30 = v22;
LABEL_42:
          int64_t v45 = v27;
          unint64_t v46 = v28;
LABEL_45:
          if (!v22)
          {
LABEL_70:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v3;
            goto LABEL_18;
          }
          if (v3 >= v25)
          {
            uint64_t v24 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_33;
          }
        }
        int64_t v31 = v45 + 1;
        if (__OFADD__(v45, 1))
        {
          __break(1u);
LABEL_94:
          id v22 = 0;
          unint64_t v20 = 0;
          int64_t v19 = v1;
LABEL_27:
          int64_t v45 = v19;
          unint64_t v46 = v20;
          continue;
        }
        break;
      }
      int64_t v32 = (unint64_t)(v44 + 64) >> 6;
      if (v31 >= v32)
      {
        id v22 = 0;
        unint64_t v28 = 0;
        goto LABEL_42;
      }
      unint64_t v33 = *(void *)(v43 + 8 * v31);
      if (!v33)
      {
        int64_t v34 = v45 + 2;
        if (v45 + 2 >= v32) {
          goto LABEL_67;
        }
        unint64_t v33 = *(void *)(v43 + 8 * v34);
        if (!v33)
        {
          int64_t v1 = v45 + 3;
          if (v45 + 3 >= v32) {
            goto LABEL_68;
          }
          unint64_t v33 = *(void *)(v43 + 8 * v1);
          if (v33)
          {
            int64_t v31 = v45 + 3;
            goto LABEL_51;
          }
          int64_t v34 = v45 + 4;
          if (v45 + 4 >= v32)
          {
            id v22 = 0;
            unint64_t v28 = 0;
            int64_t v27 = v45 + 3;
            goto LABEL_42;
          }
          unint64_t v33 = *(void *)(v43 + 8 * v34);
          if (!v33)
          {
            int64_t v31 = v45 + 5;
            if (v45 + 5 >= v32)
            {
LABEL_68:
              id v22 = 0;
              unint64_t v28 = 0;
              int64_t v27 = v34;
              goto LABEL_42;
            }
            unint64_t v33 = *(void *)(v43 + 8 * v31);
            if (!v33)
            {
              int64_t v31 = v32 - 1;
              uint64_t v35 = v45 + 6;
              while (v32 != v35)
              {
                unint64_t v33 = *(void *)(v43 + 8 * v35++);
                if (v33)
                {
                  int64_t v31 = v35 - 1;
                  goto LABEL_51;
                }
              }
LABEL_67:
              id v22 = 0;
              unint64_t v28 = 0;
              int64_t v27 = v31;
              goto LABEL_42;
            }
            goto LABEL_51;
          }
        }
        int64_t v31 = v34;
      }
LABEL_51:
      unint64_t v28 = (v33 - 1) & v33;
      unint64_t v29 = __clz(__rbit64(v33)) + (v31 << 6);
      int64_t v27 = v31;
      goto LABEL_41;
    }
    *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v17;
  }
  if (result != v14)
  {
LABEL_18:
    sub_1000D9B04();
    return specialized Array._endMutation()();
  }
LABEL_23:
  uint64_t v3 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v19 = v45;
  if (v42 < 0) {
    goto LABEL_29;
  }
  if (v46)
  {
    unint64_t v20 = (v46 - 1) & v46;
    unint64_t v21 = __clz(__rbit64(v46)) | (v45 << 6);
LABEL_26:
    id v22 = *(void **)(*(void *)(v42 + 48) + 8 * v21);
    id v23 = v22;
    goto LABEL_27;
  }
  int64_t v36 = v45 + 1;
  if (!__OFADD__(v45, 1))
  {
    int64_t v37 = (unint64_t)(v44 + 64) >> 6;
    if (v36 >= v37)
    {
      id v22 = 0;
      unint64_t v20 = 0;
      goto LABEL_27;
    }
    unint64_t v38 = *(void *)(v43 + 8 * v36);
    if (v38) {
      goto LABEL_75;
    }
    int64_t v39 = v45 + 2;
    if (v45 + 2 >= v37)
    {
LABEL_91:
      id v22 = 0;
      unint64_t v20 = 0;
      int64_t v19 = v36;
      goto LABEL_27;
    }
    unint64_t v38 = *(void *)(v43 + 8 * v39);
    if (v38) {
      goto LABEL_79;
    }
    int64_t v1 = v45 + 3;
    if (v45 + 3 < v37)
    {
      unint64_t v38 = *(void *)(v43 + 8 * v1);
      if (v38)
      {
        int64_t v36 = v45 + 3;
        goto LABEL_75;
      }
      int64_t v39 = v45 + 4;
      if (v45 + 4 >= v37) {
        goto LABEL_94;
      }
      unint64_t v38 = *(void *)(v43 + 8 * v39);
      if (v38)
      {
LABEL_79:
        int64_t v36 = v39;
LABEL_75:
        unint64_t v20 = (v38 - 1) & v38;
        unint64_t v21 = __clz(__rbit64(v38)) + (v36 << 6);
        int64_t v19 = v36;
        goto LABEL_26;
      }
      int64_t v36 = v45 + 5;
      if (v45 + 5 < v37)
      {
        unint64_t v38 = *(void *)(v43 + 8 * v36);
        if (!v38)
        {
          int64_t v36 = v37 - 1;
          uint64_t v40 = v45 + 6;
          do
          {
            if (v37 == v40) {
              goto LABEL_91;
            }
            unint64_t v38 = *(void *)(v43 + 8 * v40++);
          }
          while (!v38);
          int64_t v36 = v40 - 1;
        }
        goto LABEL_75;
      }
    }
    id v22 = 0;
    unint64_t v20 = 0;
    int64_t v19 = v39;
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E4AF8(uint64_t a1)
{
  return sub_1000D5074(a1, &qword_10094E928, type metadata accessor for WorkoutActivityEntity, type metadata accessor for WorkoutActivityEntity, type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001E4B40(unint64_t a1)
{
  return sub_1001E4B58(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10036AC54);
}

uint64_t sub_1001E4B58(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *int64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1001E4D2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1001E8084(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E4E88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1001E7980(isUniquelyReferenced_nonNull_native, v14, 1, v3, &qword_10094E7C0);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E4FD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1001E7F58(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001E5134(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
    sub_1001C8EB4(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001C8EB4(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1001C8EB4(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_10005C2B0(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_1001E525C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1001C90B4(0, v1, 0);
    uint64_t v3 = a1 + 40;
    do
    {
      id v4 = *(id *)(v3 - 8);
      sub_1000AFA94(&qword_10094F378);
      sub_1000AFA94(&qword_10094E810);
      swift_dynamicCast();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1001C90B4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v5 = _swiftEmptyArrayStorage[3];
      if (v6 >= v5 >> 1) {
        sub_1001C90B4(v5 > 1, v6 + 1, 1);
      }
      v3 += 16;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      uint64_t v7 = (char *)&_swiftEmptyArrayStorage[2 * v6];
      *((void *)v7 + 4) = v9;
      *((void *)v7 + 5) = v10;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001E53A4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    int64_t v36 = _swiftEmptyArrayStorage;
    sub_1001C9124(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    id v4 = (long long *)(a1 + 32);
    do
    {
      long long v5 = v4[9];
      long long v32 = v4[8];
      long long v33 = v5;
      long long v6 = v4[11];
      long long v34 = v4[10];
      long long v35 = v6;
      long long v7 = v4[5];
      long long v28 = v4[4];
      long long v29 = v7;
      long long v8 = v4[7];
      long long v30 = v4[6];
      long long v31 = v8;
      long long v9 = v4[1];
      long long v24 = *v4;
      long long v25 = v9;
      long long v10 = v4[3];
      long long v26 = v4[2];
      long long v27 = v10;
      sub_1001F0D9C(&v24);
      int64_t v36 = v2;
      unint64_t v12 = v2[2];
      unint64_t v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_1001C9124(v11 > 1, v12 + 1, 1);
        uint64_t v2 = v36;
      }
      id v22 = &type metadata for AppStoreAppRecommendation;
      id v23 = &protocol witness table for AppStoreAppRecommendation;
      uint64_t v13 = (_OWORD *)swift_allocObject();
      *(void *)&long long v21 = v13;
      long long v14 = v33;
      v13[9] = v32;
      v13[10] = v14;
      long long v15 = v35;
      v13[11] = v34;
      v13[12] = v15;
      long long v16 = v29;
      v13[5] = v28;
      void v13[6] = v16;
      long long v17 = v31;
      v13[7] = v30;
      v13[8] = v17;
      long long v18 = v25;
      v13[1] = v24;
      v13[2] = v18;
      long long v19 = v27;
      v13[3] = v26;
      v13[4] = v19;
      v2[2] = v12 + 1;
      sub_100093E60(&v21, (uint64_t)&v2[5 * v12 + 4]);
      v4 += 12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_1001E5518(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1001C92DC(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      sub_1000AFA94(&qword_10094F400);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1001C92DC(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_1001C92DC(v4 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v5 + 1;
      long long v6 = &_swiftEmptyArrayStorage[2 * v5];
      v6[4] = v8;
      *((unsigned char *)v6 + 40) = v9;
      v3 += 8;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001E564C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    char v9 = _swiftEmptyArrayStorage;
    sub_1001C8EB4(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001C8EB4(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1001C8EB4(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_10005C2B0(&v8, &v2[4 * v6 + 4]);
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_1001E5770(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    char v9 = _swiftEmptyArrayStorage;
    sub_1001C8EB4(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      ++v4;
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001C8EB4(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1001C8EB4(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_10005C2B0(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_1001E5890(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    long long v10 = _swiftEmptyArrayStorage;
    sub_1001C9660(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_10008F484(v4, (uint64_t)v9);
      swift_dynamicCast();
      char v5 = v9[39];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001C9660(0, v2[2] + 1, 1);
        uint64_t v2 = v10;
      }
      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_1001C9660(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v10;
      }
      v2[2] = v7 + 1;
      *((unsigned char *)v2 + v7 + 32) = v5;
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_1001E59B4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v20 = _swiftEmptyArrayStorage;
    sub_1001C9124(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v4 - 2);
      uint64_t v5 = *(v4 - 1);
      uint64_t v7 = v4[1];
      uint64_t v8 = v4[3];
      uint64_t v15 = v4[2];
      uint64_t v16 = *v4;
      uint64_t v14 = v4[4];
      char v13 = *((unsigned char *)v4 + 40);
      unint64_t v9 = v2[2];
      unint64_t v10 = v2[3];
      unint64_t v20 = v2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1)
      {
        sub_1001C9124(v10 > 1, v9 + 1, 1);
        uint64_t v2 = v20;
      }
      long long v18 = &type metadata for RecentWorkoutAppRecommendation;
      long long v19 = &off_1008D66B8;
      uint64_t v11 = swift_allocObject();
      *(void *)&long long v17 = v11;
      *(void *)(v11 + 16) = v6;
      *(void *)(v11 + 24) = v5;
      *(void *)(v11 + 32) = v16;
      *(void *)(v11 + 40) = v7;
      *(void *)(v11 + 48) = v15;
      *(void *)(v11 + 56) = v8;
      *(void *)(v11 + 64) = v14;
      *(unsigned char *)(v11 + 72) = v13;
      v2[2] = v9 + 1;
      sub_100093E60(&v17, (uint64_t)&v2[5 * v9 + 4]);
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::Int sub_1001E5B18()
{
  return Hasher._finalize()();
}

void sub_1001E5B5C()
{
}

Swift::Int sub_1001E5B84()
{
  return Hasher._finalize()();
}

uint64_t sub_1001E5BC4(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  if (!a2)
  {
    uint64_t v5 = sub_1001E5DFC();
    if (!v6)
    {
      static os_log_type_t.error.getter();
      id v20 = HKLogActivity;
      os_log(_:dso:log:_:_:)();

      return 0x5F544F4E5F59454BLL;
    }
    a1 = v5;
    uint64_t v4 = v6;
  }
  unsigned int v7 = *((unsigned __int8 *)v2 + 104);
  unsigned int v8 = *((unsigned __int8 *)v2 + 106);
  swift_bridgeObjectRetain();
  sub_100583F7C((uint64_t)v21);
  long long v9 = v2[11];
  v23[2] = v2[10];
  v23[3] = v9;
  v23[4] = v2[12];
  uint64_t v24 = *((void *)v2 + 26);
  if (v7 > 1)
  {
    long long v13 = v2[1];
    long long v22 = *v2;
    v23[0] = v13;
    *(_OWORD *)((char *)v23 + 11) = *(long long *)((char *)v2 + 27);
    uint64_t v11 = sub_1001D026C(a1, v4, v8, (uint64_t)v21, (uint64_t *)&v22);
  }
  else
  {
    long long v10 = v2[1];
    long long v22 = *v2;
    v23[0] = v10;
    *(_OWORD *)((char *)v23 + 11) = *(long long *)((char *)v2 + 27);
    uint64_t v11 = sub_1001D04E8(a1, v4, v8, (uint64_t *)&v22, v21[3]);
  }
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v16 = (void *)HKLogActivity;
  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1007509E0;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000AA64C();
  *(void *)(v17 + 32) = v14;
  *(void *)(v17 + 40) = v15;
  id v18 = v16;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1001E5DFC()
{
  uint64_t v1 = sub_1001E632C();
  uint64_t v2 = v1;
  uint64_t v49 = *(void *)(v1 + 16);
  if (v49)
  {
    char v3 = v0[201];
    char v43 = v0[202];
    uint64_t v48 = v0[203];
    uint64_t v47 = v1 + 32;
    id v51 = self;
    unint64_t v4 = 0;
    if (v3) {
      uint64_t v5 = 0x756E694D6C6C6F52;
    }
    else {
      uint64_t v5 = 0x6E694D646E617453;
    }
    unint64_t v6 = 0xEB00000000736574;
    if ((v3 & 1) == 0) {
      unint64_t v6 = 0xEC00000073657475;
    }
    id v41 = (void *)v6;
    uint64_t v42 = v5;
    if (v3) {
      uint64_t v7 = 1819045714;
    }
    else {
      uint64_t v7 = 0x646E617453;
    }
    unint64_t v8 = 0xE400000000000000;
    if ((v3 & 1) == 0) {
      unint64_t v8 = 0xE500000000000000;
    }
    int64_t v45 = (void *)v8;
    uint64_t v46 = v7;
    uint64_t v44 = v2;
    while (1)
    {
      if (v4 >= *(void *)(v2 + 16)) {
        goto LABEL_47;
      }
      uint64_t v9 = v46;
      long long v10 = (uint64_t *)(v47 + 16 * v4);
      uint64_t v11 = (void *)v10[1];
      uint64_t v52 = *v10;
      unint64_t v12 = v4 + 1;
      unint64_t v13 = 0xE400000000000000;
      uint64_t v14 = 1702260557;
      uint64_t v15 = v45;
      switch(v48)
      {
        case 1:
          goto LABEL_25;
        case 2:
          unint64_t v13 = 0xE800000000000000;
          uint64_t v14 = 0x65636E6174736944;
          goto LABEL_25;
        case 3:
          unsigned int v16 = 1802264919;
          goto LABEL_23;
        case 4:
          if (v43)
          {
            uint64_t v15 = (void *)0x80000001007B7CD0;
            uint64_t v9 = 0xD000000000000017;
          }
          else
          {
            uint64_t v15 = (void *)0xED00007373656E74;
            uint64_t v9 = 0x69466F6964726143;
          }
          break;
        case 5:
          unint64_t v13 = 0xE800000000000000;
          uint64_t v14 = 0x6573696372657845;
          goto LABEL_25;
        case 6:
          uint64_t v15 = v41;
          uint64_t v9 = v42;
          break;
        case 7:
          unsigned int v16 = 1852732754;
LABEL_23:
          uint64_t v14 = v16 | 0x50676E6900000000;
          unint64_t v13 = 0xEB00000000656361;
          goto LABEL_25;
        case 8:
          unint64_t v13 = 0xEE006465626D696CLL;
          uint64_t v14 = 0x4373746867696C46;
LABEL_25:
          uint64_t v9 = v14;
          uint64_t v15 = (void *)v13;
          break;
        default:
          break;
      }
      unint64_t v50 = v12;
      swift_bridgeObjectRetain();
      v17._uint64_t countAndFlagsBits = v9;
      v17._object = v15;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      uint64_t v18 = 1;
      long long v19 = _swiftEmptyArrayStorage;
      while (1)
      {
        swift_bridgeObjectRetain();
        v20._uint64_t countAndFlagsBits = 95;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
        id v23 = v22;
        swift_bridgeObjectRetain();
        v24._uint64_t countAndFlagsBits = v21;
        v24._object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        id v25 = [v51 mainBundle];
        v53._object = (void *)0xE000000000000000;
        v26._uint64_t countAndFlagsBits = v52;
        v26._object = v11;
        v27.value._uint64_t countAndFlagsBits = 0x6F4373646E657254;
        v27.value._object = (void *)0xEF2D676E69686361;
        v28._uint64_t countAndFlagsBits = v52;
        v28._object = v11;
        v53._uint64_t countAndFlagsBits = 0;
        Swift::String v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v53);
        swift_bridgeObjectRelease();

        if (v29._countAndFlagsBits == v52 && v29._object == v11) {
          break;
        }
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v30) {
          goto LABEL_38;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v19 = sub_100084014(0, v19[2] + 1, 1, v19);
        }
        unint64_t v32 = v19[2];
        unint64_t v31 = v19[3];
        if (v32 >= v31 >> 1) {
          long long v19 = sub_100084014((void *)(v31 > 1), v32 + 1, 1, v19);
        }
        v19[2] = v32 + 1;
        long long v33 = &v19[2 * v32];
        v33[4] = v52;
        v33[5] = v11;
        if (__OFADD__(v18++, 1))
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
      }
      swift_bridgeObjectRelease();
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = v19[2];
      swift_bridgeObjectRelease();
      if (v35)
      {
        unint64_t v36 = v19[2];
        if (v36) {
          break;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v4 = v50;
      uint64_t v2 = v44;
      if (v50 == v49) {
        goto LABEL_42;
      }
    }
    unint64_t v39 = sub_100020AC4(v36);
    if ((v39 & 0x8000000000000000) != 0) {
      goto LABEL_48;
    }
    if (v39 >= v19[2])
    {
LABEL_49:
      __break(1u);
      JUMPOUT(0x1001E6308);
    }
    uint64_t v38 = v19[2 * v39 + 4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_42:
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    id v37 = HKLogActivity;
    os_log(_:dso:log:_:_:)();

    return 0;
  }
  return v38;
}

uint64_t sub_1001E632C()
{
  char v1 = sub_1001E665C(*((unsigned char *)v0 + 104), *((unsigned __int8 *)v0 + 105), *((unsigned char *)v0 + 106));
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  if (sub_100688588(v1) == 0x5F44494C41564E49 && v6 == 0xEB0000000059454BLL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    sub_1000AFA94(&qword_10094D178);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1007509E0;
    *(void *)(v14 + 32) = sub_100688588(v1);
    *(void *)(v14 + 40) = v15;
    return v14;
  }
  if (v5)
  {
    uint64_t v9 = sub_100084014(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v11 = v9[2];
    unint64_t v10 = v9[3];
    unint64_t v12 = v11 + 1;
    if (v11 >= v10 >> 1)
    {
      Swift::String v29 = sub_100084014((void *)(v10 > 1), v11 + 1, 1, v9);
      unint64_t v12 = v11 + 1;
      uint64_t v9 = v29;
    }
    v9[2] = v12;
    unint64_t v13 = &v9[2 * v11];
    v13[4] = v3;
    v13[5] = v5;
  }
  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  long long v16 = v0[1];
  long long v31 = *v0;
  *(_OWORD *)unint64_t v32 = v16;
  *(_OWORD *)&v32[11] = *(long long *)((char *)v0 + 27);
  sub_1000AEEC8((uint64_t)&v31, (uint64_t)v33, (uint64_t *)&unk_100958790);
  sub_1000AEEC8((uint64_t)v33, (uint64_t)v34, (uint64_t *)&unk_100958790);
  if (v35)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_100084014(0, v9[2] + 1, 1, v9);
    }
    unint64_t v18 = v9[2];
    unint64_t v17 = v9[3];
    if (v18 >= v17 >> 1) {
      uint64_t v9 = sub_100084014((void *)(v17 > 1), v18 + 1, 1, v9);
    }
    v9[2] = v18 + 1;
    long long v19 = &v9[2 * v18];
    v19[4] = 1162690894;
    v19[5] = 0xE400000000000000;
  }
  if (v32[25])
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_100084014(0, v9[2] + 1, 1, v9);
    }
    unint64_t v21 = v9[2];
    unint64_t v20 = v9[3];
    if (v21 >= v20 >> 1) {
      uint64_t v9 = sub_100084014((void *)(v20 > 1), v21 + 1, 1, v9);
    }
    v9[2] = v21 + 1;
    long long v22 = &v9[2 * v21];
    v22[4] = 0x4148434C45454857;
    v22[5] = 0xEA00000000005249;
  }
  unint64_t v23 = sub_100688588(v1);
  uint64_t v25 = v24;
  uint64_t v26 = swift_bridgeObjectRetain();
  Swift::String_optional v27 = sub_1001E6750(v26, v23, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v30 = v27;
  swift_bridgeObjectRetain();
  sub_1001EDC44((uint64_t *)&v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v30;
}

uint64_t sub_1001E665C(unsigned __int8 a1, int a2, char a3)
{
  if (a1 < 2u) {
    return (a2 + 1);
  }
  unint64_t v4 = sub_1001E6D90(a3);
  if (v5 == 1) {
    return 11;
  }
  if ((v4 & 1) == 0) {
    return v4 >> 8;
  }
  sub_100583F7C((uint64_t)v6);
  uint64_t result = 5;
  switch(v6[16])
  {
    case 1:
      uint64_t result = 6;
      break;
    case 2:
      uint64_t result = 7;
      break;
    case 3:
      uint64_t result = 8;
      break;
    case 4:
      uint64_t result = 9;
      break;
    case 5:
      uint64_t result = 10;
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1001E6750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v18 = _swiftEmptyArrayStorage;
  unint64_t v17 = _swiftEmptyArrayStorage;
  sub_1001E68A0(a1, &v18, v5, v5, &v17);
  sub_1000AFA94(&qword_10094D178);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007509E0;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  long long v16 = (void *)inited;
  uint64_t v7 = v17;
  uint64_t v8 = v17[2];
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v7[v9++ + 4];
      uint64_t v15 = v10;
      swift_bridgeObjectRetain();
      sub_1001E6A90(&v15, a2, a3, &v16);
      swift_bridgeObjectRelease();
    }
    while (v8 != v9);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_1001EF044(v11);
  swift_bridgeObjectRelease();
  unint64_t v13 = sub_10036963C(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1001E68A0(uint64_t result, void **a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v6 = a5;
  uint64_t v21 = result;
  if (a4)
  {
    uint64_t v7 = (void *)a3;
    if (a3 < 1) {
      return result;
    }
    uint64_t v19 = a4 - 1;
    if (!__OFSUB__(a4, 1))
    {
      uint64_t v8 = 0;
      uint64_t v9 = *a2;
      unint64_t v20 = *(void **)(result + 16);
      uint64_t v10 = (uint64_t *)(result + 40);
      while (v20 != v8)
      {
        uint64_t v5 = v6;
        uint64_t v11 = *(v10 - 1);
        uint64_t v12 = *v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v13 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_100084014(0, v9[2] + 1, 1, v9);
        }
        unint64_t v15 = v13[2];
        unint64_t v14 = v13[3];
        if (v15 >= v14 >> 1) {
          unint64_t v13 = sub_100084014((void *)(v14 > 1), v15 + 1, 1, v13);
        }
        v13[2] = v15 + 1;
        long long v16 = &v13[2 * v15];
        v16[4] = v11;
        v16[5] = v12;
        long long v22 = v13;
        uint64_t v6 = v5;
        sub_1001E68A0(v21, &v22, v7, v19, v5);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v8 = (void *)((char *)v8 + 1);
        v10 += 2;
        if (v7 == v8) {
          return result;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *a2;
  uint64_t v5 = *a5;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_19:
    uint64_t result = (uint64_t)sub_1001E71E4(0, v5[2] + 1, 1, v5, &qword_10094F270, (uint64_t *)&unk_10094B1F0);
    uint64_t v5 = (void *)result;
  }
  unint64_t v18 = v5[2];
  unint64_t v17 = v5[3];
  if (v18 >= v17 >> 1)
  {
    uint64_t result = (uint64_t)sub_1001E71E4((void *)(v17 > 1), v18 + 1, 1, v5, &qword_10094F270, (uint64_t *)&unk_10094B1F0);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v18 + 1;
  v5[v18 + 4] = v7;
  *uint64_t v6 = v5;
  return result;
}

void sub_1001E6A90(uint64_t *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a1;
  sub_1000AFA94(&qword_10094D178);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1007509E0;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  uint64_t v35 = v8;
  swift_bridgeObjectRetain();
  sub_1001E5134(v7);
  id v9 = objc_allocWithZone((Class)NSMutableOrderedSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithArray:isa];

  char v30 = v11;
  id v12 = [v11 array];
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v13 + 32;
    swift_bridgeObjectRetain();
    long long v16 = _swiftEmptyArrayStorage;
    do
    {
      sub_10008F484(v15, (uint64_t)v34);
      sub_10008F484((uint64_t)v34, (uint64_t)v31);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
      }
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v34);
      uint64_t v18 = v33;
      if (v33)
      {
        uint64_t v19 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v16 = sub_100084014(0, v16[2] + 1, 1, v16);
        }
        unint64_t v21 = v16[2];
        unint64_t v20 = v16[3];
        if (v21 >= v20 >> 1) {
          long long v16 = sub_100084014((void *)(v20 > 1), v21 + 1, 1, v16);
        }
        void v16[2] = v21 + 1;
        unint64_t v17 = &v16[2 * v21];
        v17[4] = v19;
        v17[5] = v18;
      }
      v15 += 32;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v16 = _swiftEmptyArrayStorage;
  }
  sub_1001E3F2C((uint64_t)v16);
  v34[0] = v35;
  sub_1000AFA94((uint64_t *)&unk_10094B1F0);
  sub_1000B1A84();
  uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = *a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v25 = sub_100084014(0, v25[2] + 1, 1, v25);
    *a4 = v25;
  }
  unint64_t v28 = v25[2];
  unint64_t v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    uint64_t v25 = sub_100084014((void *)(v27 > 1), v28 + 1, 1, v25);
    *a4 = v25;
  }
  v25[2] = v28 + 1;
  Swift::String v29 = &v25[2 * v28];
  v29[4] = v22;
  v29[5] = v24;
}

uint64_t sub_1001E6D90(char a1)
{
  long long v2 = v1[11];
  long long v27 = v1[10];
  long long v28 = v2;
  long long v29 = v1[12];
  uint64_t v30 = *((void *)v1 + 26);
  if (((1 << a1) & 0x171) == 0)
  {
    if (((1 << a1) & 0x8C) == 0)
    {
      sub_1001CFF8C();
      return 3329;
    }
    sub_1001D00B0();
  }
  uint64_t result = 3329;
  double v5 = 13.0;
  switch(a1)
  {
    case 0:
      goto LABEL_12;
    case 3:
      double v5 = 671.08;
      goto LABEL_12;
    case 4:
      long long v6 = v1[1];
      long long v23 = *v1;
      *(_OWORD *)uint64_t v24 = v6;
      *(_OWORD *)&v24[11] = *(long long *)((char *)v1 + 27);
      sub_1000AEEC8((uint64_t)v24, (uint64_t)v26, &qword_10094E9E8);
      sub_1000AEEC8((uint64_t)v26, (uint64_t)&v31, &qword_10094E9E8);
      if (v32) {
        return 3329;
      }
      uint64_t v7 = v31;
      sub_1000AEEC8((uint64_t)&v24[16], (uint64_t)v25, &qword_10094E9F0);
      sub_1000AEEC8((uint64_t)v25, (uint64_t)&v33, &qword_10094E9F0);
      if (v34) {
        return 3329;
      }
      uint64_t v8 = sub_100481D5C(v33, v7);
      if (!v8) {
        return 3329;
      }
      sub_1004819B4(4, v8, v9, &v19);
      swift_bridgeObjectRelease();
      double v5 = v20;
      goto LABEL_12;
    case 6:
      double v5 = 45.0;
      goto LABEL_12;
    case 7:
      double v5 = 316.9;
LABEL_12:
      int v10 = *((unsigned __int8 *)v1 + 106);
      long long v11 = v1[4];
      v21[0] = v1[3];
      v21[1] = v11;
      v21[2] = v1[5];
      uint64_t v22 = *((void *)v1 + 12);
      id v12 = sub_100584F44((uint64_t *)v21);
      double v13 = sub_100585150(v12, v10, *(void **)(*((void *)v1 + 19) + 168));
      double v15 = v14;
      swift_bridgeObjectRelease();
      if ((v10 | 4) == 7)
      {
        if (3600.0 / v15 <= v5)
        {
          uint64_t result = 0;
        }
        else
        {
          if (v15 >= v13) {
            return 3329;
          }
          double v16 = 100.0 - v15 * 100.0 / v13;
          if (v16 < 0.0 || v16 > 10.0)
          {
            uint64_t result = 2560;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t result = 2304;
          }
        }
      }
      else
      {
        uint64_t v18 = 3328;
        if (v15 >= v5) {
          uint64_t v18 = 0;
        }
        uint64_t result = v18 | (v15 < v5);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001E704C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F2D8, (uint64_t (*)(void))&type metadata accessor for DateInterval, (uint64_t (*)(void))&type metadata accessor for DateInterval);
}

uint64_t sub_1001E7080(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F4A0, (uint64_t (*)(void))type metadata accessor for SleepingSampleSingleMetricChartPoint, (uint64_t (*)(void))type metadata accessor for SleepingSampleSingleMetricChartPoint);
}

void *sub_1001E70B4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000D1AFC(a1, a2, a3, a4, &qword_10094E868);
}

uint64_t sub_1001E70C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, (uint64_t *)&unk_1009555B0, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_1001E70FC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E7980(a1, a2, a3, a4, &qword_10094F278);
}

uint64_t sub_1001E7108(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094E750, type metadata accessor for WorkoutChartDataElement, type metadata accessor for WorkoutChartDataElement);
}

void *sub_1001E713C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005B1C4(a1, a2, a3, a4, &qword_10094F468);
}

uint64_t sub_1001E7148(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094E708, (uint64_t (*)(void))type metadata accessor for TrendListMetric, (uint64_t (*)(void))type metadata accessor for TrendListMetric);
}

uint64_t sub_1001E717C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F288, (uint64_t (*)(void))type metadata accessor for MetricChartData, (uint64_t (*)(void))type metadata accessor for MetricChartData);
}

void *sub_1001E71B0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E71E4(a1, a2, a3, a4, &qword_10094F388, &qword_10094F390);
}

void *sub_1001E71C4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005B1C4(a1, a2, a3, a4, &qword_10094E758);
}

void *sub_1001E71D0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E71E4(a1, a2, a3, a4, &qword_10094F420, &qword_10094F428);
}

void *sub_1001E71E4(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_1000AFA94(a5);
      double v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      double v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      double v13 = _swiftEmptyArrayStorage;
      double v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001F02A0(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E7300(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094E940, (uint64_t (*)(void))&type metadata accessor for SleepingSampleDataType, (uint64_t (*)(void))&type metadata accessor for SleepingSampleDataType);
}

void *sub_1001E7334(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100095378(a1, a2, a3, a4, &qword_10094E830, (uint64_t *)&unk_100955630);
}

uint64_t sub_1001E7348(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100085A10(a1, a2, a3, a4, &qword_10094F478, &qword_10094F480);
}

void *sub_1001E735C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E880);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001EFA80(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E7484(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100088224(a1, a2, a3, a4, &qword_10094F498);
}

void *sub_1001E7490(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E938);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      double v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      double v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008803C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E75A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094F348);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 192);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 4]) {
          memmove(v12, a4 + 4, 192 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001F03A8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E76C8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094F350);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[26 * v8 + 4]) {
          memmove(v12, a4 + 4, 208 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001F01AC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E77F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E71E4(a1, a2, a3, a4, &qword_10094F338, &qword_10094F340);
}

uint64_t sub_1001E7808(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F470, type metadata accessor for SleepingSampleBaselineBand.Configuration, type metadata accessor for SleepingSampleBaselineBand.Configuration);
}

void *sub_1001E783C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E824C(a1, a2, a3, a4, &qword_10094F490);
}

void *sub_1001E7848(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E950);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001F04A0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E7974(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E7980(a1, a2, a3, a4, &qword_10094F2F0);
}

void *sub_1001E7980(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_1000AFA94(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      int64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      int64_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100088330(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_1001E7A8C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E960);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008803C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E7B9C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100088224(a1, a2, a3, a4, &qword_10094F2C8);
}

void *sub_1001E7BA8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005B1C4(a1, a2, a3, a4, &qword_10094F440);
}

void *sub_1001E7BB4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E770);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008803C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E7CC4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094F3E8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001F06A4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E7DD4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094F3F0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001F0598(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E7EE4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100088224(a1, a2, a3, a4, &qword_10094E930);
}

uint64_t sub_1001E7EF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094E878, (uint64_t (*)(void))type metadata accessor for ActivitySharingHighlight, (uint64_t (*)(void))type metadata accessor for ActivitySharingHighlight);
}

uint64_t sub_1001E7F24(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094E848, (uint64_t (*)(void))type metadata accessor for FitnessPlusStackViewModel, (uint64_t (*)(void))type metadata accessor for FitnessPlusStackViewModel);
}

void *sub_1001E7F58(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E908);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001EFC70(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E8084(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E920);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001EFB78(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E81B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094E928, type metadata accessor for WorkoutActivityEntity, type metadata accessor for WorkoutActivityEntity);
}

uint64_t sub_1001E81E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F2C0, (uint64_t (*)(void))&type metadata accessor for CatalogWorkout, (uint64_t (*)(void))&type metadata accessor for CatalogWorkout);
}

uint64_t sub_1001E8218(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100085A10(a1, a2, a3, a4, &qword_10094F3C0, &qword_10094F3C8);
}

void *sub_1001E822C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E71E4(a1, a2, a3, a4, &qword_10094E838, &qword_10094E840);
}

void *sub_1001E8240(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E824C(a1, a2, a3, a4, &qword_10094F448);
}

void *sub_1001E824C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_1000AFA94(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      int64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      int64_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008803C(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_1001E8358(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E824C(a1, a2, a3, a4, &qword_10094F3A0);
}

void *sub_1001E8364(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E918);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001EF7F0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E8474(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100085A10(a1, a2, a3, a4, &qword_10094E7F8, &qword_10094E800);
}

void *sub_1001E8488(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E910);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001F0798(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E8598(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094F328);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 4 * v8 + 32)) {
          memmove(v13, a4 + 4, 4 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001F088C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E86A8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E7980(a1, a2, a3, a4, &qword_10094E7C0);
}

uint64_t sub_1001E86B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F458, (uint64_t (*)(void))&type metadata accessor for SleepingSampleViewModel, (uint64_t (*)(void))&type metadata accessor for SleepingSampleViewModel);
}

uint64_t sub_1001E86E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F460, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineRelativeChartPoint, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
}

void *sub_1001E871C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094F358);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001F0978(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E8844(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094F330);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001F0A70(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E8954(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10095B800, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

void *sub_1001E8988(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E8F8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005B2BC(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E8A84(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E778);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100088330(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E8B94(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F320, (uint64_t (*)(void))&type metadata accessor for PlaylistItem, (uint64_t (*)(void))&type metadata accessor for PlaylistItem);
}

uint64_t sub_1001E8BC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F300, (uint64_t (*)(void))&type metadata accessor for CatalogLockup, (uint64_t (*)(void))&type metadata accessor for CatalogLockup);
}

uint64_t sub_1001E8BFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F438, (uint64_t (*)(void))type metadata accessor for ActivityRingEntity, (uint64_t (*)(void))type metadata accessor for ActivityRingEntity);
}

uint64_t sub_1001E8C30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ACBAC(a1, a2, a3, a4, &qword_10094F2F8, type metadata accessor for DivingDataCalculator.SampleBucket, type metadata accessor for DivingDataCalculator.SampleBucket);
}

void *sub_1001E8C64(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094F488);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001F0B64(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001E8D8C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000AFA94(&qword_10094E968);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001F0C5C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E8EB4(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  v49._uint64_t countAndFlagsBits = a2;
  v49._object = (void *)a3;
  sub_1000932C0(v49, a4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!a4 || a4 == 2)
  {
    Hasher._combine(_:)(a2);
  }
  else if (a4 == 1)
  {
    String.hash(into:)();
  }
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_62:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v48 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    sub_100091494(a2, a3, a4);
    sub_1001EB458(a2, a3, a4, v11, isUniquelyReferenced_nonNull_native);
    *unint64_t v4 = v48;
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 16) = a4;
    return result;
  }
  uint64_t v12 = ~v10;
  uint64_t v13 = *(void *)(v8 + 48);
  BOOL v14 = a2 != 7;
  BOOL v15 = a2 != 6;
  BOOL v16 = a2 != 5;
  BOOL v17 = a2 != 4;
  BOOL v18 = a2 != 3;
  BOOL v19 = a2 != 2;
  BOOL v20 = a2 == 1;
  if (a3)
  {
    BOOL v14 = 1;
    BOOL v15 = 1;
    BOOL v16 = 1;
    BOOL v17 = 1;
    BOOL v18 = 1;
    BOOL v19 = 1;
    BOOL v20 = 0;
  }
  BOOL v21 = a4 == 3;
  if (a4 != 3) {
    BOOL v20 = 0;
  }
  BOOL v46 = v20;
  if (a4 != 3) {
    BOOL v14 = 1;
  }
  BOOL v45 = v14;
  char v22 = a4 != 3 || v15;
  char v44 = v22;
  char v23 = a4 != 3 || v16;
  char v24 = a4 != 3 || v17;
  char v42 = v24;
  char v43 = v23;
  char v25 = a4 != 3 || v18;
  char v26 = a4 != 3 || v19;
  char v40 = v26;
  char v41 = v25;
  if (a3 | a2) {
    BOOL v21 = 0;
  }
  BOOL v39 = v21;
  while (2)
  {
    long long v27 = (uint64_t *)(v13 + 24 * v11);
    uint64_t v28 = *v27;
    switch(*((unsigned char *)v27 + 16))
    {
      case 1:
        if (a4 != 1) {
          goto LABEL_32;
        }
        BOOL v29 = v28 == a2 && v27[1] == a3;
        if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_32;
        }
        swift_bridgeObjectRelease();
        uint64_t v32 = a2;
        uint64_t v33 = a3;
        char v34 = 1;
        goto LABEL_67;
      case 2:
        if (a4 != 2 || v28 != a2) {
          goto LABEL_32;
        }
        swift_bridgeObjectRelease();
        uint64_t v32 = a2;
        uint64_t v33 = a3;
        char v34 = 2;
        goto LABEL_67;
      case 3:
        switch(v28)
        {
          case 1:
            if (!v46) {
              goto LABEL_32;
            }
            goto LABEL_64;
          case 2:
            if (v40) {
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            uint64_t v32 = 2;
            goto LABEL_66;
          case 3:
            if (v41) {
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            uint64_t v32 = 3;
            goto LABEL_66;
          case 4:
            if (v42) {
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            uint64_t v32 = 4;
            goto LABEL_66;
          case 5:
            if (v43) {
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            uint64_t v32 = 5;
            goto LABEL_66;
          case 6:
            if (v44) {
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            uint64_t v32 = 6;
            goto LABEL_66;
          case 7:
            if (v45) {
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            uint64_t v32 = 7;
LABEL_66:
            uint64_t v33 = 0;
            char v34 = 3;
            break;
          default:
            if (!v39) {
              goto LABEL_32;
            }
LABEL_64:
            swift_bridgeObjectRelease();
            uint64_t v32 = a2;
            uint64_t v33 = a3;
            char v34 = a4;
            break;
        }
        goto LABEL_67;
      default:
        if (a4 || v28 != a2)
        {
LABEL_32:
          unint64_t v11 = (v11 + 1) & v12;
          if (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
            goto LABEL_62;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        uint64_t v32 = a2;
        uint64_t v33 = a3;
        char v34 = 0;
LABEL_67:
        sub_1000917F8(v32, v33, v34);
        uint64_t v35 = *(void *)(*v4 + 48) + 24 * v11;
        uint64_t v36 = *(void *)v35;
        uint64_t v37 = *(void *)(v35 + 8);
        *(void *)a1 = *(void *)v35;
        *(void *)(a1 + 8) = v37;
        char v38 = *(unsigned char *)(v35 + 16);
        *(unsigned char *)(a1 + 16) = v38;
        sub_100091494(v36, v37, v38);
        return 0;
    }
  }
}

uint64_t sub_1001E9330(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      BOOL v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1001EB7E8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1001E94E0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000C6118((unint64_t *)&qword_10095B840, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    BOOL v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    BOOL v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      BOOL v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000C6118((unint64_t *)&unk_100955610, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      BOOL v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1001EB984((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1001E9804(void *a1, void *a2)
{
  return sub_1001E9B7C(a1, a2, (unint64_t *)&unk_100955C10, (uint64_t)_HKFitnessFriendAchievement_ptr, &qword_10094F2A8);
}

uint64_t sub_1001E9820(void *a1, void *a2)
{
  return sub_1001E9B7C(a1, a2, (unint64_t *)&qword_10095E770, (uint64_t)HKWorkout_ptr, &qword_10094F3D0);
}

uint64_t sub_1001E983C(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for PlaylistItem();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000C6118(&qword_10094F308, (void (*)(uint64_t))&type metadata accessor for PlaylistItem);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    BOOL v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    BOOL v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      BOOL v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000C6118(&qword_10094F310, (void (*)(uint64_t))&type metadata accessor for PlaylistItem);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      BOOL v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1001EBDD4((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1001E9B60(void *a1, void *a2)
{
  return sub_1001E9B7C(a1, a2, (unint64_t *)&qword_100955C20, (uint64_t)CNContact_ptr, &qword_10094F2E8);
}

uint64_t sub_1001E9B7C(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = v5;
  uint64_t v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v13 = a2;
    uint64_t v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      sub_10007E2D8(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v27 = sub_1001E9E48(v12, result + 1, a5, a3);
    char v38 = (void *)v27;
    unint64_t v28 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v28)
    {
      uint64_t v33 = v28 + 1;
      id v34 = v13;
      sub_1001EB138(v33, a5);
      uint64_t v29 = v38;
    }
    else
    {
      uint64_t v29 = (void *)v27;
      id v30 = v13;
    }
    sub_1001EB3D4((uint64_t)v13, v29);
    *uint64_t v8 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    Swift::Int v16 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
    uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v19 = v17 & ~v18;
    if ((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
    {
      sub_10007E2D8(0, a3);
      id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        char v25 = *(void **)(*(void *)(*v8 + 48) + 8 * v19);
        *a1 = v25;
        id v26 = v25;
        return 0;
      }
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    id v32 = a2;
    sub_1001EBC40((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a5, a3);
    *uint64_t v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v32;
  }
  return 1;
}

Swift::Int sub_1001E9E48(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_1000AFA94(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10007E2D8(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_1001EB138(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

uint64_t sub_1001EA04C()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  sub_1000AFA94(&qword_10094F380);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v31 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v30 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v15 >= v30) {
          goto LABEL_38;
        }
        unint64_t v16 = v31[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v30) {
            goto LABEL_38;
          }
          unint64_t v16 = v31[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v30) {
              goto LABEL_38;
            }
            unint64_t v16 = v31[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v30)
              {
LABEL_38:
                swift_release();
                char v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v31 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v31[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_44;
                  }
                  if (v10 >= v30) {
                    goto LABEL_38;
                  }
                  unint64_t v16 = v31[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
      uint64_t v19 = *(void *)v18;
      id v20 = *(void **)(v18 + 8);
      int v21 = *(unsigned __int8 *)(v18 + 16);
      Hasher.init(_seed:)();
      v32._uint64_t countAndFlagsBits = v19;
      v32._object = v20;
      sub_1000932C0(v32, v21);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (!v21 || v21 == 2)
      {
        Hasher._combine(_:)(v19);
      }
      else if (v21 == 1)
      {
        String.hash(into:)();
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v8 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v11 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
      *(void *)uint64_t v12 = v19;
      *(void *)(v12 + 8) = v20;
      *(unsigned char *)(v12 + 16) = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v1 = v4;
  return result;
}

uint64_t sub_1001EA3A8(uint64_t a1)
{
  return sub_1001EB138(a1, &qword_10094F2D0);
}

uint64_t sub_1001EA3B4()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  sub_1000AFA94(&qword_10094F268);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                char v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v1 = v4;
  return result;
}

uint64_t sub_1001EA694()
{
  char v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  char v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000AFA94(&qword_10094F360);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                char v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000C6118((unint64_t *)&qword_10095B840, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *char v1 = v6;
  return result;
}

uint64_t sub_1001EAA90()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  sub_1000AFA94(&qword_10094F3E0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                char v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v1 = v4;
  return result;
}

uint64_t sub_1001EAD3C()
{
  char v1 = v0;
  uint64_t v42 = type metadata accessor for PlaylistItem();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  char v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000AFA94(&qword_10094F318);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                char v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000C6118(&qword_10094F308, (void (*)(uint64_t))&type metadata accessor for PlaylistItem);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *char v1 = v6;
  return result;
}

uint64_t sub_1001EB138(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1000AFA94(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    char v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

unint64_t sub_1001EB3D4(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

Swift::Int sub_1001EB458(Swift::Int result, unint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = result;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 <= v11 || (a5 & 1) == 0)
  {
    if (a5)
    {
      sub_1001EA04C();
    }
    else
    {
      if (v12 > v11)
      {
        unint64_t result = (Swift::Int)sub_1001EC090();
        goto LABEL_69;
      }
      sub_1001ECA0C();
    }
    uint64_t v13 = *v5;
    Hasher.init(_seed:)();
    v45._uint64_t countAndFlagsBits = v10;
    v45._object = (void *)a2;
    sub_1000932C0(v45, a3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!a3 || a3 == 2)
    {
      Hasher._combine(_:)(v10);
    }
    else if (a3 == 1)
    {
      String.hash(into:)();
    }
    unint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v13 + 32);
    a4 = result & ~v14;
    uint64_t v15 = v13 + 56;
    if ((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
    {
      uint64_t v16 = ~v14;
      uint64_t v17 = *(void *)(v13 + 48);
      BOOL v18 = v10 != 7;
      BOOL v19 = v10 != 6;
      BOOL v20 = v10 != 5;
      BOOL v21 = v10 != 4;
      BOOL v22 = v10 != 3;
      BOOL v23 = v10 != 2;
      BOOL v24 = v10 == 1;
      if (a2)
      {
        BOOL v18 = 1;
        BOOL v19 = 1;
        BOOL v20 = 1;
        BOOL v21 = 1;
        BOOL v22 = 1;
        BOOL v23 = 1;
        BOOL v24 = 0;
      }
      if (a3 != 3) {
        BOOL v24 = 0;
      }
      BOOL v44 = v24;
      if (a3 != 3) {
        BOOL v18 = 1;
      }
      BOOL v43 = v18;
      char v25 = a3 != 3 || v19;
      char v42 = v25;
      char v26 = a3 != 3 || v20;
      char v27 = a3 != 3 || v21;
      char v40 = v27;
      char v41 = v26;
      char v28 = a3 != 3 || v22;
      char v29 = a3 != 3 || v23;
      char v38 = v29;
      char v39 = v28;
      if (a2 | v10) {
        BOOL v30 = 0;
      }
      else {
        BOOL v30 = a3 == 3;
      }
      while (1)
      {
        uint64_t v31 = v17 + 24 * a4;
        unint64_t result = *(void *)v31;
        switch(*(unsigned char *)(v31 + 16))
        {
          case 1:
            if (a3 == 1)
            {
              if (result == v10 && *(void *)(v31 + 8) == a2) {
                goto LABEL_68;
              }
              unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_68;
              }
            }
            goto LABEL_39;
          case 2:
            if (a3 != 2) {
              goto LABEL_39;
            }
            goto LABEL_38;
          case 3:
            switch(result)
            {
              case 1:
                if (v44) {
                  goto LABEL_68;
                }
                goto LABEL_39;
              case 2:
                if ((v38 & 1) == 0) {
                  goto LABEL_68;
                }
                goto LABEL_39;
              case 3:
                if ((v39 & 1) == 0) {
                  goto LABEL_68;
                }
                goto LABEL_39;
              case 4:
                if ((v40 & 1) == 0) {
                  goto LABEL_68;
                }
                goto LABEL_39;
              case 5:
                if ((v41 & 1) == 0) {
                  goto LABEL_68;
                }
                goto LABEL_39;
              case 6:
                if ((v42 & 1) == 0) {
                  goto LABEL_68;
                }
                goto LABEL_39;
              case 7:
                if (!v43) {
                  goto LABEL_68;
                }
                goto LABEL_39;
              default:
                if (v30) {
                  goto LABEL_68;
                }
                goto LABEL_39;
            }
          default:
            if (a3) {
              goto LABEL_39;
            }
LABEL_38:
            if (result == v10)
            {
LABEL_68:
              unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              goto LABEL_69;
            }
LABEL_39:
            a4 = (a4 + 1) & v16;
            if (((*(void *)(v15 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
              goto LABEL_69;
            }
            break;
        }
      }
    }
  }
LABEL_69:
  uint64_t v33 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v34 = *(void *)(v33 + 48) + 24 * a4;
  *(void *)uint64_t v34 = v10;
  *(void *)(v34 + 8) = a2;
  *(unsigned char *)(v34 + 16) = a3;
  uint64_t v35 = *(void *)(v33 + 16);
  BOOL v36 = __OFADD__(v35, 1);
  uint64_t v37 = v35 + 1;
  if (v36)
  {
    __break(1u);
    JUMPOUT(0x1001EB7B8);
  }
  *(void *)(v33 + 16) = v37;
  return result;
}

Swift::Int sub_1001EB7E8(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1001EA3B4();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)sub_1001EC250();
      goto LABEL_22;
    }
    sub_1001ECD40();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        BOOL v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  BOOL v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *BOOL v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1001EB984(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1001EA694();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1001EC5B8((uint64_t (*)(void))&type metadata accessor for UUID, &qword_10094F360);
      goto LABEL_12;
    }
    sub_1001ECFF0();
  }
  uint64_t v12 = *v3;
  sub_1000C6118((unint64_t *)&qword_10095B840, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1000C6118((unint64_t *)&unk_100955610, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001EBC40(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1001EB138(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1001EC868(a4);
      goto LABEL_14;
    }
    sub_1001ED9CC(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10007E2D8(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

uint64_t sub_1001EBDD4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for PlaylistItem();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1001EAD3C();
  }
  else
  {
    if (v12 > v11)
    {
      sub_1001EC5B8((uint64_t (*)(void))&type metadata accessor for PlaylistItem, &qword_10094F318);
      goto LABEL_12;
    }
    sub_1001ED61C();
  }
  uint64_t v13 = *v3;
  sub_1000C6118(&qword_10094F308, (void (*)(uint64_t))&type metadata accessor for PlaylistItem);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    id v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1000C6118(&qword_10094F310, (void (*)(uint64_t))&type metadata accessor for PlaylistItem);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1001EC090()
{
  char v1 = v0;
  sub_1000AFA94(&qword_10094F380);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *char v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    char v21 = *(unsigned char *)(v17 + 16);
    *(void *)uint64_t v20 = *(void *)v17;
    *(void *)(v20 + 8) = v19;
    *(unsigned char *)(v20 + 16) = v21;
    uint64_t result = (void *)sub_100091494(v18, v19, v21);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001EC250()
{
  char v1 = v0;
  sub_1000AFA94(&qword_10094F268);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *char v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001EC404()
{
  return sub_1001EC5B8((uint64_t (*)(void))&type metadata accessor for UUID, &qword_10094F360);
}

void *sub_1001EC424()
{
  char v1 = v0;
  sub_1000AFA94(&qword_10094F3E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *char v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001EC5B8(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __n128 v8 = (char *)&v25 - v7;
  sub_1000AFA94(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  uint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  uint64_t v26 = v4;
  BOOL v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    uint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_1001EC868(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000AFA94(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001ECA0C()
{
  uint64_t v1 = *v0;
  sub_1000AFA94(&qword_10094F380);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_40:
    *uint64_t v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v28 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v29 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (v6)
  {
    unint64_t v12 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v13 = v12 | (v9 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(v1 + 48) + 24 * v13;
    uint64_t v18 = *(void *)v17;
    int64_t v19 = *(void **)(v17 + 8);
    int v20 = *(unsigned __int8 *)(v17 + 16);
    Hasher.init(_seed:)();
    sub_100091494(v18, (uint64_t)v19, v20);
    v30._uint64_t countAndFlagsBits = v18;
    v30._object = v19;
    sub_1000932C0(v30, v20);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!v20 || v20 == 2)
    {
      Hasher._combine(_:)(v18);
    }
    else if (v20 == 1)
    {
      String.hash(into:)();
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v22) & ~*(void *)(v7 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v7 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v3 + 48) + 24 * v10;
    *(void *)uint64_t v11 = v18;
    *(void *)(v11 + 8) = v19;
    *(unsigned char *)(v11 + 16) = v20;
    ++*(void *)(v3 + 16);
  }
  int64_t v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v14 >= v29) {
    goto LABEL_38;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v14);
  ++v9;
  if (v15) {
    goto LABEL_23;
  }
  int64_t v9 = v14 + 1;
  if (v14 + 1 >= v29) {
    goto LABEL_38;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v9);
  if (v15) {
    goto LABEL_23;
  }
  int64_t v9 = v14 + 2;
  if (v14 + 2 >= v29) {
    goto LABEL_38;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v9);
  if (v15)
  {
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
    goto LABEL_24;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_38:
    uint64_t result = swift_release_n();
    goto LABEL_40;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v9 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v9 >= v29) {
      goto LABEL_38;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1001ECD40()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000AFA94(&qword_10094F268);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1001ECFF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000AFA94(&qword_10094F360);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000C6118((unint64_t *)&qword_10095B840, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1001ED3A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000AFA94(&qword_10094F3E0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1001ED61C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PlaylistItem();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000AFA94(&qword_10094F318);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000C6118(&qword_10094F308, (void (*)(uint64_t))&type metadata accessor for PlaylistItem);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1001ED9CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1000AFA94(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  unint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::Int sub_1001EDC44(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1001EEFB8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1001EDCB0(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1001EDCB0(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_133;
    }
    if (v3) {
      return sub_1001EE458(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_141;
  }
  Swift::Int v102 = v3;
  Swift::Int v99 = result;
  uint64_t v104 = v1;
  uint64_t v95 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v103 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      int64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_98:
      uint64_t v98 = v8;
      if (v12 >= 2)
      {
        uint64_t v89 = *v95;
        do
        {
          unint64_t v90 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_128;
          }
          if (!v89) {
            goto LABEL_140;
          }
          uint64_t v91 = *(void *)&v11[16 * v90 + 32];
          uint64_t v92 = *(void *)&v11[16 * v12 + 24];
          sub_1001EE560((char *)(v89 + 16 * v91), (char *)(v89 + 16 * *(void *)&v11[16 * v12 + 16]), v89 + 16 * v92, v103);
          if (v104) {
            goto LABEL_95;
          }
          if (v92 < v91) {
            goto LABEL_129;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v11 = sub_1001EEF68((uint64_t)v11);
          }
          if (v90 >= *((void *)v11 + 2)) {
            goto LABEL_130;
          }
          unint64_t v93 = &v11[16 * v90 + 32];
          *(void *)unint64_t v93 = v91;
          *((void *)v93 + 1) = v92;
          unint64_t v94 = *((void *)v11 + 2);
          if (v12 > v94) {
            goto LABEL_131;
          }
          memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v94 - v12));
          *((void *)v11 + 2) = v94 - 1;
          unint64_t v12 = v94 - 1;
        }
        while (v94 > 2);
      }
      swift_bridgeObjectRelease();
      v98[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v98 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v102;
    uint64_t v98 = (void *)v7;
    uint64_t v103 = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v96 = *a1 + 24;
  int64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v105 = *a1;
  while (1)
  {
    Swift::Int v13 = v9++;
    Swift::Int v101 = v13;
    if (v9 < v3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = String.count.getter();
      uint64_t v15 = String.count.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v96 + 16 * v13;
        while (1)
        {
          v16 += 16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v17 = String.count.getter();
          uint64_t v18 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v15 < v14 == v18 >= v17) {
            break;
          }
          ++v9;
          Swift::Int v3 = v102;
          if (v102 == v9)
          {
            Swift::Int v9 = v102;
            goto LABEL_23;
          }
        }
        Swift::Int v3 = v102;
      }
LABEL_23:
      uint64_t v10 = v105;
      if (v15 < v14)
      {
        if (v9 < v13) {
          goto LABEL_134;
        }
        if (v13 < v9)
        {
          uint64_t v19 = 16 * v9;
          uint64_t v20 = 16 * v13;
          Swift::Int v21 = v9;
          Swift::Int v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v105) {
                goto LABEL_139;
              }
              uint64_t v23 = v105 + v19;
              uint64_t v24 = *(void *)(v105 + v20);
              uint64_t v25 = *(void *)(v105 + v20 + 8);
              *(_OWORD *)(v105 + v20) = *(_OWORD *)(v105 + v19 - 16);
              *(void *)(v23 - 16) = v24;
              *(void *)(v23 - 8) = v25;
            }
            ++v22;
            v19 -= 16;
            v20 += 16;
          }
          while (v22 < v21);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_48;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_132;
    }
    if (v9 - v13 >= v99) {
      goto LABEL_48;
    }
    Swift::Int v26 = v13 + v99;
    if (__OFADD__(v13, v99)) {
      goto LABEL_135;
    }
    if (v26 >= v3) {
      Swift::Int v26 = v3;
    }
    if (v26 < v13) {
      break;
    }
    if (v9 != v26)
    {
      unint64_t v97 = v11;
      unint64_t v27 = (void *)(v10 + 16 * v9);
      Swift::Int v100 = v26;
      do
      {
        BOOL v28 = v27;
        do
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v29 = String.count.getter();
          uint64_t v30 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v30 >= v29) {
            break;
          }
          if (!v105) {
            goto LABEL_137;
          }
          uint64_t v31 = *v28;
          uint64_t v32 = v28[1];
          *(_OWORD *)BOOL v28 = *((_OWORD *)v28 - 1);
          *(v28 - 1) = v32;
          *(v28 - 2) = v31;
          v28 -= 2;
          ++v13;
        }
        while (v9 != v13);
        ++v9;
        v27 += 2;
        Swift::Int v13 = v101;
      }
      while (v9 != v100);
      Swift::Int v9 = v100;
      int64_t v11 = v97;
    }
LABEL_48:
    if (v9 < v13) {
      goto LABEL_127;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v11 = sub_1001EE868(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v34 = *((void *)v11 + 2);
    unint64_t v33 = *((void *)v11 + 3);
    unint64_t v12 = v34 + 1;
    uint64_t v10 = v105;
    if (v34 >= v33 >> 1)
    {
      uint64_t v88 = sub_1001EE868((char *)(v33 > 1), v34 + 1, 1, v11);
      uint64_t v10 = v105;
      int64_t v11 = v88;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v35 = v11 + 32;
    int64_t v36 = &v11[16 * v34 + 32];
    *(void *)int64_t v36 = v13;
    *((void *)v36 + 1) = v9;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v12 - 1;
        if (v12 >= 4)
        {
          char v42 = &v35[16 * v12];
          uint64_t v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          BOOL v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_116;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          BOOL v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_117;
          }
          unint64_t v49 = v12 - 2;
          unint64_t v50 = &v35[16 * v12 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_119;
          }
          BOOL v48 = __OFADD__(v40, v53);
          uint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_122;
          }
          if (v54 >= v45)
          {
            uint64_t v72 = &v35[16 * v37];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_126;
            }
            BOOL v65 = v40 < v75;
            goto LABEL_85;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v66 = *((void *)v11 + 4);
            uint64_t v67 = *((void *)v11 + 5);
            BOOL v48 = __OFSUB__(v67, v66);
            uint64_t v59 = v67 - v66;
            char v60 = v48;
            goto LABEL_79;
          }
          uint64_t v39 = *((void *)v11 + 4);
          uint64_t v38 = *((void *)v11 + 5);
          BOOL v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_118;
        }
        unint64_t v49 = v12 - 2;
        uint64_t v55 = &v35[16 * v12 - 32];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v58 = __OFSUB__(v56, v57);
        uint64_t v59 = v56 - v57;
        char v60 = v58;
        if (v58) {
          goto LABEL_121;
        }
        uint64_t v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_124;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_125;
        }
        if (v59 + v64 >= v40)
        {
          BOOL v65 = v40 < v64;
LABEL_85:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v60) {
          goto LABEL_120;
        }
        uint64_t v68 = &v35[16 * v37];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v48 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_123;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_87:
        unint64_t v76 = v37 - 1;
        if (v37 - 1 >= v12)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v10) {
          goto LABEL_138;
        }
        Swift::Int v77 = v9;
        id v78 = v11;
        uint64_t v79 = v35;
        uint64_t v80 = &v35[16 * v76];
        uint64_t v81 = *(void *)v80;
        uint64_t v82 = v79;
        unint64_t v83 = v37;
        char v84 = &v79[16 * v37];
        uint64_t v85 = *((void *)v84 + 1);
        sub_1001EE560((char *)(v10 + 16 * *(void *)v80), (char *)(v10 + 16 * *(void *)v84), v10 + 16 * v85, v103);
        if (v104)
        {
LABEL_95:
          swift_bridgeObjectRelease();
          v98[2] = 0;
          return swift_bridgeObjectRelease();
        }
        if (v85 < v81) {
          goto LABEL_113;
        }
        if (v83 > *((void *)v78 + 2)) {
          goto LABEL_114;
        }
        unint64_t v86 = v83;
        *(void *)uint64_t v80 = v81;
        *(void *)&v82[16 * v76 + 8] = v85;
        unint64_t v87 = *((void *)v78 + 2);
        if (v83 >= v87) {
          goto LABEL_115;
        }
        uint64_t v35 = v82;
        int64_t v11 = v78;
        uint64_t v104 = 0;
        unint64_t v12 = v87 - 1;
        memmove(v84, v84 + 16, 16 * (v87 - 1 - v86));
        *((void *)v78 + 2) = v87 - 1;
        uint64_t v10 = v105;
        Swift::Int v9 = v77;
        if (v87 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v102;
    if (v9 >= v102)
    {
      uint64_t v8 = v98;
      goto LABEL_98;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EE458(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = (void *)(*a4 + 16 * a3);
LABEL_5:
    uint64_t v7 = v13;
    uint64_t v14 = v6;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = String.count.getter();
      uint64_t v9 = String.count.getter();
      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      if (v9 >= v8)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v14 + 2;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v10 = *v6;
      uint64_t v11 = v6[1];
      *(_OWORD *)uint64_t v6 = *((_OWORD *)v6 - 1);
      *(v6 - 1) = v11;
      *(v6 - 2) = v10;
      v6 -= 2;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EE560(char *a1, char *__src, unint64_t a3, char *a4)
{
  uint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = __src - a1 + 15;
  if (__src - a1 >= 0) {
    uint64_t v7 = __src - a1;
  }
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 4;
  uint64_t v30 = a1;
  uint64_t v29 = a4;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (a4 != __src || &__src[16 * v11] <= a4) {
        memmove(a4, __src, 16 * v11);
      }
      uint64_t v18 = &a4[16 * v11];
      BOOL v28 = v18;
      uint64_t v30 = v5;
      if (a1 < v5 && v9 >= 16)
      {
        uint64_t v19 = (char *)(a3 - 16);
        uint64_t v20 = v5;
        do
        {
          unint64_t v27 = v5;
          Swift::Int v21 = v19 + 16;
          v20 -= 16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v22 = String.count.getter();
          uint64_t v23 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v23 >= v22)
          {
            BOOL v28 = v18 - 16;
            if (v21 < v18 || v19 >= v18 || v21 != v18) {
              *(_OWORD *)uint64_t v19 = *((_OWORD *)v18 - 1);
            }
            uint64_t v20 = v27;
            v18 -= 16;
          }
          else
          {
            if (v21 != v27 || v19 >= v27) {
              *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
            }
            uint64_t v30 = v20;
          }
          if (v20 <= a1) {
            break;
          }
          v19 -= 16;
          uint64_t v5 = v20;
        }
        while (v18 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -15)
  {
    if (a4 != a1 || &a1[16 * v8] <= a4) {
      memmove(a4, a1, 16 * v8);
    }
    unint64_t v12 = &a4[16 * v8];
    BOOL v28 = v12;
    if ((unint64_t)v5 < a3 && v6 >= 16)
    {
      uint64_t v13 = a4;
      uint64_t v14 = a1;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v15 = String.count.getter();
        uint64_t v16 = String.count.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16 >= v15)
        {
          if (v14 != v13) {
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
          }
          v13 += 16;
          uint64_t v29 = v13;
          uint64_t v17 = v5;
        }
        else
        {
          uint64_t v17 = v5 + 16;
          if (v14 < v5 || v14 >= v17 || v14 != v5) {
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v5;
          }
        }
        v14 += 16;
        if (v13 >= v12) {
          break;
        }
        uint64_t v5 = v17;
      }
      while ((unint64_t)v17 < a3);
      uint64_t v30 = v14;
    }
LABEL_43:
    sub_1001EE99C((void **)&v30, (const void **)&v29, &v28);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001EE868(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000AFA94(&qword_10094F260);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001EE968(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001EEC28(a1, a2, a3, type metadata accessor for WorkoutChartDataElement);
}

uint64_t sub_1001EE980(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001EEC28(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for DateComponents);
}

char *sub_1001EE99C(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1001EEA58(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

char *sub_1001EEB24(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

uint64_t sub_1001EEBE0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001EEC28(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ActivitySharingHighlight);
}

uint64_t sub_1001EEBF8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001EEC28(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for MediaMoment);
}

uint64_t sub_1001EEC10(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001EEC28(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Recommendation);
}

uint64_t sub_1001EEC28(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1001EED6C(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

uint64_t sub_1001EEE24(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_1000AFA94(&qword_10094E800);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1001EEF68(uint64_t a1)
{
  return sub_1001EE868(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001EEF7C(void *a1)
{
  return sub_1001C9A30(0, a1[2], 0, a1);
}

uint64_t sub_1001EEF90(void *a1)
{
  return sub_1001C9BB4(0, a1[2], 0, a1);
}

uint64_t sub_1001EEFA4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001EEFB8(uint64_t a1)
{
  return sub_1000ABAD8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001EEFCC(uint64_t a1)
{
  return sub_1001C9750(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001EEFE0(void *a1)
{
  return sub_1001C9EA0(0, a1[2], 0, a1);
}

uint64_t sub_1001EEFF4(void *a1)
{
  return sub_1001CAD30(0, a1[2], 0, a1);
}

uint64_t sub_1001EF008(void *a1)
{
  return sub_1001CAEBC(0, a1[2], 0, a1);
}

uint64_t sub_1001EF01C(uint64_t a1)
{
  return sub_1001CB1F0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001EF030(void *a1)
{
  return sub_1001CB35C(0, a1[2], 0, a1);
}

uint64_t sub_1001EF044(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    unint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1001E9330(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

id sub_1001EF0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v59 = *(void *)(a2 + 8);
  uint64_t v60 = *(void *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  int v56 = *(unsigned __int8 *)(a2 + 56);
  char v57 = *(unsigned char *)(a2 + 58);
  uint64_t v15 = *(void *)(a2 + 64);
  uint64_t v48 = *(void *)(a2 + 72);
  uint64_t v51 = *(void *)(a2 + 88);
  char v49 = *(unsigned char *)(a2 + 57);
  char v50 = *(unsigned char *)(a2 + 96);
  uint64_t v61 = *(void *)(a1 + 8);
  uint64_t v54 = *(void *)(a1 + 16);
  uint64_t v55 = *(void *)a1;
  char v45 = *(unsigned char *)(a1 + 24);
  uint64_t v53 = *(void *)(a1 + 32);
  char v46 = *(unsigned char *)(a1 + 40);
  char v47 = *(unsigned char *)(a2 + 80);
  char v16 = *(unsigned char *)(a1 + 41);
  char v52 = *(unsigned char *)(a1 + 42);
  long long v17 = *(_OWORD *)(a2 + 16);
  v76[0] = *(_OWORD *)a2;
  v76[1] = v17;
  v76[2] = *(_OWORD *)(a2 + 32);
  uint64_t v77 = *(void *)(a2 + 48);
  sub_1000B013C(a2);
  sub_1000B013C(a2);
  sub_1001D9EF4(a1);
  id result = [a3 unitManager];
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v19 = result;
  type metadata accessor for TrendsCoachingStatisticsManager();
  swift_allocObject();
  sub_1000B013C(a2);
  sub_1001D9EF4(a1);
  uint64_t v58 = sub_1005839C8((_OWORD *)a1, a2, v19);
  if (v4)
  {

    sub_1000B008C(a2);
    sub_1001D0774(a1);
    sub_1000B008C(a2);
    goto LABEL_8;
  }
  sub_1001D9EF4(a1);
  swift_bridgeObjectRetain();
  id v20 = a3;
  swift_retain();
  id v21 = v20;
  uint64_t v22 = sub_100584F44((uint64_t *)v76);
  uint64_t v44 = v21;
  id result = [v21 unitManager];
  if (!result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v23 = result;
  double v24 = sub_100585150(v22, v57, result);
  double v26 = v25;

  swift_bridgeObjectRelease();
  if (v24 < v26 && v56 == 2)
  {
    sub_1000B008C(a2);
    swift_release();

    swift_bridgeObjectRelease();
    sub_1000B008C(a2);
    sub_1001D0774(a1);
    static os_log_type_t.error.getter();
    id v27 = HKLogActivity;
    os_log(_:dso:log:_:_:)();

    sub_1001EF79C();
    swift_allocError();
    swift_willThrow();

LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id result = (id)swift_bridgeObjectRelease();
    if (!v5)
    {

      swift_bridgeObjectRelease();
      return (id)swift_release();
    }
    return result;
  }
  char v28 = v16 & 1;
  uint64_t v29 = *(void *)(*(void *)&v76[0] + 16);
  if (v29 == 365)
  {
    uint64_t v30 = v44;

    sub_1000B008C(a2);
  }
  else
  {
    *((void *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v31._object = (void *)0x80000001007B8810;
    v31._uint64_t countAndFlagsBits = 0xD000000000000037;
    String.append(_:)(v31);
    sub_1000B008C(a2);
    uint64_t v78 = v29;
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 46;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    char v43 = v16 & 1;
    static os_log_type_t.error.getter();
    unint64_t v34 = (void *)HKLogActivity;
    sub_1000AFA94((uint64_t *)&unk_1009546D0);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_1007509E0;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = sub_1000AA64C();
    *(void *)(v35 + 32) = 0;
    *(void *)(v35 + 40) = 0xE000000000000000;
    id v36 = v34;
    os_log(_:dso:log:_:_:)();

    char v28 = v43;
    swift_bridgeObjectRelease();
    uint64_t v30 = v44;
  }
  *(void *)&long long v62 = v55;
  *((void *)&v62 + 1) = v61;
  *(void *)&long long v63 = v54;
  BYTE8(v63) = v45 & 1;
  *(void *)&long long v64 = v53;
  BYTE8(v64) = v46 & 1;
  BYTE9(v64) = v28;
  BYTE10(v64) = v52;
  *(void *)&long long v65 = v60;
  *((void *)&v65 + 1) = v59;
  *(void *)&long long v66 = v10;
  *((void *)&v66 + 1) = v11;
  *(void *)&long long v67 = v12;
  *((void *)&v67 + 1) = v13;
  *(void *)&long long v68 = v14;
  BYTE8(v68) = v56;
  BYTE9(v68) = v49;
  BYTE10(v68) = v57;
  *(void *)&long long v69 = v15;
  *((void *)&v69 + 1) = v48;
  LOBYTE(v70) = v47 & 1;
  *((void *)&v70 + 1) = v51;
  LOBYTE(v71) = v50 & 1;
  *((void *)&v71 + 1) = v58;
  *(void *)&long long v72 = v55;
  *((void *)&v72 + 1) = v61;
  *(void *)&long long v73 = v54;
  BYTE8(v73) = v45 & 1;
  *(void *)&long long v74 = v53;
  BYTE8(v74) = v46 & 1;
  BYTE9(v74) = v28;
  BYTE10(v74) = v52;
  BYTE11(v74) = v57;
  uint64_t v75 = v30;
  sub_1001EF6B8((uint64_t)&v62);
  swift_release();

  swift_bridgeObjectRelease();
  sub_1000B008C(a2);
  sub_1001D0774(a1);
  id result = (id)sub_1001EF728((uint64_t)&v62);
  long long v37 = v73;
  *(_OWORD *)(a4 + 160) = v72;
  *(_OWORD *)(a4 + 176) = v37;
  *(_OWORD *)(a4 + 192) = v74;
  *(void *)(a4 + 208) = v75;
  long long v38 = v69;
  *(_OWORD *)(a4 + 96) = v68;
  *(_OWORD *)(a4 + 112) = v38;
  long long v39 = v71;
  *(_OWORD *)(a4 + 128) = v70;
  *(_OWORD *)(a4 + 144) = v39;
  long long v40 = v65;
  *(_OWORD *)(a4 + 32) = v64;
  *(_OWORD *)(a4 + 48) = v40;
  long long v41 = v67;
  *(_OWORD *)(a4 + 64) = v66;
  *(_OWORD *)(a4 + 80) = v41;
  long long v42 = v63;
  *(_OWORD *)a4 = v62;
  *(_OWORD *)(a4 + 16) = v42;
  return result;
}

uint64_t sub_1001EF6B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 208);
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1001EF728(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1001EF79C()
{
  unint64_t result = qword_10094F280;
  if (!qword_10094F280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F280);
  }
  return result;
}

uint64_t sub_1001EF7F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EF8E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1001F103C();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v4 = (char *)(a1 + 48);
    do
    {
      uint64_t v5 = *((void *)v4 - 2);
      unint64_t v6 = *((void *)v4 - 1);
      char v7 = *v4;
      v4 += 24;
      sub_100091494(v5, v6, v7);
      sub_1001E8EB4((uint64_t)v8, v5, v6, v7);
      sub_1000917F8(v8[0], v8[1], v9);
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_1001EF98C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFA80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFB78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFC70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFD68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v27 = (char *)v21 - v6;
  uint64_t v7 = sub_1000AFA94((uint64_t *)&unk_1009555F0);
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_1000C6118((unint64_t *)&qword_10095B840, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    double v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    double v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    char v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    long long v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_1001E94E0(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

uint64_t sub_1001F0010(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlaylistItem();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_1000C6118(&qword_10094F308, (void (*)(uint64_t))&type metadata accessor for PlaylistItem);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, v2);
      sub_1001E983C((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_1001F01AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 208 * a1 + 32;
    unint64_t v6 = a3 + 208 * v4;
    if (v5 >= v6 || v5 + 208 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F02A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_1000AFA94(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F03A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 192 * a1 + 32;
    unint64_t v6 = a3 + 192 * v4;
    if (v5 >= v6 || v5 + 192 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F04A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F0598(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1000AFA94(&qword_10094F3F8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F06A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F0798(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001F088C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F0978(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F0A70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F0B64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F0C5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F0D54()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *sub_1001F0D9C(void *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v7 = a1[9];
  uint64_t v8 = a1[8];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001F0E74(v8, v7, v2, v3, v4, v5);
  return a1;
}

uint64_t sub_1001F0E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001F0EFC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_1001F0F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FitnessPlusStackViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F0FE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FitnessPlusStackViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001F103C()
{
  unint64_t result = qword_10094F430;
  if (!qword_10094F430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F430);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TrendsCoachingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001F112CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F1154()
{
  return 0;
}

ValueMetadata *type metadata accessor for TrendsCoachingError()
{
  return &type metadata for TrendsCoachingError;
}

unint64_t sub_1001F1170()
{
  unint64_t result = qword_10094F450;
  if (!qword_10094F450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F450);
  }
  return result;
}

uint64_t destroy for ReachableContact(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ReachableContact(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  id v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReachableContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ReachableContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReachableContact(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReachableContact(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_1001F140C()
{
  uint64_t v1 = v0;
  id v2 = *v0;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v3 = v1[5];
  id v6 = v3;
  Swift::UInt v4 = v3[2];
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 5;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v5 += 2;
      --v4;
    }
    while (v4);
    sub_1000B1AE0((uint64_t)&v6);
  }
}

Swift::Int sub_1001F1508()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001F154C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001F1588(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  uint64_t v8[2] = v5;
  return sub_1001F1628(v7, v8) & 1;
}

unint64_t sub_1001F15D4()
{
  unint64_t result = qword_10094F4A8;
  if (!qword_10094F4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F4A8);
  }
  return result;
}

uint64_t sub_1001F1628(void *a1, void *a2)
{
  sub_1000A88A4();
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  BOOL v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[3] == a2[3] && a1[4] == a2[4];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  id v6 = (void *)a1[5];
  id v7 = (void *)a2[5];

  return sub_1003756B8(v6, v7);
}

id sub_1001F17F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundSupplementaryView();
  [super dealloc];
}

uint64_t type metadata accessor for BackgroundSupplementaryView()
{
  return self;
}

uint64_t sub_1001F1854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

void sub_1001F185C()
{
  sub_100008C84();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AttributedString();
    if (v1 <= 0x3F)
    {
      swift_checkMetadataState();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_1001F198C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DynamicTypeSize();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(void *)(v7 + 64) <= 8uLL) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = v12 + v11;
  uint64_t v14 = v12 + 7;
  unint64_t v15 = (((v12 + 7 + ((v12 + v11 + ((v8 + v11 + 2) & ~v11)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  unint64_t v18 = ((*(void *)(v16 + 64) + 7 + ((v17 + 8 + v15) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 32;
  unsigned int v19 = v17 | *(_DWORD *)(v7 + 80) & 0xF8 | v11;
  if (v19 > 7 || ((*(_DWORD *)(v16 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v18 > 0x18)
  {
    uint64_t v22 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v22 + (((v19 | 7) + 16) & ~(unint64_t)(v19 | 7)));
    swift_retain();
  }
  else
  {
    unsigned int v23 = a2[v8];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v25 = v8;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          if (v8 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_25;
          }
          goto LABEL_23;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 4:
          int v26 = *(_DWORD *)a2;
          if (v8 < 4) {
LABEL_23:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v8))) + 2;
          else {
LABEL_25:
          }
            unsigned int v23 = v26 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v27 = v6;
    uint64_t v50 = v17 + 8;
    uint64_t v51 = v14;
    uint64_t v52 = *(void *)(v16 + 64) + 7;
    uint64_t v53 = v9;
    char v28 = a2;
    uint64_t v54 = *(void *)(a3 + 16);
    uint64_t v29 = v8 + 1;
    uint64_t v30 = ~v11;
    uint64_t v49 = ~v17;
    if (v23 == 1)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, v28, v27);
      char v31 = 1;
    }
    else
    {
      *a1 = *v28;
      swift_retain();
      char v31 = 0;
    }
    *((unsigned char *)a1 + v8) = v31;
    *((unsigned char *)a1 + v29) = *((unsigned char *)v28 + v29);
    Swift::String v32 = (char *)v28 + v29 + v11;
    uint64_t v33 = ((unint64_t)a1 + v29 + v11 + 1) & v30;
    uint64_t v34 = (unint64_t)(v32 + 1) & v30;
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v35(v33, v34, v53);
    uint64_t v36 = (v13 + v33) & v30;
    uint64_t v37 = (v13 + v34) & v30;
    v35(v36, v37, v53);
    long long v38 = (void *)((v51 + v36) & 0xFFFFFFFFFFFFFFF8);
    long long v39 = (void *)((v51 + v37) & 0xFFFFFFFFFFFFFFF8);
    *long long v38 = *v39;
    v38[1] = v39[1];
    long long v40 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
    *long long v40 = *v41;
    unint64_t v42 = ((unint64_t)v40 + v50) & v49;
    unint64_t v43 = ((unint64_t)v41 + v50) & v49;
    uint64_t v44 = *(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16);
    swift_bridgeObjectRetain();
    v44(v42, v43, v54);
    char v45 = (_OWORD *)((v52 + v43) & 0xFFFFFFFFFFFFFFF8);
    long long v46 = v45[1];
    char v47 = (_OWORD *)((v52 + v42) & 0xFFFFFFFFFFFFFFF8);
    *char v47 = *v45;
    v47[1] = v46;
  }
  return a1;
}

uint64_t sub_1001F1D74(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DynamicTypeSize();
  if (*(void *)(*(void *)(v4 - 8) + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else {
    swift_release();
  }
  uint64_t v11 = type metadata accessor for AttributedString();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v14 = v12 + 8;
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (unint64_t)&a1[v5 + 2 + v15] & ~v15;
  v13(v16, v11);
  uint64_t v17 = *(void *)(v14 + 56);
  uint64_t v18 = (v17 + v15 + v16) & ~v15;
  v13(v18, v11);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(*(void *)(a2 + 16) - 8);
  id v20 = *(uint64_t (**)(unint64_t))(v19 + 8);
  unint64_t v21 = (((((v17 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v19 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);

  return v20(v21);
}

void *sub_1001F1F98(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DynamicTypeSize();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    *a1 = *(void *)a2;
    swift_retain();
    char v12 = 0;
  }
  *((unsigned char *)a1 + v7) = v12;
  uint64_t v13 = v7 + 1;
  uint64_t v14 = (char *)a1 + v7 + 1;
  uint64_t v15 = &a2[v13];
  unsigned char *v14 = a2[v13];
  uint64_t v16 = type metadata accessor for AttributedString();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  uint64_t v19 = v17 + 16;
  uint64_t v20 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = (unint64_t)&v14[v20 + 1] & ~v20;
  uint64_t v22 = (unint64_t)&v15[v20 + 1] & ~v20;
  v18(v21, v22, v16);
  uint64_t v23 = *(void *)(v19 + 48);
  uint64_t v24 = (v23 + v20 + v21) & ~v20;
  uint64_t v25 = (v23 + v20 + v22) & ~v20;
  v18(v24, v25, v16);
  int v26 = (void *)((v23 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)((v23 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  *int v26 = *v27;
  v26[1] = v27[1];
  char v28 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v28 = *v29;
  uint64_t v30 = *(void *)(a3 + 16);
  uint64_t v31 = *(void *)(v30 - 8);
  Swift::String v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
  uint64_t v33 = v31 + 16;
  uint64_t v34 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v35 = ((unint64_t)v28 + v34 + 8) & ~v34;
  uint64_t v36 = ((unint64_t)v29 + v34 + 8) & ~v34;
  swift_bridgeObjectRetain();
  v32(v35, v36, v30);
  uint64_t v37 = *(void *)(v33 + 48) + 7;
  long long v38 = (_OWORD *)((v37 + v35) & 0xFFFFFFFFFFFFFFF8);
  long long v39 = (_OWORD *)((v37 + v36) & 0xFFFFFFFFFFFFFFF8);
  long long v40 = v39[1];
  *long long v38 = *v39;
  v38[1] = v40;
  return a1;
}

unsigned __int8 *sub_1001F2270(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 1;
    }
    else
    {
LABEL_36:
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_retain();
    }
  }
  unint64_t v17 = *(void *)(*(void *)(type metadata accessor for DynamicTypeSize() - 8) + 64);
  if (v17 <= 8) {
    unint64_t v17 = 8;
  }
  unint64_t v18 = v17 + 1;
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  a1[v18] = a2[v18];
  uint64_t v21 = type metadata accessor for AttributedString();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 24);
  uint64_t v24 = v22 + 24;
  uint64_t v25 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v26 = (unint64_t)&v19[v25 + 1] & ~v25;
  uint64_t v27 = (unint64_t)&v20[v25 + 1] & ~v25;
  v23(v26, v27, v21);
  uint64_t v28 = *(void *)(v24 + 40);
  uint64_t v29 = (v28 + v25 + v26) & ~v25;
  uint64_t v30 = (v28 + v25 + v27) & ~v25;
  v23(v29, v30, v21);
  uint64_t v31 = (void *)((v28 + 7 + v29) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v32 = (void *)((v28 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v33 = *v34;
  uint64_t v35 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v36 = v35 + 24;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = ((unint64_t)v33 + v37 + 8) & ~v37;
  uint64_t v39 = ((unint64_t)v34 + v37 + 8) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 24))(v38, v39);
  uint64_t v40 = *(void *)(v36 + 40) + 7;
  long long v41 = (void *)((v40 + v38) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v42 = (void *)((v40 + v39) & 0xFFFFFFFFFFFFFFF8);
  *long long v41 = *v42;
  v41[1] = v42[1];
  v41[2] = v42[2];
  v41[3] = v42[3];
  return a1;
}

void *sub_1001F2674(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DynamicTypeSize();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    char v12 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v7) = v12;
  uint64_t v13 = v7 + 1;
  unsigned int v14 = (char *)a1 + v7 + 1;
  uint64_t v15 = &a2[v13];
  unsigned char *v14 = a2[v13];
  uint64_t v16 = type metadata accessor for AttributedString();
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  uint64_t v19 = v17 + 32;
  uint64_t v20 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = (unint64_t)&v14[v20 + 1] & ~v20;
  uint64_t v22 = (unint64_t)&v15[v20 + 1] & ~v20;
  v18(v21, v22, v16);
  uint64_t v23 = *(void *)(v19 + 32);
  uint64_t v24 = (v23 + v20 + v21) & ~v20;
  uint64_t v25 = (v23 + v20 + v22) & ~v20;
  v18(v24, v25, v16);
  uint64_t v26 = (_OWORD *)((v23 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (_OWORD *)((v23 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v26 = *v27;
  uint64_t v28 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  uint64_t v30 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v31 = v30 + 32;
  uint64_t v32 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v33 = ((unint64_t)v28 + v32 + 8) & ~v32;
  uint64_t v34 = ((unint64_t)v29 + v32 + 8) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v30 + 32))(v33, v34);
  uint64_t v35 = *(void *)(v31 + 32) + 7;
  uint64_t v36 = (_OWORD *)((v35 + v33) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (_OWORD *)((v35 + v34) & 0xFFFFFFFFFFFFFFF8);
  long long v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  return a1;
}

unsigned __int8 *sub_1001F2930(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      char v17 = 1;
    }
    else
    {
LABEL_36:
      char v17 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v17;
  }
  unint64_t v18 = *(void *)(*(void *)(type metadata accessor for DynamicTypeSize() - 8) + 64);
  if (v18 <= 8) {
    unint64_t v18 = 8;
  }
  unint64_t v19 = v18 + 1;
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  a1[v19] = a2[v19];
  uint64_t v22 = type metadata accessor for AttributedString();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v23 + 40;
  uint64_t v26 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v27 = (unint64_t)&v20[v26 + 1] & ~v26;
  uint64_t v28 = (unint64_t)&v21[v26 + 1] & ~v26;
  v24(v27, v28, v22);
  uint64_t v29 = *(void *)(v25 + 24);
  uint64_t v30 = (v29 + v26 + v27) & ~v26;
  uint64_t v31 = (v29 + v26 + v28) & ~v26;
  v24(v30, v31, v22);
  uint64_t v32 = (void *)((v29 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (void *)((v29 + 7 + v31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRelease();
  uint64_t v34 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v34 = *v35;
  uint64_t v36 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v37 = v36 + 40;
  uint64_t v38 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v39 = ((unint64_t)v34 + v38 + 8) & ~v38;
  uint64_t v40 = ((unint64_t)v35 + v38 + 8) & ~v38;
  (*(void (**)(uint64_t, uint64_t))(v36 + 40))(v39, v40);
  uint64_t v41 = *(void *)(v37 + 24) + 7;
  unint64_t v42 = (void *)((v41 + v39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v43 = (void *)((v41 + v40) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v42 = *v43;
  v42[1] = v43[1];
  v42[2] = v43[2];
  v42[3] = v43[3];
  return a1;
}

uint64_t sub_1001F2D28(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(*(void *)(type metadata accessor for DynamicTypeSize() - 8) + 64);
  if (v6 <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  if (v10 <= *(_DWORD *)(v11 + 84)) {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v9 + 84);
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v13 + v12;
  uint64_t v18 = v13 + 7;
  uint64_t v19 = v14 + 8;
  if (v16 < a2)
  {
    unint64_t v20 = ((*(void *)(v11 + 64)
          + ((v19
            + ((((v18 + ((v17 + ((v7 + v12 + 2) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32;
    if ((v20 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v16 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v20);
        if (!*((unsigned char *)a1 + v20)) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v20);
        if (*(_WORD *)((char *)a1 + v20)) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1001F2FE8);
      case 4:
        int v24 = *(_DWORD *)((char *)a1 + v20);
        if (!v24) {
          break;
        }
LABEL_28:
        int v26 = v24 - 1;
        if ((v20 & 0xFFFFFFF8) != 0)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v16 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  uint64_t v28 = ((unint64_t)a1 + v7 + v12 + 2) & ~v12;
  if (v10 == v16)
  {
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v29(v28, v10, v8);
  }
  else
  {
    unint64_t v30 = (v18 + ((v17 + v28) & ~v12)) & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v32 = *(uint64_t (**)(unint64_t))(v11 + 48);
      return v32((v19 + ((v30 + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
    }
    else
    {
      unint64_t v31 = *(void *)(v30 + 8);
      if (v31 >= 0xFFFFFFFF) {
        LODWORD(v31) = -1;
      }
      return (v31 + 1);
    }
  }
}

void sub_1001F2FFC(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(*(void *)(type metadata accessor for DynamicTypeSize() - 8) + 64);
  if (v8 <= 8) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (v12 <= *(_DWORD *)(v13 + 84)) {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v17 = *(_DWORD *)(v11 + 84);
  }
  if (v17 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = v15 + v14;
  uint64_t v20 = v15 + 7;
  uint64_t v21 = v16 + 8;
  size_t v22 = ((*(void *)(v13 + 64)
        + ((v16
          + 8
          + ((((v15 + 7 + ((v15 + v14 + ((v9 + v14 + 2) & ~v14)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v16)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  if (v18 >= a3)
  {
    int v25 = 0;
    int v26 = a2 - v18;
    if (a2 <= v18)
    {
LABEL_23:
      uint64_t v27 = ~v14;
      uint64_t v28 = ~v16;
      switch(v25)
      {
        case 1:
          *((unsigned char *)a1 + v22) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)((char *)a1 + v22) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_52;
        case 4:
          *(_DWORD *)((char *)a1 + v22) = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            uint64_t v31 = ((unint64_t)a1 + v9 + v14 + 2) & v27;
            if (v12 == v18)
            {
              uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
              v32(v31, a2, v12, v10);
            }
            else
            {
              uint64_t v33 = (void *)((v20 + ((v19 + v31) & v27)) & 0xFFFFFFFFFFFFFFF8);
              if ((v17 & 0x80000000) != 0)
              {
                uint64_t v34 = *(void (**)(unint64_t, uint64_t))(v13 + 56);
                v34((v21 + (((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8)) & v28, a2);
              }
              else if ((a2 & 0x80000000) != 0)
              {
                *uint64_t v33 = a2 ^ 0x80000000;
                v33[1] = 0;
              }
              else
              {
                v33[1] = (a2 - 1);
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((*(_DWORD *)(v13 + 64)
         + ((v16
           + 8
           + ((((v15
               + 7
               + ((v15 + v14 + ((v9 + v14 + 2) & ~v14)) & ~v14)) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)) & ~v16)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      unsigned int v23 = a3 - v18 + 1;
    else {
      unsigned int v23 = 2;
    }
    if (v23 >= 0x10000) {
      int v24 = 4;
    }
    else {
      int v24 = 2;
    }
    if (v23 < 0x100) {
      int v24 = 1;
    }
    if (v23 >= 2) {
      int v25 = v24;
    }
    else {
      int v25 = 0;
    }
    int v26 = a2 - v18;
    if (a2 <= v18) {
      goto LABEL_23;
    }
  }
  if (((*(_DWORD *)(v13 + 64)
       + ((v16
         + 8
         + ((((v15
             + 7
             + ((v15 + v14 + ((v9 + v14 + 2) & ~v14)) & ~v14)) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)) & ~v16)
       + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
    int v29 = v26;
  else {
    int v29 = 1;
  }
  if (v22)
  {
    int v30 = ~v18 + a2;
    bzero(a1, v22);
    *a1 = v30;
  }
  switch(v25)
  {
    case 1:
      *((unsigned char *)a1 + v22) = v29;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v22) = v29;
      break;
    case 3:
LABEL_52:
      __break(1u);
      JUMPOUT(0x1001F3320);
    case 4:
      *(_DWORD *)((char *)a1 + v22) = v29;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for HistoryListItemStack()
{
  return sub_100049E84();
}

uint64_t sub_1001F3360()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001F33A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1001F349C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1001F3594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v95 = a1;
  uint64_t v93 = *(void *)(a1 + 16);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v108 = v2;
  uint64_t v109 = sub_1000A1370(&qword_10094C420);
  uint64_t v110 = v109;
  uint64_t v111 = sub_1000A1370(&qword_10094F558);
  uint64_t v112 = sub_1000A1370(&qword_10094F560);
  swift_getTupleTypeMetadata();
  uint64_t v87 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v98 = type metadata accessor for VStack();
  unint64_t v90 = *(char **)(v98 - 8);
  uint64_t v3 = __chkstk_darwin(v98);
  uint64_t v89 = (char *)v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v88 = (char *)v77 - v5;
  sub_1000A1370(&qword_10094F568);
  swift_getTupleTypeMetadata2();
  uint64_t v6 = type metadata accessor for TupleView();
  uint64_t v7 = swift_getWitnessTable();
  uint64_t v81 = v6;
  uint64_t v80 = v7;
  uint64_t v8 = type metadata accessor for HStack();
  uint64_t v84 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v83 = (char *)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v82 = (uint64_t)v77 - v11;
  uint64_t v108 = v2;
  uint64_t v109 = sub_1000A1370(&qword_10094C420);
  uint64_t v110 = v109;
  uint64_t v111 = sub_1000A1370(&qword_10094F570);
  swift_getTupleTypeMetadata();
  uint64_t v12 = type metadata accessor for TupleView();
  v77[1] = swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for VStack();
  uint64_t v79 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v78 = (char *)v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unsigned int v17 = (char *)v77 - v16;
  uint64_t v18 = type metadata accessor for DynamicTypeSize();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  size_t v22 = (char *)v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  int v24 = (char *)v77 - v23;
  uint64_t v91 = v13;
  uint64_t v92 = v8;
  uint64_t v25 = type metadata accessor for _ConditionalContent();
  uint64_t v85 = *(char **)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  int v30 = (char *)v77 - v29;
  uint64_t v31 = type metadata accessor for _ConditionalContent();
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v34 = (char *)v77 - v33;
  uint64_t v35 = v95;
  LODWORD(v33) = *(unsigned __int8 *)(v99 + *(int *)(v95 + 36));
  uint64_t v96 = v36;
  uint64_t v97 = v32;
  if (v33 == 1)
  {
    uint64_t v87 = v12;
    uint64_t v88 = v17;
    unint64_t v90 = v30;
    uint64_t v89 = v28;
    uint64_t v37 = v34;
    sub_100092088((uint64_t)v24);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v22, enum case for DynamicTypeSize.xxLarge(_:), v18);
    sub_100092F80();
    char v38 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v19 + 8);
    v39(v22, v18);
    uint64_t v40 = ((uint64_t (*)(char *, uint64_t))v39)(v24, v18);
    uint64_t v41 = v92;
    uint64_t v42 = v93;
    uint64_t v43 = v91;
    uint64_t v44 = (uint64_t)v37;
    uint64_t v45 = v25;
    if (v38)
    {
      uint64_t v46 = static HorizontalAlignment.leading.getter();
      __chkstk_darwin(v46);
      uint64_t v47 = *(void *)(v35 + 24);
      v77[-4] = v42;
      v77[-3] = v47;
      v77[-2] = v99;
      uint64_t v48 = (uint64_t)v78;
      VStack.init(alignment:spacing:content:)();
      swift_getWitnessTable();
      uint64_t v49 = (uint64_t)v88;
      sub_10004C704(v48, v43, (uint64_t)v88);
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
      v50(v48, v43);
      sub_10004C704(v49, v43, v48);
      swift_getWitnessTable();
      uint64_t v51 = (uint64_t)v90;
      sub_1001F33A4(v48, v43);
      v50(v48, v43);
      uint64_t v52 = v49;
      uint64_t v53 = v43;
    }
    else
    {
      __chkstk_darwin(v40);
      uint64_t v63 = *(void *)(v35 + 24);
      v77[-4] = v42;
      v77[-3] = v63;
      v77[-2] = v99;
      static VerticalAlignment.center.getter();
      uint64_t v64 = (uint64_t)v83;
      HStack.init(alignment:spacing:content:)();
      swift_getWitnessTable();
      uint64_t v65 = v82;
      sub_10004C704(v64, v41, v82);
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
      v50(v64, v41);
      sub_10004C704(v65, v41, v64);
      swift_getWitnessTable();
      uint64_t v51 = (uint64_t)v90;
      sub_1001F349C(v64, v43, v41);
      v50(v64, v41);
      uint64_t v52 = v65;
      uint64_t v53 = v41;
    }
    v50(v52, v53);
    uint64_t v66 = swift_getWitnessTable();
    uint64_t v67 = swift_getWitnessTable();
    uint64_t v100 = v66;
    uint64_t v101 = v67;
    swift_getWitnessTable();
    uint64_t v68 = (uint64_t)v89;
    sub_10004C704(v51, v45, (uint64_t)v89);
    swift_getWitnessTable();
    sub_1001F33A4(v68, v45);
    long long v69 = (void (*)(uint64_t, uint64_t))*((void *)v85 + 1);
    v69(v68, v45);
    v69(v51, v45);
  }
  else
  {
    uint64_t v85 = v34;
    uint64_t v54 = static HorizontalAlignment.leading.getter();
    __chkstk_darwin(v54);
    uint64_t v55 = *(void *)(v35 + 24);
    v77[-4] = v93;
    v77[-3] = v55;
    v77[-2] = v99;
    uint64_t v56 = (uint64_t)v89;
    VStack.init(alignment:spacing:content:)();
    uint64_t v57 = v98;
    swift_getWitnessTable();
    uint64_t v58 = (uint64_t)v88;
    sub_10004C704(v56, v57, (uint64_t)v88);
    uint64_t v59 = (void (*)(uint64_t, uint64_t))*((void *)v90 + 1);
    v59(v56, v57);
    sub_10004C704(v58, v57, v56);
    uint64_t v60 = swift_getWitnessTable();
    uint64_t v61 = swift_getWitnessTable();
    uint64_t v106 = v60;
    uint64_t v107 = v61;
    swift_getWitnessTable();
    uint64_t v62 = (uint64_t)v85;
    sub_1001F349C(v56, v25, v57);
    v59(v56, v57);
    v59(v58, v57);
    uint64_t v44 = v62;
  }
  uint64_t v70 = v94;
  uint64_t v71 = swift_getWitnessTable();
  uint64_t v72 = swift_getWitnessTable();
  uint64_t v104 = v71;
  uint64_t v105 = v72;
  uint64_t v73 = swift_getWitnessTable();
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v102 = v73;
  uint64_t v103 = v74;
  uint64_t v75 = v97;
  swift_getWitnessTable();
  sub_10004C704(v44, v75, v70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 8))(v44, v75);
}

uint64_t sub_1001F41E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = a4;
  uint64_t v56 = a1;
  uint64_t v46 = type metadata accessor for AttributedString();
  uint64_t v58 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v51 = (char *)&v42 - v11;
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v13 = type metadata accessor for HistoryListItemStack();
  uint64_t v44 = v13;
  View.padding(_:)();
  v87[6] = a3;
  v87[7] = &protocol witness table for _PaddingLayout;
  uint64_t v50 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v49 = v10;
  sub_10004C704((uint64_t)v10, v7, (uint64_t)v12);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
  uint64_t v53 = v57 + 8;
  uint64_t v54 = v14;
  v14(v10, v7);
  uint64_t v15 = v56;
  uint64_t v16 = v56 + *(int *)(v13 + 40);
  unsigned int v17 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  v58 += 16;
  uint64_t v43 = v17;
  uint64_t v19 = v45;
  uint64_t v18 = v46;
  v17(v45, v16, v46);
  uint64_t v20 = Text.init(_:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  LOBYTE(v12) = v25 & 1;
  uint64_t v26 = static Alignment.leading.getter();
  sub_1000177EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v122, 0.0, 1, 0.0, 1, v26, v27, v20, v22, (char)v12, v24);
  sub_1000A06C0(v20, v22, (char)v12);
  swift_bridgeObjectRelease();
  long long v94 = v128;
  long long v95 = v129;
  long long v96 = v130;
  long long v90 = v124;
  long long v91 = v125;
  long long v92 = v126;
  long long v93 = v127;
  long long v88 = v122;
  long long v89 = v123;
  v43(v19, v15 + *(int *)(v44 + 44), v18);
  uint64_t v28 = Text.init(_:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  LOBYTE(v18) = v33 & 1;
  uint64_t v34 = static Alignment.leading.getter();
  sub_1000177EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v122, 0.0, 1, 0.0, 1, v34, v35, v28, v30, v18, v32);
  sub_1000A06C0(v28, v30, v18);
  swift_bridgeObjectRelease();
  long long v103 = v128;
  long long v104 = v129;
  long long v105 = v130;
  long long v99 = v124;
  long long v100 = v125;
  long long v101 = v126;
  long long v102 = v127;
  long long v97 = v122;
  long long v98 = v123;
  uint64_t v36 = static VerticalAlignment.center.getter();
  sub_1001F4918(v15, (uint64_t)v106);
  char v109 = 1;
  *(_OWORD *)&v108[71] = v106[4];
  *(_OWORD *)&v108[55] = v106[3];
  *(_OWORD *)&v108[119] = v106[7];
  *(_OWORD *)&v108[135] = v106[8];
  *(_OWORD *)&v108[151] = v107[0];
  *(_OWORD *)&v108[161] = *(_OWORD *)((char *)v107 + 10);
  *(_OWORD *)&v108[87] = v106[5];
  *(_OWORD *)&v108[103] = v106[6];
  *(_OWORD *)&v108[7] = v106[0];
  *(_OWORD *)&v108[23] = v106[1];
  *(_OWORD *)&v108[39] = v106[2];
  long long v118 = *(_OWORD *)&v108[128];
  long long v119 = *(_OWORD *)&v108[144];
  long long v120 = *(_OWORD *)&v108[160];
  char v121 = BYTE9(v107[1]);
  long long v114 = *(_OWORD *)&v108[64];
  long long v115 = *(_OWORD *)&v108[80];
  long long v116 = *(_OWORD *)&v108[96];
  long long v117 = *(_OWORD *)&v108[112];
  long long v110 = *(_OWORD *)v108;
  long long v111 = *(_OWORD *)&v108[16];
  long long v112 = *(_OWORD *)&v108[32];
  long long v113 = *(_OWORD *)&v108[48];
  char v38 = v49;
  uint64_t v37 = v50;
  uint64_t v39 = v51;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v49, v51, v50);
  long long v83 = v93;
  long long v84 = v94;
  long long v85 = v95;
  long long v86 = v96;
  long long v79 = v89;
  long long v80 = v90;
  long long v81 = v91;
  long long v82 = v92;
  long long v75 = v103;
  long long v76 = v104;
  long long v77 = v105;
  long long v78 = v88;
  long long v71 = v99;
  long long v72 = v100;
  long long v73 = v101;
  long long v74 = v102;
  long long v69 = v97;
  long long v70 = v98;
  *(_OWORD *)&v68[129] = v118;
  *(_OWORD *)&v68[145] = v119;
  *(_OWORD *)&v68[161] = v120;
  *(_OWORD *)&v68[65] = v114;
  *(_OWORD *)&v68[81] = v115;
  *(_OWORD *)&v68[97] = v116;
  *(_OWORD *)&v68[113] = v117;
  *(_OWORD *)&v68[1] = v110;
  *(_OWORD *)&v68[17] = v111;
  *(_OWORD *)&v68[33] = v112;
  v87[0] = v38;
  v87[1] = &v78;
  long long v67 = (unint64_t)v36;
  v68[0] = 1;
  v68[177] = v121;
  *(_OWORD *)&v68[49] = v113;
  v87[2] = &v69;
  v87[3] = &v67;
  sub_100008C44((uint64_t)&v88);
  sub_100008C44((uint64_t)&v97);
  sub_1001F6840((uint64_t)v106);
  uint64_t v63 = v37;
  uint64_t v64 = sub_1000AFA94(&qword_10094C420);
  uint64_t v65 = v64;
  uint64_t v66 = sub_1000AFA94(&qword_10094F570);
  uint64_t v59 = WitnessTable;
  unint64_t v60 = sub_1000E20A4();
  unint64_t v61 = v60;
  uint64_t v62 = sub_1000A132C(&qword_10094F578, &qword_10094F570);
  sub_10063ACF0((uint64_t)v87, 4uLL, (uint64_t)&v63);
  sub_1001F6908((uint64_t)v106);
  sub_100019340((uint64_t)&v97);
  sub_100019340((uint64_t)&v88);
  uint64_t v40 = v54;
  v54(v39, v37);
  long long v132 = *(_OWORD *)&v68[144];
  long long v133 = *(_OWORD *)&v68[160];
  __int16 v134 = *(_WORD *)&v68[176];
  long long v128 = *(_OWORD *)&v68[80];
  long long v129 = *(_OWORD *)&v68[96];
  long long v130 = *(_OWORD *)&v68[112];
  long long v131 = *(_OWORD *)&v68[128];
  long long v124 = *(_OWORD *)&v68[16];
  long long v125 = *(_OWORD *)&v68[32];
  long long v126 = *(_OWORD *)&v68[48];
  long long v127 = *(_OWORD *)&v68[64];
  long long v122 = v67;
  long long v123 = *(_OWORD *)v68;
  sub_1001F6964((uint64_t)&v122);
  v135[6] = v75;
  v135[7] = v76;
  v135[8] = v77;
  v135[2] = v71;
  v135[3] = v72;
  v135[4] = v73;
  v135[5] = v74;
  v135[0] = v69;
  v135[1] = v70;
  sub_100019340((uint64_t)v135);
  v136[6] = v84;
  v136[7] = v85;
  v136[8] = v86;
  v136[2] = v80;
  v136[3] = v81;
  v136[4] = v82;
  v136[5] = v83;
  v136[0] = v78;
  v136[1] = v79;
  sub_100019340((uint64_t)v136);
  return v40(v38, v37);
}

uint64_t sub_1001F4918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Font.Leading();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for HistoryListItemStack();
  uint64_t v9 = (uint64_t *)(a1 + v8[12]);
  uint64_t v10 = v9[1];
  uint64_t v45 = *v9;
  uint64_t v46 = v10;
  sub_1000A06D0();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  int v40 = v14;
  uint64_t v41 = v15;
  double v16 = sub_1001F4BE4();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  int v39 = static Edge.Set.all.getter();
  static Font.footnote.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Font.Leading.tight(_:), v4);
  uint64_t v23 = Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t KeyPath = swift_getKeyPath();
  int v25 = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v26 = *(void *)(a1 + v8[13]);
  if (v26 < 1)
  {
    uint64_t v33 = 0;
    uint64_t v32 = 0;
    long long v30 = 0uLL;
    long long v31 = 0uLL;
  }
  else
  {
    uint64_t v27 = (long long *)(a1 + v8[15]);
    long long v28 = *v27;
    long long v37 = v27[1];
    long long v38 = v28;
    unsigned __int8 v29 = static Edge.Set.all.getter();
    long long v31 = v37;
    long long v30 = v38;
    uint64_t v32 = v29;
    uint64_t v33 = v26;
  }
  char v34 = v39;
  char v35 = v40 & 1;
  LOBYTE(v45) = v40 & 1;
  char v44 = 0;
  char v43 = 1;
  BOOL v42 = v26 < 1;
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(unsigned char *)(a2 + 16) = v35;
  *(void *)(a2 + 24) = v41;
  *(unsigned char *)(a2 + 32) = v34;
  *(double *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v20;
  *(void *)(a2 + 64) = v22;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = KeyPath;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v25;
  *(void *)(a2 + 104) = 0;
  *(unsigned char *)(a2 + 112) = 1;
  *(void *)(a2 + 120) = v33;
  *(void *)(a2 + 128) = v32;
  *(_OWORD *)(a2 + 136) = v30;
  *(_OWORD *)(a2 + 152) = v31;
  *(unsigned char *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 169) = v26 < 1;
  sub_1000A1750(v11, v13, v35);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000A06C0(v11, v13, v35);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

double sub_1001F4BE4()
{
  uint64_t v0 = type metadata accessor for DynamicTypeSize();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  sub_100092088((uint64_t)&v10 - v5);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for DynamicTypeSize.xxLarge(_:), v0);
  sub_100092F80();
  char v7 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  double result = 10.0;
  if ((v7 & 1) == 0) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1001F4D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v17 = a3;
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  type metadata accessor for HistoryListItemStack();
  View.padding(_:)();
  v22[2] = a2;
  v22[3] = &protocol witness table for _PaddingLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_10004C704((uint64_t)v8, v4, (uint64_t)v10);
  double v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  uint64_t v12 = static HorizontalAlignment.center.getter();
  sub_1001F5020(v15, (uint64_t)v23);
  v24[384] = 0;
  memcpy(&v24[7], v23, 0x174uLL);
  memcpy(v25, v24, sizeof(v25));
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  v22[0] = v8;
  v21[0] = v12;
  v21[1] = 0;
  LOBYTE(v21[2]) = 0;
  memcpy((char *)&v21[2] + 1, v25, 0x17BuLL);
  v22[1] = v21;
  sub_1001F64C8((uint64_t)v23);
  v20[0] = v4;
  v20[1] = sub_1000AFA94(&qword_10094F568);
  uint64_t v18 = WitnessTable;
  uint64_t v19 = sub_1000A132C(&qword_10094F580, &qword_10094F568);
  sub_10063ACF0((uint64_t)v22, 2uLL, (uint64_t)v20);
  sub_1001F6590((uint64_t)v23);
  uint64_t v13 = (uint64_t (*)(char *, uint64_t))v16;
  v16(v10, v4);
  memcpy(v26, v21, 0x18CuLL);
  sub_1001F6658((uint64_t)v26);
  return v13(v8, v4);
}

uint64_t sub_1001F5020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = static VerticalAlignment.top.getter();
  sub_1001F51E4(a1, (uint64_t)v18);
  uint64_t v4 = v18[0];
  uint64_t v5 = v18[1];
  char v6 = v18[2];
  uint64_t v13 = v18[4];
  char v7 = v18[5];
  uint64_t v11 = v18[3];
  uint64_t v12 = v18[6];
  char v8 = v18[7];
  uint64_t v9 = static VerticalAlignment.bottom.getter();
  sub_1001F5348(a1, (uint64_t)__src);
  v16[272] = 0;
  memcpy(&v16[7], __src, 0x104uLL);
  v17[0] = v9;
  v17[1] = 0;
  LOBYTE(v17[2]) = 0;
  memcpy((char *)&v17[2] + 1, v16, 0x10BuLL);
  char v22 = 0;
  char v21 = v6;
  char v20 = v7;
  char v19 = v8;
  memcpy((char *)v18 + 7, v17, 0x11CuLL);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(unsigned char *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v13;
  *(unsigned char *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = v12;
  *(unsigned char *)(a2 + 80) = v8;
  memcpy((void *)(a2 + 81), v18, 0x123uLL);
  v23[0] = v9;
  v23[1] = 0;
  char v24 = 0;
  memcpy(v25, v16, sizeof(v25));
  sub_1000A1750(v4, v5, v6);
  swift_bridgeObjectRetain();
  sub_1001F6720((uint64_t)v17);
  sub_1001F67B0((uint64_t)v23);
  sub_1000A06C0(v4, v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F51E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HistoryListItemStack();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + *(int *)(v8 + 40), v4);
  uint64_t v9 = Text.init(_:)();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + *(int *)(v8 + 52));
  LOBYTE(v8) = v13 & 1;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = v13 & 1;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v12 & ~(v12 >> 63);
  *(unsigned char *)(a2 + 56) = v12 < 1;
  sub_1000A1750(v9, v10, v13 & 1);
  swift_bridgeObjectRetain();
  sub_1000A06C0(v9, v11, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F5348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = type metadata accessor for Font.Leading();
  uint64_t v49 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v5 = &v47[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v47[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for HistoryListItemStack();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a1 + *(int *)(v10 + 44), v6);
  uint64_t v11 = Text.init(_:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  LOBYTE(v9) = v16 & 1;
  uint64_t v17 = static Alignment.leading.getter();
  sub_1000177EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v78, 0.0, 1, 0.0, 1, v17, v18, v11, v13, (char)v9, v15);
  sub_1000A06C0(v11, v13, (char)v9);
  swift_bridgeObjectRelease();
  long long v67 = v84;
  long long v68 = v85;
  long long v69 = v86;
  long long v63 = v80;
  long long v64 = v81;
  long long v65 = v82;
  long long v66 = v83;
  long long v61 = v78;
  long long v62 = v79;
  char v19 = (void *)(a1 + *(int *)(v10 + 48));
  uint64_t v20 = v19[1];
  *(void *)&long long v78 = *v19;
  *((void *)&v78 + 1) = v20;
  sub_1000A06D0();
  swift_bridgeObjectRetain();
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  uint64_t v50 = v24;
  LOBYTE(v9) = v25 & 1;
  double v26 = sub_1001F4BE4();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  int v48 = static Edge.Set.all.getter();
  static Font.footnote.getter();
  uint64_t v33 = v49;
  uint64_t v34 = v51;
  (*(void (**)(unsigned char *, void, uint64_t))(v49 + 104))(v5, enum case for Font.Leading.tight(_:), v51);
  uint64_t v35 = Font.leading(_:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v5, v34);
  uint64_t KeyPath = swift_getKeyPath();
  int v37 = static HierarchicalShapeStyle.secondary.getter();
  long long v58 = v67;
  long long v59 = v68;
  long long v60 = v69;
  long long v54 = v63;
  long long v55 = v64;
  long long v56 = v65;
  long long v57 = v66;
  long long v52 = v61;
  long long v53 = v62;
  long long v38 = v68;
  v70[6] = v67;
  v70[7] = v68;
  v70[8] = v69;
  long long v39 = v63;
  long long v40 = v64;
  v70[2] = v63;
  long long v70[3] = v64;
  long long v41 = v65;
  long long v42 = v66;
  v70[4] = v65;
  v70[5] = v66;
  long long v44 = v61;
  long long v43 = v62;
  v70[0] = v61;
  v70[1] = v62;
  *(_OWORD *)(a2 + 96) = v67;
  *(_OWORD *)(a2 + 112) = v38;
  *(_OWORD *)(a2 + 128) = v69;
  *(_OWORD *)(a2 + 32) = v39;
  *(_OWORD *)(a2 + 48) = v40;
  *(_OWORD *)(a2 + 64) = v41;
  *(_OWORD *)(a2 + 80) = v42;
  *(_OWORD *)a2 = v44;
  *(_OWORD *)(a2 + 16) = v43;
  char v77 = 1;
  char v75 = (char)v9;
  char v72 = 0;
  *(_DWORD *)(a2 + 153) = *(_DWORD *)v76;
  *(_DWORD *)(a2 + 156) = *(_DWORD *)&v76[3];
  *(_DWORD *)(a2 + 177) = *(_DWORD *)v74;
  *(_DWORD *)(a2 + 180) = *(_DWORD *)&v74[3];
  *(_DWORD *)(a2 + 193) = *(_DWORD *)v73;
  *(_DWORD *)(a2 + 196) = *(_DWORD *)&v73[3];
  int v45 = *(_DWORD *)v71;
  *(_DWORD *)(a2 + 236) = *(_DWORD *)&v71[3];
  *(_DWORD *)(a2 + 233) = v45;
  *(void *)(a2 + 144) = 0;
  *(unsigned char *)(a2 + 152) = 1;
  *(void *)(a2 + 160) = v21;
  *(void *)(a2 + 168) = v23;
  *(unsigned char *)(a2 + 176) = (_BYTE)v9;
  *(void *)(a2 + 184) = v50;
  *(unsigned char *)(a2 + 192) = v48;
  *(double *)(a2 + 200) = v26;
  *(void *)(a2 + 208) = v28;
  *(void *)(a2 + 216) = v30;
  *(void *)(a2 + 224) = v32;
  *(unsigned char *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = KeyPath;
  *(void *)(a2 + 248) = v35;
  *(_DWORD *)(a2 + 256) = v37;
  sub_100008C44((uint64_t)v70);
  sub_1000A1750(v21, v23, (char)v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000A06C0(v21, v23, (char)v9);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  long long v84 = v58;
  long long v85 = v59;
  long long v86 = v60;
  long long v80 = v54;
  long long v81 = v55;
  long long v82 = v56;
  long long v83 = v57;
  long long v78 = v52;
  long long v79 = v53;
  return sub_100019340((uint64_t)&v78);
}

uint64_t sub_1001F5800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v61 = a4;
  uint64_t v7 = type metadata accessor for DynamicTypeSize();
  uint64_t v56 = *(void *)(v7 - 8);
  uint64_t v57 = v7;
  __chkstk_darwin(v7);
  uint64_t v55 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for AttributedString();
  uint64_t v63 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v62 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v16 = (char *)&v48 - v15;
  long long v54 = (char *)&v48 - v15;
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v17 = type metadata accessor for HistoryListItemStack();
  uint64_t v48 = a1;
  sub_1001F6024();
  View.padding(_:)();
  uint64_t v122 = a3;
  long long v123 = &protocol witness table for _PaddingLayout;
  uint64_t v53 = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v52 = v14;
  sub_10004C704((uint64_t)v14, v11, (uint64_t)v16);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v62 + 8);
  uint64_t v59 = v62 + 8;
  long long v60 = v18;
  v18(v14, v11);
  uint64_t v19 = v48;
  uint64_t v20 = v49;
  uint64_t v21 = v48 + *(int *)(v17 + 40);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v63 += 16;
  v22(v10, v21, v49);
  uint64_t v23 = Text.init(_:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  LOBYTE(v11) = v28 & 1;
  uint64_t v29 = static Alignment.leading.getter();
  sub_1000177EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v111, 0.0, 1, 0.0, 1, v29, v30, v23, v25, v11, v27);
  sub_1000A06C0(v23, v25, v11);
  swift_bridgeObjectRelease();
  long long v130 = v117;
  long long v131 = v118;
  long long v132 = v119[0];
  long long v126 = v113;
  long long v127 = v114;
  long long v129 = v116;
  long long v128 = v115;
  long long v125 = v112;
  long long v124 = v111;
  uint64_t v31 = v19 + *(int *)(v17 + 44);
  uint64_t v32 = v19;
  v22(v10, v31, v20);
  uint64_t v33 = Text.init(_:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  LOBYTE(v19) = v38 & 1;
  uint64_t v39 = static Alignment.leading.getter();
  sub_1000177EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v111, 0.0, 1, 0.0, 1, v39, v40, v33, v35, v19, v37);
  sub_1000A06C0(v33, v35, v19);
  swift_bridgeObjectRelease();
  long long v139 = v117;
  long long v140 = v118;
  long long v141 = v119[0];
  long long v135 = v113;
  long long v136 = v114;
  long long v137 = v115;
  long long v138 = v116;
  long long v133 = v111;
  long long v134 = v112;
  uint64_t v41 = v55;
  sub_100092088(v55);
  LODWORD(v33) = sub_100092DA4(v41, 2uLL, 0, 3);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v41, v57);
  LOBYTE(v41) = v33 == 2;
  uint64_t v42 = static VerticalAlignment.bottom.getter();
  sub_1001F6120(v32, (uint64_t)v98);
  *(_OWORD *)&v100[103] = v98[6];
  *(_OWORD *)&v100[87] = v98[5];
  *(_OWORD *)&v100[39] = v98[2];
  *(_OWORD *)&v100[23] = v98[1];
  *(_OWORD *)&v100[119] = v98[7];
  *(_OWORD *)&v100[55] = v98[3];
  char v101 = 1;
  v100[135] = v99;
  *(_OWORD *)&v100[71] = v98[4];
  *(_OWORD *)&v100[7] = v98[0];
  long long v108 = *(_OWORD *)&v100[96];
  long long v109 = *(_OWORD *)&v100[112];
  uint64_t v110 = *(void *)&v100[128];
  long long v105 = *(_OWORD *)&v100[48];
  long long v107 = *(_OWORD *)&v100[80];
  long long v106 = *(_OWORD *)&v100[64];
  long long v103 = *(_OWORD *)&v100[16];
  long long v104 = *(_OWORD *)&v100[32];
  long long v102 = *(_OWORD *)v100;
  long long v44 = v52;
  uint64_t v43 = v53;
  int v45 = v54;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v52, v54, v53);
  long long v94 = v130;
  long long v95 = v131;
  long long v96 = v132;
  long long v90 = v126;
  long long v91 = v127;
  long long v92 = v128;
  long long v93 = v129;
  long long v88 = v124;
  long long v89 = v125;
  long long v85 = v139;
  long long v86 = v140;
  long long v87 = v141;
  long long v81 = v135;
  long long v82 = v136;
  long long v83 = v137;
  long long v84 = v138;
  long long v79 = v133;
  long long v80 = v134;
  *(_OWORD *)((char *)&v75[5] + 1) = v107;
  *(_OWORD *)((char *)&v75[6] + 1) = v108;
  *(_OWORD *)((char *)&v75[7] + 1) = v109;
  *(_OWORD *)((char *)&v75[1] + 1) = v103;
  *(_OWORD *)((char *)&v75[2] + 1) = v104;
  *(_OWORD *)((char *)&v75[3] + 1) = v105;
  *(_OWORD *)((char *)&v75[4] + 1) = v106;
  v97[0] = v44;
  v97[1] = &v88;
  uint64_t v76 = 0;
  char v77 = 0;
  char v78 = v41;
  v97[2] = &v79;
  v97[3] = &v76;
  long long v74 = (unint64_t)v42;
  LOBYTE(v75[0]) = 1;
  *(void *)((char *)&v75[8] + 1) = v110;
  *(_OWORD *)((char *)v75 + 1) = v102;
  v97[4] = &v74;
  sub_100008C44((uint64_t)&v124);
  sub_100008C44((uint64_t)&v133);
  sub_1001F6840((uint64_t)v98);
  uint64_t v69 = v43;
  uint64_t v70 = sub_1000AFA94(&qword_10094C420);
  uint64_t v71 = v70;
  uint64_t v72 = sub_1000AFA94(&qword_10094F558);
  uint64_t v73 = sub_1000AFA94(&qword_10094F560);
  uint64_t v64 = WitnessTable;
  unint64_t v65 = sub_1000E20A4();
  unint64_t v66 = v65;
  unint64_t v67 = sub_1001F689C();
  uint64_t v68 = sub_1000A132C((unint64_t *)&unk_10094F590, &qword_10094F560);
  sub_10063ACF0((uint64_t)v97, 5uLL, (uint64_t)&v69);
  sub_1001F6908((uint64_t)v98);
  sub_100019340((uint64_t)&v133);
  sub_100019340((uint64_t)&v124);
  uint64_t v46 = v60;
  v60(v45, v43);
  long long v117 = v75[5];
  long long v118 = v75[6];
  v119[0] = v75[7];
  *(_OWORD *)((char *)v119 + 9) = *(_OWORD *)((char *)&v75[7] + 9);
  long long v113 = v75[1];
  long long v114 = v75[2];
  long long v115 = v75[3];
  long long v116 = v75[4];
  long long v111 = v74;
  long long v112 = v75[0];
  sub_1001F6964((uint64_t)&v111);
  v120[6] = v85;
  v120[7] = v86;
  v120[8] = v87;
  v120[2] = v81;
  v120[3] = v82;
  v120[5] = v84;
  v120[4] = v83;
  v120[1] = v80;
  v120[0] = v79;
  sub_100019340((uint64_t)v120);
  v121[6] = v94;
  v121[7] = v95;
  v121[8] = v96;
  v121[2] = v90;
  v121[3] = v91;
  v121[5] = v93;
  v121[4] = v92;
  v121[1] = v89;
  v121[0] = v88;
  sub_100019340((uint64_t)v121);
  return v46(v44, v43);
}

double sub_1001F6024()
{
  uint64_t v0 = type metadata accessor for DynamicTypeSize();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100092088((uint64_t)v3);
  char v4 = sub_100092DA4((uint64_t)v3, 2uLL, 0, 3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  double result = -2.0;
  if (!v4) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1001F6120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Font.Leading();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HistoryListItemStack();
  uint64_t v9 = (uint64_t *)(a1 + *(int *)(v8 + 48));
  uint64_t v10 = v9[1];
  uint64_t v37 = *v9;
  uint64_t v38 = v10;
  sub_1000A06D0();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  char v15 = v14 & 1;
  double v16 = sub_1001F63A4();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  HIDWORD(v31) = static Edge.Set.all.getter();
  static Font.footnote.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Font.Leading.tight(_:), v4);
  uint64_t v23 = Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t KeyPath = swift_getKeyPath();
  int v25 = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v26 = *(void *)(a1 + *(int *)(v8 + 52));
  LOBYTE(v37) = v15;
  char v36 = 0;
  char v35 = 0;
  BOOL v34 = v26 < 1;
  uint64_t v27 = v32;
  uint64_t v28 = v33;
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v27;
  *(unsigned char *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v28;
  *(unsigned char *)(a2 + 32) = BYTE4(v31);
  *(double *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v20;
  *(void *)(a2 + 64) = v22;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = KeyPath;
  *(void *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v25;
  *(void *)(a2 + 104) = 0x4020000000000000;
  *(unsigned char *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = v26 & ~(v26 >> 63);
  *(unsigned char *)(a2 + 128) = v26 < 1;
  uint64_t v29 = v27;
  sub_1000A1750(v11, v27, v15);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000A06C0(v11, v29, v15);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

double sub_1001F63A4()
{
  uint64_t v0 = type metadata accessor for DynamicTypeSize();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100092088((uint64_t)v3);
  int v4 = sub_100092DA4((uint64_t)v3, 2uLL, 0, 3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  double result = 0.0;
  if (v4 == 2) {
    return 10.0;
  }
  return result;
}

uint64_t sub_1001F649C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F5800(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1001F64A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F4D50(*(void *)(v1 + 32), *(void *)(v1 + 24), a1);
}

uint64_t sub_1001F64B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F41E8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1001F64C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  char v4 = *(unsigned char *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v6 = *(void *)(a1 + 280);
  char v7 = *(unsigned char *)(a1 + 288);
  sub_1000A1750(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_1000A1750(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_1000A1750(v5, v6, v7);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1001F6590(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  char v4 = *(unsigned char *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v6 = *(void *)(a1 + 280);
  char v7 = *(unsigned char *)(a1 + 288);
  sub_1000A06C0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_1000A06C0(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_1000A06C0(v5, v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1001F6658(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 144);
  char v4 = *(unsigned char *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 296);
  uint64_t v6 = *(void *)(a1 + 304);
  char v7 = *(unsigned char *)(a1 + 312);
  sub_1000A06C0(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_bridgeObjectRelease();
  sub_1000A06C0(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_1000A06C0(v5, v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1001F6720(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 192);
  char v4 = *(unsigned char *)(a1 + 200);
  sub_1000A1750(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_1000A1750(v2, v3, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1001F67B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 192);
  char v4 = *(unsigned char *)(a1 + 200);
  sub_1000A06C0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_1000A06C0(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1001F6840(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001F689C()
{
  unint64_t result = qword_10094F588;
  if (!qword_10094F588)
  {
    sub_1000A1370(&qword_10094F558);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F588);
  }
  return result;
}

uint64_t sub_1001F6908(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001F6964(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001F69C0()
{
  return swift_getWitnessTable();
}

id sub_1001F6CAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingReplyMessageComposerView.Coordinator();
  return [super dealloc];
}

uint64_t type metadata accessor for ActivitySharingReplyMessageComposerView.Coordinator()
{
  return self;
}

uint64_t sub_1001F6D54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  sub_1000AFA94((uint64_t *)&unk_10094F6F0);
  UIViewControllerRepresentableContext.coordinator.getter();
  uint64_t v6 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100633C68)(v2, v4, v5);

  return v6;
}

id sub_1001F6DD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(a1 + 24));
  uint64_t v5 = v4[1];
  uint64_t v13 = *v4;
  uint64_t v14 = v5;
  long long v15 = *((_OWORD *)v4 + 1);
  sub_1000AFA94((uint64_t *)&unk_10094F630);
  Binding.projectedValue.getter();
  uint64_t v6 = v17;
  uint64_t v7 = v18;
  uint64_t v8 = (objc_class *)type metadata accessor for ActivitySharingReplyMessageComposerView.Coordinator();
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  uint64_t v10 = &v9[OBJC_IVAR____TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator__pendingOutgoingReply];
  *(_OWORD *)uint64_t v10 = v16;
  *((void *)v10 + 2) = v6;
  *((void *)v10 + 3) = v7;
  v12.receiver = v9;
  v12.super_class = v8;
  id result = [super init];
  *a2 = result;
  return result;
}

uint64_t sub_1001F6E7C()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t sub_1001F6EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F7E7C(&qword_10094F6E8);

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001F6F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1001F7E7C(&qword_10094F6E8);

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001F6FB8()
{
}

uint64_t sub_1001F6FFC(uint64_t a1)
{
  swift_getObjectType();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  uint64_t v4 = (void *)HKLogActivity;
  os_log_type_t v5 = v3;
  if (os_log_type_enabled(HKLogActivity, v3))
  {
    uint64_t v6 = v4;
    uint64_t v7 = swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = _typeName(_:qualified:)();
    sub_10008F1F4(v8, v9, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    unint64_t v10 = 0xE600000000000000;
    uint64_t v11 = 0x64656C696166;
    unint64_t v12 = 0xE700000000000000;
    uint64_t v13 = 0x6E776F6E6B6E75;
    if (a1 == 1)
    {
      uint64_t v13 = 1953391987;
      unint64_t v12 = 0xE400000000000000;
    }
    if (a1 != 2)
    {
      uint64_t v11 = v13;
      unint64_t v10 = v12;
    }
    if (a1) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 0x656C6C65636E6163;
    }
    if (a1) {
      unint64_t v15 = v10;
    }
    else {
      unint64_t v15 = 0xE900000000000064;
    }
    sub_10008F1F4(v14, v15, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "%s Activity sharing reply message sent with result: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v1
                  + OBJC_IVAR____TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator__pendingOutgoingReply
                  + 8);
  v18[0] = *(void *)(v1
                     + OBJC_IVAR____TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator__pendingOutgoingReply);
  v18[1] = v16;
  long long v19 = *(_OWORD *)(v1
                  + OBJC_IVAR____TtCV10FitnessApp39ActivitySharingReplyMessageComposerView11Coordinator__pendingOutgoingReply
                  + 16);
  sub_1000AFA94((uint64_t *)&unk_10094F630);
  return Binding.wrappedValue.setter();
}

uint64_t *sub_1001F7230(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_1000AFA94((uint64_t *)&unk_10094B790);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (uint64_t *)((char *)a1 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (uint64_t *)((char *)a1 + v12);
    uint64_t v17 = (uint64_t *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v17[3];
    void v16[2] = v17[2];
    v16[3] = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001F73E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

char *sub_1001F74D4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000AFA94((uint64_t *)&unk_10094B790);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = &a1[v10];
  uint64_t v15 = &a2[v10];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = *((void *)v15 + 3);
  *((void *)v14 + 2) = *((void *)v15 + 2);
  *((void *)v14 + 3) = v17;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_1001F7638(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_1000AFA94((uint64_t *)&unk_10094B790);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  swift_retain();
  swift_release();
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_retain();
  swift_release();
  *((void *)v16 + 2) = *((void *)v17 + 2);
  *((void *)v16 + 3) = *((void *)v17 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1001F7840(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_1000AFA94((uint64_t *)&unk_10094B790);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  long long v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)int v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  return a1;
}

char *sub_1001F7978(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_1000AFA94((uint64_t *)&unk_10094B790);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)&a1[v17] = *(void *)v19;
  swift_release();
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_release();
  uint64_t v20 = *((void *)v19 + 3);
  *((void *)v18 + 2) = *((void *)v19 + 2);
  *((void *)v18 + 3) = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001F7B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F7B64);
}

uint64_t sub_1001F7B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000AFA94((uint64_t *)&unk_10094B790);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001F7C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F7C40);
}

uint64_t sub_1001F7C40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000AFA94((uint64_t *)&unk_10094B790);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ActivitySharingReplyMessageComposerView()
{
  uint64_t result = qword_10094F698;
  if (!qword_10094F698) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001F7D50()
{
  sub_1001F7DF0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1001F7DF0()
{
  if (!qword_10094F6A8)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10094F6A8);
    }
  }
}

uint64_t sub_1001F7E48()
{
  return sub_1001F7E7C(&qword_10094F6E0);
}

uint64_t sub_1001F7E7C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ActivitySharingReplyMessageComposerView();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1001F7ED8()
{
  return sub_1001F84CC(type metadata accessor for WorkoutStartLocationAnnotation);
}

uint64_t type metadata accessor for WorkoutStartLocationAnnotation()
{
  return self;
}

id sub_1001F7F2C(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return [super init];
}

id sub_1001F7F70()
{
  return sub_1001F84CC(type metadata accessor for WorkoutEndLocationAnnotation);
}

uint64_t type metadata accessor for WorkoutEndLocationAnnotation()
{
  return self;
}

id sub_1001F8004()
{
  return sub_1001F84CC(type metadata accessor for WorkoutScrubbedLocationAnnotation);
}

uint64_t type metadata accessor for WorkoutScrubbedLocationAnnotation()
{
  return self;
}

id sub_1001F8040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for WorkoutLocationAnnotationView();
  [super initWithAnnotation:a1 reuseIdentifier:v5];

  id v7 = v6;
  [v7 setFrame:CGRectMake(0.0, 0.0, 15.0, 15.0)];
  uint64_t v8 = self;
  id v9 = v7;
  id v10 = [v8 clearColor];
  [v9 setBackgroundColor:v10];

  [v9 setCanShowCallout:0];
  sub_1001F81FC(a1);

  swift_unknownObjectRelease();
  return v9;
}

void sub_1001F81FC(uint64_t a1)
{
  if (!a1) {
    goto LABEL_8;
  }
  type metadata accessor for WorkoutScrubbedLocationAnnotation();
  if (swift_dynamicCastClass())
  {
    id v2 = [self systemBlueColor];
    goto LABEL_9;
  }
  type metadata accessor for WorkoutStartLocationAnnotation();
  if (swift_dynamicCastClass())
  {
    id v2 = (id)HKUIStandardMapGreenColor();
    goto LABEL_9;
  }
  type metadata accessor for WorkoutEndLocationAnnotation();
  if (swift_dynamicCastClass()) {
    id v2 = (id)HKUIStandardMapRedColor();
  }
  else {
LABEL_8:
  }
    id v2 = [self whiteColor];
LABEL_9:
  id v3 = v2;
  [v1 setTintColor:v3];
}

void sub_1001F82D8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  id v9 = UIGraphicsGetCurrentContext();
  if (v9)
  {
    c = v9;
    CGContextSetLineWidth(v9, 2.0);
    id v10 = [v4 tintColor];
    if (v10)
    {
      uint64_t v11 = v10;
      objc_super v12 = (CGColor *)[v10 CGColor];

      CGContextSetFillColorWithColor(c, v12);
      id v13 = [self whiteColor];
      uint64_t v14 = (CGColor *)[v13 CGColor];

      CGContextSetStrokeColorWithColor(c, v14);
      v17.origin.x = a1;
      v17.origin.y = a2;
      v17.size.width = a3;
      v17.size.height = a4;
      CGRect v18 = CGRectInset(v17, 2.0, 2.0);
      CGContextAddEllipseInRect(c, v18);
      CGContextDrawPath(c, kCGPathFillStroke);
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1001F84B4()
{
  return sub_1001F84CC(type metadata accessor for WorkoutLocationAnnotationView);
}

id sub_1001F84CC(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for WorkoutLocationAnnotationView()
{
  return self;
}

uint64_t sub_1001F8528(uint64_t a1)
{
  return sub_1001F8F00(a1, qword_100997778);
}

void *sub_1001F8540(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    id v9 = (void *)a2[2];
    uint64_t v8 = a2[3];
    a1[2] = v9;
    a1[3] = v8;
    id v10 = (void *)a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    objc_super v12 = a2 + 6;
    uint64_t v11 = a2[6];
    swift_retain();
    id v13 = v9;
    swift_retain();
    swift_retain();
    id v14 = v10;
    if (v11)
    {
      uint64_t v15 = a2[7];
      a1[6] = v11;
      a1[7] = v15;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 3) = *v12;
    }
    uint64_t v17 = *(int *)(a3 + 40);
    CGRect v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for PresentationDetent();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = sub_1000AFA94(&qword_10094F7B0);
    *(void *)&v18[*(int *)(v21 + 28)] = *(void *)&v19[*(int *)(v21 + 28)];
  }
  swift_retain();
  return a1;
}

uint64_t sub_1001F8698(uint64_t a1, uint64_t a2)
{
  swift_release();

  swift_release();
  swift_release();

  if (*(void *)(a1 + 48)) {
    swift_release();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for PresentationDetent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_1000AFA94(&qword_10094F7B0);

  return swift_release();
}

void *sub_1001F8758(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v8 = (void *)a2[2];
  uint64_t v7 = a2[3];
  a1[2] = v8;
  a1[3] = v7;
  id v9 = (void *)a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  uint64_t v11 = a2 + 6;
  uint64_t v10 = a2[6];
  swift_retain();
  id v12 = v8;
  swift_retain();
  swift_retain();
  id v13 = v9;
  if (v10)
  {
    uint64_t v14 = a2[7];
    a1[6] = v10;
    a1[7] = v14;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v11;
  }
  uint64_t v15 = *(int *)(a3 + 40);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for PresentationDetent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = sub_1000AFA94(&qword_10094F7B0);
  *(void *)&v16[*(int *)(v19 + 28)] = *(void *)&v17[*(int *)(v19 + 28)];
  swift_retain();
  return a1;
}

void *sub_1001F8864(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  id v9 = (void *)a2[5];
  uint64_t v10 = (void *)a1[5];
  a1[5] = v9;
  id v11 = v9;

  uint64_t v12 = a2[6];
  if (!a1[6])
  {
    if (v12)
    {
      uint64_t v14 = a2[7];
      a1[6] = v12;
      a1[7] = v14;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  if (!v12)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v13 = a2[7];
  a1[6] = v12;
  a1[7] = v13;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v15 = *(int *)(a3 + 40);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for PresentationDetent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = sub_1000AFA94(&qword_10094F7B0);
  *(void *)&v16[*(int *)(v19 + 28)] = *(void *)&v17[*(int *)(v19 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1001F89E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v5;
    *(void *)(a1 + 56) = v6;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PresentationDetent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = sub_1000AFA94(&qword_10094F7B0);
  *(void *)(v8 + *(int *)(v11 + 28)) = *(void *)(v9 + *(int *)(v11 + 28));
  return a1;
}

void *sub_1001F8AA0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v7 = (void *)a1[2];
  a1[2] = a2[2];

  a1[3] = a2[3];
  swift_release();
  a1[4] = a2[4];
  swift_release();
  uint64_t v8 = (void *)a1[5];
  a1[5] = a2[5];

  uint64_t v9 = a2[6];
  if (!a1[6])
  {
    if (v9)
    {
      uint64_t v11 = a2[7];
      a1[6] = v9;
      a1[7] = v11;
      goto LABEL_8;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v10 = a2[7];
  a1[6] = v9;
  a1[7] = v10;
  swift_release();
LABEL_8:
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for PresentationDetent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = sub_1000AFA94(&qword_10094F7B0);
  *(void *)&v13[*(int *)(v16 + 28)] = *(void *)&v14[*(int *)(v16 + 28)];
  swift_release();
  return a1;
}

uint64_t sub_1001F8BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F8BF4);
}

uint64_t sub_1001F8BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000AFA94(&qword_10094F7B0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001F8CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F8CBC);
}

uint64_t sub_1001F8CBC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000AFA94(&qword_10094F7B0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MapHostingMirrorView()
{
  uint64_t result = qword_10094F810;
  if (!qword_10094F810) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001F8DB4()
{
  sub_1001F8E74();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1001F8E74()
{
  if (!qword_10094F820)
  {
    type metadata accessor for PresentationDetent();
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10094F820);
    }
  }
}

uint64_t sub_1001F8ECC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001F8EE8(uint64_t a1)
{
  return sub_1001F8F00(a1, qword_100997790);
}

uint64_t sub_1001F8F00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for PresentationDetent();
  sub_1000258C4(v3, a2);
  sub_1000876DC(v3, (uint64_t)a2);
  return static PresentationDetent.fraction(_:)();
}

uint64_t sub_1001F8F58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for MapHostingMirrorView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = type metadata accessor for BreadcrumbMapView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  uint64_t v31 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_1000AFA94(&qword_10094F868);
  uint64_t v9 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  MetricsPublisher.locationPositionPublisher.getter();
  swift_release();
  BreadcrumbMapView.init(locationPositionPublisher:)();
  LOBYTE(v34) = 1;
  static Binding.constant(_:)();
  v28[0] = v37;
  v28[1] = v36;
  int v29 = v38;
  sub_1001FA8E4(v1, (uint64_t)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MapHostingMirrorView);
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = swift_allocObject();
  sub_1001FA530((uint64_t)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  sub_1000AFA94(&qword_10094F870);
  sub_1001FA834(&qword_10094F878, (void (*)(uint64_t))&type metadata accessor for BreadcrumbMapView);
  uint64_t v14 = sub_1000A1370(&qword_10094F880);
  uint64_t v15 = sub_1000A1370(&qword_10094F888);
  uint64_t v16 = sub_1000A1370(&qword_10094F890);
  uint64_t v17 = sub_1000A1370(&qword_10094F898);
  unint64_t v18 = sub_1001FA604();
  uint64_t v34 = v17;
  unint64_t v35 = v18;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v34 = v16;
  unint64_t v35 = OpaqueTypeConformance2;
  uint64_t v20 = swift_getOpaqueTypeConformance2();
  uint64_t v34 = v15;
  unint64_t v35 = v20;
  uint64_t v21 = swift_getOpaqueTypeConformance2();
  uint64_t v34 = v14;
  unint64_t v35 = v21;
  swift_getOpaqueTypeConformance2();
  uint64_t v22 = v30;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v22);
  uint64_t v23 = static SafeAreaRegions.all.getter();
  LOBYTE(v15) = static Edge.Set.all.getter();
  uint64_t v25 = v32;
  uint64_t v24 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v33, v11, v32);
  uint64_t v26 = v24 + *(int *)(sub_1000AFA94(&qword_10094F8A8) + 36);
  *(void *)uint64_t v26 = v23;
  *(unsigned char *)(v26 + 8) = v15;
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v25);
}

uint64_t sub_1001F93C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v3 = type metadata accessor for PresentationContentInteraction();
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  __chkstk_darwin(v3);
  uint64_t v64 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PresentationDetent();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PresentationBackgroundInteraction();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v63 = v9;
  __chkstk_darwin(v9);
  uint64_t v61 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000AFA94(&qword_10094F8B0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_1000AFA94(&qword_10094F898);
  uint64_t v46 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_1000AFA94(&qword_10094F890);
  uint64_t v49 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_1000AFA94(&qword_10094F888);
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v50 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_1000AFA94(&qword_10094F880);
  uint64_t v57 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v53 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_1000AFA94(&qword_10094F870);
  uint64_t v51 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v48 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a1;
  uint64_t v69 = a1;
  sub_1000AFA94(&qword_10094F8B8);
  sub_1001FA668();
  int v45 = v15;
  NavigationView.init(content:)();
  sub_1000AFA94(&qword_10094F8F0);
  uint64_t v21 = *(void *)(v6 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10074E640;
  unint64_t v24 = v23 + v22;
  if (qword_10094A648 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_1000876DC(v5, (uint64_t)qword_100997778);
  uint64_t v47 = v7;
  uint64_t v26 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
  v26(v24, v25, v5);
  unint64_t v27 = v24 + v21;
  if (qword_10094A650 != -1) {
    swift_once();
  }
  uint64_t v28 = sub_1000876DC(v5, (uint64_t)qword_100997790);
  v26(v27, v28, v5);
  if (*(void *)(v23 + 16)) {
    sub_1002F113C(v23);
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  type metadata accessor for MapHostingMirrorView();
  sub_1000AFA94(&qword_10094F7B0);
  State.projectedValue.getter();
  unint64_t v29 = sub_1001FA604();
  uint64_t v30 = v17;
  uint64_t v31 = v68;
  uint64_t v32 = v45;
  View.presentationDetents(_:selection:)();
  swift_bridgeObjectRelease();
  sub_10008DB18((uint64_t)v13, &qword_10094F8B0);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v31);
  uint64_t v33 = v59;
  State.wrappedValue.getter();
  LOBYTE(v32) = static PresentationDetent.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v5);
  uint64_t v34 = v61;
  if (v32) {
    static PresentationBackgroundInteraction.enabled.getter();
  }
  else {
    static PresentationBackgroundInteraction.disabled.getter();
  }
  uint64_t v70 = v68;
  unint64_t v71 = v29;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v36 = v50;
  uint64_t v37 = v55;
  View.presentationBackgroundInteraction(_:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v63);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v37);
  unsigned __int8 v38 = v64;
  static PresentationContentInteraction.scrolls.getter();
  uint64_t v70 = v37;
  unint64_t v71 = OpaqueTypeConformance2;
  uint64_t v39 = swift_getOpaqueTypeConformance2();
  uint64_t v40 = v53;
  uint64_t v41 = v58;
  View.presentationContentInteraction(_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v38, v66);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v41);
  uint64_t v70 = v41;
  unint64_t v71 = v39;
  swift_getOpaqueTypeConformance2();
  uint64_t v42 = v48;
  uint64_t v43 = v60;
  View.interactiveDismissDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v43);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 32))(v67, v42, v54);
}

uint64_t sub_1001F9C94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v3 = type metadata accessor for MirrorStatusView();
  __chkstk_darwin(v3 - 8);
  uint64_t v51 = (uint64_t)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_1000AFA94(&qword_10094F8E0);
  uint64_t v5 = __chkstk_darwin(v55);
  uint64_t v50 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v52 = (uint64_t)&v50 - v7;
  uint64_t v53 = sub_1000AFA94(&qword_10094F8F8);
  __chkstk_darwin(v53);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000AFA94(&qword_10094F8B8);
  __chkstk_darwin(v10 - 8);
  uint64_t v56 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for MirrorView();
  __chkstk_darwin(v54);
  uint64_t v13 = (uint64_t *)((char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for PresentationDetent();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MapHostingMirrorView();
  sub_1000AFA94(&qword_10094F7B0);
  State.wrappedValue.getter();
  if (qword_10094A648 != -1) {
    swift_once();
  }
  sub_1000876DC(v14, (uint64_t)qword_100997778);
  char v18 = static PresentationDetent.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v15 + 8);
  v19(v17, v14);
  if (v18)
  {
    uint64_t v20 = (void *)a1[2];
    uint64_t v21 = a1[3];
    uint64_t v23 = (void *)a1[5];
    uint64_t v22 = a1[6];
    uint64_t v24 = a1[7];
    swift_retain();
    id v25 = v20;
    swift_retain();
    swift_retain();
    id v26 = v23;
    sub_10008A670(v22);
    sub_1005F884C((uint64_t)v25, v21, (uint64_t)v26, v22, v24, v13);
    sub_1001FA8E4((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MirrorView);
    swift_storeEnumTagMultiPayload();
    sub_1001FA834(&qword_10095F170, (void (*)(uint64_t))type metadata accessor for MirrorView);
    sub_1001FA788();
    unint64_t v27 = v56;
    _ConditionalContent<>.init(storage:)();
    sub_1001FA94C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for MirrorView);
    uint64_t v28 = sub_1000AFA94(&qword_10094F8D0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
    uint64_t v29 = (uint64_t)v27;
    return sub_1000AEEC8(v29, v57, &qword_10094F8B8);
  }
  State.wrappedValue.getter();
  if (qword_10094A650 != -1) {
    swift_once();
  }
  sub_1000876DC(v14, (uint64_t)qword_100997790);
  char v30 = static PresentationDetent.== infix(_:_:)();
  v19(v17, v14);
  if (v30)
  {
    swift_retain();
    uint64_t v31 = v51;
    sub_100499690(v51);
    unsigned __int8 v32 = static Edge.Set.leading.getter();
    unsigned __int8 v33 = static Edge.Set.trailing.getter();
    char v34 = Edge.Set.init(rawValue:)();
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v32) {
      char v34 = Edge.Set.init(rawValue:)();
    }
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v33) {
      char v34 = Edge.Set.init(rawValue:)();
    }
    if (qword_10094AFD0 != -1) {
      swift_once();
    }
    EdgeInsets.init(_all:)();
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v43 = v50;
    sub_1001FA8E4(v31, v50, (uint64_t (*)(void))type metadata accessor for MirrorStatusView);
    uint64_t v44 = v43 + *(int *)(v55 + 36);
    *(unsigned char *)uint64_t v44 = v34;
    *(void *)(v44 + 8) = v36;
    *(void *)(v44 + 16) = v38;
    *(void *)(v44 + 24) = v40;
    *(void *)(v44 + 32) = v42;
    *(unsigned char *)(v44 + 40) = 0;
    sub_1001FA94C(v31, (uint64_t (*)(void))type metadata accessor for MirrorStatusView);
    uint64_t v45 = v52;
    sub_1000AEEC8(v43, v52, &qword_10094F8E0);
    sub_1001FA87C(v45, (uint64_t)v9);
    swift_storeEnumTagMultiPayload();
    sub_1001FA834(&qword_10095F170, (void (*)(uint64_t))type metadata accessor for MirrorView);
    sub_1001FA788();
    uint64_t v46 = v56;
    _ConditionalContent<>.init(storage:)();
    sub_10008DB18(v45, &qword_10094F8E0);
    uint64_t v47 = sub_1000AFA94(&qword_10094F8D0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 0, 1, v47);
    uint64_t v29 = (uint64_t)v46;
    return sub_1000AEEC8(v29, v57, &qword_10094F8B8);
  }
  uint64_t v49 = sub_1000AFA94(&qword_10094F8D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v57, 1, 1, v49);
}

uint64_t sub_1001FA3F0()
{
  uint64_t v1 = type metadata accessor for MapHostingMirrorView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();

  swift_release();
  swift_release();

  if (*(void *)(v2 + 48)) {
    swift_release();
  }
  uint64_t v3 = v2 + *(int *)(v1 + 40);
  uint64_t v4 = type metadata accessor for PresentationDetent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_1000AFA94(&qword_10094F7B0);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001FA530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MapHostingMirrorView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FA594@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for MapHostingMirrorView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1001F93C8(v4, a1);
}

unint64_t sub_1001FA604()
{
  unint64_t result = qword_10094F8A0;
  if (!qword_10094F8A0)
  {
    sub_1000A1370(&qword_10094F898);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F8A0);
  }
  return result;
}

uint64_t sub_1001FA660@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F9C94(*(void **)(v1 + 16), a1);
}

unint64_t sub_1001FA668()
{
  unint64_t result = qword_10094F8C0;
  if (!qword_10094F8C0)
  {
    sub_1000A1370(&qword_10094F8B8);
    sub_1001FA6DC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F8C0);
  }
  return result;
}

unint64_t sub_1001FA6DC()
{
  unint64_t result = qword_10094F8C8;
  if (!qword_10094F8C8)
  {
    sub_1000A1370(&qword_10094F8D0);
    sub_1001FA834(&qword_10095F170, (void (*)(uint64_t))type metadata accessor for MirrorView);
    sub_1001FA788();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F8C8);
  }
  return result;
}

unint64_t sub_1001FA788()
{
  unint64_t result = qword_10094F8D8;
  if (!qword_10094F8D8)
  {
    sub_1000A1370(&qword_10094F8E0);
    sub_1001FA834(&qword_10094F8E8, (void (*)(uint64_t))type metadata accessor for MirrorStatusView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F8D8);
  }
  return result;
}

uint64_t sub_1001FA834(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FA87C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_10094F8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FA8E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001FA94C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001FA9B0()
{
  unint64_t result = qword_10094F900;
  if (!qword_10094F900)
  {
    sub_1000A1370(&qword_10094F8A8);
    type metadata accessor for BreadcrumbMapView();
    sub_1000A1370(&qword_10094F870);
    sub_1001FA834(&qword_10094F878, (void (*)(uint64_t))&type metadata accessor for BreadcrumbMapView);
    sub_1000A1370(&qword_10094F880);
    sub_1000A1370(&qword_10094F888);
    sub_1000A1370(&qword_10094F890);
    sub_1000A1370(&qword_10094F898);
    sub_1001FA604();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F900);
  }
  return result;
}

uint64_t sub_1001FAB90(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v5 - 8);
  uint64_t v23 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v19 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v19 - v13;
  sub_1000DF004();
  uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  aBlock[4] = v20;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100070394;
  aBlock[3] = &unk_1008BABE8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100075B54();
  sub_1000AFA94((uint64_t *)&unk_1009555E0);
  sub_100075AF8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v23);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v19);
}

uint64_t sub_1001FAED8(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  BOOL v5 = *(void *)result == 0x4A7373656E746966 && v4 == 0xE900000000000072;
  if (v5 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if ((*a2 & 1) == 0) {
      *a2 |= 1uLL;
    }
  }
  if (v3 == 0xD000000000000014 && v4 == 0x80000001007B6C50
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if ((*a2 & 2) == 0) {
      *a2 |= 2uLL;
    }
  }
  if (v3 == 0xD000000000000015 && v4 == 0x80000001007B8E10
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if ((*a2 & 4) == 0) {
      *a2 |= 4uLL;
    }
  }
  if (v3 == 0x6F6C61646E617473 && v4 == 0xEA0000000000656ELL
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if ((*a2 & 8) == 0) {
      *a2 |= 8uLL;
    }
  }
  if (v3 == 0x764173646E657274 && v4 == 0xEF656C62616C6961
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if ((*a2 & 0x10) == 0) {
      *a2 |= 0x10uLL;
    }
  }
  if (v3 == 0x6E4F73646E657274 && v4 == 0xEF64656472616F62
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if ((*a2 & 0x20) == 0) {
      *a2 |= 0x20uLL;
    }
  }
  if (v3 == 0x6168636C65656877 && v4 == 0xEA00000000007269
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if ((*a2 & 0x40) == 0) {
      *a2 |= 0x40uLL;
    }
  }
  if (v3 == 0xD000000000000017 && v4 == 0x80000001007B8E30
    || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if ((*a2 & 0x80) == 0) {
      *a2 |= 0x80uLL;
    }
  }
  return result;
}

uint64_t sub_1001FB214()
{
  return sub_100083B90(*v0);
}

uint64_t sub_1001FB21C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1001FB80C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

id sub_1001FB25C()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_notificationCenterObservers];
  uint64_t v2 = self;
  swift_bridgeObjectRetain();
  id v3 = [v2 defaultCenter];
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5)
  {
    uint64_t v6 = v1 + 32;
    swift_bridgeObjectRetain();
    id v7 = v4;
    do
    {
      sub_10008F484(v6, (uint64_t)v11);
      sub_10007E4EC(v11, v11[3]);
      [v7 removeObserver:_bridgeAnythingToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v11);
      v6 += 32;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  [*(id *)(*(void *)(*(void *)&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_activityDataProvider]+ OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_activitySummaryListener)+ OBJC_IVAR____TtC10FitnessApp29ActivitySummaryChangeListener_observers) removeObject:v0];
  [*(id *)&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_wheelchairCache] removeObserver:v0];
  uint64_t v8 = (int *)&v0[OBJC_IVAR____TtC10FitnessApp26SummaryUserProfileProvider_forceUpdateNotifyToken];
  swift_beginAccess();
  notify_cancel(*v8);
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for SummaryUserProfileProvider();
  return [super dealloc];
}

void sub_1001FB4F4()
{
  static os_log_type_t.default.getter();
  id v0 = HKLogActivity;
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    sub_100073E98();
  }
}

uint64_t sub_1001FB59C(uint64_t result)
{
  *(void *)uint64_t result = 1;
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t getEnumTagSinglePayload for MetricDataProviderTimeScale(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MetricDataProviderTimeScale(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SummaryUserProfile()
{
  return &type metadata for SummaryUserProfile;
}

unint64_t sub_1001FB6AC()
{
  unint64_t result = qword_10094F988;
  if (!qword_10094F988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F988);
  }
  return result;
}

unint64_t sub_1001FB704()
{
  unint64_t result = qword_10094F990;
  if (!qword_10094F990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F990);
  }
  return result;
}

unint64_t sub_1001FB75C()
{
  unint64_t result = qword_10094F998;
  if (!qword_10094F998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F998);
  }
  return result;
}

unint64_t sub_1001FB7B4()
{
  unint64_t result = qword_10094F9A0;
  if (!qword_10094F9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094F9A0);
  }
  return result;
}

uint64_t sub_1001FB80C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001FB844()
{
  os_log_type_t v0 = static os_log_type_t.default.getter();
  uint64_t v1 = (void *)HKLogActivity;
  os_log_type_t v2 = v0;
  if (os_log_type_enabled(HKLogActivity, v0))
  {
    char v3 = v1;
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v2, "[SummaryUserProfileProvider] wheelchair state changed: %{BOOL}d", v4, 8u);
    swift_slowDealloc();
  }
  return sub_100073E98();
}

uint64_t sub_1001FB924()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_1001FB95C()
{
}

void sub_1001FB984()
{
}

void sub_1001FB9AC()
{
}

uint64_t sub_1001FB9C0()
{
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100754580;
  os_log_type_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair);
  id v3 = [v2 topAnchor];
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  id v5 = [v4 bottomAnchor];
  id v6 = [v3 constraintEqualToAnchor:v5 constant:17.0];

  *(void *)(v1 + 32) = v6;
  id v7 = [v2 leadingAnchor];
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  id v9 = [v8 leadingAnchor];
  id v10 = [v7 constraintEqualToAnchor:v9 constant:*(double *)&qword_10094F9C0];

  *(void *)(v1 + 40) = v10;
  id v11 = [v2 bottomAnchor];
  id v12 = [v8 bottomAnchor];
  id v13 = [v11 constraintLessThanOrEqualToAnchor:v12 constant:-*(double *)&qword_10094F9C8];

  *(void *)(v1 + 48) = v13;
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair);
  id v15 = [v14 topAnchor];
  id v16 = [v4 bottomAnchor];
  id v17 = [v15 constraintEqualToAnchor:v16 constant:17.0];

  *(void *)(v1 + 56) = v17;
  id v18 = [v14 leadingAnchor];
  id v19 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView), "leadingAnchor"));
  id v20 = [v18 constraintEqualToAnchor:v19];

  *(void *)(v1 + 64) = v20;
  id v21 = [v14 bottomAnchor];
  id v22 = [v8 bottomAnchor];
  id v23 = [v21 constraintLessThanOrEqualToAnchor:v22 constant:-*(double *)&qword_10094F9C8];

  *(void *)(v1 + 72) = v23;
  id v24 = [v14 trailingAnchor];
  id v25 = [v8 trailingAnchor];
  id v26 = [v24 constraintEqualToAnchor:v25 constant:-*(double *)&qword_10094F9C0];

  *(void *)(v1 + 80) = v26;
  specialized Array._endMutation()();
  return v1;
}

unint64_t sub_1001FBD3C()
{
  unint64_t v1 = sub_1001FB9C0();
  os_log_type_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  id v3 = [v2 topAnchor];
  id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView), "bottomAnchor"));
  id v5 = [v3 constraintGreaterThanOrEqualToAnchor:v4 constant:9.0];

  id v6 = [v2 topAnchor];
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView), "bottomAnchor"));
  id v8 = [v6 constraintGreaterThanOrEqualToAnchor:v7 constant:9.0];

  id v9 = [v2 leadingAnchor];
  id v10 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  id v11 = [v10 leadingAnchor];
  id v12 = [v9 constraintEqualToAnchor:v11];

  id v13 = [v2 heightAnchor];
  id v14 = [v13 constraintEqualToConstant:2.0];

  id v15 = [v2 trailingAnchor];
  id v16 = [v10 trailingAnchor];
  id v17 = [v15 constraintEqualToAnchor:v16];

  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    BOOL v26 = __OFADD__(v25, 5);
    uint64_t v19 = v25 + 5;
    if (!v26)
    {
LABEL_3:
      sub_1005708D8(v19);
      specialized Array._endMutation()();
      id v5 = v5;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v18 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v19 = v18 + 5;
    if (!__OFADD__(v18, 5)) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_16:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_4:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v20 = v8;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v21 = v12;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v22 = v14;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v23 = v17;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_bridgeObjectRelease();

  return v1;
}

uint64_t sub_1001FC19C()
{
  uint64_t v53 = sub_1001FB9C0();
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100754590;
  os_log_type_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView);
  id v3 = [v2 topAnchor];
  id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair), "bottomAnchor"));
  id v5 = [v3 constraintEqualToAnchor:v4 constant:-3.0];

  *(void *)(inited + 32) = v5;
  id v6 = [v2 leadingAnchor];
  id v7 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  id v8 = [v7 leadingAnchor];
  id v9 = [v6 constraintEqualToAnchor:v8];

  *(void *)(inited + 40) = v9;
  id v10 = [v2 heightAnchor];
  id v11 = [v10 constraintEqualToConstant:0.5];

  *(void *)(inited + 48) = v11;
  id v12 = [v2 trailingAnchor];
  id v13 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView);
  id v14 = [v13 leadingAnchor];
  id v15 = [v12 constraintEqualToAnchor:v14 constant:-20.0];

  *(void *)(inited + 56) = v15;
  id v16 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView);
  id v17 = [v16 topAnchor];
  id v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair), "bottomAnchor"));
  id v19 = [v17 constraintEqualToAnchor:v18 constant:-3.0];

  *(void *)(inited + 64) = v19;
  id v20 = [v16 leadingAnchor];
  id v21 = [v7 leadingAnchor];
  id v22 = [v20 constraintEqualToAnchor:v21];

  *(void *)(inited + 72) = v22;
  id v23 = [v16 heightAnchor];
  id v24 = [v23 constraintEqualToConstant:0.5];

  *(void *)(inited + 80) = v24;
  id v25 = [v16 trailingAnchor];
  id v26 = [v13 leadingAnchor];
  id v27 = [v25 constraintEqualToAnchor:v26 constant:-20.0];

  *(void *)(inited + 88) = v27;
  uint64_t v28 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  id v29 = [v28 topAnchor];
  id v30 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair), "bottomAnchor"));
  id v31 = [v29 constraintEqualToAnchor:v30 constant:-3.0];

  *(void *)(inited + 96) = v31;
  id v32 = [v28 leadingAnchor];
  id v33 = [v7 leadingAnchor];
  id v34 = [v32 constraintEqualToAnchor:v33];

  *(void *)(inited + 104) = v34;
  id v35 = [v28 heightAnchor];
  id v36 = [v35 constraintEqualToConstant:0.5];

  *(void *)(inited + 112) = v36;
  id v37 = [v28 trailingAnchor];
  id v38 = [v13 leadingAnchor];
  id v39 = [v37 constraintEqualToAnchor:v38 constant:-20.0];

  *(void *)(inited + 120) = v39;
  uint64_t v40 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView);
  id v41 = [v40 topAnchor];
  id v42 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair), "bottomAnchor"));
  id v43 = [v41 constraintEqualToAnchor:v42 constant:-3.0];

  *(void *)(inited + 128) = v43;
  id v44 = [v40 leadingAnchor];
  id v45 = [v7 leadingAnchor];
  id v46 = [v44 constraintEqualToAnchor:v45];

  *(void *)(inited + 136) = v46;
  id v47 = [v40 heightAnchor];
  id v48 = [v47 constraintEqualToConstant:0.5];

  *(void *)(inited + 144) = v48;
  id v49 = [v40 trailingAnchor];
  id v50 = [v7 trailingAnchor];
  id v51 = [v49 constraintEqualToAnchor:v50];

  *(void *)(inited + 152) = v51;
  specialized Array._endMutation()();
  sub_1001E4080(inited);
  return v53;
}

uint64_t sub_1001FC814()
{
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100752640;
  os_log_type_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView);
  id v3 = [v2 topAnchor];
  id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair), "bottomAnchor"));
  id v5 = [v3 constraintEqualToAnchor:v4 constant:-3.0];

  *(void *)(v1 + 32) = v5;
  id v6 = [v2 leadingAnchor];
  id v7 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  id v8 = [v7 leadingAnchor];
  id v9 = [v6 constraintEqualToAnchor:v8];

  *(void *)(v1 + 40) = v9;
  id v10 = [v2 heightAnchor];
  id v11 = [v10 constraintEqualToConstant:0.5];

  *(void *)(v1 + 48) = v11;
  id v12 = [v2 trailingAnchor];
  id v13 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView);
  id v14 = [v13 leadingAnchor];
  id v15 = [v12 constraintEqualToAnchor:v14 constant:-20.0];

  *(void *)(v1 + 56) = v15;
  id v16 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView);
  id v17 = [v16 topAnchor];
  id v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair), "bottomAnchor"));
  id v19 = [v17 constraintEqualToAnchor:v18 constant:-3.0];

  *(void *)(v1 + 64) = v19;
  id v20 = [v16 leadingAnchor];
  id v21 = [v7 leadingAnchor];
  id v22 = [v20 constraintEqualToAnchor:v21];

  *(void *)(v1 + 72) = v22;
  id v23 = [v16 heightAnchor];
  id v24 = [v23 constraintEqualToConstant:0.5];

  *(void *)(v1 + 80) = v24;
  id v25 = [v16 trailingAnchor];
  id v26 = [v13 leadingAnchor];
  id v27 = [v25 constraintEqualToAnchor:v26 constant:-20.0];

  *(void *)(v1 + 88) = v27;
  specialized Array._endMutation()();
  return v1;
}

id sub_1001FCB94()
{
  id result = [self preferredFontForTextStyle:UIFontTextStyleCallout];
  qword_10094F9B0 = (uint64_t)result;
  return result;
}

char *sub_1001FCBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_formattingManager] = 0;
  uint64_t v4 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView;
  id v5 = objc_allocWithZone((Class)UIView);
  id v6 = v3;
  id v7 = [v5 initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v3[v4] = v7;
  BOOL v144 = (objc_class *)type metadata accessor for DayViewTitleAndValueLabelPair();
  id v8 = [objc_allocWithZone(v144) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v9 = self;
  id v10 = [v9 mainBundle];
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 localizedStringForKey:v11 value:0 table:0];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  id v16 = (uint64_t *)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *id v16 = v13;
  v16[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  id v18 = *(void **)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v16[1])
  {
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  [v18 setText:v19];
  swift_bridgeObjectRelease();

  if (qword_10094A658 != -1) {
    swift_once();
  }
  [*(id *)&v8[v17] setFont:qword_10094F9B0];
  id v20 = sub_10020042C();
  [*(id *)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v20];

  id v21 = sub_10020042C();
  if (FIUICurrentLanguageRequiresTallScript()) {
    double v22 = 23.0;
  }
  else {
    double v22 = 20.0;
  }
  uint64_t v23 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair;
  [v21 _scaledValueForValue:v22];
  double v25 = v24;

  sub_1002764C4(v25);
  *(void *)&v8[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v8 setNeedsLayout];
  [v8 invalidateIntrinsicContentSize];
  [v8 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v23] = v8;
  id v26 = [objc_allocWithZone(v144) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v27 = [v9 mainBundle];
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 localizedStringForKey:v28 value:0 table:0];

  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  id v33 = (uint64_t *)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *id v33 = v30;
  v33[1] = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  id v35 = *(void **)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v33[1])
  {
    swift_bridgeObjectRetain();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v36 = 0;
  }
  [v35 setText:v36];
  swift_bridgeObjectRelease();

  [*(id *)&v26[v34] setFont:qword_10094F9B0];
  id v37 = sub_10020042C();
  [*(id *)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v37];

  id v38 = sub_10020042C();
  if (FIUICurrentLanguageRequiresTallScript()) {
    double v39 = 23.0;
  }
  else {
    double v39 = 20.0;
  }
  uint64_t v40 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair;
  [v38 _scaledValueForValue:v39];
  double v42 = v41;

  sub_1002764C4(v42);
  *(void *)&v26[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v26 setNeedsLayout];
  [v26 invalidateIntrinsicContentSize];
  [v26 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v40] = v26;
  id v43 = [(char *)[objc_allocWithZone(v144) initWithFrame:0.0, 0.0, 0.0, 0.0]];
  id v44 = [v9 mainBundle];
  NSString v45 = String._bridgeToObjectiveC()();
  id v46 = [v44 localizedStringForKey:v45 value:0 table:0];

  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v48;

  id v50 = (uint64_t *)&v43[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *id v50 = v47;
  v50[1] = v49;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  uint64_t v52 = *(void **)&v43[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v50[1])
  {
    swift_bridgeObjectRetain();
    NSString v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v53 = 0;
  }
  [v52 setText:v53];
  swift_bridgeObjectRelease();

  [*(id *)&v43[v51] setFont:qword_10094F9B0];
  id v54 = sub_10020042C();
  [*(id *)&v43[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v54];

  id v55 = sub_10020042C();
  if (FIUICurrentLanguageRequiresTallScript()) {
    double v56 = 23.0;
  }
  else {
    double v56 = 20.0;
  }
  uint64_t v57 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair;
  [v55 _scaledValueForValue:v56];
  double v59 = v58;

  sub_1002764C4(v59);
  *(void *)&v43[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v43 setNeedsLayout];
  [v43 invalidateIntrinsicContentSize];
  [v43 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v57] = v43;
  uint64_t v60 = [(char *)objc_allocWithZone(v144) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v61 = [v9 mainBundle];
  NSString v62 = String._bridgeToObjectiveC()();
  id v63 = [v61 localizedStringForKey:v62 value:0 table:0];

  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v65;

  uint64_t v67 = (uint64_t *)&v60[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *uint64_t v67 = v64;
  v67[1] = v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v68 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  uint64_t v69 = *(void **)&v60[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v67[1])
  {
    swift_bridgeObjectRetain();
    NSString v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v70 = 0;
  }
  [v69 setText:v70];
  swift_bridgeObjectRelease();

  [*(id *)&v60[v68] setFont:qword_10094F9B0];
  id v71 = sub_10020042C();
  uint64_t v72 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  [*(id *)&v60[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v71];

  uint64_t v73 = self;
  id v74 = [v73 systemGrayColor];
  uint64_t v75 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  uint64_t v76 = *(void **)&v60[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(void *)&v60[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v74;
  id v77 = v74;

  [*(id *)&v60[v72] setTextColor:*(void *)&v60[v75]];
  id v78 = sub_10020042C();
  if (FIUICurrentLanguageRequiresTallScript()) {
    double v79 = 23.0;
  }
  else {
    double v79 = 20.0;
  }
  uint64_t v80 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair;
  [v78 _scaledValueForValue:v79];
  double v82 = v81;

  sub_1002764C4(v82);
  *(void *)&v60[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v60 setNeedsLayout];
  [v60 invalidateIntrinsicContentSize];
  [v60 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v80] = v60;
  long long v83 = (char *)[objc_allocWithZone(v144) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v84 = [v9 mainBundle];
  NSString v85 = String._bridgeToObjectiveC()();
  id v86 = [v84 localizedStringForKey:v85 value:0 table:0];

  uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v89 = v88;

  long long v90 = (uint64_t *)&v83[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *long long v90 = v87;
  v90[1] = v89;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v91 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  long long v92 = *(void **)&v83[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v90[1])
  {
    swift_bridgeObjectRetain();
    NSString v93 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v93 = 0;
  }
  [v92 setText:v93];
  swift_bridgeObjectRelease();

  [*(id *)&v83[v91] setFont:qword_10094F9B0];
  id v94 = sub_10020042C();
  uint64_t v95 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  [*(id *)&v83[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v94];

  id v96 = [v73 systemGrayColor];
  uint64_t v97 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  long long v98 = *(void **)&v83[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(void *)&v83[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v96;
  id v99 = v96;

  [*(id *)&v83[v95] setTextColor:*(void *)&v83[v97]];
  id v100 = sub_10020042C();
  int v101 = FIUICurrentLanguageRequiresTallScript();
  double v102 = 20.0;
  if (v101) {
    double v102 = 23.0;
  }
  uint64_t v103 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair;
  [v100 _scaledValueForValue:v102];
  double v105 = v104;

  sub_1002764C4(v105);
  *(void *)&v83[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v83 setNeedsLayout];
  [v83 invalidateIntrinsicContentSize];
  [v83 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v103] = v83;
  uint64_t v106 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView;
  id v107 = [objc_allocWithZone((Class)UIStackView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v107 setAxis:1];
  [v107 setDistribution:3];
  [v107 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v106] = v107;
  uint64_t v108 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView;
  id v109 = [self activityRingGroupForRingType:3];
  id v110 = [v109 forCompanion];

  id v111 = [objc_allocWithZone((Class)ARUIRingsView) initWithRingGroup:v110];
  long long v112 = (void *)ARUIRingsView.withRingGroupDiameter(_:)();

  long long v113 = (void *)ARUIRingsView.withRingGroupThickness(_:)();
  long long v114 = (void *)ARUIRingsView.withRingGroupInterspacing(_:)();

  id v115 = [v73 clearColor];
  [v114 setBackgroundColor:v115];

  long long v116 = (void *)ARUIRingsView.nilRings(animated:)();
  [v116 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v108] = v116;
  uint64_t v117 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView;
  id v118 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  sub_10007E2D8(0, (unint64_t *)&qword_10095BF80);
  Class isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  [v118 setBackgroundColor:isa];

  [v118 setHidden:1];
  [v118 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v117] = v118;
  uint64_t v120 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView;
  id v121 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  Class v122 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  [v121 setBackgroundColor:v122];

  [v121 setHidden:1];
  [v121 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v120] = v121;
  uint64_t v123 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView;
  id v124 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v125 = [v73 blackColor];
  [v124 setBackgroundColor:v125];

  [v124 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v123] = v124;
  uint64_t v126 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView;
  id v127 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  Class v128 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  [v127 setBackgroundColor:v128];

  [v127 setHidden:1];
  [v127 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v6[v126] = v127;
  v6[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_currentDisplayStyle] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints] = _swiftEmptyArrayStorage;

  if (a3)
  {
    NSString v129 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v129 = 0;
  }
  v145.receiver = v6;
  v145.super_class = (Class)type metadata accessor for TodayActivityTile();
  long long v130 = (char *)[super initWithStyle:a1 reuseIdentifier:v129];

  uint64_t v131 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView;
  long long v132 = *(void **)&v130[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView];
  long long v133 = v130;
  id v134 = v132;
  id v135 = sub_10049E184();
  [v134 setBackgroundColor:v135];

  id v136 = [*(id *)&v130[v131] layer];
  [v136 setCornerRadius:sub_10049E1B0()];

  long long v137 = *(void **)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView];
  [v137 addArrangedSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair]];
  [v137 addArrangedSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair]];
  [v137 addArrangedSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair]];
  long long v138 = *(void **)&v130[v131];
  [v138 addSubview:v137];
  [v138 addSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView]];
  [v138 addSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView]];
  [v138 addSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView]];
  [v138 addSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView]];
  [v138 addSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView]];
  [v138 addSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair]];
  [v138 addSubview:*(void *)&v133[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair]];
  id v139 = [v133 contentView];
  [v139 addSubview:v138];

  LOBYTE(v138) = sub_10020028C();
  sub_1001FDDD8((char)v138);
  sub_1001FF7A4((char)v138);

  return v133;
}

void sub_1001FDDD8(char a1)
{
  os_log_type_t v2 = v1;
  swift_getObjectType();
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1007545A0;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView];
  id v5 = [v4 topAnchor];
  id v6 = [v1 contentView];
  id v7 = [v6 topAnchor];

  id v8 = [v5 constraintEqualToAnchor:v7 constant:sub_10049E1C0()];
  *(void *)(v3 + 32) = v8;
  id v9 = [v4 leadingAnchor];
  id v10 = [v1 contentView];
  id v11 = [v10 leadingAnchor];

  sub_10049E1C0();
  id v13 = [v9 constraintEqualToAnchor:v11 constant:v12];

  *(void *)(v3 + 40) = v13;
  id v14 = [v4 trailingAnchor];
  id v15 = [v1 contentView];
  id v16 = [v15 trailingAnchor];

  sub_10049E1C0();
  id v18 = [v14 constraintEqualToAnchor:v16 constant:-v17];

  *(void *)(v3 + 48) = v18;
  id v19 = [v4 bottomAnchor];
  id v20 = [v1 contentView];
  id v21 = [v20 bottomAnchor];

  sub_10049E1C0();
  id v23 = [v19 constraintEqualToAnchor:v21 constant:-v22];

  *(void *)(v3 + 56) = v23;
  double v24 = *(void **)&v2[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView];
  id v25 = [v24 topAnchor];
  id v26 = [v4 topAnchor];
  id v27 = [v25 constraintGreaterThanOrEqualToAnchor:v26 constant:*(double *)&qword_10094F9B8];

  *(void *)(v3 + 64) = v27;
  id v28 = [v24 leadingAnchor];
  id v29 = [v4 leadingAnchor];
  id v30 = [v28 constraintEqualToAnchor:v29 constant:*(double *)&qword_10094F9C0];

  *(void *)(v3 + 72) = v30;
  id v31 = [v24 centerYAnchor];
  uint64_t v32 = *(void **)&v2[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView];
  id v33 = [v32 centerYAnchor];
  id v34 = [v31 constraintEqualToAnchor:v33];

  *(void *)(v3 + 80) = v34;
  id v35 = [v24 bottomAnchor];
  id v36 = [v4 bottomAnchor];
  id v37 = [v35 constraintLessThanOrEqualToAnchor:v36 constant:-16.0];

  *(void *)(v3 + 88) = v37;
  id v38 = [v32 topAnchor];
  id v39 = [v4 topAnchor];
  id v40 = [v38 constraintGreaterThanOrEqualToAnchor:v39 constant:*(double *)&qword_10094F9B8];

  *(void *)(v3 + 96) = v40;
  id v41 = [v32 leadingAnchor];
  id v42 = [v24 trailingAnchor];
  id v43 = [v41 constraintEqualToAnchor:v42 constant:*(double *)&qword_10094F9C0];

  *(void *)(v3 + 104) = v43;
  id v44 = [v32 widthAnchor];
  id v45 = [v44 constraintEqualToConstant:138.0];

  *(void *)(v3 + 112) = v45;
  id v46 = [v32 heightAnchor];
  id v47 = [v46 constraintEqualToConstant:138.0];

  *(void *)(v3 + 120) = v47;
  id v48 = [v32 trailingAnchor];
  id v49 = [v4 trailingAnchor];
  id v50 = [v48 constraintEqualToAnchor:v49 constant:-*(double *)&qword_10094F9C0];

  *(void *)(v3 + 128) = v50;
  id v51 = [v32 bottomAnchor];
  id v52 = [v4 bottomAnchor];
  id v53 = [v51 constraintLessThanOrEqualToAnchor:v52 constant:-16.0];

  *(void *)(v3 + 136) = v53;
  specialized Array._endMutation()();
  id v54 = _swiftEmptyArrayStorage;
  switch(a1)
  {
    case 1:
      break;
    case 2:
      id v54 = (void *)sub_1001FC19C();
      break;
    case 3:
      id v54 = (void *)sub_1001FC814();
      break;
    default:
      id v54 = (void *)sub_1001FBD3C();
      break;
  }
  sub_1001E4080((unint64_t)v54);
  *(void *)&v2[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints] = v3;
  swift_bridgeObjectRelease();
  id v55 = self;
  sub_10007E2D8(0, (unint64_t *)&qword_10094C810);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v55 activateConstraints:isa];
}

void sub_1001FE568(void *a1, int a2, char a3, unsigned __int8 a4, char a5)
{
  id v9 = *(void **)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView);
  if (a5 == 2) {
    [*(id *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView) hk_configureWithActivitySummary:a1 animated:1];
  }
  else {
    [*(id *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView) hk_configureWithActivitySummary:a1 isStandaloneFallback:a5 & 1 animated:1 completion:0];
  }
  id v10 = *(void **)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_formattingManager);
  if (v10)
  {
    id v11 = v10;
    if (a1)
    {
      unsigned int v12 = [a1 _isStandalonePhoneSummary];
      if (a3) {
        char v13 = 2;
      }
      else {
        char v13 = 0;
      }
      if (a3) {
        char v14 = 3;
      }
      else {
        char v14 = 1;
      }
      if (v12) {
        char v15 = v14;
      }
      else {
        char v15 = v13;
      }
      sub_1001FF7A4(v15);
      a4 = [a1 paused];
    }
    else
    {
      if (a3) {
        char v19 = 2;
      }
      else {
        char v19 = 0;
      }
      sub_1001FF7A4(v19);
    }
    id v20 = [v9 ringGroup];
    [v20 setIsPaused:a4 & 1];

    unsigned __int8 v96 = a4;
    NSString v93 = v11;
    if (!a1) {
      goto LABEL_28;
    }
    id v21 = a1;
    if ([v21 activityMoveMode] == (id)2)
    {
      if (a4)
      {
        id v22 = 0;
        id v23 = 0;
      }
      else
      {
        id v23 = [v21 appleMoveTime];
        id v22 = [v21 appleMoveTimeGoal];
      }
      uint64_t v25 = *(void *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
      uint64_t v26 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
      id v27 = [*(id *)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) font];
      if (!v27) {
        goto LABEL_62;
      }
      id v28 = v27;
      id v29 = sub_10026597C(v23, v22, v27);

      uint64_t v30 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
      id v31 = *(void **)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
      *(void *)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v29;
      id v32 = v29;
      id v33 = v23;
      id v34 = v32;

      id v35 = *(void **)(v25 + v26);
      [v35 setText:0];
      [v35 setAttributedText:*(void *)(v25 + v30)];

      goto LABEL_35;
    }

    if ((a4 & 1) == 0)
    {
      id v24 = [v21 activeEnergyBurned];
      id v22 = [v21 activeEnergyBurnedGoal];
    }
    else
    {
LABEL_28:
      id v22 = 0;
      id v24 = 0;
    }
    uint64_t v36 = *(void *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
    uint64_t v37 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
    id v38 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v36
                                                                + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
    if (!v38) {
      goto LABEL_59;
    }
    id v39 = v38;
    id v40 = sub_100265C24(v24, v22, v11, v38);

    uint64_t v41 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
    id v42 = *(void **)(v36 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
    *(void *)(v36 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v40;
    id v43 = v40;
    id v33 = v24;
    id v34 = v43;

    id v44 = *(void **)(v36 + v37);
    [v44 setText:0];
    [v44 setAttributedText:*(void *)(v36 + v41)];
LABEL_35:

    if ((a1 == 0) | v96 & 1)
    {
      id v45 = 0;
      id v95 = 0;
    }
    else
    {
      id v95 = [a1 appleExerciseTime];
      id v45 = [a1 appleExerciseTimeGoal];
    }
    uint64_t v46 = *(void *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair);
    uint64_t v47 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
    id v48 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v46
                                                                + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
    if (v48)
    {
      id v49 = v48;
      long long v92 = v45;
      id v50 = sub_10026597C(v95, v45, v48);

      uint64_t v51 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
      id v52 = *(void **)(v46 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
      *(void *)(v46 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v50;
      id v53 = v50;

      id v54 = *(void **)(v46 + v47);
      [v54 setText:0];
      [v54 setAttributedText:*(void *)(v46 + v51)];

      id v55 = 0;
      id v56 = 0;
      if (!((a1 == 0) | v96 & 1))
      {
        id v56 = [a1 appleStandHours];
        id v55 = [a1 appleStandHoursGoal];
      }
      uint64_t v57 = *(void *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
      uint64_t v58 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
      id v59 = [*(id *)(v57 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) font];
      if (v59)
      {
        uint64_t v60 = v59;
        id v61 = sub_100265EEC(v56, v55, v59);

        uint64_t v62 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
        id v63 = *(void **)(v57 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
        *(void *)(v57 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v61;
        id v64 = v61;

        uint64_t v65 = *(void **)(v57 + v58);
        [v65 setText:0];
        [v65 setAttributedText:*(void *)(v57 + v62)];

        sub_1001FEDEC(a1, v96 & 1);
        if (!a1)
        {

LABEL_54:

          return;
        }
        id v66 = a1;
        uint64_t v67 = v66;
        uint64_t v68 = &selRef__pushCount;
        if ((a2 & 1) == 0) {
          uint64_t v68 = &selRef_stepCount;
        }
        id v69 = [v66 *v68];
        NSString v70 = *(char **)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair);
        uint64_t v71 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
        id v72 = [*(id *)&v70[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] font];
        if (v72)
        {
          uint64_t v73 = v72;
          uint64_t v97 = v69;
          uint64_t v74 = sub_10026618C(v69);
          uint64_t v76 = v75;

          id v77 = (uint64_t *)&v70[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelText];
          *id v77 = v74;
          v77[1] = v76;
          swift_bridgeObjectRelease();
          id v78 = *(void **)&v70[v71];
          [v78 setAttributedText:0];
          if (v77[1])
          {
            swift_bridgeObjectRetain();
            NSString v79 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v79 = 0;
          }
          [v78 setText:v79];

          unsigned int v80 = [v67 _isStandalonePhoneSummary];
          double v81 = 1.0;
          if ((v80 & a2) != 0) {
            double v81 = 0.0;
          }
          [v70 setAlpha:v81];
          uint64_t v82 = *(void *)(v5 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair);
          id v83 = [v67 distanceWalkingRunning];
          uint64_t v84 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
          id v85 = [*(id *)(v82 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) font];
          if (v85)
          {
            id v86 = v85;
            id v87 = sub_100266284(v83, v93, v85);

            uint64_t v88 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
            uint64_t v89 = *(void **)(v82 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
            *(void *)(v82 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v87;
            id v90 = v87;

            uint64_t v91 = *(void **)(v82 + v84);
            [v91 setText:0];
            [v91 setAttributedText:*(void *)(v82 + v88)];

            goto LABEL_54;
          }
          goto LABEL_61;
        }
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  static os_log_type_t.error.getter();
  id v16 = (void *)HKLogActivity;
  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1007509E0;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000AA64C();
  *(void *)(v17 + 32) = 0xD000000000000059;
  *(void *)(v17 + 40) = 0x80000001007B9340;
  id v18 = v16;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
}

void sub_1001FEDEC(void *a1, char a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    if ([a1 paused]) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
    sub_10007E2D8(0, (unint64_t *)&qword_10095BF80);
    Class isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 0.0, 0.28631, 1.0).super.isa;
    Class v27 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 0.19608, 0.52941, 1.0).super.isa;
    id v28 = (objc_class *)type metadata accessor for GradientColors();
    id v29 = (char *)objc_allocWithZone(v28);
    *(void *)&v29[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = isa;
    *(void *)&v29[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v27;
    v69.receiver = v29;
    v69.super_class = v28;
    [super init];
    Class v31 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.98039, 0.066667, 0.3098, 1.0).super.isa;
    id v32 = (objc_class *)type metadata accessor for MetricColors();
    id v33 = (char *)objc_allocWithZone(v32);
    *(void *)&v33[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v30;
    *(void *)&v33[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v31;
    v68.receiver = v33;
    v68.super_class = v32;
    id v34 = [(char *)[super init]];
    id v35 = *(id *)&v34[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

    uint64_t v36 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
    uint64_t v37 = *(void **)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
    *(void *)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v35;
    id v38 = v35;

    [*(id *)(v25 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) setTextColor:*(void *)(v25 + v36)];
    uint64_t v39 = *(void *)(v2 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair);
    Class v40 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.6, 1.0, 0.0, 1.0).super.isa;
    Class v41 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.84706, 1.0, 0.0, 1.0).super.isa;
    id v42 = (char *)objc_allocWithZone(v28);
    *(void *)&v42[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v40;
    *(void *)&v42[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v41;
    v67.receiver = v42;
    v67.super_class = v28;
    id v43 = [super init];
    Class v44 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.65068, 1.0, 0.0, 1.0).super.isa;
    id v45 = (char *)objc_allocWithZone(v32);
    *(void *)&v45[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v43;
    *(void *)&v45[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v44;
    v66.receiver = v45;
    v66.super_class = v32;
    uint64_t v46 = (char *)[super init];
    id v47 = *(id *)&v46[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

    uint64_t v48 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
    id v49 = *(void **)(v39 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
    *(void *)(v39 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v47;
    id v50 = v47;

    [*(id *)(v39 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) setTextColor:*(void *)(v39 + v48)];
    uint64_t v51 = *(void *)(v2 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
    Class v52 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
    Class v53 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
    id v54 = (char *)objc_allocWithZone(v28);
    *(void *)&v54[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v52;
    *(void *)&v54[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v53;
    v65.receiver = v54;
    v65.super_class = v28;
    [super init];
    Class v56 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
    uint64_t v57 = (char *)objc_allocWithZone(v32);
    *(void *)&v57[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v55;
    *(void *)&v57[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v56;
    v64.receiver = v57;
    v64.super_class = v32;
    uint64_t v58 = (char *)[super init];
    id v59 = *(id *)&v58[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

    uint64_t v60 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
    id v61 = *(void **)(v51 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
    *(void *)(v51 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v59;
    id v62 = v59;

    [*(id *)(v51 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) setTextColor:*(void *)(v51 + v60)];
    return;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
  uint64_t v5 = self;
  id v6 = [v5 grayColors];
  if (!v6)
  {
    __break(1u);
    goto LABEL_15;
  }
  id v7 = v6;
  id v8 = [v6 nonGradientTextColor];

  if (!v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v9 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  id v10 = *(void **)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
  *(void *)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v8;
  id v11 = v8;

  [*(id *)(v4 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) setTextColor:*(void *)(v4 + v9)];
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair);
  id v13 = [v5 grayColors];
  if (!v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v13;
  id v15 = [v13 nonGradientTextColor];

  if (!v15)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v16 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  uint64_t v17 = *(void **)(v12 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
  *(void *)(v12 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v15;
  id v18 = v15;

  [*(id *)(v12 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) setTextColor:*(void *)(v12 + v16)];
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
  id v20 = [v5 grayColors];
  if (!v20)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v21 = v20;
  id v22 = [v20 nonGradientTextColor];

  if (!v22)
  {
LABEL_19:
    __break(1u);
    return;
  }
  uint64_t v23 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  id v24 = *(void **)(v19 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor);
  *(void *)(v19 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor) = v22;
  id v63 = v22;

  [*(id *)(v19 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel) setTextColor:*(void *)(v19 + v23)];
}

void sub_1001FF420(char a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
  uint64_t v4 = self;
  id v5 = [v4 mainBundle];
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 localizedStringForKey:v6 value:0 table:0];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  swift_bridgeObjectRelease();
  id v11 = (uint64_t *)(v3 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText);
  uint64_t *v11 = v8;
  v11[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void **)(v3 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel);
  if (v11[1])
  {
    swift_bridgeObjectRetain();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v13 = 0;
  }
  [v12 setText:v13];

  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair);
  id v15 = [v4 mainBundle];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 localizedStringForKey:v16 value:0 table:0];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  swift_bridgeObjectRelease();
  id v21 = (uint64_t *)(v14 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText);
  *id v21 = v18;
  v21[1] = v20;
  swift_bridgeObjectRelease();
  id v22 = *(void **)(v14 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel);
  if (v21[1])
  {
    swift_bridgeObjectRetain();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }
  [v22 setText:v23];

  double v24 = 1.0;
  if (a1)
  {
    double v24 = 0.0;
    uint64_t v25 = &selRef_wheelchairSpriteSheet;
  }
  else
  {
    uint64_t v25 = &selRef_defaultSpriteSheet;
  }
  [*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair) setAlpha:v24];
  id v26 = [self *v25];
  Class v27 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView);
  id v28 = [v27 ringGroup];
  [v28 setSpriteSheet:v26];

  id v29 = [v27 ringGroup];
  [v29 playSpriteAnimation];
}

id sub_1001FF7A4(char a1)
{
  id result = (id)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_currentDisplayStyle;
  switch(v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_currentDisplayStyle])
  {
    case 1:
      switch(a1)
      {
        case 1:
          return result;
        case 2:
          sub_1001FFBB4((uint64_t)v1);
          goto LABEL_11;
        case 3:
          goto LABEL_14;
        default:
          goto LABEL_11;
      }
    case 2:
      switch(a1)
      {
        case 1:
          sub_1001FFA94((uint64_t)v1);
          goto LABEL_6;
        case 2:
          return result;
        case 3:
          goto LABEL_6;
        default:
          goto LABEL_13;
      }
    case 3:
      switch(a1)
      {
        case 1:
LABEL_13:
          sub_1001FFA94((uint64_t)v1);
          goto LABEL_15;
        case 2:
          goto LABEL_11;
        case 3:
          return result;
        default:
          sub_1001FFA94((uint64_t)v1);
LABEL_11:
          id v5 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView];
          [v5 removeArrangedSubview:*(void *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair]];
          [v5 removeArrangedSubview:*(void *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair]];
          [v5 addArrangedSubview:*(void *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair]];
          uint64_t v6 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair;
          break;
      }
LABEL_12:
      [v5 addArrangedSubview:*(void *)&v1[v6]];
LABEL_15:
      id v7 = self;
      sub_10007E2D8(0, (unint64_t *)&qword_10094C810);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v7 deactivateConstraints:isa];

      sub_1001FDDD8(a1);
      id result = [v1 invalidateIntrinsicContentSize];
      v1[v4] = a1;
      break;
    default:
      switch(a1)
      {
        case 1:
          goto LABEL_6;
        case 2:
LABEL_14:
          sub_1001FFBB4((uint64_t)v1);
          goto LABEL_15;
        case 3:
          sub_1001FFBB4((uint64_t)v1);
LABEL_6:
          [*(id *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair] removeFromSuperview];
          [*(id *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair] removeFromSuperview];
          id v5 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView];
          [v5 addArrangedSubview:*(void *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair]];
          uint64_t v6 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair;
          goto LABEL_12;
        default:
          return result;
      }
  }
  return result;
}

void sub_1001FFA94(uint64_t a1)
{
  [*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView) setHidden:1];
  [*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView) setHidden:1];
  [*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView) setHidden:1];
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  id v3 = [self blackColor];
  [v2 setBackgroundColor:v3];

  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  id v5 = sub_10049E184();
  [v4 setBackgroundColor:v5];

  qword_10094F9B8 = 0x4034000000000000;
  qword_10094F9C0 = 0x4030000000000000;
  qword_10094F9C8 = 0x4022000000000000;
}

void sub_1001FFBB4(uint64_t a1)
{
  [*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView) setHidden:0];
  [*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView) setHidden:0];
  [*(id *)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView) setHidden:0];
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView);
  sub_10007E2D8(0, (unint64_t *)&qword_10095BF80);
  Class isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  [v2 setBackgroundColor:isa];

  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView);
  id v5 = [self clearColor];
  [v4 setBackgroundColor:v5];

  qword_10094F9B8 = 0;
  qword_10094F9C0 = 0x4010000000000000;
  qword_10094F9C8 = 0;
}

id sub_1001FFCF0()
{
  uint64_t v1 = v0;

  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair);
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(void *)(v2 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = 0;

  id v5 = *(void **)(v2 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  [v5 setText:0];
  [v5 setAttributedText:*(void *)(v2 + v3)];
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair);
  uint64_t v7 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  uint64_t v8 = *(void **)(v6 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(void *)(v6 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = 0;

  uint64_t v9 = *(void **)(v6 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  [v9 setText:0];
  [v9 setAttributedText:*(void *)(v6 + v7)];
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair);
  uint64_t v11 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  uint64_t v12 = *(void **)(v10 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(void *)(v10 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = 0;

  NSString v13 = *(void **)(v10 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  [v13 setText:0];
  [v13 setAttributedText:*(void *)(v10 + v11)];
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair);
  id v15 = (void *)(v14 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelText);
  *id v15 = 0;
  v15[1] = 0;
  swift_bridgeObjectRelease();
  NSString v16 = *(void **)(v14 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  [v16 setAttributedText:0];
  if (v15[1])
  {
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v17 = 0;
  }
  [v16 setText:v17];

  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair);
  uint64_t v19 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
  uint64_t v20 = *(void **)(v18 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
  *(void *)(v18 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = 0;

  id v21 = *(void **)(v18 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel);
  [v21 setText:0];
  uint64_t v22 = *(void *)(v18 + v19);

  return [v21 setAttributedText:v22];
}

id sub_1001FFF20()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TodayActivityTile();
  return [super dealloc];
}

uint64_t type metadata accessor for TodayActivityTile()
{
  return self;
}

uint64_t getEnumTagSinglePayload for TrendsPairedWatchesAltimeterSupport(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TodayActivityTile.DisplayStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *id result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002001E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TodayActivityTile.DisplayStyle()
{
  return &type metadata for TodayActivityTile.DisplayStyle;
}

unint64_t sub_10020021C()
{
  unint64_t result = qword_10094FA70;
  if (!qword_10094FA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FA70);
  }
  return result;
}

unint64_t sub_100200270()
{
  return 0xD000000000000011;
}

unint64_t sub_10020028C()
{
  unint64_t result = (unint64_t)[self sharedBehavior];
  if (result)
  {
    uint64_t v1 = (void *)result;
    int v2 = (char *)[(id)result fitnessMode];

    if ((unint64_t)(v2 - 1) >= 3)
    {
      os_log_type_t v3 = static os_log_type_t.fault.getter();
      unsigned int v4 = (void *)HKLogActivity;
      os_log_type_t v5 = v3;
      unint64_t result = os_log_type_enabled(HKLogActivity, v3);
      if (result)
      {
        unsigned int v6 = v4;
        BOOL v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v8 = swift_slowAlloc();
        *(_DWORD *)BOOL v7 = 136315138;
        sub_10008F1F4(0x53746E6572727563, 0xEE007972616D6D75, &v8);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v5, "%s found unexpected fitness mode; falling back to paired summary",
          v7,
          0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return 0;
      }
    }
    else
    {
      return 0x100u >> (8 * ((_BYTE)v2 - 1));
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10020042C()
{
  id v0 = [self preferredFontDescriptorWithTextStyle:UIFontTextStyleTitle3];
  sub_1000AFA94(&qword_10094FA78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007509E0;
  *(void *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  sub_1000AFA94(&qword_10094FA80);
  uint64_t v2 = swift_initStackObject();
  *(_OWORD *)(v2 + 16) = xmmword_1007509E0;
  *(void *)(v2 + 32) = UIFontWeightTrait;
  *(UIFontWeight *)(v2 + 40) = UIFontWeightMedium;
  id v3 = v0;
  unsigned int v4 = UIFontDescriptorTraitsAttribute;
  os_log_type_t v5 = UIFontWeightTrait;
  unint64_t v6 = sub_100523104(v2);
  *(void *)(inited + 64) = sub_1000AFA94(&qword_10094FA88);
  *(void *)(inited + 40) = v6;
  sub_100522D50(inited);
  type metadata accessor for AttributeName(0);
  sub_100201574();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [v3 fontDescriptorByAddingAttributes:isa];

  id v9 = [v8 fontDescriptorWithDesign:UIFontDescriptorSystemDesignRounded];
  if (v9)
  {
    id v10 = v9;

    id v8 = v10;
  }
  id v11 = [self fontWithDescriptor:v8 size:0.0];

  return v11;
}

void sub_100200610()
{
  uint64_t v1 = v0;
  *(void *)&v0[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_formattingManager] = 0;
  uint64_t v2 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_insetContentView;
  id v3 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v2] = v3;
  unsigned int v4 = (objc_class *)type metadata accessor for DayViewTitleAndValueLabelPair();
  os_log_type_t v5 = [(char *)objc_allocWithZone(v4) initWithFrame:0.0, 0.0, 0.0, 0.0];
  unint64_t v6 = self;
  id v7 = [v6 mainBundle];
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 localizedStringForKey:v8 value:0 table:0];

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  NSString v13 = (uint64_t *)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *NSString v13 = v10;
  v13[1] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  id v15 = *(void **)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v13[1])
  {
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v16 = 0;
  }
  [v15 setText:v16];
  swift_bridgeObjectRelease();

  if (qword_10094A658 != -1) {
    swift_once();
  }
  [*(id *)&v5[v14] setFont:qword_10094F9B0];
  id v17 = sub_10020042C();
  [*(id *)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v17];

  id v18 = sub_10020042C();
  if (FIUICurrentLanguageRequiresTallScript()) {
    double v19 = 23.0;
  }
  else {
    double v19 = 20.0;
  }
  uint64_t v20 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_moveLabelPair;
  [v18 _scaledValueForValue:v19];
  double v22 = v21;

  sub_1002764C4(v22);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v5 setNeedsLayout];
  [v5 invalidateIntrinsicContentSize];
  [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v20] = v5;
  NSString v23 = [objc_allocWithZone(v4) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v24 = [v6 mainBundle];
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v24 localizedStringForKey:v25 value:0 table:0];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  id v30 = (uint64_t *)&v23[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *id v30 = v27;
  v30[1] = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  id v32 = *(void **)&v23[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v30[1])
  {
    swift_bridgeObjectRetain();
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v33 = 0;
  }
  [v32 setText:v33];
  swift_bridgeObjectRelease();

  [*(id *)&v23[v31] setFont:qword_10094F9B0];
  id v34 = sub_10020042C();
  [*(id *)&v23[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v34];

  id v35 = sub_10020042C();
  if (FIUICurrentLanguageRequiresTallScript()) {
    double v36 = 23.0;
  }
  else {
    double v36 = 20.0;
  }
  uint64_t v37 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_exerciseLabelPair;
  [v35 _scaledValueForValue:v36];
  double v39 = v38;

  sub_1002764C4(v39);
  *(void *)&v23[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v23 setNeedsLayout];
  [v23 invalidateIntrinsicContentSize];
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v37] = v23;
  Class v40 = [objc_allocWithZone(v4) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v41 = [v6 mainBundle];
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v41 localizedStringForKey:v42 value:0 table:0];

  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  id v47 = (uint64_t *)&v40[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *id v47 = v44;
  v47[1] = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  id v49 = *(void **)&v40[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v47[1])
  {
    swift_bridgeObjectRetain();
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v50 = 0;
  }
  [v49 setText:v50];
  swift_bridgeObjectRelease();

  [*(id *)&v40[v48] setFont:qword_10094F9B0];
  id v51 = sub_10020042C();
  [*(id *)&v40[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v51];

  id v52 = sub_10020042C();
  if (FIUICurrentLanguageRequiresTallScript()) {
    double v53 = 23.0;
  }
  else {
    double v53 = 20.0;
  }
  uint64_t v54 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_standLabelPair;
  [v52 _scaledValueForValue:v53];
  double v56 = v55;

  sub_1002764C4(v56);
  *(void *)&v40[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v40 setNeedsLayout];
  [v40 invalidateIntrinsicContentSize];
  [v40 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v54] = v40;
  uint64_t v57 = (char *)[objc_allocWithZone(v4) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v58 = [v6 mainBundle];
  NSString v59 = String._bridgeToObjectiveC()();
  id v60 = [v58 localizedStringForKey:v59 value:0 table:0];

  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v63 = v62;

  objc_super v64 = (uint64_t *)&v57[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  uint64_t *v64 = v61;
  v64[1] = v63;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v65 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  objc_super v66 = *(void **)&v57[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v64[1])
  {
    swift_bridgeObjectRetain();
    NSString v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v67 = 0;
  }
  [v66 setText:v67];
  swift_bridgeObjectRelease();

  [*(id *)&v57[v65] setFont:qword_10094F9B0];
  id v68 = sub_10020042C();
  uint64_t v69 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  [*(id *)&v57[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v68];

  NSString v70 = self;
  id v71 = [v70 systemGrayColor];
  uint64_t v72 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  uint64_t v73 = *(void **)&v57[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(void *)&v57[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v71;
  id v74 = v71;

  [*(id *)&v57[v69] setTextColor:*(void *)&v57[v72]];
  id v75 = sub_10020042C();
  if (FIUICurrentLanguageRequiresTallScript()) {
    double v76 = 23.0;
  }
  else {
    double v76 = 20.0;
  }
  uint64_t v77 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_stepsLabelPair;
  [v75 _scaledValueForValue:v76];
  double v79 = v78;

  sub_1002764C4(v79);
  *(void *)&v57[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v57 setNeedsLayout];
  [v57 invalidateIntrinsicContentSize];
  [v57 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v77] = v57;
  unsigned int v80 = [objc_allocWithZone(v4) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v81 = [v6 mainBundle];
  NSString v82 = String._bridgeToObjectiveC()();
  id v83 = [v81 localizedStringForKey:v82 value:0 table:0];

  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v86 = v85;

  id v87 = (uint64_t *)&v80[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *id v87 = v84;
  v87[1] = v86;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v88 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  uint64_t v89 = *(void **)&v80[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel];
  if (v87[1])
  {
    swift_bridgeObjectRetain();
    NSString v90 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v90 = 0;
  }
  [v89 setText:v90];
  swift_bridgeObjectRelease();

  [*(id *)&v80[v88] setFont:qword_10094F9B0];
  id v91 = sub_10020042C();
  uint64_t v92 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  [*(id *)&v80[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setFont:v91];

  id v93 = [v70 systemGrayColor];
  uint64_t v94 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  id v95 = *(void **)&v80[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(void *)&v80[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v93;
  id v96 = v93;

  [*(id *)&v80[v92] setTextColor:*(void *)&v80[v94]];
  id v97 = sub_10020042C();
  int v98 = FIUICurrentLanguageRequiresTallScript();
  double v99 = 20.0;
  if (v98) {
    double v99 = 23.0;
  }
  uint64_t v100 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_distanceLabelPair;
  [v97 _scaledValueForValue:v99];
  double v102 = v101;

  sub_1002764C4(v102);
  *(void *)&v80[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_intrinsicContentSizeBottomPadding] = 0x4028000000000000;
  [v80 setNeedsLayout];
  [v80 invalidateIntrinsicContentSize];
  [v80 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v100] = v80;
  uint64_t v103 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_labelStackView;
  id v104 = [objc_allocWithZone((Class)UIStackView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v104 setAxis:1];
  [v104 setDistribution:3];
  [v104 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v103] = v104;
  uint64_t v105 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_ringsView;
  id v106 = [self activityRingGroupForRingType:3];
  id v107 = [v106 forCompanion];

  id v108 = [objc_allocWithZone((Class)ARUIRingsView) initWithRingGroup:v107];
  id v109 = (void *)ARUIRingsView.withRingGroupDiameter(_:)();

  id v110 = (void *)ARUIRingsView.withRingGroupThickness(_:)();
  id v111 = (void *)ARUIRingsView.withRingGroupInterspacing(_:)();

  id v112 = [v70 clearColor];
  [v111 setBackgroundColor:v112];

  long long v113 = (void *)ARUIRingsView.nilRings(animated:)();
  [v113 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v105] = v113;
  uint64_t v114 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_firstPairSeparatorView;
  id v115 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  sub_10007E2D8(0, (unint64_t *)&qword_10095BF80);
  Class isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  [v115 setBackgroundColor:isa];

  [v115 setHidden:1];
  [v115 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v114] = v115;
  uint64_t v117 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_secondPairSeparatorView;
  id v118 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  Class v119 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  [v118 setBackgroundColor:v119];

  [v118 setHidden:1];
  [v118 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v117] = v118;
  uint64_t v120 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_thirdPairSeparatorView;
  id v121 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v122 = [v70 blackColor];
  [v121 setBackgroundColor:v122];

  [v121 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v120] = v121;
  uint64_t v123 = OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_bottomSeparatorView;
  id v124 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  Class v125 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.28627, 0.28627, 0.28627, 1.0).super.isa;
  [v124 setBackgroundColor:v125];

  [v124 setHidden:1];
  [v124 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v123] = v124;
  v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_currentDisplayStyle] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10FitnessApp17TodayActivityTile_activeConstraints] = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t sub_100201574()
{
  unint64_t result = qword_10094B980;
  if (!qword_10094B980)
  {
    type metadata accessor for AttributeName(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094B980);
  }
  return result;
}

Swift::Int sub_1002015CC()
{
  return sub_10020304C();
}

uint64_t sub_1002015DC()
{
  return String.hash(into:)();
}

Swift::Int sub_1002015EC()
{
  return sub_1002030BC();
}

uint64_t sub_1002015FC@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B3010;
  return sub_100203114(v2, a1, a2);
}

uint64_t sub_100201608()
{
  return 1635017060;
}

uint64_t sub_100201618@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B3048;
  return sub_100203194(a1, v2, a2);
}

void sub_100201624(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100201630(uint64_t a1)
{
  unint64_t v2 = sub_100201830();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10020166C(uint64_t a1)
{
  unint64_t v2 = sub_100201830();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EditorialItemsList.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_10094FA90);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E4EC(a1, a1[3]);
  sub_100201830();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_1000AFA94(&qword_10094FAA0);
  sub_10020A8A8(&qword_10094FAA8, &qword_10094FAA0, (void (*)(void))sub_100201884);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_100201830()
{
  unint64_t result = qword_10094FA98;
  if (!qword_10094FA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FA98);
  }
  return result;
}

unint64_t sub_100201884()
{
  unint64_t result = qword_10094FAB0;
  if (!qword_10094FAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FAB0);
  }
  return result;
}

void *EditorialItemsList.init(from:)(void *a1)
{
  return sub_100203E28(a1);
}

void *sub_1002018F0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_100203E28(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10020191C(void *a1)
{
  return EditorialItemsList.encode(to:)(a1, *v1);
}

uint64_t EditorialItem.id.getter(uint64_t a1)
{
  return a1;
}

uint64_t EditorialItem.relationship.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_100201998(char *a1, char *a2)
{
  return sub_10047F6A4(*a1, *a2);
}

Swift::Int sub_1002019A4()
{
  return Hasher._finalize()();
}

uint64_t sub_100201A28()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100201A98()
{
  return Hasher._finalize()();
}

uint64_t sub_100201B18@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B3080;
  return sub_100202598(v2, a1, a2);
}

void sub_100201B24(uint64_t *a1@<X8>)
{
  uint64_t v2 = 25705;
  if (*v1) {
    uint64_t v2 = 0x6E6F6974616C6572;
  }
  unint64_t v3 = 0xE200000000000000;
  if (*v1) {
    unint64_t v3 = 0xED00007370696873;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100201B64()
{
  if (*v0) {
    return 0x6E6F6974616C6572;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100201BA0@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B3080;
  return sub_10020266C(a1, v2, a2);
}

uint64_t sub_100201BAC(uint64_t a1)
{
  unint64_t v2 = sub_100203FF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100201BE8(uint64_t a1)
{
  unint64_t v2 = sub_100203FF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EditorialItem.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v6 = sub_1000AFA94(&qword_10094FAB8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E4EC(a1, a1[3]);
  sub_100203FF8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v4)
  {
    v11[1] = v11[0];
    char v12 = 1;
    sub_10020404C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t EditorialItem.init(from:)(void *a1)
{
  uint64_t result = sub_1002040A0(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_100201DD8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002040A0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100201E08(void *a1)
{
  return EditorialItem.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t Relationship.cardContent.getter(uint64_t a1)
{
  return a1;
}

Swift::Int sub_100201E50()
{
  return sub_10020304C();
}

uint64_t sub_100201E74()
{
  return String.hash(into:)();
}

Swift::Int sub_100201E98()
{
  return sub_1002030BC();
}

uint64_t sub_100201EBC@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B30D0;
  return sub_100203114(v2, a1, a2);
}

void sub_100201EC8(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_100201EF0()
{
  return 0x6E6F632D64726163;
}

uint64_t sub_100201F14@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B3108;
  return sub_100203194(a1, v2, a2);
}

uint64_t sub_100201F20(uint64_t a1)
{
  unint64_t v2 = sub_1002042A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100201F5C(uint64_t a1)
{
  unint64_t v2 = sub_1002042A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Relationship.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_10094FAD0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E4EC(a1, a1[3]);
  sub_1002042A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_1002042F4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *Relationship.init(from:)(void *a1)
{
  return sub_100204348(a1);
}

void *sub_1002020F4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100204348(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100202120(void *a1)
{
  return Relationship.encode(to:)(a1, *v1);
}

uint64_t sub_100202140@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B3140;
  return sub_100203114(v2, a1, a2);
}

void sub_10020214C(void *a1@<X8>)
{
  *a1 = 1635017060;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_100202160@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B3178;
  return sub_100203194(a1, v2, a2);
}

uint64_t sub_10020216C(uint64_t a1)
{
  unint64_t v2 = sub_1002044B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002021A8(uint64_t a1)
{
  unint64_t v2 = sub_1002044B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CardContent.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_10094FAE8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E4EC(a1, a1[3]);
  sub_1002044B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_1000AFA94(&qword_10094F340);
  sub_10020A8A8(&qword_10094FAF8, &qword_10094F340, (void (*)(void))sub_100204508);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *CardContent.init(from:)(void *a1)
{
  return sub_10020455C(a1);
}

void *sub_100202384@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10020455C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002023B0(void *a1)
{
  return CardContent.encode(to:)(a1, *v1);
}

uint64_t CardItem.storeIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CardItem.attributes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AEF2C(v1 + 16, a1, &qword_10094FB08);
}

uint64_t sub_100202424(char *a1, char *a2)
{
  return sub_10047E4A8(*a1, *a2);
}

Swift::Int sub_100202430()
{
  return Hasher._finalize()();
}

uint64_t sub_1002024AC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100202514()
{
  return Hasher._finalize()();
}

uint64_t sub_10020258C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B31B0;
  return sub_100202598(v2, a1, a2);
}

uint64_t sub_100202598@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_1002025F4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 25705;
  if (*v1) {
    uint64_t v2 = 0x7475626972747461;
  }
  unint64_t v3 = 0xE200000000000000;
  if (*v1) {
    unint64_t v3 = 0xEA00000000007365;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10020262C()
{
  if (*v0) {
    return 0x7475626972747461;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100202660@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B31B0;
  return sub_10020266C(a1, v2, a2);
}

uint64_t sub_10020266C@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t sub_1002026CC(uint64_t a1)
{
  unint64_t v2 = sub_10020470C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100202708(uint64_t a1)
{
  unint64_t v2 = sub_10020470C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CardItem.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000AFA94(&qword_10094FB10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10007E4EC(a1, a1[3]);
  sub_10020470C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    sub_1000AEEC8(v3 + 16, (uint64_t)v12, &qword_10094FB08);
    sub_1000AEEC8((uint64_t)v12, (uint64_t)v11, &qword_10094FB08);
    v12[215] = 1;
    sub_100204760();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 CardItem.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002047B4(a1, v10);
  if (!v2)
  {
    long long v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v10[12];
    long long v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    long long v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    long long v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    long long v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100202954(void *a1)
{
  return CardItem.encode(to:)(a1);
}

uint64_t Attributes.platform.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AEF2C(v1 + 16, a1, &qword_10094FB28);
}

uint64_t Attributes.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100202A10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10047FAC0(*a1, *a2);
}

Swift::Int sub_100202A1C()
{
  return Hasher._finalize()();
}

uint64_t sub_100202AC0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100202B50()
{
  return Hasher._finalize()();
}

unint64_t sub_100202BF0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100204B84(*a1);
  *a2 = result;
  return result;
}

void sub_100202C20(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEA0000000000656DLL;
  unint64_t v4 = 0x80000001007B53B0;
  unint64_t v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    unint64_t v5 = 1701667182;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x614E747369747261;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100202C80()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 != 1) {
    unint64_t v1 = 1701667182;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x614E747369747261;
  }
}

unint64_t sub_100202CDC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100204B84(a1);
  *a2 = result;
  return result;
}

void sub_100202D04(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100202D10(uint64_t a1)
{
  unint64_t v2 = sub_100204ADC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100202D4C(uint64_t a1)
{
  unint64_t v2 = sub_100204ADC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Attributes.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000AFA94(&qword_10094FB30);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10007E4EC(a1, a1[3]);
  sub_100204ADC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    sub_1000AEEC8(v3 + 16, (uint64_t)v12, &qword_10094FB28);
    sub_1000AEEC8((uint64_t)v12, (uint64_t)v11, &qword_10094FB28);
    v12[183] = 1;
    sub_100204B30();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double Attributes.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100204BD0(a1, v11);
  if (!v2)
  {
    long long v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    long long v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    long long v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    long long v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    long long v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    double result = *(double *)&v12;
    long long v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_100202FB8(void *a1)
{
  return Attributes.encode(to:)(a1);
}

uint64_t AppPlatform.iOS.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AEF2C(v1, a1, &qword_10094FB48);
}

Swift::Int sub_10020303C()
{
  return sub_10020304C();
}

Swift::Int sub_10020304C()
{
  return Hasher._finalize()();
}

uint64_t sub_10020309C()
{
  return String.hash(into:)();
}

Swift::Int sub_1002030AC()
{
  return sub_1002030BC();
}

Swift::Int sub_1002030BC()
{
  return Hasher._finalize()();
}

uint64_t sub_100203108@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B3268;
  return sub_100203114(v2, a1, a2);
}

uint64_t sub_100203114@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void sub_100203164(void *a1@<X8>)
{
  *a1 = 7565161;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_100203178()
{
  return 7565161;
}

uint64_t sub_100203188@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B32A0;
  return sub_100203194(a1, v2, a2);
}

uint64_t sub_100203194@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

uint64_t sub_1002031E8(uint64_t a1)
{
  unint64_t v2 = sub_100204FE0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100203224(uint64_t a1)
{
  unint64_t v2 = sub_100204FE0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppPlatform.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000AFA94(&qword_10094FB50);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E4EC(a1, a1[3]);
  sub_100204FE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000AEEC8(v2, (uint64_t)v11, &qword_10094FB48);
  sub_1000AEEC8((uint64_t)v11, (uint64_t)&v10, &qword_10094FB48);
  sub_100205034();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

double AppPlatform.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100205088(a1, v10);
  if (!v2)
  {
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    long long v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    long long v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100203430(void *a1)
{
  return AppPlatform.encode(to:)(a1);
}

uint64_t AppStoreAppRecommendation.author.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppAttributes.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AEF2C(v1 + 32, a1, &qword_10094FB68);
}

uint64_t sub_1002034DC()
{
  uint64_t v1 = 0x6449656C646E7562;
  if (*v0 != 1) {
    uint64_t v1 = 0x6B726F77747261;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C746974627573;
  }
}

uint64_t sub_100203538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100205334(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100203560(uint64_t a1)
{
  unint64_t v2 = sub_10020528C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10020359C(uint64_t a1)
{
  unint64_t v2 = sub_10020528C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppAttributes.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000AFA94(&qword_10094FB70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10007E4EC(a1, a1[3]);
  sub_10020528C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000AEEC8(v3 + 32, (uint64_t)v12, &qword_10094FB68);
    sub_1000AEEC8((uint64_t)v12, (uint64_t)v11, &qword_10094FB68);
    v12[151] = 2;
    sub_1002052E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double AppAttributes.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10020548C(a1, v10);
  if (!v2)
  {
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    long long v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    long long v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100203800(void *a1)
{
  return AppAttributes.encode(to:)(a1);
}

uint64_t sub_100203854(unsigned __int8 *a1, char *a2)
{
  return sub_10047FC78(*a1, *a2);
}

Swift::Int sub_100203860()
{
  return sub_100480ADC();
}

uint64_t sub_10020386C()
{
  return sub_100480864();
}

Swift::Int sub_100203874()
{
  return sub_100480ADC();
}

unint64_t sub_10020387C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100205844(*a1);
  *a2 = result;
  return result;
}

void sub_1002038AC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x6874646977;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x746867696568;
      goto LABEL_3;
    case 2:
      *a1 = 7107189;
      a1[1] = 0xE300000000000000;
      return;
    case 3:
      *a1 = 0x726F6C6F436762;
      a1[1] = 0xE700000000000000;
      return;
    case 4:
      *a1 = 0x6F6C6F4374786574;
      a1[1] = 0xEA00000000003172;
      return;
    case 5:
      unint64_t v4 = 0xEA00000000003272;
      goto LABEL_10;
    case 6:
      unint64_t v4 = 0xEA00000000003372;
      goto LABEL_10;
    case 7:
      unint64_t v4 = 0xEA00000000003472;
LABEL_10:
      *a1 = 0x6F6C6F4374786574;
      a1[1] = v4;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1002039AC()
{
  uint64_t result = 0x6874646977;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746867696568;
      break;
    case 2:
      uint64_t result = 7107189;
      break;
    case 3:
      uint64_t result = 0x726F6C6F436762;
      break;
    case 4:
      uint64_t result = 0x6F6C6F4374786574;
      break;
    case 5:
      uint64_t result = 0x6F6C6F4374786574;
      break;
    case 6:
      uint64_t result = 0x6F6C6F4374786574;
      break;
    case 7:
      uint64_t result = 0x6F6C6F4374786574;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100203AB8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100205844(a1);
  *a2 = result;
  return result;
}

void sub_100203AE0(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100203AEC(uint64_t a1)
{
  unint64_t v2 = sub_1002057F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100203B28(uint64_t a1)
{
  unint64_t v2 = sub_1002057F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AppArtwork.encode(to:)(void *a1)
{
  uint64_t v3 = sub_1000AFA94(&qword_10094FB88);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10007E4EC(a1, a1[3]);
  sub_1002057F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double AppArtwork.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100205890(a1, v9);
  if (!v2)
  {
    long long v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    long long v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    long long v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_100203E10(void *a1)
{
  return AppArtwork.encode(to:)(a1);
}

void *sub_100203E28(void *a1)
{
  uint64_t v3 = sub_1000AFA94(&qword_10094FCF0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = sub_10007E4EC(a1, a1[3]);
  sub_100201830();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1000AFA94(&qword_10094FAA0);
    sub_10020A8A8(&qword_10094FCF8, &qword_10094FAA0, (void (*)(void))sub_10020A914);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    long long v7 = (void *)v9[1];
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100203FD8(uint64_t result)
{
  if (result != 2) {
    return sub_100203FE8(result);
  }
  return result;
}

uint64_t sub_100203FE8(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_100203FF8()
{
  unint64_t result = qword_10094FAC0;
  if (!qword_10094FAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FAC0);
  }
  return result;
}

unint64_t sub_10020404C()
{
  unint64_t result = qword_10094FAC8;
  if (!qword_10094FAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FAC8);
  }
  return result;
}

uint64_t sub_1002040A0(void *a1)
{
  uint64_t v3 = sub_1000AFA94(&qword_10094FCE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10007E4EC(a1, a1[3]);
  sub_100203FF8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v10[15] = 1;
    sub_10020A834();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v11;
    sub_100203FD8(v11);
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_10020A888(v9);
  }
  return v7;
}

unint64_t sub_1002042A0()
{
  unint64_t result = qword_10094FAD8;
  if (!qword_10094FAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FAD8);
  }
  return result;
}

unint64_t sub_1002042F4()
{
  unint64_t result = qword_10094FAE0;
  if (!qword_10094FAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FAE0);
  }
  return result;
}

void *sub_100204348(void *a1)
{
  uint64_t v3 = sub_1000AFA94(&qword_10094FCD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10007E4EC(a1, a1[3]);
  sub_1002042A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10020A7E0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1002044B4()
{
  unint64_t result = qword_10094FAF0;
  if (!qword_10094FAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FAF0);
  }
  return result;
}

unint64_t sub_100204508()
{
  unint64_t result = qword_10094FB00;
  if (!qword_10094FB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB00);
  }
  return result;
}

void *sub_10020455C(void *a1)
{
  uint64_t v3 = sub_1000AFA94(&qword_10094FCB8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10007E4EC(a1, a1[3]);
  sub_1002044B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1000AFA94(&qword_10094F340);
    sub_10020A8A8(&qword_10094FCC0, &qword_10094F340, (void (*)(void))sub_10020A78C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10020470C()
{
  unint64_t result = qword_10094FB18;
  if (!qword_10094FB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB18);
  }
  return result;
}

unint64_t sub_100204760()
{
  unint64_t result = qword_10094FB20;
  if (!qword_10094FB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB20);
  }
  return result;
}

uint64_t sub_1002047B4@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v21 = a2;
  uint64_t v4 = sub_1000AFA94(&qword_10094FCA8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E4EC(a1, a1[3]);
  sub_10020470C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  uint64_t v8 = v5;
  LOBYTE(v25[0]) = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  *(void *)&long long v27 = v9;
  *((void *)&v27 + 1) = v10;
  char v29 = 1;
  sub_10020A2E8();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v4);
  sub_1000AEEC8((uint64_t)&v26, (uint64_t)v22, &qword_10094FB08);
  sub_1000AEEC8((uint64_t)v22, (uint64_t)v28, &qword_10094FB08);
  *(void *)&long long v23 = v9;
  *((void *)&v23 + 1) = v11;
  sub_1000AEEC8((uint64_t)v22, (uint64_t)v24, &qword_10094FB08);
  sub_10020A33C((uint64_t)&v23);
  swift_bridgeObjectRelease();
  _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  v25[10] = v28[9];
  v25[11] = v28[10];
  v25[12] = v28[11];
  v25[6] = v28[5];
  v25[7] = v28[6];
  v25[8] = v28[7];
  v25[9] = v28[8];
  v25[2] = v28[1];
  v25[3] = v28[2];
  v25[4] = v28[3];
  v25[5] = v28[4];
  v25[0] = v27;
  v25[1] = v28[0];
  uint64_t result = sub_10020A564((uint64_t)v25);
  long long v13 = v24[10];
  long long v14 = v21;
  v21[10] = v24[9];
  v14[11] = v13;
  v14[12] = v24[11];
  long long v15 = v24[6];
  void v14[6] = v24[5];
  v14[7] = v15;
  long long v16 = v24[8];
  v14[8] = v24[7];
  v14[9] = v16;
  long long v17 = v24[2];
  v14[2] = v24[1];
  v14[3] = v17;
  long long v18 = v24[4];
  v14[4] = v24[3];
  v14[5] = v18;
  long long v19 = v24[0];
  _OWORD *v14 = v23;
  v14[1] = v19;
  return result;
}

unint64_t sub_100204ADC()
{
  unint64_t result = qword_10094FB38;
  if (!qword_10094FB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB38);
  }
  return result;
}

unint64_t sub_100204B30()
{
  unint64_t result = qword_10094FB40;
  if (!qword_10094FB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB40);
  }
  return result;
}

unint64_t sub_100204B84(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3200, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100204BD0@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v27 = sub_1000AFA94(&qword_10094FC98);
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E4EC(a1, a1[3]);
  sub_100204ADC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  uint64_t v8 = v5;
  uint64_t v26 = a2;
  LOBYTE(v31[0]) = 0;
  uint64_t v9 = v27;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v12 = v11;
  *(void *)&long long v34 = v10;
  *((void *)&v34 + 1) = v11;
  char v38 = 1;
  uint64_t v25 = v10;
  sub_100209DA8();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000AEEC8((uint64_t)&v33, (uint64_t)v32, &qword_10094FB28);
  sub_1000AEEC8((uint64_t)v32, (uint64_t)v35, &qword_10094FB28);
  char v37 = 2;
  sub_100209F5C(v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100209FC8);
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
  *(void *)&long long v36 = v13;
  *((void *)&v36 + 1) = v15;
  *(void *)&long long v28 = v25;
  *((void *)&v28 + 1) = v12;
  sub_1000AEEC8((uint64_t)v32, (uint64_t)v29, &qword_10094FB28);
  *(void *)&long long v30 = v13;
  *((void *)&v30 + 1) = v15;
  sub_10020A128((uint64_t)&v28);
  sub_100209F5C(v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100209DFC);
  swift_bridgeObjectRelease();
  _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  v31[8] = v35[7];
  v31[9] = v35[8];
  v31[10] = v35[9];
  v31[11] = v36;
  v31[4] = v35[3];
  v31[5] = v35[4];
  v31[6] = v35[5];
  v31[7] = v35[6];
  v31[0] = v34;
  v31[1] = v35[0];
  v31[2] = v35[1];
  v31[3] = v35[2];
  uint64_t result = sub_10020A208((uint64_t)v31);
  long long v17 = v29[8];
  long long v18 = v26;
  v26[8] = v29[7];
  v18[9] = v17;
  long long v19 = v30;
  v18[10] = v29[9];
  v18[11] = v19;
  long long v20 = v29[4];
  v18[4] = v29[3];
  v18[5] = v20;
  long long v21 = v29[6];
  v18[6] = v29[5];
  v18[7] = v21;
  long long v22 = v29[0];
  *long long v18 = v28;
  v18[1] = v22;
  long long v23 = v29[2];
  uint64_t v18[2] = v29[1];
  v18[3] = v23;
  return result;
}

unint64_t sub_100204FE0()
{
  unint64_t result = qword_10094FB58;
  if (!qword_10094FB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB58);
  }
  return result;
}

unint64_t sub_100205034()
{
  unint64_t result = qword_10094FB60;
  if (!qword_10094FB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB60);
  }
  return result;
}

uint64_t sub_100205088@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v19 = a2;
  uint64_t v4 = sub_1000AFA94(&qword_10094FC88);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10007E4EC(a1, a1[3]);
  sub_100204FE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  uint64_t v8 = v19;
  sub_100209D54();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000AEEC8((uint64_t)v18, (uint64_t)v16, &qword_10094FB48);
  sub_1000AEEC8((uint64_t)v16, (uint64_t)v17, &qword_10094FB48);
  uint64_t result = _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  long long v10 = v17[7];
  v8[6] = v17[6];
  v8[7] = v10;
  long long v11 = v17[9];
  v8[8] = v17[8];
  v8[9] = v11;
  long long v12 = v17[3];
  uint64_t v8[2] = v17[2];
  _OWORD v8[3] = v12;
  long long v13 = v17[5];
  void v8[4] = v17[4];
  v8[5] = v13;
  long long v14 = v17[1];
  *uint64_t v8 = v17[0];
  v8[1] = v14;
  return result;
}

unint64_t sub_10020528C()
{
  unint64_t result = qword_10094FB78;
  if (!qword_10094FB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB78);
  }
  return result;
}

unint64_t sub_1002052E0()
{
  unint64_t result = qword_10094FB80;
  if (!qword_10094FB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB80);
  }
  return result;
}

uint64_t sub_100205334(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C746974627573 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10020548C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v27 = sub_1000AFA94(&qword_10094FC78);
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E4EC(a1, a1[3]);
  sub_10020528C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)_s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  }
  uint64_t v8 = v5;
  uint64_t v26 = a2;
  LOBYTE(v32[0]) = 0;
  uint64_t v9 = v27;
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v12 = v11;
  *(void *)&long long v34 = v10;
  *((void *)&v34 + 1) = v11;
  LOBYTE(v32[0]) = 1;
  uint64_t v25 = v10;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v15 = v14;
  *(void *)&long long v24 = v13;
  *(void *)&long long v35 = v13;
  *((void *)&v35 + 1) = v14;
  char v37 = 2;
  sub_100209AEC();
  swift_bridgeObjectRetain();
  *((void *)&v24 + 1) = v15;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
  sub_1000AEEC8((uint64_t)&v33, (uint64_t)v28, &qword_10094FB68);
  sub_1000AEEC8((uint64_t)v28, (uint64_t)v36, &qword_10094FB68);
  *(void *)&long long v29 = v25;
  *((void *)&v29 + 1) = v12;
  long long v30 = v24;
  sub_1000AEEC8((uint64_t)v28, (uint64_t)v31, &qword_10094FB68);
  sub_100209B40(&v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
  v32[6] = v36[4];
  v32[7] = v36[5];
  v32[8] = v36[6];
  v32[9] = v36[7];
  v32[2] = v36[0];
  v32[3] = v36[1];
  v32[4] = v36[2];
  v32[5] = v36[3];
  v32[0] = v34;
  v32[1] = v35;
  unint64_t result = sub_100209C08(v32);
  long long v17 = v31[5];
  long long v18 = v26;
  v26[6] = v31[4];
  v18[7] = v17;
  long long v19 = v31[7];
  v18[8] = v31[6];
  v18[9] = v19;
  long long v20 = v31[1];
  uint64_t v18[2] = v31[0];
  v18[3] = v20;
  long long v21 = v31[3];
  v18[4] = v31[2];
  v18[5] = v21;
  long long v22 = v30;
  *long long v18 = v29;
  v18[1] = v22;
  return result;
}

unint64_t sub_1002057F0()
{
  unint64_t result = qword_10094FB90;
  if (!qword_10094FB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB90);
  }
  return result;
}

unint64_t sub_100205844(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B32D8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_100205890@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v55 = sub_1000AFA94(&qword_10094FC70);
  uint64_t v5 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[3];
  sub_10007E4EC(a1, v8);
  sub_1002057F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)a1);
    return v8;
  }
  else
  {
    uint64_t v9 = v5;
    id v52 = a2;
    LOBYTE(v64) = 0;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v12 = v11;
    uint64_t v51 = v10;
    char v81 = v11 & 1;
    LOBYTE(v64) = 1;
    uint64_t v13 = (uint64_t)a1;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v80 = v14 & 1;
    LOBYTE(v64) = 2;
    int v15 = v14;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v48 = v15;
    uint64_t v49 = v16;
    LOBYTE(v64) = 3;
    uint64_t v18 = v17;
    swift_bridgeObjectRetain();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v54 = v18;
    uint64_t v47 = v19;
    LOBYTE(v64) = 4;
    uint64_t v21 = v20;
    swift_bridgeObjectRetain();
    uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v53 = v21;
    LOBYTE(v64) = 5;
    uint64_t v23 = v22;
    swift_bridgeObjectRetain();
    *(void *)&long long v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)&v45 + 1) = v24;
    uint64_t v25 = v23;
    LOBYTE(v64) = 6;
    swift_bridgeObjectRetain();
    *(void *)&long long v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)&v44 + 1) = v26;
    char v82 = 7;
    swift_bridgeObjectRetain();
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    long long v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v43 = v27;
    uint64_t v30 = v29;
    v28(v7, v55);
    *(void *)&long long v56 = v51;
    BYTE8(v56) = v12 & 1;
    *(void *)&long long v57 = v50;
    BYTE8(v57) = v48 & 1;
    uint64_t v32 = v53;
    uint64_t v31 = v54;
    *(void *)&long long v58 = v49;
    *((void *)&v58 + 1) = v54;
    *(void *)&long long v59 = v47;
    *((void *)&v59 + 1) = v53;
    uint64_t v33 = *((void *)&v45 + 1);
    *(void *)&long long v60 = v46;
    *((void *)&v60 + 1) = v25;
    uint64_t v34 = v25;
    uint64_t v35 = *((void *)&v44 + 1);
    long long v61 = v45;
    long long v62 = v44;
    *(void *)&long long v63 = v43;
    *((void *)&v63 + 1) = v30;
    sub_1002099FC((uint64_t)&v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v13);
    uint64_t v64 = v51;
    char v65 = v81;
    uint64_t v66 = v50;
    char v67 = v80;
    uint64_t v68 = v49;
    uint64_t v69 = v31;
    uint64_t v70 = v47;
    uint64_t v71 = v32;
    uint64_t v72 = v46;
    uint64_t v73 = v34;
    uint64_t v74 = v45;
    uint64_t v75 = v33;
    uint64_t v76 = v44;
    uint64_t v77 = v35;
    uint64_t v78 = v43;
    uint64_t v79 = v30;
    uint64_t result = sub_100209A74((uint64_t)&v64);
    long long v37 = v61;
    char v38 = v52;
    v52[4] = v60;
    v38[5] = v37;
    long long v39 = v63;
    v38[6] = v62;
    v38[7] = v39;
    long long v40 = v57;
    *char v38 = v56;
    v38[1] = v40;
    long long v41 = v59;
    v38[2] = v58;
    v38[3] = v41;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditorialItemsList()
{
  return &type metadata for EditorialItemsList;
}

uint64_t destroy for EditorialItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 16);
  if ((unint64_t)(result - 1) >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *_s10FitnessApp13EditorialItemVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  if (v4 == 1)
  {
    uint64_t v5 = 1;
  }
  else
  {
    if (v4 != 2)
    {
      a1[2] = v4;
      swift_bridgeObjectRetain();
      return a1;
    }
    uint64_t v5 = 2;
  }
  a1[2] = v5;
  return a1;
}

void *assignWithCopy for EditorialItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 2;
  uint64_t v5 = a1[2];
  uint64_t v6 = a2[2];
  if (v5 != 2)
  {
    if (v6 == 2)
    {
      sub_10020603C(a1 + 2);
    }
    else
    {
      if (v5 == 1)
      {
        if (v6 != 1) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t v7 = 1;
        goto LABEL_14;
      }
      if (v6 != 1)
      {
        *uint64_t v4 = v6;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_1000B1AE0((uint64_t)(a1 + 2));
    }
    uint64_t v7 = a2[2];
    goto LABEL_14;
  }
  if (v6 == 1) {
    goto LABEL_9;
  }
  if (v6 == 2)
  {
    uint64_t v7 = 2;
LABEL_14:
    *uint64_t v4 = v7;
    return a1;
  }
LABEL_10:
  *uint64_t v4 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10020603C(void *a1)
{
  if (*a1 != 1) {
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *assignWithTake for EditorialItem(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 2;
  uint64_t v5 = a1[2];
  uint64_t v7 = a2[2];
  if (v5 != 2)
  {
    if (v7 == 2)
    {
      sub_10020603C(a1 + 2);
      uint64_t v7 = 2;
    }
    else if (v5 != 1)
    {
      if (v7 != 1)
      {
        *uint64_t v6 = v7;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_1000B1AE0((uint64_t)(a1 + 2));
      uint64_t v7 = 1;
    }
  }
  *uint64_t v6 = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for EditorialItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EditorialItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditorialItem()
{
  return &type metadata for EditorialItem;
}

uint64_t *initializeBufferWithCopyOfBuffer for Relationship(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2 != 1) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

uint64_t destroy for Relationship(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *assignWithCopy for Relationship(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  if (v3 == 1)
  {
    if (v4 != 1)
    {
      *a1 = v4;
      swift_bridgeObjectRetain();
      return a1;
    }
    uint64_t v5 = 1;
  }
  else
  {
    if (v4 != 1)
    {
      *a1 = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000B1AE0((uint64_t)a1);
    uint64_t v5 = *a2;
  }
  *a1 = v5;
  return a1;
}

uint64_t *assignWithTake for Relationship(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a1 != 1)
  {
    if (v3 != 1)
    {
      *a1 = v3;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000B1AE0((uint64_t)a1);
    uint64_t v3 = 1;
  }
  *a1 = v3;
  return a1;
}

uint64_t getEnumTagSinglePayload for Relationship(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for Relationship(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Relationship()
{
  return &type metadata for Relationship;
}

void *assignWithCopy for CardContent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CardContent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10FitnessApp11CardContentVwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s10FitnessApp11CardContentVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CardContent()
{
  return &type metadata for CardContent;
}

uint64_t destroy for CardItem(void *a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = a1[3];
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    if ((unint64_t)(a1[5] - 1) >= 2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[13] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CardItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v6;
    long long v7 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v7;
    long long v8 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v8;
    long long v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v9;
    long long v10 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v10;
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v12 = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    if (v12 == 1 || v12 == 2)
    {
      long long v13 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v13;
      long long v14 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v14;
      long long v15 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v15;
      long long v16 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v16;
      long long v17 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v17;
    }
    else
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v12;
      uint64_t v18 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v18;
      uint64_t v19 = (_OWORD *)(a1 + 64);
      uint64_t v20 = (_OWORD *)(a2 + 64);
      uint64_t v21 = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v21 == 1)
      {
        long long v22 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v22;
        long long v23 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v23;
        long long v24 = *(_OWORD *)(a2 + 80);
        *uint64_t v19 = *v20;
        *(_OWORD *)(a1 + 80) = v24;
        long long v25 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v25;
      }
      else
      {
        *(void *)uint64_t v19 = *(void *)v20;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = v21;
        uint64_t v26 = *(void *)(a2 + 120);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(void *)(a1 + 120) = v26;
        uint64_t v27 = *(void *)(a2 + 136);
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        *(void *)(a1 + 136) = v27;
        uint64_t v28 = *(void *)(a2 + 152);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(void *)(a1 + 152) = v28;
        uint64_t v29 = *(void *)(a2 + 168);
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        *(void *)(a1 + 168) = v29;
        uint64_t v30 = *(void *)(a2 + 184);
        *(void *)(a1 + 176) = *(void *)(a2 + 176);
        *(void *)(a1 + 184) = v30;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    uint64_t v31 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = v31;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for CardItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (long long *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) != 1)
  {
    if (v6 == 1)
    {
      sub_100206E28(a1 + 16);
      long long v16 = *(_OWORD *)(a2 + 64);
      long long v18 = *v5;
      long long v17 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v16;
      *uint64_t v4 = v18;
      *(_OWORD *)(a1 + 32) = v17;
      long long v19 = *(_OWORD *)(a2 + 128);
      long long v21 = *(_OWORD *)(a2 + 80);
      long long v20 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v19;
      *(_OWORD *)(a1 + 80) = v21;
      *(_OWORD *)(a1 + 96) = v20;
      long long v22 = *(_OWORD *)(a2 + 192);
      long long v24 = *(_OWORD *)(a2 + 144);
      long long v23 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v22;
      *(_OWORD *)(a1 + 144) = v24;
      *(_OWORD *)(a1 + 160) = v23;
      return a1;
    }
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v33 = (_OWORD *)(a1 + 32);
    uint64_t v34 = (_OWORD *)(a2 + 32);
    uint64_t v35 = *(void *)(a1 + 40);
    uint64_t v36 = *(void *)(a2 + 40);
    if (v35 == 2)
    {
      if (v36 == 1 || v36 == 2) {
        goto LABEL_13;
      }
LABEL_20:
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      uint64_t v53 = (_OWORD *)(a1 + 64);
      uint64_t v54 = (long long *)(a2 + 64);
      uint64_t v55 = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v55 == 1)
      {
        long long v56 = *v54;
        long long v57 = *(_OWORD *)(a2 + 80);
        long long v58 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v58;
        *uint64_t v53 = v56;
        *(_OWORD *)(a1 + 80) = v57;
        long long v59 = *(_OWORD *)(a2 + 128);
        long long v60 = *(_OWORD *)(a2 + 144);
        long long v61 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v61;
        *(_OWORD *)(a1 + 128) = v59;
        *(_OWORD *)(a1 + 144) = v60;
        goto LABEL_28;
      }
      uint64_t v71 = *(void *)v54;
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)uint64_t v53 = v71;
LABEL_27:
      uint64_t v72 = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 80) = v72;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    if (v36 == 2)
    {
      sub_100206DF8(a1 + 32);
    }
    else
    {
      if (v35 == 1)
      {
        if (v36 == 1)
        {
LABEL_13:
          long long v37 = *(_OWORD *)(a2 + 48);
          *uint64_t v33 = *v34;
          *(_OWORD *)(a1 + 48) = v37;
          long long v38 = *(_OWORD *)(a2 + 64);
          long long v39 = *(_OWORD *)(a2 + 80);
          long long v40 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v40;
          *(_OWORD *)(a1 + 64) = v38;
          *(_OWORD *)(a1 + 80) = v39;
          long long v41 = *(_OWORD *)(a2 + 128);
          long long v42 = *(_OWORD *)(a2 + 144);
          long long v43 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v43;
          *(_OWORD *)(a1 + 128) = v41;
          *(_OWORD *)(a1 + 144) = v42;
LABEL_28:
          *(void *)(a1 + 192) = *(void *)(a2 + 192);
          *(void *)(a1 + 200) = *(void *)(a2 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
        goto LABEL_20;
      }
      if (v36 != 1)
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v74 = (_OWORD *)(a1 + 64);
        uint64_t v75 = (long long *)(a2 + 64);
        uint64_t v76 = *(void *)(a2 + 104);
        if (*(void *)(a1 + 104) != 1)
        {
          if (v76 == 1)
          {
            sub_100206D98(a1 + 64);
            long long v83 = *(_OWORD *)(a2 + 112);
            long long v85 = *v75;
            long long v84 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 112) = v83;
            *uint64_t v74 = v85;
            *(_OWORD *)(a1 + 80) = v84;
            long long v86 = *(_OWORD *)(a2 + 176);
            long long v88 = *(_OWORD *)(a2 + 128);
            long long v87 = *(_OWORD *)(a2 + 144);
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
            *(_OWORD *)(a1 + 176) = v86;
            *(_OWORD *)(a1 + 128) = v88;
            *(_OWORD *)(a1 + 144) = v87;
          }
          else
          {
            uint64_t v90 = *(void *)v75;
            *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
            *(void *)uint64_t v74 = v90;
            uint64_t v91 = *(void *)(a2 + 80);
            *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
            *(void *)(a1 + 80) = v91;
            *(void *)(a1 + 96) = *(void *)(a2 + 96);
            *(void *)(a1 + 104) = *(void *)(a2 + 104);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(a1 + 112) = *(void *)(a2 + 112);
            *(void *)(a1 + 120) = *(void *)(a2 + 120);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(a1 + 128) = *(void *)(a2 + 128);
            *(void *)(a1 + 136) = *(void *)(a2 + 136);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(a1 + 144) = *(void *)(a2 + 144);
            *(void *)(a1 + 152) = *(void *)(a2 + 152);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(a1 + 160) = *(void *)(a2 + 160);
            *(void *)(a1 + 168) = *(void *)(a2 + 168);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(a1 + 176) = *(void *)(a2 + 176);
            *(void *)(a1 + 184) = *(void *)(a2 + 184);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }
          goto LABEL_28;
        }
        if (v76 == 1)
        {
          long long v77 = *v75;
          long long v78 = *(_OWORD *)(a2 + 80);
          long long v79 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v79;
          *uint64_t v74 = v77;
          *(_OWORD *)(a1 + 80) = v78;
          long long v80 = *(_OWORD *)(a2 + 128);
          long long v81 = *(_OWORD *)(a2 + 144);
          long long v82 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v82;
          *(_OWORD *)(a1 + 128) = v80;
          *(_OWORD *)(a1 + 144) = v81;
          goto LABEL_28;
        }
        uint64_t v89 = *(void *)v75;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)uint64_t v74 = v89;
        goto LABEL_27;
      }
      sub_100206DC8(a1 + 32);
    }
    long long v64 = *(_OWORD *)(a2 + 48);
    *uint64_t v33 = *v34;
    *(_OWORD *)(a1 + 48) = v64;
    long long v65 = *(_OWORD *)(a2 + 112);
    long long v67 = *(_OWORD *)(a2 + 64);
    long long v66 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v65;
    *(_OWORD *)(a1 + 64) = v67;
    *(_OWORD *)(a1 + 80) = v66;
    long long v68 = *(_OWORD *)(a2 + 176);
    long long v70 = *(_OWORD *)(a2 + 128);
    long long v69 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v68;
    *(_OWORD *)(a1 + 128) = v70;
    *(_OWORD *)(a1 + 144) = v69;
    goto LABEL_28;
  }
  if (v6 == 1)
  {
    long long v7 = *v5;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v9;
    *uint64_t v4 = v7;
    *(_OWORD *)(a1 + 32) = v8;
    long long v10 = *(_OWORD *)(a2 + 80);
    long long v11 = *(_OWORD *)(a2 + 96);
    long long v12 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v12;
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 96) = v11;
    long long v13 = *(_OWORD *)(a2 + 144);
    long long v14 = *(_OWORD *)(a2 + 160);
    long long v15 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v15;
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = v14;
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v25 = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    if (v25 == 1 || v25 == 2)
    {
      long long v26 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v26;
      long long v27 = *(_OWORD *)(a2 + 64);
      long long v28 = *(_OWORD *)(a2 + 80);
      long long v29 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v29;
      *(_OWORD *)(a1 + 64) = v27;
      *(_OWORD *)(a1 + 80) = v28;
      long long v30 = *(_OWORD *)(a2 + 128);
      long long v31 = *(_OWORD *)(a2 + 144);
      long long v32 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v32;
      *(_OWORD *)(a1 + 128) = v30;
      *(_OWORD *)(a1 + 144) = v31;
    }
    else
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      long long v44 = (_OWORD *)(a1 + 64);
      long long v45 = (long long *)(a2 + 64);
      uint64_t v46 = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v46 == 1)
      {
        long long v47 = *v45;
        long long v48 = *(_OWORD *)(a2 + 80);
        long long v49 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v49;
        *long long v44 = v47;
        *(_OWORD *)(a1 + 80) = v48;
        long long v50 = *(_OWORD *)(a2 + 128);
        long long v51 = *(_OWORD *)(a2 + 144);
        long long v52 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v52;
        *(_OWORD *)(a1 + 128) = v50;
        *(_OWORD *)(a1 + 144) = v51;
      }
      else
      {
        uint64_t v62 = *(void *)v45;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)long long v44 = v62;
        uint64_t v63 = *(void *)(a2 + 80);
        *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
        *(void *)(a1 + 80) = v63;
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(void *)(a1 + 176) = *(void *)(a2 + 176);
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100206D98(uint64_t a1)
{
  return a1;
}

uint64_t sub_100206DC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100206DF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100206E28(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for CardItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for CardItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24) == 1) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 != 1)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12 != 2)
    {
      uint64_t v13 = *(void *)(a2 + 40);
      if (v13 == 2)
      {
        sub_100206DF8(a1 + 32);
      }
      else if (v12 != 1)
      {
        if (v13 != 1)
        {
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = v13;
          swift_bridgeObjectRelease();
          uint64_t v21 = *(void *)(a2 + 56);
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(void *)(a1 + 56) = v21;
          swift_bridgeObjectRelease();
          long long v22 = (void *)(a1 + 64);
          long long v23 = (void *)(a2 + 64);
          if (*(void *)(a1 + 104) != 1)
          {
            uint64_t v24 = *(void *)(a2 + 104);
            if (v24 != 1)
            {
              *long long v22 = *v23;
              *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
              *(void *)(a1 + 80) = *(void *)(a2 + 80);
              *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
              *(void *)(a1 + 96) = *(void *)(a2 + 96);
              *(void *)(a1 + 104) = v24;
              swift_bridgeObjectRelease();
              uint64_t v29 = *(void *)(a2 + 120);
              *(void *)(a1 + 112) = *(void *)(a2 + 112);
              *(void *)(a1 + 120) = v29;
              swift_bridgeObjectRelease();
              uint64_t v30 = *(void *)(a2 + 136);
              *(void *)(a1 + 128) = *(void *)(a2 + 128);
              *(void *)(a1 + 136) = v30;
              swift_bridgeObjectRelease();
              uint64_t v31 = *(void *)(a2 + 152);
              *(void *)(a1 + 144) = *(void *)(a2 + 144);
              *(void *)(a1 + 152) = v31;
              swift_bridgeObjectRelease();
              uint64_t v32 = *(void *)(a2 + 168);
              *(void *)(a1 + 160) = *(void *)(a2 + 160);
              *(void *)(a1 + 168) = v32;
              swift_bridgeObjectRelease();
              uint64_t v33 = *(void *)(a2 + 184);
              *(void *)(a1 + 176) = *(void *)(a2 + 176);
              *(void *)(a1 + 184) = v33;
              swift_bridgeObjectRelease();
              goto LABEL_12;
            }
            sub_100206D98(a1 + 64);
          }
          long long v25 = *(_OWORD *)(a2 + 144);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 144) = v25;
          long long v26 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v26;
          long long v27 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)long long v22 = *(_OWORD *)v23;
          *(_OWORD *)(a1 + 80) = v27;
          long long v28 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v28;
LABEL_12:
          uint64_t v19 = *(void *)(a2 + 200);
          *(void *)(a1 + 192) = *(void *)(a2 + 192);
          *(void *)(a1 + 200) = v19;
          swift_bridgeObjectRelease();
          return a1;
        }
        sub_100206DC8(a1 + 32);
      }
    }
    long long v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    long long v15 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v15;
    long long v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v16;
    long long v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    long long v18 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v18;
    goto LABEL_12;
  }
  sub_100206E28(a1 + 16);
LABEL_4:
  long long v6 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  long long v7 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v7;
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v10;
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for CardItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CardItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 208) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CardItem()
{
  return &type metadata for CardItem;
}

uint64_t destroy for Attributes(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if ((unint64_t)(*(void *)(a1 + 24) - 1) >= 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 88) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Attributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v6 == 1 || v6 == 2)
  {
    long long v7 = v5[7];
    *(_OWORD *)(a1 + 112) = v5[6];
    *(_OWORD *)(a1 + 128) = v7;
    long long v8 = v5[9];
    *(_OWORD *)(a1 + 144) = v5[8];
    *(_OWORD *)(a1 + 160) = v8;
    long long v9 = v5[3];
    *(_OWORD *)(a1 + 48) = v5[2];
    *(_OWORD *)(a1 + 64) = v9;
    long long v10 = v5[5];
    *(_OWORD *)(a1 + 80) = v5[4];
    *(_OWORD *)(a1 + 96) = v10;
    long long v11 = v5[1];
    *(_OWORD *)(a1 + 16) = *v5;
    *(_OWORD *)(a1 + 32) = v11;
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v6;
    uint64_t v12 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v12;
    uint64_t v13 = (_OWORD *)(a1 + 48);
    long long v14 = (_OWORD *)(a2 + 48);
    uint64_t v15 = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15 == 1)
    {
      long long v16 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v16;
      long long v17 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v17;
      long long v18 = *(_OWORD *)(a2 + 64);
      *uint64_t v13 = *v14;
      *(_OWORD *)(a1 + 64) = v18;
      long long v19 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v19;
    }
    else
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v15;
      uint64_t v20 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v20;
      uint64_t v21 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v21;
      uint64_t v22 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v22;
      uint64_t v23 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v23;
      uint64_t v24 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  uint64_t v25 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v25;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Attributes(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v6 == 2)
  {
    if (v7 == 1 || v7 == 2) {
      goto LABEL_4;
    }
LABEL_9:
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    uint64_t v15 = (_OWORD *)(a1 + 48);
    long long v16 = (long long *)(a2 + 48);
    uint64_t v17 = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17 == 1)
    {
      long long v18 = *v16;
      long long v19 = *(_OWORD *)(a2 + 64);
      long long v20 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v20;
      *uint64_t v15 = v18;
      *(_OWORD *)(a1 + 64) = v19;
      long long v21 = *(_OWORD *)(a2 + 112);
      long long v22 = *(_OWORD *)(a2 + 128);
      long long v23 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v23;
      *(_OWORD *)(a1 + 112) = v21;
      *(_OWORD *)(a1 + 128) = v22;
      goto LABEL_16;
    }
    uint64_t v31 = *(void *)v16;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)uint64_t v15 = v31;
LABEL_15:
    uint64_t v32 = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 64) = v32;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
  if (v7 == 2)
  {
    sub_100206DF8(a1 + 16);
LABEL_13:
    long long v24 = *(_OWORD *)(a2 + 32);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 32) = v24;
    long long v25 = *(_OWORD *)(a2 + 96);
    long long v27 = *(_OWORD *)(a2 + 48);
    long long v26 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v25;
    *(_OWORD *)(a1 + 48) = v27;
    *(_OWORD *)(a1 + 64) = v26;
    long long v28 = *(_OWORD *)(a2 + 160);
    long long v30 = *(_OWORD *)(a2 + 112);
    long long v29 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v28;
    *(_OWORD *)(a1 + 112) = v30;
    *(_OWORD *)(a1 + 128) = v29;
    goto LABEL_16;
  }
  if (v6 == 1)
  {
    if (v7 == 1)
    {
LABEL_4:
      long long v8 = *(_OWORD *)(a2 + 32);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 32) = v8;
      long long v9 = *(_OWORD *)(a2 + 48);
      long long v10 = *(_OWORD *)(a2 + 64);
      long long v11 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v11;
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 64) = v10;
      long long v12 = *(_OWORD *)(a2 + 112);
      long long v13 = *(_OWORD *)(a2 + 128);
      long long v14 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v14;
      *(_OWORD *)(a1 + 112) = v12;
      *(_OWORD *)(a1 + 128) = v13;
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  if (v7 == 1)
  {
    sub_100206DC8(a1 + 16);
    goto LABEL_13;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = (_OWORD *)(a1 + 48);
  uint64_t v35 = (long long *)(a2 + 48);
  uint64_t v36 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) == 1)
  {
    if (v36 == 1)
    {
      long long v37 = *v35;
      long long v38 = *(_OWORD *)(a2 + 64);
      long long v39 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v39;
      *uint64_t v34 = v37;
      *(_OWORD *)(a1 + 64) = v38;
      long long v40 = *(_OWORD *)(a2 + 112);
      long long v41 = *(_OWORD *)(a2 + 128);
      long long v42 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v42;
      *(_OWORD *)(a1 + 112) = v40;
      *(_OWORD *)(a1 + 128) = v41;
      goto LABEL_16;
    }
    uint64_t v49 = *(void *)v35;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)uint64_t v34 = v49;
    goto LABEL_15;
  }
  if (v36 == 1)
  {
    sub_100206D98(a1 + 48);
    long long v43 = *(_OWORD *)(a2 + 96);
    long long v45 = *v35;
    long long v44 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v43;
    *uint64_t v34 = v45;
    *(_OWORD *)(a1 + 64) = v44;
    long long v46 = *(_OWORD *)(a2 + 160);
    long long v48 = *(_OWORD *)(a2 + 112);
    long long v47 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v46;
    *(_OWORD *)(a1 + 112) = v48;
    *(_OWORD *)(a1 + 128) = v47;
  }
  else
  {
    uint64_t v50 = *(void *)v35;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)uint64_t v34 = v50;
    uint64_t v51 = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 64) = v51;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_16:
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Attributes(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for Attributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 == 2) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6 == 2)
  {
    sub_100206DF8(a1 + 16);
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v7;
    long long v8 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v8;
    long long v9 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v9;
    long long v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v10;
    long long v11 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v11;
    goto LABEL_8;
  }
  if (v5 == 1) {
    goto LABEL_7;
  }
  if (v6 == 1)
  {
    sub_100206DC8(a1 + 16);
    goto LABEL_7;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)(a1 + 48);
  long long v16 = (void *)(a2 + 48);
  if (*(void *)(a1 + 88) != 1)
  {
    uint64_t v17 = *(void *)(a2 + 88);
    if (v17 != 1)
    {
      *uint64_t v15 = *v16;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v17;
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v24;
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_100206D98(a1 + 48);
  }
  long long v18 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v18;
  long long v19 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v19;
  long long v20 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(_OWORD *)(a1 + 64) = v20;
  long long v21 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v21;
LABEL_8:
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Attributes(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 192)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Attributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 192) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attributes()
{
  return &type metadata for Attributes;
}

uint64_t destroy for AppPlatform(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = *(void *)(a1 + 72);
    if (result != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for AppPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    long long v6 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v10 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v10;
    long long v11 = (_OWORD *)(a1 + 32);
    uint64_t v12 = (_OWORD *)(a2 + 32);
    uint64_t v13 = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13 == 1)
    {
      long long v14 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v14;
      long long v15 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v15;
      long long v16 = *(_OWORD *)(a2 + 48);
      _OWORD *v11 = *v12;
      *(_OWORD *)(a1 + 48) = v16;
      long long v17 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v17;
    }
    else
    {
      *(void *)long long v11 = *(void *)v12;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v13;
      uint64_t v18 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v18;
      uint64_t v19 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v19;
      uint64_t v20 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v20;
      uint64_t v21 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v21;
      uint64_t v22 = *(void *)(a2 + 144);
      uint64_t v23 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = v22;
      *(void *)(a1 + 152) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithCopy for AppPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) == 1)
  {
    if (v4 == 1)
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      long long v6 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 48);
      long long v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)(a1 + 48) = v7;
      long long v9 = *(_OWORD *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 112);
      long long v11 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 112) = v10;
      return a1;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v19 = (_OWORD *)(a1 + 32);
    uint64_t v20 = (long long *)(a2 + 32);
    uint64_t v21 = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21 == 1)
    {
      long long v22 = *v20;
      long long v23 = *(_OWORD *)(a2 + 48);
      long long v24 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v24;
      *uint64_t v19 = v22;
      *(_OWORD *)(a1 + 48) = v23;
      long long v25 = *(_OWORD *)(a2 + 96);
      long long v26 = *(_OWORD *)(a2 + 112);
      long long v27 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v27;
      *(_OWORD *)(a1 + 96) = v25;
      *(_OWORD *)(a1 + 112) = v26;
      return a1;
    }
    uint64_t v37 = *(void *)v20;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)uint64_t v19 = v37;
LABEL_15:
    uint64_t v45 = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v45;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  if (v4 == 1)
  {
    sub_100206DC8(a1);
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    long long v13 = *(_OWORD *)(a2 + 80);
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v14;
    long long v16 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v17;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v28 = (_OWORD *)(a1 + 32);
  long long v29 = (long long *)(a2 + 32);
  uint64_t v30 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) == 1)
  {
    if (v30 == 1)
    {
      long long v31 = *v29;
      long long v32 = *(_OWORD *)(a2 + 48);
      long long v33 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v33;
      *long long v28 = v31;
      *(_OWORD *)(a1 + 48) = v32;
      long long v34 = *(_OWORD *)(a2 + 96);
      long long v35 = *(_OWORD *)(a2 + 112);
      long long v36 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v36;
      *(_OWORD *)(a1 + 96) = v34;
      *(_OWORD *)(a1 + 112) = v35;
      return a1;
    }
    uint64_t v44 = *(void *)v29;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)long long v28 = v44;
    goto LABEL_15;
  }
  if (v30 == 1)
  {
    sub_100206D98(a1 + 32);
    long long v38 = *(_OWORD *)(a2 + 80);
    long long v40 = *v29;
    long long v39 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v38;
    *long long v28 = v40;
    *(_OWORD *)(a1 + 48) = v39;
    long long v41 = *(_OWORD *)(a2 + 144);
    long long v43 = *(_OWORD *)(a2 + 96);
    long long v42 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v41;
    *(_OWORD *)(a1 + 96) = v43;
    *(_OWORD *)(a1 + 112) = v42;
  }
  else
  {
    uint64_t v46 = *(void *)v29;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)long long v28 = v46;
    uint64_t v47 = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v47;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

__n128 initializeWithTake for AppAttributes(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for AppPlatform(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == 1) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    sub_100206DC8(a1);
LABEL_4:
    long long v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    long long v6 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v10;
  swift_bridgeObjectRelease();
  long long v11 = (void *)(a1 + 32);
  long long v12 = (void *)(a2 + 32);
  if (*(void *)(a1 + 72) != 1)
  {
    uint64_t v13 = *(void *)(a2 + 72);
    if (v13 != 1)
    {
      void *v11 = *v12;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v13;
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v20;
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v21;
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v22;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100206D98(a1 + 32);
  }
  long long v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v14;
  long long v15 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)long long v11 = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for AppPlatform(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AppPlatform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 160) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppPlatform()
{
  return &type metadata for AppPlatform;
}

uint64_t destroy for AppAttributes(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 72);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AppAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  int v6 = (_OWORD *)(a1 + 32);
  uint64_t v7 = a2 + 32;
  uint64_t v8 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    long long v9 = *(_OWORD *)(v7 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v7 + 64);
    *(_OWORD *)(a1 + 112) = v9;
    long long v10 = *(_OWORD *)(v7 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v7 + 96);
    *(_OWORD *)(a1 + 144) = v10;
    long long v11 = *(_OWORD *)(v7 + 16);
    *int v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 48) = v11;
    long long v12 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(a1 + 80) = v12;
  }
  else
  {
    *(void *)int v6 = *(void *)v7;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(v7 + 8);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    uint64_t v13 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v13;
    uint64_t v14 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v14;
    uint64_t v15 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v15;
    uint64_t v16 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v16;
    uint64_t v17 = *(void *)(a2 + 144);
    uint64_t v18 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v17;
    *(void *)(a1 + 152) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for AppAttributes(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (long long *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *v5;
      long long v8 = *(_OWORD *)(a2 + 48);
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *uint64_t v4 = v7;
      *(_OWORD *)(a1 + 48) = v8;
      long long v10 = *(_OWORD *)(a2 + 96);
      long long v11 = *(_OWORD *)(a2 + 112);
      long long v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 96) = v10;
      *(_OWORD *)(a1 + 112) = v11;
    }
    else
    {
      uint64_t v19 = *(void *)v5;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)uint64_t v4 = v19;
      uint64_t v20 = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_100206D98(a1 + 32);
    long long v13 = *(_OWORD *)(a2 + 80);
    long long v15 = *v5;
    long long v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *uint64_t v4 = v15;
    *(_OWORD *)(a1 + 48) = v14;
    long long v16 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v17;
  }
  else
  {
    uint64_t v21 = *(void *)v5;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)uint64_t v4 = v21;
    uint64_t v22 = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v22;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t assignWithTake for AppAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(a1 + 32);
  long long v7 = (void *)(a2 + 32);
  if (*(void *)(a1 + 72) != 1)
  {
    uint64_t v8 = *(void *)(a2 + 72);
    if (v8 != 1)
    {
      *uint64_t v6 = *v7;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v8;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v14;
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v17;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100206D98(a1 + 32);
  }
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  *(_OWORD *)(a1 + 48) = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for AppAttributes(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppAttributes()
{
  return &type metadata for AppAttributes;
}

uint64_t destroy for AppArtwork()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppArtwork(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppArtwork(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AppArtwork(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for AppArtwork(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppArtwork(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppArtwork(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppArtwork()
{
  return &type metadata for AppArtwork;
}

uint64_t getEnumTagSinglePayload for ActivityStatisticsUnit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppArtwork.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100208D40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppArtwork.CodingKeys()
{
  return &type metadata for AppArtwork.CodingKeys;
}

ValueMetadata *type metadata accessor for AppAttributes.CodingKeys()
{
  return &type metadata for AppAttributes.CodingKeys;
}

ValueMetadata *type metadata accessor for AppPlatform.CodingKeys()
{
  return &type metadata for AppPlatform.CodingKeys;
}

unsigned char *_s10FitnessApp13AppAttributesV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100208E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attributes.CodingKeys()
{
  return &type metadata for Attributes.CodingKeys;
}

ValueMetadata *type metadata accessor for CardItem.CodingKeys()
{
  return &type metadata for CardItem.CodingKeys;
}

ValueMetadata *type metadata accessor for CardContent.CodingKeys()
{
  return &type metadata for CardContent.CodingKeys;
}

ValueMetadata *type metadata accessor for Relationship.CodingKeys()
{
  return &type metadata for Relationship.CodingKeys;
}

unsigned char *_s10FitnessApp8CardItemV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100208FA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditorialItem.CodingKeys()
{
  return &type metadata for EditorialItem.CodingKeys;
}

unsigned char *_s10FitnessApp11AppPlatformV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10020907CLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for EditorialItemsList.CodingKeys()
{
  return &type metadata for EditorialItemsList.CodingKeys;
}

unint64_t sub_1002090B8()
{
  unint64_t result = qword_10094FB98;
  if (!qword_10094FB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FB98);
  }
  return result;
}

unint64_t sub_100209110()
{
  unint64_t result = qword_10094FBA0;
  if (!qword_10094FBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBA0);
  }
  return result;
}

unint64_t sub_100209168()
{
  unint64_t result = qword_10094FBA8;
  if (!qword_10094FBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBA8);
  }
  return result;
}

unint64_t sub_1002091C0()
{
  unint64_t result = qword_10094FBB0;
  if (!qword_10094FBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBB0);
  }
  return result;
}

unint64_t sub_100209218()
{
  unint64_t result = qword_10094FBB8;
  if (!qword_10094FBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBB8);
  }
  return result;
}

unint64_t sub_100209270()
{
  unint64_t result = qword_10094FBC0;
  if (!qword_10094FBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBC0);
  }
  return result;
}

unint64_t sub_1002092C8()
{
  unint64_t result = qword_10094FBC8;
  if (!qword_10094FBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBC8);
  }
  return result;
}

unint64_t sub_100209320()
{
  unint64_t result = qword_10094FBD0;
  if (!qword_10094FBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBD0);
  }
  return result;
}

unint64_t sub_100209378()
{
  unint64_t result = qword_10094FBD8;
  if (!qword_10094FBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBD8);
  }
  return result;
}

unint64_t sub_1002093D0()
{
  unint64_t result = qword_10094FBE0;
  if (!qword_10094FBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBE0);
  }
  return result;
}

unint64_t sub_100209428()
{
  unint64_t result = qword_10094FBE8;
  if (!qword_10094FBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBE8);
  }
  return result;
}

unint64_t sub_100209480()
{
  unint64_t result = qword_10094FBF0;
  if (!qword_10094FBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBF0);
  }
  return result;
}

unint64_t sub_1002094D8()
{
  unint64_t result = qword_10094FBF8;
  if (!qword_10094FBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FBF8);
  }
  return result;
}

unint64_t sub_100209530()
{
  unint64_t result = qword_10094FC00;
  if (!qword_10094FC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC00);
  }
  return result;
}

unint64_t sub_100209588()
{
  unint64_t result = qword_10094FC08;
  if (!qword_10094FC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC08);
  }
  return result;
}

unint64_t sub_1002095E0()
{
  unint64_t result = qword_10094FC10;
  if (!qword_10094FC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC10);
  }
  return result;
}

unint64_t sub_100209638()
{
  unint64_t result = qword_10094FC18;
  if (!qword_10094FC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC18);
  }
  return result;
}

unint64_t sub_100209690()
{
  unint64_t result = qword_10094FC20;
  if (!qword_10094FC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC20);
  }
  return result;
}

unint64_t sub_1002096E8()
{
  unint64_t result = qword_10094FC28;
  if (!qword_10094FC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC28);
  }
  return result;
}

unint64_t sub_100209740()
{
  unint64_t result = qword_10094FC30;
  if (!qword_10094FC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC30);
  }
  return result;
}

unint64_t sub_100209798()
{
  unint64_t result = qword_10094FC38;
  if (!qword_10094FC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC38);
  }
  return result;
}

unint64_t sub_1002097F0()
{
  unint64_t result = qword_10094FC40;
  if (!qword_10094FC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC40);
  }
  return result;
}

unint64_t sub_100209848()
{
  unint64_t result = qword_10094FC48;
  if (!qword_10094FC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC48);
  }
  return result;
}

unint64_t sub_1002098A0()
{
  unint64_t result = qword_10094FC50;
  if (!qword_10094FC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC50);
  }
  return result;
}

unint64_t sub_1002098F8()
{
  unint64_t result = qword_10094FC58;
  if (!qword_10094FC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC58);
  }
  return result;
}

unint64_t sub_100209950()
{
  unint64_t result = qword_10094FC60;
  if (!qword_10094FC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC60);
  }
  return result;
}

unint64_t sub_1002099A8()
{
  unint64_t result = qword_10094FC68;
  if (!qword_10094FC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC68);
  }
  return result;
}

uint64_t sub_1002099FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100209A74(uint64_t a1)
{
  return a1;
}

unint64_t sub_100209AEC()
{
  unint64_t result = qword_10094FC80;
  if (!qword_10094FC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC80);
  }
  return result;
}

void *sub_100209B40(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[4];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001F0E74(v8, v7, v2, v3, v4, v5);
  return a1;
}

void *sub_100209C08(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[4];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100209CCC(v8, v7, v2, v3, v4, v5);
  return a1;
}

uint64_t sub_100209CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100209D54()
{
  unint64_t result = qword_10094FC90;
  if (!qword_10094FC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FC90);
  }
  return result;
}

unint64_t sub_100209DA8()
{
  unint64_t result = qword_10094FCA0;
  if (!qword_10094FCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FCA0);
  }
  return result;
}

void sub_100209DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 != 2)
  {
    sub_100209E50(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
}

void sub_100209E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100209CCC(a5, a6, a7, a8, a9, a10);
  }
}

void *sub_100209F5C(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

void sub_100209FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 != 2)
  {
    sub_10020A01C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
}

void sub_10020A01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001F0E74(a5, a6, a7, a8, a9, a10);
  }
}

uint64_t sub_10020A128(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v9 = *(_OWORD *)(a1 + 80);
  swift_bridgeObjectRetain();
  sub_100209FC8(v11, v10, v2, v3, v4, v5, v6, v7, v9, *((uint64_t *)&v9 + 1));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10020A208(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v9 = *(_OWORD *)(a1 + 80);
  swift_bridgeObjectRelease();
  sub_100209DFC(v11, v10, v2, v3, v4, v5, v6, v7, v9, *((uint64_t *)&v9 + 1));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10020A2E8()
{
  unint64_t result = qword_10094FCB0;
  if (!qword_10094FCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FCB0);
  }
  return result;
}

uint64_t sub_10020A33C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 96);
  long long v11 = *(_OWORD *)(a1 + 80);
  swift_bridgeObjectRetain();
  sub_10020A430(v12, v2, v3, v4, v5, v6, v7, v8, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1));
  return a1;
}

uint64_t sub_10020A430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    sub_100209FC8(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10020A564(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 96);
  long long v11 = *(_OWORD *)(a1 + 80);
  swift_bridgeObjectRelease();
  sub_10020A658(v12, v2, v3, v4, v5, v6, v7, v8, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1));
  return a1;
}

uint64_t sub_10020A658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    sub_100209DFC(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10020A78C()
{
  unint64_t result = qword_10094FCC8;
  if (!qword_10094FCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FCC8);
  }
  return result;
}

unint64_t sub_10020A7E0()
{
  unint64_t result = qword_10094FCD8;
  if (!qword_10094FCD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FCD8);
  }
  return result;
}

unint64_t sub_10020A834()
{
  unint64_t result = qword_10094FCE8;
  if (!qword_10094FCE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FCE8);
  }
  return result;
}

uint64_t sub_10020A888(uint64_t result)
{
  if (result != 2) {
    return sub_10020A898(result);
  }
  return result;
}

uint64_t sub_10020A898(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10020A8A8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000A1370(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10020A914()
{
  unint64_t result = qword_10094FD00;
  if (!qword_10094FD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FD00);
  }
  return result;
}

id sub_10020AB34()
{
  return sub_10020C168(0, type metadata accessor for TrendsSplashVideoView);
}

uint64_t sub_10020ABE0()
{
  return type metadata accessor for TrendsSplashVideoView();
}

uint64_t sub_10020ABE8()
{
  uint64_t v1 = *(void **)(v0 + 120);
  swift_release();
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_10020AC5C()
{
  uint64_t v1 = OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player);
  if (v2) {
    [v2 replaceCurrentItemWithPlayerItem:0];
  }
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_playerLayer;
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_playerLayer);
  if (v4)
  {
    [v4 setPlayer:0];
    uint64_t v5 = *(void **)(v0 + v3);
    if (v5) {
      [v5 removeFromSuperlayer];
    }
  }
  uint64_t v6 = *(void **)(v0 + v1);
  *(void *)(v0 + v1) = 0;

  uint64_t v7 = *(void **)(v0 + v3);
  *(void *)(v0 + v3) = 0;
}

id sub_10020AD40(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_listViewController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_observers] = _swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_availabilityManager] = a1;
  uint64_t v3 = self;
  id v4 = a1;
  id v5 = [v3 mainBundle];
  v6._uint64_t countAndFlagsBits = 0xD000000000000022;
  v20._uint64_t countAndFlagsBits = 0xD000000000000039;
  v20._object = (void *)0x80000001007B9580;
  v6._object = (void *)0x80000001007B9550;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v20);

  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10074E640;
  *(void *)(v8 + 56) = &type metadata for Int;
  *(void *)(v8 + 64) = &protocol witness table for Int;
  *(void *)(v8 + 32) = 90;
  *(void *)(v8 + 96) = &type metadata for Int;
  *(void *)(v8 + 104) = &protocol witness table for Int;
  *(void *)(v8 + 72) = 365;
  static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v9 = [v3 mainBundle];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 localizedStringForKey:v10 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v19.receiver = v1;
  v19.super_class = (Class)type metadata accessor for TrendsSplashViewController();
  id v14 = [super initWithTitle:v12 detailText:v13 icon:0 contentLayout:1];

  id v15 = v14;
  id v16 = [v15 contentView];
  id v17 = [self systemBackgroundColor];
  [v16 setBackgroundColor:v17];

  return v15;
}

void sub_10020B088()
{
  uint64_t v1 = v0;
  v37.receiver = v0;
  v37.super_class = (Class)type metadata accessor for TrendsSplashViewController();
  [super viewDidLoad];
  uint64_t v2 = self;
  id v3 = [v2 mainBundle];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 localizedStringForKey:v4 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = [v2 mainBundle];
  v7._uint64_t countAndFlagsBits = 0xD000000000000022;
  v38._uint64_t countAndFlagsBits = 0xD000000000000039;
  v38._object = (void *)0x80000001007B9580;
  v7._object = (void *)0x80000001007B9550;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v38);

  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10074E640;
  *(void *)(v9 + 56) = &type metadata for Int;
  *(void *)(v9 + 64) = &protocol witness table for Int;
  *(void *)(v9 + 32) = 90;
  *(void *)(v9 + 96) = &type metadata for Int;
  *(void *)(v9 + 104) = &protocol witness table for Int;
  *(void *)(v9 + 72) = 365;
  uint64_t v10 = static String.localizedStringWithFormat(_:_:)();
  NSString v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 10;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v10;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  id v15 = [v1 headerView];
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 setDetailText:v16];

  id v17 = [self boldButton];
  long long v18 = self;
  id v19 = v17;
  id v20 = [v18 quaternarySystemFillColor];
  [v19 setTintColor:v20];

  id v21 = [v2 mainBundle];
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 localizedStringForKey:v22 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 setTitle:v24 forState:0];

  id v25 = [v1 buttonTray];
  [v25 addButton:v19];

  [v19 addTarget:v1 action:"buttonTappedWithSender:" forControlEvents:64];
  id v26 = [v1 navigationItem];
  [v26 setBackBarButtonItem:0];

  id v27 = [v1 navigationController];
  if (v27)
  {
    long long v28 = v27;
    [v27 setNavigationBarHidden:1 animated:0];
  }
  sub_10020BD40();
  id v29 = [v1 view];
  if (!v29) {
    goto LABEL_15;
  }
  uint64_t v30 = v29;
  id v31 = [v29 subviews];

  sub_10007E2D8(0, (unint64_t *)&qword_10094E530);
  unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_6;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (!*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_6:
  if ((v32 & 0xC000000000000001) != 0)
  {
    id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v33 = *(id *)(v32 + 32);
LABEL_9:
    long long v34 = v33;
    swift_bridgeObjectRelease();
    id v35 = [v18 systemBackgroundColor];
    [v34 setBackgroundColor:v35];

LABEL_12:
    sub_10020B874();

    return;
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

void sub_10020B638(char a1)
{
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for TrendsSplashViewController();
  [super viewWillAppear:a1 & 1];
  sub_10020BD40();
  id v3 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView];
  if (v3)
  {
    NSString v4 = v3;
    id v5 = [v4 window];

    id v6 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player];
    if (v6)
    {
      Swift::String v7 = &selRef_pause;
      if (v5) {
        Swift::String v7 = &selRef_play;
      }
      [v6 *v7];
    }
  }
}

void sub_10020B73C(char a1)
{
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for TrendsSplashViewController();
  [super viewWillDisappear:a1 & 1];
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView;
  [*(id *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView] teardownPlayer];
  NSString v4 = *(void **)&v1[v3];
  if (v4)
  {
    [v4 removeFromSuperview];
    id v5 = *(void **)&v1[v3];
  }
  else
  {
    id v5 = 0;
  }
  *(void *)&v1[v3] = 0;
}

uint64_t sub_10020B874()
{
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  uint64_t v3 = self;
  id v4 = [v3 mainQueue];
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v19 = sub_10020C268;
  uint64_t v20 = v5;
  id v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  id v17 = sub_1000711BC;
  long long v18 = &unk_1008BB838;
  objc_super v6 = _Block_copy(&v15);
  swift_release();
  id v7 = [v2 addObserverForName:UIApplicationWillEnterForegroundNotification object:0 queue:v4 usingBlock:v6];
  _Block_release(v6);

  id v8 = [v1 defaultCenter];
  id v9 = [v3 mainQueue];
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v19 = sub_10020C270;
  uint64_t v20 = v10;
  id v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  id v17 = sub_1000711BC;
  long long v18 = &unk_1008BB860;
  id v11 = _Block_copy(&v15);
  swift_release();
  id v12 = [v8 addObserverForName:UIApplicationDidEnterBackgroundNotification object:0 queue:v9 usingBlock:v11];
  _Block_release(v11);

  sub_1000AFA94((uint64_t *)&unk_1009556C0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10074E640;
  *(void *)(v13 + 56) = swift_getObjectType();
  *(void *)(v13 + 32) = v7;
  *(void *)(v13 + 88) = swift_getObjectType();
  *(void *)(v13 + 64) = v12;
  *(void *)(v0 + OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_observers) = v13;
  return swift_bridgeObjectRelease();
}

void sub_10020BB44()
{
  static os_log_type_t.info.getter();
  id v0 = HKLogActivity;
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v2 = (void *)Strong;
    sub_10020BD40();
  }
  swift_beginAccess();
  uint64_t v3 = swift_unknownObjectWeakLoadStrong();
  if (v3)
  {
    id v4 = (void *)v3;
    uint64_t v5 = *(void **)(v3 + OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView);
    objc_super v6 = v5;

    if (v5)
    {
      id v7 = *(void **)&v6[OBJC_IVAR____TtC10FitnessApp21TrendsSplashVideoView_player];
      id v8 = v7;

      if (v7)
      {
        [v8 play];
      }
    }
  }
}

void sub_10020BC5C()
{
  static os_log_type_t.info.getter();
  id v0 = HKLogActivity;
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v2 = (char *)Strong;
    uint64_t v3 = OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView;
    [*(id *)(Strong + OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView) teardownPlayer];
    id v4 = *(void **)&v2[v3];
    if (v4)
    {
      [v4 removeFromSuperview];
      uint64_t v5 = *(void **)&v2[v3];
    }
    else
    {
      uint64_t v5 = 0;
    }
    *(void *)&v2[v3] = 0;
  }
}

void sub_10020BD40()
{
  uint64_t v1 = v0;
  id v2 = [v0 view];
  if (v2)
  {
    uint64_t v3 = v2;
    [v2 bounds];

    id v4 = objc_allocWithZone((Class)type metadata accessor for TrendsSplashVideoView());
    id v5 = sub_10003FDF0();
    if (v5)
    {
      objc_super v6 = v5;
      [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v7 = [v1 contentView];
      [v7 addSubview:v6];

      id v8 = [v6 leadingAnchor];
      id v9 = [v1 contentView];
      id v10 = [v9 leadingAnchor];

      id v11 = [v8 constraintEqualToAnchor:v10];
      id v12 = [v6 trailingAnchor];
      id v13 = [v1 contentView];
      id v14 = [v13 trailingAnchor];

      id v15 = [v12 constraintEqualToAnchor:v14];
      id v16 = [v6 topAnchor];
      id v17 = [v1 contentView];
      id v18 = [v17 topAnchor];

      id v19 = [v16 constraintEqualToAnchor:v18];
      id v20 = [v6 bottomAnchor];
      id v21 = [v1 contentView];
      id v22 = [v21 bottomAnchor];

      id v23 = [v20 constraintEqualToAnchor:v22];
      NSString v24 = self;
      sub_1000AFA94((uint64_t *)&unk_10095B850);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_100751160;
      *(void *)(v25 + 32) = v11;
      *(void *)(v25 + 40) = v15;
      *(void *)(v25 + 48) = v19;
      *(void *)(v25 + 56) = v23;
      specialized Array._endMutation()();
      sub_10007E2D8(0, (unint64_t *)&qword_10094C810);
      id v26 = v11;
      id v27 = v15;
      id v28 = v19;
      id v29 = v23;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v24 activateConstraints:isa];

      id v31 = *(id *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView];
      *(void *)&v1[OBJC_IVAR____TtC10FitnessApp26TrendsSplashViewController_videoView] = v6;
    }
  }
  else
  {
    __break(1u);
  }
}

id sub_10020C150(uint64_t a1)
{
  return sub_10020C168(a1, type metadata accessor for TrendsSplashViewController);
}

id sub_10020C168(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for TrendsSplashViewController()
{
  return self;
}

uint64_t sub_10020C230()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_10020C268()
{
}

void sub_10020C270()
{
}

id sub_10020C278()
{
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setBool:1 forKey:v2];

  id v3 = [self defaultCenter];
  if (qword_10094AEB8 != -1) {
    swift_once();
  }
  [v3 postNotificationName:qword_100998540 object:v0];

  return [v0 dismissViewControllerAnimated:1 completion:0];
}

uint64_t sub_10020C398()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

id sub_10020C4B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingHeaderSwiftUITableViewCell();
  return [super dealloc];
}

uint64_t type metadata accessor for ActivitySharingHeaderSwiftUITableViewCell()
{
  return self;
}

unint64_t sub_10020C50C()
{
  return 0xD000000000000029;
}

unsigned char *storeEnumTagSinglePayload for Health(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10020C5C4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Health()
{
  return &type metadata for Health;
}

uint64_t getEnumTagSinglePayload for FitnessFeatures(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FitnessFeatures(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10020C758);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FitnessFeatures()
{
  return &type metadata for FitnessFeatures;
}

unint64_t sub_10020C794()
{
  unint64_t result = qword_10094FDD8;
  if (!qword_10094FDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FDD8);
  }
  return result;
}

unint64_t sub_10020C7EC()
{
  unint64_t result = qword_10094FDE0;
  if (!qword_10094FDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FDE0);
  }
  return result;
}

const char *sub_10020C858()
{
  return "Health";
}

const char *sub_10020C86C()
{
  return "chamomile";
}

unint64_t sub_10020C884()
{
  unint64_t result = qword_10094FDE8;
  if (!qword_10094FDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FDE8);
  }
  return result;
}

unint64_t sub_10020C8DC()
{
  unint64_t result = qword_10094FDF0;
  if (!qword_10094FDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FDF0);
  }
  return result;
}

unint64_t sub_10020C934()
{
  unint64_t result = qword_10094FDF8;
  if (!qword_10094FDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FDF8);
  }
  return result;
}

unint64_t sub_10020C98C()
{
  unint64_t result = qword_10094FE00;
  if (!qword_10094FE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FE00);
  }
  return result;
}

uint64_t sub_10020C9E0()
{
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v0 = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D340);
  static AppDependencyManager.shared.getter();
  uint64_t v1 = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094FF10);
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  qword_1009977B0 = v0;
  *(void *)algn_1009977B8 = v1;
  qword_1009977C0 = result;
  return result;
}

uint64_t sub_10020CAD4()
{
  uint64_t v0 = sub_1000AFA94(&qword_10094D328);
  __chkstk_darwin(v0 - 8);
  int v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = type metadata accessor for TypeDisplayRepresentation();
  sub_1000258C4(v5, qword_1009977C8);
  sub_1000876DC(v5, (uint64_t)qword_1009977C8);
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_10020CC40()
{
  uint64_t v0 = sub_1000AFA94(&qword_10094FF38);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000AFA94(&qword_10094FF40);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_1000AFA94(&qword_10094FF30);
  sub_1000258C4(v5, qword_1009977E0);
  sub_1000876DC(v5, (uint64_t)qword_1009977E0);
  sub_1001B5C6C();
  EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._object = (void *)0x80000001007B85D0;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for EntityURLRepresentation.StringInterpolation.Token.id<A>(_:), v0);
  EntityURLRepresentation.StringInterpolation.appendInterpolation(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v7);
  return EntityURLRepresentation.init(stringInterpolation:)();
}

id sub_10020CE2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v6 = self;
  Swift::String v7 = *(void **)(v1 + 224);
  id v8 = [v7 startDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v10 = [self fu_bodyShortFont];
  id v11 = [v6 formattedListStringForDate:isa font:v10];

  id v12 = [v11 string];
  id v13 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  AppDependency.wrappedValue.getter();
  id v16 = v36;
  id v36 = 0;
  id v17 = [v16 localizedGoalDescriptionForWorkout:v7 withValue:&v36 appendActivityType:0];

  id v18 = v36;
  if (v17)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;
    id v22 = v18;
  }
  else
  {
    id v23 = v36;
    uint64_t v19 = 0;
    unint64_t v21 = 0;
  }
  AppDependency.wrappedValue.getter();
  id v24 = v36;
  id v25 = [v7 displayDetail:v36];

  if (v25)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v28 = v27;

    swift_bridgeObjectRelease();
  }
  else
  {
    if (v21) {
      id v29 = (void *)v19;
    }
    else {
      id v29 = 0;
    }
    unint64_t v30 = 0xE000000000000000;
    if (v21) {
      unint64_t v30 = v21;
    }
    id v36 = v29;
    unint64_t v37 = v30;
    uint64_t v26 = String.init<A>(_:)();
    id v28 = v31;
  }
  id v36 = v13;
  unint64_t v37 = v15;
  v32._uint64_t countAndFlagsBits = 548913696;
  v32._object = (void *)0xA400000000000000;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = v26;
  v33._object = v28;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  return v36;
}

uint64_t sub_10020D120()
{
  uint64_t v1 = sub_1000AFA94(&qword_10094DE78);
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_1000AFA94(&qword_10094D328);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  __chkstk_darwin(v8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v9);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v0[1]);
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v10);
  LocalizedStringResource.init(stringInterpolation:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  v12._uint64_t countAndFlagsBits = (uint64_t)sub_10020CE2C();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  LocalizedStringResource.init(stringInterpolation:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  swift_bridgeObjectRetain();
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t sub_10020D3BC@<X0>(void *a1@<X8>)
{
  if (qword_10094A660 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1009977B8;
  uint64_t v3 = qword_1009977C0;
  *a1 = qword_1009977B0;
  a1[1] = v2;
  a1[2] = v3;
  swift_retain();
  swift_retain();

  return swift_retain();
}

unint64_t sub_10020D454()
{
  unint64_t result = qword_10094FE08;
  if (!qword_10094FE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FE08);
  }
  return result;
}

uint64_t sub_10020D4A8@<X0>(uint64_t a1@<X8>)
{
  if (qword_10094A670 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1000AFA94(&qword_10094FF30);
  uint64_t v3 = sub_1000876DC(v2, (uint64_t)qword_1009977E0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t sub_10020D558()
{
  unint64_t result = qword_10094FE10;
  if (!qword_10094FE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FE10);
  }
  return result;
}

unint64_t sub_10020D5B0()
{
  unint64_t result = qword_10094FE18;
  if (!qword_10094FE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FE18);
  }
  return result;
}

unint64_t sub_10020D608()
{
  unint64_t result = qword_10094FE20;
  if (!qword_10094FE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FE20);
  }
  return result;
}

unint64_t sub_10020D660()
{
  unint64_t result = qword_10094FE28;
  if (!qword_10094FE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FE28);
  }
  return result;
}

uint64_t sub_10020D6B4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10020D6C0()
{
  sub_10021232C();
  uint64_t v2 = URLRepresentableEntity.urlRepresentationParameter.getter();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return sub_1001B8FDC(v3, v0, v2, v1);
}

uint64_t sub_10020D754@<X0>(uint64_t a1@<X8>)
{
  if (qword_10094A668 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = sub_1000876DC(v2, (uint64_t)qword_1009977C8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_10020D7FC()
{
  return sub_1000A132C(&qword_10094FE38, &qword_10094FE40);
}

uint64_t sub_10020D838(uint64_t a1)
{
  unint64_t v2 = sub_1001B5C6C();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10020D888()
{
  unint64_t result = qword_10094FE48;
  if (!qword_10094FE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FE48);
  }
  return result;
}

uint64_t sub_10020D8E0(uint64_t a1)
{
  unint64_t v2 = sub_10020D660();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t destroy for WorkoutEntity(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for WorkoutEntity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  uint64_t v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  uint64_t v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  uint64_t v13 = a2[21];
  a1[20] = a2[20];
  a1[21] = v13;
  uint64_t v14 = a2[23];
  a1[22] = a2[22];
  a1[23] = v14;
  uint64_t v15 = a2[25];
  a1[24] = a2[24];
  a1[25] = v15;
  uint64_t v16 = a2[27];
  a1[26] = a2[26];
  a1[27] = v16;
  unint64_t v21 = (void *)a2[28];
  uint64_t v17 = a2[29];
  a1[28] = v21;
  a1[29] = v17;
  uint64_t v18 = a2[31];
  a1[30] = a2[30];
  a1[31] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v19 = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for WorkoutEntity(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  a1[13] = a2[13];
  swift_retain();
  swift_release();
  a1[14] = a2[14];
  swift_retain();
  swift_release();
  a1[15] = a2[15];
  swift_retain();
  swift_release();
  a1[16] = a2[16];
  swift_retain();
  swift_release();
  a1[17] = a2[17];
  swift_retain();
  swift_release();
  a1[18] = a2[18];
  swift_retain();
  swift_release();
  a1[19] = a2[19];
  swift_retain();
  swift_release();
  a1[20] = a2[20];
  swift_retain();
  swift_release();
  a1[21] = a2[21];
  swift_retain();
  swift_release();
  a1[22] = a2[22];
  swift_retain();
  swift_release();
  a1[23] = a2[23];
  swift_retain();
  swift_release();
  a1[24] = a2[24];
  swift_retain();
  swift_release();
  a1[25] = a2[25];
  swift_retain();
  swift_release();
  a1[26] = a2[26];
  swift_retain();
  swift_release();
  a1[27] = a2[27];
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)a2[28];
  uint64_t v5 = (void *)a1[28];
  a1[28] = v4;
  id v6 = v4;

  a1[29] = a2[29];
  swift_retain();
  swift_release();
  a1[30] = a2[30];
  swift_retain();
  swift_release();
  a1[31] = a2[31];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for WorkoutEntity(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t assignWithTake for WorkoutEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_release();
  swift_release();
  long long v6 = *(void **)(a1 + 224);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);

  swift_release();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  swift_release();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkoutEntity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 256)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkoutEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 256) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 256) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkoutEntity()
{
  return &type metadata for WorkoutEntity;
}

void sub_10020E1EC(uint64_t a1)
{
}

void sub_10020E200(uint64_t a1)
{
}

void sub_10020E214(uint64_t a1)
{
}

void sub_10020E228(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [objc_allocWithZone((Class)NSUnitConverterLinear) initWithCoefficient:0.0166666667];
  id v5 = objc_allocWithZone((Class)NSUnitFrequency);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithSymbol:v6 converter:v4];

  *a3 = v7;
}

uint64_t sub_10020E2C4(uint64_t a1, _OWORD *a2)
{
  *(void *)(v2 + 272) = a1;
  *(void *)(v2 + 280) = sub_1000AFA94(&qword_10094F078);
  *(void *)(v2 + 288) = swift_task_alloc();
  long long v4 = a2[13];
  *(_OWORD *)(v2 + 208) = a2[12];
  *(_OWORD *)(v2 + 224) = v4;
  long long v5 = a2[15];
  *(_OWORD *)(v2 + 240) = a2[14];
  *(_OWORD *)(v2 + 256) = v5;
  long long v6 = a2[9];
  *(_OWORD *)(v2 + 144) = a2[8];
  *(_OWORD *)(v2 + 160) = v6;
  long long v7 = a2[11];
  *(_OWORD *)(v2 + 176) = a2[10];
  *(_OWORD *)(v2 + 192) = v7;
  long long v8 = a2[5];
  *(_OWORD *)(v2 + 80) = a2[4];
  *(_OWORD *)(v2 + 96) = v8;
  long long v9 = a2[7];
  *(_OWORD *)(v2 + 112) = a2[6];
  *(_OWORD *)(v2 + 128) = v9;
  long long v10 = a2[1];
  *(_OWORD *)(v2 + 16) = *a2;
  *(_OWORD *)(v2 + 32) = v10;
  long long v11 = a2[3];
  *(_OWORD *)(v2 + 48) = a2[2];
  *(_OWORD *)(v2 + 64) = v11;
  return _swift_task_switch(sub_10020E3A0, 0, 0);
}

uint64_t sub_10020E3A0()
{
  uint64_t v1 = (void *)v0[30];
  id v2 = [v1 fiui_activityType];
  if (!v2)
  {
    __break(1u);
    return withCheckedContinuation<A>(isolation:function:_:)(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  long long v10 = v2;
  unsigned int v11 = [v2 isDownhillSnowSport];

  if (v11)
  {
    uint64_t v12 = swift_task_alloc();
    v0[37] = v12;
    *(void *)(v12 + 16) = v0 + 2;
    uint64_t v13 = (void *)swift_task_alloc();
    v0[38] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10020E6DC;
    uint64_t v9 = v0[35];
    id v2 = (id)v0[36];
    long long v7 = sub_10021222C;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0x4574756F6B726F57;
    unint64_t v6 = 0xED0000797469746ELL;
    uint64_t v8 = v12;
    return withCheckedContinuation<A>(isolation:function:_:)(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  sub_10007E2D8(0, &qword_10094F0F0);
  Class isa = HKQuantityType.init(_:)(HKQuantityTypeIdentifierCyclingSpeed).super.super.super.isa;
  id v15 = [v1 statisticsForType:isa];

  if (!v15) {
    goto LABEL_10;
  }
  id v16 = [v15 maximumQuantity];
  if (!v16)
  {

LABEL_10:
    uint64_t v23 = v0[34];
    uint64_t v24 = sub_1000AFA94(&qword_10094F110);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
    goto LABEL_11;
  }
  uint64_t v17 = v16;
  uint64_t v18 = v0[34];
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [self unitFromString:v19];

  [v17 doubleValueForUnit:v20];
  id v21 = [self metersPerSecond];
  sub_10007E2D8(0, &qword_10094F108);
  Measurement.init(value:unit:)();

  uint64_t v22 = sub_1000AFA94(&qword_10094F110);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v18, 0, 1, v22);
LABEL_11:
  swift_task_dealloc();
  id v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_10020E6DC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10020E7F4, 0, 0);
}

uint64_t sub_10020E7F4()
{
  sub_100212234(v0[36], v0[34]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10020E864(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94(&qword_10094FF20);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  AppDependency.wrappedValue.getter();
  uint64_t v5 = (void *)v8[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  HKWorkout.makeDownhillRuns(healthStore:completion:)();
  swift_release();
}

uint64_t sub_10020E9C4(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94(&qword_10094F110);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000AFA94(&qword_10094F078);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    type metadata accessor for DownhillRunsStats();
    swift_allocObject();
    swift_bridgeObjectRetain();
    DownhillRunsStats.init(downhillRuns:)();
    uint64_t v9 = DownhillRunsStats.maximumSpeed.getter();
    if (v9)
    {
      long long v10 = (void *)v9;
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [self unitFromString:v11];

      [v10 doubleValueForUnit:v12];
      id v13 = [self metersPerSecond];
      sub_10007E2D8(0, &qword_10094F108);
      Measurement.init(value:unit:)();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
      sub_1000AFA94(&qword_10094FF20);
      CheckedContinuation.resume(returning:)();

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
      sub_1000AFA94(&qword_10094FF20);
      CheckedContinuation.resume(returning:)();
      return swift_release();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    sub_1000AFA94(&qword_10094FF20);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10020ECD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 224);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_10020ECF4, 0, 0);
}

uint64_t sub_10020ECF4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v1 = (void *)v0[3];
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D340);
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  sub_1005859B4(v1, 1);
  uint64_t v4 = v3;
  swift_release();
  swift_release();
  *uint64_t v2 = v4;
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10020EE10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 224);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_10020EE34, 0, 0);
}

uint64_t sub_10020EE34()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v1 = (void *)v0[3];
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D340);
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  sub_1005859B4(v1, 0);
  uint64_t v4 = v3;
  swift_release();
  swift_release();
  *uint64_t v2 = v4;
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10020EF50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 224);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_10020EF74, 0, 0);
}

uint64_t sub_10020EF74()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v1 = (void *)v0[3];
  sub_10047A8B0();
  sub_10047A9C8(v1);
  uint64_t v4 = v3;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *uint64_t v2 = v4;
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10020F028(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 224);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_10020F04C, 0, 0);
}

uint64_t sub_10020F04C()
{
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  v0[4] = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D340);
  static AppDependencyManager.shared.getter();
  v0[5] = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094FF10);
  static AppDependencyManager.shared.getter();
  uint64_t v1 = AppDependency.__allocating_init(key:manager:)();
  v0[6] = v1;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10095F4E0 + dword_10095F4E0);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10020F1B8;
  uint64_t v3 = v0[3];
  return v5(v3, v1);
}

uint64_t sub_10020F1B8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 64) = a1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_10020F318, 0, 0);
}

uint64_t sub_10020F318()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020F33C(uint64_t a1, _OWORD *a2)
{
  *(void *)(v2 + 280) = a1;
  long long v3 = a2[13];
  *(_OWORD *)(v2 + 208) = a2[12];
  *(_OWORD *)(v2 + 224) = v3;
  long long v4 = a2[15];
  *(_OWORD *)(v2 + 240) = a2[14];
  *(_OWORD *)(v2 + 256) = v4;
  long long v5 = a2[9];
  *(_OWORD *)(v2 + 144) = a2[8];
  *(_OWORD *)(v2 + 160) = v5;
  long long v6 = a2[11];
  *(_OWORD *)(v2 + 176) = a2[10];
  *(_OWORD *)(v2 + 192) = v6;
  long long v7 = a2[5];
  *(_OWORD *)(v2 + 80) = a2[4];
  *(_OWORD *)(v2 + 96) = v7;
  long long v8 = a2[7];
  *(_OWORD *)(v2 + 112) = a2[6];
  *(_OWORD *)(v2 + 128) = v8;
  long long v9 = a2[1];
  *(_OWORD *)(v2 + 16) = *a2;
  *(_OWORD *)(v2 + 32) = v9;
  long long v10 = a2[3];
  *(_OWORD *)(v2 + 48) = a2[2];
  *(_OWORD *)(v2 + 64) = v10;
  return _swift_task_switch(sub_10020F39C, 0, 0);
}

uint64_t sub_10020F39C()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 288) = v1;
  *(void *)(v1 + 16) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10020F4A0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 272, 0, 0, 0x4574756F6B726F57, 0xED0000797469746ELL, sub_1002121A4, v1, &type metadata for Int);
}

uint64_t sub_10020F4A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10020F5B8, 0, 0);
}

uint64_t sub_10020F5B8()
{
  **(void **)(v0 + 280) = *(void *)(v0 + 272);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10020F5D8(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94(&qword_10094FF18);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  type metadata accessor for EffortUtilities();
  AppDependency.wrappedValue.getter();
  long long v5 = (void *)v8[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  static EffortUtilities.fetchExertion(forWorkout:healthStore:completion:)();
  swift_release();
}

void sub_10020F750(void *a1)
{
  if (!a1) {
    goto LABEL_6;
  }
  id v2 = [self appleEffortScoreUnit];
  [a1 doubleValueForUnit:v2];
  double v4 = v3;

  if ((~*(void *)&v4 & 0x7FF0000000000000) != 0)
  {
    if (v4 > -9.22337204e18)
    {
      if (v4 >= 9.22337204e18) {
        __break(1u);
      }
LABEL_6:
      sub_1000AFA94(&qword_10094FF18);
      CheckedContinuation.resume(returning:)();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10020F834(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v6 = [a1 isMultiSportWorkout];
  uint64_t v7 = 77;
  if (!v6) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = 0xE000000000000000;
  if (v6) {
    unint64_t v8 = 0xE100000000000000;
  }
  id v9 = [a1 UUID:v7, v8];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = UUID.uuidString.getter();
  id v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_10020F97C@<X0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  id v245 = a2;
  uint64_t v238 = a1;
  uint64_t v222 = a3;
  uint64_t v3 = sub_1000AFA94(&qword_10094F078);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v230 = (uint64_t)&v211 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v229 = (char *)&v211 - v6;
  uint64_t v7 = sub_1000AFA94(&qword_10094F068);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v217 = (uint64_t)&v211 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v216 = (char *)&v211 - v10;
  uint64_t v11 = sub_1000AFA94(&qword_10094F080);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v213 = (uint64_t)&v211 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v212 = (char *)&v211 - v14;
  uint64_t v15 = sub_1000AFA94(&qword_10094F088);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v215 = (uint64_t)&v211 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v214 = (char *)&v211 - v18;
  uint64_t v19 = sub_1000AFA94(&qword_10094F098);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v233 = (uint64_t)&v211 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v232 = (char *)&v211 - v22;
  uint64_t v23 = sub_1000AFA94(&qword_10094FE50);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v228 = (uint64_t)&v211 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  id v227 = (char *)&v211 - v26;
  uint64_t v27 = (void *)type metadata accessor for Date();
  uint64_t v225 = *(v27 - 1);
  id v226 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  v224 = (char *)&v211 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v223 = (char *)&v211 - v30;
  uint64_t v31 = type metadata accessor for LocalizedStringResource();
  __chkstk_darwin(v31 - 8);
  sub_1000AFA94(&qword_10094FE58);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v261 = EntityProperty<>.init(title:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v260 = EntityProperty<>.init(title:)();
  sub_1000AFA94(&qword_10094F0B8);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v259 = EntityProperty<>.init(title:)();
  sub_1000AFA94(&qword_10094F0C0);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v255 = EntityProperty<>.init(title:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v250 = EntityProperty<>.init(title:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v258 = EntityProperty<>.init(title:)();
  sub_1000AFA94(&qword_10094F0C8);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v257 = EntityProperty<>.init(title:)();
  sub_1000AFA94(&qword_10094F0D0);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v252 = EntityProperty<>.init(title:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v251 = EntityProperty<>.init(title:)();
  sub_1000AFA94(&qword_10094F0D8);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v256 = EntityProperty<>.init(title:)();
  sub_1000AFA94(&qword_10094F0E0);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v262 = EntityProperty<>.init(title:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v254 = EntityProperty<>.init(title:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v253 = EntityProperty<>.init(title:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v249 = EntityProperty<>.init(title:)();
  sub_1000AFA94(&qword_10094FE60);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  sub_1000A132C(&qword_10094FE70, &qword_10094FE78);
  uint64_t v248 = EntityProperty<>.init(title:_get:)();
  sub_1000AFA94(&qword_10094FE80);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  sub_1000A132C(&qword_10094FE90, &qword_10094FE98);
  uint64_t v247 = EntityProperty<>.init(title:_get:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v246 = EntityProperty<>.init(title:_get:)();
  sub_1000AFA94(&qword_10094FEA8);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  sub_1000A132C(&qword_10094FEB8, &qword_10094FEC0);
  uint64_t v244 = EntityProperty<>.init(title:_get:)();
  sub_1000AFA94(&qword_10094FEC8);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  sub_1000A132C(&qword_10094FED8, &qword_10094FEE0);
  uint64_t v32 = EntityProperty<>.init(title:_get:)();
  sub_1000AFA94(&qword_10094FEE8);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v33 = EntityProperty<>.init(title:)();
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v34 = EntityProperty<>.init(title:)();
  sub_1000AFA94(&qword_10094FEF0);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  sub_1000A132C(&qword_10094FF00, &qword_10094FF08);
  uint64_t v35 = EntityProperty<>.init(title:_get:)();
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  long long v311 = 0u;
  long long v312 = 0u;
  uint64_t v313 = 0;
  swift_retain();
  static AppDependencyManager.shared.getter();
  uint64_t v36 = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D340);
  uint64_t v313 = 0;
  long long v311 = 0u;
  long long v312 = 0u;
  swift_retain();
  static AppDependencyManager.shared.getter();
  unint64_t v37 = (void *)AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094FF10);
  uint64_t v313 = 0;
  long long v311 = 0u;
  long long v312 = 0u;
  swift_retain();
  static AppDependencyManager.shared.getter();
  uint64_t v38 = AppDependency.__allocating_init(key:manager:)();
  swift_retain();
  long long v39 = v238;
  uint64_t v40 = sub_10020F834(v238);
  uint64_t v42 = v41;
  uint64_t v236 = v40;
  *(void *)&long long v311 = v40;
  *((void *)&v311 + 1) = v41;
  *(void *)&long long v312 = 0;
  *((void *)&v312 + 1) = 0xE000000000000000;
  uint64_t v313 = 0;
  unint64_t v314 = 0xE000000000000000;
  uint64_t v315 = v261;
  uint64_t v316 = v260;
  uint64_t v317 = v259;
  uint64_t v318 = v255;
  uint64_t v319 = v250;
  uint64_t v320 = v258;
  uint64_t v321 = v257;
  uint64_t v322 = v252;
  uint64_t v323 = v251;
  uint64_t v324 = v256;
  uint64_t v325 = v262;
  uint64_t v326 = v254;
  uint64_t v327 = v253;
  uint64_t v328 = v249;
  uint64_t v329 = v248;
  uint64_t v330 = v247;
  uint64_t v331 = v246;
  uint64_t v332 = v244;
  uint64_t v240 = v33;
  uint64_t v241 = v32;
  uint64_t v333 = v32;
  uint64_t v334 = v33;
  uint64_t v243 = v34;
  uint64_t v335 = v34;
  uint64_t v336 = v35;
  v337 = v39;
  uint64_t v239 = v36;
  uint64_t v338 = v36;
  v339 = v37;
  uint64_t v340 = v38;
  id v43 = v245;
  *(void *)&long long v295 = v245;
  swift_retain();
  id v44 = v43;
  uint64_t v242 = v42;
  swift_bridgeObjectRetain();
  id v45 = v39;
  sub_1001B5A54((uint64_t)&v311);
  AppDependency.wrappedValue.setter();
  sub_1001B5CC0((uint64_t)&v311);
  uint64_t v237 = v38;
  swift_release();
  swift_retain();
  sub_1001B5A54((uint64_t)&v311);
  *(void *)&long long v295 = [v44 fitnessUIFormattingManager];
  id v46 = (id)v295;
  AppDependency.wrappedValue.setter();
  sub_1001B5CC0((uint64_t)&v311);

  uint64_t v238 = v37;
  swift_release();
  id v47 = [v45 fiui_activityType];
  if (!v47) {
    goto LABEL_96;
  }
  long long v48 = v47;
  [v47 effectiveTypeIdentifier];
  [v48 swimmingLocationType];
  [v48 isIndoor];
  id v49 = (id)FILocalizedNameForActivityType();
  if (!v49)
  {
    __break(1u);
LABEL_96:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v50 = v49;
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  swift_bridgeObjectRetain();
  id v54 = [v48 symbolName];
  v231 = v48;
  id v220 = v44;
  if (v54)
  {
    uint64_t v55 = v54;
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v58 = v57;

    unint64_t v59 = v58;
  }
  else
  {
    uint64_t v56 = 0xD000000000000011;
    unint64_t v59 = 0x80000001007B8590;
  }
  *(void *)&long long v295 = v236;
  *((void *)&v295 + 1) = v242;
  uint64_t v218 = v56;
  uint64_t v219 = v51;
  *(void *)&long long v296 = v51;
  uint64_t v235 = v53;
  *((void *)&v296 + 1) = v53;
  *(void *)&long long v297 = v56;
  *((void *)&v297 + 1) = v59;
  *(void *)&long long v298 = v261;
  *((void *)&v298 + 1) = v260;
  *(void *)&long long v299 = v259;
  *((void *)&v299 + 1) = v255;
  *(void *)&long long v300 = v250;
  *((void *)&v300 + 1) = v258;
  *(void *)&long long v301 = v257;
  *((void *)&v301 + 1) = v252;
  *(void *)&long long v302 = v251;
  *((void *)&v302 + 1) = v256;
  *(void *)&long long v303 = v262;
  *((void *)&v303 + 1) = v254;
  *(void *)&long long v304 = v253;
  *((void *)&v304 + 1) = v249;
  *(void *)&long long v305 = v248;
  *((void *)&v305 + 1) = v247;
  *(void *)&long long v306 = v246;
  *((void *)&v306 + 1) = v244;
  *(void *)&long long v307 = v241;
  *((void *)&v307 + 1) = v240;
  *(void *)&long long v308 = v243;
  uint64_t v221 = v35;
  *((void *)&v308 + 1) = v35;
  *(void *)&long long v309 = v45;
  *((void *)&v309 + 1) = v239;
  *(void *)&long long v310 = v238;
  *((void *)&v310 + 1) = v237;
  unint64_t v234 = v59;
  swift_bridgeObjectRetain();
  sub_1001B5A54((uint64_t)&v295);
  id v60 = [v45 startDate];
  long long v61 = v223;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v63 = v224;
  uint64_t v62 = v225;
  long long v64 = v45;
  long long v65 = *(void (**)(char *, char *, id))(v225 + 16);
  id v66 = v226;
  v65(v224, v61, v226);
  EntityProperty.wrappedValue.setter();
  long long v67 = *(void (**)(char *, id))(v62 + 8);
  v67(v61, v66);
  sub_1001B5CC0((uint64_t)&v295);
  sub_1001B5A54((uint64_t)&v295);
  id v68 = [v64 endDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v65(v63, v61, v66);
  EntityProperty.wrappedValue.setter();
  v67(v61, v66);
  sub_1001B5CC0((uint64_t)&v295);
  [v64 fiui_duration];
  long long v69 = self;
  sub_1001B5A54((uint64_t)&v295);
  id v70 = [v69 seconds];
  sub_10007E2D8(0, &qword_10094F0E8);
  uint64_t v71 = (uint64_t)v227;
  Measurement.init(value:unit:)();
  uint64_t v72 = sub_1000AFA94(&qword_10094F0A0);
  uint64_t v73 = *(void *)(v72 - 8);
  id v245 = v64;
  uint64_t v74 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56);
  v74(v71, 0, 1, v72);
  uint64_t v75 = v228;
  sub_1000AEF2C(v71, v228, &qword_10094FE50);
  EntityProperty.wrappedValue.setter();
  sub_10008DB18(v71, &qword_10094FE50);
  sub_1001B5CC0((uint64_t)&v295);
  sub_1001B5A54((uint64_t)&v295);
  [v245 elapsedTime];
  id v76 = [v69 seconds];
  Measurement.init(value:unit:)();
  v74(v71, 0, 1, v72);
  id v77 = v245;
  sub_1000AEF2C(v71, v75, &qword_10094FE50);
  EntityProperty.wrappedValue.setter();
  sub_10008DB18(v71, &qword_10094FE50);
  sub_1001B5CC0((uint64_t)&v295);
  id v78 = [v77 fiui_totalDistance];
  if (v78)
  {
    long long v79 = v78;
    id v80 = [self meterUnit];
    [v79 doubleValueForUnit:v80];

    long long v81 = self;
    sub_1001B5A54((uint64_t)&v295);
    id v82 = [v81 meters];
    sub_10007E2D8(0, &qword_10094F128);
    uint64_t v83 = (uint64_t)v232;
    Measurement.init(value:unit:)();
    uint64_t v84 = sub_1000AFA94(&qword_10094F070);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v83, 0, 1, v84);
    sub_1000AEF2C(v83, v233, &qword_10094F098);
    EntityProperty.wrappedValue.setter();
    sub_10008DB18(v83, &qword_10094F098);
    sub_1001B5CC0((uint64_t)&v295);
  }
  uint64_t v85 = sub_10007E2D8(0, &qword_10094F0F0);
  Class isa = HKQuantityType.init(_:)(HKQuantityTypeIdentifierActiveEnergyBurned).super.super.super.isa;
  long long v87 = &selRef_setModalPresentationStyle_;
  id v88 = [v77 statisticsForType:isa];

  uint64_t v89 = v231;
  if (v88)
  {
    id v90 = [v88 sumQuantity];
    if (!v90)
    {
LABEL_16:

      goto LABEL_17;
    }
    uint64_t v91 = v90;
    id v227 = (char *)self;
    id v92 = [v227 largeCalorieUnit];
    [v91 doubleValueForUnit:v92];

    id v93 = self;
    sub_1001B5A54((uint64_t)&v295);
    id v226 = v93;
    id v94 = [v93 kilocalories];
    uint64_t v95 = sub_10007E2D8(0, &qword_10094F130);
    uint64_t v228 = v85;
    uint64_t v96 = (uint64_t)v214;
    uint64_t v225 = v95;
    Measurement.init(value:unit:)();
    uint64_t v97 = sub_1000AFA94(&qword_10094F090);
    v224 = *(char **)(*(void *)(v97 - 8) + 56);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v224)(v96, 0, 1, v97);
    sub_1000AEF2C(v96, v215, &qword_10094F088);
    EntityProperty.wrappedValue.setter();
    sub_10008DB18(v96, &qword_10094F088);
    sub_1001B5CC0((uint64_t)&v295);
    Class v98 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierBasalEnergyBurned).super.super.super.isa;
    id v99 = [v77 statisticsForType:v98];

    if (v99)
    {
      id v100 = [v99 sumQuantity];
      if (v100)
      {
        double v101 = v100;
        id v102 = [v227 largeCalorieUnit];
        [v101 doubleValueForUnit:v102];

        sub_1001B5A54((uint64_t)&v295);
        id v103 = [v226 kilocalories];
        uint64_t v104 = (uint64_t)v214;
        Measurement.init(value:unit:)();
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v224)(v104, 0, 1, v97);
        sub_1000AEF2C(v104, v215, &qword_10094F088);
        EntityProperty.wrappedValue.setter();
        sub_10008DB18(v104, &qword_10094F088);

        sub_1001B5CC0((uint64_t)&v295);
        id v88 = v101;
        id v77 = v245;
        uint64_t v89 = v231;
        long long v87 = &selRef_setModalPresentationStyle_;
LABEL_15:

        goto LABEL_16;
      }
    }
    id v77 = v245;
    uint64_t v89 = v231;
    goto LABEL_15;
  }
LABEL_17:
  id v105 = [v77 fiui_elevationGain];
  if (v105)
  {
    id v106 = v105;
    id v107 = [self meterUnit];
    [v106 doubleValueForUnit:v107];

    id v108 = self;
    sub_1001B5A54((uint64_t)&v295);
    id v109 = [v108 meters];
    sub_10007E2D8(0, &qword_10094F128);
    uint64_t v110 = (uint64_t)v232;
    Measurement.init(value:unit:)();
    uint64_t v111 = sub_1000AFA94(&qword_10094F070);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56))(v110, 0, 1, v111);
    sub_1000AEF2C(v110, v233, &qword_10094F098);
    EntityProperty.wrappedValue.setter();
    sub_10008DB18(v110, &qword_10094F098);
    sub_1001B5CC0((uint64_t)&v295);
  }
  [v77 fiui_averagePower];
  if (v112 > 0.0)
  {
    long long v113 = self;
    sub_1001B5A54((uint64_t)&v295);
    id v114 = [v113 watts];
    sub_10007E2D8(0, &qword_10094F118);
    uint64_t v115 = (uint64_t)v212;
    Measurement.init(value:unit:)();
    uint64_t v116 = sub_1000AFA94(&qword_10094F120);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v115, 0, 1, v116);
    sub_1000AEF2C(v115, v213, &qword_10094F080);
    EntityProperty.wrappedValue.setter();
    sub_10008DB18(v115, &qword_10094F080);
    sub_1001B5CC0((uint64_t)&v295);
  }
  Class v117 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierStepCount).super.super.super.isa;
  id v118 = [v77 v87[371] v117];

  if (!v118) {
    goto LABEL_28;
  }
  id v119 = [v118 sumQuantity];
  if (!v119)
  {

    goto LABEL_28;
  }
  uint64_t v120 = v119;
  id v121 = [self countUnit];
  [v120 doubleValueForUnit:v121];
  double v123 = v122;

  if ((~*(void *)&v123 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_87;
  }
  if (v123 <= -9.22337204e18)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v123 >= 9.22337204e18)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  uint64_t v263 = (uint64_t)v123;
  LOBYTE(v264) = 0;
  sub_1001B5A54((uint64_t)&v295);
  EntityProperty.wrappedValue.setter();
  sub_1001B5CC0((uint64_t)&v295);

LABEL_28:
  Class v124 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierFlightsClimbed).super.super.super.isa;
  id v118 = [v77 v87[371] v124];

  if (!v118) {
    goto LABEL_35;
  }
  id v125 = [v118 sumQuantity];
  if (!v125)
  {

    goto LABEL_35;
  }
  uint64_t v120 = v125;
  id v126 = [self countUnit];
  [v120 doubleValueForUnit:v126];
  double v128 = v127;

  if ((~*(void *)&v128 & 0x7FF0000000000000) == 0) {
    goto LABEL_88;
  }
  if (v128 <= -9.22337204e18)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v128 >= 9.22337204e18) {
    goto LABEL_93;
  }
  uint64_t v263 = (uint64_t)v128;
  LOBYTE(v264) = 0;
  sub_1001B5A54((uint64_t)&v295);
  EntityProperty.wrappedValue.setter();
  sub_1001B5CC0((uint64_t)&v295);

LABEL_35:
  [v77 fiui_averageCadence];
  if (v129 <= 0.0) {
    goto LABEL_43;
  }
  [v89 effectiveTypeIdentifier];
  int v130 = FIUIIsWorkoutTypePedestrianActivity();
  sub_1001B5A54((uint64_t)&v295);
  if (!v130)
  {
    if (qword_10094A680 != -1) {
      swift_once();
    }
    uint64_t v131 = &qword_100997800;
    goto LABEL_42;
  }
  if (qword_10094A688 != -1) {
    goto LABEL_94;
  }
  while (1)
  {
    uint64_t v131 = &qword_100997808;
LABEL_42:
    long long v132 = (void *)*v131;
    sub_10007E2D8(0, &qword_10094F0F8);
    id v133 = v132;
    uint64_t v134 = (uint64_t)v216;
    Measurement.init(value:unit:)();
    uint64_t v135 = sub_1000AFA94(&qword_10094F100);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v135 - 8) + 56))(v134, 0, 1, v135);
    sub_1000AEF2C(v134, v217, &qword_10094F068);
    EntityProperty.wrappedValue.setter();
    sub_10008DB18(v134, &qword_10094F068);
    sub_1001B5CC0((uint64_t)&v295);
LABEL_43:
    Class v136 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierWalkingSpeed).super.super.super.isa;
    id v137 = [v77 v87[371] v136];

    if (v137)
    {
      id v138 = [v137 averageQuantity];
      if (v138)
      {
        id v139 = v138;
        NSString v140 = String._bridgeToObjectiveC()();
        id v141 = [self unitFromString:v140];

        [v139 doubleValueForUnit:v141];
        uint64_t v142 = self;
        sub_1001B5A54((uint64_t)&v295);
        id v143 = [v142 metersPerSecond];
        sub_10007E2D8(0, &qword_10094F108);
        uint64_t v144 = (uint64_t)v229;
        Measurement.init(value:unit:)();
        uint64_t v145 = sub_1000AFA94(&qword_10094F110);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v145 - 8) + 56))(v144, 0, 1, v145);
        sub_1000AEF2C(v144, v230, &qword_10094F078);
        EntityProperty.wrappedValue.setter();
        uint64_t v146 = v144;
        long long v87 = &selRef_setModalPresentationStyle_;
        sub_10008DB18(v146, &qword_10094F078);

        sub_1001B5CC0((uint64_t)&v295);
        id v137 = v139;
      }
    }
    Class v147 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierRunningSpeed).super.super.super.isa;
    id v148 = [v77 v87[371] v147];

    if (v148)
    {
      id v149 = [v148 averageQuantity];
      if (v149)
      {
        id v150 = v149;
        NSString v151 = String._bridgeToObjectiveC()();
        id v152 = [self unitFromString:v151];

        [v150 doubleValueForUnit:v152];
        uint64_t v153 = self;
        sub_1001B5A54((uint64_t)&v295);
        id v154 = [v153 metersPerSecond];
        sub_10007E2D8(0, &qword_10094F108);
        uint64_t v155 = (uint64_t)v229;
        Measurement.init(value:unit:)();
        uint64_t v156 = sub_1000AFA94(&qword_10094F110);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(v155, 0, 1, v156);
        sub_1000AEF2C(v155, v230, &qword_10094F078);
        EntityProperty.wrappedValue.setter();
        uint64_t v157 = v155;
        long long v87 = &selRef_setModalPresentationStyle_;
        sub_10008DB18(v157, &qword_10094F078);

        sub_1001B5CC0((uint64_t)&v295);
        id v148 = v150;
      }
    }
    Class v158 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierCyclingSpeed).super.super.super.isa;
    id v159 = [v77 v87[371] v158];

    if (v159)
    {
      id v160 = [v159 averageQuantity];
      if (v160)
      {
        double v161 = v160;
        NSString v162 = String._bridgeToObjectiveC()();
        id v163 = [self unitFromString:v162];

        [v161 doubleValueForUnit:v163];
        id v164 = self;
        sub_1001B5A54((uint64_t)&v295);
        id v165 = [v164 metersPerSecond];
        sub_10007E2D8(0, &qword_10094F108);
        uint64_t v166 = (uint64_t)v229;
        Measurement.init(value:unit:)();
        uint64_t v167 = sub_1000AFA94(&qword_10094F110);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v167 - 8) + 56))(v166, 0, 1, v167);
        sub_1000AEF2C(v166, v230, &qword_10094F078);
        EntityProperty.wrappedValue.setter();
        uint64_t v168 = v166;
        long long v87 = &selRef_setModalPresentationStyle_;
        sub_10008DB18(v168, &qword_10094F078);

        sub_1001B5CC0((uint64_t)&v295);
        id v159 = v161;
      }
    }
    Class v169 = HKQuantityType.init(_:)(HKQuantityTypeIdentifierHeartRate).super.super.super.isa;
    id v118 = [v77 v87[371] v169];

    if (v118)
    {
      id v170 = [v118 averageQuantity];
      if (v170)
      {
        uint64_t v120 = v170;
        id v171 = [self _countPerMinuteUnit];
        [v120 doubleValueForUnit:v171];

        sub_1001B5A54((uint64_t)&v295);
        if (qword_10094A678 != -1) {
LABEL_91:
        }
          swift_once();
        NSString v172 = (void *)qword_1009977F8;
        sub_10007E2D8(0, &qword_10094F0F8);
        id v173 = v172;
        uint64_t v174 = (uint64_t)v216;
        Measurement.init(value:unit:)();
        uint64_t v175 = sub_1000AFA94(&qword_10094F100);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v175 - 8) + 56))(v174, 0, 1, v175);
        sub_1000AEF2C(v174, v217, &qword_10094F068);
        EntityProperty.wrappedValue.setter();
        sub_10008DB18(v174, &qword_10094F068);

        sub_1001B5CC0((uint64_t)&v295);
      }
      else
      {
        uint64_t v120 = v118;
      }
    }
    id v176 = [v77 workoutEvents];
    if (!v176) {
      break;
    }
    uint64_t v177 = v176;
    sub_10007E2D8(0, (unint64_t *)&qword_10094BED8);
    unint64_t v178 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v263 = (uint64_t)_swiftEmptyArrayStorage;
    if (v178 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v179 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v179)
      {
LABEL_76:
        swift_bridgeObjectRelease();
        uint64_t v183 = (uint64_t)_swiftEmptyArrayStorage;
        if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0) {
          goto LABEL_77;
        }
LABEL_85:
        swift_bridgeObjectRetain();
        uint64_t v184 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
LABEL_79:
        swift_release();
        if (v184 > 0)
        {
          uint64_t v263 = v184;
          LOBYTE(v264) = 0;
          sub_1001B5A54((uint64_t)&v295);
          EntityProperty.wrappedValue.setter();
          sub_1001B5CC0((uint64_t)&v295);
        }
        break;
      }
    }
    else
    {
      uint64_t v179 = *(void *)((v178 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v179) {
        goto LABEL_76;
      }
    }
    if (v179 >= 1)
    {
      for (uint64_t i = 0; i != v179; ++i)
      {
        if ((v178 & 0xC000000000000001) != 0) {
          id v181 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v181 = *(id *)(v178 + 8 * i + 32);
        }
        uint64_t v182 = v181;
        if ([v181 type] == (id)3)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v183 = v263;
      id v77 = v245;
      uint64_t v89 = v231;
      if (v263 < 0) {
        goto LABEL_85;
      }
LABEL_77:
      if ((v183 & 0x4000000000000000) != 0) {
        goto LABEL_85;
      }
      uint64_t v184 = *(void *)(v183 + 16);
      goto LABEL_79;
    }
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    swift_once();
  }
  id v185 = [v77 fiui_lapLength];
  if (v185)
  {
    id v186 = v185;
    id v187 = [self meterUnit];
    [v186 doubleValueForUnit:v187];

    v188 = self;
    sub_1001B5A54((uint64_t)&v295);
    id v189 = [v188 meters];
    sub_10007E2D8(0, &qword_10094F128);
    uint64_t v190 = (uint64_t)v232;
    Measurement.init(value:unit:)();
    uint64_t v191 = sub_1000AFA94(&qword_10094F070);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v191 - 8) + 56))(v190, 0, 1, v191);
    sub_1000AEF2C(v190, v233, &qword_10094F098);
    EntityProperty.wrappedValue.setter();
    sub_10008DB18(v190, &qword_10094F098);

    sub_1001B5CC0((uint64_t)&v295);
  }
  else
  {
    id v186 = v220;
  }

  sub_1001B5A54((uint64_t)&v295);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v192 = v244;
  swift_release();
  uint64_t v193 = v241;
  swift_release();
  uint64_t v194 = v240;
  swift_release();
  uint64_t v195 = v243;
  swift_release();
  uint64_t v196 = v221;
  swift_release();
  uint64_t v197 = v239;
  swift_release();
  id v198 = v238;
  swift_release();
  uint64_t v199 = v237;
  swift_release();
  id v200 = v245;

  uint64_t v263 = v236;
  uint64_t v264 = v242;
  uint64_t v265 = v219;
  uint64_t v266 = v235;
  uint64_t v267 = v218;
  unint64_t v268 = v234;
  uint64_t v269 = v261;
  uint64_t v270 = v260;
  uint64_t v271 = v259;
  uint64_t v272 = v255;
  uint64_t v273 = v250;
  uint64_t v274 = v258;
  uint64_t v275 = v257;
  uint64_t v276 = v252;
  uint64_t v277 = v251;
  uint64_t v278 = v256;
  uint64_t v279 = v262;
  uint64_t v280 = v254;
  uint64_t v281 = v253;
  uint64_t v282 = v249;
  uint64_t v283 = v248;
  uint64_t v284 = v247;
  uint64_t v285 = v246;
  uint64_t v286 = v192;
  uint64_t v287 = v193;
  uint64_t v288 = v194;
  uint64_t v289 = v195;
  uint64_t v290 = v196;
  id v291 = v200;
  uint64_t v292 = v197;
  v293 = v198;
  uint64_t v294 = v199;
  uint64_t result = sub_1001B5CC0((uint64_t)&v263);
  long long v202 = v308;
  uint64_t v203 = v222;
  v222[12] = v307;
  v203[13] = v202;
  long long v204 = v310;
  v203[14] = v309;
  v203[15] = v204;
  long long v205 = v304;
  v203[8] = v303;
  v203[9] = v205;
  long long v206 = v306;
  v203[10] = v305;
  v203[11] = v206;
  long long v207 = v300;
  v203[4] = v299;
  v203[5] = v207;
  long long v208 = v302;
  v203[6] = v301;
  v203[7] = v208;
  long long v209 = v296;
  *uint64_t v203 = v295;
  v203[1] = v209;
  long long v210 = v298;
  v203[2] = v297;
  v203[3] = v210;
  return result;
}

void sub_1002121A4(uint64_t a1)
{
}

uint64_t sub_1002121AC()
{
  return sub_100076F58(&qword_10094FF18);
}

void sub_1002121B8(void *a1)
{
  sub_1000AFA94(&qword_10094FF18);

  sub_10020F750(a1);
}

void sub_10021222C(uint64_t a1)
{
}

uint64_t sub_100212234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_10094F078);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10021229C()
{
  return sub_100076F58(&qword_10094FF20);
}

uint64_t sub_1002122A8(uint64_t a1)
{
  sub_1000AFA94(&qword_10094FF20);

  return sub_10020E9C4(a1);
}

unint64_t sub_10021232C()
{
  unint64_t result = qword_10094FF28;
  if (!qword_10094FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10094FF28);
  }
  return result;
}

id sub_1002123B0()
{
  return sub_100212410(type metadata accessor for GradientColors);
}

id sub_1002123F8()
{
  return sub_100212410(type metadata accessor for MetricColors);
}

id sub_100212410(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

BOOL sub_10021247C()
{
  uint64_t v1 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v1 - 8);
  objc_super v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ContentAvailability();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = v0 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state;
  swift_beginAccess();
  sub_100075760(v11, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100074AF8((uint64_t)v3);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for ContentAvailability.available(_:), v4);
  sub_10007571C(&qword_100950098);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  return (v12 & 1) == 0;
}

uint64_t sub_100212794()
{
  uint64_t v0 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v14[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for ContentAvailability();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v14[-v8];
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v11 = (void *)result;
    ContentAvailabilityUpdated.availability.getter();
    uint64_t v12 = (uint64_t)v11 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state;
    swift_beginAccess();
    sub_100075760(v12, (uint64_t)v2);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    {
      sub_100074AF8((uint64_t)v2);
      sub_1002129F8((uint64_t)v9);

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 32))(v7, v2, v3);
      sub_10007571C(&qword_100950098);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        sub_1002129F8((uint64_t)v9);
      }
      uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
      v13(v7, v3);

      return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v9, v3);
    }
  }
  return result;
}

void sub_1002129F8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SeymourAvailabilityManager.State(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentAvailability();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  uint64_t v8 = v1 + OBJC_IVAR____TtC10FitnessApp26SeymourAvailabilityManager_state;
  swift_beginAccess();
  sub_1000E6634((uint64_t)v5, v8);
  swift_endAccess();
  LOBYTE(v8) = sub_10007545C();
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setBool:v8 & 1 forKey:v10];

  id v11 = [self defaultCenter];
  if (qword_10094A690 != -1) {
    swift_once();
  }
  [v11 postNotificationName:qword_100997810 object:v1];
}

id sub_100212C00()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SeymourAvailabilityManager(0);
  return [super dealloc];
}

uint64_t *sub_100212CA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for ContentAvailability();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100212DF0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentAvailability();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_100212EC0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContentAvailability();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100212FD0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContentAvailability();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_100213144(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContentAvailability();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100213254(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ContentAvailability();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_1002133C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002133DC);
}

uint64_t sub_1002133DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContentAvailability();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100213448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10021345C);
}

uint64_t sub_10021345C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for ContentAvailability();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1002134DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentAvailability();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_100213544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContentAvailability();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_1002135B4()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002135EC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10021362C()
{
  return sub_100212794();
}

char *sub_100213634(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView;
  id v10 = objc_allocWithZone((Class)UIView);
  id v11 = v4;
  *(void *)&v4[v9] = [v10 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v12 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView;
  *(void *)&v11[v12] = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v13 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView;
  *(void *)&v11[v13] = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  *(void *)&v11[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedWidth] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedCenterX] = 0;

  v29.receiver = v11;
  v29.super_class = (Class)type metadata accessor for TrendChartMaskingView();
  uint64_t v14 = (char *)[super initWithFrame:a1 a2:a2 a3:a3 a4:a4];
  uint64_t v15 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView;
  uint64_t v16 = *(void **)&v14[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView];
  sub_100006248();
  uint64_t v17 = v14;
  id v18 = v16;
  Class isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.0, 0.0, 0.30137).super.isa;
  [v18 setBackgroundColor:isa];

  uint64_t v20 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView;
  uint64_t v21 = *(void **)&v17[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView];
  uint64_t v22 = self;
  id v23 = v21;
  id v24 = [v22 blackColor];
  [v23 setBackgroundColor:v24];

  uint64_t v25 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView;
  id v26 = *(id *)&v17[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView];
  Class v27 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.0, 0.0, 0.30137).super.isa;
  [v26 setBackgroundColor:v27];

  [v17 addSubview:*(void *)&v14[v15]];
  [v17 addSubview:*(void *)&v17[v20]];
  [v17 addSubview:*(void *)&v17[v25]];

  return v17;
}

uint64_t sub_1002138D0(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView;
  id v4 = objc_allocWithZone((Class)UIView);
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v6 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView;
  *(void *)&v5[v6] = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v7 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView;
  id v8 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];

  *(void *)&v5[v7] = v8;
  uint64_t v9 = *(void **)&v5[v7];

  type metadata accessor for TrendChartMaskingView();
  swift_deallocPartialClassInstance();
  return 0;
}

id sub_100213A18()
{
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for TrendChartMaskingView();
  [super layoutSubviews];
  uint64_t v1 = OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedWidth;
  double v2 = *(double *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedWidth];
  double v3 = *(double *)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_unmaskedCenterX] + v2 * -0.5;
  double v4 = v2 + v3;
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_leftView];
  [v0 frame];
  [v5 setFrame:CGRectMake(0.0, 0.0, v3, CGRectGetHeight(v12))];
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_centerView];
  double v7 = *(double *)&v0[v1];
  [v0 frame];
  [v6 setFrame:v3, 0.0, v7, CGRectGetHeight(v13)];
  id v8 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp21TrendChartMaskingView_rightView];
  [v0 frame];
  CGFloat v9 = CGRectGetWidth(v14) - v4;
  [v0 frame];
  return [v8 setFrame:v4, 0.0, v9, CGRectGetHeight(v15)];
}

id sub_100213BAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrendChartMaskingView();
  return [super dealloc];
}

uint64_t type metadata accessor for TrendChartMaskingView()
{
  return self;
}

void sub_100213D34()
{
  v22.receiver = v0;
  v22.super_class = (Class)type metadata accessor for WorkoutDetailedHeartRateViewController();
  [super viewDidLoad];
  id v1 = [v0 view];
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  objc_super v2 = v1;
  double v3 = self;
  id v4 = [v3 systemBackgroundColor];
  [v2 setBackgroundColor:v4];

  id v5 = [v0 navigationItem];
  id v6 = [objc_allocWithZone((Class)UIBarButtonItem) initWithBarButtonSystemItem:24 target:v0 action:"close"];
  [v5 setRightBarButtonItem:v6];

  id v7 = [v0 navigationItem];
  id v8 = [self mainBundle];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 localizedStringForKey:v9 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setTitle:v11];

  CGRect v12 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_heartRateController];
  id v13 = [v12 view];
  if (!v13)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  CGRect v14 = v13;
  [v13 setTranslatesAutoresizingMaskIntoConstraints:0];

  id v15 = [v12 view];
  if (!v15)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v16 = v15;
  id v17 = [v3 clearColor];
  [v16 setBackgroundColor:v17];

  id v18 = [v0 view];
  if (!v18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v19 = v18;
  id v20 = [v12 view];
  if (v20)
  {
    uint64_t v21 = v20;
    [v19 addSubview:v20];

    [v0 addChildViewController:v12];
    [v12 didMoveToParentViewController:v0];
    sub_100214294();
    return;
  }
LABEL_11:
  __break(1u);
}

void sub_100214098(char a1)
{
  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for WorkoutDetailedHeartRateViewController();
  [super viewWillAppear:a1 & 1];
  id v3 = [objc_allocWithZone((Class)UINavigationBarAppearance) init];
  [v3 configureWithOpaqueBackground];
  id v4 = self;
  id v5 = v3;
  id v6 = [v4 systemBackgroundColor];
  [v5 setBackgroundColor:v6];

  id v7 = v5;
  id v8 = [v4 systemBackgroundColor];
  [v7 setShadowColor:v8];

  id v9 = [v1 navigationItem];
  [v9 setScrollEdgeAppearance:v7];

  id v10 = [v1 tabBarController];
  if (v10)
  {
    NSString v11 = v10;
    id v12 = [v10 tabBar];

    id v13 = [objc_allocWithZone((Class)UITabBarAppearance) init];
    [v12 setScrollEdgeAppearance:v13];
  }
}

void sub_100214294()
{
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100751160;
  objc_super v2 = *(void **)&v0[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_heartRateController];
  id v3 = [v2 view];
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  id v4 = v3;
  id v5 = [v3 topAnchor];

  id v6 = [v0 view];
  if (!v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v7 = v6;
  id v8 = [v6 safeAreaLayoutGuide];

  id v9 = [v8 topAnchor];
  id v10 = [v5 constraintEqualToAnchor:v9];

  *(void *)(v1 + 32) = v10;
  id v11 = [v2 view];
  if (!v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id v12 = v11;
  id v13 = [v11 leadingAnchor];

  id v14 = [v0 view];
  if (!v14)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v15 = v14;
  id v16 = [v14 safeAreaLayoutGuide];

  id v17 = [v16 leadingAnchor];
  id v18 = [v13 constraintEqualToAnchor:v17];

  *(void *)(v1 + 40) = v18;
  id v19 = [v2 view];
  if (!v19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  id v20 = v19;
  id v21 = [v19 trailingAnchor];

  id v22 = [v0 view];
  if (!v22)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v23 = v22;
  id v24 = [v22 safeAreaLayoutGuide];

  id v25 = [v24 trailingAnchor];
  id v26 = [v21 constraintEqualToAnchor:v25];

  *(void *)(v1 + 48) = v26;
  id v27 = [v2 view];
  if (!v27)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v28 = v27;
  id v29 = [v27 bottomAnchor];

  id v30 = [v0 view];
  if (!v30)
  {
LABEL_19:
    __break(1u);
    return;
  }
  uint64_t v31 = v30;
  uint64_t v32 = self;
  id v33 = [v31 safeAreaLayoutGuide];

  id v34 = [v33 bottomAnchor];
  id v35 = [v29 constraintEqualToAnchor:v34];

  *(void *)(v1 + 56) = v35;
  specialized Array._endMutation()();
  sub_1001ABF94();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v32 activateConstraints:isa];
}

id sub_1002146AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailedHeartRateViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for WorkoutDetailedHeartRateViewController()
{
  return self;
}

id sub_100214784(void *a1, void *a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_workout] = a1;
  *(void *)&v3[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_workoutActivity] = a2;
  id v7 = a2;
  id v8 = a1;
  id v9 = v7;
  id v10 = v3;
  id v11 = v8;
  id v12 = [a3 dataCalculator];
  type metadata accessor for WorkoutDetailHeartRateDataStore();
  swift_allocObject();
  id v13 = a3;
  id v14 = sub_1001A54F0(v11, a2, v12, v13);

  *(void *)&v10[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_dataStore] = v14;
  sub_100214904();
  swift_retain();
  uint64_t v15 = ObservedObject.init(wrappedValue:)();
  id v16 = (uint64_t *)&v10[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_heartRateView];
  *id v16 = v15;
  v16[1] = v17;
  uint64_t v20 = v15;
  uint64_t v21 = v17;
  objc_allocWithZone((Class)sub_1000AFA94(&qword_100950150));
  swift_retain();
  *(void *)&v10[OBJC_IVAR___CHWorkoutDetailedHeartRateViewController_heartRateController] = UIHostingController.init(rootView:)();

  v19.receiver = v10;
  v19.super_class = (Class)type metadata accessor for WorkoutDetailedHeartRateViewController();
  return [super initWithNibName:0 bundle:0];
}

unint64_t sub_100214904()
{
  unint64_t result = qword_100950148;
  if (!qword_100950148)
  {
    type metadata accessor for WorkoutDetailHeartRateDataStore();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950148);
  }
  return result;
}

id sub_10021495C()
{
  uint64_t v1 = OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint;
  objc_super v2 = *(void **)(v0
                + OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint);
  }
  else
  {
    id v4 = [*(id *)(v0 + OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel) heightAnchor];
    id v5 = [v4 constraintEqualToConstant:0.0];

    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    objc_super v2 = 0;
  }
  id v7 = v2;
  return v3;
}

char *sub_100214A04(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel;
  id v10 = objc_allocWithZone((Class)UILabel);
  id v11 = v4;
  id v12 = [v10 init];
  [v12 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v4[v9] = v12;
  *(void *)&v11[OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint] = 0;

  v17.receiver = v11;
  v17.super_class = (Class)type metadata accessor for AddToYourRingSectionHeaderView();
  id v13 = [super initWithFrame:a1, a2, a3, a4];
  uint64_t v14 = *(void *)&v13[OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel];
  uint64_t v15 = v13;
  [v15 addSubview:v14];
  sub_100214C08();

  return v15;
}

id sub_100214B28(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel;
  id v4 = objc_allocWithZone((Class)UILabel);
  id v5 = v1;
  id v6 = [v4 init];
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v3] = v6;
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView____lazy_storage___titleLabelHeightConstraint] = 0;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for AddToYourRingSectionHeaderView();
  id v7 = [super initWithCoder:a1];

  return v7;
}

void sub_100214C08()
{
  uint64_t v1 = self;
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100751160;
  *(void *)(v2 + 32) = sub_10021495C();
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp30AddToYourRingSectionHeaderView_titleLabel];
  id v4 = [v3 bottomAnchor];
  id v5 = [v0 bottomAnchor];
  id v6 = [v4 constraintEqualToAnchor:v5];

  *(void *)(v2 + 40) = v6;
  id v7 = [v3 trailingAnchor];
  id v8 = [v0 trailingAnchor];
  id v9 = [v7 constraintEqualToAnchor:v8];

  *(void *)(v2 + 48) = v9;
  id v10 = [v3 leadingAnchor];
  id v11 = [v0 leadingAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v2 + 56) = v12;
  specialized Array._endMutation()();
  sub_1001ABF94();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 activateConstraints:isa];
}

id sub_100214E00()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AddToYourRingSectionHeaderView();
  return [super dealloc];
}

uint64_t type metadata accessor for AddToYourRingSectionHeaderView()
{
  return self;
}

void sub_100214FD4()
{
  static os_log_type_t.error.getter();
  uint64_t v0 = (void *)HKLogActivity;
  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1007509E0;
  id v2 = v0;
  sub_1000AFA94(&qword_10095C080);
  _print_unlocked<A, B>(_:_:)();
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = sub_1000AA64C();
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xE000000000000000;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  sub_10002828C();
}

uint64_t sub_1002150F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ContentAvailability();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for ContentAvailability.available(_:), v7);
  sub_1000677F4(&qword_100966E40, (void (*)(uint64_t))&type metadata accessor for ContentAvailability);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v19 = v4;
  if (v23[1] == v21 && v23[2] == v22) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_beginAccess();
  *(unsigned char *)(a1 + 16) = v11 & 1;
  static Log.default.getter();
  swift_retain_n();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_beginAccess();
    LOBYTE(v20) = *(unsigned char *)(a1 + 16);
    sub_1000AFA94(&qword_1009687C0);
    uint64_t v15 = Optional.description.getter();
    uint64_t v20 = sub_10008F1F4(v15, v16, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "FitnessAppBadgeAggregator: isContentAvailable %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v3);
  return static Promise<>.success.getter();
}

uint64_t sub_1002154B0(uint64_t a1, int16x8_t a2)
{
  a2.i64[0] = 0x8002000010002;
  return sub_1002157B8(a2, a1, (uint64_t)"FitnessAppBadgeAggregator: Failed to query content availability: %s");
}

uint64_t sub_1002154D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = NoticePrivacyPreference.state.getter();
  char v23 = v8 & 1;
  char v21 = 1;
  sub_10002F1B4();
  sub_10002F160();
  char v9 = static PortableEnum<>.== infix(_:_:)() & 1;
  swift_beginAccess();
  *(unsigned char *)(a1 + 16) = v9;
  static Log.default.getter();
  swift_retain_n();
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = v4;
    v22[0] = v13;
    uint64_t v19 = a2;
    *(_DWORD *)id v12 = 136315138;
    v17[1] = v12 + 4;
    swift_beginAccess();
    LOBYTE(v20) = *(unsigned char *)(a1 + 16);
    sub_1000AFA94(&qword_1009687C0);
    uint64_t v14 = Optional.description.getter();
    uint64_t v20 = sub_10008F1F4(v14, v15, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "FitnessAppBadgeAggregator: isPrivacyAcknowledged %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v18);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return static Promise<>.success.getter();
}

uint64_t sub_100215790(uint64_t a1, int16x8_t a2)
{
  a2.i64[0] = 0x8002200010002;
  return sub_1002157B8(a2, a1, (uint64_t)"FitnessAppBadgeAggregator: Unable to fetch notice privacy preference: %{public}s.");
}

uint64_t sub_1002157B8(int16x8_t a1, uint64_t a2, uint64_t a3)
{
  int16x8_t v21 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.default.getter();
  swift_errorRetain();
  swift_errorRetain();
  char v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v19 = v5;
    id v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = v3;
    uint64_t v23 = v13;
    unsigned __int32 v14 = vmovn_s16(v21).u32[0];
    v21.i64[0] = a3;
    *(_DWORD *)id v12 = v14;
    v18[1] = v12 + 4;
    swift_getErrorValue();
    uint64_t v15 = Error.logOutput.getter();
    uint64_t v22 = sub_10008F1F4(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, (const char *)v21.i64[0], v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v19);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void sub_100215A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = self;
  swift_retain();
  id v8 = [v7 currentNotificationCenter];
  char v9 = (void *)swift_allocObject();
  void v9[2] = a3;
  v9[3] = sub_10021678C;
  v9[4] = v6;
  void v11[4] = sub_10021680C;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  _OWORD v11[2] = sub_100066A00;
  v11[3] = &unk_1008BC018;
  os_log_type_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  [v8 getNotificationSettingsWithCompletionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_100215B54(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = [a1 authorizationStatus] == (id)2;
  swift_beginAccess();
  *(unsigned char *)(a2 + 16) = (_BYTE)a1;
  static Log.default.getter();
  swift_retain_n();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v23 = v8;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v24 = a4;
    uint64_t v27 = v16;
    id v25 = a3;
    *(_DWORD *)uint64_t v15 = 136315138;
    v22[1] = v15 + 4;
    swift_beginAccess();
    LOBYTE(v26) = *(unsigned char *)(a2 + 16);
    sub_1000AFA94(&qword_1009687C0);
    uint64_t v17 = Optional.description.getter();
    uint64_t v26 = sub_10008F1F4(v17, v18, &v27);
    a3 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "FitnessAppBadgeAggregator: isNotificationAuthorized %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v23);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_1000AFA94(&qword_10095C080);
  static Result<>.success.getter();
  uint64_t v19 = v27;
  char v20 = v28;
  a3(v27, v28);
  return sub_10006D814(v19, v20);
}

void sub_100215E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v31 = a3;
  uint64_t v32 = a5;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [self standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned int v15 = [v13 BOOLForKey:v14];

  static Log.default.getter();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = v9;
    uint64_t v19 = a6;
    char v20 = v18;
    *(_DWORD *)unint64_t v18 = 67109120;
    unsigned int v33 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "FitnessAppBadgeAggregator: forceRequiringPrivacyAcknowledgement %{BOOL}d", v20, 8u);
    a6 = v19;
    uint64_t v9 = v30;
    swift_slowDealloc();
  }
  int16x8_t v21 = (unsigned char *)(a1 + 16);
  uint64_t v22 = (unsigned char *)(a2 + 16);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    swift_beginAccess();
    *int16x8_t v21 = 0;
  }
  swift_beginAccess();
  if (*v22)
  {
    swift_beginAccess();
    char v23 = 0;
    int v24 = *v21;
    if (v24 != 2 && (v24 & 1) == 0)
    {
      uint64_t v25 = a6;
      uint64_t v26 = (unsigned __int8 *)(v31 + 16);
      swift_beginAccess();
      int v27 = *v26;
      if (v27 == 2) {
        char v23 = 0;
      }
      else {
        char v23 = v27 & 1;
      }
      a6 = v25;
    }
  }
  else
  {
    char v23 = 0;
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v29 = (void *)Strong;
    sub_100020FB0(v23, v32, a6);
  }
}

uint64_t sub_10021611C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v6);
  static Log.default.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v18 = v2;
    id v12 = (uint8_t *)v11;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v17 = v4;
    *(_DWORD *)id v12 = 136446210;
    uint64_t v16 = v12 + 4;
    swift_getErrorValue();
    uint64_t v13 = Error.logOutput.getter();
    uint64_t v19 = sub_10008F1F4(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "FitnessAppBadgeAggregator: Unable to fetch amelia badge: %{public}s.", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v17);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

id sub_1002163A4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FitnessAppBadgeAggregator();
  return [super dealloc];
}

uint64_t sub_1002164CC()
{
  return swift_deallocObject();
}

uint64_t sub_1002164DC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100216514()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100216564()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002165B4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100216604()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return swift_deallocObject();
}

void sub_100216654()
{
}

uint64_t sub_10021665C()
{
  return swift_deallocObject();
}

uint64_t sub_10021666C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002150F0(v1, a1);
}

uint64_t sub_100216674()
{
  return sub_10001EC00(&qword_100950088);
}

uint64_t sub_100216680()
{
  return sub_10001EC00((uint64_t *)&unk_1009633D0);
}

uint64_t sub_10021668C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002154D8(v1, a1);
}

uint64_t sub_100216694()
{
  return sub_10001EC00(&qword_100950218);
}

uint64_t sub_1002166A0()
{
  return sub_10001EC00((uint64_t *)&unk_1009633D0);
}

void sub_1002166AC(uint64_t a1, uint64_t a2)
{
  sub_100215A08(a1, a2, v2);
}

uint64_t sub_1002166B4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_10021670C()
{
  sub_100215E28(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void (**)(void))(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_10021671C()
{
  return sub_10001EC00((uint64_t *)&unk_1009633D0);
}

uint64_t sub_100216728()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100216760(uint64_t a1)
{
  return sub_10021611C(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10021677C()
{
  return sub_10001EC00((uint64_t *)&unk_1009633D0);
}

uint64_t sub_10021678C(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1002167CC()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10021680C(void *a1)
{
  return sub_100215B54(a1, *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100216818()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100216858()
{
  return sub_10001EC00(&qword_100950248);
}

uint64_t sub_100216864()
{
  return swift_deallocObject();
}

void sub_10021689C()
{
}

uint64_t sub_1002168B8()
{
  return sub_10001EC00((uint64_t *)&unk_1009633D0);
}

uint64_t sub_1002168C8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100216908()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100216948()
{
  swift_errorRelease();
  swift_release();

  return swift_deallocObject();
}

double sub_1002169C0()
{
  double result = 12.0;
  xmmword_100950250 = xmmword_100755AF0;
  *(_OWORD *)&qword_100950260 = xmmword_100755B00;
  return result;
}

uint64_t sub_1002169E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v3 = type metadata accessor for SmallAwardsCardView();
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v68 + 64);
  __chkstk_darwin(v3);
  uint64_t v67 = (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000AFA94(&qword_1009503C8);
  uint64_t v71 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  long long v69 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v70 = (char *)&v62 - v8;
  uint64_t v9 = sub_1000AFA94(&qword_1009503D0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000AFA94(&qword_1009503D8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v72 = (uint64_t)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v62 - v15;
  uint64_t v17 = *(int *)(v3 + 60);
  uint64_t v74 = a1;
  long long v81 = *(_OWORD *)(a1 + v17);
  sub_1000AFA94(&qword_100950388);
  State.wrappedValue.getter();
  uint64_t v18 = v80[0];
  if (v80[0])
  {
    uint64_t v64 = v9;
    uint64_t v65 = v5;
    id v66 = v16;
    if (qword_10094A698 != -1) {
      swift_once();
    }
    long long v62 = xmmword_100950250;
    uint64_t v20 = qword_100950260;
    uint64_t v19 = unk_100950268;
    char v21 = static Edge.Set.all.getter();
    uint64_t v22 = v74;
    uint64_t v23 = v74 + *(int *)(v3 + 64);
    char v24 = *(unsigned char *)v23;
    uint64_t v25 = *(void *)(v23 + 8);
    LOBYTE(v81) = v24;
    *((void *)&v81 + 1) = v25;
    swift_retain();
    sub_1000AFA94(&qword_10094DEE0);
    uint64_t v63 = v18;
    State.wrappedValue.getter();
    double v26 = 0.0;
    *(void *)&long long v81 = v18;
    if (LOBYTE(v80[0])) {
      double v26 = 1.0;
    }
    BYTE8(v81) = v21;
    *(_OWORD *)id v82 = v62;
    *(void *)&v82[16] = v20;
    *(void *)&v82[24] = v19;
    v82[32] = 0;
    *(double *)((char *)&v83 + 7) = v26;
    uint64_t v27 = v67;
    sub_100080D88(v22, v67);
    unint64_t v28 = (*(unsigned __int8 *)(v68 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    uint64_t v29 = swift_allocObject();
    sub_10007EC34(v27, v29 + v28);
    uint64_t v30 = sub_1000AFA94(&qword_1009503E8);
    unint64_t v31 = sub_100219034();
    uint64_t v32 = v69;
    View.onTapGesture(count:perform:)();
    swift_release();
    swift_release();
    unsigned int v33 = v70;
    uint64_t v34 = v71;
    uint64_t v35 = v65;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v32, v65);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v11, v33, v35);
    swift_storeEnumTagMultiPayload();
    sub_1000AFA94(&qword_1009503E0);
    *(void *)&long long v81 = v30;
    *((void *)&v81 + 1) = v31;
    swift_getOpaqueTypeConformance2();
    sub_1002190D0((unint64_t *)&qword_100950408, &qword_1009503E0);
    uint64_t v36 = (uint64_t)v66;
    _ConditionalContent<>.init(storage:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
    uint64_t v37 = v74;
  }
  else
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v38 = v99;
    char v39 = v100;
    uint64_t v40 = v101;
    char v41 = v102;
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    *((void *)v11 + 2) = v38;
    v11[24] = v39;
    *((void *)v11 + 4) = v40;
    v11[40] = v41;
    *((_OWORD *)v11 + 3) = v103;
    swift_storeEnumTagMultiPayload();
    sub_1000AFA94(&qword_1009503E0);
    uint64_t v42 = sub_1000A1370(&qword_1009503E8);
    unint64_t v43 = sub_100219034();
    *(void *)&long long v81 = v42;
    *((void *)&v81 + 1) = v43;
    swift_getOpaqueTypeConformance2();
    sub_1002190D0((unint64_t *)&qword_100950408, &qword_1009503E0);
    _ConditionalContent<>.init(storage:)();
    uint64_t v36 = (uint64_t)v16;
    uint64_t v37 = v74;
  }
  uint64_t v71 = static HorizontalAlignment.leading.getter();
  sub_100217574(v37, (uint64_t)v75);
  *(_OWORD *)((char *)&v77[8] + 7) = v75[8];
  *(_OWORD *)((char *)&v77[9] + 7) = v75[9];
  *(_OWORD *)((char *)&v77[10] + 7) = v76[0];
  v77[11] = *(_OWORD *)((char *)v76 + 9);
  *(_OWORD *)((char *)&v77[4] + 7) = v75[4];
  *(_OWORD *)((char *)&v77[5] + 7) = v75[5];
  *(_OWORD *)((char *)&v77[6] + 7) = v75[6];
  *(_OWORD *)((char *)&v77[7] + 7) = v75[7];
  *(_OWORD *)((char *)v77 + 7) = v75[0];
  *(_OWORD *)((char *)&v77[1] + 7) = v75[1];
  *(_OWORD *)((char *)&v77[2] + 7) = v75[2];
  char v78 = 0;
  *(_OWORD *)((char *)&v77[3] + 7) = v75[3];
  char v44 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  char v79 = 0;
  uint64_t v53 = v72;
  sub_1000AEF2C(v36, v72, &qword_1009503D8);
  char v54 = v79;
  uint64_t v55 = v73;
  sub_1000AEF2C(v53, v73, &qword_1009503D8);
  uint64_t v56 = v36;
  uint64_t v57 = sub_1000AFA94(&qword_100950410);
  uint64_t v58 = *(int *)(v57 + 48);
  *(_OWORD *)((char *)&v80[18] + 1) = v77[8];
  *(_OWORD *)((char *)&v80[20] + 1) = v77[9];
  *(_OWORD *)((char *)&v80[22] + 1) = v77[10];
  *(_OWORD *)((char *)&v80[24] + 1) = v77[11];
  *(_OWORD *)((char *)&v80[10] + 1) = v77[4];
  *(_OWORD *)((char *)&v80[12] + 1) = v77[5];
  *(_OWORD *)((char *)&v80[14] + 1) = v77[6];
  *(_OWORD *)((char *)&v80[16] + 1) = v77[7];
  *(_OWORD *)((char *)&v80[4] + 1) = v77[1];
  *(_OWORD *)((char *)&v80[6] + 1) = v77[2];
  *(_OWORD *)((char *)&v80[8] + 1) = v77[3];
  uint64_t v59 = v71;
  v80[0] = v71;
  v80[1] = 0;
  LOBYTE(v80[2]) = 0;
  *(_OWORD *)((char *)&v80[2] + 1) = v77[0];
  LOBYTE(v80[27]) = v44;
  v80[28] = v46;
  v80[29] = v48;
  v80[30] = v50;
  v80[31] = v52;
  LOBYTE(v80[32]) = v54;
  memcpy((void *)(v55 + v58), v80, 0x101uLL);
  uint64_t v60 = v55 + *(int *)(v57 + 64);
  *(void *)uint64_t v60 = 0;
  *(unsigned char *)(v60 + 8) = 0;
  sub_100219140((uint64_t)v80);
  sub_10008DB18(v56, &qword_1009503D8);
  long long v89 = v77[8];
  long long v90 = v77[9];
  long long v91 = v77[10];
  long long v92 = v77[11];
  long long v85 = v77[4];
  long long v86 = v77[5];
  long long v87 = v77[6];
  long long v88 = v77[7];
  *(_OWORD *)&v82[1] = v77[0];
  *(_OWORD *)&v82[17] = v77[1];
  long long v83 = v77[2];
  long long v81 = (unint64_t)v59;
  v82[0] = 0;
  long long v84 = v77[3];
  char v93 = v44;
  uint64_t v94 = v46;
  uint64_t v95 = v48;
  uint64_t v96 = v50;
  uint64_t v97 = v52;
  char v98 = v54;
  sub_1002191CC((uint64_t)&v81);
  return sub_10008DB18(v53, &qword_1009503D8);
}

uint64_t sub_10021728C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for SmallAwardsCardView();
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0 + *(int *)(__chkstk_darwin(v2) + 56);
  char v7 = *(unsigned char *)(v6 + 16);
  uint64_t v8 = *(void *)(v6 + 24);
  long long v31 = *(_OWORD *)v6;
  char v32 = v7;
  uint64_t v33 = v8;
  sub_1000AFA94(&qword_100950380);
  uint64_t result = State.wrappedValue.getter();
  if ((v29 & 1) == 0)
  {
    uint64_t v10 = *(void **)(v0 + v2[7]);
    if (v10)
    {
      id v11 = v10;
      sub_100217A38();
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      sub_100080D88(v0, (uint64_t)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v16 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v17 = swift_allocObject();
      sub_10007EC34((uint64_t)v5, v17 + v16);
      sub_100080D88(v1, (uint64_t)v5);
      uint64_t v18 = swift_allocObject();
      sub_10007EC34((uint64_t)v5, v18 + v16);
      sub_1000AEF2C(v1 + v2[11], (uint64_t)&v31, &qword_10094C750);
      if (v33)
      {
        uint64_t v19 = (char **)sub_10007E4EC(&v31, v33);
        uint64_t v20 = (void *)(v1 + v2[5]);
        uint64_t v30 = &type metadata for AwardViewActionContext;
        char v21 = (int64x2_t *)swift_allocObject();
        v28[0] = v21;
        v21[1].i64[0] = v13;
        v21[1].i64[1] = v15;
        void v21[2] = vdupq_n_s64(0x4051800000000000uLL);
        v21[3].i64[0] = (uint64_t)v11;
        v21[3].i64[1] = (uint64_t)sub_100219264;
        v21[4].i64[0] = v17;
        v21[4].i64[1] = (uint64_t)sub_100219280;
        v21[5].i64[0] = v18;
        uint64_t v22 = *v19;
        uint64_t v23 = v20[3];
        uint64_t v24 = v20[4];
        uint64_t v25 = sub_10007E4EC(v20, v23);
        id v26 = v11;
        swift_retain_n();
        swift_retain_n();
        id v27 = v26;
        sub_100676328((uint64_t)v25, (uint64_t)v28, v22, v23, v24);
        swift_release_n();
        swift_release_n();

        sub_10008DB18((uint64_t)v28, &qword_100955A00);
        return _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)&v31);
      }
      else
      {
        swift_release();
        swift_release();

        return sub_10008DB18((uint64_t)&v31, &qword_10094C750);
      }
    }
  }
  return result;
}

uint64_t sub_100217574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v4 = type metadata accessor for Font.Leading();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for SmallAwardsCardView();
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(v62 + 32));
  uint64_t v9 = v8[1];
  uint64_t v71 = *v8;
  uint64_t v72 = v9;
  unint64_t v61 = sub_1000A06D0();
  swift_bridgeObjectRetain();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  LOBYTE(v9) = v13 & 1;
  static Font.caption2.getter();
  unsigned int v60 = enum case for Font.Leading.tight(_:);
  uint64_t v14 = *(void (**)(void))(v5 + 104);
  v57[1] = v5 + 104;
  uint64_t v59 = (void (*)(char *, void, uint64_t))v14;
  v14(v7);
  Font.leading(_:)();
  swift_release();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v5 + 8);
  v58(v7, v4);
  uint64_t v15 = Text.font(_:)();
  uint64_t v67 = v16;
  uint64_t v68 = v15;
  char v18 = v17;
  uint64_t v69 = v19;
  swift_release();
  int v64 = v18 & 1;
  sub_1000A06C0(v10, v12, v9);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  int v65 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  unint64_t v28 = (uint64_t *)(v63 + *(int *)(v62 + 36));
  uint64_t v29 = v28[1];
  uint64_t v71 = *v28;
  uint64_t v72 = v29;
  swift_bridgeObjectRetain();
  uint64_t v30 = Text.init<A>(_:)();
  uint64_t v32 = v31;
  char v34 = v33 & 1;
  static Font.caption2.getter();
  v59(v7, v60, v4);
  Font.leading(_:)();
  swift_release();
  v58(v7, v4);
  uint64_t v35 = Text.font(_:)();
  uint64_t v37 = v36;
  char v39 = v38;
  uint64_t v41 = v40;
  swift_release();
  v39 &= 1u;
  sub_1000A06C0(v30, v32, v34);
  swift_bridgeObjectRelease();
  uint64_t v42 = swift_getKeyPath();
  LODWORD(v9) = static HierarchicalShapeStyle.secondary.getter();
  LOBYTE(v32) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  char v43 = v64;
  char v70 = v64;
  char v83 = v64;
  char v80 = 0;
  char v78 = v39;
  char v73 = 0;
  *(_DWORD *)(a2 + 17) = v71;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v71 + 3);
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v82;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v82[3];
  *(_DWORD *)(a2 + 49) = *(_DWORD *)v81;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&v81[3];
  int v44 = *(_DWORD *)v79;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v79[3];
  *(_DWORD *)(a2 + 89) = v44;
  int v45 = *(_DWORD *)v77;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v77[3];
  *(_DWORD *)(a2 + 113) = v45;
  LOWORD(v45) = v75;
  *(unsigned char *)(a2 + 139) = v76;
  *(_WORD *)(a2 + 137) = v45;
  int v46 = *(_DWORD *)v74;
  *(_DWORD *)(a2 + 148) = *(_DWORD *)&v74[3];
  *(_DWORD *)(a2 + 145) = v46;
  LOBYTE(v46) = v73;
  uint64_t v48 = v67;
  uint64_t v47 = v68;
  *(void *)a2 = v68;
  *(void *)(a2 + 8) = v48;
  *(unsigned char *)(a2 + 16) = v43;
  uint64_t v49 = KeyPath;
  *(void *)(a2 + 24) = v69;
  *(void *)(a2 + 32) = v49;
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = v65;
  *(void *)(a2 + 56) = v21;
  *(void *)(a2 + 64) = v23;
  *(void *)(a2 + 72) = v25;
  *(void *)(a2 + 80) = v27;
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = v35;
  *(void *)(a2 + 104) = v37;
  *(unsigned char *)(a2 + 112) = v39;
  *(void *)(a2 + 120) = v41;
  *(void *)(a2 + 128) = v42;
  *(unsigned char *)(a2 + 136) = 1;
  *(_DWORD *)(a2 + 140) = v9;
  *(unsigned char *)(a2 + 144) = v32;
  *(void *)(a2 + 152) = v50;
  *(void *)(a2 + 160) = v51;
  *(void *)(a2 + 168) = v52;
  *(void *)(a2 + 176) = v53;
  *(unsigned char *)(a2 + 184) = v46;
  uint64_t v54 = v47;
  uint64_t v55 = v48;
  sub_1000A1750(v47, v48, v43);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000A1750(v35, v37, v39);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000A06C0(v35, v37, v39);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000A06C0(v54, v55, v70);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100217A38()
{
  uint64_t v49 = type metadata accessor for DynamicTypeSize();
  uint64_t v52 = *(void *)(v49 - 8);
  uint64_t v1 = __chkstk_darwin(v49);
  uint64_t v51 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v50 = (uint64_t)&v45 - v3;
  uint64_t v4 = type metadata accessor for LocalCoordinateSpace();
  uint64_t v48 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GeometryProxy();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000AFA94(&qword_10094C580);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = type metadata accessor for SmallAwardsCardView();
  uint64_t v53 = v0;
  uint64_t v54 = v17;
  sub_1000AFA94(&qword_10094C6A0);
  Binding.wrappedValue.getter();
  char v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v19 = v18(v16, 1, v7);
  int v46 = v6;
  uint64_t v47 = v4;
  if (v19)
  {
    sub_10008DB18((uint64_t)v16, &qword_10094C580);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v16, v7);
    sub_10008DB18((uint64_t)v16, &qword_10094C580);
    static CoordinateSpaceProtocol<>.local.getter();
    GeometryProxy.frame<A>(in:)();
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    CGFloat v25 = v24;
    CGFloat v27 = v26;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v55.origin.x = v21;
    v55.origin.y = v23;
    v55.size.width = v25;
    v55.size.height = v27;
    CGRectGetHeight(v55);
  }
  sub_1000AFA94(&qword_10094C588);
  State.wrappedValue.getter();
  if (v18(v14, 1, v7))
  {
    sub_10008DB18((uint64_t)v14, &qword_10094C580);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v14, v7);
    sub_10008DB18((uint64_t)v14, &qword_10094C580);
    unint64_t v28 = v46;
    static CoordinateSpaceProtocol<>.local.getter();
    uint64_t v29 = v47;
    GeometryProxy.frame<A>(in:)();
    CGFloat v31 = v30;
    CGFloat v33 = v32;
    CGFloat v35 = v34;
    CGFloat v37 = v36;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v56.origin.x = v31;
    v56.origin.y = v33;
    v56.size.width = v35;
    v56.size.height = v37;
    CGRectGetHeight(v56);
  }
  uint64_t v38 = v50;
  sub_100092088(v50);
  uint64_t v40 = v51;
  uint64_t v39 = v52;
  uint64_t v41 = v49;
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for DynamicTypeSize.xxLarge(_:), v49);
  sub_1000A3A40((unint64_t *)&qword_10094C6D8, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  char v42 = dispatch thunk of static Comparable.< infix(_:_:)();
  char v43 = *(void (**)(char *, uint64_t))(v39 + 8);
  v43(v40, v41);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v43)(v38, v41);
  if ((v42 & 1) != 0 && qword_10094A698 != -1) {
    return swift_once();
  }
  return result;
}

uint64_t sub_100217FF4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10021805C()
{
  return State.wrappedValue.setter();
}

uint64_t *sub_1002180D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_1000AFA94(&qword_10094C578);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    long long v10 = *(_OWORD *)((char *)a2 + v9 + 24);
    *(_OWORD *)((char *)v4 + v9 + 24) = v10;
    (**(void (***)(void))(v10 - 8))();
    uint64_t v11 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v12 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)v4 + v11) = (uint64_t)v12;
    uint64_t v13 = a3[8];
    uint64_t v14 = a3[9];
    uint64_t v15 = (uint64_t *)((char *)v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    char v18 = (uint64_t *)((char *)v4 + v14);
    int v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = a3[10];
    uint64_t v23 = a3[11];
    double v24 = *(void **)((char *)a2 + v22);
    *char v18 = v20;
    v18[1] = v21;
    *(uint64_t *)((char *)v4 + v22) = (uint64_t)v24;
    CGFloat v25 = (char *)v4 + v23;
    double v26 = (char *)a2 + v23;
    uint64_t v27 = *(uint64_t *)((char *)a2 + v23 + 24);
    id v28 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v29 = v24;
    if (v27)
    {
      uint64_t v30 = *((void *)v26 + 4);
      *((void *)v25 + 3) = v27;
      *((void *)v25 + 4) = v30;
      (**(void (***)(char *, char *, uint64_t))(v27 - 8))(v25, v26, v27);
    }
    else
    {
      long long v31 = *((_OWORD *)v26 + 1);
      *(_OWORD *)CGFloat v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v31;
      *((void *)v25 + 4) = *((void *)v26 + 4);
    }
    uint64_t v32 = a3[12];
    CGFloat v33 = (uint64_t *)((char *)v4 + v32);
    double v34 = (char *)a2 + v32;
    uint64_t v35 = *(uint64_t *)((char *)a2 + v32 + 8);
    *CGFloat v33 = *(uint64_t *)((char *)a2 + v32);
    v33[1] = v35;
    swift_retain();
    swift_retain();
    uint64_t v36 = *(int *)(sub_1000AFA94(&qword_10094C6A0) + 32);
    CGFloat v37 = (char *)v33 + v36;
    uint64_t v38 = &v34[v36];
    uint64_t v39 = type metadata accessor for GeometryProxy();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    if (v41(v38, 1, v39))
    {
      uint64_t v42 = sub_1000AFA94(&qword_10094C580);
      memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    uint64_t v43 = a3[13];
    int v44 = (char *)v4 + v43;
    uint64_t v45 = (char *)a2 + v43;
    if (v41((char *)a2 + v43, 1, v39))
    {
      uint64_t v46 = sub_1000AFA94(&qword_10094C580);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v44, v45, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v44, 0, 1, v39);
    }
    uint64_t v47 = sub_1000AFA94(&qword_10094C588);
    *(void *)&v44[*(int *)(v47 + 28)] = *(void *)&v45[*(int *)(v47 + 28)];
    uint64_t v48 = a3[14];
    uint64_t v49 = a3[15];
    uint64_t v50 = (char *)v4 + v48;
    uint64_t v51 = (char *)a2 + v48;
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    v50[16] = v51[16];
    *((void *)v50 + 3) = *((void *)v51 + 3);
    uint64_t v52 = (uint64_t *)((char *)v4 + v49);
    uint64_t v53 = (uint64_t *)((char *)a2 + v49);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    uint64_t v55 = a3[16];
    CGRect v56 = (char *)v4 + v55;
    uint64_t v57 = (char *)a2 + v55;
    *CGRect v56 = *v57;
    *((void *)v56 + 1) = *((void *)v57 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

char *sub_10021851C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_1000AFA94(&qword_10094C578);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  long long v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  long long v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)long long v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((void *)v10 + 4) = *((void *)v11 + 4);
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  uint64_t v14 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  uint64_t v15 = a3[11];
  uint64_t v16 = a3[12];
  uint64_t v17 = &a1[v15];
  char v18 = &a2[v15];
  long long v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v17 + 4) = *((void *)v18 + 4);
  uint64_t v20 = &a1[v16];
  uint64_t v21 = &a2[v16];
  uint64_t v22 = *(void *)&a2[v16];
  uint64_t v23 = *(void *)&a2[v16 + 8];
  *(void *)uint64_t v20 = v22;
  *((void *)v20 + 1) = v23;
  uint64_t v24 = *(int *)(sub_1000AFA94(&qword_10094C6A0) + 32);
  CGFloat v25 = &v20[v24];
  double v26 = &v21[v24];
  uint64_t v27 = type metadata accessor for GeometryProxy();
  uint64_t v28 = *(void *)(v27 - 8);
  id v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v29(v26, 1, v27))
  {
    uint64_t v30 = sub_1000AFA94(&qword_10094C580);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v31 = a3[13];
  uint64_t v32 = &a1[v31];
  CGFloat v33 = &a2[v31];
  if (v29(&a2[v31], 1, v27))
  {
    uint64_t v34 = sub_1000AFA94(&qword_10094C580);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v32, v33, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
  }
  uint64_t v35 = sub_1000AFA94(&qword_10094C588);
  *(void *)&v32[*(int *)(v35 + 28)] = *(void *)&v33[*(int *)(v35 + 28)];
  uint64_t v36 = a3[14];
  uint64_t v37 = a3[15];
  uint64_t v38 = &a1[v36];
  uint64_t v39 = &a2[v36];
  long long v40 = *((_OWORD *)v39 + 1);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v40;
  *(_OWORD *)&a1[v37] = *(_OWORD *)&a2[v37];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  return a1;
}

char *sub_100218834(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10008DB18((uint64_t)a1, &qword_10094C578);
    uint64_t v6 = sub_1000AFA94(&qword_10094C578);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  long long v10 = &a2[v8];
  _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)&a1[v8]);
  long long v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 4) = *((void *)v10 + 4);
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v13 = *(void **)&a1[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];

  uint64_t v14 = a3[8];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v18 = *(void *)v16;
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v23 = *(void *)v21;
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  CGFloat v25 = *(void **)&a1[v24];
  *(void *)&a1[v24] = *(void *)&a2[v24];

  uint64_t v26 = a3[11];
  uint64_t v27 = (uint64_t)&a1[v26];
  uint64_t v28 = &a2[v26];
  if (*(void *)&a1[v26 + 24]) {
    _s10FitnessApp24HistoryViewActionContextVwxx_0(v27);
  }
  long long v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(void *)(v27 + 32) = *((void *)v28 + 4);
  uint64_t v30 = a3[12];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)&a1[v30] = *(void *)&a2[v30];
  swift_release();
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_release();
  uint64_t v33 = *(int *)(sub_1000AFA94(&qword_10094C6A0) + 32);
  uint64_t v34 = &v31[v33];
  uint64_t v35 = &v32[v33];
  uint64_t v36 = type metadata accessor for GeometryProxy();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_12:
    uint64_t v41 = sub_1000AFA94(&qword_10094C580);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_13:
  uint64_t v42 = a3[13];
  uint64_t v43 = &a1[v42];
  int v44 = &a2[v42];
  int v45 = v38(&a1[v42], 1, v36);
  int v46 = v38(v44, 1, v36);
  if (!v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v43, v44, v36);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v36);
    goto LABEL_18;
  }
  if (v46)
  {
LABEL_18:
    uint64_t v47 = sub_1000AFA94(&qword_10094C580);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v43, v44, v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v43, 0, 1, v36);
LABEL_19:
  uint64_t v48 = sub_1000AFA94(&qword_10094C588);
  *(void *)&v43[*(int *)(v48 + 28)] = *(void *)&v44[*(int *)(v48 + 28)];
  swift_release();
  uint64_t v49 = a3[14];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  v50[16] = v51[16];
  *((void *)v50 + 3) = *((void *)v51 + 3);
  swift_release();
  uint64_t v52 = a3[15];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  *(void *)&a1[v52] = *(void *)&a2[v52];
  swift_release();
  *((void *)v53 + 1) = *((void *)v54 + 1);
  swift_release();
  uint64_t v55 = a3[16];
  CGRect v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  *CGRect v56 = *v57;
  *((void *)v56 + 1) = *((void *)v57 + 1);
  swift_release();
  return a1;
}

uint64_t sub_100218CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100218CFC);
}

uint64_t sub_100218CFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000AFA94(&qword_10094C590);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 24);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = sub_1000AFA94(&qword_10094C6A0);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[12];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = sub_1000AFA94(&qword_10094C588);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[13];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_100218E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100218EA0);
}

uint64_t sub_100218EA0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_1000AFA94(&qword_10094C590);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5] + 24) = (a2 - 1);
    return result;
  }
  uint64_t v13 = sub_1000AFA94(&qword_10094C6A0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[12];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = sub_1000AFA94(&qword_10094C588);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[13];

  return v16(v18, a2, a2, v17);
}

unint64_t sub_100219034()
{
  unint64_t result = qword_1009503F0;
  if (!qword_1009503F0)
  {
    sub_1000A1370(&qword_1009503E8);
    sub_1002190D0(&qword_1009503F8, &qword_100950400);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009503F0);
  }
  return result;
}

uint64_t sub_1002190D0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000A1370(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100219140(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  char v4 = *(unsigned char *)(a1 + 136);
  sub_1000A1750(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000A1750(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1002191CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  char v4 = *(unsigned char *)(a1 + 136);
  sub_1000A06C0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000A06C0(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100219264()
{
  return sub_100219298((uint64_t (*)(uint64_t))sub_100217FF4);
}

uint64_t sub_100219280()
{
  return sub_100219298((uint64_t (*)(uint64_t))sub_10021805C);
}

uint64_t sub_100219298(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for SmallAwardsCardView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_10021930C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100219360()
{
  return sub_10021728C();
}

uint64_t sub_1002193C0(void *a1, char a2)
{
  uint64_t v2 = 0xD000000000000014;
  switch(a2)
  {
    case 1:
      [a1 isMuted];
      id v3 = (id)ActivitySharingBundle();
      goto LABEL_6;
    case 2:
      [a1 canSeeMyActivityData];
      id v3 = (id)ActivitySharingBundle();
      goto LABEL_6;
    case 3:
      return v2;
    case 4:
      id v3 = (id)ActivitySharingBundle();
      goto LABEL_6;
    default:
      id v3 = [self mainBundle];
LABEL_6:
      NSString v4 = String._bridgeToObjectiveC()();
      id v5 = [v3 localizedStringForKey:v4 value:0 table:0];

      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      return v2;
  }
}

uint64_t sub_100219594()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t sub_1002195D8()
{
  unint64_t result = qword_100950578;
  if (!qword_100950578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950578);
  }
  return result;
}

unint64_t sub_100219630()
{
  unint64_t result = qword_100950580;
  if (!qword_100950580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950580);
  }
  return result;
}

uint64_t sub_100219684()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_1002196B8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100219708()
{
  unint64_t result = qword_100950588;
  if (!qword_100950588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950588);
  }
  return result;
}

uint64_t sub_10021975C()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  sub_1000258C4(v0, qword_100997820);
  sub_1000876DC(v0, (uint64_t)qword_100997820);
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_1002197C0()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t sub_1002197F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[97] = a5;
  v5[96] = a1;
  uint64_t v6 = type metadata accessor for IntentDialog();
  v5[98] = v6;
  v5[99] = *(void *)(v6 - 8);
  v5[100] = swift_task_alloc();
  sub_1000AFA94((uint64_t *)&unk_10094B790);
  v5[101] = swift_task_alloc();
  v5[102] = swift_task_alloc();
  v5[103] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[104] = v7;
  v5[105] = *(void *)(v7 - 8);
  v5[106] = swift_task_alloc();
  v5[107] = swift_task_alloc();
  v5[108] = swift_task_alloc();
  sub_1000AFA94((uint64_t *)&unk_1009555F0);
  v5[109] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[110] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[111] = v9;
  v5[112] = v8;
  return _swift_task_switch(sub_1002199E4, v9, v8);
}

uint64_t sub_1002199E4()
{
  IntentParameter.wrappedValue.getter();
  uint64_t v1 = *(void **)(v0 + 744);
  EntityProperty.wrappedValue.getter();
  swift_release();

  if (*(unsigned char *)(v0 + 1016) != 1)
  {
    IntentParameter.wrappedValue.getter();
    uint64_t v6 = *(void *)(v0 + 704);
    *(void *)(v0 + 992) = v6;
    uint64_t v7 = *(void *)(v0 + 712);
    *(void *)(v0 + 1000) = v7;
    *(void *)(v0 + 576) = v6;
    *(void *)(v0 + 584) = v7;
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 1008) = v8;
    unint64_t v9 = sub_10021B6BC();
    *uint64_t v8 = v0;
    v8[1] = sub_10021A9A8;
    uint64_t v10 = *(void *)(v0 + 808);
LABEL_9:
    return URLRepresentableEntity.urlRepresentation.getter(v10, &type metadata for AwardEntity, v9);
  }
  IntentParameter.wrappedValue.getter();
  uint64_t v2 = *(void **)(v0 + 632);
  id v3 = [v2 relevantEarnedInstance];
  if (v3
    && (NSString v4 = v3, v5 = [v3 externalIdentifier], v4, v5))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 872);
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  swift_release();

  uint64_t v13 = *(void *)(v0 + 872);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10008DB18(v13, (uint64_t *)&unk_1009555F0);
    IntentParameter.wrappedValue.getter();
    uint64_t v16 = *(void *)(v0 + 640);
    *(void *)(v0 + 968) = v16;
    uint64_t v17 = *(void *)(v0 + 648);
    *(void *)(v0 + 976) = v17;
    *(void *)(v0 + 656) = v16;
    *(void *)(v0 + 664) = v17;
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 984) = v18;
    unint64_t v9 = sub_10021B6BC();
    *uint64_t v18 = v0;
    v18[1] = sub_10021A614;
    uint64_t v10 = *(void *)(v0 + 816);
    goto LABEL_9;
  }
  uint64_t v19 = UUID.uuidString.getter();
  uint64_t v21 = v20;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v22 = AppDependency.__allocating_init(key:manager:)();
  *(void *)(v0 + 904) = v22;
  sub_1000AFA94(&qword_10094D340);
  static AppDependencyManager.shared.getter();
  uint64_t v23 = AppDependency.__allocating_init(key:manager:)();
  *(void *)(v0 + 912) = v23;
  sub_1000AFA94(&qword_10094FF10);
  static AppDependencyManager.shared.getter();
  uint64_t v24 = AppDependency.__allocating_init(key:manager:)();
  *(void *)(v0 + 920) = v24;
  sub_1000AFA94(&qword_10094D178);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 928) = inited;
  *(_OWORD *)(inited + 16) = xmmword_1007509E0;
  *(void *)(inited + 32) = v19;
  *(void *)(inited + 40) = v21;
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 936) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_100219E78;
  return sub_10024EF88(inited, v22, v23, v24);
}

uint64_t sub_100219E78(uint64_t a1)
{
  id v3 = (void *)*v2;
  v3[118] = a1;
  v3[119] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[112];
    uint64_t v5 = v3[111];
    uint64_t v6 = sub_10021AD3C;
  }
  else
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v4 = v3[112];
    uint64_t v5 = v3[111];
    uint64_t v6 = sub_100219FF0;
  }
  return _swift_task_switch(v6, v5, v4);
}

uint64_t sub_100219FF0()
{
  uint64_t v1 = *(void *)(v0 + 944);
  if (*(void *)(v1 + 16))
  {
    long long v2 = *(_OWORD *)(v1 + 32);
    long long v3 = *(_OWORD *)(v1 + 48);
    long long v4 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 320) = v4;
    *(_OWORD *)(v0 + 272) = v2;
    *(_OWORD *)(v0 + 288) = v3;
    long long v5 = *(_OWORD *)(v1 + 96);
    long long v6 = *(_OWORD *)(v1 + 112);
    long long v7 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v0 + 384) = v7;
    *(_OWORD *)(v0 + 336) = v5;
    *(_OWORD *)(v0 + 352) = v6;
    long long v8 = *(_OWORD *)(v1 + 160);
    long long v9 = *(_OWORD *)(v1 + 176);
    long long v10 = *(_OWORD *)(v1 + 208);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v1 + 192);
    *(_OWORD *)(v0 + 448) = v10;
    *(_OWORD *)(v0 + 400) = v8;
    *(_OWORD *)(v0 + 416) = v9;
    long long v11 = *(_OWORD *)(v1 + 224);
    long long v12 = *(_OWORD *)(v1 + 240);
    long long v13 = *(_OWORD *)(v1 + 272);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v1 + 256);
    *(_OWORD *)(v0 + 512) = v13;
    *(_OWORD *)(v0 + 464) = v11;
    *(_OWORD *)(v0 + 480) = v12;
    sub_1001B5A54(v0 + 272);
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v0 + 224) = v14;
    long long v15 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v0 + 256) = v15;
    long long v16 = *(_OWORD *)(v0 + 416);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 400);
    *(_OWORD *)(v0 + 160) = v16;
    long long v17 = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 432);
    *(_OWORD *)(v0 + 192) = v17;
    long long v18 = *(_OWORD *)(v0 + 352);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 96) = v18;
    long long v19 = *(_OWORD *)(v0 + 384);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 368);
    *(_OWORD *)(v0 + 128) = v19;
    long long v20 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 32) = v20;
    long long v21 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 64) = v21;
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 960) = v22;
    unint64_t v23 = sub_10021232C();
    *uint64_t v22 = v0;
    v22[1] = sub_10021A1D0;
    uint64_t v24 = *(void *)(v0 + 824);
    CGFloat v25 = &type metadata for WorkoutEntity;
  }
  else
  {
    swift_bridgeObjectRelease();
    IntentParameter.wrappedValue.getter();
    uint64_t v26 = *(void *)(v0 + 640);
    *(void *)(v0 + 968) = v26;
    uint64_t v27 = *(void *)(v0 + 648);
    *(void *)(v0 + 976) = v27;
    *(void *)(v0 + 656) = v26;
    *(void *)(v0 + 664) = v27;
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 984) = v28;
    unint64_t v23 = sub_10021B6BC();
    *uint64_t v28 = v0;
    v28[1] = sub_10021A614;
    uint64_t v24 = *(void *)(v0 + 816);
    CGFloat v25 = &type metadata for AwardEntity;
  }
  return URLRepresentableEntity.urlRepresentation.getter(v24, v25, v23);
}

uint64_t sub_10021A1D0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 896);
  uint64_t v3 = *(void *)(v1 + 888);
  return _swift_task_switch(sub_10021A2F0, v3, v2);
}

uint64_t sub_10021A2F0()
{
  uint64_t v1 = *(void *)(v0 + 840);
  uint64_t v2 = *(void *)(v0 + 832);
  uint64_t v3 = *(void *)(v0 + 824);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1001B5CC0(v0 + 272);
    sub_10008DB18(v3, (uint64_t *)&unk_10094B790);
    IntentParameter.wrappedValue.getter();
    uint64_t v4 = *(void *)(v0 + 640);
    *(void *)(v0 + 968) = v4;
    uint64_t v5 = *(void *)(v0 + 648);
    *(void *)(v0 + 976) = v5;
    *(void *)(v0 + 656) = v4;
    *(void *)(v0 + 664) = v5;
    long long v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 984) = v6;
    unint64_t v7 = sub_10021B6BC();
    *long long v6 = v0;
    v6[1] = sub_10021A614;
    uint64_t v8 = *(void *)(v0 + 816);
    return URLRepresentableEntity.urlRepresentation.getter(v8, &type metadata for AwardEntity, v7);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 864);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v9, v3, v2);
    if (qword_10094AE38 != -1) {
      swift_once();
    }
    uint64_t v10 = *(void *)(v0 + 864);
    uint64_t v11 = *(void *)(v0 + 840);
    uint64_t v17 = *(void *)(v0 + 832);
    uint64_t v12 = *(void *)(v0 + 800);
    uint64_t v13 = *(void *)(v0 + 792);
    uint64_t v16 = *(void *)(v0 + 784);
    sub_100539564(v10);
    IntentParameter.wrappedValue.getter();
    *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 752);
    IntentDialog.init(stringLiteral:)();
    sub_1000AFA94(&qword_1009505C8);
    sub_10021B710();
    static IntentResult.result<A>(value:dialog:)();
    sub_1001B5CC0(v0 + 272);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v16);
    sub_10021B784(*(void *)(v0 + 720), *(void **)(v0 + 728));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_10021A614()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 976);
  swift_task_dealloc();
  swift_release();

  uint64_t v3 = *(void *)(v1 + 896);
  uint64_t v4 = *(void *)(v1 + 888);
  return _swift_task_switch(sub_10021A770, v4, v3);
}

uint64_t sub_10021A770()
{
  uint64_t v1 = *(void *)(v0 + 840);
  uint64_t v2 = *(void *)(v0 + 832);
  uint64_t v3 = *(void *)(v0 + 816);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10008DB18(*(void *)(v0 + 816), (uint64_t *)&unk_10094B790);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 840) + 32))(*(void *)(v0 + 856), *(void *)(v0 + 816), *(void *)(v0 + 832));
    if (qword_10094AE38 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 856);
    uint64_t v5 = *(void *)(v0 + 840);
    uint64_t v6 = *(void *)(v0 + 832);
    sub_100539564(v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  uint64_t v7 = *(void *)(v0 + 800);
  uint64_t v8 = *(void *)(v0 + 792);
  uint64_t v9 = *(void *)(v0 + 784);
  IntentParameter.wrappedValue.getter();
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 672);
  IntentDialog.init(stringLiteral:)();
  sub_1000AFA94(&qword_1009505C8);
  sub_10021B710();
  static IntentResult.result<A>(value:dialog:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  sub_10021B784(*(void *)(v0 + 688), *(void **)(v0 + 696));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10021A9A8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 1000);
  swift_task_dealloc();
  swift_release();

  uint64_t v3 = *(void *)(v1 + 896);
  uint64_t v4 = *(void *)(v1 + 888);
  return _swift_task_switch(sub_10021AB04, v4, v3);
}

uint64_t sub_10021AB04()
{
  uint64_t v1 = *(void *)(v0 + 840);
  uint64_t v2 = *(void *)(v0 + 832);
  uint64_t v3 = *(void *)(v0 + 808);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10008DB18(*(void *)(v0 + 808), (uint64_t *)&unk_10094B790);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 840) + 32))(*(void *)(v0 + 848), *(void *)(v0 + 808), *(void *)(v0 + 832));
    if (qword_10094AE38 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 848);
    uint64_t v5 = *(void *)(v0 + 840);
    uint64_t v6 = *(void *)(v0 + 832);
    sub_100539564(v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  uint64_t v7 = *(void *)(v0 + 800);
  uint64_t v8 = *(void *)(v0 + 792);
  uint64_t v9 = *(void *)(v0 + 784);
  IntentParameter.wrappedValue.getter();
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 592);
  IntentDialog.init(stringLiteral:)();
  sub_1000AFA94(&qword_1009505C8);
  sub_10021B710();
  static IntentResult.result<A>(value:dialog:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  sub_10021B784(*(void *)(v0 + 608), *(void **)(v0 + 616));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10021AD3C()
{
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10021AE78@<X0>(uint64_t a1@<X8>)
{
  if (qword_10094A6A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_1000876DC(v2, (uint64_t)qword_100997820);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_10021AF24(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10005DB5C;
  return sub_1002197F4(a1, v5, v6, v7, v4);
}

uint64_t sub_10021AFC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10021B300();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t sub_10021AFF0(uint64_t a1)
{
  unint64_t v2 = sub_100219708();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t destroy for AwardedWorkoutIntent()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for AwardedWorkoutIntent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AwardedWorkoutIntent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AwardedWorkoutIntent(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardedWorkoutIntent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardedWorkoutIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardedWorkoutIntent()
{
  return &type metadata for AwardedWorkoutIntent;
}

uint64_t sub_10021B250()
{
  return sub_10021B2B8(&qword_100950598);
}

uint64_t sub_10021B284()
{
  return sub_10021B2B8(&qword_1009505A8);
}

uint64_t sub_10021B2B8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000A1370(&qword_1009505A0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10021B300()
{
  uint64_t v19 = type metadata accessor for InputConnectionBehavior();
  uint64_t v0 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v18 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1000AFA94(&qword_10094D320);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = sub_1000AFA94(&qword_10094D328);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  static AppDependencyManager.shared.getter();
  uint64_t v17 = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D340);
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  static AppDependencyManager.shared.getter();
  uint64_t v16 = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094FF10);
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_1009505B0);
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  uint64_t v13 = type metadata accessor for IntentDialog();
  long long v20 = 0uLL;
  long long v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v7, 1, 1, v13);
  v14(v5, 1, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v18, enum case for InputConnectionBehavior.default(_:), v19);
  sub_1000818CC();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
  return v17;
}

unint64_t sub_10021B6BC()
{
  unint64_t result = qword_1009505C0;
  if (!qword_1009505C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009505C0);
  }
  return result;
}

unint64_t sub_10021B710()
{
  unint64_t result = qword_1009505D0;
  if (!qword_1009505D0)
  {
    sub_1000A1370(&qword_1009505C8);
    sub_1000EA3C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009505D0);
  }
  return result;
}

void sub_10021B784(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();
  }
}

id sub_10021B804()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingViewControllerFactory();
  return [super dealloc];
}

uint64_t type metadata accessor for ActivitySharingViewControllerFactory()
{
  return self;
}

uint64_t sub_10021B85C()
{
  return sub_10021D434((uint64_t)&unk_100755FB8, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__isFetchingWorkouts);
}

uint64_t sub_10021B870@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10021D4E8(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__isFetchingWorkouts, a2);
}

uint64_t sub_10021B884()
{
  return swift_release();
}

uint64_t sub_10021B954()
{
  return swift_retain();
}

uint64_t sub_10021BA00@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3
                  + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder);
  return swift_retain();
}

uint64_t sub_10021BAB4()
{
  return swift_release();
}

uint64_t sub_10021BB94()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for GregorianDayRange();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v13 = v0;
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v0
                 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder))
  {
    uint64_t v6 = *(void *)(v0
                   + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder);
  }
  else
  {
    type metadata accessor for SleepingSampleViewModelProvider();
    uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_healthStore);
    swift_getKeyPath();
    uint64_t v13 = v1;
    id v8 = v7;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v9 = v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
    uint64_t v6 = SleepingSampleViewModelProvider.__allocating_init(healthStore:dayRange:debugIdentifier:)();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v12[-2] = v1;
    v12[-1] = v6;
    void v12[2] = v1;
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    dispatch thunk of SleepingSampleViewModelProvider.startQuery()();
  }
  swift_retain();
  return v6;
}

uint64_t sub_10021BE2C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10021BF28@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for GregorianDayRange();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10021C024(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10021C1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GregorianDayRange();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v14 - v9;
  v14[0] = *(void *)(v5 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v14[0])((char *)v14 - v9, a2, v4);
  uint64_t v11 = a1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(v11, v10, v4);
  swift_endAccess();
  swift_getKeyPath();
  v14[1] = a1;
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  ((void (*)(char *, uint64_t, uint64_t))v14[0])(v8, v11, v4);
  sub_10021E1A8((uint64_t)v8);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
}

uint64_t sub_10021C3C4()
{
  return sub_10021CEBC();
}

uint64_t sub_10021C3D8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021CF74(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange, a2);
}

uint64_t sub_10021C3EC()
{
  return swift_release();
}

uint64_t sub_10021C4CC()
{
  return sub_10021CEBC();
}

uint64_t sub_10021C4E0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021CF74(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyListForTheWeek, a2);
}

uint64_t sub_10021C4F4()
{
  return swift_release();
}

uint64_t sub_10021C5D4()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000DFA8;
  return sub_1000104A4();
}

uint64_t sub_10021C680()
{
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsFilter);
}

uint64_t sub_10021C730(char *a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = sub_1000AFA94(&qword_10094B7A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &a1[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsFilter];
  *(void *)uint64_t v9 = a2;
  *((_WORD *)v9 + 4) = a3;
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  type metadata accessor for MainActor();
  uint64_t v11 = a1;
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v11;
  sub_1000713D0((uint64_t)v8, (uint64_t)&unk_100950700, (uint64_t)v13);
  return swift_release();
}

void *sub_10021C874()
{
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor);
  id v2 = v1;
  return v1;
}

id sub_10021C924@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__lastAnchor);
  *a2 = v4;

  return v4;
}

uint64_t sub_10021C9E4(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

uint64_t sub_10021CAC0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10021CB84@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = (void *)(v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities);
  swift_beginAccess();
  *a2 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10021CC50()
{
  return swift_release();
}

uint64_t sub_10021CD30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities);
  swift_beginAccess();
  *uint64_t v3 = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10021CDA0()
{
  return sub_10021CEBC();
}

uint64_t sub_10021CDB4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021CF74(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummaries, a2);
}

uint64_t sub_10021CDC8()
{
  return swift_release();
}

uint64_t sub_10021CEA8()
{
  return sub_10021CEBC();
}

uint64_t sub_10021CEBC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10021CF60@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021CF74(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummariesForTheWeek, a2);
}

uint64_t sub_10021CF74@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a3 = *(void *)(v5 + *a2);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10021D02C()
{
  return swift_release();
}

uint64_t sub_10021D10C()
{
  return sub_10021D200((uint64_t)&unk_1007560A8, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery);
}

uint64_t sub_10021D120()
{
  return swift_release();
}

uint64_t sub_10021D1EC()
{
  return sub_10021D200((uint64_t)&unk_1007560D0, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__maxRepeatCountOfEffortRelationshipQueryBeforeDelaying);
}

uint64_t sub_10021D200(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v2 + *a2);
}

uint64_t sub_10021D2A0@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a3 = *(void *)(v5 + *a2);
  return result;
}

uint64_t sub_10021D354()
{
  return swift_release();
}

uint64_t sub_10021D420()
{
  return sub_10021D434((uint64_t)&unk_100756080, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated);
}

uint64_t sub_10021D434(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_10021D4D4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10021D4E8(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated, a2);
}

uint64_t sub_10021D4E8@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a3 = *(unsigned char *)(v5 + *a2);
  return result;
}

uint64_t sub_10021D59C()
{
  return swift_release();
}

void sub_10021D66C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1000521D4();
  }
}

void *sub_10021D6C0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for EffortUtilities.WorkoutAndActivityKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = a2;
  id v11 = a1;
  EffortUtilities.WorkoutAndActivityKey.init(workout:activity:)();
  swift_getKeyPath();
  v19[1] = v3;
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_1005299A0((uint64_t)v9);
    if (v15)
    {
      uint64_t v16 = *(void **)(*(void *)(v13 + 56) + 8 * v14);
      id v17 = v16;
    }
    else
    {
      uint64_t v16 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = 0;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v16;
}

uint64_t sub_10021D878()
{
  uint64_t v63 = type metadata accessor for Calendar.Identifier();
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  unint64_t v61 = (char *)&v59 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1000AFA94(&qword_100950718);
  __chkstk_darwin(v2 - 8);
  uint64_t v71 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v70 = (char *)&v59 - v5;
  uint64_t v83 = type metadata accessor for Calendar();
  uint64_t v88 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  id v82 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for DayIndex();
  uint64_t v86 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  id v77 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000AFA94(&qword_100950728);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  id v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GregorianDayRange();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __int16 v75 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v17 = (char *)&v59 - v16;
  uint64_t v81 = type metadata accessor for Date();
  uint64_t v87 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  char v76 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  char v80 = (char *)&v59 - v20;
  Date.init()();
  swift_getKeyPath();
  uint64_t v84 = (uint64_t)v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider___observationRegistrar;
  long long v85 = v0;
  long long v90 = v0;
  uint64_t v21 = sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = (uint64_t)v0 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess();
  uint64_t v23 = v13;
  uint64_t v25 = v13 + 16;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v74 = v12;
  v24(v17, v22, v12);
  GregorianDayRange.dayIndexRange.getter();
  uint64_t v26 = v23 + 8;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v79 = v26;
  unsigned int v60 = (void (*)(char *, uint64_t))v17;
  v27(v17, v12);
  uint64_t v28 = &v11[*(int *)(v9 + 44)];
  long long v29 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
  uint64_t v31 = v77;
  uint64_t v30 = v78;
  uint64_t v65 = v86 + 16;
  int v64 = v29;
  v29(v77, (uint64_t)v28, v78);
  uint64_t v69 = v11;
  sub_10008DB18((uint64_t)v11, &qword_100950728);
  swift_getKeyPath();
  long long v89 = v85;
  uint64_t v32 = v75;
  uint64_t v73 = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v68 = v22;
  uint64_t v33 = v74;
  uint64_t v67 = v25;
  id v66 = v24;
  v24(v32, v22, v74);
  uint64_t v34 = v82;
  GregorianDayRange.gregorianCalendar.getter();
  uint64_t v35 = v32;
  uint64_t v72 = v27;
  v27(v32, v33);
  uint64_t v36 = v76;
  DayIndex.startDate(in:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v88 + 8);
  v88 += 8;
  uint64_t v59 = v37;
  v37(v34, v83);
  uint64_t v38 = v86;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v31, v30);
  int v39 = v80;
  LOBYTE(v31) = Date.isSameDay(as:)();
  uint64_t v40 = v87 + 8;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v87 + 8);
  uint64_t v42 = v36;
  uint64_t v43 = v81;
  v41(v42, v81);
  uint64_t v87 = v40;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v41)(v39, v43);
  if ((v31 & 1) == 0)
  {
    type metadata accessor for TrainingLoadViewModelProvider();
    swift_getKeyPath();
    long long v89 = v85;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v45 = v33;
    v66(v35, v68, v33);
    uint64_t v46 = (uint64_t)v69;
    GregorianDayRange.dayIndexRange.getter();
    v72(v35, v33);
    uint64_t v47 = (uint64_t)v70;
    v64(v70, v46, v30);
    uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56);
    v48(v47, 0, 1, v30);
    uint64_t v49 = (uint64_t)v71;
    v48((uint64_t)v71, 1, 1, v30);
    uint64_t v50 = sub_100456C9C(v47, v49);
    sub_10008DB18(v49, &qword_100950718);
    sub_10008DB18(v47, &qword_100950718);
    uint64_t result = sub_10008DB18(v46, &qword_100950728);
    if (__OFSUB__(v50, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v51 = v80;
      static Date.now.getter();
      uint64_t v52 = v62;
      uint64_t v53 = v61;
      uint64_t v54 = v63;
      (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, enum case for Calendar.Identifier.gregorian(_:), v63);
      uint64_t v55 = v82;
      Calendar.init(identifier:)();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
      CGRect v56 = v60;
      static TrainingLoadViewModelProvider.createDayRange(now:days:gregorianCalendar:)();
      v59(v55, v83);
      v41(v51, v81);
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      uint64_t v58 = v85;
      *(&v59 - 2) = (void (*)(char *, uint64_t))v85;
      *(&v59 - 1) = v56;
      long long v89 = v58;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      return ((uint64_t (*)(void, uint64_t))v72)(v56, v45);
    }
  }
  return result;
}

uint64_t sub_10021E1A8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Calendar();
  __chkstk_darwin(v3 - 8);
  char v70 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_1000AFA94(&qword_100950758);
  uint64_t v5 = __chkstk_darwin(v73);
  unsigned int v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v55 - v7;
  uint64_t v8 = type metadata accessor for DayIndex();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v74 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v55 - v12;
  uint64_t v14 = sub_1000AFA94(&qword_100950728);
  uint64_t v15 = __chkstk_darwin(v14);
  int v64 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v55 - v21;
  __chkstk_darwin(v20);
  uint64_t v61 = (uint64_t)&v55 - v23;
  uint64_t v24 = type metadata accessor for GregorianDayRange();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v67 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v55 - v27;
  uint64_t v72 = v1;
  uint64_t v68 = v30;
  uint64_t v69 = v29;
  uint64_t v65 = *(void (**)(char *, uint64_t))(v30 + 16);
  uint64_t v66 = v30 + 16;
  v65((char *)&v55 - v27, a1);
  dispatch thunk of TrainingLoadViewModelProvider.dayRange.setter();
  GregorianDayRange.dayIndexRange.getter();
  uint64_t v31 = &v22[*(int *)(v14 + 36)];
  uint64_t v58 = v9;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v32(v13, v31, v8);
  uint64_t v33 = (uint64_t)v22;
  uint64_t v34 = v74;
  sub_10008DB18(v33, &qword_100950728);
  uint64_t v71 = a1;
  GregorianDayRange.dayIndexRange.getter();
  uint64_t v62 = v14;
  uint64_t v35 = &v19[*(int *)(v14 + 36)];
  uint64_t v57 = v32;
  v32(v34, v35, v8);
  sub_10008DB18((uint64_t)v19, &qword_100950728);
  sub_1000858A8((unint64_t *)&qword_100950740, (void (*)(uint64_t))&type metadata accessor for DayIndex);
  uint64_t v59 = v13;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v37 = v58;
    uint64_t v38 = v60;
    CGRect v56 = v28;
    uint64_t v39 = v73;
    uint64_t v40 = v63;
    uint64_t v41 = &v63[*(int *)(v73 + 48)];
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v42(v63, v59, v8);
    uint64_t v43 = v41;
    uint64_t v55 = v41;
    v42(v41, v74, v8);
    int v44 = &v38[*(int *)(v39 + 48)];
    uint64_t v45 = v57;
    v57(v38, v40, v8);
    v45(v44, v43, v8);
    uint64_t v46 = (uint64_t)v64;
    v42(v64, v38, v8);
    uint64_t v47 = *(void (**)(char *, uint64_t))(v37 + 8);
    v47(v44, v8);
    uint64_t v48 = v56;
    uint64_t v49 = &v38[*(int *)(v73 + 48)];
    v42(v38, v40, v8);
    v42(v49, v55, v8);
    v42((char *)(v46 + *(int *)(v62 + 36)), v49, v8);
    uint64_t v50 = v72;
    v47(v38, v8);
    sub_1000AEEC8(v46, v61, &qword_100950728);
    uint64_t v51 = v71;
    GregorianDayRange.gregorianCalendar.getter();
    uint64_t v52 = v67;
    GregorianDayRange.init(dayIndexRange:gregorianCalendar:)();
    uint64_t v53 = v69;
    uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))v65;
    ((void (*)(char *, char *, uint64_t))v65)(v48, v52, v69);
    dispatch thunk of SleepingSampleViewModelProvider.dayRange.setter();
    swift_getKeyPath();
    uint64_t v75 = v50;
    sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(void *)(v50
                   + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder))
    {
      v54(v48, v51, v53);
      swift_retain();
      dispatch thunk of SleepingSampleViewModelProvider.dayRange.setter();
      swift_release();
    }
    sub_100084218();
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v52, v53);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10021E838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v77 = a3;
  uint64_t v4 = type metadata accessor for Calendar();
  __chkstk_darwin(v4 - 8);
  uint64_t v79 = (char *)v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_1000AFA94(&qword_100950758);
  __chkstk_darwin(v87);
  long long v89 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v86 = (char *)v70 - v8;
  uint64_t v9 = type metadata accessor for DayIndex();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v70 - v14;
  __chkstk_darwin(v16);
  char v93 = (char *)v70 - v17;
  uint64_t v75 = type metadata accessor for GregorianDayRange();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v73 = (char *)v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v72 = (char *)v70 - v20;
  __chkstk_darwin(v21);
  uint64_t v88 = (char *)v70 - v22;
  uint64_t v23 = sub_1000AFA94(&qword_100950728);
  __chkstk_darwin(v23);
  uint64_t v78 = (char *)v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v70 - v26;
  __chkstk_darwin(v28);
  uint64_t v84 = (uint64_t)v70 - v29;
  __chkstk_darwin(v30);
  uint64_t v85 = (uint64_t)v70 - v31;
  GregorianDayRange.dayIndexRange.getter();
  GregorianDayRange.dayIndexRange.getter();
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v32(v15, v27, v9);
  sub_10008DB18((uint64_t)v27, &qword_100950728);
  DayIndex.init(integerLiteral:)();
  static DayIndex.+ infix(_:_:)();
  uint64_t v91 = v10;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v10 + 8);
  v33(v12, v9);
  uint64_t v92 = v10 + 8;
  id v82 = v33;
  v33(v15, v9);
  uint64_t v90 = a1;
  GregorianDayRange.dayIndexRange.getter();
  uint64_t v83 = v23;
  uint64_t v34 = &v27[*(int *)(v23 + 36)];
  char v80 = v32;
  uint64_t v81 = v10 + 16;
  v32(v15, v34, v9);
  uint64_t v71 = v27;
  sub_10008DB18((uint64_t)v27, &qword_100950728);
  uint64_t v35 = sub_1000858A8((unint64_t *)&qword_100950740, (void (*)(uint64_t))&type metadata accessor for DayIndex);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v37 = v86;
    uint64_t v38 = v87;
    uint64_t v39 = &v86[*(int *)(v87 + 48)];
    v70[1] = v35;
    uint64_t v41 = v91 + 32;
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
    v40(v86, v93, v9);
    v70[0] = v15;
    v40(v39, v15, v9);
    uint64_t v42 = v89;
    uint64_t v43 = &v89[*(int *)(v38 + 48)];
    int v44 = v80;
    v80(v89, v37, v9);
    v44(v43, v39, v9);
    uint64_t v45 = (uint64_t)v78;
    v40(v78, v42, v9);
    uint64_t v46 = v82;
    v82(v43, v9);
    uint64_t v47 = &v42[*(int *)(v38 + 48)];
    v40(v42, v37, v9);
    v40(v47, v39, v9);
    uint64_t v48 = v83;
    uint64_t v49 = v45 + *(int *)(v83 + 36);
    uint64_t v91 = v41;
    v40((char *)v49, v47, v9);
    v46(v42, v9);
    sub_1000AEEC8(v45, v84, &qword_100950728);
    GregorianDayRange.gregorianCalendar.getter();
    GregorianDayRange.init(dayIndexRange:gregorianCalendar:)();
    uint64_t v50 = (char *)v70[0];
    DayIndex.init(integerLiteral:)();
    uint64_t v51 = v85;
    static DayIndex.+ infix(_:_:)();
    v46(v50, v9);
    uint64_t v52 = v51 + *(int *)(v48 + 36);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v54 = v86;
      uint64_t v53 = v87;
      uint64_t v55 = &v86[*(int *)(v87 + 48)];
      v40(v86, v93, v9);
      uint64_t v79 = v55;
      CGRect v56 = v80;
      v80(v55, (char *)v52, v9);
      uint64_t v57 = v89;
      uint64_t v58 = &v89[*(int *)(v53 + 48)];
      v56(v89, v54, v9);
      v56(v58, v55, v9);
      uint64_t v59 = (uint64_t)v71;
      v40(v71, v57, v9);
      unsigned int v60 = v82;
      v82(v58, v9);
      uint64_t v61 = &v57[*(int *)(v53 + 48)];
      v40(v57, v54, v9);
      v40(v61, v79, v9);
      v40((char *)(v59 + *(int *)(v83 + 36)), v61, v9);
      v60(v57, v9);
      uint64_t v62 = v84;
      uint64_t v63 = sub_1000AEEC8(v59, v84, &qword_100950728);
      __chkstk_darwin(v63);
      uint64_t v64 = v90;
      v70[-2] = v90;
      sub_100450514((void (*)(char *))sub_1002212E4, (uint64_t)&v70[-4]);
      uint64_t v65 = v74;
      uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
      uint64_t v67 = v64;
      uint64_t v68 = v75;
      v66(v72, v67, v75);
      uint64_t v69 = v88;
      v66(v73, (uint64_t)v88, v68);
      TrainingLoadViewModel.chartPoints.getter();
      TrainingLoadChart.Configuration.init(dayRangeOfData:viewPortDayRange:points:keyDates:)();
      sub_10008DB18(v62, &qword_100950728);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v69, v68);
      return sub_10008DB18(v85, &qword_100950728);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10021F0EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v79 = a2;
  uint64_t v3 = type metadata accessor for Calendar();
  __chkstk_darwin(v3 - 8);
  uint64_t v81 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_1000AFA94(&qword_100950758);
  __chkstk_darwin(v89);
  uint64_t v91 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v88 = (char *)&v71 - v7;
  uint64_t v8 = type metadata accessor for DayIndex();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v71 - v13;
  __chkstk_darwin(v15);
  uint64_t v95 = (char *)&v71 - v16;
  uint64_t v17 = type metadata accessor for GregorianDayRange();
  uint64_t v77 = *(void *)(v17 - 8);
  uint64_t v78 = v17;
  __chkstk_darwin(v17);
  uint64_t v76 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v75 = (char *)&v71 - v20;
  __chkstk_darwin(v21);
  uint64_t v90 = (char *)&v71 - v22;
  uint64_t v23 = sub_1000AFA94(&qword_100950728);
  __chkstk_darwin(v23);
  char v80 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v71 - v26;
  __chkstk_darwin(v28);
  uint64_t v86 = (uint64_t)&v71 - v29;
  __chkstk_darwin(v30);
  uint64_t v87 = (uint64_t)&v71 - v31;
  GregorianDayRange.dayIndexRange.getter();
  GregorianDayRange.dayIndexRange.getter();
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v32(v14, v27, v8);
  sub_10008DB18((uint64_t)v27, &qword_100950728);
  DayIndex.init(integerLiteral:)();
  static DayIndex.+ infix(_:_:)();
  uint64_t v93 = v9;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v9 + 8);
  v33(v11, v8);
  uint64_t v94 = v9 + 8;
  uint64_t v84 = v33;
  v33(v14, v8);
  uint64_t v92 = a1;
  GregorianDayRange.dayIndexRange.getter();
  uint64_t v85 = v23;
  uint64_t v34 = &v27[*(int *)(v23 + 36)];
  id v82 = v32;
  uint64_t v83 = v9 + 16;
  v32(v14, v34, v8);
  uint64_t v74 = v27;
  sub_10008DB18((uint64_t)v27, &qword_100950728);
  uint64_t v35 = sub_1000858A8((unint64_t *)&qword_100950740, (void (*)(uint64_t))&type metadata accessor for DayIndex);
  uint64_t v36 = v14;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v39 = v88;
    uint64_t v38 = v89;
    uint64_t v40 = &v88[*(int *)(v89 + 48)];
    uint64_t v73 = v35;
    uint64_t v41 = v93 + 32;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
    v42(v88, v95, v8);
    uint64_t v72 = v36;
    v42(v40, v36, v8);
    uint64_t v43 = v91;
    int v44 = &v91[*(int *)(v38 + 48)];
    uint64_t v45 = v82;
    v82(v91, v39, v8);
    v45(v44, v40, v8);
    uint64_t v46 = (uint64_t)v80;
    v42(v80, v43, v8);
    uint64_t v47 = v84;
    v84(v44, v8);
    uint64_t v48 = &v43[*(int *)(v38 + 48)];
    v42(v43, v39, v8);
    v42(v48, v40, v8);
    uint64_t v49 = v85;
    uint64_t v50 = v46 + *(int *)(v85 + 36);
    uint64_t v93 = v41;
    v42((char *)v50, v48, v8);
    v47(v43, v8);
    sub_1000AEEC8(v46, v86, &qword_100950728);
    GregorianDayRange.gregorianCalendar.getter();
    GregorianDayRange.init(dayIndexRange:gregorianCalendar:)();
    uint64_t v51 = v72;
    DayIndex.init(integerLiteral:)();
    uint64_t v52 = v87;
    static DayIndex.+ infix(_:_:)();
    v47(v51, v8);
    uint64_t v53 = v52 + *(int *)(v49 + 36);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v55 = v88;
      uint64_t v54 = v89;
      CGRect v56 = &v88[*(int *)(v89 + 48)];
      v42(v88, v95, v8);
      uint64_t v81 = v56;
      uint64_t v57 = v82;
      v82(v56, (char *)v53, v8);
      uint64_t v58 = v91;
      uint64_t v59 = &v91[*(int *)(v54 + 48)];
      v57(v91, v55, v8);
      v57(v59, v56, v8);
      uint64_t v60 = (uint64_t)v74;
      v42(v74, v58, v8);
      uint64_t v61 = v84;
      v84(v59, v8);
      uint64_t v62 = &v58[*(int *)(v54 + 48)];
      v42(v58, v55, v8);
      v42(v62, v81, v8);
      v42((char *)(v60 + *(int *)(v85 + 36)), v62, v8);
      v61(v58, v8);
      uint64_t v63 = v86;
      uint64_t v64 = sub_1000AEEC8(v60, v86, &qword_100950728);
      __chkstk_darwin(v64);
      uint64_t v65 = v92;
      *(&v71 - 2) = v92;
      sub_100450514((void (*)(char *))sub_10022107C, (uint64_t)(&v71 - 4));
      uint64_t v66 = v77;
      uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
      uint64_t v68 = v65;
      uint64_t v69 = v78;
      v67(v75, v68, v78);
      char v70 = v90;
      v67(v76, (uint64_t)v90, v69);
      TrainingLoadChart.Configuration.init(dayRangeOfData:viewPortDayRange:points:keyDates:)();
      sub_10008DB18(v63, &qword_100950728);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v70, v69);
      return sub_10008DB18(v87, &qword_100950728);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10021F990()
{
  uint64_t v0 = type metadata accessor for Calendar();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  GregorianDayRange.gregorianCalendar.getter();
  DayIndex.startDate(in:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10021FA84@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  CGRect v56 = a1;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for SleepingSampleDataType();
  uint64_t v6 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v50 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v44 - v9;
  uint64_t v11 = type metadata accessor for SleepingSampleViewModel();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000AFA94(&qword_100950748);
  __chkstk_darwin(v15 - 8);
  uint64_t v49 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021BB94();
  uint64_t v17 = dispatch thunk of SleepingSampleViewModelProvider.viewModels.getter();
  uint64_t v18 = v11;
  swift_release();
  uint64_t v19 = v17;
  uint64_t v20 = v3;
  uint64_t v21 = v52;
  uint64_t v22 = *(void *)(v19 + 16);
  uint64_t v48 = a2;
  uint64_t v51 = v19;
  if (v22)
  {
    uint64_t v46 = v12;
    uint64_t v47 = v5;
    uint64_t v44 = v6;
    uint64_t v45 = v20;
    uint64_t v54 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    uint64_t v55 = v12 + 16;
    unint64_t v23 = v19 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v24 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v25 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v53 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    uint64_t v26 = v57;
    while (1)
    {
      v54(v14, v23, v18);
      uint64_t v27 = v18;
      SleepingSampleViewModel.dataType.getter();
      sub_1000858A8(&qword_100950750, (void (*)(uint64_t))&type metadata accessor for SleepingSampleDataType);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v29 = v58;
      uint64_t v28 = v59;
      (*v24)(v10, v26);
      if (v28 == v29) {
        break;
      }
      (*v25)(v14, v27);
      v23 += v53;
      --v22;
      uint64_t v18 = v27;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = v45;
        uint64_t v12 = v46;
        uint64_t v21 = v52;
        uint64_t v5 = v47;
        uint64_t v6 = v44;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v32 = v46;
    uint64_t v31 = (uint64_t)v49;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v49, v14, v27);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v30(v31, 0, 1, v27);
    uint64_t v6 = v44;
    uint64_t v20 = v45;
    uint64_t v21 = v52;
    uint64_t v5 = v47;
    uint64_t v18 = v27;
    uint64_t v12 = v32;
  }
  else
  {
LABEL_6:
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    uint64_t v31 = (uint64_t)v49;
    v30((uint64_t)v49, 1, 1, v18);
  }
  swift_bridgeObjectRelease();
  int v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v31, 1, v18);
  uint64_t v34 = v57;
  uint64_t v35 = v50;
  if (v33 == 1)
  {
    uint64_t v55 = v18;
    sub_10008DB18(v31, &qword_100950748);
    static WOLog.trainingLoad.getter();
    (*(void (**)(char *, uint8_t *, uint64_t))(v6 + 16))(v35, v56, v34);
    uint64_t v36 = v35;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = v12;
      uint64_t v47 = v5;
      *(_DWORD *)uint64_t v39 = 134217984;
      CGRect v56 = v39 + 4;
      uint64_t v40 = SleepingSampleDataType.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v36, v57);
      uint64_t v59 = v40;
      uint64_t v5 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Didn't find sleeping sample view model for data type: %ld", v39, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v36, v34);
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v20);
    uint64_t v42 = 1;
    uint64_t v18 = v55;
    uint64_t v41 = v48;
  }
  else
  {
    uint64_t v41 = v48;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v48, v31, v18);
    uint64_t v42 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v30)(v41, v42, 1, v18);
}

BOOL sub_10022006C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  uint64_t v29 = a2;
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for GregorianDayRange();
  uint64_t v7 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_10007E4EC(a1, v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
  swift_getKeyPath();
  uint64_t v30 = v24;
  uint64_t v18 = v24;
  sub_1000858A8(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v19 = v18 + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__dayRange;
  swift_beginAccess();
  uint64_t v20 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v25);
  GregorianDayRange.gregorianCalendar.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v20);
  DayIndex.startDate(in:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  sub_1000858A8((unint64_t *)&qword_100954750, (void (*)(uint64_t))&type metadata accessor for Date);
  LOBYTE(v7) = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v26 + 8);
  v21(v13, v10);
  v21(v15, v10);
  return (v7 & 1) == 0;
}

id sub_100220408()
{
  if (*(void *)&v0[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_observer]) {
    [*(id *)&v0[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider_healthStore] stopQuery:];
  }
  id v1 = [self defaultCenter];
  [v1 removeObserver:v0];

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for BalanceDataProvider();
  return [super dealloc];
}

uint64_t sub_100220684()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002206C4()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *id v1 = v0;
  v1[1] = sub_1000DBD6C;
  return sub_10021C5D4();
}

uint64_t sub_100220780@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021CF74(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummaries, a2);
}

uint64_t sub_1002207AC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021CF74(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__activitySummariesForTheWeek, a2);
}

uint64_t sub_1002207D8()
{
  return sub_10021C1AC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1002207FC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021CF74(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyItemsInDayRange, a2);
}

uint64_t sub_100220828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v29 = a1;
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v7 = __chkstk_darwin(v31);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v38 = a3;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v15 = 40 * v38 - 40;
LABEL_5:
    uint64_t v16 = v29;
    uint64_t v30 = v15;
    while (1)
    {
      uint64_t v17 = *a4 + v15;
      sub_10008E75C(v17 + 40, (uint64_t)&v35);
      sub_10008E75C(v17, (uint64_t)v32);
      uint64_t v18 = v36;
      uint64_t v19 = v37;
      sub_10007E4EC(&v35, v36);
      (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
      uint64_t v20 = v33;
      uint64_t v21 = v34;
      sub_10007E4EC(v32, v33);
      (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
      LOBYTE(v20) = static Date.> infix(_:_:)();
      uint64_t v22 = *v14;
      uint64_t v23 = v31;
      (*v14)(v9, v31);
      v22(v13, v23);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v32);
      uint64_t result = _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)&v35);
      if ((v20 & 1) == 0)
      {
LABEL_4:
        uint64_t v15 = v30 + 40;
        if (++v38 == v28) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v24 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v25 = v24 + v15;
      sub_100093E60((long long *)(v24 + v15 + 40), (uint64_t)&v35);
      long long v26 = *(_OWORD *)(v25 + 16);
      *(_OWORD *)(v25 + 40) = *(_OWORD *)v25;
      *(_OWORD *)(v25 + 56) = v26;
      *(void *)(v25 + 72) = *(void *)(v25 + 32);
      uint64_t result = sub_100093E60(&v35, v25);
      v15 -= 40;
      if (v38 == ++v16) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100220A9C(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v63 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v63 - 8);
  uint64_t v9 = __chkstk_darwin(v63);
  uint64_t v62 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v60 = a3;
  uint64_t v61 = (char *)v57 - v11;
  uint64_t v12 = a2 - a1;
  uint64_t v13 = (a2 - a1) / 40;
  uint64_t v14 = a3 - a2;
  uint64_t v15 = v14 / 40;
  uint64_t v72 = a1;
  uint64_t v71 = a4;
  if (v13 >= v14 / 40)
  {
    if (v14 < -39) {
      goto LABEL_43;
    }
    if (a4 != a2 || &a2[40 * v15] <= a4) {
      memmove(a4, a2, 40 * v15);
    }
    long long v35 = &a4[40 * v15];
    char v70 = v35;
    uint64_t v72 = a2;
    if (v14 < 40 || a1 >= a2) {
      goto LABEL_42;
    }
    void v57[2] = v8 + 8;
    uint64_t v58 = a1;
    unint64_t v36 = (unint64_t)(v60 - 40);
    uint64_t v59 = a4;
    uint64_t v37 = v62;
    uint64_t v38 = (void (**)(char *, uint64_t))(v8 + 8);
    while (1)
    {
      uint64_t v60 = (char *)(v36 + 40);
      sub_10008E75C((uint64_t)(v35 - 40), (uint64_t)v67);
      uint64_t v41 = a2 - 40;
      sub_10008E75C((uint64_t)(a2 - 40), (uint64_t)v64);
      uint64_t v43 = v68;
      uint64_t v44 = v69;
      sub_10007E4EC(v67, v68);
      uint64_t v45 = v61;
      (*(void (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
      uint64_t v46 = v65;
      uint64_t v47 = v66;
      sub_10007E4EC(v64, v65);
      (*(void (**)(uint64_t, uint64_t))(v47 + 32))(v46, v47);
      LOBYTE(v46) = static Date.> infix(_:_:)();
      uint64_t v48 = *v38;
      uint64_t v49 = v63;
      (*v38)(v37, v63);
      v48(v45, v49);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v64);
      _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v67);
      if (v46) {
        break;
      }
      uint64_t v52 = v70;
      long long v35 = v70 - 40;
      v70 -= 40;
      if (v60 < v52 || v36 >= (unint64_t)v52)
      {
        long long v39 = *(_OWORD *)v35;
        long long v40 = *(_OWORD *)(v52 - 24);
        *(void *)(v36 + 32) = *((void *)v52 - 1);
        *(_OWORD *)unint64_t v36 = v39;
        *(_OWORD *)(v36 + 16) = v40;
        uint64_t v41 = a2;
        goto LABEL_30;
      }
      unint64_t v42 = (unint64_t)v58;
      unint64_t v53 = (unint64_t)v59;
      if (v60 != v52)
      {
        long long v54 = *(_OWORD *)v35;
        long long v55 = *(_OWORD *)(v52 - 24);
        *(void *)(v36 + 32) = *((void *)v52 - 1);
        *(_OWORD *)unint64_t v36 = v54;
        *(_OWORD *)(v36 + 16) = v55;
      }
      uint64_t v41 = a2;
      if ((unint64_t)v35 <= v53) {
        goto LABEL_42;
      }
LABEL_31:
      v36 -= 40;
      a2 = v41;
      if ((unint64_t)v41 <= v42) {
        goto LABEL_42;
      }
    }
    if (v60 != a2 || v36 >= (unint64_t)a2)
    {
      long long v50 = *(_OWORD *)v41;
      long long v51 = *(_OWORD *)(a2 - 24);
      *(void *)(v36 + 32) = *((void *)a2 - 1);
      *(_OWORD *)unint64_t v36 = v50;
      *(_OWORD *)(v36 + 16) = v51;
    }
    v72 -= 40;
    long long v35 = v70;
LABEL_30:
    unint64_t v42 = (unint64_t)v58;
    if (v35 <= v59) {
      goto LABEL_42;
    }
    goto LABEL_31;
  }
  if (v12 >= -39)
  {
    if (a4 != a1 || &a1[40 * v13] <= a4) {
      memmove(a4, a1, 40 * v13);
    }
    uint64_t v16 = &a4[40 * v13];
    char v70 = v16;
    if (v12 >= 40 && a2 < v60)
    {
      uint64_t v17 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v18 = v61;
      do
      {
        sub_10008E75C((uint64_t)a2, (uint64_t)v67);
        sub_10008E75C((uint64_t)a4, (uint64_t)v64);
        uint64_t v19 = v68;
        uint64_t v20 = v69;
        sub_10007E4EC(v67, v68);
        (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
        uint64_t v21 = v65;
        uint64_t v22 = v66;
        sub_10007E4EC(v64, v65);
        uint64_t v23 = v62;
        (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
        char v24 = static Date.> infix(_:_:)();
        uint64_t v25 = *v17;
        long long v26 = v23;
        uint64_t v27 = v63;
        (*v17)(v26, v63);
        v25(v18, v27);
        _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v64);
        _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v67);
        uint64_t v28 = v72;
        if (v24)
        {
          uint64_t v29 = a2 + 40;
          if (v72 >= a2 && v72 < v29 && v72 == a2)
          {
            uint64_t v28 = a2;
          }
          else
          {
            long long v30 = *(_OWORD *)a2;
            long long v31 = *((_OWORD *)a2 + 1);
            *((void *)v72 + 4) = *((void *)a2 + 4);
            *uint64_t v28 = v30;
            v28[1] = v31;
          }
        }
        else
        {
          uint64_t v32 = v71 + 40;
          if (v72 != v71 || v72 >= v32)
          {
            long long v33 = *(_OWORD *)v71;
            long long v34 = *((_OWORD *)v71 + 1);
            *((void *)v72 + 4) = *((void *)v71 + 4);
            *uint64_t v28 = v33;
            v28[1] = v34;
          }
          uint64_t v71 = v32;
          uint64_t v29 = a2;
        }
        uint64_t v72 = (char *)v28 + 40;
        a4 = v71;
        if (v71 >= v16) {
          break;
        }
        a2 = v29;
      }
      while (v29 < v60);
    }
LABEL_42:
    sub_1001EE964(&v72, &v71, &v70);
    return 1;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_100221004(void *a1)
{
  return sub_10022006C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100221024@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10021D4E8(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__isFetchingWorkouts, a2);
}

uint64_t sub_100221050@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021CF74(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__historyListForTheWeek, a2);
}

uint64_t sub_10022107C()
{
  return sub_10021F990();
}

uint64_t sub_1002210A4()
{
  return sub_100221260();
}

uint64_t sub_1002210C4()
{
  return sub_10021CD30(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1002210E8(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_1002210F8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10021D4E8(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated, a2);
}

uint64_t sub_100221124()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10022115C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100221194()
{
  swift_unknownObjectRelease();
  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002211EC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021D2A0(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__retryCountOfEffortRelationshipQuery, a2);
}

uint64_t sub_100221218@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10021D2A0(a1, &OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__maxRepeatCountOfEffortRelationshipQueryBeforeDelaying, a2);
}

void sub_100221244()
{
}

void sub_10022124C()
{
  *(void *)(*(void *)(v0 + 16)
            + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__maxRepeatCountOfEffortRelationshipQueryBeforeDelaying) = *(void *)(v0 + 24);
}

uint64_t sub_100221260()
{
  *(void *)(*(void *)(v0 + 16)
            + OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__stackedChartSleepingSampleViewModelProviderHolder) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_1002212A4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002212E4()
{
  return sub_10022107C();
}

uint64_t sub_100221308()
{
  return sub_1002207D8();
}

void sub_100221320()
{
}

void sub_100221338()
{
}

void sub_100221350()
{
}

uint64_t sub_100221368()
{
  id v1 = [v0 friendAchievements];
  if (v1)
  {
    id v0 = v1;
    sub_10007E2D8(0, (unint64_t *)&qword_100955BE0);
    sub_1000AFA94(&qword_1009507B0);
    sub_1000CD998((unint64_t *)&qword_100955BF0, (unint64_t *)&qword_100955BE0);
    unint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v2 = sub_100523210((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v21 = &_swiftEmptyDictionarySingleton;
  unint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = 8 * i;
    uint64_t v15 = *(void **)(*(void *)(v2 + 56) + v14);
    v20[0] = *(id *)(*(void *)(v2 + 48) + v14);
    v20[1] = v15;
    id v0 = v20[0];
    swift_bridgeObjectRetain();
    sub_100221618(&v21, (uint64_t)v20);
    swift_bridgeObjectRelease();

    if (v6) {
      goto LABEL_7;
    }
LABEL_8:
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v7) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    if (!v12) {
      break;
    }
LABEL_22:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v8 + 1;
  if (v8 + 1 >= v7) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v13 = v8 + 2;
  if (v8 + 2 >= v7) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v13 = v8 + 3;
  if (v8 + 3 >= v7) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v13 = v8 + 4;
  if (v8 + 4 >= v7) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v13 = v8 + 5;
  if (v8 + 5 >= v7)
  {
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_100369724(v16);
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_1001E525C((uint64_t)v17);
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v18;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
LABEL_21:
    int64_t v8 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_100221618(void **a1, uint64_t a2)
{
  char v98 = a1;
  uint64_t v96 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v94 = (char *)v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v84 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v93 = (char *)v82 - v9;
  uint64_t v10 = *(void *)(a2 + 8);
  if ((v10 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007E2D8(0, (unint64_t *)&unk_100955C10);
    sub_1000CD998(&qword_1009507B8, (unint64_t *)&unk_100955C10);
    Set.Iterator.init(_cocoa:)();
    uint64_t v10 = v100;
    uint64_t v88 = v101;
    uint64_t v11 = v102;
    uint64_t v12 = v103;
    unint64_t v13 = v104;
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v15 = *(void *)(v10 + 56);
    uint64_t v88 = v10 + 56;
    uint64_t v16 = ~v14;
    uint64_t v17 = -v14;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v13 = v18 & v15;
    swift_bridgeObjectRetain();
    uint64_t v11 = v16;
    uint64_t v12 = 0;
  }
  uint64_t v86 = v10 & 0x7FFFFFFFFFFFFFFFLL;
  v82[1] = v11;
  int64_t v87 = (unint64_t)(v11 + 64) >> 6;
  uint64_t v95 = (uint64_t *)(v4 + 56);
  uint64_t v91 = (unsigned int (**)(id, uint64_t, uint64_t))(v4 + 48);
  uint64_t v92 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v83 = (void (**)(id, uint64_t))(v4 + 8);
  uint64_t v85 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v97 = v10;
  if ((v10 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  uint64_t v27 = __CocoaSet.Iterator.next()();
  if (!v27) {
    return sub_1000D9B04();
  }
  uint64_t v99 = v27;
  sub_10007E2D8(0, (unint64_t *)&unk_100955C10);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v26 = v105;
  swift_unknownObjectRelease();
  uint64_t v22 = v12;
  uint64_t v20 = v13;
  if (!v26) {
    return sub_1000D9B04();
  }
  while (1)
  {
    id v28 = [v26 templateUniqueName];
    if (!v28) {
      goto LABEL_62;
    }
    uint64_t v29 = v28;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v31;

    uint64_t v32 = *v98;
    if (!*((void *)*v98 + 2) || (unint64_t v33 = sub_1000DA1C0(v30, v10), (v34 & 1) == 0))
    {
      uint64_t v12 = v22;
      swift_bridgeObjectRelease();
      id v61 = [v26 templateUniqueName];
      if (!v61) {
        goto LABEL_63;
      }
      uint64_t v62 = v61;
      id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;

      id v65 = v26;
      uint64_t v10 = (uint64_t)v98;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v105 = *(void **)v10;
      uint64_t v67 = v105;
      *(void *)uint64_t v10 = 0x8000000000000000;
      unint64_t v69 = sub_1000DA1C0((uint64_t)v2, v64);
      uint64_t v70 = v67[2];
      BOOL v71 = (v68 & 1) == 0;
      uint64_t v72 = v70 + v71;
      if (__OFADD__(v70, v71))
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v95)(v93, 1, 1, v96);
LABEL_65:
        __break(1u);
LABEL_66:
        ((void (*)(id, uint64_t, uint64_t, uint64_t))v10)(v2, 1, 1, v96);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      uint64_t v10 = v68;
      if (v67[3] < v72)
      {
        sub_1004E8F6C(v72, isUniquelyReferenced_nonNull_native);
        unint64_t v73 = sub_1000DA1C0((uint64_t)v2, v64);
        if ((v10 & 1) != (v74 & 1)) {
          goto LABEL_69;
        }
        unint64_t v69 = v73;
        uint64_t v75 = v105;
        if ((v10 & 1) == 0) {
          goto LABEL_53;
        }
LABEL_9:
        uint64_t v19 = v75[7] + 16 * v69;

        *(void *)uint64_t v19 = v65;
        *(void *)(v19 + 8) = 1;
LABEL_10:
        *char v98 = v75;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v13 = v20;
        uint64_t v10 = v97;
        if (v97 < 0) {
          goto LABEL_29;
        }
        goto LABEL_11;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v75 = v105;
        if (v68) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_1004F26D4();
        uint64_t v75 = v105;
        if (v10) {
          goto LABEL_9;
        }
      }
LABEL_53:
      v75[(v69 >> 6) + 8] |= 1 << v69;
      uint64_t v76 = (void *)(v75[6] + 16 * v69);
      *uint64_t v76 = v2;
      v76[1] = v64;
      uint64_t v77 = (void *)(v75[7] + 16 * v69);
      *uint64_t v77 = v65;
      v77[1] = 1;
      uint64_t v78 = v75[2];
      BOOL v79 = __OFADD__(v78, 1);
      uint64_t v80 = v78 + 1;
      if (v79) {
        goto LABEL_59;
      }
      v75[2] = v80;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    unint64_t v89 = v20;
    uint64_t v90 = v22;
    uint64_t v35 = v32[7] + 16 * v33;
    uint64_t v36 = *(void *)(v35 + 8);
    id v37 = *(id *)v35;
    swift_bridgeObjectRelease();
    id v38 = [v37 completedDate];
    if (!v38) {
      goto LABEL_64;
    }
    long long v39 = v38;
    long long v40 = v94;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v2 = v93;
    uint64_t v41 = *v92;
    uint64_t v42 = v96;
    (*v92)(v93, v40, v96);
    uint64_t v10 = *v95;
    ((void (*)(id, void, uint64_t, uint64_t))*v95)(v2, 0, 1, v42);
    uint64_t v43 = *v91;
    if ((*v91)(v2, 1, v42) == 1) {
      goto LABEL_65;
    }
    id v2 = v84;
    id v44 = [v26 completedDate];
    if (!v44) {
      goto LABEL_66;
    }
    uint64_t v45 = v44;
    uint64_t v46 = v94;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v47 = v96;
    v41((char *)v2, v46, v96);
    uint64_t v48 = v47;
    ((void (*)(id, void, uint64_t, uint64_t))v10)(v2, 0, 1, v47);
    if (v43(v2, 1, v47) == 1) {
      goto LABEL_67;
    }
    uint64_t v49 = v93;
    char v50 = static Date.> infix(_:_:)();
    id v51 = v2;
    id v2 = v83;
    uint64_t v52 = *v83;
    (*v83)(v51, v48);
    v52(v49, v48);
    if (v50) {
      unint64_t v53 = v37;
    }
    else {
      unint64_t v53 = v26;
    }
    id v54 = v53;
    id v55 = [v26 templateUniqueName];
    if (!v55) {
      goto LABEL_68;
    }
    CGRect v56 = v55;
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v58;

    if (__OFADD__(v36, 1)) {
      goto LABEL_60;
    }
    id v2 = v54;
    uint64_t v59 = v98;
    char v60 = swift_isUniquelyReferenced_nonNull_native();
    id v105 = *v59;
    char *v59 = (void *)0x8000000000000000;
    sub_1004EFA0C((uint64_t)v2, v36 + 1, v57, v10, v60);
    char *v59 = v105;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v13 = v89;
    uint64_t v12 = v90;
    uint64_t v10 = v97;
    if (v97 < 0) {
      goto LABEL_29;
    }
LABEL_11:
    if (!v13) {
      break;
    }
    uint64_t v20 = (v13 - 1) & v13;
    unint64_t v21 = __clz(__rbit64(v13)) | (v12 << 6);
    uint64_t v22 = v12;
LABEL_27:
    id v26 = *(id *)(*(void *)(v10 + 48) + 8 * v21);
    if (!v26) {
      return sub_1000D9B04();
    }
  }
  int64_t v23 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_61;
  }
  if (v23 >= v87) {
    return sub_1000D9B04();
  }
  unint64_t v24 = *(void *)(v88 + 8 * v23);
  uint64_t v22 = v12 + 1;
  if (v24) {
    goto LABEL_26;
  }
  uint64_t v22 = v12 + 2;
  if (v12 + 2 >= v87) {
    return sub_1000D9B04();
  }
  unint64_t v24 = *(void *)(v88 + 8 * v22);
  if (v24) {
    goto LABEL_26;
  }
  uint64_t v22 = v12 + 3;
  if (v12 + 3 >= v87) {
    return sub_1000D9B04();
  }
  unint64_t v24 = *(void *)(v88 + 8 * v22);
  if (v24) {
    goto LABEL_26;
  }
  uint64_t v22 = v12 + 4;
  if (v12 + 4 >= v87) {
    return sub_1000D9B04();
  }
  unint64_t v24 = *(void *)(v88 + 8 * v22);
  if (v24)
  {
LABEL_26:
    uint64_t v20 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v22 << 6);
    goto LABEL_27;
  }
  uint64_t v25 = v12 + 5;
  while (v87 != v25)
  {
    unint64_t v24 = *(void *)(v88 + 8 * v25++);
    if (v24)
    {
      uint64_t v22 = v25 - 1;
      goto LABEL_26;
    }
  }
  return sub_1000D9B04();
}

id sub_100221ED4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CHAwardsDataProvider();
  return [super dealloc];
}

uint64_t sub_100221FD8()
{
  sub_10007E4EC((void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider), *(void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider + 24));
  return dispatch thunk of AAUIAwardsDataProviding.activate()();
}

uint64_t sub_100222030()
{
  sub_10007E4EC((void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider), *(void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider + 24));
  return dispatch thunk of AAUIAwardsDataProviding.activate(isFitnessPlusSubscriber:)();
}

uint64_t sub_100222098(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_getObjectType();

  return sub_10022246C(a1, v3);
}

uint64_t sub_1002220EC()
{
  sub_10007E4EC((void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider), *(void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider + 24));
  return dispatch thunk of AAUIAwardsDataProviding.remove(observer:)();
}

uint64_t sub_100222154(uint64_t a1, uint64_t a2)
{
  return sub_100222378(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.topThreeAchievements());
}

uint64_t sub_10022216C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002221CC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.achievementCount(forSection:));
}

uint64_t sub_100222184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002221CC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.topAchievement(forSection:));
}

uint64_t sub_10022219C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002221CC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.achievementStack(forSection:));
}

uint64_t sub_1002221B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002221CC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.achievements(forSection:));
}

uint64_t sub_1002221CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = (void *)(*v4 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  uint64_t v8 = v7[3];
  uint64_t v9 = v7[4];
  sub_10007E4EC(v7, v8);
  return a4(a1, v8, v9);
}

uint64_t sub_100222234()
{
  id v1 = *v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 achievementsForWorkoutIdentifier:v2];

  sub_10022242C();
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1002222A0()
{
  sub_10007E4EC((void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider), *(void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider + 24));
  return dispatch thunk of AAUIAwardsDataProviding.mostRecentSection()();
}

uint64_t sub_1002222F8()
{
  sub_10007E4EC((void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider), *(void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider + 24));
  return dispatch thunk of AAUIAwardsDataProviding.sections(atIndex:)();
}

uint64_t sub_100222360(uint64_t a1, uint64_t a2)
{
  return sub_100222378(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of AAUIAwardsDataProviding.otherSections());
}

uint64_t sub_100222378(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = (void *)(*v3 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  sub_10007E4EC(v5, v6);
  return a3(v6, v7);
}

uint64_t sub_1002223D0()
{
  sub_10007E4EC((void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider), *(void *)(*v0 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider + 24));
  return dispatch thunk of AAUIAwardsDataProviding.shouldShowProgressBar(for:)() & 1;
}

unint64_t sub_10022242C()
{
  unint64_t result = qword_1009556B0;
  if (!qword_1009556B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1009556B0);
  }
  return result;
}

uint64_t sub_10022246C(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of AAUIAwardsDataProviding.add(observer:)();
}

id sub_1002224CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v12[3] = a3;
  v12[4] = a4;
  uint64_t v6 = sub_1000B1710(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(v6, a1, a3);
  uint64_t v7 = (objc_class *)type metadata accessor for CHAwardsDataProvider();
  id v8 = objc_allocWithZone(v7);
  sub_10008E75C((uint64_t)v12, (uint64_t)v8 + OBJC_IVAR___CHAwardsDataProvider_awardsDataProvider);
  v11.receiver = v8;
  v11.super_class = v7;
  [super init];
  _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v12);
  return v9;
}

char *sub_10022257C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getObjectType();
  uint64_t v6 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView;
  id v7 = objc_allocWithZone((Class)UIView);
  id v8 = v3;
  id v9 = [v7 initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v3[v6] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementCellContentView;
  objc_super v11 = (char *)[objc_allocWithZone((Class)type metadata accessor for AchievementCellContentView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v8[v10] = v11;
  uint64_t v12 = *(void **)&v11[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView];
  *(void *)&v8[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementBadgeView] = v12;
  id v13 = v12;

  if (a3)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v14 = 0;
  }
  v25.receiver = v8;
  v25.super_class = (Class)type metadata accessor for AchievementsListTableViewCell();
  uint64_t v15 = (char *)[super initWithStyle:a1 reuseIdentifier:v14];

  uint64_t v16 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView;
  uint64_t v17 = *(void **)&v15[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView];
  uint64_t v18 = v15;
  id v19 = v17;
  id v20 = sub_10049E184();
  [v19 setBackgroundColor:v20];

  id v21 = [*(id *)&v15[v16] layer];
  [v21 setCornerRadius:sub_10049E1B0()];

  uint64_t v22 = *(void **)&v15[v16];
  [v22 addSubview:*(void *)&v18[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementCellContentView]];
  id v23 = [v18 contentView];
  [v23 addSubview:v22];

  sub_100222834();
  return v18;
}

void sub_100222834()
{
  id v1 = v0;
  swift_getObjectType();
  uint64_t v36 = self;
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100752640;
  id v3 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView];
  id v4 = [v3 topAnchor];
  id v5 = [v0 contentView];
  id v6 = [v5 topAnchor];

  id v7 = [v4 constraintEqualToAnchor:v6 constant:sub_10049E1C0()];
  *(void *)(v2 + 32) = v7;
  id v8 = [v3 leadingAnchor];
  id v9 = [v0 contentView];
  id v10 = [v9 leadingAnchor];

  sub_10049E1C0();
  id v12 = [v8 constraintEqualToAnchor:v10 constant:v11];

  *(void *)(v2 + 40) = v12;
  id v13 = [v3 trailingAnchor];
  id v14 = [v0 contentView];
  id v15 = [v14 trailingAnchor];

  sub_10049E1C0();
  id v17 = [v13 constraintEqualToAnchor:v15 constant:-v16];

  *(void *)(v2 + 48) = v17;
  id v18 = [v3 bottomAnchor];
  id v19 = [v0 contentView];
  id v20 = [v19 bottomAnchor];

  sub_10049E1C0();
  id v22 = [v18 constraintEqualToAnchor:v20 constant:-v21];

  *(void *)(v2 + 56) = v22;
  id v23 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementCellContentView];
  id v24 = [v23 topAnchor];
  id v25 = [v3 topAnchor];
  id v26 = [v24 constraintEqualToAnchor:v25];

  *(void *)(v2 + 64) = v26;
  id v27 = [v23 bottomAnchor];
  id v28 = [v3 bottomAnchor];
  id v29 = [v27 constraintEqualToAnchor:v28];

  *(void *)(v2 + 72) = v29;
  id v30 = [v23 leadingAnchor];
  id v31 = [v3 leadingAnchor];
  id v32 = [v30 constraintEqualToAnchor:v31];

  *(void *)(v2 + 80) = v32;
  id v33 = [v23 trailingAnchor];
  id v34 = [v3 trailingAnchor];
  id v35 = [v33 constraintEqualToAnchor:v34];

  *(void *)(v2 + 88) = v35;
  specialized Array._endMutation()();
  sub_10007E2D8(0, (unint64_t *)&qword_10094C810);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v36 activateConstraints:isa];
}

id sub_100222D7C()
{
  return sub_1002247A8(type metadata accessor for AchievementsListTableViewCell);
}

uint64_t type metadata accessor for AchievementsListTableViewCell()
{
  return self;
}

void sub_100222E14()
{
  id v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 __systemImageNamedSwift:v1];

  if (v2)
  {
    if (qword_10094A6B8 != -1) {
      swift_once();
    }
    id v3 = [v2 imageWithSymbolConfiguration:qword_100950800];
  }
  else
  {
    id v3 = 0;
  }
  qword_1009507F0 = (uint64_t)v3;
}

id sub_100222EF8()
{
  id result = [self preferredFontForTextStyle:UIFontTextStyleSubheadline];
  qword_1009507F8 = (uint64_t)result;
  return result;
}

id sub_100222F40()
{
  id result = [self _configurationWithPointSize:13.0];
  qword_100950800 = (uint64_t)result;
  return result;
}

char *sub_100222F80(double a1, double a2, double a3, double a4)
{
  id v9 = &v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName];
  *(void *)id v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v10 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView;
  id v11 = objc_allocWithZone((Class)UIImageView);
  id v12 = v4;
  id v13 = [v11 initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v13 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v4[v10] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_labelStackView;
  id v15 = [objc_allocWithZone((Class)UIStackView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v15 setAxis:1];
  double v16 = (void *)UIStackView.withAlignment(_:)();

  [v16 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v12[v14] = v16;
  uint64_t v17 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_titleLabel;
  id v18 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v18 setLineBreakMode:0];
  [v18 setNumberOfLines:0];
  if (qword_10094A6B0 != -1) {
    swift_once();
  }
  id v19 = (void *)UILabel.withFont(_:)();

  id v20 = self;
  id v21 = [v20 labelColor];
  id v22 = (void *)UILabel.withTextColor(_:)();

  [v22 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v12[v17] = v22;
  uint64_t v23 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_detailLabel;
  id v24 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v24 setLineBreakMode:0];
  [v24 setNumberOfLines:0];
  [v24 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v12[v23] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_chevronImageView;
  id v26 = [objc_allocWithZone((Class)UIImageView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v27 = [v20 tertiaryLabelColor];
  [v26 setTintColor:v27];

  if (qword_10094A6A8 != -1) {
    swift_once();
  }
  [v26 setImage:qword_1009507F0];
  [v26 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v12[v25] = v26;

  v33.receiver = v12;
  v33.super_class = (Class)type metadata accessor for AchievementCellContentView();
  id v28 = [super initWithFrame:a1, a2, a3, a4];
  id v29 = *(void **)&v28[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_labelStackView];
  uint64_t v30 = *(void *)&v28[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_titleLabel];
  id v31 = v28;
  [v29 addArrangedSubview:v30];
  [v29 addArrangedSubview:*(void *)&v31[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_detailLabel]];
  [v31 addSubview:*(void *)&v31[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView]];
  [v31 addSubview:v29];
  [v31 addSubview:*(void *)&v31[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_chevronImageView]];
  sub_1002233C8();

  return v31;
}

void sub_1002233C8()
{
  NSString v1 = v0;
  uint64_t v43 = self;
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1007561E0;
  id v3 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView];
  id v4 = [v3 topAnchor];
  id v5 = [v1 topAnchor];
  id v6 = [v4 constraintGreaterThanOrEqualToAnchor:v5 constant:16.0];

  *(void *)(v2 + 32) = v6;
  id v7 = [v3 leadingAnchor];
  id v8 = [v1 leadingAnchor];
  id v9 = [v7 constraintEqualToAnchor:v8 constant:16.0];

  *(void *)(v2 + 40) = v9;
  id v10 = [v3 centerYAnchor];
  id v11 = [v1 centerYAnchor];
  id v12 = [v10 constraintEqualToAnchor:v11];

  *(void *)(v2 + 48) = v12;
  id v13 = [v3 bottomAnchor];
  id v14 = [v1 bottomAnchor];
  id v15 = [v13 constraintLessThanOrEqualToAnchor:v14 constant:-16.0];

  *(void *)(v2 + 56) = v15;
  id v16 = [v3 heightAnchor];
  id v17 = [v16 constraintEqualToConstant:62.0];

  *(void *)(v2 + 64) = v17;
  id v18 = [v3 widthAnchor];
  id v19 = [v18 constraintEqualToConstant:62.0];

  *(void *)(v2 + 72) = v19;
  id v20 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_labelStackView];
  id v21 = [v20 topAnchor];
  id v22 = [v1 topAnchor];
  id v23 = [v21 constraintGreaterThanOrEqualToAnchor:v22 constant:16.0];

  *(void *)(v2 + 80) = v23;
  id v24 = [v20 leadingAnchor];
  id v25 = [v3 trailingAnchor];
  id v26 = [v24 constraintEqualToAnchor:v25 constant:8.0];

  *(void *)(v2 + 88) = v26;
  id v27 = [v20 centerYAnchor];
  id v28 = [v3 centerYAnchor];
  id v29 = [v27 constraintEqualToAnchor:v28];

  *(void *)(v2 + 96) = v29;
  id v30 = [v20 trailingAnchor];
  id v31 = *(void **)&v1[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_chevronImageView];
  id v32 = [v31 leadingAnchor];
  id v33 = [v30 constraintLessThanOrEqualToAnchor:v32];

  *(void *)(v2 + 104) = v33;
  id v34 = [v20 bottomAnchor];
  id v35 = [v1 bottomAnchor];
  id v36 = [v34 constraintLessThanOrEqualToAnchor:v35 constant:-16.0];

  *(void *)(v2 + 112) = v36;
  id v37 = [v31 centerYAnchor];
  id v38 = [v1 centerYAnchor];
  id v39 = [v37 constraintEqualToAnchor:v38];

  *(void *)(v2 + 120) = v39;
  id v40 = [v31 trailingAnchor];
  id v41 = [v1 trailingAnchor];
  id v42 = [v40 constraintEqualToAnchor:v41 constant:-16.0];

  *(void *)(v2 + 128) = v42;
  specialized Array._endMutation()();
  sub_10007E2D8(0, (unint64_t *)&qword_10094C810);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v43 activateConstraints:isa];
}

void sub_100223998(void *a1, void *a2, void *a3)
{
  id v4 = v3;
  uint64_t v76 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v73 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for DispatchQoS();
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  BOOL v71 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)&double v12 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v70 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *(void **)&v3[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_titleLabel];
  NSString v15 = [a3 titleForAchievement:a1 v12];
  if (v15)
  {
    uint64_t v16 = v11;
    id v17 = v4;
    uint64_t v18 = v10;
    id v19 = a2;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    aBlock = (void **)v20;
    uint64_t v82 = v22;
    uint64_t v79 = 10;
    unint64_t v80 = 0xE100000000000000;
    uint64_t v77 = 32;
    unint64_t v78 = 0xE100000000000000;
    sub_1000A06D0();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    NSString v15 = String._bridgeToObjectiveC()();
    a2 = v19;
    uint64_t v10 = v18;
    id v4 = v17;
    uint64_t v11 = v16;
    swift_bridgeObjectRelease();
  }
  [v14 setText:v15];

  id v23 = [a3 achievedShortDescriptionForAchievement:a1];
  if (v23)
  {
    id v24 = v23;
    unint64_t v69 = a2;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    if (v25 == 0xD000000000000026 && v27 == 0x80000001007B6380
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000AFA94((uint64_t *)&unk_10095BF70);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10074E640;
      *(void *)(inited + 32) = NSFontAttributeName;
      uint64_t v29 = qword_10094A6B0;
      id v30 = NSFontAttributeName;
      if (v29 != -1) {
        swift_once();
      }
      id v31 = (void *)qword_1009507F8;
      uint64_t v32 = sub_10007E2D8(0, (unint64_t *)&qword_1009587A0);
      *(void *)(inited + 40) = v31;
      *(void *)(inited + 64) = v32;
      *(void *)(inited + 72) = NSForegroundColorAttributeName;
      id v33 = self;
      id v34 = v31;
      id v35 = NSForegroundColorAttributeName;
      id v36 = [v33 secondaryLabelColor];
      *(void *)(inited + 104) = sub_10007E2D8(0, (unint64_t *)&qword_10095BF80);
      *(void *)(inited + 80) = v36;
      sub_1000DFC2C(inited);
      id v37 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_detailLabel];
      id v38 = objc_allocWithZone((Class)NSAttributedString);
      NSString v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_10006783C((unint64_t *)&qword_10094B9A0, type metadata accessor for Key);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v41 = [v38 initWithString:v39 attributes:isa];

      [v37 setAttributedText:v41];
    }
    a2 = v69;
  }
  id v42 = [a1 template];
  id v43 = [v42 uniqueName];

  if (v43)
  {
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v46 = 0;
  }
  uint64_t v47 = (uint64_t *)&v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName];
  *uint64_t v47 = v44;
  v47[1] = v46;
  swift_bridgeObjectRelease();
  if (!objc_msgSend(a2, "hasCachedThumbnailImageForAchievement:size:", a1, 62.0, 62.0))
  {
    sub_10007E2D8(0, (unint64_t *)&qword_1009555D0);
    id v51 = v70;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v70, enum case for DispatchQoS.QoSClass.userInitiated(_:), v10);
    uint64_t v52 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v51, v10);
    unint64_t v53 = (int64x2_t *)swift_allocObject();
    v53[1].i64[0] = (uint64_t)a2;
    v53[1].i64[1] = (uint64_t)a1;
    v53[2] = vdupq_n_s64(0x404F000000000000uLL);
    v53[3].i64[0] = (uint64_t)v4;
    uint64_t v85 = sub_1002248F8;
    uint64_t v86 = v53;
    aBlock = _NSConcreteStackBlock;
    uint64_t v82 = 1107296256;
    uint64_t v83 = sub_100070394;
    uint64_t v84 = &unk_1008BC5D0;
    id v54 = _Block_copy(&aBlock);
    id v55 = a2;
    id v56 = a1;
    uint64_t v57 = v4;
    uint64_t v58 = v71;
    static DispatchQoS.unspecified.getter();
    uint64_t v79 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10006783C((unint64_t *)&qword_100953B50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AFA94((uint64_t *)&unk_1009555E0);
    sub_100075AF8();
    uint64_t v59 = v73;
    uint64_t v60 = v76;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v54);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v74);
    swift_release();
    uint64_t v50 = v47[1];
    if (!v50) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v48 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView];
  id v49 = [a2 thumbnailImageForAchievement:a1 size:62.0, 62.0];
  [v48 setImage:v49];

  uint64_t v50 = v47[1];
  if (v50)
  {
LABEL_19:
    id v61 = (void **)*v47;
    swift_bridgeObjectRetain();
    [a1 unearned];
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v63;
    aBlock = v61;
    uint64_t v82 = v50;
    v65._uint64_t countAndFlagsBits = 95;
    v65._object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    v66._uint64_t countAndFlagsBits = v62;
    v66._object = v64;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    NSString v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 setAccessibilityIdentifier:v67];
  }
}

uint64_t sub_1002242B0(void *a1, void *a2, double a3, double a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  id v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [a1 thumbnailImageForAchievement:a2 size:a3];
  sub_10007E2D8(0, (unint64_t *)&qword_1009555D0);
  uint64_t v16 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v17;
  v18[3] = a2;
  v18[4] = v15;
  aBlock[4] = sub_100224988;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100070394;
  aBlock[3] = &unk_1008BC648;
  id v19 = _Block_copy(aBlock);
  id v20 = a2;
  id v21 = v15;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10006783C((unint64_t *)&qword_100953B50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AFA94((uint64_t *)&unk_1009555E0);
  sub_100075AF8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v24);
}

void sub_1002245E0(uint64_t a1, void *a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v6 = (void *)Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName);
    uint64_t v7 = *(void *)(Strong + OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName + 8);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  id v9 = [a2 template];
  id v10 = [v9 uniqueName];

  if (!v10)
  {
    if (!v7) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (!v7)
  {
    if (!v13) {
      goto LABEL_18;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  if (!v13) {
    goto LABEL_16;
  }
  if (v8 == v11 && v7 == v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      return;
    }
  }
LABEL_18:
  swift_beginAccess();
  uint64_t v16 = swift_unknownObjectWeakLoadStrong();
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    id v18 = *(id *)(v16 + OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView);

    [v18 setImage:a3];
  }
}

id sub_100224790()
{
  return sub_1002247A8(type metadata accessor for AchievementCellContentView);
}

id sub_1002247A8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  [super dealloc];
}

uint64_t type metadata accessor for AchievementCellContentView()
{
  return self;
}

unint64_t sub_100224894()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1002248B0()
{
  return swift_deallocObject();
}

uint64_t sub_1002248F8()
{
  return sub_1002242B0(*(void **)(v0 + 16), *(void **)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_100224908()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100224940()
{
  swift_release();

  return swift_deallocObject();
}

void sub_100224988()
{
  sub_1002245E0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

void sub_100224994()
{
  uint64_t v1 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_insetContentView;
  id v2 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v0[v1] = v2;
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp29AchievementsListTableViewCell_achievementCellContentView;
  id v4 = [objc_allocWithZone((Class)type metadata accessor for AchievementCellContentView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v0[v3] = v4;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100224A84()
{
  uint64_t v1 = v0;
  id v2 = &v0[OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_templateUniqueName];
  *(void *)id v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_achievementBadgeView;
  id v4 = [objc_allocWithZone((Class)UIImageView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v3] = v4;
  uint64_t v5 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_labelStackView;
  id v6 = [objc_allocWithZone((Class)UIStackView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v6 setAxis:1];
  uint64_t v7 = (void *)UIStackView.withAlignment(_:)();

  [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v5] = v7;
  uint64_t v8 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_titleLabel;
  id v9 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v9 setLineBreakMode:0];
  [v9 setNumberOfLines:0];
  if (qword_10094A6B0 != -1) {
    swift_once();
  }
  id v10 = (void *)UILabel.withFont(_:)();

  uint64_t v11 = self;
  id v12 = [v11 labelColor];
  uint64_t v13 = (void *)UILabel.withTextColor(_:)();

  [v13 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v8] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_detailLabel;
  id v15 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v15 setLineBreakMode:0];
  [v15 setNumberOfLines:0];
  [v15 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10FitnessApp26AchievementCellContentView_chevronImageView;
  id v17 = [objc_allocWithZone((Class)UIImageView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v18 = [v11 tertiaryLabelColor];
  [v17 setTintColor:v18];

  if (qword_10094A6A8 != -1) {
    swift_once();
  }
  [v17 setImage:qword_1009507F0];
  [v17 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v1[v16] = v17;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100224DC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v87 = a1;
  uint64_t v77 = type metadata accessor for SleepingSampleChartLollipopView();
  uint64_t v83 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v84 = v3;
  uint64_t v86 = (uint64_t)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v81);
  uint64_t v82 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000AFA94(&qword_1009508A0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000AFA94(&qword_100950958);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000AFA94(&qword_100950960);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_1000AFA94(&qword_100950968);
  __chkstk_darwin(v72);
  id v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_1000AFA94(&qword_100950970);
  __chkstk_darwin(v73);
  id v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_1000AFA94(&qword_100950978);
  __chkstk_darwin(v74);
  id v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_1000AFA94(&qword_100950980);
  __chkstk_darwin(v75);
  id v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_1000AFA94(&qword_100950988);
  __chkstk_darwin(v79);
  uint64_t v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_1000AFA94(&qword_100950990);
  uint64_t v78 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v76 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v10 = static HorizontalAlignment.leading.getter();
  *((void *)v10 + 1) = 0;
  unsigned char v10[16] = 1;
  uint64_t v25 = &v10[*(int *)(sub_1000AFA94(&qword_100950998) + 44)];
  uint64_t v85 = v2;
  sub_100225650(v2, v25);
  uint64_t v26 = static Alignment.center.getter();
  sub_1004DC9B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v26, v27);
  sub_10008DB18((uint64_t)v10, &qword_100950958);
  unsigned __int8 v28 = static Edge.Set.top.getter();
  unsigned __int8 v29 = static Edge.Set.horizontal.getter();
  char v30 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v28) {
    char v30 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v29) {
    char v30 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_1000AEF2C((uint64_t)v13, (uint64_t)v15, &qword_100950960);
  NSString v39 = &v15[*(int *)(v72 + 36)];
  *NSString v39 = v30;
  *((void *)v39 + 1) = v32;
  *((void *)v39 + 2) = v34;
  *((void *)v39 + 3) = v36;
  *((void *)v39 + 4) = v38;
  v39[40] = 0;
  sub_10008DB18((uint64_t)v13, &qword_100950960);
  char v40 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_1000AEF2C((uint64_t)v15, (uint64_t)v17, &qword_100950968);
  id v49 = &v17[*(int *)(v73 + 36)];
  *id v49 = v40;
  *((void *)v49 + 1) = v42;
  *((void *)v49 + 2) = v44;
  *((void *)v49 + 3) = v46;
  *((void *)v49 + 4) = v48;
  v49[40] = 0;
  sub_10008DB18((uint64_t)v15, &qword_100950968);
  uint64_t v50 = static Color.black.getter();
  sub_1000AEF2C((uint64_t)v17, (uint64_t)v19, &qword_100950970);
  *(void *)&v19[*(int *)(v74 + 36)] = v50;
  sub_10008DB18((uint64_t)v17, &qword_100950970);
  uint64_t v51 = v85;
  sub_1000AEF2C(v85 + *(int *)(v77 + 28), (uint64_t)v7, &qword_1009508A0);
  uint64_t v52 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v7, 1, v52) == 1)
  {
    sub_10008DB18((uint64_t)v7, &qword_1009508A0);
    uint64_t v53 = static Color.gray.getter();
  }
  else
  {
    uint64_t v53 = *(void *)&v7[*(int *)(v52 + 24)];
    swift_retain();
    sub_100227954((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
  }
  char v54 = static Edge.Set.all.getter();
  sub_1000AEF2C((uint64_t)v19, (uint64_t)v21, &qword_100950978);
  id v55 = &v21[*(int *)(v75 + 36)];
  *(void *)id v55 = v53;
  v55[8] = v54;
  sub_10008DB18((uint64_t)v19, &qword_100950978);
  id v56 = v82;
  uint64_t v57 = &v82[*(int *)(v81 + 20)];
  uint64_t v58 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v59 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 104))(v57, v58, v59);
  __asm { FMOV            V0.2D, #8.0 }
  *id v56 = _Q0;
  uint64_t v65 = (uint64_t)&v23[*(int *)(v79 + 36)];
  sub_100097FB0((uint64_t)v56, v65, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v65 + *(int *)(sub_1000AFA94(&qword_10094E460) + 36)) = 256;
  sub_1000AEF2C((uint64_t)v21, (uint64_t)v23, &qword_100950980);
  sub_100227954((uint64_t)v56, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10008DB18((uint64_t)v21, &qword_100950980);
  uint64_t v66 = v86;
  sub_100097FB0(v51, v86, (uint64_t (*)(void))type metadata accessor for SleepingSampleChartLollipopView);
  unint64_t v67 = (*(unsigned __int8 *)(v83 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  uint64_t v68 = swift_allocObject();
  sub_100227BE0(v66, v68 + v67);
  sub_100227CA4();
  unint64_t v69 = v76;
  View.onTapGesture(count:perform:)();
  swift_release();
  sub_10008DB18((uint64_t)v23, &qword_100950988);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v78 + 32))(v87, v69, v80);
}

uint64_t sub_100225650@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v74 = a2;
  uint64_t v3 = sub_1000AFA94(&qword_10094C448);
  __chkstk_darwin(v3 - 8);
  uint64_t v68 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_1000AFA94(&qword_1009509F0);
  uint64_t v71 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v76 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_1000AFA94(&qword_1009509F8);
  uint64_t v78 = *(void *)(v70 - 8);
  uint64_t v6 = __chkstk_darwin(v70);
  unint64_t v67 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v77 = (char *)&v58 - v8;
  uint64_t v73 = type metadata accessor for AttributedString();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v75 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_1000AFA94(&qword_100950A00);
  uint64_t v65 = *(void *)(v66 - 8);
  uint64_t v10 = __chkstk_darwin(v66);
  uint64_t v64 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v79 = (char *)&v58 - v12;
  sub_100225DC4(a1, (uint64_t)&v80);
  uint64_t v13 = v80;
  uint64_t v14 = v81;
  uint64_t v62 = v81;
  uint64_t v15 = v82;
  uint64_t v16 = v83;
  uint64_t v17 = v84;
  char v18 = v85;
  uint64_t v19 = static Font.caption2.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v80 = v13;
  uint64_t v81 = v14;
  uint64_t v82 = v15;
  uint64_t v83 = v16;
  uint64_t v84 = v17;
  LOBYTE(v85) = v18;
  uint64_t v86 = KeyPath;
  uint64_t v87 = v19;
  static Font.Weight.medium.getter();
  sub_1000AFA94(&qword_100950A08);
  sub_100227FF8();
  View.fontWeight(_:)();
  swift_release();
  sub_1001BB654(v62, v15, v16);
  swift_release();
  swift_release();
  uint64_t v21 = type metadata accessor for SleepingSampleChartLollipopView();
  uint64_t v22 = v63;
  uint64_t v23 = v75;
  sub_1005C68B4(v63 + *(int *)(v21 + 24), v75);
  uint64_t v59 = static VerticalAlignment.center.getter();
  sub_100226008(v23, v22, (uint64_t)&v80);
  uint64_t v25 = v80;
  uint64_t v24 = v81;
  uint64_t v61 = v80;
  LOBYTE(v17) = v82;
  int v60 = v82;
  uint64_t v26 = v83;
  uint64_t v27 = v84;
  uint64_t v62 = v83;
  uint64_t v63 = v84;
  uint64_t v28 = v85;
  uint64_t v29 = v86;
  uint64_t v30 = v87;
  uint64_t v58 = v88;
  char v31 = v89;
  uint64_t v32 = static Font.body.getter();
  uint64_t v33 = swift_getKeyPath();
  uint64_t v80 = v59;
  uint64_t v81 = 0;
  LOBYTE(v82) = 0;
  uint64_t v83 = v25;
  uint64_t v84 = v24;
  LOBYTE(v85) = v17;
  uint64_t v86 = v26;
  uint64_t v87 = v27;
  uint64_t v88 = v28;
  uint64_t v89 = v29;
  uint64_t v90 = v30;
  uint64_t v91 = v58;
  char v92 = v31;
  uint64_t v93 = v33;
  uint64_t v94 = v32;
  static Font.Weight.medium.getter();
  uint64_t v34 = sub_1000AFA94(&qword_100950A48);
  unint64_t v35 = sub_100228130();
  View.fontWeight(_:)();
  sub_1000A06C0(v61, v24, v60);
  swift_bridgeObjectRelease();
  sub_1000A1760(v63, v28, v29, v30);
  swift_release();
  swift_release();
  uint64_t v36 = enum case for Font.Design.rounded(_:);
  uint64_t v37 = type metadata accessor for Font.Design();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v68, v36, v37);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
  uint64_t v80 = v34;
  uint64_t v81 = v35;
  swift_getOpaqueTypeConformance2();
  char v40 = v67;
  uint64_t v41 = v69;
  uint64_t v42 = v76;
  View.fontDesign(_:)();
  sub_10008DB18(v39, &qword_10094C448);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v42, v41);
  uint64_t v44 = v77;
  uint64_t v43 = v78;
  uint64_t v45 = v70;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v40, v70);
  uint64_t v46 = v65;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  uint64_t v48 = v64;
  uint64_t v49 = v66;
  v47(v64, v79, v66);
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  uint64_t v51 = v44;
  uint64_t v52 = v45;
  v50(v40, v51, v45);
  uint64_t v53 = v74;
  v47(v74, v48, v49);
  uint64_t v54 = sub_1000AFA94(&qword_100950A68);
  v50(&v53[*(int *)(v54 + 48)], v40, v52);
  id v55 = *(void (**)(char *, uint64_t))(v78 + 8);
  v55(v77, v52);
  id v56 = *(void (**)(char *, uint64_t))(v46 + 8);
  v56(v79, v49);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v75, v73);
  v55(v40, v52);
  return ((uint64_t (*)(char *, uint64_t))v56)(v48, v49);
}

uint64_t sub_100225DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SleepingSampleDataType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleViewModel.dataType.getter();
  uint64_t v8 = SleepingSampleDataType.preferredImage.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for SleepingSampleChartLollipopView() + 32)) == 1)
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v23 = v9;
    uint64_t v24 = v10 & 1;
    uint64_t v25 = v11;
    char v26 = 0;
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v23 = v13;
    uint64_t v24 = v12 & 1;
    uint64_t v25 = v14;
    char v26 = 1;
  }
  _ConditionalContent<>.init(storage:)();
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  uint64_t v17 = v29;
  uint64_t v18 = v30;
  char v19 = v31;
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = v17;
  *(void *)(a2 + 32) = v18;
  *(unsigned char *)(a2 + 40) = v19;
  swift_retain();
  sub_1001BB600(v15, v16, v17);
  sub_1001BB654(v15, v16, v17);
  return swift_release();
}

uint64_t sub_100226008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Text.Scale();
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  __chkstk_darwin(v6);
  uint64_t v42 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SleepingSampleDataType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttributedString();
  __chkstk_darwin(v12);
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v46 = Text.init(_:)();
  uint64_t v47 = v15;
  uint64_t v17 = v16;
  int v45 = v18;
  SleepingSampleViewModel.dataType.getter();
  char v19 = (void *)SleepingSampleViewModel.preferredAggregateValueUnit.getter();
  Swift::String_optional v20 = SleepingSampleDataType.localizedUnitString(for:)((HKUnit)v19);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!v20.value._object) {
    goto LABEL_5;
  }
  uint64_t v21 = type metadata accessor for SleepingSampleChartLollipopView();
  if ((sub_1005C72CC(a2 + *(int *)(v21 + 24)) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v29 = 0;
    uint64_t v31 = 0;
    uint64_t v35 = 0;
    uint64_t v33 = 0;
    goto LABEL_6;
  }
  Swift::String_optional v48 = v20;
  sub_1000A06D0();
  uint64_t v22 = Text.init<A>(_:)();
  uint64_t v24 = v23;
  uint64_t v41 = v25;
  char v27 = v26 & 1;
  uint64_t v28 = v42;
  static Text.Scale.secondary.getter();
  uint64_t v29 = Text.textScale(_:isEnabled:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34 & 1;
  sub_1000A06C0(v22, v24, v27);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v44);
LABEL_6:
  char v36 = v45;
  char v37 = v45 & 1;
  uint64_t v39 = v46;
  uint64_t v38 = v47;
  *(void *)a3 = v46;
  *(void *)(a3 + 8) = v17;
  *(unsigned char *)(a3 + 16) = v36 & 1;
  *(void *)(a3 + 24) = v38;
  *(void *)(a3 + 32) = v29;
  *(void *)(a3 + 40) = v31;
  *(void *)(a3 + 48) = v35;
  *(void *)(a3 + 56) = v33;
  *(void *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  sub_1000A1750(v39, v17, v36 & 1);
  swift_bridgeObjectRetain();
  sub_1000A17A4(v29, v31, v35, v33);
  sub_1000A1760(v29, v31, v35, v33);
  sub_1000A06C0(v39, v17, v37);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10022637C()
{
  return swift_release();
}

uint64_t sub_10022643C()
{
  if (qword_10094A790 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100997978;
  uint64_t result = static VerticalAlignment.bottom.getter();
  *(void *)&xmmword_100997838 = v0;
  *((void *)&xmmword_100997838 + 1) = result;
  return result;
}

void *sub_1002264A0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SleepingSampleViewModel();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DayIndex();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_1000AFA94(&qword_1009508A0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v13, v14, v19);
      uint64_t v20 = *(int *)(v15 + 20);
      uint64_t v21 = &v13[v20];
      uint64_t v22 = &v14[v20];
      uint64_t v23 = type metadata accessor for BaselineRelativeValue();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      *(void *)&v13[*(int *)(v15 + 24)] = *(void *)&v14[*(int *)(v15 + 24)];
      uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
      swift_retain();
      v24(v13, 0, 1, v15);
    }
    uint64_t v25 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    char v26 = (char *)a1 + v25;
    char v27 = (char *)a2 + v25;
    uint64_t v28 = *((void *)v27 + 1);
    *(void *)char v26 = *(void *)v27;
    *((void *)v26 + 1) = v28;
    unsigned char v26[16] = v27[16];
    uint64_t v29 = a3[10];
    uint64_t v30 = *(void **)((char *)a2 + v29);
    *(void *)((char *)a1 + v29) = v30;
    swift_retain();
    swift_retain();
    id v31 = v30;
  }
  return a1;
}

void sub_100226754(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for DayIndex();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    uint64_t v10 = v7 + *(int *)(v8 + 20);
    uint64_t v11 = type metadata accessor for BaselineRelativeValue();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v12 = *(void **)(a1 + a2[10]);
}

uint64_t sub_100226900(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DayIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000AFA94(&qword_1009508A0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v12, v13, v17);
    uint64_t v18 = *(int *)(v14 + 20);
    uint64_t v19 = &v12[v18];
    uint64_t v20 = &v13[v18];
    uint64_t v21 = type metadata accessor for BaselineRelativeValue();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
    uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
    swift_retain();
    v22(v12, 0, 1, v14);
  }
  uint64_t v23 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  *(void *)(v24 + 8) = v26;
  *(unsigned char *)(v24 + 16) = *(unsigned char *)(v25 + 16);
  uint64_t v27 = a3[10];
  uint64_t v28 = *(void **)(a2 + v27);
  *(void *)(a1 + v27) = v28;
  swift_retain();
  swift_retain();
  id v29 = v28;
  return a1;
}

uint64_t sub_100226B64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DayIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      uint64_t v34 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v12, v13, v34);
      uint64_t v35 = *(int *)(v14 + 20);
      char v36 = &v12[v35];
      char v37 = &v13[v35];
      uint64_t v38 = type metadata accessor for BaselineRelativeValue();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 24))(v36, v37, v38);
      *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
      swift_retain();
      swift_release();
      goto LABEL_7;
    }
    sub_100227954((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v25 = sub_1000AFA94(&qword_1009508A0);
    memcpy(v12, v13, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v12, v13, v19);
  uint64_t v20 = *(int *)(v14 + 20);
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  uint64_t v23 = type metadata accessor for BaselineRelativeValue();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
  uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
  swift_retain();
  v24(v12, 0, 1, v14);
LABEL_7:
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v26 = a3[9];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)(a1 + v26) = *(void *)(a2 + v26);
  swift_retain();
  swift_release();
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
  uint64_t v29 = a3[10];
  uint64_t v30 = *(void **)(a2 + v29);
  id v31 = *(void **)(a1 + v29);
  *(void *)(a1 + v29) = v30;
  id v32 = v30;

  return a1;
}

uint64_t sub_100226ED8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DayIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_1000AFA94(&qword_1009508A0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v12, v13, v17);
    uint64_t v18 = *(int *)(v14 + 20);
    uint64_t v19 = &v12[v18];
    uint64_t v20 = &v13[v18];
    uint64_t v21 = type metadata accessor for BaselineRelativeValue();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v22 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100227128(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DayIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      uint64_t v31 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40))(v12, v13, v31);
      uint64_t v32 = *(int *)(v14 + 20);
      uint64_t v33 = &v12[v32];
      uint64_t v34 = &v13[v32];
      uint64_t v35 = type metadata accessor for BaselineRelativeValue();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 40))(v33, v34, v35);
      *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
      swift_release();
      goto LABEL_7;
    }
    sub_100227954((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SleepingSampleBaselineRelativeChartPoint);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v24 = sub_1000AFA94(&qword_1009508A0);
    memcpy(v12, v13, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v12, v13, v19);
  uint64_t v20 = *(int *)(v14 + 20);
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  uint64_t v23 = type metadata accessor for BaselineRelativeValue();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  uint64_t v25 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)(a1 + v25) = *(void *)(a2 + v25);
  swift_release();
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  swift_release();
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  uint64_t v28 = a3[10];
  uint64_t v29 = *(void **)(a1 + v28);
  *(void *)(a1 + v28) = *(void *)(a2 + v28);

  return a1;
}

uint64_t sub_100227474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100227488);
}

uint64_t sub_100227488(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SleepingSampleViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for DayIndex();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_1000AFA94(&qword_1009508A0);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[9] + 8);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t sub_1002275F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100227604);
}

uint64_t sub_100227604(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for SleepingSampleViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for DayIndex();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t result = sub_1000AFA94(&qword_1009508A0);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[9] + 8) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[7];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SleepingSampleChartLollipopView()
{
  uint64_t result = qword_100950900;
  if (!qword_100950900) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002277B4()
{
  type metadata accessor for SleepingSampleViewModel();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DayIndex();
    if (v1 <= 0x3F)
    {
      sub_1002278E0();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1002278E0()
{
  if (!qword_100950910)
  {
    type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100950910);
    }
  }
}

uint64_t sub_100227938()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100227954(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002279B4()
{
  uint64_t v1 = (int *)type metadata accessor for SleepingSampleChartLollipopView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  uint64_t v3 = type metadata accessor for SleepingSampleViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = v2 + v1[6];
  uint64_t v5 = type metadata accessor for DayIndex();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v2 + v1[7];
  uint64_t v7 = type metadata accessor for SleepingSampleBaselineRelativeChartPoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    uint64_t v9 = v6 + *(int *)(v7 + 20);
    uint64_t v10 = type metadata accessor for BaselineRelativeValue();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100227BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SleepingSampleChartLollipopView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100227C44()
{
  type metadata accessor for SleepingSampleChartLollipopView();

  return sub_10022637C();
}

unint64_t sub_100227CA4()
{
  unint64_t result = qword_1009509A0;
  if (!qword_1009509A0)
  {
    sub_1000A1370(&qword_100950988);
    sub_100227D44();
    sub_1000A132C(&qword_1009509E8, &qword_10094E460);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009509A0);
  }
  return result;
}

unint64_t sub_100227D44()
{
  unint64_t result = qword_1009509A8;
  if (!qword_1009509A8)
  {
    sub_1000A1370(&qword_100950980);
    sub_100227DE4();
    sub_1000A132C(&qword_1009509D8, &qword_1009509E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009509A8);
  }
  return result;
}

unint64_t sub_100227DE4()
{
  unint64_t result = qword_1009509B0;
  if (!qword_1009509B0)
  {
    sub_1000A1370(&qword_100950978);
    sub_100227ED0(&qword_1009509B8, &qword_100950970, (void (*)(void))sub_100227EA8);
    sub_1000A132C(&qword_10094E300, &qword_10094E308);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009509B0);
  }
  return result;
}

uint64_t sub_100227EA8()
{
  return sub_100227ED0(&qword_1009509C0, &qword_100950968, (void (*)(void))sub_100227F50);
}

uint64_t sub_100227ED0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000A1370(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100227F50()
{
  unint64_t result = qword_1009509C8;
  if (!qword_1009509C8)
  {
    sub_1000A1370(&qword_100950960);
    sub_1000A132C(&qword_1009509D0, &qword_100950958);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009509C8);
  }
  return result;
}

unint64_t sub_100227FF8()
{
  unint64_t result = qword_100950A10;
  if (!qword_100950A10)
  {
    sub_1000A1370(&qword_100950A08);
    sub_100228098();
    sub_1000A132C(&qword_100950A38, &qword_100950A40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950A10);
  }
  return result;
}

unint64_t sub_100228098()
{
  unint64_t result = qword_100950A18;
  if (!qword_100950A18)
  {
    sub_1000A1370(&qword_100950A20);
    sub_1000A132C(&qword_100950A28, &qword_100950A30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950A18);
  }
  return result;
}

unint64_t sub_100228130()
{
  unint64_t result = qword_100950A50;
  if (!qword_100950A50)
  {
    sub_1000A1370(&qword_100950A48);
    sub_1000A132C(&qword_100950A58, &qword_100950A60);
    sub_1000A132C(&qword_100950A38, &qword_100950A40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950A50);
  }
  return result;
}

uint64_t sub_1002281F4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_100228254(void *a1@<X8>)
{
  *a1 = &off_1008B33B8;
}

uint64_t sub_100228264(unint64_t a1, unint64_t a2)
{
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v35 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - v7;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!(a2 >> 62))
    {
LABEL_3:
      if (v9 == *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_4;
      }
LABEL_25:
      char v32 = 0;
      return v32 & 1;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!(a2 >> 62)) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v9 != v33) {
    goto LABEL_25;
  }
LABEL_4:
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
LABEL_22:
    uint64_t v31 = sub_1001EFD68((uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v32 = sub_1002289D4((uint64_t)v13, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return v32 & 1;
  }
  unint64_t v38 = a2;
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000B6A64(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    int64_t v34 = v9 & ~(v9 >> 63);
    uint64_t v12 = 0;
    uint64_t v13 = v42;
    unint64_t v36 = a1 & 0xC000000000000001;
    unint64_t v37 = a1;
    uint64_t v39 = v4 + 32;
    uint64_t v40 = v9;
    do
    {
      if (v36) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a1 + 8 * v12 + 32);
      }
      uint64_t v15 = v14;
      id v16 = [v14 UUID:v34];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v42 = v13;
      unint64_t v18 = v13[2];
      unint64_t v17 = v13[3];
      if (v18 >= v17 >> 1)
      {
        sub_1000B6A64(v17 > 1, v18 + 1, 1);
        uint64_t v13 = v42;
      }
      ++v12;
      v13[2] = v18 + 1;
      unint64_t v19 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v20 = *(void *)(v4 + 72);
      uint64_t v21 = (char *)v13 + v19 + v20 * v18;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v22(v21, v8, v41);
      a1 = v37;
    }
    while (v40 != v12);
    uint64_t v42 = _swiftEmptyArrayStorage;
    sub_1000B6A64(0, v34, 0);
    uint64_t v23 = 0;
    uint64_t v10 = v42;
    unint64_t v24 = v38;
    unint64_t v37 = v38 & 0xC000000000000001;
    uint64_t v25 = v35;
    do
    {
      if (v37) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v26 = *(id *)(v24 + 8 * v23 + 32);
      }
      uint64_t v27 = v26;
      id v28 = [v26 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v42 = v10;
      unint64_t v30 = v10[2];
      unint64_t v29 = v10[3];
      if (v30 >= v29 >> 1)
      {
        sub_1000B6A64(v29 > 1, v30 + 1, 1);
        uint64_t v10 = v42;
      }
      ++v23;
      void v10[2] = v30 + 1;
      v22((char *)v10 + v19 + v20 * v30, v25, v41);
      unint64_t v24 = v38;
    }
    while (v40 != v23);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_100228650(uint64_t result)
{
  if (result >= 11)
  {
    os_log_type_t v1 = static os_log_type_t.error.getter();
    uint64_t v2 = (void *)HKLogActivity;
    os_log_type_t v3 = v1;
    if (os_log_type_enabled(HKLogActivity, v1))
    {
      uint64_t v4 = v2;
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315394;
      sub_10008F1F4(0xD000000000000015, 0x80000001007563E0, &v6);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v3, "%s Attempted to access section with index: %ld however index was out of range.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    return 11;
  }
  else if (result < 0)
  {
    __break(1u);
  }
  else
  {
    return *((unsigned __int8 *)&off_1008B33B8 + result + 32);
  }
  return result;
}

void sub_1002287E0(void *a1)
{
  type metadata accessor for ActivityTileSectionHeader();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v3 = String._bridgeToObjectiveC()();
  [a1 registerClass:ObjCClassFromMetadata forHeaderFooterViewReuseIdentifier:v3];

  uint64_t v4 = 11;
  uint64_t v5 = &byte_1008B33D8;
  do
  {
    int v8 = *v5++;
    switch(v8)
    {
      case 1:
      case 2:
        type metadata accessor for DayViewMoveAndExerciseChartTableViewCell();
        break;
      case 3:
        type metadata accessor for DayViewStandChartTableViewCell();
        break;
      case 4:
        type metadata accessor for DayViewStepsAndDistanceTableViewCell();
        break;
      case 5:
        type metadata accessor for DayViewFlightsTableViewCell();
        break;
      case 6:
        type metadata accessor for DayViewRingsConfigurationCell();
        break;
      case 7:
        type metadata accessor for WorkoutsListTableViewCell();
        break;
      case 8:
        type metadata accessor for MindfulnessSessionListTableViewCell();
        break;
      case 9:
        type metadata accessor for AchievementsListTableViewCell();
        break;
      case 10:
        type metadata accessor for AddToYourRingTableViewCell();
        break;
      default:
        type metadata accessor for DayViewActivityRingsTableViewCell();
        break;
    }
    uint64_t v6 = swift_getObjCClassFromMetadata();
    _print_unlocked<A, B>(_:_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [a1 registerClass:v6 forCellReuseIdentifier:v7];

    --v4;
  }
  while (v4);
}

uint64_t sub_1002289D4(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = sub_1000AFA94((uint64_t *)&unk_1009555F0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = *(void *)(a1 + 16);
  uint64_t v47 = v2;
  uint64_t v48 = a1;
  if (v42)
  {
    id v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v15 = v5 + 16;
    id v14 = v16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v18 = v15;
    uint64_t v19 = *(void *)(v15 + 56);
    uint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 32);
    uint64_t v44 = v10;
    int v45 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v54 = v49 + 56;
    unint64_t v21 = v15 - 8;
    uint64_t v22 = v15 + 40;
    swift_bridgeObjectRetain();
    uint64_t v23 = 0;
    uint64_t v40 = v13;
    unint64_t v41 = v22 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v52 = v18;
    uint64_t v53 = (void (*)(char *, unint64_t, uint64_t))v16;
    uint64_t v38 = v22;
    uint64_t v39 = v17;
    uint64_t v51 = v19;
    unint64_t v37 = v20;
    while (1)
    {
      uint64_t v50 = v23;
      v14(v13, v17 + v19 * v23, v4);
      uint64_t v24 = 1;
      uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v22;
      v46(v13, 0, 1, v4);
      if ((*v20)(v13, 1, v4) == 1) {
        break;
      }
      uint64_t v25 = v44;
      (*v45)(v44, v13, v4);
      uint64_t v26 = v49;
      uint64_t v27 = *(void *)(v49 + 16);
      uint64_t v43 = v21 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      if (!v27
        || (sub_1000A6D70((unint64_t *)&qword_10095B840),
            uint64_t v28 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v29 = -1 << *(unsigned char *)(v26 + 32),
            unint64_t v30 = v28 & ~v29,
            ((*(void *)(v54 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0))
      {
        (*(void (**)(char *, uint64_t))v21)(v25, v4);
LABEL_12:
        uint64_t v24 = 0;
        break;
      }
      uint64_t v31 = v25;
      ++v50;
      uint64_t v32 = ~v29;
      while (1)
      {
        v53(v7, *(void *)(v26 + 48) + v30 * v51, v4);
        sub_1000A6D70((unint64_t *)&unk_100955610);
        char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
        int64_t v34 = *(void (**)(char *, uint64_t))v21;
        (*(void (**)(char *, uint64_t))v21)(v7, v4);
        if (v33) {
          break;
        }
        unint64_t v30 = (v30 + 1) & v32;
        if (((*(void *)(v54 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
        {
          v34(v31, v4);
          goto LABEL_12;
        }
      }
      v34(v31, v4);
      uint64_t v23 = v50;
      uint64_t v19 = v51;
      uint64_t v17 = v39;
      uint64_t v13 = v40;
      id v14 = (void (*)(char *, uint64_t, uint64_t))v53;
      uint64_t v20 = v37;
      uint64_t v22 = v38;
      if (v50 == v42) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    unint64_t v41 = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    swift_bridgeObjectRetain();
LABEL_14:
    uint64_t v24 = 1;
    v46(v13, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  return v24;
}

unsigned char *storeEnumTagSinglePayload for HistoryDayViewSection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100228E98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryDayViewSection()
{
  return &type metadata for HistoryDayViewSection;
}

unint64_t sub_100228ED4()
{
  unint64_t result = qword_100950AD8;
  if (!qword_100950AD8)
  {
    sub_1000A1370(&qword_100950AE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950AD8);
  }
  return result;
}

unint64_t sub_100228F34()
{
  unint64_t result = qword_100950AE8;
  if (!qword_100950AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950AE8);
  }
  return result;
}

Swift::Int sub_100228FE0()
{
  Hasher.init()();
  Hasher._combine(_:)(*(void *)(v0 + OBJC_IVAR___CHMindfulnessSessionsStatistics_sessionCount));
  if ((*(void *)(v0 + OBJC_IVAR___CHMindfulnessSessionsStatistics_totalDuration) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)(v0 + OBJC_IVAR___CHMindfulnessSessionsStatistics_totalDuration);
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  return Hasher.finalize()();
}

id sub_100229098()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MindfulnessSessionsStatistics();
  return [super dealloc];
}

uint64_t type metadata accessor for MindfulnessSessionsStatistics()
{
  return self;
}

Swift::Int sub_1002290F0@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result = sub_100228FE0();
  *a1 = result;
  return result;
}

void *sub_1002292AC()
{
  return &protocol witness table for Int;
}

uint64_t destroy for FriendSuggestionSectionView()
{
  swift_release();

  return swift_release();
}

void *_s10FitnessApp27FriendSuggestionSectionViewVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for FriendSuggestionSectionView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for FriendSuggestionSectionView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FriendSuggestionSectionView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FriendSuggestionSectionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)Swift::Int result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendSuggestionSectionView()
{
  return &type metadata for FriendSuggestionSectionView;
}

uint64_t sub_100229480()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10022949C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v65 = a3;
  uint64_t v64 = a2;
  uint64_t v63 = a1;
  uint64_t v58 = a4;
  uint64_t v4 = type metadata accessor for ScrollIndicatorVisibility();
  uint64_t v71 = *(void *)(v4 - 8);
  uint64_t v72 = v4;
  __chkstk_darwin(v4);
  int v60 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000AFA94(&qword_100950B30);
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v70 = v6;
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000AFA94(&qword_100950B38);
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v75 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v73 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v68 = (char *)&v58 - v12;
  __chkstk_darwin(v11);
  uint64_t v77 = (char *)&v58 - v13;
  uint64_t v14 = sub_1000AFA94(&qword_10094C448);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Font.TextStyle();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for Font.TextStyle.footnote(_:), v17);
  uint64_t v26 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 1, 1, v26);
  static Font.system(_:design:weight:)();
  sub_1000AAAA4((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v27 = v60;
  uint64_t v67 = Text.font(_:)();
  uint64_t v66 = v28;
  char v30 = v29;
  uint64_t v76 = v31;
  uint64_t v32 = v59;
  swift_release();
  sub_1000A06C0(v21, v23, v25);
  swift_bridgeObjectRelease();
  int v61 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v62 = static Color.secondary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  static Axis.Set.horizontal.getter();
  uint64_t v78 = v63;
  uint64_t v79 = v64;
  uint64_t v80 = v65;
  sub_1000AFA94(&qword_100950B40);
  sub_1000A132C(&qword_100950B48, &qword_100950B40);
  ScrollView.init(_:showsIndicators:content:)();
  static ScrollIndicatorVisibility.hidden.getter();
  unsigned __int8 v42 = static Axis.Set.vertical.getter();
  unsigned __int8 v43 = static Axis.Set.horizontal.getter();
  Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v42) {
    Axis.Set.init(rawValue:)();
  }
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v43) {
    Axis.Set.init(rawValue:)();
  }
  char v44 = v30 & 1;
  sub_1000A132C(&qword_100950B50, &qword_100950B30);
  int v45 = v68;
  uint64_t v46 = v70;
  View.scrollIndicators(_:axes:)();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v27, v72);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v32, v46);
  uint64_t v48 = v74;
  uint64_t v47 = v75;
  uint64_t v49 = v77;
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v77, v45, v75);
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  uint64_t v51 = v73;
  v50(v73, v49, v47);
  uint64_t v52 = v67;
  uint64_t v53 = v58;
  uint64_t v54 = v66;
  *uint64_t v58 = v67;
  v53[1] = v54;
  *((unsigned char *)v53 + 16) = v44;
  v53[3] = v76;
  *((unsigned char *)v53 + 32) = v61;
  v53[5] = v34;
  v53[6] = v36;
  v53[7] = v38;
  v53[8] = v40;
  *((unsigned char *)v53 + 72) = 0;
  v53[10] = KeyPath;
  uint64_t v72 = KeyPath;
  v53[11] = v62;
  uint64_t v55 = sub_1000AFA94(&qword_100950B58);
  v50((char *)v53 + *(int *)(v55 + 48), v51, v47);
  sub_1000A1750(v52, v54, v44);
  id v56 = *(void (**)(char *, uint64_t))(v48 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v56(v77, v47);
  v56(v51, v47);
  sub_1000A06C0(v52, v54, v44);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100229BFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1000AFA94(&qword_100950B60);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v19 - v13;
  *(void *)a4 = static VerticalAlignment.center.getter();
  *(void *)(a4 + 8) = 0x4024000000000000;
  *(unsigned char *)(a4 + 16) = 0;
  if (a1)
  {
    uint64_t v15 = a4 + *(int *)(sub_1000AFA94(&qword_100950B68) + 44);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_getKeyPath();
    id v16 = (void *)swift_allocObject();
    void v16[2] = a1;
    v16[3] = a2;
    v16[4] = a3;
    swift_retain();
    swift_retain();
    sub_1000AFA94(&qword_100950B70);
    sub_1000A132C(&qword_100950B78, &qword_100950B70);
    sub_10022A0D0();
    sub_10022A124();
    ForEach<>.init(_:id:content:)();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v17(v14, v12, v8);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(v15, v14, v8);
  }
  else
  {
    type metadata accessor for ReachableContactsDataSource();
    sub_10022A178(&qword_10094BF20, (void (*)(uint64_t))type metadata accessor for ReachableContactsDataSource);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100229EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  type metadata accessor for ActivitySharingFriendListDataProvider();
  sub_10022A178((unint64_t *)&qword_1009512A0, (void (*)(uint64_t))type metadata accessor for ActivitySharingFriendListDataProvider);
  swift_retain();
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = EnvironmentObject.init()();
  uint64_t v13 = v12;
  type metadata accessor for ActivitySharingFriendDetailAlertCoordinator();
  sub_10022A178((unint64_t *)&qword_10095C150, (void (*)(uint64_t))type metadata accessor for ActivitySharingFriendDetailAlertCoordinator);
  uint64_t result = EnvironmentObject.init()();
  *a3 = v11;
  a3[1] = v13;
  a3[2] = result;
  a3[3] = v15;
  a3[4] = a2;
  a3[5] = (uint64_t)v10;
  a3[6] = v6;
  a3[7] = v7;
  a3[8] = v16;
  a3[9] = v8;
  a3[10] = v9;
  return result;
}

uint64_t sub_10022A008@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  *(void *)a1 = static HorizontalAlignment.leading.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v6 = sub_1000AFA94(&qword_100950B28);
  return sub_10022949C(v3, v4, v5, (uint64_t *)(a1 + *(int *)(v6 + 44)));
}

uint64_t sub_10022A070@<X0>(uint64_t a1@<X8>)
{
  return sub_100229BFC(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_10022A084()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10022A0C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100229EC4(a1, *(void *)(v2 + 32), a2);
}

unint64_t sub_10022A0D0()
{
  unint64_t result = qword_100950B80;
  if (!qword_100950B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950B80);
  }
  return result;
}

unint64_t sub_10022A124()
{
  unint64_t result = qword_100950B88;
  if (!qword_100950B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950B88);
  }
  return result;
}

uint64_t sub_10022A178(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10022A1C0()
{
  return sub_1000A132C(&qword_100950B90, &qword_100950B98);
}

BOOL sub_10022A1FC(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_10022A218(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL sub_10022A22C(double *a1, double *a2)
{
  return *a1 <= *a2;
}

BOOL sub_10022A240(double *a1, double *a2)
{
  return *a2 <= *a1;
}

BOOL sub_10022A254(double *a1, double *a2)
{
  return *a2 < *a1;
}

unint64_t sub_10022A26C()
{
  unint64_t result = qword_100950BA0;
  if (!qword_100950BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950BA0);
  }
  return result;
}

double sub_10022A2C0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0.0 / 0.0;
  }
  if (v1 < 4)
  {
    uint64_t v2 = 0;
    double v3 = 0.0;
LABEL_8:
    unint64_t v8 = v1 - v2;
    uint64_t v9 = (double *)(a1 + 16 * v2 + 40);
    do
    {
      double v3 = v3 + *(v9 - 1) * *v9;
      v9 += 2;
      --v8;
    }
    while (v8);
    goto LABEL_10;
  }
  uint64_t v2 = v1 & 0x7FFFFFFFFFFFFFFCLL;
  uint64_t v5 = (const double *)(a1 + 64);
  double v3 = 0.0;
  uint64_t v6 = v1 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v7 = v5 - 4;
    float64x2x2_t v19 = vld2q_f64(v7);
    float64x2x2_t v20 = vld2q_f64(v5);
    v19.val[0] = vmulq_f64(v19.val[0], v19.val[1]);
    v20.val[0] = vmulq_f64(v20.val[0], v20.val[1]);
    double v3 = v3 + v19.val[0].f64[0] + v19.val[0].f64[1] + v20.val[0].f64[0] + v20.val[0].f64[1];
    v5 += 8;
    v6 -= 4;
  }
  while (v6);
  if (v1 != v2) {
    goto LABEL_8;
  }
LABEL_10:
  if (v1 >= 2)
  {
    uint64_t v10 = v1 & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v12 = (double *)(a1 + 56);
    double v11 = 0.0;
    uint64_t v13 = v1 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      double v14 = *(v12 - 2);
      double v15 = *v12;
      v12 += 4;
      double v11 = v11 + v14 + v15;
      v13 -= 2;
    }
    while (v13);
    if (v1 == v10) {
      return v3 / v11;
    }
  }
  else
  {
    uint64_t v10 = 0;
    double v11 = 0.0;
  }
  unint64_t v16 = v1 - v10;
  uint64_t v17 = (double *)(a1 + 16 * v10 + 40);
  do
  {
    double v18 = *v17;
    v17 += 2;
    double v11 = v11 + v18;
    --v16;
  }
  while (v16);
  return v3 / v11;
}

void sub_10022A3C8(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v9 = a4 & 1;
  uint64_t v10 = sub_1000AFA94(&qword_100950BA8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  float64x2x2_t v19 = (char *)&v23 - v18;
  uint64_t v26 = 0;
  sub_1000AFA94(&qword_100950278);
  State.init(wrappedValue:)();
  *(_OWORD *)(a5 + 48) = v27;
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(unsigned char *)(a5 + 24) = v9;
  uint64_t v20 = type metadata accessor for Trainer();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
  id v21 = a1;
  id v24 = a2;
  id v23 = a3;
  sub_1005CBFB4((uint64_t)v21, (uint64_t)v12);
  AttributedString.init(_:)();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  if (qword_10094AF18 != -1) {
    swift_once();
  }
  *(void *)&long long v27 = qword_100964298;
  sub_1000AA6A0();
  swift_retain();
  AttributedString.subscript.setter();
  sub_10008DB18((uint64_t)v12, &qword_100950BA8);
  type metadata accessor for MindfulnessItemView();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
  State.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  sub_1005CCDAC();
  uint64_t v26 = Image.init(systemName:)();
  State.init(wrappedValue:)();

  long long v22 = v27;
  *(_OWORD *)(a5 + 32) = v22;
}

uint64_t sub_10022A6F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for TaskPriority();
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v57 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for MindfulnessItemView();
  uint64_t v53 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v54 = v4;
  uint64_t v55 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000AFA94(&qword_100950C68);
  __chkstk_darwin(v5 - 8);
  uint64_t v52 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)sub_1000AFA94(&qword_100950C70);
  __chkstk_darwin(v7);
  char v9 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  float64x2x2_t v19 = (char *)&v47 - v18;
  uint64_t v50 = sub_1000AFA94(&qword_100950C78);
  __chkstk_darwin(v50);
  uint64_t v51 = (uint64_t)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v48 = *(unsigned __int8 *)(v1 + 24);
  sub_1000AFA94(&qword_100950BB0);
  State.wrappedValue.getter();
  uint64_t v56 = v1;
  uint64_t v49 = v17;
  sub_1005CA8CC((uint64_t)v17);
  id v21 = self;
  MindfulnessSessionViewModel.endDate.getter();
  v22.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v47);
  if (qword_10094AF38 != -1) {
    swift_once();
  }
  id v23 = [v21 formattedListStringForDate:v22.super.isa font:qword_1009642B8];

  id v24 = [v23 string];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  *char v9 = swift_getKeyPath();
  sub_1000AFA94(&qword_10094C578);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = (char *)v9 + v7[15];
  *(_OWORD *)uint64_t v28 = xmmword_100756700;
  *((void *)v28 + 2) = 0;
  *((void *)v28 + 3) = 0;
  *((unsigned char *)v9 + v7[9]) = v48;
  char v29 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v29((char *)v9 + v7[10], v19, v13);
  char v30 = v49;
  v29((char *)v9 + v7[11], v49, v13);
  uint64_t v31 = (uint64_t *)((char *)v9 + v7[12]);
  *uint64_t v31 = v25;
  v31[1] = v27;
  *(uint64_t *)((char *)v9 + v7[13]) = 0;
  uint64_t v32 = v52;
  uint64_t v33 = v56;
  sub_10022AD70(v56, v52);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v14 + 8);
  v34(v30, v13);
  v34(v19, v13);
  sub_1000AEEC8(v32, (uint64_t)v9 + v7[14], &qword_100950C68);
  uint64_t v35 = v51;
  sub_1000AEEC8((uint64_t)v9, v51, &qword_100950C70);
  MindfulnessSessionViewModel.uuid.getter();
  uint64_t v36 = v55;
  sub_10022D868(v33, v55, (uint64_t (*)(void))type metadata accessor for MindfulnessItemView);
  unint64_t v37 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v38 = swift_allocObject();
  sub_10022D49C(v36, v38 + v37);
  uint64_t v39 = v57;
  static TaskPriority.userInitiated.getter();
  uint64_t v40 = sub_1000AFA94(&qword_100950C90);
  uint64_t v41 = v59;
  unsigned __int8 v42 = (char *)(v59 + *(int *)(v40 + 36));
  uint64_t v43 = type metadata accessor for _TaskModifier();
  uint64_t v44 = v58;
  uint64_t v45 = v60;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(&v42[*(int *)(v43 + 20)], v39, v60);
  *(void *)unsigned __int8 v42 = &unk_100950C88;
  *((void *)v42 + 1) = v38;
  sub_1000AEF2C(v35, v41, &qword_100950C78);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v45);
  return sub_10008DB18(v35, &qword_100950C78);
}

uint64_t sub_10022AD70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v43 = sub_1000AFA94(&qword_100950CA8);
  __chkstk_darwin(v43);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_1000AFA94(&qword_10094E460);
  __chkstk_darwin(v41);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v7);
  char v9 = (_OWORD *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = sub_1000AFA94(&qword_100950CB0);
  uint64_t v10 = __chkstk_darwin(v42);
  uint64_t v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = *(void **)a1;
  id v16 = *(id *)(*(void *)(a1 + 16) + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
  id v17 = v15;
  char v18 = sub_100719620();

  if ((v18 & 1) != 0
    && (v46 = *(_OWORD *)(a1 + 48), sub_1000AFA94(&qword_100950388), State.wrappedValue.getter(), (uint64_t v19 = v45) != 0))
  {
    uint64_t v20 = (char *)v9 + *(int *)(v7 + 20);
    uint64_t v21 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v22 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v20, v21, v22);
    __asm { FMOV            V0.2D, #4.0 }
    *char v9 = _Q0;
    sub_10022D868((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    uint64_t v28 = v42;
    *(_WORD *)&v6[*(int *)(v41 + 36)] = 256;
    sub_1000AEF2C((uint64_t)v6, (uint64_t)v12 + *(int *)(v28 + 36), &qword_10094E460);
    *uint64_t v12 = v19;
    swift_retain();
    sub_10008DB18((uint64_t)v6, &qword_10094E460);
    sub_10022D8D0((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    sub_1000AEEC8((uint64_t)v12, (uint64_t)v14, &qword_100950CB0);
    sub_1000AEF2C((uint64_t)v14, (uint64_t)v4, &qword_100950CB0);
    swift_storeEnumTagMultiPayload();
    sub_1000AFA94(&qword_100950CB8);
    sub_10022D7C8();
    sub_1000A132C(&qword_100950CC8, &qword_100950CB8);
    _ConditionalContent<>.init(storage:)();
    swift_release();
    return sub_10008DB18((uint64_t)v14, &qword_100950CB0);
  }
  else
  {
    uint64_t v30 = static Alignment.center.getter();
    uint64_t v32 = v31;
    sub_10022BAE8(a1, (uint64_t)&v46);
    uint64_t v33 = v47;
    char v34 = v49;
    uint64_t v35 = v50;
    char v36 = v51;
    long long v37 = v48;
    long long v38 = v52;
    long long v39 = v46;
    *(void *)uint64_t v4 = v30;
    *((void *)v4 + 1) = v32;
    *((_OWORD *)v4 + 1) = v39;
    *((void *)v4 + 4) = v33;
    *(_OWORD *)(v4 + 40) = v37;
    v4[56] = v34;
    *((void *)v4 + 8) = v35;
    v4[72] = v36;
    *((_OWORD *)v4 + 5) = v38;
    swift_storeEnumTagMultiPayload();
    sub_1000AFA94(&qword_100950CB8);
    sub_10022D7C8();
    sub_1000A132C(&qword_100950CC8, &qword_100950CB8);
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t sub_10022B1B4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10022B24C, v3, v2);
}

uint64_t sub_10022B24C()
{
  swift_release();
  sub_10022B2B4();
  sub_10022B710();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10022B2B4()
{
  uint64_t v1 = type metadata accessor for MindfulnessItemView();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = __chkstk_darwin(v1 - 8);
  uint64_t v5 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v7 = &v24[-v6];
  if (*(unsigned char *)(v0 + 24)) {
    double v8 = 48.0;
  }
  else {
    double v8 = 34.0;
  }
  sub_10022D868(v0, (uint64_t)&v24[-v6], (uint64_t (*)(void))type metadata accessor for MindfulnessItemView);
  sub_10022D868((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MindfulnessItemView);
  unint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v10 = swift_allocObject();
  sub_10022D49C((uint64_t)v7, v10 + v9);
  uint64_t v11 = (void *)MindfulnessSessionViewModel.sourceRevision.getter();
  id v12 = [v11 source];

  LODWORD(v11) = [v12 _hasFirstPartyBundleID];
  if (v11)
  {
    id v13 = sub_1005CD058();
    sub_1000A88A4();
    uint64_t v14 = static NSObject.== infix(_:_:)();
    if (v14)
    {
      if (v13)
      {
        __chkstk_darwin(v14);
        *(void *)&v24[-16] = v5;
        *(void *)&v24[-8] = v13;
        id v15 = v13;
        static Animation.default.getter();
        withAnimation<A>(_:_:)();
        swift_release();
      }
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_10022D6D0;
    *(void *)(v16 + 24) = v10;
    swift_retain();
    uint64_t v17 = MindfulnessSessionViewModel.sourceRevision.getter();
    id v18 = [(id)v17 source];

    LOBYTE(v17) = [v18 _isAppleWatch];
    if (v17)
    {
      id v19 = sub_1005CD128(v8);
      uint64_t v20 = self;
      char v29 = sub_10022D7A4;
      uint64_t v30 = v16;
      aBlock = _NSConcreteStackBlock;
      uint64_t v26 = 1107296256;
      uint64_t v27 = sub_100259288;
      uint64_t v28 = &unk_1008BC9A8;
      uint64_t v21 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v20 fetchWatchIconWithParameters:v19 completion:v21];
    }
    else
    {
      id v19 = sub_1005CD288(v8);
      uint64_t v22 = self;
      char v29 = sub_10022D7A4;
      uint64_t v30 = v16;
      aBlock = _NSConcreteStackBlock;
      uint64_t v26 = 1107296256;
      uint64_t v27 = sub_100259288;
      uint64_t v28 = &unk_1008BC980;
      uint64_t v21 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v22 fetchPhoneIconWithParameters:v19 completion:v21];
    }
    swift_release();
    _Block_release(v21);
    swift_release();
  }
  return sub_10022D8D0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MindfulnessItemView);
}

void sub_10022B710()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MindfulnessItemView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = dispatch thunk of MindfulnessSessionViewModel.sessionType.getter();
  if ((v7 & 1) != 0 || v6 != 3) {
    goto LABEL_18;
  }
  unint64_t v8 = MindfulnessSessionViewModel.mindfulnessSessions.getter();
  unint64_t v9 = v8;
  if (v8 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_5;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_17;
  }
LABEL_5:
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v10 = *(id *)(v9 + 32);
  }
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  id v12 = [v11 metadata];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v14 + 16) && (unint64_t v17 = sub_1000DA1C0(v15, v16), (v18 & 1) != 0))
    {
      sub_10008F484(*(void *)(v14 + 56) + 32 * v17, (uint64_t)&v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v36 + 1))
      {
        sub_10005C2B0(&v35, v37);
        *(void *)&long long v35 = 0;
        *((void *)&v35 + 1) = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)();
        long long v19 = v35;
        uint64_t v20 = *(void **)((char *)v1[2] + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
        sub_10022D868((uint64_t)v1, (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MindfulnessItemView);
        unint64_t v21 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
        uint64_t v22 = (char *)swift_allocObject();
        sub_10022D49C((uint64_t)v5, (uint64_t)&v22[v21]);
        id v23 = v20;
        sub_1004828F0(v19, *((uint64_t *)&v19 + 1), (void (*)(void))sub_10022D5EC, v22);

        swift_bridgeObjectRelease();
        swift_release();
        _s10FitnessApp24HistoryViewActionContextVwxx_0((uint64_t)v37);
        return;
      }
    }
    else
    {
      long long v35 = 0u;
      long long v36 = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    long long v35 = 0u;
    long long v36 = 0u;
  }

  sub_10008DB18((uint64_t)&v35, &qword_100955A00);
LABEL_18:
  id v24 = (char *)v1[2];
  uint64_t v25 = OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider;
  uint64_t v26 = *v1;
  id v27 = *(id *)&v24[OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider];
  id v28 = v26;
  char v29 = sub_100719620();

  if (v29)
  {
    uint64_t v30 = *(void **)&v24[v25];
    sub_10022D868((uint64_t)v1, (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MindfulnessItemView);
    unint64_t v31 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v32 = swift_allocObject();
    sub_10022D49C((uint64_t)v5, v32 + v31);
    id v33 = v28;
    char v34 = v30;
    sub_1001B22D0(v33, (void (*)(void))sub_10022D5D0, v32, v34);

    swift_release();
  }
}

void sub_10022BAE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000AFA94(&qword_100950CD0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Image.ResizingMode();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_1004A52F0();
  id v12 = [v11 gradientDarkColor];
  id v13 = [v11 gradientDarkColor];
  id v14 = (id)FIUICircularGradientImage();

  if (v14)
  {
    uint64_t v15 = Image.init(uiImage:)();

    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v33 = *(void *)(a1 + 32);
    uint64_t v34 = v16;
    sub_1000AFA94(&qword_100950CA0);
    State.wrappedValue.getter();
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
    Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    unint64_t v17 = (void *)MindfulnessSessionViewModel.sourceRevision.getter();
    id v18 = [v17 source];

    LODWORD(v17) = [v18 _hasFirstPartyBundleID];
    uint64_t v19 = type metadata accessor for Image.TemplateRenderingMode();
    uint64_t v20 = *(void *)(v19 - 8);
    unint64_t v21 = (unsigned int *)&enum case for Image.TemplateRenderingMode.template(_:);
    if (!v17) {
      unint64_t v21 = (unsigned int *)&enum case for Image.TemplateRenderingMode.original(_:);
    }
    (*(void (**)(char *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v6, *v21, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v6, 0, 1, v19);
    uint64_t v22 = Image.renderingMode(_:)();
    swift_release();
    sub_10008DB18((uint64_t)v6, &qword_100950CD0);
    id v23 = (void *)MindfulnessSessionViewModel.sourceRevision.getter();
    id v24 = [v23 source];

    unsigned int v25 = [v24 _hasFirstPartyBundleID];
    uint64_t v26 = 0;
    if (!v25) {
      goto LABEL_7;
    }
    if (objc_msgSend(self, "fiui_meditationTeal"))
    {
      uint64_t v26 = Color.init(uiColor:)();
LABEL_7:
      uint64_t KeyPath = swift_getKeyPath();
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      uint64_t v28 = v33;
      char v29 = v34;
      uint64_t v30 = v35;
      char v31 = v36;
      *(void *)a2 = v15;
      *(void *)(a2 + 8) = v22;
      *(void *)(a2 + 16) = KeyPath;
      *(void *)(a2 + 24) = v26;
      *(void *)(a2 + 32) = v28;
      *(unsigned char *)(a2 + 40) = v29;
      *(void *)(a2 + 48) = v30;
      *(unsigned char *)(a2 + 56) = v31;
      *(_OWORD *)(a2 + 64) = v37;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10022BEEC(void *a1)
{
  sub_1000A88A4();
  uint64_t result = static NSObject.== infix(_:_:)();
  if (result)
  {
    if (a1)
    {
      __chkstk_darwin(result);
      id v3 = a1;
      static Animation.default.getter();
      withAnimation<A>(_:_:)();

      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10022BFBC(uint64_t a1, void *a2)
{
  id v2 = a2;
  Image.init(uiImage:)();
  sub_1000AFA94(&qword_100950CA0);
  return State.wrappedValue.setter();
}

uint64_t sub_10022C01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_100950BA8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Trainer();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000A88A4();
  uint64_t result = static NSObject.== infix(_:_:)();
  if (result)
  {
    sub_1000AEF2C(a1, (uint64_t)v6, &qword_100950BA8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      return sub_10008DB18((uint64_t)v6, &qword_100950BA8);
    }
    else
    {
      uint64_t v12 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
      __chkstk_darwin(v12);
      *(void *)&v13[-16] = a2;
      *(void *)&v13[-8] = v10;
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      swift_release();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  return result;
}

uint64_t sub_10022C22C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_100950BA8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)v18 - v12;
  v18[0] = a1;
  uint64_t v14 = *a1;
  uint64_t v15 = type metadata accessor for Trainer();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v6, a2, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v6, 0, 1, v15);
  sub_1005CBFB4(v14, (uint64_t)v6);
  AttributedString.init(_:)();
  void v18[2] = swift_getKeyPath();
  swift_getKeyPath();
  if (qword_10094AF18 != -1) {
    swift_once();
  }
  v18[5] = qword_100964298;
  sub_1000AA6A0();
  swift_retain();
  AttributedString.subscript.setter();
  sub_10008DB18((uint64_t)v6, &qword_100950BA8);
  type metadata accessor for MindfulnessItemView();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  sub_1000AFA94(&qword_100950BB0);
  State.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

void sub_10022C4EC(void *a1, void **a2)
{
  uint64_t v4 = type metadata accessor for MindfulnessItemView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4 - 8);
  if (a1)
  {
    __chkstk_darwin(v7);
    *(void *)&v17[-16] = a2;
    *(void *)&v17[-8] = a1;
    id v8 = a1;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
    id v9 = *(id *)((char *)a2[2] + OBJC_IVAR___CHFitnessAppContext_seymourCatalogItemDataProvider);
    CGSize.init(uniform:)();
    sub_10022D868((uint64_t)a2, (uint64_t)&v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for MindfulnessItemView);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v11 = swift_allocObject();
    sub_10022D49C((uint64_t)&v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10);
    sub_100485D1C(v8, (uint64_t)sub_10022D698, v11);
    swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v12 = (void *)HKLogActivity;
    sub_1000AFA94((uint64_t *)&unk_1009546D0);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_10074E640;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_1000AA64C();
    *(void *)(v13 + 32) = 0xD000000000000010;
    *(void *)(v13 + 40) = 0x80000001007BA850;
    uint64_t v14 = *a2;
    *(void *)(v13 + 96) = type metadata accessor for MindfulnessSessionViewModel();
    *(void *)(v13 + 104) = sub_10022DA0C((unint64_t *)&qword_100950C98, (void (*)(uint64_t))&type metadata accessor for MindfulnessSessionViewModel);
    *(void *)(v13 + 72) = v14;
    id v15 = v12;
    id v16 = v14;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10022C820(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AttributeContainer();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v13 - v9;
  id v11 = [*(id *)(a2 + OBJC_IVAR___CHCatalogItemViewModel_title) string];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  type metadata accessor for MindfulnessItemView();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  sub_1000AFA94(&qword_100950BB0);
  State.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_10022CA00(uint64_t result)
{
  if (result)
  {
    id v1 = (id)__chkstk_darwin(result);
    static Animation.default.getter();
    withAnimation<A>(_:_:)();

    return swift_release();
  }
  return result;
}

uint64_t sub_10022CAB0(uint64_t a1, void *a2)
{
  id v2 = a2;
  Image.init(uiImage:)();
  sub_1000AFA94(&qword_100950388);
  return State.wrappedValue.setter();
}

uint64_t sub_10022CB20()
{
  return 8;
}

uint64_t sub_10022CB2C()
{
  return swift_release();
}

uint64_t sub_10022CB34(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_10022CB48(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for MindfulnessItemView()
{
  uint64_t result = qword_100950C10;
  if (!qword_100950C10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_10022CBA0(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v7 = a2[1];
    uint64_t v6 = a2[2];
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v6;
    a1[24] = *((unsigned char *)a2 + 24);
    id v8 = a2[5];
    *((void *)a1 + 4) = a2[4];
    *((void *)a1 + 5) = v8;
    uint64_t v9 = a2[7];
    uint64_t v10 = *(int *)(a3 + 40);
    uint64_t v19 = &a1[v10];
    uint64_t v11 = (uint64_t)a2 + v10;
    *((void *)a1 + 6) = a2[6];
    *((void *)a1 + 7) = v9;
    uint64_t v12 = type metadata accessor for AttributedString();
    id v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    uint64_t v13 = v4;
    uint64_t v14 = v7;
    id v15 = v6;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v18(v19, v11, v12);
    uint64_t v16 = sub_1000AFA94(&qword_100950BB0);
    *(void *)&v19[*(int *)(v16 + 28)] = *(void *)(v11 + *(int *)(v16 + 28));
  }
  swift_retain();
  return v5;
}

uint64_t sub_10022CCFC(id *a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for AttributedString();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_1000AFA94(&qword_100950BB0);

  return swift_release();
}

uint64_t sub_10022CDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v9;
  uint64_t v10 = a2 + v9;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v11 = type metadata accessor for AttributedString();
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  id v12 = v4;
  id v13 = v5;
  id v14 = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v17(v18, v10, v11);
  uint64_t v15 = sub_1000AFA94(&qword_100950BB0);
  *(void *)(v18 + *(int *)(v15 + 28)) = *(void *)(v10 + *(int *)(v15 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_10022CED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  id v12 = *(void **)(a2 + 16);
  id v13 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  id v14 = v12;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  uint64_t v15 = *(int *)(a3 + 40);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = sub_1000AFA94(&qword_100950BB0);
  *(void *)(v16 + *(int *)(v19 + 28)) = *(void *)(v17 + *(int *)(v19 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10022D018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  uint64_t v9 = sub_1000AFA94(&qword_100950BB0);
  *(void *)(v6 + *(int *)(v9 + 28)) = *(void *)(v7 + *(int *)(v9 + 28));
  return a1;
}

uint64_t sub_10022D0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = sub_1000AFA94(&qword_100950BB0);
  *(void *)(v10 + *(int *)(v13 + 28)) = *(void *)(v11 + *(int *)(v13 + 28));
  swift_release();
  return a1;
}

uint64_t sub_10022D1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10022D1EC);
}

uint64_t sub_10022D1EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000AFA94(&qword_100950BB0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10022D2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022D2B4);
}

void *sub_10022D2B4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000AFA94(&qword_100950BB0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 40);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10022D360()
{
  sub_10022D41C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10022D41C()
{
  if (!qword_100950C20)
  {
    type metadata accessor for AttributedString();
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100950C20);
    }
  }
}

uint64_t sub_10022D474()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10022D49C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MindfulnessItemView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022D500()
{
  uint64_t v2 = *(void *)(type metadata accessor for MindfulnessItemView() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10005DB5C;
  return sub_10022B1B4(v3);
}

uint64_t sub_10022D5D0(uint64_t a1)
{
  return sub_10022D6E8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022C4EC);
}

uint64_t sub_10022D5EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MindfulnessItemView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10022C01C(a1, v4);
}

uint64_t sub_10022D65C()
{
  return sub_10022C22C(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10022D678()
{
  return sub_10022C820(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10022D698(uint64_t a1)
{
  return sub_10022D6E8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022CA00);
}

uint64_t sub_10022D6B0()
{
  return sub_10022CAB0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10022D6D0(uint64_t a1)
{
  return sub_10022D6E8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022BEEC);
}

uint64_t sub_10022D6E8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for MindfulnessItemView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_10022D76C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10022D7A4(uint64_t a1, uint64_t a2)
{
  return sub_1005CA8A4(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_10022D7AC()
{
  return sub_10022BFBC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_10022D7C8()
{
  unint64_t result = qword_100950CC0;
  if (!qword_100950CC0)
  {
    sub_1000A1370(&qword_100950CB0);
    sub_1000A132C(&qword_1009509E8, &qword_10094E460);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950CC0);
  }
  return result;
}

uint64_t sub_10022D868(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10022D8D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10022D93C()
{
  unint64_t result = qword_100950CD8;
  if (!qword_100950CD8)
  {
    sub_1000A1370(&qword_100950C90);
    sub_1000A132C(&qword_100950CE0, &qword_100950C78);
    sub_10022DA0C((unint64_t *)&qword_100950478, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950CD8);
  }
  return result;
}

uint64_t sub_10022DA0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10022DA5C()
{
  return sub_10022D7AC();
}

uint64_t sub_10022DA74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v22 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = (void *)a2[5];
    uint64_t v9 = (void *)a2[6];
    *(void *)(v4 + 40) = v8;
    *(void *)(v4 + 48) = v9;
    uint64_t v11 = (void *)a2[7];
    uint64_t v10 = (void *)a2[8];
    *(void *)(v4 + 56) = v11;
    char v12 = *((unsigned char *)a2 + 72);
    id v13 = v8;
    id v14 = v9;
    id v15 = v11;
    sub_1001AEDAC(v10, v12);
    *(void *)(v4 + 64) = v10;
    *(unsigned char *)(v4 + 72) = v12;
    uint64_t v16 = *(int *)(a3 + 36);
    uint64_t v17 = (char *)(v4 + v16);
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for AttributedString();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v23 = sub_1000AFA94(&qword_100950CF0);
    *(void *)&v17[*(int *)(v23 + 28)] = *(void *)&v18[*(int *)(v23 + 28)];
  }
  swift_retain();
  return v4;
}

uint64_t sub_10022DC68(uint64_t a1, uint64_t a2)
{
  _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);

  sub_1001AEDC8(*(id *)(a1 + 64), *(unsigned char *)(a1 + 72));
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_1000AFA94(&qword_100950CF0);

  return swift_release();
}

uint64_t sub_10022DD5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  long long v7 = *(void **)(a2 + 40);
  uint64_t v8 = *(void **)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  uint64_t v10 = *(void **)(a2 + 56);
  uint64_t v9 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = v10;
  char v11 = *(unsigned char *)(a2 + 72);
  id v12 = v7;
  id v13 = v8;
  id v14 = v10;
  sub_1001AEDAC(v9, v11);
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = v11;
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for AttributedString();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v21 = sub_1000AFA94(&qword_100950CF0);
  *(void *)&v16[*(int *)(v21 + 28)] = *(void *)&v17[*(int *)(v21 + 28)];
  swift_retain();
  return a1;
}

uint64_t sub_10022DEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10009EDF0((uint64_t *)a1, (uint64_t *)a2);
  long long v6 = *(void **)(a2 + 40);
  long long v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v6;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 48);
  uint64_t v10 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v9;
  id v11 = v9;

  id v12 = *(void **)(a2 + 56);
  id v13 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v12;
  id v14 = v12;

  uint64_t v15 = *(void **)(a2 + 64);
  char v16 = *(unsigned char *)(a2 + 72);
  sub_1001AEDAC(v15, v16);
  uint64_t v17 = *(void **)(a1 + 64);
  char v18 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v15;
  *(unsigned char *)(a1 + 72) = v16;
  sub_1001AEDC8(v17, v18);
  uint64_t v19 = *(int *)(a3 + 36);
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for AttributedString();
  uint64_t v23 = *(void *)(v22 - 8);
  id v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v27 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_7:
  uint64_t v28 = sub_1000AFA94(&qword_100950CF0);
  *(void *)&v20[*(int *)(v28 + 28)] = *(void *)&v21[*(int *)(v28 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10022E104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(int *)(a3 + 36);
  long long v7 = (char *)(a2 + v6);
  id v8 = (char *)(a1 + v6);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    uint64_t v11 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
    memcpy(v8, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v8, v7, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  uint64_t v12 = sub_1000AFA94(&qword_100950CF0);
  *(void *)&v8[*(int *)(v12 + 28)] = *(void *)&v7[*(int *)(v12 + 28)];
  return a1;
}

uint64_t sub_10022E250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s10FitnessApp24HistoryViewActionContextVwxx_0(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  id v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;

  uint64_t v9 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  uint64_t v10 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  char v11 = *(unsigned char *)(a2 + 72);
  uint64_t v12 = *(void **)(a1 + 64);
  char v13 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v11;
  sub_1001AEDC8(v12, v13);
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = (char *)(a1 + v14);
  char v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for AttributedString();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  uint64_t v23 = sub_1000AFA94(&qword_100950CF0);
  *(void *)&v15[*(int *)(v23 + 28)] = *(void *)&v16[*(int *)(v23 + 28)];
  swift_release();
  return a1;
}

uint64_t sub_10022E440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10022E454);
}

uint64_t sub_10022E454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000AFA94(&qword_100950CF0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10022E508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022E51C);
}

uint64_t sub_10022E51C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000AFA94(&qword_100950CF0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for LoadHistoryItemView()
{
  uint64_t result = qword_100950D50;
  if (!qword_100950D50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10022E614()
{
  sub_10022E6C8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10022E6C8()
{
  if (!qword_100950D60)
  {
    sub_1000A1370((uint64_t *)&unk_10095BFD0);
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100950D60);
    }
  }
}

uint64_t sub_10022E724()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_10022E740()
{
  id result = [self preferredFontForTextStyle:UIFontTextStyleBody];
  qword_100950CE8 = (uint64_t)result;
  return result;
}

void *sub_10022E788(void *a1)
{
  uint64_t v5 = sub_1000AFA94(&qword_10094F480);
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v56 = (uint64_t)&v47 - v10;
  __chkstk_darwin(v9);
  uint64_t v47 = (uint64_t)&v47 - v11;
  uint64_t v54 = type metadata accessor for EffortUtilities.WorkoutAndActivityKey();
  uint64_t v12 = *(void (***)(uint64_t, uint64_t))(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([a1 workoutActivityType] == (id)82)
  {
    uint64_t v8 = (char *)[a1 workoutActivities];
    sub_10007E2D8(0, (unint64_t *)&qword_100955600);
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0) {
        uint64_t v8 = (char *)v14;
      }
      else {
        uint64_t v8 = (char *)(v14 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v16)
      {
LABEL_4:
        if (v16 >= 1)
        {
          uint64_t v17 = 0;
          unint64_t v18 = v14 & 0xC000000000000001;
          long long v52 = v12 + 1;
          uint64_t v3 = _swiftEmptyArrayStorage;
          int64_t v50 = v1;
          char v51 = a1;
          unint64_t v48 = v14 & 0xC000000000000001;
          uint64_t v49 = v16;
          while (1)
          {
            if (v18) {
              id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v19 = *(id *)(v14 + 8 * v17 + 32);
            }
            int v20 = v19;
            id v21 = [v19 workoutConfiguration];
            id v22 = [v21 activityType];

            if (v22 != (id)83)
            {
              uint64_t v23 = v14;
              id v24 = *(void **)(v1 + 64);
              char v25 = *(unsigned char *)(v1 + 72);
              sub_1001AEDAC(v24, v25);
              int v26 = (char *)sub_1004E75C0(v24, v25);
              sub_1001AEDC8(v24, v25);
              id v27 = v20;
              id v28 = a1;
              uint64_t v29 = (uint64_t)v53;
              EffortUtilities.WorkoutAndActivityKey.init(workout:activity:)();
              swift_getKeyPath();
              uint64_t v57 = v26;
              sub_1000858F0(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
              ObservationRegistrar.access<A, B>(_:keyPath:)();
              swift_release();
              uint64_t v30 = &v26[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities];
              swift_beginAccess();
              uint64_t v31 = *(void *)v30;
              if (!*(void *)(v31 + 16)) {
                goto LABEL_21;
              }
              swift_bridgeObjectRetain();
              unint64_t v32 = sub_1005299A0(v29);
              if ((v33 & 1) == 0)
              {
                swift_bridgeObjectRelease();
LABEL_21:
                (*v52)(v29, v54);

LABEL_22:
                uint64_t v39 = type metadata accessor for AppleExertionScale();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v56, 1, 1, v39);
                uint64_t v14 = v23;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v3 = (void *)sub_1001E7348(0, v3[2] + 1, 1, (unint64_t)v3);
                }
                uint64_t v16 = v49;
                int64_t v1 = v50;
                unint64_t v18 = v48;
                unint64_t v41 = v3[2];
                unint64_t v40 = v3[3];
                if (v41 >= v40 >> 1) {
                  uint64_t v3 = (void *)sub_1001E7348(v40 > 1, v41 + 1, 1, (unint64_t)v3);
                }
                a1 = v51;
                v3[2] = v41 + 1;
                sub_1000AEEC8(v56, (uint64_t)v3+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v41, &qword_10094F480);
                goto LABEL_7;
              }
              uint64_t v34 = *(void **)(*(void *)(v31 + 56) + 8 * v32);
              id v35 = v34;
              swift_bridgeObjectRelease();
              (*v52)(v29, v54);

              if (!v34) {
                goto LABEL_22;
              }
              id v36 = v35;
              AppleExertionScale.init(quantity:)();
              uint64_t v14 = v23;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v3 = (void *)sub_1001E7348(0, v3[2] + 1, 1, (unint64_t)v3);
              }
              unint64_t v18 = v48;
              uint64_t v16 = v49;
              unint64_t v38 = v3[2];
              unint64_t v37 = v3[3];
              a1 = v51;
              if (v38 >= v37 >> 1) {
                uint64_t v3 = (void *)sub_1001E7348(v37 > 1, v38 + 1, 1, (unint64_t)v3);
              }
              v3[2] = v38 + 1;
              sub_1000AEEC8(v47, (uint64_t)v3+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v38, &qword_10094F480);

              int64_t v1 = v50;
            }
LABEL_7:
            ++v17;

            if (v16 == v17)
            {
              swift_bridgeObjectRelease();
              return v3;
            }
          }
        }
        __break(1u);
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v42 = *(void **)(v1 + 64);
  char v43 = *(unsigned char *)(v1 + 72);
  sub_1001AEDAC(v42, v43);
  id v44 = sub_1004E75C0(v42, v43);
  sub_1001AEDC8(v42, v43);
  uint64_t v45 = sub_10021D6C0(a1, 0);

  if (!v45) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v45;
  AppleExertionScale.init(quantity:)();
  uint64_t v3 = (void *)sub_1001E7348(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v2 = v3[2];
  unint64_t v15 = v3[3];
  int64_t v1 = v2 + 1;
  if (v2 >= v15 >> 1) {
LABEL_38:
  }
    uint64_t v3 = (void *)sub_1001E7348(v15 > 1, v1, 1, (unint64_t)v3);
  v3[2] = v1;
  sub_1000AEEC8((uint64_t)v8, (uint64_t)v3+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v2, &qword_10094F480);

  return v3;
}

void *sub_10022EE40(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94(&qword_10094F480);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v49 = (uint64_t)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v41 = (uint64_t)v38 - v5;
  uint64_t v44 = type metadata accessor for EnvironmentValues();
  uint64_t v6 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  char v43 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for EffortUtilities.WorkoutAndActivityKey();
  uint64_t v8 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + *(int *)(type metadata accessor for FitnessPlusStackViewModel() + 20));
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  uint64_t v42 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v45 = (void (**)(char *, uint64_t))(v8 + 8);
  v38[1] = v11;
  swift_bridgeObjectRetain();
  uint64_t v14 = _swiftEmptyArrayStorage;
  *(void *)&long long v15 = 136315138;
  long long v40 = v15;
  unint64_t v39 = 0x80000001007BA960;
  v38[2] = (char *)&type metadata for Any + 8;
  do
  {
    sub_10008E75C(v13, (uint64_t)v51);
    sub_1000AFA94((uint64_t *)&unk_100955630);
    sub_10007E2D8(0, (unint64_t *)&qword_10095E770);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v16 = v50;
    uint64_t v17 = *(void **)(v48 + 64);
    if (*(unsigned char *)(v48 + 72) == 1)
    {
      v51[0] = *(void *)(v48 + 64);
      sub_1001AEDAC(v17, 1);
    }
    else
    {
      sub_1001AEDAC(v17, 0);
      swift_retain();
      os_log_type_t v18 = static os_log_type_t.fault.getter();
      id v19 = static Log.runtimeIssuesLog.getter();
      os_log_type_t v20 = v18;
      if (os_log_type_enabled(v19, v18))
      {
        uint64_t v21 = swift_slowAlloc();
        v51[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = v40;
        *(void *)(v21 + 4) = sub_10008F1F4(0xD000000000000013, v39, v51);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      id v22 = v43;
      EnvironmentValues.init()();
      swift_getAtKeyPath();
      sub_1001AEDC8(v17, 0);
      (*v42)(v22, v44);
      sub_1001AEDC8(v17, 0);
    }
    uint64_t v23 = (char *)v51[0];
    id v24 = v16;
    EffortUtilities.WorkoutAndActivityKey.init(workout:activity:)();
    swift_getKeyPath();
    v51[0] = (uint64_t)v23;
    sub_1000858F0(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    char v25 = &v23[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutsWithEffortQuantities];
    swift_beginAccess();
    uint64_t v26 = *(void *)v25;
    if (!*(void *)(v26 + 16)) {
      goto LABEL_20;
    }
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1005299A0((uint64_t)v10);
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_20:
      (*v45)(v10, v46);

      goto LABEL_21;
    }
    uint64_t v29 = *(void **)(*(void *)(v26 + 56) + 8 * v27);
    id v30 = v29;
    swift_bridgeObjectRelease();
    (*v45)(v10, v46);

    if (v29)
    {
      id v31 = v30;
      AppleExertionScale.init(quantity:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = (void *)sub_1001E7348(0, v14[2] + 1, 1, (unint64_t)v14);
      }
      unint64_t v33 = v14[2];
      unint64_t v32 = v14[3];
      if (v33 >= v32 >> 1) {
        uint64_t v14 = (void *)sub_1001E7348(v32 > 1, v33 + 1, 1, (unint64_t)v14);
      }
      v14[2] = v33 + 1;
      sub_1000AEEC8(v41, (uint64_t)v14+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v33, &qword_10094F480);

      goto LABEL_4;
    }
LABEL_21:
    uint64_t v34 = type metadata accessor for AppleExertionScale();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v49, 1, 1, v34);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = (void *)sub_1001E7348(0, v14[2] + 1, 1, (unint64_t)v14);
    }
    unint64_t v36 = v14[2];
    unint64_t v35 = v14[3];
    if (v36 >= v35 >> 1) {
      uint64_t v14 = (void *)sub_1001E7348(v35 > 1, v36 + 1, 1, (unint64_t)v14);
    }
    v14[2] = v36 + 1;
    sub_1000AEEC8(v49, (uint64_t)v14+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v36, &qword_10094F480);

LABEL_4:
    v13 += 40;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10022F52C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v168 = a1;
  uint64_t v166 = sub_1000AFA94(&qword_100950DA0);
  uint64_t v3 = __chkstk_darwin(v166);
  uint64_t v139 = (uint64_t)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v140 = (uint64_t)&v133 - v5;
  uint64_t v6 = sub_1000AFA94(&qword_100950DA8);
  __chkstk_darwin(v6 - 8);
  uint64_t v142 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for FitnessPlusStackViewModel();
  uint64_t v155 = *(BOOL **)(v143 - 8);
  uint64_t v8 = __chkstk_darwin(v143);
  uint64_t v137 = v9;
  uint64_t v138 = (uint64_t)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v153 = (char *)&v133 - v10;
  uint64_t v163 = sub_1000AFA94(&qword_100950DB0);
  __chkstk_darwin(v163);
  uint64_t v164 = (uint64_t)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000AFA94(&qword_100950DB8);
  __chkstk_darwin(v12 - 8);
  id v165 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t HistoryItemView = type metadata accessor for LoadHistoryItemView();
  uint64_t v160 = *(void *)(HistoryItemView - 8);
  __chkstk_darwin(HistoryItemView);
  uint64_t v161 = v15;
  uint64_t v162 = (uint64_t)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AppEntityVisualState();
  uint64_t v151 = *(void *)(v16 - 8);
  uint64_t v152 = v16;
  __chkstk_darwin(v16);
  id v150 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for WorkoutEffort();
  uint64_t v157 = *(void *)(v18 - 8);
  uint64_t v158 = v18;
  __chkstk_darwin(v18);
  uint64_t v156 = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  char v25 = (char *)&v133 - v24;
  uint64_t v26 = type metadata accessor for AttributedString();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  id v154 = (char *)&v133 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  id v170 = (char *)&v133 - v31;
  __chkstk_darwin(v30);
  Class v169 = (char *)&v133 - v32;
  unint64_t v33 = (int *)type metadata accessor for WorkloadListItemStack();
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v136 = (uint64_t)&v133 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  unint64_t v38 = (BOOL *)&v133 - v37;
  __chkstk_darwin(v36);
  uint64_t v144 = (uint64_t)&v133 - v39;
  uint64_t v40 = sub_1000AFA94(&qword_100950DC0);
  uint64_t v147 = *(void *)(v40 - 8);
  uint64_t v148 = v40;
  __chkstk_darwin(v40);
  uint64_t v146 = (char *)&v133 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = sub_1000AFA94(&qword_100950DC8);
  uint64_t v42 = __chkstk_darwin(v159);
  uint64_t v145 = (char *)&v133 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  uint64_t v149 = (uint64_t)&v133 - v44;
  uint64_t v45 = v2;
  sub_10008E75C(v2, (uint64_t)v172);
  sub_1000AFA94((uint64_t *)&unk_100955630);
  sub_10007E2D8(0, (unint64_t *)&qword_10095E770);
  int v46 = swift_dynamicCast();
  uint64_t v167 = v26;
  if (v46)
  {
    uint64_t v155 = v38;
    uint64_t v47 = *(char **)&v171[0];
    id v48 = [*(id *)&v171[0] workoutActivityType];
    sub_1000AFA94(&qword_100950CF0);
    State.wrappedValue.getter();
    int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26);
    uint64_t v134 = v27;
    uint64_t v135 = v33;
    if (v49 == 1)
    {
      AttributedString.init()();
      sub_10008DB18((uint64_t)v25, (uint64_t *)&unk_10095BFD0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v169, v25, v26);
    }
    BOOL v56 = v48 == (id)82;
    id v154 = (char *)sub_10022E788(v47);
    uint64_t v57 = *(void **)(v2 + 40);
    uint64_t v153 = v47;
    id v58 = [v57 formattedDurationForWorkout:v47 workoutActivity:0 context:@"WorkoutsListDisplayContext"];
    AttributedString.init(_:)();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v60 = v2;
    *(&v133 - 2) = __chkstk_darwin(KeyPath);
    swift_getKeyPath();
    static Font.body.getter();
    static Font.Weight.medium.getter();
    uint64_t v61 = Font.weight(_:)();
    swift_release();
    *(void *)&v172[0] = v61;
    sub_1000AA6A0();
    AttributedString.subscript.setter();

    id v62 = [*(id *)(v2 + 40) formattedDateForWorkout:v47 context:@"WorkoutsListDisplayContext"];
    id v63 = [v62 string];

    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v142 = v65;
    uint64_t v143 = v64;

    uint64_t v141 = v60;
    uint64_t v66 = *(void **)(v60 + 64);
    LOBYTE(v63) = *(unsigned char *)(v60 + 72);
    sub_1001AEDAC(v66, (char)v63);
    uint64_t v67 = (unsigned __int8 *)sub_1004E75C0(v66, (char)v63);
    sub_1001AEDC8(v66, (char)v63);
    swift_getKeyPath();
    *(void *)&v172[0] = v67;
    sub_1000858F0(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LODWORD(v140) = v67[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated];

    uint64_t v68 = v135;
    uint64_t v69 = v155;
    uint64_t v70 = (uint64_t *)&v155[v135[11]];
    *uint64_t v70 = swift_getKeyPath();
    sub_1000AFA94(&qword_10094C578);
    swift_storeEnumTagMultiPayload();
    *uint64_t v69 = v56;
    uint64_t v71 = v134;
    uint64_t v72 = *(void (**)(BOOL *, char *, uint64_t))(v134 + 16);
    uint64_t v73 = v167;
    v72(&v69[v68[5]], v169, v167);
    *(void *)&v69[v68[6]] = v154;
    uint64_t v74 = v170;
    v72(&v69[v68[7]], v170, v73);
    uint64_t v75 = (uint64_t *)&v69[v68[8]];
    uint64_t v76 = v142;
    *uint64_t v75 = v143;
    v75[1] = (uint64_t)v76;
    v69[v68[9]] = (v140 & 1) == 0;
    swift_bridgeObjectRetain();
    uint64_t v77 = v156;
    WorkoutEffort.init(efforts:isGroupWorkout:)();
    uint64_t v78 = *(void (**)(char *, uint64_t))(v71 + 8);
    v78(v74, v73);
    v78(v169, v73);
    (*(void (**)(BOOL *, char *, uint64_t))(v157 + 32))(&v69[v68[10]], v77, v158);
    uint64_t v79 = v144;
    sub_1002318A8((uint64_t)v69, v144, (uint64_t (*)(void))type metadata accessor for WorkloadListItemStack);
    uint64_t v80 = v141;
    uint64_t v81 = *(void **)(v141 + 40);
    uint64_t v82 = v153;
    sub_10020F97C(v82, v81, v171);
    *(void *)&v172[0] = _swiftEmptyArrayStorage;
    sub_1000858F0((unint64_t *)&qword_10094C758, (void (*)(uint64_t))&type metadata accessor for AppEntityVisualState);
    sub_1000AFA94((uint64_t *)&unk_10096AA80);
    sub_1001B5C10();
    uint64_t v83 = v150;
    uint64_t v84 = v152;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    sub_1000858F0(&qword_100950DE0, (void (*)(uint64_t))type metadata accessor for WorkloadListItemStack);
    sub_1001B5C6C();
    uint64_t v85 = v146;
    View.appEntity<A>(_:state:)();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v83, v84);
    v172[12] = v171[12];
    v172[13] = v171[13];
    v172[14] = v171[14];
    v172[15] = v171[15];
    v172[8] = v171[8];
    v172[9] = v171[9];
    v172[10] = v171[10];
    v172[11] = v171[11];
    v172[4] = v171[4];
    v172[5] = v171[5];
    v172[6] = v171[6];
    v172[7] = v171[7];
    v172[0] = v171[0];
    v172[1] = v171[1];
    v172[2] = v171[2];
    v172[3] = v171[3];
    sub_1001B5CC0((uint64_t)v172);
    sub_100231BE8(v79, (uint64_t (*)(void))type metadata accessor for WorkloadListItemStack);
    uint64_t v86 = v162;
    sub_1002319DC(v80, v162, (uint64_t (*)(void))type metadata accessor for LoadHistoryItemView);
    unint64_t v87 = (*(unsigned __int8 *)(v160 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
    unint64_t v88 = (v161 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v89 = swift_allocObject();
    sub_1002318A8(v86, v89 + v87, (uint64_t (*)(void))type metadata accessor for LoadHistoryItemView);
    *(void *)(v89 + v88) = v82;
    uint64_t v91 = v147;
    uint64_t v90 = v148;
    uint64_t v92 = (uint64_t)v145;
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v145, v85, v148);
    uint64_t v93 = (void (**)())(v92 + *(int *)(v159 + 36));
    *uint64_t v93 = sub_100231E10;
    v93[1] = (void (*)())v89;
    v93[2] = 0;
    v93[3] = 0;
    uint64_t v94 = *(void (**)(char *, uint64_t))(v91 + 8);
    uint64_t v95 = v82;
    v94(v85, v90);
    uint64_t v96 = v149;
    sub_1000AEEC8(v92, v149, &qword_100950DC8);
    sub_1000AEF2C(v96, v164, &qword_100950DC8);
    swift_storeEnumTagMultiPayload();
    sub_100231A44();
    sub_100231B3C();
    uint64_t v97 = (uint64_t)v165;
    _ConditionalContent<>.init(storage:)();

    sub_10008DB18(v96, &qword_100950DC8);
  }
  else
  {
    sub_10008E75C(v2, (uint64_t)v172);
    uint64_t v50 = (uint64_t)v142;
    uint64_t v51 = v143;
    int v52 = swift_dynamicCast();
    uint64_t v53 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v155 + 7);
    if (!v52)
    {
      v53(v50, 1, 1, v51);
      sub_10008DB18(v50, &qword_100950DA8);
      uint64_t v98 = sub_1000AFA94(&qword_100950DD0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v168, 1, 1, v98);
    }
    v53(v50, 0, 1, v51);
    uint64_t v54 = (uint64_t)v153;
    sub_1002318A8(v50, (uint64_t)v153, (uint64_t (*)(void))type metadata accessor for FitnessPlusStackViewModel);
    sub_1000AFA94(&qword_100950CF0);
    State.wrappedValue.getter();
    uint64_t v55 = v167;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v23, 1, v167) == 1)
    {
      AttributedString.init()();
      sub_10008DB18((uint64_t)v23, (uint64_t *)&unk_10095BFD0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v154, v23, v55);
    }
    uint64_t v100 = v45;
    Class v169 = (char *)sub_10022EE40(v54);
    sub_100475CC4();
    AttributedString.init(_:)();
    uint64_t v101 = self;
    v102.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (qword_10094AC48 != -1) {
      swift_once();
    }
    id v103 = [v101 formattedListStringForDate:v102.super.isa font:qword_10095D848];

    id v104 = [v103 string];
    uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v151 = v106;
    uint64_t v152 = v105;

    id v107 = *(void **)(v45 + 64);
    char v108 = *(unsigned char *)(v45 + 72);
    sub_1001AEDAC(*(id *)(v100 + 64), *(unsigned char *)(v100 + 72));
    id v109 = (unsigned __int8 *)sub_1004E75C0(v107, v108);
    sub_1001AEDC8(v107, v108);
    swift_getKeyPath();
    *(void *)&v172[0] = v109;
    sub_1000858F0(&qword_10094D010, (void (*)(uint64_t))type metadata accessor for BalanceDataProvider);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LODWORD(v150) = v109[OBJC_IVAR____TtC10FitnessApp19BalanceDataProvider__workoutEffortCacheIsPopulated];

    uint64_t v110 = (uint64_t *)&v38[v33[11]];
    *uint64_t v110 = swift_getKeyPath();
    sub_1000AFA94(&qword_10094C578);
    swift_storeEnumTagMultiPayload();
    *unint64_t v38 = 1;
    uint64_t v111 = &v38[v33[5]];
    uint64_t v112 = v27;
    long long v113 = *(void (**)(BOOL *, char *, uint64_t))(v27 + 16);
    uint64_t v141 = v100;
    uint64_t v114 = v167;
    v113(v111, v154, v167);
    *(void *)&v38[v33[6]] = v169;
    uint64_t v115 = &v38[v33[7]];
    uint64_t v116 = (uint64_t)v38;
    Class v117 = v170;
    v113(v115, v170, v114);
    id v118 = (uint64_t *)(v116 + v33[8]);
    uint64_t v119 = v151;
    uint64_t *v118 = v152;
    v118[1] = v119;
    *(unsigned char *)(v116 + v33[9]) = (v150 & 1) == 0;
    swift_bridgeObjectRetain();
    uint64_t v120 = v156;
    WorkoutEffort.init(efforts:isGroupWorkout:)();
    id v121 = *(void (**)(char *, uint64_t))(v112 + 8);
    v121(v117, v114);
    v121(v154, v114);
    (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))(v116 + v33[10], v120, v158);
    uint64_t v122 = v136;
    sub_1002318A8(v116, v136, (uint64_t (*)(void))type metadata accessor for WorkloadListItemStack);
    uint64_t v123 = v162;
    sub_1002319DC(v141, v162, (uint64_t (*)(void))type metadata accessor for LoadHistoryItemView);
    uint64_t v124 = (uint64_t)v153;
    uint64_t v125 = v138;
    sub_1002319DC((uint64_t)v153, v138, (uint64_t (*)(void))type metadata accessor for FitnessPlusStackViewModel);
    unint64_t v126 = (*(unsigned __int8 *)(v160 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
    unint64_t v127 = (v161 + v155[80] + v126) & ~(unint64_t)v155[80];
    uint64_t v128 = swift_allocObject();
    sub_1002318A8(v123, v128 + v126, (uint64_t (*)(void))type metadata accessor for LoadHistoryItemView);
    sub_1002318A8(v125, v128 + v127, (uint64_t (*)(void))type metadata accessor for FitnessPlusStackViewModel);
    uint64_t v129 = v139;
    sub_1002319DC(v122, v139, (uint64_t (*)(void))type metadata accessor for WorkloadListItemStack);
    int v130 = (uint64_t (**)())(v129 + *(int *)(v166 + 36));
    *int v130 = sub_100231910;
    v130[1] = (uint64_t (*)())v128;
    v130[2] = 0;
    v130[3] = 0;
    sub_100231BE8(v122, (uint64_t (*)(void))type metadata accessor for WorkloadListItemStack);
    uint64_t v131 = v140;
    sub_1000AEEC8(v129, v140, &qword_100950DA0);
    sub_1000AEF2C(v131, v164, &qword_100950DA0);
    swift_storeEnumTagMultiPayload();
    sub_100231A44();
    sub_100231B3C();
    uint64_t v97 = (uint64_t)v165;
    _ConditionalContent<>.init(storage:)();
    sub_10008DB18(v131, &qword_100950DA0);
    sub_100231BE8(v124, (uint64_t (*)(void))type metadata accessor for FitnessPlusStackViewModel);
  }
  uint64_t v132 = sub_1000AFA94(&qword_100950DD0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v97, 0, 1, v132);
  return sub_1000AEEC8(v97, v168, &qword_100950DB8);
}

void sub_10023092C(void *a1)
{
  uint64_t v2 = v1;
  id v27 = a1;
  uint64_t HistoryItemView = type metadata accessor for LoadHistoryItemView();
  uint64_t v25 = *(void *)(HistoryItemView - 8);
  uint64_t v5 = *(void *)(v25 + 64);
  __chkstk_darwin(HistoryItemView);
  uint64_t v26 = (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = type metadata accessor for AttributedString();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [*(id *)(v2 + 40) formattedTypeForWorkout:a1 workoutActivity:0 context:@"WorkoutsListDisplayContext"];
  AttributedString.init(_:)();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v30 = static Color.white.getter();
  sub_1000A5D60();
  AttributedString.subscript.setter();
  uint64_t v28 = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v30 = static Font.body.getter();
  sub_1000AA6A0();
  AttributedString.subscript.setter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v15, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  sub_1000AEF2C((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_10095BFD0);
  sub_1000AFA94(&qword_100950CF0);
  State.wrappedValue.setter();
  sub_10008DB18((uint64_t)v11, (uint64_t *)&unk_10095BFD0);
  uint64_t v17 = *(char **)(v2 + 56);
  id v18 = v27;
  char v19 = sub_1007194DC(v18);

  if (v19)
  {
    uint64_t v20 = v26;
    sub_1002319DC(v2, v26, (uint64_t (*)(void))type metadata accessor for LoadHistoryItemView);
    unint64_t v21 = (*(unsigned __int8 *)(v25 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v18;
    sub_1002318A8(v20, v22 + v21, (uint64_t (*)(void))type metadata accessor for LoadHistoryItemView);
    id v23 = v18;
    sub_1001B173C(v23, (void (*)(void))sub_100232038, v22, v17);

    swift_release();
    id v16 = v23;
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_100230D08(uint64_t a1, uint64_t a2)
{
  uint64_t HistoryItemView = type metadata accessor for LoadHistoryItemView();
  uint64_t v5 = *(void *)(HistoryItemView - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(HistoryItemView - 8);
  sub_1002319DC(a1, (uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LoadHistoryItemView);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  sub_1002318A8((uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, (uint64_t (*)(void))type metadata accessor for LoadHistoryItemView);
  sub_100483D24(a2, (void (*)(void))sub_100232290, v8);
  return swift_release();
}

uint64_t sub_100230E40(char *a1, void *a2)
{
  uint64_t v4 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v14 = *(void **)&a1[OBJC_IVAR___CHCatalogItemViewModel_title];
    uint64_t v15 = a1;
    id v16 = v14;
    AttributedString.init(_:)();
    uint64_t KeyPath = swift_getKeyPath();
    *(&v24 - 2) = __chkstk_darwin(KeyPath);
    swift_getKeyPath();
    uint64_t v25 = static Color.white.getter();
    sub_1000A5D60();
    AttributedString.subscript.setter();
    uint64_t v18 = swift_getKeyPath();
    *(&v24 - 2) = __chkstk_darwin(v18);
    swift_getKeyPath();
    uint64_t v25 = static Font.body.getter();
    sub_1000AA6A0();
    AttributedString.subscript.setter();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v13, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    type metadata accessor for LoadHistoryItemView();
    sub_1000AEF2C((uint64_t)v9, (uint64_t)v7, (uint64_t *)&unk_10095BFD0);
    sub_1000AFA94(&qword_100950CF0);
    State.wrappedValue.setter();
    sub_10008DB18((uint64_t)v9, (uint64_t *)&unk_10095BFD0);

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v20 = (void *)HKLogActivity;
    sub_1000AFA94((uint64_t *)&unk_1009546D0);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_10074E640;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_1000AA64C();
    *(void *)(v21 + 32) = 0xD000000000000018;
    *(void *)(v21 + 40) = 0x80000001007BA8D0;
    *(void *)(v21 + 96) = sub_10007E2D8(0, (unint64_t *)&qword_10095E770);
    *(void *)(v21 + 104) = sub_1002320AC();
    *(void *)(v21 + 72) = a2;
    id v22 = v20;
    id v23 = a2;
    os_log(_:dso:log:_:_:)();

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100231214(char *a1)
{
  uint64_t v2 = sub_1000AFA94((uint64_t *)&unk_10095BFD0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v12 = *(void **)&a1[OBJC_IVAR___CHCatalogItemViewModel_title];
    uint64_t v13 = a1;
    id v14 = v12;
    AttributedString.init(_:)();
    uint64_t KeyPath = swift_getKeyPath();
    *(&v23 - 2) = __chkstk_darwin(KeyPath);
    swift_getKeyPath();
    uint64_t v24 = static Color.white.getter();
    sub_1000A5D60();
    AttributedString.subscript.setter();
    uint64_t v16 = swift_getKeyPath();
    *(&v23 - 2) = __chkstk_darwin(v16);
    swift_getKeyPath();
    if (qword_10094A6C8 != -1) {
      swift_once();
    }
    uint64_t v17 = (void *)qword_100950CE8;
    uint64_t v24 = qword_100950CE8;
    sub_100232308();
    id v18 = v17;
    AttributedString.subscript.setter();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v11, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    type metadata accessor for LoadHistoryItemView();
    sub_1000AEF2C((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_10095BFD0);
    sub_1000AFA94(&qword_100950CF0);
    State.wrappedValue.setter();
    sub_10008DB18((uint64_t)v7, (uint64_t *)&unk_10095BFD0);

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v20 = (void *)HKLogActivity;
    sub_1000AFA94((uint64_t *)&unk_1009546D0);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1007509E0;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_1000AA64C();
    *(void *)(v21 + 32) = 0xD000000000000023;
    *(void *)(v21 + 40) = 0x80000001007BA930;
    id v22 = v20;
    os_log(_:dso:log:_:_:)();

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100231608()
{
  uint64_t v1 = (int *)(type metadata accessor for LoadHistoryItemView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for FitnessPlusStackViewModel();
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v0 + v2);

  sub_1001AEDC8(*(id *)(v0 + v2 + 64), *(unsigned char *)(v0 + v2 + 72));
  unint64_t v6 = v0 + v2 + v1[11];
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  sub_1000AFA94(&qword_100950CF0);
  swift_release();
  uint64_t v9 = v0 + ((v2 + v3 + v5) & ~v5);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11(v9 + *(int *)(v4 + 32), v10);
  uint64_t v12 = v9 + *(int *)(v4 + 36);
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  return swift_deallocObject();
}

uint64_t sub_1002318A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100231910()
{
  uint64_t v1 = *(void *)(type metadata accessor for LoadHistoryItemView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for FitnessPlusStackViewModel() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_100230D08(v0 + v2, v5);
}

uint64_t sub_1002319DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100231A44()
{
  unint64_t result = qword_100950DD8;
  if (!qword_100950DD8)
  {
    sub_1000A1370(&qword_100950DC8);
    type metadata accessor for WorkloadListItemStack();
    sub_1000858F0(&qword_100950DE0, (void (*)(uint64_t))type metadata accessor for WorkloadListItemStack);
    sub_1001B5C6C();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950DD8);
  }
  return result;
}

unint64_t sub_100231B3C()
{
  unint64_t result = qword_100950DE8;
  if (!qword_100950DE8)
  {
    sub_1000A1370(&qword_100950DA0);
    sub_1000858F0(&qword_100950DE0, (void (*)(uint64_t))type metadata accessor for WorkloadListItemStack);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950DE8);
  }
  return result;
}

uint64_t sub_100231BE8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100231C54()
{
  return 8;
}

uint64_t sub_100231C60()
{
  return swift_release();
}

uint64_t sub_100231C68(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_100231C7C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100231C88()
{
  uint64_t v1 = (int *)(type metadata accessor for LoadHistoryItemView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v0 + v2);

  sub_1001AEDC8(*(id *)(v0 + v2 + 64), *(unsigned char *)(v0 + v2 + 72));
  unint64_t v4 = v0 + v2 + v1[11];
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_1000AFA94(&qword_100950CF0);
  swift_release();

  return swift_deallocObject();
}

void sub_100231E10()
{
  uint64_t v1 = *(void *)(type metadata accessor for LoadHistoryItemView() - 8);
  sub_10023092C(*(void **)(v0
                         + ((*(void *)(v1 + 64)
                           + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                           + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100231EA8()
{
  return 8;
}

uint64_t sub_100231EBC()
{
  uint64_t v1 = (int *)(type metadata accessor for LoadHistoryItemView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);

  _s10FitnessApp24HistoryViewActionContextVwxx_0(v0 + v2);
  sub_1001AEDC8(*(id *)(v0 + v2 + 64), *(unsigned char *)(v0 + v2 + 72));
  unint64_t v3 = v0 + v2 + v1[11];
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  sub_1000AFA94(&qword_100950CF0);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100232038(char *a1)
{
  type metadata accessor for LoadHistoryItemView();
  unint64_t v3 = *(void **)(v1 + 16);

  return sub_100230E40(a1, v3);
}

unint64_t sub_1002320AC()
{
  unint64_t result = qword_100966470;
  if (!qword_100966470)
  {
    sub_10007E2D8(255, (unint64_t *)&qword_10095E770);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100966470);
  }
  return result;
}

uint64_t sub_10023211C()
{
  uint64_t v1 = (int *)(type metadata accessor for LoadHistoryItemView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v2);

  sub_1001AEDC8(*(id *)(v2 + 64), *(unsigned char *)(v2 + 72));
  uint64_t v3 = v2 + v1[11];
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  sub_1000AFA94(&qword_100950CF0);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100232290(char *a1)
{
  type metadata accessor for LoadHistoryItemView();

  return sub_100231214(a1);
}

unint64_t sub_100232308()
{
  unint64_t result = qword_100950DF0;
  if (!qword_100950DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950DF0);
  }
  return result;
}

uint64_t sub_100232360()
{
  return 8;
}

unint64_t sub_100232378()
{
  unint64_t result = qword_100950DF8;
  if (!qword_100950DF8)
  {
    sub_1000A1370(&qword_100950DB8);
    sub_1002323EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950DF8);
  }
  return result;
}

unint64_t sub_1002323EC()
{
  unint64_t result = qword_100950E00;
  if (!qword_100950E00)
  {
    sub_1000A1370(&qword_100950DD0);
    sub_100231A44();
    sub_100231B3C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950E00);
  }
  return result;
}

void sub_100232480()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair);
  id v2 = [self mainBundle];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 localizedStringForKey:v3 value:0 table:0];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText);
  *uint64_t v8 = v5;
  v8[1] = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel);
  if (v8[1])
  {
    swift_bridgeObjectRetain();
    id v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v10 = 0;
  }
  [v9 setText:v10];
}

uint64_t sub_100232650()
{
  uint64_t v109 = type metadata accessor for Calendar();
  uint64_t v1 = *(char ***)(v109 - 8);
  __chkstk_darwin(v109);
  id v107 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DateComponents();
  uint64_t v94 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v93 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Calendar.Component();
  NSDate v102 = *(void **)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v97 = (void (**)(char *, char *, uint64_t))((char *)&v89 - v12);
  uint64_t v13 = type metadata accessor for Date();
  id v14 = *(void **)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v106 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v99 = (char *)&v89 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v20 = __chkstk_darwin(v19);
  id v22 = (char **)((char *)&v89 - v21);
  uint64_t result = __chkstk_darwin(v20);
  char v108 = v0;
  unint64_t v26 = *(void *)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartData];
  if (!v26) {
    return result;
  }
  uint64_t v91 = v25;
  uint64_t v90 = v3;
  uint64_t v95 = (char **)((char *)&v89 - v24);
  uint64_t v100 = v7;
  uint64_t v116 = (void (*)(char *, void, uint64_t))(v26 >> 62);
  if (v26 >> 62) {
    goto LABEL_47;
  }
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (1)
  {
    uint64_t v101 = v14;
    uint64_t v96 = v5;
    id v104 = v11;
    uint64_t v105 = v22;
    uint64_t v92 = v1;
    if (!v27) {
      break;
    }
    if (v27 < 1)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v28 = 0;
    id v14 = 0;
    id v22 = (char **)(v26 & 0xC000000000000001);
    uint64_t v1 = &selRef_setPercentMinimized_;
    while (1)
    {
      uint64_t v29 = v22
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(v26 + 8 * v28 + 32);
      uint64_t v0 = v29;
      uint64_t v11 = (char *)[v29 state];

      BOOL v30 = v11 == (char *)1;
      BOOL v31 = __OFADD__(v14, v30);
      id v14 = (void *)((char *)v14 + v30);
      if (v31) {
        break;
      }
      if (v27 == ++v28) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain_n();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  }
  id v14 = 0;
LABEL_14:
  uint64_t v98 = v13;
  swift_bridgeObjectRelease();
  id v32 = [self mainBundle];
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = [v32 localizedStringForKey:v33 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = *(void **)&v108[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel];
  sub_1000AFA94((uint64_t *)&unk_1009546D0);
  uint64_t v36 = swift_allocObject();
  long long v89 = xmmword_1007509E0;
  *(_OWORD *)(v36 + 16) = xmmword_1007509E0;
  *(void *)(v36 + 56) = &type metadata for Int;
  *(void *)(v36 + 64) = &protocol witness table for Int;
  *(void *)(v36 + 32) = v14;
  uint64_t v37 = static String.localizedStringWithFormat(_:_:)();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v117[0] = v37;
  v117[1] = v39;
  sub_1000A06D0();
  StringProtocol.localizedUppercase.getter();
  swift_bridgeObjectRelease();
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v35 setText:v40];

  if (!v27)
  {
    swift_bridgeObjectRelease();
    return sub_1006DC9BC(0);
  }
  if (v116)
  {
    swift_bridgeObjectRetain();
    unint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v98;
    uint64_t v1 = v105;
    uint64_t v0 = (char *)v109;
    if ((v41 & 0x8000000000000000) != 0) {
      goto LABEL_49;
    }
  }
  else
  {
    unint64_t v41 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = v98;
    uint64_t v1 = v105;
    uint64_t v0 = (char *)v109;
  }
  if (v41)
  {
    unint64_t v42 = sub_100020AC4(v41);
    if ((v26 & 0xC000000000000001) == 0)
    {
      uint64_t v43 = v100;
      uint64_t v44 = (uint64_t)v104;
      if ((v42 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v42 < *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v45 = *(id *)(v26 + 8 * v42 + 32);
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_54;
    }
  }
  else
  {
LABEL_50:
    __break(1u);
  }
  id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  uint64_t v43 = v100;
  uint64_t v44 = (uint64_t)v104;
LABEL_24:
  swift_bridgeObjectRelease();
  id v103 = v45;
  [v45 timeStamp];
  Date.init(timeIntervalSinceReferenceDate:)();
  if (qword_10094A5F8 != -1) {
LABEL_54:
  }
    swift_once();
  uint64_t v46 = sub_1000876DC((uint64_t)v0, (uint64_t)qword_100997640);
  Calendar.startOfDay(for:)();
  uint64_t v47 = v102;
  int v49 = v102 + 13;
  id v48 = (void (*)(char *, void, uint64_t))v102[13];
  uint64_t v50 = v43;
  uint64_t v51 = v43;
  uint64_t v52 = v96;
  v48(v50, enum case for Calendar.Component.day(_:), v96);
  uint64_t v53 = (uint64_t)v97;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v112 = (void (*)(char *, uint64_t))v47[1];
  long long v113 = v47 + 1;
  v112(v51, v52);
  uint64_t v54 = v101;
  uint64_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v101[6];
  uint64_t v111 = v101 + 6;
  int v55 = v110(v53, 1, v13);
  uint64_t v114 = v49;
  uint64_t v115 = v46;
  uint64_t v116 = v48;
  if (v55 == 1)
  {
    sub_10023636C(v53);
    BOOL v56 = v99;
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))v54[4])(v91, v53, v13);
    uint64_t v57 = v109;
    ((void (*)(char *, uint64_t, uint64_t))v92[2])(v107, v46, v109);
    sub_1000AFA94((uint64_t *)&unk_1009559B0);
    unint64_t v58 = (*((unsigned __int8 *)v47 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v47 + 80);
    uint64_t v59 = v54;
    uint64_t v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = v89;
    v116((char *)(v60 + v58), enum case for Calendar.Component.hour(_:), v96);
    sub_1000C6A18(v60);
    uint64_t v61 = v57;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    id v62 = v93;
    uint64_t v63 = v91;
    uint64_t v64 = v107;
    Calendar.dateComponents(_:from:to:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v92[1])(v64, v61);
    uint64_t v65 = DateComponents.hour.getter();
    LOBYTE(v64) = v66;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v62, v90);
    ((void (*)(uint64_t, uint64_t))v59[1])(v63, v13);
    BOOL v56 = v99;
    if ((v64 & 1) == 0) {
      *(void *)&v108[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_nBins] = v65;
    }
  }
  uint64_t v67 = v108;
  uint64_t v68 = &v108[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets];
  swift_beginAccess();
  *(void *)uint64_t v68 = _swiftEmptyArrayStorage;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v69 = *(void *)&v67[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_nBins];
  if ((v69 & 0x8000000000000000) == 0)
  {
    uint64_t v70 = v100;
    uint64_t v71 = v103;
    uint64_t v72 = v96;
    uint64_t v73 = v116;
    if (v69)
    {
      uint64_t v74 = 0;
      LODWORD(v109) = enum case for Calendar.Component.hour(_:);
      id v107 = (char *)(v101 + 4);
      uint64_t v97 = (void (**)(char *, char *, uint64_t))(v101 + 2);
      NSDate v102 = v101 + 1;
      do
      {
        v73(v70, v109, v72);
        Calendar.date(byAdding:value:to:wrappingComponents:)();
        v112(v70, v72);
        if (v110(v44, 1, v13) == 1)
        {
          sub_10023636C(v44);
        }
        else
        {
          uint64_t v75 = v44;
          uint64_t v76 = *(void (**)(unint64_t, char *, uint64_t))v107;
          (*(void (**)(char *, uint64_t, uint64_t))v107)(v56, v75, v13);
          uint64_t v78 = sub_100233320();
          uint64_t v79 = v56;
          uint64_t v80 = v13;
          if (*v77)
          {
            uint64_t v81 = v77;
            (*v97)(v106, v79, v80);
            unint64_t v82 = *v81;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v81 = v82;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v82 = sub_1000D031C(0, *(void *)(v82 + 16) + 1, 1, v82);
              *uint64_t v81 = v82;
            }
            unint64_t v85 = *(void *)(v82 + 16);
            unint64_t v84 = *(void *)(v82 + 24);
            if (v85 >= v84 >> 1)
            {
              unint64_t v82 = sub_1000D031C(v84 > 1, v85 + 1, 1, v82);
              *uint64_t v81 = v82;
            }
            *(void *)(v82 + 16) = v85 + 1;
            uint64_t v86 = v101;
            uint64_t v13 = v98;
            v76(v82+ ((*((unsigned __int8 *)v86 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v86 + 80))+ v101[9] * v85, v106, v98);
            ((void (*)(void *, void))v78)(v117, 0);
            unint64_t v87 = (void (*)(char *, uint64_t))v86[1];
            BOOL v56 = v99;
            v87(v99, v13);
            uint64_t v70 = v100;
            uint64_t v44 = (uint64_t)v104;
          }
          else
          {
            ((void (*)(void *, void))v78)(v117, 0);
            ((void (*)(char *, uint64_t))*v102)(v79, v13);
            uint64_t v44 = (uint64_t)v104;
            BOOL v56 = v79;
          }
          uint64_t v1 = v105;
          uint64_t v71 = v103;
        }
        ++v74;
        uint64_t v73 = v116;
      }
      while (v69 != v74);
    }

    unint64_t v88 = (void (*)(char **, uint64_t))v101[1];
    v88(v1, v13);
    v88(v95, v13);
    return sub_1006DC9BC(0);
  }
  __break(1u);
  return result;
}

uint64_t (*sub_100233320())()
{
  return j__swift_endAccess;
}

void sub_100233380(void *a1, void *a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair);
  uint64_t v6 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel;
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v5
                                                             + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel), "font"));
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = sub_100265EEC(a1, a2, v7);

    if (v9)
    {
      uint64_t v10 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText;
      uint64_t v11 = *(void **)(v5 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText);
      *(void *)(v5 + OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueAttributedText) = v9;
      id v16 = v9;

      uint64_t v12 = *(void **)(v5 + v6);
      [v12 setText:0];
      [v12 setAttributedText:*(void *)(v5 + v10)];

      uint64_t v13 = *(void **)(v2 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton);
      unsigned __int8 v14 = [v13 isHidden];
      char v15 = 1;
      if ((v14 & 1) == 0 && a2) {
        char v15 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isToday) ^ 1;
      }
      [v13 setHidden:v15 & 1];
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002334F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isWheelchair] = 0;
  id v4 = objc_allocWithZone((Class)type metadata accessor for DayViewTitleAndValueLabelPair());
  uint64_t v5 = v3;
  uint64_t v6 = (char *)[v4 initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v119 = self;
  id v7 = [v119 labelColor];
  uint64_t v8 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor;
  id v9 = *(void **)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor];
  *(void *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor] = v7;
  id v10 = v7;

  uint64_t v11 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  [*(id *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel] setTextColor:*(void *)&v6[v8]];

  sub_10007E2D8(0, (unint64_t *)&qword_10095BF80);
  Class isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  Class v13 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  unsigned __int8 v14 = (objc_class *)type metadata accessor for GradientColors();
  char v15 = (char *)objc_allocWithZone(v14);
  *(void *)&v15[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = isa;
  *(void *)&v15[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v13;
  v129.receiver = v15;
  v129.super_class = v14;
  id v121 = v14;
  id v16 = [super init];
  Class v17 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  uint64_t v18 = (objc_class *)type metadata accessor for MetricColors();
  uint64_t v19 = (char *)objc_allocWithZone(v18);
  *(void *)&v19[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v16;
  *(void *)&v19[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v17;
  v128.receiver = v19;
  v128.super_class = v18;
  uint64_t v120 = v18;
  uint64_t v20 = (char *)[v128 init];
  id v21 = *(id *)&v20[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  uint64_t v22 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  uint64_t v23 = *(void **)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(void *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v21;
  id v24 = v21;

  [*(id *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setTextColor:*(void *)&v6[v22]];
  uint64_t v25 = self;
  id v26 = [v25 mainBundle];
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v26 localizedStringForKey:v27 value:0 table:0];

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  id v32 = (uint64_t *)&v6[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *id v32 = v29;
  v32[1] = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  NSString v33 = *(void **)&v6[v11];
  if (v32[1])
  {
    swift_bridgeObjectRetain();
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v34 = 0;
  }
  uint64_t v35 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair;
  [v33 setText:v34];

  swift_bridgeObjectRelease();
  *(void *)&v5[v35] = v6;
  uint64_t v36 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel;
  id v37 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v37 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v38 = [self preferredFontForTextStyle:UIFontTextStyleCaption1];
  uint64_t v39 = (void *)UILabel.withFont(_:)();

  Class v40 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  Class v41 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  unint64_t v42 = (char *)objc_allocWithZone(v121);
  *(void *)&v42[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v40;
  *(void *)&v42[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v41;
  v127.receiver = v42;
  v127.super_class = v121;
  id v43 = [super init];
  Class v44 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  id v45 = (char *)objc_allocWithZone(v120);
  *(void *)&v45[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v43;
  *(void *)&v45[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v44;
  v126.receiver = v45;
  v126.super_class = v120;
  uint64_t v46 = (char *)[super init];
  id v47 = *(id *)&v46[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  id v48 = (void *)UILabel.withTextColor(_:)();
  LODWORD(v49) = 1148846080;
  [v48 setContentCompressionResistancePriority:1 forAxis:v49];
  LODWORD(v50) = 1148846080;
  [v48 setContentHuggingPriority:1 forAxis:v50];
  id v51 = [v25 mainBundle];
  NSString v52 = String._bridgeToObjectiveC()();
  id v53 = [v51 localizedStringForKey:v52 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v54 = String._bridgeToObjectiveC()();
  [v48 setText:v54];

  swift_bridgeObjectRelease();
  *(void *)&v5[v36] = v48;
  uint64_t v55 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton;
  id v56 = [objc_allocWithZone((Class)UIButton) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v56 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v5[v55] = v56;
  uint64_t v57 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView;
  type metadata accessor for ActivityStandChartView();
  *(void *)&v5[v57] = sub_1006D13E4();
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_nBins] = 24;
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartData] = 0;
  unint64_t v58 = &v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_onEditGoal];
  *unint64_t v58 = 0;
  v58[1] = 0;
  v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isToday] = 0;
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets] = 0;

  if (a3)
  {
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v59 = 0;
  }
  v125.receiver = v5;
  v125.super_class = (Class)type metadata accessor for DayViewStandChartTableViewCell();
  id v60 = [super initWithStyle:a1 reuseIdentifier:v59];

  uint64_t v61 = (char *)v60;
  id v62 = [v119 systemBackgroundColor];
  [v61 setBackgroundColor:v62];

  id v63 = [v61 contentView];
  [v63 addSubview:*(void *)&v61[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair]];

  id v64 = [v61 contentView];
  uint64_t v65 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView;
  [v64 addSubview:*(void *)&v61[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView]];

  char v66 = *(char **)&v61[v65];
  *(void *)&v66[OBJC_IVAR____TtC10FitnessApp22ActivityStandChartView_dataProvider + 8] = &off_1008BCAD0;
  swift_unknownObjectWeakAssign();
  uint64_t v67 = v61;
  uint64_t v68 = v66;
  sub_1006DC9BC(0);

  id v69 = [v67 contentView];
  [v69 addSubview:*(void *)&v67[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel]];

  id v70 = [v67 contentView];
  uint64_t v71 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton;
  [v70 addSubview:*(void *)&v67[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton]];

  sub_10007E2D8(0, &qword_100950E80);
  id v72 = [v25 mainBundle];
  NSString v73 = String._bridgeToObjectiveC()();
  id v74 = [v72 localizedStringForKey:v73 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v75 = String._bridgeToObjectiveC()();
  uint64_t v76 = self;
  id v77 = [v76 smm_systemImageNamed:v75];

  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v78 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v79 = self;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = v67;
  aBlock[4] = sub_10023645C;
  aBlock[5] = v80;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003E0530;
  aBlock[3] = &unk_1008BCB38;
  uint64_t v81 = _Block_copy(aBlock);
  unint64_t v82 = v67;
  swift_release();
  id v83 = [v79 elementWithUncachedProvider:v81];
  _Block_release(v81);
  sub_10007E2D8(0, (unint64_t *)&unk_10095C0A0);
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_100756B20;
  *(void *)(v84 + 32) = v78;
  *(void *)(v84 + 40) = v83;
  aBlock[0] = v84;
  specialized Array._endMutation()();
  UIMenuElementSize preferredElementSize = aBlock[0];
  id v118 = v78;
  id v116 = v83;
  v86._uint64_t countAndFlagsBits = 0;
  v86._object = (void *)0xE000000000000000;
  v130.value.super.Class isa = 0;
  v130.is_nil = 0;
  v87.super.super.Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v86, (Swift::String_optional)0, v130, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0).super.super.isa;
  id v88 = [self configurationWithPointSize:5 weight:30.0];
  id v89 = *(id *)&v67[v71];
  id v90 = v88;
  NSString v91 = String._bridgeToObjectiveC()();
  id v92 = [v76 smm_systemImageNamed:v91 withConfiguration:v90];

  [v89 setImage:v92 forState:0];
  id v93 = *(id *)&v67[v71];
  id v94 = [v119 secondarySystemGroupedBackgroundColor];
  [v93 setBackgroundColor:v94];

  id v95 = [*(id *)&v67[v71] layer];
  [v95 setMasksToBounds:1];

  uint64_t v96 = *(void **)&v67[v71];
  [v96 setMenu:v87.super.super.isa];
  id v97 = v96;
  Class v98 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  Class v99 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  uint64_t v100 = (char *)objc_allocWithZone(v121);
  *(void *)&v100[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v98;
  *(void *)&v100[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v99;
  v123.receiver = v100;
  v123.super_class = v121;
  id v101 = [super init];
  Class v102 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  id v103 = (char *)objc_allocWithZone(v120);
  *(void *)&v103[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v101;
  *(void *)&v103[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v102;
  v122.receiver = v103;
  v122.super_class = v120;
  id v104 = [(char *)[super init]];
  id v105 = *(id *)&v104[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  [v97 setTintColor:v105];
  uint64_t v106 = *(void **)&v67[v71];
  [v106 setShowsMenuAsPrimaryAction:1];
  id v107 = self;
  id v108 = v106;
  id v109 = [v107 sharedBehavior];
  if (v109)
  {
    uint64_t v110 = v109;
    id v111 = [v109 features];

    if (v111)
    {
      unsigned int v112 = [v111 scheduledGoals];

      [v108 setHidden:v112 ^ 1];
      id v113 = *(id *)&v67[v71];
      UIEdgeInsets.init(uniform:)();
      [v113 setContentEdgeInsets:];

      sub_1002352BC();
      id v114 = [self defaultCenter];
      [v114 addObserver:v82 selector:"updateFonts" name:UIContentSizeCategoryDidChangeNotification object:0];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1002343BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_1000AFA94(&qword_10094B7A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for MainActor();
  id v10 = a3;
  swift_retain();
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = v11;
  void v12[3] = &protocol witness table for MainActor;
  v12[4] = v10;
  uint64_t v12[5] = a1;
  v12[6] = a2;
  sub_1000713D0((uint64_t)v8, (uint64_t)&unk_100950E90, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_1002344F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = sub_1000AFA94(&qword_100950E98);
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  uint64_t v8 = sub_1000AFA94(&qword_100950EA0);
  v6[10] = v8;
  v6[11] = *(void *)(v8 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v9 = sub_1000AFA94(&qword_100950EA8);
  v6[13] = v9;
  v6[14] = *(void *)(v9 - 8);
  v6[15] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[16] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[17] = v11;
  v6[18] = v10;
  return _swift_task_switch(sub_1002346B0, v11, v10);
}

uint64_t sub_1002346B0()
{
  id v25 = [objc_allocWithZone((Class)HKHealthStore) init];
  v0[19] = v25;
  swift_getKeyPath();
  SortDescriptor.init<A>(_:order:)();
  sub_10007E2D8(0, (unint64_t *)&unk_10095B860);
  id v1 = [(id)swift_getObjCClassFromMetadata() activityGoalScheduleType];
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v0[14];
    uint64_t v24 = v0[15];
    uint64_t v6 = v0[12];
    uint64_t v5 = v0[13];
    uint64_t v7 = v0[10];
    uint64_t v8 = v0[11];
    sub_10007E2D8(0, &qword_100950760);
    static HKSamplePredicate.sample(type:predicate:)();

    sub_1000AFA94(&qword_100950EB0);
    unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1007509E0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + v9, v6, v7);
    sub_1000AFA94(&qword_100950EB8);
    unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1007509E0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v12 + v11, v24, v5);
    HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)();
    uint64_t v13 = self;
    v0[20] = v13;
    id v14 = [v13 mainBundle];
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 localizedStringForKey:v15 value:0 table:0];

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
    v0[2] = v17;
    v0[3] = v18;

    v0[21] = v19;
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = self;
    v0[22] = v21;
    v0[23] = [v21 smm_systemImageNamed:v20];

    uint64_t v22 = (void *)swift_task_alloc();
    v0[24] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1002349D0;
    uint64_t v2 = v0[7];
    id v1 = v25;
  }
  else
  {
    __break(1u);
  }
  return HKSampleQueryDescriptor.result(for:)(v1, v2);
}

uint64_t sub_1002349D0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 200) = a1;
  *(void *)(v4 + 208) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 144);
  uint64_t v6 = *(void *)(v3 + 136);
  if (v1) {
    uint64_t v7 = sub_100234EF0;
  }
  else {
    uint64_t v7 = sub_100234B14;
  }
  return _swift_task_switch(v7, v6, v5);
}

uint64_t sub_100234B14()
{
  unint64_t v1 = v0[25];
  swift_release();
  if (v1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (uint64_t i = swift_bridgeObjectRetain(); v2; uint64_t i = v0[25])
  {
    uint64_t v4 = 0;
    v1 &= 0xC000000000000001;
    uint64_t v5 = i + 32;
    while (1)
    {
      id v6 = v1 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v4);
      uint64_t v7 = v6;
      uint64_t v8 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        break;
      }
      self;
      uint64_t v9 = (void *)swift_dynamicCastObjCClass();
      if (v9 && [v9 goalType] == (id)3)
      {
        uint64_t v10 = (void *)v0[22];
        unint64_t v11 = (void *)v0[23];
        uint64_t v12 = (void *)v0[20];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        id v13 = [v12 mainBundle];
        NSString v14 = String._bridgeToObjectiveC()();
        id v15 = [v13 localizedStringForKey:v14 value:0 table:0];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v16 = String._bridgeToObjectiveC()();
        id v17 = [v10 smm_systemImageNamed:v16];

        goto LABEL_13;
      }

      ++v4;
      if (v8 == v2) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_12:
  swift_bridgeObjectRelease_n();
  id v17 = (id)v0[23];
LABEL_13:
  uint64_t v29 = (void *)v0[19];
  uint64_t v19 = v0[14];
  uint64_t v18 = v0[15];
  uint64_t v20 = v0[11];
  uint64_t v33 = v0[12];
  uint64_t v34 = v0[13];
  uint64_t v21 = v0[8];
  uint64_t v31 = v0[9];
  uint64_t v32 = v0[10];
  uint64_t v30 = v0[7];
  id v28 = (void (*)(uint64_t))v0[5];
  sub_10007E2D8(0, &qword_100950E80);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v22 = v17;
  uint64_t v23 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100751040;
  *(void *)(v24 + 32) = v23;
  uint64_t v35 = v24;
  specialized Array._endMutation()();
  id v25 = v23;
  v28(v35);

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v31, v30);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v33, v32);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_100234EF0()
{
  swift_release();
  swift_errorRelease();
  unint64_t v1 = (void *)v0[23];
  uint64_t v12 = (void *)v0[19];
  uint64_t v2 = v0[14];
  uint64_t v18 = v0[15];
  uint64_t v3 = v0[11];
  uint64_t v16 = v0[12];
  uint64_t v17 = v0[13];
  uint64_t v4 = v0[8];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[10];
  uint64_t v13 = v0[7];
  unint64_t v11 = (void (*)(uint64_t))v0[5];
  sub_10007E2D8(0, &qword_100950E80);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v5 = v1;
  id v6 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100751040;
  *(void *)(v7 + 32) = v6;
  uint64_t v19 = v7;
  specialized Array._endMutation()();
  id v8 = v6;
  v11(v19);

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v16, v15);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v18, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_100235120(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    id v6 = *(void (**)(void))(Strong + OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_onEditGoal);
    sub_10008A670((uint64_t)v6);

    if (v6)
    {
      v6(a3 & 1);
      sub_10005E5F8((uint64_t)v6);
    }
  }
}

void sub_1002352BC()
{
  unint64_t v1 = *(char **)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair];
  id v2 = [v1 leadingAnchor];
  id v3 = [v0 contentView];
  id v4 = [v3 leadingAnchor];

  id v62 = [v2 constraintEqualToAnchor:v4 constant:16.0];
  id v5 = [v1 trailingAnchor];
  id v6 = [v0 contentView];
  id v7 = [v6 trailingAnchor];

  id v60 = [v5 constraintEqualToAnchor:v7 constant:-16.0];
  id v8 = [v1 topAnchor];
  id v9 = [v0 contentView];
  id v10 = [v9 topAnchor];

  id v58 = [v8 constraintEqualToAnchor:v10];
  unint64_t v11 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView];
  id v12 = [v11 leadingAnchor];
  id v13 = [v0 contentView];
  id v14 = [v13 leadingAnchor];

  id v56 = [v12 constraintEqualToAnchor:v14 constant:16.0];
  id v15 = [v11 trailingAnchor];
  id v16 = [v0 contentView];
  id v17 = [v16 trailingAnchor];

  id v54 = [v15 constraintEqualToAnchor:v17 constant:-16.0];
  id v18 = [v11 topAnchor];
  id v19 = [v1 bottomAnchor];
  id v53 = [v18 constraintEqualToAnchor:v19];

  uint64_t v20 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel];
  id v21 = [v20 leadingAnchor];
  id v22 = [v0 contentView];
  id v23 = [v22 leadingAnchor];

  id v52 = [v21 constraintEqualToAnchor:v23 constant:16.0];
  id v24 = [v20 trailingAnchor];
  id v25 = [v0 contentView];
  id v26 = [v25 trailingAnchor];

  id v51 = [v24 constraintEqualToAnchor:v26 constant:-16.0];
  id v27 = [v20 topAnchor];
  id v28 = [v11 bottomAnchor];
  id v66 = [v27 constraintEqualToAnchor:v28 constant:0.0];

  id v29 = [v20 bottomAnchor];
  id v30 = [v0 contentView];
  id v31 = [v30 bottomAnchor];

  id v67 = [v29 constraintEqualToAnchor:v31 constant:-27.0];
  uint64_t v32 = *(void **)&v0[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton];
  id v33 = [v32 centerYAnchor];
  id v34 = [*(id *)&v1[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] centerYAnchor];
  id v65 = [v33 constraintEqualToAnchor:v34];

  id v35 = [v32 trailingAnchor];
  id v36 = [v0 contentView];
  id v37 = [v36 trailingAnchor];

  id v64 = [v35 constraintEqualToAnchor:v37 constant:-16.0];
  id v38 = [v32 heightAnchor];
  id v39 = [v32 widthAnchor];
  id v40 = [v38 constraintEqualToAnchor:v39];

  id v50 = self;
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_1007561E0;
  *(void *)(v41 + 32) = v62;
  *(void *)(v41 + 40) = v60;
  *(void *)(v41 + 48) = v58;
  *(void *)(v41 + 56) = v56;
  *(void *)(v41 + 64) = v54;
  *(void *)(v41 + 72) = v53;
  *(void *)(v41 + 80) = v52;
  *(void *)(v41 + 88) = v51;
  *(void *)(v41 + 96) = v66;
  *(void *)(v41 + 104) = v67;
  *(void *)(v41 + 112) = v65;
  *(void *)(v41 + 120) = v64;
  *(void *)(v41 + 128) = v40;
  specialized Array._endMutation()();
  sub_10007E2D8(0, (unint64_t *)&qword_10094C810);
  id v63 = v62;
  id v61 = v60;
  id v59 = v58;
  id v57 = v56;
  id v55 = v54;
  id v42 = v53;
  id v43 = v52;
  id v44 = v51;
  id v45 = v66;
  id v46 = v67;
  id v47 = v65;
  id v48 = v64;
  id v49 = v40;
  v68.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v50 activateConstraints:v68.super.isa];
}

uint64_t sub_100235A6C(void *a1)
{
  v1[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isWheelchair] = 0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for DayViewTitleAndValueLabelPair());
  id v3 = v1;
  id v4 = [v2 initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v5 = [self labelColor];
  uint64_t v6 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor;
  id v7 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor];
  *(void *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabelTextColor] = v5;
  id v8 = v5;

  uint64_t v58 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel;
  [*(id *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleLabel] setTextColor:*(void *)&v4[v6]];

  sub_10007E2D8(0, (unint64_t *)&qword_10095BF80);
  Class isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  Class v10 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  unint64_t v11 = (objc_class *)type metadata accessor for GradientColors();
  id v12 = (char *)objc_allocWithZone(v11);
  *(void *)&v12[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = isa;
  *(void *)&v12[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v10;
  v64.receiver = v12;
  v64.super_class = v11;
  [super init];
  Class v14 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  id v15 = (objc_class *)type metadata accessor for MetricColors();
  id v16 = (char *)objc_allocWithZone(v15);
  *(void *)&v16[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v13;
  *(void *)&v16[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v14;
  v63.receiver = v16;
  v63.super_class = v15;
  id v17 = [super init];
  id v18 = *(id *)&v17[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  uint64_t v19 = OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor;
  uint64_t v20 = *(void **)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor];
  *(void *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabelTextColor] = v18;
  id v21 = v18;

  [*(id *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_valueLabel] setTextColor:*(void *)&v4[v19]];
  id v57 = self;
  id v22 = [v57 mainBundle];
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [v22 localizedStringForKey:v23 value:0 table:0];

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  id v28 = (uint64_t *)&v4[OBJC_IVAR____TtC10FitnessApp29DayViewTitleAndValueLabelPair_titleText];
  *id v28 = v25;
  v28[1] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v29 = *(void **)&v4[v58];
  if (v28[1])
  {
    swift_bridgeObjectRetain();
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v30 = 0;
  }
  uint64_t v31 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair;
  uint64_t v59 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_labelPair;
  [v29 setText:v30];

  swift_bridgeObjectRelease();
  *(void *)&v3[v31] = v4;
  uint64_t v32 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_idleHoursLabel;
  id v33 = [objc_allocWithZone((Class)UILabel) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v33 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v34 = [self preferredFontForTextStyle:UIFontTextStyleCaption1];
  id v35 = (void *)UILabel.withFont(_:)();

  Class v36 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.84706, 1.0, 1.0).super.isa;
  Class v37 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.62727, 1.0).super.isa;
  id v38 = (char *)objc_allocWithZone(v11);
  *(void *)&v38[OBJC_IVAR____TtC10FitnessApp14GradientColors_dark] = v36;
  *(void *)&v38[OBJC_IVAR____TtC10FitnessApp14GradientColors_light] = v37;
  v62.receiver = v38;
  v62.super_class = v11;
  id v39 = [super init];
  Class v40 = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 1.0, 0.96471, 1.0).super.isa;
  uint64_t v41 = (char *)objc_allocWithZone(v15);
  *(void *)&v41[OBJC_IVAR____TtC10FitnessApp12MetricColors_gradient] = v39;
  *(void *)&v41[OBJC_IVAR____TtC10FitnessApp12MetricColors_text] = v40;
  v61.receiver = v41;
  v61.super_class = v15;
  id v42 = [super init];
  id v43 = *(id *)&v42[OBJC_IVAR____TtC10FitnessApp12MetricColors_text];

  id v44 = (void *)UILabel.withTextColor(_:)();
  LODWORD(v45) = 1148846080;
  [v44 setContentCompressionResistancePriority:1 forAxis:v45];
  LODWORD(v46) = 1148846080;
  [v44 setContentHuggingPriority:1 forAxis:v46];
  id v47 = [v57 mainBundle];
  NSString v48 = String._bridgeToObjectiveC()();
  id v49 = [v47 localizedStringForKey:v48 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v50 = String._bridgeToObjectiveC()();
  [v44 setText:v50];

  swift_bridgeObjectRelease();
  *(void *)&v3[v32] = v44;
  uint64_t v51 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_editGoalButton;
  id v52 = [objc_allocWithZone((Class)UIButton) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v52 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v3[v51] = v52;
  uint64_t v53 = OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartView;
  type metadata accessor for ActivityStandChartView();
  id v54 = sub_1006D13E4();

  *(void *)&v3[v53] = v54;
  *(void *)&v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_nBins] = 24;
  *(void *)&v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartData] = 0;
  id v55 = (uint64_t *)&v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_onEditGoal];
  *id v55 = 0;
  v55[1] = 0;
  v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_isToday] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10FitnessApp30DayViewStandChartTableViewCell_chartBuckets] = 0;

  swift_bridgeObjectRelease();
  sub_10005E5F8(*v55);

  swift_bridgeObjectRelease();
  type metadata accessor for DayViewStandChartTableViewCell();
  swift_deallocPartialClassInstance();
  return 0;
}

id sub_100236274()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DayViewStandChartTableViewCell();
  return [super dealloc];
}

uint64_t type metadata accessor for DayViewStandChartTableViewCell()
{
  return self;
}

uint64_t sub_10023636C(uint64_t a1)
{
  uint64_t v2 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002363CC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_100236404(uint64_t a1)
{
  sub_100235120(a1, v1, 1);
}

uint64_t sub_100236424()
{
  return swift_deallocObject();
}

uint64_t sub_10023645C(uint64_t a1, uint64_t a2)
{
  return sub_1002343BC(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_100236464()
{
  swift_unknownObjectRelease();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002364AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = sub_10005DB5C;
  return sub_1002344F4(a1, v4, v5, v6, v7, v8);
}

const char *sub_100236574()
{
  return "startDate";
}

void sub_100236584(uint64_t a1)
{
  sub_100235120(a1, v1, 0);
}

uint64_t sub_1002365A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002365C4()
{
  *(void *)(v1 + 136) = v0;
  return _swift_task_switch(sub_10002B710, 0, 0);
}

uint64_t sub_100236654(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100236C5C;
  }
  else
  {
    *(void *)(v4 + 192) = a1;
    uint64_t v5 = sub_1002367A4;
  }
  return _swift_task_switch(v5, 0, 0);
}

void sub_1002367A4()
{
  id v38 = v0;
  uint64_t v1 = (void *)v0[21];
  sub_1001E41E0(v0[24]);

  uint64_t v2 = v0[20] + 1;
  if (v2 == v0[19])
  {
    uint64_t v3 = v0[23];
    swift_bridgeObjectRelease();
    uint64_t v4 = v0[16];
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v26 = v3;
      id v28 = v0;
      swift_bridgeObjectRetain_n();
      uint64_t v27 = v4;
      uint64_t v6 = (uint64_t *)(v4 + 64);
      do
      {
        uint64_t v7 = *(v6 - 3);
        uint64_t v35 = *(v6 - 4);
        uint64_t v8 = *(v6 - 1);
        uint64_t v9 = v6[1];
        uint64_t v33 = *v6;
        uint64_t v34 = *(v6 - 2);
        uint64_t v10 = v6[3];
        uint64_t v11 = v6[5];
        uint64_t v31 = v6[4];
        uint64_t v32 = v6[2];
        uint64_t v12 = v6[7];
        uint64_t v30 = v6[6];
        os_log_type_t v13 = static os_log_type_t.default.getter();
        Class v14 = (void *)HKLogActivity;
        os_log_type_t v36 = v13;
        if (os_log_type_enabled(HKLogActivity, v13))
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          log = v14;
          uint64_t v15 = swift_slowAlloc();
          uint64_t v37 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315138;
          void v28[2] = v35;
          v28[3] = v7;
          v28[4] = v34;
          v28[5] = v8;
          v28[6] = v33;
          v28[7] = v9;
          v28[8] = v32;
          v28[9] = v10;
          v28[10] = v31;
          v28[11] = v11;
          _OWORD v28[12] = v30;
          v28[13] = v12;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v16 = String.init<A>(describing:)();
          *(void *)(v15 + 4) = sub_10008F1F4(v16, v17, &v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, log, v36, "Loaded account device %s", (uint8_t *)v15, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        v6 += 12;
        --v5;
      }
      while (v5);
      uint64_t v4 = v27;
      swift_bridgeObjectRelease();
      uint64_t v0 = v28;
      uint64_t v3 = v26;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v20 = *(os_unfair_lock_s **)(v0[17] + 32);
    *(void *)(swift_task_alloc() + 16) = v4;
    id v21 = v20 + 4;
    v20 += 6;
    os_unfair_lock_lock(v20);
    sub_10000766C(v21);
    os_unfair_lock_unlock(v20);
    if (!v3)
    {
      swift_task_dealloc();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v25 = (void (*)(void))v0[1];
      v25();
    }
  }
  else
  {
    v0[20] = v2;
    uint64_t v18 = v0[18];
    if ((v18 & 0xC000000000000001) != 0) {
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v19 = *(id *)(v18 + 8 * v2 + 32);
    }
    id v22 = v19;
    v0[21] = v19;
    NSString v23 = (void *)swift_task_alloc();
    v0[22] = v23;
    void *v23 = v0;
    v23[1] = sub_100236654;
    uint64_t v24 = v0[17];
    v23[28] = v22;
    v23[29] = v24;
    _swift_task_switch(sub_100237244, 0, 0);
  }
}

uint64_t sub_100236C5C()
{
  id v47 = v0;
  os_log_type_t v1 = static os_log_type_t.error.getter();
  uint64_t v2 = (void *)HKLogActivity;
  os_log_type_t v3 = v1;
  BOOL v4 = os_log_type_enabled(HKLogActivity, v1);
  uint64_t v5 = (void *)v0[21];
  if (v4)
  {
    id v6 = v5;
    swift_errorRetain();
    id v7 = v6;
    swift_errorRetain();
    uint64_t v8 = v2;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    *(void *)(v9 + 4) = v7;
    *uint64_t v10 = v7;

    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v9 + 14) = v11;
    v10[1] = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v3, "Error while fetching account device: %@ %@", (uint8_t *)v9, 0x16u);
    sub_1000AFA94((uint64_t *)&unk_100955620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
  }
  uint64_t v12 = v0[20] + 1;
  if (v12 == v0[19])
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = v0[16];
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v37 = v0;
      swift_bridgeObjectRetain_n();
      uint64_t v36 = v13;
      uint64_t v15 = (uint64_t *)(v13 + 64);
      do
      {
        uint64_t v17 = *(v15 - 4);
        uint64_t v16 = *(v15 - 3);
        uint64_t v18 = *(v15 - 1);
        uint64_t v19 = v15[1];
        uint64_t v43 = *v15;
        uint64_t v44 = *(v15 - 2);
        uint64_t v20 = v15[3];
        uint64_t v21 = v15[5];
        uint64_t v41 = v15[4];
        uint64_t v42 = v15[2];
        uint64_t v22 = v15[7];
        uint64_t v40 = v15[6];
        os_log_type_t v23 = static os_log_type_t.default.getter();
        uint64_t v24 = (void *)HKLogActivity;
        os_log_type_t v45 = v23;
        if (os_log_type_enabled(HKLogActivity, v23))
        {
          uint64_t v39 = v22;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          log = v24;
          uint64_t v25 = swift_slowAlloc();
          uint64_t v46 = swift_slowAlloc();
          *(_DWORD *)uint64_t v25 = 136315138;
          _OWORD v37[2] = v17;
          v37[3] = v16;
          v37[4] = v44;
          v37[5] = v18;
          v37[6] = v43;
          v37[7] = v19;
          v37[8] = v42;
          v37[9] = v20;
          v37[10] = v41;
          v37[11] = v21;
          v37[12] = v40;
          v37[13] = v39;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v26 = String.init<A>(describing:)();
          *(void *)(v25 + 4) = sub_10008F1F4(v26, v27, &v46);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, log, v45, "Loaded account device %s", (uint8_t *)v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        v15 += 12;
        --v14;
      }
      while (v14);
      uint64_t v13 = v36;
      swift_bridgeObjectRelease();
      uint64_t v0 = v37;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v30 = *(void *)(v0[17] + 32);
    *(void *)(swift_task_alloc() + 16) = v13;
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 24));
    sub_10000766C((void *)(v30 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 24));
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
  else
  {
    v0[20] = v12;
    uint64_t v28 = v0[18];
    if ((v28 & 0xC000000000000001) != 0) {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v29 = *(id *)(v28 + 8 * v12 + 32);
    }
    id v31 = v29;
    v0[21] = v29;
    uint64_t v32 = (void *)swift_task_alloc();
    v0[22] = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_100236654;
    uint64_t v33 = v0[17];
    v32[28] = v31;
    v32[29] = v33;
    return _swift_task_switch(sub_100237244, 0, 0);
  }
}

uint64_t sub_100237224(uint64_t a1)
{
  *(void *)(v2 + 224) = a1;
  *(void *)(v2 + 232) = v1;
  return _swift_task_switch(sub_100237244, 0, 0);
}

uint64_t sub_100237244()
{
  uint64_t v1 = *(void **)(v0[29] + 24);
  v0[30] = v1;
  if (v1)
  {
    uint64_t v2 = v0[28];
    v0[2] = v0;
    v0[7] = v0 + 27;
    v0[3] = sub_1002373E0;
    uint64_t v3 = swift_continuation_init();
    v0[22] = _NSConcreteStackBlock;
    v0[23] = 0x40000000;
    v0[24] = sub_100237788;
    v0[25] = &unk_1008BCC68;
    v0[26] = v3;
    [v1 deviceListWithContext:v2 completion:v0 + 22];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    static os_log_type_t.default.getter();
    id v4 = HKLogActivity;
    os_log(_:dso:log:_:_:)();

    uint64_t v5 = (uint64_t (*)(void *))v0[1];
    return v5(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1002373E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 248) = v1;
  if (v1) {
    uint64_t v2 = sub_100237718;
  }
  else {
    uint64_t v2 = sub_1002374F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002374F0()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (v1)
  {
    id v2 = [*(id *)(v0 + 216) deviceList];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v19 = v1;
      sub_10007E2D8(0, &qword_100950FB8);
      unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v4 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t result = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v5 = result;
        if (result) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
        if (v5)
        {
LABEL_5:
          if (v5 < 1)
          {
            __break(1u);
            return result;
          }
          uint64_t v7 = 0;
          uint64_t v8 = _swiftEmptyArrayStorage;
          do
          {
            if ((v4 & 0xC000000000000001) != 0) {
              id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v9 = *(id *)(v4 + 8 * v7 + 32);
            }
            sub_10023802C(v9, (uint64_t *)(v0 + 80));
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v8 = sub_1001E735C(0, v8[2] + 1, 1, v8);
            }
            unint64_t v11 = v8[2];
            unint64_t v10 = v8[3];
            if (v11 >= v10 >> 1) {
              uint64_t v8 = sub_1001E735C((void *)(v10 > 1), v11 + 1, 1, v8);
            }
            ++v7;
            void v8[2] = v11 + 1;
            uint64_t v12 = &v8[12 * v11];
            long long v13 = *(_OWORD *)(v0 + 96);
            void v12[2] = *(_OWORD *)(v0 + 80);
            void v12[3] = v13;
            long long v14 = *(_OWORD *)(v0 + 112);
            long long v15 = *(_OWORD *)(v0 + 128);
            long long v16 = *(_OWORD *)(v0 + 160);
            v12[6] = *(_OWORD *)(v0 + 144);
            v12[7] = v16;
            v12[4] = v14;
            uint64_t v12[5] = v15;
          }
          while (v5 != v7);
          goto LABEL_19;
        }
      }
      uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_19:
      uint64_t v17 = *(void **)(v0 + 240);

      swift_bridgeObjectRelease_n();
      goto LABEL_20;
    }
  }
  uint64_t v17 = *(void **)(v0 + 240);

  uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_20:

  uint64_t v18 = *(uint64_t (**)(void *))(v0 + 8);
  return v18(v8);
}

uint64_t sub_100237718()
{
  uint64_t v1 = *(void **)(v0 + 240);
  swift_willThrow();

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100237788(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000AFA94(&qword_10095C080);
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    unint64_t v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_100238200((uint64_t)&v11, v8);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10023784C()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100237894()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000AFA94(&qword_10094B7A0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  id v7 = (void *)swift_allocObject();
  v7[2] = 0;
  _OWORD v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_100058A1C((uint64_t)v4);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_100950FB0;
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t destroy for AccountDevice()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AccountDevice(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AccountDevice(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AccountDevice(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void *assignWithTake for AccountDevice(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountDevice(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountDevice(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_100237F00()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100237F40(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10005DB5C;
  return sub_1000E7F3C(a1, v4, v5, v6);
}

uint64_t sub_100237FF4()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10023802C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 name];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v7;
    uint64_t v35 = v6;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
  }
  id v8 = [a1 buildNumber];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v11;
    uint64_t v33 = v10;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  id v12 = [a1 serialNumber];
  if (v12)
  {
    long long v13 = v12;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v15 = 0;
  }
  id v16 = [a1 operatingSystemName];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  id v21 = [a1 operatingSystemVersion];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
  }
  id v26 = [a1 model];
  if (v26)
  {
    unint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
  }
  else
  {

    uint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  *a2 = v35;
  a2[1] = v34;
  a2[2] = v31;
  a2[3] = v15;
  a2[4] = v33;
  a2[5] = v32;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v23;
  a2[9] = v25;
  a2[10] = v28;
  a2[11] = v30;
}

uint64_t sub_100238200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_100950FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for UnitSettingsDistanceUnit(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100238334);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitSettingsDistanceUnit()
{
  return &type metadata for UnitSettingsDistanceUnit;
}

void sub_10023836C(void *a1@<X8>)
{
  *a1 = &off_1008B3428;
}

void sub_10023837C(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000030;
  }
  else {
    unint64_t v2 = 0xD00000000000002BLL;
  }
  unint64_t v3 = 0x80000001007BAD00;
  if (*v1) {
    unint64_t v3 = 0x80000001007BACC0;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1002383C4()
{
  unint64_t result = qword_100950FD0;
  if (!qword_100950FD0)
  {
    sub_1000A1370(&qword_100950FD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950FD0);
  }
  return result;
}

unint64_t sub_100238424()
{
  unint64_t result = qword_100950FE0;
  if (!qword_100950FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100950FE0);
  }
  return result;
}

uint64_t sub_100238478@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1002384A8(uint64_t a1)
{
  uint64_t v1 = 0;
  switch(a1)
  {
    case 1:
      os_log_type_t v7 = static os_log_type_t.error.getter();
      id v8 = (void *)HKLogActivity;
      os_log_type_t v9 = v7;
      if (!os_log_type_enabled(HKLogActivity, v7)) {
        goto LABEL_10;
      }
      uint64_t v10 = v8;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134217984;
      uint64_t v1 = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v9, "Unexpected distance units %lu. Setting distance unit to kilometers", v11, 0xCu);
      swift_slowDealloc();

      break;
    case 2:
      goto LABEL_10;
    case 3:
      return v1;
    case 4:
    case 5:
      os_log_type_t v2 = static os_log_type_t.error.getter();
      unint64_t v3 = (void *)HKLogActivity;
      os_log_type_t v4 = v2;
      if (os_log_type_enabled(HKLogActivity, v2))
      {
        uint64_t v5 = v3;
        unsigned int v6 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unsigned int v6 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v5, v4, "Unexpected distance units %lu. Setting distance unit to miles", v6, 0xCu);
        swift_slowDealloc();
      }
      uint64_t v1 = 0;
      break;
    default:
      os_log_type_t v12 = static os_log_type_t.error.getter();
      long long v13 = (void *)HKLogActivity;
      os_log_type_t v14 = v12;
      if (os_log_type_enabled(HKLogActivity, v12))
      {
        uint64_t v15 = v13;
        id v16 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v16 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v15, v14, "Unexpected distance units %lu. Setting distance unit to kilometers", v16, 0xCu);
        swift_slowDealloc();
      }
LABEL_10:
      uint64_t v1 = 1;
      break;
  }
  return v1;
}

uint64_t *sub_100238724(uint64_t *a1, uint64_t *a2, int *a3)
{
  os_log_type_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *a2;
    *os_log_type_t v4 = *a2;
    os_log_type_t v4 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    id v8 = (char *)a1 + v7;
    os_log_type_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for AttributedString();
    uint64_t v11 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v11((unsigned char *)v4 + v12, (char *)a2 + v12, v10);
    uint64_t v13 = a3[8];
    uint64_t v14 = a3[9];
    uint64_t v15 = (uint64_t *)((char *)v4 + v13);
    id v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (char *)v4 + v14;
    uint64_t v19 = (char *)a2 + v14;
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    v18[24] = v19[24];
    *((void *)v18 + 2) = *((void *)v19 + 2);
    uint64_t v21 = a3[10];
    uint64_t v22 = a3[11];
    uint64_t v23 = (uint64_t *)((char *)v4 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    id v26 = (char *)a2 + v22;
    __dst = (char *)v4 + v22;
    void v23[2] = v24[2];
    uint64_t v27 = type metadata accessor for Date();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v29(v26, 1, v27))
    {
      uint64_t v30 = sub_1000AFA94((uint64_t *)&unk_10095B890);
      memcpy(__dst, v26, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t sub_100238998(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for AttributedString();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[7], v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = a1 + a2[11];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

unsigned char *sub_100238B14(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = &a1[v13];
  uint64_t v18 = &a2[v13];
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = v19;
  v17[24] = v18[24];
  *((void *)v17 + 2) = *((void *)v18 + 2);
  uint64_t v20 = a3[10];
  uint64_t v21 = a3[11];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = &a2[v21];
  __dst = &a1[v21];
  void v22[2] = v23[2];
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v28(v25, 1, v26))
  {
    uint64_t v29 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(__dst, v25, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 16))(__dst, v25, v26);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
  }
  return a1;
}

unsigned char *sub_100238D38(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  v10(&a1[a3[7]], &a2[a3[7]], v9);
  uint64_t v11 = a3[8];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  swift_retain();
  swift_release();
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_retain();
  swift_release();
  uint64_t v17 = *((void *)v16 + 2);
  v15[24] = v16[24];
  *((void *)v15 + 2) = v17;
  uint64_t v18 = a3[10];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  swift_retain();
  swift_release();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_retain();
  swift_release();
  *((void *)v19 + 2) = *((void *)v20 + 2);
  uint64_t v21 = a3[11];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v19) = v26(v22, 1, v24);
  int v27 = v26(v23, 1, v24);
  if (!v19)
  {
    if (!v27)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 24))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    uint64_t v28 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

unsigned char *sub_100238FE8(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  uint64_t v12 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v14 + 9);
  *uint64_t v13 = *v14;
  uint64_t v15 = a3[10];
  uint64_t v16 = a3[11];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((void *)v17 + 2) = *((void *)v18 + 2);
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

unsigned char *sub_1002391B8(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  uint64_t v12 = a3[8];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (uint64_t *)&a2[v12];
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  swift_release();
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_release();
  *((void *)v18 + 2) = *((void *)v19 + 2);
  v18[24] = v19[24];
  uint64_t v20 = a3[10];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)&a1[v20] = *(void *)&a2[v20];
  swift_release();
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_release();
  *((void *)v21 + 2) = *((void *)v22 + 2);
  uint64_t v23 = a3[11];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v22) = v28(v24, 1, v26);
  int v29 = v28(v25, 1, v26);
  if (!v22)
  {
    if (!v29)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 40))(v24, v25, v26);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_6;
  }
  if (v29)
  {
LABEL_6:
    uint64_t v30 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_100239434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100239448);
}

uint64_t sub_100239448(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(a1 + a3[8] + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v13 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a3[11];
    return v14(v16, a2, v15);
  }
}

uint64_t sub_100239580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100239594);
}

uint64_t sub_100239594(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[8] + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v13 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[11];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

uint64_t type metadata accessor for MetricDetailHeaderView()
{
  uint64_t result = qword_100951040;
  if (!qword_100951040) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100239718()
{
  type metadata accessor for AttributedString();
  if (v0 <= 0x3F)
  {
    sub_1000E383C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_100239818()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_100239834()
{
  qword_100997848 = 0;
  qword_100997850 = 0;
  double result = 2.0;
  xmmword_100997858 = xmmword_100756D20;
  return result;
}

uint64_t sub_100239850()
{
  uint64_t v0 = type metadata accessor for Font.Leading();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000AFA94(&qword_10094C448);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Font.TextStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.subheadline(_:), v7);
  uint64_t v11 = enum case for Font.Design.default(_:);
  uint64_t v12 = type metadata accessor for Font.Design();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v6, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
  static Font.Weight.semibold.getter();
  static Font.system(_:design:weight:)();
  sub_10008DB18((uint64_t)v6, &qword_10094C448);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  uint64_t v14 = Font.leading(_:)();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_100997868 = v14;
  return result;
}

uint64_t sub_100239B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  __chkstk_darwin(v4 - 8);
  uint64_t v119 = (uint64_t)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = (void *)type metadata accessor for Date();
  uint64_t v121 = *(v120 - 1);
  __chkstk_darwin(v120);
  uint64_t v118 = (uint64_t)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v132 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MetricDetailHeaderView();
  uint64_t v12 = *(int *)(v11 + 20);
  *(void *)&long long v123 = v11;
  objc_super v122 = (char *)a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v131 = v8 + 16;
  uint64_t v133 = v14;
  v14(v10, v13, v7);
  uint64_t v24 = Text.init(_:)();
  uint64_t v40 = v15;
  char v17 = v16 & 1;
  uint64_t v18 = Text.tracking(_:)();
  uint64_t v20 = v19;
  LOBYTE(a1) = v21 & 1;
  sub_1000A06C0(v24, v40, v17);
  swift_bridgeObjectRelease();
  LODWORD(v150) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v130 = Text.foregroundStyle<A>(_:)();
  uint64_t v129 = v22;
  LODWORD(v24) = v23;
  uint64_t v134 = v25;
  uint64_t v26 = v20;
  uint64_t v27 = v122;
  sub_1000A06C0(v18, v26, a1);
  uint64_t v28 = (int *)v123;
  swift_bridgeObjectRelease();
  LODWORD(v29) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  v133(v10, &v27[v28[7]], v132);
  uint64_t v132 = Text.init(_:)();
  uint64_t v131 = v38;
  LODWORD(v40) = v39;
  uint64_t v133 = v41;
  if (qword_10094A6D0 != -1) {
    swift_once();
  }
  uint64_t v128 = qword_100997848;
  uint64_t v127 = qword_100997850;
  uint64_t v125 = *((void *)&xmmword_100997858 + 1);
  uint64_t v126 = xmmword_100997858;
  int v124 = static Edge.Set.all.getter();
  uint64_t v42 = &v27[v28[9]];
  long long v43 = *(_OWORD *)v42;
  uint64_t v44 = *((void *)v42 + 2);
  LOBYTE(v42) = v42[24];
  long long v150 = v43;
  uint64_t v151 = v44;
  LOBYTE(v152) = (_BYTE)v42;
  sub_1000AFA94(&qword_100951098);
  Binding.wrappedValue.getter();
  if ((BYTE8(v139) & 1) == 0)
  {
    uint64_t v45 = v119;
    sub_100005D34((uint64_t)&v27[v28[11]], v119);
    uint64_t v46 = v121;
    id v47 = v120;
    if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v121 + 48))(v45, 1, v120) != 1)
    {
      uint64_t v82 = v118;
      (*(void (**)(uint64_t, uint64_t, void *))(v46 + 32))(v118, v45, v47);
      id v83 = &v27[v28[10]];
      long long v84 = *(_OWORD *)v83;
      uint64_t v85 = *((void *)v83 + 2);
      long long v139 = v84;
      uint64_t v140 = v85;
      sub_1000AFA94(&qword_1009510D8);
      Binding.projectedValue.getter();
      long long v123 = v150;
      uint64_t v119 = v151;
      uint64_t v86 = sub_10050F3EC(v82);
      sub_1000A3E18(*v27);
      uint64_t v87 = Color.init(uiColor:)();
      id v88 = [objc_allocWithZone((Class)NSNumberFormatter) init];
      [v88 setNumberStyle:0];
      unsigned __int8 v89 = static Edge.Set.all.getter();
      EdgeInsets.init(_all:)();
      long long v139 = v123;
      uint64_t v140 = v119;
      uint64_t v141 = v86;
      uint64_t v142 = v87;
      id v143 = v88;
      uint64_t v144 = v89;
      uint64_t v145 = v90;
      uint64_t v146 = v91;
      uint64_t v147 = v92;
      uint64_t v148 = v93;
      __int16 v149 = 0;
      sub_1000AFA94(&qword_1009510A0);
      sub_1000AFA94(&qword_1009510A8);
      sub_10023A6AC();
      sub_10023A77C();
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(uint64_t, void *))(v121 + 8))(v82, v47);
      uint64_t v70 = *((void *)&v150 + 1);
      uint64_t v69 = v150;
      uint64_t v71 = v151;
      uint64_t v72 = v152;
      uint64_t v73 = v153;
      id v74 = v154;
      uint64_t v75 = v155;
      uint64_t v76 = v156;
      uint64_t v77 = v157;
      uint64_t v78 = v158;
      uint64_t v79 = v159;
      char v80 = v160;
      char v81 = v161;
      goto LABEL_10;
    }
    sub_10008DB18(v45, (uint64_t *)&unk_10095B890);
  }
  LODWORD(v119) = v40;
  LODWORD(v120) = v29;
  LODWORD(v121) = v24;
  uint64_t v48 = &v27[v28[8]];
  uint64_t v49 = *((void *)v48 + 1);
  *(void *)&long long v150 = *(void *)v48;
  *((void *)&v150 + 1) = v49;
  sub_1000A06D0();
  swift_bridgeObjectRetain();
  uint64_t v50 = Text.init<A>(_:)();
  uint64_t v52 = v51;
  char v54 = v53;
  if (qword_10094A6D8 != -1) {
    swift_once();
  }
  uint64_t v55 = Text.font(_:)();
  uint64_t v24 = v56;
  uint64_t v40 = v57;
  uint64_t v29 = v58 & 1;
  sub_1000A06C0(v50, v52, v54 & 1);
  swift_bridgeObjectRelease();
  unsigned __int8 v59 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  objc_super v61 = v60;
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v68 = static HierarchicalShapeStyle.secondary.getter();
  *(void *)&long long v139 = v55;
  *((void *)&v139 + 1) = v24;
  uint64_t v140 = v29;
  uint64_t v141 = v40;
  uint64_t v142 = v59;
  id v143 = v61;
  uint64_t v144 = v63;
  uint64_t v145 = v65;
  uint64_t v146 = v67;
  uint64_t v147 = v68 << 32;
  uint64_t v148 = 0;
  __int16 v149 = 256;
  sub_1000AFA94(&qword_1009510A0);
  sub_1000AFA94(&qword_1009510A8);
  sub_10023A6AC();
  sub_10023A77C();
  _ConditionalContent<>.init(storage:)();
  uint64_t v70 = *((void *)&v150 + 1);
  uint64_t v69 = v150;
  uint64_t v71 = v151;
  uint64_t v72 = v152;
  uint64_t v73 = v153;
  id v74 = v154;
  uint64_t v75 = v155;
  uint64_t v76 = v156;
  uint64_t v77 = v157;
  uint64_t v78 = v158;
  uint64_t v79 = v159;
  char v80 = v160;
  char v81 = v161;
  LOBYTE(v24) = v121;
  LOBYTE(v29) = (_BYTE)v120;
  LOBYTE(v40) = v119;
LABEL_10:
  uint64_t v119 = v73;
  uint64_t v120 = v74;
  uint64_t v121 = v75;
  char v94 = v24 & 1;
  char v135 = v24 & 1;
  char v95 = v40 & 1;
  LOBYTE(v150) = v94;
  LOBYTE(v139) = 0;
  char v138 = v40 & 1;
  char v137 = 0;
  char v136 = v81;
  uint64_t v96 = v130;
  *(void *)a2 = v130;
  uint64_t v97 = v96;
  uint64_t v98 = v129;
  *(void *)(a2 + 8) = v129;
  uint64_t v99 = v98;
  *(unsigned char *)(a2 + 16) = v94;
  *(void *)(a2 + 24) = v134;
  *(unsigned char *)(a2 + 32) = v29;
  *(void *)(a2 + 40) = v31;
  *(void *)(a2 + 48) = v33;
  *(void *)(a2 + 56) = v35;
  *(void *)(a2 + 64) = v37;
  *(unsigned char *)(a2 + 72) = 0;
  uint64_t v100 = v131;
  *(void *)(a2 + 80) = v132;
  *(void *)(a2 + 88) = v100;
  *(unsigned char *)(a2 + 96) = v40 & 1;
  LODWORD(v123) = v40 & 1;
  *(void *)(a2 + 104) = v133;
  LOBYTE(v100) = v81;
  *(unsigned char *)(a2 + 112) = v124;
  uint64_t v101 = v127;
  *(void *)(a2 + 120) = v128;
  *(void *)(a2 + 128) = v101;
  uint64_t v102 = v125;
  *(void *)(a2 + 136) = v126;
  *(void *)(a2 + 144) = v102;
  *(unsigned char *)(a2 + 152) = 0;
  objc_super v122 = (char *)v69;
  *(void *)(a2 + 160) = v69;
  *(void *)(a2 + 168) = v70;
  *(void *)(a2 + 176) = v71;
  *(void *)(a2 + 184) = v72;
  *(void *)(a2 + 192) = v73;
  *(void *)(a2 + 200) = v74;
  *(void *)(a2 + 208) = v75;
  *(void *)(a2 + 216) = v76;
  *(void *)(a2 + 224) = v77;
  *(void *)(a2 + 232) = v78;
  *(void *)(a2 + 240) = v79;
  *(unsigned char *)(a2 + 248) = v80;
  *(unsigned char *)(a2 + 249) = v100;
  char v103 = v100;
  uint64_t v117 = v70;
  char v104 = v71;
  uint64_t v118 = v72;
  uint64_t v105 = v77;
  uint64_t v106 = v78;
  uint64_t v116 = v79;
  sub_1000A1750(v97, v99, v94);
  swift_bridgeObjectRetain();
  sub_1000A1750(v132, v131, v95);
  swift_bridgeObjectRetain();
  uint64_t v114 = v79;
  uint64_t v107 = (uint64_t)v122;
  uint64_t v108 = v70;
  uint64_t v109 = v72;
  uint64_t v110 = v119;
  id v111 = v120;
  uint64_t v112 = v121;
  sub_10023A890((uint64_t)v122, v108, v104, v109, v119, v120, v121, v76, v105, v106, v114, v80, v103);
  sub_10023A938(v107, v117, v104, v118, v110, v111, v112, v76, v105, v106, v116, v80, v103);
  sub_1000A06C0(v132, v131, v123);
  swift_bridgeObjectRelease();
  sub_1000A06C0(v130, v129, v135);
  return swift_bridgeObjectRelease();
}

void *sub_10023A5C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = static HorizontalAlignment.leading.getter();
  sub_100239B18(v1, (uint64_t)v5);
  *(_OWORD *)&__src[199] = v5[12];
  *(_OWORD *)&__src[215] = v5[13];
  *(_OWORD *)&__src[231] = v6[0];
  *(_OWORD *)&__src[241] = *(_OWORD *)((char *)v6 + 10);
  *(_OWORD *)&__src[135] = v5[8];
  *(_OWORD *)&__src[151] = v5[9];
  *(_OWORD *)&__src[167] = v5[10];
  *(_OWORD *)&__src[183] = v5[11];
  *(_OWORD *)&__src[71] = v5[4];
  *(_OWORD *)&__src[87] = v5[5];
  *(_OWORD *)&__src[103] = v5[6];
  *(_OWORD *)&__src[119] = v5[7];
  *(_OWORD *)&__src[7] = v5[0];
  *(_OWORD *)&__src[23] = v5[1];
  *(_OWORD *)&__src[39] = v5[2];
  *(_OWORD *)&__src[55] = v5[3];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  return memcpy((void *)(a1 + 17), __src, 0x101uLL);
}

unint64_t sub_10023A6AC()
{
  unint64_t result = qword_1009510B0;
  if (!qword_1009510B0)
  {
    sub_1000A1370(&qword_1009510A0);
    sub_10023A728();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009510B0);
  }
  return result;
}

unint64_t sub_10023A728()
{
  unint64_t result = qword_1009510B8;
  if (!qword_1009510B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009510B8);
  }
  return result;
}

unint64_t sub_10023A77C()
{
  unint64_t result = qword_1009510C0;
  if (!qword_1009510C0)
  {
    sub_1000A1370(&qword_1009510A8);
    sub_10023A81C();
    sub_1000A132C(&qword_10094D9C8, &qword_10094D9D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009510C0);
  }
  return result;
}

unint64_t sub_10023A81C()
{
  unint64_t result = qword_1009510C8;
  if (!qword_1009510C8)
  {
    sub_1000A1370(&qword_1009510D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009510C8);
  }
  return result;
}

id sub_10023A890(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  if (a13)
  {
    sub_1000A1750(a1, a2, a3 & 1);
    return (id)swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    return a6;
  }
}

uint64_t sub_10023A938(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  if (a13)
  {
    sub_1000A06C0(a1, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    return swift_release();
  }
}

uint64_t sub_10023A9D4()
{
  return sub_1000A132C(&qword_1009510E0, &qword_1009510E8);
}

uint64_t sub_10023AA10(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 392) = a2;
  *(void *)(v4 + 400) = v3;
  *(unsigned char *)(v4 + 448) = a3;
  *(void *)(v4 + 384) = a1;
  return _swift_task_switch(sub_10023AA38, 0, 0);
}

uint64_t sub_10023AA38()
{
  uint64_t v1 = v0 + 376;
  switch(*(unsigned char *)(v0 + 448))
  {
    case 8:
    case 0x11:
      uint64_t v2 = v0 + 144;
      uint64_t v3 = *(void *)(v0 + 392);
      uint64_t v4 = *(void **)(*(void *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      uint64_t v5 = *(void *)(v0 + 384);
      *(void *)(v0 + 144) = v0;
      *(void *)(v0 + 184) = v1;
      *(void *)(v0 + 152) = sub_10023AEA0;
      uint64_t v6 = swift_continuation_init();
      *(void *)(v0 + 336) = _NSConcreteStackBlock;
      *(void *)(v0 + 344) = 0x40000000;
      *(void *)(v0 + 352) = sub_10023B660;
      *(void *)(v0 + 360) = &unk_1008BCD70;
      *(void *)(v0 + 368) = v6;
      [v4 powerSamplesForWorkout:v5 workoutActivity:v3 completion:v0 + 336];
      goto LABEL_10;
    case 9:
    case 0x12:
      uint64_t v2 = v0 + 208;
      uint64_t v7 = *(void *)(v0 + 392);
      uint64_t v8 = *(void **)(*(void *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      uint64_t v9 = *(void *)(v0 + 384);
      *(void *)(v0 + 208) = v0;
      *(void *)(v0 + 248) = v1;
      *(void *)(v0 + 216) = sub_10023AFB0;
      uint64_t v10 = swift_continuation_init();
      *(void *)(v0 + 336) = _NSConcreteStackBlock;
      *(void *)(v0 + 344) = 0x40000000;
      *(void *)(v0 + 352) = sub_10023B660;
      *(void *)(v0 + 360) = &unk_1008BCD58;
      *(void *)(v0 + 368) = v10;
      [v8 cadenceSamplesForWorkout:v9 workoutActivity:v7 completion:v0 + 336];
      goto LABEL_10;
    case 0xA:
      uint64_t v2 = v0 + 80;
      uint64_t v21 = *(void *)(v0 + 392);
      uint64_t v22 = *(void **)(*(void *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      uint64_t v23 = *(void *)(v0 + 384);
      *(void *)(v0 + 80) = v0;
      *(void *)(v0 + 120) = v1;
      *(void *)(v0 + 88) = sub_10023B2E0;
      uint64_t v24 = swift_continuation_init();
      *(void *)(v0 + 336) = _NSConcreteStackBlock;
      *(void *)(v0 + 344) = 0x40000000;
      *(void *)(v0 + 352) = sub_10023B660;
      *(void *)(v0 + 360) = &unk_1008BCD10;
      *(void *)(v0 + 368) = v24;
      [v22 groundContactTimeSamplesForWorkout:v23 workoutActivity:v21 completion:v0 + 336];
      goto LABEL_10;
    case 0xB:
      uint64_t v2 = v0 + 16;
      uint64_t v11 = *(void *)(v0 + 392);
      uint64_t v12 = *(void **)(*(void *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      uint64_t v13 = *(void *)(v0 + 384);
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v1;
      *(void *)(v0 + 24) = sub_10023B0C0;
      uint64_t v14 = swift_continuation_init();
      *(void *)(v0 + 336) = _NSConcreteStackBlock;
      *(void *)(v0 + 344) = 0x40000000;
      *(void *)(v0 + 352) = sub_10023B660;
      *(void *)(v0 + 360) = &unk_1008BCD40;
      *(void *)(v0 + 368) = v14;
      [v12 verticalOscillationSamplesForWorkout:v13 workoutActivity:v11 completion:v0 + 336];
      goto LABEL_10;
    case 0xC:
      uint64_t v2 = v0 + 272;
      uint64_t v15 = *(void *)(v0 + 392);
      char v16 = *(void **)(*(void *)(v0 + 400) + OBJC_IVAR____TtC10FitnessApp19MetricsDataProvider_workoutDataCalculator);
      uint64_t v17 = *(void *)(v0 + 384);
      *(void *)(v0 + 272) = v0;
      *(void *)(v0 + 312) = v1;
      *(void *)(v0 + 280) = sub_10023B1D0;
      uint64_t v18 = swift_continuation_init();
      *(void *)(v0 + 336) = _NSConcreteStackBlock;
      *(void *)(v0 + 344) = 0x40000000;
      *(void *)(v0 + 352) = sub_10023B660;
      *(void *)(v0 + 360) = &unk_1008BCD28;
      *(void *)(v0 + 368) = v18;
      [v16 strideLengthSamplesForWorkout:v17 workoutActivity:v15 completion:v0 + 336];
LABEL_10:
      uint64_t result = _swift_continuation_await(v2);
      break;
    default:
      uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v19(0);
      break;
  }
  return result;
}

uint64_t sub_10023AEA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 408) = v1;
  if (v1) {
    uint64_t v2 = sub_10023B570;
  }
  else {
    uint64_t v2 = sub_10023BEEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023AFB0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240);
  *(void *)(*(void *)v0 + 416) = v1;
  if (v1) {
    uint64_t v2 = sub_10023B5E8;
  }
  else {
    uint64_t v2 = sub_10023BEEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023B0C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 424) = v1;
  if (v1) {
    uint64_t v2 = sub_10023B408;
  }
  else {
    uint64_t v2 = sub_10023BEEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023B1D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 304);
  *(void *)(*(void *)v0 + 432) = v1;
  if (v1) {
    uint64_t v2 = sub_10023B480;
  }
  else {
    uint64_t v2 = sub_10023BEEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023B2E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 440) = v1;
  if (v1) {
    uint64_t v2 = sub_10023B4F8;
  }
  else {
    uint64_t v2 = sub_10023B3F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023B3F0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 376));
}

uint64_t sub_10023B408()
{
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10023B480()
{
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10023B4F8()
{
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10023B570()
{
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10023B5E8()
{
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10023B660(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000AFA94(&qword_10095C080);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v8 = 0;
    if (a2)
    {
      sub_10023BEAC();
      uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v10 = v8;
    sub_10023BE44((uint64_t)&v10, *(void *)(*(void *)(v3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10023B738(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = v3;
  *(void *)(v4 + 16) = swift_getObjectType();
  *(unsigned char *)(v4 + 80) = a3;
  type metadata accessor for Date();
  *(void *)(v4 + 24) = swift_task_alloc();
  *(void *)(v4 + 32) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DateInterval();
  *(void *)(v4 + 40) = v9;
  *(void *)(v4 + 48) = *(void *)(v9 - 8);
  *(void *)(v4 + 56) = swift_task_alloc();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v4 + 64) = v10;
  *(void *)uint64_t v10 = v4;
  *(void *)(v10 + 8) = sub_10023B8B0;
  *(void *)(v10 + 392) = a2;
  *(void *)(v10 + 400) = v5;
  *(unsigned char *)(v10 + 448) = a3;
  *(void *)(v10 + 384) = a1;
  return _swift_task_switch(sub_10023AA38, 0, 0);
}

uint64_t sub_10023B8B0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10023B9B0, 0, 0);
}

void sub_10023B9B0()
{
  uint64_t v42 = v0;
  if (*(void *)(v0 + 72)) {
    unint64_t v1 = *(void *)(v0 + 72);
  }
  else {
    unint64_t v1 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_6;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    double v33 = 0.0;
    double v34 = 0.0;
    BOOL v35 = 1;
    goto LABEL_31;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_30;
  }
LABEL_6:
  if (v2 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v3 = 0;
  int v40 = *(unsigned __int8 *)(v39 + 80);
  unint64_t v4 = v1 & 0xC000000000000001;
  uint64_t v38 = (void (**)(uint64_t, uint64_t))(*(void *)(v39 + 48) + 8);
  double v5 = 0.0;
  double v6 = 0.0;
  do
  {
    if (v4) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v1 + 8 * v3 + 32);
    }
    uint64_t v8 = v7;
    id v9 = [v7 quantityType];
    id v10 = [v9 aggregationStyle];

    double v11 = 1.0;
    if (v10) {
      goto LABEL_16;
    }
    uint64_t v12 = *(void *)(v39 + 56);
    uint64_t v13 = (void *)v1;
    uint64_t v14 = *(void *)(v39 + 40);
    uint64_t v15 = v2;
    id v16 = [v8 startDate];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v17 = [v8 endDate];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v2 = v15;
    DateInterval.init(start:end:)();
    DateInterval.duration.getter();
    double v11 = v18;
    (*v38)(v12, v14);
    if (v11 > 0.0)
    {
LABEL_16:
      id v19 = [v8 quantity];
      [v19 _value];
      double v21 = v20;

      if (v40 == 9)
      {
        id v22 = [v8 quantity];
        [v22 _value];
        double v24 = v23;

        double v21 = v24 * 60.0;
      }
      else
      {
      }
      double v5 = v5 + v11;
      double v6 = v6 + v21;
    }
    else
    {
      os_log_type_t v25 = static os_log_type_t.error.getter();
      uint64_t v26 = (void *)HKLogWorkouts;
      os_log_type_t v27 = v25;
      if (os_log_type_enabled(HKLogWorkouts, v25))
      {
        id v28 = v8;
        log = v26;
        uint64_t v29 = swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315394;
        uint64_t v31 = _typeName(_:qualified:)();
        *(void *)(v29 + 4) = sub_10008F1F4(v31, v32, &v41);
        uint64_t v2 = v15;
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2112;
        *(void *)(v29 + 14) = v28;
        *uint64_t v30 = v28;

        _os_log_impl((void *)&_mh_execute_header, log, v27, "%s Cumulative sample missing duration, rejecting data: %@", (uint8_t *)v29, 0x16u);
        sub_1000AFA94((uint64_t *)&unk_100955620);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      unint64_t v1 = (unint64_t)v13;
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  if (v5 > 0.0) {
    double v33 = v6;
  }
  else {
    double v33 = 0.0;
  }
  if (v5 > 0.0) {
    double v34 = v5;
  }
  else {
    double v34 = 0.0;
  }
  BOOL v35 = v5 <= 0.0;
LABEL_31:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(void (**)(void, void, BOOL))(v39 + 8);
  v36(*(void *)&v33, *(void *)&v34, v35);
}

uint64_t sub_10023BE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_100951100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10023BEAC()
{
  unint64_t result = qword_100951108;
  if (!qword_100951108)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100951108);
  }
  return result;
}

uint64_t sub_10023BFD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000AFA94((uint64_t *)&unk_1009546C0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  double v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v15[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider____lazy_storage___currentCalendar;
  swift_beginAccess();
  sub_1000AEF2C(v9, (uint64_t)v8, (uint64_t *)&unk_1009546C0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_10008DB18((uint64_t)v8, (uint64_t *)&unk_1009546C0);
  if (qword_10094A5F8 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_1000876DC(v10, (uint64_t)qword_100997640);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v13(a1, v12, v10);
  v13((uint64_t)v6, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_100241AF0((uint64_t)v6, v9);
  return swift_endAccess();
}

id sub_10023C1FC()
{
  [*(id *)&v0[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache] removeObserver:v0];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityDataProvider();
  return [super dealloc];
}

uint64_t sub_10023C38C(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v1 = type metadata accessor for DateInterval();
  uint64_t v34 = *(void *)(v1 - 8);
  uint64_t v35 = v1;
  __chkstk_darwin(v1);
  unint64_t v32 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar.Component();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Calendar();
  uint64_t v7 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v30 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v29 = (char *)&v29 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v31 = (char *)&v29 - v20;
  __chkstk_darwin(v19);
  id v22 = (char *)&v29 - v21;
  Date.init()();
  sub_10023BFD0((uint64_t)v9);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Calendar.Component.day(_:), v3);
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
    sub_10008DB18((uint64_t)v12, (uint64_t *)&unk_10095B890);
    char v23 = 0;
  }
  else
  {
    double v24 = v31;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v31, v12, v13);
    os_log_type_t v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v25(v29, v24, v13);
    v25(v30, v22, v13);
    uint64_t v26 = v32;
    DateInterval.init(start:end:)();
    char v23 = DateInterval.contains(_:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
    os_log_type_t v27 = *(void (**)(char *, uint64_t))(v14 + 8);
    v27(v24, v13);
    v27(v22, v13);
  }
  return v23 & 1;
}

void *sub_10023C810()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000AFA94(&qword_10094E8A8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DateComponents();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v23 - v10;
  v12.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  if (qword_10094A5F8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Calendar();
  sub_1000876DC(v13, (uint64_t)qword_100997640);
  Class isa = Calendar._bridgeToObjectiveC()().super.isa;
  id v15 = (id)_HKActivityCacheDateComponentsFromDate();

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_9;
  }
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v16(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_9:
    sub_10008DB18((uint64_t)v4, &qword_10094E8A8);
    return _swiftEmptyArrayStorage;
  }
  v16(v11, v4, v5);
  id v17 = [*(id *)(v1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_workoutDataProvider) workoutsByDay];
  sub_1000AFA94((uint64_t *)&unk_1009546A0);
  sub_100067884(&qword_10094F290, (void (*)(uint64_t))&type metadata accessor for DateComponents);
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v18 + 16) || (unint64_t v19 = sub_100529888((uint64_t)v11), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return (void *)v21;
}

void *sub_10023CB74(uint64_t a1)
{
  v22[1] = a1;
  uint64_t v1 = type metadata accessor for Calendar();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DateComponents();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  __chkstk_darwin(v5);
  uint64_t v23 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10094A5E8 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1000876DC(v1, (uint64_t)qword_100997610);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v7, v1);
  sub_1000AFA94((uint64_t *)&unk_1009559B0);
  uint64_t v8 = type metadata accessor for Calendar.Component();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100752410;
  unint64_t v13 = v12 + v11;
  uint64_t v14 = *(void (**)(unint64_t, void, uint64_t))(v9 + 104);
  v14(v13, enum case for Calendar.Component.day(_:), v8);
  v14(v13 + v10, enum case for Calendar.Component.month(_:), v8);
  v14(v13 + 2 * v10, enum case for Calendar.Component.year(_:), v8);
  sub_1000C6A18(v12);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  id v15 = v23;
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  id v16 = *(id *)(v24 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_achievementsDataProvider);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  id v18 = [v16 achievementsForDateComponents:isa];

  if (v18)
  {
    sub_10007E2D8(0, (unint64_t *)&qword_1009556B0);
    sub_100241A88();
    uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    char v20 = sub_10036980C(v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v26);
  return v20;
}

uint64_t sub_10023CF38(void *a1, uint64_t a2, uint64_t (*a3)(void, uint64_t), uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v68 = a7;
  unint64_t v69 = a8;
  uint64_t v70 = a6;
  unint64_t v67 = a5;
  uint64_t v75 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v73 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v71 = *(void *)(v14 - 8);
  uint64_t v72 = v14;
  __chkstk_darwin(v14);
  id v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  uint64_t v19 = __chkstk_darwin(v17);
  char v20 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v54 - v22;
  if (a1)
  {
    uint64_t v65 = v21;
    uint64_t v74 = a4;
    id v24 = a1;
    id v25 = [v24 activeEnergyResults];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v63 = v11;
      uint64_t v66 = a2;
      sub_10007E2D8(0, &qword_1009511C0);
      uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v28 = [v24 appleMoveTimeResults];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v64 = v27;
        uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v31 = [v24 appleExerciseTimeResults];
        if (v31)
        {
          unint64_t v32 = v31;
          uint64_t v62 = v30;
          uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v34 = [v24 appleStandHourResults];
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v60 = v33;
            sub_10007E2D8(0, &qword_1009511C8);
            uint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v37 = [v24 workoutResults];
            if (v37)
            {
              uint64_t v38 = v37;
              sub_10007E2D8(0, &qword_1009511D0);
              uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v59 = *(void *)(v67 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_internalQueue);
              uint64_t v61 = swift_allocObject();
              uint64_t v57 = v36;
              swift_unknownObjectWeakInit();
              uint64_t v39 = v65;
              int v40 = *(void (**)(char *, unint64_t, uint64_t))(v65 + 16);
              v40(v23, v68, v17);
              v40(v20, v69, v17);
              uint64_t v41 = *(unsigned __int8 *)(v39 + 80);
              uint64_t v42 = (v41 + 48) & ~v41;
              unint64_t v67 = (v18 + 7 + v42) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v55 = (v67 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v43 = (v41 + v56 + 8) & ~v41;
              unint64_t v68 = (v18 + 7 + v43) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v69 = (v68 + 23) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v44 = (char *)swift_allocObject();
              uint64_t v45 = v70;
              *((void *)v44 + 2) = v61;
              *((void *)v44 + 3) = v45;
              uint64_t v46 = v64;
              *((void *)v44 + 4) = v62;
              *((void *)v44 + 5) = v46;
              id v47 = &v44[v42];
              uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
              v48(v47, v23, v17);
              *(void *)&v44[v67] = v60;
              *(void *)&v44[v55] = v57;
              *(void *)&v44[v56] = v58;
              v48(&v44[v43], v20, v17);
              uint64_t v49 = &v44[v68];
              uint64_t v50 = v74;
              *(void *)uint64_t v49 = v75;
              *((void *)v49 + 1) = v50;
              *(void *)&v44[v69] = v66;
              aBlock[4] = sub_10024142C;
              aBlock[5] = v44;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_100070394;
              aBlock[3] = &unk_1008BCE10;
              uint64_t v51 = _Block_copy(aBlock);
              swift_retain();
              swift_retain();
              swift_errorRetain();
              static DispatchQoS.unspecified.getter();
              uint64_t v76 = _swiftEmptyArrayStorage;
              sub_100067884((unint64_t *)&qword_100953B50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_1000AFA94((uint64_t *)&unk_1009555E0);
              sub_100075AF8();
              uint64_t v52 = v63;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              OS_dispatch_queue.async(group:qos:flags:execute:)();

              _Block_release(v51);
              (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v52);
              (*(void (**)(char *, uint64_t))(v71 + 8))(v16, v72);
              swift_release();
              return swift_release();
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
          }
        }
        else
        {
        }
        swift_bridgeObjectRelease();
      }
      else
      {
      }
      swift_bridgeObjectRelease();
      a2 = v66;
    }
    else
    {
    }
  }
  return v75(0, a2);
}

uint64_t sub_10023D624(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v75 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  char v81 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for DispatchQoS();
  uint64_t v80 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v79 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v74 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v73 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DateComponents();
  uint64_t v77 = *(void *)(v24 - 8);
  uint64_t v78 = v24;
  __chkstk_darwin(v24);
  uint64_t v76 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v27 = (void *)result;
    uint64_t v71 = a12;
    uint64_t v70 = a11;
    uint64_t v69 = a10;
    uint64_t v68 = a9;
    id v28 = self;
    BOOL v29 = a2 == 2;
    if (a2 == 2) {
      unint64_t v30 = a3;
    }
    else {
      unint64_t v30 = a4;
    }
    id v31 = &selRef_minuteUnit;
    if (!v29) {
      id v31 = &selRef_kilocalorieUnit;
    }
    id v32 = [v28 *v31];
    unint64_t v33 = sub_10023F510(v30, (uint64_t)v32, a5);
    id v34 = sub_10023FF08(v33, (uint64_t)v32, (void *)0xF);
    swift_bridgeObjectRelease();
    id v35 = v32;
    uint64_t v67 = v22;
    id v36 = v35;
    id v72 = v35;
    id v37 = v27;
    uint64_t v38 = sub_10023EAE4(0, v30, (uint64_t)v36);

    uint64_t v39 = (objc_class *)type metadata accessor for ActivityChartData();
    int v40 = (char *)objc_allocWithZone(v39);
    *(void *)&v40[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_moveData] = v34;
    *(void *)&v40[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_exerciseData] = a6;
    *(void *)&v40[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_standData] = a7;
    *(void *)&v40[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_workoutData] = a8;
    *(void *)&v40[OBJC_IVAR____TtC10FitnessApp17ActivityChartData_numberOfActiveMinutes] = v38;
    v84.receiver = v40;
    v84.super_class = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v66 = [super init];
    uint64_t v65 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache;
    id v64 = *(id *)&v37[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache];
    uint64_t v41 = v73;
    Calendar.startOfDay(for:)();
    sub_1000AFA94((uint64_t *)&unk_1009559B0);
    uint64_t v42 = type metadata accessor for Calendar.Component();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = *(void *)(v43 + 72);
    unint64_t v45 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_100752410;
    unint64_t v47 = v46 + v45;
    uint64_t v68 = v19;
    uint64_t v48 = *(void (**)(unint64_t, void, uint64_t))(v43 + 104);
    v48(v47, enum case for Calendar.Component.year(_:), v42);
    v48(v47 + v44, enum case for Calendar.Component.month(_:), v42);
    v48(v47 + 2 * v44, enum case for Calendar.Component.day(_:), v42);
    sub_1000C6A18(v46);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v49 = v76;
    Calendar.dateComponents(_:from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v41, v67);

    uint64_t v50 = (char *)*(id *)&v37[v65];
    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    id v52 = v66;
    [*(id *)&v50[OBJC_IVAR____TtC10FitnessApp22ActivityChartDataCache_cache] setObject:v66 forKey:isa];

    sub_10007E2D8(0, (unint64_t *)&qword_1009555D0);
    char v53 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v54 = (void *)swift_allocObject();
    uint64_t v55 = v70;
    v54[2] = v69;
    v54[3] = v55;
    unint64_t v56 = v52;
    uint64_t v57 = v71;
    v54[4] = v52;
    v54[5] = v57;
    v54[6] = v37;
    aBlock[4] = sub_100241558;
    aBlock[5] = v54;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100070394;
    aBlock[3] = &unk_1008BCE60;
    uint64_t v58 = _Block_copy(aBlock);
    uint64_t v59 = v37;
    swift_retain();
    id v60 = v56;
    swift_errorRetain();
    swift_release();
    uint64_t v61 = v79;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100067884((unint64_t *)&qword_100953B50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AFA94((uint64_t *)&unk_1009555E0);
    sub_100075AF8();
    uint64_t v62 = v81;
    uint64_t v63 = v68;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v58);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v62, v63);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v61, v82);
    return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v49, v78);
  }
  return result;
}

uint64_t sub_10023DE2C(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1(a3, a4);
  type metadata accessor for WidgetCenter();
  static WidgetCenter.shared.getter();
  dispatch thunk of WidgetCenter.reloadAllTimelines()();

  return swift_release();
}

uint64_t sub_10023DE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a3;
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  __chkstk_darwin(v4);
  id v52 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v50 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DateComponents();
  uint64_t v64 = *(void *)(v10 - 8);
  uint64_t v65 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v49 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v58 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache;
  id v57 = *(id *)(v3 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache);
  Calendar.startOfDay(for:)();
  sub_1000AFA94((uint64_t *)&unk_1009559B0);
  uint64_t v15 = type metadata accessor for Calendar.Component();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_100752410;
  unint64_t v20 = v19 + v18;
  uint64_t v21 = *(void (**)(unint64_t, void, uint64_t))(v16 + 104);
  v21(v20, enum case for Calendar.Component.year(_:), v15);
  v21(v20 + v17, enum case for Calendar.Component.month(_:), v15);
  v21(v20 + 2 * v17, enum case for Calendar.Component.day(_:), v15);
  uint64_t v22 = v56;
  sub_1000C6A18(v19);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v9, v60);

  uint64_t v23 = (char *)*(id *)&v22[v58];
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  id v25 = [*(id *)&v23[OBJC_IVAR____TtC10FitnessApp22ActivityChartDataCache_basalEnergyCache] objectForKey:isa];

  if (!v25) {
    goto LABEL_3;
  }
  LODWORD(v60) = sub_10023C38C(v62);
  sub_10007E2D8(0, (unint64_t *)&qword_1009555D0);
  uint64_t v26 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v61;
  v27[2] = v63;
  v27[3] = v28;
  v27[4] = v25;
  aBlock[4] = sub_1002418D0;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100070394;
  aBlock[3] = &unk_1008BCED8;
  BOOL v29 = _Block_copy(aBlock);
  swift_retain();
  id v30 = v25;
  swift_release();
  id v31 = v50;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100067884((unint64_t *)&qword_100953B50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AFA94((uint64_t *)&unk_1009555E0);
  sub_100075AF8();
  id v32 = v52;
  uint64_t v33 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v54 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v53);
  if (v60)
  {
LABEL_3:
    id v34 = *(void **)&v22[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_queryExecutor];
    uint64_t v36 = v64;
    uint64_t v35 = v65;
    id v37 = v49;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v49, v14, v65);
    unint64_t v38 = (*(unsigned __int8 *)(v36 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    unint64_t v39 = (v48 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    int v40 = v14;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))(v41 + v38, v37, v35);
    uint64_t v42 = (void *)(v41 + v39);
    uint64_t v43 = v61;
    *uint64_t v42 = v63;
    v42[1] = v43;
    swift_retain();
    id v44 = v34;
    unint64_t v45 = v22;
    sub_1004130C8(v62, 0, (uint64_t)sub_1002417EC, v41);

    uint64_t v14 = v40;
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v14, v65);
}

uint64_t sub_10023E5B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DateComponents();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  sub_10007E2D8(0, (unint64_t *)&qword_1009555D0);
  uint64_t v26 = static OS_dispatch_queue.main.getter();
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  *(void *)(v17 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  unint64_t v18 = (void *)(v17 + ((v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v19 = v28;
  *unint64_t v18 = v27;
  v18[1] = v19;
  aBlock[4] = sub_1002419F4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100070394;
  aBlock[3] = &unk_1008BCF28;
  unint64_t v20 = _Block_copy(aBlock);
  id v21 = a1;
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100067884((unint64_t *)&qword_100953B50, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AFA94((uint64_t *)&unk_1009555E0);
  sub_100075AF8();
  uint64_t v22 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v23 = (void *)v26;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v11, v31);
}

uint64_t sub_10023E984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = (char *)*(id *)(Strong + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache);

    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    [*(id *)&v8[OBJC_IVAR____TtC10FitnessApp22ActivityChartDataCache_basalEnergyCache] setObject:a2 forKey:isa];
  }
  return a4(a2);
}

uint64_t sub_10023EAE4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v11 = [v8 quantityValue];
      if (v11)
      {
        uint64_t v12 = v11;
        [v11 doubleValueForUnit:a3];
        double v14 = v13;

        if (v14 > 0.0001)
        {
          uint64_t v15 = 1;
          goto LABEL_13;
        }
      }
      else
      {
      }
      uint64_t v15 = 0;
LABEL_13:
      BOOL v16 = __OFADD__(a1, v15);
      a1 += v15;
      if (v16) {
        goto LABEL_17;
      }
      ++v7;
      if (v10 == v6) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10023EC30(uint64_t a1, int64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  int64_t v9 = 0;
  int64_t v10 = a1;
  while (1)
  {
    BOOL v11 = v10 <= a2;
    if (a3 > 0) {
      BOOL v11 = v10 >= a2;
    }
    if (v11) {
      break;
    }
    BOOL v12 = __OFADD__(v10, a3);
    v10 += a3;
    if (v12) {
      int64_t v10 = (v10 >> 63) ^ 0x8000000000000000;
    }
    BOOL v12 = __OFADD__(v9++, 1);
    if (v12)
    {
      __break(1u);
      break;
    }
  }
  sub_1001C90D4(0, v9, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v61 = v6;
  unint64_t v62 = a4 >> 62;
  int64_t v60 = v7;
  if (!v9)
  {
    uint64_t v18 = v8;
LABEL_66:
    BOOL v36 = v18 <= v7;
    if (v6 > 0) {
      BOOL v36 = v18 >= v7;
    }
    if (v36) {
      return result;
    }
    while (1)
    {
      if (__OFADD__(v18, v6)) {
        int64_t v37 = ((v18 + v6) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v37 = v18 + v6;
      }
      uint64_t v38 = v18 + a5;
      if (__OFADD__(v18, a5)) {
        goto LABEL_119;
      }
      if (v62)
      {
        id v57 = result;
        swift_bridgeObjectRetain();
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v40 >= v38) {
          uint64_t v40 = v18 + a5;
        }
        if (v40 < v18) {
          goto LABEL_123;
        }
        swift_bridgeObjectRetain();
        uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t result = v57;
        if (v58 < v18) {
          goto LABEL_124;
        }
      }
      else
      {
        uint64_t v39 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v39 >= v38) {
          uint64_t v40 = v18 + a5;
        }
        else {
          uint64_t v40 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v40 < v18) {
          goto LABEL_123;
        }
        if (v39 < v18) {
          goto LABEL_124;
        }
      }
      if (v18 < 0) {
        goto LABEL_120;
      }
      uint64_t v41 = result;
      if (v62)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = (void *)swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v42 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v42 < v40) {
        goto LABEL_121;
      }
      if (v40 < 0) {
        goto LABEL_122;
      }
      if ((a4 & 0xC000000000000001) != 0 && v18 != v40)
      {
        if (v18 >= (unint64_t)v40) {
          goto LABEL_128;
        }
        sub_10007E2D8(0, &qword_1009511C0);
        Swift::Int v43 = v18;
        do
        {
          Swift::Int v44 = v43 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v43);
          Swift::Int v43 = v44;
        }
        while (v40 != v44);
      }
      if (v62)
      {
        swift_bridgeObjectRetain();
        uint64_t v46 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v47 = v48;
        uint64_t v18 = v49;
        unint64_t v45 = v50;
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0) {
          goto LABEL_94;
        }
      }
      else
      {
        unint64_t v45 = (2 * v40) | 1;
        swift_bridgeObjectRetain();
        uint64_t v46 = a4 & 0xFFFFFFFFFFFFFF8;
        uint64_t v47 = (a4 & 0xFFFFFFFFFFFFFF8) + 32;
        if ((v45 & 1) == 0) {
          goto LABEL_94;
        }
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      id v52 = (void *)swift_dynamicCastClass();
      if (!v52)
      {
        swift_unknownObjectRelease();
        id v52 = _swiftEmptyArrayStorage;
      }
      uint64_t v53 = v52[2];
      uint64_t result = (void *)swift_release();
      if (__OFSUB__(v45 >> 1, v18)) {
        goto LABEL_129;
      }
      if (v53 == (v45 >> 1) - v18)
      {
        uint64_t v51 = (void *)swift_dynamicCastClass();
        if (!v51)
        {
          swift_unknownObjectRelease();
          uint64_t v51 = _swiftEmptyArrayStorage;
        }
        goto LABEL_101;
      }
      swift_unknownObjectRelease();
LABEL_94:
      uint64_t v51 = sub_100369828(v46, v47, v18, v45);
LABEL_101:
      swift_unknownObjectRelease();
      uint64_t result = v41;
      unint64_t v55 = v41[2];
      unint64_t v54 = v41[3];
      uint64_t v6 = v61;
      if (v55 >= v54 >> 1)
      {
        sub_1001C90D4(v54 > 1, v55 + 1, 1);
        uint64_t result = v41;
      }
      result[2] = v55 + 1;
      result[v55 + 4] = v51;
      BOOL v56 = v37 <= v60;
      if (v61 > 0) {
        BOOL v56 = v37 >= v60;
      }
      uint64_t v18 = v37;
      if (v56) {
        return result;
      }
    }
  }
  uint64_t v14 = 0;
  while (1)
  {
    BOOL v15 = v8 <= v7;
    if (v6 > 0) {
      BOOL v15 = v8 >= v7;
    }
    if (v15) {
      break;
    }
    uint64_t v16 = v8 + a5;
    BOOL v17 = __OFADD__(v8, a5);
    uint64_t v18 = v8 + v6;
    uint64_t v64 = result;
    if (__OFADD__(v8, v6))
    {
      if (v6 < 0)
      {
        if (v17) {
          goto LABEL_131;
        }
        uint64_t v18 = 0x8000000000000000;
        unint64_t v19 = a4 >> 62;
        if (!v62)
        {
LABEL_26:
          uint64_t v20 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v20 >= v16) {
            uint64_t v21 = v8 + a5;
          }
          else {
            uint64_t v21 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v21 < v8) {
            goto LABEL_114;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (v17) {
          goto LABEL_130;
        }
        uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v19 = a4 >> 62;
        if (!v62) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (v17) {
        goto LABEL_125;
      }
      unint64_t v19 = a4 >> 62;
      if (!v62) {
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v21 >= v16) {
      uint64_t v21 = v8 + a5;
    }
    if (v21 < v8) {
      goto LABEL_114;
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (void *)swift_bridgeObjectRelease();
LABEL_37:
    if (v20 < v8) {
      goto LABEL_115;
    }
    if (v8 < 0) {
      goto LABEL_116;
    }
    if (v19)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = (void *)swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v22 < v21) {
      goto LABEL_117;
    }
    if (v21 < 0) {
      goto LABEL_118;
    }
    if ((a4 & 0xC000000000000001) != 0 && v8 != v21)
    {
      if (v8 >= (unint64_t)v21) {
        goto LABEL_126;
      }
      sub_10007E2D8(0, &qword_1009511C0);
      Swift::Int v23 = v8;
      do
      {
        Swift::Int v24 = v23 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v23);
        Swift::Int v23 = v24;
      }
      while (v21 != v24);
    }
    if (v19)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v27 = v28;
      uint64_t v8 = v29;
      unint64_t v25 = v30;
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      unint64_t v25 = (2 * v21) | 1;
      swift_bridgeObjectRetain();
      uint64_t v26 = a4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v27 = (a4 & 0xFFFFFFFFFFFFFF8) + 32;
      if ((v25 & 1) == 0) {
        goto LABEL_53;
      }
    }
    uint64_t v59 = v27;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v32 = (void *)swift_dynamicCastClass();
    if (!v32)
    {
      swift_unknownObjectRelease();
      uint64_t v32 = _swiftEmptyArrayStorage;
    }
    uint64_t v33 = v32[2];
    uint64_t result = (void *)swift_release();
    if (__OFSUB__(v25 >> 1, v8)) {
      goto LABEL_127;
    }
    if (v33 == (v25 >> 1) - v8)
    {
      uint64_t v31 = (void *)swift_dynamicCastClass();
      if (!v31)
      {
        swift_unknownObjectRelease();
        uint64_t v31 = _swiftEmptyArrayStorage;
      }
      goto LABEL_60;
    }
    swift_unknownObjectRelease();
    uint64_t v27 = v59;
LABEL_53:
    uint64_t v31 = sub_100369828(v26, v27, v8, v25);
LABEL_60:
    swift_unknownObjectRelease();
    uint64_t result = v64;
    unint64_t v35 = v64[2];
    unint64_t v34 = v64[3];
    if (v35 >= v34 >> 1)
    {
      sub_1001C90D4(v34 > 1, v35 + 1, 1);
      uint64_t result = v64;
    }
    ++v14;
    result[2] = v35 + 1;
    result[v35 + 4] = v31;
    uint64_t v8 = v18;
    uint64_t v7 = v60;
    uint64_t v6 = v61;
    if (v9 == v14) {
      goto LABEL_66;
    }
  }
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

unsigned char *sub_10023F300(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_activitySummaryListener;
  id v4 = objc_allocWithZone((Class)type metadata accessor for ActivitySummaryChangeListener());
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 init];
  v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser] = 0;
  v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isOriginalWheelchairObserver] = 1;
  uint64_t v6 = &v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider____lazy_storage___currentCalendar];
  uint64_t v7 = type metadata accessor for Calendar();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_minValueThresholdForActiveMinutes] = 0x3F1A36E2EB1C432DLL;
  uint64_t v8 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_internalQueue);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_internalQueue] = v8;
  int64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_healthStore);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_healthStore] = v9;
  id v10 = objc_allocWithZone((Class)type metadata accessor for ActivityQueryExecutor());
  id v11 = v9;
  id v12 = v8;
  id v13 = sub_100018AEC(v11);

  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_queryExecutor] = v13;
  uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache] = v14;
  BOOL v15 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_summaryCache] = v15;
  uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_workoutDataProvider);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_workoutDataProvider] = v16;
  BOOL v17 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_achievementsDataProvider);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_achievementsDataProvider] = v17;
  uint64_t v18 = *(void **)(a1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache);
  *(void *)&v5[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache] = v18;
  id v19 = v14;
  id v20 = v15;
  id v21 = v16;
  id v22 = v17;
  id v23 = v18;

  v26.receiver = v5;
  v26.super_class = (Class)type metadata accessor for ActivityDataProvider();
  Swift::Int v24 = [super init];
  [*(id *)&v24[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_wheelchairCache] addObserver:v24];
  v24[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser] = *(unsigned char *)(a1
                                                                                      + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser);
  v24[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isOriginalWheelchairObserver] = 0;
  return v24;
}

uint64_t sub_10023F510(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = a3;
  uint64_t v76 = a2;
  uint64_t v4 = type metadata accessor for Calendar.Component();
  uint64_t v5 = *(void (***)(char *, uint64_t))(v4 - 8);
  __chkstk_darwin(v4);
  id v83 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for Calendar();
  uint64_t v7 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  int64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DateComponents();
  uint64_t v85 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  objc_super v84 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v80 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  BOOL v17 = (char *)&v70 - v16;
  __chkstk_darwin(v15);
  id v19 = (char *)&v70 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v78 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v75 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v79 = (char *)&v70 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v70 - v26;
  __chkstk_darwin(v25);
  uint64_t v77 = (char *)&v70 - v28;
  unint64_t v94 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v92 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v29 = *(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v29) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v19, 1, 1, v20);
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  if (!v29) {
    goto LABEL_24;
  }
LABEL_3:
  id v72 = v5;
  if ((v92 & 0xC000000000000001) != 0)
  {
    id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v69 = *(id *)(v92 + 32);
LABEL_7:
    unint64_t v30 = v69;
    swift_bridgeObjectRelease();
    id v31 = [v30 startDate];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v78;
    uint64_t v33 = v78 + 32;
    unint64_t v34 = v27;
    unint64_t v35 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
    v35(v19, v34, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v19, 0, 1, v20);
    uint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    uint64_t v91 = v32 + 48;
    if (v90(v19, 1, v20) != 1)
    {
      uint64_t v70 = v10;
      uint64_t v29 = (uint64_t)v72;
      char v81 = v35;
      uint64_t v82 = v33;
      v35(v77, v19, v20);
      if (qword_10094A5F8 == -1) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
LABEL_25:
    sub_10008DB18((uint64_t)v19, (uint64_t *)&unk_10095B890);
    goto LABEL_26;
  }
  __break(1u);
LABEL_28:
  swift_once();
LABEL_9:
  uint64_t v36 = v93;
  uint64_t v37 = sub_1000876DC(v93, (uint64_t)qword_100997640);
  uint64_t v38 = *(void (**)(char *))(v7 + 16);
  uint64_t v87 = v37;
  v38(v9);
  sub_1000AFA94((uint64_t *)&unk_1009559B0);
  unint64_t v39 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1007509E0;
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 104);
  unsigned int v86 = enum case for Calendar.Component.minute(_:);
  uint64_t v89 = v29 + 104;
  uint64_t v71 = v41;
  ((void (*)(unint64_t))v41)(v40 + v39);
  sub_1000C6A18(v40);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v42 = v84;
  Swift::Int v43 = v77;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v36);
  uint64_t v44 = DateComponents.minute.getter();
  LOBYTE(v40) = v45;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v42, v70);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v78 + 8))(v43, v20);
LABEL_26:
    unint64_t v68 = swift_bridgeObjectRetain();
    sub_1001E433C(v68);
    return v94;
  }
  uint64_t v85 = v20;
  if ((v44 & 0x8000000000000000) == 0)
  {
    uint64_t v47 = v83;
    uint64_t v48 = v86;
    uint64_t v49 = v71;
    objc_super v84 = (char *)v44;
    if (v44)
    {
      uint64_t v50 = 0;
      uint64_t v51 = v72 + 1;
      id v72 = (void (**)(char *, uint64_t))(v78 + 8);
      uint64_t v74 = v4;
      uint64_t v73 = v17;
      do
      {
        v49(v47, v48, v4);
        uint64_t v93 = v50;
        Calendar.date(byAdding:value:to:wrappingComponents:)();
        id v52 = v49;
        uint64_t v53 = *v51;
        (*v51)(v47, v4);
        unint64_t v54 = v47;
        uint64_t v55 = v85;
        if (v90(v17, 1, v85) == 1)
        {
          sub_10008DB18((uint64_t)v17, (uint64_t *)&unk_10095B890);
          uint64_t v47 = v54;
          uint64_t v49 = v52;
        }
        else
        {
          BOOL v56 = v79;
          v81(v79, v17, v55);
          v52(v54, v48, v4);
          uint64_t v57 = (uint64_t)v80;
          Calendar.date(byAdding:value:to:wrappingComponents:)();
          v53(v54, v4);
          if (v90((char *)v57, 1, v55) == 1)
          {
            uint64_t v49 = v52;
            (*v72)(v56, v55);
            sub_10008DB18(v57, (uint64_t *)&unk_10095B890);
            uint64_t v4 = v74;
            BOOL v17 = v73;
            uint64_t v47 = v83;
          }
          else
          {
            uint64_t v58 = v51;
            uint64_t v59 = v75;
            v81(v75, (char *)v57, v55);
            id v60 = [self quantityWithUnit:v76 doubleValue:0.0];
            id v61 = objc_allocWithZone((Class)_HKActivityStatisticsQuantityInfo);
            unint64_t v62 = v56;
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            Class v64 = Date._bridgeToObjectiveC()().super.isa;
            id v65 = [v61 initWithStartDate:isa endDate:v64];

            [v65 setQuantityValue:v60];
            id v66 = v65;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            uint64_t v67 = *v72;
            (*v72)(v59, v55);
            v67(v62, v55);
            uint64_t v4 = v74;
            BOOL v17 = v73;
            uint64_t v47 = v83;
            uint64_t v49 = v71;
            uint64_t v51 = v58;
          }
        }
        uint64_t v50 = v93 + 1;
        uint64_t v48 = v86;
      }
      while (v84 != (char *)(v93 + 1));
    }
    (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v85);
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

void *sub_10023FF08(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v44 = a2;
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v5 = *(char **)(v53 - 8);
  uint64_t v6 = __chkstk_darwin(v53);
  Swift::Int v43 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_36;
  }
  int64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (a3)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      a3 = sub_10023EC30(0, v11, (uint64_t)a3, a1, (uint64_t)a3);
      swift_bridgeObjectRelease();
      uint64_t v46 = a3[2];
      if (!v46)
      {
        swift_bridgeObjectRelease();
        return _swiftEmptyArrayStorage;
      }
      a1 = 0;
      char v45 = a3 + 4;
      id v52 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v12 = &selRef_setPercentMinimized_;
      uint64_t v42 = a3;
LABEL_7:
      if (a1 < a3[2]) {
        break;
      }
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      swift_bridgeObjectRetain();
      int64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      if (!a3) {
        goto LABEL_37;
      }
    }
    unint64_t v13 = v45[a1];
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v5 = (char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v49 = v5;
      if (!v5)
      {
LABEL_5:
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v5 = *(char **)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v49 = v5;
      if (!v5) {
        goto LABEL_5;
      }
    }
    unint64_t v51 = v13 & 0xC000000000000001;
    unint64_t v48 = a1;
    if ((v13 & 0xC000000000000001) != 0)
    {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_35;
      }
      id v14 = *(id *)(v13 + 32);
    }
    uint64_t v15 = v14;
    id v16 = [v14 startDate];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v47 = v15;
    id v17 = [v15 endDate];
    uint64_t v18 = v43;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v19 = objc_allocWithZone((Class)_HKActivityStatisticsQuantityInfo);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    Class v21 = Date._bridgeToObjectiveC()().super.isa;
    id v22 = [v19 initWithStartDate:isa endDate:v21];

    uint64_t v23 = v53;
    uint64_t v24 = *v52;
    (*v52)(v18, v53);
    uint64_t v50 = v24;
    v24(v10, v23);
    uint64_t v25 = self;
    id v26 = v22;
    id v27 = [v25 quantityWithUnit:v44 doubleValue:0.0];
    [v26 setQuantityValue:v27];

    swift_bridgeObjectRetain();
    id v28 = v26;
    uint64_t v29 = 4;
    a3 = v49;
    while (1)
    {
      a1 = v29 - 4;
      if (v51) {
        unint64_t v30 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        unint64_t v30 = (char *)*(id *)(v13 + 8 * v29);
      }
      uint64_t v5 = v30;
      id v31 = (void *)(v29 - 3);
      if (__OFADD__(a1, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
      id v32 = [v30 endDate];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      Class v33 = Date._bridgeToObjectiveC()().super.isa;
      v50(v10, v53);
      [v28 setEndDate:v33];

      id v34 = [v5 v12[317]];
      if (v34)
      {
        unint64_t v35 = v34;
        unint64_t v36 = v13;
        uint64_t v37 = v12;
        id v38 = [v28 v12[317]];
        if (v38)
        {
          unint64_t v39 = v38;
          id v40 = [v38 _quantityByAddingQuantity:v35];
        }
        else
        {
          id v40 = 0;
        }
        [v28 setQuantityValue:v40];

        a3 = v49;
        uint64_t v12 = v37;
        unint64_t v13 = v36;
        if (v31 == v49)
        {
LABEL_25:

          swift_bridgeObjectRelease_n();
          uint64_t v5 = (char *)v28;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          a3 = v42;
          a1 = v48;
LABEL_6:
          if (++a1 == v46)
          {
            swift_bridgeObjectRelease();
            return (void *)v54;
          }
          goto LABEL_7;
        }
      }
      else
      {

        if (v31 == a3) {
          goto LABEL_25;
        }
      }
      ++v29;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100240488(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v105 = a2;
  uint64_t v7 = sub_1000AFA94(&qword_1009511B8);
  __chkstk_darwin(v7 - 8);
  id v111 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000AFA94((uint64_t *)&unk_1009546C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v110 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DateComponents();
  uint64_t v113 = *(void *)(v11 - 8);
  uint64_t v114 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v118 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v119 = (char *)&v99 - v15;
  __chkstk_darwin(v14);
  uint64_t v120 = (char *)&v99 - v16;
  uint64_t v17 = type metadata accessor for Calendar.Component();
  uint64_t v126 = *(void **)(v17 - 8);
  uint64_t v127 = (void (*)(void))v17;
  __chkstk_darwin(v17);
  id v19 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  __chkstk_darwin(v20 - 8);
  long long v123 = (void (*)(char *, uint64_t, uint64_t, id))((char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v22 = (void *)type metadata accessor for Calendar();
  id v122 = v22;
  uint64_t v23 = *((void *)v22 - 1);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for Date();
  uint64_t v128 = *(void *)(v125 - 8);
  uint64_t v26 = *(void *)(v128 + 64);
  uint64_t v27 = __chkstk_darwin(v125);
  char v104 = (char *)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v112 = (char *)&v99 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v116 = (char *)&v99 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v117 = (uint64_t)&v99 - v33;
  __chkstk_darwin(v32);
  unint64_t v35 = (char *)&v99 - v34;
  uint64_t v121 = a4;
  swift_retain();
  sub_10023BFD0((uint64_t)v25);
  uint64_t v124 = a1;
  Calendar.startOfDay(for:)();
  uint64_t v106 = v23;
  unint64_t v36 = *(void (**)(char *, void *))(v23 + 8);
  v36(v25, v22);
  uint64_t v37 = v36;
  uint64_t v115 = a3;
  sub_10023BFD0((uint64_t)v25);
  id v38 = v126;
  unint64_t v39 = (void (*)(void))v126[13];
  id v40 = v19;
  uint64_t v41 = v19;
  unsigned int v108 = enum case for Calendar.Component.day(_:);
  uint64_t v42 = v127;
  uint64_t v109 = (char *)(v126 + 13);
  uint64_t v107 = (void (*)(unint64_t, void, void (*)(void)))v39;
  v39(v41);
  uint64_t v43 = (uint64_t)v123;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v44 = v42;
  id v45 = v122;
  ((void (*)(char *, void (*)(void)))v38[1])(v40, v44);
  v37(v25, v45);
  uint64_t v46 = v128;
  uint64_t v47 = v125;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v43, 1, v125) != 1)
  {
    uint64_t v102 = v26;
    char v103 = v35;
    unint64_t v48 = *(void (**)(void, void, void))(v46 + 32);
    uint64_t v101 = v46 + 32;
    uint64_t v100 = (void (*)(char *, char *, uint64_t))v48;
    v48(v117, v43, v47);
    long long v123 = *(void (**)(char *, uint64_t, uint64_t, id))(v106 + 56);
    uint64_t v49 = v110;
    v123(v110, 1, 1, v45);
    uint64_t v50 = type metadata accessor for TimeZone();
    unint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56);
    id v52 = v111;
    v51(v111, 1, 1, v50);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.second.setter();
    v123(v49, 1, 1, v45);
    v51(v52, 1, 1, v50);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.minute.setter();
    long long v123 = (void (*)(char *, uint64_t, uint64_t, id))OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache;
    uint64_t v53 = v115;
    id v122 = *(id *)&v115[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_dataCache];
    unint64_t v54 = v116;
    Calendar.startOfDay(for:)();
    sub_1000AFA94((uint64_t *)&unk_1009559B0);
    uint64_t v55 = v126[9];
    unint64_t v56 = (*((unsigned __int8 *)v126 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v126 + 80);
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_100752410;
    unint64_t v58 = v57 + v56;
    unint64_t v59 = v57 + v56;
    id v60 = v127;
    id v61 = v107;
    v107(v59, enum case for Calendar.Component.year(_:), v127);
    v61(v58 + v55, enum case for Calendar.Component.month(_:), v60);
    v61(v58 + 2 * v55, v108, v60);
    sub_1000C6A18(v57);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    Calendar.dateComponents(_:from:)();
    swift_bridgeObjectRelease();
    uint64_t v62 = v125;
    uint64_t v127 = *(void (**)(void))(v128 + 8);
    v127(v54);

    uint64_t v63 = (char *)*(id *)((char *)v123 + (void)v53);
    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    id v65 = [*(id *)&v63[OBJC_IVAR____TtC10FitnessApp22ActivityChartDataCache_cache] objectForKey:isa];

    uint64_t v66 = v121;
    uint64_t v67 = v53;
    uint64_t v68 = (uint64_t)v112;
    uint64_t v69 = v113;
    if (v65)
    {
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      uint64_t v71 = v65;
      if (Strong)
      {
        id v72 = (void *)Strong;
        id v73 = v65;
        sub_100575F5C(v73);

        uint64_t v71 = v72;
      }
    }
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16);
    v74(v68, v124, v62);
    if (v65)
    {
      char v75 = sub_10023C38C(v68);
      uint64_t v76 = (void (*)(uint64_t, uint64_t))v127;
      ((void (*)(uint64_t, uint64_t))v127)(v68, v62);
      uint64_t v77 = v116;
      if ((v75 & 1) == 0)
      {
        uint64_t v78 = *(void (**)(char *, uint64_t))(v69 + 8);
        uint64_t v79 = v114;
        v78(v118, v114);
        v78(v119, v79);
        v78(v120, v79);
        v76(v117, v62);
        v76((uint64_t)v103, v62);
        return swift_release();
      }
    }
    else
    {
      ((void (*)(uint64_t, uint64_t))v127)(v68, v62);
      uint64_t v77 = v116;
    }
    uint64_t v126 = *(void **)&v67[OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_queryExecutor];
    v74((uint64_t)v77, (uint64_t)v103, v62);
    uint64_t v80 = v104;
    v74((uint64_t)v104, v124, v62);
    uint64_t v81 = *(unsigned __int8 *)(v128 + 80);
    uint64_t v82 = (v81 + 48) & ~v81;
    uint64_t v83 = (v102 + v81 + v82) & ~v81;
    objc_super v84 = v67;
    uint64_t v85 = (char *)swift_allocObject();
    *((void *)v85 + 2) = sub_1002410D0;
    *((void *)v85 + 3) = v66;
    uint64_t v86 = v105;
    *((void *)v85 + 4) = v84;
    *((void *)v85 + 5) = v86;
    uint64_t v87 = v77;
    uint64_t v88 = v100;
    v100(&v85[v82], v87, v62);
    v88(&v85[v83], v80, v62);
    uint64_t v89 = v126;
    swift_retain();
    id v90 = v84;
    uint64_t v91 = (uint64_t)v103;
    uint64_t v92 = v117;
    uint64_t v94 = (uint64_t)v119;
    unint64_t v93 = (unint64_t)v120;
    sub_100411D74((uint64_t)v103, v117, (unint64_t)v120, (uint64_t)v119, 0, (uint64_t)sub_1002411D4, (uint64_t)v85);

    swift_release();
    char v95 = *(void (**)(char *, uint64_t))(v69 + 8);
    uint64_t v96 = v114;
    v95(v118, v114);
    v95((char *)v94, v96);
    v95((char *)v93, v96);
    uint64_t v97 = (void (*)(uint64_t, uint64_t))v127;
    ((void (*)(uint64_t, uint64_t))v127)(v92, v62);
    v97(v91, v62);
    return swift_release();
  }
  sub_10008DB18(v43, (uint64_t *)&unk_10095B890);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v47);
  return swift_release();
}

void sub_1002410D0(void *a1)
{
}

uint64_t sub_1002410D8()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = (*(void *)(v2 + 64) + v3 + v4) & ~v3;
  swift_release();

  uint64_t v6 = v0 + v4;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v6, v1);
  v7(v0 + v5, v1);

  return swift_deallocObject();
}

uint64_t sub_1002411D4(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 48) & ~v6;
  uint64_t v8 = (uint64_t (*)(void, uint64_t))v2[2];
  uint64_t v9 = v2[3];
  unint64_t v10 = v2[4];
  uint64_t v11 = v2[5];
  unint64_t v12 = (unint64_t)v2 + ((*(void *)(v5 + 64) + v6 + v7) & ~v6);

  return sub_10023CF38(a1, a2, v8, v9, v10, v11, (unint64_t)v2 + v7, v12);
}

uint64_t sub_100241288()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002412C0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  unint64_t v5 = (v3
      + ((((((*(void *)(v2 + 64) + 7 + v4) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8) & ~v3;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v6 = v0 + v4;
  uint64_t v7 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v7(v6, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(v0 + v5, v1);
  swift_release();
  swift_errorRelease();

  return swift_deallocObject();
}

uint64_t sub_10024142C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64) + 7;
  unint64_t v5 = (v4 + v3) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (v2 + v7 + 8) & ~v2;
  return sub_10023D624(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v0 + v3, *(void *)(v0 + v5), *(void *)(v0 + v6), *(void *)(v0 + v7), v0 + v8, *(void *)(v0 + ((v4 + v8) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v4 + v8) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v0 + ((((v4 + v8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100241508()
{
  swift_release();

  swift_errorRelease();

  return swift_deallocObject();
}

uint64_t sub_100241558()
{
  return sub_10023DE2C(*(void (**)(uint64_t, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100241568(char a1)
{
  char v2 = a1 & 1;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10FitnessApp20ActivityDataProvider_isWheelchairUser) = a1;
  id v3 = [self defaultCenter];
  if (qword_10094A6E0 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_100997870;
  sub_1000AFA94((uint64_t *)&unk_100963720);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007509E0;
  id v6 = v4;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = v2;
  sub_10052331C(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 postNotificationName:v6 object:0 userInfo:isa];

  type metadata accessor for WidgetCenter();
  static WidgetCenter.shared.getter();
  dispatch thunk of WidgetCenter.reloadAllTimelines()();
  return swift_release();
}

uint64_t sub_100241700()
{
  uint64_t v1 = type metadata accessor for DateComponents();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002417EC(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DateComponents() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  unint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_10023E5B0(a1, v5, v6, v8, v9);
}

uint64_t sub_100241890()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002418D0()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_100241900()
{
  uint64_t v1 = type metadata accessor for DateComponents();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002419F4()
{
  uint64_t v1 = *(void *)(type metadata accessor for DateComponents() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10023E984(v3, v4, v0 + v2, v5);
}

unint64_t sub_100241A88()
{
  unint64_t result = qword_1009511D8;
  if (!qword_1009511D8)
  {
    sub_10007E2D8(255, (unint64_t *)&qword_1009556B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009511D8);
  }
  return result;
}

uint64_t sub_100241AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94((uint64_t *)&unk_1009546C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_100241B68()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone((Class)CHFriendInboxBarButtonView) init];
  [v2 setDelegate:v0];
  sub_100241DF0();
  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }
  [v2 setBadgeText:v4];

  type metadata accessor for ActivitySharingFriendListDataProvider();
  sub_100242454();
  swift_retain();
  ObservableObject<>.objectWillChange.getter();
  swift_release();
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_100242524;
  *(void *)(v7 + 24) = v6;
  type metadata accessor for ObservableObjectPublisher();
  id v8 = v2;
  uint64_t v9 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v1 + qword_1009511E0) = v9;
  swift_release();
  id v10 = [objc_allocWithZone((Class)UIBarButtonItem) initWithCustomView:v8];

  return v10;
}

void sub_100241D4C(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    sub_100241DF0();
    uint64_t v4 = v3;

    if (v4)
    {
      uint64_t Strong = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t Strong = 0;
    }
  }
  [a1 setBadgeText:Strong];
}

unint64_t sub_100241DF0()
{
  unint64_t result = (unint64_t)[*(id *)(*(void *)(v0 + qword_1009511E8 + 168)+ OBJC_IVAR____TtC10FitnessApp37ActivitySharingFriendListDataProvider_friendListSectionManager) totalNumberOfPendingRequests];
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    if (result)
    {
      uint64_t v3 = self;
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      id v5 = [v3 stringWithNumber:isa decimalPrecision:1];

      if (v5)
      {
        uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        return 0;
      }
    }
    return v2;
  }
  return result;
}

void sub_100241EBC(char a1)
{
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for ActivitySharingTabViewHostingController();
  [super viewIsAppearing:a1 & 1];
  id v3 = [v1 navigationController];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 navigationBar];

    [v5 setPrefersLargeTitles:1];
  }
  id v6 = [v1 navigationItem];
  id v7 = [self mainBundle];
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 localizedStringForKey:v8 value:0 table:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 setTitle:v10];

  id v11 = [v1 navigationItem];
  id v12 = sub_100241B68();
  [v11 setRightBarButtonItem:v12];
}

void sub_100242080(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_100241EBC(a3);
}

void sub_1002420D4(char *a1, uint64_t a2, void *a3)
{
  *(void *)&a1[qword_1009511E0] = 0;
  id v4 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10024214C()
{
  swift_release();
  long long v1 = *(_OWORD *)(v0 + qword_1009511E8 + 176);
  v8[10] = *(_OWORD *)(v0 + qword_1009511E8 + 160);
  v8[11] = v1;
  v8[12] = *(_OWORD *)(v0 + qword_1009511E8 + 192);
  uint64_t v9 = *(void *)(v0 + qword_1009511E8 + 208);
  long long v2 = *(_OWORD *)(v0 + qword_1009511E8 + 112);
  v8[6] = *(_OWORD *)(v0 + qword_1009511E8 + 96);
  v8[7] = v2;
  long long v3 = *(_OWORD *)(v0 + qword_1009511E8 + 144);
  v8[8] = *(_OWORD *)(v0 + qword_1009511E8 + 128);
  v8[9] = v3;
  long long v4 = *(_OWORD *)(v0 + qword_1009511E8 + 48);
  void v8[2] = *(_OWORD *)(v0 + qword_1009511E8 + 32);
  _OWORD v8[3] = v4;
  long long v5 = *(_OWORD *)(v0 + qword_1009511E8 + 80);
  void v8[4] = *(_OWORD *)(v0 + qword_1009511E8 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(v0 + qword_1009511E8 + 16);
  v8[0] = *(_OWORD *)(v0 + qword_1009511E8);
  v8[1] = v6;
  return sub_10004B370((uint64_t)v8);
}

id sub_1002421CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySharingTabViewHostingController();
  return [super dealloc];
}

uint64_t sub_100242204(uint64_t a1)
{
  swift_release();
  long long v2 = *(_OWORD *)(a1 + qword_1009511E8 + 176);
  v9[10] = *(_OWORD *)(a1 + qword_1009511E8 + 160);
  v9[11] = v2;
  v9[12] = *(_OWORD *)(a1 + qword_1009511E8 + 192);
  uint64_t v10 = *(void *)(a1 + qword_1009511E8 + 208);
  long long v3 = *(_OWORD *)(a1 + qword_1009511E8 + 112);
  v9[6] = *(_OWORD *)(a1 + qword_1009511E8 + 96);
  v9[7] = v3;
  long long v4 = *(_OWORD *)(a1 + qword_1009511E8 + 144);
  v9[8] = *(_OWORD *)(a1 + qword_1009511E8 + 128);
  v9[9] = v4;
  long long v5 = *(_OWORD *)(a1 + qword_1009511E8 + 48);
  void v9[2] = *(_OWORD *)(a1 + qword_1009511E8 + 32);
  v9[3] = v5;
  long long v6 = *(_OWORD *)(a1 + qword_1009511E8 + 80);
  v9[4] = *(_OWORD *)(a1 + qword_1009511E8 + 64);
  v9[5] = v6;
  long long v7 = *(_OWORD *)(a1 + qword_1009511E8 + 16);
  v9[0] = *(_OWORD *)(a1 + qword_1009511E8);
  v9[1] = v7;
  return sub_10004B370((uint64_t)v9);
}

uint64_t sub_100242290(long long *a1)
{
  long long v1 = a1[11];
  long long v30 = a1[10];
  long long v31 = v1;
  long long v32 = a1[12];
  uint64_t v33 = *((void *)a1 + 26);
  long long v2 = a1[7];
  long long v26 = a1[6];
  long long v27 = v2;
  long long v3 = a1[9];
  long long v28 = a1[8];
  long long v29 = v3;
  long long v4 = a1[3];
  long long v22 = a1[2];
  long long v23 = v4;
  long long v5 = a1[5];
  long long v24 = a1[4];
  long long v25 = v5;
  long long v6 = a1[1];
  long long v20 = *a1;
  long long v21 = v6;
  long long v7 = (char *)objc_allocWithZone((Class)type metadata accessor for ActivitySharingTabViewHostingController());
  *(void *)&v7[qword_1009511E0] = 0;
  NSString v8 = &v7[qword_1009511E8];
  long long v9 = v21;
  *(_OWORD *)NSString v8 = v20;
  *((_OWORD *)v8 + 1) = v9;
  long long v10 = v25;
  long long v12 = v22;
  long long v11 = v23;
  *((_OWORD *)v8 + 4) = v24;
  *((_OWORD *)v8 + 5) = v10;
  *((_OWORD *)v8 + 2) = v12;
  *((_OWORD *)v8 + 3) = v11;
  long long v13 = v29;
  long long v15 = v26;
  long long v14 = v27;
  *((_OWORD *)v8 + 8) = v28;
  *((_OWORD *)v8 + 9) = v13;
  *((_OWORD *)v8 + 6) = v15;
  *((_OWORD *)v8 + 7) = v14;
  long long v17 = v31;
  long long v16 = v32;
  long long v18 = v30;
  *((void *)v8 + 26) = v33;
  *((_OWORD *)v8 + 11) = v17;
  *((_OWORD *)v8 + 12) = v16;
  *((_OWORD *)v8 + 10) = v18;
  sub_10006296C((uint64_t)&v20);
  return UIHostingController.init(rootView:)();
}

void sub_1002423AC()
{
}

uint64_t sub_1002423DC()
{
  return type metadata accessor for ActivitySharingTabViewHostingController();
}

uint64_t sub_1002423E4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  swift_retain();
  sub_1003724B4();

  return swift_release();
}

unint64_t sub_100242454()
{
  unint64_t result = qword_1009512A0;
  if (!qword_1009512A0)
  {
    type metadata accessor for ActivitySharingFriendListDataProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009512A0);
  }
  return result;
}

uint64_t sub_1002424AC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002424E4()
{
  swift_release();

  return swift_deallocObject();
}

void sub_100242524()
{
  sub_100241D4C(*(void **)(v0 + 16));
}

uint64_t sub_10024252C()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1002426D4(uint64_t a1, void *a2)
{
  long long v3 = v2;
  uint64_t v5 = type metadata accessor for SummaryStringBuilder();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  long long v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v11 = (char *)v31 - v10;
  swift_unknownObjectRetain();
  SummaryStringBuilder.init(unitPreferencesProvider:)();
  [a2 workoutActivityType];
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  id v12 = objc_allocWithZone((Class)type metadata accessor for SummaryBurnBarView());
  long long v13 = (void *)SummaryBurnBarView.init(workoutActivityType:stringBuilder:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  [v13 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v14 = [v3 contentView];
  [v14 addSubview:v13];

  long long v15 = self;
  sub_1000AFA94((uint64_t *)&unk_10095B850);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100752650;
  id v17 = [v13 topAnchor];
  id v18 = [v3 contentView];
  id v19 = [v18 topAnchor];

  id v20 = [v17 constraintEqualToAnchor:v19 constant:16.0];
  *(void *)(v16 + 32) = v20;
  id v21 = [v13 centerXAnchor];
  id v22 = [v3 contentView];
  id v23 = [v22 centerXAnchor];

  id v24 = [v21 constraintEqualToAnchor:v23];
  *(void *)(v16 + 40) = v24;
  id v25 = [v13 bottomAnchor];
  id v26 = [v3 contentView];
  id v27 = [v26 bottomAnchor];

  id v28 = [v25 constraintEqualToAnchor:v27 constant:-16.0];
  *(void *)(v16 + 48) = v28;
  v31[1] = v16;
  specialized Array._endMutation()();
  sub_1001ABF94();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v15 activateConstraints:isa];

  long long v30 = *(void **)&v3[OBJC_IVAR___CHWorkoutDetailBurnBarTableViewCell_burnBarView];
  *(void *)&v3[OBJC_IVAR___CHWorkoutDetailBurnBarTableViewCell_burnBarView] = v13;
}

uint64_t sub_100242AA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = sub_1000AFA94(&qword_1009512E0);
  __chkstk_darwin(v7 - 8);
  long long v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SummaryBurnBarMetricViewModel();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = OBJC_IVAR___CHWorkoutDetailBurnBarTableViewCell_burnBarView;
  if (!*(void *)&v3[OBJC_IVAR___CHWorkoutDetailBurnBarTableViewCell_burnBarView])
  {
    sub_1002426D4(a1, a2);
    [v3 setNeedsLayout];
    [v3 layoutIfNeeded];
  }
  uint64_t v15 = a3 + OBJC_IVAR___CHScoreSummaryWrapper_scoreSummary;
  uint64_t v16 = type metadata accessor for ScoreSummary();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v9, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
  SummaryBurnBarMetricViewModel.init(scoreSummary:showBurnBar:titleText:subtitleText:)();
  id v18 = *(void **)&v3[v14];
  if (v18)
  {
    id v19 = v18;
    dispatch thunk of SummaryBurnBarView.updateViewModel(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

id sub_100242DE4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorkoutDetailBurnBarTableViewCell();
  return [super dealloc];
}

uint64_t type metadata accessor for WorkoutDetailBurnBarTableViewCell()
{
  return self;
}

void *sub_100242E4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v33 = *a2;
    *long long v3 = *a2;
    long long v3 = (void *)(v33 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = (void *)a2[2];
    uint64_t v7 = (void *)a2[3];
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    uint64_t v11 = type metadata accessor for ShelfLockupAttributedTagStrings();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    id v13 = v6;
    id v14 = v7;
    v12(v9, v10, v11);
    uint64_t v15 = (int *)type metadata accessor for CatalogTipSectionItem();
    uint64_t v16 = v15[5];
    uint64_t v17 = v9 + v16;
    uint64_t v18 = v10 + v16;
    uint64_t v19 = type metadata accessor for Artwork();
    uint64_t v20 = *(void *)(v19 - 8);
    unint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v56(v17, v18, v19);
    uint64_t v21 = v15[6];
    id v22 = (void *)(v9 + v21);
    id v23 = (void *)(v10 + v21);
    uint64_t v24 = v23[1];
    *id v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v15[7];
    id v26 = (void *)(v9 + v25);
    id v27 = (void *)(v10 + v25);
    uint64_t v28 = v27[1];
    *id v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = v15[8];
    __dst = (void *)(v9 + v29);
    long long v30 = (const void *)(v10 + v29);
    long long v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v31(v30, 1, v19))
    {
      uint64_t v32 = sub_1000AFA94(&qword_1009512E8);
      memcpy(__dst, v30, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v56((uint64_t)__dst, (uint64_t)v30, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v34 = v15[9];
    unint64_t v35 = (void *)(v9 + v34);
    unint64_t v36 = (void *)(v10 + v34);
    uint64_t v37 = v36[1];
    *unint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = v15[10];
    unint64_t v39 = (void *)(v9 + v38);
    id v40 = (void *)(v10 + v38);
    uint64_t v41 = v40[1];
    *unint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = v15[11];
    uint64_t v43 = (void *)(v9 + v42);
    uint64_t v44 = (void *)(v10 + v42);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = v15[12];
    uint64_t v47 = v9 + v46;
    uint64_t v48 = v10 + v46;
    uint64_t v49 = type metadata accessor for URL();
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50(v47, v48, v49);
    uint64_t v51 = *(int *)(a3 + 40);
    id v52 = (void *)((char *)v3 + v51);
    uint64_t v53 = (uint64_t *)((char *)a2 + v51);
    uint64_t v54 = v53[1];
    *id v52 = *v53;
    v52[1] = v54;
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t sub_100243168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 24);
  uint64_t v10 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  id v11 = v9;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v54 = a3;
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for ShelfLockupAttributedTagStrings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = (int *)type metadata accessor for CatalogTipSectionItem();
  uint64_t v17 = v16[5];
  uint64_t v18 = v13 + v17;
  uint64_t v19 = v14 + v17;
  uint64_t v20 = type metadata accessor for Artwork();
  uint64_t v21 = *(void *)(v20 - 8);
  id v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24);
  v52(v18, v19, v20);
  uint64_t v22 = v16[6];
  id v23 = (void *)(v13 + v22);
  uint64_t v24 = (void *)(v14 + v22);
  void *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v16[7];
  id v26 = (void *)(v13 + v25);
  id v27 = (void *)(v14 + v25);
  *id v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = v16[8];
  uint64_t v29 = (const void *)(v14 + v28);
  uint64_t v53 = (void *)(v13 + v28);
  long long v30 = *(uint64_t (**)(void))(v21 + 48);
  int v31 = v30();
  int v32 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v30)(v29, 1, v20);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v53, v29, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v53, 0, 1, v20);
      goto LABEL_9;
    }
    size_t v33 = *(void *)(*(void *)(sub_1000AFA94(&qword_1009512E8) - 8) + 64);
    uint64_t v34 = v53;
  }
  else
  {
    if (!v32)
    {
      v52((uint64_t)v53, (uint64_t)v29, v20);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v53, v20);
    size_t v33 = *(void *)(*(void *)(sub_1000AFA94(&qword_1009512E8) - 8) + 64);
    uint64_t v34 = v53;
  }
  memcpy(v34, v29, v33);
LABEL_9:
  uint64_t v35 = v16[9];
  unint64_t v36 = (void *)(v13 + v35);
  uint64_t v37 = (void *)(v14 + v35);
  *unint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v16[10];
  unint64_t v39 = (void *)(v13 + v38);
  id v40 = (void *)(v14 + v38);
  *unint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v16[11];
  uint64_t v42 = (void *)(v13 + v41);
  uint64_t v43 = (void *)(v14 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v16[12];
  uint64_t v45 = v13 + v44;
  uint64_t v46 = v14 + v44;
  uint64_t v47 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v46, v47);
  uint64_t v48 = *(int *)(v54 + 40);
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (void *)(a2 + v48);
  *uint64_t v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100243550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for ShelfLockupAttributedTagStrings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  uint64_t v9 = (int *)type metadata accessor for CatalogTipSectionItem();
  uint64_t v10 = v9[5];
  id v11 = (void *)(v6 + v10);
  uint64_t v12 = (const void *)(v7 + v10);
  uint64_t v13 = type metadata accessor for Artwork();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(void *, const void *, uint64_t))(v14 + 32);
  v15(v11, v12, v13);
  *(_OWORD *)(v6 + v9[6]) = *(_OWORD *)(v7 + v9[6]);
  *(_OWORD *)(v6 + v9[7]) = *(_OWORD *)(v7 + v9[7]);
  uint64_t v16 = v9[8];
  uint64_t v17 = (void *)(v6 + v16);
  uint64_t v18 = (const void *)(v7 + v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v7 + v16, 1, v13))
  {
    uint64_t v19 = sub_1000AFA94(&qword_1009512E8);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v15(v17, v18, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
  }
  *(_OWORD *)(v6 + v9[9]) = *(_OWORD *)(v7 + v9[9]);
  *(_OWORD *)(v6 + v9[10]) = *(_OWORD *)(v7 + v9[10]);
  *(_OWORD *)(v6 + v9[11]) = *(_OWORD *)(v7 + v9[11]);
  uint64_t v20 = v9[12];
  uint64_t v21 = v6 + v20;
  uint64_t v22 = v7 + v20;
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_100243794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v8 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v63 = a2;
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for ShelfLockupAttributedTagStrings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = (int *)type metadata accessor for CatalogTipSectionItem();
  uint64_t v14 = v13[5];
  uint64_t v15 = v10 + v14;
  uint64_t v16 = v11 + v14;
  uint64_t v17 = type metadata accessor for Artwork();
  uint64_t v18 = *(void *)(v17 - 8);
  id v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40);
  v61(v15, v16, v17);
  uint64_t v19 = v13[6];
  uint64_t v20 = (void *)(v10 + v19);
  uint64_t v21 = (uint64_t *)(v11 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = v13[7];
  uint64_t v25 = (void *)(v10 + v24);
  id v26 = (uint64_t *)(v11 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = v13[8];
  long long v30 = (const void *)(v11 + v29);
  uint64_t v62 = (void *)(v10 + v29);
  int v31 = *(uint64_t (**)(void))(v18 + 48);
  int v32 = v31();
  int v33 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v30, 1, v17);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v62, v30, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v62, 0, 1, v17);
      goto LABEL_9;
    }
    size_t v34 = *(void *)(*(void *)(sub_1000AFA94(&qword_1009512E8) - 8) + 64);
    uint64_t v35 = v62;
  }
  else
  {
    if (!v33)
    {
      v61((uint64_t)v62, (uint64_t)v30, v17);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v62, v17);
    size_t v34 = *(void *)(*(void *)(sub_1000AFA94(&qword_1009512E8) - 8) + 64);
    uint64_t v35 = v62;
  }
  memcpy(v35, v30, v34);
LABEL_9:
  uint64_t v36 = v13[9];
  uint64_t v37 = (void *)(v10 + v36);
  uint64_t v38 = (uint64_t *)(v11 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = v13[10];
  uint64_t v42 = (void *)(v10 + v41);
  uint64_t v43 = (uint64_t *)(v11 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = v13[11];
  uint64_t v47 = (void *)(v10 + v46);
  uint64_t v48 = (uint64_t *)(v11 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = v13[12];
  uint64_t v52 = v10 + v51;
  uint64_t v53 = v11 + v51;
  uint64_t v54 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 40))(v52, v53, v54);
  uint64_t v55 = *(int *)(a3 + 40);
  unint64_t v56 = (void *)(a1 + v55);
  uint64_t v57 = (uint64_t *)(v63 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  *unint64_t v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100243AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CatalogTipSectionItem();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100243BAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CatalogTipSectionItem();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100243C54()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v2 = *(id *)(v0 + 16);
  NSObject.hash(into:)();

  id v3 = *(id *)(v1 + 24);
  NSObject.hash(into:)();

  GalleryDestination.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  ShelfDisplayStyle.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for CatalogTipSection();
  sub_1004C8E54();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100243D7C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100243DC0()
{
  return Hasher._finalize()();
}

unint64_t sub_100243E04()
{
  unint64_t result = qword_100951398;
  if (!qword_100951398)
  {
    type metadata accessor for CatalogTipSection();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951398);
  }
  return result;
}

uint64_t sub_100243E5C(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    sub_1000A88A4();
    if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static NSObject.== infix(_:_:)() & 1) == 0) {
      return 0;
    }
    uint64_t v7 = GalleryDestination.rawValue.getter();
    uint64_t v9 = v8;
    if (v7 == GalleryDestination.rawValue.getter() && v9 == v10)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v11 & 1) == 0) {
        return result;
      }
    }
    uint64_t v12 = ShelfDisplayStyle.rawValue.getter();
    uint64_t v14 = v13;
    if (v12 == ShelfDisplayStyle.rawValue.getter() && v14 == v15)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v16 & 1) == 0) {
        return result;
      }
    }
    uint64_t v17 = type metadata accessor for CatalogTipSection();
    if (sub_1004C9318((uint64_t)a1 + *(int *)(v17 + 36), (uint64_t)a2 + *(int *)(v17 + 36)))
    {
      uint64_t v18 = *(int *)(v17 + 40);
      uint64_t v19 = *(void *)((char *)a1 + v18);
      uint64_t v20 = *(void *)((char *)a1 + v18 + 8);
      uint64_t v21 = (void *)((char *)a2 + v18);
      if (v19 == *v21 && v20 == v21[1])
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for MirrorArcView()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MirrorArcView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MirrorArcView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

uint64_t assignWithTake for MirrorArcView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MirrorArcView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MirrorArcView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MirrorArcView()
{
  return &type metadata for MirrorArcView;
}

uint64_t sub_10024427C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100244298@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  GeometryProxy.size.getter();
  double v5 = v4;
  GeometryProxy.size.getter();
  if (v6 >= v5) {
    double v7 = v5;
  }
  else {
    double v7 = v6;
  }
  double v8 = v7 - *(double *)(a1 + 48);
  GeometryProxy.size.getter();
  double v10 = v9 * 0.5;
  GeometryProxy.size.getter();
  double v12 = v11 * 0.5;
  *a2 = static Alignment.center.getter();
  a2[1] = v13;
  uint64_t v14 = sub_1000AFA94(&qword_1009513A0);
  return sub_100244338(a1, (uint64_t)a2 + *(int *)(v14 + 44), v10, v12, v8);
}

uint64_t sub_100244338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v10 = sub_1000AFA94(&qword_1009513A8);
  __chkstk_darwin(v10 - 8);
  double v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000AFA94(&qword_1009513B0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  char v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v53 = (uint64_t)&v44 - v17;
  double v62 = a3;
  double v63 = a4;
  double v64 = a5;
  Path.init(_:)();
  uint64_t v51 = v66;
  uint64_t v52 = v65;
  uint64_t v18 = v68;
  uint64_t v50 = v67;
  int v19 = v69;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v20 = v70;
  uint64_t v21 = v72;
  uint64_t v22 = v73;
  uint64_t v23 = v74;
  uint64_t v48 = Color.init(rgbHex:)();
  double v58 = a3;
  double v59 = a4;
  double v60 = a5;
  uint64_t v61 = a1;
  Path.init(_:)();
  uint64_t v24 = v75;
  uint64_t v56 = v77;
  uint64_t v57 = v76;
  uint64_t v55 = v78;
  int v54 = v79;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v25 = v80;
  uint64_t v26 = v82;
  uint64_t v49 = v83;
  uint64_t v27 = v84;
  *(void *)double v12 = static HorizontalAlignment.center.getter();
  *((void *)v12 + 1) = 0;
  v12[16] = 0;
  uint64_t v28 = sub_1000AFA94(&qword_1009513B8);
  sub_100244804(a1, &v12[*(int *)(v28 + 44)]);
  uint64_t v29 = static Alignment.center.getter();
  sub_1004DCA14(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v29, v30);
  sub_10008DB18((uint64_t)v12, &qword_1009513A8);
  uint64_t v44 = v16;
  uint64_t v31 = v53;
  sub_1000AEEC8((uint64_t)v16, v53, &qword_1009513B0);
  sub_1000AEF2C(v31, (uint64_t)v16, &qword_1009513B0);
  uint64_t v32 = v51;
  uint64_t v33 = v52;
  *(void *)a2 = v52;
  *(void *)(a2 + 8) = v32;
  uint64_t v34 = v50;
  *(void *)(a2 + 16) = v50;
  *(void *)(a2 + 24) = v18;
  uint64_t v46 = v18;
  uint64_t v47 = v22;
  int v45 = v19;
  *(unsigned char *)(a2 + 32) = v19;
  uint64_t v35 = v71;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v35;
  *(void *)(a2 + 56) = v21;
  *(void *)(a2 + 64) = v22;
  *(void *)(a2 + 72) = v23;
  *(void *)(a2 + 80) = v48;
  *(void *)(a2 + 88) = v24;
  uint64_t v36 = v56;
  *(void *)(a2 + 96) = v57;
  *(void *)(a2 + 104) = v36;
  *(void *)(a2 + 112) = v55;
  *(unsigned char *)(a2 + 120) = v54;
  uint64_t v37 = v81;
  *(void *)(a2 + 128) = v25;
  *(void *)(a2 + 136) = v37;
  *(void *)(a2 + 144) = v26;
  *(void *)(a2 + 152) = v49;
  *(void *)(a2 + 160) = v27;
  uint64_t v38 = a2 + *(int *)(sub_1000AFA94(&qword_1009513C0) + 64);
  uint64_t v39 = (uint64_t)v44;
  sub_1000AEF2C((uint64_t)v44, v38, &qword_1009513B0);
  sub_1002451E0(v33, v32, v34, v18, v19);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v40 = v56;
  uint64_t v41 = v57;
  uint64_t v42 = v55;
  LOBYTE(v34) = v54;
  sub_1002451E0(v24, v57, v56, v55, v54);
  swift_bridgeObjectRetain();
  sub_10008DB18(v53, &qword_1009513B0);
  sub_10008DB18(v39, &qword_1009513B0);
  sub_1002451F8(v24, v41, v40, v42, v34);
  swift_bridgeObjectRelease();
  sub_1002451F8(v52, v51, v50, v46, v45);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10024477C()
{
  return Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
}

uint64_t sub_100244804@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_1000AFA94(&qword_1009513C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000AFA94(&qword_1009513D0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = static VerticalAlignment.center.getter();
  sub_100244BA0(a1, (uint64_t)v33);
  v34[304] = 0;
  memcpy(&v34[7], v33, 0x129uLL);
  uint64_t v30 = v14;
  uint64_t v31 = 0;
  LOBYTE(v32[0]) = 0;
  memcpy((char *)v32 + 1, v34, 0x130uLL);
  sub_1000AFA94(&qword_1009513D8);
  sub_1000A132C(&qword_1009513E0, &qword_1009513D8);
  View.metricDescriptionFont(multiline:)();
  sub_100245210((uint64_t)v33);
  id v15 = [self secondaryLabelColor];
  uint64_t v16 = Color.init(uiColor:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v11, v6, v3);
  *(void *)&v11[*(int *)(v8 + 44)] = v16;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1000AEEC8((uint64_t)v11, (uint64_t)v13, &qword_1009513D0);
  if (qword_10094A5C8 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v17 = v30;
  char v18 = v31;
  uint64_t v19 = v32[0];
  int v28 = LOBYTE(v32[1]);
  uint64_t v20 = v32[3];
  uint64_t v27 = v32[2];
  sub_1000AEF2C((uint64_t)v13, (uint64_t)v11, &qword_1009513D0);
  uint64_t v21 = (uint64_t)v13;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v23 = v29;
  void *v29 = 0;
  *((unsigned char *)v23 + 8) = 1;
  uint64_t v24 = sub_1000AFA94(&qword_1009513E8);
  sub_1000AEF2C(v22, (uint64_t)v23 + *(int *)(v24 + 48), &qword_1009513D0);
  uint64_t v25 = (char *)v23 + *(int *)(v24 + 64);
  *(void *)uint64_t v25 = 0;
  v25[8] = 1;
  *((void *)v25 + 2) = v17;
  v25[24] = v18;
  *((void *)v25 + 4) = v19;
  v25[40] = v28;
  *((void *)v25 + 6) = v27;
  *((void *)v25 + 7) = v20;
  sub_10008DB18(v21, &qword_1009513D0);
  return sub_10008DB18(v22, &qword_1009513D0);
}

uint64_t sub_100244BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = static VerticalAlignment.center.getter();
  sub_1000A06D0();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  static Alignment.trailing.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000A1750(v4, v6, v10);
  swift_bridgeObjectRetain();
  sub_1000A06C0(v4, v6, v10);
  swift_bridgeObjectRelease();
  if (qword_10094A5C8 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v19 = static VerticalAlignment.center.getter();
  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v34 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  static Alignment.leading.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000A1750(v11, v13, v17);
  swift_bridgeObjectRetain();
  sub_1000A06C0(v11, v13, v17);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a2 + 268) = *(_DWORD *)&v39[3];
  *(_DWORD *)(a2 + 265) = *(_DWORD *)v39;
  *(_DWORD *)(a2 + 17) = *(_DWORD *)v50;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)&v50[3];
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v49;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v49[3];
  *(_DWORD *)(a2 + 57) = *(_DWORD *)v48;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)&v48[3];
  *(_DWORD *)(a2 + 81) = *(_DWORD *)v47;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)&v47[3];
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v46[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v46;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v45[3];
  *(_DWORD *)(a2 + 129) = *(_DWORD *)v45;
  *(_DWORD *)(a2 + 148) = *(_DWORD *)&v44[3];
  *(_DWORD *)(a2 + 145) = *(_DWORD *)v44;
  *(_DWORD *)(a2 + 164) = *(_DWORD *)&v43[3];
  *(_DWORD *)(a2 + 161) = *(_DWORD *)v43;
  *(_DWORD *)(a2 + 204) = *(_DWORD *)&v42[3];
  *(_DWORD *)(a2 + 201) = *(_DWORD *)v42;
  *(_DWORD *)(a2 + 228) = *(_DWORD *)&v41[3];
  *(_DWORD *)(a2 + 225) = *(_DWORD *)v41;
  *(_DWORD *)(a2 + 252) = *(_DWORD *)&v40[3];
  *(_DWORD *)(a2 + 249) = *(_DWORD *)v40;
  *(unsigned char *)(a2 + 32) = 1;
  *(unsigned char *)(a2 + 56) = v10;
  *(void *)(a2 + 72) = v21;
  *(unsigned char *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v23;
  *(unsigned char *)(a2 + 96) = v24;
  *(void *)(a2 + 104) = v25;
  *(void *)(a2 + 112) = v26;
  *(unsigned char *)(a2 + 128) = 1;
  *(void *)(a2 + 136) = v27;
  *(unsigned char *)(a2 + 144) = v28;
  *(void *)(a2 + 152) = v29;
  *(unsigned char *)(a2 + 160) = v30;
  *(void *)(a2 + 168) = v31;
  *(void *)(a2 + 176) = v32;
  *(void *)(a2 + 184) = v19;
  *(unsigned char *)(a2 + 200) = 0;
  *(unsigned char *)(a2 + 224) = v17;
  *(void *)(a2 + 232) = v15;
  *(void *)(a2 + 240) = v33;
  *(unsigned char *)(a2 + 248) = v34;
  *(void *)(a2 + 256) = v35;
  *(unsigned char *)(a2 + 264) = v36;
  *(void *)(a2 + 272) = v37;
  *(void *)(a2 + 280) = v38;
  *(unsigned char *)(a2 + 296) = 1;
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 208) = v11;
  *(void *)(a2 + 216) = v13;
  *(void *)(a2 + 288) = 0;
  sub_1000A1750(v4, v6, v10);
  swift_bridgeObjectRetain();
  sub_1000A1750(v11, v13, v17);
  swift_bridgeObjectRetain();
  sub_1000A06C0(v11, v13, v17);
  swift_bridgeObjectRelease();
  sub_1000A06C0(v4, v6, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100245060@<X0>(uint64_t (**a1)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  void v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v3;
  uint64_t v10 = *(void *)(v1 + 64);
  long long v4 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v4;
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(void *)(v5 + 80) = *(void *)(v1 + 64);
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  *a1 = sub_100245128;
  a1[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;
  return sub_100245130((uint64_t)v9);
}

uint64_t sub_1002450E8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100245128@<X0>(uint64_t *a1@<X8>)
{
  return sub_100244298(v1 + 16, a1);
}

uint64_t sub_100245130(uint64_t a1)
{
  return a1;
}

uint64_t sub_100245168()
{
  return Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
}

uint64_t sub_1002451D0()
{
  return sub_10024477C();
}

uint64_t sub_1002451E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1002451F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100245210(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  uint64_t v3 = *(void *)(a1 + 216);
  char v4 = *(unsigned char *)(a1 + 224);
  sub_1000A06C0(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  swift_bridgeObjectRelease();
  sub_1000A06C0(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100245284()
{
  return sub_1000A132C(&qword_1009513F0, &qword_1009513F8);
}

uint64_t sub_1002454B8(uint64_t a1, void (*a2)(void *))
{
  if (a1)
  {
    uint64_t v3 = (void *)EffortSampleCollection.effortSample.getter();
    if (v3)
    {
      id v4 = v3;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v5 = (void *)EffortSampleCollection.estimatedEffortSample.getter();
    if (v5)
    {
      id v6 = v5;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  a2(_swiftEmptyArrayStorage);

  return swift_bridgeObjectRelease();
}

void sub_100245714(uint64_t a1, uint64_t a2)
{
  sub_10007E2D8(0, (unint64_t *)&qword_100951108);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_1002458C8()
{
  type metadata accessor for EffortUtilities();
  uint64_t result = static EffortUtilities.didUpdateDemoOverrideEffortValues.getter();
  qword_100997888 = result;
  return result;
}

id sub_100245998()
{
  return sub_100245EC4(type metadata accessor for EffortBridges);
}

uint64_t type metadata accessor for EffortBridges()
{
  return self;
}

id sub_100245B58(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v1;
    id result = (id)swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    type metadata accessor for EffortUtilities();
    swift_bridgeObjectRelease();
    uint64_t v12 = static EffortUtilities.effortSampleCollection(for:)();
    swift_bridgeObjectRelease();
    *(void *)&v2[OBJC_IVAR___CHEffortSampleCollection_collection] = v12;

    v13.receiver = v2;
    v13.super_class = (Class)type metadata accessor for CHEffortSampleCollection();
    return [super init];
  }
  uint64_t v11 = v1;
  swift_bridgeObjectRetain();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = (uint64_t)result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_3:
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        self;
        if (swift_dynamicCastObjCClass())
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
    else
    {
      for (uint64_t j = 0; j != v4; ++j)
      {
        char v9 = *(void **)(a1 + 8 * j + 32);
        self;
        if (swift_dynamicCastObjCClass())
        {
          id v10 = v9;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

id sub_100245EAC()
{
  return sub_100245EC4(type metadata accessor for CHEffortSampleCollection);
}

id sub_100245EC4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for CHEffortSampleCollection()
{
  return self;
}

uint64_t sub_100245F30()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

void sub_100245F68(uint64_t a1)
{
  sub_100245714(a1, *(void *)(v1 + 16));
}

uint64_t sub_100245F70()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100245FA8(uint64_t a1)
{
  return sub_1002454B8(a1, *(void (**)(void *))(v1 + 16));
}

void sub_100245FB0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  type metadata accessor for EffortUtilities();
  static EffortUtilities.save(quantity:workout:workoutActivity:healthStore:)();
  if (a6)
  {
    if (a2 && (uint64_t v8 = (void *)EffortSampleCollection.estimatedEffortSample.getter(), (a2 = v8) != 0)) {
      id v9 = [v8 quantity];
    }
    else {
      id v9 = 0;
    }
    id v10 = v9;
    static EffortUtilities.sendUpdatedEffortAnalyticsEvent(workout:workoutActivity:perceivedEffortQuantity:estimatedEffortQuantity:)();
  }
}

uint64_t sub_1002460B8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

id sub_100246190()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FitnessAppActivityTypeMigrationKeys();
  [super dealloc];
}

uint64_t type metadata accessor for FitnessAppActivityTypeMigrationKeys()
{
  return self;
}

uint64_t sub_100246248()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1002462A0();
    return swift_release();
  }
  return result;
}

uint64_t sub_1002462A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  sub_10002F570((uint64_t)sub_1000EABF4, v3);
  swift_release();

  return swift_release();
}

uint64_t sub_10024636C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  os_log_type_t v5 = static os_log_type_t.default.getter();
  id v6 = (void *)HKLogActivity;
  os_log_type_t v7 = v5;
  if (os_log_type_enabled(HKLogActivity, v5))
  {
    swift_errorRetain();
    swift_errorRetain();
    log = v6;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain();
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = v23;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Fetching subscription status failed with error: %@", v8, 0xCu);
    sub_1000AFA94((uint64_t *)&unk_100955620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  swift_getErrorValue();
  uint64_t v10 = Error.domain.getter();
  uint64_t v12 = v11;
  sub_10024694C();
  BOOL v14 = v10 == Error.domain.getter() && v12 == v13;
  if (v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      goto LABEL_12;
    }
  }
  swift_getErrorValue();
  uint64_t v16 = Error.code.getter();
  if (v16 == Error.code.getter())
  {
    uint64_t v17 = 0;
    return a2(v17);
  }
LABEL_12:
  int v18 = *(unsigned __int8 *)(a4 + 80);
  BOOL v14 = v18 == 2;
  unsigned int v19 = v18 & 1;
  if (v14) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v19;
  }
  return a2(v17);
}

uint64_t sub_100246604()
{
  swift_unknownObjectRelease();
  _s10FitnessApp24HistoryViewActionContextVwxx_0(v0 + 32);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t getEnumTagSinglePayload for FitnessPlusSubscriptionProvider.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100246708);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for FitnessPlusSubscriptionProvider.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1002467F0);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_100246818(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *sub_100246834(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FitnessPlusSubscriptionProvider.State()
{
  return &type metadata for FitnessPlusSubscriptionProvider.State;
}

uint64_t sub_10024685C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100246894()
{
  return sub_10001EC00((uint64_t *)&unk_100955730);
}

uint64_t sub_1002468A0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002468E0(uint64_t a1)
{
  return sub_10024636C(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100246900()
{
  return sub_10001EC00((uint64_t *)&unk_1009633D0);
}

uint64_t sub_10024690C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

unint64_t sub_10024694C()
{
  unint64_t result = qword_100951578;
  if (!qword_100951578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951578);
  }
  return result;
}

uint64_t sub_1002469A0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002469D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100246A10()
{
  return sub_100246248();
}

id sub_100246A6C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityDashboardEntryLinksButtonCell();
  return [super dealloc];
}

uint64_t sub_100246AA4()
{
  return swift_deallocObject();
}

void sub_100246ADC()
{
}

id sub_100246D00()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScoreSummaryWrapper();
  return [super dealloc];
}

uint64_t sub_100246DA4()
{
  return type metadata accessor for ScoreSummaryWrapper();
}

uint64_t type metadata accessor for ScoreSummaryWrapper()
{
  uint64_t result = qword_100951618;
  if (!qword_100951618) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100246DF8()
{
  uint64_t result = type metadata accessor for ScoreSummary();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for MirrorRaceMessageWithMetricsView(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MirrorRaceMessageWithMetricsView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  int v4 = (void *)a2[2];
  unsigned int v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  a1[6] = a2[6];
  swift_retain();
  id v7 = v4;
  id v8 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MirrorRaceMessageWithMetricsView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  int v4 = (void *)a2[2];
  unsigned int v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  id v7 = (void *)a2[3];
  id v8 = (void *)a1[3];
  a1[3] = v7;
  id v9 = v7;

  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for Histogram1D(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MirrorRaceMessageWithMetricsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  long long v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  unsigned int v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for MirrorRaceMessageWithMetricsView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MirrorRaceMessageWithMetricsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MirrorRaceMessageWithMetricsView()
{
  return &type metadata for MirrorRaceMessageWithMetricsView;
}

uint64_t sub_100247104()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100247120@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = a2;
  uint64_t v3 = sub_1000AFA94(&qword_100951630);
  __chkstk_darwin(v3 - 8);
  uint64_t v99 = (uint64_t *)((char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v102 = sub_1000AFA94(&qword_100951638);
  __chkstk_darwin(v102);
  uint64_t v100 = (uint64_t)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_1000AFA94(&qword_100951640);
  uint64_t v106 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v101 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_1000AFA94(&qword_100951648) - 8;
  __chkstk_darwin(v104);
  char v103 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_1000AFA94(&qword_100951650) - 8;
  uint64_t v8 = __chkstk_darwin(v107);
  uint64_t v105 = (uint64_t)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v115 = (uint64_t)&v86 - v10;
  uint64_t v11 = type metadata accessor for RacePosition();
  __chkstk_darwin(v11 - 8);
  char v95 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for RaceElevationMetricView();
  uint64_t v98 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v96 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_1000AFA94(&qword_100951658);
  uint64_t v117 = *(void *)(v113 - 8);
  uint64_t v14 = __chkstk_darwin(v113);
  uint64_t v112 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v114 = (char *)&v86 - v16;
  uint64_t v17 = type metadata accessor for WorkoutViewStyle();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_1000AFA94(&qword_100951660);
  uint64_t v89 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  char v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_1000AFA94(&qword_100951668);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1000AFA94(&qword_100951670);
  uint64_t v28 = v27 - 8;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v116 = (uint64_t)&v86 - v32;
  uint64_t v110 = a1;
  static WorkoutNotificationFont.multilineTextView(with:lineLimit:)();
  unsigned int v94 = enum case for WorkoutViewStyle.iOSNormalMetric(_:);
  uint64_t v33 = *(void (**)(void))(v18 + 104);
  uint64_t v92 = v18 + 104;
  unint64_t v93 = (void (*)(char *, void, uint64_t))v33;
  uint64_t v90 = v17;
  v33(v20);
  swift_getOpaqueTypeConformance2();
  uint64_t v34 = v88;
  View.workoutViewStyle(_:)();
  uint64_t v35 = v18 + 8;
  char v36 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v91 = v35;
  v36(v20, v17);
  uint64_t v87 = v36;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v22, v34);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  id v111 = v31;
  v37(v31, v26, v23);
  *(void *)&v31[*(int *)(v28 + 44)] = 0x3FF0000000000000;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  sub_1000AEEC8((uint64_t)v31, v116, &qword_100951670);
  uint64_t v38 = v110;
  long long v118 = *(_OWORD *)v110;
  swift_retain();
  MetricsPublisher.racePositionStatePublisher.getter();
  sub_1000E2384((uint64_t)&v118);
  RacePositionStatePublisher.racePosition.getter();
  swift_release();
  swift_retain();
  MetricsPublisher.racePositionStatePublisher.getter();
  sub_1000E2384((uint64_t)&v118);
  RacePositionStatePublisher.positionOnRoute.getter();
  swift_release();
  swift_retain();
  MetricsPublisher.racePositionStatePublisher.getter();
  sub_1000E2384((uint64_t)&v118);
  RacePositionStatePublisher.ghostPositionOnRoute.getter();
  swift_release();
  id v39 = v38[2];
  sub_1000E2358((uint64_t)&v118);
  id v40 = v39;
  MetricsPublisher.raceInformationPublisher.getter();
  sub_1000E2384((uint64_t)&v118);
  RaceInformationPublisher.routePoints.getter();
  swift_release();
  type metadata accessor for RaceElevationChartProperties();
  swift_allocObject();
  RaceElevationChartProperties.init(activityType:chartPoints:)();
  id v41 = v38[3];
  uint64_t v42 = v96;
  RaceElevationMetricView.init(racePosition:positionOnRoute:ghostPositionOnRoute:chartProperties:formattingManager:)();
  uint64_t v43 = v90;
  uint64_t v44 = v93;
  v93(v20, v94, v90);
  sub_100248420(&qword_100951678, (void (*)(uint64_t))&type metadata accessor for RaceElevationMetricView);
  int v45 = v112;
  uint64_t v46 = v97;
  View.workoutViewStyle(_:)();
  v36(v20, v43);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v42, v46);
  (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v114, v45, v113);
  uint64_t v47 = static VerticalAlignment.center.getter();
  uint64_t v48 = (uint64_t)v99;
  *uint64_t v99 = v47;
  *(void *)(v48 + 8) = 0x401C000000000000;
  *(unsigned char *)(v48 + 16) = 0;
  uint64_t v49 = sub_1000AFA94(&qword_100951680);
  sub_100247D54(v110, (char *)(v48 + *(int *)(v49 + 44)));
  uint64_t v50 = v100;
  sub_1000AEF2C(v48, v100, &qword_100951630);
  *(void *)(v50 + *(int *)(v102 + 36)) = 0x3FF0000000000000;
  sub_10008DB18(v48, &qword_100951630);
  v44(v20, enum case for WorkoutViewStyle.iOSSmallMetric(_:), v43);
  sub_10024835C();
  uint64_t v51 = v101;
  View.workoutViewStyle(_:)();
  v87(v20, v43);
  sub_10008DB18(v50, &qword_100951638);
  LOBYTE(v46) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v60 = v106;
  uint64_t v61 = (uint64_t)v103;
  uint64_t v62 = v108;
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v103, v51, v108);
  uint64_t v63 = v61 + *(int *)(v104 + 44);
  *(unsigned char *)uint64_t v63 = v46;
  *(void *)(v63 + 8) = v53;
  *(void *)(v63 + 16) = v55;
  *(void *)(v63 + 24) = v57;
  *(void *)(v63 + 32) = v59;
  *(unsigned char *)(v63 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v51, v62);
  LOBYTE(v46) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  uint64_t v72 = v105;
  sub_1000AEF2C(v61, v105, &qword_100951648);
  uint64_t v73 = v72 + *(int *)(v107 + 44);
  *(unsigned char *)uint64_t v73 = v46;
  *(void *)(v73 + 8) = v65;
  *(void *)(v73 + 16) = v67;
  *(void *)(v73 + 24) = v69;
  *(void *)(v73 + 32) = v71;
  *(unsigned char *)(v73 + 40) = 0;
  sub_10008DB18(v61, &qword_100951648);
  uint64_t v74 = v115;
  sub_1000AEEC8(v72, v115, &qword_100951650);
  uint64_t v75 = (uint64_t)v111;
  sub_1000AEF2C(v116, (uint64_t)v111, &qword_100951670);
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
  uint64_t v77 = v112;
  uint64_t v78 = v113;
  unsigned __int8 v79 = v114;
  v76(v112, v114, v113);
  sub_1000AEF2C(v74, v72, &qword_100951650);
  uint64_t v80 = v109;
  sub_1000AEF2C(v75, v109, &qword_100951670);
  uint64_t v81 = (int *)sub_1000AFA94(&qword_1009516A8);
  uint64_t v82 = v80 + v81[12];
  *(void *)uint64_t v82 = 0x4000000000000000;
  *(unsigned char *)(v82 + 8) = 0;
  v76((char *)(v80 + v81[16]), v77, v78);
  uint64_t v83 = v80 + v81[20];
  *(void *)uint64_t v83 = 0x4000000000000000;
  *(unsigned char *)(v83 + 8) = 0;
  sub_1000AEF2C(v72, v80 + v81[24], &qword_100951650);
  sub_10008DB18(v115, &qword_100951650);
  uint64_t v84 = *(void (**)(char *, uint64_t))(v117 + 8);
  v84(v79, v78);
  sub_10008DB18(v116, &qword_100951670);
  sub_10008DB18(v72, &qword_100951650);
  v84(v77, v78);
  return sub_10008DB18((uint64_t)v111, &qword_100951670);
}

uint64_t sub_100247D54@<X0>(id *a1@<X0>, char *a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v3 = sub_1000AFA94(&qword_10094C100);
  __chkstk_darwin(v3 - 8);
  uint64_t v48 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000AFA94(&qword_10094C108);
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v49 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v45 - v8;
  uint64_t v9 = type metadata accessor for RacePosition();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v46 = type metadata accessor for RaceRemainingDistanceMetricView();
  uint64_t v53 = *(void *)(v46 - 8);
  uint64_t v16 = __chkstk_darwin(v46);
  uint64_t v47 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v45 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v45 - v21;
  long long v55 = *(_OWORD *)a1;
  swift_retain();
  MetricsPublisher.racePositionStatePublisher.getter();
  sub_1000E2384((uint64_t)&v55);
  RacePositionStatePublisher.racePosition.getter();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for RacePosition.notYetOnRoute(_:), v9);
  sub_100248420(&qword_1009516B0, (void (*)(uint64_t))&type metadata accessor for RacePosition);
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24(v13, v9);
  v24(v15, v9);
  if ((v23 & 1) == 0)
  {
    swift_retain();
    MetricsPublisher.racePositionStatePublisher.getter();
    sub_1000E2384((uint64_t)&v55);
    RacePositionStatePublisher.remainingRouteDistance.getter();
    swift_release();
  }
  id v25 = a1[3];
  FIUIDistanceTypeForActivityType();
  RaceRemainingDistanceMetricView.init(remainingDistance:formattingManager:distanceType:)();
  uint64_t v26 = v53;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  uint64_t v28 = v22;
  int v45 = v22;
  uint64_t v29 = v20;
  uint64_t v30 = v46;
  v27(v22, v29, v46);
  uint64_t v31 = type metadata accessor for MetricPlatterType();
  uint64_t v32 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v48, 1, 1, v31);
  swift_retain();
  uint64_t v33 = v49;
  static MetricViewBuilder.view(metricType:metricPlatterType:formattingManager:activityType:metricsPublisher:)();
  sub_1000E2384((uint64_t)&v55);
  sub_10008DB18(v32, &qword_10094C100);
  uint64_t v35 = v50;
  uint64_t v34 = v51;
  char v36 = v54;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v54, v33, v51);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  uint64_t v38 = v47;
  v37(v47, v28, v30);
  id v39 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v39(v33, v36, v34);
  id v40 = v52;
  v37(v52, v38, v30);
  uint64_t v41 = sub_1000AFA94(&qword_1009516B8);
  v39(&v40[*(int *)(v41 + 48)], v33, v34);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v35 + 8);
  v42(v54, v34);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v53 + 8);
  v43(v45, v30);
  v42(v33, v34);
  return ((uint64_t (*)(char *, uint64_t))v43)(v38, v30);
}

uint64_t sub_1002482F4@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v3;
  _OWORD v6[2] = *(_OWORD *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 48);
  *(void *)a1 = static HorizontalAlignment.leading.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v4 = sub_1000AFA94(&qword_100951628);
  return sub_100247120((id *)v6, a1 + *(int *)(v4 + 44));
}

unint64_t sub_10024835C()
{
  unint64_t result = qword_100951688;
  if (!qword_100951688)
  {
    sub_1000A1370(&qword_100951638);
    sub_1000A132C(&qword_100951690, &qword_100951630);
    sub_1000A132C(&qword_100951698, &qword_1009516A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951688);
  }
  return result;
}

uint64_t sub_100248420(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100248468()
{
  return sub_1000A132C(&qword_1009516C0, &qword_1009516C8);
}

id sub_100248554()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityDashboardEditButtonCell();
  [super dealloc];
}

uint64_t sub_10024858C()
{
  return swift_deallocObject();
}

void sub_1002485C4()
{
}

uint64_t *sub_1002485F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1002486C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100248754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002487D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100248854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100248868);
}

uint64_t sub_100248868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100248928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024893C);
}

uint64_t sub_10024893C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

Swift::Int sub_1002489F8()
{
  uint64_t v1 = sub_1000AFA94((uint64_t *)&unk_1009555F0);
  __chkstk_darwin(v1 - 8);
  long long v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v39 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for ActivitySharingFriendListItem();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v13 = (id *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher.init()();
  Date.timeIntervalSince1970.getter();
  if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v14;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  uint64_t v16 = *(void *)(v0 + *(int *)(type metadata accessor for ActivitySharingFriendListDateItemGroup() + 20));
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
LABEL_15:
    long long v47 = v42;
    long long v48 = v43;
    uint64_t v49 = v44;
    long long v45 = v40;
    long long v46 = v41;
    return Hasher.finalize()();
  }
  char v36 = v3;
  uint64_t v18 = v16 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v19 = (void (**)(void))(v5 + 32);
  uint64_t v38 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v37 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v20 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v21 = *(void *)(v11 + 72);
  uint64_t v33 = v16;
  swift_bridgeObjectRetain();
  char v22 = &selRef_initUsingEarnedShader_;
  uint64_t v34 = v13;
  while (1)
  {
    sub_1001B788C(v18, (uint64_t)v13);
    id v24 = *v13;
    if ([*v13 v22[200]])
    {
      if (qword_10094A870 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_1000876DC(v4, (uint64_t)qword_100955130);
      (*v37)(v9, v23, v4);
      goto LABEL_9;
    }
    id v25 = v20;
    uint64_t v26 = v22;
    uint64_t v27 = v21;
    id v28 = [v24 UUID];
    if (!v28) {
      break;
    }
    uint64_t v29 = v28;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = *v19;
    uint64_t v31 = v36;
    (*v19)();
    (*v38)(v31, 0, 1, v4);
    Swift::Int result = (*v35)(v31, 1, v4);
    if (result == 1) {
      goto LABEL_17;
    }
    ((void (*)(char *, char *, uint64_t))v30)(v9, v31, v4);
    uint64_t v21 = v27;
    char v22 = v26;
    uint64_t v20 = v25;
    uint64_t v13 = v34;
LABEL_9:
    sub_100181C98();
    dispatch thunk of Hashable.hash(into:)();
    (*v20)(v9, v4);
    sub_100248E54((uint64_t)v13);
    v18 += v21;
    if (!--v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  Swift::Int result = (*v38)(v36, 1, 1, v4);
LABEL_17:
  __break(1u);
  return result;
}

Swift::Int sub_100248E2C@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result = sub_1002489F8();
  *a1 = result;
  return result;
}

uint64_t sub_100248E54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActivitySharingFriendListItem();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100248EB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      uint64_t v10 = sub_1000AFA94((uint64_t *)&unk_10095B890);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
    uint64_t v13 = a3[7];
    Swift::UInt64 v14 = (char *)a1 + v13;
    Swift::UInt64 v15 = (char *)a2 + v13;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v9((uint64_t *)v15, 1, v7))
    {
      uint64_t v16 = sub_1000AFA94((uint64_t *)&unk_10095B890);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v15, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
    }
    uint64_t v17 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  }
  return a1;
}

uint64_t sub_100249118(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v5(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v4);
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_10024925C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8(v13, 1, v6))
  {
    uint64_t v14 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v13, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  uint64_t v15 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_100249474(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  a1[a3[8]] = a2[a3[8]];
  uint64_t v18 = a3[9];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_100249764(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  if (v8(&a2[v11], 1, v6))
  {
    uint64_t v14 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v13, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  uint64_t v15 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  int v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)int v16 = *(void *)v17;
  v16[8] = v17[8];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_100249970(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_1000AFA94((uint64_t *)&unk_10095B890);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t sub_100249C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100249C60);
}

uint64_t sub_100249C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100249D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100249D38);
}

uint64_t sub_100249D38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000AFA94((uint64_t *)&unk_10095B890);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MirrorIntervalTimeView()
{
  uint64_t result = qword_100951848;
  if (!qword_100951848) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100249E44()
{
  sub_1000E383C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100249F04()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100249F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  int v16 = (char *)&v24 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v24 - v17;
  sub_1000AEF2C(v3, (uint64_t)v8, (uint64_t *)&unk_10095B890);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v16, v9);
    sub_10008DB18((uint64_t)v8, (uint64_t *)&unk_10095B890);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
  }
  type metadata accessor for MirrorIntervalTimeView();
  Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)();
  uint64_t v19 = (void *)WorkoutStep.goal.getter();
  id v20 = [v19 value];

  if (v20)
  {
    id v21 = [self secondUnit];
    [v20 doubleValueForUnit:v21];
  }
  Date.addingTimeInterval(_:)();
  char v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v13, v9);
  v22(v18, v9);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
}

double sub_10024A240(uint64_t a1)
{
  uint64_t v3 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  int v16 = (char *)&v23 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v23 - v17;
  if ((*(unsigned char *)(v1 + *(int *)(type metadata accessor for MirrorIntervalTimeView() + 40)) & 1) == 0)
  {
    sub_100249F20(a1, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
      Date.timeIntervalSince(_:)();
      double v20 = v21;
      int v16 = v18;
      goto LABEL_9;
    }
    sub_10008DB18((uint64_t)v8, (uint64_t *)&unk_10095B890);
  }
  sub_1000AEF2C(v1, (uint64_t)v6, (uint64_t *)&unk_10095B890);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_10008DB18((uint64_t)v6, (uint64_t *)&unk_10095B890);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, a1, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v6, v9);
    Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  Date.timeIntervalSince(_:)();
  double v20 = v19;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  return v20;
}

uint64_t sub_10024A534()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v14 - v6;
  Double.smoothedForDisplay.getter();
  uint64_t v9 = v8;
  if (*(unsigned char *)(v0 + *(int *)(type metadata accessor for MirrorIntervalTimeView() + 40))) {
    uint64_t v10 = (unsigned int *)&enum case for FloatingPointRoundingRule.down(_:);
  }
  else {
    uint64_t v10 = (unsigned int *)&enum case for FloatingPointRoundingRule.up(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v7, *v10, v1);
  v14[1] = v9;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v5, v1);
  if (v11 == enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:)
    || v11 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:)
    || v11 == enum case for FloatingPointRoundingRule.up(_:)
    || v11 == enum case for FloatingPointRoundingRule.down(_:)
    || v11 == enum case for FloatingPointRoundingRule.towardZero(_:)
    || v11 == enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }
  else
  {
    Double._roundSlowPath(_:)();
    uint64_t v13 = *(void (**)(char *, uint64_t))(v2 + 8);
    v13(v7, v1);
    v13(v5, v1);
  }
  type metadata accessor for ElapsedTimeFormatter();
  return static ElapsedTimeFormatter.stringFromElapsedTime(_:trimDoubleLeadingZero:compactHours:)();
}

uint64_t sub_10024A7D0(uint64_t a1)
{
  uint64_t v3 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v26 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v24 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v27 = v1;
  sub_100249F20(a1, (uint64_t)v8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v8, 1, v9) == 1) {
    return sub_10008DB18((uint64_t)v8, (uint64_t *)&unk_10095B890);
  }
  uint64_t v24 = v17;
  uint64_t v25 = a1;
  double v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v20(v17, v8, v9);
  sub_1000AEF2C(v27, (uint64_t)v6, (uint64_t *)&unk_10095B890);
  if (v18(v6, 1, v9) == 1)
  {
    sub_10008DB18((uint64_t)v6, (uint64_t *)&unk_10095B890);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v25, v9);
  }
  else
  {
    double v21 = v26;
    v20(v26, v6, v9);
    type metadata accessor for MirrorIntervalTimeView();
    Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
  }
  Date.timeIntervalSince(_:)();
  char v22 = v24;
  Date.timeIntervalSince(_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v23)(v22, v9);
}

uint64_t sub_10024AAD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v60 = a1;
  uint64_t v61 = type metadata accessor for MirrorIntervalTimeView();
  uint64_t v52 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v53 = v3;
  uint64_t v54 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for PeriodicTimelineSchedule();
  uint64_t v51 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v50 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000AFA94(&qword_100951898);
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v59 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  long long v55 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v56 = (char *)&v46 - v8;
  uint64_t v9 = sub_1000AFA94((uint64_t *)&unk_10095B890);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  double v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  char v22 = (char *)&v46 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v46 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v46 - v26;
  Date.init()();
  sub_1000AEF2C(v2, (uint64_t)v14, (uint64_t *)&unk_10095B890);
  long long v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v46(v14, 1, v15) == 1)
  {
    sub_10008DB18((uint64_t)v14, (uint64_t *)&unk_10095B890);
    uint64_t v28 = v15;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v27, v25, v15);
    uint64_t v29 = v2;
    uint64_t v30 = *(void (**)(char *))(v16 + 8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v22, v14, v15);
    Date.offset(until:pauseTimes:lastUnbalancedPauseStart:)();
    uint64_t v31 = v15;
    uint64_t v29 = v2;
    uint64_t v32 = v22;
    uint64_t v30 = *(void (**)(char *))(v16 + 8);
    uint64_t v28 = v31;
    v30(v32);
  }
  long long v47 = (uint64_t (*)(char *, uint64_t))v30;
  ((void (*)(char *, uint64_t))v30)(v25, v28);
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v48 = v28;
  uint64_t v49 = v27;
  v33(v19, v27, v28);
  uint64_t v34 = v50;
  PeriodicTimelineSchedule.init(from:by:)();
  sub_1000AEF2C(v29 + *(int *)(v61 + 28), (uint64_t)v12, (uint64_t *)&unk_10095B890);
  v46(v12, 1, v28);
  sub_10008DB18((uint64_t)v12, (uint64_t *)&unk_10095B890);
  uint64_t v35 = sub_10024BCD4((unint64_t *)&qword_1009518A0, (void (*)(uint64_t))&type metadata accessor for PeriodicTimelineSchedule);
  uint64_t v37 = v56;
  uint64_t v36 = v57;
  TimelineSchedule.paused(_:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v36);
  uint64_t v38 = v29;
  uint64_t v39 = v54;
  sub_1001AB2EC(v38, v54);
  unint64_t v40 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v41 = swift_allocObject();
  sub_1001AB288(v39, v41 + v40);
  uint64_t v43 = v58;
  uint64_t v42 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v37, v59);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = sub_10024BBF8;
  *(void *)(v44 + 24) = v41;
  sub_1000AFA94(&qword_1009518A8);
  uint64_t v62 = v36;
  uint64_t v63 = v35;
  swift_getOpaqueTypeConformance2();
  sub_1000A132C(&qword_1009518B0, &qword_1009518A8);
  TimelineView<>.init(_:content:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v42);
  return v47(v49, v48);
}

uint64_t sub_10024B15C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = static Alignment.center.getter();
  a2[1] = v4;
  uint64_t v5 = sub_1000AFA94(&qword_1009518C8);
  return sub_10024B1B4(a1, (uint64_t)a2 + *(int *)(v5 + 44));
}

uint64_t sub_10024B1B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v58 = sub_1000AFA94(&qword_1009518D0);
  __chkstk_darwin(v58);
  uint64_t v61 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_1000AFA94(&qword_1009518D8);
  __chkstk_darwin(v60);
  long long v55 = (char **)((char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = type metadata accessor for MetricText();
  uint64_t v57 = *(void *)(v59 - 8);
  uint64_t v5 = __chkstk_darwin(v59);
  uint64_t v56 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v50 - v8;
  __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v50 - v10;
  uint64_t v51 = sub_1000AFA94(&qword_1009518E0);
  uint64_t v11 = __chkstk_darwin(v51);
  uint64_t v53 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v50 = (char *)&v50 - v14;
  __chkstk_darwin(v13);
  uint64_t v54 = (uint64_t)&v50 - v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  double v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AFA94(&qword_1009518B8);
  TimelineView.Context.date.getter();
  sub_10024A240((uint64_t)v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v17 + 8);
  v20(v19, v16);
  uint64_t v21 = type metadata accessor for MirrorIntervalTimeView();
  if (*(unsigned char *)(a1 + *(int *)(v21 + 32)) == 1 && (char v22 = (uint64_t *)(a1 + *(int *)(v21 + 36)), (v22[1] & 1) == 0))
  {
    uint64_t v30 = *v22;
    if (qword_10094B128 != -1) {
      swift_once();
    }
    double v31 = *(double *)&qword_100998908;
    TimelineView.Context.date.getter();
    sub_10024A7D0((uint64_t)v19);
    double v33 = v32;
    v20(v19, v16);
    double v34 = 0.0;
    if (v33 >= 0.0) {
      double v34 = v33;
    }
    if (v34 <= 1.0) {
      double v35 = v34;
    }
    else {
      double v35 = 1.0;
    }
    sub_10024A534();
    id v36 = [self mainBundle];
    NSString v37 = String._bridgeToObjectiveC()();
    id v39 = [v36 localizedStringForKey:v37 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v52;
    MetricText.init(value:unit:description:stale:includesSlashes:)();
    if (qword_10094A5C8 != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v41 = v57;
    uint64_t v42 = (uint64_t)v50;
    uint64_t v43 = v59;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v50, v40, v59);
    uint64_t v44 = (_OWORD *)(v42 + *(int *)(v51 + 36));
    long long v45 = v64;
    *uint64_t v44 = v63;
    v44[1] = v45;
    v44[2] = v65;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v43);
    uint64_t v46 = v54;
    sub_10024BD1C(v42, v54);
    uint64_t v47 = v53;
    sub_1000AEF2C(v46, v53, &qword_1009518E0);
    uint64_t v48 = (uint64_t)v55;
    *long long v55 = 2;
    *(void *)(v48 + 8) = v30;
    float v38 = v31;
    *(float *)(v48 + 16) = v38;
    *(double *)(v48 + 24) = v35;
    uint64_t v49 = sub_1000AFA94(&qword_1009518F0);
    sub_1000AEF2C(v47, v48 + *(int *)(v49 + 48), &qword_1009518E0);
    sub_10008DB18(v47, &qword_1009518E0);
    sub_1000AEF2C(v48, v61, &qword_1009518D8);
    swift_storeEnumTagMultiPayload();
    sub_1000A132C(&qword_1009518E8, &qword_1009518D8);
    sub_10024BCD4((unint64_t *)&qword_10094C570, (void (*)(uint64_t))&type metadata accessor for MetricText);
    _ConditionalContent<>.init(storage:)();
    sub_10008DB18(v48, &qword_1009518D8);
    return sub_10008DB18(v46, &qword_1009518E0);
  }
  else
  {
    sub_10024A534();
    id v23 = [self mainBundle];
    NSString v24 = String._bridgeToObjectiveC()();
    id v25 = [v23 localizedStringForKey:v24 value:0 table:0];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v56;
    MetricText.init(value:unit:description:stale:includesSlashes:)();
    uint64_t v27 = v57;
    uint64_t v28 = v59;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v9, v26, v59);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v61, v9, v28);
    swift_storeEnumTagMultiPayload();
    sub_1000A132C(&qword_1009518E8, &qword_1009518D8);
    sub_10024BCD4((unint64_t *)&qword_10094C570, (void (*)(uint64_t))&type metadata accessor for MetricText);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  }
}

uint64_t sub_10024BA74()
{
  uint64_t v1 = type metadata accessor for MirrorIntervalTimeView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v5(v0 + v2, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  }
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 28);
  if (!v5(v6, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v6, v3);
  }

  return swift_deallocObject();
}

uint64_t sub_10024BBF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for MirrorIntervalTimeView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10024B15C(v4, a1);
}

uint64_t sub_10024BC78()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10024BCB0(uint64_t a1)
{
  return sub_10024BD90(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), &qword_1009518C0);
}

uint64_t sub_10024BCD4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10024BD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_1009518E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024BD84(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  return sub_10024BD90(a1, a2, a3, &qword_1009518F8);
}

uint64_t sub_10024BD90(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_1000AFA94(&qword_1009518B8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_1000AFA94(a4);
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t result = v10 - 8;
  if (*(void *)(v12 + 64) == v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
    a2((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10024BED4()
{
  unint64_t result = qword_100951900;
  if (!qword_100951900)
  {
    sub_1000A1370(&qword_100951908);
    sub_1000A132C(&qword_1009518B0, &qword_1009518A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951900);
  }
  return result;
}

unint64_t sub_10024BF70()
{
  unint64_t result = qword_100951910;
  if (!qword_100951910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951910);
  }
  return result;
}

unint64_t sub_10024BFC8()
{
  unint64_t result = qword_100951918;
  if (!qword_100951918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951918);
  }
  return result;
}

unint64_t sub_10024C020()
{
  unint64_t result = qword_100951920[0];
  if (!qword_100951920[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100951920);
  }
  return result;
}

uint64_t sub_10024C074@<X0>(uint64_t *a1@<X8>)
{
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v2 = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D390);
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  *a1 = v2;
  a1[1] = result;
  return result;
}

uint64_t sub_10024C128(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_100951988 + dword_100951988);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10024C1D0;
  return v5(a1);
}

uint64_t sub_10024C1D0(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_10024C2D0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = *v1;
  uint64_t v6 = (uint64_t (*)(void *))((char *)&dword_100951980 + dword_100951980);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10024D1DC;
  return v6(v3);
}

unint64_t sub_10024C380()
{
  unint64_t result = qword_100951938;
  if (!qword_100951938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951938);
  }
  return result;
}

unint64_t sub_10024C3D8()
{
  unint64_t result = qword_100951940;
  if (!qword_100951940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951940);
  }
  return result;
}

unint64_t sub_10024C430()
{
  unint64_t result = qword_100951948;
  if (!qword_100951948)
  {
    sub_1000A1370(qword_100951950);
    sub_10024C3D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951948);
  }
  return result;
}

uint64_t sub_10024C4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_10024C55C();
  *uint64_t v5 = v2;
  v5[1] = sub_10005DB5C;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_10024C55C()
{
  unint64_t result = qword_100951968;
  if (!qword_100951968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951968);
  }
  return result;
}

uint64_t sub_10024C5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = *v3;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, void *))((char *)&dword_100951978 + dword_100951978);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1001A0E60;
  return v10(a2, a3, v7);
}

ValueMetadata *type metadata accessor for ModalityTypeEntityQuery()
{
  return &type metadata for ModalityTypeEntityQuery;
}

uint64_t sub_10024C684(uint64_t result)
{
  unint64_t v1 = 0;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 32;
  uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)v10;
    }
    if (v4 == v1) {
      break;
    }
    uint64_t v5 = *(void *)(v3 + 8 * v1);
    unint64_t result = (uint64_t)(id)FILocalizedNameForIndoorAgnosticActivityType();
    if (!result) {
      goto LABEL_16;
    }
    unint64_t v6 = (void *)result;
    ++v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000A06D0();
    LOBYTE(v6) = StringProtocol.localizedCaseInsensitiveContains<A>(_:)();
    unint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
      uint64_t v7 = v10;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = sub_1001C9104(0, v10[2] + 1, 1);
        uint64_t v7 = v10;
      }
      unint64_t v9 = v7[2];
      unint64_t v8 = v7[3];
      if (v9 >= v8 >> 1)
      {
        unint64_t result = sub_1001C9104(v8 > 1, v9 + 1, 1);
        uint64_t v7 = v10;
      }
      v7[2] = v9 + 1;
      uint64_t v10 = v7;
      v7[v9 + 4] = v5;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10024C7F8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10024C818, 0, 0);
}

uint64_t sub_10024C818()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = *(void *)(v1 + 32);
    swift_bridgeObjectRetain();
    if ((v3 & 0x8000000000000000) != 0) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    unint64_t v4 = sub_1001E7490(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v6 = v4[2];
    unint64_t v5 = v4[3];
    int64_t v7 = v6 + 1;
    if (v6 >= v5 >> 1) {
      goto LABEL_19;
    }
    while (1)
    {
      v4[2] = v7;
      v4[v6 + 4] = v3;
      if (v2 == 1) {
        break;
      }
      unint64_t v3 = v6 + 5;
      unint64_t v6 = 5;
      while (1)
      {
        unint64_t v5 = v6 - 4;
        unint64_t v10 = v6 - 3;
        if (__OFADD__(v6 - 4, 1)) {
          break;
        }
        uint64_t v11 = *(void *)(v1 + 8 * v6);
        if (v11 < 0) {
          return _assertionFailure(_:_:file:line:flags:)();
        }
        unint64_t v12 = v4[3];
        int64_t v7 = v3 - 3;
        if (v3 - 4 >= v12 >> 1) {
          unint64_t v4 = sub_1001E7490((void *)(v12 > 1), v3 - 3, 1, v4);
        }
        v4[2] = v7;
        v4[v3++] = v11;
        ++v6;
        if (v10 == v2) {
          goto LABEL_5;
        }
      }
      __break(1u);
LABEL_19:
      unint64_t v4 = sub_1001E7490((void *)(v5 > 1), v7, 1, v4);
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v4 = _swiftEmptyArrayStorage;
  }
  unint64_t v8 = *(uint64_t (**)(void *))(v0 + 8);
  return v8(v4);
}

uint64_t sub_10024C9FC(void *a1)
{
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = *a1;
  return _swift_task_switch(sub_10024CAB4, 0, 0);
}

uint64_t sub_10024CAB4()
{
  AppDependency.wrappedValue.getter();
  uint64_t v1 = *(void **)(v0 + 16);
  *(void *)(v0 + 16) = 0;
  id v2 = [v1 activityMoveModeWithError:v0 + 16];

  uint64_t v3 = *(void **)(v0 + 16);
  if (v2)
  {
    type metadata accessor for AppDependencyManager();
    id v4 = v3;
    static AppDependencyManager.shared.getter();
    AppDependency.__allocating_init(key:manager:)();
    sub_1000AFA94(&qword_10094D390);
    static AppDependencyManager.shared.getter();
    uint64_t v5 = AppDependency.__allocating_init(key:manager:)();
    uint64_t v6 = sub_1003880F0(v5);
    swift_release();
    swift_release();
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v23 = v0;
      unint64_t v8 = 0;
      unint64_t v9 = _swiftEmptyArrayStorage;
      id v10 = v2;
      while (1)
      {
        if (v8 >= *(void *)(v6 + 16))
        {
          __break(1u);
          goto LABEL_30;
        }
        uint64_t v11 = v6 + 32 + 16 * v8;
        if (*(unsigned __int8 *)(v11 + 9) - 2 < 5) {
          goto LABEL_6;
        }
        uint64_t v12 = *(void *)v11;
        id v13 = [objc_allocWithZone((Class)FIUIWorkoutActivityType) initWithActivityTypeIdentifier:*(void *)v11 isIndoor:0];
        if (objc_msgSend(self, "fiui_activitySupportsMetricType:activityType:activityMoveMode:", 1, v13, objc_msgSend(v2, "activityMoveMode")))
        {
          uint64_t v14 = v9[2];
          if (!v14) {
            goto LABEL_17;
          }
          if (v9[4] != v12) {
            break;
          }
        }
LABEL_5:

LABEL_6:
        if (++v8 == v7)
        {
          swift_bridgeObjectRelease();
          uint64_t v0 = v23;
          goto LABEL_26;
        }
      }
      if (v14 != 1)
      {
        uint64_t v15 = 5;
        while (1)
        {
          uint64_t v16 = v15 - 3;
          if (__OFADD__(v15 - 4, 1)) {
            break;
          }
          if (v9[v15] == v12) {
            goto LABEL_5;
          }
          ++v15;
          if (v16 == v14) {
            goto LABEL_17;
          }
        }
LABEL_30:
        __break(1u);
      }
LABEL_17:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v9 = sub_1001E7490(0, v14 + 1, 1, v9);
      }
      unint64_t v18 = v9[2];
      unint64_t v17 = v9[3];
      if (v18 >= v17 >> 1) {
        unint64_t v9 = sub_1001E7490((void *)(v17 > 1), v18 + 1, 1, v9);
      }
      void v9[2] = v18 + 1;
      v9[v18 + 4] = v12;
      id v2 = v10;
      goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    unint64_t v9 = _swiftEmptyArrayStorage;
LABEL_26:

    char v22 = *(uint64_t (**)(void *))(v0 + 8);
    return v22(v9);
  }
  else
  {
    id v19 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

uint64_t sub_10024CE3C(uint64_t a1, uint64_t a2, void *a3)
{
  v3[6] = a1;
  v3[7] = a2;
  uint64_t v7 = (uint64_t (*)(void *))((char *)&dword_100951980 + dword_100951980);
  uint64_t v5 = (void *)swift_task_alloc();
  v3[8] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10024CEE8;
  return v7(a3);
}

uint64_t sub_10024CEE8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    return _swift_task_switch(sub_10024D038, 0, 0);
  }
}

id sub_10024D038()
{
  uint64_t v1 = v0[10];
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_10024C684(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v2 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = v2;
      uint64_t v5 = *(void *)(v2 + 8 * v3 + 32);
      id result = (id)FILocalizedNameForIndoorAgnosticActivityType();
      if (!result) {
        break;
      }
      uint64_t v7 = result;
      uint64_t v9 = v0[6];
      uint64_t v8 = v0[7];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      v0[2] = v10;
      v0[3] = v12;
      v0[4] = v9;
      v0[5] = v8;
      sub_1000A06D0();
      uint64_t v13 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v13)
      {
        swift_bridgeObjectRelease_n();
        sub_1000AFA94(&qword_10094E938);
        uint64_t v2 = swift_allocObject();
        *(_OWORD *)(v2 + 16) = xmmword_1007509E0;
        *(void *)(v2 + 32) = v5;
        goto LABEL_8;
      }
      ++v3;
      uint64_t v2 = v4;
      if (v15 == v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
    return (id)v14(v2);
  }
  return result;
}

unint64_t sub_10024D1E4()
{
  unint64_t result = qword_100951990;
  if (!qword_100951990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951990);
  }
  return result;
}

unint64_t sub_10024D23C()
{
  unint64_t result = qword_100951998;
  if (!qword_100951998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951998);
  }
  return result;
}

unint64_t sub_10024D294()
{
  unint64_t result = qword_1009519A0;
  if (!qword_1009519A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009519A0);
  }
  return result;
}

uint64_t sub_10024D2E8()
{
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v0 = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D390);
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  qword_1009978A8 = v0;
  unk_1009978B0 = result;
  return result;
}

uint64_t sub_10024D398()
{
  uint64_t v0 = sub_1000AFA94(&qword_10094D328);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = type metadata accessor for TypeDisplayRepresentation();
  sub_1000258C4(v5, qword_1009978B8);
  sub_1000876DC(v5, (uint64_t)qword_1009978B8);
  LocalizedStringResource.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_10024D504()
{
  uint64_t v0 = sub_1000AFA94(&qword_1009519F0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000AFA94(&qword_1009519F8);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_1000AFA94(&qword_1009519E8);
  sub_1000258C4(v5, qword_1009978D0);
  sub_1000876DC(v5, (uint64_t)qword_1009978D0);
  sub_1001A1F7C();
  EntityURLRepresentation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._uint64_t countAndFlagsBits = 0x617373656E746966;
  v6._object = (void *)0xED00002F2F3A7070;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v6);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for EntityURLRepresentation.StringInterpolation.Token.id<A>(_:), v0);
  EntityURLRepresentation.StringInterpolation.appendInterpolation(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  EntityURLRepresentation.StringInterpolation.appendLiteral(_:)(v7);
  return EntityURLRepresentation.init(stringInterpolation:)();
}

unint64_t sub_10024D6F8(uint64_t a1, __int16 a2)
{
  unint64_t result = 0x79726F74736968;
  switch(HIBYTE(a2))
  {
    case 2:
      return result;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
    case 6:
      unint64_t result = 0x2F79726F74736968;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      BOOL v3 = (a2 & 1) == 0 || a2 == 2;
      if (v3) {
        uint64_t v4 = 0x726F6F6474756FLL;
      }
      else {
        uint64_t v4 = 0x726F6F646E69;
      }
      if (v3) {
        uint64_t v5 = (void *)0xE700000000000000;
      }
      else {
        uint64_t v5 = (void *)0xE600000000000000;
      }
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 47;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = v4;
      v8._object = v5;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      unint64_t result = 0xD000000000000011;
      break;
  }
  return result;
}

uint64_t sub_10024D8C8@<X0>(void *a1@<X8>)
{
  if (qword_10094A700 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_1009978B0;
  *a1 = qword_1009978A8;
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

unint64_t sub_10024D948()
{
  unint64_t result = qword_1009519A8;
  if (!qword_1009519A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009519A8);
  }
  return result;
}

uint64_t sub_10024D99C@<X0>(uint64_t a1@<X8>)
{
  if (qword_10094A710 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1000AFA94(&qword_1009519E8);
  uint64_t v3 = sub_1000876DC(v2, (uint64_t)qword_1009978D0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t sub_10024DA4C()
{
  unint64_t result = qword_1009519B0;
  if (!qword_1009519B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009519B0);
  }
  return result;
}

unint64_t sub_10024DAA4()
{
  unint64_t result = qword_1009519B8;
  if (!qword_1009519B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009519B8);
  }
  return result;
}

unint64_t sub_10024DAFC()
{
  unint64_t result = qword_1009519C0;
  if (!qword_1009519C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009519C0);
  }
  return result;
}

unint64_t sub_10024DB50@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10024D6F8(*(void *)v1, *(_WORD *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10024DB80()
{
  sub_1001A2078();
  uint64_t v2 = URLRepresentableEntity.urlRepresentationParameter.getter();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return sub_1001B8FDC(v3, v0, v2, v1);
}

uint64_t sub_10024DC14@<X0>(uint64_t a1@<X8>)
{
  if (qword_10094A708 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v3 = sub_1000876DC(v2, (uint64_t)qword_1009978B8);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

unint64_t sub_10024DCC0()
{
  unint64_t result = qword_1009519D0;
  if (!qword_1009519D0)
  {
    sub_1000A1370(&qword_1009519D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009519D0);
  }
  return result;
}

uint64_t sub_10024DD1C(uint64_t a1)
{
  unint64_t v2 = sub_1001A1F7C();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10024DD6C()
{
  unint64_t result = qword_1009519E0;
  if (!qword_1009519E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009519E0);
  }
  return result;
}

uint64_t sub_10024DDC0()
{
  uint64_t v1 = sub_1004B79C0(*(void *)v0, *(_WORD *)(v0 + 8));

  return DisplayRepresentation.init(stringLiteral:)(v1);
}

uint64_t sub_10024DE00(uint64_t a1)
{
  unint64_t v2 = sub_10024DAFC();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for HistoryItemFilterValue(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HistoryFilterEntity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 5;
  }
  else {
    int v4 = -6;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryFilterEntity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 6;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryFilterEntity()
{
  return &type metadata for HistoryFilterEntity;
}

void *initializeWithCopy for ActivitySharingFriendListCompetitionsSectionView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ActivitySharingFriendListCompetitionsSectionView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

void *assignWithTake for ActivitySharingFriendListCompetitionsSectionView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySharingFriendListCompetitionsSectionView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySharingFriendListCompetitionsSectionView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivitySharingFriendListCompetitionsSectionView()
{
  return &type metadata for ActivitySharingFriendListCompetitionsSectionView;
}

uint64_t sub_10024E0D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10024E0F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v31 = a5;
  uint64_t v30 = sub_1000AFA94(&qword_100951A00);
  __chkstk_darwin(v30);
  Swift::String v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000AFA94(&qword_100951A08);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000AFA94(&qword_100951A10);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)v27 - v16;
  if (a1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v18 = v33;
    if (v33)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v11 = static HorizontalAlignment.center.getter();
      *((void *)v11 + 1) = 0x4010000000000000;
      v11[16] = 0;
      v27[1] = &v11[*(int *)(sub_1000AFA94(&qword_100951A28) + 44)];
      uint64_t v32 = v18;
      id v19 = (void *)swift_allocObject();
      uint64_t v20 = v29;
      v19[2] = a1;
      v19[3] = v20;
      uint64_t v21 = v28;
      void v19[4] = a3;
      v19[5] = v21;
      swift_retain();
      swift_retain();
      sub_1000AFA94(&qword_100951A30);
      sub_1000AFA94(&qword_100951A38);
      sub_1000A132C(&qword_100951A40, &qword_100951A30);
      uint64_t v22 = sub_1000A1370(&qword_100951A48);
      unint64_t v23 = sub_10024EBB0();
      uint64_t v33 = v22;
      unint64_t v34 = v23;
      swift_getOpaqueTypeConformance2();
      sub_10024ECDC();
      ForEach<>.init(_:content:)();
      char v24 = static Edge.Set.all.getter();
      sub_1000AEF2C((uint64_t)v11, (uint64_t)v15, &qword_100951A08);
      id v25 = &v15[*(int *)(v12 + 36)];
      *id v25 = v24;
      *(_OWORD *)(v25 + 8) = xmmword_100757870;
      *(_OWORD *)(v25 + 24) = xmmword_100757880;
      v25[40] = 0;
      sub_10008DB18((uint64_t)v11, &qword_100951A08);
      sub_10024ED30((uint64_t)v15, (uint64_t)v17);
      sub_1000AEF2C((uint64_t)v17, (uint64_t)v8, &qword_100951A10);
      swift_storeEnumTagMultiPayload();
      sub_10024EAC4();
      _ConditionalContent<>.init(storage:)();
      return sub_10008DB18((uint64_t)v17, &qword_100951A10);
    }
    else
    {
      swift_storeEnumTagMultiPayload();
      sub_10024EAC4();
      return _ConditionalContent<>.init(storage:)();
    }
  }
  else
  {
    type metadata accessor for ActivitySharingFriendListDataProvider();
    sub_10024EE10((unint64_t *)&qword_1009512A0, (void (*)(uint64_t))type metadata accessor for ActivitySharingFriendListDataProvider);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10024E53C@<X0>(ValueMetadata **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v50 = a6;
  uint64_t v7 = type metadata accessor for AccessibilityActionKind();
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for AccessibilityTraits();
  uint64_t v42 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v11 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000AFA94(&qword_100951A68);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_1000AFA94(&qword_100951A48);
  uint64_t v18 = __chkstk_darwin(v41);
  id v36 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v39 = (char *)&v35 - v20;
  uint64_t v51 = *a1;
  NSString v37 = v51;
  static AccessibilityChildBehavior.combine.getter();
  unint64_t v21 = sub_10024EC88();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v38);

  static AccessibilityTraits.isButton.getter();
  uint64_t v51 = &type metadata for ActivitySharingFriendListCompetitionViewRepresentable;
  unint64_t v52 = v21;
  swift_getOpaqueTypeConformance2();
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v40);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = v44;
  uint64_t v24 = v45;
  void v22[2] = v44;
  v22[3] = v24;
  uint64_t v25 = v46;
  uint64_t v26 = v47;
  void v22[4] = v46;
  v22[5] = v26;
  uint64_t v27 = v37;
  v22[6] = v37;
  swift_retain();
  uint64_t v28 = v27;
  swift_retain();
  uint64_t v29 = v43;
  static AccessibilityActionKind.default.getter();
  uint64_t v30 = (uint64_t)v39;
  uint64_t v31 = (uint64_t)v36;
  ModifiedContent<>.accessibilityAction(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v49);
  sub_10008DB18(v31, &qword_100951A48);
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = v23;
  void v32[3] = v24;
  v32[4] = v25;
  v32[5] = v26;
  v32[6] = v28;
  sub_10024EBB0();
  uint64_t v33 = v28;
  swift_retain();
  swift_retain();
  View.onTapGesture(count:perform:)();
  swift_release();
  return sub_10008DB18(v30, &qword_100951A48);
}

uint64_t sub_10024EA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    swift_retain();
    sub_100371DCC(a5, 1);
    return swift_release();
  }
  else
  {
    type metadata accessor for ActivitySharingNavigationCoordinator();
    sub_10024EE10(&qword_10094BF10, (void (*)(uint64_t))type metadata accessor for ActivitySharingNavigationCoordinator);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10024EAB0@<X0>(uint64_t a1@<X8>)
{
  return sub_10024E0F0(*v1, v1[1], v1[2], v1[3], a1);
}

unint64_t sub_10024EAC4()
{
  unint64_t result = qword_100951A18;
  if (!qword_100951A18)
  {
    sub_1000A1370(&qword_100951A10);
    sub_1000A132C(&qword_100951A20, &qword_100951A08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951A18);
  }
  return result;
}

uint64_t sub_10024EB64()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10024EBA4@<X0>(ValueMetadata **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10024E53C(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

unint64_t sub_10024EBB0()
{
  unint64_t result = qword_100951A50;
  if (!qword_100951A50)
  {
    sub_1000A1370(&qword_100951A48);
    sub_10024EC88();
    swift_getOpaqueTypeConformance2();
    sub_10024EE10((unint64_t *)&qword_10094C0F8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951A50);
  }
  return result;
}

unint64_t sub_10024EC88()
{
  unint64_t result = qword_100951A58;
  if (!qword_100951A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951A58);
  }
  return result;
}

unint64_t sub_10024ECDC()
{
  unint64_t result = qword_100951A60;
  if (!qword_100951A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951A60);
  }
  return result;
}

uint64_t sub_10024ED30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AFA94(&qword_100951A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024EDA4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10024EDEC()
{
  return sub_10024EA04(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_10024EE10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10024EE5C()
{
  unint64_t result = qword_100951A70;
  if (!qword_100951A70)
  {
    sub_1000A1370(&qword_100951A78);
    sub_10024EAC4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951A70);
  }
  return result;
}

unint64_t sub_10024EEDC()
{
  unint64_t result = qword_100951A80;
  if (!qword_100951A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951A80);
  }
  return result;
}

unint64_t sub_10024EF34()
{
  unint64_t result = qword_100951A88[0];
  if (!qword_100951A88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100951A88);
  }
  return result;
}

uint64_t sub_10024EF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  sub_1000AFA94((uint64_t *)&unk_1009555F0);
  v4[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  uint64_t v6 = sub_1000AFA94(&qword_100950E98);
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  uint64_t v7 = sub_1000AFA94(&qword_100950EA0);
  v4[16] = v7;
  v4[17] = *(void *)(v7 - 8);
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_10024F14C, 0, 0);
}

uint64_t sub_10024F14C()
{
  uint64_t v1 = *(void *)(v0[4] + 16);
  if (v1)
  {
    uint64_t v2 = v0[10];
    uint64_t v3 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    uint64_t v40 = v2;
    uint64_t v4 = (void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    uint64_t v5 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v7 = *(v5 - 1);
      unint64_t v8 = *v5;
      if ((*v5 & 0x2000000000000000) != 0) {
        uint64_t v9 = HIBYTE(*v5) & 0xF;
      }
      else {
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain();
      if (v9)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = String.subscript.getter();
        uint64_t v12 = v11;
        swift_bridgeObjectRelease();
        if (v10 == 77 && v12 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_16:
          swift_bridgeObjectRetain();
          sub_1002519C8(1uLL, v7, v8);
          swift_bridgeObjectRelease();
          static String._fromSubstring(_:)();
          swift_bridgeObjectRelease();
          UUID.init(uuidString:)();
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v14) {
          goto LABEL_16;
        }
      }
      UUID.init(uuidString:)();
LABEL_17:
      uint64_t v16 = v0[8];
      uint64_t v15 = v0[9];
      swift_bridgeObjectRelease();
      if ((*v3)(v16, 1, v15) == 1)
      {
        sub_1000CD2E4(v0[8]);
      }
      else
      {
        uint64_t v17 = v0[11];
        uint64_t v18 = v0[12];
        uint64_t v19 = v0[9];
        uint64_t v20 = *v4;
        (*v4)(v18, v0[8], v19);
        v20(v17, v18, v19);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = (void *)sub_1001E70C8(0, v6[2] + 1, 1, (unint64_t)v6);
        }
        unint64_t v22 = v6[2];
        unint64_t v21 = v6[3];
        if (v22 >= v21 >> 1) {
          uint64_t v6 = (void *)sub_1001E70C8(v21 > 1, v22 + 1, 1, (unint64_t)v6);
        }
        uint64_t v23 = v0[11];
        uint64_t v24 = v0[9];
        _OWORD v6[2] = v22 + 1;
        v20((uint64_t)v6+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v22, v23, v24);
      }
      v5 += 2;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v25 = v0[17];
  uint64_t v26 = v0[18];
  uint64_t v27 = v0[16];
  uint64_t v28 = self;
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_1001EFD68(v29);
  swift_bridgeObjectRelease();
  sub_100181C98();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v31 = [v28 predicateForObjectsWithUUIDs:isa];
  v0[19] = v31;

  sub_10007E2D8(0, (unint64_t *)&unk_10095B860);
  id v32 = [(id)swift_getObjCClassFromMetadata() workoutType];
  sub_10007E2D8(0, &qword_100950760);
  id v33 = v31;
  static HKSamplePredicate.sample(type:predicate:)();

  sub_1000AFA94(&qword_100950EB0);
  unint64_t v34 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1007509E0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 16))(v35 + v34, v26, v27);
  swift_bridgeObjectRelease();
  HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)();
  AppDependency.wrappedValue.getter();
  uint64_t v36 = v0[2];
  v0[20] = v36;
  NSString v37 = (void *)swift_task_alloc();
  v0[21] = v37;
  *NSString v37 = v0;
  v37[1] = sub_10024F624;
  uint64_t v38 = v0[13];
  return HKSampleQueryDescriptor.result(for:)(v36, v38);
}

uint64_t sub_10024F624(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 176) = a1;
  *(void *)(v4 + 184) = v1;
  swift_task_dealloc();

  if (v1) {
    uint64_t v5 = sub_10024FA6C;
  }
  else {
    uint64_t v5 = sub_10024F760;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10024F760()
{
  unint64_t v1 = v0[22];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_19;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      self;
      if (swift_dynamicCastObjCClass())
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v5 = (void **)(v0[22] + 32);
    do
    {
      uint64_t v6 = *v5;
      self;
      if (swift_dynamicCastObjCClass())
      {
        id v7 = v6;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v5;
      --v2;
    }
    while (v2);
  }
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v8 = v0[18];
  uint64_t v9 = v0[17];
  uint64_t v10 = v0[14];
  char v14 = (void *)v0[19];
  uint64_t v15 = v0[15];
  uint64_t v13 = v0[13];
  uint64_t v16 = v0[16];
  swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = sub_100251700((unint64_t)_swiftEmptyArrayStorage);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v15, v13);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
  return v12(v11);
}

uint64_t sub_10024FA6C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10024FB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = sub_1000AFA94(&qword_100950E98);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = sub_1000AFA94(&qword_100950EA0);
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_10024FC84, 0, 0);
}

uint64_t sub_10024FC84()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  sub_10007E2D8(0, (unint64_t *)&unk_10095B860);
  id v4 = [(id)swift_getObjCClassFromMetadata() workoutType];
  sub_10007E2D8(0, &qword_100950760);
  static HKSamplePredicate.sample(type:predicate:)();

  sub_1000AFA94(&qword_100950EB0);
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1007509E0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v6 + v5, v1, v3);
  sub_1000AFA94(&qword_100950EB8);
  sub_1000AFA94(&qword_100950EA8);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1007509E0;
  swift_getKeyPath();
  SortDescriptor.init<A>(_:order:)();
  HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)();
  AppDependency.wrappedValue.getter();
  uint64_t v7 = v0[2];
  v0[13] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10024FEDC;
  uint64_t v9 = v0[7];
  return HKSampleQueryDescriptor.result(for:)(v7, v9);
}

uint64_t sub_10024FEDC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();

  if (v1) {
    unint64_t v5 = sub_1002502EC;
  }
  else {
    unint64_t v5 = sub_100250018;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100250018()
{
  unint64_t v1 = v0[15];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_19;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      self;
      if (swift_dynamicCastObjCClass())
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    unint64_t v5 = (void **)(v0[15] + 32);
    do
    {
      uint64_t v6 = *v5;
      self;
      if (swift_dynamicCastObjCClass())
      {
        id v7 = v6;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v5;
      --v2;
    }
    while (v2);
  }
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v9 = v0[11];
  uint64_t v8 = v0[12];
  uint64_t v10 = v0[8];
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[10];
  uint64_t v13 = v0[7];
  swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = sub_100251700((unint64_t)_swiftEmptyArrayStorage);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
  return v12(v11);
}

uint64_t sub_1002502EC()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_100250398(id *a1)
{
  id v1 = [*a1 endDate];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1002503F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = sub_1000AFA94(&qword_100951AE0);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = sub_1000AFA94(&qword_100951AE8);
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100250520, 0, 0);
}

uint64_t sub_100250520()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  id v4 = [self predicateForWorkoutsWithWorkoutActivityType:84];
  v0[13] = v4;
  id v5 = [self notPredicateWithSubpredicate:v4];
  v0[14] = v5;
  sub_10007E2D8(0, &qword_100950760);
  id v6 = v5;
  static HKSamplePredicate.workout(_:)();

  sub_1000AFA94(&qword_100951AF0);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1007509E0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v8 + v7, v1, v3);
  sub_1000AFA94(&qword_100951AF8);
  sub_1000AFA94(&qword_100951B00);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1007509E0;
  swift_getKeyPath();
  SortDescriptor.init<A>(_:order:)();
  sub_10007E2D8(0, (unint64_t *)&qword_10095E770);
  HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)();
  AppDependency.wrappedValue.getter();
  uint64_t v9 = v0[2];
  v0[15] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[16] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1002507B8;
  uint64_t v11 = v0[7];
  return HKSampleQueryDescriptor.result(for:)(v9, v11);
}

uint64_t sub_1002507B8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 136) = v1;
  swift_task_dealloc();

  if (v1)
  {
    id v5 = sub_100250A48;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    id v5 = sub_1002508FC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002508FC()
{
  unint64_t v1 = v0[18];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[11];
  uint64_t v12 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v10 = (void *)v0[13];
  uint64_t v11 = v0[9];
  uint64_t v8 = (void *)v0[14];
  uint64_t v9 = v0[7];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v5 = sub_100251700(v1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v5);
}

uint64_t sub_100250A48()
{
  unint64_t v1 = *(void **)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100250B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = sub_1000AFA94(&qword_100951AE0);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = sub_1000AFA94(&qword_100951AE8);
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_100250C3C, 0, 0);
}

uint64_t sub_100250C3C()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  id v4 = [self predicateForWorkoutsWithWorkoutActivityType:82];
  v0[13] = v4;
  sub_10007E2D8(0, &qword_100950760);
  id v5 = v4;
  static HKSamplePredicate.workout(_:)();

  sub_1000AFA94(&qword_100951AF0);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1007509E0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v7 + v6, v1, v3);
  sub_1000AFA94(&qword_100951AF8);
  sub_1000AFA94(&qword_100951B00);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1007509E0;
  swift_getKeyPath();
  SortDescriptor.init<A>(_:order:)();
  sub_10007E2D8(0, (unint64_t *)&qword_10095E770);
  HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)();
  AppDependency.wrappedValue.getter();
  uint64_t v8 = v0[2];
  v0[14] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[15] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100250EA8;
  uint64_t v10 = v0[7];
  return HKSampleQueryDescriptor.result(for:)(v8, v10);
}

uint64_t sub_100250EA8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();

  if (v1)
  {
    id v5 = sub_10025112C;
  }
  else
  {
    *(void *)(v4 + 136) = a1;
    id v5 = sub_100250FEC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100250FEC()
{
  unint64_t v1 = v0[17];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[11];
  uint64_t v11 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v9 = (void *)v0[13];
  uint64_t v10 = v0[9];
  uint64_t v8 = v0[7];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v5 = sub_100251700(v1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v5);
}

uint64_t sub_10025112C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1002511EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002518D8();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_100251218(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10024C1D0;
  return sub_10024EF88(a1, v4, v5, v6);
}

uint64_t sub_1002512C8(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1001A0E60;
  return sub_10024FB5C(v3, v4, v5);
}

unint64_t sub_100251378()
{
  unint64_t result = qword_100951AA0;
  if (!qword_100951AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951AA0);
  }
  return result;
}

unint64_t sub_1002513D0()
{
  unint64_t result = qword_100951AA8;
  if (!qword_100951AA8)
  {
    sub_1000A1370(qword_100951AB0);
    sub_10020D608();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951AA8);
  }
  return result;
}

uint64_t sub_100251444(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_10020C98C();
  *uint64_t v5 = v2;
  v5[1] = sub_10005DB5C;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t destroy for WorkoutEntityQuery()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *_s10FitnessApp18WorkoutEntityQueryVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for WorkoutEntityQuery(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for WorkoutEntityQuery(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivityRingsCardFactory(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivityRingsCardFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkoutEntityQuery()
{
  return &type metadata for WorkoutEntityQuery;
}

const char *sub_1002516F0()
{
  return "endDate";
}

uint64_t sub_100251700(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    if (!v2) {
      return (uint64_t)v3;
    }
    uint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1001C9028(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v25;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      id v7 = v6;
      AppDependency.wrappedValue.getter();
      sub_10020F97C(v7, v23, v24);

      uint64_t v25 = v3;
      unint64_t v9 = v3[2];
      unint64_t v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_1001C9028(v8 > 1, v9 + 1, 1);
        uint64_t v3 = v25;
      }
      ++v5;
      v3[2] = v9 + 1;
      uint64_t v10 = &v3[32 * v9];
      long long v11 = v24[0];
      long long v12 = v24[1];
      long long v13 = v24[3];
      v10[4] = v24[2];
      v10[5] = v13;
      void v10[2] = v11;
      v10[3] = v12;
      long long v14 = v24[4];
      long long v15 = v24[5];
      long long v16 = v24[7];
      v10[8] = v24[6];
      v10[9] = v16;
      v10[6] = v14;
      v10[7] = v15;
      long long v17 = v24[8];
      long long v18 = v24[9];
      long long v19 = v24[11];
      v10[12] = v24[10];
      _OWORD v10[13] = v19;
      _OWORD v10[10] = v17;
      v10[11] = v18;
      long long v20 = v24[12];
      long long v21 = v24[13];
      long long v22 = v24[15];
      unsigned char v10[16] = v24[14];
      v10[17] = v22;
      v10[14] = v20;
      v10[15] = v21;
      if (v2 == v5) {
        return (uint64_t)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1002518D8()
{
  sub_1000AFA94(&qword_10094D338);
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t v0 = AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094D340);
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  sub_1000AFA94(&qword_10094FF10);
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  return v0;
}

unint64_t sub_1002519C8(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t getEnumTagSinglePayload for TabularMetric(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TabularMetric(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100251BD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabularMetric()
{
  return &type metadata for TabularMetric;
}

uint64_t sub_100251C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100251C78(a1, a2, a3, &qword_100951B40);
}

uint64_t sub_100251C1C(uint64_t a1, uint64_t a2)
{
  return sub_100251CDC(a1, a2, &qword_100951B40);
}

void sub_100251C28()
{
}

void sub_100251C50()
{
}

uint64_t sub_100251C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100251C78(a1, a2, a3, &qword_100951B48);
}

uint64_t sub_100251C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100251CD0(uint64_t a1, uint64_t a2)
{
  return sub_100251CDC(a1, a2, &qword_100951B48);
}

uint64_t sub_100251CDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void sub_100251D20()
{
}

void sub_100251D48()
{
}

void sub_100251D64(uint64_t a1)
{
}

void sub_100251D78(uint64_t a1)
{
}

void sub_100251D8C(uint64_t a1, void *a2, void *a3)
{
  id v4 = [self preferredFontForTextStyle:*a2];
  uint64_t v5 = self;
  unsigned int v6 = UIContentSizeCategoryLarge;
  id v7 = [v5 traitCollectionWithPreferredContentSizeCategory:v6];

  id v8 = [v4 _fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:v7];
  if (v8) {
    *a3 = v8;
  }
  else {
    __break(1u);
  }
}

void sub_100251E64()
{
  sub_10007E2D8(0, (unint64_t *)&qword_1009587A0);
  uint64_t v0 = (void *)static UIFont.preferredFont(forTextStyle:design:symbolicTraits:weight:compatibleWith:)();
  uint64_t v1 = self;
  int v2 = UIContentSizeCategoryLarge;
  id v3 = [v1 traitCollectionWithPreferredContentSizeCategory:v2];

  id v4 = [v0 _fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection:v3];
  if (v4) {
    qword_1009978F8 = (uint64_t)v4;
  }
  else {
    __break(1u);
  }
}

id sub_100251F70()
{
  id v0 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v0 setMinimumFractionDigits:0];
  [v0 setMaximumFractionDigits:2];
  id result = [v0 setNumberStyle:1];
  qword_100951B10 = (uint64_t)v0;
  return result;
}

unint64_t sub_100251FE8(char a1)
{
  unint64_t result = 0x72656B72616DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x65636E6174736964;
      break;
    case 2:
      unint64_t result = 1701669236;
      break;
    case 3:
      unint64_t result = 1701011824;
      break;
    case 4:
      unint64_t result = 0x7461527472616568;
      break;
    case 5:
      unint64_t result = 0x7265776F70;
      break;
    case 6:
      unint64_t result = 0x65636E65646163;
      break;
    case 7:
      unint64_t result = 0x796772656E65;
      break;
    case 8:
      unint64_t result = 0x6465657073;
      break;
    case 9:
      unint64_t result = 0x43676E696C637963;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
      unint64_t result = 0x536D756D6978616DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100252154(char a1)
{
  unint64_t result = 0x72656B72616DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x65636E6174736964;
      break;
    case 2:
      unint64_t result = 1701669236;
      break;
    case 3:
      unint64_t result = 1701011824;
      break;
    case 4:
      unint64_t result = 0x7461527472616568;
      break;
    case 5:
      unint64_t result = 0x7265776F70;
      break;
    case 6:
      unint64_t result = 0x65636E65646163;
      break;
    case 7:
      unint64_t result = 0x796772656E65;
      break;
    case 8:
      unint64_t result = 0x6465657073;
      break;
    case 9:
      unint64_t result = 0x43676E696C637963;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
      unint64_t result = 0x536D756D6978616DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002522C0(void *a1, char a2)
{
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
      id v8 = [self mainBundle];
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v8 localizedStringForKey:v9 value:0 table:0];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      break;
    case 7:
      NSString v3 = String._bridgeToObjectiveC()();
      id v4 = [a1 localizationKeyForEnergyBaseKey:v3];

      if (!v4)
      {
        __break(1u);
        JUMPOUT(0x100252894);
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v5 = [self mainBundle];
      NSString v6 = String._bridgeToObjectiveC()();
      id v7 = [v5 localizedStringForKey:v6 value:0 table:0];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      break;
    default:
      break;
  }

  return AttributedString.init(stringLiteral:)();
}

uint64_t sub_1002528C4(char a1)
{
  switch(a1)
  {
    case 1:
      id v7 = [self distanceColors];
      if (!v7) {
        goto LABEL_29;
      }
      id v8 = v7;
      id v9 = [v7 nonGradientTextColor];

      if (v9) {
        goto LABEL_25;
      }
      __break(1u);
LABEL_13:
      id v10 = [self elapsedTimeColors];
      if (!v10) {
        goto LABEL_30;
      }
      long long v11 = v10;
      id v12 = [v10 nonGradientTextColor];

      if (v12) {
        goto LABEL_25;
      }
      __break(1u);
LABEL_16:
      id v13 = [self heartRateColors];
      if (!v13) {
        goto LABEL_31;
      }
      long long v14 = v13;
      id v15 = [v13 nonGradientTextColor];

      if (v15) {
        goto LABEL_25;
      }
      __break(1u);
LABEL_19:
      id v16 = [self powerColors];
      id v17 = [v16 nonGradientTextColor];

      if (v17) {
        goto LABEL_25;
      }
      __break(1u);
LABEL_21:
      id v18 = [self energyColors];
      if (!v18) {
        goto LABEL_32;
      }
      long long v19 = v18;
      id v20 = [v18 nonGradientTextColor];

      if (v20) {
        goto LABEL_25;
      }
      goto LABEL_33;
    case 2:
      goto LABEL_13;
    case 3:
    case 8:
    case 11:
      id v1 = [self paceColors];
      if (!v1)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x100252BA4);
      }
      int v2 = v1;
      id v3 = [v1 nonGradientTextColor];

      if (v3) {
        goto LABEL_25;
      }
      __break(1u);
LABEL_5:
      id v4 = [self cadenceColors];
      id v5 = [v4 nonGradientTextColor];

      if (v5)
      {
LABEL_25:
        return Color.init(_:)();
      }
      else
      {
        __break(1u);
LABEL_7:
        return static Color.gray.getter();
      }
    case 4:
      goto LABEL_16;
    case 5:
      goto LABEL_19;
    case 6:
    case 9:
      goto LABEL_5;
    case 7:
      goto LABEL_21;
    case 10:
      id v21 = [self elevationColors];
      id v22 = [v21 nonGradientTextColor];

      if (v22) {
        goto LABEL_25;
      }
      goto LABEL_34;
    default:
      goto LABEL_7;
  }
}

uint64_t sub_100252BD4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  id v226 = a4;
  uint64_t v229 = a1;
  uint64_t v227 = a6;
  uint64_t v221 = type metadata accessor for AttributedString.AttributeMergePolicy();
  uint64_t v220 = *(void *)(v221 - 8);
  __chkstk_darwin(v221);
  uint64_t v219 = (char *)&v218 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = sub_1000AFA94(&qword_100951B20);
  uint64_t v223 = *(void *)(v224 - 8);
  __chkstk_darwin(v224);
  uint64_t v222 = (char *)&v218 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000AFA94(&qword_100951B28);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v14 = (char *)&v218 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v232 = type metadata accessor for AttributeContainer();
  uint64_t v230 = *(void *)(v232 - 8);
  uint64_t v15 = __chkstk_darwin(v232);
  uint64_t v225 = (char *)&v218 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  long long v19 = (char *)&v218 - v18;
  __chkstk_darwin(v17);
  v231 = (char *)&v218 - v20;
  if (a3)
  {
    id v21 = [a3 workoutConfiguration];
    id v22 = [v21 activityType];
  }
  else
  {
    id v22 = [a2 workoutActivityType];
  }
  AttributeContainer.init()();
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  swift_getKeyPath();
  sub_100232308();
  AttributeContainer.subscript.getter();
  swift_release();
  uint64_t v24 = v230 + 8;
  uint64_t v228 = *(void (**)(char *, uint64_t))(v230 + 8);
  v228(v19, v232);
  if (qword_10094A728 != -1) {
    swift_once();
  }
  uint64_t v234 = qword_1009978F8;
  AttributeContainer.Builder.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v25 = v229;
  switch(a5)
  {
    case 1:
      if (*(unsigned char *)(v229 + 40)) {
        goto LABEL_99;
      }
      double v55 = *(double *)(v229 + 32);
      if (floor(v55) <= 0.0) {
        goto LABEL_99;
      }
      uint64_t v56 = v226;
      if ((*(unsigned char *)(v229 + 56) & 1) == 0)
      {
        uint64_t v57 = *(void *)(v229 + 48);
        id v58 = [v226 localizedStringWithDistanceInMeters:v57 distanceUnit:0 unitStyle:0 decimalPrecision:[self defaultPrecisionForDistanceUnit:v57] roundingMode:2 decimalTrimmingMode:v55];
        if (v58)
        {
          uint64_t v59 = v58;
          uint64_t v60 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v62 = v61;

          id v63 = [v56 localizedShortUnitStringForDistanceUnit:v57];
          if (v63)
          {
            long long v64 = v63;
            uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v67 = v66;

            uint64_t v234 = v65;
            uint64_t v235 = v67;
            sub_1000A06D0();
            uint64_t v68 = StringProtocol.localizedUppercase.getter();
            uint64_t v70 = v69;
            swift_bridgeObjectRelease();
            sub_100524B5C(v60, v62, v68, v70, (void *)qword_1009978F8, 0, v227);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_97:
            uint64_t v90 = v231;
            uint64_t v91 = v232;
            return ((uint64_t (*)(char *, uint64_t))v228)(v90, v91);
          }
          goto LABEL_113;
        }
      }
      if (a3)
      {
        id v41 = [a3 fiui_activityType];
LABEL_94:
        uint64_t v201 = FIUIDistanceTypeForActivityType();
        uint64_t v233 = 1;
        id v202 = [v56 localizedNaturalScaleStringWithDistanceInMeters:v201 distanceType:0 unitStyle:&v233 usedUnit:v55];
        if (v202)
        {
          uint64_t v203 = v202;
          uint64_t v51 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v53 = v204;

          id v54 = [v56 localizedShortUnitStringForDistanceUnit:v233];
          if (v54)
          {
LABEL_96:
            long long v205 = v54;
            uint64_t v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v208 = v207;

            uint64_t v234 = v206;
            uint64_t v235 = v208;
            sub_1000A06D0();
            uint64_t v209 = StringProtocol.localizedUppercase.getter();
            uint64_t v211 = v210;
            swift_bridgeObjectRelease();
            sub_100524B5C(v51, v53, v209, v211, (void *)qword_1009978F8, 0, v227);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_97;
          }
          goto LABEL_112;
        }

LABEL_99:
        uint64_t v212 = swift_getKeyPath();
        __chkstk_darwin(v212);
        swift_getKeyPath();
        sub_1000A5D60();
        uint64_t v213 = v222;
        uint64_t v196 = v231;
        AttributeContainer.subscript.getter();
        swift_release();
        uint64_t v234 = static Color.gray.getter();
        uint64_t v214 = v224;
        AttributeContainer.Builder.callAsFunction(_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v223 + 8))(v213, v214);
        id v198 = [self mainBundle];
        NSString v215 = String._bridgeToObjectiveC()();
        id v200 = [v198 localizedStringForKey:v215 value:0 table:0];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        goto LABEL_100;
      }
      id v41 = [a2 fiui_activityType];
      if (v41) {
        goto LABEL_94;
      }
      goto LABEL_105;
    case 2:
      double v71 = round(*(double *)(v229 + 64));
      if (v71 < 3600.0) {
        uint64_t v72 = 3;
      }
      else {
        uint64_t v72 = 2;
      }
      uint64_t v73 = v226;
      id v74 = [v226 stringWithDuration:v72 durationFormat:v71];
      if (v74)
      {
        uint64_t v75 = v74;
        uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v78 = v77;

        if (*(unsigned char *)(v25 + 80))
        {
LABEL_53:
          swift_bridgeObjectRelease();
          id v123 = [v73 stringWithDuration:v72 durationFormat:v71];
          if (v123)
          {
LABEL_54:
            uint64_t v124 = v123;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v125 = v231;
            uint64_t v126 = v232;
            (*(void (**)(char *, char *, uint64_t))(v230 + 16))(v19, v231, v232);
            AttributedString.init(_:attributes:)();
            uint64_t v90 = v125;
            uint64_t v91 = v126;
            return ((uint64_t (*)(char *, uint64_t))v228)(v90, v91);
          }
          goto LABEL_108;
        }
      }
      else
      {
        uint64_t v76 = 0;
        uint64_t v78 = 0;
        if (*(unsigned char *)(v25 + 80)) {
          goto LABEL_53;
        }
      }
      double v122 = *(double *)(v25 + 72);
      if (v122 != 0.0)
      {
        id v137 = [v73 stringWithDuration:v72 durationFormat:round(v122)];
        if (v137)
        {
          char v138 = v137;
          uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v141 = v140;

          if (v78)
          {
            if (v141)
            {
              sub_1000AFA94(&qword_100951B30);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_10074E640;
              *(void *)(inited + 32) = v139;
              *(void *)(inited + 40) = v141;
              id v143 = [self elapsedTimeColors];
              if (v143)
              {
                uint64_t v144 = v143;
                id v145 = [v143 nonGradientTextColor];

                if (v145)
                {
                  *(void *)(inited + 48) = v145;
                  id v146 = [self mainBundle];
                  NSString v147 = String._bridgeToObjectiveC()();
                  id v148 = [v146 localizedStringForKey:v147 value:0 table:0];

                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                  sub_1000AFA94((uint64_t *)&unk_1009546D0);
                  uint64_t v149 = swift_allocObject();
                  *(_OWORD *)(v149 + 16) = xmmword_1007509E0;
                  *(void *)(v149 + 56) = &type metadata for String;
                  *(void *)(v149 + 64) = sub_1000AA64C();
                  *(void *)(v149 + 32) = v76;
                  *(void *)(v149 + 40) = v78;
                  uint64_t v150 = String.init(format:_:)();
                  uint64_t v152 = v151;
                  swift_bridgeObjectRelease();
                  *(void *)(inited + 56) = v150;
                  *(void *)(inited + 64) = v152;
                  *(void *)(inited + 72) = [self grayColor];
                  id v153 = sub_1005251C8(inited);
                  swift_setDeallocating();
                  sub_1000AFA94(&qword_100951B38);
                  swift_arrayDestroy();
                  id v154 = v153;
                  AttributedString.init(_:)();
                  uint64_t v155 = v220;
                  uint64_t v156 = v219;
                  uint64_t v157 = v221;
                  (*(void (**)(char *, void, uint64_t))(v220 + 104))(v219, enum case for AttributedString.AttributeMergePolicy.keepNew(_:), v221);
                  uint64_t v158 = v231;
                  AttributedString.mergeAttributes(_:mergePolicy:)();

                  (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v157);
                  uint64_t v90 = v158;
LABEL_45:
                  uint64_t v91 = v232;
                  return ((uint64_t (*)(void, void))v228)(v90, v91);
                }
LABEL_115:
                __break(1u);
LABEL_116:
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x100254634);
              }
LABEL_114:
              __break(1u);
              goto LABEL_115;
            }
          }
        }
        swift_bridgeObjectRelease();
        id v123 = [v73 stringWithDuration:v72 durationFormat:v71];
        if (!v123)
        {
          __break(1u);
LABEL_105:
          AttributedString.init(stringLiteral:)();
          goto LABEL_97;
        }
        goto LABEL_54;
      }
      goto LABEL_53;
    case 3:
      if (*(unsigned char *)(v229 + 40)) {
        goto LABEL_92;
      }
      double v92 = *(double *)(v229 + 32);
      if (floor(v92) <= 0.0) {
        goto LABEL_92;
      }
      uint64_t v221 = v24;
      if (a3)
      {
        id v93 = [a3 fiui_activityType];
        unsigned int v94 = v226;
      }
      else
      {
        id v93 = [a2 fiui_activityType];
        unsigned int v94 = v226;
        if (!v93)
        {
LABEL_101:
          AttributedString.init(stringLiteral:)();
          return ((uint64_t (*)(char *, uint64_t))v228)(v231, v232);
        }
      }
      uint64_t v159 = FIUIDistanceTypeForActivityType();
      id v160 = [v94 unitManager];
      if (!v160)
      {
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      char v161 = v160;
      id v162 = [v160 paceDistanceUnitForDistanceType:v159];

      id v163 = [self meterUnit];
      uint64_t v164 = (char *)[self quantityWithUnit:v163 doubleValue:v92];

      uint64_t v165 = FIUIPaceFormatForWorkoutActivityType();
      id v166 = [v94 localizedShortUnitStringForDistanceUnit:v162];
      if (v166)
      {
        uint64_t v167 = v166;
        uint64_t v219 = v164;
        uint64_t v220 = v159;
        uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v170 = v169;

        unint64_t v171 = FIUINumberOfUnitsInPaceForPaceFormat();
        id v172 = [self mainBundle];
        NSString v173 = String._bridgeToObjectiveC()();
        if (v171 < 2)
        {
          id v182 = [v172 localizedStringForKey:v173 value:0 table:0];

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_1000AFA94((uint64_t *)&unk_1009546D0);
          uint64_t v183 = swift_allocObject();
          *(_OWORD *)(v183 + 16) = xmmword_1007509E0;
          uint64_t v234 = v168;
          uint64_t v235 = v170;
          sub_1000A06D0();
          uint64_t v184 = StringProtocol.localizedUppercase.getter();
          uint64_t v186 = v185;
          swift_bridgeObjectRelease();
          *(void *)(v183 + 56) = &type metadata for String;
          *(void *)(v183 + 64) = sub_1000AA64C();
          *(void *)(v183 + 32) = v184;
          *(void *)(v183 + 40) = v186;
        }
        else
        {
          id v174 = [v172 localizedStringForKey:v173 value:0 table:0];

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_1000AFA94((uint64_t *)&unk_1009546D0);
          uint64_t v175 = swift_allocObject();
          *(_OWORD *)(v175 + 16) = xmmword_10074E640;
          id v176 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:v171];
          *(void *)(v175 + 56) = sub_10007E2D8(0, (unint64_t *)&qword_100955BE0);
          *(void *)(v175 + 64) = sub_1001DCC84();
          *(void *)(v175 + 32) = v176;
          uint64_t v234 = v168;
          uint64_t v235 = v170;
          sub_1000A06D0();
          uint64_t v177 = StringProtocol.localizedUppercase.getter();
          uint64_t v179 = v178;
          swift_bridgeObjectRelease();
          *(void *)(v175 + 96) = &type metadata for String;
          *(void *)(v175 + 104) = sub_1000AA64C();
          *(void *)(v175 + 72) = v177;
          *(void *)(v175 + 80) = v179;
        }
        uint64_t v180 = String.init(format:_:)();
        uint64_t v181 = v187;
        swift_bridgeObjectRelease();
        unsigned int v94 = v226;
        uint64_t v25 = v229;
        uint64_t v159 = v220;
        uint64_t v164 = v219;
      }
      else
      {
        uint64_t v180 = 0;
        uint64_t v181 = 0xE000000000000000;
      }
      if ((*(unsigned char *)(v25 + 80) & 1) != 0 || (double v188 = *(double *)(v25 + 72), v188 <= 0.0)) {
        double v188 = *(double *)(v25 + 64);
      }
      id v189 = [v94 localizedPaceStringWithDistance:v164 overDuration:v165 paceFormat:v159 distanceType:v188];
      if (!v189)
      {

        swift_bridgeObjectRelease();
LABEL_92:
        uint64_t v194 = swift_getKeyPath();
        __chkstk_darwin(v194);
        swift_getKeyPath();
        sub_1000A5D60();
        uint64_t v195 = v222;
        uint64_t v196 = v231;
        AttributeContainer.subscript.getter();
        swift_release();
        uint64_t v234 = static Color.gray.getter();
        uint64_t v197 = v224;
        AttributeContainer.Builder.callAsFunction(_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v223 + 8))(v195, v197);
        id v198 = [self mainBundle];
        NSString v199 = String._bridgeToObjectiveC()();
        id v200 = [v198 localizedStringForKey:v199 value:0 table:0];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_100:

        uint64_t v216 = v232;
        (*(void (**)(char *, char *, uint64_t))(v230 + 16))(v225, v19, v232);
        AttributedString.init(_:attributes:)();
        uint64_t v217 = (uint64_t (*)(char *, uint64_t))v228;
        v228(v19, v216);
        return v217(v196, v216);
      }
      uint64_t v190 = v189;
      uint64_t v191 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v193 = v192;

      sub_100524B5C(v191, v193, v180, v181, (void *)qword_1009978F8, 0, v227);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return ((uint64_t (*)(char *, uint64_t))v228)(v231, v232);
    case 4:
      id v95 = (id)FIUIBundle();
      if (!v95) {
        goto LABEL_107;
      }
      uint64_t v96 = v95;
      NSString v97 = String._bridgeToObjectiveC()();
      id v98 = [v96 localizedStringForKey:v97 value:0 table:0];

      uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v101 = v100;

      id v102 = [v226 localizedStringWithHeartRate:*(void *)(v25 + 104)];
      if (v102)
      {
        id v103 = v102;
        uint64_t v104 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v106 = v105;
      }
      else
      {
        id v130 = (id)FIUIBundle();
        if (!v130)
        {
LABEL_110:
          __break(1u);
          goto LABEL_111;
        }
        uint64_t v131 = v130;
        NSString v132 = String._bridgeToObjectiveC()();
        id v103 = [v131 localizedStringForKey:v132 value:0 table:0];

        uint64_t v104 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v106 = v133;
      }
      uint64_t v234 = v99;
      uint64_t v235 = v101;
      sub_1000A06D0();
      uint64_t v134 = StringProtocol.localizedUppercase.getter();
      uint64_t v136 = v135;
      swift_bridgeObjectRelease();
      sub_100524B5C(v104, v106, v134, v136, (void *)qword_1009978F8, 0, v227);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(char *, uint64_t))v228)(v231, v232);
    case 5:
      id v107 = [self localizedShortPowerUnitString];
      if (!v107) {
        goto LABEL_101;
      }
      uint64_t v108 = v107;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v109;

      uint64_t v110 = *(void **)(v25 + 112);
      if (!v110) {
        goto LABEL_67;
      }
      [v110 _value];
      double v112 = v111;
      uint64_t v113 = self;
      id v38 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v112];
      id v39 = [v113 localizedStringFromNumber:v38 numberStyle:0];
      goto LABEL_44;
    case 6:
    case 9:
      id v26 = [self localizedShortCadenceUnitStringForActivityType:v22];
      if (!v26) {
        goto LABEL_101;
      }
      uint64_t v27 = v26;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      id v31 = *(void **)(v25 + 96);
      if (!v31)
      {
LABEL_67:
        swift_bridgeObjectRelease();
        goto LABEL_101;
      }
      id v32 = self;
      id v33 = v31;
      id v34 = [v32 _countPerMinuteUnit];
      [v33 doubleValueForUnit:v34];
      double v36 = v35;

      NSString v37 = self;
      id v38 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v36];
      id v39 = [v37 localizedStringFromNumber:v38 numberStyle:0];
LABEL_44:
      id v114 = v39;

      uint64_t v115 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v117 = v116;

      uint64_t v234 = v28;
      uint64_t v235 = v30;
      sub_1000A06D0();
      uint64_t v118 = StringProtocol.localizedUppercase.getter();
      uint64_t v120 = v119;
      swift_bridgeObjectRelease();
      sub_100524B5C(v115, v117, v118, v120, (void *)qword_1009978F8, 0, v227);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v90 = v231;
      goto LABEL_45;
    case 7:
      id v79 = [v226 unitManager];
      if (!v79)
      {
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      uint64_t v80 = v79;
      id v81 = [v79 userActiveEnergyBurnedUnit];

      uint64_t v82 = *(void **)(v25 + 88);
      if (v82)
      {
        [v82 doubleValueForUnit:v81];
        double v84 = v83;
        if (qword_10094A730 != -1) {
          swift_once();
        }
        uint64_t v85 = (void *)qword_100951B10;
        id v86 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v84];
        id v87 = [v85 stringFromNumber:v86];

        if (v87)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v88 = v231;
          uint64_t v89 = v232;
          (*(void (**)(char *, char *, uint64_t))(v230 + 16))(v19, v231, v232);
          AttributedString.init(_:attributes:)();

          uint64_t v90 = v88;
          uint64_t v91 = v89;
          return ((uint64_t (*)(void, void))v228)(v90, v91);
        }
      }
LABEL_61:
      AttributedString.init(stringLiteral:)();
LABEL_62:

      return ((uint64_t (*)(void, void))v228)(v231, v232);
    case 8:
      if (a3)
      {
        id v81 = [a3 fiui_activityType];
        uint64_t v121 = v226;
      }
      else
      {
        id v81 = [a2 fiui_activityType];
        uint64_t v121 = v226;
        if (!v81) {
          goto LABEL_101;
        }
      }
      sub_100254664((uint64_t)v81, v25, v121, v227);
      goto LABEL_62;
    case 10:
      uint64_t v40 = *(void **)(v229 + 152);
      if (!v40) {
        goto LABEL_101;
      }
      id v41 = v40;
      uint64_t v42 = v226;
      id v43 = [v226 unitManager];
      if (!v43) {
        goto LABEL_109;
      }
      uint64_t v44 = v43;
      id v45 = [v43 userDistanceElevationUnit];

      id v46 = [self meterUnit];
      [v41 doubleValueForUnit:v46];
      double v48 = v47;

      id v49 = [v42 localizedStringWithDistanceInMeters:5 distanceType:0 unitStyle:v48];
      if (!v49) {
        goto LABEL_15;
      }
      uint64_t v50 = v49;
      uint64_t v51 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v52;

      id v54 = [v42 localizedShortUnitStringForDistanceUnit:v45 textCase:1];
      if (v54) {
        goto LABEL_96;
      }
      swift_bridgeObjectRelease();
LABEL_15:

      goto LABEL_101;
    case 11:
      if (a3)
      {
        id v81 = [a3 fiui_activityType];
      }
      else
      {
        id v81 = [a2 fiui_activityType];
        if (!v81) {
          goto LABEL_101;
        }
      }
      uint64_t v128 = *(void **)(v25 + 144);
      if (!v128) {
        goto LABEL_61;
      }
      id v129 = v128;
      sub_100254970((uint64_t)v81, v129, v226, v227);

      return ((uint64_t (*)(void, void))v228)(v231, v232);
    default:
      goto LABEL_116;
  }
}

void sub_100254664(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7 = *(void **)(a2 + 136);
  if (v7)
  {
    id v8 = self;
    id v9 = v7;
    id v10 = [v8 meterUnit];
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v8 unitFromString:v11];

    [v9 doubleValueForUnit:v12];
    double v14 = v13;

    id v15 = [self quantityWithUnit:v10 doubleValue:v14];
    double v16 = 1.0;
    if (!v15)
    {
LABEL_11:
      id v30 = 0;
LABEL_14:
      AttributedString.init(stringLiteral:)();

      return;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 40)) {
      goto LABEL_11;
    }
    double v18 = *(double *)(a2 + 32);
    id v19 = [self meterUnit];
    id v15 = [self quantityWithUnit:v19 doubleValue:v18];

    double v16 = *(double *)(a2 + 64);
    if (!v15) {
      goto LABEL_11;
    }
  }
  id v30 = v15;
  id v20 = [a3 localizedPaceStringWithDistance:v30 overDuration:4 paceFormat:FIUIDistanceTypeForActivityType() distanceType:v16];
  if (!v20)
  {
LABEL_13:

    goto LABEL_14;
  }
  id v21 = v20;
  id v22 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  id v25 = [a3 localizedSpeedUnitStringForActivityType:a1];
  if (!v25)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  id v26 = v25;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000A06D0();
  uint64_t v27 = StringProtocol.localizedUppercase.getter();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  if (qword_10094A728 != -1) {
    swift_once();
  }
  sub_100524B5C(v22, v24, v27, v29, (void *)qword_1009978F8, 0, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100254970(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v8 = self;
  id v9 = [v8 meterUnit];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 unitFromString:v10];

  [a2 doubleValueForUnit:v11];
  double v13 = v12;

  id v24 = [self quantityWithUnit:v9 doubleValue:v13];
  id v14 = [a3 localizedPaceStringWithDistance:v24 overDuration:4 paceFormat:FIUIDistanceTypeForActivityType() distanceType:1.0];
  if (v14)
  {
    id v15 = v14;
    double v16 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    id v19 = [a3 localizedSpeedUnitStringForActivityType:a1];
    if (v19)
    {
      id v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000A06D0();
      uint64_t v21 = StringProtocol.localizedUppercase.getter();
      uint64_t v23 = v22;
      swift_bridgeObjectRelease();
      if (qword_10094A728 != -1) {
        swift_once();
      }
      sub_100524B5C(v16, v18, v21, v23, (void *)qword_1009978F8, 0, a4);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
  }
  AttributedString.init(stringLiteral:)();
}

uint64_t sub_100254BD0(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100252154(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100252154(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100254C5C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100252154(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100254CC0()
{
  sub_100252154(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100254D14()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100252154(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100254D74@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10025502C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100254DA4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100252154(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100254DD0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100254E30()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_100254E80@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100251FE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100254EB0()
{
  unint64_t result = qword_100951B18;
  if (!qword_100951B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951B18);
  }
  return result;
}

void sub_100254F04()
{
}

void sub_100254F24()
{
}

uint64_t sub_100254F4C()
{
  return 8;
}

uint64_t sub_100254F58()
{
  return swift_release();
}

uint64_t sub_100254F60(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_100254F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100251C78(a1, a2, a3, &qword_100951B48) & 1;
}

uint64_t sub_100254F90(uint64_t a1, uint64_t a2)
{
  return sub_100251CDC(a1, a2, &qword_100951B48);
}

void *sub_100254F9C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_100254FA8()
{
}

void sub_100254FC8()
{
}

uint64_t sub_100254FF0()
{
  return 8;
}

uint64_t sub_100254FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100251C78(a1, a2, a3, &qword_100951B40) & 1;
}

uint64_t sub_100255020(uint64_t a1, uint64_t a2)
{
  return sub_100251CDC(a1, a2, &qword_100951B40);
}

unint64_t sub_10025502C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B3480, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

unint64_t sub_100255078()
{
  unint64_t result = qword_100951B50;
  if (!qword_100951B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951B50);
  }
  return result;
}

uint64_t sub_1002550D8(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_10025BA48(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        id v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              id v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        id v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = (uint64_t)sub_10025B960(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_100255328(char *a1, char *a2)
{
  return sub_10047FF1C(*a1, *a2);
}

Swift::Int sub_100255334()
{
  return Hasher._finalize()();
}

uint64_t sub_1002553B0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100255418()
{
  return Hasher._finalize()();
}

uint64_t sub_100255490@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B35C0;
  return sub_100202598(v2, a1, a2);
}

void sub_10025549C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656E6F687069;
  if (*v1) {
    uint64_t v2 = 0x6863746177;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1002554D4(char *a1, char *a2)
{
  return sub_10047FBCC(*a1, *a2);
}

Swift::Int sub_1002554E0()
{
  return Hasher._finalize()();
}

uint64_t sub_100255568()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002555DC()
{
  return Hasher._finalize()();
}

uint64_t sub_100255660@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B3610;
  return sub_100202598(v2, a1, a2);
}

void sub_10025566C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x3235333734393431;
  if (*v1) {
    uint64_t v2 = 0x3434333734393431;
  }
  unint64_t v3 = 0xEA00000000003037;
  if (!*v1) {
    unint64_t v3 = 0xEA00000000003631;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1002556B0()
{
  uint64_t v1 = sub_1000AFA94(&qword_10094B7A0);
  __chkstk_darwin(v1 - 8);
  unint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(void *)(v0 + 112) = 1;
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = 0;
  _OWORD v6[3] = 0;
  v6[4] = v5;
  uint64_t v7 = sub_10005810C((uint64_t)v3, (uint64_t)&unk_100951D40, (uint64_t)v6);
  unint64_t v8 = *(void *)(v0 + 112);
  *(void *)(v0 + 112) = v7;
  sub_10025B950(v8);
  return v0;
}

uint64_t sub_1002557F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_100255814, 0, 0);
}

uint64_t sub_100255814()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10025591C;
    v2[3] = Strong;
    return _swift_task_switch(sub_100255B4C, Strong, 0);
  }
  else
  {
    unint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_10025591C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100255A58, 0, 0);
  }
  else
  {
    swift_release();
    unint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100255A58()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100255ABC()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100255B4C, v0, 0);
}

id sub_100255B4C()
{
  uint64_t v56 = v0;
  uint64_t v1 = v0 + 3;
  uint64_t v2 = v0[3];
  static os_log_type_t.default.getter();
  id v3 = HKLogActivity;
  os_log(_:dso:log:_:_:)();

  if (*(void *)(v2 + 112))
  {
    uint64_t v4 = self;
    id result = [v4 bagSubProfile];
    if (result)
    {
      uint64_t v6 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id result = [v4 bagSubProfileVersion];
      if (result)
      {
        uint64_t v7 = result;
        unint64_t v8 = v0 + 2;
        uint64_t v9 = *v1;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v10 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v12 = [self bagForProfile:v10 profileVersion:v11];

        uint64_t v13 = *(void **)(v9 + 120);
        *(void *)(v9 + 120) = v12;
        id v14 = v12;

        NSString v15 = String._bridgeToObjectiveC()();
        id v16 = [v14 stringForKey:v15];

        v0[2] = 0;
        id v17 = [v16 valueWithError:v0 + 2];

        uint64_t v18 = (void *)v0[2];
        if (!v17) {
          goto LABEL_7;
        }
        id v19 = *(void **)(*v1 + 136);
        *(void *)(*v1 + 136) = v17;
        id v20 = v18;

        NSString v21 = String._bridgeToObjectiveC()();
        id v22 = [v14 URLForKey:v21];

        *unint64_t v8 = 0;
        id v23 = [v22 valueWithError:v0 + 2];

        uint64_t v18 = (void *)*v8;
        if (v23)
        {
          id v24 = (void *)*v1;
          id v25 = *(void **)(*v1 + 144);
          v24[18] = v23;
          id v26 = v18;

          id v27 = objc_allocWithZone((Class)AMSMediaTokenService);
          id v28 = v14;
          NSString v29 = String._bridgeToObjectiveC()();
          id v30 = [v27 initWithClientIdentifier:v29 bag:v28];

          id v31 = (void *)v24[16];
          _OWORD v24[16] = v30;
          id v32 = v30;

          id v33 = [objc_allocWithZone((Class)AMSMediaRequestEncoder) initWithTokenService:v32 bag:v28];
          id v34 = (void *)v24[20];
          v24[20] = v33;

          id v35 = [self ephemeralSessionConfiguration];
          id v36 = [objc_allocWithZone((Class)AMSURLSession) initWithConfiguration:v35];

          id v37 = [objc_allocWithZone((Class)AMSMediaProtocolHandler) initWithTokenService:v32];
          [v36 setProtocolHandler:v37];
          id v38 = (void *)v24[19];
          v24[19] = v36;
          id v39 = v36;

          static os_log_type_t.default.getter();
          id v40 = HKLogActivity;
          os_log(_:dso:log:_:_:)();

          unint64_t v41 = *(void *)(v2 + 112);
          *(void *)(v2 + 112) = 0;
          sub_10025B950(v41);
        }
        else
        {
LABEL_7:
          id v42 = v18;
          uint64_t v43 = _convertNSErrorToError(_:)();

          swift_willThrow();
          unint64_t v44 = *(void *)(v2 + 112);
          *(void *)(v2 + 112) = 1;
          sub_10025B950(v44);
          os_log_type_t v45 = static os_log_type_t.error.getter();
          id v46 = (void *)HKLogActivity;
          os_log_type_t v47 = v45;
          if (os_log_type_enabled(HKLogActivity, v45))
          {
            swift_errorRetain();
            swift_errorRetain();
            log = v46;
            double v48 = (uint8_t *)swift_slowAlloc();
            uint64_t v55 = swift_slowAlloc();
            *(_DWORD *)double v48 = 136315138;
            *unint64_t v8 = v43;
            swift_errorRetain();
            sub_1000AFA94(&qword_10095C080);
            uint64_t v49 = String.init<A>(describing:)();
            *unint64_t v8 = sub_10008F1F4(v49, v50, &v55);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, log, v47, "[AppStoreQuery] Failed to activate query: %s", v48, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
          }
        }
        uint64_t v53 = (uint64_t (*)(void))v0[1];
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  static os_log_type_t.error.getter();
  id v51 = HKLogActivity;
  os_log(_:dso:log:_:_:)();

  sub_10025B768();
  swift_allocError();
  *uint64_t v52 = 9;
  swift_willThrow();
  uint64_t v53 = (uint64_t (*)(void))v0[1];
LABEL_12:
  return (id)v53();
}

uint64_t sub_100256218(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = v3;
  *(unsigned char *)(v4 + 144) = a3;
  *(void *)(v4 + 32) = a1;
  sub_1000AFA94(&qword_10094DD20);
  *(void *)(v4 + 56) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLComponents();
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 72) = *(void *)(v5 - 8);
  *(void *)(v4 + 80) = swift_task_alloc();
  *(void *)(v4 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100256320, v3, 0);
}

uint64_t sub_100256320()
{
  uint64_t v48 = v0;
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  sub_1002575BC(*(void *)(v0 + 40), *(unsigned char *)(v0 + 144) & 1, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10008DB18(*(void *)(v0 + 56), &qword_10094DD20);
    os_log_type_t v4 = static os_log_type_t.error.getter();
    uint64_t v5 = (void *)HKLogActivity;
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(HKLogActivity, v4))
    {
      swift_bridgeObjectRetain_n();
      log = v5;
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v8 = Array.description.getter();
      unint64_t v10 = v9;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = sub_10008F1F4(v8, v10, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v6, "[AppStoreQuery] Unable to create URL for identifier %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    sub_10025B768();
    swift_allocError();
    unsigned char *v11 = 2;
    swift_willThrow();
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(v0 + 48);
  (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 32))(*(void *)(v0 + 88), *(void *)(v0 + 56), *(void *)(v0 + 64));
  uint64_t v13 = *(void **)(v12 + 160);
  *(void *)(v0 + 96) = v13;
  uint64_t v14 = *(void *)(v0 + 88);
  if (!v13)
  {
    uint64_t v32 = *(void *)(v0 + 64);
    uint64_t v33 = *(void *)(v0 + 72);
    static os_log_type_t.error.getter();
    id v34 = HKLogActivity;
    os_log(_:dso:log:_:_:)();

    sub_10025B768();
    swift_allocError();
    *id v35 = 6;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v14, v32);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v36 = *(uint64_t (**)(void))(v0 + 8);
    return v36();
  }
  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v16 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 64);
  id v18 = v13;
  Class isa = URLComponents._bridgeToObjectiveC()().super.isa;
  id v20 = [v18 requestWithComponents:isa];
  *(void *)(v0 + 104) = v20;

  LOBYTE(isa) = static os_log_type_t.default.getter();
  NSString v21 = HKLogActivity;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v16, v14, v17);
  os_log_type_t v22 = isa;
  BOOL v23 = os_log_type_enabled(v21, (os_log_type_t)isa);
  uint64_t v24 = *(void *)(v0 + 72);
  uint64_t v25 = *(void *)(v0 + 80);
  uint64_t v26 = *(void *)(v0 + 64);
  if (v23)
  {
    os_log_type_t v45 = v21;
    id v27 = (uint8_t *)swift_slowAlloc();
    v47[0] = swift_slowAlloc();
    *(_DWORD *)id v27 = 136315138;
    sub_10025C5CC(&qword_100951D70, 255, (void (*)(uint64_t))&type metadata accessor for URLComponents);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_10008F1F4(v28, v29, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v30(v25, v26);
    _os_log_impl((void *)&_mh_execute_header, v45, v22, "[AppStoreQuery] Encoding request with components %s.", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v30(*(void *)(v0 + 80), *(void *)(v0 + 64));
  }
  *(void *)(v0 + 112) = v30;
  uint64_t v39 = *(void *)(v0 + 40);
  uint64_t v38 = *(void *)(v0 + 48);
  uint64_t v40 = sub_10025C5CC(&qword_100951D48, v31, (void (*)(uint64_t))type metadata accessor for AppStoreQuery);
  uint64_t v41 = swift_task_alloc();
  *(void *)(v0 + 120) = v41;
  *(void *)(v41 + 16) = v20;
  *(void *)(v41 + 24) = v39;
  id v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v42;
  uint64_t v43 = type metadata accessor for URLRequest();
  *id v42 = v0;
  v42[1] = sub_100256944;
  uint64_t v44 = *(void *)(v0 + 32);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v44, v38, v40, 0xD000000000000021, 0x80000001007BBB80, sub_10025C5C4, v41, v43);
}

uint64_t sub_100256944()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v4 = sub_100256B48;
  }
  else {
    os_log_type_t v4 = sub_100256A8C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100256A8C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void **)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 64);

  v1(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100256B48()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void **)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 64);

  v1(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void sub_100256BFC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000AFA94(&qword_100951D78);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_10025C6E4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002575B8;
  aBlock[3] = &unk_1008BDA50;
  uint64_t v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  [a2 addFinishBlock:v12];
  _Block_release(v12);
}

uint64_t sub_100256DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000AFA94(&qword_100951D80);
  __chkstk_darwin(v7 - 8);
  __n128 v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URLRequest();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v56 - v15;
  __n128 v18 = __chkstk_darwin(v17);
  id v20 = (char *)&v56 - v19;
  if (a2)
  {
    swift_errorRetain();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    os_log_type_t v22 = (void *)HKLogActivity;
    os_log_type_t v23 = v21;
    if (os_log_type_enabled(HKLogActivity, v21))
    {
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      os_log_t v60 = v22;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v62 = a2;
      uint64_t v63 = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_errorRetain();
      sub_1000AFA94(&qword_10095C080);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v62 = sub_10008F1F4(v26, v27, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v28 = Array.description.getter();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      uint64_t v62 = sub_10008F1F4(v28, v30, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      os_log_t v31 = v60;
      _os_log_impl((void *)&_mh_execute_header, v60, v23, "[AppStoreQuery] Received an error %s encoding the URL for identifiers %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v63 = a2;
    sub_1000AFA94(&qword_100951D78);
    return CheckedContinuation.resume(throwing:)();
  }
  uint64_t v61 = a4;
  if (a1)
  {
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v33(v9, v16, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
    {
      v33(v20, v9, v10);
      os_log_type_t v34 = static os_log_type_t.default.getter();
      id v35 = HKLogActivity;
      os_log_t v36 = *(os_log_t *)(v11 + 16);
      ((void (*)(char *, char *, uint64_t))v36)(v13, v20, v10);
      if (os_log_type_enabled(v35, v34))
      {
        swift_bridgeObjectRetain_n();
        os_log_t v59 = v35;
        uint64_t v37 = swift_slowAlloc();
        os_log_t v60 = v36;
        uint64_t v38 = v37;
        uint64_t v58 = swift_slowAlloc();
        uint64_t v63 = v58;
        *(_DWORD *)uint64_t v38 = 136315394;
        uint64_t v56 = v38 + 4;
        swift_bridgeObjectRetain();
        uint64_t v39 = Array.description.getter();
        int v57 = v34;
        unint64_t v41 = v40;
        swift_bridgeObjectRelease();
        uint64_t v62 = sub_10008F1F4(v39, v41, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v38 + 12) = 2080;
        sub_10025C5CC(&qword_100951D58, 255, (void (*)(uint64_t))&type metadata accessor for URLRequest);
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v62 = sub_10008F1F4(v42, v43, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v44 = *(void (**)(char *, uint64_t))(v11 + 8);
        v44(v13, v10);
        os_log_t v45 = v59;
        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v57, "[AppStoreQuery] Successfully encoded URL request for identifiers %s and request %s", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        os_log_t v36 = v60;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v44 = *(void (**)(char *, uint64_t))(v11 + 8);
        v44(v13, v10);
      }
      ((void (*)(char *, char *, uint64_t))v36)(v16, v20, v10);
      sub_1000AFA94(&qword_100951D78);
      CheckedContinuation.resume(returning:)();
      return ((uint64_t (*)(char *, uint64_t))v44)(v20, v10);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))(v9, 1, 1, v10, v18);
  }
  sub_10008DB18((uint64_t)v9, &qword_100951D80);
  os_log_type_t v46 = static os_log_type_t.error.getter();
  os_log_type_t v47 = (void *)HKLogActivity;
  os_log_type_t v48 = v46;
  if (os_log_type_enabled(HKLogActivity, v46))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v49 = v47;
    unint64_t v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)unint64_t v50 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v51 = Array.description.getter();
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    uint64_t v62 = sub_10008F1F4(v51, v53, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v49, v48, "[AppStoreQuery] Unable to cast AMSURLRequest for identifiers %s.", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  sub_10025B768();
  uint64_t v54 = swift_allocError();
  *uint64_t v55 = 0;
  uint64_t v63 = v54;
  sub_1000AFA94(&qword_100951D78);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_1002575BC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_1000AFA94((uint64_t *)&unk_10094B790);
  __chkstk_darwin(v7 - 8);
  __n128 v9 = ((char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URLComponents();
  __chkstk_darwin(*(void *)(v10 - 8));
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)(v3 + 136);
  uint64_t v62 = v14;
  if (v13)
  {
    uint64_t v15 = *(void **)(v3 + 144);
    if (v15)
    {
      LODWORD(v58) = a2;
      os_log_t v59 = v9;
      os_log_t v60 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v61 = a3;
      if (v16)
      {
        uint64_t v57 = v10;
        uint64_t v55 = v13;
        id v17 = v13;
        uint64_t v56 = v15;
        id v18 = v15;
        swift_bridgeObjectRetain();
        uint64_t v19 = 0;
        id v20 = _swiftEmptyArrayStorage;
        do
        {
          if (*(unsigned char *)(a1 + v19 + 32)) {
            uint64_t v21 = 0x3434333734393431;
          }
          else {
            uint64_t v21 = 0x3235333734393431;
          }
          if (*(unsigned char *)(a1 + v19 + 32)) {
            unint64_t v22 = 0xEA00000000003037;
          }
          else {
            unint64_t v22 = 0xEA00000000003631;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v20 = sub_100084014(0, v20[2] + 1, 1, v20);
          }
          unint64_t v24 = v20[2];
          unint64_t v23 = v20[3];
          if (v24 >= v23 >> 1) {
            id v20 = sub_100084014((void *)(v23 > 1), v24 + 1, 1, v20);
          }
          ++v19;
          id v20[2] = v24 + 1;
          uint64_t v25 = &v20[2 * v24];
          v25[4] = v21;
          v25[5] = v22;
        }
        while (v16 != v19);
        swift_bridgeObjectRelease();
        uint64_t v12 = v60;
        a3 = v61;
        uint64_t v15 = v56;
        uint64_t v10 = v57;
        uint64_t v13 = v55;
        if (v20[2]) {
          goto LABEL_19;
        }
      }
      else
      {
        id v31 = v13;
        id v32 = v15;
        id v20 = _swiftEmptyArrayStorage;
        if (_swiftEmptyArrayStorage[2])
        {
LABEL_19:
          v64[0] = (uint64_t)v20;
          sub_1000AFA94((uint64_t *)&unk_10094B1F0);
          sub_1000B1A84();
          uint64_t v57 = BidirectionalCollection<>.joined(separator:)();
          swift_bridgeObjectRelease();
          URLComponents.init()();
          URLComponents.scheme.setter();
          id v27 = [v15 absoluteString];
          uint64_t v54 = a1;
          if (v27)
          {
            uint64_t v28 = v27;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          URLComponents.host.setter();
          v64[0] = 0;
          v64[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(32);
          swift_bridgeObjectRelease();
          strcpy((char *)v64, "/v1/editorial/");
          HIBYTE(v64[1]) = -18;
          id v36 = [v13 description:v54];
          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v39 = v38;

          v40._uint64_t countAndFlagsBits = v37;
          v40._object = v39;
          String.append(_:)(v40);
          swift_bridgeObjectRelease();
          v41._object = (void *)0x80000001007BBB00;
          v41._uint64_t countAndFlagsBits = 0xD000000000000010;
          String.append(_:)(v41);
          URLComponents.path.setter();
          sub_1000AFA94(&qword_10095B800);
          type metadata accessor for URLQueryItem();
          *(_OWORD *)(swift_allocObject() + 16) = xmmword_10074E640;
          URLQueryItem.init(name:value:)();
          swift_bridgeObjectRelease();
          URLQueryItem.init(name:value:)();
          swift_bridgeObjectRelease();
          URLComponents.queryItems.setter();
          os_log_t v42 = v59;
          URLComponents.url.getter();
          uint64_t v43 = type metadata accessor for URL();
          if ((*(unsigned int (**)(os_log_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v42, 1, v43) == 1)
          {
            sub_10008DB18((uint64_t)v42, (uint64_t *)&unk_10094B790);
            os_log_type_t v44 = static os_log_type_t.error.getter();
            os_log_t v45 = (void *)HKLogActivity;
            os_log_type_t v46 = v44;
            BOOL v47 = os_log_type_enabled(HKLogActivity, v44);
            swift_bridgeObjectRetain();
            if (v47)
            {
              swift_bridgeObjectRetain();
              os_log_t v59 = v45;
              os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
              v64[0] = swift_slowAlloc();
              *(_DWORD *)os_log_type_t v48 = 136315138;
              uint64_t v58 = v48 + 4;
              swift_bridgeObjectRetain();
              uint64_t v49 = Array.description.getter();
              unint64_t v51 = v50;
              swift_bridgeObjectRelease();
              uint64_t v63 = sub_10008F1F4(v49, v51, v64);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              os_log_t v52 = v59;
              _os_log_impl((void *)&_mh_execute_header, v59, v46, "[AppStoreQuery] Unable to create URL for identifiers %s", v48, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease();
            }

            (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v10);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v61, 1, 1, v10);
          }
          else
          {

            sub_10008DB18((uint64_t)v42, (uint64_t *)&unk_10094B790);
            uint64_t v53 = v61;
            (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v61, v12, v10);
            return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v53, 0, 1, v10);
          }
        }
      }
      swift_bridgeObjectRelease();
      static os_log_type_t.error.getter();
      id v33 = HKLogActivity;
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      id v29 = v13;
      static os_log_type_t.error.getter();
      id v30 = HKLogActivity;
      os_log(_:dso:log:_:_:)();
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    id v26 = HKLogActivity;
    os_log(_:dso:log:_:_:)();
  }
  os_log_type_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);

  return v34(a3, 1, 1, v10);
}

uint64_t sub_100257E1C(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_100257E3C, v1, 0);
}

uint64_t sub_100257E3C()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void **)(v1 + 152);
  v0[5] = v2;
  if (v2)
  {
    uint64_t v3 = v0[3];
    id v4 = v2;
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    id v6 = [v4 dataTaskPromiseWithRequest:isa];
    v0[6] = v6;

    uint64_t v8 = sub_10025C5CC(&qword_100951D48, v7, (void (*)(uint64_t))type metadata accessor for AppStoreQuery);
    uint64_t v9 = swift_task_alloc();
    v0[7] = v9;
    *(void *)(v9 + 16) = v3;
    *(void *)(v9 + 24) = v6;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[8] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100258080;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v1, v8, 0xD000000000000015, 0x80000001007BBA20, sub_10025C2D4, v9, &type metadata for EditorialItemsList);
  }
  else
  {
    static os_log_type_t.error.getter();
    id v11 = HKLogActivity;
    os_log(_:dso:log:_:_:)();

    sub_10025B768();
    swift_allocError();
    *uint64_t v12 = 7;
    swift_willThrow();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100258080()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    id v4 = sub_100258214;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 32);
    swift_task_dealloc();
    id v4 = sub_1002581A8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002581A8()
{
  uint64_t v1 = *(void **)(v0 + 40);

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100258214()
{
  uint64_t v1 = *(void **)(v0 + 40);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_100258288(uint64_t a1, uint64_t a2, void *a3)
{
  id v38 = a3;
  uint64_t v37 = sub_1000AFA94(&qword_100951D50);
  uint64_t v5 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v35 = v6;
  id v36 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URLRequest();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  id v33 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - v11;
  os_log_type_t v13 = static os_log_type_t.default.getter();
  uint64_t v14 = HKLogActivity;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v34 = a2;
  id v32 = v15;
  v15(v12, a2, v7);
  if (os_log_type_enabled(v14, v13))
  {
    os_log_t v30 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = a1;
    id v17 = (uint8_t *)v16;
    uint64_t v29 = swift_slowAlloc();
    aBlock[0] = v29;
    *(_DWORD *)id v17 = 136315138;
    uint64_t v28 = v17 + 4;
    sub_10025C5CC(&qword_100951D58, 255, (void (*)(uint64_t))&type metadata accessor for URLRequest);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = sub_10008F1F4(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    os_log_t v20 = v30;
    _os_log_impl((void *)&_mh_execute_header, v30, v13, "[AppStoreQuery] Begining EditorialItem download for request %s.", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v31;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }
  uint64_t v21 = v33;
  v32(v33, v34, v7);
  unint64_t v23 = v36;
  uint64_t v22 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v36, a1, v37);
  unint64_t v24 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v25 = (v9 + *(unsigned __int8 *)(v5 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v26 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v26 + v24, v21, v7);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v26 + v25, v23, v22);
  aBlock[4] = (uint64_t)sub_10025C430;
  aBlock[5] = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1002575B8;
  aBlock[3] = (uint64_t)&unk_1008BDA00;
  id v27 = _Block_copy(aBlock);
  swift_release();
  [v38 addFinishBlock:v27];
  _Block_release(v27);
}

uint64_t sub_1002586E8(void *a1, os_log_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URLRequest();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v58 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v58 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v58 - v17;
  if (a2)
  {
    unint64_t v19 = a1;
    swift_errorRetain();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    uint64_t v21 = HKLogActivity;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, a3, v8);
    if (os_log_type_enabled(v21, v20))
    {
      swift_errorRetain();
      uint64_t v58 = (uint64_t)v19;
      id v22 = v19;
      swift_errorRetain();
      os_log_t v60 = (os_log_t)v22;
      os_log_t v61 = v21;
      uint64_t v23 = swift_slowAlloc();
      os_log_t v59 = (os_log_t)swift_slowAlloc();
      uint64_t v63 = (uint64_t)a2;
      os_log_t v64 = v59;
      *(_DWORD *)uint64_t v23 = 136315650;
      uint64_t v62 = a4;
      swift_errorRetain();
      sub_1000AFA94(&qword_10095C080);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v63 = sub_10008F1F4(v24, v25, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v23 + 12) = 2080;
      sub_10025C5CC(&qword_100951D58, 255, (void (*)(uint64_t))&type metadata accessor for URLRequest);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v63 = sub_10008F1F4(v26, v27, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
      *(_WORD *)(v23 + 22) = 2080;
      uint64_t v63 = v58;
      sub_1000AFA94(&qword_100951D68);
      uint64_t v28 = Optional.description.getter();
      uint64_t v63 = sub_10008F1F4(v28, v29, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v30 = v60;

      os_log_t v31 = v61;
      _os_log_impl((void *)&_mh_execute_header, v61, v20, "[AppStoreQuery] Received an error %s downloading the request %s. Result %s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    }
    os_log_t v64 = a2;
    sub_1000AFA94(&qword_100951D50);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1)
  {
    os_log_type_t v37 = static os_log_type_t.error.getter();
    id v38 = HKLogActivity;
    uint64_t v39 = v9;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a3, v8);
    os_log_type_t v40 = v37;
    if (os_log_type_enabled(v38, v37))
    {
      os_log_t v61 = v38;
      uint64_t v41 = swift_slowAlloc();
      os_log_t v64 = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315394;
      sub_10025C5CC(&qword_100951D58, 255, (void (*)(uint64_t))&type metadata accessor for URLRequest);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v63 = sub_10008F1F4(v42, v43, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v8);
      *(_WORD *)(v41 + 12) = 2080;
      uint64_t v63 = 0;
      sub_1000AFA94(&qword_10094C908);
      uint64_t v44 = Optional.description.getter();
      uint64_t v63 = sub_10008F1F4(v44, v45, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v46 = v61;
      _os_log_impl((void *)&_mh_execute_header, v61, v40, "[AppStoreQuery] There are no apps for the request %s. The error is %s.", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v8);
    }
    sub_10025B768();
    os_log_t v56 = (os_log_t)swift_allocError();
    *uint64_t v57 = 5;
    os_log_t v64 = v56;
    sub_1000AFA94(&qword_100951D50);
    return CheckedContinuation.resume(throwing:)();
  }
  id v32 = [a1 data];
  uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10025C518();
  os_log_t v61 = v35;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v62 = a4;
  swift_release();
  os_log_t v47 = v64;
  os_log_type_t v48 = static os_log_type_t.default.getter();
  uint64_t v49 = HKLogActivity;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a3, v8);
  os_log_type_t v50 = v48;
  if (os_log_type_enabled(v49, v48))
  {
    os_log_t v59 = v49;
    os_log_t v52 = (uint8_t *)swift_slowAlloc();
    os_log_t v64 = (os_log_t)swift_slowAlloc();
    *(_DWORD *)os_log_t v52 = 136315138;
    os_log_t v60 = v47;
    sub_10025C5CC(&qword_100951D58, 255, (void (*)(uint64_t))&type metadata accessor for URLRequest);
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v63 = sub_10008F1F4(v53, v54, (uint64_t *)&v64);
    os_log_t v47 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    os_log_t v55 = v59;
    _os_log_impl((void *)&_mh_execute_header, v59, v50, "[AppStoreQuery] EditorialItem download complete for request %s.", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
  os_log_t v64 = v47;
  sub_1000AFA94(&qword_100951D50);
  CheckedContinuation.resume(returning:)();
  return sub_1000939A4(v33, (unint64_t)v61);
}

void sub_100259288(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_100259314()
{
  sub_10025B950(*(void *)(v0 + 112));

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10025936C()
{
  sub_100259314();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AppStoreQuery()
{
  return self;
}

ValueMetadata *type metadata accessor for AppStoreQueryType()
{
  return &type metadata for AppStoreQueryType;
}

unsigned char *_s10FitnessApp17AppStoreQueryTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025949CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStoreQueryAppTypeIdentifier()
{
  return &type metadata for AppStoreQueryAppTypeIdentifier;
}

uint64_t *initializeBufferWithCopyOfBuffer for AppStoreQuery.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for AppStoreQuery.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for AppStoreQuery.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for AppStoreQuery.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppStoreQuery.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AppStoreQuery.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *sub_1002596C4(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AppStoreQuery.State()
{
  return &type metadata for AppStoreQuery.State;
}

unint64_t sub_1002596F8()
{
  unint64_t result = qword_100951D18;
  if (!qword_100951D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100951D18);
  }
  return result;
}

unint64_t sub_100259750()
{
  unint64_t result = qword_100951D20;
  if (!qword_100951D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100951D20);
  }
  return result;
}

uint64_t sub_1002597A4(uint64_t a1, char a2)
{
  *(void *)(v3 + 1960) = v2;
  *(unsigned char *)(v3 + 2048) = a2;
  *(void *)(v3 + 1952) = a1;
  uint64_t v4 = type metadata accessor for URLRequest();
  *(void *)(v3 + 1968) = v4;
  *(void *)(v3 + 1976) = *(void *)(v4 - 8);
  *(void *)(v3 + 1984) = swift_task_alloc();
  return _swift_task_switch(sub_100259898, v2, 0);
}

uint64_t sub_100259898()
{
  uint64_t v35 = v0;
  unint64_t v1 = *(void *)(*(void *)(v0 + 1960) + 112);
  *(void *)(v0 + 1992) = v1;
  if (v1 >= 2)
  {
    swift_retain();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    uint64_t v6 = (void *)HKLogActivity;
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(HKLogActivity, v5))
    {
      uint64_t v8 = *(void *)(v0 + 1952);
      swift_bridgeObjectRetain_n();
      log = v6;
      uint64_t v9 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 134218242;
      *(void *)(v0 + 1936) = *(void *)(v8 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v10 = Array.description.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 1944) = sub_10008F1F4(v10, v12, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, log, v7, "[AppStoreQuery] Fetching Editorial Items for %ld identifiers %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    os_log_type_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 2000) = v13;
    uint64_t v14 = sub_1000AFA94(&qword_10095C080);
    *os_log_type_t v13 = v0;
    v13[1] = sub_100259EB4;
    return Task.value.getter(v14, v1, (char *)&type metadata for () + 8, v14, &protocol self-conformance witness table for Error);
  }
  else if (v1)
  {
    sub_10025B768();
    swift_allocError();
    *uint64_t v2 = 8;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    id v15 = [self sharedConnection];
    if (v15 && (uint64_t v16 = v15, v17 = [v15 isAppInstallationAllowed], v16, v17))
    {
      os_log_type_t v18 = static os_log_type_t.default.getter();
      unint64_t v19 = (void *)HKLogActivity;
      os_log_type_t v20 = v18;
      if (os_log_type_enabled(HKLogActivity, v18))
      {
        uint64_t v21 = *(void *)(v0 + 1952);
        swift_bridgeObjectRetain_n();
        loga = v19;
        uint64_t v22 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 134218242;
        *(void *)(v0 + 1920) = *(void *)(v21 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v22 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v23 = Array.description.getter();
        unint64_t v25 = v24;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 1928) = sub_10008F1F4(v23, v25, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, loga, v20, "[AppStoreQuery] Fetching Editorial Items for %ld identifiers %s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      char v26 = *(unsigned char *)(v0 + 2048);
      unint64_t v27 = (void *)swift_task_alloc();
      *(void *)(v0 + 2008) = v27;
      *unint64_t v27 = v0;
      v27[1] = sub_10025A400;
      uint64_t v28 = *(void *)(v0 + 1984);
      uint64_t v29 = *(void *)(v0 + 1952);
      return sub_100256218(v28, v29, v26 & 1);
    }
    else
    {
      static os_log_type_t.default.getter();
      id v30 = HKLogActivity;
      os_log(_:dso:log:_:_:)();

      swift_task_dealloc();
      os_log_t v31 = *(uint64_t (**)(void *))(v0 + 8);
      return v31(_swiftEmptyArrayStorage);
    }
  }
}

uint64_t sub_100259EB4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1960);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_10025B244;
  }
  else
  {
    uint64_t v4 = sub_10025A018;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10025A018()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void *)(v0 + 1960);
  sub_10025B950(*(void *)(v0 + 1992));
  if (*(void *)(v1 + 112))
  {
    sub_10025B768();
    swift_allocError();
    *uint64_t v2 = 8;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    id v5 = [self sharedConnection];
    if (v5 && (uint64_t v6 = v5, v7 = [v5 isAppInstallationAllowed], v6, v7))
    {
      os_log_type_t v8 = static os_log_type_t.default.getter();
      uint64_t v9 = (void *)HKLogActivity;
      os_log_type_t v10 = v8;
      if (os_log_type_enabled(HKLogActivity, v8))
      {
        uint64_t v11 = *(void *)(v0 + 1952);
        swift_bridgeObjectRetain_n();
        unint64_t v12 = v9;
        uint64_t v13 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 134218242;
        *(void *)(v0 + 1920) = *(void *)(v11 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v14 = Array.description.getter();
        unint64_t v16 = v15;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 1928) = sub_10008F1F4(v14, v16, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v12, v10, "[AppStoreQuery] Fetching Editorial Items for %ld identifiers %s", (uint8_t *)v13, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      char v17 = *(unsigned char *)(v0 + 2048);
      os_log_type_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 2008) = v18;
      *os_log_type_t v18 = v0;
      v18[1] = sub_10025A400;
      uint64_t v19 = *(void *)(v0 + 1984);
      uint64_t v20 = *(void *)(v0 + 1952);
      return sub_100256218(v19, v20, v17 & 1);
    }
    else
    {
      static os_log_type_t.default.getter();
      id v21 = HKLogActivity;
      os_log(_:dso:log:_:_:)();

      swift_task_dealloc();
      uint64_t v22 = *(uint64_t (**)(void *))(v0 + 8);
      return v22(_swiftEmptyArrayStorage);
    }
  }
}

uint64_t sub_10025A400()
{
  uint64_t v2 = (void *)*v1;
  v2[252] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[245];
    uint64_t v4 = sub_10025B62C;
  }
  else
  {
    id v5 = (void *)swift_task_alloc();
    v2[253] = v5;
    *id v5 = v2;
    v5[1] = sub_10025A5B0;
    uint64_t v3 = v2[245];
    v5[3] = v2[248];
    v5[4] = v3;
    uint64_t v4 = sub_100257E3C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10025A5B0(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[254] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[245];
  if (v1)
  {
    uint64_t v6 = sub_10025B6BC;
  }
  else
  {
    v4[255] = a1;
    uint64_t v6 = sub_10025A718;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10025A718()
{
  uint64_t v1 = _swiftEmptyArrayStorage;
  if (v0[255]) {
    uint64_t v2 = (void *)v0[255];
  }
  else {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }
  uint64_t v3 = v2[2];
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 6;
    do
    {
      uint64_t v5 = v2[v4];
      if (v5) {
        BOOL v6 = v5 == 2;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6)
      {
        if (v5 == 1)
        {
          sub_10020A888(1);
        }
        else
        {
          sub_100203FE8(v2[v4]);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v1 = sub_1001E77F4(0, v1[2] + 1, 1, v1);
          }
          unint64_t v8 = v1[2];
          unint64_t v7 = v1[3];
          if (v8 >= v7 >> 1) {
            uint64_t v1 = sub_1001E77F4((void *)(v7 > 1), v8 + 1, 1, v1);
          }
          v1[2] = v8 + 1;
          v1[v8 + 4] = v5;
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = v1[2];
  os_log_type_t v10 = _swiftEmptyArrayStorage;
  uint64_t v125 = v0;
  if (!v9)
  {
LABEL_42:
    id v123 = v0 + 239;
    uint64_t v124 = v0 + 238;
    swift_bridgeObjectRelease();
    uint64_t v24 = v10[2];
    if (v24)
    {
      uint64_t v25 = (uint64_t)(v0 + 2);
      uint64_t v26 = (uint64_t)(v0 + 26);
      uint64_t v126 = (uint64_t)(v0 + 98);
      uint64_t v119 = (uint64_t)(v0 + 122);
      uint64_t v27 = (uint64_t)(v0 + 142);
      uint64_t v113 = (uint64_t)(v0 + 182);
      uint64_t v114 = (uint64_t)(v0 + 162);
      uint64_t v117 = (uint64_t)(v0 + 202);
      uint64_t v28 = (uint64_t)(v0 + 100);
      uint64_t v108 = v0 + 166;
      uint64_t v109 = (uint64_t)(v0 + 218);
      double v111 = v0 + 57;
      double v112 = (long long *)(v0 + 50);
      uint64_t v110 = (uint64_t)(v0 + 58);
      swift_bridgeObjectRetain();
      uint64_t v29 = v24 - 1;
      uint64_t v118 = _swiftEmptyArrayStorage;
      uint64_t v30 = (uint64_t)(v10 + 6);
      uint64_t v120 = v28;
      while (1)
      {
        uint64_t v31 = *(void *)(v30 - 16);
        unint64_t v32 = *(void *)(v30 - 8);
        sub_1000AEEC8(v30, v26, &qword_10094FB08);
        sub_1000AEEC8(v26, v25, &qword_10094FB08);
        if (sub_10025B8B0(v25) == 1) {
          goto LABEL_56;
        }
        uint64_t v33 = v125[25];
        if (!v33) {
          goto LABEL_56;
        }
        uint64_t v121 = v125[24];
        sub_1000AEEC8(v26, v126, &qword_10094FB08);
        sub_1000AEEC8(v28, v27, &qword_10094FB28);
        if (sub_10025B894(v27) == 1) {
          goto LABEL_56;
        }
        sub_1000AEEC8(v27, v119, &qword_10094FB48);
        if (sub_10025B8B0(v119) == 1)
        {
          uint64_t v28 = v120;
          if (!v29) {
            goto LABEL_64;
          }
          goto LABEL_57;
        }
        if (!v125[125]) {
          break;
        }
        uint64_t v28 = v120;
        if (!v125[99] || !v32) {
          goto LABEL_56;
        }
        uint64_t v115 = v125[99];
        uint64_t v116 = v125[125];
        uint64_t v106 = v125[98];
        uint64_t v107 = v125[124];
        sub_1000AEEC8(v120, v113, &qword_10094FB28);
        sub_1000AEEC8(v113, v114, &qword_10094FB48);
        if (sub_10025B8B0(v114) == 1)
        {
          uint64_t v34 = v109;
          sub_10025B8D4(v109);
        }
        else
        {
          uint64_t v34 = (uint64_t)v108;
          sub_10025B8F4(v108);
        }
        sub_1000AEEC8(v34, v117, &qword_10094FB68);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v28 = v120;
        uint64_t v105 = sub_1002550D8(v31, v32);
        char v104 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v118 = sub_1001E75A0(0, v118[2] + 1, 1, v118);
        }
        unint64_t v37 = v118[2];
        unint64_t v36 = v118[3];
        if (v37 >= v36 >> 1) {
          uint64_t v118 = sub_1001E75A0((void *)(v36 > 1), v37 + 1, 1, v118);
        }
        v125[50] = v121;
        v125[51] = v33;
        v125[52] = v106;
        v125[53] = v115;
        v125[54] = v107;
        v125[55] = v116;
        v125[56] = v105;
        *double v111 = v104 & 1;
        sub_1000AEEC8(v117, v110, &qword_10094FB68);
        v118[2] = v37 + 1;
        id v38 = &v118[24 * v37];
        long long v39 = v112[3];
        long long v41 = *v112;
        long long v40 = v112[1];
        v38[4] = v112[2];
        v38[5] = v39;
        v38[2] = v41;
        void v38[3] = v40;
        long long v42 = v112[7];
        long long v44 = v112[4];
        long long v43 = v112[5];
        v38[8] = v112[6];
        v38[9] = v42;
        v38[6] = v44;
        v38[7] = v43;
        long long v45 = v112[11];
        long long v47 = v112[8];
        long long v46 = v112[9];
        v38[12] = v112[10];
        v38[13] = v45;
        v38[10] = v47;
        v38[11] = v46;
        if (!v29)
        {
LABEL_64:
          swift_bridgeObjectRelease_n();
          uint64_t v0 = v125;
          os_log_type_t v48 = v118;
          goto LABEL_66;
        }
LABEL_57:
        --v29;
        v30 += 208;
      }
      uint64_t v28 = v120;
LABEL_56:
      if (!v29) {
        goto LABEL_64;
      }
      goto LABEL_57;
    }
    swift_bridgeObjectRelease();
    os_log_type_t v48 = _swiftEmptyArrayStorage;
LABEL_66:
    id v49 = [self hiddenAppBundleIdentifiers];
    uint64_t v50 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    void *v123 = _swiftEmptyArrayStorage;
    uint64_t v51 = v48[2];
    if (!v51)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v53 = _swiftEmptyArrayStorage;
LABEL_83:
      os_log_type_t v89 = static os_log_type_t.default.getter();
      uint64_t v90 = (void *)HKLogActivity;
      os_log_type_t v91 = v89;
      if (os_log_type_enabled(HKLogActivity, v89))
      {
        double v92 = v90;
        id v93 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v93 = 134217984;
        swift_beginAccess();
        uint64_t v53 = (void *)*v123;
        v0[237] = *(void *)(*v123 + 16);
        uint64_t v0 = v125;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v92, v91, "[AppStoreQuery] Found %ld apps to recommend", v93, 0xCu);
        swift_slowDealloc();
      }
      if (v53[2] >= 3uLL) {
        uint64_t v94 = 3;
      }
      else {
        uint64_t v94 = v53[2];
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      id v95 = (void *)swift_dynamicCastClass();
      if (!v95)
      {
        swift_bridgeObjectRelease();
        id v95 = _swiftEmptyArrayStorage;
      }
      uint64_t v96 = v95[2];
      swift_release();
      if (v96 == v94)
      {
        NSString v97 = (void *)swift_dynamicCastClass();
        if (!v97)
        {
          swift_bridgeObjectRelease();
          NSString v97 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        NSString v97 = sub_10036983C((uint64_t)v53, (uint64_t)(v53 + 4), 0, (2 * v94) | 1);
      }
      uint64_t v98 = v0[248];
      uint64_t v99 = v0[247];
      uint64_t v100 = v0[246];
      swift_bridgeObjectRelease();
      uint64_t v101 = sub_1001E53A4((uint64_t)v97);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v100);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      id v102 = (uint64_t (*)(void *))v0[1];
      return v102(v101);
    }
    uint64_t v122 = v50;
    os_log_t v52 = v0 + 74;
    swift_bridgeObjectRetain();
    uint64_t v127 = v51 - 1;
    uint64_t v53 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; i += 24)
    {
      os_log_t v56 = v48;
      long long v57 = *(_OWORD *)&v48[i];
      long long v58 = *(_OWORD *)&v48[i + 2];
      long long v59 = *(_OWORD *)&v48[i + 6];
      *((_OWORD *)v52 + 2) = *(_OWORD *)&v48[i + 4];
      *((_OWORD *)v52 + 3) = v59;
      long long v60 = *(_OWORD *)&v48[i + 8];
      long long v61 = *(_OWORD *)&v48[i + 10];
      long long v62 = *(_OWORD *)&v48[i + 14];
      *((_OWORD *)v52 + 6) = *(_OWORD *)&v48[i + 12];
      *((_OWORD *)v52 + 7) = v62;
      *((_OWORD *)v52 + 4) = v60;
      *((_OWORD *)v52 + 5) = v61;
      long long v63 = *(_OWORD *)&v48[i + 16];
      long long v64 = *(_OWORD *)&v48[i + 18];
      long long v65 = *(_OWORD *)&v48[i + 22];
      *((_OWORD *)v52 + 10) = *(_OWORD *)&v48[i + 20];
      *((_OWORD *)v52 + 11) = v65;
      *((_OWORD *)v52 + 8) = v63;
      *((_OWORD *)v52 + 9) = v64;
      *(_OWORD *)os_log_t v52 = v57;
      *((_OWORD *)v52 + 1) = v58;
      uint64_t v66 = v125[78];
      uint64_t v67 = v125[79];
      id v68 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain();
      sub_1001F0D9C(v52);
      NSString v69 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v125[238] = 0;
      id v70 = [v68 initWithBundleIdentifier:v69 allowPlaceholder:0 error:v124];

      double v71 = (void *)v125[238];
      if (v70)
      {
        id v72 = v71;
        id v73 = [v70 applicationState];
        unsigned __int8 v74 = [v73 isInstalled];

        if (v74)
        {
          swift_bridgeObjectRetain();
          char v75 = sub_1003B0DF0(v66, v67, v122);

          swift_bridgeObjectRelease();
          if (v75)
          {
            sub_10025B7BC(v52);
            os_log_type_t v48 = v56;
            uint64_t v55 = v127;
            if (!v127) {
              goto LABEL_81;
            }
            goto LABEL_69;
          }
        }
        else
        {
        }
      }
      else
      {
        id v76 = v71;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
      os_log_type_t v48 = v56;
      uint64_t v55 = v127;
      sub_1001F0D9C(v52);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v53 = sub_1001E75A0(0, v53[2] + 1, 1, v53);
      }
      unint64_t v78 = v53[2];
      unint64_t v77 = v53[3];
      if (v78 >= v77 >> 1) {
        uint64_t v53 = sub_1001E75A0((void *)(v77 > 1), v78 + 1, 1, v53);
      }
      v53[2] = v78 + 1;
      id v79 = &v53[24 * v78];
      long long v80 = *(_OWORD *)v52;
      long long v81 = *((_OWORD *)v52 + 1);
      long long v82 = *((_OWORD *)v52 + 3);
      v79[4] = *((_OWORD *)v52 + 2);
      v79[5] = v82;
      v79[2] = v80;
      v79[3] = v81;
      long long v83 = *((_OWORD *)v52 + 4);
      long long v84 = *((_OWORD *)v52 + 5);
      long long v85 = *((_OWORD *)v52 + 7);
      v79[8] = *((_OWORD *)v52 + 6);
      v79[9] = v85;
      v79[6] = v83;
      unsigned char v79[7] = v84;
      long long v86 = *((_OWORD *)v52 + 8);
      long long v87 = *((_OWORD *)v52 + 9);
      long long v88 = *((_OWORD *)v52 + 11);
      v79[12] = *((_OWORD *)v52 + 10);
      v79[13] = v88;
      v79[10] = v86;
      v79[11] = v87;
      sub_10025B7BC(v52);
      void *v123 = v53;
      if (!v127)
      {
LABEL_81:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v0 = v125;
        goto LABEL_83;
      }
LABEL_69:
      uint64_t v127 = v55 - 1;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = v1[v11 + 4];
    uint64_t v13 = *(void *)(v12 + 16);
    int64_t v14 = v10[2];
    int64_t v15 = v14 + v13;
    if (__OFADD__(v14, v13)) {
      break;
    }
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v15 <= v10[3] >> 1)
    {
      if (*(void *)(v12 + 16)) {
        goto LABEL_32;
      }
    }
    else
    {
      if (v14 <= v15) {
        int64_t v17 = v14 + v13;
      }
      else {
        int64_t v17 = v14;
      }
      os_log_type_t v10 = sub_1001E76C8(isUniquelyReferenced_nonNull_native, v17, 1, v10);
      if (*(void *)(v12 + 16))
      {
LABEL_32:
        uint64_t v18 = v10[2];
        if ((v10[3] >> 1) - v18 < v13) {
          goto LABEL_98;
        }
        unint64_t v19 = (unint64_t)&v10[26 * v18 + 4];
        if (v12 + 32 < v19 + 208 * v13 && v19 < v12 + 32 + 208 * v13) {
          return _fatalErrorMessage(_:_:file:line:flags:)();
        }
        swift_arrayInitWithCopy();
        if (v13)
        {
          uint64_t v21 = v10[2];
          BOOL v22 = __OFADD__(v21, v13);
          uint64_t v23 = v21 + v13;
          if (v22) {
            goto LABEL_99;
          }
          void v10[2] = v23;
        }
        goto LABEL_22;
      }
    }
    if (v13) {
      goto LABEL_97;
    }
LABEL_22:
    ++v11;
    swift_bridgeObjectRelease();
    if (v9 == v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)();
}